{{ $name := .Name -}}
{{ $lowerName := .Name |ToLower -}}
package awsclients

import (
{{- range .Imports }}
	"github.com/aws/aws-sdk-go/service/{{ . }}"
{{- end }}
	"go.temporal.io/sdk/workflow"
	"temporal.io/aws-sdk/awsactivities"
)

type {{ $name }}Client interface {
{{- range $i, $method := .Methods }}
{{- $prefix := ToPrefix $method.OutputPackage }}
{{- if HasPrefix $method.Name "Wait" }}
{{"    "}}{{ $method.Name }}(ctx workflow.Context, input *{{ $method.InputPackage }}.{{ $method.Input }}) error
{{- else }}
{{ "    "}}{{ $method.Name }}(ctx workflow.Context, input *{{ $method.InputPackage }}.{{ $method.Input }}) (*{{ $method.OutputPackage }}.{{ $method.Output }}, error)
{{ "    "}}{{ $method.Name }}Async(ctx workflow.Context, input *{{ $method.InputPackage }}.{{ $method.Input }}) *{{$prefix}}{{ $method.Name }}Result
{{ end }}
{{- end -}}
}
{{range $i, $method := .Methods }}
{{- $prefix := ToPrefix $method.OutputPackage }}
{{- if and (not (HasPrefix $method.Name "Wait")) (not (IsDuplicatedOutput $method.OutputPackage $method.Output)) }}
type {{ $prefix }}{{ $method.Name }}Result struct {
	Result workflow.Future
}

func (r *{{ $prefix }}{{ $method.Name }}Result) Get(ctx workflow.Context) (*{{ $method.OutputPackage }}.{{ $method.Output }}, error) {
    var output {{ $method.OutputPackage }}.{{ $method.Output }}
    err := r.Result.Get(ctx, &output)
    return &output, err
}
{{ end }}
{{- end }}
type {{ $name }}Stub struct {
    activities awsactivities.{{ $name }}Activities
}

func New{{ $name }}Stub() {{ $name }}Client {
    return &{{ $name }}Stub{}
}
{{- range $i, $method := .Methods }}
{{- $prefix := ToPrefix $method.OutputPackage }}
{{ if HasPrefix $method.Name "Wait" }}
func (a *{{ $name }}Stub) {{ $method.Name }}(ctx workflow.Context, input *{{ $method.InputPackage }}.{{ $method.Input }}) error {
    return workflow.ExecuteActivity(ctx, a.activities.{{$method.Name}}, input).Get(ctx, nil)
}

func (a *{{ $name }}Stub) {{ $method.Name }}Async(ctx workflow.Context, input *{{ $method.InputPackage }}.{{ $method.Input }}) workflow.Future {
    return workflow.ExecuteActivity(ctx, a.activities.{{$method.Name}}, input)
}
{{ else }}
func (a *{{ $name }}Stub) {{ $method.Name }}(ctx workflow.Context, input *{{ $method.InputPackage }}.{{ $method.Input }}) (*{{ $method.OutputPackage }}.{{ $method.Output }}, error) {
    var output {{ $method.OutputPackage }}.{{ $method.Output }}
    err := workflow.ExecuteActivity(ctx, a.activities.{{$method.Name}}, input).Get(ctx, &output)
    return &output, err
}

func (a *{{ $name }}Stub) {{ $method.Name }}Async(ctx workflow.Context, input *{{ $method.InputPackage }}.{{ $method.Input }}) *{{$prefix}}{{ $method.Name }}Result {
    future := workflow.ExecuteActivity(ctx, a.activities.{{$method.Name}}, input)
    return &{{$prefix}}{{ $method.Name }}Result{Result: future}
}
{{- end }}
{{- end }}
