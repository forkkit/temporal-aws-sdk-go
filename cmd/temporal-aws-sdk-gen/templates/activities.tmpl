
{{ $name := .Name -}}
{{ $lowerName := .Name |ToLower -}}
package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
{{- range .Imports }}
	"github.com/aws/aws-sdk-go/service/{{ . }}"
{{- end }}
	"github.com/aws/aws-sdk-go/service/{{ $lowerName }}/{{ $lowerName }}iface"
	"go.temporal.io/sdk/activity"
)

// ensure that activity import is valid even if not used by the generated code
type _ = activity.Info

type {{ $name }}Activities struct {
    client {{ $lowerName }}iface.{{ $name }}API
}

func New{{ $name }}Activities(session *session.Session, config ...*aws.Config) *{{ $name }}Activities {
    client := {{ $lowerName }}.New(session, config...)
    return &{{ $name }}Activities{client: client}
}

{{- range $i, $method := .Methods }}

{{ if IsNil $method.Output -}}
func (a *{{ $name }}Activities) {{ $method.Name }}(ctx context.Context, input *{{ $method.Input.Package }}.{{ $method.Input.Name }}) error {
    {{- if HasField $method.Input "ClientToken" }}
	// Use the same token during retries
	if input.ClientToken == nil {
		info := activity.GetInfo(ctx)
		token := info.WorkflowExecution.RunID + "-" + info.ActivityID
		input.ClientToken = &token
	}
    {{- end }}
    return a.client.{{ $method.Name }}WithContext(ctx, input)

}
{{- else -}}
func (a *{{ $name }}Activities) {{ $method.Name }}(ctx context.Context, input *{{ $method.Input.Package }}.{{ $method.Input.Name }}) (*{{ $method.Output.Package }}.{{ $method.Output.Name }}, error) {
    {{- if HasField $method.Input "ClientToken" }}
	// Use the same token during retries
	if input.ClientToken == nil {
		info := activity.GetInfo(ctx)
		token := info.WorkflowExecution.RunID + "-" + info.ActivityID
		input.ClientToken = &token
	}
    {{- end }}
    return a.client.{{ $method.Name }}WithContext(ctx, input)
}
{{- end }}

{{- end }}
