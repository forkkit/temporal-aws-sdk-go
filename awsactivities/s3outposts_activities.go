// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3outposts"
	"github.com/aws/aws-sdk-go/service/s3outposts/s3outpostsiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

type S3OutpostsActivities struct {
	client s3outpostsiface.S3OutpostsAPI

	sessionFactory SessionFactory
}

func NewS3OutpostsActivities(sess *session.Session, config ...*aws.Config) *S3OutpostsActivities {
	client := s3outposts.New(sess, config...)
	return &S3OutpostsActivities{client: client}
}

func NewS3OutpostsActivitiesWithSessionFactory(sessionFactory SessionFactory) *S3OutpostsActivities {
	return &S3OutpostsActivities{sessionFactory: sessionFactory}
}

func (a *S3OutpostsActivities) getClient(ctx context.Context) (s3outpostsiface.S3OutpostsAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return s3outposts.New(sess), nil
}

func (a *S3OutpostsActivities) CreateEndpoint(ctx context.Context, input *s3outposts.CreateEndpointInput) (*s3outposts.CreateEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateEndpointWithContext(ctx, input)
}

func (a *S3OutpostsActivities) DeleteEndpoint(ctx context.Context, input *s3outposts.DeleteEndpointInput) (*s3outposts.DeleteEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteEndpointWithContext(ctx, input)
}

func (a *S3OutpostsActivities) ListEndpoints(ctx context.Context, input *s3outposts.ListEndpointsInput) (*s3outposts.ListEndpointsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListEndpointsWithContext(ctx, input)
}
