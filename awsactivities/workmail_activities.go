// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/workmail"
	"github.com/aws/aws-sdk-go/service/workmail/workmailiface"
	"temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken
type _ request.Option

type WorkMailActivities struct {
	client workmailiface.WorkMailAPI

	sessionFactory SessionFactory
}

func NewWorkMailActivities(sess *session.Session, config ...*aws.Config) *WorkMailActivities {
	client := workmail.New(sess, config...)
	return &WorkMailActivities{client: client}
}

func NewWorkMailActivitiesWithSessionFactory(sessionFactory SessionFactory) *WorkMailActivities {
	return &WorkMailActivities{sessionFactory: sessionFactory}
}

func (a *WorkMailActivities) getClient(ctx context.Context) (workmailiface.WorkMailAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return workmail.New(sess), nil
}

func (a *WorkMailActivities) AssociateDelegateToResource(ctx context.Context, input *workmail.AssociateDelegateToResourceInput) (*workmail.AssociateDelegateToResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateDelegateToResourceWithContext(ctx, input)
}

func (a *WorkMailActivities) AssociateMemberToGroup(ctx context.Context, input *workmail.AssociateMemberToGroupInput) (*workmail.AssociateMemberToGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateMemberToGroupWithContext(ctx, input)
}

func (a *WorkMailActivities) CreateAlias(ctx context.Context, input *workmail.CreateAliasInput) (*workmail.CreateAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateAliasWithContext(ctx, input)
}

func (a *WorkMailActivities) CreateGroup(ctx context.Context, input *workmail.CreateGroupInput) (*workmail.CreateGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateGroupWithContext(ctx, input)
}

func (a *WorkMailActivities) CreateResource(ctx context.Context, input *workmail.CreateResourceInput) (*workmail.CreateResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateResourceWithContext(ctx, input)
}

func (a *WorkMailActivities) CreateUser(ctx context.Context, input *workmail.CreateUserInput) (*workmail.CreateUserOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateUserWithContext(ctx, input)
}

func (a *WorkMailActivities) DeleteAccessControlRule(ctx context.Context, input *workmail.DeleteAccessControlRuleInput) (*workmail.DeleteAccessControlRuleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteAccessControlRuleWithContext(ctx, input)
}

func (a *WorkMailActivities) DeleteAlias(ctx context.Context, input *workmail.DeleteAliasInput) (*workmail.DeleteAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteAliasWithContext(ctx, input)
}

func (a *WorkMailActivities) DeleteGroup(ctx context.Context, input *workmail.DeleteGroupInput) (*workmail.DeleteGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteGroupWithContext(ctx, input)
}

func (a *WorkMailActivities) DeleteMailboxPermissions(ctx context.Context, input *workmail.DeleteMailboxPermissionsInput) (*workmail.DeleteMailboxPermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteMailboxPermissionsWithContext(ctx, input)
}

func (a *WorkMailActivities) DeleteResource(ctx context.Context, input *workmail.DeleteResourceInput) (*workmail.DeleteResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteResourceWithContext(ctx, input)
}

func (a *WorkMailActivities) DeleteRetentionPolicy(ctx context.Context, input *workmail.DeleteRetentionPolicyInput) (*workmail.DeleteRetentionPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteRetentionPolicyWithContext(ctx, input)
}

func (a *WorkMailActivities) DeleteUser(ctx context.Context, input *workmail.DeleteUserInput) (*workmail.DeleteUserOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteUserWithContext(ctx, input)
}

func (a *WorkMailActivities) DeregisterFromWorkMail(ctx context.Context, input *workmail.DeregisterFromWorkMailInput) (*workmail.DeregisterFromWorkMailOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeregisterFromWorkMailWithContext(ctx, input)
}

func (a *WorkMailActivities) DescribeGroup(ctx context.Context, input *workmail.DescribeGroupInput) (*workmail.DescribeGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeGroupWithContext(ctx, input)
}

func (a *WorkMailActivities) DescribeOrganization(ctx context.Context, input *workmail.DescribeOrganizationInput) (*workmail.DescribeOrganizationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeOrganizationWithContext(ctx, input)
}

func (a *WorkMailActivities) DescribeResource(ctx context.Context, input *workmail.DescribeResourceInput) (*workmail.DescribeResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeResourceWithContext(ctx, input)
}

func (a *WorkMailActivities) DescribeUser(ctx context.Context, input *workmail.DescribeUserInput) (*workmail.DescribeUserOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeUserWithContext(ctx, input)
}

func (a *WorkMailActivities) DisassociateDelegateFromResource(ctx context.Context, input *workmail.DisassociateDelegateFromResourceInput) (*workmail.DisassociateDelegateFromResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateDelegateFromResourceWithContext(ctx, input)
}

func (a *WorkMailActivities) DisassociateMemberFromGroup(ctx context.Context, input *workmail.DisassociateMemberFromGroupInput) (*workmail.DisassociateMemberFromGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateMemberFromGroupWithContext(ctx, input)
}

func (a *WorkMailActivities) GetAccessControlEffect(ctx context.Context, input *workmail.GetAccessControlEffectInput) (*workmail.GetAccessControlEffectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetAccessControlEffectWithContext(ctx, input)
}

func (a *WorkMailActivities) GetDefaultRetentionPolicy(ctx context.Context, input *workmail.GetDefaultRetentionPolicyInput) (*workmail.GetDefaultRetentionPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetDefaultRetentionPolicyWithContext(ctx, input)
}

func (a *WorkMailActivities) GetMailboxDetails(ctx context.Context, input *workmail.GetMailboxDetailsInput) (*workmail.GetMailboxDetailsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetMailboxDetailsWithContext(ctx, input)
}

func (a *WorkMailActivities) ListAccessControlRules(ctx context.Context, input *workmail.ListAccessControlRulesInput) (*workmail.ListAccessControlRulesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListAccessControlRulesWithContext(ctx, input)
}

func (a *WorkMailActivities) ListAliases(ctx context.Context, input *workmail.ListAliasesInput) (*workmail.ListAliasesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListAliasesWithContext(ctx, input)
}

func (a *WorkMailActivities) ListGroupMembers(ctx context.Context, input *workmail.ListGroupMembersInput) (*workmail.ListGroupMembersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListGroupMembersWithContext(ctx, input)
}

func (a *WorkMailActivities) ListGroups(ctx context.Context, input *workmail.ListGroupsInput) (*workmail.ListGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListGroupsWithContext(ctx, input)
}

func (a *WorkMailActivities) ListMailboxPermissions(ctx context.Context, input *workmail.ListMailboxPermissionsInput) (*workmail.ListMailboxPermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListMailboxPermissionsWithContext(ctx, input)
}

func (a *WorkMailActivities) ListOrganizations(ctx context.Context, input *workmail.ListOrganizationsInput) (*workmail.ListOrganizationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListOrganizationsWithContext(ctx, input)
}

func (a *WorkMailActivities) ListResourceDelegates(ctx context.Context, input *workmail.ListResourceDelegatesInput) (*workmail.ListResourceDelegatesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListResourceDelegatesWithContext(ctx, input)
}

func (a *WorkMailActivities) ListResources(ctx context.Context, input *workmail.ListResourcesInput) (*workmail.ListResourcesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListResourcesWithContext(ctx, input)
}

func (a *WorkMailActivities) ListTagsForResource(ctx context.Context, input *workmail.ListTagsForResourceInput) (*workmail.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsForResourceWithContext(ctx, input)
}

func (a *WorkMailActivities) ListUsers(ctx context.Context, input *workmail.ListUsersInput) (*workmail.ListUsersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListUsersWithContext(ctx, input)
}

func (a *WorkMailActivities) PutAccessControlRule(ctx context.Context, input *workmail.PutAccessControlRuleInput) (*workmail.PutAccessControlRuleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutAccessControlRuleWithContext(ctx, input)
}

func (a *WorkMailActivities) PutMailboxPermissions(ctx context.Context, input *workmail.PutMailboxPermissionsInput) (*workmail.PutMailboxPermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutMailboxPermissionsWithContext(ctx, input)
}

func (a *WorkMailActivities) PutRetentionPolicy(ctx context.Context, input *workmail.PutRetentionPolicyInput) (*workmail.PutRetentionPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutRetentionPolicyWithContext(ctx, input)
}

func (a *WorkMailActivities) RegisterToWorkMail(ctx context.Context, input *workmail.RegisterToWorkMailInput) (*workmail.RegisterToWorkMailOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RegisterToWorkMailWithContext(ctx, input)
}

func (a *WorkMailActivities) ResetPassword(ctx context.Context, input *workmail.ResetPasswordInput) (*workmail.ResetPasswordOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ResetPasswordWithContext(ctx, input)
}

func (a *WorkMailActivities) TagResource(ctx context.Context, input *workmail.TagResourceInput) (*workmail.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TagResourceWithContext(ctx, input)
}

func (a *WorkMailActivities) UntagResource(ctx context.Context, input *workmail.UntagResourceInput) (*workmail.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UntagResourceWithContext(ctx, input)
}

func (a *WorkMailActivities) UpdateMailboxQuota(ctx context.Context, input *workmail.UpdateMailboxQuotaInput) (*workmail.UpdateMailboxQuotaOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateMailboxQuotaWithContext(ctx, input)
}

func (a *WorkMailActivities) UpdatePrimaryEmailAddress(ctx context.Context, input *workmail.UpdatePrimaryEmailAddressInput) (*workmail.UpdatePrimaryEmailAddressOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdatePrimaryEmailAddressWithContext(ctx, input)
}

func (a *WorkMailActivities) UpdateResource(ctx context.Context, input *workmail.UpdateResourceInput) (*workmail.UpdateResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateResourceWithContext(ctx, input)
}
