// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/iot1clickdevicesservice"
	"github.com/aws/aws-sdk-go/service/iot1clickdevicesservice/iot1clickdevicesserviceiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken
type _ request.Option

type IoT1ClickDevicesServiceActivities struct {
	client iot1clickdevicesserviceiface.IoT1ClickDevicesServiceAPI

	sessionFactory SessionFactory
}

func NewIoT1ClickDevicesServiceActivities(sess *session.Session, config ...*aws.Config) *IoT1ClickDevicesServiceActivities {
	client := iot1clickdevicesservice.New(sess, config...)
	return &IoT1ClickDevicesServiceActivities{client: client}
}

func NewIoT1ClickDevicesServiceActivitiesWithSessionFactory(sessionFactory SessionFactory) *IoT1ClickDevicesServiceActivities {
	return &IoT1ClickDevicesServiceActivities{sessionFactory: sessionFactory}
}

func (a *IoT1ClickDevicesServiceActivities) getClient(ctx context.Context) (iot1clickdevicesserviceiface.IoT1ClickDevicesServiceAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return iot1clickdevicesservice.New(sess), nil
}

func (a *IoT1ClickDevicesServiceActivities) ClaimDevicesByClaimCode(ctx context.Context, input *iot1clickdevicesservice.ClaimDevicesByClaimCodeInput) (*iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ClaimDevicesByClaimCodeWithContext(ctx, input)
}

func (a *IoT1ClickDevicesServiceActivities) DescribeDevice(ctx context.Context, input *iot1clickdevicesservice.DescribeDeviceInput) (*iot1clickdevicesservice.DescribeDeviceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDeviceWithContext(ctx, input)
}

func (a *IoT1ClickDevicesServiceActivities) FinalizeDeviceClaim(ctx context.Context, input *iot1clickdevicesservice.FinalizeDeviceClaimInput) (*iot1clickdevicesservice.FinalizeDeviceClaimOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.FinalizeDeviceClaimWithContext(ctx, input)
}

func (a *IoT1ClickDevicesServiceActivities) GetDeviceMethods(ctx context.Context, input *iot1clickdevicesservice.GetDeviceMethodsInput) (*iot1clickdevicesservice.GetDeviceMethodsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetDeviceMethodsWithContext(ctx, input)
}

func (a *IoT1ClickDevicesServiceActivities) InitiateDeviceClaim(ctx context.Context, input *iot1clickdevicesservice.InitiateDeviceClaimInput) (*iot1clickdevicesservice.InitiateDeviceClaimOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.InitiateDeviceClaimWithContext(ctx, input)
}

func (a *IoT1ClickDevicesServiceActivities) InvokeDeviceMethod(ctx context.Context, input *iot1clickdevicesservice.InvokeDeviceMethodInput) (*iot1clickdevicesservice.InvokeDeviceMethodOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.InvokeDeviceMethodWithContext(ctx, input)
}

func (a *IoT1ClickDevicesServiceActivities) ListDeviceEvents(ctx context.Context, input *iot1clickdevicesservice.ListDeviceEventsInput) (*iot1clickdevicesservice.ListDeviceEventsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListDeviceEventsWithContext(ctx, input)
}

func (a *IoT1ClickDevicesServiceActivities) ListDevices(ctx context.Context, input *iot1clickdevicesservice.ListDevicesInput) (*iot1clickdevicesservice.ListDevicesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListDevicesWithContext(ctx, input)
}

func (a *IoT1ClickDevicesServiceActivities) ListTagsForResource(ctx context.Context, input *iot1clickdevicesservice.ListTagsForResourceInput) (*iot1clickdevicesservice.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsForResourceWithContext(ctx, input)
}

func (a *IoT1ClickDevicesServiceActivities) TagResource(ctx context.Context, input *iot1clickdevicesservice.TagResourceInput) (*iot1clickdevicesservice.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TagResourceWithContext(ctx, input)
}

func (a *IoT1ClickDevicesServiceActivities) UnclaimDevice(ctx context.Context, input *iot1clickdevicesservice.UnclaimDeviceInput) (*iot1clickdevicesservice.UnclaimDeviceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UnclaimDeviceWithContext(ctx, input)
}

func (a *IoT1ClickDevicesServiceActivities) UntagResource(ctx context.Context, input *iot1clickdevicesservice.UntagResourceInput) (*iot1clickdevicesservice.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UntagResourceWithContext(ctx, input)
}

func (a *IoT1ClickDevicesServiceActivities) UpdateDeviceState(ctx context.Context, input *iot1clickdevicesservice.UpdateDeviceStateInput) (*iot1clickdevicesservice.UpdateDeviceStateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateDeviceStateWithContext(ctx, input)
}
