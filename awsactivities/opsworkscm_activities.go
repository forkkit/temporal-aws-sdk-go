// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/opsworkscm"
	"github.com/aws/aws-sdk-go/service/opsworkscm/opsworkscmiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

type OpsWorksCMActivities struct {
	client opsworkscmiface.OpsWorksCMAPI

	sessionFactory SessionFactory
}

func NewOpsWorksCMActivities(sess *session.Session, config ...*aws.Config) *OpsWorksCMActivities {
	client := opsworkscm.New(sess, config...)
	return &OpsWorksCMActivities{client: client}
}

func NewOpsWorksCMActivitiesWithSessionFactory(sessionFactory SessionFactory) *OpsWorksCMActivities {
	return &OpsWorksCMActivities{sessionFactory: sessionFactory}
}

func (a *OpsWorksCMActivities) getClient(ctx context.Context) (opsworkscmiface.OpsWorksCMAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return opsworkscm.New(sess), nil
}

func (a *OpsWorksCMActivities) AssociateNode(ctx context.Context, input *opsworkscm.AssociateNodeInput) (*opsworkscm.AssociateNodeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateNodeWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) CreateBackup(ctx context.Context, input *opsworkscm.CreateBackupInput) (*opsworkscm.CreateBackupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateBackupWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) CreateServer(ctx context.Context, input *opsworkscm.CreateServerInput) (*opsworkscm.CreateServerOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateServerWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) DeleteBackup(ctx context.Context, input *opsworkscm.DeleteBackupInput) (*opsworkscm.DeleteBackupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteBackupWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) DeleteServer(ctx context.Context, input *opsworkscm.DeleteServerInput) (*opsworkscm.DeleteServerOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteServerWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) DescribeAccountAttributes(ctx context.Context, input *opsworkscm.DescribeAccountAttributesInput) (*opsworkscm.DescribeAccountAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeAccountAttributesWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) DescribeBackups(ctx context.Context, input *opsworkscm.DescribeBackupsInput) (*opsworkscm.DescribeBackupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeBackupsWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) DescribeEvents(ctx context.Context, input *opsworkscm.DescribeEventsInput) (*opsworkscm.DescribeEventsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeEventsWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) DescribeNodeAssociationStatus(ctx context.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) (*opsworkscm.DescribeNodeAssociationStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeNodeAssociationStatusWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) DescribeServers(ctx context.Context, input *opsworkscm.DescribeServersInput) (*opsworkscm.DescribeServersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeServersWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) DisassociateNode(ctx context.Context, input *opsworkscm.DisassociateNodeInput) (*opsworkscm.DisassociateNodeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateNodeWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) ExportServerEngineAttribute(ctx context.Context, input *opsworkscm.ExportServerEngineAttributeInput) (*opsworkscm.ExportServerEngineAttributeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ExportServerEngineAttributeWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) ListTagsForResource(ctx context.Context, input *opsworkscm.ListTagsForResourceInput) (*opsworkscm.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsForResourceWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) RestoreServer(ctx context.Context, input *opsworkscm.RestoreServerInput) (*opsworkscm.RestoreServerOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RestoreServerWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) StartMaintenance(ctx context.Context, input *opsworkscm.StartMaintenanceInput) (*opsworkscm.StartMaintenanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartMaintenanceWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) TagResource(ctx context.Context, input *opsworkscm.TagResourceInput) (*opsworkscm.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TagResourceWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) UntagResource(ctx context.Context, input *opsworkscm.UntagResourceInput) (*opsworkscm.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UntagResourceWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) UpdateServer(ctx context.Context, input *opsworkscm.UpdateServerInput) (*opsworkscm.UpdateServerOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateServerWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) UpdateServerEngineAttributes(ctx context.Context, input *opsworkscm.UpdateServerEngineAttributesInput) (*opsworkscm.UpdateServerEngineAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateServerEngineAttributesWithContext(ctx, input)
}

func (a *OpsWorksCMActivities) WaitUntilNodeAssociated(ctx context.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilNodeAssociatedWithContext(ctx, input, options...)
	})
}
