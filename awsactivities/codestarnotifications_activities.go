// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/codestarnotifications"
	"github.com/aws/aws-sdk-go/service/codestarnotifications/codestarnotificationsiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

type CodeStarNotificationsActivities struct {
	client codestarnotificationsiface.CodeStarNotificationsAPI

	sessionFactory SessionFactory
}

func NewCodeStarNotificationsActivities(sess *session.Session, config ...*aws.Config) *CodeStarNotificationsActivities {
	client := codestarnotifications.New(sess, config...)
	return &CodeStarNotificationsActivities{client: client}
}

func NewCodeStarNotificationsActivitiesWithSessionFactory(sessionFactory SessionFactory) *CodeStarNotificationsActivities {
	return &CodeStarNotificationsActivities{sessionFactory: sessionFactory}
}

func (a *CodeStarNotificationsActivities) getClient(ctx context.Context) (codestarnotificationsiface.CodeStarNotificationsAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return codestarnotifications.New(sess), nil
}

func (a *CodeStarNotificationsActivities) CreateNotificationRule(ctx context.Context, input *codestarnotifications.CreateNotificationRuleInput) (*codestarnotifications.CreateNotificationRuleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateNotificationRuleWithContext(ctx, input)
}

func (a *CodeStarNotificationsActivities) DeleteNotificationRule(ctx context.Context, input *codestarnotifications.DeleteNotificationRuleInput) (*codestarnotifications.DeleteNotificationRuleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteNotificationRuleWithContext(ctx, input)
}

func (a *CodeStarNotificationsActivities) DeleteTarget(ctx context.Context, input *codestarnotifications.DeleteTargetInput) (*codestarnotifications.DeleteTargetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteTargetWithContext(ctx, input)
}

func (a *CodeStarNotificationsActivities) DescribeNotificationRule(ctx context.Context, input *codestarnotifications.DescribeNotificationRuleInput) (*codestarnotifications.DescribeNotificationRuleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeNotificationRuleWithContext(ctx, input)
}

func (a *CodeStarNotificationsActivities) ListEventTypes(ctx context.Context, input *codestarnotifications.ListEventTypesInput) (*codestarnotifications.ListEventTypesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListEventTypesWithContext(ctx, input)
}

func (a *CodeStarNotificationsActivities) ListNotificationRules(ctx context.Context, input *codestarnotifications.ListNotificationRulesInput) (*codestarnotifications.ListNotificationRulesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListNotificationRulesWithContext(ctx, input)
}

func (a *CodeStarNotificationsActivities) ListTagsForResource(ctx context.Context, input *codestarnotifications.ListTagsForResourceInput) (*codestarnotifications.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsForResourceWithContext(ctx, input)
}

func (a *CodeStarNotificationsActivities) ListTargets(ctx context.Context, input *codestarnotifications.ListTargetsInput) (*codestarnotifications.ListTargetsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTargetsWithContext(ctx, input)
}

func (a *CodeStarNotificationsActivities) Subscribe(ctx context.Context, input *codestarnotifications.SubscribeInput) (*codestarnotifications.SubscribeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SubscribeWithContext(ctx, input)
}

func (a *CodeStarNotificationsActivities) TagResource(ctx context.Context, input *codestarnotifications.TagResourceInput) (*codestarnotifications.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TagResourceWithContext(ctx, input)
}

func (a *CodeStarNotificationsActivities) Unsubscribe(ctx context.Context, input *codestarnotifications.UnsubscribeInput) (*codestarnotifications.UnsubscribeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UnsubscribeWithContext(ctx, input)
}

func (a *CodeStarNotificationsActivities) UntagResource(ctx context.Context, input *codestarnotifications.UntagResourceInput) (*codestarnotifications.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UntagResourceWithContext(ctx, input)
}

func (a *CodeStarNotificationsActivities) UpdateNotificationRule(ctx context.Context, input *codestarnotifications.UpdateNotificationRuleInput) (*codestarnotifications.UpdateNotificationRuleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateNotificationRuleWithContext(ctx, input)
}
