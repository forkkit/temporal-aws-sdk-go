// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3control"
	"github.com/aws/aws-sdk-go/service/s3control/s3controliface"
	"temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken
type _ request.Option

type S3ControlActivities struct {
	client s3controliface.S3ControlAPI

	sessionFactory SessionFactory
}

func NewS3ControlActivities(sess *session.Session, config ...*aws.Config) *S3ControlActivities {
	client := s3control.New(sess, config...)
	return &S3ControlActivities{client: client}
}

func NewS3ControlActivitiesWithSessionFactory(sessionFactory SessionFactory) *S3ControlActivities {
	return &S3ControlActivities{sessionFactory: sessionFactory}
}

func (a *S3ControlActivities) getClient(ctx context.Context) (s3controliface.S3ControlAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return s3control.New(sess), nil
}

func (a *S3ControlActivities) CreateAccessPoint(ctx context.Context, input *s3control.CreateAccessPointInput) (*s3control.CreateAccessPointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateAccessPointWithContext(ctx, input)
}

func (a *S3ControlActivities) CreateJob(ctx context.Context, input *s3control.CreateJobInput) (*s3control.CreateJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateJobWithContext(ctx, input)
}

func (a *S3ControlActivities) DeleteAccessPoint(ctx context.Context, input *s3control.DeleteAccessPointInput) (*s3control.DeleteAccessPointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteAccessPointWithContext(ctx, input)
}

func (a *S3ControlActivities) DeleteAccessPointPolicy(ctx context.Context, input *s3control.DeleteAccessPointPolicyInput) (*s3control.DeleteAccessPointPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteAccessPointPolicyWithContext(ctx, input)
}

func (a *S3ControlActivities) DeleteJobTagging(ctx context.Context, input *s3control.DeleteJobTaggingInput) (*s3control.DeleteJobTaggingOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteJobTaggingWithContext(ctx, input)
}

func (a *S3ControlActivities) DeletePublicAccessBlock(ctx context.Context, input *s3control.DeletePublicAccessBlockInput) (*s3control.DeletePublicAccessBlockOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeletePublicAccessBlockWithContext(ctx, input)
}

func (a *S3ControlActivities) DescribeJob(ctx context.Context, input *s3control.DescribeJobInput) (*s3control.DescribeJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeJobWithContext(ctx, input)
}

func (a *S3ControlActivities) GetAccessPoint(ctx context.Context, input *s3control.GetAccessPointInput) (*s3control.GetAccessPointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetAccessPointWithContext(ctx, input)
}

func (a *S3ControlActivities) GetAccessPointPolicy(ctx context.Context, input *s3control.GetAccessPointPolicyInput) (*s3control.GetAccessPointPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetAccessPointPolicyWithContext(ctx, input)
}

func (a *S3ControlActivities) GetAccessPointPolicyStatus(ctx context.Context, input *s3control.GetAccessPointPolicyStatusInput) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetAccessPointPolicyStatusWithContext(ctx, input)
}

func (a *S3ControlActivities) GetJobTagging(ctx context.Context, input *s3control.GetJobTaggingInput) (*s3control.GetJobTaggingOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetJobTaggingWithContext(ctx, input)
}

func (a *S3ControlActivities) GetPublicAccessBlock(ctx context.Context, input *s3control.GetPublicAccessBlockInput) (*s3control.GetPublicAccessBlockOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetPublicAccessBlockWithContext(ctx, input)
}

func (a *S3ControlActivities) ListAccessPoints(ctx context.Context, input *s3control.ListAccessPointsInput) (*s3control.ListAccessPointsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListAccessPointsWithContext(ctx, input)
}

func (a *S3ControlActivities) ListJobs(ctx context.Context, input *s3control.ListJobsInput) (*s3control.ListJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListJobsWithContext(ctx, input)
}

func (a *S3ControlActivities) PutAccessPointPolicy(ctx context.Context, input *s3control.PutAccessPointPolicyInput) (*s3control.PutAccessPointPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutAccessPointPolicyWithContext(ctx, input)
}

func (a *S3ControlActivities) PutJobTagging(ctx context.Context, input *s3control.PutJobTaggingInput) (*s3control.PutJobTaggingOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutJobTaggingWithContext(ctx, input)
}

func (a *S3ControlActivities) PutPublicAccessBlock(ctx context.Context, input *s3control.PutPublicAccessBlockInput) (*s3control.PutPublicAccessBlockOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutPublicAccessBlockWithContext(ctx, input)
}

func (a *S3ControlActivities) UpdateJobPriority(ctx context.Context, input *s3control.UpdateJobPriorityInput) (*s3control.UpdateJobPriorityOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateJobPriorityWithContext(ctx, input)
}

func (a *S3ControlActivities) UpdateJobStatus(ctx context.Context, input *s3control.UpdateJobStatusInput) (*s3control.UpdateJobStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateJobStatusWithContext(ctx, input)
}
