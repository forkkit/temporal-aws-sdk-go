// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/timestreamwrite"
	"github.com/aws/aws-sdk-go/service/timestreamwrite/timestreamwriteiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

type TimestreamWriteActivities struct {
	client timestreamwriteiface.TimestreamWriteAPI

	sessionFactory SessionFactory
}

func NewTimestreamWriteActivities(sess *session.Session, config ...*aws.Config) *TimestreamWriteActivities {
	client := timestreamwrite.New(sess, config...)
	return &TimestreamWriteActivities{client: client}
}

func NewTimestreamWriteActivitiesWithSessionFactory(sessionFactory SessionFactory) *TimestreamWriteActivities {
	return &TimestreamWriteActivities{sessionFactory: sessionFactory}
}

func (a *TimestreamWriteActivities) getClient(ctx context.Context) (timestreamwriteiface.TimestreamWriteAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return timestreamwrite.New(sess), nil
}

func (a *TimestreamWriteActivities) CreateDatabase(ctx context.Context, input *timestreamwrite.CreateDatabaseInput) (*timestreamwrite.CreateDatabaseOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDatabaseWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) CreateTable(ctx context.Context, input *timestreamwrite.CreateTableInput) (*timestreamwrite.CreateTableOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateTableWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) DeleteDatabase(ctx context.Context, input *timestreamwrite.DeleteDatabaseInput) (*timestreamwrite.DeleteDatabaseOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDatabaseWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) DeleteTable(ctx context.Context, input *timestreamwrite.DeleteTableInput) (*timestreamwrite.DeleteTableOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteTableWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) DescribeDatabase(ctx context.Context, input *timestreamwrite.DescribeDatabaseInput) (*timestreamwrite.DescribeDatabaseOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDatabaseWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) DescribeEndpoints(ctx context.Context, input *timestreamwrite.DescribeEndpointsInput) (*timestreamwrite.DescribeEndpointsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeEndpointsWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) DescribeTable(ctx context.Context, input *timestreamwrite.DescribeTableInput) (*timestreamwrite.DescribeTableOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeTableWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) ListDatabases(ctx context.Context, input *timestreamwrite.ListDatabasesInput) (*timestreamwrite.ListDatabasesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListDatabasesWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) ListTables(ctx context.Context, input *timestreamwrite.ListTablesInput) (*timestreamwrite.ListTablesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTablesWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) ListTagsForResource(ctx context.Context, input *timestreamwrite.ListTagsForResourceInput) (*timestreamwrite.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsForResourceWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) TagResource(ctx context.Context, input *timestreamwrite.TagResourceInput) (*timestreamwrite.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TagResourceWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) UntagResource(ctx context.Context, input *timestreamwrite.UntagResourceInput) (*timestreamwrite.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UntagResourceWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) UpdateDatabase(ctx context.Context, input *timestreamwrite.UpdateDatabaseInput) (*timestreamwrite.UpdateDatabaseOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateDatabaseWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) UpdateTable(ctx context.Context, input *timestreamwrite.UpdateTableInput) (*timestreamwrite.UpdateTableOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateTableWithContext(ctx, input)
}

func (a *TimestreamWriteActivities) WriteRecords(ctx context.Context, input *timestreamwrite.WriteRecordsInput) (*timestreamwrite.WriteRecordsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.WriteRecordsWithContext(ctx, input)
}
