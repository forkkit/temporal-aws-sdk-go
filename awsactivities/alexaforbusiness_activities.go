// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/alexaforbusiness"
	"github.com/aws/aws-sdk-go/service/alexaforbusiness/alexaforbusinessiface"
	"temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken
type _ request.Option

type AlexaForBusinessActivities struct {
	client alexaforbusinessiface.AlexaForBusinessAPI

	sessionFactory SessionFactory
}

func NewAlexaForBusinessActivities(sess *session.Session, config ...*aws.Config) *AlexaForBusinessActivities {
	client := alexaforbusiness.New(sess, config...)
	return &AlexaForBusinessActivities{client: client}
}

func NewAlexaForBusinessActivitiesWithSessionFactory(sessionFactory SessionFactory) *AlexaForBusinessActivities {
	return &AlexaForBusinessActivities{sessionFactory: sessionFactory}
}

func (a *AlexaForBusinessActivities) getClient(ctx context.Context) (alexaforbusinessiface.AlexaForBusinessAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return alexaforbusiness.New(sess), nil
}

func (a *AlexaForBusinessActivities) ApproveSkill(ctx context.Context, input *alexaforbusiness.ApproveSkillInput) (*alexaforbusiness.ApproveSkillOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ApproveSkillWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) AssociateContactWithAddressBook(ctx context.Context, input *alexaforbusiness.AssociateContactWithAddressBookInput) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateContactWithAddressBookWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) AssociateDeviceWithNetworkProfile(ctx context.Context, input *alexaforbusiness.AssociateDeviceWithNetworkProfileInput) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateDeviceWithNetworkProfileWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) AssociateDeviceWithRoom(ctx context.Context, input *alexaforbusiness.AssociateDeviceWithRoomInput) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateDeviceWithRoomWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) AssociateSkillGroupWithRoom(ctx context.Context, input *alexaforbusiness.AssociateSkillGroupWithRoomInput) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateSkillGroupWithRoomWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) AssociateSkillWithSkillGroup(ctx context.Context, input *alexaforbusiness.AssociateSkillWithSkillGroupInput) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateSkillWithSkillGroupWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) AssociateSkillWithUsers(ctx context.Context, input *alexaforbusiness.AssociateSkillWithUsersInput) (*alexaforbusiness.AssociateSkillWithUsersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateSkillWithUsersWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) CreateAddressBook(ctx context.Context, input *alexaforbusiness.CreateAddressBookInput) (*alexaforbusiness.CreateAddressBookOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateAddressBookWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) CreateBusinessReportSchedule(ctx context.Context, input *alexaforbusiness.CreateBusinessReportScheduleInput) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateBusinessReportScheduleWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) CreateConferenceProvider(ctx context.Context, input *alexaforbusiness.CreateConferenceProviderInput) (*alexaforbusiness.CreateConferenceProviderOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateConferenceProviderWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) CreateContact(ctx context.Context, input *alexaforbusiness.CreateContactInput) (*alexaforbusiness.CreateContactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateContactWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) CreateGatewayGroup(ctx context.Context, input *alexaforbusiness.CreateGatewayGroupInput) (*alexaforbusiness.CreateGatewayGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateGatewayGroupWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) CreateNetworkProfile(ctx context.Context, input *alexaforbusiness.CreateNetworkProfileInput) (*alexaforbusiness.CreateNetworkProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateNetworkProfileWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) CreateProfile(ctx context.Context, input *alexaforbusiness.CreateProfileInput) (*alexaforbusiness.CreateProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateProfileWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) CreateRoom(ctx context.Context, input *alexaforbusiness.CreateRoomInput) (*alexaforbusiness.CreateRoomOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateRoomWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) CreateSkillGroup(ctx context.Context, input *alexaforbusiness.CreateSkillGroupInput) (*alexaforbusiness.CreateSkillGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateSkillGroupWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) CreateUser(ctx context.Context, input *alexaforbusiness.CreateUserInput) (*alexaforbusiness.CreateUserOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateUserWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteAddressBook(ctx context.Context, input *alexaforbusiness.DeleteAddressBookInput) (*alexaforbusiness.DeleteAddressBookOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteAddressBookWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteBusinessReportSchedule(ctx context.Context, input *alexaforbusiness.DeleteBusinessReportScheduleInput) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteBusinessReportScheduleWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteConferenceProvider(ctx context.Context, input *alexaforbusiness.DeleteConferenceProviderInput) (*alexaforbusiness.DeleteConferenceProviderOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteConferenceProviderWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteContact(ctx context.Context, input *alexaforbusiness.DeleteContactInput) (*alexaforbusiness.DeleteContactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteContactWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteDevice(ctx context.Context, input *alexaforbusiness.DeleteDeviceInput) (*alexaforbusiness.DeleteDeviceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDeviceWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteDeviceUsageData(ctx context.Context, input *alexaforbusiness.DeleteDeviceUsageDataInput) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDeviceUsageDataWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteGatewayGroup(ctx context.Context, input *alexaforbusiness.DeleteGatewayGroupInput) (*alexaforbusiness.DeleteGatewayGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteGatewayGroupWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteNetworkProfile(ctx context.Context, input *alexaforbusiness.DeleteNetworkProfileInput) (*alexaforbusiness.DeleteNetworkProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteNetworkProfileWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteProfile(ctx context.Context, input *alexaforbusiness.DeleteProfileInput) (*alexaforbusiness.DeleteProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteProfileWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteRoom(ctx context.Context, input *alexaforbusiness.DeleteRoomInput) (*alexaforbusiness.DeleteRoomOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteRoomWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteRoomSkillParameter(ctx context.Context, input *alexaforbusiness.DeleteRoomSkillParameterInput) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteRoomSkillParameterWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteSkillAuthorization(ctx context.Context, input *alexaforbusiness.DeleteSkillAuthorizationInput) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteSkillAuthorizationWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteSkillGroup(ctx context.Context, input *alexaforbusiness.DeleteSkillGroupInput) (*alexaforbusiness.DeleteSkillGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteSkillGroupWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DeleteUser(ctx context.Context, input *alexaforbusiness.DeleteUserInput) (*alexaforbusiness.DeleteUserOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteUserWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DisassociateContactFromAddressBook(ctx context.Context, input *alexaforbusiness.DisassociateContactFromAddressBookInput) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateContactFromAddressBookWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DisassociateDeviceFromRoom(ctx context.Context, input *alexaforbusiness.DisassociateDeviceFromRoomInput) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateDeviceFromRoomWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DisassociateSkillFromSkillGroup(ctx context.Context, input *alexaforbusiness.DisassociateSkillFromSkillGroupInput) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateSkillFromSkillGroupWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DisassociateSkillFromUsers(ctx context.Context, input *alexaforbusiness.DisassociateSkillFromUsersInput) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateSkillFromUsersWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) DisassociateSkillGroupFromRoom(ctx context.Context, input *alexaforbusiness.DisassociateSkillGroupFromRoomInput) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateSkillGroupFromRoomWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) ForgetSmartHomeAppliances(ctx context.Context, input *alexaforbusiness.ForgetSmartHomeAppliancesInput) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ForgetSmartHomeAppliancesWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetAddressBook(ctx context.Context, input *alexaforbusiness.GetAddressBookInput) (*alexaforbusiness.GetAddressBookOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetAddressBookWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetConferencePreference(ctx context.Context, input *alexaforbusiness.GetConferencePreferenceInput) (*alexaforbusiness.GetConferencePreferenceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetConferencePreferenceWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetConferenceProvider(ctx context.Context, input *alexaforbusiness.GetConferenceProviderInput) (*alexaforbusiness.GetConferenceProviderOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetConferenceProviderWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetContact(ctx context.Context, input *alexaforbusiness.GetContactInput) (*alexaforbusiness.GetContactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetContactWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetDevice(ctx context.Context, input *alexaforbusiness.GetDeviceInput) (*alexaforbusiness.GetDeviceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetDeviceWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetGateway(ctx context.Context, input *alexaforbusiness.GetGatewayInput) (*alexaforbusiness.GetGatewayOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetGatewayWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetGatewayGroup(ctx context.Context, input *alexaforbusiness.GetGatewayGroupInput) (*alexaforbusiness.GetGatewayGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetGatewayGroupWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetInvitationConfiguration(ctx context.Context, input *alexaforbusiness.GetInvitationConfigurationInput) (*alexaforbusiness.GetInvitationConfigurationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetInvitationConfigurationWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetNetworkProfile(ctx context.Context, input *alexaforbusiness.GetNetworkProfileInput) (*alexaforbusiness.GetNetworkProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetNetworkProfileWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetProfile(ctx context.Context, input *alexaforbusiness.GetProfileInput) (*alexaforbusiness.GetProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetProfileWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetRoom(ctx context.Context, input *alexaforbusiness.GetRoomInput) (*alexaforbusiness.GetRoomOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetRoomWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetRoomSkillParameter(ctx context.Context, input *alexaforbusiness.GetRoomSkillParameterInput) (*alexaforbusiness.GetRoomSkillParameterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetRoomSkillParameterWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) GetSkillGroup(ctx context.Context, input *alexaforbusiness.GetSkillGroupInput) (*alexaforbusiness.GetSkillGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetSkillGroupWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) ListBusinessReportSchedules(ctx context.Context, input *alexaforbusiness.ListBusinessReportSchedulesInput) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListBusinessReportSchedulesWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) ListConferenceProviders(ctx context.Context, input *alexaforbusiness.ListConferenceProvidersInput) (*alexaforbusiness.ListConferenceProvidersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListConferenceProvidersWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) ListDeviceEvents(ctx context.Context, input *alexaforbusiness.ListDeviceEventsInput) (*alexaforbusiness.ListDeviceEventsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListDeviceEventsWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) ListGatewayGroups(ctx context.Context, input *alexaforbusiness.ListGatewayGroupsInput) (*alexaforbusiness.ListGatewayGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListGatewayGroupsWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) ListGateways(ctx context.Context, input *alexaforbusiness.ListGatewaysInput) (*alexaforbusiness.ListGatewaysOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListGatewaysWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) ListSkills(ctx context.Context, input *alexaforbusiness.ListSkillsInput) (*alexaforbusiness.ListSkillsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListSkillsWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) ListSkillsStoreCategories(ctx context.Context, input *alexaforbusiness.ListSkillsStoreCategoriesInput) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListSkillsStoreCategoriesWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) ListSkillsStoreSkillsByCategory(ctx context.Context, input *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListSkillsStoreSkillsByCategoryWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) ListSmartHomeAppliances(ctx context.Context, input *alexaforbusiness.ListSmartHomeAppliancesInput) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListSmartHomeAppliancesWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) ListTags(ctx context.Context, input *alexaforbusiness.ListTagsInput) (*alexaforbusiness.ListTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) PutConferencePreference(ctx context.Context, input *alexaforbusiness.PutConferencePreferenceInput) (*alexaforbusiness.PutConferencePreferenceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutConferencePreferenceWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) PutInvitationConfiguration(ctx context.Context, input *alexaforbusiness.PutInvitationConfigurationInput) (*alexaforbusiness.PutInvitationConfigurationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutInvitationConfigurationWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) PutRoomSkillParameter(ctx context.Context, input *alexaforbusiness.PutRoomSkillParameterInput) (*alexaforbusiness.PutRoomSkillParameterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutRoomSkillParameterWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) PutSkillAuthorization(ctx context.Context, input *alexaforbusiness.PutSkillAuthorizationInput) (*alexaforbusiness.PutSkillAuthorizationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutSkillAuthorizationWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) RegisterAVSDevice(ctx context.Context, input *alexaforbusiness.RegisterAVSDeviceInput) (*alexaforbusiness.RegisterAVSDeviceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RegisterAVSDeviceWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) RejectSkill(ctx context.Context, input *alexaforbusiness.RejectSkillInput) (*alexaforbusiness.RejectSkillOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RejectSkillWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) ResolveRoom(ctx context.Context, input *alexaforbusiness.ResolveRoomInput) (*alexaforbusiness.ResolveRoomOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ResolveRoomWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) RevokeInvitation(ctx context.Context, input *alexaforbusiness.RevokeInvitationInput) (*alexaforbusiness.RevokeInvitationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RevokeInvitationWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) SearchAddressBooks(ctx context.Context, input *alexaforbusiness.SearchAddressBooksInput) (*alexaforbusiness.SearchAddressBooksOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SearchAddressBooksWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) SearchContacts(ctx context.Context, input *alexaforbusiness.SearchContactsInput) (*alexaforbusiness.SearchContactsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SearchContactsWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) SearchDevices(ctx context.Context, input *alexaforbusiness.SearchDevicesInput) (*alexaforbusiness.SearchDevicesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SearchDevicesWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) SearchNetworkProfiles(ctx context.Context, input *alexaforbusiness.SearchNetworkProfilesInput) (*alexaforbusiness.SearchNetworkProfilesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SearchNetworkProfilesWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) SearchProfiles(ctx context.Context, input *alexaforbusiness.SearchProfilesInput) (*alexaforbusiness.SearchProfilesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SearchProfilesWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) SearchRooms(ctx context.Context, input *alexaforbusiness.SearchRoomsInput) (*alexaforbusiness.SearchRoomsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SearchRoomsWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) SearchSkillGroups(ctx context.Context, input *alexaforbusiness.SearchSkillGroupsInput) (*alexaforbusiness.SearchSkillGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SearchSkillGroupsWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) SearchUsers(ctx context.Context, input *alexaforbusiness.SearchUsersInput) (*alexaforbusiness.SearchUsersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SearchUsersWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) SendAnnouncement(ctx context.Context, input *alexaforbusiness.SendAnnouncementInput) (*alexaforbusiness.SendAnnouncementOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SendAnnouncementWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) SendInvitation(ctx context.Context, input *alexaforbusiness.SendInvitationInput) (*alexaforbusiness.SendInvitationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SendInvitationWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) StartDeviceSync(ctx context.Context, input *alexaforbusiness.StartDeviceSyncInput) (*alexaforbusiness.StartDeviceSyncOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartDeviceSyncWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) StartSmartHomeApplianceDiscovery(ctx context.Context, input *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartSmartHomeApplianceDiscoveryWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) TagResource(ctx context.Context, input *alexaforbusiness.TagResourceInput) (*alexaforbusiness.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TagResourceWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) UntagResource(ctx context.Context, input *alexaforbusiness.UntagResourceInput) (*alexaforbusiness.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UntagResourceWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) UpdateAddressBook(ctx context.Context, input *alexaforbusiness.UpdateAddressBookInput) (*alexaforbusiness.UpdateAddressBookOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateAddressBookWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) UpdateBusinessReportSchedule(ctx context.Context, input *alexaforbusiness.UpdateBusinessReportScheduleInput) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateBusinessReportScheduleWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) UpdateConferenceProvider(ctx context.Context, input *alexaforbusiness.UpdateConferenceProviderInput) (*alexaforbusiness.UpdateConferenceProviderOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateConferenceProviderWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) UpdateContact(ctx context.Context, input *alexaforbusiness.UpdateContactInput) (*alexaforbusiness.UpdateContactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateContactWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) UpdateDevice(ctx context.Context, input *alexaforbusiness.UpdateDeviceInput) (*alexaforbusiness.UpdateDeviceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateDeviceWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) UpdateGateway(ctx context.Context, input *alexaforbusiness.UpdateGatewayInput) (*alexaforbusiness.UpdateGatewayOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateGatewayWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) UpdateGatewayGroup(ctx context.Context, input *alexaforbusiness.UpdateGatewayGroupInput) (*alexaforbusiness.UpdateGatewayGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateGatewayGroupWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) UpdateNetworkProfile(ctx context.Context, input *alexaforbusiness.UpdateNetworkProfileInput) (*alexaforbusiness.UpdateNetworkProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateNetworkProfileWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) UpdateProfile(ctx context.Context, input *alexaforbusiness.UpdateProfileInput) (*alexaforbusiness.UpdateProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateProfileWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) UpdateRoom(ctx context.Context, input *alexaforbusiness.UpdateRoomInput) (*alexaforbusiness.UpdateRoomOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateRoomWithContext(ctx, input)
}

func (a *AlexaForBusinessActivities) UpdateSkillGroup(ctx context.Context, input *alexaforbusiness.UpdateSkillGroupInput) (*alexaforbusiness.UpdateSkillGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateSkillGroupWithContext(ctx, input)
}
