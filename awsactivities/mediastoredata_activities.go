// Generated by https://github.com/temporalio/temporal-aws-sdk/cmd/temporal-aws-sdk-gen/main.go
// from https://github.com/aws/aws-sdk-go.
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/mediastoredata"
	"github.com/aws/aws-sdk-go/service/mediastoredata/mediastoredataiface"
	"temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken
type _ request.Option

type MediaStoreDataActivities struct {
	client mediastoredataiface.MediaStoreDataAPI

	sessionFactory SessionFactory
}

func NewMediaStoreDataActivities(sess *session.Session, config ...*aws.Config) *MediaStoreDataActivities {
	client := mediastoredata.New(sess, config...)
	return &MediaStoreDataActivities{client: client}
}

func NewMediaStoreDataActivitiesWithSessionFactory(sessionFactory SessionFactory) *MediaStoreDataActivities {
	return &MediaStoreDataActivities{sessionFactory: sessionFactory}
}

func (a *MediaStoreDataActivities) getClient(ctx context.Context) (mediastoredataiface.MediaStoreDataAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return mediastoredata.New(sess), nil
}

func (a *MediaStoreDataActivities) DeleteObject(ctx context.Context, input *mediastoredata.DeleteObjectInput) (*mediastoredata.DeleteObjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteObjectWithContext(ctx, input)
}

func (a *MediaStoreDataActivities) DescribeObject(ctx context.Context, input *mediastoredata.DescribeObjectInput) (*mediastoredata.DescribeObjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeObjectWithContext(ctx, input)
}

func (a *MediaStoreDataActivities) GetObject(ctx context.Context, input *mediastoredata.GetObjectInput) (*mediastoredata.GetObjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetObjectWithContext(ctx, input)
}

func (a *MediaStoreDataActivities) ListItems(ctx context.Context, input *mediastoredata.ListItemsInput) (*mediastoredata.ListItemsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListItemsWithContext(ctx, input)
}

func (a *MediaStoreDataActivities) PutObject(ctx context.Context, input *mediastoredata.PutObjectInput) (*mediastoredata.PutObjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutObjectWithContext(ctx, input)
}
