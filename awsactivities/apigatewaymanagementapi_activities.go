// Generated by https://github.com/temporalio/temporal-aws-sdk/cmd/temporal-aws-sdk-gen/main.go
// from https://github.com/aws/aws-sdk-go.
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/apigatewaymanagementapi"
	"github.com/aws/aws-sdk-go/service/apigatewaymanagementapi/apigatewaymanagementapiiface"
	"temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken
type _ request.Option

type ApiGatewayManagementApiActivities struct {
	client apigatewaymanagementapiiface.ApiGatewayManagementApiAPI

	sessionFactory SessionFactory
}

func NewApiGatewayManagementApiActivities(sess *session.Session, config ...*aws.Config) *ApiGatewayManagementApiActivities {
	client := apigatewaymanagementapi.New(sess, config...)
	return &ApiGatewayManagementApiActivities{client: client}
}

func NewApiGatewayManagementApiActivitiesWithSessionFactory(sessionFactory SessionFactory) *ApiGatewayManagementApiActivities {
	return &ApiGatewayManagementApiActivities{sessionFactory: sessionFactory}
}

func (a *ApiGatewayManagementApiActivities) getClient(ctx context.Context) (apigatewaymanagementapiiface.ApiGatewayManagementApiAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return apigatewaymanagementapi.New(sess), nil
}

func (a *ApiGatewayManagementApiActivities) DeleteConnection(ctx context.Context, input *apigatewaymanagementapi.DeleteConnectionInput) (*apigatewaymanagementapi.DeleteConnectionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteConnectionWithContext(ctx, input)
}

func (a *ApiGatewayManagementApiActivities) GetConnection(ctx context.Context, input *apigatewaymanagementapi.GetConnectionInput) (*apigatewaymanagementapi.GetConnectionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetConnectionWithContext(ctx, input)
}

func (a *ApiGatewayManagementApiActivities) PostToConnection(ctx context.Context, input *apigatewaymanagementapi.PostToConnectionInput) (*apigatewaymanagementapi.PostToConnectionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PostToConnectionWithContext(ctx, input)
}
