// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/dlm"
	"github.com/aws/aws-sdk-go/service/dlm/dlmiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

type DLMActivities struct {
	client dlmiface.DLMAPI

	sessionFactory SessionFactory
}

func NewDLMActivities(sess *session.Session, config ...*aws.Config) *DLMActivities {
	client := dlm.New(sess, config...)
	return &DLMActivities{client: client}
}

func NewDLMActivitiesWithSessionFactory(sessionFactory SessionFactory) *DLMActivities {
	return &DLMActivities{sessionFactory: sessionFactory}
}

func (a *DLMActivities) getClient(ctx context.Context) (dlmiface.DLMAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return dlm.New(sess), nil
}

func (a *DLMActivities) CreateLifecyclePolicy(ctx context.Context, input *dlm.CreateLifecyclePolicyInput) (*dlm.CreateLifecyclePolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateLifecyclePolicyWithContext(ctx, input)
}

func (a *DLMActivities) DeleteLifecyclePolicy(ctx context.Context, input *dlm.DeleteLifecyclePolicyInput) (*dlm.DeleteLifecyclePolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteLifecyclePolicyWithContext(ctx, input)
}

func (a *DLMActivities) GetLifecyclePolicies(ctx context.Context, input *dlm.GetLifecyclePoliciesInput) (*dlm.GetLifecyclePoliciesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetLifecyclePoliciesWithContext(ctx, input)
}

func (a *DLMActivities) GetLifecyclePolicy(ctx context.Context, input *dlm.GetLifecyclePolicyInput) (*dlm.GetLifecyclePolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetLifecyclePolicyWithContext(ctx, input)
}

func (a *DLMActivities) ListTagsForResource(ctx context.Context, input *dlm.ListTagsForResourceInput) (*dlm.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsForResourceWithContext(ctx, input)
}

func (a *DLMActivities) TagResource(ctx context.Context, input *dlm.TagResourceInput) (*dlm.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TagResourceWithContext(ctx, input)
}

func (a *DLMActivities) UntagResource(ctx context.Context, input *dlm.UntagResourceInput) (*dlm.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UntagResourceWithContext(ctx, input)
}

func (a *DLMActivities) UpdateLifecyclePolicy(ctx context.Context, input *dlm.UpdateLifecyclePolicyInput) (*dlm.UpdateLifecyclePolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateLifecyclePolicyWithContext(ctx, input)
}
