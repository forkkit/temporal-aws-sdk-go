// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/mobile"
	"github.com/aws/aws-sdk-go/service/mobile/mobileiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken
type _ request.Option

type MobileActivities struct {
	client mobileiface.MobileAPI

	sessionFactory SessionFactory
}

func NewMobileActivities(sess *session.Session, config ...*aws.Config) *MobileActivities {
	client := mobile.New(sess, config...)
	return &MobileActivities{client: client}
}

func NewMobileActivitiesWithSessionFactory(sessionFactory SessionFactory) *MobileActivities {
	return &MobileActivities{sessionFactory: sessionFactory}
}

func (a *MobileActivities) getClient(ctx context.Context) (mobileiface.MobileAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return mobile.New(sess), nil
}

func (a *MobileActivities) CreateProject(ctx context.Context, input *mobile.CreateProjectInput) (*mobile.CreateProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateProjectWithContext(ctx, input)
}

func (a *MobileActivities) DeleteProject(ctx context.Context, input *mobile.DeleteProjectInput) (*mobile.DeleteProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteProjectWithContext(ctx, input)
}

func (a *MobileActivities) DescribeBundle(ctx context.Context, input *mobile.DescribeBundleInput) (*mobile.DescribeBundleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeBundleWithContext(ctx, input)
}

func (a *MobileActivities) DescribeProject(ctx context.Context, input *mobile.DescribeProjectInput) (*mobile.DescribeProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeProjectWithContext(ctx, input)
}

func (a *MobileActivities) ExportBundle(ctx context.Context, input *mobile.ExportBundleInput) (*mobile.ExportBundleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ExportBundleWithContext(ctx, input)
}

func (a *MobileActivities) ExportProject(ctx context.Context, input *mobile.ExportProjectInput) (*mobile.ExportProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ExportProjectWithContext(ctx, input)
}

func (a *MobileActivities) ListBundles(ctx context.Context, input *mobile.ListBundlesInput) (*mobile.ListBundlesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListBundlesWithContext(ctx, input)
}

func (a *MobileActivities) ListProjects(ctx context.Context, input *mobile.ListProjectsInput) (*mobile.ListProjectsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListProjectsWithContext(ctx, input)
}

func (a *MobileActivities) UpdateProject(ctx context.Context, input *mobile.UpdateProjectInput) (*mobile.UpdateProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateProjectWithContext(ctx, input)
}
