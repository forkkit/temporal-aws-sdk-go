// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/fsx"
	"github.com/aws/aws-sdk-go/service/fsx/fsxiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken
type _ request.Option

type FSxActivities struct {
	client fsxiface.FSxAPI

	sessionFactory SessionFactory
}

func NewFSxActivities(sess *session.Session, config ...*aws.Config) *FSxActivities {
	client := fsx.New(sess, config...)
	return &FSxActivities{client: client}
}

func NewFSxActivitiesWithSessionFactory(sessionFactory SessionFactory) *FSxActivities {
	return &FSxActivities{sessionFactory: sessionFactory}
}

func (a *FSxActivities) getClient(ctx context.Context) (fsxiface.FSxAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return fsx.New(sess), nil
}

func (a *FSxActivities) CancelDataRepositoryTask(ctx context.Context, input *fsx.CancelDataRepositoryTaskInput) (*fsx.CancelDataRepositoryTaskOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CancelDataRepositoryTaskWithContext(ctx, input)
}

func (a *FSxActivities) CreateBackup(ctx context.Context, input *fsx.CreateBackupInput) (*fsx.CreateBackupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateBackupWithContext(ctx, input)
}

func (a *FSxActivities) CreateDataRepositoryTask(ctx context.Context, input *fsx.CreateDataRepositoryTaskInput) (*fsx.CreateDataRepositoryTaskOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDataRepositoryTaskWithContext(ctx, input)
}

func (a *FSxActivities) CreateFileSystem(ctx context.Context, input *fsx.CreateFileSystemInput) (*fsx.CreateFileSystemOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateFileSystemWithContext(ctx, input)
}

func (a *FSxActivities) CreateFileSystemFromBackup(ctx context.Context, input *fsx.CreateFileSystemFromBackupInput) (*fsx.CreateFileSystemFromBackupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateFileSystemFromBackupWithContext(ctx, input)
}

func (a *FSxActivities) DeleteBackup(ctx context.Context, input *fsx.DeleteBackupInput) (*fsx.DeleteBackupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteBackupWithContext(ctx, input)
}

func (a *FSxActivities) DeleteFileSystem(ctx context.Context, input *fsx.DeleteFileSystemInput) (*fsx.DeleteFileSystemOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteFileSystemWithContext(ctx, input)
}

func (a *FSxActivities) DescribeBackups(ctx context.Context, input *fsx.DescribeBackupsInput) (*fsx.DescribeBackupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeBackupsWithContext(ctx, input)
}

func (a *FSxActivities) DescribeDataRepositoryTasks(ctx context.Context, input *fsx.DescribeDataRepositoryTasksInput) (*fsx.DescribeDataRepositoryTasksOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDataRepositoryTasksWithContext(ctx, input)
}

func (a *FSxActivities) DescribeFileSystems(ctx context.Context, input *fsx.DescribeFileSystemsInput) (*fsx.DescribeFileSystemsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeFileSystemsWithContext(ctx, input)
}

func (a *FSxActivities) ListTagsForResource(ctx context.Context, input *fsx.ListTagsForResourceInput) (*fsx.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsForResourceWithContext(ctx, input)
}

func (a *FSxActivities) TagResource(ctx context.Context, input *fsx.TagResourceInput) (*fsx.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TagResourceWithContext(ctx, input)
}

func (a *FSxActivities) UntagResource(ctx context.Context, input *fsx.UntagResourceInput) (*fsx.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UntagResourceWithContext(ctx, input)
}

func (a *FSxActivities) UpdateFileSystem(ctx context.Context, input *fsx.UpdateFileSystemInput) (*fsx.UpdateFileSystemOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateFileSystemWithContext(ctx, input)
}
