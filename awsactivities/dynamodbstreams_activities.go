// Generated by https://github.com/temporalio/temporal-aws-sdk/cmd/temporal-aws-sdk-gen/main.go
// from https://github.com/aws/aws-sdk-go.
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/dynamodbstreams"
	"github.com/aws/aws-sdk-go/service/dynamodbstreams/dynamodbstreamsiface"
	"temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken
type _ request.Option

type DynamoDBStreamsActivities struct {
	client dynamodbstreamsiface.DynamoDBStreamsAPI

	sessionFactory SessionFactory
}

func NewDynamoDBStreamsActivities(sess *session.Session, config ...*aws.Config) *DynamoDBStreamsActivities {
	client := dynamodbstreams.New(sess, config...)
	return &DynamoDBStreamsActivities{client: client}
}

func NewDynamoDBStreamsActivitiesWithSessionFactory(sessionFactory SessionFactory) *DynamoDBStreamsActivities {
	return &DynamoDBStreamsActivities{sessionFactory: sessionFactory}
}

func (a *DynamoDBStreamsActivities) getClient(ctx context.Context) (dynamodbstreamsiface.DynamoDBStreamsAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return dynamodbstreams.New(sess), nil
}

func (a *DynamoDBStreamsActivities) DescribeStream(ctx context.Context, input *dynamodbstreams.DescribeStreamInput) (*dynamodbstreams.DescribeStreamOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeStreamWithContext(ctx, input)
}

func (a *DynamoDBStreamsActivities) GetRecords(ctx context.Context, input *dynamodbstreams.GetRecordsInput) (*dynamodbstreams.GetRecordsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetRecordsWithContext(ctx, input)
}

func (a *DynamoDBStreamsActivities) GetShardIterator(ctx context.Context, input *dynamodbstreams.GetShardIteratorInput) (*dynamodbstreams.GetShardIteratorOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetShardIteratorWithContext(ctx, input)
}

func (a *DynamoDBStreamsActivities) ListStreams(ctx context.Context, input *dynamodbstreams.ListStreamsInput) (*dynamodbstreams.ListStreamsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListStreamsWithContext(ctx, input)
}
