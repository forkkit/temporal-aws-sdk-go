// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/personalizeruntime"
	"github.com/aws/aws-sdk-go/service/personalizeruntime/personalizeruntimeiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

type PersonalizeRuntimeActivities struct {
	client personalizeruntimeiface.PersonalizeRuntimeAPI

	sessionFactory SessionFactory
}

func NewPersonalizeRuntimeActivities(sess *session.Session, config ...*aws.Config) *PersonalizeRuntimeActivities {
	client := personalizeruntime.New(sess, config...)
	return &PersonalizeRuntimeActivities{client: client}
}

func NewPersonalizeRuntimeActivitiesWithSessionFactory(sessionFactory SessionFactory) *PersonalizeRuntimeActivities {
	return &PersonalizeRuntimeActivities{sessionFactory: sessionFactory}
}

func (a *PersonalizeRuntimeActivities) getClient(ctx context.Context) (personalizeruntimeiface.PersonalizeRuntimeAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return personalizeruntime.New(sess), nil
}

func (a *PersonalizeRuntimeActivities) GetPersonalizedRanking(ctx context.Context, input *personalizeruntime.GetPersonalizedRankingInput) (*personalizeruntime.GetPersonalizedRankingOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetPersonalizedRankingWithContext(ctx, input)
}

func (a *PersonalizeRuntimeActivities) GetRecommendations(ctx context.Context, input *personalizeruntime.GetRecommendationsInput) (*personalizeruntime.GetRecommendationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetRecommendationsWithContext(ctx, input)
}
