// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/fms"
	"github.com/aws/aws-sdk-go/service/fms/fmsiface"
	"temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken
type _ request.Option

type FMSActivities struct {
	client fmsiface.FMSAPI

	sessionFactory SessionFactory
}

func NewFMSActivities(sess *session.Session, config ...*aws.Config) *FMSActivities {
	client := fms.New(sess, config...)
	return &FMSActivities{client: client}
}

func NewFMSActivitiesWithSessionFactory(sessionFactory SessionFactory) *FMSActivities {
	return &FMSActivities{sessionFactory: sessionFactory}
}

func (a *FMSActivities) getClient(ctx context.Context) (fmsiface.FMSAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return fms.New(sess), nil
}

func (a *FMSActivities) AssociateAdminAccount(ctx context.Context, input *fms.AssociateAdminAccountInput) (*fms.AssociateAdminAccountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateAdminAccountWithContext(ctx, input)
}

func (a *FMSActivities) DeleteAppsList(ctx context.Context, input *fms.DeleteAppsListInput) (*fms.DeleteAppsListOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteAppsListWithContext(ctx, input)
}

func (a *FMSActivities) DeleteNotificationChannel(ctx context.Context, input *fms.DeleteNotificationChannelInput) (*fms.DeleteNotificationChannelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteNotificationChannelWithContext(ctx, input)
}

func (a *FMSActivities) DeletePolicy(ctx context.Context, input *fms.DeletePolicyInput) (*fms.DeletePolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeletePolicyWithContext(ctx, input)
}

func (a *FMSActivities) DeleteProtocolsList(ctx context.Context, input *fms.DeleteProtocolsListInput) (*fms.DeleteProtocolsListOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteProtocolsListWithContext(ctx, input)
}

func (a *FMSActivities) DisassociateAdminAccount(ctx context.Context, input *fms.DisassociateAdminAccountInput) (*fms.DisassociateAdminAccountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateAdminAccountWithContext(ctx, input)
}

func (a *FMSActivities) GetAdminAccount(ctx context.Context, input *fms.GetAdminAccountInput) (*fms.GetAdminAccountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetAdminAccountWithContext(ctx, input)
}

func (a *FMSActivities) GetAppsList(ctx context.Context, input *fms.GetAppsListInput) (*fms.GetAppsListOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetAppsListWithContext(ctx, input)
}

func (a *FMSActivities) GetComplianceDetail(ctx context.Context, input *fms.GetComplianceDetailInput) (*fms.GetComplianceDetailOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetComplianceDetailWithContext(ctx, input)
}

func (a *FMSActivities) GetNotificationChannel(ctx context.Context, input *fms.GetNotificationChannelInput) (*fms.GetNotificationChannelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetNotificationChannelWithContext(ctx, input)
}

func (a *FMSActivities) GetPolicy(ctx context.Context, input *fms.GetPolicyInput) (*fms.GetPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetPolicyWithContext(ctx, input)
}

func (a *FMSActivities) GetProtectionStatus(ctx context.Context, input *fms.GetProtectionStatusInput) (*fms.GetProtectionStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetProtectionStatusWithContext(ctx, input)
}

func (a *FMSActivities) GetProtocolsList(ctx context.Context, input *fms.GetProtocolsListInput) (*fms.GetProtocolsListOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetProtocolsListWithContext(ctx, input)
}

func (a *FMSActivities) GetViolationDetails(ctx context.Context, input *fms.GetViolationDetailsInput) (*fms.GetViolationDetailsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetViolationDetailsWithContext(ctx, input)
}

func (a *FMSActivities) ListAppsLists(ctx context.Context, input *fms.ListAppsListsInput) (*fms.ListAppsListsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListAppsListsWithContext(ctx, input)
}

func (a *FMSActivities) ListComplianceStatus(ctx context.Context, input *fms.ListComplianceStatusInput) (*fms.ListComplianceStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListComplianceStatusWithContext(ctx, input)
}

func (a *FMSActivities) ListMemberAccounts(ctx context.Context, input *fms.ListMemberAccountsInput) (*fms.ListMemberAccountsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListMemberAccountsWithContext(ctx, input)
}

func (a *FMSActivities) ListPolicies(ctx context.Context, input *fms.ListPoliciesInput) (*fms.ListPoliciesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListPoliciesWithContext(ctx, input)
}

func (a *FMSActivities) ListProtocolsLists(ctx context.Context, input *fms.ListProtocolsListsInput) (*fms.ListProtocolsListsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListProtocolsListsWithContext(ctx, input)
}

func (a *FMSActivities) ListTagsForResource(ctx context.Context, input *fms.ListTagsForResourceInput) (*fms.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsForResourceWithContext(ctx, input)
}

func (a *FMSActivities) PutAppsList(ctx context.Context, input *fms.PutAppsListInput) (*fms.PutAppsListOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutAppsListWithContext(ctx, input)
}

func (a *FMSActivities) PutNotificationChannel(ctx context.Context, input *fms.PutNotificationChannelInput) (*fms.PutNotificationChannelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutNotificationChannelWithContext(ctx, input)
}

func (a *FMSActivities) PutPolicy(ctx context.Context, input *fms.PutPolicyInput) (*fms.PutPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutPolicyWithContext(ctx, input)
}

func (a *FMSActivities) PutProtocolsList(ctx context.Context, input *fms.PutProtocolsListInput) (*fms.PutProtocolsListOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutProtocolsListWithContext(ctx, input)
}

func (a *FMSActivities) TagResource(ctx context.Context, input *fms.TagResourceInput) (*fms.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TagResourceWithContext(ctx, input)
}

func (a *FMSActivities) UntagResource(ctx context.Context, input *fms.UntagResourceInput) (*fms.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UntagResourceWithContext(ctx, input)
}
