// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/marketplacemetering"
	"github.com/aws/aws-sdk-go/service/marketplacemetering/marketplacemeteringiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

type MarketplaceMeteringActivities struct {
	client marketplacemeteringiface.MarketplaceMeteringAPI

	sessionFactory SessionFactory
}

func NewMarketplaceMeteringActivities(sess *session.Session, config ...*aws.Config) *MarketplaceMeteringActivities {
	client := marketplacemetering.New(sess, config...)
	return &MarketplaceMeteringActivities{client: client}
}

func NewMarketplaceMeteringActivitiesWithSessionFactory(sessionFactory SessionFactory) *MarketplaceMeteringActivities {
	return &MarketplaceMeteringActivities{sessionFactory: sessionFactory}
}

func (a *MarketplaceMeteringActivities) getClient(ctx context.Context) (marketplacemeteringiface.MarketplaceMeteringAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return marketplacemetering.New(sess), nil
}

func (a *MarketplaceMeteringActivities) BatchMeterUsage(ctx context.Context, input *marketplacemetering.BatchMeterUsageInput) (*marketplacemetering.BatchMeterUsageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.BatchMeterUsageWithContext(ctx, input)
}

func (a *MarketplaceMeteringActivities) MeterUsage(ctx context.Context, input *marketplacemetering.MeterUsageInput) (*marketplacemetering.MeterUsageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.MeterUsageWithContext(ctx, input)
}

func (a *MarketplaceMeteringActivities) RegisterUsage(ctx context.Context, input *marketplacemetering.RegisterUsageInput) (*marketplacemetering.RegisterUsageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RegisterUsageWithContext(ctx, input)
}

func (a *MarketplaceMeteringActivities) ResolveCustomer(ctx context.Context, input *marketplacemetering.ResolveCustomerInput) (*marketplacemetering.ResolveCustomerOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ResolveCustomerWithContext(ctx, input)
}
