// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/lexruntimeservice"
	"github.com/aws/aws-sdk-go/service/lexruntimeservice/lexruntimeserviceiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken
type _ request.Option

type LexRuntimeServiceActivities struct {
	client lexruntimeserviceiface.LexRuntimeServiceAPI

	sessionFactory SessionFactory
}

func NewLexRuntimeServiceActivities(sess *session.Session, config ...*aws.Config) *LexRuntimeServiceActivities {
	client := lexruntimeservice.New(sess, config...)
	return &LexRuntimeServiceActivities{client: client}
}

func NewLexRuntimeServiceActivitiesWithSessionFactory(sessionFactory SessionFactory) *LexRuntimeServiceActivities {
	return &LexRuntimeServiceActivities{sessionFactory: sessionFactory}
}

func (a *LexRuntimeServiceActivities) getClient(ctx context.Context) (lexruntimeserviceiface.LexRuntimeServiceAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return lexruntimeservice.New(sess), nil
}

func (a *LexRuntimeServiceActivities) DeleteSession(ctx context.Context, input *lexruntimeservice.DeleteSessionInput) (*lexruntimeservice.DeleteSessionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteSessionWithContext(ctx, input)
}

func (a *LexRuntimeServiceActivities) GetSession(ctx context.Context, input *lexruntimeservice.GetSessionInput) (*lexruntimeservice.GetSessionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetSessionWithContext(ctx, input)
}

func (a *LexRuntimeServiceActivities) PostContent(ctx context.Context, input *lexruntimeservice.PostContentInput) (*lexruntimeservice.PostContentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PostContentWithContext(ctx, input)
}

func (a *LexRuntimeServiceActivities) PostText(ctx context.Context, input *lexruntimeservice.PostTextInput) (*lexruntimeservice.PostTextOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PostTextWithContext(ctx, input)
}

func (a *LexRuntimeServiceActivities) PutSession(ctx context.Context, input *lexruntimeservice.PutSessionInput) (*lexruntimeservice.PutSessionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutSessionWithContext(ctx, input)
}
