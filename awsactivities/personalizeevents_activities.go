// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/personalizeevents"
	"github.com/aws/aws-sdk-go/service/personalizeevents/personalizeeventsiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

type PersonalizeEventsActivities struct {
	client personalizeeventsiface.PersonalizeEventsAPI

	sessionFactory SessionFactory
}

func NewPersonalizeEventsActivities(sess *session.Session, config ...*aws.Config) *PersonalizeEventsActivities {
	client := personalizeevents.New(sess, config...)
	return &PersonalizeEventsActivities{client: client}
}

func NewPersonalizeEventsActivitiesWithSessionFactory(sessionFactory SessionFactory) *PersonalizeEventsActivities {
	return &PersonalizeEventsActivities{sessionFactory: sessionFactory}
}

func (a *PersonalizeEventsActivities) getClient(ctx context.Context) (personalizeeventsiface.PersonalizeEventsAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return personalizeevents.New(sess), nil
}

func (a *PersonalizeEventsActivities) PutEvents(ctx context.Context, input *personalizeevents.PutEventsInput) (*personalizeevents.PutEventsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutEventsWithContext(ctx, input)
}

func (a *PersonalizeEventsActivities) PutItems(ctx context.Context, input *personalizeevents.PutItemsInput) (*personalizeevents.PutItemsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutItemsWithContext(ctx, input)
}

func (a *PersonalizeEventsActivities) PutUsers(ctx context.Context, input *personalizeevents.PutUsersInput) (*personalizeevents.PutUsersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutUsersWithContext(ctx, input)
}
