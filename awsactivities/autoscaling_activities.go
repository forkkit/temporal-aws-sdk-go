// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/autoscaling"
	"github.com/aws/aws-sdk-go/service/autoscaling/autoscalingiface"
	"temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken
type _ request.Option

type AutoScalingActivities struct {
	client autoscalingiface.AutoScalingAPI

	sessionFactory SessionFactory
}

func NewAutoScalingActivities(sess *session.Session, config ...*aws.Config) *AutoScalingActivities {
	client := autoscaling.New(sess, config...)
	return &AutoScalingActivities{client: client}
}

func NewAutoScalingActivitiesWithSessionFactory(sessionFactory SessionFactory) *AutoScalingActivities {
	return &AutoScalingActivities{sessionFactory: sessionFactory}
}

func (a *AutoScalingActivities) getClient(ctx context.Context) (autoscalingiface.AutoScalingAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return autoscaling.New(sess), nil
}

func (a *AutoScalingActivities) AttachInstances(ctx context.Context, input *autoscaling.AttachInstancesInput) (*autoscaling.AttachInstancesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AttachInstancesWithContext(ctx, input)
}

func (a *AutoScalingActivities) AttachLoadBalancerTargetGroups(ctx context.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput) (*autoscaling.AttachLoadBalancerTargetGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AttachLoadBalancerTargetGroupsWithContext(ctx, input)
}

func (a *AutoScalingActivities) AttachLoadBalancers(ctx context.Context, input *autoscaling.AttachLoadBalancersInput) (*autoscaling.AttachLoadBalancersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AttachLoadBalancersWithContext(ctx, input)
}

func (a *AutoScalingActivities) BatchDeleteScheduledAction(ctx context.Context, input *autoscaling.BatchDeleteScheduledActionInput) (*autoscaling.BatchDeleteScheduledActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.BatchDeleteScheduledActionWithContext(ctx, input)
}

func (a *AutoScalingActivities) BatchPutScheduledUpdateGroupAction(ctx context.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput) (*autoscaling.BatchPutScheduledUpdateGroupActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.BatchPutScheduledUpdateGroupActionWithContext(ctx, input)
}

func (a *AutoScalingActivities) CancelInstanceRefresh(ctx context.Context, input *autoscaling.CancelInstanceRefreshInput) (*autoscaling.CancelInstanceRefreshOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CancelInstanceRefreshWithContext(ctx, input)
}

func (a *AutoScalingActivities) CompleteLifecycleAction(ctx context.Context, input *autoscaling.CompleteLifecycleActionInput) (*autoscaling.CompleteLifecycleActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CompleteLifecycleActionWithContext(ctx, input)
}

func (a *AutoScalingActivities) CreateAutoScalingGroup(ctx context.Context, input *autoscaling.CreateAutoScalingGroupInput) (*autoscaling.CreateAutoScalingGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateAutoScalingGroupWithContext(ctx, input)
}

func (a *AutoScalingActivities) CreateLaunchConfiguration(ctx context.Context, input *autoscaling.CreateLaunchConfigurationInput) (*autoscaling.CreateLaunchConfigurationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateLaunchConfigurationWithContext(ctx, input)
}

func (a *AutoScalingActivities) CreateOrUpdateTags(ctx context.Context, input *autoscaling.CreateOrUpdateTagsInput) (*autoscaling.CreateOrUpdateTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateOrUpdateTagsWithContext(ctx, input)
}

func (a *AutoScalingActivities) DeleteAutoScalingGroup(ctx context.Context, input *autoscaling.DeleteAutoScalingGroupInput) (*autoscaling.DeleteAutoScalingGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteAutoScalingGroupWithContext(ctx, input)
}

func (a *AutoScalingActivities) DeleteLaunchConfiguration(ctx context.Context, input *autoscaling.DeleteLaunchConfigurationInput) (*autoscaling.DeleteLaunchConfigurationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteLaunchConfigurationWithContext(ctx, input)
}

func (a *AutoScalingActivities) DeleteLifecycleHook(ctx context.Context, input *autoscaling.DeleteLifecycleHookInput) (*autoscaling.DeleteLifecycleHookOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteLifecycleHookWithContext(ctx, input)
}

func (a *AutoScalingActivities) DeleteNotificationConfiguration(ctx context.Context, input *autoscaling.DeleteNotificationConfigurationInput) (*autoscaling.DeleteNotificationConfigurationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteNotificationConfigurationWithContext(ctx, input)
}

func (a *AutoScalingActivities) DeletePolicy(ctx context.Context, input *autoscaling.DeletePolicyInput) (*autoscaling.DeletePolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeletePolicyWithContext(ctx, input)
}

func (a *AutoScalingActivities) DeleteScheduledAction(ctx context.Context, input *autoscaling.DeleteScheduledActionInput) (*autoscaling.DeleteScheduledActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteScheduledActionWithContext(ctx, input)
}

func (a *AutoScalingActivities) DeleteTags(ctx context.Context, input *autoscaling.DeleteTagsInput) (*autoscaling.DeleteTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteTagsWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeAccountLimits(ctx context.Context, input *autoscaling.DescribeAccountLimitsInput) (*autoscaling.DescribeAccountLimitsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeAccountLimitsWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeAdjustmentTypes(ctx context.Context, input *autoscaling.DescribeAdjustmentTypesInput) (*autoscaling.DescribeAdjustmentTypesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeAdjustmentTypesWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeAutoScalingGroups(ctx context.Context, input *autoscaling.DescribeAutoScalingGroupsInput) (*autoscaling.DescribeAutoScalingGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeAutoScalingGroupsWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeAutoScalingInstances(ctx context.Context, input *autoscaling.DescribeAutoScalingInstancesInput) (*autoscaling.DescribeAutoScalingInstancesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeAutoScalingInstancesWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeAutoScalingNotificationTypes(ctx context.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput) (*autoscaling.DescribeAutoScalingNotificationTypesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeAutoScalingNotificationTypesWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeInstanceRefreshes(ctx context.Context, input *autoscaling.DescribeInstanceRefreshesInput) (*autoscaling.DescribeInstanceRefreshesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeInstanceRefreshesWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeLaunchConfigurations(ctx context.Context, input *autoscaling.DescribeLaunchConfigurationsInput) (*autoscaling.DescribeLaunchConfigurationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeLaunchConfigurationsWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeLifecycleHookTypes(ctx context.Context, input *autoscaling.DescribeLifecycleHookTypesInput) (*autoscaling.DescribeLifecycleHookTypesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeLifecycleHookTypesWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeLifecycleHooks(ctx context.Context, input *autoscaling.DescribeLifecycleHooksInput) (*autoscaling.DescribeLifecycleHooksOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeLifecycleHooksWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeLoadBalancerTargetGroups(ctx context.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput) (*autoscaling.DescribeLoadBalancerTargetGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeLoadBalancerTargetGroupsWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeLoadBalancers(ctx context.Context, input *autoscaling.DescribeLoadBalancersInput) (*autoscaling.DescribeLoadBalancersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeLoadBalancersWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeMetricCollectionTypes(ctx context.Context, input *autoscaling.DescribeMetricCollectionTypesInput) (*autoscaling.DescribeMetricCollectionTypesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeMetricCollectionTypesWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeNotificationConfigurations(ctx context.Context, input *autoscaling.DescribeNotificationConfigurationsInput) (*autoscaling.DescribeNotificationConfigurationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeNotificationConfigurationsWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribePolicies(ctx context.Context, input *autoscaling.DescribePoliciesInput) (*autoscaling.DescribePoliciesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribePoliciesWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeScalingActivities(ctx context.Context, input *autoscaling.DescribeScalingActivitiesInput) (*autoscaling.DescribeScalingActivitiesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeScalingActivitiesWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeScalingProcessTypes(ctx context.Context, input *autoscaling.DescribeScalingProcessTypesInput) (*autoscaling.DescribeScalingProcessTypesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeScalingProcessTypesWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeScheduledActions(ctx context.Context, input *autoscaling.DescribeScheduledActionsInput) (*autoscaling.DescribeScheduledActionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeScheduledActionsWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeTags(ctx context.Context, input *autoscaling.DescribeTagsInput) (*autoscaling.DescribeTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeTagsWithContext(ctx, input)
}

func (a *AutoScalingActivities) DescribeTerminationPolicyTypes(ctx context.Context, input *autoscaling.DescribeTerminationPolicyTypesInput) (*autoscaling.DescribeTerminationPolicyTypesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeTerminationPolicyTypesWithContext(ctx, input)
}

func (a *AutoScalingActivities) DetachInstances(ctx context.Context, input *autoscaling.DetachInstancesInput) (*autoscaling.DetachInstancesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DetachInstancesWithContext(ctx, input)
}

func (a *AutoScalingActivities) DetachLoadBalancerTargetGroups(ctx context.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput) (*autoscaling.DetachLoadBalancerTargetGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DetachLoadBalancerTargetGroupsWithContext(ctx, input)
}

func (a *AutoScalingActivities) DetachLoadBalancers(ctx context.Context, input *autoscaling.DetachLoadBalancersInput) (*autoscaling.DetachLoadBalancersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DetachLoadBalancersWithContext(ctx, input)
}

func (a *AutoScalingActivities) DisableMetricsCollection(ctx context.Context, input *autoscaling.DisableMetricsCollectionInput) (*autoscaling.DisableMetricsCollectionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisableMetricsCollectionWithContext(ctx, input)
}

func (a *AutoScalingActivities) EnableMetricsCollection(ctx context.Context, input *autoscaling.EnableMetricsCollectionInput) (*autoscaling.EnableMetricsCollectionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.EnableMetricsCollectionWithContext(ctx, input)
}

func (a *AutoScalingActivities) EnterStandby(ctx context.Context, input *autoscaling.EnterStandbyInput) (*autoscaling.EnterStandbyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.EnterStandbyWithContext(ctx, input)
}

func (a *AutoScalingActivities) ExecutePolicy(ctx context.Context, input *autoscaling.ExecutePolicyInput) (*autoscaling.ExecutePolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ExecutePolicyWithContext(ctx, input)
}

func (a *AutoScalingActivities) ExitStandby(ctx context.Context, input *autoscaling.ExitStandbyInput) (*autoscaling.ExitStandbyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ExitStandbyWithContext(ctx, input)
}

func (a *AutoScalingActivities) PutLifecycleHook(ctx context.Context, input *autoscaling.PutLifecycleHookInput) (*autoscaling.PutLifecycleHookOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutLifecycleHookWithContext(ctx, input)
}

func (a *AutoScalingActivities) PutNotificationConfiguration(ctx context.Context, input *autoscaling.PutNotificationConfigurationInput) (*autoscaling.PutNotificationConfigurationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutNotificationConfigurationWithContext(ctx, input)
}

func (a *AutoScalingActivities) PutScalingPolicy(ctx context.Context, input *autoscaling.PutScalingPolicyInput) (*autoscaling.PutScalingPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutScalingPolicyWithContext(ctx, input)
}

func (a *AutoScalingActivities) PutScheduledUpdateGroupAction(ctx context.Context, input *autoscaling.PutScheduledUpdateGroupActionInput) (*autoscaling.PutScheduledUpdateGroupActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutScheduledUpdateGroupActionWithContext(ctx, input)
}

func (a *AutoScalingActivities) RecordLifecycleActionHeartbeat(ctx context.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RecordLifecycleActionHeartbeatWithContext(ctx, input)
}

func (a *AutoScalingActivities) ResumeProcesses(ctx context.Context, input *autoscaling.ScalingProcessQuery) (*autoscaling.ResumeProcessesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ResumeProcessesWithContext(ctx, input)
}

func (a *AutoScalingActivities) SetDesiredCapacity(ctx context.Context, input *autoscaling.SetDesiredCapacityInput) (*autoscaling.SetDesiredCapacityOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetDesiredCapacityWithContext(ctx, input)
}

func (a *AutoScalingActivities) SetInstanceHealth(ctx context.Context, input *autoscaling.SetInstanceHealthInput) (*autoscaling.SetInstanceHealthOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetInstanceHealthWithContext(ctx, input)
}

func (a *AutoScalingActivities) SetInstanceProtection(ctx context.Context, input *autoscaling.SetInstanceProtectionInput) (*autoscaling.SetInstanceProtectionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetInstanceProtectionWithContext(ctx, input)
}

func (a *AutoScalingActivities) StartInstanceRefresh(ctx context.Context, input *autoscaling.StartInstanceRefreshInput) (*autoscaling.StartInstanceRefreshOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartInstanceRefreshWithContext(ctx, input)
}

func (a *AutoScalingActivities) SuspendProcesses(ctx context.Context, input *autoscaling.ScalingProcessQuery) (*autoscaling.SuspendProcessesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SuspendProcessesWithContext(ctx, input)
}

func (a *AutoScalingActivities) TerminateInstanceInAutoScalingGroup(ctx context.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput) (*autoscaling.TerminateInstanceInAutoScalingGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TerminateInstanceInAutoScalingGroupWithContext(ctx, input)
}

func (a *AutoScalingActivities) UpdateAutoScalingGroup(ctx context.Context, input *autoscaling.UpdateAutoScalingGroupInput) (*autoscaling.UpdateAutoScalingGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateAutoScalingGroupWithContext(ctx, input)
}

func (a *AutoScalingActivities) WaitUntilGroupExists(ctx context.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilGroupExistsWithContext(ctx, input, options...)
	})
}

func (a *AutoScalingActivities) WaitUntilGroupInService(ctx context.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilGroupInServiceWithContext(ctx, input, options...)
	})
}

func (a *AutoScalingActivities) WaitUntilGroupNotExists(ctx context.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilGroupNotExistsWithContext(ctx, input, options...)
	})
}
