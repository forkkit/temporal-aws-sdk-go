// Generated by https://github.com/temporalio/temporal-aws-sdk/cmd/temporal-aws-sdk-gen/main.go
// from https://github.com/aws/aws-sdk-go.
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsactivities

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"go.temporal.io/sdk/activity"
	"go.temporal.io/sdk/worker"
)

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface{
	Session(ctx context.Context) (*session.Session, error)
}

// RegisterAwsActivities registers AWS activities with a single session.
// Use this registration method if your worker will only use a single set of credentials for authentication.
func RegisterAwsActivities(worker worker.Worker, sess *session.Session, config... *aws.Config) {
{{- range . }}
{{- $name := .Name }}
	worker.RegisterActivity(New{{ .Name }}Activities(sess, config...))
	worker.RegisterActivityWithOptions(New{{ .Name }}Activities(sess, config...), activity.RegisterOptions{Name: "aws.{{.ID}}."})
{{- end }}
}

// RegisterAwsActivitiesWithSessionFactory registers AWS activities with a session factory that creates a session for every activity execution.
// Use this registration method if your activities will receive credentials in the context for each activity execution.
func RegisterAwsActivitiesWithSessionFactory(worker worker.Worker, sessionFactory SessionFactory) {
{{- range . }}
{{- $name := .Name }}
	worker.RegisterActivity(New{{ .Name }}ActivitiesWithSessionFactory(sessionFactory))
	worker.RegisterActivityWithOptions(New{{ .Name }}ActivitiesWithSessionFactory(sessionFactory), activity.RegisterOptions{Name: "aws.{{.ID}}."})
{{- end }}
}
