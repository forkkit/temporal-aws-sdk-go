// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/sqs"
	"go.temporal.io/sdk/workflow"
)

type SQSClient interface {
	AddPermission(ctx workflow.Context, input *sqs.AddPermissionInput) (*sqs.AddPermissionOutput, error)
	AddPermissionAsync(ctx workflow.Context, input *sqs.AddPermissionInput) *SQSAddPermissionFuture

	ChangeMessageVisibility(ctx workflow.Context, input *sqs.ChangeMessageVisibilityInput) (*sqs.ChangeMessageVisibilityOutput, error)
	ChangeMessageVisibilityAsync(ctx workflow.Context, input *sqs.ChangeMessageVisibilityInput) *SQSChangeMessageVisibilityFuture

	ChangeMessageVisibilityBatch(ctx workflow.Context, input *sqs.ChangeMessageVisibilityBatchInput) (*sqs.ChangeMessageVisibilityBatchOutput, error)
	ChangeMessageVisibilityBatchAsync(ctx workflow.Context, input *sqs.ChangeMessageVisibilityBatchInput) *SQSChangeMessageVisibilityBatchFuture

	CreateQueue(ctx workflow.Context, input *sqs.CreateQueueInput) (*sqs.CreateQueueOutput, error)
	CreateQueueAsync(ctx workflow.Context, input *sqs.CreateQueueInput) *SQSCreateQueueFuture

	DeleteMessage(ctx workflow.Context, input *sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error)
	DeleteMessageAsync(ctx workflow.Context, input *sqs.DeleteMessageInput) *SQSDeleteMessageFuture

	DeleteMessageBatch(ctx workflow.Context, input *sqs.DeleteMessageBatchInput) (*sqs.DeleteMessageBatchOutput, error)
	DeleteMessageBatchAsync(ctx workflow.Context, input *sqs.DeleteMessageBatchInput) *SQSDeleteMessageBatchFuture

	DeleteQueue(ctx workflow.Context, input *sqs.DeleteQueueInput) (*sqs.DeleteQueueOutput, error)
	DeleteQueueAsync(ctx workflow.Context, input *sqs.DeleteQueueInput) *SQSDeleteQueueFuture

	GetQueueAttributes(ctx workflow.Context, input *sqs.GetQueueAttributesInput) (*sqs.GetQueueAttributesOutput, error)
	GetQueueAttributesAsync(ctx workflow.Context, input *sqs.GetQueueAttributesInput) *SQSGetQueueAttributesFuture

	GetQueueUrl(ctx workflow.Context, input *sqs.GetQueueUrlInput) (*sqs.GetQueueUrlOutput, error)
	GetQueueUrlAsync(ctx workflow.Context, input *sqs.GetQueueUrlInput) *SQSGetQueueUrlFuture

	ListDeadLetterSourceQueues(ctx workflow.Context, input *sqs.ListDeadLetterSourceQueuesInput) (*sqs.ListDeadLetterSourceQueuesOutput, error)
	ListDeadLetterSourceQueuesAsync(ctx workflow.Context, input *sqs.ListDeadLetterSourceQueuesInput) *SQSListDeadLetterSourceQueuesFuture

	ListQueueTags(ctx workflow.Context, input *sqs.ListQueueTagsInput) (*sqs.ListQueueTagsOutput, error)
	ListQueueTagsAsync(ctx workflow.Context, input *sqs.ListQueueTagsInput) *SQSListQueueTagsFuture

	ListQueues(ctx workflow.Context, input *sqs.ListQueuesInput) (*sqs.ListQueuesOutput, error)
	ListQueuesAsync(ctx workflow.Context, input *sqs.ListQueuesInput) *SQSListQueuesFuture

	PurgeQueue(ctx workflow.Context, input *sqs.PurgeQueueInput) (*sqs.PurgeQueueOutput, error)
	PurgeQueueAsync(ctx workflow.Context, input *sqs.PurgeQueueInput) *SQSPurgeQueueFuture

	ReceiveMessage(ctx workflow.Context, input *sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error)
	ReceiveMessageAsync(ctx workflow.Context, input *sqs.ReceiveMessageInput) *SQSReceiveMessageFuture

	RemovePermission(ctx workflow.Context, input *sqs.RemovePermissionInput) (*sqs.RemovePermissionOutput, error)
	RemovePermissionAsync(ctx workflow.Context, input *sqs.RemovePermissionInput) *SQSRemovePermissionFuture

	SendMessage(ctx workflow.Context, input *sqs.SendMessageInput) (*sqs.SendMessageOutput, error)
	SendMessageAsync(ctx workflow.Context, input *sqs.SendMessageInput) *SQSSendMessageFuture

	SendMessageBatch(ctx workflow.Context, input *sqs.SendMessageBatchInput) (*sqs.SendMessageBatchOutput, error)
	SendMessageBatchAsync(ctx workflow.Context, input *sqs.SendMessageBatchInput) *SQSSendMessageBatchFuture

	SetQueueAttributes(ctx workflow.Context, input *sqs.SetQueueAttributesInput) (*sqs.SetQueueAttributesOutput, error)
	SetQueueAttributesAsync(ctx workflow.Context, input *sqs.SetQueueAttributesInput) *SQSSetQueueAttributesFuture

	TagQueue(ctx workflow.Context, input *sqs.TagQueueInput) (*sqs.TagQueueOutput, error)
	TagQueueAsync(ctx workflow.Context, input *sqs.TagQueueInput) *SQSTagQueueFuture

	UntagQueue(ctx workflow.Context, input *sqs.UntagQueueInput) (*sqs.UntagQueueOutput, error)
	UntagQueueAsync(ctx workflow.Context, input *sqs.UntagQueueInput) *SQSUntagQueueFuture
}

type SQSStub struct{}

func NewSQSStub() SQSClient {
	return &SQSStub{}
}

type SQSAddPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSAddPermissionFuture) Get(ctx workflow.Context) (*sqs.AddPermissionOutput, error) {
	var output sqs.AddPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSChangeMessageVisibilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSChangeMessageVisibilityFuture) Get(ctx workflow.Context) (*sqs.ChangeMessageVisibilityOutput, error) {
	var output sqs.ChangeMessageVisibilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSChangeMessageVisibilityBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSChangeMessageVisibilityBatchFuture) Get(ctx workflow.Context) (*sqs.ChangeMessageVisibilityBatchOutput, error) {
	var output sqs.ChangeMessageVisibilityBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSCreateQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSCreateQueueFuture) Get(ctx workflow.Context) (*sqs.CreateQueueOutput, error) {
	var output sqs.CreateQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSDeleteMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSDeleteMessageFuture) Get(ctx workflow.Context) (*sqs.DeleteMessageOutput, error) {
	var output sqs.DeleteMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSDeleteMessageBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSDeleteMessageBatchFuture) Get(ctx workflow.Context) (*sqs.DeleteMessageBatchOutput, error) {
	var output sqs.DeleteMessageBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSDeleteQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSDeleteQueueFuture) Get(ctx workflow.Context) (*sqs.DeleteQueueOutput, error) {
	var output sqs.DeleteQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSGetQueueAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSGetQueueAttributesFuture) Get(ctx workflow.Context) (*sqs.GetQueueAttributesOutput, error) {
	var output sqs.GetQueueAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSGetQueueUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSGetQueueUrlFuture) Get(ctx workflow.Context) (*sqs.GetQueueUrlOutput, error) {
	var output sqs.GetQueueUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSListDeadLetterSourceQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSListDeadLetterSourceQueuesFuture) Get(ctx workflow.Context) (*sqs.ListDeadLetterSourceQueuesOutput, error) {
	var output sqs.ListDeadLetterSourceQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSListQueueTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSListQueueTagsFuture) Get(ctx workflow.Context) (*sqs.ListQueueTagsOutput, error) {
	var output sqs.ListQueueTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSListQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSListQueuesFuture) Get(ctx workflow.Context) (*sqs.ListQueuesOutput, error) {
	var output sqs.ListQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSPurgeQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSPurgeQueueFuture) Get(ctx workflow.Context) (*sqs.PurgeQueueOutput, error) {
	var output sqs.PurgeQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSReceiveMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSReceiveMessageFuture) Get(ctx workflow.Context) (*sqs.ReceiveMessageOutput, error) {
	var output sqs.ReceiveMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSRemovePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSRemovePermissionFuture) Get(ctx workflow.Context) (*sqs.RemovePermissionOutput, error) {
	var output sqs.RemovePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSSendMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSSendMessageFuture) Get(ctx workflow.Context) (*sqs.SendMessageOutput, error) {
	var output sqs.SendMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSSendMessageBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSSendMessageBatchFuture) Get(ctx workflow.Context) (*sqs.SendMessageBatchOutput, error) {
	var output sqs.SendMessageBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSSetQueueAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSSetQueueAttributesFuture) Get(ctx workflow.Context) (*sqs.SetQueueAttributesOutput, error) {
	var output sqs.SetQueueAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSTagQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSTagQueueFuture) Get(ctx workflow.Context) (*sqs.TagQueueOutput, error) {
	var output sqs.TagQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SQSUntagQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SQSUntagQueueFuture) Get(ctx workflow.Context) (*sqs.UntagQueueOutput, error) {
	var output sqs.UntagQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) AddPermission(ctx workflow.Context, input *sqs.AddPermissionInput) (*sqs.AddPermissionOutput, error) {
	var output sqs.AddPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.AddPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) AddPermissionAsync(ctx workflow.Context, input *sqs.AddPermissionInput) *SQSAddPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.AddPermission", input)
	return &SQSAddPermissionFuture{Future: future}
}

func (a *SQSStub) ChangeMessageVisibility(ctx workflow.Context, input *sqs.ChangeMessageVisibilityInput) (*sqs.ChangeMessageVisibilityOutput, error) {
	var output sqs.ChangeMessageVisibilityOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.ChangeMessageVisibility", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) ChangeMessageVisibilityAsync(ctx workflow.Context, input *sqs.ChangeMessageVisibilityInput) *SQSChangeMessageVisibilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.ChangeMessageVisibility", input)
	return &SQSChangeMessageVisibilityFuture{Future: future}
}

func (a *SQSStub) ChangeMessageVisibilityBatch(ctx workflow.Context, input *sqs.ChangeMessageVisibilityBatchInput) (*sqs.ChangeMessageVisibilityBatchOutput, error) {
	var output sqs.ChangeMessageVisibilityBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.ChangeMessageVisibilityBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) ChangeMessageVisibilityBatchAsync(ctx workflow.Context, input *sqs.ChangeMessageVisibilityBatchInput) *SQSChangeMessageVisibilityBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.ChangeMessageVisibilityBatch", input)
	return &SQSChangeMessageVisibilityBatchFuture{Future: future}
}

func (a *SQSStub) CreateQueue(ctx workflow.Context, input *sqs.CreateQueueInput) (*sqs.CreateQueueOutput, error) {
	var output sqs.CreateQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.CreateQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) CreateQueueAsync(ctx workflow.Context, input *sqs.CreateQueueInput) *SQSCreateQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.CreateQueue", input)
	return &SQSCreateQueueFuture{Future: future}
}

func (a *SQSStub) DeleteMessage(ctx workflow.Context, input *sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error) {
	var output sqs.DeleteMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.DeleteMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) DeleteMessageAsync(ctx workflow.Context, input *sqs.DeleteMessageInput) *SQSDeleteMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.DeleteMessage", input)
	return &SQSDeleteMessageFuture{Future: future}
}

func (a *SQSStub) DeleteMessageBatch(ctx workflow.Context, input *sqs.DeleteMessageBatchInput) (*sqs.DeleteMessageBatchOutput, error) {
	var output sqs.DeleteMessageBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.DeleteMessageBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) DeleteMessageBatchAsync(ctx workflow.Context, input *sqs.DeleteMessageBatchInput) *SQSDeleteMessageBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.DeleteMessageBatch", input)
	return &SQSDeleteMessageBatchFuture{Future: future}
}

func (a *SQSStub) DeleteQueue(ctx workflow.Context, input *sqs.DeleteQueueInput) (*sqs.DeleteQueueOutput, error) {
	var output sqs.DeleteQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.DeleteQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) DeleteQueueAsync(ctx workflow.Context, input *sqs.DeleteQueueInput) *SQSDeleteQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.DeleteQueue", input)
	return &SQSDeleteQueueFuture{Future: future}
}

func (a *SQSStub) GetQueueAttributes(ctx workflow.Context, input *sqs.GetQueueAttributesInput) (*sqs.GetQueueAttributesOutput, error) {
	var output sqs.GetQueueAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.GetQueueAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) GetQueueAttributesAsync(ctx workflow.Context, input *sqs.GetQueueAttributesInput) *SQSGetQueueAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.GetQueueAttributes", input)
	return &SQSGetQueueAttributesFuture{Future: future}
}

func (a *SQSStub) GetQueueUrl(ctx workflow.Context, input *sqs.GetQueueUrlInput) (*sqs.GetQueueUrlOutput, error) {
	var output sqs.GetQueueUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.GetQueueUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) GetQueueUrlAsync(ctx workflow.Context, input *sqs.GetQueueUrlInput) *SQSGetQueueUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.GetQueueUrl", input)
	return &SQSGetQueueUrlFuture{Future: future}
}

func (a *SQSStub) ListDeadLetterSourceQueues(ctx workflow.Context, input *sqs.ListDeadLetterSourceQueuesInput) (*sqs.ListDeadLetterSourceQueuesOutput, error) {
	var output sqs.ListDeadLetterSourceQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.ListDeadLetterSourceQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) ListDeadLetterSourceQueuesAsync(ctx workflow.Context, input *sqs.ListDeadLetterSourceQueuesInput) *SQSListDeadLetterSourceQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.ListDeadLetterSourceQueues", input)
	return &SQSListDeadLetterSourceQueuesFuture{Future: future}
}

func (a *SQSStub) ListQueueTags(ctx workflow.Context, input *sqs.ListQueueTagsInput) (*sqs.ListQueueTagsOutput, error) {
	var output sqs.ListQueueTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.ListQueueTags", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) ListQueueTagsAsync(ctx workflow.Context, input *sqs.ListQueueTagsInput) *SQSListQueueTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.ListQueueTags", input)
	return &SQSListQueueTagsFuture{Future: future}
}

func (a *SQSStub) ListQueues(ctx workflow.Context, input *sqs.ListQueuesInput) (*sqs.ListQueuesOutput, error) {
	var output sqs.ListQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.ListQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) ListQueuesAsync(ctx workflow.Context, input *sqs.ListQueuesInput) *SQSListQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.ListQueues", input)
	return &SQSListQueuesFuture{Future: future}
}

func (a *SQSStub) PurgeQueue(ctx workflow.Context, input *sqs.PurgeQueueInput) (*sqs.PurgeQueueOutput, error) {
	var output sqs.PurgeQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.PurgeQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) PurgeQueueAsync(ctx workflow.Context, input *sqs.PurgeQueueInput) *SQSPurgeQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.PurgeQueue", input)
	return &SQSPurgeQueueFuture{Future: future}
}

func (a *SQSStub) ReceiveMessage(ctx workflow.Context, input *sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error) {
	var output sqs.ReceiveMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.ReceiveMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) ReceiveMessageAsync(ctx workflow.Context, input *sqs.ReceiveMessageInput) *SQSReceiveMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.ReceiveMessage", input)
	return &SQSReceiveMessageFuture{Future: future}
}

func (a *SQSStub) RemovePermission(ctx workflow.Context, input *sqs.RemovePermissionInput) (*sqs.RemovePermissionOutput, error) {
	var output sqs.RemovePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.RemovePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) RemovePermissionAsync(ctx workflow.Context, input *sqs.RemovePermissionInput) *SQSRemovePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.RemovePermission", input)
	return &SQSRemovePermissionFuture{Future: future}
}

func (a *SQSStub) SendMessage(ctx workflow.Context, input *sqs.SendMessageInput) (*sqs.SendMessageOutput, error) {
	var output sqs.SendMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.SendMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) SendMessageAsync(ctx workflow.Context, input *sqs.SendMessageInput) *SQSSendMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.SendMessage", input)
	return &SQSSendMessageFuture{Future: future}
}

func (a *SQSStub) SendMessageBatch(ctx workflow.Context, input *sqs.SendMessageBatchInput) (*sqs.SendMessageBatchOutput, error) {
	var output sqs.SendMessageBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.SendMessageBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) SendMessageBatchAsync(ctx workflow.Context, input *sqs.SendMessageBatchInput) *SQSSendMessageBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.SendMessageBatch", input)
	return &SQSSendMessageBatchFuture{Future: future}
}

func (a *SQSStub) SetQueueAttributes(ctx workflow.Context, input *sqs.SetQueueAttributesInput) (*sqs.SetQueueAttributesOutput, error) {
	var output sqs.SetQueueAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.SetQueueAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) SetQueueAttributesAsync(ctx workflow.Context, input *sqs.SetQueueAttributesInput) *SQSSetQueueAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.SetQueueAttributes", input)
	return &SQSSetQueueAttributesFuture{Future: future}
}

func (a *SQSStub) TagQueue(ctx workflow.Context, input *sqs.TagQueueInput) (*sqs.TagQueueOutput, error) {
	var output sqs.TagQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.TagQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) TagQueueAsync(ctx workflow.Context, input *sqs.TagQueueInput) *SQSTagQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.TagQueue", input)
	return &SQSTagQueueFuture{Future: future}
}

func (a *SQSStub) UntagQueue(ctx workflow.Context, input *sqs.UntagQueueInput) (*sqs.UntagQueueOutput, error) {
	var output sqs.UntagQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.sqs.UntagQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *SQSStub) UntagQueueAsync(ctx workflow.Context, input *sqs.UntagQueueInput) *SQSUntagQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sqs.UntagQueue", input)
	return &SQSUntagQueueFuture{Future: future}
}
