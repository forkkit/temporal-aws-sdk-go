// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/ssoadmin"
	"go.temporal.io/sdk/workflow"
)

type SSOAdminClient interface {
	AttachManagedPolicyToPermissionSet(ctx workflow.Context, input *ssoadmin.AttachManagedPolicyToPermissionSetInput) (*ssoadmin.AttachManagedPolicyToPermissionSetOutput, error)
	AttachManagedPolicyToPermissionSetAsync(ctx workflow.Context, input *ssoadmin.AttachManagedPolicyToPermissionSetInput) *SsoadminAttachManagedPolicyToPermissionSetFuture

	CreateAccountAssignment(ctx workflow.Context, input *ssoadmin.CreateAccountAssignmentInput) (*ssoadmin.CreateAccountAssignmentOutput, error)
	CreateAccountAssignmentAsync(ctx workflow.Context, input *ssoadmin.CreateAccountAssignmentInput) *SsoadminCreateAccountAssignmentFuture

	CreatePermissionSet(ctx workflow.Context, input *ssoadmin.CreatePermissionSetInput) (*ssoadmin.CreatePermissionSetOutput, error)
	CreatePermissionSetAsync(ctx workflow.Context, input *ssoadmin.CreatePermissionSetInput) *SsoadminCreatePermissionSetFuture

	DeleteAccountAssignment(ctx workflow.Context, input *ssoadmin.DeleteAccountAssignmentInput) (*ssoadmin.DeleteAccountAssignmentOutput, error)
	DeleteAccountAssignmentAsync(ctx workflow.Context, input *ssoadmin.DeleteAccountAssignmentInput) *SsoadminDeleteAccountAssignmentFuture

	DeleteInlinePolicyFromPermissionSet(ctx workflow.Context, input *ssoadmin.DeleteInlinePolicyFromPermissionSetInput) (*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput, error)
	DeleteInlinePolicyFromPermissionSetAsync(ctx workflow.Context, input *ssoadmin.DeleteInlinePolicyFromPermissionSetInput) *SsoadminDeleteInlinePolicyFromPermissionSetFuture

	DeletePermissionSet(ctx workflow.Context, input *ssoadmin.DeletePermissionSetInput) (*ssoadmin.DeletePermissionSetOutput, error)
	DeletePermissionSetAsync(ctx workflow.Context, input *ssoadmin.DeletePermissionSetInput) *SsoadminDeletePermissionSetFuture

	DescribeAccountAssignmentCreationStatus(ctx workflow.Context, input *ssoadmin.DescribeAccountAssignmentCreationStatusInput) (*ssoadmin.DescribeAccountAssignmentCreationStatusOutput, error)
	DescribeAccountAssignmentCreationStatusAsync(ctx workflow.Context, input *ssoadmin.DescribeAccountAssignmentCreationStatusInput) *SsoadminDescribeAccountAssignmentCreationStatusFuture

	DescribeAccountAssignmentDeletionStatus(ctx workflow.Context, input *ssoadmin.DescribeAccountAssignmentDeletionStatusInput) (*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput, error)
	DescribeAccountAssignmentDeletionStatusAsync(ctx workflow.Context, input *ssoadmin.DescribeAccountAssignmentDeletionStatusInput) *SsoadminDescribeAccountAssignmentDeletionStatusFuture

	DescribePermissionSet(ctx workflow.Context, input *ssoadmin.DescribePermissionSetInput) (*ssoadmin.DescribePermissionSetOutput, error)
	DescribePermissionSetAsync(ctx workflow.Context, input *ssoadmin.DescribePermissionSetInput) *SsoadminDescribePermissionSetFuture

	DescribePermissionSetProvisioningStatus(ctx workflow.Context, input *ssoadmin.DescribePermissionSetProvisioningStatusInput) (*ssoadmin.DescribePermissionSetProvisioningStatusOutput, error)
	DescribePermissionSetProvisioningStatusAsync(ctx workflow.Context, input *ssoadmin.DescribePermissionSetProvisioningStatusInput) *SsoadminDescribePermissionSetProvisioningStatusFuture

	DetachManagedPolicyFromPermissionSet(ctx workflow.Context, input *ssoadmin.DetachManagedPolicyFromPermissionSetInput) (*ssoadmin.DetachManagedPolicyFromPermissionSetOutput, error)
	DetachManagedPolicyFromPermissionSetAsync(ctx workflow.Context, input *ssoadmin.DetachManagedPolicyFromPermissionSetInput) *SsoadminDetachManagedPolicyFromPermissionSetFuture

	GetInlinePolicyForPermissionSet(ctx workflow.Context, input *ssoadmin.GetInlinePolicyForPermissionSetInput) (*ssoadmin.GetInlinePolicyForPermissionSetOutput, error)
	GetInlinePolicyForPermissionSetAsync(ctx workflow.Context, input *ssoadmin.GetInlinePolicyForPermissionSetInput) *SsoadminGetInlinePolicyForPermissionSetFuture

	ListAccountAssignmentCreationStatus(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentCreationStatusInput) (*ssoadmin.ListAccountAssignmentCreationStatusOutput, error)
	ListAccountAssignmentCreationStatusAsync(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentCreationStatusInput) *SsoadminListAccountAssignmentCreationStatusFuture

	ListAccountAssignmentDeletionStatus(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentDeletionStatusInput) (*ssoadmin.ListAccountAssignmentDeletionStatusOutput, error)
	ListAccountAssignmentDeletionStatusAsync(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentDeletionStatusInput) *SsoadminListAccountAssignmentDeletionStatusFuture

	ListAccountAssignments(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentsInput) (*ssoadmin.ListAccountAssignmentsOutput, error)
	ListAccountAssignmentsAsync(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentsInput) *SsoadminListAccountAssignmentsFuture

	ListAccountsForProvisionedPermissionSet(ctx workflow.Context, input *ssoadmin.ListAccountsForProvisionedPermissionSetInput) (*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, error)
	ListAccountsForProvisionedPermissionSetAsync(ctx workflow.Context, input *ssoadmin.ListAccountsForProvisionedPermissionSetInput) *SsoadminListAccountsForProvisionedPermissionSetFuture

	ListInstances(ctx workflow.Context, input *ssoadmin.ListInstancesInput) (*ssoadmin.ListInstancesOutput, error)
	ListInstancesAsync(ctx workflow.Context, input *ssoadmin.ListInstancesInput) *SsoadminListInstancesFuture

	ListManagedPoliciesInPermissionSet(ctx workflow.Context, input *ssoadmin.ListManagedPoliciesInPermissionSetInput) (*ssoadmin.ListManagedPoliciesInPermissionSetOutput, error)
	ListManagedPoliciesInPermissionSetAsync(ctx workflow.Context, input *ssoadmin.ListManagedPoliciesInPermissionSetInput) *SsoadminListManagedPoliciesInPermissionSetFuture

	ListPermissionSetProvisioningStatus(ctx workflow.Context, input *ssoadmin.ListPermissionSetProvisioningStatusInput) (*ssoadmin.ListPermissionSetProvisioningStatusOutput, error)
	ListPermissionSetProvisioningStatusAsync(ctx workflow.Context, input *ssoadmin.ListPermissionSetProvisioningStatusInput) *SsoadminListPermissionSetProvisioningStatusFuture

	ListPermissionSets(ctx workflow.Context, input *ssoadmin.ListPermissionSetsInput) (*ssoadmin.ListPermissionSetsOutput, error)
	ListPermissionSetsAsync(ctx workflow.Context, input *ssoadmin.ListPermissionSetsInput) *SsoadminListPermissionSetsFuture

	ListPermissionSetsProvisionedToAccount(ctx workflow.Context, input *ssoadmin.ListPermissionSetsProvisionedToAccountInput) (*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, error)
	ListPermissionSetsProvisionedToAccountAsync(ctx workflow.Context, input *ssoadmin.ListPermissionSetsProvisionedToAccountInput) *SsoadminListPermissionSetsProvisionedToAccountFuture

	ListTagsForResource(ctx workflow.Context, input *ssoadmin.ListTagsForResourceInput) (*ssoadmin.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *ssoadmin.ListTagsForResourceInput) *SsoadminListTagsForResourceFuture

	ProvisionPermissionSet(ctx workflow.Context, input *ssoadmin.ProvisionPermissionSetInput) (*ssoadmin.ProvisionPermissionSetOutput, error)
	ProvisionPermissionSetAsync(ctx workflow.Context, input *ssoadmin.ProvisionPermissionSetInput) *SsoadminProvisionPermissionSetFuture

	PutInlinePolicyToPermissionSet(ctx workflow.Context, input *ssoadmin.PutInlinePolicyToPermissionSetInput) (*ssoadmin.PutInlinePolicyToPermissionSetOutput, error)
	PutInlinePolicyToPermissionSetAsync(ctx workflow.Context, input *ssoadmin.PutInlinePolicyToPermissionSetInput) *SsoadminPutInlinePolicyToPermissionSetFuture

	TagResource(ctx workflow.Context, input *ssoadmin.TagResourceInput) (*ssoadmin.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *ssoadmin.TagResourceInput) *SsoadminTagResourceFuture

	UntagResource(ctx workflow.Context, input *ssoadmin.UntagResourceInput) (*ssoadmin.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *ssoadmin.UntagResourceInput) *SsoadminUntagResourceFuture

	UpdatePermissionSet(ctx workflow.Context, input *ssoadmin.UpdatePermissionSetInput) (*ssoadmin.UpdatePermissionSetOutput, error)
	UpdatePermissionSetAsync(ctx workflow.Context, input *ssoadmin.UpdatePermissionSetInput) *SsoadminUpdatePermissionSetFuture
}

type SSOAdminStub struct{}

func NewSSOAdminStub() SSOAdminClient {
	return &SSOAdminStub{}
}

type SsoadminAttachManagedPolicyToPermissionSetFuture struct {
	Future workflow.Future
}

func (r *SsoadminAttachManagedPolicyToPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.AttachManagedPolicyToPermissionSetOutput, error) {
	var output ssoadmin.AttachManagedPolicyToPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminCreateAccountAssignmentFuture struct {
	Future workflow.Future
}

func (r *SsoadminCreateAccountAssignmentFuture) Get(ctx workflow.Context) (*ssoadmin.CreateAccountAssignmentOutput, error) {
	var output ssoadmin.CreateAccountAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminCreatePermissionSetFuture struct {
	Future workflow.Future
}

func (r *SsoadminCreatePermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.CreatePermissionSetOutput, error) {
	var output ssoadmin.CreatePermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminDeleteAccountAssignmentFuture struct {
	Future workflow.Future
}

func (r *SsoadminDeleteAccountAssignmentFuture) Get(ctx workflow.Context) (*ssoadmin.DeleteAccountAssignmentOutput, error) {
	var output ssoadmin.DeleteAccountAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminDeleteInlinePolicyFromPermissionSetFuture struct {
	Future workflow.Future
}

func (r *SsoadminDeleteInlinePolicyFromPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput, error) {
	var output ssoadmin.DeleteInlinePolicyFromPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminDeletePermissionSetFuture struct {
	Future workflow.Future
}

func (r *SsoadminDeletePermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.DeletePermissionSetOutput, error) {
	var output ssoadmin.DeletePermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminDescribeAccountAssignmentCreationStatusFuture struct {
	Future workflow.Future
}

func (r *SsoadminDescribeAccountAssignmentCreationStatusFuture) Get(ctx workflow.Context) (*ssoadmin.DescribeAccountAssignmentCreationStatusOutput, error) {
	var output ssoadmin.DescribeAccountAssignmentCreationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminDescribeAccountAssignmentDeletionStatusFuture struct {
	Future workflow.Future
}

func (r *SsoadminDescribeAccountAssignmentDeletionStatusFuture) Get(ctx workflow.Context) (*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput, error) {
	var output ssoadmin.DescribeAccountAssignmentDeletionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminDescribePermissionSetFuture struct {
	Future workflow.Future
}

func (r *SsoadminDescribePermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.DescribePermissionSetOutput, error) {
	var output ssoadmin.DescribePermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminDescribePermissionSetProvisioningStatusFuture struct {
	Future workflow.Future
}

func (r *SsoadminDescribePermissionSetProvisioningStatusFuture) Get(ctx workflow.Context) (*ssoadmin.DescribePermissionSetProvisioningStatusOutput, error) {
	var output ssoadmin.DescribePermissionSetProvisioningStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminDetachManagedPolicyFromPermissionSetFuture struct {
	Future workflow.Future
}

func (r *SsoadminDetachManagedPolicyFromPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.DetachManagedPolicyFromPermissionSetOutput, error) {
	var output ssoadmin.DetachManagedPolicyFromPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminGetInlinePolicyForPermissionSetFuture struct {
	Future workflow.Future
}

func (r *SsoadminGetInlinePolicyForPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.GetInlinePolicyForPermissionSetOutput, error) {
	var output ssoadmin.GetInlinePolicyForPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminListAccountAssignmentCreationStatusFuture struct {
	Future workflow.Future
}

func (r *SsoadminListAccountAssignmentCreationStatusFuture) Get(ctx workflow.Context) (*ssoadmin.ListAccountAssignmentCreationStatusOutput, error) {
	var output ssoadmin.ListAccountAssignmentCreationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminListAccountAssignmentDeletionStatusFuture struct {
	Future workflow.Future
}

func (r *SsoadminListAccountAssignmentDeletionStatusFuture) Get(ctx workflow.Context) (*ssoadmin.ListAccountAssignmentDeletionStatusOutput, error) {
	var output ssoadmin.ListAccountAssignmentDeletionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminListAccountAssignmentsFuture struct {
	Future workflow.Future
}

func (r *SsoadminListAccountAssignmentsFuture) Get(ctx workflow.Context) (*ssoadmin.ListAccountAssignmentsOutput, error) {
	var output ssoadmin.ListAccountAssignmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminListAccountsForProvisionedPermissionSetFuture struct {
	Future workflow.Future
}

func (r *SsoadminListAccountsForProvisionedPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, error) {
	var output ssoadmin.ListAccountsForProvisionedPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminListInstancesFuture struct {
	Future workflow.Future
}

func (r *SsoadminListInstancesFuture) Get(ctx workflow.Context) (*ssoadmin.ListInstancesOutput, error) {
	var output ssoadmin.ListInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminListManagedPoliciesInPermissionSetFuture struct {
	Future workflow.Future
}

func (r *SsoadminListManagedPoliciesInPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.ListManagedPoliciesInPermissionSetOutput, error) {
	var output ssoadmin.ListManagedPoliciesInPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminListPermissionSetProvisioningStatusFuture struct {
	Future workflow.Future
}

func (r *SsoadminListPermissionSetProvisioningStatusFuture) Get(ctx workflow.Context) (*ssoadmin.ListPermissionSetProvisioningStatusOutput, error) {
	var output ssoadmin.ListPermissionSetProvisioningStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminListPermissionSetsFuture struct {
	Future workflow.Future
}

func (r *SsoadminListPermissionSetsFuture) Get(ctx workflow.Context) (*ssoadmin.ListPermissionSetsOutput, error) {
	var output ssoadmin.ListPermissionSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminListPermissionSetsProvisionedToAccountFuture struct {
	Future workflow.Future
}

func (r *SsoadminListPermissionSetsProvisionedToAccountFuture) Get(ctx workflow.Context) (*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, error) {
	var output ssoadmin.ListPermissionSetsProvisionedToAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *SsoadminListTagsForResourceFuture) Get(ctx workflow.Context) (*ssoadmin.ListTagsForResourceOutput, error) {
	var output ssoadmin.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminProvisionPermissionSetFuture struct {
	Future workflow.Future
}

func (r *SsoadminProvisionPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.ProvisionPermissionSetOutput, error) {
	var output ssoadmin.ProvisionPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminPutInlinePolicyToPermissionSetFuture struct {
	Future workflow.Future
}

func (r *SsoadminPutInlinePolicyToPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.PutInlinePolicyToPermissionSetOutput, error) {
	var output ssoadmin.PutInlinePolicyToPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminTagResourceFuture struct {
	Future workflow.Future
}

func (r *SsoadminTagResourceFuture) Get(ctx workflow.Context) (*ssoadmin.TagResourceOutput, error) {
	var output ssoadmin.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminUntagResourceFuture struct {
	Future workflow.Future
}

func (r *SsoadminUntagResourceFuture) Get(ctx workflow.Context) (*ssoadmin.UntagResourceOutput, error) {
	var output ssoadmin.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsoadminUpdatePermissionSetFuture struct {
	Future workflow.Future
}

func (r *SsoadminUpdatePermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.UpdatePermissionSetOutput, error) {
	var output ssoadmin.UpdatePermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) AttachManagedPolicyToPermissionSet(ctx workflow.Context, input *ssoadmin.AttachManagedPolicyToPermissionSetInput) (*ssoadmin.AttachManagedPolicyToPermissionSetOutput, error) {
	var output ssoadmin.AttachManagedPolicyToPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.AttachManagedPolicyToPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) AttachManagedPolicyToPermissionSetAsync(ctx workflow.Context, input *ssoadmin.AttachManagedPolicyToPermissionSetInput) *SsoadminAttachManagedPolicyToPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.AttachManagedPolicyToPermissionSet", input)
	return &SsoadminAttachManagedPolicyToPermissionSetFuture{Future: future}
}

func (a *SSOAdminStub) CreateAccountAssignment(ctx workflow.Context, input *ssoadmin.CreateAccountAssignmentInput) (*ssoadmin.CreateAccountAssignmentOutput, error) {
	var output ssoadmin.CreateAccountAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.CreateAccountAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) CreateAccountAssignmentAsync(ctx workflow.Context, input *ssoadmin.CreateAccountAssignmentInput) *SsoadminCreateAccountAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.CreateAccountAssignment", input)
	return &SsoadminCreateAccountAssignmentFuture{Future: future}
}

func (a *SSOAdminStub) CreatePermissionSet(ctx workflow.Context, input *ssoadmin.CreatePermissionSetInput) (*ssoadmin.CreatePermissionSetOutput, error) {
	var output ssoadmin.CreatePermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.CreatePermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) CreatePermissionSetAsync(ctx workflow.Context, input *ssoadmin.CreatePermissionSetInput) *SsoadminCreatePermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.CreatePermissionSet", input)
	return &SsoadminCreatePermissionSetFuture{Future: future}
}

func (a *SSOAdminStub) DeleteAccountAssignment(ctx workflow.Context, input *ssoadmin.DeleteAccountAssignmentInput) (*ssoadmin.DeleteAccountAssignmentOutput, error) {
	var output ssoadmin.DeleteAccountAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DeleteAccountAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) DeleteAccountAssignmentAsync(ctx workflow.Context, input *ssoadmin.DeleteAccountAssignmentInput) *SsoadminDeleteAccountAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DeleteAccountAssignment", input)
	return &SsoadminDeleteAccountAssignmentFuture{Future: future}
}

func (a *SSOAdminStub) DeleteInlinePolicyFromPermissionSet(ctx workflow.Context, input *ssoadmin.DeleteInlinePolicyFromPermissionSetInput) (*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput, error) {
	var output ssoadmin.DeleteInlinePolicyFromPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DeleteInlinePolicyFromPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) DeleteInlinePolicyFromPermissionSetAsync(ctx workflow.Context, input *ssoadmin.DeleteInlinePolicyFromPermissionSetInput) *SsoadminDeleteInlinePolicyFromPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DeleteInlinePolicyFromPermissionSet", input)
	return &SsoadminDeleteInlinePolicyFromPermissionSetFuture{Future: future}
}

func (a *SSOAdminStub) DeletePermissionSet(ctx workflow.Context, input *ssoadmin.DeletePermissionSetInput) (*ssoadmin.DeletePermissionSetOutput, error) {
	var output ssoadmin.DeletePermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DeletePermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) DeletePermissionSetAsync(ctx workflow.Context, input *ssoadmin.DeletePermissionSetInput) *SsoadminDeletePermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DeletePermissionSet", input)
	return &SsoadminDeletePermissionSetFuture{Future: future}
}

func (a *SSOAdminStub) DescribeAccountAssignmentCreationStatus(ctx workflow.Context, input *ssoadmin.DescribeAccountAssignmentCreationStatusInput) (*ssoadmin.DescribeAccountAssignmentCreationStatusOutput, error) {
	var output ssoadmin.DescribeAccountAssignmentCreationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DescribeAccountAssignmentCreationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) DescribeAccountAssignmentCreationStatusAsync(ctx workflow.Context, input *ssoadmin.DescribeAccountAssignmentCreationStatusInput) *SsoadminDescribeAccountAssignmentCreationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DescribeAccountAssignmentCreationStatus", input)
	return &SsoadminDescribeAccountAssignmentCreationStatusFuture{Future: future}
}

func (a *SSOAdminStub) DescribeAccountAssignmentDeletionStatus(ctx workflow.Context, input *ssoadmin.DescribeAccountAssignmentDeletionStatusInput) (*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput, error) {
	var output ssoadmin.DescribeAccountAssignmentDeletionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DescribeAccountAssignmentDeletionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) DescribeAccountAssignmentDeletionStatusAsync(ctx workflow.Context, input *ssoadmin.DescribeAccountAssignmentDeletionStatusInput) *SsoadminDescribeAccountAssignmentDeletionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DescribeAccountAssignmentDeletionStatus", input)
	return &SsoadminDescribeAccountAssignmentDeletionStatusFuture{Future: future}
}

func (a *SSOAdminStub) DescribePermissionSet(ctx workflow.Context, input *ssoadmin.DescribePermissionSetInput) (*ssoadmin.DescribePermissionSetOutput, error) {
	var output ssoadmin.DescribePermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DescribePermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) DescribePermissionSetAsync(ctx workflow.Context, input *ssoadmin.DescribePermissionSetInput) *SsoadminDescribePermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DescribePermissionSet", input)
	return &SsoadminDescribePermissionSetFuture{Future: future}
}

func (a *SSOAdminStub) DescribePermissionSetProvisioningStatus(ctx workflow.Context, input *ssoadmin.DescribePermissionSetProvisioningStatusInput) (*ssoadmin.DescribePermissionSetProvisioningStatusOutput, error) {
	var output ssoadmin.DescribePermissionSetProvisioningStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DescribePermissionSetProvisioningStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) DescribePermissionSetProvisioningStatusAsync(ctx workflow.Context, input *ssoadmin.DescribePermissionSetProvisioningStatusInput) *SsoadminDescribePermissionSetProvisioningStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DescribePermissionSetProvisioningStatus", input)
	return &SsoadminDescribePermissionSetProvisioningStatusFuture{Future: future}
}

func (a *SSOAdminStub) DetachManagedPolicyFromPermissionSet(ctx workflow.Context, input *ssoadmin.DetachManagedPolicyFromPermissionSetInput) (*ssoadmin.DetachManagedPolicyFromPermissionSetOutput, error) {
	var output ssoadmin.DetachManagedPolicyFromPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DetachManagedPolicyFromPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) DetachManagedPolicyFromPermissionSetAsync(ctx workflow.Context, input *ssoadmin.DetachManagedPolicyFromPermissionSetInput) *SsoadminDetachManagedPolicyFromPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.DetachManagedPolicyFromPermissionSet", input)
	return &SsoadminDetachManagedPolicyFromPermissionSetFuture{Future: future}
}

func (a *SSOAdminStub) GetInlinePolicyForPermissionSet(ctx workflow.Context, input *ssoadmin.GetInlinePolicyForPermissionSetInput) (*ssoadmin.GetInlinePolicyForPermissionSetOutput, error) {
	var output ssoadmin.GetInlinePolicyForPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.GetInlinePolicyForPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) GetInlinePolicyForPermissionSetAsync(ctx workflow.Context, input *ssoadmin.GetInlinePolicyForPermissionSetInput) *SsoadminGetInlinePolicyForPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.GetInlinePolicyForPermissionSet", input)
	return &SsoadminGetInlinePolicyForPermissionSetFuture{Future: future}
}

func (a *SSOAdminStub) ListAccountAssignmentCreationStatus(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentCreationStatusInput) (*ssoadmin.ListAccountAssignmentCreationStatusOutput, error) {
	var output ssoadmin.ListAccountAssignmentCreationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListAccountAssignmentCreationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) ListAccountAssignmentCreationStatusAsync(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentCreationStatusInput) *SsoadminListAccountAssignmentCreationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListAccountAssignmentCreationStatus", input)
	return &SsoadminListAccountAssignmentCreationStatusFuture{Future: future}
}

func (a *SSOAdminStub) ListAccountAssignmentDeletionStatus(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentDeletionStatusInput) (*ssoadmin.ListAccountAssignmentDeletionStatusOutput, error) {
	var output ssoadmin.ListAccountAssignmentDeletionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListAccountAssignmentDeletionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) ListAccountAssignmentDeletionStatusAsync(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentDeletionStatusInput) *SsoadminListAccountAssignmentDeletionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListAccountAssignmentDeletionStatus", input)
	return &SsoadminListAccountAssignmentDeletionStatusFuture{Future: future}
}

func (a *SSOAdminStub) ListAccountAssignments(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentsInput) (*ssoadmin.ListAccountAssignmentsOutput, error) {
	var output ssoadmin.ListAccountAssignmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListAccountAssignments", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) ListAccountAssignmentsAsync(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentsInput) *SsoadminListAccountAssignmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListAccountAssignments", input)
	return &SsoadminListAccountAssignmentsFuture{Future: future}
}

func (a *SSOAdminStub) ListAccountsForProvisionedPermissionSet(ctx workflow.Context, input *ssoadmin.ListAccountsForProvisionedPermissionSetInput) (*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, error) {
	var output ssoadmin.ListAccountsForProvisionedPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListAccountsForProvisionedPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) ListAccountsForProvisionedPermissionSetAsync(ctx workflow.Context, input *ssoadmin.ListAccountsForProvisionedPermissionSetInput) *SsoadminListAccountsForProvisionedPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListAccountsForProvisionedPermissionSet", input)
	return &SsoadminListAccountsForProvisionedPermissionSetFuture{Future: future}
}

func (a *SSOAdminStub) ListInstances(ctx workflow.Context, input *ssoadmin.ListInstancesInput) (*ssoadmin.ListInstancesOutput, error) {
	var output ssoadmin.ListInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) ListInstancesAsync(ctx workflow.Context, input *ssoadmin.ListInstancesInput) *SsoadminListInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListInstances", input)
	return &SsoadminListInstancesFuture{Future: future}
}

func (a *SSOAdminStub) ListManagedPoliciesInPermissionSet(ctx workflow.Context, input *ssoadmin.ListManagedPoliciesInPermissionSetInput) (*ssoadmin.ListManagedPoliciesInPermissionSetOutput, error) {
	var output ssoadmin.ListManagedPoliciesInPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListManagedPoliciesInPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) ListManagedPoliciesInPermissionSetAsync(ctx workflow.Context, input *ssoadmin.ListManagedPoliciesInPermissionSetInput) *SsoadminListManagedPoliciesInPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListManagedPoliciesInPermissionSet", input)
	return &SsoadminListManagedPoliciesInPermissionSetFuture{Future: future}
}

func (a *SSOAdminStub) ListPermissionSetProvisioningStatus(ctx workflow.Context, input *ssoadmin.ListPermissionSetProvisioningStatusInput) (*ssoadmin.ListPermissionSetProvisioningStatusOutput, error) {
	var output ssoadmin.ListPermissionSetProvisioningStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListPermissionSetProvisioningStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) ListPermissionSetProvisioningStatusAsync(ctx workflow.Context, input *ssoadmin.ListPermissionSetProvisioningStatusInput) *SsoadminListPermissionSetProvisioningStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListPermissionSetProvisioningStatus", input)
	return &SsoadminListPermissionSetProvisioningStatusFuture{Future: future}
}

func (a *SSOAdminStub) ListPermissionSets(ctx workflow.Context, input *ssoadmin.ListPermissionSetsInput) (*ssoadmin.ListPermissionSetsOutput, error) {
	var output ssoadmin.ListPermissionSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListPermissionSets", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) ListPermissionSetsAsync(ctx workflow.Context, input *ssoadmin.ListPermissionSetsInput) *SsoadminListPermissionSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListPermissionSets", input)
	return &SsoadminListPermissionSetsFuture{Future: future}
}

func (a *SSOAdminStub) ListPermissionSetsProvisionedToAccount(ctx workflow.Context, input *ssoadmin.ListPermissionSetsProvisionedToAccountInput) (*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, error) {
	var output ssoadmin.ListPermissionSetsProvisionedToAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListPermissionSetsProvisionedToAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) ListPermissionSetsProvisionedToAccountAsync(ctx workflow.Context, input *ssoadmin.ListPermissionSetsProvisionedToAccountInput) *SsoadminListPermissionSetsProvisionedToAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListPermissionSetsProvisionedToAccount", input)
	return &SsoadminListPermissionSetsProvisionedToAccountFuture{Future: future}
}

func (a *SSOAdminStub) ListTagsForResource(ctx workflow.Context, input *ssoadmin.ListTagsForResourceInput) (*ssoadmin.ListTagsForResourceOutput, error) {
	var output ssoadmin.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) ListTagsForResourceAsync(ctx workflow.Context, input *ssoadmin.ListTagsForResourceInput) *SsoadminListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ListTagsForResource", input)
	return &SsoadminListTagsForResourceFuture{Future: future}
}

func (a *SSOAdminStub) ProvisionPermissionSet(ctx workflow.Context, input *ssoadmin.ProvisionPermissionSetInput) (*ssoadmin.ProvisionPermissionSetOutput, error) {
	var output ssoadmin.ProvisionPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ProvisionPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) ProvisionPermissionSetAsync(ctx workflow.Context, input *ssoadmin.ProvisionPermissionSetInput) *SsoadminProvisionPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.ProvisionPermissionSet", input)
	return &SsoadminProvisionPermissionSetFuture{Future: future}
}

func (a *SSOAdminStub) PutInlinePolicyToPermissionSet(ctx workflow.Context, input *ssoadmin.PutInlinePolicyToPermissionSetInput) (*ssoadmin.PutInlinePolicyToPermissionSetOutput, error) {
	var output ssoadmin.PutInlinePolicyToPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.PutInlinePolicyToPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) PutInlinePolicyToPermissionSetAsync(ctx workflow.Context, input *ssoadmin.PutInlinePolicyToPermissionSetInput) *SsoadminPutInlinePolicyToPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.PutInlinePolicyToPermissionSet", input)
	return &SsoadminPutInlinePolicyToPermissionSetFuture{Future: future}
}

func (a *SSOAdminStub) TagResource(ctx workflow.Context, input *ssoadmin.TagResourceInput) (*ssoadmin.TagResourceOutput, error) {
	var output ssoadmin.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) TagResourceAsync(ctx workflow.Context, input *ssoadmin.TagResourceInput) *SsoadminTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.TagResource", input)
	return &SsoadminTagResourceFuture{Future: future}
}

func (a *SSOAdminStub) UntagResource(ctx workflow.Context, input *ssoadmin.UntagResourceInput) (*ssoadmin.UntagResourceOutput, error) {
	var output ssoadmin.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) UntagResourceAsync(ctx workflow.Context, input *ssoadmin.UntagResourceInput) *SsoadminUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.UntagResource", input)
	return &SsoadminUntagResourceFuture{Future: future}
}

func (a *SSOAdminStub) UpdatePermissionSet(ctx workflow.Context, input *ssoadmin.UpdatePermissionSetInput) (*ssoadmin.UpdatePermissionSetOutput, error) {
	var output ssoadmin.UpdatePermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssoadmin.UpdatePermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOAdminStub) UpdatePermissionSetAsync(ctx workflow.Context, input *ssoadmin.UpdatePermissionSetInput) *SsoadminUpdatePermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssoadmin.UpdatePermissionSet", input)
	return &SsoadminUpdatePermissionSetFuture{Future: future}
}
