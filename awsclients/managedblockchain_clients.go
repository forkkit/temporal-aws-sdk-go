// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/managedblockchain"
	"go.temporal.io/sdk/workflow"
)

type ManagedBlockchainClient interface {
	CreateMember(ctx workflow.Context, input *managedblockchain.CreateMemberInput) (*managedblockchain.CreateMemberOutput, error)
	CreateMemberAsync(ctx workflow.Context, input *managedblockchain.CreateMemberInput) *ManagedblockchainCreateMemberFuture

	CreateNetwork(ctx workflow.Context, input *managedblockchain.CreateNetworkInput) (*managedblockchain.CreateNetworkOutput, error)
	CreateNetworkAsync(ctx workflow.Context, input *managedblockchain.CreateNetworkInput) *ManagedblockchainCreateNetworkFuture

	CreateNode(ctx workflow.Context, input *managedblockchain.CreateNodeInput) (*managedblockchain.CreateNodeOutput, error)
	CreateNodeAsync(ctx workflow.Context, input *managedblockchain.CreateNodeInput) *ManagedblockchainCreateNodeFuture

	CreateProposal(ctx workflow.Context, input *managedblockchain.CreateProposalInput) (*managedblockchain.CreateProposalOutput, error)
	CreateProposalAsync(ctx workflow.Context, input *managedblockchain.CreateProposalInput) *ManagedblockchainCreateProposalFuture

	DeleteMember(ctx workflow.Context, input *managedblockchain.DeleteMemberInput) (*managedblockchain.DeleteMemberOutput, error)
	DeleteMemberAsync(ctx workflow.Context, input *managedblockchain.DeleteMemberInput) *ManagedblockchainDeleteMemberFuture

	DeleteNode(ctx workflow.Context, input *managedblockchain.DeleteNodeInput) (*managedblockchain.DeleteNodeOutput, error)
	DeleteNodeAsync(ctx workflow.Context, input *managedblockchain.DeleteNodeInput) *ManagedblockchainDeleteNodeFuture

	GetMember(ctx workflow.Context, input *managedblockchain.GetMemberInput) (*managedblockchain.GetMemberOutput, error)
	GetMemberAsync(ctx workflow.Context, input *managedblockchain.GetMemberInput) *ManagedblockchainGetMemberFuture

	GetNetwork(ctx workflow.Context, input *managedblockchain.GetNetworkInput) (*managedblockchain.GetNetworkOutput, error)
	GetNetworkAsync(ctx workflow.Context, input *managedblockchain.GetNetworkInput) *ManagedblockchainGetNetworkFuture

	GetNode(ctx workflow.Context, input *managedblockchain.GetNodeInput) (*managedblockchain.GetNodeOutput, error)
	GetNodeAsync(ctx workflow.Context, input *managedblockchain.GetNodeInput) *ManagedblockchainGetNodeFuture

	GetProposal(ctx workflow.Context, input *managedblockchain.GetProposalInput) (*managedblockchain.GetProposalOutput, error)
	GetProposalAsync(ctx workflow.Context, input *managedblockchain.GetProposalInput) *ManagedblockchainGetProposalFuture

	ListInvitations(ctx workflow.Context, input *managedblockchain.ListInvitationsInput) (*managedblockchain.ListInvitationsOutput, error)
	ListInvitationsAsync(ctx workflow.Context, input *managedblockchain.ListInvitationsInput) *ManagedblockchainListInvitationsFuture

	ListMembers(ctx workflow.Context, input *managedblockchain.ListMembersInput) (*managedblockchain.ListMembersOutput, error)
	ListMembersAsync(ctx workflow.Context, input *managedblockchain.ListMembersInput) *ManagedblockchainListMembersFuture

	ListNetworks(ctx workflow.Context, input *managedblockchain.ListNetworksInput) (*managedblockchain.ListNetworksOutput, error)
	ListNetworksAsync(ctx workflow.Context, input *managedblockchain.ListNetworksInput) *ManagedblockchainListNetworksFuture

	ListNodes(ctx workflow.Context, input *managedblockchain.ListNodesInput) (*managedblockchain.ListNodesOutput, error)
	ListNodesAsync(ctx workflow.Context, input *managedblockchain.ListNodesInput) *ManagedblockchainListNodesFuture

	ListProposalVotes(ctx workflow.Context, input *managedblockchain.ListProposalVotesInput) (*managedblockchain.ListProposalVotesOutput, error)
	ListProposalVotesAsync(ctx workflow.Context, input *managedblockchain.ListProposalVotesInput) *ManagedblockchainListProposalVotesFuture

	ListProposals(ctx workflow.Context, input *managedblockchain.ListProposalsInput) (*managedblockchain.ListProposalsOutput, error)
	ListProposalsAsync(ctx workflow.Context, input *managedblockchain.ListProposalsInput) *ManagedblockchainListProposalsFuture

	RejectInvitation(ctx workflow.Context, input *managedblockchain.RejectInvitationInput) (*managedblockchain.RejectInvitationOutput, error)
	RejectInvitationAsync(ctx workflow.Context, input *managedblockchain.RejectInvitationInput) *ManagedblockchainRejectInvitationFuture

	UpdateMember(ctx workflow.Context, input *managedblockchain.UpdateMemberInput) (*managedblockchain.UpdateMemberOutput, error)
	UpdateMemberAsync(ctx workflow.Context, input *managedblockchain.UpdateMemberInput) *ManagedblockchainUpdateMemberFuture

	UpdateNode(ctx workflow.Context, input *managedblockchain.UpdateNodeInput) (*managedblockchain.UpdateNodeOutput, error)
	UpdateNodeAsync(ctx workflow.Context, input *managedblockchain.UpdateNodeInput) *ManagedblockchainUpdateNodeFuture

	VoteOnProposal(ctx workflow.Context, input *managedblockchain.VoteOnProposalInput) (*managedblockchain.VoteOnProposalOutput, error)
	VoteOnProposalAsync(ctx workflow.Context, input *managedblockchain.VoteOnProposalInput) *ManagedblockchainVoteOnProposalFuture
}

type ManagedBlockchainStub struct{}

func NewManagedBlockchainStub() ManagedBlockchainClient {
	return &ManagedBlockchainStub{}
}

type ManagedblockchainCreateMemberFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainCreateMemberFuture) Get(ctx workflow.Context) (*managedblockchain.CreateMemberOutput, error) {
	var output managedblockchain.CreateMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainCreateNetworkFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainCreateNetworkFuture) Get(ctx workflow.Context) (*managedblockchain.CreateNetworkOutput, error) {
	var output managedblockchain.CreateNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainCreateNodeFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainCreateNodeFuture) Get(ctx workflow.Context) (*managedblockchain.CreateNodeOutput, error) {
	var output managedblockchain.CreateNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainCreateProposalFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainCreateProposalFuture) Get(ctx workflow.Context) (*managedblockchain.CreateProposalOutput, error) {
	var output managedblockchain.CreateProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainDeleteMemberFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainDeleteMemberFuture) Get(ctx workflow.Context) (*managedblockchain.DeleteMemberOutput, error) {
	var output managedblockchain.DeleteMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainDeleteNodeFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainDeleteNodeFuture) Get(ctx workflow.Context) (*managedblockchain.DeleteNodeOutput, error) {
	var output managedblockchain.DeleteNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainGetMemberFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainGetMemberFuture) Get(ctx workflow.Context) (*managedblockchain.GetMemberOutput, error) {
	var output managedblockchain.GetMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainGetNetworkFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainGetNetworkFuture) Get(ctx workflow.Context) (*managedblockchain.GetNetworkOutput, error) {
	var output managedblockchain.GetNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainGetNodeFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainGetNodeFuture) Get(ctx workflow.Context) (*managedblockchain.GetNodeOutput, error) {
	var output managedblockchain.GetNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainGetProposalFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainGetProposalFuture) Get(ctx workflow.Context) (*managedblockchain.GetProposalOutput, error) {
	var output managedblockchain.GetProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainListInvitationsFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainListInvitationsFuture) Get(ctx workflow.Context) (*managedblockchain.ListInvitationsOutput, error) {
	var output managedblockchain.ListInvitationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainListMembersFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainListMembersFuture) Get(ctx workflow.Context) (*managedblockchain.ListMembersOutput, error) {
	var output managedblockchain.ListMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainListNetworksFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainListNetworksFuture) Get(ctx workflow.Context) (*managedblockchain.ListNetworksOutput, error) {
	var output managedblockchain.ListNetworksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainListNodesFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainListNodesFuture) Get(ctx workflow.Context) (*managedblockchain.ListNodesOutput, error) {
	var output managedblockchain.ListNodesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainListProposalVotesFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainListProposalVotesFuture) Get(ctx workflow.Context) (*managedblockchain.ListProposalVotesOutput, error) {
	var output managedblockchain.ListProposalVotesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainListProposalsFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainListProposalsFuture) Get(ctx workflow.Context) (*managedblockchain.ListProposalsOutput, error) {
	var output managedblockchain.ListProposalsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainRejectInvitationFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainRejectInvitationFuture) Get(ctx workflow.Context) (*managedblockchain.RejectInvitationOutput, error) {
	var output managedblockchain.RejectInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainUpdateMemberFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainUpdateMemberFuture) Get(ctx workflow.Context) (*managedblockchain.UpdateMemberOutput, error) {
	var output managedblockchain.UpdateMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainUpdateNodeFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainUpdateNodeFuture) Get(ctx workflow.Context) (*managedblockchain.UpdateNodeOutput, error) {
	var output managedblockchain.UpdateNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ManagedblockchainVoteOnProposalFuture struct {
	Future workflow.Future
}

func (r *ManagedblockchainVoteOnProposalFuture) Get(ctx workflow.Context) (*managedblockchain.VoteOnProposalOutput, error) {
	var output managedblockchain.VoteOnProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) CreateMember(ctx workflow.Context, input *managedblockchain.CreateMemberInput) (*managedblockchain.CreateMemberOutput, error) {
	var output managedblockchain.CreateMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.CreateMember", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) CreateMemberAsync(ctx workflow.Context, input *managedblockchain.CreateMemberInput) *ManagedblockchainCreateMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.CreateMember", input)
	return &ManagedblockchainCreateMemberFuture{Future: future}
}

func (a *ManagedBlockchainStub) CreateNetwork(ctx workflow.Context, input *managedblockchain.CreateNetworkInput) (*managedblockchain.CreateNetworkOutput, error) {
	var output managedblockchain.CreateNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.CreateNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) CreateNetworkAsync(ctx workflow.Context, input *managedblockchain.CreateNetworkInput) *ManagedblockchainCreateNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.CreateNetwork", input)
	return &ManagedblockchainCreateNetworkFuture{Future: future}
}

func (a *ManagedBlockchainStub) CreateNode(ctx workflow.Context, input *managedblockchain.CreateNodeInput) (*managedblockchain.CreateNodeOutput, error) {
	var output managedblockchain.CreateNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.CreateNode", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) CreateNodeAsync(ctx workflow.Context, input *managedblockchain.CreateNodeInput) *ManagedblockchainCreateNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.CreateNode", input)
	return &ManagedblockchainCreateNodeFuture{Future: future}
}

func (a *ManagedBlockchainStub) CreateProposal(ctx workflow.Context, input *managedblockchain.CreateProposalInput) (*managedblockchain.CreateProposalOutput, error) {
	var output managedblockchain.CreateProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.CreateProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) CreateProposalAsync(ctx workflow.Context, input *managedblockchain.CreateProposalInput) *ManagedblockchainCreateProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.CreateProposal", input)
	return &ManagedblockchainCreateProposalFuture{Future: future}
}

func (a *ManagedBlockchainStub) DeleteMember(ctx workflow.Context, input *managedblockchain.DeleteMemberInput) (*managedblockchain.DeleteMemberOutput, error) {
	var output managedblockchain.DeleteMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.DeleteMember", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) DeleteMemberAsync(ctx workflow.Context, input *managedblockchain.DeleteMemberInput) *ManagedblockchainDeleteMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.DeleteMember", input)
	return &ManagedblockchainDeleteMemberFuture{Future: future}
}

func (a *ManagedBlockchainStub) DeleteNode(ctx workflow.Context, input *managedblockchain.DeleteNodeInput) (*managedblockchain.DeleteNodeOutput, error) {
	var output managedblockchain.DeleteNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.DeleteNode", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) DeleteNodeAsync(ctx workflow.Context, input *managedblockchain.DeleteNodeInput) *ManagedblockchainDeleteNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.DeleteNode", input)
	return &ManagedblockchainDeleteNodeFuture{Future: future}
}

func (a *ManagedBlockchainStub) GetMember(ctx workflow.Context, input *managedblockchain.GetMemberInput) (*managedblockchain.GetMemberOutput, error) {
	var output managedblockchain.GetMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.GetMember", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) GetMemberAsync(ctx workflow.Context, input *managedblockchain.GetMemberInput) *ManagedblockchainGetMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.GetMember", input)
	return &ManagedblockchainGetMemberFuture{Future: future}
}

func (a *ManagedBlockchainStub) GetNetwork(ctx workflow.Context, input *managedblockchain.GetNetworkInput) (*managedblockchain.GetNetworkOutput, error) {
	var output managedblockchain.GetNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.GetNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) GetNetworkAsync(ctx workflow.Context, input *managedblockchain.GetNetworkInput) *ManagedblockchainGetNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.GetNetwork", input)
	return &ManagedblockchainGetNetworkFuture{Future: future}
}

func (a *ManagedBlockchainStub) GetNode(ctx workflow.Context, input *managedblockchain.GetNodeInput) (*managedblockchain.GetNodeOutput, error) {
	var output managedblockchain.GetNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.GetNode", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) GetNodeAsync(ctx workflow.Context, input *managedblockchain.GetNodeInput) *ManagedblockchainGetNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.GetNode", input)
	return &ManagedblockchainGetNodeFuture{Future: future}
}

func (a *ManagedBlockchainStub) GetProposal(ctx workflow.Context, input *managedblockchain.GetProposalInput) (*managedblockchain.GetProposalOutput, error) {
	var output managedblockchain.GetProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.GetProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) GetProposalAsync(ctx workflow.Context, input *managedblockchain.GetProposalInput) *ManagedblockchainGetProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.GetProposal", input)
	return &ManagedblockchainGetProposalFuture{Future: future}
}

func (a *ManagedBlockchainStub) ListInvitations(ctx workflow.Context, input *managedblockchain.ListInvitationsInput) (*managedblockchain.ListInvitationsOutput, error) {
	var output managedblockchain.ListInvitationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.ListInvitations", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) ListInvitationsAsync(ctx workflow.Context, input *managedblockchain.ListInvitationsInput) *ManagedblockchainListInvitationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.ListInvitations", input)
	return &ManagedblockchainListInvitationsFuture{Future: future}
}

func (a *ManagedBlockchainStub) ListMembers(ctx workflow.Context, input *managedblockchain.ListMembersInput) (*managedblockchain.ListMembersOutput, error) {
	var output managedblockchain.ListMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.ListMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) ListMembersAsync(ctx workflow.Context, input *managedblockchain.ListMembersInput) *ManagedblockchainListMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.ListMembers", input)
	return &ManagedblockchainListMembersFuture{Future: future}
}

func (a *ManagedBlockchainStub) ListNetworks(ctx workflow.Context, input *managedblockchain.ListNetworksInput) (*managedblockchain.ListNetworksOutput, error) {
	var output managedblockchain.ListNetworksOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.ListNetworks", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) ListNetworksAsync(ctx workflow.Context, input *managedblockchain.ListNetworksInput) *ManagedblockchainListNetworksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.ListNetworks", input)
	return &ManagedblockchainListNetworksFuture{Future: future}
}

func (a *ManagedBlockchainStub) ListNodes(ctx workflow.Context, input *managedblockchain.ListNodesInput) (*managedblockchain.ListNodesOutput, error) {
	var output managedblockchain.ListNodesOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.ListNodes", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) ListNodesAsync(ctx workflow.Context, input *managedblockchain.ListNodesInput) *ManagedblockchainListNodesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.ListNodes", input)
	return &ManagedblockchainListNodesFuture{Future: future}
}

func (a *ManagedBlockchainStub) ListProposalVotes(ctx workflow.Context, input *managedblockchain.ListProposalVotesInput) (*managedblockchain.ListProposalVotesOutput, error) {
	var output managedblockchain.ListProposalVotesOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.ListProposalVotes", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) ListProposalVotesAsync(ctx workflow.Context, input *managedblockchain.ListProposalVotesInput) *ManagedblockchainListProposalVotesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.ListProposalVotes", input)
	return &ManagedblockchainListProposalVotesFuture{Future: future}
}

func (a *ManagedBlockchainStub) ListProposals(ctx workflow.Context, input *managedblockchain.ListProposalsInput) (*managedblockchain.ListProposalsOutput, error) {
	var output managedblockchain.ListProposalsOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.ListProposals", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) ListProposalsAsync(ctx workflow.Context, input *managedblockchain.ListProposalsInput) *ManagedblockchainListProposalsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.ListProposals", input)
	return &ManagedblockchainListProposalsFuture{Future: future}
}

func (a *ManagedBlockchainStub) RejectInvitation(ctx workflow.Context, input *managedblockchain.RejectInvitationInput) (*managedblockchain.RejectInvitationOutput, error) {
	var output managedblockchain.RejectInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.RejectInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) RejectInvitationAsync(ctx workflow.Context, input *managedblockchain.RejectInvitationInput) *ManagedblockchainRejectInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.RejectInvitation", input)
	return &ManagedblockchainRejectInvitationFuture{Future: future}
}

func (a *ManagedBlockchainStub) UpdateMember(ctx workflow.Context, input *managedblockchain.UpdateMemberInput) (*managedblockchain.UpdateMemberOutput, error) {
	var output managedblockchain.UpdateMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.UpdateMember", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) UpdateMemberAsync(ctx workflow.Context, input *managedblockchain.UpdateMemberInput) *ManagedblockchainUpdateMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.UpdateMember", input)
	return &ManagedblockchainUpdateMemberFuture{Future: future}
}

func (a *ManagedBlockchainStub) UpdateNode(ctx workflow.Context, input *managedblockchain.UpdateNodeInput) (*managedblockchain.UpdateNodeOutput, error) {
	var output managedblockchain.UpdateNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.UpdateNode", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) UpdateNodeAsync(ctx workflow.Context, input *managedblockchain.UpdateNodeInput) *ManagedblockchainUpdateNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.UpdateNode", input)
	return &ManagedblockchainUpdateNodeFuture{Future: future}
}

func (a *ManagedBlockchainStub) VoteOnProposal(ctx workflow.Context, input *managedblockchain.VoteOnProposalInput) (*managedblockchain.VoteOnProposalOutput, error) {
	var output managedblockchain.VoteOnProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws.managedblockchain.VoteOnProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *ManagedBlockchainStub) VoteOnProposalAsync(ctx workflow.Context, input *managedblockchain.VoteOnProposalInput) *ManagedblockchainVoteOnProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws.managedblockchain.VoteOnProposal", input)
	return &ManagedblockchainVoteOnProposalFuture{Future: future}
}
