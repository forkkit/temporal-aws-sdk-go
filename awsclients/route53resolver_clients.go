// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/route53resolver"
	"go.temporal.io/sdk/workflow"
)

type Route53ResolverClient interface {
	AssociateResolverEndpointIpAddress(ctx workflow.Context, input *route53resolver.AssociateResolverEndpointIpAddressInput) (*route53resolver.AssociateResolverEndpointIpAddressOutput, error)
	AssociateResolverEndpointIpAddressAsync(ctx workflow.Context, input *route53resolver.AssociateResolverEndpointIpAddressInput) *Route53resolverAssociateResolverEndpointIpAddressFuture

	AssociateResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.AssociateResolverQueryLogConfigInput) (*route53resolver.AssociateResolverQueryLogConfigOutput, error)
	AssociateResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.AssociateResolverQueryLogConfigInput) *Route53resolverAssociateResolverQueryLogConfigFuture

	AssociateResolverRule(ctx workflow.Context, input *route53resolver.AssociateResolverRuleInput) (*route53resolver.AssociateResolverRuleOutput, error)
	AssociateResolverRuleAsync(ctx workflow.Context, input *route53resolver.AssociateResolverRuleInput) *Route53resolverAssociateResolverRuleFuture

	CreateResolverEndpoint(ctx workflow.Context, input *route53resolver.CreateResolverEndpointInput) (*route53resolver.CreateResolverEndpointOutput, error)
	CreateResolverEndpointAsync(ctx workflow.Context, input *route53resolver.CreateResolverEndpointInput) *Route53resolverCreateResolverEndpointFuture

	CreateResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.CreateResolverQueryLogConfigInput) (*route53resolver.CreateResolverQueryLogConfigOutput, error)
	CreateResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.CreateResolverQueryLogConfigInput) *Route53resolverCreateResolverQueryLogConfigFuture

	CreateResolverRule(ctx workflow.Context, input *route53resolver.CreateResolverRuleInput) (*route53resolver.CreateResolverRuleOutput, error)
	CreateResolverRuleAsync(ctx workflow.Context, input *route53resolver.CreateResolverRuleInput) *Route53resolverCreateResolverRuleFuture

	DeleteResolverEndpoint(ctx workflow.Context, input *route53resolver.DeleteResolverEndpointInput) (*route53resolver.DeleteResolverEndpointOutput, error)
	DeleteResolverEndpointAsync(ctx workflow.Context, input *route53resolver.DeleteResolverEndpointInput) *Route53resolverDeleteResolverEndpointFuture

	DeleteResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.DeleteResolverQueryLogConfigInput) (*route53resolver.DeleteResolverQueryLogConfigOutput, error)
	DeleteResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.DeleteResolverQueryLogConfigInput) *Route53resolverDeleteResolverQueryLogConfigFuture

	DeleteResolverRule(ctx workflow.Context, input *route53resolver.DeleteResolverRuleInput) (*route53resolver.DeleteResolverRuleOutput, error)
	DeleteResolverRuleAsync(ctx workflow.Context, input *route53resolver.DeleteResolverRuleInput) *Route53resolverDeleteResolverRuleFuture

	DisassociateResolverEndpointIpAddress(ctx workflow.Context, input *route53resolver.DisassociateResolverEndpointIpAddressInput) (*route53resolver.DisassociateResolverEndpointIpAddressOutput, error)
	DisassociateResolverEndpointIpAddressAsync(ctx workflow.Context, input *route53resolver.DisassociateResolverEndpointIpAddressInput) *Route53resolverDisassociateResolverEndpointIpAddressFuture

	DisassociateResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.DisassociateResolverQueryLogConfigInput) (*route53resolver.DisassociateResolverQueryLogConfigOutput, error)
	DisassociateResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.DisassociateResolverQueryLogConfigInput) *Route53resolverDisassociateResolverQueryLogConfigFuture

	DisassociateResolverRule(ctx workflow.Context, input *route53resolver.DisassociateResolverRuleInput) (*route53resolver.DisassociateResolverRuleOutput, error)
	DisassociateResolverRuleAsync(ctx workflow.Context, input *route53resolver.DisassociateResolverRuleInput) *Route53resolverDisassociateResolverRuleFuture

	GetResolverEndpoint(ctx workflow.Context, input *route53resolver.GetResolverEndpointInput) (*route53resolver.GetResolverEndpointOutput, error)
	GetResolverEndpointAsync(ctx workflow.Context, input *route53resolver.GetResolverEndpointInput) *Route53resolverGetResolverEndpointFuture

	GetResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigInput) (*route53resolver.GetResolverQueryLogConfigOutput, error)
	GetResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigInput) *Route53resolverGetResolverQueryLogConfigFuture

	GetResolverQueryLogConfigAssociation(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigAssociationInput) (*route53resolver.GetResolverQueryLogConfigAssociationOutput, error)
	GetResolverQueryLogConfigAssociationAsync(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigAssociationInput) *Route53resolverGetResolverQueryLogConfigAssociationFuture

	GetResolverQueryLogConfigPolicy(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigPolicyInput) (*route53resolver.GetResolverQueryLogConfigPolicyOutput, error)
	GetResolverQueryLogConfigPolicyAsync(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigPolicyInput) *Route53resolverGetResolverQueryLogConfigPolicyFuture

	GetResolverRule(ctx workflow.Context, input *route53resolver.GetResolverRuleInput) (*route53resolver.GetResolverRuleOutput, error)
	GetResolverRuleAsync(ctx workflow.Context, input *route53resolver.GetResolverRuleInput) *Route53resolverGetResolverRuleFuture

	GetResolverRuleAssociation(ctx workflow.Context, input *route53resolver.GetResolverRuleAssociationInput) (*route53resolver.GetResolverRuleAssociationOutput, error)
	GetResolverRuleAssociationAsync(ctx workflow.Context, input *route53resolver.GetResolverRuleAssociationInput) *Route53resolverGetResolverRuleAssociationFuture

	GetResolverRulePolicy(ctx workflow.Context, input *route53resolver.GetResolverRulePolicyInput) (*route53resolver.GetResolverRulePolicyOutput, error)
	GetResolverRulePolicyAsync(ctx workflow.Context, input *route53resolver.GetResolverRulePolicyInput) *Route53resolverGetResolverRulePolicyFuture

	ListResolverEndpointIpAddresses(ctx workflow.Context, input *route53resolver.ListResolverEndpointIpAddressesInput) (*route53resolver.ListResolverEndpointIpAddressesOutput, error)
	ListResolverEndpointIpAddressesAsync(ctx workflow.Context, input *route53resolver.ListResolverEndpointIpAddressesInput) *Route53resolverListResolverEndpointIpAddressesFuture

	ListResolverEndpoints(ctx workflow.Context, input *route53resolver.ListResolverEndpointsInput) (*route53resolver.ListResolverEndpointsOutput, error)
	ListResolverEndpointsAsync(ctx workflow.Context, input *route53resolver.ListResolverEndpointsInput) *Route53resolverListResolverEndpointsFuture

	ListResolverQueryLogConfigAssociations(ctx workflow.Context, input *route53resolver.ListResolverQueryLogConfigAssociationsInput) (*route53resolver.ListResolverQueryLogConfigAssociationsOutput, error)
	ListResolverQueryLogConfigAssociationsAsync(ctx workflow.Context, input *route53resolver.ListResolverQueryLogConfigAssociationsInput) *Route53resolverListResolverQueryLogConfigAssociationsFuture

	ListResolverQueryLogConfigs(ctx workflow.Context, input *route53resolver.ListResolverQueryLogConfigsInput) (*route53resolver.ListResolverQueryLogConfigsOutput, error)
	ListResolverQueryLogConfigsAsync(ctx workflow.Context, input *route53resolver.ListResolverQueryLogConfigsInput) *Route53resolverListResolverQueryLogConfigsFuture

	ListResolverRuleAssociations(ctx workflow.Context, input *route53resolver.ListResolverRuleAssociationsInput) (*route53resolver.ListResolverRuleAssociationsOutput, error)
	ListResolverRuleAssociationsAsync(ctx workflow.Context, input *route53resolver.ListResolverRuleAssociationsInput) *Route53resolverListResolverRuleAssociationsFuture

	ListResolverRules(ctx workflow.Context, input *route53resolver.ListResolverRulesInput) (*route53resolver.ListResolverRulesOutput, error)
	ListResolverRulesAsync(ctx workflow.Context, input *route53resolver.ListResolverRulesInput) *Route53resolverListResolverRulesFuture

	ListTagsForResource(ctx workflow.Context, input *route53resolver.ListTagsForResourceInput) (*route53resolver.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *route53resolver.ListTagsForResourceInput) *Route53resolverListTagsForResourceFuture

	PutResolverQueryLogConfigPolicy(ctx workflow.Context, input *route53resolver.PutResolverQueryLogConfigPolicyInput) (*route53resolver.PutResolverQueryLogConfigPolicyOutput, error)
	PutResolverQueryLogConfigPolicyAsync(ctx workflow.Context, input *route53resolver.PutResolverQueryLogConfigPolicyInput) *Route53resolverPutResolverQueryLogConfigPolicyFuture

	PutResolverRulePolicy(ctx workflow.Context, input *route53resolver.PutResolverRulePolicyInput) (*route53resolver.PutResolverRulePolicyOutput, error)
	PutResolverRulePolicyAsync(ctx workflow.Context, input *route53resolver.PutResolverRulePolicyInput) *Route53resolverPutResolverRulePolicyFuture

	TagResource(ctx workflow.Context, input *route53resolver.TagResourceInput) (*route53resolver.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *route53resolver.TagResourceInput) *Route53resolverTagResourceFuture

	UntagResource(ctx workflow.Context, input *route53resolver.UntagResourceInput) (*route53resolver.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *route53resolver.UntagResourceInput) *Route53resolverUntagResourceFuture

	UpdateResolverEndpoint(ctx workflow.Context, input *route53resolver.UpdateResolverEndpointInput) (*route53resolver.UpdateResolverEndpointOutput, error)
	UpdateResolverEndpointAsync(ctx workflow.Context, input *route53resolver.UpdateResolverEndpointInput) *Route53resolverUpdateResolverEndpointFuture

	UpdateResolverRule(ctx workflow.Context, input *route53resolver.UpdateResolverRuleInput) (*route53resolver.UpdateResolverRuleOutput, error)
	UpdateResolverRuleAsync(ctx workflow.Context, input *route53resolver.UpdateResolverRuleInput) *Route53resolverUpdateResolverRuleFuture
}

type Route53ResolverStub struct{}

func NewRoute53ResolverStub() Route53ResolverClient {
	return &Route53ResolverStub{}
}

type Route53resolverAssociateResolverEndpointIpAddressFuture struct {
	Future workflow.Future
}

func (r *Route53resolverAssociateResolverEndpointIpAddressFuture) Get(ctx workflow.Context) (*route53resolver.AssociateResolverEndpointIpAddressOutput, error) {
	var output route53resolver.AssociateResolverEndpointIpAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverAssociateResolverQueryLogConfigFuture struct {
	Future workflow.Future
}

func (r *Route53resolverAssociateResolverQueryLogConfigFuture) Get(ctx workflow.Context) (*route53resolver.AssociateResolverQueryLogConfigOutput, error) {
	var output route53resolver.AssociateResolverQueryLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverAssociateResolverRuleFuture struct {
	Future workflow.Future
}

func (r *Route53resolverAssociateResolverRuleFuture) Get(ctx workflow.Context) (*route53resolver.AssociateResolverRuleOutput, error) {
	var output route53resolver.AssociateResolverRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverCreateResolverEndpointFuture struct {
	Future workflow.Future
}

func (r *Route53resolverCreateResolverEndpointFuture) Get(ctx workflow.Context) (*route53resolver.CreateResolverEndpointOutput, error) {
	var output route53resolver.CreateResolverEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverCreateResolverQueryLogConfigFuture struct {
	Future workflow.Future
}

func (r *Route53resolverCreateResolverQueryLogConfigFuture) Get(ctx workflow.Context) (*route53resolver.CreateResolverQueryLogConfigOutput, error) {
	var output route53resolver.CreateResolverQueryLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverCreateResolverRuleFuture struct {
	Future workflow.Future
}

func (r *Route53resolverCreateResolverRuleFuture) Get(ctx workflow.Context) (*route53resolver.CreateResolverRuleOutput, error) {
	var output route53resolver.CreateResolverRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverDeleteResolverEndpointFuture struct {
	Future workflow.Future
}

func (r *Route53resolverDeleteResolverEndpointFuture) Get(ctx workflow.Context) (*route53resolver.DeleteResolverEndpointOutput, error) {
	var output route53resolver.DeleteResolverEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverDeleteResolverQueryLogConfigFuture struct {
	Future workflow.Future
}

func (r *Route53resolverDeleteResolverQueryLogConfigFuture) Get(ctx workflow.Context) (*route53resolver.DeleteResolverQueryLogConfigOutput, error) {
	var output route53resolver.DeleteResolverQueryLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverDeleteResolverRuleFuture struct {
	Future workflow.Future
}

func (r *Route53resolverDeleteResolverRuleFuture) Get(ctx workflow.Context) (*route53resolver.DeleteResolverRuleOutput, error) {
	var output route53resolver.DeleteResolverRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverDisassociateResolverEndpointIpAddressFuture struct {
	Future workflow.Future
}

func (r *Route53resolverDisassociateResolverEndpointIpAddressFuture) Get(ctx workflow.Context) (*route53resolver.DisassociateResolverEndpointIpAddressOutput, error) {
	var output route53resolver.DisassociateResolverEndpointIpAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverDisassociateResolverQueryLogConfigFuture struct {
	Future workflow.Future
}

func (r *Route53resolverDisassociateResolverQueryLogConfigFuture) Get(ctx workflow.Context) (*route53resolver.DisassociateResolverQueryLogConfigOutput, error) {
	var output route53resolver.DisassociateResolverQueryLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverDisassociateResolverRuleFuture struct {
	Future workflow.Future
}

func (r *Route53resolverDisassociateResolverRuleFuture) Get(ctx workflow.Context) (*route53resolver.DisassociateResolverRuleOutput, error) {
	var output route53resolver.DisassociateResolverRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverGetResolverEndpointFuture struct {
	Future workflow.Future
}

func (r *Route53resolverGetResolverEndpointFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverEndpointOutput, error) {
	var output route53resolver.GetResolverEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverGetResolverQueryLogConfigFuture struct {
	Future workflow.Future
}

func (r *Route53resolverGetResolverQueryLogConfigFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverQueryLogConfigOutput, error) {
	var output route53resolver.GetResolverQueryLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverGetResolverQueryLogConfigAssociationFuture struct {
	Future workflow.Future
}

func (r *Route53resolverGetResolverQueryLogConfigAssociationFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverQueryLogConfigAssociationOutput, error) {
	var output route53resolver.GetResolverQueryLogConfigAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverGetResolverQueryLogConfigPolicyFuture struct {
	Future workflow.Future
}

func (r *Route53resolverGetResolverQueryLogConfigPolicyFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverQueryLogConfigPolicyOutput, error) {
	var output route53resolver.GetResolverQueryLogConfigPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverGetResolverRuleFuture struct {
	Future workflow.Future
}

func (r *Route53resolverGetResolverRuleFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverRuleOutput, error) {
	var output route53resolver.GetResolverRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverGetResolverRuleAssociationFuture struct {
	Future workflow.Future
}

func (r *Route53resolverGetResolverRuleAssociationFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverRuleAssociationOutput, error) {
	var output route53resolver.GetResolverRuleAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverGetResolverRulePolicyFuture struct {
	Future workflow.Future
}

func (r *Route53resolverGetResolverRulePolicyFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverRulePolicyOutput, error) {
	var output route53resolver.GetResolverRulePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverListResolverEndpointIpAddressesFuture struct {
	Future workflow.Future
}

func (r *Route53resolverListResolverEndpointIpAddressesFuture) Get(ctx workflow.Context) (*route53resolver.ListResolverEndpointIpAddressesOutput, error) {
	var output route53resolver.ListResolverEndpointIpAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverListResolverEndpointsFuture struct {
	Future workflow.Future
}

func (r *Route53resolverListResolverEndpointsFuture) Get(ctx workflow.Context) (*route53resolver.ListResolverEndpointsOutput, error) {
	var output route53resolver.ListResolverEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverListResolverQueryLogConfigAssociationsFuture struct {
	Future workflow.Future
}

func (r *Route53resolverListResolverQueryLogConfigAssociationsFuture) Get(ctx workflow.Context) (*route53resolver.ListResolverQueryLogConfigAssociationsOutput, error) {
	var output route53resolver.ListResolverQueryLogConfigAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverListResolverQueryLogConfigsFuture struct {
	Future workflow.Future
}

func (r *Route53resolverListResolverQueryLogConfigsFuture) Get(ctx workflow.Context) (*route53resolver.ListResolverQueryLogConfigsOutput, error) {
	var output route53resolver.ListResolverQueryLogConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverListResolverRuleAssociationsFuture struct {
	Future workflow.Future
}

func (r *Route53resolverListResolverRuleAssociationsFuture) Get(ctx workflow.Context) (*route53resolver.ListResolverRuleAssociationsOutput, error) {
	var output route53resolver.ListResolverRuleAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverListResolverRulesFuture struct {
	Future workflow.Future
}

func (r *Route53resolverListResolverRulesFuture) Get(ctx workflow.Context) (*route53resolver.ListResolverRulesOutput, error) {
	var output route53resolver.ListResolverRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *Route53resolverListTagsForResourceFuture) Get(ctx workflow.Context) (*route53resolver.ListTagsForResourceOutput, error) {
	var output route53resolver.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverPutResolverQueryLogConfigPolicyFuture struct {
	Future workflow.Future
}

func (r *Route53resolverPutResolverQueryLogConfigPolicyFuture) Get(ctx workflow.Context) (*route53resolver.PutResolverQueryLogConfigPolicyOutput, error) {
	var output route53resolver.PutResolverQueryLogConfigPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverPutResolverRulePolicyFuture struct {
	Future workflow.Future
}

func (r *Route53resolverPutResolverRulePolicyFuture) Get(ctx workflow.Context) (*route53resolver.PutResolverRulePolicyOutput, error) {
	var output route53resolver.PutResolverRulePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverTagResourceFuture struct {
	Future workflow.Future
}

func (r *Route53resolverTagResourceFuture) Get(ctx workflow.Context) (*route53resolver.TagResourceOutput, error) {
	var output route53resolver.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverUntagResourceFuture struct {
	Future workflow.Future
}

func (r *Route53resolverUntagResourceFuture) Get(ctx workflow.Context) (*route53resolver.UntagResourceOutput, error) {
	var output route53resolver.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverUpdateResolverEndpointFuture struct {
	Future workflow.Future
}

func (r *Route53resolverUpdateResolverEndpointFuture) Get(ctx workflow.Context) (*route53resolver.UpdateResolverEndpointOutput, error) {
	var output route53resolver.UpdateResolverEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53resolverUpdateResolverRuleFuture struct {
	Future workflow.Future
}

func (r *Route53resolverUpdateResolverRuleFuture) Get(ctx workflow.Context) (*route53resolver.UpdateResolverRuleOutput, error) {
	var output route53resolver.UpdateResolverRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) AssociateResolverEndpointIpAddress(ctx workflow.Context, input *route53resolver.AssociateResolverEndpointIpAddressInput) (*route53resolver.AssociateResolverEndpointIpAddressOutput, error) {
	var output route53resolver.AssociateResolverEndpointIpAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.AssociateResolverEndpointIpAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) AssociateResolverEndpointIpAddressAsync(ctx workflow.Context, input *route53resolver.AssociateResolverEndpointIpAddressInput) *Route53resolverAssociateResolverEndpointIpAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.AssociateResolverEndpointIpAddress", input)
	return &Route53resolverAssociateResolverEndpointIpAddressFuture{Future: future}
}

func (a *Route53ResolverStub) AssociateResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.AssociateResolverQueryLogConfigInput) (*route53resolver.AssociateResolverQueryLogConfigOutput, error) {
	var output route53resolver.AssociateResolverQueryLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.AssociateResolverQueryLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) AssociateResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.AssociateResolverQueryLogConfigInput) *Route53resolverAssociateResolverQueryLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.AssociateResolverQueryLogConfig", input)
	return &Route53resolverAssociateResolverQueryLogConfigFuture{Future: future}
}

func (a *Route53ResolverStub) AssociateResolverRule(ctx workflow.Context, input *route53resolver.AssociateResolverRuleInput) (*route53resolver.AssociateResolverRuleOutput, error) {
	var output route53resolver.AssociateResolverRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.AssociateResolverRule", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) AssociateResolverRuleAsync(ctx workflow.Context, input *route53resolver.AssociateResolverRuleInput) *Route53resolverAssociateResolverRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.AssociateResolverRule", input)
	return &Route53resolverAssociateResolverRuleFuture{Future: future}
}

func (a *Route53ResolverStub) CreateResolverEndpoint(ctx workflow.Context, input *route53resolver.CreateResolverEndpointInput) (*route53resolver.CreateResolverEndpointOutput, error) {
	var output route53resolver.CreateResolverEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.CreateResolverEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) CreateResolverEndpointAsync(ctx workflow.Context, input *route53resolver.CreateResolverEndpointInput) *Route53resolverCreateResolverEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.CreateResolverEndpoint", input)
	return &Route53resolverCreateResolverEndpointFuture{Future: future}
}

func (a *Route53ResolverStub) CreateResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.CreateResolverQueryLogConfigInput) (*route53resolver.CreateResolverQueryLogConfigOutput, error) {
	var output route53resolver.CreateResolverQueryLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.CreateResolverQueryLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) CreateResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.CreateResolverQueryLogConfigInput) *Route53resolverCreateResolverQueryLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.CreateResolverQueryLogConfig", input)
	return &Route53resolverCreateResolverQueryLogConfigFuture{Future: future}
}

func (a *Route53ResolverStub) CreateResolverRule(ctx workflow.Context, input *route53resolver.CreateResolverRuleInput) (*route53resolver.CreateResolverRuleOutput, error) {
	var output route53resolver.CreateResolverRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.CreateResolverRule", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) CreateResolverRuleAsync(ctx workflow.Context, input *route53resolver.CreateResolverRuleInput) *Route53resolverCreateResolverRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.CreateResolverRule", input)
	return &Route53resolverCreateResolverRuleFuture{Future: future}
}

func (a *Route53ResolverStub) DeleteResolverEndpoint(ctx workflow.Context, input *route53resolver.DeleteResolverEndpointInput) (*route53resolver.DeleteResolverEndpointOutput, error) {
	var output route53resolver.DeleteResolverEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.DeleteResolverEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) DeleteResolverEndpointAsync(ctx workflow.Context, input *route53resolver.DeleteResolverEndpointInput) *Route53resolverDeleteResolverEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.DeleteResolverEndpoint", input)
	return &Route53resolverDeleteResolverEndpointFuture{Future: future}
}

func (a *Route53ResolverStub) DeleteResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.DeleteResolverQueryLogConfigInput) (*route53resolver.DeleteResolverQueryLogConfigOutput, error) {
	var output route53resolver.DeleteResolverQueryLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.DeleteResolverQueryLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) DeleteResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.DeleteResolverQueryLogConfigInput) *Route53resolverDeleteResolverQueryLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.DeleteResolverQueryLogConfig", input)
	return &Route53resolverDeleteResolverQueryLogConfigFuture{Future: future}
}

func (a *Route53ResolverStub) DeleteResolverRule(ctx workflow.Context, input *route53resolver.DeleteResolverRuleInput) (*route53resolver.DeleteResolverRuleOutput, error) {
	var output route53resolver.DeleteResolverRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.DeleteResolverRule", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) DeleteResolverRuleAsync(ctx workflow.Context, input *route53resolver.DeleteResolverRuleInput) *Route53resolverDeleteResolverRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.DeleteResolverRule", input)
	return &Route53resolverDeleteResolverRuleFuture{Future: future}
}

func (a *Route53ResolverStub) DisassociateResolverEndpointIpAddress(ctx workflow.Context, input *route53resolver.DisassociateResolverEndpointIpAddressInput) (*route53resolver.DisassociateResolverEndpointIpAddressOutput, error) {
	var output route53resolver.DisassociateResolverEndpointIpAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.DisassociateResolverEndpointIpAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) DisassociateResolverEndpointIpAddressAsync(ctx workflow.Context, input *route53resolver.DisassociateResolverEndpointIpAddressInput) *Route53resolverDisassociateResolverEndpointIpAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.DisassociateResolverEndpointIpAddress", input)
	return &Route53resolverDisassociateResolverEndpointIpAddressFuture{Future: future}
}

func (a *Route53ResolverStub) DisassociateResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.DisassociateResolverQueryLogConfigInput) (*route53resolver.DisassociateResolverQueryLogConfigOutput, error) {
	var output route53resolver.DisassociateResolverQueryLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.DisassociateResolverQueryLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) DisassociateResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.DisassociateResolverQueryLogConfigInput) *Route53resolverDisassociateResolverQueryLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.DisassociateResolverQueryLogConfig", input)
	return &Route53resolverDisassociateResolverQueryLogConfigFuture{Future: future}
}

func (a *Route53ResolverStub) DisassociateResolverRule(ctx workflow.Context, input *route53resolver.DisassociateResolverRuleInput) (*route53resolver.DisassociateResolverRuleOutput, error) {
	var output route53resolver.DisassociateResolverRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.DisassociateResolverRule", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) DisassociateResolverRuleAsync(ctx workflow.Context, input *route53resolver.DisassociateResolverRuleInput) *Route53resolverDisassociateResolverRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.DisassociateResolverRule", input)
	return &Route53resolverDisassociateResolverRuleFuture{Future: future}
}

func (a *Route53ResolverStub) GetResolverEndpoint(ctx workflow.Context, input *route53resolver.GetResolverEndpointInput) (*route53resolver.GetResolverEndpointOutput, error) {
	var output route53resolver.GetResolverEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) GetResolverEndpointAsync(ctx workflow.Context, input *route53resolver.GetResolverEndpointInput) *Route53resolverGetResolverEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverEndpoint", input)
	return &Route53resolverGetResolverEndpointFuture{Future: future}
}

func (a *Route53ResolverStub) GetResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigInput) (*route53resolver.GetResolverQueryLogConfigOutput, error) {
	var output route53resolver.GetResolverQueryLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverQueryLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) GetResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigInput) *Route53resolverGetResolverQueryLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverQueryLogConfig", input)
	return &Route53resolverGetResolverQueryLogConfigFuture{Future: future}
}

func (a *Route53ResolverStub) GetResolverQueryLogConfigAssociation(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigAssociationInput) (*route53resolver.GetResolverQueryLogConfigAssociationOutput, error) {
	var output route53resolver.GetResolverQueryLogConfigAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverQueryLogConfigAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) GetResolverQueryLogConfigAssociationAsync(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigAssociationInput) *Route53resolverGetResolverQueryLogConfigAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverQueryLogConfigAssociation", input)
	return &Route53resolverGetResolverQueryLogConfigAssociationFuture{Future: future}
}

func (a *Route53ResolverStub) GetResolverQueryLogConfigPolicy(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigPolicyInput) (*route53resolver.GetResolverQueryLogConfigPolicyOutput, error) {
	var output route53resolver.GetResolverQueryLogConfigPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverQueryLogConfigPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) GetResolverQueryLogConfigPolicyAsync(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigPolicyInput) *Route53resolverGetResolverQueryLogConfigPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverQueryLogConfigPolicy", input)
	return &Route53resolverGetResolverQueryLogConfigPolicyFuture{Future: future}
}

func (a *Route53ResolverStub) GetResolverRule(ctx workflow.Context, input *route53resolver.GetResolverRuleInput) (*route53resolver.GetResolverRuleOutput, error) {
	var output route53resolver.GetResolverRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverRule", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) GetResolverRuleAsync(ctx workflow.Context, input *route53resolver.GetResolverRuleInput) *Route53resolverGetResolverRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverRule", input)
	return &Route53resolverGetResolverRuleFuture{Future: future}
}

func (a *Route53ResolverStub) GetResolverRuleAssociation(ctx workflow.Context, input *route53resolver.GetResolverRuleAssociationInput) (*route53resolver.GetResolverRuleAssociationOutput, error) {
	var output route53resolver.GetResolverRuleAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverRuleAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) GetResolverRuleAssociationAsync(ctx workflow.Context, input *route53resolver.GetResolverRuleAssociationInput) *Route53resolverGetResolverRuleAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverRuleAssociation", input)
	return &Route53resolverGetResolverRuleAssociationFuture{Future: future}
}

func (a *Route53ResolverStub) GetResolverRulePolicy(ctx workflow.Context, input *route53resolver.GetResolverRulePolicyInput) (*route53resolver.GetResolverRulePolicyOutput, error) {
	var output route53resolver.GetResolverRulePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverRulePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) GetResolverRulePolicyAsync(ctx workflow.Context, input *route53resolver.GetResolverRulePolicyInput) *Route53resolverGetResolverRulePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.GetResolverRulePolicy", input)
	return &Route53resolverGetResolverRulePolicyFuture{Future: future}
}

func (a *Route53ResolverStub) ListResolverEndpointIpAddresses(ctx workflow.Context, input *route53resolver.ListResolverEndpointIpAddressesInput) (*route53resolver.ListResolverEndpointIpAddressesOutput, error) {
	var output route53resolver.ListResolverEndpointIpAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListResolverEndpointIpAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) ListResolverEndpointIpAddressesAsync(ctx workflow.Context, input *route53resolver.ListResolverEndpointIpAddressesInput) *Route53resolverListResolverEndpointIpAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListResolverEndpointIpAddresses", input)
	return &Route53resolverListResolverEndpointIpAddressesFuture{Future: future}
}

func (a *Route53ResolverStub) ListResolverEndpoints(ctx workflow.Context, input *route53resolver.ListResolverEndpointsInput) (*route53resolver.ListResolverEndpointsOutput, error) {
	var output route53resolver.ListResolverEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListResolverEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) ListResolverEndpointsAsync(ctx workflow.Context, input *route53resolver.ListResolverEndpointsInput) *Route53resolverListResolverEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListResolverEndpoints", input)
	return &Route53resolverListResolverEndpointsFuture{Future: future}
}

func (a *Route53ResolverStub) ListResolverQueryLogConfigAssociations(ctx workflow.Context, input *route53resolver.ListResolverQueryLogConfigAssociationsInput) (*route53resolver.ListResolverQueryLogConfigAssociationsOutput, error) {
	var output route53resolver.ListResolverQueryLogConfigAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListResolverQueryLogConfigAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) ListResolverQueryLogConfigAssociationsAsync(ctx workflow.Context, input *route53resolver.ListResolverQueryLogConfigAssociationsInput) *Route53resolverListResolverQueryLogConfigAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListResolverQueryLogConfigAssociations", input)
	return &Route53resolverListResolverQueryLogConfigAssociationsFuture{Future: future}
}

func (a *Route53ResolverStub) ListResolverQueryLogConfigs(ctx workflow.Context, input *route53resolver.ListResolverQueryLogConfigsInput) (*route53resolver.ListResolverQueryLogConfigsOutput, error) {
	var output route53resolver.ListResolverQueryLogConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListResolverQueryLogConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) ListResolverQueryLogConfigsAsync(ctx workflow.Context, input *route53resolver.ListResolverQueryLogConfigsInput) *Route53resolverListResolverQueryLogConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListResolverQueryLogConfigs", input)
	return &Route53resolverListResolverQueryLogConfigsFuture{Future: future}
}

func (a *Route53ResolverStub) ListResolverRuleAssociations(ctx workflow.Context, input *route53resolver.ListResolverRuleAssociationsInput) (*route53resolver.ListResolverRuleAssociationsOutput, error) {
	var output route53resolver.ListResolverRuleAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListResolverRuleAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) ListResolverRuleAssociationsAsync(ctx workflow.Context, input *route53resolver.ListResolverRuleAssociationsInput) *Route53resolverListResolverRuleAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListResolverRuleAssociations", input)
	return &Route53resolverListResolverRuleAssociationsFuture{Future: future}
}

func (a *Route53ResolverStub) ListResolverRules(ctx workflow.Context, input *route53resolver.ListResolverRulesInput) (*route53resolver.ListResolverRulesOutput, error) {
	var output route53resolver.ListResolverRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListResolverRules", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) ListResolverRulesAsync(ctx workflow.Context, input *route53resolver.ListResolverRulesInput) *Route53resolverListResolverRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListResolverRules", input)
	return &Route53resolverListResolverRulesFuture{Future: future}
}

func (a *Route53ResolverStub) ListTagsForResource(ctx workflow.Context, input *route53resolver.ListTagsForResourceInput) (*route53resolver.ListTagsForResourceOutput, error) {
	var output route53resolver.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) ListTagsForResourceAsync(ctx workflow.Context, input *route53resolver.ListTagsForResourceInput) *Route53resolverListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.ListTagsForResource", input)
	return &Route53resolverListTagsForResourceFuture{Future: future}
}

func (a *Route53ResolverStub) PutResolverQueryLogConfigPolicy(ctx workflow.Context, input *route53resolver.PutResolverQueryLogConfigPolicyInput) (*route53resolver.PutResolverQueryLogConfigPolicyOutput, error) {
	var output route53resolver.PutResolverQueryLogConfigPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.PutResolverQueryLogConfigPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) PutResolverQueryLogConfigPolicyAsync(ctx workflow.Context, input *route53resolver.PutResolverQueryLogConfigPolicyInput) *Route53resolverPutResolverQueryLogConfigPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.PutResolverQueryLogConfigPolicy", input)
	return &Route53resolverPutResolverQueryLogConfigPolicyFuture{Future: future}
}

func (a *Route53ResolverStub) PutResolverRulePolicy(ctx workflow.Context, input *route53resolver.PutResolverRulePolicyInput) (*route53resolver.PutResolverRulePolicyOutput, error) {
	var output route53resolver.PutResolverRulePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.PutResolverRulePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) PutResolverRulePolicyAsync(ctx workflow.Context, input *route53resolver.PutResolverRulePolicyInput) *Route53resolverPutResolverRulePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.PutResolverRulePolicy", input)
	return &Route53resolverPutResolverRulePolicyFuture{Future: future}
}

func (a *Route53ResolverStub) TagResource(ctx workflow.Context, input *route53resolver.TagResourceInput) (*route53resolver.TagResourceOutput, error) {
	var output route53resolver.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) TagResourceAsync(ctx workflow.Context, input *route53resolver.TagResourceInput) *Route53resolverTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.TagResource", input)
	return &Route53resolverTagResourceFuture{Future: future}
}

func (a *Route53ResolverStub) UntagResource(ctx workflow.Context, input *route53resolver.UntagResourceInput) (*route53resolver.UntagResourceOutput, error) {
	var output route53resolver.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) UntagResourceAsync(ctx workflow.Context, input *route53resolver.UntagResourceInput) *Route53resolverUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.UntagResource", input)
	return &Route53resolverUntagResourceFuture{Future: future}
}

func (a *Route53ResolverStub) UpdateResolverEndpoint(ctx workflow.Context, input *route53resolver.UpdateResolverEndpointInput) (*route53resolver.UpdateResolverEndpointOutput, error) {
	var output route53resolver.UpdateResolverEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.UpdateResolverEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) UpdateResolverEndpointAsync(ctx workflow.Context, input *route53resolver.UpdateResolverEndpointInput) *Route53resolverUpdateResolverEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.UpdateResolverEndpoint", input)
	return &Route53resolverUpdateResolverEndpointFuture{Future: future}
}

func (a *Route53ResolverStub) UpdateResolverRule(ctx workflow.Context, input *route53resolver.UpdateResolverRuleInput) (*route53resolver.UpdateResolverRuleOutput, error) {
	var output route53resolver.UpdateResolverRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53resolver.UpdateResolverRule", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53ResolverStub) UpdateResolverRuleAsync(ctx workflow.Context, input *route53resolver.UpdateResolverRuleInput) *Route53resolverUpdateResolverRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53resolver.UpdateResolverRule", input)
	return &Route53resolverUpdateResolverRuleFuture{Future: future}
}
