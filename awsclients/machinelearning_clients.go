// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/machinelearning"
	"go.temporal.io/sdk/workflow"
)

type MachineLearningClient interface {
	AddTags(ctx workflow.Context, input *machinelearning.AddTagsInput) (*machinelearning.AddTagsOutput, error)
	AddTagsAsync(ctx workflow.Context, input *machinelearning.AddTagsInput) *MachineLearningAddTagsFuture

	CreateBatchPrediction(ctx workflow.Context, input *machinelearning.CreateBatchPredictionInput) (*machinelearning.CreateBatchPredictionOutput, error)
	CreateBatchPredictionAsync(ctx workflow.Context, input *machinelearning.CreateBatchPredictionInput) *MachineLearningCreateBatchPredictionFuture

	CreateDataSourceFromRDS(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRDSInput) (*machinelearning.CreateDataSourceFromRDSOutput, error)
	CreateDataSourceFromRDSAsync(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRDSInput) *MachineLearningCreateDataSourceFromRDSFuture

	CreateDataSourceFromRedshift(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRedshiftInput) (*machinelearning.CreateDataSourceFromRedshiftOutput, error)
	CreateDataSourceFromRedshiftAsync(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRedshiftInput) *MachineLearningCreateDataSourceFromRedshiftFuture

	CreateDataSourceFromS3(ctx workflow.Context, input *machinelearning.CreateDataSourceFromS3Input) (*machinelearning.CreateDataSourceFromS3Output, error)
	CreateDataSourceFromS3Async(ctx workflow.Context, input *machinelearning.CreateDataSourceFromS3Input) *MachineLearningCreateDataSourceFromS3Future

	CreateEvaluation(ctx workflow.Context, input *machinelearning.CreateEvaluationInput) (*machinelearning.CreateEvaluationOutput, error)
	CreateEvaluationAsync(ctx workflow.Context, input *machinelearning.CreateEvaluationInput) *MachineLearningCreateEvaluationFuture

	CreateMLModel(ctx workflow.Context, input *machinelearning.CreateMLModelInput) (*machinelearning.CreateMLModelOutput, error)
	CreateMLModelAsync(ctx workflow.Context, input *machinelearning.CreateMLModelInput) *MachineLearningCreateMLModelFuture

	CreateRealtimeEndpoint(ctx workflow.Context, input *machinelearning.CreateRealtimeEndpointInput) (*machinelearning.CreateRealtimeEndpointOutput, error)
	CreateRealtimeEndpointAsync(ctx workflow.Context, input *machinelearning.CreateRealtimeEndpointInput) *MachineLearningCreateRealtimeEndpointFuture

	DeleteBatchPrediction(ctx workflow.Context, input *machinelearning.DeleteBatchPredictionInput) (*machinelearning.DeleteBatchPredictionOutput, error)
	DeleteBatchPredictionAsync(ctx workflow.Context, input *machinelearning.DeleteBatchPredictionInput) *MachineLearningDeleteBatchPredictionFuture

	DeleteDataSource(ctx workflow.Context, input *machinelearning.DeleteDataSourceInput) (*machinelearning.DeleteDataSourceOutput, error)
	DeleteDataSourceAsync(ctx workflow.Context, input *machinelearning.DeleteDataSourceInput) *MachineLearningDeleteDataSourceFuture

	DeleteEvaluation(ctx workflow.Context, input *machinelearning.DeleteEvaluationInput) (*machinelearning.DeleteEvaluationOutput, error)
	DeleteEvaluationAsync(ctx workflow.Context, input *machinelearning.DeleteEvaluationInput) *MachineLearningDeleteEvaluationFuture

	DeleteMLModel(ctx workflow.Context, input *machinelearning.DeleteMLModelInput) (*machinelearning.DeleteMLModelOutput, error)
	DeleteMLModelAsync(ctx workflow.Context, input *machinelearning.DeleteMLModelInput) *MachineLearningDeleteMLModelFuture

	DeleteRealtimeEndpoint(ctx workflow.Context, input *machinelearning.DeleteRealtimeEndpointInput) (*machinelearning.DeleteRealtimeEndpointOutput, error)
	DeleteRealtimeEndpointAsync(ctx workflow.Context, input *machinelearning.DeleteRealtimeEndpointInput) *MachineLearningDeleteRealtimeEndpointFuture

	DeleteTags(ctx workflow.Context, input *machinelearning.DeleteTagsInput) (*machinelearning.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *machinelearning.DeleteTagsInput) *MachineLearningDeleteTagsFuture

	DescribeBatchPredictions(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) (*machinelearning.DescribeBatchPredictionsOutput, error)
	DescribeBatchPredictionsAsync(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) *MachineLearningDescribeBatchPredictionsFuture

	DescribeDataSources(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) (*machinelearning.DescribeDataSourcesOutput, error)
	DescribeDataSourcesAsync(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) *MachineLearningDescribeDataSourcesFuture

	DescribeEvaluations(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) (*machinelearning.DescribeEvaluationsOutput, error)
	DescribeEvaluationsAsync(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) *MachineLearningDescribeEvaluationsFuture

	DescribeMLModels(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) (*machinelearning.DescribeMLModelsOutput, error)
	DescribeMLModelsAsync(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) *MachineLearningDescribeMLModelsFuture

	DescribeTags(ctx workflow.Context, input *machinelearning.DescribeTagsInput) (*machinelearning.DescribeTagsOutput, error)
	DescribeTagsAsync(ctx workflow.Context, input *machinelearning.DescribeTagsInput) *MachineLearningDescribeTagsFuture

	GetBatchPrediction(ctx workflow.Context, input *machinelearning.GetBatchPredictionInput) (*machinelearning.GetBatchPredictionOutput, error)
	GetBatchPredictionAsync(ctx workflow.Context, input *machinelearning.GetBatchPredictionInput) *MachineLearningGetBatchPredictionFuture

	GetDataSource(ctx workflow.Context, input *machinelearning.GetDataSourceInput) (*machinelearning.GetDataSourceOutput, error)
	GetDataSourceAsync(ctx workflow.Context, input *machinelearning.GetDataSourceInput) *MachineLearningGetDataSourceFuture

	GetEvaluation(ctx workflow.Context, input *machinelearning.GetEvaluationInput) (*machinelearning.GetEvaluationOutput, error)
	GetEvaluationAsync(ctx workflow.Context, input *machinelearning.GetEvaluationInput) *MachineLearningGetEvaluationFuture

	GetMLModel(ctx workflow.Context, input *machinelearning.GetMLModelInput) (*machinelearning.GetMLModelOutput, error)
	GetMLModelAsync(ctx workflow.Context, input *machinelearning.GetMLModelInput) *MachineLearningGetMLModelFuture

	Predict(ctx workflow.Context, input *machinelearning.PredictInput) (*machinelearning.PredictOutput, error)
	PredictAsync(ctx workflow.Context, input *machinelearning.PredictInput) *MachineLearningPredictFuture

	UpdateBatchPrediction(ctx workflow.Context, input *machinelearning.UpdateBatchPredictionInput) (*machinelearning.UpdateBatchPredictionOutput, error)
	UpdateBatchPredictionAsync(ctx workflow.Context, input *machinelearning.UpdateBatchPredictionInput) *MachineLearningUpdateBatchPredictionFuture

	UpdateDataSource(ctx workflow.Context, input *machinelearning.UpdateDataSourceInput) (*machinelearning.UpdateDataSourceOutput, error)
	UpdateDataSourceAsync(ctx workflow.Context, input *machinelearning.UpdateDataSourceInput) *MachineLearningUpdateDataSourceFuture

	UpdateEvaluation(ctx workflow.Context, input *machinelearning.UpdateEvaluationInput) (*machinelearning.UpdateEvaluationOutput, error)
	UpdateEvaluationAsync(ctx workflow.Context, input *machinelearning.UpdateEvaluationInput) *MachineLearningUpdateEvaluationFuture

	UpdateMLModel(ctx workflow.Context, input *machinelearning.UpdateMLModelInput) (*machinelearning.UpdateMLModelOutput, error)
	UpdateMLModelAsync(ctx workflow.Context, input *machinelearning.UpdateMLModelInput) *MachineLearningUpdateMLModelFuture

	WaitUntilBatchPredictionAvailable(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) error
	WaitUntilBatchPredictionAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) *VoidFuture

	WaitUntilDataSourceAvailable(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) error
	WaitUntilDataSourceAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) *VoidFuture

	WaitUntilEvaluationAvailable(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) error
	WaitUntilEvaluationAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) *VoidFuture

	WaitUntilMLModelAvailable(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) error
	WaitUntilMLModelAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) *VoidFuture
}

type MachineLearningStub struct{}

func NewMachineLearningStub() MachineLearningClient {
	return &MachineLearningStub{}
}

type MachineLearningAddTagsFuture struct {
	Future workflow.Future
}

func (r *MachineLearningAddTagsFuture) Get(ctx workflow.Context) (*machinelearning.AddTagsOutput, error) {
	var output machinelearning.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningCreateBatchPredictionFuture struct {
	Future workflow.Future
}

func (r *MachineLearningCreateBatchPredictionFuture) Get(ctx workflow.Context) (*machinelearning.CreateBatchPredictionOutput, error) {
	var output machinelearning.CreateBatchPredictionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningCreateDataSourceFromRDSFuture struct {
	Future workflow.Future
}

func (r *MachineLearningCreateDataSourceFromRDSFuture) Get(ctx workflow.Context) (*machinelearning.CreateDataSourceFromRDSOutput, error) {
	var output machinelearning.CreateDataSourceFromRDSOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningCreateDataSourceFromRedshiftFuture struct {
	Future workflow.Future
}

func (r *MachineLearningCreateDataSourceFromRedshiftFuture) Get(ctx workflow.Context) (*machinelearning.CreateDataSourceFromRedshiftOutput, error) {
	var output machinelearning.CreateDataSourceFromRedshiftOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningCreateDataSourceFromS3Future struct {
	Future workflow.Future
}

func (r *MachineLearningCreateDataSourceFromS3Future) Get(ctx workflow.Context) (*machinelearning.CreateDataSourceFromS3Output, error) {
	var output machinelearning.CreateDataSourceFromS3Output
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningCreateEvaluationFuture struct {
	Future workflow.Future
}

func (r *MachineLearningCreateEvaluationFuture) Get(ctx workflow.Context) (*machinelearning.CreateEvaluationOutput, error) {
	var output machinelearning.CreateEvaluationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningCreateMLModelFuture struct {
	Future workflow.Future
}

func (r *MachineLearningCreateMLModelFuture) Get(ctx workflow.Context) (*machinelearning.CreateMLModelOutput, error) {
	var output machinelearning.CreateMLModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningCreateRealtimeEndpointFuture struct {
	Future workflow.Future
}

func (r *MachineLearningCreateRealtimeEndpointFuture) Get(ctx workflow.Context) (*machinelearning.CreateRealtimeEndpointOutput, error) {
	var output machinelearning.CreateRealtimeEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningDeleteBatchPredictionFuture struct {
	Future workflow.Future
}

func (r *MachineLearningDeleteBatchPredictionFuture) Get(ctx workflow.Context) (*machinelearning.DeleteBatchPredictionOutput, error) {
	var output machinelearning.DeleteBatchPredictionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningDeleteDataSourceFuture struct {
	Future workflow.Future
}

func (r *MachineLearningDeleteDataSourceFuture) Get(ctx workflow.Context) (*machinelearning.DeleteDataSourceOutput, error) {
	var output machinelearning.DeleteDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningDeleteEvaluationFuture struct {
	Future workflow.Future
}

func (r *MachineLearningDeleteEvaluationFuture) Get(ctx workflow.Context) (*machinelearning.DeleteEvaluationOutput, error) {
	var output machinelearning.DeleteEvaluationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningDeleteMLModelFuture struct {
	Future workflow.Future
}

func (r *MachineLearningDeleteMLModelFuture) Get(ctx workflow.Context) (*machinelearning.DeleteMLModelOutput, error) {
	var output machinelearning.DeleteMLModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningDeleteRealtimeEndpointFuture struct {
	Future workflow.Future
}

func (r *MachineLearningDeleteRealtimeEndpointFuture) Get(ctx workflow.Context) (*machinelearning.DeleteRealtimeEndpointOutput, error) {
	var output machinelearning.DeleteRealtimeEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningDeleteTagsFuture struct {
	Future workflow.Future
}

func (r *MachineLearningDeleteTagsFuture) Get(ctx workflow.Context) (*machinelearning.DeleteTagsOutput, error) {
	var output machinelearning.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningDescribeBatchPredictionsFuture struct {
	Future workflow.Future
}

func (r *MachineLearningDescribeBatchPredictionsFuture) Get(ctx workflow.Context) (*machinelearning.DescribeBatchPredictionsOutput, error) {
	var output machinelearning.DescribeBatchPredictionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningDescribeDataSourcesFuture struct {
	Future workflow.Future
}

func (r *MachineLearningDescribeDataSourcesFuture) Get(ctx workflow.Context) (*machinelearning.DescribeDataSourcesOutput, error) {
	var output machinelearning.DescribeDataSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningDescribeEvaluationsFuture struct {
	Future workflow.Future
}

func (r *MachineLearningDescribeEvaluationsFuture) Get(ctx workflow.Context) (*machinelearning.DescribeEvaluationsOutput, error) {
	var output machinelearning.DescribeEvaluationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningDescribeMLModelsFuture struct {
	Future workflow.Future
}

func (r *MachineLearningDescribeMLModelsFuture) Get(ctx workflow.Context) (*machinelearning.DescribeMLModelsOutput, error) {
	var output machinelearning.DescribeMLModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningDescribeTagsFuture struct {
	Future workflow.Future
}

func (r *MachineLearningDescribeTagsFuture) Get(ctx workflow.Context) (*machinelearning.DescribeTagsOutput, error) {
	var output machinelearning.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningGetBatchPredictionFuture struct {
	Future workflow.Future
}

func (r *MachineLearningGetBatchPredictionFuture) Get(ctx workflow.Context) (*machinelearning.GetBatchPredictionOutput, error) {
	var output machinelearning.GetBatchPredictionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningGetDataSourceFuture struct {
	Future workflow.Future
}

func (r *MachineLearningGetDataSourceFuture) Get(ctx workflow.Context) (*machinelearning.GetDataSourceOutput, error) {
	var output machinelearning.GetDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningGetEvaluationFuture struct {
	Future workflow.Future
}

func (r *MachineLearningGetEvaluationFuture) Get(ctx workflow.Context) (*machinelearning.GetEvaluationOutput, error) {
	var output machinelearning.GetEvaluationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningGetMLModelFuture struct {
	Future workflow.Future
}

func (r *MachineLearningGetMLModelFuture) Get(ctx workflow.Context) (*machinelearning.GetMLModelOutput, error) {
	var output machinelearning.GetMLModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningPredictFuture struct {
	Future workflow.Future
}

func (r *MachineLearningPredictFuture) Get(ctx workflow.Context) (*machinelearning.PredictOutput, error) {
	var output machinelearning.PredictOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningUpdateBatchPredictionFuture struct {
	Future workflow.Future
}

func (r *MachineLearningUpdateBatchPredictionFuture) Get(ctx workflow.Context) (*machinelearning.UpdateBatchPredictionOutput, error) {
	var output machinelearning.UpdateBatchPredictionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningUpdateDataSourceFuture struct {
	Future workflow.Future
}

func (r *MachineLearningUpdateDataSourceFuture) Get(ctx workflow.Context) (*machinelearning.UpdateDataSourceOutput, error) {
	var output machinelearning.UpdateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningUpdateEvaluationFuture struct {
	Future workflow.Future
}

func (r *MachineLearningUpdateEvaluationFuture) Get(ctx workflow.Context) (*machinelearning.UpdateEvaluationOutput, error) {
	var output machinelearning.UpdateEvaluationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachineLearningUpdateMLModelFuture struct {
	Future workflow.Future
}

func (r *MachineLearningUpdateMLModelFuture) Get(ctx workflow.Context) (*machinelearning.UpdateMLModelOutput, error) {
	var output machinelearning.UpdateMLModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) AddTags(ctx workflow.Context, input *machinelearning.AddTagsInput) (*machinelearning.AddTagsOutput, error) {
	var output machinelearning.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) AddTagsAsync(ctx workflow.Context, input *machinelearning.AddTagsInput) *MachineLearningAddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.AddTags", input)
	return &MachineLearningAddTagsFuture{Future: future}
}

func (a *MachineLearningStub) CreateBatchPrediction(ctx workflow.Context, input *machinelearning.CreateBatchPredictionInput) (*machinelearning.CreateBatchPredictionOutput, error) {
	var output machinelearning.CreateBatchPredictionOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateBatchPrediction", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateBatchPredictionAsync(ctx workflow.Context, input *machinelearning.CreateBatchPredictionInput) *MachineLearningCreateBatchPredictionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateBatchPrediction", input)
	return &MachineLearningCreateBatchPredictionFuture{Future: future}
}

func (a *MachineLearningStub) CreateDataSourceFromRDS(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRDSInput) (*machinelearning.CreateDataSourceFromRDSOutput, error) {
	var output machinelearning.CreateDataSourceFromRDSOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateDataSourceFromRDS", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateDataSourceFromRDSAsync(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRDSInput) *MachineLearningCreateDataSourceFromRDSFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateDataSourceFromRDS", input)
	return &MachineLearningCreateDataSourceFromRDSFuture{Future: future}
}

func (a *MachineLearningStub) CreateDataSourceFromRedshift(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRedshiftInput) (*machinelearning.CreateDataSourceFromRedshiftOutput, error) {
	var output machinelearning.CreateDataSourceFromRedshiftOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateDataSourceFromRedshift", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateDataSourceFromRedshiftAsync(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRedshiftInput) *MachineLearningCreateDataSourceFromRedshiftFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateDataSourceFromRedshift", input)
	return &MachineLearningCreateDataSourceFromRedshiftFuture{Future: future}
}

func (a *MachineLearningStub) CreateDataSourceFromS3(ctx workflow.Context, input *machinelearning.CreateDataSourceFromS3Input) (*machinelearning.CreateDataSourceFromS3Output, error) {
	var output machinelearning.CreateDataSourceFromS3Output
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateDataSourceFromS3", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateDataSourceFromS3Async(ctx workflow.Context, input *machinelearning.CreateDataSourceFromS3Input) *MachineLearningCreateDataSourceFromS3Future {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateDataSourceFromS3", input)
	return &MachineLearningCreateDataSourceFromS3Future{Future: future}
}

func (a *MachineLearningStub) CreateEvaluation(ctx workflow.Context, input *machinelearning.CreateEvaluationInput) (*machinelearning.CreateEvaluationOutput, error) {
	var output machinelearning.CreateEvaluationOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateEvaluation", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateEvaluationAsync(ctx workflow.Context, input *machinelearning.CreateEvaluationInput) *MachineLearningCreateEvaluationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateEvaluation", input)
	return &MachineLearningCreateEvaluationFuture{Future: future}
}

func (a *MachineLearningStub) CreateMLModel(ctx workflow.Context, input *machinelearning.CreateMLModelInput) (*machinelearning.CreateMLModelOutput, error) {
	var output machinelearning.CreateMLModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateMLModel", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateMLModelAsync(ctx workflow.Context, input *machinelearning.CreateMLModelInput) *MachineLearningCreateMLModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateMLModel", input)
	return &MachineLearningCreateMLModelFuture{Future: future}
}

func (a *MachineLearningStub) CreateRealtimeEndpoint(ctx workflow.Context, input *machinelearning.CreateRealtimeEndpointInput) (*machinelearning.CreateRealtimeEndpointOutput, error) {
	var output machinelearning.CreateRealtimeEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateRealtimeEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateRealtimeEndpointAsync(ctx workflow.Context, input *machinelearning.CreateRealtimeEndpointInput) *MachineLearningCreateRealtimeEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateRealtimeEndpoint", input)
	return &MachineLearningCreateRealtimeEndpointFuture{Future: future}
}

func (a *MachineLearningStub) DeleteBatchPrediction(ctx workflow.Context, input *machinelearning.DeleteBatchPredictionInput) (*machinelearning.DeleteBatchPredictionOutput, error) {
	var output machinelearning.DeleteBatchPredictionOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteBatchPrediction", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DeleteBatchPredictionAsync(ctx workflow.Context, input *machinelearning.DeleteBatchPredictionInput) *MachineLearningDeleteBatchPredictionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteBatchPrediction", input)
	return &MachineLearningDeleteBatchPredictionFuture{Future: future}
}

func (a *MachineLearningStub) DeleteDataSource(ctx workflow.Context, input *machinelearning.DeleteDataSourceInput) (*machinelearning.DeleteDataSourceOutput, error) {
	var output machinelearning.DeleteDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DeleteDataSourceAsync(ctx workflow.Context, input *machinelearning.DeleteDataSourceInput) *MachineLearningDeleteDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteDataSource", input)
	return &MachineLearningDeleteDataSourceFuture{Future: future}
}

func (a *MachineLearningStub) DeleteEvaluation(ctx workflow.Context, input *machinelearning.DeleteEvaluationInput) (*machinelearning.DeleteEvaluationOutput, error) {
	var output machinelearning.DeleteEvaluationOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteEvaluation", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DeleteEvaluationAsync(ctx workflow.Context, input *machinelearning.DeleteEvaluationInput) *MachineLearningDeleteEvaluationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteEvaluation", input)
	return &MachineLearningDeleteEvaluationFuture{Future: future}
}

func (a *MachineLearningStub) DeleteMLModel(ctx workflow.Context, input *machinelearning.DeleteMLModelInput) (*machinelearning.DeleteMLModelOutput, error) {
	var output machinelearning.DeleteMLModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteMLModel", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DeleteMLModelAsync(ctx workflow.Context, input *machinelearning.DeleteMLModelInput) *MachineLearningDeleteMLModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteMLModel", input)
	return &MachineLearningDeleteMLModelFuture{Future: future}
}

func (a *MachineLearningStub) DeleteRealtimeEndpoint(ctx workflow.Context, input *machinelearning.DeleteRealtimeEndpointInput) (*machinelearning.DeleteRealtimeEndpointOutput, error) {
	var output machinelearning.DeleteRealtimeEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteRealtimeEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DeleteRealtimeEndpointAsync(ctx workflow.Context, input *machinelearning.DeleteRealtimeEndpointInput) *MachineLearningDeleteRealtimeEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteRealtimeEndpoint", input)
	return &MachineLearningDeleteRealtimeEndpointFuture{Future: future}
}

func (a *MachineLearningStub) DeleteTags(ctx workflow.Context, input *machinelearning.DeleteTagsInput) (*machinelearning.DeleteTagsOutput, error) {
	var output machinelearning.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DeleteTagsAsync(ctx workflow.Context, input *machinelearning.DeleteTagsInput) *MachineLearningDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteTags", input)
	return &MachineLearningDeleteTagsFuture{Future: future}
}

func (a *MachineLearningStub) DescribeBatchPredictions(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) (*machinelearning.DescribeBatchPredictionsOutput, error) {
	var output machinelearning.DescribeBatchPredictionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeBatchPredictions", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DescribeBatchPredictionsAsync(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) *MachineLearningDescribeBatchPredictionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeBatchPredictions", input)
	return &MachineLearningDescribeBatchPredictionsFuture{Future: future}
}

func (a *MachineLearningStub) DescribeDataSources(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) (*machinelearning.DescribeDataSourcesOutput, error) {
	var output machinelearning.DescribeDataSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeDataSources", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DescribeDataSourcesAsync(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) *MachineLearningDescribeDataSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeDataSources", input)
	return &MachineLearningDescribeDataSourcesFuture{Future: future}
}

func (a *MachineLearningStub) DescribeEvaluations(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) (*machinelearning.DescribeEvaluationsOutput, error) {
	var output machinelearning.DescribeEvaluationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeEvaluations", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DescribeEvaluationsAsync(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) *MachineLearningDescribeEvaluationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeEvaluations", input)
	return &MachineLearningDescribeEvaluationsFuture{Future: future}
}

func (a *MachineLearningStub) DescribeMLModels(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) (*machinelearning.DescribeMLModelsOutput, error) {
	var output machinelearning.DescribeMLModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeMLModels", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DescribeMLModelsAsync(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) *MachineLearningDescribeMLModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeMLModels", input)
	return &MachineLearningDescribeMLModelsFuture{Future: future}
}

func (a *MachineLearningStub) DescribeTags(ctx workflow.Context, input *machinelearning.DescribeTagsInput) (*machinelearning.DescribeTagsOutput, error) {
	var output machinelearning.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DescribeTagsAsync(ctx workflow.Context, input *machinelearning.DescribeTagsInput) *MachineLearningDescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeTags", input)
	return &MachineLearningDescribeTagsFuture{Future: future}
}

func (a *MachineLearningStub) GetBatchPrediction(ctx workflow.Context, input *machinelearning.GetBatchPredictionInput) (*machinelearning.GetBatchPredictionOutput, error) {
	var output machinelearning.GetBatchPredictionOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetBatchPrediction", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) GetBatchPredictionAsync(ctx workflow.Context, input *machinelearning.GetBatchPredictionInput) *MachineLearningGetBatchPredictionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetBatchPrediction", input)
	return &MachineLearningGetBatchPredictionFuture{Future: future}
}

func (a *MachineLearningStub) GetDataSource(ctx workflow.Context, input *machinelearning.GetDataSourceInput) (*machinelearning.GetDataSourceOutput, error) {
	var output machinelearning.GetDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) GetDataSourceAsync(ctx workflow.Context, input *machinelearning.GetDataSourceInput) *MachineLearningGetDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetDataSource", input)
	return &MachineLearningGetDataSourceFuture{Future: future}
}

func (a *MachineLearningStub) GetEvaluation(ctx workflow.Context, input *machinelearning.GetEvaluationInput) (*machinelearning.GetEvaluationOutput, error) {
	var output machinelearning.GetEvaluationOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetEvaluation", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) GetEvaluationAsync(ctx workflow.Context, input *machinelearning.GetEvaluationInput) *MachineLearningGetEvaluationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetEvaluation", input)
	return &MachineLearningGetEvaluationFuture{Future: future}
}

func (a *MachineLearningStub) GetMLModel(ctx workflow.Context, input *machinelearning.GetMLModelInput) (*machinelearning.GetMLModelOutput, error) {
	var output machinelearning.GetMLModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetMLModel", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) GetMLModelAsync(ctx workflow.Context, input *machinelearning.GetMLModelInput) *MachineLearningGetMLModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetMLModel", input)
	return &MachineLearningGetMLModelFuture{Future: future}
}

func (a *MachineLearningStub) Predict(ctx workflow.Context, input *machinelearning.PredictInput) (*machinelearning.PredictOutput, error) {
	var output machinelearning.PredictOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.Predict", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) PredictAsync(ctx workflow.Context, input *machinelearning.PredictInput) *MachineLearningPredictFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.Predict", input)
	return &MachineLearningPredictFuture{Future: future}
}

func (a *MachineLearningStub) UpdateBatchPrediction(ctx workflow.Context, input *machinelearning.UpdateBatchPredictionInput) (*machinelearning.UpdateBatchPredictionOutput, error) {
	var output machinelearning.UpdateBatchPredictionOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateBatchPrediction", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) UpdateBatchPredictionAsync(ctx workflow.Context, input *machinelearning.UpdateBatchPredictionInput) *MachineLearningUpdateBatchPredictionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateBatchPrediction", input)
	return &MachineLearningUpdateBatchPredictionFuture{Future: future}
}

func (a *MachineLearningStub) UpdateDataSource(ctx workflow.Context, input *machinelearning.UpdateDataSourceInput) (*machinelearning.UpdateDataSourceOutput, error) {
	var output machinelearning.UpdateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) UpdateDataSourceAsync(ctx workflow.Context, input *machinelearning.UpdateDataSourceInput) *MachineLearningUpdateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateDataSource", input)
	return &MachineLearningUpdateDataSourceFuture{Future: future}
}

func (a *MachineLearningStub) UpdateEvaluation(ctx workflow.Context, input *machinelearning.UpdateEvaluationInput) (*machinelearning.UpdateEvaluationOutput, error) {
	var output machinelearning.UpdateEvaluationOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateEvaluation", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) UpdateEvaluationAsync(ctx workflow.Context, input *machinelearning.UpdateEvaluationInput) *MachineLearningUpdateEvaluationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateEvaluation", input)
	return &MachineLearningUpdateEvaluationFuture{Future: future}
}

func (a *MachineLearningStub) UpdateMLModel(ctx workflow.Context, input *machinelearning.UpdateMLModelInput) (*machinelearning.UpdateMLModelOutput, error) {
	var output machinelearning.UpdateMLModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateMLModel", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) UpdateMLModelAsync(ctx workflow.Context, input *machinelearning.UpdateMLModelInput) *MachineLearningUpdateMLModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateMLModel", input)
	return &MachineLearningUpdateMLModelFuture{Future: future}
}

func (a *MachineLearningStub) WaitUntilBatchPredictionAvailable(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilBatchPredictionAvailable", input).Get(ctx, nil)
}

func (a *MachineLearningStub) WaitUntilBatchPredictionAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilBatchPredictionAvailable", input)
	return NewVoidFuture(future)
}

func (a *MachineLearningStub) WaitUntilDataSourceAvailable(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilDataSourceAvailable", input).Get(ctx, nil)
}

func (a *MachineLearningStub) WaitUntilDataSourceAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilDataSourceAvailable", input)
	return NewVoidFuture(future)
}

func (a *MachineLearningStub) WaitUntilEvaluationAvailable(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilEvaluationAvailable", input).Get(ctx, nil)
}

func (a *MachineLearningStub) WaitUntilEvaluationAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilEvaluationAvailable", input)
	return NewVoidFuture(future)
}

func (a *MachineLearningStub) WaitUntilMLModelAvailable(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilMLModelAvailable", input).Get(ctx, nil)
}

func (a *MachineLearningStub) WaitUntilMLModelAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilMLModelAvailable", input)
	return NewVoidFuture(future)
}
