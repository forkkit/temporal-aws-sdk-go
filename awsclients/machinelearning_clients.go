// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/machinelearning"
	"go.temporal.io/sdk/workflow"
)

type MachineLearningClient interface {
	AddTags(ctx workflow.Context, input *machinelearning.AddTagsInput) (*machinelearning.AddTagsOutput, error)
	AddTagsAsync(ctx workflow.Context, input *machinelearning.AddTagsInput) *MachinelearningAddTagsFuture

	CreateBatchPrediction(ctx workflow.Context, input *machinelearning.CreateBatchPredictionInput) (*machinelearning.CreateBatchPredictionOutput, error)
	CreateBatchPredictionAsync(ctx workflow.Context, input *machinelearning.CreateBatchPredictionInput) *MachinelearningCreateBatchPredictionFuture

	CreateDataSourceFromRDS(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRDSInput) (*machinelearning.CreateDataSourceFromRDSOutput, error)
	CreateDataSourceFromRDSAsync(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRDSInput) *MachinelearningCreateDataSourceFromRDSFuture

	CreateDataSourceFromRedshift(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRedshiftInput) (*machinelearning.CreateDataSourceFromRedshiftOutput, error)
	CreateDataSourceFromRedshiftAsync(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRedshiftInput) *MachinelearningCreateDataSourceFromRedshiftFuture

	CreateDataSourceFromS3(ctx workflow.Context, input *machinelearning.CreateDataSourceFromS3Input) (*machinelearning.CreateDataSourceFromS3Output, error)
	CreateDataSourceFromS3Async(ctx workflow.Context, input *machinelearning.CreateDataSourceFromS3Input) *MachinelearningCreateDataSourceFromS3Future

	CreateEvaluation(ctx workflow.Context, input *machinelearning.CreateEvaluationInput) (*machinelearning.CreateEvaluationOutput, error)
	CreateEvaluationAsync(ctx workflow.Context, input *machinelearning.CreateEvaluationInput) *MachinelearningCreateEvaluationFuture

	CreateMLModel(ctx workflow.Context, input *machinelearning.CreateMLModelInput) (*machinelearning.CreateMLModelOutput, error)
	CreateMLModelAsync(ctx workflow.Context, input *machinelearning.CreateMLModelInput) *MachinelearningCreateMLModelFuture

	CreateRealtimeEndpoint(ctx workflow.Context, input *machinelearning.CreateRealtimeEndpointInput) (*machinelearning.CreateRealtimeEndpointOutput, error)
	CreateRealtimeEndpointAsync(ctx workflow.Context, input *machinelearning.CreateRealtimeEndpointInput) *MachinelearningCreateRealtimeEndpointFuture

	DeleteBatchPrediction(ctx workflow.Context, input *machinelearning.DeleteBatchPredictionInput) (*machinelearning.DeleteBatchPredictionOutput, error)
	DeleteBatchPredictionAsync(ctx workflow.Context, input *machinelearning.DeleteBatchPredictionInput) *MachinelearningDeleteBatchPredictionFuture

	DeleteDataSource(ctx workflow.Context, input *machinelearning.DeleteDataSourceInput) (*machinelearning.DeleteDataSourceOutput, error)
	DeleteDataSourceAsync(ctx workflow.Context, input *machinelearning.DeleteDataSourceInput) *MachinelearningDeleteDataSourceFuture

	DeleteEvaluation(ctx workflow.Context, input *machinelearning.DeleteEvaluationInput) (*machinelearning.DeleteEvaluationOutput, error)
	DeleteEvaluationAsync(ctx workflow.Context, input *machinelearning.DeleteEvaluationInput) *MachinelearningDeleteEvaluationFuture

	DeleteMLModel(ctx workflow.Context, input *machinelearning.DeleteMLModelInput) (*machinelearning.DeleteMLModelOutput, error)
	DeleteMLModelAsync(ctx workflow.Context, input *machinelearning.DeleteMLModelInput) *MachinelearningDeleteMLModelFuture

	DeleteRealtimeEndpoint(ctx workflow.Context, input *machinelearning.DeleteRealtimeEndpointInput) (*machinelearning.DeleteRealtimeEndpointOutput, error)
	DeleteRealtimeEndpointAsync(ctx workflow.Context, input *machinelearning.DeleteRealtimeEndpointInput) *MachinelearningDeleteRealtimeEndpointFuture

	DeleteTags(ctx workflow.Context, input *machinelearning.DeleteTagsInput) (*machinelearning.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *machinelearning.DeleteTagsInput) *MachinelearningDeleteTagsFuture

	DescribeBatchPredictions(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) (*machinelearning.DescribeBatchPredictionsOutput, error)
	DescribeBatchPredictionsAsync(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) *MachinelearningDescribeBatchPredictionsFuture

	DescribeDataSources(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) (*machinelearning.DescribeDataSourcesOutput, error)
	DescribeDataSourcesAsync(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) *MachinelearningDescribeDataSourcesFuture

	DescribeEvaluations(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) (*machinelearning.DescribeEvaluationsOutput, error)
	DescribeEvaluationsAsync(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) *MachinelearningDescribeEvaluationsFuture

	DescribeMLModels(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) (*machinelearning.DescribeMLModelsOutput, error)
	DescribeMLModelsAsync(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) *MachinelearningDescribeMLModelsFuture

	DescribeTags(ctx workflow.Context, input *machinelearning.DescribeTagsInput) (*machinelearning.DescribeTagsOutput, error)
	DescribeTagsAsync(ctx workflow.Context, input *machinelearning.DescribeTagsInput) *MachinelearningDescribeTagsFuture

	GetBatchPrediction(ctx workflow.Context, input *machinelearning.GetBatchPredictionInput) (*machinelearning.GetBatchPredictionOutput, error)
	GetBatchPredictionAsync(ctx workflow.Context, input *machinelearning.GetBatchPredictionInput) *MachinelearningGetBatchPredictionFuture

	GetDataSource(ctx workflow.Context, input *machinelearning.GetDataSourceInput) (*machinelearning.GetDataSourceOutput, error)
	GetDataSourceAsync(ctx workflow.Context, input *machinelearning.GetDataSourceInput) *MachinelearningGetDataSourceFuture

	GetEvaluation(ctx workflow.Context, input *machinelearning.GetEvaluationInput) (*machinelearning.GetEvaluationOutput, error)
	GetEvaluationAsync(ctx workflow.Context, input *machinelearning.GetEvaluationInput) *MachinelearningGetEvaluationFuture

	GetMLModel(ctx workflow.Context, input *machinelearning.GetMLModelInput) (*machinelearning.GetMLModelOutput, error)
	GetMLModelAsync(ctx workflow.Context, input *machinelearning.GetMLModelInput) *MachinelearningGetMLModelFuture

	Predict(ctx workflow.Context, input *machinelearning.PredictInput) (*machinelearning.PredictOutput, error)
	PredictAsync(ctx workflow.Context, input *machinelearning.PredictInput) *MachinelearningPredictFuture

	UpdateBatchPrediction(ctx workflow.Context, input *machinelearning.UpdateBatchPredictionInput) (*machinelearning.UpdateBatchPredictionOutput, error)
	UpdateBatchPredictionAsync(ctx workflow.Context, input *machinelearning.UpdateBatchPredictionInput) *MachinelearningUpdateBatchPredictionFuture

	UpdateDataSource(ctx workflow.Context, input *machinelearning.UpdateDataSourceInput) (*machinelearning.UpdateDataSourceOutput, error)
	UpdateDataSourceAsync(ctx workflow.Context, input *machinelearning.UpdateDataSourceInput) *MachinelearningUpdateDataSourceFuture

	UpdateEvaluation(ctx workflow.Context, input *machinelearning.UpdateEvaluationInput) (*machinelearning.UpdateEvaluationOutput, error)
	UpdateEvaluationAsync(ctx workflow.Context, input *machinelearning.UpdateEvaluationInput) *MachinelearningUpdateEvaluationFuture

	UpdateMLModel(ctx workflow.Context, input *machinelearning.UpdateMLModelInput) (*machinelearning.UpdateMLModelOutput, error)
	UpdateMLModelAsync(ctx workflow.Context, input *machinelearning.UpdateMLModelInput) *MachinelearningUpdateMLModelFuture

	WaitUntilBatchPredictionAvailable(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) error
	WaitUntilBatchPredictionAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) *VoidFuture

	WaitUntilDataSourceAvailable(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) error
	WaitUntilDataSourceAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) *VoidFuture

	WaitUntilEvaluationAvailable(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) error
	WaitUntilEvaluationAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) *VoidFuture

	WaitUntilMLModelAvailable(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) error
	WaitUntilMLModelAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) *VoidFuture
}

type MachineLearningStub struct{}

func NewMachineLearningStub() MachineLearningClient {
	return &MachineLearningStub{}
}

type MachinelearningAddTagsFuture struct {
	Future workflow.Future
}

func (r *MachinelearningAddTagsFuture) Get(ctx workflow.Context) (*machinelearning.AddTagsOutput, error) {
	var output machinelearning.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningCreateBatchPredictionFuture struct {
	Future workflow.Future
}

func (r *MachinelearningCreateBatchPredictionFuture) Get(ctx workflow.Context) (*machinelearning.CreateBatchPredictionOutput, error) {
	var output machinelearning.CreateBatchPredictionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningCreateDataSourceFromRDSFuture struct {
	Future workflow.Future
}

func (r *MachinelearningCreateDataSourceFromRDSFuture) Get(ctx workflow.Context) (*machinelearning.CreateDataSourceFromRDSOutput, error) {
	var output machinelearning.CreateDataSourceFromRDSOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningCreateDataSourceFromRedshiftFuture struct {
	Future workflow.Future
}

func (r *MachinelearningCreateDataSourceFromRedshiftFuture) Get(ctx workflow.Context) (*machinelearning.CreateDataSourceFromRedshiftOutput, error) {
	var output machinelearning.CreateDataSourceFromRedshiftOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningCreateDataSourceFromS3Future struct {
	Future workflow.Future
}

func (r *MachinelearningCreateDataSourceFromS3Future) Get(ctx workflow.Context) (*machinelearning.CreateDataSourceFromS3Output, error) {
	var output machinelearning.CreateDataSourceFromS3Output
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningCreateEvaluationFuture struct {
	Future workflow.Future
}

func (r *MachinelearningCreateEvaluationFuture) Get(ctx workflow.Context) (*machinelearning.CreateEvaluationOutput, error) {
	var output machinelearning.CreateEvaluationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningCreateMLModelFuture struct {
	Future workflow.Future
}

func (r *MachinelearningCreateMLModelFuture) Get(ctx workflow.Context) (*machinelearning.CreateMLModelOutput, error) {
	var output machinelearning.CreateMLModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningCreateRealtimeEndpointFuture struct {
	Future workflow.Future
}

func (r *MachinelearningCreateRealtimeEndpointFuture) Get(ctx workflow.Context) (*machinelearning.CreateRealtimeEndpointOutput, error) {
	var output machinelearning.CreateRealtimeEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningDeleteBatchPredictionFuture struct {
	Future workflow.Future
}

func (r *MachinelearningDeleteBatchPredictionFuture) Get(ctx workflow.Context) (*machinelearning.DeleteBatchPredictionOutput, error) {
	var output machinelearning.DeleteBatchPredictionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningDeleteDataSourceFuture struct {
	Future workflow.Future
}

func (r *MachinelearningDeleteDataSourceFuture) Get(ctx workflow.Context) (*machinelearning.DeleteDataSourceOutput, error) {
	var output machinelearning.DeleteDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningDeleteEvaluationFuture struct {
	Future workflow.Future
}

func (r *MachinelearningDeleteEvaluationFuture) Get(ctx workflow.Context) (*machinelearning.DeleteEvaluationOutput, error) {
	var output machinelearning.DeleteEvaluationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningDeleteMLModelFuture struct {
	Future workflow.Future
}

func (r *MachinelearningDeleteMLModelFuture) Get(ctx workflow.Context) (*machinelearning.DeleteMLModelOutput, error) {
	var output machinelearning.DeleteMLModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningDeleteRealtimeEndpointFuture struct {
	Future workflow.Future
}

func (r *MachinelearningDeleteRealtimeEndpointFuture) Get(ctx workflow.Context) (*machinelearning.DeleteRealtimeEndpointOutput, error) {
	var output machinelearning.DeleteRealtimeEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningDeleteTagsFuture struct {
	Future workflow.Future
}

func (r *MachinelearningDeleteTagsFuture) Get(ctx workflow.Context) (*machinelearning.DeleteTagsOutput, error) {
	var output machinelearning.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningDescribeBatchPredictionsFuture struct {
	Future workflow.Future
}

func (r *MachinelearningDescribeBatchPredictionsFuture) Get(ctx workflow.Context) (*machinelearning.DescribeBatchPredictionsOutput, error) {
	var output machinelearning.DescribeBatchPredictionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningDescribeDataSourcesFuture struct {
	Future workflow.Future
}

func (r *MachinelearningDescribeDataSourcesFuture) Get(ctx workflow.Context) (*machinelearning.DescribeDataSourcesOutput, error) {
	var output machinelearning.DescribeDataSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningDescribeEvaluationsFuture struct {
	Future workflow.Future
}

func (r *MachinelearningDescribeEvaluationsFuture) Get(ctx workflow.Context) (*machinelearning.DescribeEvaluationsOutput, error) {
	var output machinelearning.DescribeEvaluationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningDescribeMLModelsFuture struct {
	Future workflow.Future
}

func (r *MachinelearningDescribeMLModelsFuture) Get(ctx workflow.Context) (*machinelearning.DescribeMLModelsOutput, error) {
	var output machinelearning.DescribeMLModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningDescribeTagsFuture struct {
	Future workflow.Future
}

func (r *MachinelearningDescribeTagsFuture) Get(ctx workflow.Context) (*machinelearning.DescribeTagsOutput, error) {
	var output machinelearning.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningGetBatchPredictionFuture struct {
	Future workflow.Future
}

func (r *MachinelearningGetBatchPredictionFuture) Get(ctx workflow.Context) (*machinelearning.GetBatchPredictionOutput, error) {
	var output machinelearning.GetBatchPredictionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningGetDataSourceFuture struct {
	Future workflow.Future
}

func (r *MachinelearningGetDataSourceFuture) Get(ctx workflow.Context) (*machinelearning.GetDataSourceOutput, error) {
	var output machinelearning.GetDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningGetEvaluationFuture struct {
	Future workflow.Future
}

func (r *MachinelearningGetEvaluationFuture) Get(ctx workflow.Context) (*machinelearning.GetEvaluationOutput, error) {
	var output machinelearning.GetEvaluationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningGetMLModelFuture struct {
	Future workflow.Future
}

func (r *MachinelearningGetMLModelFuture) Get(ctx workflow.Context) (*machinelearning.GetMLModelOutput, error) {
	var output machinelearning.GetMLModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningPredictFuture struct {
	Future workflow.Future
}

func (r *MachinelearningPredictFuture) Get(ctx workflow.Context) (*machinelearning.PredictOutput, error) {
	var output machinelearning.PredictOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningUpdateBatchPredictionFuture struct {
	Future workflow.Future
}

func (r *MachinelearningUpdateBatchPredictionFuture) Get(ctx workflow.Context) (*machinelearning.UpdateBatchPredictionOutput, error) {
	var output machinelearning.UpdateBatchPredictionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningUpdateDataSourceFuture struct {
	Future workflow.Future
}

func (r *MachinelearningUpdateDataSourceFuture) Get(ctx workflow.Context) (*machinelearning.UpdateDataSourceOutput, error) {
	var output machinelearning.UpdateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningUpdateEvaluationFuture struct {
	Future workflow.Future
}

func (r *MachinelearningUpdateEvaluationFuture) Get(ctx workflow.Context) (*machinelearning.UpdateEvaluationOutput, error) {
	var output machinelearning.UpdateEvaluationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MachinelearningUpdateMLModelFuture struct {
	Future workflow.Future
}

func (r *MachinelearningUpdateMLModelFuture) Get(ctx workflow.Context) (*machinelearning.UpdateMLModelOutput, error) {
	var output machinelearning.UpdateMLModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) AddTags(ctx workflow.Context, input *machinelearning.AddTagsInput) (*machinelearning.AddTagsOutput, error) {
	var output machinelearning.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) AddTagsAsync(ctx workflow.Context, input *machinelearning.AddTagsInput) *MachinelearningAddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.AddTags", input)
	return &MachinelearningAddTagsFuture{Future: future}
}

func (a *MachineLearningStub) CreateBatchPrediction(ctx workflow.Context, input *machinelearning.CreateBatchPredictionInput) (*machinelearning.CreateBatchPredictionOutput, error) {
	var output machinelearning.CreateBatchPredictionOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateBatchPrediction", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateBatchPredictionAsync(ctx workflow.Context, input *machinelearning.CreateBatchPredictionInput) *MachinelearningCreateBatchPredictionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateBatchPrediction", input)
	return &MachinelearningCreateBatchPredictionFuture{Future: future}
}

func (a *MachineLearningStub) CreateDataSourceFromRDS(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRDSInput) (*machinelearning.CreateDataSourceFromRDSOutput, error) {
	var output machinelearning.CreateDataSourceFromRDSOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateDataSourceFromRDS", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateDataSourceFromRDSAsync(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRDSInput) *MachinelearningCreateDataSourceFromRDSFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateDataSourceFromRDS", input)
	return &MachinelearningCreateDataSourceFromRDSFuture{Future: future}
}

func (a *MachineLearningStub) CreateDataSourceFromRedshift(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRedshiftInput) (*machinelearning.CreateDataSourceFromRedshiftOutput, error) {
	var output machinelearning.CreateDataSourceFromRedshiftOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateDataSourceFromRedshift", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateDataSourceFromRedshiftAsync(ctx workflow.Context, input *machinelearning.CreateDataSourceFromRedshiftInput) *MachinelearningCreateDataSourceFromRedshiftFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateDataSourceFromRedshift", input)
	return &MachinelearningCreateDataSourceFromRedshiftFuture{Future: future}
}

func (a *MachineLearningStub) CreateDataSourceFromS3(ctx workflow.Context, input *machinelearning.CreateDataSourceFromS3Input) (*machinelearning.CreateDataSourceFromS3Output, error) {
	var output machinelearning.CreateDataSourceFromS3Output
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateDataSourceFromS3", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateDataSourceFromS3Async(ctx workflow.Context, input *machinelearning.CreateDataSourceFromS3Input) *MachinelearningCreateDataSourceFromS3Future {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateDataSourceFromS3", input)
	return &MachinelearningCreateDataSourceFromS3Future{Future: future}
}

func (a *MachineLearningStub) CreateEvaluation(ctx workflow.Context, input *machinelearning.CreateEvaluationInput) (*machinelearning.CreateEvaluationOutput, error) {
	var output machinelearning.CreateEvaluationOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateEvaluation", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateEvaluationAsync(ctx workflow.Context, input *machinelearning.CreateEvaluationInput) *MachinelearningCreateEvaluationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateEvaluation", input)
	return &MachinelearningCreateEvaluationFuture{Future: future}
}

func (a *MachineLearningStub) CreateMLModel(ctx workflow.Context, input *machinelearning.CreateMLModelInput) (*machinelearning.CreateMLModelOutput, error) {
	var output machinelearning.CreateMLModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateMLModel", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateMLModelAsync(ctx workflow.Context, input *machinelearning.CreateMLModelInput) *MachinelearningCreateMLModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateMLModel", input)
	return &MachinelearningCreateMLModelFuture{Future: future}
}

func (a *MachineLearningStub) CreateRealtimeEndpoint(ctx workflow.Context, input *machinelearning.CreateRealtimeEndpointInput) (*machinelearning.CreateRealtimeEndpointOutput, error) {
	var output machinelearning.CreateRealtimeEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateRealtimeEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) CreateRealtimeEndpointAsync(ctx workflow.Context, input *machinelearning.CreateRealtimeEndpointInput) *MachinelearningCreateRealtimeEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.CreateRealtimeEndpoint", input)
	return &MachinelearningCreateRealtimeEndpointFuture{Future: future}
}

func (a *MachineLearningStub) DeleteBatchPrediction(ctx workflow.Context, input *machinelearning.DeleteBatchPredictionInput) (*machinelearning.DeleteBatchPredictionOutput, error) {
	var output machinelearning.DeleteBatchPredictionOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteBatchPrediction", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DeleteBatchPredictionAsync(ctx workflow.Context, input *machinelearning.DeleteBatchPredictionInput) *MachinelearningDeleteBatchPredictionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteBatchPrediction", input)
	return &MachinelearningDeleteBatchPredictionFuture{Future: future}
}

func (a *MachineLearningStub) DeleteDataSource(ctx workflow.Context, input *machinelearning.DeleteDataSourceInput) (*machinelearning.DeleteDataSourceOutput, error) {
	var output machinelearning.DeleteDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DeleteDataSourceAsync(ctx workflow.Context, input *machinelearning.DeleteDataSourceInput) *MachinelearningDeleteDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteDataSource", input)
	return &MachinelearningDeleteDataSourceFuture{Future: future}
}

func (a *MachineLearningStub) DeleteEvaluation(ctx workflow.Context, input *machinelearning.DeleteEvaluationInput) (*machinelearning.DeleteEvaluationOutput, error) {
	var output machinelearning.DeleteEvaluationOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteEvaluation", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DeleteEvaluationAsync(ctx workflow.Context, input *machinelearning.DeleteEvaluationInput) *MachinelearningDeleteEvaluationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteEvaluation", input)
	return &MachinelearningDeleteEvaluationFuture{Future: future}
}

func (a *MachineLearningStub) DeleteMLModel(ctx workflow.Context, input *machinelearning.DeleteMLModelInput) (*machinelearning.DeleteMLModelOutput, error) {
	var output machinelearning.DeleteMLModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteMLModel", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DeleteMLModelAsync(ctx workflow.Context, input *machinelearning.DeleteMLModelInput) *MachinelearningDeleteMLModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteMLModel", input)
	return &MachinelearningDeleteMLModelFuture{Future: future}
}

func (a *MachineLearningStub) DeleteRealtimeEndpoint(ctx workflow.Context, input *machinelearning.DeleteRealtimeEndpointInput) (*machinelearning.DeleteRealtimeEndpointOutput, error) {
	var output machinelearning.DeleteRealtimeEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteRealtimeEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DeleteRealtimeEndpointAsync(ctx workflow.Context, input *machinelearning.DeleteRealtimeEndpointInput) *MachinelearningDeleteRealtimeEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteRealtimeEndpoint", input)
	return &MachinelearningDeleteRealtimeEndpointFuture{Future: future}
}

func (a *MachineLearningStub) DeleteTags(ctx workflow.Context, input *machinelearning.DeleteTagsInput) (*machinelearning.DeleteTagsOutput, error) {
	var output machinelearning.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DeleteTagsAsync(ctx workflow.Context, input *machinelearning.DeleteTagsInput) *MachinelearningDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DeleteTags", input)
	return &MachinelearningDeleteTagsFuture{Future: future}
}

func (a *MachineLearningStub) DescribeBatchPredictions(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) (*machinelearning.DescribeBatchPredictionsOutput, error) {
	var output machinelearning.DescribeBatchPredictionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeBatchPredictions", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DescribeBatchPredictionsAsync(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) *MachinelearningDescribeBatchPredictionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeBatchPredictions", input)
	return &MachinelearningDescribeBatchPredictionsFuture{Future: future}
}

func (a *MachineLearningStub) DescribeDataSources(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) (*machinelearning.DescribeDataSourcesOutput, error) {
	var output machinelearning.DescribeDataSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeDataSources", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DescribeDataSourcesAsync(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) *MachinelearningDescribeDataSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeDataSources", input)
	return &MachinelearningDescribeDataSourcesFuture{Future: future}
}

func (a *MachineLearningStub) DescribeEvaluations(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) (*machinelearning.DescribeEvaluationsOutput, error) {
	var output machinelearning.DescribeEvaluationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeEvaluations", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DescribeEvaluationsAsync(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) *MachinelearningDescribeEvaluationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeEvaluations", input)
	return &MachinelearningDescribeEvaluationsFuture{Future: future}
}

func (a *MachineLearningStub) DescribeMLModels(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) (*machinelearning.DescribeMLModelsOutput, error) {
	var output machinelearning.DescribeMLModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeMLModels", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DescribeMLModelsAsync(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) *MachinelearningDescribeMLModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeMLModels", input)
	return &MachinelearningDescribeMLModelsFuture{Future: future}
}

func (a *MachineLearningStub) DescribeTags(ctx workflow.Context, input *machinelearning.DescribeTagsInput) (*machinelearning.DescribeTagsOutput, error) {
	var output machinelearning.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) DescribeTagsAsync(ctx workflow.Context, input *machinelearning.DescribeTagsInput) *MachinelearningDescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.DescribeTags", input)
	return &MachinelearningDescribeTagsFuture{Future: future}
}

func (a *MachineLearningStub) GetBatchPrediction(ctx workflow.Context, input *machinelearning.GetBatchPredictionInput) (*machinelearning.GetBatchPredictionOutput, error) {
	var output machinelearning.GetBatchPredictionOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetBatchPrediction", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) GetBatchPredictionAsync(ctx workflow.Context, input *machinelearning.GetBatchPredictionInput) *MachinelearningGetBatchPredictionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetBatchPrediction", input)
	return &MachinelearningGetBatchPredictionFuture{Future: future}
}

func (a *MachineLearningStub) GetDataSource(ctx workflow.Context, input *machinelearning.GetDataSourceInput) (*machinelearning.GetDataSourceOutput, error) {
	var output machinelearning.GetDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) GetDataSourceAsync(ctx workflow.Context, input *machinelearning.GetDataSourceInput) *MachinelearningGetDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetDataSource", input)
	return &MachinelearningGetDataSourceFuture{Future: future}
}

func (a *MachineLearningStub) GetEvaluation(ctx workflow.Context, input *machinelearning.GetEvaluationInput) (*machinelearning.GetEvaluationOutput, error) {
	var output machinelearning.GetEvaluationOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetEvaluation", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) GetEvaluationAsync(ctx workflow.Context, input *machinelearning.GetEvaluationInput) *MachinelearningGetEvaluationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetEvaluation", input)
	return &MachinelearningGetEvaluationFuture{Future: future}
}

func (a *MachineLearningStub) GetMLModel(ctx workflow.Context, input *machinelearning.GetMLModelInput) (*machinelearning.GetMLModelOutput, error) {
	var output machinelearning.GetMLModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetMLModel", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) GetMLModelAsync(ctx workflow.Context, input *machinelearning.GetMLModelInput) *MachinelearningGetMLModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.GetMLModel", input)
	return &MachinelearningGetMLModelFuture{Future: future}
}

func (a *MachineLearningStub) Predict(ctx workflow.Context, input *machinelearning.PredictInput) (*machinelearning.PredictOutput, error) {
	var output machinelearning.PredictOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.Predict", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) PredictAsync(ctx workflow.Context, input *machinelearning.PredictInput) *MachinelearningPredictFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.Predict", input)
	return &MachinelearningPredictFuture{Future: future}
}

func (a *MachineLearningStub) UpdateBatchPrediction(ctx workflow.Context, input *machinelearning.UpdateBatchPredictionInput) (*machinelearning.UpdateBatchPredictionOutput, error) {
	var output machinelearning.UpdateBatchPredictionOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateBatchPrediction", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) UpdateBatchPredictionAsync(ctx workflow.Context, input *machinelearning.UpdateBatchPredictionInput) *MachinelearningUpdateBatchPredictionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateBatchPrediction", input)
	return &MachinelearningUpdateBatchPredictionFuture{Future: future}
}

func (a *MachineLearningStub) UpdateDataSource(ctx workflow.Context, input *machinelearning.UpdateDataSourceInput) (*machinelearning.UpdateDataSourceOutput, error) {
	var output machinelearning.UpdateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) UpdateDataSourceAsync(ctx workflow.Context, input *machinelearning.UpdateDataSourceInput) *MachinelearningUpdateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateDataSource", input)
	return &MachinelearningUpdateDataSourceFuture{Future: future}
}

func (a *MachineLearningStub) UpdateEvaluation(ctx workflow.Context, input *machinelearning.UpdateEvaluationInput) (*machinelearning.UpdateEvaluationOutput, error) {
	var output machinelearning.UpdateEvaluationOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateEvaluation", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) UpdateEvaluationAsync(ctx workflow.Context, input *machinelearning.UpdateEvaluationInput) *MachinelearningUpdateEvaluationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateEvaluation", input)
	return &MachinelearningUpdateEvaluationFuture{Future: future}
}

func (a *MachineLearningStub) UpdateMLModel(ctx workflow.Context, input *machinelearning.UpdateMLModelInput) (*machinelearning.UpdateMLModelOutput, error) {
	var output machinelearning.UpdateMLModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateMLModel", input).Get(ctx, &output)
	return &output, err
}

func (a *MachineLearningStub) UpdateMLModelAsync(ctx workflow.Context, input *machinelearning.UpdateMLModelInput) *MachinelearningUpdateMLModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.UpdateMLModel", input)
	return &MachinelearningUpdateMLModelFuture{Future: future}
}

func (a *MachineLearningStub) WaitUntilBatchPredictionAvailable(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilBatchPredictionAvailable", input).Get(ctx, nil)
}

func (a *MachineLearningStub) WaitUntilBatchPredictionAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeBatchPredictionsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilBatchPredictionAvailable", input)
	return NewVoidFuture(future)
}

func (a *MachineLearningStub) WaitUntilDataSourceAvailable(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilDataSourceAvailable", input).Get(ctx, nil)
}

func (a *MachineLearningStub) WaitUntilDataSourceAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeDataSourcesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilDataSourceAvailable", input)
	return NewVoidFuture(future)
}

func (a *MachineLearningStub) WaitUntilEvaluationAvailable(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilEvaluationAvailable", input).Get(ctx, nil)
}

func (a *MachineLearningStub) WaitUntilEvaluationAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeEvaluationsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilEvaluationAvailable", input)
	return NewVoidFuture(future)
}

func (a *MachineLearningStub) WaitUntilMLModelAvailable(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilMLModelAvailable", input).Get(ctx, nil)
}

func (a *MachineLearningStub) WaitUntilMLModelAvailableAsync(ctx workflow.Context, input *machinelearning.DescribeMLModelsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.machinelearning.WaitUntilMLModelAvailable", input)
	return NewVoidFuture(future)
}
