// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/codepipeline"
	"go.temporal.io/sdk/workflow"
)

type CodePipelineClient interface {
	AcknowledgeJob(ctx workflow.Context, input *codepipeline.AcknowledgeJobInput) (*codepipeline.AcknowledgeJobOutput, error)
	AcknowledgeJobAsync(ctx workflow.Context, input *codepipeline.AcknowledgeJobInput) *CodepipelineAcknowledgeJobFuture

	AcknowledgeThirdPartyJob(ctx workflow.Context, input *codepipeline.AcknowledgeThirdPartyJobInput) (*codepipeline.AcknowledgeThirdPartyJobOutput, error)
	AcknowledgeThirdPartyJobAsync(ctx workflow.Context, input *codepipeline.AcknowledgeThirdPartyJobInput) *CodepipelineAcknowledgeThirdPartyJobFuture

	CreateCustomActionType(ctx workflow.Context, input *codepipeline.CreateCustomActionTypeInput) (*codepipeline.CreateCustomActionTypeOutput, error)
	CreateCustomActionTypeAsync(ctx workflow.Context, input *codepipeline.CreateCustomActionTypeInput) *CodepipelineCreateCustomActionTypeFuture

	CreatePipeline(ctx workflow.Context, input *codepipeline.CreatePipelineInput) (*codepipeline.CreatePipelineOutput, error)
	CreatePipelineAsync(ctx workflow.Context, input *codepipeline.CreatePipelineInput) *CodepipelineCreatePipelineFuture

	DeleteCustomActionType(ctx workflow.Context, input *codepipeline.DeleteCustomActionTypeInput) (*codepipeline.DeleteCustomActionTypeOutput, error)
	DeleteCustomActionTypeAsync(ctx workflow.Context, input *codepipeline.DeleteCustomActionTypeInput) *CodepipelineDeleteCustomActionTypeFuture

	DeletePipeline(ctx workflow.Context, input *codepipeline.DeletePipelineInput) (*codepipeline.DeletePipelineOutput, error)
	DeletePipelineAsync(ctx workflow.Context, input *codepipeline.DeletePipelineInput) *CodepipelineDeletePipelineFuture

	DeleteWebhook(ctx workflow.Context, input *codepipeline.DeleteWebhookInput) (*codepipeline.DeleteWebhookOutput, error)
	DeleteWebhookAsync(ctx workflow.Context, input *codepipeline.DeleteWebhookInput) *CodepipelineDeleteWebhookFuture

	DeregisterWebhookWithThirdParty(ctx workflow.Context, input *codepipeline.DeregisterWebhookWithThirdPartyInput) (*codepipeline.DeregisterWebhookWithThirdPartyOutput, error)
	DeregisterWebhookWithThirdPartyAsync(ctx workflow.Context, input *codepipeline.DeregisterWebhookWithThirdPartyInput) *CodepipelineDeregisterWebhookWithThirdPartyFuture

	DisableStageTransition(ctx workflow.Context, input *codepipeline.DisableStageTransitionInput) (*codepipeline.DisableStageTransitionOutput, error)
	DisableStageTransitionAsync(ctx workflow.Context, input *codepipeline.DisableStageTransitionInput) *CodepipelineDisableStageTransitionFuture

	EnableStageTransition(ctx workflow.Context, input *codepipeline.EnableStageTransitionInput) (*codepipeline.EnableStageTransitionOutput, error)
	EnableStageTransitionAsync(ctx workflow.Context, input *codepipeline.EnableStageTransitionInput) *CodepipelineEnableStageTransitionFuture

	GetJobDetails(ctx workflow.Context, input *codepipeline.GetJobDetailsInput) (*codepipeline.GetJobDetailsOutput, error)
	GetJobDetailsAsync(ctx workflow.Context, input *codepipeline.GetJobDetailsInput) *CodepipelineGetJobDetailsFuture

	GetPipeline(ctx workflow.Context, input *codepipeline.GetPipelineInput) (*codepipeline.GetPipelineOutput, error)
	GetPipelineAsync(ctx workflow.Context, input *codepipeline.GetPipelineInput) *CodepipelineGetPipelineFuture

	GetPipelineExecution(ctx workflow.Context, input *codepipeline.GetPipelineExecutionInput) (*codepipeline.GetPipelineExecutionOutput, error)
	GetPipelineExecutionAsync(ctx workflow.Context, input *codepipeline.GetPipelineExecutionInput) *CodepipelineGetPipelineExecutionFuture

	GetPipelineState(ctx workflow.Context, input *codepipeline.GetPipelineStateInput) (*codepipeline.GetPipelineStateOutput, error)
	GetPipelineStateAsync(ctx workflow.Context, input *codepipeline.GetPipelineStateInput) *CodepipelineGetPipelineStateFuture

	GetThirdPartyJobDetails(ctx workflow.Context, input *codepipeline.GetThirdPartyJobDetailsInput) (*codepipeline.GetThirdPartyJobDetailsOutput, error)
	GetThirdPartyJobDetailsAsync(ctx workflow.Context, input *codepipeline.GetThirdPartyJobDetailsInput) *CodepipelineGetThirdPartyJobDetailsFuture

	ListActionExecutions(ctx workflow.Context, input *codepipeline.ListActionExecutionsInput) (*codepipeline.ListActionExecutionsOutput, error)
	ListActionExecutionsAsync(ctx workflow.Context, input *codepipeline.ListActionExecutionsInput) *CodepipelineListActionExecutionsFuture

	ListActionTypes(ctx workflow.Context, input *codepipeline.ListActionTypesInput) (*codepipeline.ListActionTypesOutput, error)
	ListActionTypesAsync(ctx workflow.Context, input *codepipeline.ListActionTypesInput) *CodepipelineListActionTypesFuture

	ListPipelineExecutions(ctx workflow.Context, input *codepipeline.ListPipelineExecutionsInput) (*codepipeline.ListPipelineExecutionsOutput, error)
	ListPipelineExecutionsAsync(ctx workflow.Context, input *codepipeline.ListPipelineExecutionsInput) *CodepipelineListPipelineExecutionsFuture

	ListPipelines(ctx workflow.Context, input *codepipeline.ListPipelinesInput) (*codepipeline.ListPipelinesOutput, error)
	ListPipelinesAsync(ctx workflow.Context, input *codepipeline.ListPipelinesInput) *CodepipelineListPipelinesFuture

	ListTagsForResource(ctx workflow.Context, input *codepipeline.ListTagsForResourceInput) (*codepipeline.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *codepipeline.ListTagsForResourceInput) *CodepipelineListTagsForResourceFuture

	ListWebhooks(ctx workflow.Context, input *codepipeline.ListWebhooksInput) (*codepipeline.ListWebhooksOutput, error)
	ListWebhooksAsync(ctx workflow.Context, input *codepipeline.ListWebhooksInput) *CodepipelineListWebhooksFuture

	PollForJobs(ctx workflow.Context, input *codepipeline.PollForJobsInput) (*codepipeline.PollForJobsOutput, error)
	PollForJobsAsync(ctx workflow.Context, input *codepipeline.PollForJobsInput) *CodepipelinePollForJobsFuture

	PollForThirdPartyJobs(ctx workflow.Context, input *codepipeline.PollForThirdPartyJobsInput) (*codepipeline.PollForThirdPartyJobsOutput, error)
	PollForThirdPartyJobsAsync(ctx workflow.Context, input *codepipeline.PollForThirdPartyJobsInput) *CodepipelinePollForThirdPartyJobsFuture

	PutActionRevision(ctx workflow.Context, input *codepipeline.PutActionRevisionInput) (*codepipeline.PutActionRevisionOutput, error)
	PutActionRevisionAsync(ctx workflow.Context, input *codepipeline.PutActionRevisionInput) *CodepipelinePutActionRevisionFuture

	PutApprovalResult(ctx workflow.Context, input *codepipeline.PutApprovalResultInput) (*codepipeline.PutApprovalResultOutput, error)
	PutApprovalResultAsync(ctx workflow.Context, input *codepipeline.PutApprovalResultInput) *CodepipelinePutApprovalResultFuture

	PutJobFailureResult(ctx workflow.Context, input *codepipeline.PutJobFailureResultInput) (*codepipeline.PutJobFailureResultOutput, error)
	PutJobFailureResultAsync(ctx workflow.Context, input *codepipeline.PutJobFailureResultInput) *CodepipelinePutJobFailureResultFuture

	PutJobSuccessResult(ctx workflow.Context, input *codepipeline.PutJobSuccessResultInput) (*codepipeline.PutJobSuccessResultOutput, error)
	PutJobSuccessResultAsync(ctx workflow.Context, input *codepipeline.PutJobSuccessResultInput) *CodepipelinePutJobSuccessResultFuture

	PutThirdPartyJobFailureResult(ctx workflow.Context, input *codepipeline.PutThirdPartyJobFailureResultInput) (*codepipeline.PutThirdPartyJobFailureResultOutput, error)
	PutThirdPartyJobFailureResultAsync(ctx workflow.Context, input *codepipeline.PutThirdPartyJobFailureResultInput) *CodepipelinePutThirdPartyJobFailureResultFuture

	PutThirdPartyJobSuccessResult(ctx workflow.Context, input *codepipeline.PutThirdPartyJobSuccessResultInput) (*codepipeline.PutThirdPartyJobSuccessResultOutput, error)
	PutThirdPartyJobSuccessResultAsync(ctx workflow.Context, input *codepipeline.PutThirdPartyJobSuccessResultInput) *CodepipelinePutThirdPartyJobSuccessResultFuture

	PutWebhook(ctx workflow.Context, input *codepipeline.PutWebhookInput) (*codepipeline.PutWebhookOutput, error)
	PutWebhookAsync(ctx workflow.Context, input *codepipeline.PutWebhookInput) *CodepipelinePutWebhookFuture

	RegisterWebhookWithThirdParty(ctx workflow.Context, input *codepipeline.RegisterWebhookWithThirdPartyInput) (*codepipeline.RegisterWebhookWithThirdPartyOutput, error)
	RegisterWebhookWithThirdPartyAsync(ctx workflow.Context, input *codepipeline.RegisterWebhookWithThirdPartyInput) *CodepipelineRegisterWebhookWithThirdPartyFuture

	RetryStageExecution(ctx workflow.Context, input *codepipeline.RetryStageExecutionInput) (*codepipeline.RetryStageExecutionOutput, error)
	RetryStageExecutionAsync(ctx workflow.Context, input *codepipeline.RetryStageExecutionInput) *CodepipelineRetryStageExecutionFuture

	StartPipelineExecution(ctx workflow.Context, input *codepipeline.StartPipelineExecutionInput) (*codepipeline.StartPipelineExecutionOutput, error)
	StartPipelineExecutionAsync(ctx workflow.Context, input *codepipeline.StartPipelineExecutionInput) *CodepipelineStartPipelineExecutionFuture

	StopPipelineExecution(ctx workflow.Context, input *codepipeline.StopPipelineExecutionInput) (*codepipeline.StopPipelineExecutionOutput, error)
	StopPipelineExecutionAsync(ctx workflow.Context, input *codepipeline.StopPipelineExecutionInput) *CodepipelineStopPipelineExecutionFuture

	TagResource(ctx workflow.Context, input *codepipeline.TagResourceInput) (*codepipeline.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *codepipeline.TagResourceInput) *CodepipelineTagResourceFuture

	UntagResource(ctx workflow.Context, input *codepipeline.UntagResourceInput) (*codepipeline.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *codepipeline.UntagResourceInput) *CodepipelineUntagResourceFuture

	UpdatePipeline(ctx workflow.Context, input *codepipeline.UpdatePipelineInput) (*codepipeline.UpdatePipelineOutput, error)
	UpdatePipelineAsync(ctx workflow.Context, input *codepipeline.UpdatePipelineInput) *CodepipelineUpdatePipelineFuture
}

type CodePipelineStub struct{}

func NewCodePipelineStub() CodePipelineClient {
	return &CodePipelineStub{}
}

type CodepipelineAcknowledgeJobFuture struct {
	Future workflow.Future
}

func (r *CodepipelineAcknowledgeJobFuture) Get(ctx workflow.Context) (*codepipeline.AcknowledgeJobOutput, error) {
	var output codepipeline.AcknowledgeJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineAcknowledgeThirdPartyJobFuture struct {
	Future workflow.Future
}

func (r *CodepipelineAcknowledgeThirdPartyJobFuture) Get(ctx workflow.Context) (*codepipeline.AcknowledgeThirdPartyJobOutput, error) {
	var output codepipeline.AcknowledgeThirdPartyJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineCreateCustomActionTypeFuture struct {
	Future workflow.Future
}

func (r *CodepipelineCreateCustomActionTypeFuture) Get(ctx workflow.Context) (*codepipeline.CreateCustomActionTypeOutput, error) {
	var output codepipeline.CreateCustomActionTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineCreatePipelineFuture struct {
	Future workflow.Future
}

func (r *CodepipelineCreatePipelineFuture) Get(ctx workflow.Context) (*codepipeline.CreatePipelineOutput, error) {
	var output codepipeline.CreatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineDeleteCustomActionTypeFuture struct {
	Future workflow.Future
}

func (r *CodepipelineDeleteCustomActionTypeFuture) Get(ctx workflow.Context) (*codepipeline.DeleteCustomActionTypeOutput, error) {
	var output codepipeline.DeleteCustomActionTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineDeletePipelineFuture struct {
	Future workflow.Future
}

func (r *CodepipelineDeletePipelineFuture) Get(ctx workflow.Context) (*codepipeline.DeletePipelineOutput, error) {
	var output codepipeline.DeletePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineDeleteWebhookFuture struct {
	Future workflow.Future
}

func (r *CodepipelineDeleteWebhookFuture) Get(ctx workflow.Context) (*codepipeline.DeleteWebhookOutput, error) {
	var output codepipeline.DeleteWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineDeregisterWebhookWithThirdPartyFuture struct {
	Future workflow.Future
}

func (r *CodepipelineDeregisterWebhookWithThirdPartyFuture) Get(ctx workflow.Context) (*codepipeline.DeregisterWebhookWithThirdPartyOutput, error) {
	var output codepipeline.DeregisterWebhookWithThirdPartyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineDisableStageTransitionFuture struct {
	Future workflow.Future
}

func (r *CodepipelineDisableStageTransitionFuture) Get(ctx workflow.Context) (*codepipeline.DisableStageTransitionOutput, error) {
	var output codepipeline.DisableStageTransitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineEnableStageTransitionFuture struct {
	Future workflow.Future
}

func (r *CodepipelineEnableStageTransitionFuture) Get(ctx workflow.Context) (*codepipeline.EnableStageTransitionOutput, error) {
	var output codepipeline.EnableStageTransitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineGetJobDetailsFuture struct {
	Future workflow.Future
}

func (r *CodepipelineGetJobDetailsFuture) Get(ctx workflow.Context) (*codepipeline.GetJobDetailsOutput, error) {
	var output codepipeline.GetJobDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineGetPipelineFuture struct {
	Future workflow.Future
}

func (r *CodepipelineGetPipelineFuture) Get(ctx workflow.Context) (*codepipeline.GetPipelineOutput, error) {
	var output codepipeline.GetPipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineGetPipelineExecutionFuture struct {
	Future workflow.Future
}

func (r *CodepipelineGetPipelineExecutionFuture) Get(ctx workflow.Context) (*codepipeline.GetPipelineExecutionOutput, error) {
	var output codepipeline.GetPipelineExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineGetPipelineStateFuture struct {
	Future workflow.Future
}

func (r *CodepipelineGetPipelineStateFuture) Get(ctx workflow.Context) (*codepipeline.GetPipelineStateOutput, error) {
	var output codepipeline.GetPipelineStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineGetThirdPartyJobDetailsFuture struct {
	Future workflow.Future
}

func (r *CodepipelineGetThirdPartyJobDetailsFuture) Get(ctx workflow.Context) (*codepipeline.GetThirdPartyJobDetailsOutput, error) {
	var output codepipeline.GetThirdPartyJobDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineListActionExecutionsFuture struct {
	Future workflow.Future
}

func (r *CodepipelineListActionExecutionsFuture) Get(ctx workflow.Context) (*codepipeline.ListActionExecutionsOutput, error) {
	var output codepipeline.ListActionExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineListActionTypesFuture struct {
	Future workflow.Future
}

func (r *CodepipelineListActionTypesFuture) Get(ctx workflow.Context) (*codepipeline.ListActionTypesOutput, error) {
	var output codepipeline.ListActionTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineListPipelineExecutionsFuture struct {
	Future workflow.Future
}

func (r *CodepipelineListPipelineExecutionsFuture) Get(ctx workflow.Context) (*codepipeline.ListPipelineExecutionsOutput, error) {
	var output codepipeline.ListPipelineExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineListPipelinesFuture struct {
	Future workflow.Future
}

func (r *CodepipelineListPipelinesFuture) Get(ctx workflow.Context) (*codepipeline.ListPipelinesOutput, error) {
	var output codepipeline.ListPipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *CodepipelineListTagsForResourceFuture) Get(ctx workflow.Context) (*codepipeline.ListTagsForResourceOutput, error) {
	var output codepipeline.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineListWebhooksFuture struct {
	Future workflow.Future
}

func (r *CodepipelineListWebhooksFuture) Get(ctx workflow.Context) (*codepipeline.ListWebhooksOutput, error) {
	var output codepipeline.ListWebhooksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelinePollForJobsFuture struct {
	Future workflow.Future
}

func (r *CodepipelinePollForJobsFuture) Get(ctx workflow.Context) (*codepipeline.PollForJobsOutput, error) {
	var output codepipeline.PollForJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelinePollForThirdPartyJobsFuture struct {
	Future workflow.Future
}

func (r *CodepipelinePollForThirdPartyJobsFuture) Get(ctx workflow.Context) (*codepipeline.PollForThirdPartyJobsOutput, error) {
	var output codepipeline.PollForThirdPartyJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelinePutActionRevisionFuture struct {
	Future workflow.Future
}

func (r *CodepipelinePutActionRevisionFuture) Get(ctx workflow.Context) (*codepipeline.PutActionRevisionOutput, error) {
	var output codepipeline.PutActionRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelinePutApprovalResultFuture struct {
	Future workflow.Future
}

func (r *CodepipelinePutApprovalResultFuture) Get(ctx workflow.Context) (*codepipeline.PutApprovalResultOutput, error) {
	var output codepipeline.PutApprovalResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelinePutJobFailureResultFuture struct {
	Future workflow.Future
}

func (r *CodepipelinePutJobFailureResultFuture) Get(ctx workflow.Context) (*codepipeline.PutJobFailureResultOutput, error) {
	var output codepipeline.PutJobFailureResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelinePutJobSuccessResultFuture struct {
	Future workflow.Future
}

func (r *CodepipelinePutJobSuccessResultFuture) Get(ctx workflow.Context) (*codepipeline.PutJobSuccessResultOutput, error) {
	var output codepipeline.PutJobSuccessResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelinePutThirdPartyJobFailureResultFuture struct {
	Future workflow.Future
}

func (r *CodepipelinePutThirdPartyJobFailureResultFuture) Get(ctx workflow.Context) (*codepipeline.PutThirdPartyJobFailureResultOutput, error) {
	var output codepipeline.PutThirdPartyJobFailureResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelinePutThirdPartyJobSuccessResultFuture struct {
	Future workflow.Future
}

func (r *CodepipelinePutThirdPartyJobSuccessResultFuture) Get(ctx workflow.Context) (*codepipeline.PutThirdPartyJobSuccessResultOutput, error) {
	var output codepipeline.PutThirdPartyJobSuccessResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelinePutWebhookFuture struct {
	Future workflow.Future
}

func (r *CodepipelinePutWebhookFuture) Get(ctx workflow.Context) (*codepipeline.PutWebhookOutput, error) {
	var output codepipeline.PutWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineRegisterWebhookWithThirdPartyFuture struct {
	Future workflow.Future
}

func (r *CodepipelineRegisterWebhookWithThirdPartyFuture) Get(ctx workflow.Context) (*codepipeline.RegisterWebhookWithThirdPartyOutput, error) {
	var output codepipeline.RegisterWebhookWithThirdPartyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineRetryStageExecutionFuture struct {
	Future workflow.Future
}

func (r *CodepipelineRetryStageExecutionFuture) Get(ctx workflow.Context) (*codepipeline.RetryStageExecutionOutput, error) {
	var output codepipeline.RetryStageExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineStartPipelineExecutionFuture struct {
	Future workflow.Future
}

func (r *CodepipelineStartPipelineExecutionFuture) Get(ctx workflow.Context) (*codepipeline.StartPipelineExecutionOutput, error) {
	var output codepipeline.StartPipelineExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineStopPipelineExecutionFuture struct {
	Future workflow.Future
}

func (r *CodepipelineStopPipelineExecutionFuture) Get(ctx workflow.Context) (*codepipeline.StopPipelineExecutionOutput, error) {
	var output codepipeline.StopPipelineExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineTagResourceFuture struct {
	Future workflow.Future
}

func (r *CodepipelineTagResourceFuture) Get(ctx workflow.Context) (*codepipeline.TagResourceOutput, error) {
	var output codepipeline.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineUntagResourceFuture struct {
	Future workflow.Future
}

func (r *CodepipelineUntagResourceFuture) Get(ctx workflow.Context) (*codepipeline.UntagResourceOutput, error) {
	var output codepipeline.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodepipelineUpdatePipelineFuture struct {
	Future workflow.Future
}

func (r *CodepipelineUpdatePipelineFuture) Get(ctx workflow.Context) (*codepipeline.UpdatePipelineOutput, error) {
	var output codepipeline.UpdatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) AcknowledgeJob(ctx workflow.Context, input *codepipeline.AcknowledgeJobInput) (*codepipeline.AcknowledgeJobOutput, error) {
	var output codepipeline.AcknowledgeJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.AcknowledgeJob", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) AcknowledgeJobAsync(ctx workflow.Context, input *codepipeline.AcknowledgeJobInput) *CodepipelineAcknowledgeJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.AcknowledgeJob", input)
	return &CodepipelineAcknowledgeJobFuture{Future: future}
}

func (a *CodePipelineStub) AcknowledgeThirdPartyJob(ctx workflow.Context, input *codepipeline.AcknowledgeThirdPartyJobInput) (*codepipeline.AcknowledgeThirdPartyJobOutput, error) {
	var output codepipeline.AcknowledgeThirdPartyJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.AcknowledgeThirdPartyJob", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) AcknowledgeThirdPartyJobAsync(ctx workflow.Context, input *codepipeline.AcknowledgeThirdPartyJobInput) *CodepipelineAcknowledgeThirdPartyJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.AcknowledgeThirdPartyJob", input)
	return &CodepipelineAcknowledgeThirdPartyJobFuture{Future: future}
}

func (a *CodePipelineStub) CreateCustomActionType(ctx workflow.Context, input *codepipeline.CreateCustomActionTypeInput) (*codepipeline.CreateCustomActionTypeOutput, error) {
	var output codepipeline.CreateCustomActionTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.CreateCustomActionType", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) CreateCustomActionTypeAsync(ctx workflow.Context, input *codepipeline.CreateCustomActionTypeInput) *CodepipelineCreateCustomActionTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.CreateCustomActionType", input)
	return &CodepipelineCreateCustomActionTypeFuture{Future: future}
}

func (a *CodePipelineStub) CreatePipeline(ctx workflow.Context, input *codepipeline.CreatePipelineInput) (*codepipeline.CreatePipelineOutput, error) {
	var output codepipeline.CreatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.CreatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) CreatePipelineAsync(ctx workflow.Context, input *codepipeline.CreatePipelineInput) *CodepipelineCreatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.CreatePipeline", input)
	return &CodepipelineCreatePipelineFuture{Future: future}
}

func (a *CodePipelineStub) DeleteCustomActionType(ctx workflow.Context, input *codepipeline.DeleteCustomActionTypeInput) (*codepipeline.DeleteCustomActionTypeOutput, error) {
	var output codepipeline.DeleteCustomActionTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.DeleteCustomActionType", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) DeleteCustomActionTypeAsync(ctx workflow.Context, input *codepipeline.DeleteCustomActionTypeInput) *CodepipelineDeleteCustomActionTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.DeleteCustomActionType", input)
	return &CodepipelineDeleteCustomActionTypeFuture{Future: future}
}

func (a *CodePipelineStub) DeletePipeline(ctx workflow.Context, input *codepipeline.DeletePipelineInput) (*codepipeline.DeletePipelineOutput, error) {
	var output codepipeline.DeletePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.DeletePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) DeletePipelineAsync(ctx workflow.Context, input *codepipeline.DeletePipelineInput) *CodepipelineDeletePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.DeletePipeline", input)
	return &CodepipelineDeletePipelineFuture{Future: future}
}

func (a *CodePipelineStub) DeleteWebhook(ctx workflow.Context, input *codepipeline.DeleteWebhookInput) (*codepipeline.DeleteWebhookOutput, error) {
	var output codepipeline.DeleteWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.DeleteWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) DeleteWebhookAsync(ctx workflow.Context, input *codepipeline.DeleteWebhookInput) *CodepipelineDeleteWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.DeleteWebhook", input)
	return &CodepipelineDeleteWebhookFuture{Future: future}
}

func (a *CodePipelineStub) DeregisterWebhookWithThirdParty(ctx workflow.Context, input *codepipeline.DeregisterWebhookWithThirdPartyInput) (*codepipeline.DeregisterWebhookWithThirdPartyOutput, error) {
	var output codepipeline.DeregisterWebhookWithThirdPartyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.DeregisterWebhookWithThirdParty", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) DeregisterWebhookWithThirdPartyAsync(ctx workflow.Context, input *codepipeline.DeregisterWebhookWithThirdPartyInput) *CodepipelineDeregisterWebhookWithThirdPartyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.DeregisterWebhookWithThirdParty", input)
	return &CodepipelineDeregisterWebhookWithThirdPartyFuture{Future: future}
}

func (a *CodePipelineStub) DisableStageTransition(ctx workflow.Context, input *codepipeline.DisableStageTransitionInput) (*codepipeline.DisableStageTransitionOutput, error) {
	var output codepipeline.DisableStageTransitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.DisableStageTransition", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) DisableStageTransitionAsync(ctx workflow.Context, input *codepipeline.DisableStageTransitionInput) *CodepipelineDisableStageTransitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.DisableStageTransition", input)
	return &CodepipelineDisableStageTransitionFuture{Future: future}
}

func (a *CodePipelineStub) EnableStageTransition(ctx workflow.Context, input *codepipeline.EnableStageTransitionInput) (*codepipeline.EnableStageTransitionOutput, error) {
	var output codepipeline.EnableStageTransitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.EnableStageTransition", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) EnableStageTransitionAsync(ctx workflow.Context, input *codepipeline.EnableStageTransitionInput) *CodepipelineEnableStageTransitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.EnableStageTransition", input)
	return &CodepipelineEnableStageTransitionFuture{Future: future}
}

func (a *CodePipelineStub) GetJobDetails(ctx workflow.Context, input *codepipeline.GetJobDetailsInput) (*codepipeline.GetJobDetailsOutput, error) {
	var output codepipeline.GetJobDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.GetJobDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) GetJobDetailsAsync(ctx workflow.Context, input *codepipeline.GetJobDetailsInput) *CodepipelineGetJobDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.GetJobDetails", input)
	return &CodepipelineGetJobDetailsFuture{Future: future}
}

func (a *CodePipelineStub) GetPipeline(ctx workflow.Context, input *codepipeline.GetPipelineInput) (*codepipeline.GetPipelineOutput, error) {
	var output codepipeline.GetPipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.GetPipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) GetPipelineAsync(ctx workflow.Context, input *codepipeline.GetPipelineInput) *CodepipelineGetPipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.GetPipeline", input)
	return &CodepipelineGetPipelineFuture{Future: future}
}

func (a *CodePipelineStub) GetPipelineExecution(ctx workflow.Context, input *codepipeline.GetPipelineExecutionInput) (*codepipeline.GetPipelineExecutionOutput, error) {
	var output codepipeline.GetPipelineExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.GetPipelineExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) GetPipelineExecutionAsync(ctx workflow.Context, input *codepipeline.GetPipelineExecutionInput) *CodepipelineGetPipelineExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.GetPipelineExecution", input)
	return &CodepipelineGetPipelineExecutionFuture{Future: future}
}

func (a *CodePipelineStub) GetPipelineState(ctx workflow.Context, input *codepipeline.GetPipelineStateInput) (*codepipeline.GetPipelineStateOutput, error) {
	var output codepipeline.GetPipelineStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.GetPipelineState", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) GetPipelineStateAsync(ctx workflow.Context, input *codepipeline.GetPipelineStateInput) *CodepipelineGetPipelineStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.GetPipelineState", input)
	return &CodepipelineGetPipelineStateFuture{Future: future}
}

func (a *CodePipelineStub) GetThirdPartyJobDetails(ctx workflow.Context, input *codepipeline.GetThirdPartyJobDetailsInput) (*codepipeline.GetThirdPartyJobDetailsOutput, error) {
	var output codepipeline.GetThirdPartyJobDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.GetThirdPartyJobDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) GetThirdPartyJobDetailsAsync(ctx workflow.Context, input *codepipeline.GetThirdPartyJobDetailsInput) *CodepipelineGetThirdPartyJobDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.GetThirdPartyJobDetails", input)
	return &CodepipelineGetThirdPartyJobDetailsFuture{Future: future}
}

func (a *CodePipelineStub) ListActionExecutions(ctx workflow.Context, input *codepipeline.ListActionExecutionsInput) (*codepipeline.ListActionExecutionsOutput, error) {
	var output codepipeline.ListActionExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.ListActionExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) ListActionExecutionsAsync(ctx workflow.Context, input *codepipeline.ListActionExecutionsInput) *CodepipelineListActionExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.ListActionExecutions", input)
	return &CodepipelineListActionExecutionsFuture{Future: future}
}

func (a *CodePipelineStub) ListActionTypes(ctx workflow.Context, input *codepipeline.ListActionTypesInput) (*codepipeline.ListActionTypesOutput, error) {
	var output codepipeline.ListActionTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.ListActionTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) ListActionTypesAsync(ctx workflow.Context, input *codepipeline.ListActionTypesInput) *CodepipelineListActionTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.ListActionTypes", input)
	return &CodepipelineListActionTypesFuture{Future: future}
}

func (a *CodePipelineStub) ListPipelineExecutions(ctx workflow.Context, input *codepipeline.ListPipelineExecutionsInput) (*codepipeline.ListPipelineExecutionsOutput, error) {
	var output codepipeline.ListPipelineExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.ListPipelineExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) ListPipelineExecutionsAsync(ctx workflow.Context, input *codepipeline.ListPipelineExecutionsInput) *CodepipelineListPipelineExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.ListPipelineExecutions", input)
	return &CodepipelineListPipelineExecutionsFuture{Future: future}
}

func (a *CodePipelineStub) ListPipelines(ctx workflow.Context, input *codepipeline.ListPipelinesInput) (*codepipeline.ListPipelinesOutput, error) {
	var output codepipeline.ListPipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.ListPipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) ListPipelinesAsync(ctx workflow.Context, input *codepipeline.ListPipelinesInput) *CodepipelineListPipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.ListPipelines", input)
	return &CodepipelineListPipelinesFuture{Future: future}
}

func (a *CodePipelineStub) ListTagsForResource(ctx workflow.Context, input *codepipeline.ListTagsForResourceInput) (*codepipeline.ListTagsForResourceOutput, error) {
	var output codepipeline.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) ListTagsForResourceAsync(ctx workflow.Context, input *codepipeline.ListTagsForResourceInput) *CodepipelineListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.ListTagsForResource", input)
	return &CodepipelineListTagsForResourceFuture{Future: future}
}

func (a *CodePipelineStub) ListWebhooks(ctx workflow.Context, input *codepipeline.ListWebhooksInput) (*codepipeline.ListWebhooksOutput, error) {
	var output codepipeline.ListWebhooksOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.ListWebhooks", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) ListWebhooksAsync(ctx workflow.Context, input *codepipeline.ListWebhooksInput) *CodepipelineListWebhooksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.ListWebhooks", input)
	return &CodepipelineListWebhooksFuture{Future: future}
}

func (a *CodePipelineStub) PollForJobs(ctx workflow.Context, input *codepipeline.PollForJobsInput) (*codepipeline.PollForJobsOutput, error) {
	var output codepipeline.PollForJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.PollForJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) PollForJobsAsync(ctx workflow.Context, input *codepipeline.PollForJobsInput) *CodepipelinePollForJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.PollForJobs", input)
	return &CodepipelinePollForJobsFuture{Future: future}
}

func (a *CodePipelineStub) PollForThirdPartyJobs(ctx workflow.Context, input *codepipeline.PollForThirdPartyJobsInput) (*codepipeline.PollForThirdPartyJobsOutput, error) {
	var output codepipeline.PollForThirdPartyJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.PollForThirdPartyJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) PollForThirdPartyJobsAsync(ctx workflow.Context, input *codepipeline.PollForThirdPartyJobsInput) *CodepipelinePollForThirdPartyJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.PollForThirdPartyJobs", input)
	return &CodepipelinePollForThirdPartyJobsFuture{Future: future}
}

func (a *CodePipelineStub) PutActionRevision(ctx workflow.Context, input *codepipeline.PutActionRevisionInput) (*codepipeline.PutActionRevisionOutput, error) {
	var output codepipeline.PutActionRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutActionRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) PutActionRevisionAsync(ctx workflow.Context, input *codepipeline.PutActionRevisionInput) *CodepipelinePutActionRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutActionRevision", input)
	return &CodepipelinePutActionRevisionFuture{Future: future}
}

func (a *CodePipelineStub) PutApprovalResult(ctx workflow.Context, input *codepipeline.PutApprovalResultInput) (*codepipeline.PutApprovalResultOutput, error) {
	var output codepipeline.PutApprovalResultOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutApprovalResult", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) PutApprovalResultAsync(ctx workflow.Context, input *codepipeline.PutApprovalResultInput) *CodepipelinePutApprovalResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutApprovalResult", input)
	return &CodepipelinePutApprovalResultFuture{Future: future}
}

func (a *CodePipelineStub) PutJobFailureResult(ctx workflow.Context, input *codepipeline.PutJobFailureResultInput) (*codepipeline.PutJobFailureResultOutput, error) {
	var output codepipeline.PutJobFailureResultOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutJobFailureResult", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) PutJobFailureResultAsync(ctx workflow.Context, input *codepipeline.PutJobFailureResultInput) *CodepipelinePutJobFailureResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutJobFailureResult", input)
	return &CodepipelinePutJobFailureResultFuture{Future: future}
}

func (a *CodePipelineStub) PutJobSuccessResult(ctx workflow.Context, input *codepipeline.PutJobSuccessResultInput) (*codepipeline.PutJobSuccessResultOutput, error) {
	var output codepipeline.PutJobSuccessResultOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutJobSuccessResult", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) PutJobSuccessResultAsync(ctx workflow.Context, input *codepipeline.PutJobSuccessResultInput) *CodepipelinePutJobSuccessResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutJobSuccessResult", input)
	return &CodepipelinePutJobSuccessResultFuture{Future: future}
}

func (a *CodePipelineStub) PutThirdPartyJobFailureResult(ctx workflow.Context, input *codepipeline.PutThirdPartyJobFailureResultInput) (*codepipeline.PutThirdPartyJobFailureResultOutput, error) {
	var output codepipeline.PutThirdPartyJobFailureResultOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutThirdPartyJobFailureResult", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) PutThirdPartyJobFailureResultAsync(ctx workflow.Context, input *codepipeline.PutThirdPartyJobFailureResultInput) *CodepipelinePutThirdPartyJobFailureResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutThirdPartyJobFailureResult", input)
	return &CodepipelinePutThirdPartyJobFailureResultFuture{Future: future}
}

func (a *CodePipelineStub) PutThirdPartyJobSuccessResult(ctx workflow.Context, input *codepipeline.PutThirdPartyJobSuccessResultInput) (*codepipeline.PutThirdPartyJobSuccessResultOutput, error) {
	var output codepipeline.PutThirdPartyJobSuccessResultOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutThirdPartyJobSuccessResult", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) PutThirdPartyJobSuccessResultAsync(ctx workflow.Context, input *codepipeline.PutThirdPartyJobSuccessResultInput) *CodepipelinePutThirdPartyJobSuccessResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutThirdPartyJobSuccessResult", input)
	return &CodepipelinePutThirdPartyJobSuccessResultFuture{Future: future}
}

func (a *CodePipelineStub) PutWebhook(ctx workflow.Context, input *codepipeline.PutWebhookInput) (*codepipeline.PutWebhookOutput, error) {
	var output codepipeline.PutWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) PutWebhookAsync(ctx workflow.Context, input *codepipeline.PutWebhookInput) *CodepipelinePutWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.PutWebhook", input)
	return &CodepipelinePutWebhookFuture{Future: future}
}

func (a *CodePipelineStub) RegisterWebhookWithThirdParty(ctx workflow.Context, input *codepipeline.RegisterWebhookWithThirdPartyInput) (*codepipeline.RegisterWebhookWithThirdPartyOutput, error) {
	var output codepipeline.RegisterWebhookWithThirdPartyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.RegisterWebhookWithThirdParty", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) RegisterWebhookWithThirdPartyAsync(ctx workflow.Context, input *codepipeline.RegisterWebhookWithThirdPartyInput) *CodepipelineRegisterWebhookWithThirdPartyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.RegisterWebhookWithThirdParty", input)
	return &CodepipelineRegisterWebhookWithThirdPartyFuture{Future: future}
}

func (a *CodePipelineStub) RetryStageExecution(ctx workflow.Context, input *codepipeline.RetryStageExecutionInput) (*codepipeline.RetryStageExecutionOutput, error) {
	var output codepipeline.RetryStageExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.RetryStageExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) RetryStageExecutionAsync(ctx workflow.Context, input *codepipeline.RetryStageExecutionInput) *CodepipelineRetryStageExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.RetryStageExecution", input)
	return &CodepipelineRetryStageExecutionFuture{Future: future}
}

func (a *CodePipelineStub) StartPipelineExecution(ctx workflow.Context, input *codepipeline.StartPipelineExecutionInput) (*codepipeline.StartPipelineExecutionOutput, error) {
	var output codepipeline.StartPipelineExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.StartPipelineExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) StartPipelineExecutionAsync(ctx workflow.Context, input *codepipeline.StartPipelineExecutionInput) *CodepipelineStartPipelineExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.StartPipelineExecution", input)
	return &CodepipelineStartPipelineExecutionFuture{Future: future}
}

func (a *CodePipelineStub) StopPipelineExecution(ctx workflow.Context, input *codepipeline.StopPipelineExecutionInput) (*codepipeline.StopPipelineExecutionOutput, error) {
	var output codepipeline.StopPipelineExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.StopPipelineExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) StopPipelineExecutionAsync(ctx workflow.Context, input *codepipeline.StopPipelineExecutionInput) *CodepipelineStopPipelineExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.StopPipelineExecution", input)
	return &CodepipelineStopPipelineExecutionFuture{Future: future}
}

func (a *CodePipelineStub) TagResource(ctx workflow.Context, input *codepipeline.TagResourceInput) (*codepipeline.TagResourceOutput, error) {
	var output codepipeline.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) TagResourceAsync(ctx workflow.Context, input *codepipeline.TagResourceInput) *CodepipelineTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.TagResource", input)
	return &CodepipelineTagResourceFuture{Future: future}
}

func (a *CodePipelineStub) UntagResource(ctx workflow.Context, input *codepipeline.UntagResourceInput) (*codepipeline.UntagResourceOutput, error) {
	var output codepipeline.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) UntagResourceAsync(ctx workflow.Context, input *codepipeline.UntagResourceInput) *CodepipelineUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.UntagResource", input)
	return &CodepipelineUntagResourceFuture{Future: future}
}

func (a *CodePipelineStub) UpdatePipeline(ctx workflow.Context, input *codepipeline.UpdatePipelineInput) (*codepipeline.UpdatePipelineOutput, error) {
	var output codepipeline.UpdatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.codepipeline.UpdatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *CodePipelineStub) UpdatePipelineAsync(ctx workflow.Context, input *codepipeline.UpdatePipelineInput) *CodepipelineUpdatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codepipeline.UpdatePipeline", input)
	return &CodepipelineUpdatePipelineFuture{Future: future}
}
