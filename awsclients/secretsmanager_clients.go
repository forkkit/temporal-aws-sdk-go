// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/secretsmanager"
	"go.temporal.io/sdk/workflow"
)

type SecretsManagerClient interface {
	CancelRotateSecret(ctx workflow.Context, input *secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error)
	CancelRotateSecretAsync(ctx workflow.Context, input *secretsmanager.CancelRotateSecretInput) *SecretsmanagerCancelRotateSecretFuture

	CreateSecret(ctx workflow.Context, input *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error)
	CreateSecretAsync(ctx workflow.Context, input *secretsmanager.CreateSecretInput) *SecretsmanagerCreateSecretFuture

	DeleteResourcePolicy(ctx workflow.Context, input *secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error)
	DeleteResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.DeleteResourcePolicyInput) *SecretsmanagerDeleteResourcePolicyFuture

	DeleteSecret(ctx workflow.Context, input *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error)
	DeleteSecretAsync(ctx workflow.Context, input *secretsmanager.DeleteSecretInput) *SecretsmanagerDeleteSecretFuture

	DescribeSecret(ctx workflow.Context, input *secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error)
	DescribeSecretAsync(ctx workflow.Context, input *secretsmanager.DescribeSecretInput) *SecretsmanagerDescribeSecretFuture

	GetRandomPassword(ctx workflow.Context, input *secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error)
	GetRandomPasswordAsync(ctx workflow.Context, input *secretsmanager.GetRandomPasswordInput) *SecretsmanagerGetRandomPasswordFuture

	GetResourcePolicy(ctx workflow.Context, input *secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error)
	GetResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.GetResourcePolicyInput) *SecretsmanagerGetResourcePolicyFuture

	GetSecretValue(ctx workflow.Context, input *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error)
	GetSecretValueAsync(ctx workflow.Context, input *secretsmanager.GetSecretValueInput) *SecretsmanagerGetSecretValueFuture

	ListSecretVersionIds(ctx workflow.Context, input *secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error)
	ListSecretVersionIdsAsync(ctx workflow.Context, input *secretsmanager.ListSecretVersionIdsInput) *SecretsmanagerListSecretVersionIdsFuture

	ListSecrets(ctx workflow.Context, input *secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error)
	ListSecretsAsync(ctx workflow.Context, input *secretsmanager.ListSecretsInput) *SecretsmanagerListSecretsFuture

	PutResourcePolicy(ctx workflow.Context, input *secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error)
	PutResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.PutResourcePolicyInput) *SecretsmanagerPutResourcePolicyFuture

	PutSecretValue(ctx workflow.Context, input *secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error)
	PutSecretValueAsync(ctx workflow.Context, input *secretsmanager.PutSecretValueInput) *SecretsmanagerPutSecretValueFuture

	RestoreSecret(ctx workflow.Context, input *secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error)
	RestoreSecretAsync(ctx workflow.Context, input *secretsmanager.RestoreSecretInput) *SecretsmanagerRestoreSecretFuture

	RotateSecret(ctx workflow.Context, input *secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error)
	RotateSecretAsync(ctx workflow.Context, input *secretsmanager.RotateSecretInput) *SecretsmanagerRotateSecretFuture

	TagResource(ctx workflow.Context, input *secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *secretsmanager.TagResourceInput) *SecretsmanagerTagResourceFuture

	UntagResource(ctx workflow.Context, input *secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *secretsmanager.UntagResourceInput) *SecretsmanagerUntagResourceFuture

	UpdateSecret(ctx workflow.Context, input *secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error)
	UpdateSecretAsync(ctx workflow.Context, input *secretsmanager.UpdateSecretInput) *SecretsmanagerUpdateSecretFuture

	UpdateSecretVersionStage(ctx workflow.Context, input *secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error)
	UpdateSecretVersionStageAsync(ctx workflow.Context, input *secretsmanager.UpdateSecretVersionStageInput) *SecretsmanagerUpdateSecretVersionStageFuture

	ValidateResourcePolicy(ctx workflow.Context, input *secretsmanager.ValidateResourcePolicyInput) (*secretsmanager.ValidateResourcePolicyOutput, error)
	ValidateResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.ValidateResourcePolicyInput) *SecretsmanagerValidateResourcePolicyFuture
}

type SecretsManagerStub struct{}

func NewSecretsManagerStub() SecretsManagerClient {
	return &SecretsManagerStub{}
}

type SecretsmanagerCancelRotateSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerCancelRotateSecretFuture) Get(ctx workflow.Context) (*secretsmanager.CancelRotateSecretOutput, error) {
	var output secretsmanager.CancelRotateSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerCreateSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerCreateSecretFuture) Get(ctx workflow.Context) (*secretsmanager.CreateSecretOutput, error) {
	var output secretsmanager.CreateSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerDeleteResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerDeleteResourcePolicyFuture) Get(ctx workflow.Context) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	var output secretsmanager.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerDeleteSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerDeleteSecretFuture) Get(ctx workflow.Context) (*secretsmanager.DeleteSecretOutput, error) {
	var output secretsmanager.DeleteSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerDescribeSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerDescribeSecretFuture) Get(ctx workflow.Context) (*secretsmanager.DescribeSecretOutput, error) {
	var output secretsmanager.DescribeSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerGetRandomPasswordFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerGetRandomPasswordFuture) Get(ctx workflow.Context) (*secretsmanager.GetRandomPasswordOutput, error) {
	var output secretsmanager.GetRandomPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerGetResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerGetResourcePolicyFuture) Get(ctx workflow.Context) (*secretsmanager.GetResourcePolicyOutput, error) {
	var output secretsmanager.GetResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerGetSecretValueFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerGetSecretValueFuture) Get(ctx workflow.Context) (*secretsmanager.GetSecretValueOutput, error) {
	var output secretsmanager.GetSecretValueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerListSecretVersionIdsFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerListSecretVersionIdsFuture) Get(ctx workflow.Context) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	var output secretsmanager.ListSecretVersionIdsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerListSecretsFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerListSecretsFuture) Get(ctx workflow.Context) (*secretsmanager.ListSecretsOutput, error) {
	var output secretsmanager.ListSecretsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerPutResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerPutResourcePolicyFuture) Get(ctx workflow.Context) (*secretsmanager.PutResourcePolicyOutput, error) {
	var output secretsmanager.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerPutSecretValueFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerPutSecretValueFuture) Get(ctx workflow.Context) (*secretsmanager.PutSecretValueOutput, error) {
	var output secretsmanager.PutSecretValueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerRestoreSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerRestoreSecretFuture) Get(ctx workflow.Context) (*secretsmanager.RestoreSecretOutput, error) {
	var output secretsmanager.RestoreSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerRotateSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerRotateSecretFuture) Get(ctx workflow.Context) (*secretsmanager.RotateSecretOutput, error) {
	var output secretsmanager.RotateSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerTagResourceFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerTagResourceFuture) Get(ctx workflow.Context) (*secretsmanager.TagResourceOutput, error) {
	var output secretsmanager.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerUntagResourceFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerUntagResourceFuture) Get(ctx workflow.Context) (*secretsmanager.UntagResourceOutput, error) {
	var output secretsmanager.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerUpdateSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerUpdateSecretFuture) Get(ctx workflow.Context) (*secretsmanager.UpdateSecretOutput, error) {
	var output secretsmanager.UpdateSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerUpdateSecretVersionStageFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerUpdateSecretVersionStageFuture) Get(ctx workflow.Context) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	var output secretsmanager.UpdateSecretVersionStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsmanagerValidateResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *SecretsmanagerValidateResourcePolicyFuture) Get(ctx workflow.Context) (*secretsmanager.ValidateResourcePolicyOutput, error) {
	var output secretsmanager.ValidateResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) CancelRotateSecret(ctx workflow.Context, input *secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error) {
	var output secretsmanager.CancelRotateSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.CancelRotateSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) CancelRotateSecretAsync(ctx workflow.Context, input *secretsmanager.CancelRotateSecretInput) *SecretsmanagerCancelRotateSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.CancelRotateSecret", input)
	return &SecretsmanagerCancelRotateSecretFuture{Future: future}
}

func (a *SecretsManagerStub) CreateSecret(ctx workflow.Context, input *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error) {
	var output secretsmanager.CreateSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.CreateSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) CreateSecretAsync(ctx workflow.Context, input *secretsmanager.CreateSecretInput) *SecretsmanagerCreateSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.CreateSecret", input)
	return &SecretsmanagerCreateSecretFuture{Future: future}
}

func (a *SecretsManagerStub) DeleteResourcePolicy(ctx workflow.Context, input *secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	var output secretsmanager.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) DeleteResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.DeleteResourcePolicyInput) *SecretsmanagerDeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.DeleteResourcePolicy", input)
	return &SecretsmanagerDeleteResourcePolicyFuture{Future: future}
}

func (a *SecretsManagerStub) DeleteSecret(ctx workflow.Context, input *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error) {
	var output secretsmanager.DeleteSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.DeleteSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) DeleteSecretAsync(ctx workflow.Context, input *secretsmanager.DeleteSecretInput) *SecretsmanagerDeleteSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.DeleteSecret", input)
	return &SecretsmanagerDeleteSecretFuture{Future: future}
}

func (a *SecretsManagerStub) DescribeSecret(ctx workflow.Context, input *secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error) {
	var output secretsmanager.DescribeSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.DescribeSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) DescribeSecretAsync(ctx workflow.Context, input *secretsmanager.DescribeSecretInput) *SecretsmanagerDescribeSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.DescribeSecret", input)
	return &SecretsmanagerDescribeSecretFuture{Future: future}
}

func (a *SecretsManagerStub) GetRandomPassword(ctx workflow.Context, input *secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error) {
	var output secretsmanager.GetRandomPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.GetRandomPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) GetRandomPasswordAsync(ctx workflow.Context, input *secretsmanager.GetRandomPasswordInput) *SecretsmanagerGetRandomPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.GetRandomPassword", input)
	return &SecretsmanagerGetRandomPasswordFuture{Future: future}
}

func (a *SecretsManagerStub) GetResourcePolicy(ctx workflow.Context, input *secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error) {
	var output secretsmanager.GetResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.GetResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) GetResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.GetResourcePolicyInput) *SecretsmanagerGetResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.GetResourcePolicy", input)
	return &SecretsmanagerGetResourcePolicyFuture{Future: future}
}

func (a *SecretsManagerStub) GetSecretValue(ctx workflow.Context, input *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error) {
	var output secretsmanager.GetSecretValueOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.GetSecretValue", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) GetSecretValueAsync(ctx workflow.Context, input *secretsmanager.GetSecretValueInput) *SecretsmanagerGetSecretValueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.GetSecretValue", input)
	return &SecretsmanagerGetSecretValueFuture{Future: future}
}

func (a *SecretsManagerStub) ListSecretVersionIds(ctx workflow.Context, input *secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	var output secretsmanager.ListSecretVersionIdsOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.ListSecretVersionIds", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) ListSecretVersionIdsAsync(ctx workflow.Context, input *secretsmanager.ListSecretVersionIdsInput) *SecretsmanagerListSecretVersionIdsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.ListSecretVersionIds", input)
	return &SecretsmanagerListSecretVersionIdsFuture{Future: future}
}

func (a *SecretsManagerStub) ListSecrets(ctx workflow.Context, input *secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error) {
	var output secretsmanager.ListSecretsOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.ListSecrets", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) ListSecretsAsync(ctx workflow.Context, input *secretsmanager.ListSecretsInput) *SecretsmanagerListSecretsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.ListSecrets", input)
	return &SecretsmanagerListSecretsFuture{Future: future}
}

func (a *SecretsManagerStub) PutResourcePolicy(ctx workflow.Context, input *secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error) {
	var output secretsmanager.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) PutResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.PutResourcePolicyInput) *SecretsmanagerPutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.PutResourcePolicy", input)
	return &SecretsmanagerPutResourcePolicyFuture{Future: future}
}

func (a *SecretsManagerStub) PutSecretValue(ctx workflow.Context, input *secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error) {
	var output secretsmanager.PutSecretValueOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.PutSecretValue", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) PutSecretValueAsync(ctx workflow.Context, input *secretsmanager.PutSecretValueInput) *SecretsmanagerPutSecretValueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.PutSecretValue", input)
	return &SecretsmanagerPutSecretValueFuture{Future: future}
}

func (a *SecretsManagerStub) RestoreSecret(ctx workflow.Context, input *secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error) {
	var output secretsmanager.RestoreSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.RestoreSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) RestoreSecretAsync(ctx workflow.Context, input *secretsmanager.RestoreSecretInput) *SecretsmanagerRestoreSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.RestoreSecret", input)
	return &SecretsmanagerRestoreSecretFuture{Future: future}
}

func (a *SecretsManagerStub) RotateSecret(ctx workflow.Context, input *secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error) {
	var output secretsmanager.RotateSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.RotateSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) RotateSecretAsync(ctx workflow.Context, input *secretsmanager.RotateSecretInput) *SecretsmanagerRotateSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.RotateSecret", input)
	return &SecretsmanagerRotateSecretFuture{Future: future}
}

func (a *SecretsManagerStub) TagResource(ctx workflow.Context, input *secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error) {
	var output secretsmanager.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) TagResourceAsync(ctx workflow.Context, input *secretsmanager.TagResourceInput) *SecretsmanagerTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.TagResource", input)
	return &SecretsmanagerTagResourceFuture{Future: future}
}

func (a *SecretsManagerStub) UntagResource(ctx workflow.Context, input *secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error) {
	var output secretsmanager.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) UntagResourceAsync(ctx workflow.Context, input *secretsmanager.UntagResourceInput) *SecretsmanagerUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.UntagResource", input)
	return &SecretsmanagerUntagResourceFuture{Future: future}
}

func (a *SecretsManagerStub) UpdateSecret(ctx workflow.Context, input *secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error) {
	var output secretsmanager.UpdateSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.UpdateSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) UpdateSecretAsync(ctx workflow.Context, input *secretsmanager.UpdateSecretInput) *SecretsmanagerUpdateSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.UpdateSecret", input)
	return &SecretsmanagerUpdateSecretFuture{Future: future}
}

func (a *SecretsManagerStub) UpdateSecretVersionStage(ctx workflow.Context, input *secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	var output secretsmanager.UpdateSecretVersionStageOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.UpdateSecretVersionStage", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) UpdateSecretVersionStageAsync(ctx workflow.Context, input *secretsmanager.UpdateSecretVersionStageInput) *SecretsmanagerUpdateSecretVersionStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.UpdateSecretVersionStage", input)
	return &SecretsmanagerUpdateSecretVersionStageFuture{Future: future}
}

func (a *SecretsManagerStub) ValidateResourcePolicy(ctx workflow.Context, input *secretsmanager.ValidateResourcePolicyInput) (*secretsmanager.ValidateResourcePolicyOutput, error) {
	var output secretsmanager.ValidateResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.ValidateResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) ValidateResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.ValidateResourcePolicyInput) *SecretsmanagerValidateResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.ValidateResourcePolicy", input)
	return &SecretsmanagerValidateResourcePolicyFuture{Future: future}
}
