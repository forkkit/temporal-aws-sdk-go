// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/secretsmanager"
	"go.temporal.io/sdk/workflow"
)

type SecretsManagerClient interface {
	CancelRotateSecret(ctx workflow.Context, input *secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error)
	CancelRotateSecretAsync(ctx workflow.Context, input *secretsmanager.CancelRotateSecretInput) *SecretsManagerCancelRotateSecretFuture

	CreateSecret(ctx workflow.Context, input *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error)
	CreateSecretAsync(ctx workflow.Context, input *secretsmanager.CreateSecretInput) *SecretsManagerCreateSecretFuture

	DeleteResourcePolicy(ctx workflow.Context, input *secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error)
	DeleteResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.DeleteResourcePolicyInput) *SecretsManagerDeleteResourcePolicyFuture

	DeleteSecret(ctx workflow.Context, input *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error)
	DeleteSecretAsync(ctx workflow.Context, input *secretsmanager.DeleteSecretInput) *SecretsManagerDeleteSecretFuture

	DescribeSecret(ctx workflow.Context, input *secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error)
	DescribeSecretAsync(ctx workflow.Context, input *secretsmanager.DescribeSecretInput) *SecretsManagerDescribeSecretFuture

	GetRandomPassword(ctx workflow.Context, input *secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error)
	GetRandomPasswordAsync(ctx workflow.Context, input *secretsmanager.GetRandomPasswordInput) *SecretsManagerGetRandomPasswordFuture

	GetResourcePolicy(ctx workflow.Context, input *secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error)
	GetResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.GetResourcePolicyInput) *SecretsManagerGetResourcePolicyFuture

	GetSecretValue(ctx workflow.Context, input *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error)
	GetSecretValueAsync(ctx workflow.Context, input *secretsmanager.GetSecretValueInput) *SecretsManagerGetSecretValueFuture

	ListSecretVersionIds(ctx workflow.Context, input *secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error)
	ListSecretVersionIdsAsync(ctx workflow.Context, input *secretsmanager.ListSecretVersionIdsInput) *SecretsManagerListSecretVersionIdsFuture

	ListSecrets(ctx workflow.Context, input *secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error)
	ListSecretsAsync(ctx workflow.Context, input *secretsmanager.ListSecretsInput) *SecretsManagerListSecretsFuture

	PutResourcePolicy(ctx workflow.Context, input *secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error)
	PutResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.PutResourcePolicyInput) *SecretsManagerPutResourcePolicyFuture

	PutSecretValue(ctx workflow.Context, input *secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error)
	PutSecretValueAsync(ctx workflow.Context, input *secretsmanager.PutSecretValueInput) *SecretsManagerPutSecretValueFuture

	RestoreSecret(ctx workflow.Context, input *secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error)
	RestoreSecretAsync(ctx workflow.Context, input *secretsmanager.RestoreSecretInput) *SecretsManagerRestoreSecretFuture

	RotateSecret(ctx workflow.Context, input *secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error)
	RotateSecretAsync(ctx workflow.Context, input *secretsmanager.RotateSecretInput) *SecretsManagerRotateSecretFuture

	TagResource(ctx workflow.Context, input *secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *secretsmanager.TagResourceInput) *SecretsManagerTagResourceFuture

	UntagResource(ctx workflow.Context, input *secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *secretsmanager.UntagResourceInput) *SecretsManagerUntagResourceFuture

	UpdateSecret(ctx workflow.Context, input *secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error)
	UpdateSecretAsync(ctx workflow.Context, input *secretsmanager.UpdateSecretInput) *SecretsManagerUpdateSecretFuture

	UpdateSecretVersionStage(ctx workflow.Context, input *secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error)
	UpdateSecretVersionStageAsync(ctx workflow.Context, input *secretsmanager.UpdateSecretVersionStageInput) *SecretsManagerUpdateSecretVersionStageFuture

	ValidateResourcePolicy(ctx workflow.Context, input *secretsmanager.ValidateResourcePolicyInput) (*secretsmanager.ValidateResourcePolicyOutput, error)
	ValidateResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.ValidateResourcePolicyInput) *SecretsManagerValidateResourcePolicyFuture
}

type SecretsManagerStub struct{}

func NewSecretsManagerStub() SecretsManagerClient {
	return &SecretsManagerStub{}
}

type SecretsManagerCancelRotateSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerCancelRotateSecretFuture) Get(ctx workflow.Context) (*secretsmanager.CancelRotateSecretOutput, error) {
	var output secretsmanager.CancelRotateSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerCreateSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerCreateSecretFuture) Get(ctx workflow.Context) (*secretsmanager.CreateSecretOutput, error) {
	var output secretsmanager.CreateSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerDeleteResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerDeleteResourcePolicyFuture) Get(ctx workflow.Context) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	var output secretsmanager.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerDeleteSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerDeleteSecretFuture) Get(ctx workflow.Context) (*secretsmanager.DeleteSecretOutput, error) {
	var output secretsmanager.DeleteSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerDescribeSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerDescribeSecretFuture) Get(ctx workflow.Context) (*secretsmanager.DescribeSecretOutput, error) {
	var output secretsmanager.DescribeSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerGetRandomPasswordFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerGetRandomPasswordFuture) Get(ctx workflow.Context) (*secretsmanager.GetRandomPasswordOutput, error) {
	var output secretsmanager.GetRandomPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerGetResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerGetResourcePolicyFuture) Get(ctx workflow.Context) (*secretsmanager.GetResourcePolicyOutput, error) {
	var output secretsmanager.GetResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerGetSecretValueFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerGetSecretValueFuture) Get(ctx workflow.Context) (*secretsmanager.GetSecretValueOutput, error) {
	var output secretsmanager.GetSecretValueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerListSecretVersionIdsFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerListSecretVersionIdsFuture) Get(ctx workflow.Context) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	var output secretsmanager.ListSecretVersionIdsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerListSecretsFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerListSecretsFuture) Get(ctx workflow.Context) (*secretsmanager.ListSecretsOutput, error) {
	var output secretsmanager.ListSecretsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerPutResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerPutResourcePolicyFuture) Get(ctx workflow.Context) (*secretsmanager.PutResourcePolicyOutput, error) {
	var output secretsmanager.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerPutSecretValueFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerPutSecretValueFuture) Get(ctx workflow.Context) (*secretsmanager.PutSecretValueOutput, error) {
	var output secretsmanager.PutSecretValueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerRestoreSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerRestoreSecretFuture) Get(ctx workflow.Context) (*secretsmanager.RestoreSecretOutput, error) {
	var output secretsmanager.RestoreSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerRotateSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerRotateSecretFuture) Get(ctx workflow.Context) (*secretsmanager.RotateSecretOutput, error) {
	var output secretsmanager.RotateSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerTagResourceFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerTagResourceFuture) Get(ctx workflow.Context) (*secretsmanager.TagResourceOutput, error) {
	var output secretsmanager.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerUntagResourceFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerUntagResourceFuture) Get(ctx workflow.Context) (*secretsmanager.UntagResourceOutput, error) {
	var output secretsmanager.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerUpdateSecretFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerUpdateSecretFuture) Get(ctx workflow.Context) (*secretsmanager.UpdateSecretOutput, error) {
	var output secretsmanager.UpdateSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerUpdateSecretVersionStageFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerUpdateSecretVersionStageFuture) Get(ctx workflow.Context) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	var output secretsmanager.UpdateSecretVersionStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SecretsManagerValidateResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *SecretsManagerValidateResourcePolicyFuture) Get(ctx workflow.Context) (*secretsmanager.ValidateResourcePolicyOutput, error) {
	var output secretsmanager.ValidateResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) CancelRotateSecret(ctx workflow.Context, input *secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error) {
	var output secretsmanager.CancelRotateSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.CancelRotateSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) CancelRotateSecretAsync(ctx workflow.Context, input *secretsmanager.CancelRotateSecretInput) *SecretsManagerCancelRotateSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.CancelRotateSecret", input)
	return &SecretsManagerCancelRotateSecretFuture{Future: future}
}

func (a *SecretsManagerStub) CreateSecret(ctx workflow.Context, input *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error) {
	var output secretsmanager.CreateSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.CreateSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) CreateSecretAsync(ctx workflow.Context, input *secretsmanager.CreateSecretInput) *SecretsManagerCreateSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.CreateSecret", input)
	return &SecretsManagerCreateSecretFuture{Future: future}
}

func (a *SecretsManagerStub) DeleteResourcePolicy(ctx workflow.Context, input *secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	var output secretsmanager.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) DeleteResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.DeleteResourcePolicyInput) *SecretsManagerDeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.DeleteResourcePolicy", input)
	return &SecretsManagerDeleteResourcePolicyFuture{Future: future}
}

func (a *SecretsManagerStub) DeleteSecret(ctx workflow.Context, input *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error) {
	var output secretsmanager.DeleteSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.DeleteSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) DeleteSecretAsync(ctx workflow.Context, input *secretsmanager.DeleteSecretInput) *SecretsManagerDeleteSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.DeleteSecret", input)
	return &SecretsManagerDeleteSecretFuture{Future: future}
}

func (a *SecretsManagerStub) DescribeSecret(ctx workflow.Context, input *secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error) {
	var output secretsmanager.DescribeSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.DescribeSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) DescribeSecretAsync(ctx workflow.Context, input *secretsmanager.DescribeSecretInput) *SecretsManagerDescribeSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.DescribeSecret", input)
	return &SecretsManagerDescribeSecretFuture{Future: future}
}

func (a *SecretsManagerStub) GetRandomPassword(ctx workflow.Context, input *secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error) {
	var output secretsmanager.GetRandomPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.GetRandomPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) GetRandomPasswordAsync(ctx workflow.Context, input *secretsmanager.GetRandomPasswordInput) *SecretsManagerGetRandomPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.GetRandomPassword", input)
	return &SecretsManagerGetRandomPasswordFuture{Future: future}
}

func (a *SecretsManagerStub) GetResourcePolicy(ctx workflow.Context, input *secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error) {
	var output secretsmanager.GetResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.GetResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) GetResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.GetResourcePolicyInput) *SecretsManagerGetResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.GetResourcePolicy", input)
	return &SecretsManagerGetResourcePolicyFuture{Future: future}
}

func (a *SecretsManagerStub) GetSecretValue(ctx workflow.Context, input *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error) {
	var output secretsmanager.GetSecretValueOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.GetSecretValue", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) GetSecretValueAsync(ctx workflow.Context, input *secretsmanager.GetSecretValueInput) *SecretsManagerGetSecretValueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.GetSecretValue", input)
	return &SecretsManagerGetSecretValueFuture{Future: future}
}

func (a *SecretsManagerStub) ListSecretVersionIds(ctx workflow.Context, input *secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	var output secretsmanager.ListSecretVersionIdsOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.ListSecretVersionIds", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) ListSecretVersionIdsAsync(ctx workflow.Context, input *secretsmanager.ListSecretVersionIdsInput) *SecretsManagerListSecretVersionIdsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.ListSecretVersionIds", input)
	return &SecretsManagerListSecretVersionIdsFuture{Future: future}
}

func (a *SecretsManagerStub) ListSecrets(ctx workflow.Context, input *secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error) {
	var output secretsmanager.ListSecretsOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.ListSecrets", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) ListSecretsAsync(ctx workflow.Context, input *secretsmanager.ListSecretsInput) *SecretsManagerListSecretsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.ListSecrets", input)
	return &SecretsManagerListSecretsFuture{Future: future}
}

func (a *SecretsManagerStub) PutResourcePolicy(ctx workflow.Context, input *secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error) {
	var output secretsmanager.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) PutResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.PutResourcePolicyInput) *SecretsManagerPutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.PutResourcePolicy", input)
	return &SecretsManagerPutResourcePolicyFuture{Future: future}
}

func (a *SecretsManagerStub) PutSecretValue(ctx workflow.Context, input *secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error) {
	var output secretsmanager.PutSecretValueOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.PutSecretValue", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) PutSecretValueAsync(ctx workflow.Context, input *secretsmanager.PutSecretValueInput) *SecretsManagerPutSecretValueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.PutSecretValue", input)
	return &SecretsManagerPutSecretValueFuture{Future: future}
}

func (a *SecretsManagerStub) RestoreSecret(ctx workflow.Context, input *secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error) {
	var output secretsmanager.RestoreSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.RestoreSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) RestoreSecretAsync(ctx workflow.Context, input *secretsmanager.RestoreSecretInput) *SecretsManagerRestoreSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.RestoreSecret", input)
	return &SecretsManagerRestoreSecretFuture{Future: future}
}

func (a *SecretsManagerStub) RotateSecret(ctx workflow.Context, input *secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error) {
	var output secretsmanager.RotateSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.RotateSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) RotateSecretAsync(ctx workflow.Context, input *secretsmanager.RotateSecretInput) *SecretsManagerRotateSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.RotateSecret", input)
	return &SecretsManagerRotateSecretFuture{Future: future}
}

func (a *SecretsManagerStub) TagResource(ctx workflow.Context, input *secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error) {
	var output secretsmanager.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) TagResourceAsync(ctx workflow.Context, input *secretsmanager.TagResourceInput) *SecretsManagerTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.TagResource", input)
	return &SecretsManagerTagResourceFuture{Future: future}
}

func (a *SecretsManagerStub) UntagResource(ctx workflow.Context, input *secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error) {
	var output secretsmanager.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) UntagResourceAsync(ctx workflow.Context, input *secretsmanager.UntagResourceInput) *SecretsManagerUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.UntagResource", input)
	return &SecretsManagerUntagResourceFuture{Future: future}
}

func (a *SecretsManagerStub) UpdateSecret(ctx workflow.Context, input *secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error) {
	var output secretsmanager.UpdateSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.UpdateSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) UpdateSecretAsync(ctx workflow.Context, input *secretsmanager.UpdateSecretInput) *SecretsManagerUpdateSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.UpdateSecret", input)
	return &SecretsManagerUpdateSecretFuture{Future: future}
}

func (a *SecretsManagerStub) UpdateSecretVersionStage(ctx workflow.Context, input *secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	var output secretsmanager.UpdateSecretVersionStageOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.UpdateSecretVersionStage", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) UpdateSecretVersionStageAsync(ctx workflow.Context, input *secretsmanager.UpdateSecretVersionStageInput) *SecretsManagerUpdateSecretVersionStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.UpdateSecretVersionStage", input)
	return &SecretsManagerUpdateSecretVersionStageFuture{Future: future}
}

func (a *SecretsManagerStub) ValidateResourcePolicy(ctx workflow.Context, input *secretsmanager.ValidateResourcePolicyInput) (*secretsmanager.ValidateResourcePolicyOutput, error) {
	var output secretsmanager.ValidateResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.secretsmanager.ValidateResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *SecretsManagerStub) ValidateResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.ValidateResourcePolicyInput) *SecretsManagerValidateResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.secretsmanager.ValidateResourcePolicy", input)
	return &SecretsManagerValidateResourcePolicyFuture{Future: future}
}
