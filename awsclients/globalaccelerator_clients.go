// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/globalaccelerator"
	"go.temporal.io/sdk/workflow"
)

type GlobalAcceleratorClient interface {
	AdvertiseByoipCidr(ctx workflow.Context, input *globalaccelerator.AdvertiseByoipCidrInput) (*globalaccelerator.AdvertiseByoipCidrOutput, error)
	AdvertiseByoipCidrAsync(ctx workflow.Context, input *globalaccelerator.AdvertiseByoipCidrInput) *GlobalacceleratorAdvertiseByoipCidrFuture

	CreateAccelerator(ctx workflow.Context, input *globalaccelerator.CreateAcceleratorInput) (*globalaccelerator.CreateAcceleratorOutput, error)
	CreateAcceleratorAsync(ctx workflow.Context, input *globalaccelerator.CreateAcceleratorInput) *GlobalacceleratorCreateAcceleratorFuture

	CreateEndpointGroup(ctx workflow.Context, input *globalaccelerator.CreateEndpointGroupInput) (*globalaccelerator.CreateEndpointGroupOutput, error)
	CreateEndpointGroupAsync(ctx workflow.Context, input *globalaccelerator.CreateEndpointGroupInput) *GlobalacceleratorCreateEndpointGroupFuture

	CreateListener(ctx workflow.Context, input *globalaccelerator.CreateListenerInput) (*globalaccelerator.CreateListenerOutput, error)
	CreateListenerAsync(ctx workflow.Context, input *globalaccelerator.CreateListenerInput) *GlobalacceleratorCreateListenerFuture

	DeleteAccelerator(ctx workflow.Context, input *globalaccelerator.DeleteAcceleratorInput) (*globalaccelerator.DeleteAcceleratorOutput, error)
	DeleteAcceleratorAsync(ctx workflow.Context, input *globalaccelerator.DeleteAcceleratorInput) *GlobalacceleratorDeleteAcceleratorFuture

	DeleteEndpointGroup(ctx workflow.Context, input *globalaccelerator.DeleteEndpointGroupInput) (*globalaccelerator.DeleteEndpointGroupOutput, error)
	DeleteEndpointGroupAsync(ctx workflow.Context, input *globalaccelerator.DeleteEndpointGroupInput) *GlobalacceleratorDeleteEndpointGroupFuture

	DeleteListener(ctx workflow.Context, input *globalaccelerator.DeleteListenerInput) (*globalaccelerator.DeleteListenerOutput, error)
	DeleteListenerAsync(ctx workflow.Context, input *globalaccelerator.DeleteListenerInput) *GlobalacceleratorDeleteListenerFuture

	DeprovisionByoipCidr(ctx workflow.Context, input *globalaccelerator.DeprovisionByoipCidrInput) (*globalaccelerator.DeprovisionByoipCidrOutput, error)
	DeprovisionByoipCidrAsync(ctx workflow.Context, input *globalaccelerator.DeprovisionByoipCidrInput) *GlobalacceleratorDeprovisionByoipCidrFuture

	DescribeAccelerator(ctx workflow.Context, input *globalaccelerator.DescribeAcceleratorInput) (*globalaccelerator.DescribeAcceleratorOutput, error)
	DescribeAcceleratorAsync(ctx workflow.Context, input *globalaccelerator.DescribeAcceleratorInput) *GlobalacceleratorDescribeAcceleratorFuture

	DescribeAcceleratorAttributes(ctx workflow.Context, input *globalaccelerator.DescribeAcceleratorAttributesInput) (*globalaccelerator.DescribeAcceleratorAttributesOutput, error)
	DescribeAcceleratorAttributesAsync(ctx workflow.Context, input *globalaccelerator.DescribeAcceleratorAttributesInput) *GlobalacceleratorDescribeAcceleratorAttributesFuture

	DescribeEndpointGroup(ctx workflow.Context, input *globalaccelerator.DescribeEndpointGroupInput) (*globalaccelerator.DescribeEndpointGroupOutput, error)
	DescribeEndpointGroupAsync(ctx workflow.Context, input *globalaccelerator.DescribeEndpointGroupInput) *GlobalacceleratorDescribeEndpointGroupFuture

	DescribeListener(ctx workflow.Context, input *globalaccelerator.DescribeListenerInput) (*globalaccelerator.DescribeListenerOutput, error)
	DescribeListenerAsync(ctx workflow.Context, input *globalaccelerator.DescribeListenerInput) *GlobalacceleratorDescribeListenerFuture

	ListAccelerators(ctx workflow.Context, input *globalaccelerator.ListAcceleratorsInput) (*globalaccelerator.ListAcceleratorsOutput, error)
	ListAcceleratorsAsync(ctx workflow.Context, input *globalaccelerator.ListAcceleratorsInput) *GlobalacceleratorListAcceleratorsFuture

	ListByoipCidrs(ctx workflow.Context, input *globalaccelerator.ListByoipCidrsInput) (*globalaccelerator.ListByoipCidrsOutput, error)
	ListByoipCidrsAsync(ctx workflow.Context, input *globalaccelerator.ListByoipCidrsInput) *GlobalacceleratorListByoipCidrsFuture

	ListEndpointGroups(ctx workflow.Context, input *globalaccelerator.ListEndpointGroupsInput) (*globalaccelerator.ListEndpointGroupsOutput, error)
	ListEndpointGroupsAsync(ctx workflow.Context, input *globalaccelerator.ListEndpointGroupsInput) *GlobalacceleratorListEndpointGroupsFuture

	ListListeners(ctx workflow.Context, input *globalaccelerator.ListListenersInput) (*globalaccelerator.ListListenersOutput, error)
	ListListenersAsync(ctx workflow.Context, input *globalaccelerator.ListListenersInput) *GlobalacceleratorListListenersFuture

	ListTagsForResource(ctx workflow.Context, input *globalaccelerator.ListTagsForResourceInput) (*globalaccelerator.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *globalaccelerator.ListTagsForResourceInput) *GlobalacceleratorListTagsForResourceFuture

	ProvisionByoipCidr(ctx workflow.Context, input *globalaccelerator.ProvisionByoipCidrInput) (*globalaccelerator.ProvisionByoipCidrOutput, error)
	ProvisionByoipCidrAsync(ctx workflow.Context, input *globalaccelerator.ProvisionByoipCidrInput) *GlobalacceleratorProvisionByoipCidrFuture

	TagResource(ctx workflow.Context, input *globalaccelerator.TagResourceInput) (*globalaccelerator.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *globalaccelerator.TagResourceInput) *GlobalacceleratorTagResourceFuture

	UntagResource(ctx workflow.Context, input *globalaccelerator.UntagResourceInput) (*globalaccelerator.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *globalaccelerator.UntagResourceInput) *GlobalacceleratorUntagResourceFuture

	UpdateAccelerator(ctx workflow.Context, input *globalaccelerator.UpdateAcceleratorInput) (*globalaccelerator.UpdateAcceleratorOutput, error)
	UpdateAcceleratorAsync(ctx workflow.Context, input *globalaccelerator.UpdateAcceleratorInput) *GlobalacceleratorUpdateAcceleratorFuture

	UpdateAcceleratorAttributes(ctx workflow.Context, input *globalaccelerator.UpdateAcceleratorAttributesInput) (*globalaccelerator.UpdateAcceleratorAttributesOutput, error)
	UpdateAcceleratorAttributesAsync(ctx workflow.Context, input *globalaccelerator.UpdateAcceleratorAttributesInput) *GlobalacceleratorUpdateAcceleratorAttributesFuture

	UpdateEndpointGroup(ctx workflow.Context, input *globalaccelerator.UpdateEndpointGroupInput) (*globalaccelerator.UpdateEndpointGroupOutput, error)
	UpdateEndpointGroupAsync(ctx workflow.Context, input *globalaccelerator.UpdateEndpointGroupInput) *GlobalacceleratorUpdateEndpointGroupFuture

	UpdateListener(ctx workflow.Context, input *globalaccelerator.UpdateListenerInput) (*globalaccelerator.UpdateListenerOutput, error)
	UpdateListenerAsync(ctx workflow.Context, input *globalaccelerator.UpdateListenerInput) *GlobalacceleratorUpdateListenerFuture

	WithdrawByoipCidr(ctx workflow.Context, input *globalaccelerator.WithdrawByoipCidrInput) (*globalaccelerator.WithdrawByoipCidrOutput, error)
	WithdrawByoipCidrAsync(ctx workflow.Context, input *globalaccelerator.WithdrawByoipCidrInput) *GlobalacceleratorWithdrawByoipCidrFuture
}

type GlobalAcceleratorStub struct{}

func NewGlobalAcceleratorStub() GlobalAcceleratorClient {
	return &GlobalAcceleratorStub{}
}

type GlobalacceleratorAdvertiseByoipCidrFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorAdvertiseByoipCidrFuture) Get(ctx workflow.Context) (*globalaccelerator.AdvertiseByoipCidrOutput, error) {
	var output globalaccelerator.AdvertiseByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorCreateAcceleratorFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorCreateAcceleratorFuture) Get(ctx workflow.Context) (*globalaccelerator.CreateAcceleratorOutput, error) {
	var output globalaccelerator.CreateAcceleratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorCreateEndpointGroupFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorCreateEndpointGroupFuture) Get(ctx workflow.Context) (*globalaccelerator.CreateEndpointGroupOutput, error) {
	var output globalaccelerator.CreateEndpointGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorCreateListenerFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorCreateListenerFuture) Get(ctx workflow.Context) (*globalaccelerator.CreateListenerOutput, error) {
	var output globalaccelerator.CreateListenerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorDeleteAcceleratorFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorDeleteAcceleratorFuture) Get(ctx workflow.Context) (*globalaccelerator.DeleteAcceleratorOutput, error) {
	var output globalaccelerator.DeleteAcceleratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorDeleteEndpointGroupFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorDeleteEndpointGroupFuture) Get(ctx workflow.Context) (*globalaccelerator.DeleteEndpointGroupOutput, error) {
	var output globalaccelerator.DeleteEndpointGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorDeleteListenerFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorDeleteListenerFuture) Get(ctx workflow.Context) (*globalaccelerator.DeleteListenerOutput, error) {
	var output globalaccelerator.DeleteListenerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorDeprovisionByoipCidrFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorDeprovisionByoipCidrFuture) Get(ctx workflow.Context) (*globalaccelerator.DeprovisionByoipCidrOutput, error) {
	var output globalaccelerator.DeprovisionByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorDescribeAcceleratorFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorDescribeAcceleratorFuture) Get(ctx workflow.Context) (*globalaccelerator.DescribeAcceleratorOutput, error) {
	var output globalaccelerator.DescribeAcceleratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorDescribeAcceleratorAttributesFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorDescribeAcceleratorAttributesFuture) Get(ctx workflow.Context) (*globalaccelerator.DescribeAcceleratorAttributesOutput, error) {
	var output globalaccelerator.DescribeAcceleratorAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorDescribeEndpointGroupFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorDescribeEndpointGroupFuture) Get(ctx workflow.Context) (*globalaccelerator.DescribeEndpointGroupOutput, error) {
	var output globalaccelerator.DescribeEndpointGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorDescribeListenerFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorDescribeListenerFuture) Get(ctx workflow.Context) (*globalaccelerator.DescribeListenerOutput, error) {
	var output globalaccelerator.DescribeListenerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorListAcceleratorsFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorListAcceleratorsFuture) Get(ctx workflow.Context) (*globalaccelerator.ListAcceleratorsOutput, error) {
	var output globalaccelerator.ListAcceleratorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorListByoipCidrsFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorListByoipCidrsFuture) Get(ctx workflow.Context) (*globalaccelerator.ListByoipCidrsOutput, error) {
	var output globalaccelerator.ListByoipCidrsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorListEndpointGroupsFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorListEndpointGroupsFuture) Get(ctx workflow.Context) (*globalaccelerator.ListEndpointGroupsOutput, error) {
	var output globalaccelerator.ListEndpointGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorListListenersFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorListListenersFuture) Get(ctx workflow.Context) (*globalaccelerator.ListListenersOutput, error) {
	var output globalaccelerator.ListListenersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorListTagsForResourceFuture) Get(ctx workflow.Context) (*globalaccelerator.ListTagsForResourceOutput, error) {
	var output globalaccelerator.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorProvisionByoipCidrFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorProvisionByoipCidrFuture) Get(ctx workflow.Context) (*globalaccelerator.ProvisionByoipCidrOutput, error) {
	var output globalaccelerator.ProvisionByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorTagResourceFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorTagResourceFuture) Get(ctx workflow.Context) (*globalaccelerator.TagResourceOutput, error) {
	var output globalaccelerator.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorUntagResourceFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorUntagResourceFuture) Get(ctx workflow.Context) (*globalaccelerator.UntagResourceOutput, error) {
	var output globalaccelerator.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorUpdateAcceleratorFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorUpdateAcceleratorFuture) Get(ctx workflow.Context) (*globalaccelerator.UpdateAcceleratorOutput, error) {
	var output globalaccelerator.UpdateAcceleratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorUpdateAcceleratorAttributesFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorUpdateAcceleratorAttributesFuture) Get(ctx workflow.Context) (*globalaccelerator.UpdateAcceleratorAttributesOutput, error) {
	var output globalaccelerator.UpdateAcceleratorAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorUpdateEndpointGroupFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorUpdateEndpointGroupFuture) Get(ctx workflow.Context) (*globalaccelerator.UpdateEndpointGroupOutput, error) {
	var output globalaccelerator.UpdateEndpointGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorUpdateListenerFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorUpdateListenerFuture) Get(ctx workflow.Context) (*globalaccelerator.UpdateListenerOutput, error) {
	var output globalaccelerator.UpdateListenerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalacceleratorWithdrawByoipCidrFuture struct {
	Future workflow.Future
}

func (r *GlobalacceleratorWithdrawByoipCidrFuture) Get(ctx workflow.Context) (*globalaccelerator.WithdrawByoipCidrOutput, error) {
	var output globalaccelerator.WithdrawByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) AdvertiseByoipCidr(ctx workflow.Context, input *globalaccelerator.AdvertiseByoipCidrInput) (*globalaccelerator.AdvertiseByoipCidrOutput, error) {
	var output globalaccelerator.AdvertiseByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.AdvertiseByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) AdvertiseByoipCidrAsync(ctx workflow.Context, input *globalaccelerator.AdvertiseByoipCidrInput) *GlobalacceleratorAdvertiseByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.AdvertiseByoipCidr", input)
	return &GlobalacceleratorAdvertiseByoipCidrFuture{Future: future}
}

func (a *GlobalAcceleratorStub) CreateAccelerator(ctx workflow.Context, input *globalaccelerator.CreateAcceleratorInput) (*globalaccelerator.CreateAcceleratorOutput, error) {
	var output globalaccelerator.CreateAcceleratorOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.CreateAccelerator", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) CreateAcceleratorAsync(ctx workflow.Context, input *globalaccelerator.CreateAcceleratorInput) *GlobalacceleratorCreateAcceleratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.CreateAccelerator", input)
	return &GlobalacceleratorCreateAcceleratorFuture{Future: future}
}

func (a *GlobalAcceleratorStub) CreateEndpointGroup(ctx workflow.Context, input *globalaccelerator.CreateEndpointGroupInput) (*globalaccelerator.CreateEndpointGroupOutput, error) {
	var output globalaccelerator.CreateEndpointGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.CreateEndpointGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) CreateEndpointGroupAsync(ctx workflow.Context, input *globalaccelerator.CreateEndpointGroupInput) *GlobalacceleratorCreateEndpointGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.CreateEndpointGroup", input)
	return &GlobalacceleratorCreateEndpointGroupFuture{Future: future}
}

func (a *GlobalAcceleratorStub) CreateListener(ctx workflow.Context, input *globalaccelerator.CreateListenerInput) (*globalaccelerator.CreateListenerOutput, error) {
	var output globalaccelerator.CreateListenerOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.CreateListener", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) CreateListenerAsync(ctx workflow.Context, input *globalaccelerator.CreateListenerInput) *GlobalacceleratorCreateListenerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.CreateListener", input)
	return &GlobalacceleratorCreateListenerFuture{Future: future}
}

func (a *GlobalAcceleratorStub) DeleteAccelerator(ctx workflow.Context, input *globalaccelerator.DeleteAcceleratorInput) (*globalaccelerator.DeleteAcceleratorOutput, error) {
	var output globalaccelerator.DeleteAcceleratorOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DeleteAccelerator", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) DeleteAcceleratorAsync(ctx workflow.Context, input *globalaccelerator.DeleteAcceleratorInput) *GlobalacceleratorDeleteAcceleratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DeleteAccelerator", input)
	return &GlobalacceleratorDeleteAcceleratorFuture{Future: future}
}

func (a *GlobalAcceleratorStub) DeleteEndpointGroup(ctx workflow.Context, input *globalaccelerator.DeleteEndpointGroupInput) (*globalaccelerator.DeleteEndpointGroupOutput, error) {
	var output globalaccelerator.DeleteEndpointGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DeleteEndpointGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) DeleteEndpointGroupAsync(ctx workflow.Context, input *globalaccelerator.DeleteEndpointGroupInput) *GlobalacceleratorDeleteEndpointGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DeleteEndpointGroup", input)
	return &GlobalacceleratorDeleteEndpointGroupFuture{Future: future}
}

func (a *GlobalAcceleratorStub) DeleteListener(ctx workflow.Context, input *globalaccelerator.DeleteListenerInput) (*globalaccelerator.DeleteListenerOutput, error) {
	var output globalaccelerator.DeleteListenerOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DeleteListener", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) DeleteListenerAsync(ctx workflow.Context, input *globalaccelerator.DeleteListenerInput) *GlobalacceleratorDeleteListenerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DeleteListener", input)
	return &GlobalacceleratorDeleteListenerFuture{Future: future}
}

func (a *GlobalAcceleratorStub) DeprovisionByoipCidr(ctx workflow.Context, input *globalaccelerator.DeprovisionByoipCidrInput) (*globalaccelerator.DeprovisionByoipCidrOutput, error) {
	var output globalaccelerator.DeprovisionByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DeprovisionByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) DeprovisionByoipCidrAsync(ctx workflow.Context, input *globalaccelerator.DeprovisionByoipCidrInput) *GlobalacceleratorDeprovisionByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DeprovisionByoipCidr", input)
	return &GlobalacceleratorDeprovisionByoipCidrFuture{Future: future}
}

func (a *GlobalAcceleratorStub) DescribeAccelerator(ctx workflow.Context, input *globalaccelerator.DescribeAcceleratorInput) (*globalaccelerator.DescribeAcceleratorOutput, error) {
	var output globalaccelerator.DescribeAcceleratorOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DescribeAccelerator", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) DescribeAcceleratorAsync(ctx workflow.Context, input *globalaccelerator.DescribeAcceleratorInput) *GlobalacceleratorDescribeAcceleratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DescribeAccelerator", input)
	return &GlobalacceleratorDescribeAcceleratorFuture{Future: future}
}

func (a *GlobalAcceleratorStub) DescribeAcceleratorAttributes(ctx workflow.Context, input *globalaccelerator.DescribeAcceleratorAttributesInput) (*globalaccelerator.DescribeAcceleratorAttributesOutput, error) {
	var output globalaccelerator.DescribeAcceleratorAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DescribeAcceleratorAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) DescribeAcceleratorAttributesAsync(ctx workflow.Context, input *globalaccelerator.DescribeAcceleratorAttributesInput) *GlobalacceleratorDescribeAcceleratorAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DescribeAcceleratorAttributes", input)
	return &GlobalacceleratorDescribeAcceleratorAttributesFuture{Future: future}
}

func (a *GlobalAcceleratorStub) DescribeEndpointGroup(ctx workflow.Context, input *globalaccelerator.DescribeEndpointGroupInput) (*globalaccelerator.DescribeEndpointGroupOutput, error) {
	var output globalaccelerator.DescribeEndpointGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DescribeEndpointGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) DescribeEndpointGroupAsync(ctx workflow.Context, input *globalaccelerator.DescribeEndpointGroupInput) *GlobalacceleratorDescribeEndpointGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DescribeEndpointGroup", input)
	return &GlobalacceleratorDescribeEndpointGroupFuture{Future: future}
}

func (a *GlobalAcceleratorStub) DescribeListener(ctx workflow.Context, input *globalaccelerator.DescribeListenerInput) (*globalaccelerator.DescribeListenerOutput, error) {
	var output globalaccelerator.DescribeListenerOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DescribeListener", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) DescribeListenerAsync(ctx workflow.Context, input *globalaccelerator.DescribeListenerInput) *GlobalacceleratorDescribeListenerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.DescribeListener", input)
	return &GlobalacceleratorDescribeListenerFuture{Future: future}
}

func (a *GlobalAcceleratorStub) ListAccelerators(ctx workflow.Context, input *globalaccelerator.ListAcceleratorsInput) (*globalaccelerator.ListAcceleratorsOutput, error) {
	var output globalaccelerator.ListAcceleratorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.ListAccelerators", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) ListAcceleratorsAsync(ctx workflow.Context, input *globalaccelerator.ListAcceleratorsInput) *GlobalacceleratorListAcceleratorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.ListAccelerators", input)
	return &GlobalacceleratorListAcceleratorsFuture{Future: future}
}

func (a *GlobalAcceleratorStub) ListByoipCidrs(ctx workflow.Context, input *globalaccelerator.ListByoipCidrsInput) (*globalaccelerator.ListByoipCidrsOutput, error) {
	var output globalaccelerator.ListByoipCidrsOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.ListByoipCidrs", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) ListByoipCidrsAsync(ctx workflow.Context, input *globalaccelerator.ListByoipCidrsInput) *GlobalacceleratorListByoipCidrsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.ListByoipCidrs", input)
	return &GlobalacceleratorListByoipCidrsFuture{Future: future}
}

func (a *GlobalAcceleratorStub) ListEndpointGroups(ctx workflow.Context, input *globalaccelerator.ListEndpointGroupsInput) (*globalaccelerator.ListEndpointGroupsOutput, error) {
	var output globalaccelerator.ListEndpointGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.ListEndpointGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) ListEndpointGroupsAsync(ctx workflow.Context, input *globalaccelerator.ListEndpointGroupsInput) *GlobalacceleratorListEndpointGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.ListEndpointGroups", input)
	return &GlobalacceleratorListEndpointGroupsFuture{Future: future}
}

func (a *GlobalAcceleratorStub) ListListeners(ctx workflow.Context, input *globalaccelerator.ListListenersInput) (*globalaccelerator.ListListenersOutput, error) {
	var output globalaccelerator.ListListenersOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.ListListeners", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) ListListenersAsync(ctx workflow.Context, input *globalaccelerator.ListListenersInput) *GlobalacceleratorListListenersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.ListListeners", input)
	return &GlobalacceleratorListListenersFuture{Future: future}
}

func (a *GlobalAcceleratorStub) ListTagsForResource(ctx workflow.Context, input *globalaccelerator.ListTagsForResourceInput) (*globalaccelerator.ListTagsForResourceOutput, error) {
	var output globalaccelerator.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) ListTagsForResourceAsync(ctx workflow.Context, input *globalaccelerator.ListTagsForResourceInput) *GlobalacceleratorListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.ListTagsForResource", input)
	return &GlobalacceleratorListTagsForResourceFuture{Future: future}
}

func (a *GlobalAcceleratorStub) ProvisionByoipCidr(ctx workflow.Context, input *globalaccelerator.ProvisionByoipCidrInput) (*globalaccelerator.ProvisionByoipCidrOutput, error) {
	var output globalaccelerator.ProvisionByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.ProvisionByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) ProvisionByoipCidrAsync(ctx workflow.Context, input *globalaccelerator.ProvisionByoipCidrInput) *GlobalacceleratorProvisionByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.ProvisionByoipCidr", input)
	return &GlobalacceleratorProvisionByoipCidrFuture{Future: future}
}

func (a *GlobalAcceleratorStub) TagResource(ctx workflow.Context, input *globalaccelerator.TagResourceInput) (*globalaccelerator.TagResourceOutput, error) {
	var output globalaccelerator.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) TagResourceAsync(ctx workflow.Context, input *globalaccelerator.TagResourceInput) *GlobalacceleratorTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.TagResource", input)
	return &GlobalacceleratorTagResourceFuture{Future: future}
}

func (a *GlobalAcceleratorStub) UntagResource(ctx workflow.Context, input *globalaccelerator.UntagResourceInput) (*globalaccelerator.UntagResourceOutput, error) {
	var output globalaccelerator.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) UntagResourceAsync(ctx workflow.Context, input *globalaccelerator.UntagResourceInput) *GlobalacceleratorUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.UntagResource", input)
	return &GlobalacceleratorUntagResourceFuture{Future: future}
}

func (a *GlobalAcceleratorStub) UpdateAccelerator(ctx workflow.Context, input *globalaccelerator.UpdateAcceleratorInput) (*globalaccelerator.UpdateAcceleratorOutput, error) {
	var output globalaccelerator.UpdateAcceleratorOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.UpdateAccelerator", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) UpdateAcceleratorAsync(ctx workflow.Context, input *globalaccelerator.UpdateAcceleratorInput) *GlobalacceleratorUpdateAcceleratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.UpdateAccelerator", input)
	return &GlobalacceleratorUpdateAcceleratorFuture{Future: future}
}

func (a *GlobalAcceleratorStub) UpdateAcceleratorAttributes(ctx workflow.Context, input *globalaccelerator.UpdateAcceleratorAttributesInput) (*globalaccelerator.UpdateAcceleratorAttributesOutput, error) {
	var output globalaccelerator.UpdateAcceleratorAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.UpdateAcceleratorAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) UpdateAcceleratorAttributesAsync(ctx workflow.Context, input *globalaccelerator.UpdateAcceleratorAttributesInput) *GlobalacceleratorUpdateAcceleratorAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.UpdateAcceleratorAttributes", input)
	return &GlobalacceleratorUpdateAcceleratorAttributesFuture{Future: future}
}

func (a *GlobalAcceleratorStub) UpdateEndpointGroup(ctx workflow.Context, input *globalaccelerator.UpdateEndpointGroupInput) (*globalaccelerator.UpdateEndpointGroupOutput, error) {
	var output globalaccelerator.UpdateEndpointGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.UpdateEndpointGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) UpdateEndpointGroupAsync(ctx workflow.Context, input *globalaccelerator.UpdateEndpointGroupInput) *GlobalacceleratorUpdateEndpointGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.UpdateEndpointGroup", input)
	return &GlobalacceleratorUpdateEndpointGroupFuture{Future: future}
}

func (a *GlobalAcceleratorStub) UpdateListener(ctx workflow.Context, input *globalaccelerator.UpdateListenerInput) (*globalaccelerator.UpdateListenerOutput, error) {
	var output globalaccelerator.UpdateListenerOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.UpdateListener", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) UpdateListenerAsync(ctx workflow.Context, input *globalaccelerator.UpdateListenerInput) *GlobalacceleratorUpdateListenerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.UpdateListener", input)
	return &GlobalacceleratorUpdateListenerFuture{Future: future}
}

func (a *GlobalAcceleratorStub) WithdrawByoipCidr(ctx workflow.Context, input *globalaccelerator.WithdrawByoipCidrInput) (*globalaccelerator.WithdrawByoipCidrOutput, error) {
	var output globalaccelerator.WithdrawByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.WithdrawByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *GlobalAcceleratorStub) WithdrawByoipCidrAsync(ctx workflow.Context, input *globalaccelerator.WithdrawByoipCidrInput) *GlobalacceleratorWithdrawByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.globalaccelerator.WithdrawByoipCidr", input)
	return &GlobalacceleratorWithdrawByoipCidrFuture{Future: future}
}
