// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/codeartifact"
	"go.temporal.io/sdk/workflow"
)

type CodeArtifactClient interface {
	AssociateExternalConnection(ctx workflow.Context, input *codeartifact.AssociateExternalConnectionInput) (*codeartifact.AssociateExternalConnectionOutput, error)
	AssociateExternalConnectionAsync(ctx workflow.Context, input *codeartifact.AssociateExternalConnectionInput) *CodeartifactAssociateExternalConnectionFuture

	CopyPackageVersions(ctx workflow.Context, input *codeartifact.CopyPackageVersionsInput) (*codeartifact.CopyPackageVersionsOutput, error)
	CopyPackageVersionsAsync(ctx workflow.Context, input *codeartifact.CopyPackageVersionsInput) *CodeartifactCopyPackageVersionsFuture

	CreateDomain(ctx workflow.Context, input *codeartifact.CreateDomainInput) (*codeartifact.CreateDomainOutput, error)
	CreateDomainAsync(ctx workflow.Context, input *codeartifact.CreateDomainInput) *CodeartifactCreateDomainFuture

	CreateRepository(ctx workflow.Context, input *codeartifact.CreateRepositoryInput) (*codeartifact.CreateRepositoryOutput, error)
	CreateRepositoryAsync(ctx workflow.Context, input *codeartifact.CreateRepositoryInput) *CodeartifactCreateRepositoryFuture

	DeleteDomain(ctx workflow.Context, input *codeartifact.DeleteDomainInput) (*codeartifact.DeleteDomainOutput, error)
	DeleteDomainAsync(ctx workflow.Context, input *codeartifact.DeleteDomainInput) *CodeartifactDeleteDomainFuture

	DeleteDomainPermissionsPolicy(ctx workflow.Context, input *codeartifact.DeleteDomainPermissionsPolicyInput) (*codeartifact.DeleteDomainPermissionsPolicyOutput, error)
	DeleteDomainPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.DeleteDomainPermissionsPolicyInput) *CodeartifactDeleteDomainPermissionsPolicyFuture

	DeletePackageVersions(ctx workflow.Context, input *codeartifact.DeletePackageVersionsInput) (*codeartifact.DeletePackageVersionsOutput, error)
	DeletePackageVersionsAsync(ctx workflow.Context, input *codeartifact.DeletePackageVersionsInput) *CodeartifactDeletePackageVersionsFuture

	DeleteRepository(ctx workflow.Context, input *codeartifact.DeleteRepositoryInput) (*codeartifact.DeleteRepositoryOutput, error)
	DeleteRepositoryAsync(ctx workflow.Context, input *codeartifact.DeleteRepositoryInput) *CodeartifactDeleteRepositoryFuture

	DeleteRepositoryPermissionsPolicy(ctx workflow.Context, input *codeartifact.DeleteRepositoryPermissionsPolicyInput) (*codeartifact.DeleteRepositoryPermissionsPolicyOutput, error)
	DeleteRepositoryPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.DeleteRepositoryPermissionsPolicyInput) *CodeartifactDeleteRepositoryPermissionsPolicyFuture

	DescribeDomain(ctx workflow.Context, input *codeartifact.DescribeDomainInput) (*codeartifact.DescribeDomainOutput, error)
	DescribeDomainAsync(ctx workflow.Context, input *codeartifact.DescribeDomainInput) *CodeartifactDescribeDomainFuture

	DescribePackageVersion(ctx workflow.Context, input *codeartifact.DescribePackageVersionInput) (*codeartifact.DescribePackageVersionOutput, error)
	DescribePackageVersionAsync(ctx workflow.Context, input *codeartifact.DescribePackageVersionInput) *CodeartifactDescribePackageVersionFuture

	DescribeRepository(ctx workflow.Context, input *codeartifact.DescribeRepositoryInput) (*codeartifact.DescribeRepositoryOutput, error)
	DescribeRepositoryAsync(ctx workflow.Context, input *codeartifact.DescribeRepositoryInput) *CodeartifactDescribeRepositoryFuture

	DisassociateExternalConnection(ctx workflow.Context, input *codeartifact.DisassociateExternalConnectionInput) (*codeartifact.DisassociateExternalConnectionOutput, error)
	DisassociateExternalConnectionAsync(ctx workflow.Context, input *codeartifact.DisassociateExternalConnectionInput) *CodeartifactDisassociateExternalConnectionFuture

	DisposePackageVersions(ctx workflow.Context, input *codeartifact.DisposePackageVersionsInput) (*codeartifact.DisposePackageVersionsOutput, error)
	DisposePackageVersionsAsync(ctx workflow.Context, input *codeartifact.DisposePackageVersionsInput) *CodeartifactDisposePackageVersionsFuture

	GetAuthorizationToken(ctx workflow.Context, input *codeartifact.GetAuthorizationTokenInput) (*codeartifact.GetAuthorizationTokenOutput, error)
	GetAuthorizationTokenAsync(ctx workflow.Context, input *codeartifact.GetAuthorizationTokenInput) *CodeartifactGetAuthorizationTokenFuture

	GetDomainPermissionsPolicy(ctx workflow.Context, input *codeartifact.GetDomainPermissionsPolicyInput) (*codeartifact.GetDomainPermissionsPolicyOutput, error)
	GetDomainPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.GetDomainPermissionsPolicyInput) *CodeartifactGetDomainPermissionsPolicyFuture

	GetPackageVersionAsset(ctx workflow.Context, input *codeartifact.GetPackageVersionAssetInput) (*codeartifact.GetPackageVersionAssetOutput, error)
	GetPackageVersionAssetAsync(ctx workflow.Context, input *codeartifact.GetPackageVersionAssetInput) *CodeartifactGetPackageVersionAssetFuture

	GetPackageVersionReadme(ctx workflow.Context, input *codeartifact.GetPackageVersionReadmeInput) (*codeartifact.GetPackageVersionReadmeOutput, error)
	GetPackageVersionReadmeAsync(ctx workflow.Context, input *codeartifact.GetPackageVersionReadmeInput) *CodeartifactGetPackageVersionReadmeFuture

	GetRepositoryEndpoint(ctx workflow.Context, input *codeartifact.GetRepositoryEndpointInput) (*codeartifact.GetRepositoryEndpointOutput, error)
	GetRepositoryEndpointAsync(ctx workflow.Context, input *codeartifact.GetRepositoryEndpointInput) *CodeartifactGetRepositoryEndpointFuture

	GetRepositoryPermissionsPolicy(ctx workflow.Context, input *codeartifact.GetRepositoryPermissionsPolicyInput) (*codeartifact.GetRepositoryPermissionsPolicyOutput, error)
	GetRepositoryPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.GetRepositoryPermissionsPolicyInput) *CodeartifactGetRepositoryPermissionsPolicyFuture

	ListDomains(ctx workflow.Context, input *codeartifact.ListDomainsInput) (*codeartifact.ListDomainsOutput, error)
	ListDomainsAsync(ctx workflow.Context, input *codeartifact.ListDomainsInput) *CodeartifactListDomainsFuture

	ListPackageVersionAssets(ctx workflow.Context, input *codeartifact.ListPackageVersionAssetsInput) (*codeartifact.ListPackageVersionAssetsOutput, error)
	ListPackageVersionAssetsAsync(ctx workflow.Context, input *codeartifact.ListPackageVersionAssetsInput) *CodeartifactListPackageVersionAssetsFuture

	ListPackageVersionDependencies(ctx workflow.Context, input *codeartifact.ListPackageVersionDependenciesInput) (*codeartifact.ListPackageVersionDependenciesOutput, error)
	ListPackageVersionDependenciesAsync(ctx workflow.Context, input *codeartifact.ListPackageVersionDependenciesInput) *CodeartifactListPackageVersionDependenciesFuture

	ListPackageVersions(ctx workflow.Context, input *codeartifact.ListPackageVersionsInput) (*codeartifact.ListPackageVersionsOutput, error)
	ListPackageVersionsAsync(ctx workflow.Context, input *codeartifact.ListPackageVersionsInput) *CodeartifactListPackageVersionsFuture

	ListPackages(ctx workflow.Context, input *codeartifact.ListPackagesInput) (*codeartifact.ListPackagesOutput, error)
	ListPackagesAsync(ctx workflow.Context, input *codeartifact.ListPackagesInput) *CodeartifactListPackagesFuture

	ListRepositories(ctx workflow.Context, input *codeartifact.ListRepositoriesInput) (*codeartifact.ListRepositoriesOutput, error)
	ListRepositoriesAsync(ctx workflow.Context, input *codeartifact.ListRepositoriesInput) *CodeartifactListRepositoriesFuture

	ListRepositoriesInDomain(ctx workflow.Context, input *codeartifact.ListRepositoriesInDomainInput) (*codeartifact.ListRepositoriesInDomainOutput, error)
	ListRepositoriesInDomainAsync(ctx workflow.Context, input *codeartifact.ListRepositoriesInDomainInput) *CodeartifactListRepositoriesInDomainFuture

	PutDomainPermissionsPolicy(ctx workflow.Context, input *codeartifact.PutDomainPermissionsPolicyInput) (*codeartifact.PutDomainPermissionsPolicyOutput, error)
	PutDomainPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.PutDomainPermissionsPolicyInput) *CodeartifactPutDomainPermissionsPolicyFuture

	PutRepositoryPermissionsPolicy(ctx workflow.Context, input *codeartifact.PutRepositoryPermissionsPolicyInput) (*codeartifact.PutRepositoryPermissionsPolicyOutput, error)
	PutRepositoryPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.PutRepositoryPermissionsPolicyInput) *CodeartifactPutRepositoryPermissionsPolicyFuture

	UpdatePackageVersionsStatus(ctx workflow.Context, input *codeartifact.UpdatePackageVersionsStatusInput) (*codeartifact.UpdatePackageVersionsStatusOutput, error)
	UpdatePackageVersionsStatusAsync(ctx workflow.Context, input *codeartifact.UpdatePackageVersionsStatusInput) *CodeartifactUpdatePackageVersionsStatusFuture

	UpdateRepository(ctx workflow.Context, input *codeartifact.UpdateRepositoryInput) (*codeartifact.UpdateRepositoryOutput, error)
	UpdateRepositoryAsync(ctx workflow.Context, input *codeartifact.UpdateRepositoryInput) *CodeartifactUpdateRepositoryFuture
}

type CodeArtifactStub struct{}

func NewCodeArtifactStub() CodeArtifactClient {
	return &CodeArtifactStub{}
}

type CodeartifactAssociateExternalConnectionFuture struct {
	Future workflow.Future
}

func (r *CodeartifactAssociateExternalConnectionFuture) Get(ctx workflow.Context) (*codeartifact.AssociateExternalConnectionOutput, error) {
	var output codeartifact.AssociateExternalConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactCopyPackageVersionsFuture struct {
	Future workflow.Future
}

func (r *CodeartifactCopyPackageVersionsFuture) Get(ctx workflow.Context) (*codeartifact.CopyPackageVersionsOutput, error) {
	var output codeartifact.CopyPackageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactCreateDomainFuture struct {
	Future workflow.Future
}

func (r *CodeartifactCreateDomainFuture) Get(ctx workflow.Context) (*codeartifact.CreateDomainOutput, error) {
	var output codeartifact.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactCreateRepositoryFuture struct {
	Future workflow.Future
}

func (r *CodeartifactCreateRepositoryFuture) Get(ctx workflow.Context) (*codeartifact.CreateRepositoryOutput, error) {
	var output codeartifact.CreateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactDeleteDomainFuture struct {
	Future workflow.Future
}

func (r *CodeartifactDeleteDomainFuture) Get(ctx workflow.Context) (*codeartifact.DeleteDomainOutput, error) {
	var output codeartifact.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactDeleteDomainPermissionsPolicyFuture struct {
	Future workflow.Future
}

func (r *CodeartifactDeleteDomainPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.DeleteDomainPermissionsPolicyOutput, error) {
	var output codeartifact.DeleteDomainPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactDeletePackageVersionsFuture struct {
	Future workflow.Future
}

func (r *CodeartifactDeletePackageVersionsFuture) Get(ctx workflow.Context) (*codeartifact.DeletePackageVersionsOutput, error) {
	var output codeartifact.DeletePackageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactDeleteRepositoryFuture struct {
	Future workflow.Future
}

func (r *CodeartifactDeleteRepositoryFuture) Get(ctx workflow.Context) (*codeartifact.DeleteRepositoryOutput, error) {
	var output codeartifact.DeleteRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactDeleteRepositoryPermissionsPolicyFuture struct {
	Future workflow.Future
}

func (r *CodeartifactDeleteRepositoryPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.DeleteRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.DeleteRepositoryPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactDescribeDomainFuture struct {
	Future workflow.Future
}

func (r *CodeartifactDescribeDomainFuture) Get(ctx workflow.Context) (*codeartifact.DescribeDomainOutput, error) {
	var output codeartifact.DescribeDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactDescribePackageVersionFuture struct {
	Future workflow.Future
}

func (r *CodeartifactDescribePackageVersionFuture) Get(ctx workflow.Context) (*codeartifact.DescribePackageVersionOutput, error) {
	var output codeartifact.DescribePackageVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactDescribeRepositoryFuture struct {
	Future workflow.Future
}

func (r *CodeartifactDescribeRepositoryFuture) Get(ctx workflow.Context) (*codeartifact.DescribeRepositoryOutput, error) {
	var output codeartifact.DescribeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactDisassociateExternalConnectionFuture struct {
	Future workflow.Future
}

func (r *CodeartifactDisassociateExternalConnectionFuture) Get(ctx workflow.Context) (*codeartifact.DisassociateExternalConnectionOutput, error) {
	var output codeartifact.DisassociateExternalConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactDisposePackageVersionsFuture struct {
	Future workflow.Future
}

func (r *CodeartifactDisposePackageVersionsFuture) Get(ctx workflow.Context) (*codeartifact.DisposePackageVersionsOutput, error) {
	var output codeartifact.DisposePackageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactGetAuthorizationTokenFuture struct {
	Future workflow.Future
}

func (r *CodeartifactGetAuthorizationTokenFuture) Get(ctx workflow.Context) (*codeartifact.GetAuthorizationTokenOutput, error) {
	var output codeartifact.GetAuthorizationTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactGetDomainPermissionsPolicyFuture struct {
	Future workflow.Future
}

func (r *CodeartifactGetDomainPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.GetDomainPermissionsPolicyOutput, error) {
	var output codeartifact.GetDomainPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactGetPackageVersionAssetFuture struct {
	Future workflow.Future
}

func (r *CodeartifactGetPackageVersionAssetFuture) Get(ctx workflow.Context) (*codeartifact.GetPackageVersionAssetOutput, error) {
	var output codeartifact.GetPackageVersionAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactGetPackageVersionReadmeFuture struct {
	Future workflow.Future
}

func (r *CodeartifactGetPackageVersionReadmeFuture) Get(ctx workflow.Context) (*codeartifact.GetPackageVersionReadmeOutput, error) {
	var output codeartifact.GetPackageVersionReadmeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactGetRepositoryEndpointFuture struct {
	Future workflow.Future
}

func (r *CodeartifactGetRepositoryEndpointFuture) Get(ctx workflow.Context) (*codeartifact.GetRepositoryEndpointOutput, error) {
	var output codeartifact.GetRepositoryEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactGetRepositoryPermissionsPolicyFuture struct {
	Future workflow.Future
}

func (r *CodeartifactGetRepositoryPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.GetRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.GetRepositoryPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactListDomainsFuture struct {
	Future workflow.Future
}

func (r *CodeartifactListDomainsFuture) Get(ctx workflow.Context) (*codeartifact.ListDomainsOutput, error) {
	var output codeartifact.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactListPackageVersionAssetsFuture struct {
	Future workflow.Future
}

func (r *CodeartifactListPackageVersionAssetsFuture) Get(ctx workflow.Context) (*codeartifact.ListPackageVersionAssetsOutput, error) {
	var output codeartifact.ListPackageVersionAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactListPackageVersionDependenciesFuture struct {
	Future workflow.Future
}

func (r *CodeartifactListPackageVersionDependenciesFuture) Get(ctx workflow.Context) (*codeartifact.ListPackageVersionDependenciesOutput, error) {
	var output codeartifact.ListPackageVersionDependenciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactListPackageVersionsFuture struct {
	Future workflow.Future
}

func (r *CodeartifactListPackageVersionsFuture) Get(ctx workflow.Context) (*codeartifact.ListPackageVersionsOutput, error) {
	var output codeartifact.ListPackageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactListPackagesFuture struct {
	Future workflow.Future
}

func (r *CodeartifactListPackagesFuture) Get(ctx workflow.Context) (*codeartifact.ListPackagesOutput, error) {
	var output codeartifact.ListPackagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactListRepositoriesFuture struct {
	Future workflow.Future
}

func (r *CodeartifactListRepositoriesFuture) Get(ctx workflow.Context) (*codeartifact.ListRepositoriesOutput, error) {
	var output codeartifact.ListRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactListRepositoriesInDomainFuture struct {
	Future workflow.Future
}

func (r *CodeartifactListRepositoriesInDomainFuture) Get(ctx workflow.Context) (*codeartifact.ListRepositoriesInDomainOutput, error) {
	var output codeartifact.ListRepositoriesInDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactPutDomainPermissionsPolicyFuture struct {
	Future workflow.Future
}

func (r *CodeartifactPutDomainPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.PutDomainPermissionsPolicyOutput, error) {
	var output codeartifact.PutDomainPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactPutRepositoryPermissionsPolicyFuture struct {
	Future workflow.Future
}

func (r *CodeartifactPutRepositoryPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.PutRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.PutRepositoryPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactUpdatePackageVersionsStatusFuture struct {
	Future workflow.Future
}

func (r *CodeartifactUpdatePackageVersionsStatusFuture) Get(ctx workflow.Context) (*codeartifact.UpdatePackageVersionsStatusOutput, error) {
	var output codeartifact.UpdatePackageVersionsStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeartifactUpdateRepositoryFuture struct {
	Future workflow.Future
}

func (r *CodeartifactUpdateRepositoryFuture) Get(ctx workflow.Context) (*codeartifact.UpdateRepositoryOutput, error) {
	var output codeartifact.UpdateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) AssociateExternalConnection(ctx workflow.Context, input *codeartifact.AssociateExternalConnectionInput) (*codeartifact.AssociateExternalConnectionOutput, error) {
	var output codeartifact.AssociateExternalConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.AssociateExternalConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) AssociateExternalConnectionAsync(ctx workflow.Context, input *codeartifact.AssociateExternalConnectionInput) *CodeartifactAssociateExternalConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.AssociateExternalConnection", input)
	return &CodeartifactAssociateExternalConnectionFuture{Future: future}
}

func (a *CodeArtifactStub) CopyPackageVersions(ctx workflow.Context, input *codeartifact.CopyPackageVersionsInput) (*codeartifact.CopyPackageVersionsOutput, error) {
	var output codeartifact.CopyPackageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.CopyPackageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) CopyPackageVersionsAsync(ctx workflow.Context, input *codeartifact.CopyPackageVersionsInput) *CodeartifactCopyPackageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.CopyPackageVersions", input)
	return &CodeartifactCopyPackageVersionsFuture{Future: future}
}

func (a *CodeArtifactStub) CreateDomain(ctx workflow.Context, input *codeartifact.CreateDomainInput) (*codeartifact.CreateDomainOutput, error) {
	var output codeartifact.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) CreateDomainAsync(ctx workflow.Context, input *codeartifact.CreateDomainInput) *CodeartifactCreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.CreateDomain", input)
	return &CodeartifactCreateDomainFuture{Future: future}
}

func (a *CodeArtifactStub) CreateRepository(ctx workflow.Context, input *codeartifact.CreateRepositoryInput) (*codeartifact.CreateRepositoryOutput, error) {
	var output codeartifact.CreateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.CreateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) CreateRepositoryAsync(ctx workflow.Context, input *codeartifact.CreateRepositoryInput) *CodeartifactCreateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.CreateRepository", input)
	return &CodeartifactCreateRepositoryFuture{Future: future}
}

func (a *CodeArtifactStub) DeleteDomain(ctx workflow.Context, input *codeartifact.DeleteDomainInput) (*codeartifact.DeleteDomainOutput, error) {
	var output codeartifact.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) DeleteDomainAsync(ctx workflow.Context, input *codeartifact.DeleteDomainInput) *CodeartifactDeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.DeleteDomain", input)
	return &CodeartifactDeleteDomainFuture{Future: future}
}

func (a *CodeArtifactStub) DeleteDomainPermissionsPolicy(ctx workflow.Context, input *codeartifact.DeleteDomainPermissionsPolicyInput) (*codeartifact.DeleteDomainPermissionsPolicyOutput, error) {
	var output codeartifact.DeleteDomainPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.DeleteDomainPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) DeleteDomainPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.DeleteDomainPermissionsPolicyInput) *CodeartifactDeleteDomainPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.DeleteDomainPermissionsPolicy", input)
	return &CodeartifactDeleteDomainPermissionsPolicyFuture{Future: future}
}

func (a *CodeArtifactStub) DeletePackageVersions(ctx workflow.Context, input *codeartifact.DeletePackageVersionsInput) (*codeartifact.DeletePackageVersionsOutput, error) {
	var output codeartifact.DeletePackageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.DeletePackageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) DeletePackageVersionsAsync(ctx workflow.Context, input *codeartifact.DeletePackageVersionsInput) *CodeartifactDeletePackageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.DeletePackageVersions", input)
	return &CodeartifactDeletePackageVersionsFuture{Future: future}
}

func (a *CodeArtifactStub) DeleteRepository(ctx workflow.Context, input *codeartifact.DeleteRepositoryInput) (*codeartifact.DeleteRepositoryOutput, error) {
	var output codeartifact.DeleteRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.DeleteRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) DeleteRepositoryAsync(ctx workflow.Context, input *codeartifact.DeleteRepositoryInput) *CodeartifactDeleteRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.DeleteRepository", input)
	return &CodeartifactDeleteRepositoryFuture{Future: future}
}

func (a *CodeArtifactStub) DeleteRepositoryPermissionsPolicy(ctx workflow.Context, input *codeartifact.DeleteRepositoryPermissionsPolicyInput) (*codeartifact.DeleteRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.DeleteRepositoryPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.DeleteRepositoryPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) DeleteRepositoryPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.DeleteRepositoryPermissionsPolicyInput) *CodeartifactDeleteRepositoryPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.DeleteRepositoryPermissionsPolicy", input)
	return &CodeartifactDeleteRepositoryPermissionsPolicyFuture{Future: future}
}

func (a *CodeArtifactStub) DescribeDomain(ctx workflow.Context, input *codeartifact.DescribeDomainInput) (*codeartifact.DescribeDomainOutput, error) {
	var output codeartifact.DescribeDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.DescribeDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) DescribeDomainAsync(ctx workflow.Context, input *codeartifact.DescribeDomainInput) *CodeartifactDescribeDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.DescribeDomain", input)
	return &CodeartifactDescribeDomainFuture{Future: future}
}

func (a *CodeArtifactStub) DescribePackageVersion(ctx workflow.Context, input *codeartifact.DescribePackageVersionInput) (*codeartifact.DescribePackageVersionOutput, error) {
	var output codeartifact.DescribePackageVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.DescribePackageVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) DescribePackageVersionAsync(ctx workflow.Context, input *codeartifact.DescribePackageVersionInput) *CodeartifactDescribePackageVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.DescribePackageVersion", input)
	return &CodeartifactDescribePackageVersionFuture{Future: future}
}

func (a *CodeArtifactStub) DescribeRepository(ctx workflow.Context, input *codeartifact.DescribeRepositoryInput) (*codeartifact.DescribeRepositoryOutput, error) {
	var output codeartifact.DescribeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.DescribeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) DescribeRepositoryAsync(ctx workflow.Context, input *codeartifact.DescribeRepositoryInput) *CodeartifactDescribeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.DescribeRepository", input)
	return &CodeartifactDescribeRepositoryFuture{Future: future}
}

func (a *CodeArtifactStub) DisassociateExternalConnection(ctx workflow.Context, input *codeartifact.DisassociateExternalConnectionInput) (*codeartifact.DisassociateExternalConnectionOutput, error) {
	var output codeartifact.DisassociateExternalConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.DisassociateExternalConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) DisassociateExternalConnectionAsync(ctx workflow.Context, input *codeartifact.DisassociateExternalConnectionInput) *CodeartifactDisassociateExternalConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.DisassociateExternalConnection", input)
	return &CodeartifactDisassociateExternalConnectionFuture{Future: future}
}

func (a *CodeArtifactStub) DisposePackageVersions(ctx workflow.Context, input *codeartifact.DisposePackageVersionsInput) (*codeartifact.DisposePackageVersionsOutput, error) {
	var output codeartifact.DisposePackageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.DisposePackageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) DisposePackageVersionsAsync(ctx workflow.Context, input *codeartifact.DisposePackageVersionsInput) *CodeartifactDisposePackageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.DisposePackageVersions", input)
	return &CodeartifactDisposePackageVersionsFuture{Future: future}
}

func (a *CodeArtifactStub) GetAuthorizationToken(ctx workflow.Context, input *codeartifact.GetAuthorizationTokenInput) (*codeartifact.GetAuthorizationTokenOutput, error) {
	var output codeartifact.GetAuthorizationTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.GetAuthorizationToken", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) GetAuthorizationTokenAsync(ctx workflow.Context, input *codeartifact.GetAuthorizationTokenInput) *CodeartifactGetAuthorizationTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.GetAuthorizationToken", input)
	return &CodeartifactGetAuthorizationTokenFuture{Future: future}
}

func (a *CodeArtifactStub) GetDomainPermissionsPolicy(ctx workflow.Context, input *codeartifact.GetDomainPermissionsPolicyInput) (*codeartifact.GetDomainPermissionsPolicyOutput, error) {
	var output codeartifact.GetDomainPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.GetDomainPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) GetDomainPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.GetDomainPermissionsPolicyInput) *CodeartifactGetDomainPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.GetDomainPermissionsPolicy", input)
	return &CodeartifactGetDomainPermissionsPolicyFuture{Future: future}
}

func (a *CodeArtifactStub) GetPackageVersionAsset(ctx workflow.Context, input *codeartifact.GetPackageVersionAssetInput) (*codeartifact.GetPackageVersionAssetOutput, error) {
	var output codeartifact.GetPackageVersionAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.GetPackageVersionAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) GetPackageVersionAssetAsync(ctx workflow.Context, input *codeartifact.GetPackageVersionAssetInput) *CodeartifactGetPackageVersionAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.GetPackageVersionAsset", input)
	return &CodeartifactGetPackageVersionAssetFuture{Future: future}
}

func (a *CodeArtifactStub) GetPackageVersionReadme(ctx workflow.Context, input *codeartifact.GetPackageVersionReadmeInput) (*codeartifact.GetPackageVersionReadmeOutput, error) {
	var output codeartifact.GetPackageVersionReadmeOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.GetPackageVersionReadme", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) GetPackageVersionReadmeAsync(ctx workflow.Context, input *codeartifact.GetPackageVersionReadmeInput) *CodeartifactGetPackageVersionReadmeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.GetPackageVersionReadme", input)
	return &CodeartifactGetPackageVersionReadmeFuture{Future: future}
}

func (a *CodeArtifactStub) GetRepositoryEndpoint(ctx workflow.Context, input *codeartifact.GetRepositoryEndpointInput) (*codeartifact.GetRepositoryEndpointOutput, error) {
	var output codeartifact.GetRepositoryEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.GetRepositoryEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) GetRepositoryEndpointAsync(ctx workflow.Context, input *codeartifact.GetRepositoryEndpointInput) *CodeartifactGetRepositoryEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.GetRepositoryEndpoint", input)
	return &CodeartifactGetRepositoryEndpointFuture{Future: future}
}

func (a *CodeArtifactStub) GetRepositoryPermissionsPolicy(ctx workflow.Context, input *codeartifact.GetRepositoryPermissionsPolicyInput) (*codeartifact.GetRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.GetRepositoryPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.GetRepositoryPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) GetRepositoryPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.GetRepositoryPermissionsPolicyInput) *CodeartifactGetRepositoryPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.GetRepositoryPermissionsPolicy", input)
	return &CodeartifactGetRepositoryPermissionsPolicyFuture{Future: future}
}

func (a *CodeArtifactStub) ListDomains(ctx workflow.Context, input *codeartifact.ListDomainsInput) (*codeartifact.ListDomainsOutput, error) {
	var output codeartifact.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) ListDomainsAsync(ctx workflow.Context, input *codeartifact.ListDomainsInput) *CodeartifactListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListDomains", input)
	return &CodeartifactListDomainsFuture{Future: future}
}

func (a *CodeArtifactStub) ListPackageVersionAssets(ctx workflow.Context, input *codeartifact.ListPackageVersionAssetsInput) (*codeartifact.ListPackageVersionAssetsOutput, error) {
	var output codeartifact.ListPackageVersionAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListPackageVersionAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) ListPackageVersionAssetsAsync(ctx workflow.Context, input *codeartifact.ListPackageVersionAssetsInput) *CodeartifactListPackageVersionAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListPackageVersionAssets", input)
	return &CodeartifactListPackageVersionAssetsFuture{Future: future}
}

func (a *CodeArtifactStub) ListPackageVersionDependencies(ctx workflow.Context, input *codeartifact.ListPackageVersionDependenciesInput) (*codeartifact.ListPackageVersionDependenciesOutput, error) {
	var output codeartifact.ListPackageVersionDependenciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListPackageVersionDependencies", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) ListPackageVersionDependenciesAsync(ctx workflow.Context, input *codeartifact.ListPackageVersionDependenciesInput) *CodeartifactListPackageVersionDependenciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListPackageVersionDependencies", input)
	return &CodeartifactListPackageVersionDependenciesFuture{Future: future}
}

func (a *CodeArtifactStub) ListPackageVersions(ctx workflow.Context, input *codeartifact.ListPackageVersionsInput) (*codeartifact.ListPackageVersionsOutput, error) {
	var output codeartifact.ListPackageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListPackageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) ListPackageVersionsAsync(ctx workflow.Context, input *codeartifact.ListPackageVersionsInput) *CodeartifactListPackageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListPackageVersions", input)
	return &CodeartifactListPackageVersionsFuture{Future: future}
}

func (a *CodeArtifactStub) ListPackages(ctx workflow.Context, input *codeartifact.ListPackagesInput) (*codeartifact.ListPackagesOutput, error) {
	var output codeartifact.ListPackagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListPackages", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) ListPackagesAsync(ctx workflow.Context, input *codeartifact.ListPackagesInput) *CodeartifactListPackagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListPackages", input)
	return &CodeartifactListPackagesFuture{Future: future}
}

func (a *CodeArtifactStub) ListRepositories(ctx workflow.Context, input *codeartifact.ListRepositoriesInput) (*codeartifact.ListRepositoriesOutput, error) {
	var output codeartifact.ListRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) ListRepositoriesAsync(ctx workflow.Context, input *codeartifact.ListRepositoriesInput) *CodeartifactListRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListRepositories", input)
	return &CodeartifactListRepositoriesFuture{Future: future}
}

func (a *CodeArtifactStub) ListRepositoriesInDomain(ctx workflow.Context, input *codeartifact.ListRepositoriesInDomainInput) (*codeartifact.ListRepositoriesInDomainOutput, error) {
	var output codeartifact.ListRepositoriesInDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListRepositoriesInDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) ListRepositoriesInDomainAsync(ctx workflow.Context, input *codeartifact.ListRepositoriesInDomainInput) *CodeartifactListRepositoriesInDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.ListRepositoriesInDomain", input)
	return &CodeartifactListRepositoriesInDomainFuture{Future: future}
}

func (a *CodeArtifactStub) PutDomainPermissionsPolicy(ctx workflow.Context, input *codeartifact.PutDomainPermissionsPolicyInput) (*codeartifact.PutDomainPermissionsPolicyOutput, error) {
	var output codeartifact.PutDomainPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.PutDomainPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) PutDomainPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.PutDomainPermissionsPolicyInput) *CodeartifactPutDomainPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.PutDomainPermissionsPolicy", input)
	return &CodeartifactPutDomainPermissionsPolicyFuture{Future: future}
}

func (a *CodeArtifactStub) PutRepositoryPermissionsPolicy(ctx workflow.Context, input *codeartifact.PutRepositoryPermissionsPolicyInput) (*codeartifact.PutRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.PutRepositoryPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.PutRepositoryPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) PutRepositoryPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.PutRepositoryPermissionsPolicyInput) *CodeartifactPutRepositoryPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.PutRepositoryPermissionsPolicy", input)
	return &CodeartifactPutRepositoryPermissionsPolicyFuture{Future: future}
}

func (a *CodeArtifactStub) UpdatePackageVersionsStatus(ctx workflow.Context, input *codeartifact.UpdatePackageVersionsStatusInput) (*codeartifact.UpdatePackageVersionsStatusOutput, error) {
	var output codeartifact.UpdatePackageVersionsStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.UpdatePackageVersionsStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) UpdatePackageVersionsStatusAsync(ctx workflow.Context, input *codeartifact.UpdatePackageVersionsStatusInput) *CodeartifactUpdatePackageVersionsStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.UpdatePackageVersionsStatus", input)
	return &CodeartifactUpdatePackageVersionsStatusFuture{Future: future}
}

func (a *CodeArtifactStub) UpdateRepository(ctx workflow.Context, input *codeartifact.UpdateRepositoryInput) (*codeartifact.UpdateRepositoryOutput, error) {
	var output codeartifact.UpdateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codeartifact.UpdateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeArtifactStub) UpdateRepositoryAsync(ctx workflow.Context, input *codeartifact.UpdateRepositoryInput) *CodeartifactUpdateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codeartifact.UpdateRepository", input)
	return &CodeartifactUpdateRepositoryFuture{Future: future}
}
