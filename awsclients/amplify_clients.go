// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/amplify"
	"go.temporal.io/sdk/workflow"
)

type AmplifyClient interface {
	CreateApp(ctx workflow.Context, input *amplify.CreateAppInput) (*amplify.CreateAppOutput, error)
	CreateAppAsync(ctx workflow.Context, input *amplify.CreateAppInput) *AmplifyCreateAppFuture

	CreateBackendEnvironment(ctx workflow.Context, input *amplify.CreateBackendEnvironmentInput) (*amplify.CreateBackendEnvironmentOutput, error)
	CreateBackendEnvironmentAsync(ctx workflow.Context, input *amplify.CreateBackendEnvironmentInput) *AmplifyCreateBackendEnvironmentFuture

	CreateBranch(ctx workflow.Context, input *amplify.CreateBranchInput) (*amplify.CreateBranchOutput, error)
	CreateBranchAsync(ctx workflow.Context, input *amplify.CreateBranchInput) *AmplifyCreateBranchFuture

	CreateDeployment(ctx workflow.Context, input *amplify.CreateDeploymentInput) (*amplify.CreateDeploymentOutput, error)
	CreateDeploymentAsync(ctx workflow.Context, input *amplify.CreateDeploymentInput) *AmplifyCreateDeploymentFuture

	CreateDomainAssociation(ctx workflow.Context, input *amplify.CreateDomainAssociationInput) (*amplify.CreateDomainAssociationOutput, error)
	CreateDomainAssociationAsync(ctx workflow.Context, input *amplify.CreateDomainAssociationInput) *AmplifyCreateDomainAssociationFuture

	CreateWebhook(ctx workflow.Context, input *amplify.CreateWebhookInput) (*amplify.CreateWebhookOutput, error)
	CreateWebhookAsync(ctx workflow.Context, input *amplify.CreateWebhookInput) *AmplifyCreateWebhookFuture

	DeleteApp(ctx workflow.Context, input *amplify.DeleteAppInput) (*amplify.DeleteAppOutput, error)
	DeleteAppAsync(ctx workflow.Context, input *amplify.DeleteAppInput) *AmplifyDeleteAppFuture

	DeleteBackendEnvironment(ctx workflow.Context, input *amplify.DeleteBackendEnvironmentInput) (*amplify.DeleteBackendEnvironmentOutput, error)
	DeleteBackendEnvironmentAsync(ctx workflow.Context, input *amplify.DeleteBackendEnvironmentInput) *AmplifyDeleteBackendEnvironmentFuture

	DeleteBranch(ctx workflow.Context, input *amplify.DeleteBranchInput) (*amplify.DeleteBranchOutput, error)
	DeleteBranchAsync(ctx workflow.Context, input *amplify.DeleteBranchInput) *AmplifyDeleteBranchFuture

	DeleteDomainAssociation(ctx workflow.Context, input *amplify.DeleteDomainAssociationInput) (*amplify.DeleteDomainAssociationOutput, error)
	DeleteDomainAssociationAsync(ctx workflow.Context, input *amplify.DeleteDomainAssociationInput) *AmplifyDeleteDomainAssociationFuture

	DeleteJob(ctx workflow.Context, input *amplify.DeleteJobInput) (*amplify.DeleteJobOutput, error)
	DeleteJobAsync(ctx workflow.Context, input *amplify.DeleteJobInput) *AmplifyDeleteJobFuture

	DeleteWebhook(ctx workflow.Context, input *amplify.DeleteWebhookInput) (*amplify.DeleteWebhookOutput, error)
	DeleteWebhookAsync(ctx workflow.Context, input *amplify.DeleteWebhookInput) *AmplifyDeleteWebhookFuture

	GenerateAccessLogs(ctx workflow.Context, input *amplify.GenerateAccessLogsInput) (*amplify.GenerateAccessLogsOutput, error)
	GenerateAccessLogsAsync(ctx workflow.Context, input *amplify.GenerateAccessLogsInput) *AmplifyGenerateAccessLogsFuture

	GetApp(ctx workflow.Context, input *amplify.GetAppInput) (*amplify.GetAppOutput, error)
	GetAppAsync(ctx workflow.Context, input *amplify.GetAppInput) *AmplifyGetAppFuture

	GetArtifactUrl(ctx workflow.Context, input *amplify.GetArtifactUrlInput) (*amplify.GetArtifactUrlOutput, error)
	GetArtifactUrlAsync(ctx workflow.Context, input *amplify.GetArtifactUrlInput) *AmplifyGetArtifactUrlFuture

	GetBackendEnvironment(ctx workflow.Context, input *amplify.GetBackendEnvironmentInput) (*amplify.GetBackendEnvironmentOutput, error)
	GetBackendEnvironmentAsync(ctx workflow.Context, input *amplify.GetBackendEnvironmentInput) *AmplifyGetBackendEnvironmentFuture

	GetBranch(ctx workflow.Context, input *amplify.GetBranchInput) (*amplify.GetBranchOutput, error)
	GetBranchAsync(ctx workflow.Context, input *amplify.GetBranchInput) *AmplifyGetBranchFuture

	GetDomainAssociation(ctx workflow.Context, input *amplify.GetDomainAssociationInput) (*amplify.GetDomainAssociationOutput, error)
	GetDomainAssociationAsync(ctx workflow.Context, input *amplify.GetDomainAssociationInput) *AmplifyGetDomainAssociationFuture

	GetJob(ctx workflow.Context, input *amplify.GetJobInput) (*amplify.GetJobOutput, error)
	GetJobAsync(ctx workflow.Context, input *amplify.GetJobInput) *AmplifyGetJobFuture

	GetWebhook(ctx workflow.Context, input *amplify.GetWebhookInput) (*amplify.GetWebhookOutput, error)
	GetWebhookAsync(ctx workflow.Context, input *amplify.GetWebhookInput) *AmplifyGetWebhookFuture

	ListApps(ctx workflow.Context, input *amplify.ListAppsInput) (*amplify.ListAppsOutput, error)
	ListAppsAsync(ctx workflow.Context, input *amplify.ListAppsInput) *AmplifyListAppsFuture

	ListArtifacts(ctx workflow.Context, input *amplify.ListArtifactsInput) (*amplify.ListArtifactsOutput, error)
	ListArtifactsAsync(ctx workflow.Context, input *amplify.ListArtifactsInput) *AmplifyListArtifactsFuture

	ListBackendEnvironments(ctx workflow.Context, input *amplify.ListBackendEnvironmentsInput) (*amplify.ListBackendEnvironmentsOutput, error)
	ListBackendEnvironmentsAsync(ctx workflow.Context, input *amplify.ListBackendEnvironmentsInput) *AmplifyListBackendEnvironmentsFuture

	ListBranches(ctx workflow.Context, input *amplify.ListBranchesInput) (*amplify.ListBranchesOutput, error)
	ListBranchesAsync(ctx workflow.Context, input *amplify.ListBranchesInput) *AmplifyListBranchesFuture

	ListDomainAssociations(ctx workflow.Context, input *amplify.ListDomainAssociationsInput) (*amplify.ListDomainAssociationsOutput, error)
	ListDomainAssociationsAsync(ctx workflow.Context, input *amplify.ListDomainAssociationsInput) *AmplifyListDomainAssociationsFuture

	ListJobs(ctx workflow.Context, input *amplify.ListJobsInput) (*amplify.ListJobsOutput, error)
	ListJobsAsync(ctx workflow.Context, input *amplify.ListJobsInput) *AmplifyListJobsFuture

	ListTagsForResource(ctx workflow.Context, input *amplify.ListTagsForResourceInput) (*amplify.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *amplify.ListTagsForResourceInput) *AmplifyListTagsForResourceFuture

	ListWebhooks(ctx workflow.Context, input *amplify.ListWebhooksInput) (*amplify.ListWebhooksOutput, error)
	ListWebhooksAsync(ctx workflow.Context, input *amplify.ListWebhooksInput) *AmplifyListWebhooksFuture

	StartDeployment(ctx workflow.Context, input *amplify.StartDeploymentInput) (*amplify.StartDeploymentOutput, error)
	StartDeploymentAsync(ctx workflow.Context, input *amplify.StartDeploymentInput) *AmplifyStartDeploymentFuture

	StartJob(ctx workflow.Context, input *amplify.StartJobInput) (*amplify.StartJobOutput, error)
	StartJobAsync(ctx workflow.Context, input *amplify.StartJobInput) *AmplifyStartJobFuture

	StopJob(ctx workflow.Context, input *amplify.StopJobInput) (*amplify.StopJobOutput, error)
	StopJobAsync(ctx workflow.Context, input *amplify.StopJobInput) *AmplifyStopJobFuture

	TagResource(ctx workflow.Context, input *amplify.TagResourceInput) (*amplify.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *amplify.TagResourceInput) *AmplifyTagResourceFuture

	UntagResource(ctx workflow.Context, input *amplify.UntagResourceInput) (*amplify.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *amplify.UntagResourceInput) *AmplifyUntagResourceFuture

	UpdateApp(ctx workflow.Context, input *amplify.UpdateAppInput) (*amplify.UpdateAppOutput, error)
	UpdateAppAsync(ctx workflow.Context, input *amplify.UpdateAppInput) *AmplifyUpdateAppFuture

	UpdateBranch(ctx workflow.Context, input *amplify.UpdateBranchInput) (*amplify.UpdateBranchOutput, error)
	UpdateBranchAsync(ctx workflow.Context, input *amplify.UpdateBranchInput) *AmplifyUpdateBranchFuture

	UpdateDomainAssociation(ctx workflow.Context, input *amplify.UpdateDomainAssociationInput) (*amplify.UpdateDomainAssociationOutput, error)
	UpdateDomainAssociationAsync(ctx workflow.Context, input *amplify.UpdateDomainAssociationInput) *AmplifyUpdateDomainAssociationFuture

	UpdateWebhook(ctx workflow.Context, input *amplify.UpdateWebhookInput) (*amplify.UpdateWebhookOutput, error)
	UpdateWebhookAsync(ctx workflow.Context, input *amplify.UpdateWebhookInput) *AmplifyUpdateWebhookFuture
}

type AmplifyStub struct{}

func NewAmplifyStub() AmplifyClient {
	return &AmplifyStub{}
}

type AmplifyCreateAppFuture struct {
	Future workflow.Future
}

func (r *AmplifyCreateAppFuture) Get(ctx workflow.Context) (*amplify.CreateAppOutput, error) {
	var output amplify.CreateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyCreateBackendEnvironmentFuture struct {
	Future workflow.Future
}

func (r *AmplifyCreateBackendEnvironmentFuture) Get(ctx workflow.Context) (*amplify.CreateBackendEnvironmentOutput, error) {
	var output amplify.CreateBackendEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyCreateBranchFuture struct {
	Future workflow.Future
}

func (r *AmplifyCreateBranchFuture) Get(ctx workflow.Context) (*amplify.CreateBranchOutput, error) {
	var output amplify.CreateBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyCreateDeploymentFuture struct {
	Future workflow.Future
}

func (r *AmplifyCreateDeploymentFuture) Get(ctx workflow.Context) (*amplify.CreateDeploymentOutput, error) {
	var output amplify.CreateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyCreateDomainAssociationFuture struct {
	Future workflow.Future
}

func (r *AmplifyCreateDomainAssociationFuture) Get(ctx workflow.Context) (*amplify.CreateDomainAssociationOutput, error) {
	var output amplify.CreateDomainAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyCreateWebhookFuture struct {
	Future workflow.Future
}

func (r *AmplifyCreateWebhookFuture) Get(ctx workflow.Context) (*amplify.CreateWebhookOutput, error) {
	var output amplify.CreateWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyDeleteAppFuture struct {
	Future workflow.Future
}

func (r *AmplifyDeleteAppFuture) Get(ctx workflow.Context) (*amplify.DeleteAppOutput, error) {
	var output amplify.DeleteAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyDeleteBackendEnvironmentFuture struct {
	Future workflow.Future
}

func (r *AmplifyDeleteBackendEnvironmentFuture) Get(ctx workflow.Context) (*amplify.DeleteBackendEnvironmentOutput, error) {
	var output amplify.DeleteBackendEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyDeleteBranchFuture struct {
	Future workflow.Future
}

func (r *AmplifyDeleteBranchFuture) Get(ctx workflow.Context) (*amplify.DeleteBranchOutput, error) {
	var output amplify.DeleteBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyDeleteDomainAssociationFuture struct {
	Future workflow.Future
}

func (r *AmplifyDeleteDomainAssociationFuture) Get(ctx workflow.Context) (*amplify.DeleteDomainAssociationOutput, error) {
	var output amplify.DeleteDomainAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyDeleteJobFuture struct {
	Future workflow.Future
}

func (r *AmplifyDeleteJobFuture) Get(ctx workflow.Context) (*amplify.DeleteJobOutput, error) {
	var output amplify.DeleteJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyDeleteWebhookFuture struct {
	Future workflow.Future
}

func (r *AmplifyDeleteWebhookFuture) Get(ctx workflow.Context) (*amplify.DeleteWebhookOutput, error) {
	var output amplify.DeleteWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGenerateAccessLogsFuture struct {
	Future workflow.Future
}

func (r *AmplifyGenerateAccessLogsFuture) Get(ctx workflow.Context) (*amplify.GenerateAccessLogsOutput, error) {
	var output amplify.GenerateAccessLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetAppFuture struct {
	Future workflow.Future
}

func (r *AmplifyGetAppFuture) Get(ctx workflow.Context) (*amplify.GetAppOutput, error) {
	var output amplify.GetAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetArtifactUrlFuture struct {
	Future workflow.Future
}

func (r *AmplifyGetArtifactUrlFuture) Get(ctx workflow.Context) (*amplify.GetArtifactUrlOutput, error) {
	var output amplify.GetArtifactUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetBackendEnvironmentFuture struct {
	Future workflow.Future
}

func (r *AmplifyGetBackendEnvironmentFuture) Get(ctx workflow.Context) (*amplify.GetBackendEnvironmentOutput, error) {
	var output amplify.GetBackendEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetBranchFuture struct {
	Future workflow.Future
}

func (r *AmplifyGetBranchFuture) Get(ctx workflow.Context) (*amplify.GetBranchOutput, error) {
	var output amplify.GetBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetDomainAssociationFuture struct {
	Future workflow.Future
}

func (r *AmplifyGetDomainAssociationFuture) Get(ctx workflow.Context) (*amplify.GetDomainAssociationOutput, error) {
	var output amplify.GetDomainAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetJobFuture struct {
	Future workflow.Future
}

func (r *AmplifyGetJobFuture) Get(ctx workflow.Context) (*amplify.GetJobOutput, error) {
	var output amplify.GetJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetWebhookFuture struct {
	Future workflow.Future
}

func (r *AmplifyGetWebhookFuture) Get(ctx workflow.Context) (*amplify.GetWebhookOutput, error) {
	var output amplify.GetWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListAppsFuture struct {
	Future workflow.Future
}

func (r *AmplifyListAppsFuture) Get(ctx workflow.Context) (*amplify.ListAppsOutput, error) {
	var output amplify.ListAppsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListArtifactsFuture struct {
	Future workflow.Future
}

func (r *AmplifyListArtifactsFuture) Get(ctx workflow.Context) (*amplify.ListArtifactsOutput, error) {
	var output amplify.ListArtifactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListBackendEnvironmentsFuture struct {
	Future workflow.Future
}

func (r *AmplifyListBackendEnvironmentsFuture) Get(ctx workflow.Context) (*amplify.ListBackendEnvironmentsOutput, error) {
	var output amplify.ListBackendEnvironmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListBranchesFuture struct {
	Future workflow.Future
}

func (r *AmplifyListBranchesFuture) Get(ctx workflow.Context) (*amplify.ListBranchesOutput, error) {
	var output amplify.ListBranchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListDomainAssociationsFuture struct {
	Future workflow.Future
}

func (r *AmplifyListDomainAssociationsFuture) Get(ctx workflow.Context) (*amplify.ListDomainAssociationsOutput, error) {
	var output amplify.ListDomainAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListJobsFuture struct {
	Future workflow.Future
}

func (r *AmplifyListJobsFuture) Get(ctx workflow.Context) (*amplify.ListJobsOutput, error) {
	var output amplify.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *AmplifyListTagsForResourceFuture) Get(ctx workflow.Context) (*amplify.ListTagsForResourceOutput, error) {
	var output amplify.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListWebhooksFuture struct {
	Future workflow.Future
}

func (r *AmplifyListWebhooksFuture) Get(ctx workflow.Context) (*amplify.ListWebhooksOutput, error) {
	var output amplify.ListWebhooksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyStartDeploymentFuture struct {
	Future workflow.Future
}

func (r *AmplifyStartDeploymentFuture) Get(ctx workflow.Context) (*amplify.StartDeploymentOutput, error) {
	var output amplify.StartDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyStartJobFuture struct {
	Future workflow.Future
}

func (r *AmplifyStartJobFuture) Get(ctx workflow.Context) (*amplify.StartJobOutput, error) {
	var output amplify.StartJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyStopJobFuture struct {
	Future workflow.Future
}

func (r *AmplifyStopJobFuture) Get(ctx workflow.Context) (*amplify.StopJobOutput, error) {
	var output amplify.StopJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyTagResourceFuture struct {
	Future workflow.Future
}

func (r *AmplifyTagResourceFuture) Get(ctx workflow.Context) (*amplify.TagResourceOutput, error) {
	var output amplify.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyUntagResourceFuture struct {
	Future workflow.Future
}

func (r *AmplifyUntagResourceFuture) Get(ctx workflow.Context) (*amplify.UntagResourceOutput, error) {
	var output amplify.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyUpdateAppFuture struct {
	Future workflow.Future
}

func (r *AmplifyUpdateAppFuture) Get(ctx workflow.Context) (*amplify.UpdateAppOutput, error) {
	var output amplify.UpdateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyUpdateBranchFuture struct {
	Future workflow.Future
}

func (r *AmplifyUpdateBranchFuture) Get(ctx workflow.Context) (*amplify.UpdateBranchOutput, error) {
	var output amplify.UpdateBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyUpdateDomainAssociationFuture struct {
	Future workflow.Future
}

func (r *AmplifyUpdateDomainAssociationFuture) Get(ctx workflow.Context) (*amplify.UpdateDomainAssociationOutput, error) {
	var output amplify.UpdateDomainAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyUpdateWebhookFuture struct {
	Future workflow.Future
}

func (r *AmplifyUpdateWebhookFuture) Get(ctx workflow.Context) (*amplify.UpdateWebhookOutput, error) {
	var output amplify.UpdateWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) CreateApp(ctx workflow.Context, input *amplify.CreateAppInput) (*amplify.CreateAppOutput, error) {
	var output amplify.CreateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.CreateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) CreateAppAsync(ctx workflow.Context, input *amplify.CreateAppInput) *AmplifyCreateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.CreateApp", input)
	return &AmplifyCreateAppFuture{Future: future}
}

func (a *AmplifyStub) CreateBackendEnvironment(ctx workflow.Context, input *amplify.CreateBackendEnvironmentInput) (*amplify.CreateBackendEnvironmentOutput, error) {
	var output amplify.CreateBackendEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.CreateBackendEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) CreateBackendEnvironmentAsync(ctx workflow.Context, input *amplify.CreateBackendEnvironmentInput) *AmplifyCreateBackendEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.CreateBackendEnvironment", input)
	return &AmplifyCreateBackendEnvironmentFuture{Future: future}
}

func (a *AmplifyStub) CreateBranch(ctx workflow.Context, input *amplify.CreateBranchInput) (*amplify.CreateBranchOutput, error) {
	var output amplify.CreateBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.CreateBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) CreateBranchAsync(ctx workflow.Context, input *amplify.CreateBranchInput) *AmplifyCreateBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.CreateBranch", input)
	return &AmplifyCreateBranchFuture{Future: future}
}

func (a *AmplifyStub) CreateDeployment(ctx workflow.Context, input *amplify.CreateDeploymentInput) (*amplify.CreateDeploymentOutput, error) {
	var output amplify.CreateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) CreateDeploymentAsync(ctx workflow.Context, input *amplify.CreateDeploymentInput) *AmplifyCreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.CreateDeployment", input)
	return &AmplifyCreateDeploymentFuture{Future: future}
}

func (a *AmplifyStub) CreateDomainAssociation(ctx workflow.Context, input *amplify.CreateDomainAssociationInput) (*amplify.CreateDomainAssociationOutput, error) {
	var output amplify.CreateDomainAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.CreateDomainAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) CreateDomainAssociationAsync(ctx workflow.Context, input *amplify.CreateDomainAssociationInput) *AmplifyCreateDomainAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.CreateDomainAssociation", input)
	return &AmplifyCreateDomainAssociationFuture{Future: future}
}

func (a *AmplifyStub) CreateWebhook(ctx workflow.Context, input *amplify.CreateWebhookInput) (*amplify.CreateWebhookOutput, error) {
	var output amplify.CreateWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.CreateWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) CreateWebhookAsync(ctx workflow.Context, input *amplify.CreateWebhookInput) *AmplifyCreateWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.CreateWebhook", input)
	return &AmplifyCreateWebhookFuture{Future: future}
}

func (a *AmplifyStub) DeleteApp(ctx workflow.Context, input *amplify.DeleteAppInput) (*amplify.DeleteAppOutput, error) {
	var output amplify.DeleteAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.DeleteApp", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) DeleteAppAsync(ctx workflow.Context, input *amplify.DeleteAppInput) *AmplifyDeleteAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.DeleteApp", input)
	return &AmplifyDeleteAppFuture{Future: future}
}

func (a *AmplifyStub) DeleteBackendEnvironment(ctx workflow.Context, input *amplify.DeleteBackendEnvironmentInput) (*amplify.DeleteBackendEnvironmentOutput, error) {
	var output amplify.DeleteBackendEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.DeleteBackendEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) DeleteBackendEnvironmentAsync(ctx workflow.Context, input *amplify.DeleteBackendEnvironmentInput) *AmplifyDeleteBackendEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.DeleteBackendEnvironment", input)
	return &AmplifyDeleteBackendEnvironmentFuture{Future: future}
}

func (a *AmplifyStub) DeleteBranch(ctx workflow.Context, input *amplify.DeleteBranchInput) (*amplify.DeleteBranchOutput, error) {
	var output amplify.DeleteBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.DeleteBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) DeleteBranchAsync(ctx workflow.Context, input *amplify.DeleteBranchInput) *AmplifyDeleteBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.DeleteBranch", input)
	return &AmplifyDeleteBranchFuture{Future: future}
}

func (a *AmplifyStub) DeleteDomainAssociation(ctx workflow.Context, input *amplify.DeleteDomainAssociationInput) (*amplify.DeleteDomainAssociationOutput, error) {
	var output amplify.DeleteDomainAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.DeleteDomainAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) DeleteDomainAssociationAsync(ctx workflow.Context, input *amplify.DeleteDomainAssociationInput) *AmplifyDeleteDomainAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.DeleteDomainAssociation", input)
	return &AmplifyDeleteDomainAssociationFuture{Future: future}
}

func (a *AmplifyStub) DeleteJob(ctx workflow.Context, input *amplify.DeleteJobInput) (*amplify.DeleteJobOutput, error) {
	var output amplify.DeleteJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.DeleteJob", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) DeleteJobAsync(ctx workflow.Context, input *amplify.DeleteJobInput) *AmplifyDeleteJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.DeleteJob", input)
	return &AmplifyDeleteJobFuture{Future: future}
}

func (a *AmplifyStub) DeleteWebhook(ctx workflow.Context, input *amplify.DeleteWebhookInput) (*amplify.DeleteWebhookOutput, error) {
	var output amplify.DeleteWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.DeleteWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) DeleteWebhookAsync(ctx workflow.Context, input *amplify.DeleteWebhookInput) *AmplifyDeleteWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.DeleteWebhook", input)
	return &AmplifyDeleteWebhookFuture{Future: future}
}

func (a *AmplifyStub) GenerateAccessLogs(ctx workflow.Context, input *amplify.GenerateAccessLogsInput) (*amplify.GenerateAccessLogsOutput, error) {
	var output amplify.GenerateAccessLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.GenerateAccessLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) GenerateAccessLogsAsync(ctx workflow.Context, input *amplify.GenerateAccessLogsInput) *AmplifyGenerateAccessLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.GenerateAccessLogs", input)
	return &AmplifyGenerateAccessLogsFuture{Future: future}
}

func (a *AmplifyStub) GetApp(ctx workflow.Context, input *amplify.GetAppInput) (*amplify.GetAppOutput, error) {
	var output amplify.GetAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.GetApp", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) GetAppAsync(ctx workflow.Context, input *amplify.GetAppInput) *AmplifyGetAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.GetApp", input)
	return &AmplifyGetAppFuture{Future: future}
}

func (a *AmplifyStub) GetArtifactUrl(ctx workflow.Context, input *amplify.GetArtifactUrlInput) (*amplify.GetArtifactUrlOutput, error) {
	var output amplify.GetArtifactUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.GetArtifactUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) GetArtifactUrlAsync(ctx workflow.Context, input *amplify.GetArtifactUrlInput) *AmplifyGetArtifactUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.GetArtifactUrl", input)
	return &AmplifyGetArtifactUrlFuture{Future: future}
}

func (a *AmplifyStub) GetBackendEnvironment(ctx workflow.Context, input *amplify.GetBackendEnvironmentInput) (*amplify.GetBackendEnvironmentOutput, error) {
	var output amplify.GetBackendEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.GetBackendEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) GetBackendEnvironmentAsync(ctx workflow.Context, input *amplify.GetBackendEnvironmentInput) *AmplifyGetBackendEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.GetBackendEnvironment", input)
	return &AmplifyGetBackendEnvironmentFuture{Future: future}
}

func (a *AmplifyStub) GetBranch(ctx workflow.Context, input *amplify.GetBranchInput) (*amplify.GetBranchOutput, error) {
	var output amplify.GetBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.GetBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) GetBranchAsync(ctx workflow.Context, input *amplify.GetBranchInput) *AmplifyGetBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.GetBranch", input)
	return &AmplifyGetBranchFuture{Future: future}
}

func (a *AmplifyStub) GetDomainAssociation(ctx workflow.Context, input *amplify.GetDomainAssociationInput) (*amplify.GetDomainAssociationOutput, error) {
	var output amplify.GetDomainAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.GetDomainAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) GetDomainAssociationAsync(ctx workflow.Context, input *amplify.GetDomainAssociationInput) *AmplifyGetDomainAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.GetDomainAssociation", input)
	return &AmplifyGetDomainAssociationFuture{Future: future}
}

func (a *AmplifyStub) GetJob(ctx workflow.Context, input *amplify.GetJobInput) (*amplify.GetJobOutput, error) {
	var output amplify.GetJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.GetJob", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) GetJobAsync(ctx workflow.Context, input *amplify.GetJobInput) *AmplifyGetJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.GetJob", input)
	return &AmplifyGetJobFuture{Future: future}
}

func (a *AmplifyStub) GetWebhook(ctx workflow.Context, input *amplify.GetWebhookInput) (*amplify.GetWebhookOutput, error) {
	var output amplify.GetWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.GetWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) GetWebhookAsync(ctx workflow.Context, input *amplify.GetWebhookInput) *AmplifyGetWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.GetWebhook", input)
	return &AmplifyGetWebhookFuture{Future: future}
}

func (a *AmplifyStub) ListApps(ctx workflow.Context, input *amplify.ListAppsInput) (*amplify.ListAppsOutput, error) {
	var output amplify.ListAppsOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.ListApps", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) ListAppsAsync(ctx workflow.Context, input *amplify.ListAppsInput) *AmplifyListAppsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.ListApps", input)
	return &AmplifyListAppsFuture{Future: future}
}

func (a *AmplifyStub) ListArtifacts(ctx workflow.Context, input *amplify.ListArtifactsInput) (*amplify.ListArtifactsOutput, error) {
	var output amplify.ListArtifactsOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.ListArtifacts", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) ListArtifactsAsync(ctx workflow.Context, input *amplify.ListArtifactsInput) *AmplifyListArtifactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.ListArtifacts", input)
	return &AmplifyListArtifactsFuture{Future: future}
}

func (a *AmplifyStub) ListBackendEnvironments(ctx workflow.Context, input *amplify.ListBackendEnvironmentsInput) (*amplify.ListBackendEnvironmentsOutput, error) {
	var output amplify.ListBackendEnvironmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.ListBackendEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) ListBackendEnvironmentsAsync(ctx workflow.Context, input *amplify.ListBackendEnvironmentsInput) *AmplifyListBackendEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.ListBackendEnvironments", input)
	return &AmplifyListBackendEnvironmentsFuture{Future: future}
}

func (a *AmplifyStub) ListBranches(ctx workflow.Context, input *amplify.ListBranchesInput) (*amplify.ListBranchesOutput, error) {
	var output amplify.ListBranchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.ListBranches", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) ListBranchesAsync(ctx workflow.Context, input *amplify.ListBranchesInput) *AmplifyListBranchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.ListBranches", input)
	return &AmplifyListBranchesFuture{Future: future}
}

func (a *AmplifyStub) ListDomainAssociations(ctx workflow.Context, input *amplify.ListDomainAssociationsInput) (*amplify.ListDomainAssociationsOutput, error) {
	var output amplify.ListDomainAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.ListDomainAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) ListDomainAssociationsAsync(ctx workflow.Context, input *amplify.ListDomainAssociationsInput) *AmplifyListDomainAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.ListDomainAssociations", input)
	return &AmplifyListDomainAssociationsFuture{Future: future}
}

func (a *AmplifyStub) ListJobs(ctx workflow.Context, input *amplify.ListJobsInput) (*amplify.ListJobsOutput, error) {
	var output amplify.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) ListJobsAsync(ctx workflow.Context, input *amplify.ListJobsInput) *AmplifyListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.ListJobs", input)
	return &AmplifyListJobsFuture{Future: future}
}

func (a *AmplifyStub) ListTagsForResource(ctx workflow.Context, input *amplify.ListTagsForResourceInput) (*amplify.ListTagsForResourceOutput, error) {
	var output amplify.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) ListTagsForResourceAsync(ctx workflow.Context, input *amplify.ListTagsForResourceInput) *AmplifyListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.ListTagsForResource", input)
	return &AmplifyListTagsForResourceFuture{Future: future}
}

func (a *AmplifyStub) ListWebhooks(ctx workflow.Context, input *amplify.ListWebhooksInput) (*amplify.ListWebhooksOutput, error) {
	var output amplify.ListWebhooksOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.ListWebhooks", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) ListWebhooksAsync(ctx workflow.Context, input *amplify.ListWebhooksInput) *AmplifyListWebhooksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.ListWebhooks", input)
	return &AmplifyListWebhooksFuture{Future: future}
}

func (a *AmplifyStub) StartDeployment(ctx workflow.Context, input *amplify.StartDeploymentInput) (*amplify.StartDeploymentOutput, error) {
	var output amplify.StartDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.StartDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) StartDeploymentAsync(ctx workflow.Context, input *amplify.StartDeploymentInput) *AmplifyStartDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.StartDeployment", input)
	return &AmplifyStartDeploymentFuture{Future: future}
}

func (a *AmplifyStub) StartJob(ctx workflow.Context, input *amplify.StartJobInput) (*amplify.StartJobOutput, error) {
	var output amplify.StartJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.StartJob", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) StartJobAsync(ctx workflow.Context, input *amplify.StartJobInput) *AmplifyStartJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.StartJob", input)
	return &AmplifyStartJobFuture{Future: future}
}

func (a *AmplifyStub) StopJob(ctx workflow.Context, input *amplify.StopJobInput) (*amplify.StopJobOutput, error) {
	var output amplify.StopJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.StopJob", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) StopJobAsync(ctx workflow.Context, input *amplify.StopJobInput) *AmplifyStopJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.StopJob", input)
	return &AmplifyStopJobFuture{Future: future}
}

func (a *AmplifyStub) TagResource(ctx workflow.Context, input *amplify.TagResourceInput) (*amplify.TagResourceOutput, error) {
	var output amplify.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) TagResourceAsync(ctx workflow.Context, input *amplify.TagResourceInput) *AmplifyTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.TagResource", input)
	return &AmplifyTagResourceFuture{Future: future}
}

func (a *AmplifyStub) UntagResource(ctx workflow.Context, input *amplify.UntagResourceInput) (*amplify.UntagResourceOutput, error) {
	var output amplify.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) UntagResourceAsync(ctx workflow.Context, input *amplify.UntagResourceInput) *AmplifyUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.UntagResource", input)
	return &AmplifyUntagResourceFuture{Future: future}
}

func (a *AmplifyStub) UpdateApp(ctx workflow.Context, input *amplify.UpdateAppInput) (*amplify.UpdateAppOutput, error) {
	var output amplify.UpdateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.UpdateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) UpdateAppAsync(ctx workflow.Context, input *amplify.UpdateAppInput) *AmplifyUpdateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.UpdateApp", input)
	return &AmplifyUpdateAppFuture{Future: future}
}

func (a *AmplifyStub) UpdateBranch(ctx workflow.Context, input *amplify.UpdateBranchInput) (*amplify.UpdateBranchOutput, error) {
	var output amplify.UpdateBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.UpdateBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) UpdateBranchAsync(ctx workflow.Context, input *amplify.UpdateBranchInput) *AmplifyUpdateBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.UpdateBranch", input)
	return &AmplifyUpdateBranchFuture{Future: future}
}

func (a *AmplifyStub) UpdateDomainAssociation(ctx workflow.Context, input *amplify.UpdateDomainAssociationInput) (*amplify.UpdateDomainAssociationOutput, error) {
	var output amplify.UpdateDomainAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.UpdateDomainAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) UpdateDomainAssociationAsync(ctx workflow.Context, input *amplify.UpdateDomainAssociationInput) *AmplifyUpdateDomainAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.UpdateDomainAssociation", input)
	return &AmplifyUpdateDomainAssociationFuture{Future: future}
}

func (a *AmplifyStub) UpdateWebhook(ctx workflow.Context, input *amplify.UpdateWebhookInput) (*amplify.UpdateWebhookOutput, error) {
	var output amplify.UpdateWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws.amplify.UpdateWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *AmplifyStub) UpdateWebhookAsync(ctx workflow.Context, input *amplify.UpdateWebhookInput) *AmplifyUpdateWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.amplify.UpdateWebhook", input)
	return &AmplifyUpdateWebhookFuture{Future: future}
}
