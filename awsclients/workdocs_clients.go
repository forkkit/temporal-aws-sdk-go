// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/workdocs"
	"go.temporal.io/sdk/workflow"
)

type WorkDocsClient interface {
	AbortDocumentVersionUpload(ctx workflow.Context, input *workdocs.AbortDocumentVersionUploadInput) (*workdocs.AbortDocumentVersionUploadOutput, error)
	AbortDocumentVersionUploadAsync(ctx workflow.Context, input *workdocs.AbortDocumentVersionUploadInput) *WorkdocsAbortDocumentVersionUploadFuture

	ActivateUser(ctx workflow.Context, input *workdocs.ActivateUserInput) (*workdocs.ActivateUserOutput, error)
	ActivateUserAsync(ctx workflow.Context, input *workdocs.ActivateUserInput) *WorkdocsActivateUserFuture

	AddResourcePermissions(ctx workflow.Context, input *workdocs.AddResourcePermissionsInput) (*workdocs.AddResourcePermissionsOutput, error)
	AddResourcePermissionsAsync(ctx workflow.Context, input *workdocs.AddResourcePermissionsInput) *WorkdocsAddResourcePermissionsFuture

	CreateComment(ctx workflow.Context, input *workdocs.CreateCommentInput) (*workdocs.CreateCommentOutput, error)
	CreateCommentAsync(ctx workflow.Context, input *workdocs.CreateCommentInput) *WorkdocsCreateCommentFuture

	CreateCustomMetadata(ctx workflow.Context, input *workdocs.CreateCustomMetadataInput) (*workdocs.CreateCustomMetadataOutput, error)
	CreateCustomMetadataAsync(ctx workflow.Context, input *workdocs.CreateCustomMetadataInput) *WorkdocsCreateCustomMetadataFuture

	CreateFolder(ctx workflow.Context, input *workdocs.CreateFolderInput) (*workdocs.CreateFolderOutput, error)
	CreateFolderAsync(ctx workflow.Context, input *workdocs.CreateFolderInput) *WorkdocsCreateFolderFuture

	CreateLabels(ctx workflow.Context, input *workdocs.CreateLabelsInput) (*workdocs.CreateLabelsOutput, error)
	CreateLabelsAsync(ctx workflow.Context, input *workdocs.CreateLabelsInput) *WorkdocsCreateLabelsFuture

	CreateNotificationSubscription(ctx workflow.Context, input *workdocs.CreateNotificationSubscriptionInput) (*workdocs.CreateNotificationSubscriptionOutput, error)
	CreateNotificationSubscriptionAsync(ctx workflow.Context, input *workdocs.CreateNotificationSubscriptionInput) *WorkdocsCreateNotificationSubscriptionFuture

	CreateUser(ctx workflow.Context, input *workdocs.CreateUserInput) (*workdocs.CreateUserOutput, error)
	CreateUserAsync(ctx workflow.Context, input *workdocs.CreateUserInput) *WorkdocsCreateUserFuture

	DeactivateUser(ctx workflow.Context, input *workdocs.DeactivateUserInput) (*workdocs.DeactivateUserOutput, error)
	DeactivateUserAsync(ctx workflow.Context, input *workdocs.DeactivateUserInput) *WorkdocsDeactivateUserFuture

	DeleteComment(ctx workflow.Context, input *workdocs.DeleteCommentInput) (*workdocs.DeleteCommentOutput, error)
	DeleteCommentAsync(ctx workflow.Context, input *workdocs.DeleteCommentInput) *WorkdocsDeleteCommentFuture

	DeleteCustomMetadata(ctx workflow.Context, input *workdocs.DeleteCustomMetadataInput) (*workdocs.DeleteCustomMetadataOutput, error)
	DeleteCustomMetadataAsync(ctx workflow.Context, input *workdocs.DeleteCustomMetadataInput) *WorkdocsDeleteCustomMetadataFuture

	DeleteDocument(ctx workflow.Context, input *workdocs.DeleteDocumentInput) (*workdocs.DeleteDocumentOutput, error)
	DeleteDocumentAsync(ctx workflow.Context, input *workdocs.DeleteDocumentInput) *WorkdocsDeleteDocumentFuture

	DeleteFolder(ctx workflow.Context, input *workdocs.DeleteFolderInput) (*workdocs.DeleteFolderOutput, error)
	DeleteFolderAsync(ctx workflow.Context, input *workdocs.DeleteFolderInput) *WorkdocsDeleteFolderFuture

	DeleteFolderContents(ctx workflow.Context, input *workdocs.DeleteFolderContentsInput) (*workdocs.DeleteFolderContentsOutput, error)
	DeleteFolderContentsAsync(ctx workflow.Context, input *workdocs.DeleteFolderContentsInput) *WorkdocsDeleteFolderContentsFuture

	DeleteLabels(ctx workflow.Context, input *workdocs.DeleteLabelsInput) (*workdocs.DeleteLabelsOutput, error)
	DeleteLabelsAsync(ctx workflow.Context, input *workdocs.DeleteLabelsInput) *WorkdocsDeleteLabelsFuture

	DeleteNotificationSubscription(ctx workflow.Context, input *workdocs.DeleteNotificationSubscriptionInput) (*workdocs.DeleteNotificationSubscriptionOutput, error)
	DeleteNotificationSubscriptionAsync(ctx workflow.Context, input *workdocs.DeleteNotificationSubscriptionInput) *WorkdocsDeleteNotificationSubscriptionFuture

	DeleteUser(ctx workflow.Context, input *workdocs.DeleteUserInput) (*workdocs.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *workdocs.DeleteUserInput) *WorkdocsDeleteUserFuture

	DescribeActivities(ctx workflow.Context, input *workdocs.DescribeActivitiesInput) (*workdocs.DescribeActivitiesOutput, error)
	DescribeActivitiesAsync(ctx workflow.Context, input *workdocs.DescribeActivitiesInput) *WorkdocsDescribeActivitiesFuture

	DescribeComments(ctx workflow.Context, input *workdocs.DescribeCommentsInput) (*workdocs.DescribeCommentsOutput, error)
	DescribeCommentsAsync(ctx workflow.Context, input *workdocs.DescribeCommentsInput) *WorkdocsDescribeCommentsFuture

	DescribeDocumentVersions(ctx workflow.Context, input *workdocs.DescribeDocumentVersionsInput) (*workdocs.DescribeDocumentVersionsOutput, error)
	DescribeDocumentVersionsAsync(ctx workflow.Context, input *workdocs.DescribeDocumentVersionsInput) *WorkdocsDescribeDocumentVersionsFuture

	DescribeFolderContents(ctx workflow.Context, input *workdocs.DescribeFolderContentsInput) (*workdocs.DescribeFolderContentsOutput, error)
	DescribeFolderContentsAsync(ctx workflow.Context, input *workdocs.DescribeFolderContentsInput) *WorkdocsDescribeFolderContentsFuture

	DescribeGroups(ctx workflow.Context, input *workdocs.DescribeGroupsInput) (*workdocs.DescribeGroupsOutput, error)
	DescribeGroupsAsync(ctx workflow.Context, input *workdocs.DescribeGroupsInput) *WorkdocsDescribeGroupsFuture

	DescribeNotificationSubscriptions(ctx workflow.Context, input *workdocs.DescribeNotificationSubscriptionsInput) (*workdocs.DescribeNotificationSubscriptionsOutput, error)
	DescribeNotificationSubscriptionsAsync(ctx workflow.Context, input *workdocs.DescribeNotificationSubscriptionsInput) *WorkdocsDescribeNotificationSubscriptionsFuture

	DescribeResourcePermissions(ctx workflow.Context, input *workdocs.DescribeResourcePermissionsInput) (*workdocs.DescribeResourcePermissionsOutput, error)
	DescribeResourcePermissionsAsync(ctx workflow.Context, input *workdocs.DescribeResourcePermissionsInput) *WorkdocsDescribeResourcePermissionsFuture

	DescribeRootFolders(ctx workflow.Context, input *workdocs.DescribeRootFoldersInput) (*workdocs.DescribeRootFoldersOutput, error)
	DescribeRootFoldersAsync(ctx workflow.Context, input *workdocs.DescribeRootFoldersInput) *WorkdocsDescribeRootFoldersFuture

	DescribeUsers(ctx workflow.Context, input *workdocs.DescribeUsersInput) (*workdocs.DescribeUsersOutput, error)
	DescribeUsersAsync(ctx workflow.Context, input *workdocs.DescribeUsersInput) *WorkdocsDescribeUsersFuture

	GetCurrentUser(ctx workflow.Context, input *workdocs.GetCurrentUserInput) (*workdocs.GetCurrentUserOutput, error)
	GetCurrentUserAsync(ctx workflow.Context, input *workdocs.GetCurrentUserInput) *WorkdocsGetCurrentUserFuture

	GetDocument(ctx workflow.Context, input *workdocs.GetDocumentInput) (*workdocs.GetDocumentOutput, error)
	GetDocumentAsync(ctx workflow.Context, input *workdocs.GetDocumentInput) *WorkdocsGetDocumentFuture

	GetDocumentPath(ctx workflow.Context, input *workdocs.GetDocumentPathInput) (*workdocs.GetDocumentPathOutput, error)
	GetDocumentPathAsync(ctx workflow.Context, input *workdocs.GetDocumentPathInput) *WorkdocsGetDocumentPathFuture

	GetDocumentVersion(ctx workflow.Context, input *workdocs.GetDocumentVersionInput) (*workdocs.GetDocumentVersionOutput, error)
	GetDocumentVersionAsync(ctx workflow.Context, input *workdocs.GetDocumentVersionInput) *WorkdocsGetDocumentVersionFuture

	GetFolder(ctx workflow.Context, input *workdocs.GetFolderInput) (*workdocs.GetFolderOutput, error)
	GetFolderAsync(ctx workflow.Context, input *workdocs.GetFolderInput) *WorkdocsGetFolderFuture

	GetFolderPath(ctx workflow.Context, input *workdocs.GetFolderPathInput) (*workdocs.GetFolderPathOutput, error)
	GetFolderPathAsync(ctx workflow.Context, input *workdocs.GetFolderPathInput) *WorkdocsGetFolderPathFuture

	GetResources(ctx workflow.Context, input *workdocs.GetResourcesInput) (*workdocs.GetResourcesOutput, error)
	GetResourcesAsync(ctx workflow.Context, input *workdocs.GetResourcesInput) *WorkdocsGetResourcesFuture

	InitiateDocumentVersionUpload(ctx workflow.Context, input *workdocs.InitiateDocumentVersionUploadInput) (*workdocs.InitiateDocumentVersionUploadOutput, error)
	InitiateDocumentVersionUploadAsync(ctx workflow.Context, input *workdocs.InitiateDocumentVersionUploadInput) *WorkdocsInitiateDocumentVersionUploadFuture

	RemoveAllResourcePermissions(ctx workflow.Context, input *workdocs.RemoveAllResourcePermissionsInput) (*workdocs.RemoveAllResourcePermissionsOutput, error)
	RemoveAllResourcePermissionsAsync(ctx workflow.Context, input *workdocs.RemoveAllResourcePermissionsInput) *WorkdocsRemoveAllResourcePermissionsFuture

	RemoveResourcePermission(ctx workflow.Context, input *workdocs.RemoveResourcePermissionInput) (*workdocs.RemoveResourcePermissionOutput, error)
	RemoveResourcePermissionAsync(ctx workflow.Context, input *workdocs.RemoveResourcePermissionInput) *WorkdocsRemoveResourcePermissionFuture

	UpdateDocument(ctx workflow.Context, input *workdocs.UpdateDocumentInput) (*workdocs.UpdateDocumentOutput, error)
	UpdateDocumentAsync(ctx workflow.Context, input *workdocs.UpdateDocumentInput) *WorkdocsUpdateDocumentFuture

	UpdateDocumentVersion(ctx workflow.Context, input *workdocs.UpdateDocumentVersionInput) (*workdocs.UpdateDocumentVersionOutput, error)
	UpdateDocumentVersionAsync(ctx workflow.Context, input *workdocs.UpdateDocumentVersionInput) *WorkdocsUpdateDocumentVersionFuture

	UpdateFolder(ctx workflow.Context, input *workdocs.UpdateFolderInput) (*workdocs.UpdateFolderOutput, error)
	UpdateFolderAsync(ctx workflow.Context, input *workdocs.UpdateFolderInput) *WorkdocsUpdateFolderFuture

	UpdateUser(ctx workflow.Context, input *workdocs.UpdateUserInput) (*workdocs.UpdateUserOutput, error)
	UpdateUserAsync(ctx workflow.Context, input *workdocs.UpdateUserInput) *WorkdocsUpdateUserFuture
}

type WorkDocsStub struct{}

func NewWorkDocsStub() WorkDocsClient {
	return &WorkDocsStub{}
}

type WorkdocsAbortDocumentVersionUploadFuture struct {
	Future workflow.Future
}

func (r *WorkdocsAbortDocumentVersionUploadFuture) Get(ctx workflow.Context) (*workdocs.AbortDocumentVersionUploadOutput, error) {
	var output workdocs.AbortDocumentVersionUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsActivateUserFuture struct {
	Future workflow.Future
}

func (r *WorkdocsActivateUserFuture) Get(ctx workflow.Context) (*workdocs.ActivateUserOutput, error) {
	var output workdocs.ActivateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsAddResourcePermissionsFuture struct {
	Future workflow.Future
}

func (r *WorkdocsAddResourcePermissionsFuture) Get(ctx workflow.Context) (*workdocs.AddResourcePermissionsOutput, error) {
	var output workdocs.AddResourcePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsCreateCommentFuture struct {
	Future workflow.Future
}

func (r *WorkdocsCreateCommentFuture) Get(ctx workflow.Context) (*workdocs.CreateCommentOutput, error) {
	var output workdocs.CreateCommentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsCreateCustomMetadataFuture struct {
	Future workflow.Future
}

func (r *WorkdocsCreateCustomMetadataFuture) Get(ctx workflow.Context) (*workdocs.CreateCustomMetadataOutput, error) {
	var output workdocs.CreateCustomMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsCreateFolderFuture struct {
	Future workflow.Future
}

func (r *WorkdocsCreateFolderFuture) Get(ctx workflow.Context) (*workdocs.CreateFolderOutput, error) {
	var output workdocs.CreateFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsCreateLabelsFuture struct {
	Future workflow.Future
}

func (r *WorkdocsCreateLabelsFuture) Get(ctx workflow.Context) (*workdocs.CreateLabelsOutput, error) {
	var output workdocs.CreateLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsCreateNotificationSubscriptionFuture struct {
	Future workflow.Future
}

func (r *WorkdocsCreateNotificationSubscriptionFuture) Get(ctx workflow.Context) (*workdocs.CreateNotificationSubscriptionOutput, error) {
	var output workdocs.CreateNotificationSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsCreateUserFuture struct {
	Future workflow.Future
}

func (r *WorkdocsCreateUserFuture) Get(ctx workflow.Context) (*workdocs.CreateUserOutput, error) {
	var output workdocs.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDeactivateUserFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDeactivateUserFuture) Get(ctx workflow.Context) (*workdocs.DeactivateUserOutput, error) {
	var output workdocs.DeactivateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDeleteCommentFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDeleteCommentFuture) Get(ctx workflow.Context) (*workdocs.DeleteCommentOutput, error) {
	var output workdocs.DeleteCommentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDeleteCustomMetadataFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDeleteCustomMetadataFuture) Get(ctx workflow.Context) (*workdocs.DeleteCustomMetadataOutput, error) {
	var output workdocs.DeleteCustomMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDeleteDocumentFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDeleteDocumentFuture) Get(ctx workflow.Context) (*workdocs.DeleteDocumentOutput, error) {
	var output workdocs.DeleteDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDeleteFolderFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDeleteFolderFuture) Get(ctx workflow.Context) (*workdocs.DeleteFolderOutput, error) {
	var output workdocs.DeleteFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDeleteFolderContentsFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDeleteFolderContentsFuture) Get(ctx workflow.Context) (*workdocs.DeleteFolderContentsOutput, error) {
	var output workdocs.DeleteFolderContentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDeleteLabelsFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDeleteLabelsFuture) Get(ctx workflow.Context) (*workdocs.DeleteLabelsOutput, error) {
	var output workdocs.DeleteLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDeleteNotificationSubscriptionFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDeleteNotificationSubscriptionFuture) Get(ctx workflow.Context) (*workdocs.DeleteNotificationSubscriptionOutput, error) {
	var output workdocs.DeleteNotificationSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDeleteUserFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDeleteUserFuture) Get(ctx workflow.Context) (*workdocs.DeleteUserOutput, error) {
	var output workdocs.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDescribeActivitiesFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDescribeActivitiesFuture) Get(ctx workflow.Context) (*workdocs.DescribeActivitiesOutput, error) {
	var output workdocs.DescribeActivitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDescribeCommentsFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDescribeCommentsFuture) Get(ctx workflow.Context) (*workdocs.DescribeCommentsOutput, error) {
	var output workdocs.DescribeCommentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDescribeDocumentVersionsFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDescribeDocumentVersionsFuture) Get(ctx workflow.Context) (*workdocs.DescribeDocumentVersionsOutput, error) {
	var output workdocs.DescribeDocumentVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDescribeFolderContentsFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDescribeFolderContentsFuture) Get(ctx workflow.Context) (*workdocs.DescribeFolderContentsOutput, error) {
	var output workdocs.DescribeFolderContentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDescribeGroupsFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDescribeGroupsFuture) Get(ctx workflow.Context) (*workdocs.DescribeGroupsOutput, error) {
	var output workdocs.DescribeGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDescribeNotificationSubscriptionsFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDescribeNotificationSubscriptionsFuture) Get(ctx workflow.Context) (*workdocs.DescribeNotificationSubscriptionsOutput, error) {
	var output workdocs.DescribeNotificationSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDescribeResourcePermissionsFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDescribeResourcePermissionsFuture) Get(ctx workflow.Context) (*workdocs.DescribeResourcePermissionsOutput, error) {
	var output workdocs.DescribeResourcePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDescribeRootFoldersFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDescribeRootFoldersFuture) Get(ctx workflow.Context) (*workdocs.DescribeRootFoldersOutput, error) {
	var output workdocs.DescribeRootFoldersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsDescribeUsersFuture struct {
	Future workflow.Future
}

func (r *WorkdocsDescribeUsersFuture) Get(ctx workflow.Context) (*workdocs.DescribeUsersOutput, error) {
	var output workdocs.DescribeUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsGetCurrentUserFuture struct {
	Future workflow.Future
}

func (r *WorkdocsGetCurrentUserFuture) Get(ctx workflow.Context) (*workdocs.GetCurrentUserOutput, error) {
	var output workdocs.GetCurrentUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsGetDocumentFuture struct {
	Future workflow.Future
}

func (r *WorkdocsGetDocumentFuture) Get(ctx workflow.Context) (*workdocs.GetDocumentOutput, error) {
	var output workdocs.GetDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsGetDocumentPathFuture struct {
	Future workflow.Future
}

func (r *WorkdocsGetDocumentPathFuture) Get(ctx workflow.Context) (*workdocs.GetDocumentPathOutput, error) {
	var output workdocs.GetDocumentPathOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsGetDocumentVersionFuture struct {
	Future workflow.Future
}

func (r *WorkdocsGetDocumentVersionFuture) Get(ctx workflow.Context) (*workdocs.GetDocumentVersionOutput, error) {
	var output workdocs.GetDocumentVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsGetFolderFuture struct {
	Future workflow.Future
}

func (r *WorkdocsGetFolderFuture) Get(ctx workflow.Context) (*workdocs.GetFolderOutput, error) {
	var output workdocs.GetFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsGetFolderPathFuture struct {
	Future workflow.Future
}

func (r *WorkdocsGetFolderPathFuture) Get(ctx workflow.Context) (*workdocs.GetFolderPathOutput, error) {
	var output workdocs.GetFolderPathOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsGetResourcesFuture struct {
	Future workflow.Future
}

func (r *WorkdocsGetResourcesFuture) Get(ctx workflow.Context) (*workdocs.GetResourcesOutput, error) {
	var output workdocs.GetResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsInitiateDocumentVersionUploadFuture struct {
	Future workflow.Future
}

func (r *WorkdocsInitiateDocumentVersionUploadFuture) Get(ctx workflow.Context) (*workdocs.InitiateDocumentVersionUploadOutput, error) {
	var output workdocs.InitiateDocumentVersionUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsRemoveAllResourcePermissionsFuture struct {
	Future workflow.Future
}

func (r *WorkdocsRemoveAllResourcePermissionsFuture) Get(ctx workflow.Context) (*workdocs.RemoveAllResourcePermissionsOutput, error) {
	var output workdocs.RemoveAllResourcePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsRemoveResourcePermissionFuture struct {
	Future workflow.Future
}

func (r *WorkdocsRemoveResourcePermissionFuture) Get(ctx workflow.Context) (*workdocs.RemoveResourcePermissionOutput, error) {
	var output workdocs.RemoveResourcePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsUpdateDocumentFuture struct {
	Future workflow.Future
}

func (r *WorkdocsUpdateDocumentFuture) Get(ctx workflow.Context) (*workdocs.UpdateDocumentOutput, error) {
	var output workdocs.UpdateDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsUpdateDocumentVersionFuture struct {
	Future workflow.Future
}

func (r *WorkdocsUpdateDocumentVersionFuture) Get(ctx workflow.Context) (*workdocs.UpdateDocumentVersionOutput, error) {
	var output workdocs.UpdateDocumentVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsUpdateFolderFuture struct {
	Future workflow.Future
}

func (r *WorkdocsUpdateFolderFuture) Get(ctx workflow.Context) (*workdocs.UpdateFolderOutput, error) {
	var output workdocs.UpdateFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkdocsUpdateUserFuture struct {
	Future workflow.Future
}

func (r *WorkdocsUpdateUserFuture) Get(ctx workflow.Context) (*workdocs.UpdateUserOutput, error) {
	var output workdocs.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) AbortDocumentVersionUpload(ctx workflow.Context, input *workdocs.AbortDocumentVersionUploadInput) (*workdocs.AbortDocumentVersionUploadOutput, error) {
	var output workdocs.AbortDocumentVersionUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.AbortDocumentVersionUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) AbortDocumentVersionUploadAsync(ctx workflow.Context, input *workdocs.AbortDocumentVersionUploadInput) *WorkdocsAbortDocumentVersionUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.AbortDocumentVersionUpload", input)
	return &WorkdocsAbortDocumentVersionUploadFuture{Future: future}
}

func (a *WorkDocsStub) ActivateUser(ctx workflow.Context, input *workdocs.ActivateUserInput) (*workdocs.ActivateUserOutput, error) {
	var output workdocs.ActivateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.ActivateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) ActivateUserAsync(ctx workflow.Context, input *workdocs.ActivateUserInput) *WorkdocsActivateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.ActivateUser", input)
	return &WorkdocsActivateUserFuture{Future: future}
}

func (a *WorkDocsStub) AddResourcePermissions(ctx workflow.Context, input *workdocs.AddResourcePermissionsInput) (*workdocs.AddResourcePermissionsOutput, error) {
	var output workdocs.AddResourcePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.AddResourcePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) AddResourcePermissionsAsync(ctx workflow.Context, input *workdocs.AddResourcePermissionsInput) *WorkdocsAddResourcePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.AddResourcePermissions", input)
	return &WorkdocsAddResourcePermissionsFuture{Future: future}
}

func (a *WorkDocsStub) CreateComment(ctx workflow.Context, input *workdocs.CreateCommentInput) (*workdocs.CreateCommentOutput, error) {
	var output workdocs.CreateCommentOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.CreateComment", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) CreateCommentAsync(ctx workflow.Context, input *workdocs.CreateCommentInput) *WorkdocsCreateCommentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.CreateComment", input)
	return &WorkdocsCreateCommentFuture{Future: future}
}

func (a *WorkDocsStub) CreateCustomMetadata(ctx workflow.Context, input *workdocs.CreateCustomMetadataInput) (*workdocs.CreateCustomMetadataOutput, error) {
	var output workdocs.CreateCustomMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.CreateCustomMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) CreateCustomMetadataAsync(ctx workflow.Context, input *workdocs.CreateCustomMetadataInput) *WorkdocsCreateCustomMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.CreateCustomMetadata", input)
	return &WorkdocsCreateCustomMetadataFuture{Future: future}
}

func (a *WorkDocsStub) CreateFolder(ctx workflow.Context, input *workdocs.CreateFolderInput) (*workdocs.CreateFolderOutput, error) {
	var output workdocs.CreateFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.CreateFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) CreateFolderAsync(ctx workflow.Context, input *workdocs.CreateFolderInput) *WorkdocsCreateFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.CreateFolder", input)
	return &WorkdocsCreateFolderFuture{Future: future}
}

func (a *WorkDocsStub) CreateLabels(ctx workflow.Context, input *workdocs.CreateLabelsInput) (*workdocs.CreateLabelsOutput, error) {
	var output workdocs.CreateLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.CreateLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) CreateLabelsAsync(ctx workflow.Context, input *workdocs.CreateLabelsInput) *WorkdocsCreateLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.CreateLabels", input)
	return &WorkdocsCreateLabelsFuture{Future: future}
}

func (a *WorkDocsStub) CreateNotificationSubscription(ctx workflow.Context, input *workdocs.CreateNotificationSubscriptionInput) (*workdocs.CreateNotificationSubscriptionOutput, error) {
	var output workdocs.CreateNotificationSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.CreateNotificationSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) CreateNotificationSubscriptionAsync(ctx workflow.Context, input *workdocs.CreateNotificationSubscriptionInput) *WorkdocsCreateNotificationSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.CreateNotificationSubscription", input)
	return &WorkdocsCreateNotificationSubscriptionFuture{Future: future}
}

func (a *WorkDocsStub) CreateUser(ctx workflow.Context, input *workdocs.CreateUserInput) (*workdocs.CreateUserOutput, error) {
	var output workdocs.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) CreateUserAsync(ctx workflow.Context, input *workdocs.CreateUserInput) *WorkdocsCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.CreateUser", input)
	return &WorkdocsCreateUserFuture{Future: future}
}

func (a *WorkDocsStub) DeactivateUser(ctx workflow.Context, input *workdocs.DeactivateUserInput) (*workdocs.DeactivateUserOutput, error) {
	var output workdocs.DeactivateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DeactivateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DeactivateUserAsync(ctx workflow.Context, input *workdocs.DeactivateUserInput) *WorkdocsDeactivateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DeactivateUser", input)
	return &WorkdocsDeactivateUserFuture{Future: future}
}

func (a *WorkDocsStub) DeleteComment(ctx workflow.Context, input *workdocs.DeleteCommentInput) (*workdocs.DeleteCommentOutput, error) {
	var output workdocs.DeleteCommentOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteComment", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DeleteCommentAsync(ctx workflow.Context, input *workdocs.DeleteCommentInput) *WorkdocsDeleteCommentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteComment", input)
	return &WorkdocsDeleteCommentFuture{Future: future}
}

func (a *WorkDocsStub) DeleteCustomMetadata(ctx workflow.Context, input *workdocs.DeleteCustomMetadataInput) (*workdocs.DeleteCustomMetadataOutput, error) {
	var output workdocs.DeleteCustomMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteCustomMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DeleteCustomMetadataAsync(ctx workflow.Context, input *workdocs.DeleteCustomMetadataInput) *WorkdocsDeleteCustomMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteCustomMetadata", input)
	return &WorkdocsDeleteCustomMetadataFuture{Future: future}
}

func (a *WorkDocsStub) DeleteDocument(ctx workflow.Context, input *workdocs.DeleteDocumentInput) (*workdocs.DeleteDocumentOutput, error) {
	var output workdocs.DeleteDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DeleteDocumentAsync(ctx workflow.Context, input *workdocs.DeleteDocumentInput) *WorkdocsDeleteDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteDocument", input)
	return &WorkdocsDeleteDocumentFuture{Future: future}
}

func (a *WorkDocsStub) DeleteFolder(ctx workflow.Context, input *workdocs.DeleteFolderInput) (*workdocs.DeleteFolderOutput, error) {
	var output workdocs.DeleteFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DeleteFolderAsync(ctx workflow.Context, input *workdocs.DeleteFolderInput) *WorkdocsDeleteFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteFolder", input)
	return &WorkdocsDeleteFolderFuture{Future: future}
}

func (a *WorkDocsStub) DeleteFolderContents(ctx workflow.Context, input *workdocs.DeleteFolderContentsInput) (*workdocs.DeleteFolderContentsOutput, error) {
	var output workdocs.DeleteFolderContentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteFolderContents", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DeleteFolderContentsAsync(ctx workflow.Context, input *workdocs.DeleteFolderContentsInput) *WorkdocsDeleteFolderContentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteFolderContents", input)
	return &WorkdocsDeleteFolderContentsFuture{Future: future}
}

func (a *WorkDocsStub) DeleteLabels(ctx workflow.Context, input *workdocs.DeleteLabelsInput) (*workdocs.DeleteLabelsOutput, error) {
	var output workdocs.DeleteLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DeleteLabelsAsync(ctx workflow.Context, input *workdocs.DeleteLabelsInput) *WorkdocsDeleteLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteLabels", input)
	return &WorkdocsDeleteLabelsFuture{Future: future}
}

func (a *WorkDocsStub) DeleteNotificationSubscription(ctx workflow.Context, input *workdocs.DeleteNotificationSubscriptionInput) (*workdocs.DeleteNotificationSubscriptionOutput, error) {
	var output workdocs.DeleteNotificationSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteNotificationSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DeleteNotificationSubscriptionAsync(ctx workflow.Context, input *workdocs.DeleteNotificationSubscriptionInput) *WorkdocsDeleteNotificationSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteNotificationSubscription", input)
	return &WorkdocsDeleteNotificationSubscriptionFuture{Future: future}
}

func (a *WorkDocsStub) DeleteUser(ctx workflow.Context, input *workdocs.DeleteUserInput) (*workdocs.DeleteUserOutput, error) {
	var output workdocs.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DeleteUserAsync(ctx workflow.Context, input *workdocs.DeleteUserInput) *WorkdocsDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DeleteUser", input)
	return &WorkdocsDeleteUserFuture{Future: future}
}

func (a *WorkDocsStub) DescribeActivities(ctx workflow.Context, input *workdocs.DescribeActivitiesInput) (*workdocs.DescribeActivitiesOutput, error) {
	var output workdocs.DescribeActivitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeActivities", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DescribeActivitiesAsync(ctx workflow.Context, input *workdocs.DescribeActivitiesInput) *WorkdocsDescribeActivitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeActivities", input)
	return &WorkdocsDescribeActivitiesFuture{Future: future}
}

func (a *WorkDocsStub) DescribeComments(ctx workflow.Context, input *workdocs.DescribeCommentsInput) (*workdocs.DescribeCommentsOutput, error) {
	var output workdocs.DescribeCommentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeComments", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DescribeCommentsAsync(ctx workflow.Context, input *workdocs.DescribeCommentsInput) *WorkdocsDescribeCommentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeComments", input)
	return &WorkdocsDescribeCommentsFuture{Future: future}
}

func (a *WorkDocsStub) DescribeDocumentVersions(ctx workflow.Context, input *workdocs.DescribeDocumentVersionsInput) (*workdocs.DescribeDocumentVersionsOutput, error) {
	var output workdocs.DescribeDocumentVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeDocumentVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DescribeDocumentVersionsAsync(ctx workflow.Context, input *workdocs.DescribeDocumentVersionsInput) *WorkdocsDescribeDocumentVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeDocumentVersions", input)
	return &WorkdocsDescribeDocumentVersionsFuture{Future: future}
}

func (a *WorkDocsStub) DescribeFolderContents(ctx workflow.Context, input *workdocs.DescribeFolderContentsInput) (*workdocs.DescribeFolderContentsOutput, error) {
	var output workdocs.DescribeFolderContentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeFolderContents", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DescribeFolderContentsAsync(ctx workflow.Context, input *workdocs.DescribeFolderContentsInput) *WorkdocsDescribeFolderContentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeFolderContents", input)
	return &WorkdocsDescribeFolderContentsFuture{Future: future}
}

func (a *WorkDocsStub) DescribeGroups(ctx workflow.Context, input *workdocs.DescribeGroupsInput) (*workdocs.DescribeGroupsOutput, error) {
	var output workdocs.DescribeGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DescribeGroupsAsync(ctx workflow.Context, input *workdocs.DescribeGroupsInput) *WorkdocsDescribeGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeGroups", input)
	return &WorkdocsDescribeGroupsFuture{Future: future}
}

func (a *WorkDocsStub) DescribeNotificationSubscriptions(ctx workflow.Context, input *workdocs.DescribeNotificationSubscriptionsInput) (*workdocs.DescribeNotificationSubscriptionsOutput, error) {
	var output workdocs.DescribeNotificationSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeNotificationSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DescribeNotificationSubscriptionsAsync(ctx workflow.Context, input *workdocs.DescribeNotificationSubscriptionsInput) *WorkdocsDescribeNotificationSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeNotificationSubscriptions", input)
	return &WorkdocsDescribeNotificationSubscriptionsFuture{Future: future}
}

func (a *WorkDocsStub) DescribeResourcePermissions(ctx workflow.Context, input *workdocs.DescribeResourcePermissionsInput) (*workdocs.DescribeResourcePermissionsOutput, error) {
	var output workdocs.DescribeResourcePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeResourcePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DescribeResourcePermissionsAsync(ctx workflow.Context, input *workdocs.DescribeResourcePermissionsInput) *WorkdocsDescribeResourcePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeResourcePermissions", input)
	return &WorkdocsDescribeResourcePermissionsFuture{Future: future}
}

func (a *WorkDocsStub) DescribeRootFolders(ctx workflow.Context, input *workdocs.DescribeRootFoldersInput) (*workdocs.DescribeRootFoldersOutput, error) {
	var output workdocs.DescribeRootFoldersOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeRootFolders", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DescribeRootFoldersAsync(ctx workflow.Context, input *workdocs.DescribeRootFoldersInput) *WorkdocsDescribeRootFoldersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeRootFolders", input)
	return &WorkdocsDescribeRootFoldersFuture{Future: future}
}

func (a *WorkDocsStub) DescribeUsers(ctx workflow.Context, input *workdocs.DescribeUsersInput) (*workdocs.DescribeUsersOutput, error) {
	var output workdocs.DescribeUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) DescribeUsersAsync(ctx workflow.Context, input *workdocs.DescribeUsersInput) *WorkdocsDescribeUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.DescribeUsers", input)
	return &WorkdocsDescribeUsersFuture{Future: future}
}

func (a *WorkDocsStub) GetCurrentUser(ctx workflow.Context, input *workdocs.GetCurrentUserInput) (*workdocs.GetCurrentUserOutput, error) {
	var output workdocs.GetCurrentUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.GetCurrentUser", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) GetCurrentUserAsync(ctx workflow.Context, input *workdocs.GetCurrentUserInput) *WorkdocsGetCurrentUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.GetCurrentUser", input)
	return &WorkdocsGetCurrentUserFuture{Future: future}
}

func (a *WorkDocsStub) GetDocument(ctx workflow.Context, input *workdocs.GetDocumentInput) (*workdocs.GetDocumentOutput, error) {
	var output workdocs.GetDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.GetDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) GetDocumentAsync(ctx workflow.Context, input *workdocs.GetDocumentInput) *WorkdocsGetDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.GetDocument", input)
	return &WorkdocsGetDocumentFuture{Future: future}
}

func (a *WorkDocsStub) GetDocumentPath(ctx workflow.Context, input *workdocs.GetDocumentPathInput) (*workdocs.GetDocumentPathOutput, error) {
	var output workdocs.GetDocumentPathOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.GetDocumentPath", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) GetDocumentPathAsync(ctx workflow.Context, input *workdocs.GetDocumentPathInput) *WorkdocsGetDocumentPathFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.GetDocumentPath", input)
	return &WorkdocsGetDocumentPathFuture{Future: future}
}

func (a *WorkDocsStub) GetDocumentVersion(ctx workflow.Context, input *workdocs.GetDocumentVersionInput) (*workdocs.GetDocumentVersionOutput, error) {
	var output workdocs.GetDocumentVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.GetDocumentVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) GetDocumentVersionAsync(ctx workflow.Context, input *workdocs.GetDocumentVersionInput) *WorkdocsGetDocumentVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.GetDocumentVersion", input)
	return &WorkdocsGetDocumentVersionFuture{Future: future}
}

func (a *WorkDocsStub) GetFolder(ctx workflow.Context, input *workdocs.GetFolderInput) (*workdocs.GetFolderOutput, error) {
	var output workdocs.GetFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.GetFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) GetFolderAsync(ctx workflow.Context, input *workdocs.GetFolderInput) *WorkdocsGetFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.GetFolder", input)
	return &WorkdocsGetFolderFuture{Future: future}
}

func (a *WorkDocsStub) GetFolderPath(ctx workflow.Context, input *workdocs.GetFolderPathInput) (*workdocs.GetFolderPathOutput, error) {
	var output workdocs.GetFolderPathOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.GetFolderPath", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) GetFolderPathAsync(ctx workflow.Context, input *workdocs.GetFolderPathInput) *WorkdocsGetFolderPathFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.GetFolderPath", input)
	return &WorkdocsGetFolderPathFuture{Future: future}
}

func (a *WorkDocsStub) GetResources(ctx workflow.Context, input *workdocs.GetResourcesInput) (*workdocs.GetResourcesOutput, error) {
	var output workdocs.GetResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.GetResources", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) GetResourcesAsync(ctx workflow.Context, input *workdocs.GetResourcesInput) *WorkdocsGetResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.GetResources", input)
	return &WorkdocsGetResourcesFuture{Future: future}
}

func (a *WorkDocsStub) InitiateDocumentVersionUpload(ctx workflow.Context, input *workdocs.InitiateDocumentVersionUploadInput) (*workdocs.InitiateDocumentVersionUploadOutput, error) {
	var output workdocs.InitiateDocumentVersionUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.InitiateDocumentVersionUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) InitiateDocumentVersionUploadAsync(ctx workflow.Context, input *workdocs.InitiateDocumentVersionUploadInput) *WorkdocsInitiateDocumentVersionUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.InitiateDocumentVersionUpload", input)
	return &WorkdocsInitiateDocumentVersionUploadFuture{Future: future}
}

func (a *WorkDocsStub) RemoveAllResourcePermissions(ctx workflow.Context, input *workdocs.RemoveAllResourcePermissionsInput) (*workdocs.RemoveAllResourcePermissionsOutput, error) {
	var output workdocs.RemoveAllResourcePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.RemoveAllResourcePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) RemoveAllResourcePermissionsAsync(ctx workflow.Context, input *workdocs.RemoveAllResourcePermissionsInput) *WorkdocsRemoveAllResourcePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.RemoveAllResourcePermissions", input)
	return &WorkdocsRemoveAllResourcePermissionsFuture{Future: future}
}

func (a *WorkDocsStub) RemoveResourcePermission(ctx workflow.Context, input *workdocs.RemoveResourcePermissionInput) (*workdocs.RemoveResourcePermissionOutput, error) {
	var output workdocs.RemoveResourcePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.RemoveResourcePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) RemoveResourcePermissionAsync(ctx workflow.Context, input *workdocs.RemoveResourcePermissionInput) *WorkdocsRemoveResourcePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.RemoveResourcePermission", input)
	return &WorkdocsRemoveResourcePermissionFuture{Future: future}
}

func (a *WorkDocsStub) UpdateDocument(ctx workflow.Context, input *workdocs.UpdateDocumentInput) (*workdocs.UpdateDocumentOutput, error) {
	var output workdocs.UpdateDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.UpdateDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) UpdateDocumentAsync(ctx workflow.Context, input *workdocs.UpdateDocumentInput) *WorkdocsUpdateDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.UpdateDocument", input)
	return &WorkdocsUpdateDocumentFuture{Future: future}
}

func (a *WorkDocsStub) UpdateDocumentVersion(ctx workflow.Context, input *workdocs.UpdateDocumentVersionInput) (*workdocs.UpdateDocumentVersionOutput, error) {
	var output workdocs.UpdateDocumentVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.UpdateDocumentVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) UpdateDocumentVersionAsync(ctx workflow.Context, input *workdocs.UpdateDocumentVersionInput) *WorkdocsUpdateDocumentVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.UpdateDocumentVersion", input)
	return &WorkdocsUpdateDocumentVersionFuture{Future: future}
}

func (a *WorkDocsStub) UpdateFolder(ctx workflow.Context, input *workdocs.UpdateFolderInput) (*workdocs.UpdateFolderOutput, error) {
	var output workdocs.UpdateFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.UpdateFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) UpdateFolderAsync(ctx workflow.Context, input *workdocs.UpdateFolderInput) *WorkdocsUpdateFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.UpdateFolder", input)
	return &WorkdocsUpdateFolderFuture{Future: future}
}

func (a *WorkDocsStub) UpdateUser(ctx workflow.Context, input *workdocs.UpdateUserInput) (*workdocs.UpdateUserOutput, error) {
	var output workdocs.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.workdocs.UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkDocsStub) UpdateUserAsync(ctx workflow.Context, input *workdocs.UpdateUserInput) *WorkdocsUpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workdocs.UpdateUser", input)
	return &WorkdocsUpdateUserFuture{Future: future}
}
