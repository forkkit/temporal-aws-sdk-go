// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/directconnect"
	"go.temporal.io/sdk/workflow"
)

type DirectConnectClient interface {
	AcceptDirectConnectGatewayAssociationProposal(ctx workflow.Context, input *directconnect.AcceptDirectConnectGatewayAssociationProposalInput) (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, error)
	AcceptDirectConnectGatewayAssociationProposalAsync(ctx workflow.Context, input *directconnect.AcceptDirectConnectGatewayAssociationProposalInput) *DirectconnectAcceptDirectConnectGatewayAssociationProposalFuture

	AllocateConnectionOnInterconnect(ctx workflow.Context, input *directconnect.AllocateConnectionOnInterconnectInput) (*directconnect.Connection, error)
	AllocateConnectionOnInterconnectAsync(ctx workflow.Context, input *directconnect.AllocateConnectionOnInterconnectInput) *DirectconnectAllocateConnectionOnInterconnectFuture

	AllocateHostedConnection(ctx workflow.Context, input *directconnect.AllocateHostedConnectionInput) (*directconnect.Connection, error)
	AllocateHostedConnectionAsync(ctx workflow.Context, input *directconnect.AllocateHostedConnectionInput) *DirectconnectAllocateHostedConnectionFuture

	AllocatePrivateVirtualInterface(ctx workflow.Context, input *directconnect.AllocatePrivateVirtualInterfaceInput) (*directconnect.VirtualInterface, error)
	AllocatePrivateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AllocatePrivateVirtualInterfaceInput) *DirectconnectAllocatePrivateVirtualInterfaceFuture

	AllocatePublicVirtualInterface(ctx workflow.Context, input *directconnect.AllocatePublicVirtualInterfaceInput) (*directconnect.VirtualInterface, error)
	AllocatePublicVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AllocatePublicVirtualInterfaceInput) *DirectconnectAllocatePublicVirtualInterfaceFuture

	AllocateTransitVirtualInterface(ctx workflow.Context, input *directconnect.AllocateTransitVirtualInterfaceInput) (*directconnect.AllocateTransitVirtualInterfaceOutput, error)
	AllocateTransitVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AllocateTransitVirtualInterfaceInput) *DirectconnectAllocateTransitVirtualInterfaceFuture

	AssociateConnectionWithLag(ctx workflow.Context, input *directconnect.AssociateConnectionWithLagInput) (*directconnect.Connection, error)
	AssociateConnectionWithLagAsync(ctx workflow.Context, input *directconnect.AssociateConnectionWithLagInput) *DirectconnectAssociateConnectionWithLagFuture

	AssociateHostedConnection(ctx workflow.Context, input *directconnect.AssociateHostedConnectionInput) (*directconnect.Connection, error)
	AssociateHostedConnectionAsync(ctx workflow.Context, input *directconnect.AssociateHostedConnectionInput) *DirectconnectAssociateHostedConnectionFuture

	AssociateVirtualInterface(ctx workflow.Context, input *directconnect.AssociateVirtualInterfaceInput) (*directconnect.VirtualInterface, error)
	AssociateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AssociateVirtualInterfaceInput) *DirectconnectAssociateVirtualInterfaceFuture

	ConfirmConnection(ctx workflow.Context, input *directconnect.ConfirmConnectionInput) (*directconnect.ConfirmConnectionOutput, error)
	ConfirmConnectionAsync(ctx workflow.Context, input *directconnect.ConfirmConnectionInput) *DirectconnectConfirmConnectionFuture

	ConfirmPrivateVirtualInterface(ctx workflow.Context, input *directconnect.ConfirmPrivateVirtualInterfaceInput) (*directconnect.ConfirmPrivateVirtualInterfaceOutput, error)
	ConfirmPrivateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.ConfirmPrivateVirtualInterfaceInput) *DirectconnectConfirmPrivateVirtualInterfaceFuture

	ConfirmPublicVirtualInterface(ctx workflow.Context, input *directconnect.ConfirmPublicVirtualInterfaceInput) (*directconnect.ConfirmPublicVirtualInterfaceOutput, error)
	ConfirmPublicVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.ConfirmPublicVirtualInterfaceInput) *DirectconnectConfirmPublicVirtualInterfaceFuture

	ConfirmTransitVirtualInterface(ctx workflow.Context, input *directconnect.ConfirmTransitVirtualInterfaceInput) (*directconnect.ConfirmTransitVirtualInterfaceOutput, error)
	ConfirmTransitVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.ConfirmTransitVirtualInterfaceInput) *DirectconnectConfirmTransitVirtualInterfaceFuture

	CreateBGPPeer(ctx workflow.Context, input *directconnect.CreateBGPPeerInput) (*directconnect.CreateBGPPeerOutput, error)
	CreateBGPPeerAsync(ctx workflow.Context, input *directconnect.CreateBGPPeerInput) *DirectconnectCreateBGPPeerFuture

	CreateConnection(ctx workflow.Context, input *directconnect.CreateConnectionInput) (*directconnect.Connection, error)
	CreateConnectionAsync(ctx workflow.Context, input *directconnect.CreateConnectionInput) *DirectconnectCreateConnectionFuture

	CreateDirectConnectGateway(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayInput) (*directconnect.CreateDirectConnectGatewayOutput, error)
	CreateDirectConnectGatewayAsync(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayInput) *DirectconnectCreateDirectConnectGatewayFuture

	CreateDirectConnectGatewayAssociation(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationInput) (*directconnect.CreateDirectConnectGatewayAssociationOutput, error)
	CreateDirectConnectGatewayAssociationAsync(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationInput) *DirectconnectCreateDirectConnectGatewayAssociationFuture

	CreateDirectConnectGatewayAssociationProposal(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationProposalInput) (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput, error)
	CreateDirectConnectGatewayAssociationProposalAsync(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationProposalInput) *DirectconnectCreateDirectConnectGatewayAssociationProposalFuture

	CreateInterconnect(ctx workflow.Context, input *directconnect.CreateInterconnectInput) (*directconnect.Interconnect, error)
	CreateInterconnectAsync(ctx workflow.Context, input *directconnect.CreateInterconnectInput) *DirectconnectCreateInterconnectFuture

	CreateLag(ctx workflow.Context, input *directconnect.CreateLagInput) (*directconnect.Lag, error)
	CreateLagAsync(ctx workflow.Context, input *directconnect.CreateLagInput) *DirectconnectCreateLagFuture

	CreatePrivateVirtualInterface(ctx workflow.Context, input *directconnect.CreatePrivateVirtualInterfaceInput) (*directconnect.VirtualInterface, error)
	CreatePrivateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.CreatePrivateVirtualInterfaceInput) *DirectconnectCreatePrivateVirtualInterfaceFuture

	CreatePublicVirtualInterface(ctx workflow.Context, input *directconnect.CreatePublicVirtualInterfaceInput) (*directconnect.VirtualInterface, error)
	CreatePublicVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.CreatePublicVirtualInterfaceInput) *DirectconnectCreatePublicVirtualInterfaceFuture

	CreateTransitVirtualInterface(ctx workflow.Context, input *directconnect.CreateTransitVirtualInterfaceInput) (*directconnect.CreateTransitVirtualInterfaceOutput, error)
	CreateTransitVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.CreateTransitVirtualInterfaceInput) *DirectconnectCreateTransitVirtualInterfaceFuture

	DeleteBGPPeer(ctx workflow.Context, input *directconnect.DeleteBGPPeerInput) (*directconnect.DeleteBGPPeerOutput, error)
	DeleteBGPPeerAsync(ctx workflow.Context, input *directconnect.DeleteBGPPeerInput) *DirectconnectDeleteBGPPeerFuture

	DeleteConnection(ctx workflow.Context, input *directconnect.DeleteConnectionInput) (*directconnect.Connection, error)
	DeleteConnectionAsync(ctx workflow.Context, input *directconnect.DeleteConnectionInput) *DirectconnectDeleteConnectionFuture

	DeleteDirectConnectGateway(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayInput) (*directconnect.DeleteDirectConnectGatewayOutput, error)
	DeleteDirectConnectGatewayAsync(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayInput) *DirectconnectDeleteDirectConnectGatewayFuture

	DeleteDirectConnectGatewayAssociation(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationInput) (*directconnect.DeleteDirectConnectGatewayAssociationOutput, error)
	DeleteDirectConnectGatewayAssociationAsync(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationInput) *DirectconnectDeleteDirectConnectGatewayAssociationFuture

	DeleteDirectConnectGatewayAssociationProposal(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationProposalInput) (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, error)
	DeleteDirectConnectGatewayAssociationProposalAsync(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationProposalInput) *DirectconnectDeleteDirectConnectGatewayAssociationProposalFuture

	DeleteInterconnect(ctx workflow.Context, input *directconnect.DeleteInterconnectInput) (*directconnect.DeleteInterconnectOutput, error)
	DeleteInterconnectAsync(ctx workflow.Context, input *directconnect.DeleteInterconnectInput) *DirectconnectDeleteInterconnectFuture

	DeleteLag(ctx workflow.Context, input *directconnect.DeleteLagInput) (*directconnect.Lag, error)
	DeleteLagAsync(ctx workflow.Context, input *directconnect.DeleteLagInput) *DirectconnectDeleteLagFuture

	DeleteVirtualInterface(ctx workflow.Context, input *directconnect.DeleteVirtualInterfaceInput) (*directconnect.DeleteVirtualInterfaceOutput, error)
	DeleteVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.DeleteVirtualInterfaceInput) *DirectconnectDeleteVirtualInterfaceFuture

	DescribeConnectionLoa(ctx workflow.Context, input *directconnect.DescribeConnectionLoaInput) (*directconnect.DescribeConnectionLoaOutput, error)
	DescribeConnectionLoaAsync(ctx workflow.Context, input *directconnect.DescribeConnectionLoaInput) *DirectconnectDescribeConnectionLoaFuture

	DescribeConnections(ctx workflow.Context, input *directconnect.DescribeConnectionsInput) (*directconnect.Connections, error)
	DescribeConnectionsAsync(ctx workflow.Context, input *directconnect.DescribeConnectionsInput) *DirectconnectDescribeConnectionsFuture

	DescribeConnectionsOnInterconnect(ctx workflow.Context, input *directconnect.DescribeConnectionsOnInterconnectInput) (*directconnect.Connections, error)
	DescribeConnectionsOnInterconnectAsync(ctx workflow.Context, input *directconnect.DescribeConnectionsOnInterconnectInput) *DirectconnectDescribeConnectionsOnInterconnectFuture

	DescribeDirectConnectGatewayAssociationProposals(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput) (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, error)
	DescribeDirectConnectGatewayAssociationProposalsAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput) *DirectconnectDescribeDirectConnectGatewayAssociationProposalsFuture

	DescribeDirectConnectGatewayAssociations(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationsInput) (*directconnect.DescribeDirectConnectGatewayAssociationsOutput, error)
	DescribeDirectConnectGatewayAssociationsAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationsInput) *DirectconnectDescribeDirectConnectGatewayAssociationsFuture

	DescribeDirectConnectGatewayAttachments(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAttachmentsInput) (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput, error)
	DescribeDirectConnectGatewayAttachmentsAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAttachmentsInput) *DirectconnectDescribeDirectConnectGatewayAttachmentsFuture

	DescribeDirectConnectGateways(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewaysInput) (*directconnect.DescribeDirectConnectGatewaysOutput, error)
	DescribeDirectConnectGatewaysAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewaysInput) *DirectconnectDescribeDirectConnectGatewaysFuture

	DescribeHostedConnections(ctx workflow.Context, input *directconnect.DescribeHostedConnectionsInput) (*directconnect.Connections, error)
	DescribeHostedConnectionsAsync(ctx workflow.Context, input *directconnect.DescribeHostedConnectionsInput) *DirectconnectDescribeHostedConnectionsFuture

	DescribeInterconnectLoa(ctx workflow.Context, input *directconnect.DescribeInterconnectLoaInput) (*directconnect.DescribeInterconnectLoaOutput, error)
	DescribeInterconnectLoaAsync(ctx workflow.Context, input *directconnect.DescribeInterconnectLoaInput) *DirectconnectDescribeInterconnectLoaFuture

	DescribeInterconnects(ctx workflow.Context, input *directconnect.DescribeInterconnectsInput) (*directconnect.DescribeInterconnectsOutput, error)
	DescribeInterconnectsAsync(ctx workflow.Context, input *directconnect.DescribeInterconnectsInput) *DirectconnectDescribeInterconnectsFuture

	DescribeLags(ctx workflow.Context, input *directconnect.DescribeLagsInput) (*directconnect.DescribeLagsOutput, error)
	DescribeLagsAsync(ctx workflow.Context, input *directconnect.DescribeLagsInput) *DirectconnectDescribeLagsFuture

	DescribeLoa(ctx workflow.Context, input *directconnect.DescribeLoaInput) (*directconnect.Loa, error)
	DescribeLoaAsync(ctx workflow.Context, input *directconnect.DescribeLoaInput) *DirectconnectDescribeLoaFuture

	DescribeLocations(ctx workflow.Context, input *directconnect.DescribeLocationsInput) (*directconnect.DescribeLocationsOutput, error)
	DescribeLocationsAsync(ctx workflow.Context, input *directconnect.DescribeLocationsInput) *DirectconnectDescribeLocationsFuture

	DescribeTags(ctx workflow.Context, input *directconnect.DescribeTagsInput) (*directconnect.DescribeTagsOutput, error)
	DescribeTagsAsync(ctx workflow.Context, input *directconnect.DescribeTagsInput) *DirectconnectDescribeTagsFuture

	DescribeVirtualGateways(ctx workflow.Context, input *directconnect.DescribeVirtualGatewaysInput) (*directconnect.DescribeVirtualGatewaysOutput, error)
	DescribeVirtualGatewaysAsync(ctx workflow.Context, input *directconnect.DescribeVirtualGatewaysInput) *DirectconnectDescribeVirtualGatewaysFuture

	DescribeVirtualInterfaces(ctx workflow.Context, input *directconnect.DescribeVirtualInterfacesInput) (*directconnect.DescribeVirtualInterfacesOutput, error)
	DescribeVirtualInterfacesAsync(ctx workflow.Context, input *directconnect.DescribeVirtualInterfacesInput) *DirectconnectDescribeVirtualInterfacesFuture

	DisassociateConnectionFromLag(ctx workflow.Context, input *directconnect.DisassociateConnectionFromLagInput) (*directconnect.Connection, error)
	DisassociateConnectionFromLagAsync(ctx workflow.Context, input *directconnect.DisassociateConnectionFromLagInput) *DirectconnectDisassociateConnectionFromLagFuture

	ListVirtualInterfaceTestHistory(ctx workflow.Context, input *directconnect.ListVirtualInterfaceTestHistoryInput) (*directconnect.ListVirtualInterfaceTestHistoryOutput, error)
	ListVirtualInterfaceTestHistoryAsync(ctx workflow.Context, input *directconnect.ListVirtualInterfaceTestHistoryInput) *DirectconnectListVirtualInterfaceTestHistoryFuture

	StartBgpFailoverTest(ctx workflow.Context, input *directconnect.StartBgpFailoverTestInput) (*directconnect.StartBgpFailoverTestOutput, error)
	StartBgpFailoverTestAsync(ctx workflow.Context, input *directconnect.StartBgpFailoverTestInput) *DirectconnectStartBgpFailoverTestFuture

	StopBgpFailoverTest(ctx workflow.Context, input *directconnect.StopBgpFailoverTestInput) (*directconnect.StopBgpFailoverTestOutput, error)
	StopBgpFailoverTestAsync(ctx workflow.Context, input *directconnect.StopBgpFailoverTestInput) *DirectconnectStopBgpFailoverTestFuture

	TagResource(ctx workflow.Context, input *directconnect.TagResourceInput) (*directconnect.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *directconnect.TagResourceInput) *DirectconnectTagResourceFuture

	UntagResource(ctx workflow.Context, input *directconnect.UntagResourceInput) (*directconnect.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *directconnect.UntagResourceInput) *DirectconnectUntagResourceFuture

	UpdateDirectConnectGatewayAssociation(ctx workflow.Context, input *directconnect.UpdateDirectConnectGatewayAssociationInput) (*directconnect.UpdateDirectConnectGatewayAssociationOutput, error)
	UpdateDirectConnectGatewayAssociationAsync(ctx workflow.Context, input *directconnect.UpdateDirectConnectGatewayAssociationInput) *DirectconnectUpdateDirectConnectGatewayAssociationFuture

	UpdateLag(ctx workflow.Context, input *directconnect.UpdateLagInput) (*directconnect.Lag, error)
	UpdateLagAsync(ctx workflow.Context, input *directconnect.UpdateLagInput) *DirectconnectUpdateLagFuture

	UpdateVirtualInterfaceAttributes(ctx workflow.Context, input *directconnect.UpdateVirtualInterfaceAttributesInput) (*directconnect.UpdateVirtualInterfaceAttributesOutput, error)
	UpdateVirtualInterfaceAttributesAsync(ctx workflow.Context, input *directconnect.UpdateVirtualInterfaceAttributesInput) *DirectconnectUpdateVirtualInterfaceAttributesFuture
}

type DirectConnectStub struct{}

func NewDirectConnectStub() DirectConnectClient {
	return &DirectConnectStub{}
}

type DirectconnectAcceptDirectConnectGatewayAssociationProposalFuture struct {
	Future workflow.Future
}

func (r *DirectconnectAcceptDirectConnectGatewayAssociationProposalFuture) Get(ctx workflow.Context) (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.AcceptDirectConnectGatewayAssociationProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectAllocateConnectionOnInterconnectFuture struct {
	Future workflow.Future
}

func (r *DirectconnectAllocateConnectionOnInterconnectFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectAllocateHostedConnectionFuture struct {
	Future workflow.Future
}

func (r *DirectconnectAllocateHostedConnectionFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectAllocatePrivateVirtualInterfaceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectAllocatePrivateVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectAllocatePublicVirtualInterfaceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectAllocatePublicVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectAllocateTransitVirtualInterfaceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectAllocateTransitVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.AllocateTransitVirtualInterfaceOutput, error) {
	var output directconnect.AllocateTransitVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectAssociateConnectionWithLagFuture struct {
	Future workflow.Future
}

func (r *DirectconnectAssociateConnectionWithLagFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectAssociateHostedConnectionFuture struct {
	Future workflow.Future
}

func (r *DirectconnectAssociateHostedConnectionFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectAssociateVirtualInterfaceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectAssociateVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectConfirmConnectionFuture struct {
	Future workflow.Future
}

func (r *DirectconnectConfirmConnectionFuture) Get(ctx workflow.Context) (*directconnect.ConfirmConnectionOutput, error) {
	var output directconnect.ConfirmConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectConfirmPrivateVirtualInterfaceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectConfirmPrivateVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.ConfirmPrivateVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmPrivateVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectConfirmPublicVirtualInterfaceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectConfirmPublicVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.ConfirmPublicVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmPublicVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectConfirmTransitVirtualInterfaceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectConfirmTransitVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.ConfirmTransitVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmTransitVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectCreateBGPPeerFuture struct {
	Future workflow.Future
}

func (r *DirectconnectCreateBGPPeerFuture) Get(ctx workflow.Context) (*directconnect.CreateBGPPeerOutput, error) {
	var output directconnect.CreateBGPPeerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectCreateConnectionFuture struct {
	Future workflow.Future
}

func (r *DirectconnectCreateConnectionFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectCreateDirectConnectGatewayFuture struct {
	Future workflow.Future
}

func (r *DirectconnectCreateDirectConnectGatewayFuture) Get(ctx workflow.Context) (*directconnect.CreateDirectConnectGatewayOutput, error) {
	var output directconnect.CreateDirectConnectGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectCreateDirectConnectGatewayAssociationFuture struct {
	Future workflow.Future
}

func (r *DirectconnectCreateDirectConnectGatewayAssociationFuture) Get(ctx workflow.Context) (*directconnect.CreateDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.CreateDirectConnectGatewayAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectCreateDirectConnectGatewayAssociationProposalFuture struct {
	Future workflow.Future
}

func (r *DirectconnectCreateDirectConnectGatewayAssociationProposalFuture) Get(ctx workflow.Context) (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.CreateDirectConnectGatewayAssociationProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectCreateInterconnectFuture struct {
	Future workflow.Future
}

func (r *DirectconnectCreateInterconnectFuture) Get(ctx workflow.Context) (*directconnect.Interconnect, error) {
	var output directconnect.Interconnect
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectCreateLagFuture struct {
	Future workflow.Future
}

func (r *DirectconnectCreateLagFuture) Get(ctx workflow.Context) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectCreatePrivateVirtualInterfaceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectCreatePrivateVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectCreatePublicVirtualInterfaceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectCreatePublicVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectCreateTransitVirtualInterfaceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectCreateTransitVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.CreateTransitVirtualInterfaceOutput, error) {
	var output directconnect.CreateTransitVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDeleteBGPPeerFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDeleteBGPPeerFuture) Get(ctx workflow.Context) (*directconnect.DeleteBGPPeerOutput, error) {
	var output directconnect.DeleteBGPPeerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDeleteConnectionFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDeleteConnectionFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDeleteDirectConnectGatewayFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDeleteDirectConnectGatewayFuture) Get(ctx workflow.Context) (*directconnect.DeleteDirectConnectGatewayOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDeleteDirectConnectGatewayAssociationFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDeleteDirectConnectGatewayAssociationFuture) Get(ctx workflow.Context) (*directconnect.DeleteDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDeleteDirectConnectGatewayAssociationProposalFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDeleteDirectConnectGatewayAssociationProposalFuture) Get(ctx workflow.Context) (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayAssociationProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDeleteInterconnectFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDeleteInterconnectFuture) Get(ctx workflow.Context) (*directconnect.DeleteInterconnectOutput, error) {
	var output directconnect.DeleteInterconnectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDeleteLagFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDeleteLagFuture) Get(ctx workflow.Context) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDeleteVirtualInterfaceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDeleteVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.DeleteVirtualInterfaceOutput, error) {
	var output directconnect.DeleteVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeConnectionLoaFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeConnectionLoaFuture) Get(ctx workflow.Context) (*directconnect.DescribeConnectionLoaOutput, error) {
	var output directconnect.DescribeConnectionLoaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeConnectionsFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeConnectionsFuture) Get(ctx workflow.Context) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeConnectionsOnInterconnectFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeConnectionsOnInterconnectFuture) Get(ctx workflow.Context) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeDirectConnectGatewayAssociationProposalsFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeDirectConnectGatewayAssociationProposalsFuture) Get(ctx workflow.Context) (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeDirectConnectGatewayAssociationsFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeDirectConnectGatewayAssociationsFuture) Get(ctx workflow.Context) (*directconnect.DescribeDirectConnectGatewayAssociationsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeDirectConnectGatewayAttachmentsFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeDirectConnectGatewayAttachmentsFuture) Get(ctx workflow.Context) (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeDirectConnectGatewaysFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeDirectConnectGatewaysFuture) Get(ctx workflow.Context) (*directconnect.DescribeDirectConnectGatewaysOutput, error) {
	var output directconnect.DescribeDirectConnectGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeHostedConnectionsFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeHostedConnectionsFuture) Get(ctx workflow.Context) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeInterconnectLoaFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeInterconnectLoaFuture) Get(ctx workflow.Context) (*directconnect.DescribeInterconnectLoaOutput, error) {
	var output directconnect.DescribeInterconnectLoaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeInterconnectsFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeInterconnectsFuture) Get(ctx workflow.Context) (*directconnect.DescribeInterconnectsOutput, error) {
	var output directconnect.DescribeInterconnectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeLagsFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeLagsFuture) Get(ctx workflow.Context) (*directconnect.DescribeLagsOutput, error) {
	var output directconnect.DescribeLagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeLoaFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeLoaFuture) Get(ctx workflow.Context) (*directconnect.Loa, error) {
	var output directconnect.Loa
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeLocationsFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeLocationsFuture) Get(ctx workflow.Context) (*directconnect.DescribeLocationsOutput, error) {
	var output directconnect.DescribeLocationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeTagsFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeTagsFuture) Get(ctx workflow.Context) (*directconnect.DescribeTagsOutput, error) {
	var output directconnect.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeVirtualGatewaysFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeVirtualGatewaysFuture) Get(ctx workflow.Context) (*directconnect.DescribeVirtualGatewaysOutput, error) {
	var output directconnect.DescribeVirtualGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDescribeVirtualInterfacesFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDescribeVirtualInterfacesFuture) Get(ctx workflow.Context) (*directconnect.DescribeVirtualInterfacesOutput, error) {
	var output directconnect.DescribeVirtualInterfacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectDisassociateConnectionFromLagFuture struct {
	Future workflow.Future
}

func (r *DirectconnectDisassociateConnectionFromLagFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectListVirtualInterfaceTestHistoryFuture struct {
	Future workflow.Future
}

func (r *DirectconnectListVirtualInterfaceTestHistoryFuture) Get(ctx workflow.Context) (*directconnect.ListVirtualInterfaceTestHistoryOutput, error) {
	var output directconnect.ListVirtualInterfaceTestHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectStartBgpFailoverTestFuture struct {
	Future workflow.Future
}

func (r *DirectconnectStartBgpFailoverTestFuture) Get(ctx workflow.Context) (*directconnect.StartBgpFailoverTestOutput, error) {
	var output directconnect.StartBgpFailoverTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectStopBgpFailoverTestFuture struct {
	Future workflow.Future
}

func (r *DirectconnectStopBgpFailoverTestFuture) Get(ctx workflow.Context) (*directconnect.StopBgpFailoverTestOutput, error) {
	var output directconnect.StopBgpFailoverTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectTagResourceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectTagResourceFuture) Get(ctx workflow.Context) (*directconnect.TagResourceOutput, error) {
	var output directconnect.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectUntagResourceFuture struct {
	Future workflow.Future
}

func (r *DirectconnectUntagResourceFuture) Get(ctx workflow.Context) (*directconnect.UntagResourceOutput, error) {
	var output directconnect.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectUpdateDirectConnectGatewayAssociationFuture struct {
	Future workflow.Future
}

func (r *DirectconnectUpdateDirectConnectGatewayAssociationFuture) Get(ctx workflow.Context) (*directconnect.UpdateDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.UpdateDirectConnectGatewayAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectUpdateLagFuture struct {
	Future workflow.Future
}

func (r *DirectconnectUpdateLagFuture) Get(ctx workflow.Context) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectconnectUpdateVirtualInterfaceAttributesFuture struct {
	Future workflow.Future
}

func (r *DirectconnectUpdateVirtualInterfaceAttributesFuture) Get(ctx workflow.Context) (*directconnect.UpdateVirtualInterfaceAttributesOutput, error) {
	var output directconnect.UpdateVirtualInterfaceAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) AcceptDirectConnectGatewayAssociationProposal(ctx workflow.Context, input *directconnect.AcceptDirectConnectGatewayAssociationProposalInput) (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.AcceptDirectConnectGatewayAssociationProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.AcceptDirectConnectGatewayAssociationProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) AcceptDirectConnectGatewayAssociationProposalAsync(ctx workflow.Context, input *directconnect.AcceptDirectConnectGatewayAssociationProposalInput) *DirectconnectAcceptDirectConnectGatewayAssociationProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.AcceptDirectConnectGatewayAssociationProposal", input)
	return &DirectconnectAcceptDirectConnectGatewayAssociationProposalFuture{Future: future}
}

func (a *DirectConnectStub) AllocateConnectionOnInterconnect(ctx workflow.Context, input *directconnect.AllocateConnectionOnInterconnectInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.AllocateConnectionOnInterconnect", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) AllocateConnectionOnInterconnectAsync(ctx workflow.Context, input *directconnect.AllocateConnectionOnInterconnectInput) *DirectconnectAllocateConnectionOnInterconnectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.AllocateConnectionOnInterconnect", input)
	return &DirectconnectAllocateConnectionOnInterconnectFuture{Future: future}
}

func (a *DirectConnectStub) AllocateHostedConnection(ctx workflow.Context, input *directconnect.AllocateHostedConnectionInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.AllocateHostedConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) AllocateHostedConnectionAsync(ctx workflow.Context, input *directconnect.AllocateHostedConnectionInput) *DirectconnectAllocateHostedConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.AllocateHostedConnection", input)
	return &DirectconnectAllocateHostedConnectionFuture{Future: future}
}

func (a *DirectConnectStub) AllocatePrivateVirtualInterface(ctx workflow.Context, input *directconnect.AllocatePrivateVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.AllocatePrivateVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) AllocatePrivateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AllocatePrivateVirtualInterfaceInput) *DirectconnectAllocatePrivateVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.AllocatePrivateVirtualInterface", input)
	return &DirectconnectAllocatePrivateVirtualInterfaceFuture{Future: future}
}

func (a *DirectConnectStub) AllocatePublicVirtualInterface(ctx workflow.Context, input *directconnect.AllocatePublicVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.AllocatePublicVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) AllocatePublicVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AllocatePublicVirtualInterfaceInput) *DirectconnectAllocatePublicVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.AllocatePublicVirtualInterface", input)
	return &DirectconnectAllocatePublicVirtualInterfaceFuture{Future: future}
}

func (a *DirectConnectStub) AllocateTransitVirtualInterface(ctx workflow.Context, input *directconnect.AllocateTransitVirtualInterfaceInput) (*directconnect.AllocateTransitVirtualInterfaceOutput, error) {
	var output directconnect.AllocateTransitVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.AllocateTransitVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) AllocateTransitVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AllocateTransitVirtualInterfaceInput) *DirectconnectAllocateTransitVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.AllocateTransitVirtualInterface", input)
	return &DirectconnectAllocateTransitVirtualInterfaceFuture{Future: future}
}

func (a *DirectConnectStub) AssociateConnectionWithLag(ctx workflow.Context, input *directconnect.AssociateConnectionWithLagInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.AssociateConnectionWithLag", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) AssociateConnectionWithLagAsync(ctx workflow.Context, input *directconnect.AssociateConnectionWithLagInput) *DirectconnectAssociateConnectionWithLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.AssociateConnectionWithLag", input)
	return &DirectconnectAssociateConnectionWithLagFuture{Future: future}
}

func (a *DirectConnectStub) AssociateHostedConnection(ctx workflow.Context, input *directconnect.AssociateHostedConnectionInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.AssociateHostedConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) AssociateHostedConnectionAsync(ctx workflow.Context, input *directconnect.AssociateHostedConnectionInput) *DirectconnectAssociateHostedConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.AssociateHostedConnection", input)
	return &DirectconnectAssociateHostedConnectionFuture{Future: future}
}

func (a *DirectConnectStub) AssociateVirtualInterface(ctx workflow.Context, input *directconnect.AssociateVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.AssociateVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) AssociateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AssociateVirtualInterfaceInput) *DirectconnectAssociateVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.AssociateVirtualInterface", input)
	return &DirectconnectAssociateVirtualInterfaceFuture{Future: future}
}

func (a *DirectConnectStub) ConfirmConnection(ctx workflow.Context, input *directconnect.ConfirmConnectionInput) (*directconnect.ConfirmConnectionOutput, error) {
	var output directconnect.ConfirmConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.ConfirmConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) ConfirmConnectionAsync(ctx workflow.Context, input *directconnect.ConfirmConnectionInput) *DirectconnectConfirmConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.ConfirmConnection", input)
	return &DirectconnectConfirmConnectionFuture{Future: future}
}

func (a *DirectConnectStub) ConfirmPrivateVirtualInterface(ctx workflow.Context, input *directconnect.ConfirmPrivateVirtualInterfaceInput) (*directconnect.ConfirmPrivateVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmPrivateVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.ConfirmPrivateVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) ConfirmPrivateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.ConfirmPrivateVirtualInterfaceInput) *DirectconnectConfirmPrivateVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.ConfirmPrivateVirtualInterface", input)
	return &DirectconnectConfirmPrivateVirtualInterfaceFuture{Future: future}
}

func (a *DirectConnectStub) ConfirmPublicVirtualInterface(ctx workflow.Context, input *directconnect.ConfirmPublicVirtualInterfaceInput) (*directconnect.ConfirmPublicVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmPublicVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.ConfirmPublicVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) ConfirmPublicVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.ConfirmPublicVirtualInterfaceInput) *DirectconnectConfirmPublicVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.ConfirmPublicVirtualInterface", input)
	return &DirectconnectConfirmPublicVirtualInterfaceFuture{Future: future}
}

func (a *DirectConnectStub) ConfirmTransitVirtualInterface(ctx workflow.Context, input *directconnect.ConfirmTransitVirtualInterfaceInput) (*directconnect.ConfirmTransitVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmTransitVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.ConfirmTransitVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) ConfirmTransitVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.ConfirmTransitVirtualInterfaceInput) *DirectconnectConfirmTransitVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.ConfirmTransitVirtualInterface", input)
	return &DirectconnectConfirmTransitVirtualInterfaceFuture{Future: future}
}

func (a *DirectConnectStub) CreateBGPPeer(ctx workflow.Context, input *directconnect.CreateBGPPeerInput) (*directconnect.CreateBGPPeerOutput, error) {
	var output directconnect.CreateBGPPeerOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateBGPPeer", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) CreateBGPPeerAsync(ctx workflow.Context, input *directconnect.CreateBGPPeerInput) *DirectconnectCreateBGPPeerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateBGPPeer", input)
	return &DirectconnectCreateBGPPeerFuture{Future: future}
}

func (a *DirectConnectStub) CreateConnection(ctx workflow.Context, input *directconnect.CreateConnectionInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) CreateConnectionAsync(ctx workflow.Context, input *directconnect.CreateConnectionInput) *DirectconnectCreateConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateConnection", input)
	return &DirectconnectCreateConnectionFuture{Future: future}
}

func (a *DirectConnectStub) CreateDirectConnectGateway(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayInput) (*directconnect.CreateDirectConnectGatewayOutput, error) {
	var output directconnect.CreateDirectConnectGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateDirectConnectGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) CreateDirectConnectGatewayAsync(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayInput) *DirectconnectCreateDirectConnectGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateDirectConnectGateway", input)
	return &DirectconnectCreateDirectConnectGatewayFuture{Future: future}
}

func (a *DirectConnectStub) CreateDirectConnectGatewayAssociation(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationInput) (*directconnect.CreateDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.CreateDirectConnectGatewayAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateDirectConnectGatewayAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) CreateDirectConnectGatewayAssociationAsync(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationInput) *DirectconnectCreateDirectConnectGatewayAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateDirectConnectGatewayAssociation", input)
	return &DirectconnectCreateDirectConnectGatewayAssociationFuture{Future: future}
}

func (a *DirectConnectStub) CreateDirectConnectGatewayAssociationProposal(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationProposalInput) (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.CreateDirectConnectGatewayAssociationProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateDirectConnectGatewayAssociationProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) CreateDirectConnectGatewayAssociationProposalAsync(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationProposalInput) *DirectconnectCreateDirectConnectGatewayAssociationProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateDirectConnectGatewayAssociationProposal", input)
	return &DirectconnectCreateDirectConnectGatewayAssociationProposalFuture{Future: future}
}

func (a *DirectConnectStub) CreateInterconnect(ctx workflow.Context, input *directconnect.CreateInterconnectInput) (*directconnect.Interconnect, error) {
	var output directconnect.Interconnect
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateInterconnect", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) CreateInterconnectAsync(ctx workflow.Context, input *directconnect.CreateInterconnectInput) *DirectconnectCreateInterconnectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateInterconnect", input)
	return &DirectconnectCreateInterconnectFuture{Future: future}
}

func (a *DirectConnectStub) CreateLag(ctx workflow.Context, input *directconnect.CreateLagInput) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateLag", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) CreateLagAsync(ctx workflow.Context, input *directconnect.CreateLagInput) *DirectconnectCreateLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateLag", input)
	return &DirectconnectCreateLagFuture{Future: future}
}

func (a *DirectConnectStub) CreatePrivateVirtualInterface(ctx workflow.Context, input *directconnect.CreatePrivateVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.CreatePrivateVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) CreatePrivateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.CreatePrivateVirtualInterfaceInput) *DirectconnectCreatePrivateVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.CreatePrivateVirtualInterface", input)
	return &DirectconnectCreatePrivateVirtualInterfaceFuture{Future: future}
}

func (a *DirectConnectStub) CreatePublicVirtualInterface(ctx workflow.Context, input *directconnect.CreatePublicVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.CreatePublicVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) CreatePublicVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.CreatePublicVirtualInterfaceInput) *DirectconnectCreatePublicVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.CreatePublicVirtualInterface", input)
	return &DirectconnectCreatePublicVirtualInterfaceFuture{Future: future}
}

func (a *DirectConnectStub) CreateTransitVirtualInterface(ctx workflow.Context, input *directconnect.CreateTransitVirtualInterfaceInput) (*directconnect.CreateTransitVirtualInterfaceOutput, error) {
	var output directconnect.CreateTransitVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateTransitVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) CreateTransitVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.CreateTransitVirtualInterfaceInput) *DirectconnectCreateTransitVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.CreateTransitVirtualInterface", input)
	return &DirectconnectCreateTransitVirtualInterfaceFuture{Future: future}
}

func (a *DirectConnectStub) DeleteBGPPeer(ctx workflow.Context, input *directconnect.DeleteBGPPeerInput) (*directconnect.DeleteBGPPeerOutput, error) {
	var output directconnect.DeleteBGPPeerOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteBGPPeer", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DeleteBGPPeerAsync(ctx workflow.Context, input *directconnect.DeleteBGPPeerInput) *DirectconnectDeleteBGPPeerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteBGPPeer", input)
	return &DirectconnectDeleteBGPPeerFuture{Future: future}
}

func (a *DirectConnectStub) DeleteConnection(ctx workflow.Context, input *directconnect.DeleteConnectionInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DeleteConnectionAsync(ctx workflow.Context, input *directconnect.DeleteConnectionInput) *DirectconnectDeleteConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteConnection", input)
	return &DirectconnectDeleteConnectionFuture{Future: future}
}

func (a *DirectConnectStub) DeleteDirectConnectGateway(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayInput) (*directconnect.DeleteDirectConnectGatewayOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteDirectConnectGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DeleteDirectConnectGatewayAsync(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayInput) *DirectconnectDeleteDirectConnectGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteDirectConnectGateway", input)
	return &DirectconnectDeleteDirectConnectGatewayFuture{Future: future}
}

func (a *DirectConnectStub) DeleteDirectConnectGatewayAssociation(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationInput) (*directconnect.DeleteDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteDirectConnectGatewayAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DeleteDirectConnectGatewayAssociationAsync(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationInput) *DirectconnectDeleteDirectConnectGatewayAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteDirectConnectGatewayAssociation", input)
	return &DirectconnectDeleteDirectConnectGatewayAssociationFuture{Future: future}
}

func (a *DirectConnectStub) DeleteDirectConnectGatewayAssociationProposal(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationProposalInput) (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayAssociationProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteDirectConnectGatewayAssociationProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DeleteDirectConnectGatewayAssociationProposalAsync(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationProposalInput) *DirectconnectDeleteDirectConnectGatewayAssociationProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteDirectConnectGatewayAssociationProposal", input)
	return &DirectconnectDeleteDirectConnectGatewayAssociationProposalFuture{Future: future}
}

func (a *DirectConnectStub) DeleteInterconnect(ctx workflow.Context, input *directconnect.DeleteInterconnectInput) (*directconnect.DeleteInterconnectOutput, error) {
	var output directconnect.DeleteInterconnectOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteInterconnect", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DeleteInterconnectAsync(ctx workflow.Context, input *directconnect.DeleteInterconnectInput) *DirectconnectDeleteInterconnectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteInterconnect", input)
	return &DirectconnectDeleteInterconnectFuture{Future: future}
}

func (a *DirectConnectStub) DeleteLag(ctx workflow.Context, input *directconnect.DeleteLagInput) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteLag", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DeleteLagAsync(ctx workflow.Context, input *directconnect.DeleteLagInput) *DirectconnectDeleteLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteLag", input)
	return &DirectconnectDeleteLagFuture{Future: future}
}

func (a *DirectConnectStub) DeleteVirtualInterface(ctx workflow.Context, input *directconnect.DeleteVirtualInterfaceInput) (*directconnect.DeleteVirtualInterfaceOutput, error) {
	var output directconnect.DeleteVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DeleteVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.DeleteVirtualInterfaceInput) *DirectconnectDeleteVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DeleteVirtualInterface", input)
	return &DirectconnectDeleteVirtualInterfaceFuture{Future: future}
}

func (a *DirectConnectStub) DescribeConnectionLoa(ctx workflow.Context, input *directconnect.DescribeConnectionLoaInput) (*directconnect.DescribeConnectionLoaOutput, error) {
	var output directconnect.DescribeConnectionLoaOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeConnectionLoa", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeConnectionLoaAsync(ctx workflow.Context, input *directconnect.DescribeConnectionLoaInput) *DirectconnectDescribeConnectionLoaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeConnectionLoa", input)
	return &DirectconnectDescribeConnectionLoaFuture{Future: future}
}

func (a *DirectConnectStub) DescribeConnections(ctx workflow.Context, input *directconnect.DescribeConnectionsInput) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeConnectionsAsync(ctx workflow.Context, input *directconnect.DescribeConnectionsInput) *DirectconnectDescribeConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeConnections", input)
	return &DirectconnectDescribeConnectionsFuture{Future: future}
}

func (a *DirectConnectStub) DescribeConnectionsOnInterconnect(ctx workflow.Context, input *directconnect.DescribeConnectionsOnInterconnectInput) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeConnectionsOnInterconnect", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeConnectionsOnInterconnectAsync(ctx workflow.Context, input *directconnect.DescribeConnectionsOnInterconnectInput) *DirectconnectDescribeConnectionsOnInterconnectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeConnectionsOnInterconnect", input)
	return &DirectconnectDescribeConnectionsOnInterconnectFuture{Future: future}
}

func (a *DirectConnectStub) DescribeDirectConnectGatewayAssociationProposals(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput) (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeDirectConnectGatewayAssociationProposals", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeDirectConnectGatewayAssociationProposalsAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput) *DirectconnectDescribeDirectConnectGatewayAssociationProposalsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeDirectConnectGatewayAssociationProposals", input)
	return &DirectconnectDescribeDirectConnectGatewayAssociationProposalsFuture{Future: future}
}

func (a *DirectConnectStub) DescribeDirectConnectGatewayAssociations(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationsInput) (*directconnect.DescribeDirectConnectGatewayAssociationsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeDirectConnectGatewayAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeDirectConnectGatewayAssociationsAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationsInput) *DirectconnectDescribeDirectConnectGatewayAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeDirectConnectGatewayAssociations", input)
	return &DirectconnectDescribeDirectConnectGatewayAssociationsFuture{Future: future}
}

func (a *DirectConnectStub) DescribeDirectConnectGatewayAttachments(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAttachmentsInput) (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeDirectConnectGatewayAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeDirectConnectGatewayAttachmentsAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAttachmentsInput) *DirectconnectDescribeDirectConnectGatewayAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeDirectConnectGatewayAttachments", input)
	return &DirectconnectDescribeDirectConnectGatewayAttachmentsFuture{Future: future}
}

func (a *DirectConnectStub) DescribeDirectConnectGateways(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewaysInput) (*directconnect.DescribeDirectConnectGatewaysOutput, error) {
	var output directconnect.DescribeDirectConnectGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeDirectConnectGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeDirectConnectGatewaysAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewaysInput) *DirectconnectDescribeDirectConnectGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeDirectConnectGateways", input)
	return &DirectconnectDescribeDirectConnectGatewaysFuture{Future: future}
}

func (a *DirectConnectStub) DescribeHostedConnections(ctx workflow.Context, input *directconnect.DescribeHostedConnectionsInput) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeHostedConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeHostedConnectionsAsync(ctx workflow.Context, input *directconnect.DescribeHostedConnectionsInput) *DirectconnectDescribeHostedConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeHostedConnections", input)
	return &DirectconnectDescribeHostedConnectionsFuture{Future: future}
}

func (a *DirectConnectStub) DescribeInterconnectLoa(ctx workflow.Context, input *directconnect.DescribeInterconnectLoaInput) (*directconnect.DescribeInterconnectLoaOutput, error) {
	var output directconnect.DescribeInterconnectLoaOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeInterconnectLoa", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeInterconnectLoaAsync(ctx workflow.Context, input *directconnect.DescribeInterconnectLoaInput) *DirectconnectDescribeInterconnectLoaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeInterconnectLoa", input)
	return &DirectconnectDescribeInterconnectLoaFuture{Future: future}
}

func (a *DirectConnectStub) DescribeInterconnects(ctx workflow.Context, input *directconnect.DescribeInterconnectsInput) (*directconnect.DescribeInterconnectsOutput, error) {
	var output directconnect.DescribeInterconnectsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeInterconnects", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeInterconnectsAsync(ctx workflow.Context, input *directconnect.DescribeInterconnectsInput) *DirectconnectDescribeInterconnectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeInterconnects", input)
	return &DirectconnectDescribeInterconnectsFuture{Future: future}
}

func (a *DirectConnectStub) DescribeLags(ctx workflow.Context, input *directconnect.DescribeLagsInput) (*directconnect.DescribeLagsOutput, error) {
	var output directconnect.DescribeLagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeLags", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeLagsAsync(ctx workflow.Context, input *directconnect.DescribeLagsInput) *DirectconnectDescribeLagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeLags", input)
	return &DirectconnectDescribeLagsFuture{Future: future}
}

func (a *DirectConnectStub) DescribeLoa(ctx workflow.Context, input *directconnect.DescribeLoaInput) (*directconnect.Loa, error) {
	var output directconnect.Loa
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeLoa", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeLoaAsync(ctx workflow.Context, input *directconnect.DescribeLoaInput) *DirectconnectDescribeLoaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeLoa", input)
	return &DirectconnectDescribeLoaFuture{Future: future}
}

func (a *DirectConnectStub) DescribeLocations(ctx workflow.Context, input *directconnect.DescribeLocationsInput) (*directconnect.DescribeLocationsOutput, error) {
	var output directconnect.DescribeLocationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeLocations", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeLocationsAsync(ctx workflow.Context, input *directconnect.DescribeLocationsInput) *DirectconnectDescribeLocationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeLocations", input)
	return &DirectconnectDescribeLocationsFuture{Future: future}
}

func (a *DirectConnectStub) DescribeTags(ctx workflow.Context, input *directconnect.DescribeTagsInput) (*directconnect.DescribeTagsOutput, error) {
	var output directconnect.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeTagsAsync(ctx workflow.Context, input *directconnect.DescribeTagsInput) *DirectconnectDescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeTags", input)
	return &DirectconnectDescribeTagsFuture{Future: future}
}

func (a *DirectConnectStub) DescribeVirtualGateways(ctx workflow.Context, input *directconnect.DescribeVirtualGatewaysInput) (*directconnect.DescribeVirtualGatewaysOutput, error) {
	var output directconnect.DescribeVirtualGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeVirtualGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeVirtualGatewaysAsync(ctx workflow.Context, input *directconnect.DescribeVirtualGatewaysInput) *DirectconnectDescribeVirtualGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeVirtualGateways", input)
	return &DirectconnectDescribeVirtualGatewaysFuture{Future: future}
}

func (a *DirectConnectStub) DescribeVirtualInterfaces(ctx workflow.Context, input *directconnect.DescribeVirtualInterfacesInput) (*directconnect.DescribeVirtualInterfacesOutput, error) {
	var output directconnect.DescribeVirtualInterfacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeVirtualInterfaces", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DescribeVirtualInterfacesAsync(ctx workflow.Context, input *directconnect.DescribeVirtualInterfacesInput) *DirectconnectDescribeVirtualInterfacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DescribeVirtualInterfaces", input)
	return &DirectconnectDescribeVirtualInterfacesFuture{Future: future}
}

func (a *DirectConnectStub) DisassociateConnectionFromLag(ctx workflow.Context, input *directconnect.DisassociateConnectionFromLagInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.DisassociateConnectionFromLag", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) DisassociateConnectionFromLagAsync(ctx workflow.Context, input *directconnect.DisassociateConnectionFromLagInput) *DirectconnectDisassociateConnectionFromLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.DisassociateConnectionFromLag", input)
	return &DirectconnectDisassociateConnectionFromLagFuture{Future: future}
}

func (a *DirectConnectStub) ListVirtualInterfaceTestHistory(ctx workflow.Context, input *directconnect.ListVirtualInterfaceTestHistoryInput) (*directconnect.ListVirtualInterfaceTestHistoryOutput, error) {
	var output directconnect.ListVirtualInterfaceTestHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.ListVirtualInterfaceTestHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) ListVirtualInterfaceTestHistoryAsync(ctx workflow.Context, input *directconnect.ListVirtualInterfaceTestHistoryInput) *DirectconnectListVirtualInterfaceTestHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.ListVirtualInterfaceTestHistory", input)
	return &DirectconnectListVirtualInterfaceTestHistoryFuture{Future: future}
}

func (a *DirectConnectStub) StartBgpFailoverTest(ctx workflow.Context, input *directconnect.StartBgpFailoverTestInput) (*directconnect.StartBgpFailoverTestOutput, error) {
	var output directconnect.StartBgpFailoverTestOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.StartBgpFailoverTest", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) StartBgpFailoverTestAsync(ctx workflow.Context, input *directconnect.StartBgpFailoverTestInput) *DirectconnectStartBgpFailoverTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.StartBgpFailoverTest", input)
	return &DirectconnectStartBgpFailoverTestFuture{Future: future}
}

func (a *DirectConnectStub) StopBgpFailoverTest(ctx workflow.Context, input *directconnect.StopBgpFailoverTestInput) (*directconnect.StopBgpFailoverTestOutput, error) {
	var output directconnect.StopBgpFailoverTestOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.StopBgpFailoverTest", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) StopBgpFailoverTestAsync(ctx workflow.Context, input *directconnect.StopBgpFailoverTestInput) *DirectconnectStopBgpFailoverTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.StopBgpFailoverTest", input)
	return &DirectconnectStopBgpFailoverTestFuture{Future: future}
}

func (a *DirectConnectStub) TagResource(ctx workflow.Context, input *directconnect.TagResourceInput) (*directconnect.TagResourceOutput, error) {
	var output directconnect.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) TagResourceAsync(ctx workflow.Context, input *directconnect.TagResourceInput) *DirectconnectTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.TagResource", input)
	return &DirectconnectTagResourceFuture{Future: future}
}

func (a *DirectConnectStub) UntagResource(ctx workflow.Context, input *directconnect.UntagResourceInput) (*directconnect.UntagResourceOutput, error) {
	var output directconnect.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) UntagResourceAsync(ctx workflow.Context, input *directconnect.UntagResourceInput) *DirectconnectUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.UntagResource", input)
	return &DirectconnectUntagResourceFuture{Future: future}
}

func (a *DirectConnectStub) UpdateDirectConnectGatewayAssociation(ctx workflow.Context, input *directconnect.UpdateDirectConnectGatewayAssociationInput) (*directconnect.UpdateDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.UpdateDirectConnectGatewayAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.UpdateDirectConnectGatewayAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) UpdateDirectConnectGatewayAssociationAsync(ctx workflow.Context, input *directconnect.UpdateDirectConnectGatewayAssociationInput) *DirectconnectUpdateDirectConnectGatewayAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.UpdateDirectConnectGatewayAssociation", input)
	return &DirectconnectUpdateDirectConnectGatewayAssociationFuture{Future: future}
}

func (a *DirectConnectStub) UpdateLag(ctx workflow.Context, input *directconnect.UpdateLagInput) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.UpdateLag", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) UpdateLagAsync(ctx workflow.Context, input *directconnect.UpdateLagInput) *DirectconnectUpdateLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.UpdateLag", input)
	return &DirectconnectUpdateLagFuture{Future: future}
}

func (a *DirectConnectStub) UpdateVirtualInterfaceAttributes(ctx workflow.Context, input *directconnect.UpdateVirtualInterfaceAttributesInput) (*directconnect.UpdateVirtualInterfaceAttributesOutput, error) {
	var output directconnect.UpdateVirtualInterfaceAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.directconnect.UpdateVirtualInterfaceAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectConnectStub) UpdateVirtualInterfaceAttributesAsync(ctx workflow.Context, input *directconnect.UpdateVirtualInterfaceAttributesInput) *DirectconnectUpdateVirtualInterfaceAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directconnect.UpdateVirtualInterfaceAttributes", input)
	return &DirectconnectUpdateVirtualInterfaceAttributesFuture{Future: future}
}
