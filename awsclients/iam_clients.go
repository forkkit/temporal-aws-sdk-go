// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/iam"
	"go.temporal.io/sdk/workflow"
)

type IAMClient interface {
	AddClientIDToOpenIDConnectProvider(ctx workflow.Context, input *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)
	AddClientIDToOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.AddClientIDToOpenIDConnectProviderInput) *IAMAddClientIDToOpenIDConnectProviderFuture

	AddRoleToInstanceProfile(ctx workflow.Context, input *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error)
	AddRoleToInstanceProfileAsync(ctx workflow.Context, input *iam.AddRoleToInstanceProfileInput) *IAMAddRoleToInstanceProfileFuture

	AddUserToGroup(ctx workflow.Context, input *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error)
	AddUserToGroupAsync(ctx workflow.Context, input *iam.AddUserToGroupInput) *IAMAddUserToGroupFuture

	AttachGroupPolicy(ctx workflow.Context, input *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error)
	AttachGroupPolicyAsync(ctx workflow.Context, input *iam.AttachGroupPolicyInput) *IAMAttachGroupPolicyFuture

	AttachRolePolicy(ctx workflow.Context, input *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error)
	AttachRolePolicyAsync(ctx workflow.Context, input *iam.AttachRolePolicyInput) *IAMAttachRolePolicyFuture

	AttachUserPolicy(ctx workflow.Context, input *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error)
	AttachUserPolicyAsync(ctx workflow.Context, input *iam.AttachUserPolicyInput) *IAMAttachUserPolicyFuture

	ChangePassword(ctx workflow.Context, input *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error)
	ChangePasswordAsync(ctx workflow.Context, input *iam.ChangePasswordInput) *IAMChangePasswordFuture

	CreateAccessKey(ctx workflow.Context, input *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error)
	CreateAccessKeyAsync(ctx workflow.Context, input *iam.CreateAccessKeyInput) *IAMCreateAccessKeyFuture

	CreateAccountAlias(ctx workflow.Context, input *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error)
	CreateAccountAliasAsync(ctx workflow.Context, input *iam.CreateAccountAliasInput) *IAMCreateAccountAliasFuture

	CreateGroup(ctx workflow.Context, input *iam.CreateGroupInput) (*iam.CreateGroupOutput, error)
	CreateGroupAsync(ctx workflow.Context, input *iam.CreateGroupInput) *IAMCreateGroupFuture

	CreateInstanceProfile(ctx workflow.Context, input *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error)
	CreateInstanceProfileAsync(ctx workflow.Context, input *iam.CreateInstanceProfileInput) *IAMCreateInstanceProfileFuture

	CreateLoginProfile(ctx workflow.Context, input *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error)
	CreateLoginProfileAsync(ctx workflow.Context, input *iam.CreateLoginProfileInput) *IAMCreateLoginProfileFuture

	CreateOpenIDConnectProvider(ctx workflow.Context, input *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error)
	CreateOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.CreateOpenIDConnectProviderInput) *IAMCreateOpenIDConnectProviderFuture

	CreatePolicy(ctx workflow.Context, input *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error)
	CreatePolicyAsync(ctx workflow.Context, input *iam.CreatePolicyInput) *IAMCreatePolicyFuture

	CreatePolicyVersion(ctx workflow.Context, input *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error)
	CreatePolicyVersionAsync(ctx workflow.Context, input *iam.CreatePolicyVersionInput) *IAMCreatePolicyVersionFuture

	CreateRole(ctx workflow.Context, input *iam.CreateRoleInput) (*iam.CreateRoleOutput, error)
	CreateRoleAsync(ctx workflow.Context, input *iam.CreateRoleInput) *IAMCreateRoleFuture

	CreateSAMLProvider(ctx workflow.Context, input *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error)
	CreateSAMLProviderAsync(ctx workflow.Context, input *iam.CreateSAMLProviderInput) *IAMCreateSAMLProviderFuture

	CreateServiceLinkedRole(ctx workflow.Context, input *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error)
	CreateServiceLinkedRoleAsync(ctx workflow.Context, input *iam.CreateServiceLinkedRoleInput) *IAMCreateServiceLinkedRoleFuture

	CreateServiceSpecificCredential(ctx workflow.Context, input *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error)
	CreateServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.CreateServiceSpecificCredentialInput) *IAMCreateServiceSpecificCredentialFuture

	CreateUser(ctx workflow.Context, input *iam.CreateUserInput) (*iam.CreateUserOutput, error)
	CreateUserAsync(ctx workflow.Context, input *iam.CreateUserInput) *IAMCreateUserFuture

	CreateVirtualMFADevice(ctx workflow.Context, input *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error)
	CreateVirtualMFADeviceAsync(ctx workflow.Context, input *iam.CreateVirtualMFADeviceInput) *IAMCreateVirtualMFADeviceFuture

	DeactivateMFADevice(ctx workflow.Context, input *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error)
	DeactivateMFADeviceAsync(ctx workflow.Context, input *iam.DeactivateMFADeviceInput) *IAMDeactivateMFADeviceFuture

	DeleteAccessKey(ctx workflow.Context, input *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error)
	DeleteAccessKeyAsync(ctx workflow.Context, input *iam.DeleteAccessKeyInput) *IAMDeleteAccessKeyFuture

	DeleteAccountAlias(ctx workflow.Context, input *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error)
	DeleteAccountAliasAsync(ctx workflow.Context, input *iam.DeleteAccountAliasInput) *IAMDeleteAccountAliasFuture

	DeleteAccountPasswordPolicy(ctx workflow.Context, input *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error)
	DeleteAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.DeleteAccountPasswordPolicyInput) *IAMDeleteAccountPasswordPolicyFuture

	DeleteGroup(ctx workflow.Context, input *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error)
	DeleteGroupAsync(ctx workflow.Context, input *iam.DeleteGroupInput) *IAMDeleteGroupFuture

	DeleteGroupPolicy(ctx workflow.Context, input *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error)
	DeleteGroupPolicyAsync(ctx workflow.Context, input *iam.DeleteGroupPolicyInput) *IAMDeleteGroupPolicyFuture

	DeleteInstanceProfile(ctx workflow.Context, input *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error)
	DeleteInstanceProfileAsync(ctx workflow.Context, input *iam.DeleteInstanceProfileInput) *IAMDeleteInstanceProfileFuture

	DeleteLoginProfile(ctx workflow.Context, input *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error)
	DeleteLoginProfileAsync(ctx workflow.Context, input *iam.DeleteLoginProfileInput) *IAMDeleteLoginProfileFuture

	DeleteOpenIDConnectProvider(ctx workflow.Context, input *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error)
	DeleteOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.DeleteOpenIDConnectProviderInput) *IAMDeleteOpenIDConnectProviderFuture

	DeletePolicy(ctx workflow.Context, input *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error)
	DeletePolicyAsync(ctx workflow.Context, input *iam.DeletePolicyInput) *IAMDeletePolicyFuture

	DeletePolicyVersion(ctx workflow.Context, input *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error)
	DeletePolicyVersionAsync(ctx workflow.Context, input *iam.DeletePolicyVersionInput) *IAMDeletePolicyVersionFuture

	DeleteRole(ctx workflow.Context, input *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error)
	DeleteRoleAsync(ctx workflow.Context, input *iam.DeleteRoleInput) *IAMDeleteRoleFuture

	DeleteRolePermissionsBoundary(ctx workflow.Context, input *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error)
	DeleteRolePermissionsBoundaryAsync(ctx workflow.Context, input *iam.DeleteRolePermissionsBoundaryInput) *IAMDeleteRolePermissionsBoundaryFuture

	DeleteRolePolicy(ctx workflow.Context, input *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error)
	DeleteRolePolicyAsync(ctx workflow.Context, input *iam.DeleteRolePolicyInput) *IAMDeleteRolePolicyFuture

	DeleteSAMLProvider(ctx workflow.Context, input *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error)
	DeleteSAMLProviderAsync(ctx workflow.Context, input *iam.DeleteSAMLProviderInput) *IAMDeleteSAMLProviderFuture

	DeleteSSHPublicKey(ctx workflow.Context, input *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error)
	DeleteSSHPublicKeyAsync(ctx workflow.Context, input *iam.DeleteSSHPublicKeyInput) *IAMDeleteSSHPublicKeyFuture

	DeleteServerCertificate(ctx workflow.Context, input *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error)
	DeleteServerCertificateAsync(ctx workflow.Context, input *iam.DeleteServerCertificateInput) *IAMDeleteServerCertificateFuture

	DeleteServiceLinkedRole(ctx workflow.Context, input *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error)
	DeleteServiceLinkedRoleAsync(ctx workflow.Context, input *iam.DeleteServiceLinkedRoleInput) *IAMDeleteServiceLinkedRoleFuture

	DeleteServiceSpecificCredential(ctx workflow.Context, input *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error)
	DeleteServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.DeleteServiceSpecificCredentialInput) *IAMDeleteServiceSpecificCredentialFuture

	DeleteSigningCertificate(ctx workflow.Context, input *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error)
	DeleteSigningCertificateAsync(ctx workflow.Context, input *iam.DeleteSigningCertificateInput) *IAMDeleteSigningCertificateFuture

	DeleteUser(ctx workflow.Context, input *iam.DeleteUserInput) (*iam.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *iam.DeleteUserInput) *IAMDeleteUserFuture

	DeleteUserPermissionsBoundary(ctx workflow.Context, input *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error)
	DeleteUserPermissionsBoundaryAsync(ctx workflow.Context, input *iam.DeleteUserPermissionsBoundaryInput) *IAMDeleteUserPermissionsBoundaryFuture

	DeleteUserPolicy(ctx workflow.Context, input *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error)
	DeleteUserPolicyAsync(ctx workflow.Context, input *iam.DeleteUserPolicyInput) *IAMDeleteUserPolicyFuture

	DeleteVirtualMFADevice(ctx workflow.Context, input *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error)
	DeleteVirtualMFADeviceAsync(ctx workflow.Context, input *iam.DeleteVirtualMFADeviceInput) *IAMDeleteVirtualMFADeviceFuture

	DetachGroupPolicy(ctx workflow.Context, input *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error)
	DetachGroupPolicyAsync(ctx workflow.Context, input *iam.DetachGroupPolicyInput) *IAMDetachGroupPolicyFuture

	DetachRolePolicy(ctx workflow.Context, input *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error)
	DetachRolePolicyAsync(ctx workflow.Context, input *iam.DetachRolePolicyInput) *IAMDetachRolePolicyFuture

	DetachUserPolicy(ctx workflow.Context, input *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error)
	DetachUserPolicyAsync(ctx workflow.Context, input *iam.DetachUserPolicyInput) *IAMDetachUserPolicyFuture

	EnableMFADevice(ctx workflow.Context, input *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error)
	EnableMFADeviceAsync(ctx workflow.Context, input *iam.EnableMFADeviceInput) *IAMEnableMFADeviceFuture

	GenerateCredentialReport(ctx workflow.Context, input *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error)
	GenerateCredentialReportAsync(ctx workflow.Context, input *iam.GenerateCredentialReportInput) *IAMGenerateCredentialReportFuture

	GenerateOrganizationsAccessReport(ctx workflow.Context, input *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error)
	GenerateOrganizationsAccessReportAsync(ctx workflow.Context, input *iam.GenerateOrganizationsAccessReportInput) *IAMGenerateOrganizationsAccessReportFuture

	GenerateServiceLastAccessedDetails(ctx workflow.Context, input *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error)
	GenerateServiceLastAccessedDetailsAsync(ctx workflow.Context, input *iam.GenerateServiceLastAccessedDetailsInput) *IAMGenerateServiceLastAccessedDetailsFuture

	GetAccessKeyLastUsed(ctx workflow.Context, input *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error)
	GetAccessKeyLastUsedAsync(ctx workflow.Context, input *iam.GetAccessKeyLastUsedInput) *IAMGetAccessKeyLastUsedFuture

	GetAccountAuthorizationDetails(ctx workflow.Context, input *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error)
	GetAccountAuthorizationDetailsAsync(ctx workflow.Context, input *iam.GetAccountAuthorizationDetailsInput) *IAMGetAccountAuthorizationDetailsFuture

	GetAccountPasswordPolicy(ctx workflow.Context, input *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error)
	GetAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.GetAccountPasswordPolicyInput) *IAMGetAccountPasswordPolicyFuture

	GetAccountSummary(ctx workflow.Context, input *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error)
	GetAccountSummaryAsync(ctx workflow.Context, input *iam.GetAccountSummaryInput) *IAMGetAccountSummaryFuture

	GetContextKeysForCustomPolicy(ctx workflow.Context, input *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)
	GetContextKeysForCustomPolicyAsync(ctx workflow.Context, input *iam.GetContextKeysForCustomPolicyInput) *IAMGetContextKeysForCustomPolicyFuture

	GetContextKeysForPrincipalPolicy(ctx workflow.Context, input *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)
	GetContextKeysForPrincipalPolicyAsync(ctx workflow.Context, input *iam.GetContextKeysForPrincipalPolicyInput) *IAMGetContextKeysForPrincipalPolicyFuture

	GetCredentialReport(ctx workflow.Context, input *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error)
	GetCredentialReportAsync(ctx workflow.Context, input *iam.GetCredentialReportInput) *IAMGetCredentialReportFuture

	GetGroup(ctx workflow.Context, input *iam.GetGroupInput) (*iam.GetGroupOutput, error)
	GetGroupAsync(ctx workflow.Context, input *iam.GetGroupInput) *IAMGetGroupFuture

	GetGroupPolicy(ctx workflow.Context, input *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error)
	GetGroupPolicyAsync(ctx workflow.Context, input *iam.GetGroupPolicyInput) *IAMGetGroupPolicyFuture

	GetInstanceProfile(ctx workflow.Context, input *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error)
	GetInstanceProfileAsync(ctx workflow.Context, input *iam.GetInstanceProfileInput) *IAMGetInstanceProfileFuture

	GetLoginProfile(ctx workflow.Context, input *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error)
	GetLoginProfileAsync(ctx workflow.Context, input *iam.GetLoginProfileInput) *IAMGetLoginProfileFuture

	GetOpenIDConnectProvider(ctx workflow.Context, input *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error)
	GetOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.GetOpenIDConnectProviderInput) *IAMGetOpenIDConnectProviderFuture

	GetOrganizationsAccessReport(ctx workflow.Context, input *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error)
	GetOrganizationsAccessReportAsync(ctx workflow.Context, input *iam.GetOrganizationsAccessReportInput) *IAMGetOrganizationsAccessReportFuture

	GetPolicy(ctx workflow.Context, input *iam.GetPolicyInput) (*iam.GetPolicyOutput, error)
	GetPolicyAsync(ctx workflow.Context, input *iam.GetPolicyInput) *IAMGetPolicyFuture

	GetPolicyVersion(ctx workflow.Context, input *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error)
	GetPolicyVersionAsync(ctx workflow.Context, input *iam.GetPolicyVersionInput) *IAMGetPolicyVersionFuture

	GetRole(ctx workflow.Context, input *iam.GetRoleInput) (*iam.GetRoleOutput, error)
	GetRoleAsync(ctx workflow.Context, input *iam.GetRoleInput) *IAMGetRoleFuture

	GetRolePolicy(ctx workflow.Context, input *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error)
	GetRolePolicyAsync(ctx workflow.Context, input *iam.GetRolePolicyInput) *IAMGetRolePolicyFuture

	GetSAMLProvider(ctx workflow.Context, input *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error)
	GetSAMLProviderAsync(ctx workflow.Context, input *iam.GetSAMLProviderInput) *IAMGetSAMLProviderFuture

	GetSSHPublicKey(ctx workflow.Context, input *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error)
	GetSSHPublicKeyAsync(ctx workflow.Context, input *iam.GetSSHPublicKeyInput) *IAMGetSSHPublicKeyFuture

	GetServerCertificate(ctx workflow.Context, input *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error)
	GetServerCertificateAsync(ctx workflow.Context, input *iam.GetServerCertificateInput) *IAMGetServerCertificateFuture

	GetServiceLastAccessedDetails(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error)
	GetServiceLastAccessedDetailsAsync(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsInput) *IAMGetServiceLastAccessedDetailsFuture

	GetServiceLastAccessedDetailsWithEntities(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)
	GetServiceLastAccessedDetailsWithEntitiesAsync(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsWithEntitiesInput) *IAMGetServiceLastAccessedDetailsWithEntitiesFuture

	GetServiceLinkedRoleDeletionStatus(ctx workflow.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)
	GetServiceLinkedRoleDeletionStatusAsync(ctx workflow.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput) *IAMGetServiceLinkedRoleDeletionStatusFuture

	GetUser(ctx workflow.Context, input *iam.GetUserInput) (*iam.GetUserOutput, error)
	GetUserAsync(ctx workflow.Context, input *iam.GetUserInput) *IAMGetUserFuture

	GetUserPolicy(ctx workflow.Context, input *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error)
	GetUserPolicyAsync(ctx workflow.Context, input *iam.GetUserPolicyInput) *IAMGetUserPolicyFuture

	ListAccessKeys(ctx workflow.Context, input *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error)
	ListAccessKeysAsync(ctx workflow.Context, input *iam.ListAccessKeysInput) *IAMListAccessKeysFuture

	ListAccountAliases(ctx workflow.Context, input *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error)
	ListAccountAliasesAsync(ctx workflow.Context, input *iam.ListAccountAliasesInput) *IAMListAccountAliasesFuture

	ListAttachedGroupPolicies(ctx workflow.Context, input *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error)
	ListAttachedGroupPoliciesAsync(ctx workflow.Context, input *iam.ListAttachedGroupPoliciesInput) *IAMListAttachedGroupPoliciesFuture

	ListAttachedRolePolicies(ctx workflow.Context, input *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error)
	ListAttachedRolePoliciesAsync(ctx workflow.Context, input *iam.ListAttachedRolePoliciesInput) *IAMListAttachedRolePoliciesFuture

	ListAttachedUserPolicies(ctx workflow.Context, input *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error)
	ListAttachedUserPoliciesAsync(ctx workflow.Context, input *iam.ListAttachedUserPoliciesInput) *IAMListAttachedUserPoliciesFuture

	ListEntitiesForPolicy(ctx workflow.Context, input *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error)
	ListEntitiesForPolicyAsync(ctx workflow.Context, input *iam.ListEntitiesForPolicyInput) *IAMListEntitiesForPolicyFuture

	ListGroupPolicies(ctx workflow.Context, input *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error)
	ListGroupPoliciesAsync(ctx workflow.Context, input *iam.ListGroupPoliciesInput) *IAMListGroupPoliciesFuture

	ListGroups(ctx workflow.Context, input *iam.ListGroupsInput) (*iam.ListGroupsOutput, error)
	ListGroupsAsync(ctx workflow.Context, input *iam.ListGroupsInput) *IAMListGroupsFuture

	ListGroupsForUser(ctx workflow.Context, input *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error)
	ListGroupsForUserAsync(ctx workflow.Context, input *iam.ListGroupsForUserInput) *IAMListGroupsForUserFuture

	ListInstanceProfiles(ctx workflow.Context, input *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error)
	ListInstanceProfilesAsync(ctx workflow.Context, input *iam.ListInstanceProfilesInput) *IAMListInstanceProfilesFuture

	ListInstanceProfilesForRole(ctx workflow.Context, input *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error)
	ListInstanceProfilesForRoleAsync(ctx workflow.Context, input *iam.ListInstanceProfilesForRoleInput) *IAMListInstanceProfilesForRoleFuture

	ListMFADevices(ctx workflow.Context, input *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error)
	ListMFADevicesAsync(ctx workflow.Context, input *iam.ListMFADevicesInput) *IAMListMFADevicesFuture

	ListOpenIDConnectProviders(ctx workflow.Context, input *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error)
	ListOpenIDConnectProvidersAsync(ctx workflow.Context, input *iam.ListOpenIDConnectProvidersInput) *IAMListOpenIDConnectProvidersFuture

	ListPolicies(ctx workflow.Context, input *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error)
	ListPoliciesAsync(ctx workflow.Context, input *iam.ListPoliciesInput) *IAMListPoliciesFuture

	ListPoliciesGrantingServiceAccess(ctx workflow.Context, input *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error)
	ListPoliciesGrantingServiceAccessAsync(ctx workflow.Context, input *iam.ListPoliciesGrantingServiceAccessInput) *IAMListPoliciesGrantingServiceAccessFuture

	ListPolicyVersions(ctx workflow.Context, input *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error)
	ListPolicyVersionsAsync(ctx workflow.Context, input *iam.ListPolicyVersionsInput) *IAMListPolicyVersionsFuture

	ListRolePolicies(ctx workflow.Context, input *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error)
	ListRolePoliciesAsync(ctx workflow.Context, input *iam.ListRolePoliciesInput) *IAMListRolePoliciesFuture

	ListRoleTags(ctx workflow.Context, input *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error)
	ListRoleTagsAsync(ctx workflow.Context, input *iam.ListRoleTagsInput) *IAMListRoleTagsFuture

	ListRoles(ctx workflow.Context, input *iam.ListRolesInput) (*iam.ListRolesOutput, error)
	ListRolesAsync(ctx workflow.Context, input *iam.ListRolesInput) *IAMListRolesFuture

	ListSAMLProviders(ctx workflow.Context, input *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error)
	ListSAMLProvidersAsync(ctx workflow.Context, input *iam.ListSAMLProvidersInput) *IAMListSAMLProvidersFuture

	ListSSHPublicKeys(ctx workflow.Context, input *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error)
	ListSSHPublicKeysAsync(ctx workflow.Context, input *iam.ListSSHPublicKeysInput) *IAMListSSHPublicKeysFuture

	ListServerCertificates(ctx workflow.Context, input *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error)
	ListServerCertificatesAsync(ctx workflow.Context, input *iam.ListServerCertificatesInput) *IAMListServerCertificatesFuture

	ListServiceSpecificCredentials(ctx workflow.Context, input *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error)
	ListServiceSpecificCredentialsAsync(ctx workflow.Context, input *iam.ListServiceSpecificCredentialsInput) *IAMListServiceSpecificCredentialsFuture

	ListSigningCertificates(ctx workflow.Context, input *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error)
	ListSigningCertificatesAsync(ctx workflow.Context, input *iam.ListSigningCertificatesInput) *IAMListSigningCertificatesFuture

	ListUserPolicies(ctx workflow.Context, input *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error)
	ListUserPoliciesAsync(ctx workflow.Context, input *iam.ListUserPoliciesInput) *IAMListUserPoliciesFuture

	ListUserTags(ctx workflow.Context, input *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error)
	ListUserTagsAsync(ctx workflow.Context, input *iam.ListUserTagsInput) *IAMListUserTagsFuture

	ListUsers(ctx workflow.Context, input *iam.ListUsersInput) (*iam.ListUsersOutput, error)
	ListUsersAsync(ctx workflow.Context, input *iam.ListUsersInput) *IAMListUsersFuture

	ListVirtualMFADevices(ctx workflow.Context, input *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error)
	ListVirtualMFADevicesAsync(ctx workflow.Context, input *iam.ListVirtualMFADevicesInput) *IAMListVirtualMFADevicesFuture

	PutGroupPolicy(ctx workflow.Context, input *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error)
	PutGroupPolicyAsync(ctx workflow.Context, input *iam.PutGroupPolicyInput) *IAMPutGroupPolicyFuture

	PutRolePermissionsBoundary(ctx workflow.Context, input *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error)
	PutRolePermissionsBoundaryAsync(ctx workflow.Context, input *iam.PutRolePermissionsBoundaryInput) *IAMPutRolePermissionsBoundaryFuture

	PutRolePolicy(ctx workflow.Context, input *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error)
	PutRolePolicyAsync(ctx workflow.Context, input *iam.PutRolePolicyInput) *IAMPutRolePolicyFuture

	PutUserPermissionsBoundary(ctx workflow.Context, input *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error)
	PutUserPermissionsBoundaryAsync(ctx workflow.Context, input *iam.PutUserPermissionsBoundaryInput) *IAMPutUserPermissionsBoundaryFuture

	PutUserPolicy(ctx workflow.Context, input *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error)
	PutUserPolicyAsync(ctx workflow.Context, input *iam.PutUserPolicyInput) *IAMPutUserPolicyFuture

	RemoveClientIDFromOpenIDConnectProvider(ctx workflow.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)
	RemoveClientIDFromOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput) *IAMRemoveClientIDFromOpenIDConnectProviderFuture

	RemoveRoleFromInstanceProfile(ctx workflow.Context, input *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error)
	RemoveRoleFromInstanceProfileAsync(ctx workflow.Context, input *iam.RemoveRoleFromInstanceProfileInput) *IAMRemoveRoleFromInstanceProfileFuture

	RemoveUserFromGroup(ctx workflow.Context, input *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error)
	RemoveUserFromGroupAsync(ctx workflow.Context, input *iam.RemoveUserFromGroupInput) *IAMRemoveUserFromGroupFuture

	ResetServiceSpecificCredential(ctx workflow.Context, input *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error)
	ResetServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.ResetServiceSpecificCredentialInput) *IAMResetServiceSpecificCredentialFuture

	ResyncMFADevice(ctx workflow.Context, input *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error)
	ResyncMFADeviceAsync(ctx workflow.Context, input *iam.ResyncMFADeviceInput) *IAMResyncMFADeviceFuture

	SetDefaultPolicyVersion(ctx workflow.Context, input *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error)
	SetDefaultPolicyVersionAsync(ctx workflow.Context, input *iam.SetDefaultPolicyVersionInput) *IAMSetDefaultPolicyVersionFuture

	SetSecurityTokenServicePreferences(ctx workflow.Context, input *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error)
	SetSecurityTokenServicePreferencesAsync(ctx workflow.Context, input *iam.SetSecurityTokenServicePreferencesInput) *IAMSetSecurityTokenServicePreferencesFuture

	SimulateCustomPolicy(ctx workflow.Context, input *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error)
	SimulateCustomPolicyAsync(ctx workflow.Context, input *iam.SimulateCustomPolicyInput) *IAMSimulateCustomPolicyFuture

	SimulatePrincipalPolicy(ctx workflow.Context, input *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error)
	SimulatePrincipalPolicyAsync(ctx workflow.Context, input *iam.SimulatePrincipalPolicyInput) *IAMSimulatePrincipalPolicyFuture

	TagRole(ctx workflow.Context, input *iam.TagRoleInput) (*iam.TagRoleOutput, error)
	TagRoleAsync(ctx workflow.Context, input *iam.TagRoleInput) *IAMTagRoleFuture

	TagUser(ctx workflow.Context, input *iam.TagUserInput) (*iam.TagUserOutput, error)
	TagUserAsync(ctx workflow.Context, input *iam.TagUserInput) *IAMTagUserFuture

	UntagRole(ctx workflow.Context, input *iam.UntagRoleInput) (*iam.UntagRoleOutput, error)
	UntagRoleAsync(ctx workflow.Context, input *iam.UntagRoleInput) *IAMUntagRoleFuture

	UntagUser(ctx workflow.Context, input *iam.UntagUserInput) (*iam.UntagUserOutput, error)
	UntagUserAsync(ctx workflow.Context, input *iam.UntagUserInput) *IAMUntagUserFuture

	UpdateAccessKey(ctx workflow.Context, input *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error)
	UpdateAccessKeyAsync(ctx workflow.Context, input *iam.UpdateAccessKeyInput) *IAMUpdateAccessKeyFuture

	UpdateAccountPasswordPolicy(ctx workflow.Context, input *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error)
	UpdateAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.UpdateAccountPasswordPolicyInput) *IAMUpdateAccountPasswordPolicyFuture

	UpdateAssumeRolePolicy(ctx workflow.Context, input *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error)
	UpdateAssumeRolePolicyAsync(ctx workflow.Context, input *iam.UpdateAssumeRolePolicyInput) *IAMUpdateAssumeRolePolicyFuture

	UpdateGroup(ctx workflow.Context, input *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error)
	UpdateGroupAsync(ctx workflow.Context, input *iam.UpdateGroupInput) *IAMUpdateGroupFuture

	UpdateLoginProfile(ctx workflow.Context, input *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error)
	UpdateLoginProfileAsync(ctx workflow.Context, input *iam.UpdateLoginProfileInput) *IAMUpdateLoginProfileFuture

	UpdateOpenIDConnectProviderThumbprint(ctx workflow.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)
	UpdateOpenIDConnectProviderThumbprintAsync(ctx workflow.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput) *IAMUpdateOpenIDConnectProviderThumbprintFuture

	UpdateRole(ctx workflow.Context, input *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error)
	UpdateRoleAsync(ctx workflow.Context, input *iam.UpdateRoleInput) *IAMUpdateRoleFuture

	UpdateRoleDescription(ctx workflow.Context, input *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error)
	UpdateRoleDescriptionAsync(ctx workflow.Context, input *iam.UpdateRoleDescriptionInput) *IAMUpdateRoleDescriptionFuture

	UpdateSAMLProvider(ctx workflow.Context, input *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error)
	UpdateSAMLProviderAsync(ctx workflow.Context, input *iam.UpdateSAMLProviderInput) *IAMUpdateSAMLProviderFuture

	UpdateSSHPublicKey(ctx workflow.Context, input *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error)
	UpdateSSHPublicKeyAsync(ctx workflow.Context, input *iam.UpdateSSHPublicKeyInput) *IAMUpdateSSHPublicKeyFuture

	UpdateServerCertificate(ctx workflow.Context, input *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error)
	UpdateServerCertificateAsync(ctx workflow.Context, input *iam.UpdateServerCertificateInput) *IAMUpdateServerCertificateFuture

	UpdateServiceSpecificCredential(ctx workflow.Context, input *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error)
	UpdateServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.UpdateServiceSpecificCredentialInput) *IAMUpdateServiceSpecificCredentialFuture

	UpdateSigningCertificate(ctx workflow.Context, input *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error)
	UpdateSigningCertificateAsync(ctx workflow.Context, input *iam.UpdateSigningCertificateInput) *IAMUpdateSigningCertificateFuture

	UpdateUser(ctx workflow.Context, input *iam.UpdateUserInput) (*iam.UpdateUserOutput, error)
	UpdateUserAsync(ctx workflow.Context, input *iam.UpdateUserInput) *IAMUpdateUserFuture

	UploadSSHPublicKey(ctx workflow.Context, input *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error)
	UploadSSHPublicKeyAsync(ctx workflow.Context, input *iam.UploadSSHPublicKeyInput) *IAMUploadSSHPublicKeyFuture

	UploadServerCertificate(ctx workflow.Context, input *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error)
	UploadServerCertificateAsync(ctx workflow.Context, input *iam.UploadServerCertificateInput) *IAMUploadServerCertificateFuture

	UploadSigningCertificate(ctx workflow.Context, input *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error)
	UploadSigningCertificateAsync(ctx workflow.Context, input *iam.UploadSigningCertificateInput) *IAMUploadSigningCertificateFuture

	WaitUntilInstanceProfileExists(ctx workflow.Context, input *iam.GetInstanceProfileInput) error
	WaitUntilInstanceProfileExistsAsync(ctx workflow.Context, input *iam.GetInstanceProfileInput) *VoidFuture

	WaitUntilPolicyExists(ctx workflow.Context, input *iam.GetPolicyInput) error
	WaitUntilPolicyExistsAsync(ctx workflow.Context, input *iam.GetPolicyInput) *VoidFuture

	WaitUntilRoleExists(ctx workflow.Context, input *iam.GetRoleInput) error
	WaitUntilRoleExistsAsync(ctx workflow.Context, input *iam.GetRoleInput) *VoidFuture

	WaitUntilUserExists(ctx workflow.Context, input *iam.GetUserInput) error
	WaitUntilUserExistsAsync(ctx workflow.Context, input *iam.GetUserInput) *VoidFuture
}

type IAMStub struct{}

func NewIAMStub() IAMClient {
	return &IAMStub{}
}

type IAMAddClientIDToOpenIDConnectProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMAddClientIDToOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	var output iam.AddClientIDToOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMAddRoleToInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMAddRoleToInstanceProfileFuture) Get(ctx workflow.Context) (*iam.AddRoleToInstanceProfileOutput, error) {
	var output iam.AddRoleToInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMAddUserToGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMAddUserToGroupFuture) Get(ctx workflow.Context) (*iam.AddUserToGroupOutput, error) {
	var output iam.AddUserToGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMAttachGroupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMAttachGroupPolicyFuture) Get(ctx workflow.Context) (*iam.AttachGroupPolicyOutput, error) {
	var output iam.AttachGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMAttachRolePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMAttachRolePolicyFuture) Get(ctx workflow.Context) (*iam.AttachRolePolicyOutput, error) {
	var output iam.AttachRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMAttachUserPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMAttachUserPolicyFuture) Get(ctx workflow.Context) (*iam.AttachUserPolicyOutput, error) {
	var output iam.AttachUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMChangePasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMChangePasswordFuture) Get(ctx workflow.Context) (*iam.ChangePasswordOutput, error) {
	var output iam.ChangePasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreateAccessKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreateAccessKeyFuture) Get(ctx workflow.Context) (*iam.CreateAccessKeyOutput, error) {
	var output iam.CreateAccessKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreateAccountAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreateAccountAliasFuture) Get(ctx workflow.Context) (*iam.CreateAccountAliasOutput, error) {
	var output iam.CreateAccountAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreateGroupFuture) Get(ctx workflow.Context) (*iam.CreateGroupOutput, error) {
	var output iam.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreateInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreateInstanceProfileFuture) Get(ctx workflow.Context) (*iam.CreateInstanceProfileOutput, error) {
	var output iam.CreateInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreateLoginProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreateLoginProfileFuture) Get(ctx workflow.Context) (*iam.CreateLoginProfileOutput, error) {
	var output iam.CreateLoginProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreateOpenIDConnectProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreateOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.CreateOpenIDConnectProviderOutput, error) {
	var output iam.CreateOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreatePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreatePolicyFuture) Get(ctx workflow.Context) (*iam.CreatePolicyOutput, error) {
	var output iam.CreatePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreatePolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreatePolicyVersionFuture) Get(ctx workflow.Context) (*iam.CreatePolicyVersionOutput, error) {
	var output iam.CreatePolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreateRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreateRoleFuture) Get(ctx workflow.Context) (*iam.CreateRoleOutput, error) {
	var output iam.CreateRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreateSAMLProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreateSAMLProviderFuture) Get(ctx workflow.Context) (*iam.CreateSAMLProviderOutput, error) {
	var output iam.CreateSAMLProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreateServiceLinkedRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreateServiceLinkedRoleFuture) Get(ctx workflow.Context) (*iam.CreateServiceLinkedRoleOutput, error) {
	var output iam.CreateServiceLinkedRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreateServiceSpecificCredentialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreateServiceSpecificCredentialFuture) Get(ctx workflow.Context) (*iam.CreateServiceSpecificCredentialOutput, error) {
	var output iam.CreateServiceSpecificCredentialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreateUserFuture) Get(ctx workflow.Context) (*iam.CreateUserOutput, error) {
	var output iam.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMCreateVirtualMFADeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMCreateVirtualMFADeviceFuture) Get(ctx workflow.Context) (*iam.CreateVirtualMFADeviceOutput, error) {
	var output iam.CreateVirtualMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeactivateMFADeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeactivateMFADeviceFuture) Get(ctx workflow.Context) (*iam.DeactivateMFADeviceOutput, error) {
	var output iam.DeactivateMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteAccessKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteAccessKeyFuture) Get(ctx workflow.Context) (*iam.DeleteAccessKeyOutput, error) {
	var output iam.DeleteAccessKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteAccountAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteAccountAliasFuture) Get(ctx workflow.Context) (*iam.DeleteAccountAliasOutput, error) {
	var output iam.DeleteAccountAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteAccountPasswordPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteAccountPasswordPolicyFuture) Get(ctx workflow.Context) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	var output iam.DeleteAccountPasswordPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteGroupFuture) Get(ctx workflow.Context) (*iam.DeleteGroupOutput, error) {
	var output iam.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteGroupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteGroupPolicyFuture) Get(ctx workflow.Context) (*iam.DeleteGroupPolicyOutput, error) {
	var output iam.DeleteGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteInstanceProfileFuture) Get(ctx workflow.Context) (*iam.DeleteInstanceProfileOutput, error) {
	var output iam.DeleteInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteLoginProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteLoginProfileFuture) Get(ctx workflow.Context) (*iam.DeleteLoginProfileOutput, error) {
	var output iam.DeleteLoginProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteOpenIDConnectProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	var output iam.DeleteOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeletePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeletePolicyFuture) Get(ctx workflow.Context) (*iam.DeletePolicyOutput, error) {
	var output iam.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeletePolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeletePolicyVersionFuture) Get(ctx workflow.Context) (*iam.DeletePolicyVersionOutput, error) {
	var output iam.DeletePolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteRoleFuture) Get(ctx workflow.Context) (*iam.DeleteRoleOutput, error) {
	var output iam.DeleteRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteRolePermissionsBoundaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteRolePermissionsBoundaryFuture) Get(ctx workflow.Context) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	var output iam.DeleteRolePermissionsBoundaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteRolePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteRolePolicyFuture) Get(ctx workflow.Context) (*iam.DeleteRolePolicyOutput, error) {
	var output iam.DeleteRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteSAMLProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteSAMLProviderFuture) Get(ctx workflow.Context) (*iam.DeleteSAMLProviderOutput, error) {
	var output iam.DeleteSAMLProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteSSHPublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteSSHPublicKeyFuture) Get(ctx workflow.Context) (*iam.DeleteSSHPublicKeyOutput, error) {
	var output iam.DeleteSSHPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteServerCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteServerCertificateFuture) Get(ctx workflow.Context) (*iam.DeleteServerCertificateOutput, error) {
	var output iam.DeleteServerCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteServiceLinkedRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteServiceLinkedRoleFuture) Get(ctx workflow.Context) (*iam.DeleteServiceLinkedRoleOutput, error) {
	var output iam.DeleteServiceLinkedRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteServiceSpecificCredentialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteServiceSpecificCredentialFuture) Get(ctx workflow.Context) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	var output iam.DeleteServiceSpecificCredentialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteSigningCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteSigningCertificateFuture) Get(ctx workflow.Context) (*iam.DeleteSigningCertificateOutput, error) {
	var output iam.DeleteSigningCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteUserFuture) Get(ctx workflow.Context) (*iam.DeleteUserOutput, error) {
	var output iam.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteUserPermissionsBoundaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteUserPermissionsBoundaryFuture) Get(ctx workflow.Context) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	var output iam.DeleteUserPermissionsBoundaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteUserPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteUserPolicyFuture) Get(ctx workflow.Context) (*iam.DeleteUserPolicyOutput, error) {
	var output iam.DeleteUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDeleteVirtualMFADeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDeleteVirtualMFADeviceFuture) Get(ctx workflow.Context) (*iam.DeleteVirtualMFADeviceOutput, error) {
	var output iam.DeleteVirtualMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDetachGroupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDetachGroupPolicyFuture) Get(ctx workflow.Context) (*iam.DetachGroupPolicyOutput, error) {
	var output iam.DetachGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDetachRolePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDetachRolePolicyFuture) Get(ctx workflow.Context) (*iam.DetachRolePolicyOutput, error) {
	var output iam.DetachRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMDetachUserPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMDetachUserPolicyFuture) Get(ctx workflow.Context) (*iam.DetachUserPolicyOutput, error) {
	var output iam.DetachUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMEnableMFADeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMEnableMFADeviceFuture) Get(ctx workflow.Context) (*iam.EnableMFADeviceOutput, error) {
	var output iam.EnableMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGenerateCredentialReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGenerateCredentialReportFuture) Get(ctx workflow.Context) (*iam.GenerateCredentialReportOutput, error) {
	var output iam.GenerateCredentialReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGenerateOrganizationsAccessReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGenerateOrganizationsAccessReportFuture) Get(ctx workflow.Context) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	var output iam.GenerateOrganizationsAccessReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGenerateServiceLastAccessedDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGenerateServiceLastAccessedDetailsFuture) Get(ctx workflow.Context) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	var output iam.GenerateServiceLastAccessedDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetAccessKeyLastUsedFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetAccessKeyLastUsedFuture) Get(ctx workflow.Context) (*iam.GetAccessKeyLastUsedOutput, error) {
	var output iam.GetAccessKeyLastUsedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetAccountAuthorizationDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetAccountAuthorizationDetailsFuture) Get(ctx workflow.Context) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	var output iam.GetAccountAuthorizationDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetAccountPasswordPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetAccountPasswordPolicyFuture) Get(ctx workflow.Context) (*iam.GetAccountPasswordPolicyOutput, error) {
	var output iam.GetAccountPasswordPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetAccountSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetAccountSummaryFuture) Get(ctx workflow.Context) (*iam.GetAccountSummaryOutput, error) {
	var output iam.GetAccountSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetContextKeysForCustomPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetContextKeysForCustomPolicyFuture) Get(ctx workflow.Context) (*iam.GetContextKeysForPolicyResponse, error) {
	var output iam.GetContextKeysForPolicyResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetContextKeysForPrincipalPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetContextKeysForPrincipalPolicyFuture) Get(ctx workflow.Context) (*iam.GetContextKeysForPolicyResponse, error) {
	var output iam.GetContextKeysForPolicyResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetCredentialReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetCredentialReportFuture) Get(ctx workflow.Context) (*iam.GetCredentialReportOutput, error) {
	var output iam.GetCredentialReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetGroupFuture) Get(ctx workflow.Context) (*iam.GetGroupOutput, error) {
	var output iam.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetGroupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetGroupPolicyFuture) Get(ctx workflow.Context) (*iam.GetGroupPolicyOutput, error) {
	var output iam.GetGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetInstanceProfileFuture) Get(ctx workflow.Context) (*iam.GetInstanceProfileOutput, error) {
	var output iam.GetInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetLoginProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetLoginProfileFuture) Get(ctx workflow.Context) (*iam.GetLoginProfileOutput, error) {
	var output iam.GetLoginProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetOpenIDConnectProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.GetOpenIDConnectProviderOutput, error) {
	var output iam.GetOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetOrganizationsAccessReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetOrganizationsAccessReportFuture) Get(ctx workflow.Context) (*iam.GetOrganizationsAccessReportOutput, error) {
	var output iam.GetOrganizationsAccessReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetPolicyFuture) Get(ctx workflow.Context) (*iam.GetPolicyOutput, error) {
	var output iam.GetPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetPolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetPolicyVersionFuture) Get(ctx workflow.Context) (*iam.GetPolicyVersionOutput, error) {
	var output iam.GetPolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetRoleFuture) Get(ctx workflow.Context) (*iam.GetRoleOutput, error) {
	var output iam.GetRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetRolePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetRolePolicyFuture) Get(ctx workflow.Context) (*iam.GetRolePolicyOutput, error) {
	var output iam.GetRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetSAMLProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetSAMLProviderFuture) Get(ctx workflow.Context) (*iam.GetSAMLProviderOutput, error) {
	var output iam.GetSAMLProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetSSHPublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetSSHPublicKeyFuture) Get(ctx workflow.Context) (*iam.GetSSHPublicKeyOutput, error) {
	var output iam.GetSSHPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetServerCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetServerCertificateFuture) Get(ctx workflow.Context) (*iam.GetServerCertificateOutput, error) {
	var output iam.GetServerCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetServiceLastAccessedDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetServiceLastAccessedDetailsFuture) Get(ctx workflow.Context) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	var output iam.GetServiceLastAccessedDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetServiceLastAccessedDetailsWithEntitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetServiceLastAccessedDetailsWithEntitiesFuture) Get(ctx workflow.Context) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	var output iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetServiceLinkedRoleDeletionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetServiceLinkedRoleDeletionStatusFuture) Get(ctx workflow.Context) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	var output iam.GetServiceLinkedRoleDeletionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetUserFuture) Get(ctx workflow.Context) (*iam.GetUserOutput, error) {
	var output iam.GetUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMGetUserPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMGetUserPolicyFuture) Get(ctx workflow.Context) (*iam.GetUserPolicyOutput, error) {
	var output iam.GetUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListAccessKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListAccessKeysFuture) Get(ctx workflow.Context) (*iam.ListAccessKeysOutput, error) {
	var output iam.ListAccessKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListAccountAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListAccountAliasesFuture) Get(ctx workflow.Context) (*iam.ListAccountAliasesOutput, error) {
	var output iam.ListAccountAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListAttachedGroupPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListAttachedGroupPoliciesFuture) Get(ctx workflow.Context) (*iam.ListAttachedGroupPoliciesOutput, error) {
	var output iam.ListAttachedGroupPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListAttachedRolePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListAttachedRolePoliciesFuture) Get(ctx workflow.Context) (*iam.ListAttachedRolePoliciesOutput, error) {
	var output iam.ListAttachedRolePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListAttachedUserPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListAttachedUserPoliciesFuture) Get(ctx workflow.Context) (*iam.ListAttachedUserPoliciesOutput, error) {
	var output iam.ListAttachedUserPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListEntitiesForPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListEntitiesForPolicyFuture) Get(ctx workflow.Context) (*iam.ListEntitiesForPolicyOutput, error) {
	var output iam.ListEntitiesForPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListGroupPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListGroupPoliciesFuture) Get(ctx workflow.Context) (*iam.ListGroupPoliciesOutput, error) {
	var output iam.ListGroupPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListGroupsFuture) Get(ctx workflow.Context) (*iam.ListGroupsOutput, error) {
	var output iam.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListGroupsForUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListGroupsForUserFuture) Get(ctx workflow.Context) (*iam.ListGroupsForUserOutput, error) {
	var output iam.ListGroupsForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListInstanceProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListInstanceProfilesFuture) Get(ctx workflow.Context) (*iam.ListInstanceProfilesOutput, error) {
	var output iam.ListInstanceProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListInstanceProfilesForRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListInstanceProfilesForRoleFuture) Get(ctx workflow.Context) (*iam.ListInstanceProfilesForRoleOutput, error) {
	var output iam.ListInstanceProfilesForRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListMFADevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListMFADevicesFuture) Get(ctx workflow.Context) (*iam.ListMFADevicesOutput, error) {
	var output iam.ListMFADevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListOpenIDConnectProvidersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListOpenIDConnectProvidersFuture) Get(ctx workflow.Context) (*iam.ListOpenIDConnectProvidersOutput, error) {
	var output iam.ListOpenIDConnectProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListPoliciesFuture) Get(ctx workflow.Context) (*iam.ListPoliciesOutput, error) {
	var output iam.ListPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListPoliciesGrantingServiceAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListPoliciesGrantingServiceAccessFuture) Get(ctx workflow.Context) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	var output iam.ListPoliciesGrantingServiceAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListPolicyVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListPolicyVersionsFuture) Get(ctx workflow.Context) (*iam.ListPolicyVersionsOutput, error) {
	var output iam.ListPolicyVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListRolePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListRolePoliciesFuture) Get(ctx workflow.Context) (*iam.ListRolePoliciesOutput, error) {
	var output iam.ListRolePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListRoleTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListRoleTagsFuture) Get(ctx workflow.Context) (*iam.ListRoleTagsOutput, error) {
	var output iam.ListRoleTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListRolesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListRolesFuture) Get(ctx workflow.Context) (*iam.ListRolesOutput, error) {
	var output iam.ListRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListSAMLProvidersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListSAMLProvidersFuture) Get(ctx workflow.Context) (*iam.ListSAMLProvidersOutput, error) {
	var output iam.ListSAMLProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListSSHPublicKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListSSHPublicKeysFuture) Get(ctx workflow.Context) (*iam.ListSSHPublicKeysOutput, error) {
	var output iam.ListSSHPublicKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListServerCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListServerCertificatesFuture) Get(ctx workflow.Context) (*iam.ListServerCertificatesOutput, error) {
	var output iam.ListServerCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListServiceSpecificCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListServiceSpecificCredentialsFuture) Get(ctx workflow.Context) (*iam.ListServiceSpecificCredentialsOutput, error) {
	var output iam.ListServiceSpecificCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListSigningCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListSigningCertificatesFuture) Get(ctx workflow.Context) (*iam.ListSigningCertificatesOutput, error) {
	var output iam.ListSigningCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListUserPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListUserPoliciesFuture) Get(ctx workflow.Context) (*iam.ListUserPoliciesOutput, error) {
	var output iam.ListUserPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListUserTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListUserTagsFuture) Get(ctx workflow.Context) (*iam.ListUserTagsOutput, error) {
	var output iam.ListUserTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListUsersFuture) Get(ctx workflow.Context) (*iam.ListUsersOutput, error) {
	var output iam.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMListVirtualMFADevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMListVirtualMFADevicesFuture) Get(ctx workflow.Context) (*iam.ListVirtualMFADevicesOutput, error) {
	var output iam.ListVirtualMFADevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMPutGroupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMPutGroupPolicyFuture) Get(ctx workflow.Context) (*iam.PutGroupPolicyOutput, error) {
	var output iam.PutGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMPutRolePermissionsBoundaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMPutRolePermissionsBoundaryFuture) Get(ctx workflow.Context) (*iam.PutRolePermissionsBoundaryOutput, error) {
	var output iam.PutRolePermissionsBoundaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMPutRolePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMPutRolePolicyFuture) Get(ctx workflow.Context) (*iam.PutRolePolicyOutput, error) {
	var output iam.PutRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMPutUserPermissionsBoundaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMPutUserPermissionsBoundaryFuture) Get(ctx workflow.Context) (*iam.PutUserPermissionsBoundaryOutput, error) {
	var output iam.PutUserPermissionsBoundaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMPutUserPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMPutUserPolicyFuture) Get(ctx workflow.Context) (*iam.PutUserPolicyOutput, error) {
	var output iam.PutUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMRemoveClientIDFromOpenIDConnectProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMRemoveClientIDFromOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	var output iam.RemoveClientIDFromOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMRemoveRoleFromInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMRemoveRoleFromInstanceProfileFuture) Get(ctx workflow.Context) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	var output iam.RemoveRoleFromInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMRemoveUserFromGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMRemoveUserFromGroupFuture) Get(ctx workflow.Context) (*iam.RemoveUserFromGroupOutput, error) {
	var output iam.RemoveUserFromGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMResetServiceSpecificCredentialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMResetServiceSpecificCredentialFuture) Get(ctx workflow.Context) (*iam.ResetServiceSpecificCredentialOutput, error) {
	var output iam.ResetServiceSpecificCredentialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMResyncMFADeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMResyncMFADeviceFuture) Get(ctx workflow.Context) (*iam.ResyncMFADeviceOutput, error) {
	var output iam.ResyncMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMSetDefaultPolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMSetDefaultPolicyVersionFuture) Get(ctx workflow.Context) (*iam.SetDefaultPolicyVersionOutput, error) {
	var output iam.SetDefaultPolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMSetSecurityTokenServicePreferencesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMSetSecurityTokenServicePreferencesFuture) Get(ctx workflow.Context) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	var output iam.SetSecurityTokenServicePreferencesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMSimulateCustomPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMSimulateCustomPolicyFuture) Get(ctx workflow.Context) (*iam.SimulatePolicyResponse, error) {
	var output iam.SimulatePolicyResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMSimulatePrincipalPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMSimulatePrincipalPolicyFuture) Get(ctx workflow.Context) (*iam.SimulatePolicyResponse, error) {
	var output iam.SimulatePolicyResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMTagRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMTagRoleFuture) Get(ctx workflow.Context) (*iam.TagRoleOutput, error) {
	var output iam.TagRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMTagUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMTagUserFuture) Get(ctx workflow.Context) (*iam.TagUserOutput, error) {
	var output iam.TagUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUntagRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUntagRoleFuture) Get(ctx workflow.Context) (*iam.UntagRoleOutput, error) {
	var output iam.UntagRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUntagUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUntagUserFuture) Get(ctx workflow.Context) (*iam.UntagUserOutput, error) {
	var output iam.UntagUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateAccessKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateAccessKeyFuture) Get(ctx workflow.Context) (*iam.UpdateAccessKeyOutput, error) {
	var output iam.UpdateAccessKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateAccountPasswordPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateAccountPasswordPolicyFuture) Get(ctx workflow.Context) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	var output iam.UpdateAccountPasswordPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateAssumeRolePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateAssumeRolePolicyFuture) Get(ctx workflow.Context) (*iam.UpdateAssumeRolePolicyOutput, error) {
	var output iam.UpdateAssumeRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateGroupFuture) Get(ctx workflow.Context) (*iam.UpdateGroupOutput, error) {
	var output iam.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateLoginProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateLoginProfileFuture) Get(ctx workflow.Context) (*iam.UpdateLoginProfileOutput, error) {
	var output iam.UpdateLoginProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateOpenIDConnectProviderThumbprintFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateOpenIDConnectProviderThumbprintFuture) Get(ctx workflow.Context) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	var output iam.UpdateOpenIDConnectProviderThumbprintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateRoleFuture) Get(ctx workflow.Context) (*iam.UpdateRoleOutput, error) {
	var output iam.UpdateRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateRoleDescriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateRoleDescriptionFuture) Get(ctx workflow.Context) (*iam.UpdateRoleDescriptionOutput, error) {
	var output iam.UpdateRoleDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateSAMLProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateSAMLProviderFuture) Get(ctx workflow.Context) (*iam.UpdateSAMLProviderOutput, error) {
	var output iam.UpdateSAMLProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateSSHPublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateSSHPublicKeyFuture) Get(ctx workflow.Context) (*iam.UpdateSSHPublicKeyOutput, error) {
	var output iam.UpdateSSHPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateServerCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateServerCertificateFuture) Get(ctx workflow.Context) (*iam.UpdateServerCertificateOutput, error) {
	var output iam.UpdateServerCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateServiceSpecificCredentialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateServiceSpecificCredentialFuture) Get(ctx workflow.Context) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	var output iam.UpdateServiceSpecificCredentialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateSigningCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateSigningCertificateFuture) Get(ctx workflow.Context) (*iam.UpdateSigningCertificateOutput, error) {
	var output iam.UpdateSigningCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUpdateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUpdateUserFuture) Get(ctx workflow.Context) (*iam.UpdateUserOutput, error) {
	var output iam.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUploadSSHPublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUploadSSHPublicKeyFuture) Get(ctx workflow.Context) (*iam.UploadSSHPublicKeyOutput, error) {
	var output iam.UploadSSHPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUploadServerCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUploadServerCertificateFuture) Get(ctx workflow.Context) (*iam.UploadServerCertificateOutput, error) {
	var output iam.UploadServerCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IAMUploadSigningCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IAMUploadSigningCertificateFuture) Get(ctx workflow.Context) (*iam.UploadSigningCertificateOutput, error) {
	var output iam.UploadSigningCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AddClientIDToOpenIDConnectProvider(ctx workflow.Context, input *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	var output iam.AddClientIDToOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.AddClientIDToOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AddClientIDToOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.AddClientIDToOpenIDConnectProviderInput) *IAMAddClientIDToOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.AddClientIDToOpenIDConnectProvider", input)
	return &IAMAddClientIDToOpenIDConnectProviderFuture{Future: future}
}

func (a *IAMStub) AddRoleToInstanceProfile(ctx workflow.Context, input *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error) {
	var output iam.AddRoleToInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.AddRoleToInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AddRoleToInstanceProfileAsync(ctx workflow.Context, input *iam.AddRoleToInstanceProfileInput) *IAMAddRoleToInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.AddRoleToInstanceProfile", input)
	return &IAMAddRoleToInstanceProfileFuture{Future: future}
}

func (a *IAMStub) AddUserToGroup(ctx workflow.Context, input *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error) {
	var output iam.AddUserToGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.AddUserToGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AddUserToGroupAsync(ctx workflow.Context, input *iam.AddUserToGroupInput) *IAMAddUserToGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.AddUserToGroup", input)
	return &IAMAddUserToGroupFuture{Future: future}
}

func (a *IAMStub) AttachGroupPolicy(ctx workflow.Context, input *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error) {
	var output iam.AttachGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.AttachGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AttachGroupPolicyAsync(ctx workflow.Context, input *iam.AttachGroupPolicyInput) *IAMAttachGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.AttachGroupPolicy", input)
	return &IAMAttachGroupPolicyFuture{Future: future}
}

func (a *IAMStub) AttachRolePolicy(ctx workflow.Context, input *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error) {
	var output iam.AttachRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.AttachRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AttachRolePolicyAsync(ctx workflow.Context, input *iam.AttachRolePolicyInput) *IAMAttachRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.AttachRolePolicy", input)
	return &IAMAttachRolePolicyFuture{Future: future}
}

func (a *IAMStub) AttachUserPolicy(ctx workflow.Context, input *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error) {
	var output iam.AttachUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.AttachUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AttachUserPolicyAsync(ctx workflow.Context, input *iam.AttachUserPolicyInput) *IAMAttachUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.AttachUserPolicy", input)
	return &IAMAttachUserPolicyFuture{Future: future}
}

func (a *IAMStub) ChangePassword(ctx workflow.Context, input *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error) {
	var output iam.ChangePasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ChangePassword", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ChangePasswordAsync(ctx workflow.Context, input *iam.ChangePasswordInput) *IAMChangePasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ChangePassword", input)
	return &IAMChangePasswordFuture{Future: future}
}

func (a *IAMStub) CreateAccessKey(ctx workflow.Context, input *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error) {
	var output iam.CreateAccessKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateAccessKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateAccessKeyAsync(ctx workflow.Context, input *iam.CreateAccessKeyInput) *IAMCreateAccessKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateAccessKey", input)
	return &IAMCreateAccessKeyFuture{Future: future}
}

func (a *IAMStub) CreateAccountAlias(ctx workflow.Context, input *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error) {
	var output iam.CreateAccountAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateAccountAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateAccountAliasAsync(ctx workflow.Context, input *iam.CreateAccountAliasInput) *IAMCreateAccountAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateAccountAlias", input)
	return &IAMCreateAccountAliasFuture{Future: future}
}

func (a *IAMStub) CreateGroup(ctx workflow.Context, input *iam.CreateGroupInput) (*iam.CreateGroupOutput, error) {
	var output iam.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateGroupAsync(ctx workflow.Context, input *iam.CreateGroupInput) *IAMCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateGroup", input)
	return &IAMCreateGroupFuture{Future: future}
}

func (a *IAMStub) CreateInstanceProfile(ctx workflow.Context, input *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error) {
	var output iam.CreateInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateInstanceProfileAsync(ctx workflow.Context, input *iam.CreateInstanceProfileInput) *IAMCreateInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateInstanceProfile", input)
	return &IAMCreateInstanceProfileFuture{Future: future}
}

func (a *IAMStub) CreateLoginProfile(ctx workflow.Context, input *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error) {
	var output iam.CreateLoginProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateLoginProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateLoginProfileAsync(ctx workflow.Context, input *iam.CreateLoginProfileInput) *IAMCreateLoginProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateLoginProfile", input)
	return &IAMCreateLoginProfileFuture{Future: future}
}

func (a *IAMStub) CreateOpenIDConnectProvider(ctx workflow.Context, input *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error) {
	var output iam.CreateOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.CreateOpenIDConnectProviderInput) *IAMCreateOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateOpenIDConnectProvider", input)
	return &IAMCreateOpenIDConnectProviderFuture{Future: future}
}

func (a *IAMStub) CreatePolicy(ctx workflow.Context, input *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error) {
	var output iam.CreatePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreatePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreatePolicyAsync(ctx workflow.Context, input *iam.CreatePolicyInput) *IAMCreatePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreatePolicy", input)
	return &IAMCreatePolicyFuture{Future: future}
}

func (a *IAMStub) CreatePolicyVersion(ctx workflow.Context, input *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error) {
	var output iam.CreatePolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreatePolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreatePolicyVersionAsync(ctx workflow.Context, input *iam.CreatePolicyVersionInput) *IAMCreatePolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreatePolicyVersion", input)
	return &IAMCreatePolicyVersionFuture{Future: future}
}

func (a *IAMStub) CreateRole(ctx workflow.Context, input *iam.CreateRoleInput) (*iam.CreateRoleOutput, error) {
	var output iam.CreateRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateRoleAsync(ctx workflow.Context, input *iam.CreateRoleInput) *IAMCreateRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateRole", input)
	return &IAMCreateRoleFuture{Future: future}
}

func (a *IAMStub) CreateSAMLProvider(ctx workflow.Context, input *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error) {
	var output iam.CreateSAMLProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateSAMLProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateSAMLProviderAsync(ctx workflow.Context, input *iam.CreateSAMLProviderInput) *IAMCreateSAMLProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateSAMLProvider", input)
	return &IAMCreateSAMLProviderFuture{Future: future}
}

func (a *IAMStub) CreateServiceLinkedRole(ctx workflow.Context, input *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error) {
	var output iam.CreateServiceLinkedRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateServiceLinkedRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateServiceLinkedRoleAsync(ctx workflow.Context, input *iam.CreateServiceLinkedRoleInput) *IAMCreateServiceLinkedRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateServiceLinkedRole", input)
	return &IAMCreateServiceLinkedRoleFuture{Future: future}
}

func (a *IAMStub) CreateServiceSpecificCredential(ctx workflow.Context, input *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error) {
	var output iam.CreateServiceSpecificCredentialOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateServiceSpecificCredential", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.CreateServiceSpecificCredentialInput) *IAMCreateServiceSpecificCredentialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateServiceSpecificCredential", input)
	return &IAMCreateServiceSpecificCredentialFuture{Future: future}
}

func (a *IAMStub) CreateUser(ctx workflow.Context, input *iam.CreateUserInput) (*iam.CreateUserOutput, error) {
	var output iam.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateUserAsync(ctx workflow.Context, input *iam.CreateUserInput) *IAMCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateUser", input)
	return &IAMCreateUserFuture{Future: future}
}

func (a *IAMStub) CreateVirtualMFADevice(ctx workflow.Context, input *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error) {
	var output iam.CreateVirtualMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateVirtualMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateVirtualMFADeviceAsync(ctx workflow.Context, input *iam.CreateVirtualMFADeviceInput) *IAMCreateVirtualMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateVirtualMFADevice", input)
	return &IAMCreateVirtualMFADeviceFuture{Future: future}
}

func (a *IAMStub) DeactivateMFADevice(ctx workflow.Context, input *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error) {
	var output iam.DeactivateMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeactivateMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeactivateMFADeviceAsync(ctx workflow.Context, input *iam.DeactivateMFADeviceInput) *IAMDeactivateMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeactivateMFADevice", input)
	return &IAMDeactivateMFADeviceFuture{Future: future}
}

func (a *IAMStub) DeleteAccessKey(ctx workflow.Context, input *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error) {
	var output iam.DeleteAccessKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteAccessKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteAccessKeyAsync(ctx workflow.Context, input *iam.DeleteAccessKeyInput) *IAMDeleteAccessKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteAccessKey", input)
	return &IAMDeleteAccessKeyFuture{Future: future}
}

func (a *IAMStub) DeleteAccountAlias(ctx workflow.Context, input *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error) {
	var output iam.DeleteAccountAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteAccountAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteAccountAliasAsync(ctx workflow.Context, input *iam.DeleteAccountAliasInput) *IAMDeleteAccountAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteAccountAlias", input)
	return &IAMDeleteAccountAliasFuture{Future: future}
}

func (a *IAMStub) DeleteAccountPasswordPolicy(ctx workflow.Context, input *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	var output iam.DeleteAccountPasswordPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteAccountPasswordPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.DeleteAccountPasswordPolicyInput) *IAMDeleteAccountPasswordPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteAccountPasswordPolicy", input)
	return &IAMDeleteAccountPasswordPolicyFuture{Future: future}
}

func (a *IAMStub) DeleteGroup(ctx workflow.Context, input *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error) {
	var output iam.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteGroupAsync(ctx workflow.Context, input *iam.DeleteGroupInput) *IAMDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteGroup", input)
	return &IAMDeleteGroupFuture{Future: future}
}

func (a *IAMStub) DeleteGroupPolicy(ctx workflow.Context, input *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error) {
	var output iam.DeleteGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteGroupPolicyAsync(ctx workflow.Context, input *iam.DeleteGroupPolicyInput) *IAMDeleteGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteGroupPolicy", input)
	return &IAMDeleteGroupPolicyFuture{Future: future}
}

func (a *IAMStub) DeleteInstanceProfile(ctx workflow.Context, input *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error) {
	var output iam.DeleteInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteInstanceProfileAsync(ctx workflow.Context, input *iam.DeleteInstanceProfileInput) *IAMDeleteInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteInstanceProfile", input)
	return &IAMDeleteInstanceProfileFuture{Future: future}
}

func (a *IAMStub) DeleteLoginProfile(ctx workflow.Context, input *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error) {
	var output iam.DeleteLoginProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteLoginProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteLoginProfileAsync(ctx workflow.Context, input *iam.DeleteLoginProfileInput) *IAMDeleteLoginProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteLoginProfile", input)
	return &IAMDeleteLoginProfileFuture{Future: future}
}

func (a *IAMStub) DeleteOpenIDConnectProvider(ctx workflow.Context, input *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	var output iam.DeleteOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.DeleteOpenIDConnectProviderInput) *IAMDeleteOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteOpenIDConnectProvider", input)
	return &IAMDeleteOpenIDConnectProviderFuture{Future: future}
}

func (a *IAMStub) DeletePolicy(ctx workflow.Context, input *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error) {
	var output iam.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeletePolicyAsync(ctx workflow.Context, input *iam.DeletePolicyInput) *IAMDeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeletePolicy", input)
	return &IAMDeletePolicyFuture{Future: future}
}

func (a *IAMStub) DeletePolicyVersion(ctx workflow.Context, input *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error) {
	var output iam.DeletePolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeletePolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeletePolicyVersionAsync(ctx workflow.Context, input *iam.DeletePolicyVersionInput) *IAMDeletePolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeletePolicyVersion", input)
	return &IAMDeletePolicyVersionFuture{Future: future}
}

func (a *IAMStub) DeleteRole(ctx workflow.Context, input *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error) {
	var output iam.DeleteRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteRoleAsync(ctx workflow.Context, input *iam.DeleteRoleInput) *IAMDeleteRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteRole", input)
	return &IAMDeleteRoleFuture{Future: future}
}

func (a *IAMStub) DeleteRolePermissionsBoundary(ctx workflow.Context, input *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	var output iam.DeleteRolePermissionsBoundaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteRolePermissionsBoundary", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteRolePermissionsBoundaryAsync(ctx workflow.Context, input *iam.DeleteRolePermissionsBoundaryInput) *IAMDeleteRolePermissionsBoundaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteRolePermissionsBoundary", input)
	return &IAMDeleteRolePermissionsBoundaryFuture{Future: future}
}

func (a *IAMStub) DeleteRolePolicy(ctx workflow.Context, input *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error) {
	var output iam.DeleteRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteRolePolicyAsync(ctx workflow.Context, input *iam.DeleteRolePolicyInput) *IAMDeleteRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteRolePolicy", input)
	return &IAMDeleteRolePolicyFuture{Future: future}
}

func (a *IAMStub) DeleteSAMLProvider(ctx workflow.Context, input *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error) {
	var output iam.DeleteSAMLProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteSAMLProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteSAMLProviderAsync(ctx workflow.Context, input *iam.DeleteSAMLProviderInput) *IAMDeleteSAMLProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteSAMLProvider", input)
	return &IAMDeleteSAMLProviderFuture{Future: future}
}

func (a *IAMStub) DeleteSSHPublicKey(ctx workflow.Context, input *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error) {
	var output iam.DeleteSSHPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteSSHPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteSSHPublicKeyAsync(ctx workflow.Context, input *iam.DeleteSSHPublicKeyInput) *IAMDeleteSSHPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteSSHPublicKey", input)
	return &IAMDeleteSSHPublicKeyFuture{Future: future}
}

func (a *IAMStub) DeleteServerCertificate(ctx workflow.Context, input *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error) {
	var output iam.DeleteServerCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteServerCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteServerCertificateAsync(ctx workflow.Context, input *iam.DeleteServerCertificateInput) *IAMDeleteServerCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteServerCertificate", input)
	return &IAMDeleteServerCertificateFuture{Future: future}
}

func (a *IAMStub) DeleteServiceLinkedRole(ctx workflow.Context, input *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error) {
	var output iam.DeleteServiceLinkedRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteServiceLinkedRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteServiceLinkedRoleAsync(ctx workflow.Context, input *iam.DeleteServiceLinkedRoleInput) *IAMDeleteServiceLinkedRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteServiceLinkedRole", input)
	return &IAMDeleteServiceLinkedRoleFuture{Future: future}
}

func (a *IAMStub) DeleteServiceSpecificCredential(ctx workflow.Context, input *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	var output iam.DeleteServiceSpecificCredentialOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteServiceSpecificCredential", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.DeleteServiceSpecificCredentialInput) *IAMDeleteServiceSpecificCredentialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteServiceSpecificCredential", input)
	return &IAMDeleteServiceSpecificCredentialFuture{Future: future}
}

func (a *IAMStub) DeleteSigningCertificate(ctx workflow.Context, input *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error) {
	var output iam.DeleteSigningCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteSigningCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteSigningCertificateAsync(ctx workflow.Context, input *iam.DeleteSigningCertificateInput) *IAMDeleteSigningCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteSigningCertificate", input)
	return &IAMDeleteSigningCertificateFuture{Future: future}
}

func (a *IAMStub) DeleteUser(ctx workflow.Context, input *iam.DeleteUserInput) (*iam.DeleteUserOutput, error) {
	var output iam.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteUserAsync(ctx workflow.Context, input *iam.DeleteUserInput) *IAMDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteUser", input)
	return &IAMDeleteUserFuture{Future: future}
}

func (a *IAMStub) DeleteUserPermissionsBoundary(ctx workflow.Context, input *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	var output iam.DeleteUserPermissionsBoundaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteUserPermissionsBoundary", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteUserPermissionsBoundaryAsync(ctx workflow.Context, input *iam.DeleteUserPermissionsBoundaryInput) *IAMDeleteUserPermissionsBoundaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteUserPermissionsBoundary", input)
	return &IAMDeleteUserPermissionsBoundaryFuture{Future: future}
}

func (a *IAMStub) DeleteUserPolicy(ctx workflow.Context, input *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error) {
	var output iam.DeleteUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteUserPolicyAsync(ctx workflow.Context, input *iam.DeleteUserPolicyInput) *IAMDeleteUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteUserPolicy", input)
	return &IAMDeleteUserPolicyFuture{Future: future}
}

func (a *IAMStub) DeleteVirtualMFADevice(ctx workflow.Context, input *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error) {
	var output iam.DeleteVirtualMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteVirtualMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteVirtualMFADeviceAsync(ctx workflow.Context, input *iam.DeleteVirtualMFADeviceInput) *IAMDeleteVirtualMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteVirtualMFADevice", input)
	return &IAMDeleteVirtualMFADeviceFuture{Future: future}
}

func (a *IAMStub) DetachGroupPolicy(ctx workflow.Context, input *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error) {
	var output iam.DetachGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DetachGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DetachGroupPolicyAsync(ctx workflow.Context, input *iam.DetachGroupPolicyInput) *IAMDetachGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DetachGroupPolicy", input)
	return &IAMDetachGroupPolicyFuture{Future: future}
}

func (a *IAMStub) DetachRolePolicy(ctx workflow.Context, input *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error) {
	var output iam.DetachRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DetachRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DetachRolePolicyAsync(ctx workflow.Context, input *iam.DetachRolePolicyInput) *IAMDetachRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DetachRolePolicy", input)
	return &IAMDetachRolePolicyFuture{Future: future}
}

func (a *IAMStub) DetachUserPolicy(ctx workflow.Context, input *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error) {
	var output iam.DetachUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DetachUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DetachUserPolicyAsync(ctx workflow.Context, input *iam.DetachUserPolicyInput) *IAMDetachUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DetachUserPolicy", input)
	return &IAMDetachUserPolicyFuture{Future: future}
}

func (a *IAMStub) EnableMFADevice(ctx workflow.Context, input *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error) {
	var output iam.EnableMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.EnableMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) EnableMFADeviceAsync(ctx workflow.Context, input *iam.EnableMFADeviceInput) *IAMEnableMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.EnableMFADevice", input)
	return &IAMEnableMFADeviceFuture{Future: future}
}

func (a *IAMStub) GenerateCredentialReport(ctx workflow.Context, input *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error) {
	var output iam.GenerateCredentialReportOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GenerateCredentialReport", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GenerateCredentialReportAsync(ctx workflow.Context, input *iam.GenerateCredentialReportInput) *IAMGenerateCredentialReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GenerateCredentialReport", input)
	return &IAMGenerateCredentialReportFuture{Future: future}
}

func (a *IAMStub) GenerateOrganizationsAccessReport(ctx workflow.Context, input *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	var output iam.GenerateOrganizationsAccessReportOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GenerateOrganizationsAccessReport", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GenerateOrganizationsAccessReportAsync(ctx workflow.Context, input *iam.GenerateOrganizationsAccessReportInput) *IAMGenerateOrganizationsAccessReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GenerateOrganizationsAccessReport", input)
	return &IAMGenerateOrganizationsAccessReportFuture{Future: future}
}

func (a *IAMStub) GenerateServiceLastAccessedDetails(ctx workflow.Context, input *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	var output iam.GenerateServiceLastAccessedDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GenerateServiceLastAccessedDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GenerateServiceLastAccessedDetailsAsync(ctx workflow.Context, input *iam.GenerateServiceLastAccessedDetailsInput) *IAMGenerateServiceLastAccessedDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GenerateServiceLastAccessedDetails", input)
	return &IAMGenerateServiceLastAccessedDetailsFuture{Future: future}
}

func (a *IAMStub) GetAccessKeyLastUsed(ctx workflow.Context, input *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error) {
	var output iam.GetAccessKeyLastUsedOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetAccessKeyLastUsed", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetAccessKeyLastUsedAsync(ctx workflow.Context, input *iam.GetAccessKeyLastUsedInput) *IAMGetAccessKeyLastUsedFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetAccessKeyLastUsed", input)
	return &IAMGetAccessKeyLastUsedFuture{Future: future}
}

func (a *IAMStub) GetAccountAuthorizationDetails(ctx workflow.Context, input *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	var output iam.GetAccountAuthorizationDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetAccountAuthorizationDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetAccountAuthorizationDetailsAsync(ctx workflow.Context, input *iam.GetAccountAuthorizationDetailsInput) *IAMGetAccountAuthorizationDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetAccountAuthorizationDetails", input)
	return &IAMGetAccountAuthorizationDetailsFuture{Future: future}
}

func (a *IAMStub) GetAccountPasswordPolicy(ctx workflow.Context, input *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error) {
	var output iam.GetAccountPasswordPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetAccountPasswordPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.GetAccountPasswordPolicyInput) *IAMGetAccountPasswordPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetAccountPasswordPolicy", input)
	return &IAMGetAccountPasswordPolicyFuture{Future: future}
}

func (a *IAMStub) GetAccountSummary(ctx workflow.Context, input *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error) {
	var output iam.GetAccountSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetAccountSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetAccountSummaryAsync(ctx workflow.Context, input *iam.GetAccountSummaryInput) *IAMGetAccountSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetAccountSummary", input)
	return &IAMGetAccountSummaryFuture{Future: future}
}

func (a *IAMStub) GetContextKeysForCustomPolicy(ctx workflow.Context, input *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	var output iam.GetContextKeysForPolicyResponse
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetContextKeysForCustomPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetContextKeysForCustomPolicyAsync(ctx workflow.Context, input *iam.GetContextKeysForCustomPolicyInput) *IAMGetContextKeysForCustomPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetContextKeysForCustomPolicy", input)
	return &IAMGetContextKeysForCustomPolicyFuture{Future: future}
}

func (a *IAMStub) GetContextKeysForPrincipalPolicy(ctx workflow.Context, input *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	var output iam.GetContextKeysForPolicyResponse
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetContextKeysForPrincipalPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetContextKeysForPrincipalPolicyAsync(ctx workflow.Context, input *iam.GetContextKeysForPrincipalPolicyInput) *IAMGetContextKeysForPrincipalPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetContextKeysForPrincipalPolicy", input)
	return &IAMGetContextKeysForPrincipalPolicyFuture{Future: future}
}

func (a *IAMStub) GetCredentialReport(ctx workflow.Context, input *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error) {
	var output iam.GetCredentialReportOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetCredentialReport", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetCredentialReportAsync(ctx workflow.Context, input *iam.GetCredentialReportInput) *IAMGetCredentialReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetCredentialReport", input)
	return &IAMGetCredentialReportFuture{Future: future}
}

func (a *IAMStub) GetGroup(ctx workflow.Context, input *iam.GetGroupInput) (*iam.GetGroupOutput, error) {
	var output iam.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetGroupAsync(ctx workflow.Context, input *iam.GetGroupInput) *IAMGetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetGroup", input)
	return &IAMGetGroupFuture{Future: future}
}

func (a *IAMStub) GetGroupPolicy(ctx workflow.Context, input *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error) {
	var output iam.GetGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetGroupPolicyAsync(ctx workflow.Context, input *iam.GetGroupPolicyInput) *IAMGetGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetGroupPolicy", input)
	return &IAMGetGroupPolicyFuture{Future: future}
}

func (a *IAMStub) GetInstanceProfile(ctx workflow.Context, input *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error) {
	var output iam.GetInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetInstanceProfileAsync(ctx workflow.Context, input *iam.GetInstanceProfileInput) *IAMGetInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetInstanceProfile", input)
	return &IAMGetInstanceProfileFuture{Future: future}
}

func (a *IAMStub) GetLoginProfile(ctx workflow.Context, input *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error) {
	var output iam.GetLoginProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetLoginProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetLoginProfileAsync(ctx workflow.Context, input *iam.GetLoginProfileInput) *IAMGetLoginProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetLoginProfile", input)
	return &IAMGetLoginProfileFuture{Future: future}
}

func (a *IAMStub) GetOpenIDConnectProvider(ctx workflow.Context, input *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error) {
	var output iam.GetOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.GetOpenIDConnectProviderInput) *IAMGetOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetOpenIDConnectProvider", input)
	return &IAMGetOpenIDConnectProviderFuture{Future: future}
}

func (a *IAMStub) GetOrganizationsAccessReport(ctx workflow.Context, input *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error) {
	var output iam.GetOrganizationsAccessReportOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetOrganizationsAccessReport", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetOrganizationsAccessReportAsync(ctx workflow.Context, input *iam.GetOrganizationsAccessReportInput) *IAMGetOrganizationsAccessReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetOrganizationsAccessReport", input)
	return &IAMGetOrganizationsAccessReportFuture{Future: future}
}

func (a *IAMStub) GetPolicy(ctx workflow.Context, input *iam.GetPolicyInput) (*iam.GetPolicyOutput, error) {
	var output iam.GetPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetPolicyAsync(ctx workflow.Context, input *iam.GetPolicyInput) *IAMGetPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetPolicy", input)
	return &IAMGetPolicyFuture{Future: future}
}

func (a *IAMStub) GetPolicyVersion(ctx workflow.Context, input *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error) {
	var output iam.GetPolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetPolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetPolicyVersionAsync(ctx workflow.Context, input *iam.GetPolicyVersionInput) *IAMGetPolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetPolicyVersion", input)
	return &IAMGetPolicyVersionFuture{Future: future}
}

func (a *IAMStub) GetRole(ctx workflow.Context, input *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
	var output iam.GetRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetRoleAsync(ctx workflow.Context, input *iam.GetRoleInput) *IAMGetRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetRole", input)
	return &IAMGetRoleFuture{Future: future}
}

func (a *IAMStub) GetRolePolicy(ctx workflow.Context, input *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error) {
	var output iam.GetRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetRolePolicyAsync(ctx workflow.Context, input *iam.GetRolePolicyInput) *IAMGetRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetRolePolicy", input)
	return &IAMGetRolePolicyFuture{Future: future}
}

func (a *IAMStub) GetSAMLProvider(ctx workflow.Context, input *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error) {
	var output iam.GetSAMLProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetSAMLProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetSAMLProviderAsync(ctx workflow.Context, input *iam.GetSAMLProviderInput) *IAMGetSAMLProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetSAMLProvider", input)
	return &IAMGetSAMLProviderFuture{Future: future}
}

func (a *IAMStub) GetSSHPublicKey(ctx workflow.Context, input *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error) {
	var output iam.GetSSHPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetSSHPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetSSHPublicKeyAsync(ctx workflow.Context, input *iam.GetSSHPublicKeyInput) *IAMGetSSHPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetSSHPublicKey", input)
	return &IAMGetSSHPublicKeyFuture{Future: future}
}

func (a *IAMStub) GetServerCertificate(ctx workflow.Context, input *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error) {
	var output iam.GetServerCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetServerCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetServerCertificateAsync(ctx workflow.Context, input *iam.GetServerCertificateInput) *IAMGetServerCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetServerCertificate", input)
	return &IAMGetServerCertificateFuture{Future: future}
}

func (a *IAMStub) GetServiceLastAccessedDetails(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	var output iam.GetServiceLastAccessedDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetServiceLastAccessedDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetServiceLastAccessedDetailsAsync(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsInput) *IAMGetServiceLastAccessedDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetServiceLastAccessedDetails", input)
	return &IAMGetServiceLastAccessedDetailsFuture{Future: future}
}

func (a *IAMStub) GetServiceLastAccessedDetailsWithEntities(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	var output iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetServiceLastAccessedDetailsWithEntities", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetServiceLastAccessedDetailsWithEntitiesAsync(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsWithEntitiesInput) *IAMGetServiceLastAccessedDetailsWithEntitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetServiceLastAccessedDetailsWithEntities", input)
	return &IAMGetServiceLastAccessedDetailsWithEntitiesFuture{Future: future}
}

func (a *IAMStub) GetServiceLinkedRoleDeletionStatus(ctx workflow.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	var output iam.GetServiceLinkedRoleDeletionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetServiceLinkedRoleDeletionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetServiceLinkedRoleDeletionStatusAsync(ctx workflow.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput) *IAMGetServiceLinkedRoleDeletionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetServiceLinkedRoleDeletionStatus", input)
	return &IAMGetServiceLinkedRoleDeletionStatusFuture{Future: future}
}

func (a *IAMStub) GetUser(ctx workflow.Context, input *iam.GetUserInput) (*iam.GetUserOutput, error) {
	var output iam.GetUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetUserAsync(ctx workflow.Context, input *iam.GetUserInput) *IAMGetUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetUser", input)
	return &IAMGetUserFuture{Future: future}
}

func (a *IAMStub) GetUserPolicy(ctx workflow.Context, input *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error) {
	var output iam.GetUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetUserPolicyAsync(ctx workflow.Context, input *iam.GetUserPolicyInput) *IAMGetUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetUserPolicy", input)
	return &IAMGetUserPolicyFuture{Future: future}
}

func (a *IAMStub) ListAccessKeys(ctx workflow.Context, input *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error) {
	var output iam.ListAccessKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListAccessKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListAccessKeysAsync(ctx workflow.Context, input *iam.ListAccessKeysInput) *IAMListAccessKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListAccessKeys", input)
	return &IAMListAccessKeysFuture{Future: future}
}

func (a *IAMStub) ListAccountAliases(ctx workflow.Context, input *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error) {
	var output iam.ListAccountAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListAccountAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListAccountAliasesAsync(ctx workflow.Context, input *iam.ListAccountAliasesInput) *IAMListAccountAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListAccountAliases", input)
	return &IAMListAccountAliasesFuture{Future: future}
}

func (a *IAMStub) ListAttachedGroupPolicies(ctx workflow.Context, input *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error) {
	var output iam.ListAttachedGroupPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListAttachedGroupPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListAttachedGroupPoliciesAsync(ctx workflow.Context, input *iam.ListAttachedGroupPoliciesInput) *IAMListAttachedGroupPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListAttachedGroupPolicies", input)
	return &IAMListAttachedGroupPoliciesFuture{Future: future}
}

func (a *IAMStub) ListAttachedRolePolicies(ctx workflow.Context, input *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error) {
	var output iam.ListAttachedRolePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListAttachedRolePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListAttachedRolePoliciesAsync(ctx workflow.Context, input *iam.ListAttachedRolePoliciesInput) *IAMListAttachedRolePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListAttachedRolePolicies", input)
	return &IAMListAttachedRolePoliciesFuture{Future: future}
}

func (a *IAMStub) ListAttachedUserPolicies(ctx workflow.Context, input *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error) {
	var output iam.ListAttachedUserPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListAttachedUserPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListAttachedUserPoliciesAsync(ctx workflow.Context, input *iam.ListAttachedUserPoliciesInput) *IAMListAttachedUserPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListAttachedUserPolicies", input)
	return &IAMListAttachedUserPoliciesFuture{Future: future}
}

func (a *IAMStub) ListEntitiesForPolicy(ctx workflow.Context, input *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error) {
	var output iam.ListEntitiesForPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListEntitiesForPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListEntitiesForPolicyAsync(ctx workflow.Context, input *iam.ListEntitiesForPolicyInput) *IAMListEntitiesForPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListEntitiesForPolicy", input)
	return &IAMListEntitiesForPolicyFuture{Future: future}
}

func (a *IAMStub) ListGroupPolicies(ctx workflow.Context, input *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error) {
	var output iam.ListGroupPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListGroupPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListGroupPoliciesAsync(ctx workflow.Context, input *iam.ListGroupPoliciesInput) *IAMListGroupPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListGroupPolicies", input)
	return &IAMListGroupPoliciesFuture{Future: future}
}

func (a *IAMStub) ListGroups(ctx workflow.Context, input *iam.ListGroupsInput) (*iam.ListGroupsOutput, error) {
	var output iam.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListGroupsAsync(ctx workflow.Context, input *iam.ListGroupsInput) *IAMListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListGroups", input)
	return &IAMListGroupsFuture{Future: future}
}

func (a *IAMStub) ListGroupsForUser(ctx workflow.Context, input *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error) {
	var output iam.ListGroupsForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListGroupsForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListGroupsForUserAsync(ctx workflow.Context, input *iam.ListGroupsForUserInput) *IAMListGroupsForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListGroupsForUser", input)
	return &IAMListGroupsForUserFuture{Future: future}
}

func (a *IAMStub) ListInstanceProfiles(ctx workflow.Context, input *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error) {
	var output iam.ListInstanceProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListInstanceProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListInstanceProfilesAsync(ctx workflow.Context, input *iam.ListInstanceProfilesInput) *IAMListInstanceProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListInstanceProfiles", input)
	return &IAMListInstanceProfilesFuture{Future: future}
}

func (a *IAMStub) ListInstanceProfilesForRole(ctx workflow.Context, input *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error) {
	var output iam.ListInstanceProfilesForRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListInstanceProfilesForRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListInstanceProfilesForRoleAsync(ctx workflow.Context, input *iam.ListInstanceProfilesForRoleInput) *IAMListInstanceProfilesForRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListInstanceProfilesForRole", input)
	return &IAMListInstanceProfilesForRoleFuture{Future: future}
}

func (a *IAMStub) ListMFADevices(ctx workflow.Context, input *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error) {
	var output iam.ListMFADevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListMFADevices", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListMFADevicesAsync(ctx workflow.Context, input *iam.ListMFADevicesInput) *IAMListMFADevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListMFADevices", input)
	return &IAMListMFADevicesFuture{Future: future}
}

func (a *IAMStub) ListOpenIDConnectProviders(ctx workflow.Context, input *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error) {
	var output iam.ListOpenIDConnectProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListOpenIDConnectProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListOpenIDConnectProvidersAsync(ctx workflow.Context, input *iam.ListOpenIDConnectProvidersInput) *IAMListOpenIDConnectProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListOpenIDConnectProviders", input)
	return &IAMListOpenIDConnectProvidersFuture{Future: future}
}

func (a *IAMStub) ListPolicies(ctx workflow.Context, input *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error) {
	var output iam.ListPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListPoliciesAsync(ctx workflow.Context, input *iam.ListPoliciesInput) *IAMListPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListPolicies", input)
	return &IAMListPoliciesFuture{Future: future}
}

func (a *IAMStub) ListPoliciesGrantingServiceAccess(ctx workflow.Context, input *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	var output iam.ListPoliciesGrantingServiceAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListPoliciesGrantingServiceAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListPoliciesGrantingServiceAccessAsync(ctx workflow.Context, input *iam.ListPoliciesGrantingServiceAccessInput) *IAMListPoliciesGrantingServiceAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListPoliciesGrantingServiceAccess", input)
	return &IAMListPoliciesGrantingServiceAccessFuture{Future: future}
}

func (a *IAMStub) ListPolicyVersions(ctx workflow.Context, input *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error) {
	var output iam.ListPolicyVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListPolicyVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListPolicyVersionsAsync(ctx workflow.Context, input *iam.ListPolicyVersionsInput) *IAMListPolicyVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListPolicyVersions", input)
	return &IAMListPolicyVersionsFuture{Future: future}
}

func (a *IAMStub) ListRolePolicies(ctx workflow.Context, input *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error) {
	var output iam.ListRolePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListRolePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListRolePoliciesAsync(ctx workflow.Context, input *iam.ListRolePoliciesInput) *IAMListRolePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListRolePolicies", input)
	return &IAMListRolePoliciesFuture{Future: future}
}

func (a *IAMStub) ListRoleTags(ctx workflow.Context, input *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error) {
	var output iam.ListRoleTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListRoleTags", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListRoleTagsAsync(ctx workflow.Context, input *iam.ListRoleTagsInput) *IAMListRoleTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListRoleTags", input)
	return &IAMListRoleTagsFuture{Future: future}
}

func (a *IAMStub) ListRoles(ctx workflow.Context, input *iam.ListRolesInput) (*iam.ListRolesOutput, error) {
	var output iam.ListRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListRolesAsync(ctx workflow.Context, input *iam.ListRolesInput) *IAMListRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListRoles", input)
	return &IAMListRolesFuture{Future: future}
}

func (a *IAMStub) ListSAMLProviders(ctx workflow.Context, input *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error) {
	var output iam.ListSAMLProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListSAMLProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListSAMLProvidersAsync(ctx workflow.Context, input *iam.ListSAMLProvidersInput) *IAMListSAMLProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListSAMLProviders", input)
	return &IAMListSAMLProvidersFuture{Future: future}
}

func (a *IAMStub) ListSSHPublicKeys(ctx workflow.Context, input *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error) {
	var output iam.ListSSHPublicKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListSSHPublicKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListSSHPublicKeysAsync(ctx workflow.Context, input *iam.ListSSHPublicKeysInput) *IAMListSSHPublicKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListSSHPublicKeys", input)
	return &IAMListSSHPublicKeysFuture{Future: future}
}

func (a *IAMStub) ListServerCertificates(ctx workflow.Context, input *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error) {
	var output iam.ListServerCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListServerCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListServerCertificatesAsync(ctx workflow.Context, input *iam.ListServerCertificatesInput) *IAMListServerCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListServerCertificates", input)
	return &IAMListServerCertificatesFuture{Future: future}
}

func (a *IAMStub) ListServiceSpecificCredentials(ctx workflow.Context, input *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error) {
	var output iam.ListServiceSpecificCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListServiceSpecificCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListServiceSpecificCredentialsAsync(ctx workflow.Context, input *iam.ListServiceSpecificCredentialsInput) *IAMListServiceSpecificCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListServiceSpecificCredentials", input)
	return &IAMListServiceSpecificCredentialsFuture{Future: future}
}

func (a *IAMStub) ListSigningCertificates(ctx workflow.Context, input *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error) {
	var output iam.ListSigningCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListSigningCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListSigningCertificatesAsync(ctx workflow.Context, input *iam.ListSigningCertificatesInput) *IAMListSigningCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListSigningCertificates", input)
	return &IAMListSigningCertificatesFuture{Future: future}
}

func (a *IAMStub) ListUserPolicies(ctx workflow.Context, input *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error) {
	var output iam.ListUserPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListUserPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListUserPoliciesAsync(ctx workflow.Context, input *iam.ListUserPoliciesInput) *IAMListUserPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListUserPolicies", input)
	return &IAMListUserPoliciesFuture{Future: future}
}

func (a *IAMStub) ListUserTags(ctx workflow.Context, input *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error) {
	var output iam.ListUserTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListUserTags", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListUserTagsAsync(ctx workflow.Context, input *iam.ListUserTagsInput) *IAMListUserTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListUserTags", input)
	return &IAMListUserTagsFuture{Future: future}
}

func (a *IAMStub) ListUsers(ctx workflow.Context, input *iam.ListUsersInput) (*iam.ListUsersOutput, error) {
	var output iam.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListUsersAsync(ctx workflow.Context, input *iam.ListUsersInput) *IAMListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListUsers", input)
	return &IAMListUsersFuture{Future: future}
}

func (a *IAMStub) ListVirtualMFADevices(ctx workflow.Context, input *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error) {
	var output iam.ListVirtualMFADevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListVirtualMFADevices", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListVirtualMFADevicesAsync(ctx workflow.Context, input *iam.ListVirtualMFADevicesInput) *IAMListVirtualMFADevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListVirtualMFADevices", input)
	return &IAMListVirtualMFADevicesFuture{Future: future}
}

func (a *IAMStub) PutGroupPolicy(ctx workflow.Context, input *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error) {
	var output iam.PutGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.PutGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) PutGroupPolicyAsync(ctx workflow.Context, input *iam.PutGroupPolicyInput) *IAMPutGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.PutGroupPolicy", input)
	return &IAMPutGroupPolicyFuture{Future: future}
}

func (a *IAMStub) PutRolePermissionsBoundary(ctx workflow.Context, input *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error) {
	var output iam.PutRolePermissionsBoundaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.PutRolePermissionsBoundary", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) PutRolePermissionsBoundaryAsync(ctx workflow.Context, input *iam.PutRolePermissionsBoundaryInput) *IAMPutRolePermissionsBoundaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.PutRolePermissionsBoundary", input)
	return &IAMPutRolePermissionsBoundaryFuture{Future: future}
}

func (a *IAMStub) PutRolePolicy(ctx workflow.Context, input *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error) {
	var output iam.PutRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.PutRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) PutRolePolicyAsync(ctx workflow.Context, input *iam.PutRolePolicyInput) *IAMPutRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.PutRolePolicy", input)
	return &IAMPutRolePolicyFuture{Future: future}
}

func (a *IAMStub) PutUserPermissionsBoundary(ctx workflow.Context, input *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error) {
	var output iam.PutUserPermissionsBoundaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.PutUserPermissionsBoundary", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) PutUserPermissionsBoundaryAsync(ctx workflow.Context, input *iam.PutUserPermissionsBoundaryInput) *IAMPutUserPermissionsBoundaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.PutUserPermissionsBoundary", input)
	return &IAMPutUserPermissionsBoundaryFuture{Future: future}
}

func (a *IAMStub) PutUserPolicy(ctx workflow.Context, input *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error) {
	var output iam.PutUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.PutUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) PutUserPolicyAsync(ctx workflow.Context, input *iam.PutUserPolicyInput) *IAMPutUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.PutUserPolicy", input)
	return &IAMPutUserPolicyFuture{Future: future}
}

func (a *IAMStub) RemoveClientIDFromOpenIDConnectProvider(ctx workflow.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	var output iam.RemoveClientIDFromOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.RemoveClientIDFromOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) RemoveClientIDFromOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput) *IAMRemoveClientIDFromOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.RemoveClientIDFromOpenIDConnectProvider", input)
	return &IAMRemoveClientIDFromOpenIDConnectProviderFuture{Future: future}
}

func (a *IAMStub) RemoveRoleFromInstanceProfile(ctx workflow.Context, input *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	var output iam.RemoveRoleFromInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.RemoveRoleFromInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) RemoveRoleFromInstanceProfileAsync(ctx workflow.Context, input *iam.RemoveRoleFromInstanceProfileInput) *IAMRemoveRoleFromInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.RemoveRoleFromInstanceProfile", input)
	return &IAMRemoveRoleFromInstanceProfileFuture{Future: future}
}

func (a *IAMStub) RemoveUserFromGroup(ctx workflow.Context, input *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error) {
	var output iam.RemoveUserFromGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.RemoveUserFromGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) RemoveUserFromGroupAsync(ctx workflow.Context, input *iam.RemoveUserFromGroupInput) *IAMRemoveUserFromGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.RemoveUserFromGroup", input)
	return &IAMRemoveUserFromGroupFuture{Future: future}
}

func (a *IAMStub) ResetServiceSpecificCredential(ctx workflow.Context, input *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error) {
	var output iam.ResetServiceSpecificCredentialOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ResetServiceSpecificCredential", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ResetServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.ResetServiceSpecificCredentialInput) *IAMResetServiceSpecificCredentialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ResetServiceSpecificCredential", input)
	return &IAMResetServiceSpecificCredentialFuture{Future: future}
}

func (a *IAMStub) ResyncMFADevice(ctx workflow.Context, input *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error) {
	var output iam.ResyncMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ResyncMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ResyncMFADeviceAsync(ctx workflow.Context, input *iam.ResyncMFADeviceInput) *IAMResyncMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ResyncMFADevice", input)
	return &IAMResyncMFADeviceFuture{Future: future}
}

func (a *IAMStub) SetDefaultPolicyVersion(ctx workflow.Context, input *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error) {
	var output iam.SetDefaultPolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.SetDefaultPolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) SetDefaultPolicyVersionAsync(ctx workflow.Context, input *iam.SetDefaultPolicyVersionInput) *IAMSetDefaultPolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.SetDefaultPolicyVersion", input)
	return &IAMSetDefaultPolicyVersionFuture{Future: future}
}

func (a *IAMStub) SetSecurityTokenServicePreferences(ctx workflow.Context, input *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	var output iam.SetSecurityTokenServicePreferencesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.SetSecurityTokenServicePreferences", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) SetSecurityTokenServicePreferencesAsync(ctx workflow.Context, input *iam.SetSecurityTokenServicePreferencesInput) *IAMSetSecurityTokenServicePreferencesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.SetSecurityTokenServicePreferences", input)
	return &IAMSetSecurityTokenServicePreferencesFuture{Future: future}
}

func (a *IAMStub) SimulateCustomPolicy(ctx workflow.Context, input *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error) {
	var output iam.SimulatePolicyResponse
	err := workflow.ExecuteActivity(ctx, "aws.iam.SimulateCustomPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) SimulateCustomPolicyAsync(ctx workflow.Context, input *iam.SimulateCustomPolicyInput) *IAMSimulateCustomPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.SimulateCustomPolicy", input)
	return &IAMSimulateCustomPolicyFuture{Future: future}
}

func (a *IAMStub) SimulatePrincipalPolicy(ctx workflow.Context, input *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error) {
	var output iam.SimulatePolicyResponse
	err := workflow.ExecuteActivity(ctx, "aws.iam.SimulatePrincipalPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) SimulatePrincipalPolicyAsync(ctx workflow.Context, input *iam.SimulatePrincipalPolicyInput) *IAMSimulatePrincipalPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.SimulatePrincipalPolicy", input)
	return &IAMSimulatePrincipalPolicyFuture{Future: future}
}

func (a *IAMStub) TagRole(ctx workflow.Context, input *iam.TagRoleInput) (*iam.TagRoleOutput, error) {
	var output iam.TagRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.TagRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) TagRoleAsync(ctx workflow.Context, input *iam.TagRoleInput) *IAMTagRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.TagRole", input)
	return &IAMTagRoleFuture{Future: future}
}

func (a *IAMStub) TagUser(ctx workflow.Context, input *iam.TagUserInput) (*iam.TagUserOutput, error) {
	var output iam.TagUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.TagUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) TagUserAsync(ctx workflow.Context, input *iam.TagUserInput) *IAMTagUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.TagUser", input)
	return &IAMTagUserFuture{Future: future}
}

func (a *IAMStub) UntagRole(ctx workflow.Context, input *iam.UntagRoleInput) (*iam.UntagRoleOutput, error) {
	var output iam.UntagRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UntagRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UntagRoleAsync(ctx workflow.Context, input *iam.UntagRoleInput) *IAMUntagRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UntagRole", input)
	return &IAMUntagRoleFuture{Future: future}
}

func (a *IAMStub) UntagUser(ctx workflow.Context, input *iam.UntagUserInput) (*iam.UntagUserOutput, error) {
	var output iam.UntagUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UntagUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UntagUserAsync(ctx workflow.Context, input *iam.UntagUserInput) *IAMUntagUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UntagUser", input)
	return &IAMUntagUserFuture{Future: future}
}

func (a *IAMStub) UpdateAccessKey(ctx workflow.Context, input *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error) {
	var output iam.UpdateAccessKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateAccessKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateAccessKeyAsync(ctx workflow.Context, input *iam.UpdateAccessKeyInput) *IAMUpdateAccessKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateAccessKey", input)
	return &IAMUpdateAccessKeyFuture{Future: future}
}

func (a *IAMStub) UpdateAccountPasswordPolicy(ctx workflow.Context, input *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	var output iam.UpdateAccountPasswordPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateAccountPasswordPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.UpdateAccountPasswordPolicyInput) *IAMUpdateAccountPasswordPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateAccountPasswordPolicy", input)
	return &IAMUpdateAccountPasswordPolicyFuture{Future: future}
}

func (a *IAMStub) UpdateAssumeRolePolicy(ctx workflow.Context, input *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error) {
	var output iam.UpdateAssumeRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateAssumeRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateAssumeRolePolicyAsync(ctx workflow.Context, input *iam.UpdateAssumeRolePolicyInput) *IAMUpdateAssumeRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateAssumeRolePolicy", input)
	return &IAMUpdateAssumeRolePolicyFuture{Future: future}
}

func (a *IAMStub) UpdateGroup(ctx workflow.Context, input *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error) {
	var output iam.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateGroupAsync(ctx workflow.Context, input *iam.UpdateGroupInput) *IAMUpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateGroup", input)
	return &IAMUpdateGroupFuture{Future: future}
}

func (a *IAMStub) UpdateLoginProfile(ctx workflow.Context, input *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error) {
	var output iam.UpdateLoginProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateLoginProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateLoginProfileAsync(ctx workflow.Context, input *iam.UpdateLoginProfileInput) *IAMUpdateLoginProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateLoginProfile", input)
	return &IAMUpdateLoginProfileFuture{Future: future}
}

func (a *IAMStub) UpdateOpenIDConnectProviderThumbprint(ctx workflow.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	var output iam.UpdateOpenIDConnectProviderThumbprintOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateOpenIDConnectProviderThumbprint", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateOpenIDConnectProviderThumbprintAsync(ctx workflow.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput) *IAMUpdateOpenIDConnectProviderThumbprintFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateOpenIDConnectProviderThumbprint", input)
	return &IAMUpdateOpenIDConnectProviderThumbprintFuture{Future: future}
}

func (a *IAMStub) UpdateRole(ctx workflow.Context, input *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error) {
	var output iam.UpdateRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateRoleAsync(ctx workflow.Context, input *iam.UpdateRoleInput) *IAMUpdateRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateRole", input)
	return &IAMUpdateRoleFuture{Future: future}
}

func (a *IAMStub) UpdateRoleDescription(ctx workflow.Context, input *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error) {
	var output iam.UpdateRoleDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateRoleDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateRoleDescriptionAsync(ctx workflow.Context, input *iam.UpdateRoleDescriptionInput) *IAMUpdateRoleDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateRoleDescription", input)
	return &IAMUpdateRoleDescriptionFuture{Future: future}
}

func (a *IAMStub) UpdateSAMLProvider(ctx workflow.Context, input *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error) {
	var output iam.UpdateSAMLProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateSAMLProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateSAMLProviderAsync(ctx workflow.Context, input *iam.UpdateSAMLProviderInput) *IAMUpdateSAMLProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateSAMLProvider", input)
	return &IAMUpdateSAMLProviderFuture{Future: future}
}

func (a *IAMStub) UpdateSSHPublicKey(ctx workflow.Context, input *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error) {
	var output iam.UpdateSSHPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateSSHPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateSSHPublicKeyAsync(ctx workflow.Context, input *iam.UpdateSSHPublicKeyInput) *IAMUpdateSSHPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateSSHPublicKey", input)
	return &IAMUpdateSSHPublicKeyFuture{Future: future}
}

func (a *IAMStub) UpdateServerCertificate(ctx workflow.Context, input *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error) {
	var output iam.UpdateServerCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateServerCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateServerCertificateAsync(ctx workflow.Context, input *iam.UpdateServerCertificateInput) *IAMUpdateServerCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateServerCertificate", input)
	return &IAMUpdateServerCertificateFuture{Future: future}
}

func (a *IAMStub) UpdateServiceSpecificCredential(ctx workflow.Context, input *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	var output iam.UpdateServiceSpecificCredentialOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateServiceSpecificCredential", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.UpdateServiceSpecificCredentialInput) *IAMUpdateServiceSpecificCredentialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateServiceSpecificCredential", input)
	return &IAMUpdateServiceSpecificCredentialFuture{Future: future}
}

func (a *IAMStub) UpdateSigningCertificate(ctx workflow.Context, input *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error) {
	var output iam.UpdateSigningCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateSigningCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateSigningCertificateAsync(ctx workflow.Context, input *iam.UpdateSigningCertificateInput) *IAMUpdateSigningCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateSigningCertificate", input)
	return &IAMUpdateSigningCertificateFuture{Future: future}
}

func (a *IAMStub) UpdateUser(ctx workflow.Context, input *iam.UpdateUserInput) (*iam.UpdateUserOutput, error) {
	var output iam.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateUserAsync(ctx workflow.Context, input *iam.UpdateUserInput) *IAMUpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateUser", input)
	return &IAMUpdateUserFuture{Future: future}
}

func (a *IAMStub) UploadSSHPublicKey(ctx workflow.Context, input *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error) {
	var output iam.UploadSSHPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UploadSSHPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UploadSSHPublicKeyAsync(ctx workflow.Context, input *iam.UploadSSHPublicKeyInput) *IAMUploadSSHPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UploadSSHPublicKey", input)
	return &IAMUploadSSHPublicKeyFuture{Future: future}
}

func (a *IAMStub) UploadServerCertificate(ctx workflow.Context, input *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error) {
	var output iam.UploadServerCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UploadServerCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UploadServerCertificateAsync(ctx workflow.Context, input *iam.UploadServerCertificateInput) *IAMUploadServerCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UploadServerCertificate", input)
	return &IAMUploadServerCertificateFuture{Future: future}
}

func (a *IAMStub) UploadSigningCertificate(ctx workflow.Context, input *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error) {
	var output iam.UploadSigningCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UploadSigningCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UploadSigningCertificateAsync(ctx workflow.Context, input *iam.UploadSigningCertificateInput) *IAMUploadSigningCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UploadSigningCertificate", input)
	return &IAMUploadSigningCertificateFuture{Future: future}
}

func (a *IAMStub) WaitUntilInstanceProfileExists(ctx workflow.Context, input *iam.GetInstanceProfileInput) error {
	return workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilInstanceProfileExists", input).Get(ctx, nil)
}

func (a *IAMStub) WaitUntilInstanceProfileExistsAsync(ctx workflow.Context, input *iam.GetInstanceProfileInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilInstanceProfileExists", input)
	return NewVoidFuture(future)
}

func (a *IAMStub) WaitUntilPolicyExists(ctx workflow.Context, input *iam.GetPolicyInput) error {
	return workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilPolicyExists", input).Get(ctx, nil)
}

func (a *IAMStub) WaitUntilPolicyExistsAsync(ctx workflow.Context, input *iam.GetPolicyInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilPolicyExists", input)
	return NewVoidFuture(future)
}

func (a *IAMStub) WaitUntilRoleExists(ctx workflow.Context, input *iam.GetRoleInput) error {
	return workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilRoleExists", input).Get(ctx, nil)
}

func (a *IAMStub) WaitUntilRoleExistsAsync(ctx workflow.Context, input *iam.GetRoleInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilRoleExists", input)
	return NewVoidFuture(future)
}

func (a *IAMStub) WaitUntilUserExists(ctx workflow.Context, input *iam.GetUserInput) error {
	return workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilUserExists", input).Get(ctx, nil)
}

func (a *IAMStub) WaitUntilUserExistsAsync(ctx workflow.Context, input *iam.GetUserInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilUserExists", input)
	return NewVoidFuture(future)
}
