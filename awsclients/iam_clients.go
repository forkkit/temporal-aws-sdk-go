// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/iam"
	"go.temporal.io/sdk/workflow"
)

type IAMClient interface {
	AddClientIDToOpenIDConnectProvider(ctx workflow.Context, input *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)
	AddClientIDToOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.AddClientIDToOpenIDConnectProviderInput) *IamAddClientIDToOpenIDConnectProviderFuture

	AddRoleToInstanceProfile(ctx workflow.Context, input *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error)
	AddRoleToInstanceProfileAsync(ctx workflow.Context, input *iam.AddRoleToInstanceProfileInput) *IamAddRoleToInstanceProfileFuture

	AddUserToGroup(ctx workflow.Context, input *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error)
	AddUserToGroupAsync(ctx workflow.Context, input *iam.AddUserToGroupInput) *IamAddUserToGroupFuture

	AttachGroupPolicy(ctx workflow.Context, input *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error)
	AttachGroupPolicyAsync(ctx workflow.Context, input *iam.AttachGroupPolicyInput) *IamAttachGroupPolicyFuture

	AttachRolePolicy(ctx workflow.Context, input *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error)
	AttachRolePolicyAsync(ctx workflow.Context, input *iam.AttachRolePolicyInput) *IamAttachRolePolicyFuture

	AttachUserPolicy(ctx workflow.Context, input *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error)
	AttachUserPolicyAsync(ctx workflow.Context, input *iam.AttachUserPolicyInput) *IamAttachUserPolicyFuture

	ChangePassword(ctx workflow.Context, input *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error)
	ChangePasswordAsync(ctx workflow.Context, input *iam.ChangePasswordInput) *IamChangePasswordFuture

	CreateAccessKey(ctx workflow.Context, input *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error)
	CreateAccessKeyAsync(ctx workflow.Context, input *iam.CreateAccessKeyInput) *IamCreateAccessKeyFuture

	CreateAccountAlias(ctx workflow.Context, input *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error)
	CreateAccountAliasAsync(ctx workflow.Context, input *iam.CreateAccountAliasInput) *IamCreateAccountAliasFuture

	CreateGroup(ctx workflow.Context, input *iam.CreateGroupInput) (*iam.CreateGroupOutput, error)
	CreateGroupAsync(ctx workflow.Context, input *iam.CreateGroupInput) *IamCreateGroupFuture

	CreateInstanceProfile(ctx workflow.Context, input *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error)
	CreateInstanceProfileAsync(ctx workflow.Context, input *iam.CreateInstanceProfileInput) *IamCreateInstanceProfileFuture

	CreateLoginProfile(ctx workflow.Context, input *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error)
	CreateLoginProfileAsync(ctx workflow.Context, input *iam.CreateLoginProfileInput) *IamCreateLoginProfileFuture

	CreateOpenIDConnectProvider(ctx workflow.Context, input *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error)
	CreateOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.CreateOpenIDConnectProviderInput) *IamCreateOpenIDConnectProviderFuture

	CreatePolicy(ctx workflow.Context, input *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error)
	CreatePolicyAsync(ctx workflow.Context, input *iam.CreatePolicyInput) *IamCreatePolicyFuture

	CreatePolicyVersion(ctx workflow.Context, input *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error)
	CreatePolicyVersionAsync(ctx workflow.Context, input *iam.CreatePolicyVersionInput) *IamCreatePolicyVersionFuture

	CreateRole(ctx workflow.Context, input *iam.CreateRoleInput) (*iam.CreateRoleOutput, error)
	CreateRoleAsync(ctx workflow.Context, input *iam.CreateRoleInput) *IamCreateRoleFuture

	CreateSAMLProvider(ctx workflow.Context, input *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error)
	CreateSAMLProviderAsync(ctx workflow.Context, input *iam.CreateSAMLProviderInput) *IamCreateSAMLProviderFuture

	CreateServiceLinkedRole(ctx workflow.Context, input *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error)
	CreateServiceLinkedRoleAsync(ctx workflow.Context, input *iam.CreateServiceLinkedRoleInput) *IamCreateServiceLinkedRoleFuture

	CreateServiceSpecificCredential(ctx workflow.Context, input *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error)
	CreateServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.CreateServiceSpecificCredentialInput) *IamCreateServiceSpecificCredentialFuture

	CreateUser(ctx workflow.Context, input *iam.CreateUserInput) (*iam.CreateUserOutput, error)
	CreateUserAsync(ctx workflow.Context, input *iam.CreateUserInput) *IamCreateUserFuture

	CreateVirtualMFADevice(ctx workflow.Context, input *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error)
	CreateVirtualMFADeviceAsync(ctx workflow.Context, input *iam.CreateVirtualMFADeviceInput) *IamCreateVirtualMFADeviceFuture

	DeactivateMFADevice(ctx workflow.Context, input *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error)
	DeactivateMFADeviceAsync(ctx workflow.Context, input *iam.DeactivateMFADeviceInput) *IamDeactivateMFADeviceFuture

	DeleteAccessKey(ctx workflow.Context, input *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error)
	DeleteAccessKeyAsync(ctx workflow.Context, input *iam.DeleteAccessKeyInput) *IamDeleteAccessKeyFuture

	DeleteAccountAlias(ctx workflow.Context, input *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error)
	DeleteAccountAliasAsync(ctx workflow.Context, input *iam.DeleteAccountAliasInput) *IamDeleteAccountAliasFuture

	DeleteAccountPasswordPolicy(ctx workflow.Context, input *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error)
	DeleteAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.DeleteAccountPasswordPolicyInput) *IamDeleteAccountPasswordPolicyFuture

	DeleteGroup(ctx workflow.Context, input *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error)
	DeleteGroupAsync(ctx workflow.Context, input *iam.DeleteGroupInput) *IamDeleteGroupFuture

	DeleteGroupPolicy(ctx workflow.Context, input *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error)
	DeleteGroupPolicyAsync(ctx workflow.Context, input *iam.DeleteGroupPolicyInput) *IamDeleteGroupPolicyFuture

	DeleteInstanceProfile(ctx workflow.Context, input *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error)
	DeleteInstanceProfileAsync(ctx workflow.Context, input *iam.DeleteInstanceProfileInput) *IamDeleteInstanceProfileFuture

	DeleteLoginProfile(ctx workflow.Context, input *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error)
	DeleteLoginProfileAsync(ctx workflow.Context, input *iam.DeleteLoginProfileInput) *IamDeleteLoginProfileFuture

	DeleteOpenIDConnectProvider(ctx workflow.Context, input *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error)
	DeleteOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.DeleteOpenIDConnectProviderInput) *IamDeleteOpenIDConnectProviderFuture

	DeletePolicy(ctx workflow.Context, input *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error)
	DeletePolicyAsync(ctx workflow.Context, input *iam.DeletePolicyInput) *IamDeletePolicyFuture

	DeletePolicyVersion(ctx workflow.Context, input *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error)
	DeletePolicyVersionAsync(ctx workflow.Context, input *iam.DeletePolicyVersionInput) *IamDeletePolicyVersionFuture

	DeleteRole(ctx workflow.Context, input *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error)
	DeleteRoleAsync(ctx workflow.Context, input *iam.DeleteRoleInput) *IamDeleteRoleFuture

	DeleteRolePermissionsBoundary(ctx workflow.Context, input *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error)
	DeleteRolePermissionsBoundaryAsync(ctx workflow.Context, input *iam.DeleteRolePermissionsBoundaryInput) *IamDeleteRolePermissionsBoundaryFuture

	DeleteRolePolicy(ctx workflow.Context, input *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error)
	DeleteRolePolicyAsync(ctx workflow.Context, input *iam.DeleteRolePolicyInput) *IamDeleteRolePolicyFuture

	DeleteSAMLProvider(ctx workflow.Context, input *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error)
	DeleteSAMLProviderAsync(ctx workflow.Context, input *iam.DeleteSAMLProviderInput) *IamDeleteSAMLProviderFuture

	DeleteSSHPublicKey(ctx workflow.Context, input *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error)
	DeleteSSHPublicKeyAsync(ctx workflow.Context, input *iam.DeleteSSHPublicKeyInput) *IamDeleteSSHPublicKeyFuture

	DeleteServerCertificate(ctx workflow.Context, input *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error)
	DeleteServerCertificateAsync(ctx workflow.Context, input *iam.DeleteServerCertificateInput) *IamDeleteServerCertificateFuture

	DeleteServiceLinkedRole(ctx workflow.Context, input *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error)
	DeleteServiceLinkedRoleAsync(ctx workflow.Context, input *iam.DeleteServiceLinkedRoleInput) *IamDeleteServiceLinkedRoleFuture

	DeleteServiceSpecificCredential(ctx workflow.Context, input *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error)
	DeleteServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.DeleteServiceSpecificCredentialInput) *IamDeleteServiceSpecificCredentialFuture

	DeleteSigningCertificate(ctx workflow.Context, input *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error)
	DeleteSigningCertificateAsync(ctx workflow.Context, input *iam.DeleteSigningCertificateInput) *IamDeleteSigningCertificateFuture

	DeleteUser(ctx workflow.Context, input *iam.DeleteUserInput) (*iam.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *iam.DeleteUserInput) *IamDeleteUserFuture

	DeleteUserPermissionsBoundary(ctx workflow.Context, input *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error)
	DeleteUserPermissionsBoundaryAsync(ctx workflow.Context, input *iam.DeleteUserPermissionsBoundaryInput) *IamDeleteUserPermissionsBoundaryFuture

	DeleteUserPolicy(ctx workflow.Context, input *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error)
	DeleteUserPolicyAsync(ctx workflow.Context, input *iam.DeleteUserPolicyInput) *IamDeleteUserPolicyFuture

	DeleteVirtualMFADevice(ctx workflow.Context, input *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error)
	DeleteVirtualMFADeviceAsync(ctx workflow.Context, input *iam.DeleteVirtualMFADeviceInput) *IamDeleteVirtualMFADeviceFuture

	DetachGroupPolicy(ctx workflow.Context, input *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error)
	DetachGroupPolicyAsync(ctx workflow.Context, input *iam.DetachGroupPolicyInput) *IamDetachGroupPolicyFuture

	DetachRolePolicy(ctx workflow.Context, input *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error)
	DetachRolePolicyAsync(ctx workflow.Context, input *iam.DetachRolePolicyInput) *IamDetachRolePolicyFuture

	DetachUserPolicy(ctx workflow.Context, input *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error)
	DetachUserPolicyAsync(ctx workflow.Context, input *iam.DetachUserPolicyInput) *IamDetachUserPolicyFuture

	EnableMFADevice(ctx workflow.Context, input *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error)
	EnableMFADeviceAsync(ctx workflow.Context, input *iam.EnableMFADeviceInput) *IamEnableMFADeviceFuture

	GenerateCredentialReport(ctx workflow.Context, input *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error)
	GenerateCredentialReportAsync(ctx workflow.Context, input *iam.GenerateCredentialReportInput) *IamGenerateCredentialReportFuture

	GenerateOrganizationsAccessReport(ctx workflow.Context, input *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error)
	GenerateOrganizationsAccessReportAsync(ctx workflow.Context, input *iam.GenerateOrganizationsAccessReportInput) *IamGenerateOrganizationsAccessReportFuture

	GenerateServiceLastAccessedDetails(ctx workflow.Context, input *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error)
	GenerateServiceLastAccessedDetailsAsync(ctx workflow.Context, input *iam.GenerateServiceLastAccessedDetailsInput) *IamGenerateServiceLastAccessedDetailsFuture

	GetAccessKeyLastUsed(ctx workflow.Context, input *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error)
	GetAccessKeyLastUsedAsync(ctx workflow.Context, input *iam.GetAccessKeyLastUsedInput) *IamGetAccessKeyLastUsedFuture

	GetAccountAuthorizationDetails(ctx workflow.Context, input *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error)
	GetAccountAuthorizationDetailsAsync(ctx workflow.Context, input *iam.GetAccountAuthorizationDetailsInput) *IamGetAccountAuthorizationDetailsFuture

	GetAccountPasswordPolicy(ctx workflow.Context, input *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error)
	GetAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.GetAccountPasswordPolicyInput) *IamGetAccountPasswordPolicyFuture

	GetAccountSummary(ctx workflow.Context, input *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error)
	GetAccountSummaryAsync(ctx workflow.Context, input *iam.GetAccountSummaryInput) *IamGetAccountSummaryFuture

	GetContextKeysForCustomPolicy(ctx workflow.Context, input *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)
	GetContextKeysForCustomPolicyAsync(ctx workflow.Context, input *iam.GetContextKeysForCustomPolicyInput) *IamGetContextKeysForCustomPolicyFuture

	GetContextKeysForPrincipalPolicy(ctx workflow.Context, input *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)
	GetContextKeysForPrincipalPolicyAsync(ctx workflow.Context, input *iam.GetContextKeysForPrincipalPolicyInput) *IamGetContextKeysForPrincipalPolicyFuture

	GetCredentialReport(ctx workflow.Context, input *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error)
	GetCredentialReportAsync(ctx workflow.Context, input *iam.GetCredentialReportInput) *IamGetCredentialReportFuture

	GetGroup(ctx workflow.Context, input *iam.GetGroupInput) (*iam.GetGroupOutput, error)
	GetGroupAsync(ctx workflow.Context, input *iam.GetGroupInput) *IamGetGroupFuture

	GetGroupPolicy(ctx workflow.Context, input *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error)
	GetGroupPolicyAsync(ctx workflow.Context, input *iam.GetGroupPolicyInput) *IamGetGroupPolicyFuture

	GetInstanceProfile(ctx workflow.Context, input *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error)
	GetInstanceProfileAsync(ctx workflow.Context, input *iam.GetInstanceProfileInput) *IamGetInstanceProfileFuture

	GetLoginProfile(ctx workflow.Context, input *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error)
	GetLoginProfileAsync(ctx workflow.Context, input *iam.GetLoginProfileInput) *IamGetLoginProfileFuture

	GetOpenIDConnectProvider(ctx workflow.Context, input *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error)
	GetOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.GetOpenIDConnectProviderInput) *IamGetOpenIDConnectProviderFuture

	GetOrganizationsAccessReport(ctx workflow.Context, input *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error)
	GetOrganizationsAccessReportAsync(ctx workflow.Context, input *iam.GetOrganizationsAccessReportInput) *IamGetOrganizationsAccessReportFuture

	GetPolicy(ctx workflow.Context, input *iam.GetPolicyInput) (*iam.GetPolicyOutput, error)
	GetPolicyAsync(ctx workflow.Context, input *iam.GetPolicyInput) *IamGetPolicyFuture

	GetPolicyVersion(ctx workflow.Context, input *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error)
	GetPolicyVersionAsync(ctx workflow.Context, input *iam.GetPolicyVersionInput) *IamGetPolicyVersionFuture

	GetRole(ctx workflow.Context, input *iam.GetRoleInput) (*iam.GetRoleOutput, error)
	GetRoleAsync(ctx workflow.Context, input *iam.GetRoleInput) *IamGetRoleFuture

	GetRolePolicy(ctx workflow.Context, input *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error)
	GetRolePolicyAsync(ctx workflow.Context, input *iam.GetRolePolicyInput) *IamGetRolePolicyFuture

	GetSAMLProvider(ctx workflow.Context, input *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error)
	GetSAMLProviderAsync(ctx workflow.Context, input *iam.GetSAMLProviderInput) *IamGetSAMLProviderFuture

	GetSSHPublicKey(ctx workflow.Context, input *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error)
	GetSSHPublicKeyAsync(ctx workflow.Context, input *iam.GetSSHPublicKeyInput) *IamGetSSHPublicKeyFuture

	GetServerCertificate(ctx workflow.Context, input *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error)
	GetServerCertificateAsync(ctx workflow.Context, input *iam.GetServerCertificateInput) *IamGetServerCertificateFuture

	GetServiceLastAccessedDetails(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error)
	GetServiceLastAccessedDetailsAsync(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsInput) *IamGetServiceLastAccessedDetailsFuture

	GetServiceLastAccessedDetailsWithEntities(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)
	GetServiceLastAccessedDetailsWithEntitiesAsync(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsWithEntitiesInput) *IamGetServiceLastAccessedDetailsWithEntitiesFuture

	GetServiceLinkedRoleDeletionStatus(ctx workflow.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)
	GetServiceLinkedRoleDeletionStatusAsync(ctx workflow.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput) *IamGetServiceLinkedRoleDeletionStatusFuture

	GetUser(ctx workflow.Context, input *iam.GetUserInput) (*iam.GetUserOutput, error)
	GetUserAsync(ctx workflow.Context, input *iam.GetUserInput) *IamGetUserFuture

	GetUserPolicy(ctx workflow.Context, input *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error)
	GetUserPolicyAsync(ctx workflow.Context, input *iam.GetUserPolicyInput) *IamGetUserPolicyFuture

	ListAccessKeys(ctx workflow.Context, input *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error)
	ListAccessKeysAsync(ctx workflow.Context, input *iam.ListAccessKeysInput) *IamListAccessKeysFuture

	ListAccountAliases(ctx workflow.Context, input *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error)
	ListAccountAliasesAsync(ctx workflow.Context, input *iam.ListAccountAliasesInput) *IamListAccountAliasesFuture

	ListAttachedGroupPolicies(ctx workflow.Context, input *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error)
	ListAttachedGroupPoliciesAsync(ctx workflow.Context, input *iam.ListAttachedGroupPoliciesInput) *IamListAttachedGroupPoliciesFuture

	ListAttachedRolePolicies(ctx workflow.Context, input *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error)
	ListAttachedRolePoliciesAsync(ctx workflow.Context, input *iam.ListAttachedRolePoliciesInput) *IamListAttachedRolePoliciesFuture

	ListAttachedUserPolicies(ctx workflow.Context, input *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error)
	ListAttachedUserPoliciesAsync(ctx workflow.Context, input *iam.ListAttachedUserPoliciesInput) *IamListAttachedUserPoliciesFuture

	ListEntitiesForPolicy(ctx workflow.Context, input *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error)
	ListEntitiesForPolicyAsync(ctx workflow.Context, input *iam.ListEntitiesForPolicyInput) *IamListEntitiesForPolicyFuture

	ListGroupPolicies(ctx workflow.Context, input *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error)
	ListGroupPoliciesAsync(ctx workflow.Context, input *iam.ListGroupPoliciesInput) *IamListGroupPoliciesFuture

	ListGroups(ctx workflow.Context, input *iam.ListGroupsInput) (*iam.ListGroupsOutput, error)
	ListGroupsAsync(ctx workflow.Context, input *iam.ListGroupsInput) *IamListGroupsFuture

	ListGroupsForUser(ctx workflow.Context, input *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error)
	ListGroupsForUserAsync(ctx workflow.Context, input *iam.ListGroupsForUserInput) *IamListGroupsForUserFuture

	ListInstanceProfiles(ctx workflow.Context, input *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error)
	ListInstanceProfilesAsync(ctx workflow.Context, input *iam.ListInstanceProfilesInput) *IamListInstanceProfilesFuture

	ListInstanceProfilesForRole(ctx workflow.Context, input *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error)
	ListInstanceProfilesForRoleAsync(ctx workflow.Context, input *iam.ListInstanceProfilesForRoleInput) *IamListInstanceProfilesForRoleFuture

	ListMFADevices(ctx workflow.Context, input *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error)
	ListMFADevicesAsync(ctx workflow.Context, input *iam.ListMFADevicesInput) *IamListMFADevicesFuture

	ListOpenIDConnectProviders(ctx workflow.Context, input *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error)
	ListOpenIDConnectProvidersAsync(ctx workflow.Context, input *iam.ListOpenIDConnectProvidersInput) *IamListOpenIDConnectProvidersFuture

	ListPolicies(ctx workflow.Context, input *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error)
	ListPoliciesAsync(ctx workflow.Context, input *iam.ListPoliciesInput) *IamListPoliciesFuture

	ListPoliciesGrantingServiceAccess(ctx workflow.Context, input *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error)
	ListPoliciesGrantingServiceAccessAsync(ctx workflow.Context, input *iam.ListPoliciesGrantingServiceAccessInput) *IamListPoliciesGrantingServiceAccessFuture

	ListPolicyVersions(ctx workflow.Context, input *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error)
	ListPolicyVersionsAsync(ctx workflow.Context, input *iam.ListPolicyVersionsInput) *IamListPolicyVersionsFuture

	ListRolePolicies(ctx workflow.Context, input *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error)
	ListRolePoliciesAsync(ctx workflow.Context, input *iam.ListRolePoliciesInput) *IamListRolePoliciesFuture

	ListRoleTags(ctx workflow.Context, input *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error)
	ListRoleTagsAsync(ctx workflow.Context, input *iam.ListRoleTagsInput) *IamListRoleTagsFuture

	ListRoles(ctx workflow.Context, input *iam.ListRolesInput) (*iam.ListRolesOutput, error)
	ListRolesAsync(ctx workflow.Context, input *iam.ListRolesInput) *IamListRolesFuture

	ListSAMLProviders(ctx workflow.Context, input *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error)
	ListSAMLProvidersAsync(ctx workflow.Context, input *iam.ListSAMLProvidersInput) *IamListSAMLProvidersFuture

	ListSSHPublicKeys(ctx workflow.Context, input *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error)
	ListSSHPublicKeysAsync(ctx workflow.Context, input *iam.ListSSHPublicKeysInput) *IamListSSHPublicKeysFuture

	ListServerCertificates(ctx workflow.Context, input *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error)
	ListServerCertificatesAsync(ctx workflow.Context, input *iam.ListServerCertificatesInput) *IamListServerCertificatesFuture

	ListServiceSpecificCredentials(ctx workflow.Context, input *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error)
	ListServiceSpecificCredentialsAsync(ctx workflow.Context, input *iam.ListServiceSpecificCredentialsInput) *IamListServiceSpecificCredentialsFuture

	ListSigningCertificates(ctx workflow.Context, input *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error)
	ListSigningCertificatesAsync(ctx workflow.Context, input *iam.ListSigningCertificatesInput) *IamListSigningCertificatesFuture

	ListUserPolicies(ctx workflow.Context, input *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error)
	ListUserPoliciesAsync(ctx workflow.Context, input *iam.ListUserPoliciesInput) *IamListUserPoliciesFuture

	ListUserTags(ctx workflow.Context, input *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error)
	ListUserTagsAsync(ctx workflow.Context, input *iam.ListUserTagsInput) *IamListUserTagsFuture

	ListUsers(ctx workflow.Context, input *iam.ListUsersInput) (*iam.ListUsersOutput, error)
	ListUsersAsync(ctx workflow.Context, input *iam.ListUsersInput) *IamListUsersFuture

	ListVirtualMFADevices(ctx workflow.Context, input *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error)
	ListVirtualMFADevicesAsync(ctx workflow.Context, input *iam.ListVirtualMFADevicesInput) *IamListVirtualMFADevicesFuture

	PutGroupPolicy(ctx workflow.Context, input *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error)
	PutGroupPolicyAsync(ctx workflow.Context, input *iam.PutGroupPolicyInput) *IamPutGroupPolicyFuture

	PutRolePermissionsBoundary(ctx workflow.Context, input *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error)
	PutRolePermissionsBoundaryAsync(ctx workflow.Context, input *iam.PutRolePermissionsBoundaryInput) *IamPutRolePermissionsBoundaryFuture

	PutRolePolicy(ctx workflow.Context, input *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error)
	PutRolePolicyAsync(ctx workflow.Context, input *iam.PutRolePolicyInput) *IamPutRolePolicyFuture

	PutUserPermissionsBoundary(ctx workflow.Context, input *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error)
	PutUserPermissionsBoundaryAsync(ctx workflow.Context, input *iam.PutUserPermissionsBoundaryInput) *IamPutUserPermissionsBoundaryFuture

	PutUserPolicy(ctx workflow.Context, input *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error)
	PutUserPolicyAsync(ctx workflow.Context, input *iam.PutUserPolicyInput) *IamPutUserPolicyFuture

	RemoveClientIDFromOpenIDConnectProvider(ctx workflow.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)
	RemoveClientIDFromOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput) *IamRemoveClientIDFromOpenIDConnectProviderFuture

	RemoveRoleFromInstanceProfile(ctx workflow.Context, input *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error)
	RemoveRoleFromInstanceProfileAsync(ctx workflow.Context, input *iam.RemoveRoleFromInstanceProfileInput) *IamRemoveRoleFromInstanceProfileFuture

	RemoveUserFromGroup(ctx workflow.Context, input *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error)
	RemoveUserFromGroupAsync(ctx workflow.Context, input *iam.RemoveUserFromGroupInput) *IamRemoveUserFromGroupFuture

	ResetServiceSpecificCredential(ctx workflow.Context, input *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error)
	ResetServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.ResetServiceSpecificCredentialInput) *IamResetServiceSpecificCredentialFuture

	ResyncMFADevice(ctx workflow.Context, input *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error)
	ResyncMFADeviceAsync(ctx workflow.Context, input *iam.ResyncMFADeviceInput) *IamResyncMFADeviceFuture

	SetDefaultPolicyVersion(ctx workflow.Context, input *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error)
	SetDefaultPolicyVersionAsync(ctx workflow.Context, input *iam.SetDefaultPolicyVersionInput) *IamSetDefaultPolicyVersionFuture

	SetSecurityTokenServicePreferences(ctx workflow.Context, input *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error)
	SetSecurityTokenServicePreferencesAsync(ctx workflow.Context, input *iam.SetSecurityTokenServicePreferencesInput) *IamSetSecurityTokenServicePreferencesFuture

	SimulateCustomPolicy(ctx workflow.Context, input *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error)
	SimulateCustomPolicyAsync(ctx workflow.Context, input *iam.SimulateCustomPolicyInput) *IamSimulateCustomPolicyFuture

	SimulatePrincipalPolicy(ctx workflow.Context, input *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error)
	SimulatePrincipalPolicyAsync(ctx workflow.Context, input *iam.SimulatePrincipalPolicyInput) *IamSimulatePrincipalPolicyFuture

	TagRole(ctx workflow.Context, input *iam.TagRoleInput) (*iam.TagRoleOutput, error)
	TagRoleAsync(ctx workflow.Context, input *iam.TagRoleInput) *IamTagRoleFuture

	TagUser(ctx workflow.Context, input *iam.TagUserInput) (*iam.TagUserOutput, error)
	TagUserAsync(ctx workflow.Context, input *iam.TagUserInput) *IamTagUserFuture

	UntagRole(ctx workflow.Context, input *iam.UntagRoleInput) (*iam.UntagRoleOutput, error)
	UntagRoleAsync(ctx workflow.Context, input *iam.UntagRoleInput) *IamUntagRoleFuture

	UntagUser(ctx workflow.Context, input *iam.UntagUserInput) (*iam.UntagUserOutput, error)
	UntagUserAsync(ctx workflow.Context, input *iam.UntagUserInput) *IamUntagUserFuture

	UpdateAccessKey(ctx workflow.Context, input *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error)
	UpdateAccessKeyAsync(ctx workflow.Context, input *iam.UpdateAccessKeyInput) *IamUpdateAccessKeyFuture

	UpdateAccountPasswordPolicy(ctx workflow.Context, input *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error)
	UpdateAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.UpdateAccountPasswordPolicyInput) *IamUpdateAccountPasswordPolicyFuture

	UpdateAssumeRolePolicy(ctx workflow.Context, input *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error)
	UpdateAssumeRolePolicyAsync(ctx workflow.Context, input *iam.UpdateAssumeRolePolicyInput) *IamUpdateAssumeRolePolicyFuture

	UpdateGroup(ctx workflow.Context, input *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error)
	UpdateGroupAsync(ctx workflow.Context, input *iam.UpdateGroupInput) *IamUpdateGroupFuture

	UpdateLoginProfile(ctx workflow.Context, input *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error)
	UpdateLoginProfileAsync(ctx workflow.Context, input *iam.UpdateLoginProfileInput) *IamUpdateLoginProfileFuture

	UpdateOpenIDConnectProviderThumbprint(ctx workflow.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)
	UpdateOpenIDConnectProviderThumbprintAsync(ctx workflow.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput) *IamUpdateOpenIDConnectProviderThumbprintFuture

	UpdateRole(ctx workflow.Context, input *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error)
	UpdateRoleAsync(ctx workflow.Context, input *iam.UpdateRoleInput) *IamUpdateRoleFuture

	UpdateRoleDescription(ctx workflow.Context, input *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error)
	UpdateRoleDescriptionAsync(ctx workflow.Context, input *iam.UpdateRoleDescriptionInput) *IamUpdateRoleDescriptionFuture

	UpdateSAMLProvider(ctx workflow.Context, input *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error)
	UpdateSAMLProviderAsync(ctx workflow.Context, input *iam.UpdateSAMLProviderInput) *IamUpdateSAMLProviderFuture

	UpdateSSHPublicKey(ctx workflow.Context, input *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error)
	UpdateSSHPublicKeyAsync(ctx workflow.Context, input *iam.UpdateSSHPublicKeyInput) *IamUpdateSSHPublicKeyFuture

	UpdateServerCertificate(ctx workflow.Context, input *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error)
	UpdateServerCertificateAsync(ctx workflow.Context, input *iam.UpdateServerCertificateInput) *IamUpdateServerCertificateFuture

	UpdateServiceSpecificCredential(ctx workflow.Context, input *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error)
	UpdateServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.UpdateServiceSpecificCredentialInput) *IamUpdateServiceSpecificCredentialFuture

	UpdateSigningCertificate(ctx workflow.Context, input *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error)
	UpdateSigningCertificateAsync(ctx workflow.Context, input *iam.UpdateSigningCertificateInput) *IamUpdateSigningCertificateFuture

	UpdateUser(ctx workflow.Context, input *iam.UpdateUserInput) (*iam.UpdateUserOutput, error)
	UpdateUserAsync(ctx workflow.Context, input *iam.UpdateUserInput) *IamUpdateUserFuture

	UploadSSHPublicKey(ctx workflow.Context, input *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error)
	UploadSSHPublicKeyAsync(ctx workflow.Context, input *iam.UploadSSHPublicKeyInput) *IamUploadSSHPublicKeyFuture

	UploadServerCertificate(ctx workflow.Context, input *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error)
	UploadServerCertificateAsync(ctx workflow.Context, input *iam.UploadServerCertificateInput) *IamUploadServerCertificateFuture

	UploadSigningCertificate(ctx workflow.Context, input *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error)
	UploadSigningCertificateAsync(ctx workflow.Context, input *iam.UploadSigningCertificateInput) *IamUploadSigningCertificateFuture

	WaitUntilInstanceProfileExists(ctx workflow.Context, input *iam.GetInstanceProfileInput) error
	WaitUntilInstanceProfileExistsAsync(ctx workflow.Context, input *iam.GetInstanceProfileInput) *VoidFuture

	WaitUntilPolicyExists(ctx workflow.Context, input *iam.GetPolicyInput) error
	WaitUntilPolicyExistsAsync(ctx workflow.Context, input *iam.GetPolicyInput) *VoidFuture

	WaitUntilRoleExists(ctx workflow.Context, input *iam.GetRoleInput) error
	WaitUntilRoleExistsAsync(ctx workflow.Context, input *iam.GetRoleInput) *VoidFuture

	WaitUntilUserExists(ctx workflow.Context, input *iam.GetUserInput) error
	WaitUntilUserExistsAsync(ctx workflow.Context, input *iam.GetUserInput) *VoidFuture
}

type IAMStub struct{}

func NewIAMStub() IAMClient {
	return &IAMStub{}
}

type IamAddClientIDToOpenIDConnectProviderFuture struct {
	Future workflow.Future
}

func (r *IamAddClientIDToOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	var output iam.AddClientIDToOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamAddRoleToInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *IamAddRoleToInstanceProfileFuture) Get(ctx workflow.Context) (*iam.AddRoleToInstanceProfileOutput, error) {
	var output iam.AddRoleToInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamAddUserToGroupFuture struct {
	Future workflow.Future
}

func (r *IamAddUserToGroupFuture) Get(ctx workflow.Context) (*iam.AddUserToGroupOutput, error) {
	var output iam.AddUserToGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamAttachGroupPolicyFuture struct {
	Future workflow.Future
}

func (r *IamAttachGroupPolicyFuture) Get(ctx workflow.Context) (*iam.AttachGroupPolicyOutput, error) {
	var output iam.AttachGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamAttachRolePolicyFuture struct {
	Future workflow.Future
}

func (r *IamAttachRolePolicyFuture) Get(ctx workflow.Context) (*iam.AttachRolePolicyOutput, error) {
	var output iam.AttachRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamAttachUserPolicyFuture struct {
	Future workflow.Future
}

func (r *IamAttachUserPolicyFuture) Get(ctx workflow.Context) (*iam.AttachUserPolicyOutput, error) {
	var output iam.AttachUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamChangePasswordFuture struct {
	Future workflow.Future
}

func (r *IamChangePasswordFuture) Get(ctx workflow.Context) (*iam.ChangePasswordOutput, error) {
	var output iam.ChangePasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreateAccessKeyFuture struct {
	Future workflow.Future
}

func (r *IamCreateAccessKeyFuture) Get(ctx workflow.Context) (*iam.CreateAccessKeyOutput, error) {
	var output iam.CreateAccessKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreateAccountAliasFuture struct {
	Future workflow.Future
}

func (r *IamCreateAccountAliasFuture) Get(ctx workflow.Context) (*iam.CreateAccountAliasOutput, error) {
	var output iam.CreateAccountAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreateGroupFuture struct {
	Future workflow.Future
}

func (r *IamCreateGroupFuture) Get(ctx workflow.Context) (*iam.CreateGroupOutput, error) {
	var output iam.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreateInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *IamCreateInstanceProfileFuture) Get(ctx workflow.Context) (*iam.CreateInstanceProfileOutput, error) {
	var output iam.CreateInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreateLoginProfileFuture struct {
	Future workflow.Future
}

func (r *IamCreateLoginProfileFuture) Get(ctx workflow.Context) (*iam.CreateLoginProfileOutput, error) {
	var output iam.CreateLoginProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreateOpenIDConnectProviderFuture struct {
	Future workflow.Future
}

func (r *IamCreateOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.CreateOpenIDConnectProviderOutput, error) {
	var output iam.CreateOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreatePolicyFuture struct {
	Future workflow.Future
}

func (r *IamCreatePolicyFuture) Get(ctx workflow.Context) (*iam.CreatePolicyOutput, error) {
	var output iam.CreatePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreatePolicyVersionFuture struct {
	Future workflow.Future
}

func (r *IamCreatePolicyVersionFuture) Get(ctx workflow.Context) (*iam.CreatePolicyVersionOutput, error) {
	var output iam.CreatePolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreateRoleFuture struct {
	Future workflow.Future
}

func (r *IamCreateRoleFuture) Get(ctx workflow.Context) (*iam.CreateRoleOutput, error) {
	var output iam.CreateRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreateSAMLProviderFuture struct {
	Future workflow.Future
}

func (r *IamCreateSAMLProviderFuture) Get(ctx workflow.Context) (*iam.CreateSAMLProviderOutput, error) {
	var output iam.CreateSAMLProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreateServiceLinkedRoleFuture struct {
	Future workflow.Future
}

func (r *IamCreateServiceLinkedRoleFuture) Get(ctx workflow.Context) (*iam.CreateServiceLinkedRoleOutput, error) {
	var output iam.CreateServiceLinkedRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreateServiceSpecificCredentialFuture struct {
	Future workflow.Future
}

func (r *IamCreateServiceSpecificCredentialFuture) Get(ctx workflow.Context) (*iam.CreateServiceSpecificCredentialOutput, error) {
	var output iam.CreateServiceSpecificCredentialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreateUserFuture struct {
	Future workflow.Future
}

func (r *IamCreateUserFuture) Get(ctx workflow.Context) (*iam.CreateUserOutput, error) {
	var output iam.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamCreateVirtualMFADeviceFuture struct {
	Future workflow.Future
}

func (r *IamCreateVirtualMFADeviceFuture) Get(ctx workflow.Context) (*iam.CreateVirtualMFADeviceOutput, error) {
	var output iam.CreateVirtualMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeactivateMFADeviceFuture struct {
	Future workflow.Future
}

func (r *IamDeactivateMFADeviceFuture) Get(ctx workflow.Context) (*iam.DeactivateMFADeviceOutput, error) {
	var output iam.DeactivateMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteAccessKeyFuture struct {
	Future workflow.Future
}

func (r *IamDeleteAccessKeyFuture) Get(ctx workflow.Context) (*iam.DeleteAccessKeyOutput, error) {
	var output iam.DeleteAccessKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteAccountAliasFuture struct {
	Future workflow.Future
}

func (r *IamDeleteAccountAliasFuture) Get(ctx workflow.Context) (*iam.DeleteAccountAliasOutput, error) {
	var output iam.DeleteAccountAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteAccountPasswordPolicyFuture struct {
	Future workflow.Future
}

func (r *IamDeleteAccountPasswordPolicyFuture) Get(ctx workflow.Context) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	var output iam.DeleteAccountPasswordPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteGroupFuture struct {
	Future workflow.Future
}

func (r *IamDeleteGroupFuture) Get(ctx workflow.Context) (*iam.DeleteGroupOutput, error) {
	var output iam.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteGroupPolicyFuture struct {
	Future workflow.Future
}

func (r *IamDeleteGroupPolicyFuture) Get(ctx workflow.Context) (*iam.DeleteGroupPolicyOutput, error) {
	var output iam.DeleteGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *IamDeleteInstanceProfileFuture) Get(ctx workflow.Context) (*iam.DeleteInstanceProfileOutput, error) {
	var output iam.DeleteInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteLoginProfileFuture struct {
	Future workflow.Future
}

func (r *IamDeleteLoginProfileFuture) Get(ctx workflow.Context) (*iam.DeleteLoginProfileOutput, error) {
	var output iam.DeleteLoginProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteOpenIDConnectProviderFuture struct {
	Future workflow.Future
}

func (r *IamDeleteOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	var output iam.DeleteOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeletePolicyFuture struct {
	Future workflow.Future
}

func (r *IamDeletePolicyFuture) Get(ctx workflow.Context) (*iam.DeletePolicyOutput, error) {
	var output iam.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeletePolicyVersionFuture struct {
	Future workflow.Future
}

func (r *IamDeletePolicyVersionFuture) Get(ctx workflow.Context) (*iam.DeletePolicyVersionOutput, error) {
	var output iam.DeletePolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteRoleFuture struct {
	Future workflow.Future
}

func (r *IamDeleteRoleFuture) Get(ctx workflow.Context) (*iam.DeleteRoleOutput, error) {
	var output iam.DeleteRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteRolePermissionsBoundaryFuture struct {
	Future workflow.Future
}

func (r *IamDeleteRolePermissionsBoundaryFuture) Get(ctx workflow.Context) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	var output iam.DeleteRolePermissionsBoundaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteRolePolicyFuture struct {
	Future workflow.Future
}

func (r *IamDeleteRolePolicyFuture) Get(ctx workflow.Context) (*iam.DeleteRolePolicyOutput, error) {
	var output iam.DeleteRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteSAMLProviderFuture struct {
	Future workflow.Future
}

func (r *IamDeleteSAMLProviderFuture) Get(ctx workflow.Context) (*iam.DeleteSAMLProviderOutput, error) {
	var output iam.DeleteSAMLProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteSSHPublicKeyFuture struct {
	Future workflow.Future
}

func (r *IamDeleteSSHPublicKeyFuture) Get(ctx workflow.Context) (*iam.DeleteSSHPublicKeyOutput, error) {
	var output iam.DeleteSSHPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteServerCertificateFuture struct {
	Future workflow.Future
}

func (r *IamDeleteServerCertificateFuture) Get(ctx workflow.Context) (*iam.DeleteServerCertificateOutput, error) {
	var output iam.DeleteServerCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteServiceLinkedRoleFuture struct {
	Future workflow.Future
}

func (r *IamDeleteServiceLinkedRoleFuture) Get(ctx workflow.Context) (*iam.DeleteServiceLinkedRoleOutput, error) {
	var output iam.DeleteServiceLinkedRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteServiceSpecificCredentialFuture struct {
	Future workflow.Future
}

func (r *IamDeleteServiceSpecificCredentialFuture) Get(ctx workflow.Context) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	var output iam.DeleteServiceSpecificCredentialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteSigningCertificateFuture struct {
	Future workflow.Future
}

func (r *IamDeleteSigningCertificateFuture) Get(ctx workflow.Context) (*iam.DeleteSigningCertificateOutput, error) {
	var output iam.DeleteSigningCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteUserFuture struct {
	Future workflow.Future
}

func (r *IamDeleteUserFuture) Get(ctx workflow.Context) (*iam.DeleteUserOutput, error) {
	var output iam.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteUserPermissionsBoundaryFuture struct {
	Future workflow.Future
}

func (r *IamDeleteUserPermissionsBoundaryFuture) Get(ctx workflow.Context) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	var output iam.DeleteUserPermissionsBoundaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteUserPolicyFuture struct {
	Future workflow.Future
}

func (r *IamDeleteUserPolicyFuture) Get(ctx workflow.Context) (*iam.DeleteUserPolicyOutput, error) {
	var output iam.DeleteUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDeleteVirtualMFADeviceFuture struct {
	Future workflow.Future
}

func (r *IamDeleteVirtualMFADeviceFuture) Get(ctx workflow.Context) (*iam.DeleteVirtualMFADeviceOutput, error) {
	var output iam.DeleteVirtualMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDetachGroupPolicyFuture struct {
	Future workflow.Future
}

func (r *IamDetachGroupPolicyFuture) Get(ctx workflow.Context) (*iam.DetachGroupPolicyOutput, error) {
	var output iam.DetachGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDetachRolePolicyFuture struct {
	Future workflow.Future
}

func (r *IamDetachRolePolicyFuture) Get(ctx workflow.Context) (*iam.DetachRolePolicyOutput, error) {
	var output iam.DetachRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamDetachUserPolicyFuture struct {
	Future workflow.Future
}

func (r *IamDetachUserPolicyFuture) Get(ctx workflow.Context) (*iam.DetachUserPolicyOutput, error) {
	var output iam.DetachUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamEnableMFADeviceFuture struct {
	Future workflow.Future
}

func (r *IamEnableMFADeviceFuture) Get(ctx workflow.Context) (*iam.EnableMFADeviceOutput, error) {
	var output iam.EnableMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGenerateCredentialReportFuture struct {
	Future workflow.Future
}

func (r *IamGenerateCredentialReportFuture) Get(ctx workflow.Context) (*iam.GenerateCredentialReportOutput, error) {
	var output iam.GenerateCredentialReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGenerateOrganizationsAccessReportFuture struct {
	Future workflow.Future
}

func (r *IamGenerateOrganizationsAccessReportFuture) Get(ctx workflow.Context) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	var output iam.GenerateOrganizationsAccessReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGenerateServiceLastAccessedDetailsFuture struct {
	Future workflow.Future
}

func (r *IamGenerateServiceLastAccessedDetailsFuture) Get(ctx workflow.Context) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	var output iam.GenerateServiceLastAccessedDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetAccessKeyLastUsedFuture struct {
	Future workflow.Future
}

func (r *IamGetAccessKeyLastUsedFuture) Get(ctx workflow.Context) (*iam.GetAccessKeyLastUsedOutput, error) {
	var output iam.GetAccessKeyLastUsedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetAccountAuthorizationDetailsFuture struct {
	Future workflow.Future
}

func (r *IamGetAccountAuthorizationDetailsFuture) Get(ctx workflow.Context) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	var output iam.GetAccountAuthorizationDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetAccountPasswordPolicyFuture struct {
	Future workflow.Future
}

func (r *IamGetAccountPasswordPolicyFuture) Get(ctx workflow.Context) (*iam.GetAccountPasswordPolicyOutput, error) {
	var output iam.GetAccountPasswordPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetAccountSummaryFuture struct {
	Future workflow.Future
}

func (r *IamGetAccountSummaryFuture) Get(ctx workflow.Context) (*iam.GetAccountSummaryOutput, error) {
	var output iam.GetAccountSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetContextKeysForCustomPolicyFuture struct {
	Future workflow.Future
}

func (r *IamGetContextKeysForCustomPolicyFuture) Get(ctx workflow.Context) (*iam.GetContextKeysForPolicyResponse, error) {
	var output iam.GetContextKeysForPolicyResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetContextKeysForPrincipalPolicyFuture struct {
	Future workflow.Future
}

func (r *IamGetContextKeysForPrincipalPolicyFuture) Get(ctx workflow.Context) (*iam.GetContextKeysForPolicyResponse, error) {
	var output iam.GetContextKeysForPolicyResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetCredentialReportFuture struct {
	Future workflow.Future
}

func (r *IamGetCredentialReportFuture) Get(ctx workflow.Context) (*iam.GetCredentialReportOutput, error) {
	var output iam.GetCredentialReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetGroupFuture struct {
	Future workflow.Future
}

func (r *IamGetGroupFuture) Get(ctx workflow.Context) (*iam.GetGroupOutput, error) {
	var output iam.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetGroupPolicyFuture struct {
	Future workflow.Future
}

func (r *IamGetGroupPolicyFuture) Get(ctx workflow.Context) (*iam.GetGroupPolicyOutput, error) {
	var output iam.GetGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *IamGetInstanceProfileFuture) Get(ctx workflow.Context) (*iam.GetInstanceProfileOutput, error) {
	var output iam.GetInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetLoginProfileFuture struct {
	Future workflow.Future
}

func (r *IamGetLoginProfileFuture) Get(ctx workflow.Context) (*iam.GetLoginProfileOutput, error) {
	var output iam.GetLoginProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetOpenIDConnectProviderFuture struct {
	Future workflow.Future
}

func (r *IamGetOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.GetOpenIDConnectProviderOutput, error) {
	var output iam.GetOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetOrganizationsAccessReportFuture struct {
	Future workflow.Future
}

func (r *IamGetOrganizationsAccessReportFuture) Get(ctx workflow.Context) (*iam.GetOrganizationsAccessReportOutput, error) {
	var output iam.GetOrganizationsAccessReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetPolicyFuture struct {
	Future workflow.Future
}

func (r *IamGetPolicyFuture) Get(ctx workflow.Context) (*iam.GetPolicyOutput, error) {
	var output iam.GetPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetPolicyVersionFuture struct {
	Future workflow.Future
}

func (r *IamGetPolicyVersionFuture) Get(ctx workflow.Context) (*iam.GetPolicyVersionOutput, error) {
	var output iam.GetPolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetRoleFuture struct {
	Future workflow.Future
}

func (r *IamGetRoleFuture) Get(ctx workflow.Context) (*iam.GetRoleOutput, error) {
	var output iam.GetRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetRolePolicyFuture struct {
	Future workflow.Future
}

func (r *IamGetRolePolicyFuture) Get(ctx workflow.Context) (*iam.GetRolePolicyOutput, error) {
	var output iam.GetRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetSAMLProviderFuture struct {
	Future workflow.Future
}

func (r *IamGetSAMLProviderFuture) Get(ctx workflow.Context) (*iam.GetSAMLProviderOutput, error) {
	var output iam.GetSAMLProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetSSHPublicKeyFuture struct {
	Future workflow.Future
}

func (r *IamGetSSHPublicKeyFuture) Get(ctx workflow.Context) (*iam.GetSSHPublicKeyOutput, error) {
	var output iam.GetSSHPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetServerCertificateFuture struct {
	Future workflow.Future
}

func (r *IamGetServerCertificateFuture) Get(ctx workflow.Context) (*iam.GetServerCertificateOutput, error) {
	var output iam.GetServerCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetServiceLastAccessedDetailsFuture struct {
	Future workflow.Future
}

func (r *IamGetServiceLastAccessedDetailsFuture) Get(ctx workflow.Context) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	var output iam.GetServiceLastAccessedDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetServiceLastAccessedDetailsWithEntitiesFuture struct {
	Future workflow.Future
}

func (r *IamGetServiceLastAccessedDetailsWithEntitiesFuture) Get(ctx workflow.Context) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	var output iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetServiceLinkedRoleDeletionStatusFuture struct {
	Future workflow.Future
}

func (r *IamGetServiceLinkedRoleDeletionStatusFuture) Get(ctx workflow.Context) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	var output iam.GetServiceLinkedRoleDeletionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetUserFuture struct {
	Future workflow.Future
}

func (r *IamGetUserFuture) Get(ctx workflow.Context) (*iam.GetUserOutput, error) {
	var output iam.GetUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamGetUserPolicyFuture struct {
	Future workflow.Future
}

func (r *IamGetUserPolicyFuture) Get(ctx workflow.Context) (*iam.GetUserPolicyOutput, error) {
	var output iam.GetUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListAccessKeysFuture struct {
	Future workflow.Future
}

func (r *IamListAccessKeysFuture) Get(ctx workflow.Context) (*iam.ListAccessKeysOutput, error) {
	var output iam.ListAccessKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListAccountAliasesFuture struct {
	Future workflow.Future
}

func (r *IamListAccountAliasesFuture) Get(ctx workflow.Context) (*iam.ListAccountAliasesOutput, error) {
	var output iam.ListAccountAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListAttachedGroupPoliciesFuture struct {
	Future workflow.Future
}

func (r *IamListAttachedGroupPoliciesFuture) Get(ctx workflow.Context) (*iam.ListAttachedGroupPoliciesOutput, error) {
	var output iam.ListAttachedGroupPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListAttachedRolePoliciesFuture struct {
	Future workflow.Future
}

func (r *IamListAttachedRolePoliciesFuture) Get(ctx workflow.Context) (*iam.ListAttachedRolePoliciesOutput, error) {
	var output iam.ListAttachedRolePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListAttachedUserPoliciesFuture struct {
	Future workflow.Future
}

func (r *IamListAttachedUserPoliciesFuture) Get(ctx workflow.Context) (*iam.ListAttachedUserPoliciesOutput, error) {
	var output iam.ListAttachedUserPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListEntitiesForPolicyFuture struct {
	Future workflow.Future
}

func (r *IamListEntitiesForPolicyFuture) Get(ctx workflow.Context) (*iam.ListEntitiesForPolicyOutput, error) {
	var output iam.ListEntitiesForPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListGroupPoliciesFuture struct {
	Future workflow.Future
}

func (r *IamListGroupPoliciesFuture) Get(ctx workflow.Context) (*iam.ListGroupPoliciesOutput, error) {
	var output iam.ListGroupPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListGroupsFuture struct {
	Future workflow.Future
}

func (r *IamListGroupsFuture) Get(ctx workflow.Context) (*iam.ListGroupsOutput, error) {
	var output iam.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListGroupsForUserFuture struct {
	Future workflow.Future
}

func (r *IamListGroupsForUserFuture) Get(ctx workflow.Context) (*iam.ListGroupsForUserOutput, error) {
	var output iam.ListGroupsForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListInstanceProfilesFuture struct {
	Future workflow.Future
}

func (r *IamListInstanceProfilesFuture) Get(ctx workflow.Context) (*iam.ListInstanceProfilesOutput, error) {
	var output iam.ListInstanceProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListInstanceProfilesForRoleFuture struct {
	Future workflow.Future
}

func (r *IamListInstanceProfilesForRoleFuture) Get(ctx workflow.Context) (*iam.ListInstanceProfilesForRoleOutput, error) {
	var output iam.ListInstanceProfilesForRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListMFADevicesFuture struct {
	Future workflow.Future
}

func (r *IamListMFADevicesFuture) Get(ctx workflow.Context) (*iam.ListMFADevicesOutput, error) {
	var output iam.ListMFADevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListOpenIDConnectProvidersFuture struct {
	Future workflow.Future
}

func (r *IamListOpenIDConnectProvidersFuture) Get(ctx workflow.Context) (*iam.ListOpenIDConnectProvidersOutput, error) {
	var output iam.ListOpenIDConnectProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListPoliciesFuture struct {
	Future workflow.Future
}

func (r *IamListPoliciesFuture) Get(ctx workflow.Context) (*iam.ListPoliciesOutput, error) {
	var output iam.ListPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListPoliciesGrantingServiceAccessFuture struct {
	Future workflow.Future
}

func (r *IamListPoliciesGrantingServiceAccessFuture) Get(ctx workflow.Context) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	var output iam.ListPoliciesGrantingServiceAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListPolicyVersionsFuture struct {
	Future workflow.Future
}

func (r *IamListPolicyVersionsFuture) Get(ctx workflow.Context) (*iam.ListPolicyVersionsOutput, error) {
	var output iam.ListPolicyVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListRolePoliciesFuture struct {
	Future workflow.Future
}

func (r *IamListRolePoliciesFuture) Get(ctx workflow.Context) (*iam.ListRolePoliciesOutput, error) {
	var output iam.ListRolePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListRoleTagsFuture struct {
	Future workflow.Future
}

func (r *IamListRoleTagsFuture) Get(ctx workflow.Context) (*iam.ListRoleTagsOutput, error) {
	var output iam.ListRoleTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListRolesFuture struct {
	Future workflow.Future
}

func (r *IamListRolesFuture) Get(ctx workflow.Context) (*iam.ListRolesOutput, error) {
	var output iam.ListRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListSAMLProvidersFuture struct {
	Future workflow.Future
}

func (r *IamListSAMLProvidersFuture) Get(ctx workflow.Context) (*iam.ListSAMLProvidersOutput, error) {
	var output iam.ListSAMLProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListSSHPublicKeysFuture struct {
	Future workflow.Future
}

func (r *IamListSSHPublicKeysFuture) Get(ctx workflow.Context) (*iam.ListSSHPublicKeysOutput, error) {
	var output iam.ListSSHPublicKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListServerCertificatesFuture struct {
	Future workflow.Future
}

func (r *IamListServerCertificatesFuture) Get(ctx workflow.Context) (*iam.ListServerCertificatesOutput, error) {
	var output iam.ListServerCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListServiceSpecificCredentialsFuture struct {
	Future workflow.Future
}

func (r *IamListServiceSpecificCredentialsFuture) Get(ctx workflow.Context) (*iam.ListServiceSpecificCredentialsOutput, error) {
	var output iam.ListServiceSpecificCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListSigningCertificatesFuture struct {
	Future workflow.Future
}

func (r *IamListSigningCertificatesFuture) Get(ctx workflow.Context) (*iam.ListSigningCertificatesOutput, error) {
	var output iam.ListSigningCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListUserPoliciesFuture struct {
	Future workflow.Future
}

func (r *IamListUserPoliciesFuture) Get(ctx workflow.Context) (*iam.ListUserPoliciesOutput, error) {
	var output iam.ListUserPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListUserTagsFuture struct {
	Future workflow.Future
}

func (r *IamListUserTagsFuture) Get(ctx workflow.Context) (*iam.ListUserTagsOutput, error) {
	var output iam.ListUserTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListUsersFuture struct {
	Future workflow.Future
}

func (r *IamListUsersFuture) Get(ctx workflow.Context) (*iam.ListUsersOutput, error) {
	var output iam.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamListVirtualMFADevicesFuture struct {
	Future workflow.Future
}

func (r *IamListVirtualMFADevicesFuture) Get(ctx workflow.Context) (*iam.ListVirtualMFADevicesOutput, error) {
	var output iam.ListVirtualMFADevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamPutGroupPolicyFuture struct {
	Future workflow.Future
}

func (r *IamPutGroupPolicyFuture) Get(ctx workflow.Context) (*iam.PutGroupPolicyOutput, error) {
	var output iam.PutGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamPutRolePermissionsBoundaryFuture struct {
	Future workflow.Future
}

func (r *IamPutRolePermissionsBoundaryFuture) Get(ctx workflow.Context) (*iam.PutRolePermissionsBoundaryOutput, error) {
	var output iam.PutRolePermissionsBoundaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamPutRolePolicyFuture struct {
	Future workflow.Future
}

func (r *IamPutRolePolicyFuture) Get(ctx workflow.Context) (*iam.PutRolePolicyOutput, error) {
	var output iam.PutRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamPutUserPermissionsBoundaryFuture struct {
	Future workflow.Future
}

func (r *IamPutUserPermissionsBoundaryFuture) Get(ctx workflow.Context) (*iam.PutUserPermissionsBoundaryOutput, error) {
	var output iam.PutUserPermissionsBoundaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamPutUserPolicyFuture struct {
	Future workflow.Future
}

func (r *IamPutUserPolicyFuture) Get(ctx workflow.Context) (*iam.PutUserPolicyOutput, error) {
	var output iam.PutUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamRemoveClientIDFromOpenIDConnectProviderFuture struct {
	Future workflow.Future
}

func (r *IamRemoveClientIDFromOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	var output iam.RemoveClientIDFromOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamRemoveRoleFromInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *IamRemoveRoleFromInstanceProfileFuture) Get(ctx workflow.Context) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	var output iam.RemoveRoleFromInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamRemoveUserFromGroupFuture struct {
	Future workflow.Future
}

func (r *IamRemoveUserFromGroupFuture) Get(ctx workflow.Context) (*iam.RemoveUserFromGroupOutput, error) {
	var output iam.RemoveUserFromGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamResetServiceSpecificCredentialFuture struct {
	Future workflow.Future
}

func (r *IamResetServiceSpecificCredentialFuture) Get(ctx workflow.Context) (*iam.ResetServiceSpecificCredentialOutput, error) {
	var output iam.ResetServiceSpecificCredentialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamResyncMFADeviceFuture struct {
	Future workflow.Future
}

func (r *IamResyncMFADeviceFuture) Get(ctx workflow.Context) (*iam.ResyncMFADeviceOutput, error) {
	var output iam.ResyncMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamSetDefaultPolicyVersionFuture struct {
	Future workflow.Future
}

func (r *IamSetDefaultPolicyVersionFuture) Get(ctx workflow.Context) (*iam.SetDefaultPolicyVersionOutput, error) {
	var output iam.SetDefaultPolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamSetSecurityTokenServicePreferencesFuture struct {
	Future workflow.Future
}

func (r *IamSetSecurityTokenServicePreferencesFuture) Get(ctx workflow.Context) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	var output iam.SetSecurityTokenServicePreferencesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamSimulateCustomPolicyFuture struct {
	Future workflow.Future
}

func (r *IamSimulateCustomPolicyFuture) Get(ctx workflow.Context) (*iam.SimulatePolicyResponse, error) {
	var output iam.SimulatePolicyResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamSimulatePrincipalPolicyFuture struct {
	Future workflow.Future
}

func (r *IamSimulatePrincipalPolicyFuture) Get(ctx workflow.Context) (*iam.SimulatePolicyResponse, error) {
	var output iam.SimulatePolicyResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamTagRoleFuture struct {
	Future workflow.Future
}

func (r *IamTagRoleFuture) Get(ctx workflow.Context) (*iam.TagRoleOutput, error) {
	var output iam.TagRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamTagUserFuture struct {
	Future workflow.Future
}

func (r *IamTagUserFuture) Get(ctx workflow.Context) (*iam.TagUserOutput, error) {
	var output iam.TagUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUntagRoleFuture struct {
	Future workflow.Future
}

func (r *IamUntagRoleFuture) Get(ctx workflow.Context) (*iam.UntagRoleOutput, error) {
	var output iam.UntagRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUntagUserFuture struct {
	Future workflow.Future
}

func (r *IamUntagUserFuture) Get(ctx workflow.Context) (*iam.UntagUserOutput, error) {
	var output iam.UntagUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateAccessKeyFuture struct {
	Future workflow.Future
}

func (r *IamUpdateAccessKeyFuture) Get(ctx workflow.Context) (*iam.UpdateAccessKeyOutput, error) {
	var output iam.UpdateAccessKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateAccountPasswordPolicyFuture struct {
	Future workflow.Future
}

func (r *IamUpdateAccountPasswordPolicyFuture) Get(ctx workflow.Context) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	var output iam.UpdateAccountPasswordPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateAssumeRolePolicyFuture struct {
	Future workflow.Future
}

func (r *IamUpdateAssumeRolePolicyFuture) Get(ctx workflow.Context) (*iam.UpdateAssumeRolePolicyOutput, error) {
	var output iam.UpdateAssumeRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateGroupFuture struct {
	Future workflow.Future
}

func (r *IamUpdateGroupFuture) Get(ctx workflow.Context) (*iam.UpdateGroupOutput, error) {
	var output iam.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateLoginProfileFuture struct {
	Future workflow.Future
}

func (r *IamUpdateLoginProfileFuture) Get(ctx workflow.Context) (*iam.UpdateLoginProfileOutput, error) {
	var output iam.UpdateLoginProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateOpenIDConnectProviderThumbprintFuture struct {
	Future workflow.Future
}

func (r *IamUpdateOpenIDConnectProviderThumbprintFuture) Get(ctx workflow.Context) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	var output iam.UpdateOpenIDConnectProviderThumbprintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateRoleFuture struct {
	Future workflow.Future
}

func (r *IamUpdateRoleFuture) Get(ctx workflow.Context) (*iam.UpdateRoleOutput, error) {
	var output iam.UpdateRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateRoleDescriptionFuture struct {
	Future workflow.Future
}

func (r *IamUpdateRoleDescriptionFuture) Get(ctx workflow.Context) (*iam.UpdateRoleDescriptionOutput, error) {
	var output iam.UpdateRoleDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateSAMLProviderFuture struct {
	Future workflow.Future
}

func (r *IamUpdateSAMLProviderFuture) Get(ctx workflow.Context) (*iam.UpdateSAMLProviderOutput, error) {
	var output iam.UpdateSAMLProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateSSHPublicKeyFuture struct {
	Future workflow.Future
}

func (r *IamUpdateSSHPublicKeyFuture) Get(ctx workflow.Context) (*iam.UpdateSSHPublicKeyOutput, error) {
	var output iam.UpdateSSHPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateServerCertificateFuture struct {
	Future workflow.Future
}

func (r *IamUpdateServerCertificateFuture) Get(ctx workflow.Context) (*iam.UpdateServerCertificateOutput, error) {
	var output iam.UpdateServerCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateServiceSpecificCredentialFuture struct {
	Future workflow.Future
}

func (r *IamUpdateServiceSpecificCredentialFuture) Get(ctx workflow.Context) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	var output iam.UpdateServiceSpecificCredentialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateSigningCertificateFuture struct {
	Future workflow.Future
}

func (r *IamUpdateSigningCertificateFuture) Get(ctx workflow.Context) (*iam.UpdateSigningCertificateOutput, error) {
	var output iam.UpdateSigningCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUpdateUserFuture struct {
	Future workflow.Future
}

func (r *IamUpdateUserFuture) Get(ctx workflow.Context) (*iam.UpdateUserOutput, error) {
	var output iam.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUploadSSHPublicKeyFuture struct {
	Future workflow.Future
}

func (r *IamUploadSSHPublicKeyFuture) Get(ctx workflow.Context) (*iam.UploadSSHPublicKeyOutput, error) {
	var output iam.UploadSSHPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUploadServerCertificateFuture struct {
	Future workflow.Future
}

func (r *IamUploadServerCertificateFuture) Get(ctx workflow.Context) (*iam.UploadServerCertificateOutput, error) {
	var output iam.UploadServerCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IamUploadSigningCertificateFuture struct {
	Future workflow.Future
}

func (r *IamUploadSigningCertificateFuture) Get(ctx workflow.Context) (*iam.UploadSigningCertificateOutput, error) {
	var output iam.UploadSigningCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AddClientIDToOpenIDConnectProvider(ctx workflow.Context, input *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	var output iam.AddClientIDToOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.AddClientIDToOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AddClientIDToOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.AddClientIDToOpenIDConnectProviderInput) *IamAddClientIDToOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.AddClientIDToOpenIDConnectProvider", input)
	return &IamAddClientIDToOpenIDConnectProviderFuture{Future: future}
}

func (a *IAMStub) AddRoleToInstanceProfile(ctx workflow.Context, input *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error) {
	var output iam.AddRoleToInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.AddRoleToInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AddRoleToInstanceProfileAsync(ctx workflow.Context, input *iam.AddRoleToInstanceProfileInput) *IamAddRoleToInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.AddRoleToInstanceProfile", input)
	return &IamAddRoleToInstanceProfileFuture{Future: future}
}

func (a *IAMStub) AddUserToGroup(ctx workflow.Context, input *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error) {
	var output iam.AddUserToGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.AddUserToGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AddUserToGroupAsync(ctx workflow.Context, input *iam.AddUserToGroupInput) *IamAddUserToGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.AddUserToGroup", input)
	return &IamAddUserToGroupFuture{Future: future}
}

func (a *IAMStub) AttachGroupPolicy(ctx workflow.Context, input *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error) {
	var output iam.AttachGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.AttachGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AttachGroupPolicyAsync(ctx workflow.Context, input *iam.AttachGroupPolicyInput) *IamAttachGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.AttachGroupPolicy", input)
	return &IamAttachGroupPolicyFuture{Future: future}
}

func (a *IAMStub) AttachRolePolicy(ctx workflow.Context, input *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error) {
	var output iam.AttachRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.AttachRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AttachRolePolicyAsync(ctx workflow.Context, input *iam.AttachRolePolicyInput) *IamAttachRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.AttachRolePolicy", input)
	return &IamAttachRolePolicyFuture{Future: future}
}

func (a *IAMStub) AttachUserPolicy(ctx workflow.Context, input *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error) {
	var output iam.AttachUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.AttachUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) AttachUserPolicyAsync(ctx workflow.Context, input *iam.AttachUserPolicyInput) *IamAttachUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.AttachUserPolicy", input)
	return &IamAttachUserPolicyFuture{Future: future}
}

func (a *IAMStub) ChangePassword(ctx workflow.Context, input *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error) {
	var output iam.ChangePasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ChangePassword", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ChangePasswordAsync(ctx workflow.Context, input *iam.ChangePasswordInput) *IamChangePasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ChangePassword", input)
	return &IamChangePasswordFuture{Future: future}
}

func (a *IAMStub) CreateAccessKey(ctx workflow.Context, input *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error) {
	var output iam.CreateAccessKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateAccessKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateAccessKeyAsync(ctx workflow.Context, input *iam.CreateAccessKeyInput) *IamCreateAccessKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateAccessKey", input)
	return &IamCreateAccessKeyFuture{Future: future}
}

func (a *IAMStub) CreateAccountAlias(ctx workflow.Context, input *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error) {
	var output iam.CreateAccountAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateAccountAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateAccountAliasAsync(ctx workflow.Context, input *iam.CreateAccountAliasInput) *IamCreateAccountAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateAccountAlias", input)
	return &IamCreateAccountAliasFuture{Future: future}
}

func (a *IAMStub) CreateGroup(ctx workflow.Context, input *iam.CreateGroupInput) (*iam.CreateGroupOutput, error) {
	var output iam.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateGroupAsync(ctx workflow.Context, input *iam.CreateGroupInput) *IamCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateGroup", input)
	return &IamCreateGroupFuture{Future: future}
}

func (a *IAMStub) CreateInstanceProfile(ctx workflow.Context, input *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error) {
	var output iam.CreateInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateInstanceProfileAsync(ctx workflow.Context, input *iam.CreateInstanceProfileInput) *IamCreateInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateInstanceProfile", input)
	return &IamCreateInstanceProfileFuture{Future: future}
}

func (a *IAMStub) CreateLoginProfile(ctx workflow.Context, input *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error) {
	var output iam.CreateLoginProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateLoginProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateLoginProfileAsync(ctx workflow.Context, input *iam.CreateLoginProfileInput) *IamCreateLoginProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateLoginProfile", input)
	return &IamCreateLoginProfileFuture{Future: future}
}

func (a *IAMStub) CreateOpenIDConnectProvider(ctx workflow.Context, input *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error) {
	var output iam.CreateOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.CreateOpenIDConnectProviderInput) *IamCreateOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateOpenIDConnectProvider", input)
	return &IamCreateOpenIDConnectProviderFuture{Future: future}
}

func (a *IAMStub) CreatePolicy(ctx workflow.Context, input *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error) {
	var output iam.CreatePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreatePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreatePolicyAsync(ctx workflow.Context, input *iam.CreatePolicyInput) *IamCreatePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreatePolicy", input)
	return &IamCreatePolicyFuture{Future: future}
}

func (a *IAMStub) CreatePolicyVersion(ctx workflow.Context, input *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error) {
	var output iam.CreatePolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreatePolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreatePolicyVersionAsync(ctx workflow.Context, input *iam.CreatePolicyVersionInput) *IamCreatePolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreatePolicyVersion", input)
	return &IamCreatePolicyVersionFuture{Future: future}
}

func (a *IAMStub) CreateRole(ctx workflow.Context, input *iam.CreateRoleInput) (*iam.CreateRoleOutput, error) {
	var output iam.CreateRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateRoleAsync(ctx workflow.Context, input *iam.CreateRoleInput) *IamCreateRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateRole", input)
	return &IamCreateRoleFuture{Future: future}
}

func (a *IAMStub) CreateSAMLProvider(ctx workflow.Context, input *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error) {
	var output iam.CreateSAMLProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateSAMLProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateSAMLProviderAsync(ctx workflow.Context, input *iam.CreateSAMLProviderInput) *IamCreateSAMLProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateSAMLProvider", input)
	return &IamCreateSAMLProviderFuture{Future: future}
}

func (a *IAMStub) CreateServiceLinkedRole(ctx workflow.Context, input *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error) {
	var output iam.CreateServiceLinkedRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateServiceLinkedRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateServiceLinkedRoleAsync(ctx workflow.Context, input *iam.CreateServiceLinkedRoleInput) *IamCreateServiceLinkedRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateServiceLinkedRole", input)
	return &IamCreateServiceLinkedRoleFuture{Future: future}
}

func (a *IAMStub) CreateServiceSpecificCredential(ctx workflow.Context, input *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error) {
	var output iam.CreateServiceSpecificCredentialOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateServiceSpecificCredential", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.CreateServiceSpecificCredentialInput) *IamCreateServiceSpecificCredentialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateServiceSpecificCredential", input)
	return &IamCreateServiceSpecificCredentialFuture{Future: future}
}

func (a *IAMStub) CreateUser(ctx workflow.Context, input *iam.CreateUserInput) (*iam.CreateUserOutput, error) {
	var output iam.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateUserAsync(ctx workflow.Context, input *iam.CreateUserInput) *IamCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateUser", input)
	return &IamCreateUserFuture{Future: future}
}

func (a *IAMStub) CreateVirtualMFADevice(ctx workflow.Context, input *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error) {
	var output iam.CreateVirtualMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.CreateVirtualMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) CreateVirtualMFADeviceAsync(ctx workflow.Context, input *iam.CreateVirtualMFADeviceInput) *IamCreateVirtualMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.CreateVirtualMFADevice", input)
	return &IamCreateVirtualMFADeviceFuture{Future: future}
}

func (a *IAMStub) DeactivateMFADevice(ctx workflow.Context, input *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error) {
	var output iam.DeactivateMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeactivateMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeactivateMFADeviceAsync(ctx workflow.Context, input *iam.DeactivateMFADeviceInput) *IamDeactivateMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeactivateMFADevice", input)
	return &IamDeactivateMFADeviceFuture{Future: future}
}

func (a *IAMStub) DeleteAccessKey(ctx workflow.Context, input *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error) {
	var output iam.DeleteAccessKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteAccessKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteAccessKeyAsync(ctx workflow.Context, input *iam.DeleteAccessKeyInput) *IamDeleteAccessKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteAccessKey", input)
	return &IamDeleteAccessKeyFuture{Future: future}
}

func (a *IAMStub) DeleteAccountAlias(ctx workflow.Context, input *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error) {
	var output iam.DeleteAccountAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteAccountAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteAccountAliasAsync(ctx workflow.Context, input *iam.DeleteAccountAliasInput) *IamDeleteAccountAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteAccountAlias", input)
	return &IamDeleteAccountAliasFuture{Future: future}
}

func (a *IAMStub) DeleteAccountPasswordPolicy(ctx workflow.Context, input *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	var output iam.DeleteAccountPasswordPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteAccountPasswordPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.DeleteAccountPasswordPolicyInput) *IamDeleteAccountPasswordPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteAccountPasswordPolicy", input)
	return &IamDeleteAccountPasswordPolicyFuture{Future: future}
}

func (a *IAMStub) DeleteGroup(ctx workflow.Context, input *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error) {
	var output iam.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteGroupAsync(ctx workflow.Context, input *iam.DeleteGroupInput) *IamDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteGroup", input)
	return &IamDeleteGroupFuture{Future: future}
}

func (a *IAMStub) DeleteGroupPolicy(ctx workflow.Context, input *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error) {
	var output iam.DeleteGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteGroupPolicyAsync(ctx workflow.Context, input *iam.DeleteGroupPolicyInput) *IamDeleteGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteGroupPolicy", input)
	return &IamDeleteGroupPolicyFuture{Future: future}
}

func (a *IAMStub) DeleteInstanceProfile(ctx workflow.Context, input *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error) {
	var output iam.DeleteInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteInstanceProfileAsync(ctx workflow.Context, input *iam.DeleteInstanceProfileInput) *IamDeleteInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteInstanceProfile", input)
	return &IamDeleteInstanceProfileFuture{Future: future}
}

func (a *IAMStub) DeleteLoginProfile(ctx workflow.Context, input *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error) {
	var output iam.DeleteLoginProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteLoginProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteLoginProfileAsync(ctx workflow.Context, input *iam.DeleteLoginProfileInput) *IamDeleteLoginProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteLoginProfile", input)
	return &IamDeleteLoginProfileFuture{Future: future}
}

func (a *IAMStub) DeleteOpenIDConnectProvider(ctx workflow.Context, input *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	var output iam.DeleteOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.DeleteOpenIDConnectProviderInput) *IamDeleteOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteOpenIDConnectProvider", input)
	return &IamDeleteOpenIDConnectProviderFuture{Future: future}
}

func (a *IAMStub) DeletePolicy(ctx workflow.Context, input *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error) {
	var output iam.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeletePolicyAsync(ctx workflow.Context, input *iam.DeletePolicyInput) *IamDeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeletePolicy", input)
	return &IamDeletePolicyFuture{Future: future}
}

func (a *IAMStub) DeletePolicyVersion(ctx workflow.Context, input *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error) {
	var output iam.DeletePolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeletePolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeletePolicyVersionAsync(ctx workflow.Context, input *iam.DeletePolicyVersionInput) *IamDeletePolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeletePolicyVersion", input)
	return &IamDeletePolicyVersionFuture{Future: future}
}

func (a *IAMStub) DeleteRole(ctx workflow.Context, input *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error) {
	var output iam.DeleteRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteRoleAsync(ctx workflow.Context, input *iam.DeleteRoleInput) *IamDeleteRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteRole", input)
	return &IamDeleteRoleFuture{Future: future}
}

func (a *IAMStub) DeleteRolePermissionsBoundary(ctx workflow.Context, input *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	var output iam.DeleteRolePermissionsBoundaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteRolePermissionsBoundary", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteRolePermissionsBoundaryAsync(ctx workflow.Context, input *iam.DeleteRolePermissionsBoundaryInput) *IamDeleteRolePermissionsBoundaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteRolePermissionsBoundary", input)
	return &IamDeleteRolePermissionsBoundaryFuture{Future: future}
}

func (a *IAMStub) DeleteRolePolicy(ctx workflow.Context, input *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error) {
	var output iam.DeleteRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteRolePolicyAsync(ctx workflow.Context, input *iam.DeleteRolePolicyInput) *IamDeleteRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteRolePolicy", input)
	return &IamDeleteRolePolicyFuture{Future: future}
}

func (a *IAMStub) DeleteSAMLProvider(ctx workflow.Context, input *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error) {
	var output iam.DeleteSAMLProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteSAMLProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteSAMLProviderAsync(ctx workflow.Context, input *iam.DeleteSAMLProviderInput) *IamDeleteSAMLProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteSAMLProvider", input)
	return &IamDeleteSAMLProviderFuture{Future: future}
}

func (a *IAMStub) DeleteSSHPublicKey(ctx workflow.Context, input *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error) {
	var output iam.DeleteSSHPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteSSHPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteSSHPublicKeyAsync(ctx workflow.Context, input *iam.DeleteSSHPublicKeyInput) *IamDeleteSSHPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteSSHPublicKey", input)
	return &IamDeleteSSHPublicKeyFuture{Future: future}
}

func (a *IAMStub) DeleteServerCertificate(ctx workflow.Context, input *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error) {
	var output iam.DeleteServerCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteServerCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteServerCertificateAsync(ctx workflow.Context, input *iam.DeleteServerCertificateInput) *IamDeleteServerCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteServerCertificate", input)
	return &IamDeleteServerCertificateFuture{Future: future}
}

func (a *IAMStub) DeleteServiceLinkedRole(ctx workflow.Context, input *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error) {
	var output iam.DeleteServiceLinkedRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteServiceLinkedRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteServiceLinkedRoleAsync(ctx workflow.Context, input *iam.DeleteServiceLinkedRoleInput) *IamDeleteServiceLinkedRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteServiceLinkedRole", input)
	return &IamDeleteServiceLinkedRoleFuture{Future: future}
}

func (a *IAMStub) DeleteServiceSpecificCredential(ctx workflow.Context, input *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	var output iam.DeleteServiceSpecificCredentialOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteServiceSpecificCredential", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.DeleteServiceSpecificCredentialInput) *IamDeleteServiceSpecificCredentialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteServiceSpecificCredential", input)
	return &IamDeleteServiceSpecificCredentialFuture{Future: future}
}

func (a *IAMStub) DeleteSigningCertificate(ctx workflow.Context, input *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error) {
	var output iam.DeleteSigningCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteSigningCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteSigningCertificateAsync(ctx workflow.Context, input *iam.DeleteSigningCertificateInput) *IamDeleteSigningCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteSigningCertificate", input)
	return &IamDeleteSigningCertificateFuture{Future: future}
}

func (a *IAMStub) DeleteUser(ctx workflow.Context, input *iam.DeleteUserInput) (*iam.DeleteUserOutput, error) {
	var output iam.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteUserAsync(ctx workflow.Context, input *iam.DeleteUserInput) *IamDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteUser", input)
	return &IamDeleteUserFuture{Future: future}
}

func (a *IAMStub) DeleteUserPermissionsBoundary(ctx workflow.Context, input *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	var output iam.DeleteUserPermissionsBoundaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteUserPermissionsBoundary", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteUserPermissionsBoundaryAsync(ctx workflow.Context, input *iam.DeleteUserPermissionsBoundaryInput) *IamDeleteUserPermissionsBoundaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteUserPermissionsBoundary", input)
	return &IamDeleteUserPermissionsBoundaryFuture{Future: future}
}

func (a *IAMStub) DeleteUserPolicy(ctx workflow.Context, input *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error) {
	var output iam.DeleteUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteUserPolicyAsync(ctx workflow.Context, input *iam.DeleteUserPolicyInput) *IamDeleteUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteUserPolicy", input)
	return &IamDeleteUserPolicyFuture{Future: future}
}

func (a *IAMStub) DeleteVirtualMFADevice(ctx workflow.Context, input *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error) {
	var output iam.DeleteVirtualMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DeleteVirtualMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DeleteVirtualMFADeviceAsync(ctx workflow.Context, input *iam.DeleteVirtualMFADeviceInput) *IamDeleteVirtualMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DeleteVirtualMFADevice", input)
	return &IamDeleteVirtualMFADeviceFuture{Future: future}
}

func (a *IAMStub) DetachGroupPolicy(ctx workflow.Context, input *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error) {
	var output iam.DetachGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DetachGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DetachGroupPolicyAsync(ctx workflow.Context, input *iam.DetachGroupPolicyInput) *IamDetachGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DetachGroupPolicy", input)
	return &IamDetachGroupPolicyFuture{Future: future}
}

func (a *IAMStub) DetachRolePolicy(ctx workflow.Context, input *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error) {
	var output iam.DetachRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DetachRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DetachRolePolicyAsync(ctx workflow.Context, input *iam.DetachRolePolicyInput) *IamDetachRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DetachRolePolicy", input)
	return &IamDetachRolePolicyFuture{Future: future}
}

func (a *IAMStub) DetachUserPolicy(ctx workflow.Context, input *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error) {
	var output iam.DetachUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.DetachUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) DetachUserPolicyAsync(ctx workflow.Context, input *iam.DetachUserPolicyInput) *IamDetachUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.DetachUserPolicy", input)
	return &IamDetachUserPolicyFuture{Future: future}
}

func (a *IAMStub) EnableMFADevice(ctx workflow.Context, input *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error) {
	var output iam.EnableMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.EnableMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) EnableMFADeviceAsync(ctx workflow.Context, input *iam.EnableMFADeviceInput) *IamEnableMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.EnableMFADevice", input)
	return &IamEnableMFADeviceFuture{Future: future}
}

func (a *IAMStub) GenerateCredentialReport(ctx workflow.Context, input *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error) {
	var output iam.GenerateCredentialReportOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GenerateCredentialReport", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GenerateCredentialReportAsync(ctx workflow.Context, input *iam.GenerateCredentialReportInput) *IamGenerateCredentialReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GenerateCredentialReport", input)
	return &IamGenerateCredentialReportFuture{Future: future}
}

func (a *IAMStub) GenerateOrganizationsAccessReport(ctx workflow.Context, input *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	var output iam.GenerateOrganizationsAccessReportOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GenerateOrganizationsAccessReport", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GenerateOrganizationsAccessReportAsync(ctx workflow.Context, input *iam.GenerateOrganizationsAccessReportInput) *IamGenerateOrganizationsAccessReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GenerateOrganizationsAccessReport", input)
	return &IamGenerateOrganizationsAccessReportFuture{Future: future}
}

func (a *IAMStub) GenerateServiceLastAccessedDetails(ctx workflow.Context, input *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	var output iam.GenerateServiceLastAccessedDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GenerateServiceLastAccessedDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GenerateServiceLastAccessedDetailsAsync(ctx workflow.Context, input *iam.GenerateServiceLastAccessedDetailsInput) *IamGenerateServiceLastAccessedDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GenerateServiceLastAccessedDetails", input)
	return &IamGenerateServiceLastAccessedDetailsFuture{Future: future}
}

func (a *IAMStub) GetAccessKeyLastUsed(ctx workflow.Context, input *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error) {
	var output iam.GetAccessKeyLastUsedOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetAccessKeyLastUsed", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetAccessKeyLastUsedAsync(ctx workflow.Context, input *iam.GetAccessKeyLastUsedInput) *IamGetAccessKeyLastUsedFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetAccessKeyLastUsed", input)
	return &IamGetAccessKeyLastUsedFuture{Future: future}
}

func (a *IAMStub) GetAccountAuthorizationDetails(ctx workflow.Context, input *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	var output iam.GetAccountAuthorizationDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetAccountAuthorizationDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetAccountAuthorizationDetailsAsync(ctx workflow.Context, input *iam.GetAccountAuthorizationDetailsInput) *IamGetAccountAuthorizationDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetAccountAuthorizationDetails", input)
	return &IamGetAccountAuthorizationDetailsFuture{Future: future}
}

func (a *IAMStub) GetAccountPasswordPolicy(ctx workflow.Context, input *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error) {
	var output iam.GetAccountPasswordPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetAccountPasswordPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.GetAccountPasswordPolicyInput) *IamGetAccountPasswordPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetAccountPasswordPolicy", input)
	return &IamGetAccountPasswordPolicyFuture{Future: future}
}

func (a *IAMStub) GetAccountSummary(ctx workflow.Context, input *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error) {
	var output iam.GetAccountSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetAccountSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetAccountSummaryAsync(ctx workflow.Context, input *iam.GetAccountSummaryInput) *IamGetAccountSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetAccountSummary", input)
	return &IamGetAccountSummaryFuture{Future: future}
}

func (a *IAMStub) GetContextKeysForCustomPolicy(ctx workflow.Context, input *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	var output iam.GetContextKeysForPolicyResponse
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetContextKeysForCustomPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetContextKeysForCustomPolicyAsync(ctx workflow.Context, input *iam.GetContextKeysForCustomPolicyInput) *IamGetContextKeysForCustomPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetContextKeysForCustomPolicy", input)
	return &IamGetContextKeysForCustomPolicyFuture{Future: future}
}

func (a *IAMStub) GetContextKeysForPrincipalPolicy(ctx workflow.Context, input *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	var output iam.GetContextKeysForPolicyResponse
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetContextKeysForPrincipalPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetContextKeysForPrincipalPolicyAsync(ctx workflow.Context, input *iam.GetContextKeysForPrincipalPolicyInput) *IamGetContextKeysForPrincipalPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetContextKeysForPrincipalPolicy", input)
	return &IamGetContextKeysForPrincipalPolicyFuture{Future: future}
}

func (a *IAMStub) GetCredentialReport(ctx workflow.Context, input *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error) {
	var output iam.GetCredentialReportOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetCredentialReport", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetCredentialReportAsync(ctx workflow.Context, input *iam.GetCredentialReportInput) *IamGetCredentialReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetCredentialReport", input)
	return &IamGetCredentialReportFuture{Future: future}
}

func (a *IAMStub) GetGroup(ctx workflow.Context, input *iam.GetGroupInput) (*iam.GetGroupOutput, error) {
	var output iam.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetGroupAsync(ctx workflow.Context, input *iam.GetGroupInput) *IamGetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetGroup", input)
	return &IamGetGroupFuture{Future: future}
}

func (a *IAMStub) GetGroupPolicy(ctx workflow.Context, input *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error) {
	var output iam.GetGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetGroupPolicyAsync(ctx workflow.Context, input *iam.GetGroupPolicyInput) *IamGetGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetGroupPolicy", input)
	return &IamGetGroupPolicyFuture{Future: future}
}

func (a *IAMStub) GetInstanceProfile(ctx workflow.Context, input *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error) {
	var output iam.GetInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetInstanceProfileAsync(ctx workflow.Context, input *iam.GetInstanceProfileInput) *IamGetInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetInstanceProfile", input)
	return &IamGetInstanceProfileFuture{Future: future}
}

func (a *IAMStub) GetLoginProfile(ctx workflow.Context, input *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error) {
	var output iam.GetLoginProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetLoginProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetLoginProfileAsync(ctx workflow.Context, input *iam.GetLoginProfileInput) *IamGetLoginProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetLoginProfile", input)
	return &IamGetLoginProfileFuture{Future: future}
}

func (a *IAMStub) GetOpenIDConnectProvider(ctx workflow.Context, input *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error) {
	var output iam.GetOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.GetOpenIDConnectProviderInput) *IamGetOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetOpenIDConnectProvider", input)
	return &IamGetOpenIDConnectProviderFuture{Future: future}
}

func (a *IAMStub) GetOrganizationsAccessReport(ctx workflow.Context, input *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error) {
	var output iam.GetOrganizationsAccessReportOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetOrganizationsAccessReport", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetOrganizationsAccessReportAsync(ctx workflow.Context, input *iam.GetOrganizationsAccessReportInput) *IamGetOrganizationsAccessReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetOrganizationsAccessReport", input)
	return &IamGetOrganizationsAccessReportFuture{Future: future}
}

func (a *IAMStub) GetPolicy(ctx workflow.Context, input *iam.GetPolicyInput) (*iam.GetPolicyOutput, error) {
	var output iam.GetPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetPolicyAsync(ctx workflow.Context, input *iam.GetPolicyInput) *IamGetPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetPolicy", input)
	return &IamGetPolicyFuture{Future: future}
}

func (a *IAMStub) GetPolicyVersion(ctx workflow.Context, input *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error) {
	var output iam.GetPolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetPolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetPolicyVersionAsync(ctx workflow.Context, input *iam.GetPolicyVersionInput) *IamGetPolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetPolicyVersion", input)
	return &IamGetPolicyVersionFuture{Future: future}
}

func (a *IAMStub) GetRole(ctx workflow.Context, input *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
	var output iam.GetRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetRoleAsync(ctx workflow.Context, input *iam.GetRoleInput) *IamGetRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetRole", input)
	return &IamGetRoleFuture{Future: future}
}

func (a *IAMStub) GetRolePolicy(ctx workflow.Context, input *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error) {
	var output iam.GetRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetRolePolicyAsync(ctx workflow.Context, input *iam.GetRolePolicyInput) *IamGetRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetRolePolicy", input)
	return &IamGetRolePolicyFuture{Future: future}
}

func (a *IAMStub) GetSAMLProvider(ctx workflow.Context, input *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error) {
	var output iam.GetSAMLProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetSAMLProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetSAMLProviderAsync(ctx workflow.Context, input *iam.GetSAMLProviderInput) *IamGetSAMLProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetSAMLProvider", input)
	return &IamGetSAMLProviderFuture{Future: future}
}

func (a *IAMStub) GetSSHPublicKey(ctx workflow.Context, input *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error) {
	var output iam.GetSSHPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetSSHPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetSSHPublicKeyAsync(ctx workflow.Context, input *iam.GetSSHPublicKeyInput) *IamGetSSHPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetSSHPublicKey", input)
	return &IamGetSSHPublicKeyFuture{Future: future}
}

func (a *IAMStub) GetServerCertificate(ctx workflow.Context, input *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error) {
	var output iam.GetServerCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetServerCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetServerCertificateAsync(ctx workflow.Context, input *iam.GetServerCertificateInput) *IamGetServerCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetServerCertificate", input)
	return &IamGetServerCertificateFuture{Future: future}
}

func (a *IAMStub) GetServiceLastAccessedDetails(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	var output iam.GetServiceLastAccessedDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetServiceLastAccessedDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetServiceLastAccessedDetailsAsync(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsInput) *IamGetServiceLastAccessedDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetServiceLastAccessedDetails", input)
	return &IamGetServiceLastAccessedDetailsFuture{Future: future}
}

func (a *IAMStub) GetServiceLastAccessedDetailsWithEntities(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	var output iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetServiceLastAccessedDetailsWithEntities", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetServiceLastAccessedDetailsWithEntitiesAsync(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsWithEntitiesInput) *IamGetServiceLastAccessedDetailsWithEntitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetServiceLastAccessedDetailsWithEntities", input)
	return &IamGetServiceLastAccessedDetailsWithEntitiesFuture{Future: future}
}

func (a *IAMStub) GetServiceLinkedRoleDeletionStatus(ctx workflow.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	var output iam.GetServiceLinkedRoleDeletionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetServiceLinkedRoleDeletionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetServiceLinkedRoleDeletionStatusAsync(ctx workflow.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput) *IamGetServiceLinkedRoleDeletionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetServiceLinkedRoleDeletionStatus", input)
	return &IamGetServiceLinkedRoleDeletionStatusFuture{Future: future}
}

func (a *IAMStub) GetUser(ctx workflow.Context, input *iam.GetUserInput) (*iam.GetUserOutput, error) {
	var output iam.GetUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetUserAsync(ctx workflow.Context, input *iam.GetUserInput) *IamGetUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetUser", input)
	return &IamGetUserFuture{Future: future}
}

func (a *IAMStub) GetUserPolicy(ctx workflow.Context, input *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error) {
	var output iam.GetUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.GetUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) GetUserPolicyAsync(ctx workflow.Context, input *iam.GetUserPolicyInput) *IamGetUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.GetUserPolicy", input)
	return &IamGetUserPolicyFuture{Future: future}
}

func (a *IAMStub) ListAccessKeys(ctx workflow.Context, input *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error) {
	var output iam.ListAccessKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListAccessKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListAccessKeysAsync(ctx workflow.Context, input *iam.ListAccessKeysInput) *IamListAccessKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListAccessKeys", input)
	return &IamListAccessKeysFuture{Future: future}
}

func (a *IAMStub) ListAccountAliases(ctx workflow.Context, input *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error) {
	var output iam.ListAccountAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListAccountAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListAccountAliasesAsync(ctx workflow.Context, input *iam.ListAccountAliasesInput) *IamListAccountAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListAccountAliases", input)
	return &IamListAccountAliasesFuture{Future: future}
}

func (a *IAMStub) ListAttachedGroupPolicies(ctx workflow.Context, input *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error) {
	var output iam.ListAttachedGroupPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListAttachedGroupPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListAttachedGroupPoliciesAsync(ctx workflow.Context, input *iam.ListAttachedGroupPoliciesInput) *IamListAttachedGroupPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListAttachedGroupPolicies", input)
	return &IamListAttachedGroupPoliciesFuture{Future: future}
}

func (a *IAMStub) ListAttachedRolePolicies(ctx workflow.Context, input *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error) {
	var output iam.ListAttachedRolePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListAttachedRolePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListAttachedRolePoliciesAsync(ctx workflow.Context, input *iam.ListAttachedRolePoliciesInput) *IamListAttachedRolePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListAttachedRolePolicies", input)
	return &IamListAttachedRolePoliciesFuture{Future: future}
}

func (a *IAMStub) ListAttachedUserPolicies(ctx workflow.Context, input *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error) {
	var output iam.ListAttachedUserPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListAttachedUserPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListAttachedUserPoliciesAsync(ctx workflow.Context, input *iam.ListAttachedUserPoliciesInput) *IamListAttachedUserPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListAttachedUserPolicies", input)
	return &IamListAttachedUserPoliciesFuture{Future: future}
}

func (a *IAMStub) ListEntitiesForPolicy(ctx workflow.Context, input *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error) {
	var output iam.ListEntitiesForPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListEntitiesForPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListEntitiesForPolicyAsync(ctx workflow.Context, input *iam.ListEntitiesForPolicyInput) *IamListEntitiesForPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListEntitiesForPolicy", input)
	return &IamListEntitiesForPolicyFuture{Future: future}
}

func (a *IAMStub) ListGroupPolicies(ctx workflow.Context, input *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error) {
	var output iam.ListGroupPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListGroupPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListGroupPoliciesAsync(ctx workflow.Context, input *iam.ListGroupPoliciesInput) *IamListGroupPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListGroupPolicies", input)
	return &IamListGroupPoliciesFuture{Future: future}
}

func (a *IAMStub) ListGroups(ctx workflow.Context, input *iam.ListGroupsInput) (*iam.ListGroupsOutput, error) {
	var output iam.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListGroupsAsync(ctx workflow.Context, input *iam.ListGroupsInput) *IamListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListGroups", input)
	return &IamListGroupsFuture{Future: future}
}

func (a *IAMStub) ListGroupsForUser(ctx workflow.Context, input *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error) {
	var output iam.ListGroupsForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListGroupsForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListGroupsForUserAsync(ctx workflow.Context, input *iam.ListGroupsForUserInput) *IamListGroupsForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListGroupsForUser", input)
	return &IamListGroupsForUserFuture{Future: future}
}

func (a *IAMStub) ListInstanceProfiles(ctx workflow.Context, input *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error) {
	var output iam.ListInstanceProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListInstanceProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListInstanceProfilesAsync(ctx workflow.Context, input *iam.ListInstanceProfilesInput) *IamListInstanceProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListInstanceProfiles", input)
	return &IamListInstanceProfilesFuture{Future: future}
}

func (a *IAMStub) ListInstanceProfilesForRole(ctx workflow.Context, input *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error) {
	var output iam.ListInstanceProfilesForRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListInstanceProfilesForRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListInstanceProfilesForRoleAsync(ctx workflow.Context, input *iam.ListInstanceProfilesForRoleInput) *IamListInstanceProfilesForRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListInstanceProfilesForRole", input)
	return &IamListInstanceProfilesForRoleFuture{Future: future}
}

func (a *IAMStub) ListMFADevices(ctx workflow.Context, input *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error) {
	var output iam.ListMFADevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListMFADevices", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListMFADevicesAsync(ctx workflow.Context, input *iam.ListMFADevicesInput) *IamListMFADevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListMFADevices", input)
	return &IamListMFADevicesFuture{Future: future}
}

func (a *IAMStub) ListOpenIDConnectProviders(ctx workflow.Context, input *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error) {
	var output iam.ListOpenIDConnectProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListOpenIDConnectProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListOpenIDConnectProvidersAsync(ctx workflow.Context, input *iam.ListOpenIDConnectProvidersInput) *IamListOpenIDConnectProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListOpenIDConnectProviders", input)
	return &IamListOpenIDConnectProvidersFuture{Future: future}
}

func (a *IAMStub) ListPolicies(ctx workflow.Context, input *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error) {
	var output iam.ListPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListPoliciesAsync(ctx workflow.Context, input *iam.ListPoliciesInput) *IamListPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListPolicies", input)
	return &IamListPoliciesFuture{Future: future}
}

func (a *IAMStub) ListPoliciesGrantingServiceAccess(ctx workflow.Context, input *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	var output iam.ListPoliciesGrantingServiceAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListPoliciesGrantingServiceAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListPoliciesGrantingServiceAccessAsync(ctx workflow.Context, input *iam.ListPoliciesGrantingServiceAccessInput) *IamListPoliciesGrantingServiceAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListPoliciesGrantingServiceAccess", input)
	return &IamListPoliciesGrantingServiceAccessFuture{Future: future}
}

func (a *IAMStub) ListPolicyVersions(ctx workflow.Context, input *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error) {
	var output iam.ListPolicyVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListPolicyVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListPolicyVersionsAsync(ctx workflow.Context, input *iam.ListPolicyVersionsInput) *IamListPolicyVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListPolicyVersions", input)
	return &IamListPolicyVersionsFuture{Future: future}
}

func (a *IAMStub) ListRolePolicies(ctx workflow.Context, input *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error) {
	var output iam.ListRolePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListRolePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListRolePoliciesAsync(ctx workflow.Context, input *iam.ListRolePoliciesInput) *IamListRolePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListRolePolicies", input)
	return &IamListRolePoliciesFuture{Future: future}
}

func (a *IAMStub) ListRoleTags(ctx workflow.Context, input *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error) {
	var output iam.ListRoleTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListRoleTags", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListRoleTagsAsync(ctx workflow.Context, input *iam.ListRoleTagsInput) *IamListRoleTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListRoleTags", input)
	return &IamListRoleTagsFuture{Future: future}
}

func (a *IAMStub) ListRoles(ctx workflow.Context, input *iam.ListRolesInput) (*iam.ListRolesOutput, error) {
	var output iam.ListRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListRolesAsync(ctx workflow.Context, input *iam.ListRolesInput) *IamListRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListRoles", input)
	return &IamListRolesFuture{Future: future}
}

func (a *IAMStub) ListSAMLProviders(ctx workflow.Context, input *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error) {
	var output iam.ListSAMLProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListSAMLProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListSAMLProvidersAsync(ctx workflow.Context, input *iam.ListSAMLProvidersInput) *IamListSAMLProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListSAMLProviders", input)
	return &IamListSAMLProvidersFuture{Future: future}
}

func (a *IAMStub) ListSSHPublicKeys(ctx workflow.Context, input *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error) {
	var output iam.ListSSHPublicKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListSSHPublicKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListSSHPublicKeysAsync(ctx workflow.Context, input *iam.ListSSHPublicKeysInput) *IamListSSHPublicKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListSSHPublicKeys", input)
	return &IamListSSHPublicKeysFuture{Future: future}
}

func (a *IAMStub) ListServerCertificates(ctx workflow.Context, input *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error) {
	var output iam.ListServerCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListServerCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListServerCertificatesAsync(ctx workflow.Context, input *iam.ListServerCertificatesInput) *IamListServerCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListServerCertificates", input)
	return &IamListServerCertificatesFuture{Future: future}
}

func (a *IAMStub) ListServiceSpecificCredentials(ctx workflow.Context, input *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error) {
	var output iam.ListServiceSpecificCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListServiceSpecificCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListServiceSpecificCredentialsAsync(ctx workflow.Context, input *iam.ListServiceSpecificCredentialsInput) *IamListServiceSpecificCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListServiceSpecificCredentials", input)
	return &IamListServiceSpecificCredentialsFuture{Future: future}
}

func (a *IAMStub) ListSigningCertificates(ctx workflow.Context, input *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error) {
	var output iam.ListSigningCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListSigningCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListSigningCertificatesAsync(ctx workflow.Context, input *iam.ListSigningCertificatesInput) *IamListSigningCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListSigningCertificates", input)
	return &IamListSigningCertificatesFuture{Future: future}
}

func (a *IAMStub) ListUserPolicies(ctx workflow.Context, input *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error) {
	var output iam.ListUserPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListUserPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListUserPoliciesAsync(ctx workflow.Context, input *iam.ListUserPoliciesInput) *IamListUserPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListUserPolicies", input)
	return &IamListUserPoliciesFuture{Future: future}
}

func (a *IAMStub) ListUserTags(ctx workflow.Context, input *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error) {
	var output iam.ListUserTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListUserTags", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListUserTagsAsync(ctx workflow.Context, input *iam.ListUserTagsInput) *IamListUserTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListUserTags", input)
	return &IamListUserTagsFuture{Future: future}
}

func (a *IAMStub) ListUsers(ctx workflow.Context, input *iam.ListUsersInput) (*iam.ListUsersOutput, error) {
	var output iam.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListUsersAsync(ctx workflow.Context, input *iam.ListUsersInput) *IamListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListUsers", input)
	return &IamListUsersFuture{Future: future}
}

func (a *IAMStub) ListVirtualMFADevices(ctx workflow.Context, input *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error) {
	var output iam.ListVirtualMFADevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ListVirtualMFADevices", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ListVirtualMFADevicesAsync(ctx workflow.Context, input *iam.ListVirtualMFADevicesInput) *IamListVirtualMFADevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ListVirtualMFADevices", input)
	return &IamListVirtualMFADevicesFuture{Future: future}
}

func (a *IAMStub) PutGroupPolicy(ctx workflow.Context, input *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error) {
	var output iam.PutGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.PutGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) PutGroupPolicyAsync(ctx workflow.Context, input *iam.PutGroupPolicyInput) *IamPutGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.PutGroupPolicy", input)
	return &IamPutGroupPolicyFuture{Future: future}
}

func (a *IAMStub) PutRolePermissionsBoundary(ctx workflow.Context, input *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error) {
	var output iam.PutRolePermissionsBoundaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.PutRolePermissionsBoundary", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) PutRolePermissionsBoundaryAsync(ctx workflow.Context, input *iam.PutRolePermissionsBoundaryInput) *IamPutRolePermissionsBoundaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.PutRolePermissionsBoundary", input)
	return &IamPutRolePermissionsBoundaryFuture{Future: future}
}

func (a *IAMStub) PutRolePolicy(ctx workflow.Context, input *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error) {
	var output iam.PutRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.PutRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) PutRolePolicyAsync(ctx workflow.Context, input *iam.PutRolePolicyInput) *IamPutRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.PutRolePolicy", input)
	return &IamPutRolePolicyFuture{Future: future}
}

func (a *IAMStub) PutUserPermissionsBoundary(ctx workflow.Context, input *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error) {
	var output iam.PutUserPermissionsBoundaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.PutUserPermissionsBoundary", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) PutUserPermissionsBoundaryAsync(ctx workflow.Context, input *iam.PutUserPermissionsBoundaryInput) *IamPutUserPermissionsBoundaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.PutUserPermissionsBoundary", input)
	return &IamPutUserPermissionsBoundaryFuture{Future: future}
}

func (a *IAMStub) PutUserPolicy(ctx workflow.Context, input *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error) {
	var output iam.PutUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.PutUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) PutUserPolicyAsync(ctx workflow.Context, input *iam.PutUserPolicyInput) *IamPutUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.PutUserPolicy", input)
	return &IamPutUserPolicyFuture{Future: future}
}

func (a *IAMStub) RemoveClientIDFromOpenIDConnectProvider(ctx workflow.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	var output iam.RemoveClientIDFromOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.RemoveClientIDFromOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) RemoveClientIDFromOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput) *IamRemoveClientIDFromOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.RemoveClientIDFromOpenIDConnectProvider", input)
	return &IamRemoveClientIDFromOpenIDConnectProviderFuture{Future: future}
}

func (a *IAMStub) RemoveRoleFromInstanceProfile(ctx workflow.Context, input *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	var output iam.RemoveRoleFromInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.RemoveRoleFromInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) RemoveRoleFromInstanceProfileAsync(ctx workflow.Context, input *iam.RemoveRoleFromInstanceProfileInput) *IamRemoveRoleFromInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.RemoveRoleFromInstanceProfile", input)
	return &IamRemoveRoleFromInstanceProfileFuture{Future: future}
}

func (a *IAMStub) RemoveUserFromGroup(ctx workflow.Context, input *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error) {
	var output iam.RemoveUserFromGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.RemoveUserFromGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) RemoveUserFromGroupAsync(ctx workflow.Context, input *iam.RemoveUserFromGroupInput) *IamRemoveUserFromGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.RemoveUserFromGroup", input)
	return &IamRemoveUserFromGroupFuture{Future: future}
}

func (a *IAMStub) ResetServiceSpecificCredential(ctx workflow.Context, input *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error) {
	var output iam.ResetServiceSpecificCredentialOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ResetServiceSpecificCredential", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ResetServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.ResetServiceSpecificCredentialInput) *IamResetServiceSpecificCredentialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ResetServiceSpecificCredential", input)
	return &IamResetServiceSpecificCredentialFuture{Future: future}
}

func (a *IAMStub) ResyncMFADevice(ctx workflow.Context, input *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error) {
	var output iam.ResyncMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.ResyncMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) ResyncMFADeviceAsync(ctx workflow.Context, input *iam.ResyncMFADeviceInput) *IamResyncMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.ResyncMFADevice", input)
	return &IamResyncMFADeviceFuture{Future: future}
}

func (a *IAMStub) SetDefaultPolicyVersion(ctx workflow.Context, input *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error) {
	var output iam.SetDefaultPolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.SetDefaultPolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) SetDefaultPolicyVersionAsync(ctx workflow.Context, input *iam.SetDefaultPolicyVersionInput) *IamSetDefaultPolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.SetDefaultPolicyVersion", input)
	return &IamSetDefaultPolicyVersionFuture{Future: future}
}

func (a *IAMStub) SetSecurityTokenServicePreferences(ctx workflow.Context, input *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	var output iam.SetSecurityTokenServicePreferencesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.SetSecurityTokenServicePreferences", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) SetSecurityTokenServicePreferencesAsync(ctx workflow.Context, input *iam.SetSecurityTokenServicePreferencesInput) *IamSetSecurityTokenServicePreferencesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.SetSecurityTokenServicePreferences", input)
	return &IamSetSecurityTokenServicePreferencesFuture{Future: future}
}

func (a *IAMStub) SimulateCustomPolicy(ctx workflow.Context, input *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error) {
	var output iam.SimulatePolicyResponse
	err := workflow.ExecuteActivity(ctx, "aws.iam.SimulateCustomPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) SimulateCustomPolicyAsync(ctx workflow.Context, input *iam.SimulateCustomPolicyInput) *IamSimulateCustomPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.SimulateCustomPolicy", input)
	return &IamSimulateCustomPolicyFuture{Future: future}
}

func (a *IAMStub) SimulatePrincipalPolicy(ctx workflow.Context, input *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error) {
	var output iam.SimulatePolicyResponse
	err := workflow.ExecuteActivity(ctx, "aws.iam.SimulatePrincipalPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) SimulatePrincipalPolicyAsync(ctx workflow.Context, input *iam.SimulatePrincipalPolicyInput) *IamSimulatePrincipalPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.SimulatePrincipalPolicy", input)
	return &IamSimulatePrincipalPolicyFuture{Future: future}
}

func (a *IAMStub) TagRole(ctx workflow.Context, input *iam.TagRoleInput) (*iam.TagRoleOutput, error) {
	var output iam.TagRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.TagRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) TagRoleAsync(ctx workflow.Context, input *iam.TagRoleInput) *IamTagRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.TagRole", input)
	return &IamTagRoleFuture{Future: future}
}

func (a *IAMStub) TagUser(ctx workflow.Context, input *iam.TagUserInput) (*iam.TagUserOutput, error) {
	var output iam.TagUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.TagUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) TagUserAsync(ctx workflow.Context, input *iam.TagUserInput) *IamTagUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.TagUser", input)
	return &IamTagUserFuture{Future: future}
}

func (a *IAMStub) UntagRole(ctx workflow.Context, input *iam.UntagRoleInput) (*iam.UntagRoleOutput, error) {
	var output iam.UntagRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UntagRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UntagRoleAsync(ctx workflow.Context, input *iam.UntagRoleInput) *IamUntagRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UntagRole", input)
	return &IamUntagRoleFuture{Future: future}
}

func (a *IAMStub) UntagUser(ctx workflow.Context, input *iam.UntagUserInput) (*iam.UntagUserOutput, error) {
	var output iam.UntagUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UntagUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UntagUserAsync(ctx workflow.Context, input *iam.UntagUserInput) *IamUntagUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UntagUser", input)
	return &IamUntagUserFuture{Future: future}
}

func (a *IAMStub) UpdateAccessKey(ctx workflow.Context, input *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error) {
	var output iam.UpdateAccessKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateAccessKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateAccessKeyAsync(ctx workflow.Context, input *iam.UpdateAccessKeyInput) *IamUpdateAccessKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateAccessKey", input)
	return &IamUpdateAccessKeyFuture{Future: future}
}

func (a *IAMStub) UpdateAccountPasswordPolicy(ctx workflow.Context, input *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	var output iam.UpdateAccountPasswordPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateAccountPasswordPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.UpdateAccountPasswordPolicyInput) *IamUpdateAccountPasswordPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateAccountPasswordPolicy", input)
	return &IamUpdateAccountPasswordPolicyFuture{Future: future}
}

func (a *IAMStub) UpdateAssumeRolePolicy(ctx workflow.Context, input *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error) {
	var output iam.UpdateAssumeRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateAssumeRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateAssumeRolePolicyAsync(ctx workflow.Context, input *iam.UpdateAssumeRolePolicyInput) *IamUpdateAssumeRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateAssumeRolePolicy", input)
	return &IamUpdateAssumeRolePolicyFuture{Future: future}
}

func (a *IAMStub) UpdateGroup(ctx workflow.Context, input *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error) {
	var output iam.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateGroupAsync(ctx workflow.Context, input *iam.UpdateGroupInput) *IamUpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateGroup", input)
	return &IamUpdateGroupFuture{Future: future}
}

func (a *IAMStub) UpdateLoginProfile(ctx workflow.Context, input *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error) {
	var output iam.UpdateLoginProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateLoginProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateLoginProfileAsync(ctx workflow.Context, input *iam.UpdateLoginProfileInput) *IamUpdateLoginProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateLoginProfile", input)
	return &IamUpdateLoginProfileFuture{Future: future}
}

func (a *IAMStub) UpdateOpenIDConnectProviderThumbprint(ctx workflow.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	var output iam.UpdateOpenIDConnectProviderThumbprintOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateOpenIDConnectProviderThumbprint", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateOpenIDConnectProviderThumbprintAsync(ctx workflow.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput) *IamUpdateOpenIDConnectProviderThumbprintFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateOpenIDConnectProviderThumbprint", input)
	return &IamUpdateOpenIDConnectProviderThumbprintFuture{Future: future}
}

func (a *IAMStub) UpdateRole(ctx workflow.Context, input *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error) {
	var output iam.UpdateRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateRole", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateRoleAsync(ctx workflow.Context, input *iam.UpdateRoleInput) *IamUpdateRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateRole", input)
	return &IamUpdateRoleFuture{Future: future}
}

func (a *IAMStub) UpdateRoleDescription(ctx workflow.Context, input *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error) {
	var output iam.UpdateRoleDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateRoleDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateRoleDescriptionAsync(ctx workflow.Context, input *iam.UpdateRoleDescriptionInput) *IamUpdateRoleDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateRoleDescription", input)
	return &IamUpdateRoleDescriptionFuture{Future: future}
}

func (a *IAMStub) UpdateSAMLProvider(ctx workflow.Context, input *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error) {
	var output iam.UpdateSAMLProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateSAMLProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateSAMLProviderAsync(ctx workflow.Context, input *iam.UpdateSAMLProviderInput) *IamUpdateSAMLProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateSAMLProvider", input)
	return &IamUpdateSAMLProviderFuture{Future: future}
}

func (a *IAMStub) UpdateSSHPublicKey(ctx workflow.Context, input *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error) {
	var output iam.UpdateSSHPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateSSHPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateSSHPublicKeyAsync(ctx workflow.Context, input *iam.UpdateSSHPublicKeyInput) *IamUpdateSSHPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateSSHPublicKey", input)
	return &IamUpdateSSHPublicKeyFuture{Future: future}
}

func (a *IAMStub) UpdateServerCertificate(ctx workflow.Context, input *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error) {
	var output iam.UpdateServerCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateServerCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateServerCertificateAsync(ctx workflow.Context, input *iam.UpdateServerCertificateInput) *IamUpdateServerCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateServerCertificate", input)
	return &IamUpdateServerCertificateFuture{Future: future}
}

func (a *IAMStub) UpdateServiceSpecificCredential(ctx workflow.Context, input *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	var output iam.UpdateServiceSpecificCredentialOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateServiceSpecificCredential", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.UpdateServiceSpecificCredentialInput) *IamUpdateServiceSpecificCredentialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateServiceSpecificCredential", input)
	return &IamUpdateServiceSpecificCredentialFuture{Future: future}
}

func (a *IAMStub) UpdateSigningCertificate(ctx workflow.Context, input *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error) {
	var output iam.UpdateSigningCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateSigningCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateSigningCertificateAsync(ctx workflow.Context, input *iam.UpdateSigningCertificateInput) *IamUpdateSigningCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateSigningCertificate", input)
	return &IamUpdateSigningCertificateFuture{Future: future}
}

func (a *IAMStub) UpdateUser(ctx workflow.Context, input *iam.UpdateUserInput) (*iam.UpdateUserOutput, error) {
	var output iam.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UpdateUserAsync(ctx workflow.Context, input *iam.UpdateUserInput) *IamUpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UpdateUser", input)
	return &IamUpdateUserFuture{Future: future}
}

func (a *IAMStub) UploadSSHPublicKey(ctx workflow.Context, input *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error) {
	var output iam.UploadSSHPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UploadSSHPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UploadSSHPublicKeyAsync(ctx workflow.Context, input *iam.UploadSSHPublicKeyInput) *IamUploadSSHPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UploadSSHPublicKey", input)
	return &IamUploadSSHPublicKeyFuture{Future: future}
}

func (a *IAMStub) UploadServerCertificate(ctx workflow.Context, input *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error) {
	var output iam.UploadServerCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UploadServerCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UploadServerCertificateAsync(ctx workflow.Context, input *iam.UploadServerCertificateInput) *IamUploadServerCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UploadServerCertificate", input)
	return &IamUploadServerCertificateFuture{Future: future}
}

func (a *IAMStub) UploadSigningCertificate(ctx workflow.Context, input *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error) {
	var output iam.UploadSigningCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iam.UploadSigningCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IAMStub) UploadSigningCertificateAsync(ctx workflow.Context, input *iam.UploadSigningCertificateInput) *IamUploadSigningCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.UploadSigningCertificate", input)
	return &IamUploadSigningCertificateFuture{Future: future}
}

func (a *IAMStub) WaitUntilInstanceProfileExists(ctx workflow.Context, input *iam.GetInstanceProfileInput) error {
	return workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilInstanceProfileExists", input).Get(ctx, nil)
}

func (a *IAMStub) WaitUntilInstanceProfileExistsAsync(ctx workflow.Context, input *iam.GetInstanceProfileInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilInstanceProfileExists", input)
	return NewVoidFuture(future)
}

func (a *IAMStub) WaitUntilPolicyExists(ctx workflow.Context, input *iam.GetPolicyInput) error {
	return workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilPolicyExists", input).Get(ctx, nil)
}

func (a *IAMStub) WaitUntilPolicyExistsAsync(ctx workflow.Context, input *iam.GetPolicyInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilPolicyExists", input)
	return NewVoidFuture(future)
}

func (a *IAMStub) WaitUntilRoleExists(ctx workflow.Context, input *iam.GetRoleInput) error {
	return workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilRoleExists", input).Get(ctx, nil)
}

func (a *IAMStub) WaitUntilRoleExistsAsync(ctx workflow.Context, input *iam.GetRoleInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilRoleExists", input)
	return NewVoidFuture(future)
}

func (a *IAMStub) WaitUntilUserExists(ctx workflow.Context, input *iam.GetUserInput) error {
	return workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilUserExists", input).Get(ctx, nil)
}

func (a *IAMStub) WaitUntilUserExistsAsync(ctx workflow.Context, input *iam.GetUserInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iam.WaitUntilUserExists", input)
	return NewVoidFuture(future)
}
