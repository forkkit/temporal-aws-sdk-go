// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/backup"
	"go.temporal.io/sdk/workflow"
)

type BackupClient interface {
	CreateBackupPlan(ctx workflow.Context, input *backup.CreateBackupPlanInput) (*backup.CreateBackupPlanOutput, error)
	CreateBackupPlanAsync(ctx workflow.Context, input *backup.CreateBackupPlanInput) *BackupCreateBackupPlanFuture

	CreateBackupSelection(ctx workflow.Context, input *backup.CreateBackupSelectionInput) (*backup.CreateBackupSelectionOutput, error)
	CreateBackupSelectionAsync(ctx workflow.Context, input *backup.CreateBackupSelectionInput) *BackupCreateBackupSelectionFuture

	CreateBackupVault(ctx workflow.Context, input *backup.CreateBackupVaultInput) (*backup.CreateBackupVaultOutput, error)
	CreateBackupVaultAsync(ctx workflow.Context, input *backup.CreateBackupVaultInput) *BackupCreateBackupVaultFuture

	DeleteBackupPlan(ctx workflow.Context, input *backup.DeleteBackupPlanInput) (*backup.DeleteBackupPlanOutput, error)
	DeleteBackupPlanAsync(ctx workflow.Context, input *backup.DeleteBackupPlanInput) *BackupDeleteBackupPlanFuture

	DeleteBackupSelection(ctx workflow.Context, input *backup.DeleteBackupSelectionInput) (*backup.DeleteBackupSelectionOutput, error)
	DeleteBackupSelectionAsync(ctx workflow.Context, input *backup.DeleteBackupSelectionInput) *BackupDeleteBackupSelectionFuture

	DeleteBackupVault(ctx workflow.Context, input *backup.DeleteBackupVaultInput) (*backup.DeleteBackupVaultOutput, error)
	DeleteBackupVaultAsync(ctx workflow.Context, input *backup.DeleteBackupVaultInput) *BackupDeleteBackupVaultFuture

	DeleteBackupVaultAccessPolicy(ctx workflow.Context, input *backup.DeleteBackupVaultAccessPolicyInput) (*backup.DeleteBackupVaultAccessPolicyOutput, error)
	DeleteBackupVaultAccessPolicyAsync(ctx workflow.Context, input *backup.DeleteBackupVaultAccessPolicyInput) *BackupDeleteBackupVaultAccessPolicyFuture

	DeleteBackupVaultNotifications(ctx workflow.Context, input *backup.DeleteBackupVaultNotificationsInput) (*backup.DeleteBackupVaultNotificationsOutput, error)
	DeleteBackupVaultNotificationsAsync(ctx workflow.Context, input *backup.DeleteBackupVaultNotificationsInput) *BackupDeleteBackupVaultNotificationsFuture

	DeleteRecoveryPoint(ctx workflow.Context, input *backup.DeleteRecoveryPointInput) (*backup.DeleteRecoveryPointOutput, error)
	DeleteRecoveryPointAsync(ctx workflow.Context, input *backup.DeleteRecoveryPointInput) *BackupDeleteRecoveryPointFuture

	DescribeBackupJob(ctx workflow.Context, input *backup.DescribeBackupJobInput) (*backup.DescribeBackupJobOutput, error)
	DescribeBackupJobAsync(ctx workflow.Context, input *backup.DescribeBackupJobInput) *BackupDescribeBackupJobFuture

	DescribeBackupVault(ctx workflow.Context, input *backup.DescribeBackupVaultInput) (*backup.DescribeBackupVaultOutput, error)
	DescribeBackupVaultAsync(ctx workflow.Context, input *backup.DescribeBackupVaultInput) *BackupDescribeBackupVaultFuture

	DescribeCopyJob(ctx workflow.Context, input *backup.DescribeCopyJobInput) (*backup.DescribeCopyJobOutput, error)
	DescribeCopyJobAsync(ctx workflow.Context, input *backup.DescribeCopyJobInput) *BackupDescribeCopyJobFuture

	DescribeProtectedResource(ctx workflow.Context, input *backup.DescribeProtectedResourceInput) (*backup.DescribeProtectedResourceOutput, error)
	DescribeProtectedResourceAsync(ctx workflow.Context, input *backup.DescribeProtectedResourceInput) *BackupDescribeProtectedResourceFuture

	DescribeRecoveryPoint(ctx workflow.Context, input *backup.DescribeRecoveryPointInput) (*backup.DescribeRecoveryPointOutput, error)
	DescribeRecoveryPointAsync(ctx workflow.Context, input *backup.DescribeRecoveryPointInput) *BackupDescribeRecoveryPointFuture

	DescribeRegionSettings(ctx workflow.Context, input *backup.DescribeRegionSettingsInput) (*backup.DescribeRegionSettingsOutput, error)
	DescribeRegionSettingsAsync(ctx workflow.Context, input *backup.DescribeRegionSettingsInput) *BackupDescribeRegionSettingsFuture

	DescribeRestoreJob(ctx workflow.Context, input *backup.DescribeRestoreJobInput) (*backup.DescribeRestoreJobOutput, error)
	DescribeRestoreJobAsync(ctx workflow.Context, input *backup.DescribeRestoreJobInput) *BackupDescribeRestoreJobFuture

	ExportBackupPlanTemplate(ctx workflow.Context, input *backup.ExportBackupPlanTemplateInput) (*backup.ExportBackupPlanTemplateOutput, error)
	ExportBackupPlanTemplateAsync(ctx workflow.Context, input *backup.ExportBackupPlanTemplateInput) *BackupExportBackupPlanTemplateFuture

	GetBackupPlan(ctx workflow.Context, input *backup.GetBackupPlanInput) (*backup.GetBackupPlanOutput, error)
	GetBackupPlanAsync(ctx workflow.Context, input *backup.GetBackupPlanInput) *BackupGetBackupPlanFuture

	GetBackupPlanFromJSON(ctx workflow.Context, input *backup.GetBackupPlanFromJSONInput) (*backup.GetBackupPlanFromJSONOutput, error)
	GetBackupPlanFromJSONAsync(ctx workflow.Context, input *backup.GetBackupPlanFromJSONInput) *BackupGetBackupPlanFromJSONFuture

	GetBackupPlanFromTemplate(ctx workflow.Context, input *backup.GetBackupPlanFromTemplateInput) (*backup.GetBackupPlanFromTemplateOutput, error)
	GetBackupPlanFromTemplateAsync(ctx workflow.Context, input *backup.GetBackupPlanFromTemplateInput) *BackupGetBackupPlanFromTemplateFuture

	GetBackupSelection(ctx workflow.Context, input *backup.GetBackupSelectionInput) (*backup.GetBackupSelectionOutput, error)
	GetBackupSelectionAsync(ctx workflow.Context, input *backup.GetBackupSelectionInput) *BackupGetBackupSelectionFuture

	GetBackupVaultAccessPolicy(ctx workflow.Context, input *backup.GetBackupVaultAccessPolicyInput) (*backup.GetBackupVaultAccessPolicyOutput, error)
	GetBackupVaultAccessPolicyAsync(ctx workflow.Context, input *backup.GetBackupVaultAccessPolicyInput) *BackupGetBackupVaultAccessPolicyFuture

	GetBackupVaultNotifications(ctx workflow.Context, input *backup.GetBackupVaultNotificationsInput) (*backup.GetBackupVaultNotificationsOutput, error)
	GetBackupVaultNotificationsAsync(ctx workflow.Context, input *backup.GetBackupVaultNotificationsInput) *BackupGetBackupVaultNotificationsFuture

	GetRecoveryPointRestoreMetadata(ctx workflow.Context, input *backup.GetRecoveryPointRestoreMetadataInput) (*backup.GetRecoveryPointRestoreMetadataOutput, error)
	GetRecoveryPointRestoreMetadataAsync(ctx workflow.Context, input *backup.GetRecoveryPointRestoreMetadataInput) *BackupGetRecoveryPointRestoreMetadataFuture

	GetSupportedResourceTypes(ctx workflow.Context, input *backup.GetSupportedResourceTypesInput) (*backup.GetSupportedResourceTypesOutput, error)
	GetSupportedResourceTypesAsync(ctx workflow.Context, input *backup.GetSupportedResourceTypesInput) *BackupGetSupportedResourceTypesFuture

	ListBackupJobs(ctx workflow.Context, input *backup.ListBackupJobsInput) (*backup.ListBackupJobsOutput, error)
	ListBackupJobsAsync(ctx workflow.Context, input *backup.ListBackupJobsInput) *BackupListBackupJobsFuture

	ListBackupPlanTemplates(ctx workflow.Context, input *backup.ListBackupPlanTemplatesInput) (*backup.ListBackupPlanTemplatesOutput, error)
	ListBackupPlanTemplatesAsync(ctx workflow.Context, input *backup.ListBackupPlanTemplatesInput) *BackupListBackupPlanTemplatesFuture

	ListBackupPlanVersions(ctx workflow.Context, input *backup.ListBackupPlanVersionsInput) (*backup.ListBackupPlanVersionsOutput, error)
	ListBackupPlanVersionsAsync(ctx workflow.Context, input *backup.ListBackupPlanVersionsInput) *BackupListBackupPlanVersionsFuture

	ListBackupPlans(ctx workflow.Context, input *backup.ListBackupPlansInput) (*backup.ListBackupPlansOutput, error)
	ListBackupPlansAsync(ctx workflow.Context, input *backup.ListBackupPlansInput) *BackupListBackupPlansFuture

	ListBackupSelections(ctx workflow.Context, input *backup.ListBackupSelectionsInput) (*backup.ListBackupSelectionsOutput, error)
	ListBackupSelectionsAsync(ctx workflow.Context, input *backup.ListBackupSelectionsInput) *BackupListBackupSelectionsFuture

	ListBackupVaults(ctx workflow.Context, input *backup.ListBackupVaultsInput) (*backup.ListBackupVaultsOutput, error)
	ListBackupVaultsAsync(ctx workflow.Context, input *backup.ListBackupVaultsInput) *BackupListBackupVaultsFuture

	ListCopyJobs(ctx workflow.Context, input *backup.ListCopyJobsInput) (*backup.ListCopyJobsOutput, error)
	ListCopyJobsAsync(ctx workflow.Context, input *backup.ListCopyJobsInput) *BackupListCopyJobsFuture

	ListProtectedResources(ctx workflow.Context, input *backup.ListProtectedResourcesInput) (*backup.ListProtectedResourcesOutput, error)
	ListProtectedResourcesAsync(ctx workflow.Context, input *backup.ListProtectedResourcesInput) *BackupListProtectedResourcesFuture

	ListRecoveryPointsByBackupVault(ctx workflow.Context, input *backup.ListRecoveryPointsByBackupVaultInput) (*backup.ListRecoveryPointsByBackupVaultOutput, error)
	ListRecoveryPointsByBackupVaultAsync(ctx workflow.Context, input *backup.ListRecoveryPointsByBackupVaultInput) *BackupListRecoveryPointsByBackupVaultFuture

	ListRecoveryPointsByResource(ctx workflow.Context, input *backup.ListRecoveryPointsByResourceInput) (*backup.ListRecoveryPointsByResourceOutput, error)
	ListRecoveryPointsByResourceAsync(ctx workflow.Context, input *backup.ListRecoveryPointsByResourceInput) *BackupListRecoveryPointsByResourceFuture

	ListRestoreJobs(ctx workflow.Context, input *backup.ListRestoreJobsInput) (*backup.ListRestoreJobsOutput, error)
	ListRestoreJobsAsync(ctx workflow.Context, input *backup.ListRestoreJobsInput) *BackupListRestoreJobsFuture

	ListTags(ctx workflow.Context, input *backup.ListTagsInput) (*backup.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *backup.ListTagsInput) *BackupListTagsFuture

	PutBackupVaultAccessPolicy(ctx workflow.Context, input *backup.PutBackupVaultAccessPolicyInput) (*backup.PutBackupVaultAccessPolicyOutput, error)
	PutBackupVaultAccessPolicyAsync(ctx workflow.Context, input *backup.PutBackupVaultAccessPolicyInput) *BackupPutBackupVaultAccessPolicyFuture

	PutBackupVaultNotifications(ctx workflow.Context, input *backup.PutBackupVaultNotificationsInput) (*backup.PutBackupVaultNotificationsOutput, error)
	PutBackupVaultNotificationsAsync(ctx workflow.Context, input *backup.PutBackupVaultNotificationsInput) *BackupPutBackupVaultNotificationsFuture

	StartBackupJob(ctx workflow.Context, input *backup.StartBackupJobInput) (*backup.StartBackupJobOutput, error)
	StartBackupJobAsync(ctx workflow.Context, input *backup.StartBackupJobInput) *BackupStartBackupJobFuture

	StartCopyJob(ctx workflow.Context, input *backup.StartCopyJobInput) (*backup.StartCopyJobOutput, error)
	StartCopyJobAsync(ctx workflow.Context, input *backup.StartCopyJobInput) *BackupStartCopyJobFuture

	StartRestoreJob(ctx workflow.Context, input *backup.StartRestoreJobInput) (*backup.StartRestoreJobOutput, error)
	StartRestoreJobAsync(ctx workflow.Context, input *backup.StartRestoreJobInput) *BackupStartRestoreJobFuture

	StopBackupJob(ctx workflow.Context, input *backup.StopBackupJobInput) (*backup.StopBackupJobOutput, error)
	StopBackupJobAsync(ctx workflow.Context, input *backup.StopBackupJobInput) *BackupStopBackupJobFuture

	TagResource(ctx workflow.Context, input *backup.TagResourceInput) (*backup.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *backup.TagResourceInput) *BackupTagResourceFuture

	UntagResource(ctx workflow.Context, input *backup.UntagResourceInput) (*backup.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *backup.UntagResourceInput) *BackupUntagResourceFuture

	UpdateBackupPlan(ctx workflow.Context, input *backup.UpdateBackupPlanInput) (*backup.UpdateBackupPlanOutput, error)
	UpdateBackupPlanAsync(ctx workflow.Context, input *backup.UpdateBackupPlanInput) *BackupUpdateBackupPlanFuture

	UpdateRecoveryPointLifecycle(ctx workflow.Context, input *backup.UpdateRecoveryPointLifecycleInput) (*backup.UpdateRecoveryPointLifecycleOutput, error)
	UpdateRecoveryPointLifecycleAsync(ctx workflow.Context, input *backup.UpdateRecoveryPointLifecycleInput) *BackupUpdateRecoveryPointLifecycleFuture

	UpdateRegionSettings(ctx workflow.Context, input *backup.UpdateRegionSettingsInput) (*backup.UpdateRegionSettingsOutput, error)
	UpdateRegionSettingsAsync(ctx workflow.Context, input *backup.UpdateRegionSettingsInput) *BackupUpdateRegionSettingsFuture
}

type BackupStub struct{}

func NewBackupStub() BackupClient {
	return &BackupStub{}
}

type BackupCreateBackupPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupCreateBackupPlanFuture) Get(ctx workflow.Context) (*backup.CreateBackupPlanOutput, error) {
	var output backup.CreateBackupPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupCreateBackupSelectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupCreateBackupSelectionFuture) Get(ctx workflow.Context) (*backup.CreateBackupSelectionOutput, error) {
	var output backup.CreateBackupSelectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupCreateBackupVaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupCreateBackupVaultFuture) Get(ctx workflow.Context) (*backup.CreateBackupVaultOutput, error) {
	var output backup.CreateBackupVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDeleteBackupPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDeleteBackupPlanFuture) Get(ctx workflow.Context) (*backup.DeleteBackupPlanOutput, error) {
	var output backup.DeleteBackupPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDeleteBackupSelectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDeleteBackupSelectionFuture) Get(ctx workflow.Context) (*backup.DeleteBackupSelectionOutput, error) {
	var output backup.DeleteBackupSelectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDeleteBackupVaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDeleteBackupVaultFuture) Get(ctx workflow.Context) (*backup.DeleteBackupVaultOutput, error) {
	var output backup.DeleteBackupVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDeleteBackupVaultAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDeleteBackupVaultAccessPolicyFuture) Get(ctx workflow.Context) (*backup.DeleteBackupVaultAccessPolicyOutput, error) {
	var output backup.DeleteBackupVaultAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDeleteBackupVaultNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDeleteBackupVaultNotificationsFuture) Get(ctx workflow.Context) (*backup.DeleteBackupVaultNotificationsOutput, error) {
	var output backup.DeleteBackupVaultNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDeleteRecoveryPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDeleteRecoveryPointFuture) Get(ctx workflow.Context) (*backup.DeleteRecoveryPointOutput, error) {
	var output backup.DeleteRecoveryPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeBackupJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeBackupJobFuture) Get(ctx workflow.Context) (*backup.DescribeBackupJobOutput, error) {
	var output backup.DescribeBackupJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeBackupVaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeBackupVaultFuture) Get(ctx workflow.Context) (*backup.DescribeBackupVaultOutput, error) {
	var output backup.DescribeBackupVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeCopyJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeCopyJobFuture) Get(ctx workflow.Context) (*backup.DescribeCopyJobOutput, error) {
	var output backup.DescribeCopyJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeProtectedResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeProtectedResourceFuture) Get(ctx workflow.Context) (*backup.DescribeProtectedResourceOutput, error) {
	var output backup.DescribeProtectedResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeRecoveryPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeRecoveryPointFuture) Get(ctx workflow.Context) (*backup.DescribeRecoveryPointOutput, error) {
	var output backup.DescribeRecoveryPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeRegionSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeRegionSettingsFuture) Get(ctx workflow.Context) (*backup.DescribeRegionSettingsOutput, error) {
	var output backup.DescribeRegionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeRestoreJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeRestoreJobFuture) Get(ctx workflow.Context) (*backup.DescribeRestoreJobOutput, error) {
	var output backup.DescribeRestoreJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupExportBackupPlanTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupExportBackupPlanTemplateFuture) Get(ctx workflow.Context) (*backup.ExportBackupPlanTemplateOutput, error) {
	var output backup.ExportBackupPlanTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetBackupPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetBackupPlanFuture) Get(ctx workflow.Context) (*backup.GetBackupPlanOutput, error) {
	var output backup.GetBackupPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetBackupPlanFromJSONFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetBackupPlanFromJSONFuture) Get(ctx workflow.Context) (*backup.GetBackupPlanFromJSONOutput, error) {
	var output backup.GetBackupPlanFromJSONOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetBackupPlanFromTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetBackupPlanFromTemplateFuture) Get(ctx workflow.Context) (*backup.GetBackupPlanFromTemplateOutput, error) {
	var output backup.GetBackupPlanFromTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetBackupSelectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetBackupSelectionFuture) Get(ctx workflow.Context) (*backup.GetBackupSelectionOutput, error) {
	var output backup.GetBackupSelectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetBackupVaultAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetBackupVaultAccessPolicyFuture) Get(ctx workflow.Context) (*backup.GetBackupVaultAccessPolicyOutput, error) {
	var output backup.GetBackupVaultAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetBackupVaultNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetBackupVaultNotificationsFuture) Get(ctx workflow.Context) (*backup.GetBackupVaultNotificationsOutput, error) {
	var output backup.GetBackupVaultNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetRecoveryPointRestoreMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetRecoveryPointRestoreMetadataFuture) Get(ctx workflow.Context) (*backup.GetRecoveryPointRestoreMetadataOutput, error) {
	var output backup.GetRecoveryPointRestoreMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetSupportedResourceTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetSupportedResourceTypesFuture) Get(ctx workflow.Context) (*backup.GetSupportedResourceTypesOutput, error) {
	var output backup.GetSupportedResourceTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListBackupJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListBackupJobsFuture) Get(ctx workflow.Context) (*backup.ListBackupJobsOutput, error) {
	var output backup.ListBackupJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListBackupPlanTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListBackupPlanTemplatesFuture) Get(ctx workflow.Context) (*backup.ListBackupPlanTemplatesOutput, error) {
	var output backup.ListBackupPlanTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListBackupPlanVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListBackupPlanVersionsFuture) Get(ctx workflow.Context) (*backup.ListBackupPlanVersionsOutput, error) {
	var output backup.ListBackupPlanVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListBackupPlansFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListBackupPlansFuture) Get(ctx workflow.Context) (*backup.ListBackupPlansOutput, error) {
	var output backup.ListBackupPlansOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListBackupSelectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListBackupSelectionsFuture) Get(ctx workflow.Context) (*backup.ListBackupSelectionsOutput, error) {
	var output backup.ListBackupSelectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListBackupVaultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListBackupVaultsFuture) Get(ctx workflow.Context) (*backup.ListBackupVaultsOutput, error) {
	var output backup.ListBackupVaultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListCopyJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListCopyJobsFuture) Get(ctx workflow.Context) (*backup.ListCopyJobsOutput, error) {
	var output backup.ListCopyJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListProtectedResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListProtectedResourcesFuture) Get(ctx workflow.Context) (*backup.ListProtectedResourcesOutput, error) {
	var output backup.ListProtectedResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListRecoveryPointsByBackupVaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListRecoveryPointsByBackupVaultFuture) Get(ctx workflow.Context) (*backup.ListRecoveryPointsByBackupVaultOutput, error) {
	var output backup.ListRecoveryPointsByBackupVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListRecoveryPointsByResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListRecoveryPointsByResourceFuture) Get(ctx workflow.Context) (*backup.ListRecoveryPointsByResourceOutput, error) {
	var output backup.ListRecoveryPointsByResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListRestoreJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListRestoreJobsFuture) Get(ctx workflow.Context) (*backup.ListRestoreJobsOutput, error) {
	var output backup.ListRestoreJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListTagsFuture) Get(ctx workflow.Context) (*backup.ListTagsOutput, error) {
	var output backup.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupPutBackupVaultAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupPutBackupVaultAccessPolicyFuture) Get(ctx workflow.Context) (*backup.PutBackupVaultAccessPolicyOutput, error) {
	var output backup.PutBackupVaultAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupPutBackupVaultNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupPutBackupVaultNotificationsFuture) Get(ctx workflow.Context) (*backup.PutBackupVaultNotificationsOutput, error) {
	var output backup.PutBackupVaultNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupStartBackupJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupStartBackupJobFuture) Get(ctx workflow.Context) (*backup.StartBackupJobOutput, error) {
	var output backup.StartBackupJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupStartCopyJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupStartCopyJobFuture) Get(ctx workflow.Context) (*backup.StartCopyJobOutput, error) {
	var output backup.StartCopyJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupStartRestoreJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupStartRestoreJobFuture) Get(ctx workflow.Context) (*backup.StartRestoreJobOutput, error) {
	var output backup.StartRestoreJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupStopBackupJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupStopBackupJobFuture) Get(ctx workflow.Context) (*backup.StopBackupJobOutput, error) {
	var output backup.StopBackupJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupTagResourceFuture) Get(ctx workflow.Context) (*backup.TagResourceOutput, error) {
	var output backup.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupUntagResourceFuture) Get(ctx workflow.Context) (*backup.UntagResourceOutput, error) {
	var output backup.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupUpdateBackupPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupUpdateBackupPlanFuture) Get(ctx workflow.Context) (*backup.UpdateBackupPlanOutput, error) {
	var output backup.UpdateBackupPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupUpdateRecoveryPointLifecycleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupUpdateRecoveryPointLifecycleFuture) Get(ctx workflow.Context) (*backup.UpdateRecoveryPointLifecycleOutput, error) {
	var output backup.UpdateRecoveryPointLifecycleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupUpdateRegionSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupUpdateRegionSettingsFuture) Get(ctx workflow.Context) (*backup.UpdateRegionSettingsOutput, error) {
	var output backup.UpdateRegionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) CreateBackupPlan(ctx workflow.Context, input *backup.CreateBackupPlanInput) (*backup.CreateBackupPlanOutput, error) {
	var output backup.CreateBackupPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.CreateBackupPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) CreateBackupPlanAsync(ctx workflow.Context, input *backup.CreateBackupPlanInput) *BackupCreateBackupPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.CreateBackupPlan", input)
	return &BackupCreateBackupPlanFuture{Future: future}
}

func (a *BackupStub) CreateBackupSelection(ctx workflow.Context, input *backup.CreateBackupSelectionInput) (*backup.CreateBackupSelectionOutput, error) {
	var output backup.CreateBackupSelectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.CreateBackupSelection", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) CreateBackupSelectionAsync(ctx workflow.Context, input *backup.CreateBackupSelectionInput) *BackupCreateBackupSelectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.CreateBackupSelection", input)
	return &BackupCreateBackupSelectionFuture{Future: future}
}

func (a *BackupStub) CreateBackupVault(ctx workflow.Context, input *backup.CreateBackupVaultInput) (*backup.CreateBackupVaultOutput, error) {
	var output backup.CreateBackupVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.CreateBackupVault", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) CreateBackupVaultAsync(ctx workflow.Context, input *backup.CreateBackupVaultInput) *BackupCreateBackupVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.CreateBackupVault", input)
	return &BackupCreateBackupVaultFuture{Future: future}
}

func (a *BackupStub) DeleteBackupPlan(ctx workflow.Context, input *backup.DeleteBackupPlanInput) (*backup.DeleteBackupPlanOutput, error) {
	var output backup.DeleteBackupPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DeleteBackupPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DeleteBackupPlanAsync(ctx workflow.Context, input *backup.DeleteBackupPlanInput) *BackupDeleteBackupPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DeleteBackupPlan", input)
	return &BackupDeleteBackupPlanFuture{Future: future}
}

func (a *BackupStub) DeleteBackupSelection(ctx workflow.Context, input *backup.DeleteBackupSelectionInput) (*backup.DeleteBackupSelectionOutput, error) {
	var output backup.DeleteBackupSelectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DeleteBackupSelection", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DeleteBackupSelectionAsync(ctx workflow.Context, input *backup.DeleteBackupSelectionInput) *BackupDeleteBackupSelectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DeleteBackupSelection", input)
	return &BackupDeleteBackupSelectionFuture{Future: future}
}

func (a *BackupStub) DeleteBackupVault(ctx workflow.Context, input *backup.DeleteBackupVaultInput) (*backup.DeleteBackupVaultOutput, error) {
	var output backup.DeleteBackupVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DeleteBackupVault", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DeleteBackupVaultAsync(ctx workflow.Context, input *backup.DeleteBackupVaultInput) *BackupDeleteBackupVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DeleteBackupVault", input)
	return &BackupDeleteBackupVaultFuture{Future: future}
}

func (a *BackupStub) DeleteBackupVaultAccessPolicy(ctx workflow.Context, input *backup.DeleteBackupVaultAccessPolicyInput) (*backup.DeleteBackupVaultAccessPolicyOutput, error) {
	var output backup.DeleteBackupVaultAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DeleteBackupVaultAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DeleteBackupVaultAccessPolicyAsync(ctx workflow.Context, input *backup.DeleteBackupVaultAccessPolicyInput) *BackupDeleteBackupVaultAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DeleteBackupVaultAccessPolicy", input)
	return &BackupDeleteBackupVaultAccessPolicyFuture{Future: future}
}

func (a *BackupStub) DeleteBackupVaultNotifications(ctx workflow.Context, input *backup.DeleteBackupVaultNotificationsInput) (*backup.DeleteBackupVaultNotificationsOutput, error) {
	var output backup.DeleteBackupVaultNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DeleteBackupVaultNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DeleteBackupVaultNotificationsAsync(ctx workflow.Context, input *backup.DeleteBackupVaultNotificationsInput) *BackupDeleteBackupVaultNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DeleteBackupVaultNotifications", input)
	return &BackupDeleteBackupVaultNotificationsFuture{Future: future}
}

func (a *BackupStub) DeleteRecoveryPoint(ctx workflow.Context, input *backup.DeleteRecoveryPointInput) (*backup.DeleteRecoveryPointOutput, error) {
	var output backup.DeleteRecoveryPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DeleteRecoveryPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DeleteRecoveryPointAsync(ctx workflow.Context, input *backup.DeleteRecoveryPointInput) *BackupDeleteRecoveryPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DeleteRecoveryPoint", input)
	return &BackupDeleteRecoveryPointFuture{Future: future}
}

func (a *BackupStub) DescribeBackupJob(ctx workflow.Context, input *backup.DescribeBackupJobInput) (*backup.DescribeBackupJobOutput, error) {
	var output backup.DescribeBackupJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DescribeBackupJob", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DescribeBackupJobAsync(ctx workflow.Context, input *backup.DescribeBackupJobInput) *BackupDescribeBackupJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DescribeBackupJob", input)
	return &BackupDescribeBackupJobFuture{Future: future}
}

func (a *BackupStub) DescribeBackupVault(ctx workflow.Context, input *backup.DescribeBackupVaultInput) (*backup.DescribeBackupVaultOutput, error) {
	var output backup.DescribeBackupVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DescribeBackupVault", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DescribeBackupVaultAsync(ctx workflow.Context, input *backup.DescribeBackupVaultInput) *BackupDescribeBackupVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DescribeBackupVault", input)
	return &BackupDescribeBackupVaultFuture{Future: future}
}

func (a *BackupStub) DescribeCopyJob(ctx workflow.Context, input *backup.DescribeCopyJobInput) (*backup.DescribeCopyJobOutput, error) {
	var output backup.DescribeCopyJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DescribeCopyJob", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DescribeCopyJobAsync(ctx workflow.Context, input *backup.DescribeCopyJobInput) *BackupDescribeCopyJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DescribeCopyJob", input)
	return &BackupDescribeCopyJobFuture{Future: future}
}

func (a *BackupStub) DescribeProtectedResource(ctx workflow.Context, input *backup.DescribeProtectedResourceInput) (*backup.DescribeProtectedResourceOutput, error) {
	var output backup.DescribeProtectedResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DescribeProtectedResource", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DescribeProtectedResourceAsync(ctx workflow.Context, input *backup.DescribeProtectedResourceInput) *BackupDescribeProtectedResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DescribeProtectedResource", input)
	return &BackupDescribeProtectedResourceFuture{Future: future}
}

func (a *BackupStub) DescribeRecoveryPoint(ctx workflow.Context, input *backup.DescribeRecoveryPointInput) (*backup.DescribeRecoveryPointOutput, error) {
	var output backup.DescribeRecoveryPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DescribeRecoveryPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DescribeRecoveryPointAsync(ctx workflow.Context, input *backup.DescribeRecoveryPointInput) *BackupDescribeRecoveryPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DescribeRecoveryPoint", input)
	return &BackupDescribeRecoveryPointFuture{Future: future}
}

func (a *BackupStub) DescribeRegionSettings(ctx workflow.Context, input *backup.DescribeRegionSettingsInput) (*backup.DescribeRegionSettingsOutput, error) {
	var output backup.DescribeRegionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DescribeRegionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DescribeRegionSettingsAsync(ctx workflow.Context, input *backup.DescribeRegionSettingsInput) *BackupDescribeRegionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DescribeRegionSettings", input)
	return &BackupDescribeRegionSettingsFuture{Future: future}
}

func (a *BackupStub) DescribeRestoreJob(ctx workflow.Context, input *backup.DescribeRestoreJobInput) (*backup.DescribeRestoreJobOutput, error) {
	var output backup.DescribeRestoreJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.DescribeRestoreJob", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) DescribeRestoreJobAsync(ctx workflow.Context, input *backup.DescribeRestoreJobInput) *BackupDescribeRestoreJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.DescribeRestoreJob", input)
	return &BackupDescribeRestoreJobFuture{Future: future}
}

func (a *BackupStub) ExportBackupPlanTemplate(ctx workflow.Context, input *backup.ExportBackupPlanTemplateInput) (*backup.ExportBackupPlanTemplateOutput, error) {
	var output backup.ExportBackupPlanTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ExportBackupPlanTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ExportBackupPlanTemplateAsync(ctx workflow.Context, input *backup.ExportBackupPlanTemplateInput) *BackupExportBackupPlanTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ExportBackupPlanTemplate", input)
	return &BackupExportBackupPlanTemplateFuture{Future: future}
}

func (a *BackupStub) GetBackupPlan(ctx workflow.Context, input *backup.GetBackupPlanInput) (*backup.GetBackupPlanOutput, error) {
	var output backup.GetBackupPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.GetBackupPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) GetBackupPlanAsync(ctx workflow.Context, input *backup.GetBackupPlanInput) *BackupGetBackupPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.GetBackupPlan", input)
	return &BackupGetBackupPlanFuture{Future: future}
}

func (a *BackupStub) GetBackupPlanFromJSON(ctx workflow.Context, input *backup.GetBackupPlanFromJSONInput) (*backup.GetBackupPlanFromJSONOutput, error) {
	var output backup.GetBackupPlanFromJSONOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.GetBackupPlanFromJSON", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) GetBackupPlanFromJSONAsync(ctx workflow.Context, input *backup.GetBackupPlanFromJSONInput) *BackupGetBackupPlanFromJSONFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.GetBackupPlanFromJSON", input)
	return &BackupGetBackupPlanFromJSONFuture{Future: future}
}

func (a *BackupStub) GetBackupPlanFromTemplate(ctx workflow.Context, input *backup.GetBackupPlanFromTemplateInput) (*backup.GetBackupPlanFromTemplateOutput, error) {
	var output backup.GetBackupPlanFromTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.GetBackupPlanFromTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) GetBackupPlanFromTemplateAsync(ctx workflow.Context, input *backup.GetBackupPlanFromTemplateInput) *BackupGetBackupPlanFromTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.GetBackupPlanFromTemplate", input)
	return &BackupGetBackupPlanFromTemplateFuture{Future: future}
}

func (a *BackupStub) GetBackupSelection(ctx workflow.Context, input *backup.GetBackupSelectionInput) (*backup.GetBackupSelectionOutput, error) {
	var output backup.GetBackupSelectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.GetBackupSelection", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) GetBackupSelectionAsync(ctx workflow.Context, input *backup.GetBackupSelectionInput) *BackupGetBackupSelectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.GetBackupSelection", input)
	return &BackupGetBackupSelectionFuture{Future: future}
}

func (a *BackupStub) GetBackupVaultAccessPolicy(ctx workflow.Context, input *backup.GetBackupVaultAccessPolicyInput) (*backup.GetBackupVaultAccessPolicyOutput, error) {
	var output backup.GetBackupVaultAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.GetBackupVaultAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) GetBackupVaultAccessPolicyAsync(ctx workflow.Context, input *backup.GetBackupVaultAccessPolicyInput) *BackupGetBackupVaultAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.GetBackupVaultAccessPolicy", input)
	return &BackupGetBackupVaultAccessPolicyFuture{Future: future}
}

func (a *BackupStub) GetBackupVaultNotifications(ctx workflow.Context, input *backup.GetBackupVaultNotificationsInput) (*backup.GetBackupVaultNotificationsOutput, error) {
	var output backup.GetBackupVaultNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.GetBackupVaultNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) GetBackupVaultNotificationsAsync(ctx workflow.Context, input *backup.GetBackupVaultNotificationsInput) *BackupGetBackupVaultNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.GetBackupVaultNotifications", input)
	return &BackupGetBackupVaultNotificationsFuture{Future: future}
}

func (a *BackupStub) GetRecoveryPointRestoreMetadata(ctx workflow.Context, input *backup.GetRecoveryPointRestoreMetadataInput) (*backup.GetRecoveryPointRestoreMetadataOutput, error) {
	var output backup.GetRecoveryPointRestoreMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.GetRecoveryPointRestoreMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) GetRecoveryPointRestoreMetadataAsync(ctx workflow.Context, input *backup.GetRecoveryPointRestoreMetadataInput) *BackupGetRecoveryPointRestoreMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.GetRecoveryPointRestoreMetadata", input)
	return &BackupGetRecoveryPointRestoreMetadataFuture{Future: future}
}

func (a *BackupStub) GetSupportedResourceTypes(ctx workflow.Context, input *backup.GetSupportedResourceTypesInput) (*backup.GetSupportedResourceTypesOutput, error) {
	var output backup.GetSupportedResourceTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.GetSupportedResourceTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) GetSupportedResourceTypesAsync(ctx workflow.Context, input *backup.GetSupportedResourceTypesInput) *BackupGetSupportedResourceTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.GetSupportedResourceTypes", input)
	return &BackupGetSupportedResourceTypesFuture{Future: future}
}

func (a *BackupStub) ListBackupJobs(ctx workflow.Context, input *backup.ListBackupJobsInput) (*backup.ListBackupJobsOutput, error) {
	var output backup.ListBackupJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ListBackupJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ListBackupJobsAsync(ctx workflow.Context, input *backup.ListBackupJobsInput) *BackupListBackupJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ListBackupJobs", input)
	return &BackupListBackupJobsFuture{Future: future}
}

func (a *BackupStub) ListBackupPlanTemplates(ctx workflow.Context, input *backup.ListBackupPlanTemplatesInput) (*backup.ListBackupPlanTemplatesOutput, error) {
	var output backup.ListBackupPlanTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ListBackupPlanTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ListBackupPlanTemplatesAsync(ctx workflow.Context, input *backup.ListBackupPlanTemplatesInput) *BackupListBackupPlanTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ListBackupPlanTemplates", input)
	return &BackupListBackupPlanTemplatesFuture{Future: future}
}

func (a *BackupStub) ListBackupPlanVersions(ctx workflow.Context, input *backup.ListBackupPlanVersionsInput) (*backup.ListBackupPlanVersionsOutput, error) {
	var output backup.ListBackupPlanVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ListBackupPlanVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ListBackupPlanVersionsAsync(ctx workflow.Context, input *backup.ListBackupPlanVersionsInput) *BackupListBackupPlanVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ListBackupPlanVersions", input)
	return &BackupListBackupPlanVersionsFuture{Future: future}
}

func (a *BackupStub) ListBackupPlans(ctx workflow.Context, input *backup.ListBackupPlansInput) (*backup.ListBackupPlansOutput, error) {
	var output backup.ListBackupPlansOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ListBackupPlans", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ListBackupPlansAsync(ctx workflow.Context, input *backup.ListBackupPlansInput) *BackupListBackupPlansFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ListBackupPlans", input)
	return &BackupListBackupPlansFuture{Future: future}
}

func (a *BackupStub) ListBackupSelections(ctx workflow.Context, input *backup.ListBackupSelectionsInput) (*backup.ListBackupSelectionsOutput, error) {
	var output backup.ListBackupSelectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ListBackupSelections", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ListBackupSelectionsAsync(ctx workflow.Context, input *backup.ListBackupSelectionsInput) *BackupListBackupSelectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ListBackupSelections", input)
	return &BackupListBackupSelectionsFuture{Future: future}
}

func (a *BackupStub) ListBackupVaults(ctx workflow.Context, input *backup.ListBackupVaultsInput) (*backup.ListBackupVaultsOutput, error) {
	var output backup.ListBackupVaultsOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ListBackupVaults", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ListBackupVaultsAsync(ctx workflow.Context, input *backup.ListBackupVaultsInput) *BackupListBackupVaultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ListBackupVaults", input)
	return &BackupListBackupVaultsFuture{Future: future}
}

func (a *BackupStub) ListCopyJobs(ctx workflow.Context, input *backup.ListCopyJobsInput) (*backup.ListCopyJobsOutput, error) {
	var output backup.ListCopyJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ListCopyJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ListCopyJobsAsync(ctx workflow.Context, input *backup.ListCopyJobsInput) *BackupListCopyJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ListCopyJobs", input)
	return &BackupListCopyJobsFuture{Future: future}
}

func (a *BackupStub) ListProtectedResources(ctx workflow.Context, input *backup.ListProtectedResourcesInput) (*backup.ListProtectedResourcesOutput, error) {
	var output backup.ListProtectedResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ListProtectedResources", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ListProtectedResourcesAsync(ctx workflow.Context, input *backup.ListProtectedResourcesInput) *BackupListProtectedResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ListProtectedResources", input)
	return &BackupListProtectedResourcesFuture{Future: future}
}

func (a *BackupStub) ListRecoveryPointsByBackupVault(ctx workflow.Context, input *backup.ListRecoveryPointsByBackupVaultInput) (*backup.ListRecoveryPointsByBackupVaultOutput, error) {
	var output backup.ListRecoveryPointsByBackupVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ListRecoveryPointsByBackupVault", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ListRecoveryPointsByBackupVaultAsync(ctx workflow.Context, input *backup.ListRecoveryPointsByBackupVaultInput) *BackupListRecoveryPointsByBackupVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ListRecoveryPointsByBackupVault", input)
	return &BackupListRecoveryPointsByBackupVaultFuture{Future: future}
}

func (a *BackupStub) ListRecoveryPointsByResource(ctx workflow.Context, input *backup.ListRecoveryPointsByResourceInput) (*backup.ListRecoveryPointsByResourceOutput, error) {
	var output backup.ListRecoveryPointsByResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ListRecoveryPointsByResource", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ListRecoveryPointsByResourceAsync(ctx workflow.Context, input *backup.ListRecoveryPointsByResourceInput) *BackupListRecoveryPointsByResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ListRecoveryPointsByResource", input)
	return &BackupListRecoveryPointsByResourceFuture{Future: future}
}

func (a *BackupStub) ListRestoreJobs(ctx workflow.Context, input *backup.ListRestoreJobsInput) (*backup.ListRestoreJobsOutput, error) {
	var output backup.ListRestoreJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ListRestoreJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ListRestoreJobsAsync(ctx workflow.Context, input *backup.ListRestoreJobsInput) *BackupListRestoreJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ListRestoreJobs", input)
	return &BackupListRestoreJobsFuture{Future: future}
}

func (a *BackupStub) ListTags(ctx workflow.Context, input *backup.ListTagsInput) (*backup.ListTagsOutput, error) {
	var output backup.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) ListTagsAsync(ctx workflow.Context, input *backup.ListTagsInput) *BackupListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.ListTags", input)
	return &BackupListTagsFuture{Future: future}
}

func (a *BackupStub) PutBackupVaultAccessPolicy(ctx workflow.Context, input *backup.PutBackupVaultAccessPolicyInput) (*backup.PutBackupVaultAccessPolicyOutput, error) {
	var output backup.PutBackupVaultAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.PutBackupVaultAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) PutBackupVaultAccessPolicyAsync(ctx workflow.Context, input *backup.PutBackupVaultAccessPolicyInput) *BackupPutBackupVaultAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.PutBackupVaultAccessPolicy", input)
	return &BackupPutBackupVaultAccessPolicyFuture{Future: future}
}

func (a *BackupStub) PutBackupVaultNotifications(ctx workflow.Context, input *backup.PutBackupVaultNotificationsInput) (*backup.PutBackupVaultNotificationsOutput, error) {
	var output backup.PutBackupVaultNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.PutBackupVaultNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) PutBackupVaultNotificationsAsync(ctx workflow.Context, input *backup.PutBackupVaultNotificationsInput) *BackupPutBackupVaultNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.PutBackupVaultNotifications", input)
	return &BackupPutBackupVaultNotificationsFuture{Future: future}
}

func (a *BackupStub) StartBackupJob(ctx workflow.Context, input *backup.StartBackupJobInput) (*backup.StartBackupJobOutput, error) {
	var output backup.StartBackupJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.StartBackupJob", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) StartBackupJobAsync(ctx workflow.Context, input *backup.StartBackupJobInput) *BackupStartBackupJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.StartBackupJob", input)
	return &BackupStartBackupJobFuture{Future: future}
}

func (a *BackupStub) StartCopyJob(ctx workflow.Context, input *backup.StartCopyJobInput) (*backup.StartCopyJobOutput, error) {
	var output backup.StartCopyJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.StartCopyJob", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) StartCopyJobAsync(ctx workflow.Context, input *backup.StartCopyJobInput) *BackupStartCopyJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.StartCopyJob", input)
	return &BackupStartCopyJobFuture{Future: future}
}

func (a *BackupStub) StartRestoreJob(ctx workflow.Context, input *backup.StartRestoreJobInput) (*backup.StartRestoreJobOutput, error) {
	var output backup.StartRestoreJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.StartRestoreJob", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) StartRestoreJobAsync(ctx workflow.Context, input *backup.StartRestoreJobInput) *BackupStartRestoreJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.StartRestoreJob", input)
	return &BackupStartRestoreJobFuture{Future: future}
}

func (a *BackupStub) StopBackupJob(ctx workflow.Context, input *backup.StopBackupJobInput) (*backup.StopBackupJobOutput, error) {
	var output backup.StopBackupJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.StopBackupJob", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) StopBackupJobAsync(ctx workflow.Context, input *backup.StopBackupJobInput) *BackupStopBackupJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.StopBackupJob", input)
	return &BackupStopBackupJobFuture{Future: future}
}

func (a *BackupStub) TagResource(ctx workflow.Context, input *backup.TagResourceInput) (*backup.TagResourceOutput, error) {
	var output backup.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) TagResourceAsync(ctx workflow.Context, input *backup.TagResourceInput) *BackupTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.TagResource", input)
	return &BackupTagResourceFuture{Future: future}
}

func (a *BackupStub) UntagResource(ctx workflow.Context, input *backup.UntagResourceInput) (*backup.UntagResourceOutput, error) {
	var output backup.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) UntagResourceAsync(ctx workflow.Context, input *backup.UntagResourceInput) *BackupUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.UntagResource", input)
	return &BackupUntagResourceFuture{Future: future}
}

func (a *BackupStub) UpdateBackupPlan(ctx workflow.Context, input *backup.UpdateBackupPlanInput) (*backup.UpdateBackupPlanOutput, error) {
	var output backup.UpdateBackupPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.UpdateBackupPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) UpdateBackupPlanAsync(ctx workflow.Context, input *backup.UpdateBackupPlanInput) *BackupUpdateBackupPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.UpdateBackupPlan", input)
	return &BackupUpdateBackupPlanFuture{Future: future}
}

func (a *BackupStub) UpdateRecoveryPointLifecycle(ctx workflow.Context, input *backup.UpdateRecoveryPointLifecycleInput) (*backup.UpdateRecoveryPointLifecycleOutput, error) {
	var output backup.UpdateRecoveryPointLifecycleOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.UpdateRecoveryPointLifecycle", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) UpdateRecoveryPointLifecycleAsync(ctx workflow.Context, input *backup.UpdateRecoveryPointLifecycleInput) *BackupUpdateRecoveryPointLifecycleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.UpdateRecoveryPointLifecycle", input)
	return &BackupUpdateRecoveryPointLifecycleFuture{Future: future}
}

func (a *BackupStub) UpdateRegionSettings(ctx workflow.Context, input *backup.UpdateRegionSettingsInput) (*backup.UpdateRegionSettingsOutput, error) {
	var output backup.UpdateRegionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.backup.UpdateRegionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *BackupStub) UpdateRegionSettingsAsync(ctx workflow.Context, input *backup.UpdateRegionSettingsInput) *BackupUpdateRegionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.backup.UpdateRegionSettings", input)
	return &BackupUpdateRegionSettingsFuture{Future: future}
}
