// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/ssm"
	"go.temporal.io/sdk/workflow"
)

type SSMClient interface {
	AddTagsToResource(ctx workflow.Context, input *ssm.AddTagsToResourceInput) (*ssm.AddTagsToResourceOutput, error)
	AddTagsToResourceAsync(ctx workflow.Context, input *ssm.AddTagsToResourceInput) *SSMAddTagsToResourceFuture

	CancelCommand(ctx workflow.Context, input *ssm.CancelCommandInput) (*ssm.CancelCommandOutput, error)
	CancelCommandAsync(ctx workflow.Context, input *ssm.CancelCommandInput) *SSMCancelCommandFuture

	CancelMaintenanceWindowExecution(ctx workflow.Context, input *ssm.CancelMaintenanceWindowExecutionInput) (*ssm.CancelMaintenanceWindowExecutionOutput, error)
	CancelMaintenanceWindowExecutionAsync(ctx workflow.Context, input *ssm.CancelMaintenanceWindowExecutionInput) *SSMCancelMaintenanceWindowExecutionFuture

	CreateActivation(ctx workflow.Context, input *ssm.CreateActivationInput) (*ssm.CreateActivationOutput, error)
	CreateActivationAsync(ctx workflow.Context, input *ssm.CreateActivationInput) *SSMCreateActivationFuture

	CreateAssociation(ctx workflow.Context, input *ssm.CreateAssociationInput) (*ssm.CreateAssociationOutput, error)
	CreateAssociationAsync(ctx workflow.Context, input *ssm.CreateAssociationInput) *SSMCreateAssociationFuture

	CreateAssociationBatch(ctx workflow.Context, input *ssm.CreateAssociationBatchInput) (*ssm.CreateAssociationBatchOutput, error)
	CreateAssociationBatchAsync(ctx workflow.Context, input *ssm.CreateAssociationBatchInput) *SSMCreateAssociationBatchFuture

	CreateDocument(ctx workflow.Context, input *ssm.CreateDocumentInput) (*ssm.CreateDocumentOutput, error)
	CreateDocumentAsync(ctx workflow.Context, input *ssm.CreateDocumentInput) *SSMCreateDocumentFuture

	CreateMaintenanceWindow(ctx workflow.Context, input *ssm.CreateMaintenanceWindowInput) (*ssm.CreateMaintenanceWindowOutput, error)
	CreateMaintenanceWindowAsync(ctx workflow.Context, input *ssm.CreateMaintenanceWindowInput) *SSMCreateMaintenanceWindowFuture

	CreateOpsItem(ctx workflow.Context, input *ssm.CreateOpsItemInput) (*ssm.CreateOpsItemOutput, error)
	CreateOpsItemAsync(ctx workflow.Context, input *ssm.CreateOpsItemInput) *SSMCreateOpsItemFuture

	CreatePatchBaseline(ctx workflow.Context, input *ssm.CreatePatchBaselineInput) (*ssm.CreatePatchBaselineOutput, error)
	CreatePatchBaselineAsync(ctx workflow.Context, input *ssm.CreatePatchBaselineInput) *SSMCreatePatchBaselineFuture

	CreateResourceDataSync(ctx workflow.Context, input *ssm.CreateResourceDataSyncInput) (*ssm.CreateResourceDataSyncOutput, error)
	CreateResourceDataSyncAsync(ctx workflow.Context, input *ssm.CreateResourceDataSyncInput) *SSMCreateResourceDataSyncFuture

	DeleteActivation(ctx workflow.Context, input *ssm.DeleteActivationInput) (*ssm.DeleteActivationOutput, error)
	DeleteActivationAsync(ctx workflow.Context, input *ssm.DeleteActivationInput) *SSMDeleteActivationFuture

	DeleteAssociation(ctx workflow.Context, input *ssm.DeleteAssociationInput) (*ssm.DeleteAssociationOutput, error)
	DeleteAssociationAsync(ctx workflow.Context, input *ssm.DeleteAssociationInput) *SSMDeleteAssociationFuture

	DeleteDocument(ctx workflow.Context, input *ssm.DeleteDocumentInput) (*ssm.DeleteDocumentOutput, error)
	DeleteDocumentAsync(ctx workflow.Context, input *ssm.DeleteDocumentInput) *SSMDeleteDocumentFuture

	DeleteInventory(ctx workflow.Context, input *ssm.DeleteInventoryInput) (*ssm.DeleteInventoryOutput, error)
	DeleteInventoryAsync(ctx workflow.Context, input *ssm.DeleteInventoryInput) *SSMDeleteInventoryFuture

	DeleteMaintenanceWindow(ctx workflow.Context, input *ssm.DeleteMaintenanceWindowInput) (*ssm.DeleteMaintenanceWindowOutput, error)
	DeleteMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeleteMaintenanceWindowInput) *SSMDeleteMaintenanceWindowFuture

	DeleteParameter(ctx workflow.Context, input *ssm.DeleteParameterInput) (*ssm.DeleteParameterOutput, error)
	DeleteParameterAsync(ctx workflow.Context, input *ssm.DeleteParameterInput) *SSMDeleteParameterFuture

	DeleteParameters(ctx workflow.Context, input *ssm.DeleteParametersInput) (*ssm.DeleteParametersOutput, error)
	DeleteParametersAsync(ctx workflow.Context, input *ssm.DeleteParametersInput) *SSMDeleteParametersFuture

	DeletePatchBaseline(ctx workflow.Context, input *ssm.DeletePatchBaselineInput) (*ssm.DeletePatchBaselineOutput, error)
	DeletePatchBaselineAsync(ctx workflow.Context, input *ssm.DeletePatchBaselineInput) *SSMDeletePatchBaselineFuture

	DeleteResourceDataSync(ctx workflow.Context, input *ssm.DeleteResourceDataSyncInput) (*ssm.DeleteResourceDataSyncOutput, error)
	DeleteResourceDataSyncAsync(ctx workflow.Context, input *ssm.DeleteResourceDataSyncInput) *SSMDeleteResourceDataSyncFuture

	DeregisterManagedInstance(ctx workflow.Context, input *ssm.DeregisterManagedInstanceInput) (*ssm.DeregisterManagedInstanceOutput, error)
	DeregisterManagedInstanceAsync(ctx workflow.Context, input *ssm.DeregisterManagedInstanceInput) *SSMDeregisterManagedInstanceFuture

	DeregisterPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.DeregisterPatchBaselineForPatchGroupInput) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error)
	DeregisterPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.DeregisterPatchBaselineForPatchGroupInput) *SSMDeregisterPatchBaselineForPatchGroupFuture

	DeregisterTargetFromMaintenanceWindow(ctx workflow.Context, input *ssm.DeregisterTargetFromMaintenanceWindowInput) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error)
	DeregisterTargetFromMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeregisterTargetFromMaintenanceWindowInput) *SSMDeregisterTargetFromMaintenanceWindowFuture

	DeregisterTaskFromMaintenanceWindow(ctx workflow.Context, input *ssm.DeregisterTaskFromMaintenanceWindowInput) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error)
	DeregisterTaskFromMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeregisterTaskFromMaintenanceWindowInput) *SSMDeregisterTaskFromMaintenanceWindowFuture

	DescribeActivations(ctx workflow.Context, input *ssm.DescribeActivationsInput) (*ssm.DescribeActivationsOutput, error)
	DescribeActivationsAsync(ctx workflow.Context, input *ssm.DescribeActivationsInput) *SSMDescribeActivationsFuture

	DescribeAssociation(ctx workflow.Context, input *ssm.DescribeAssociationInput) (*ssm.DescribeAssociationOutput, error)
	DescribeAssociationAsync(ctx workflow.Context, input *ssm.DescribeAssociationInput) *SSMDescribeAssociationFuture

	DescribeAssociationExecutionTargets(ctx workflow.Context, input *ssm.DescribeAssociationExecutionTargetsInput) (*ssm.DescribeAssociationExecutionTargetsOutput, error)
	DescribeAssociationExecutionTargetsAsync(ctx workflow.Context, input *ssm.DescribeAssociationExecutionTargetsInput) *SSMDescribeAssociationExecutionTargetsFuture

	DescribeAssociationExecutions(ctx workflow.Context, input *ssm.DescribeAssociationExecutionsInput) (*ssm.DescribeAssociationExecutionsOutput, error)
	DescribeAssociationExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAssociationExecutionsInput) *SSMDescribeAssociationExecutionsFuture

	DescribeAutomationExecutions(ctx workflow.Context, input *ssm.DescribeAutomationExecutionsInput) (*ssm.DescribeAutomationExecutionsOutput, error)
	DescribeAutomationExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAutomationExecutionsInput) *SSMDescribeAutomationExecutionsFuture

	DescribeAutomationStepExecutions(ctx workflow.Context, input *ssm.DescribeAutomationStepExecutionsInput) (*ssm.DescribeAutomationStepExecutionsOutput, error)
	DescribeAutomationStepExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAutomationStepExecutionsInput) *SSMDescribeAutomationStepExecutionsFuture

	DescribeAvailablePatches(ctx workflow.Context, input *ssm.DescribeAvailablePatchesInput) (*ssm.DescribeAvailablePatchesOutput, error)
	DescribeAvailablePatchesAsync(ctx workflow.Context, input *ssm.DescribeAvailablePatchesInput) *SSMDescribeAvailablePatchesFuture

	DescribeDocument(ctx workflow.Context, input *ssm.DescribeDocumentInput) (*ssm.DescribeDocumentOutput, error)
	DescribeDocumentAsync(ctx workflow.Context, input *ssm.DescribeDocumentInput) *SSMDescribeDocumentFuture

	DescribeDocumentPermission(ctx workflow.Context, input *ssm.DescribeDocumentPermissionInput) (*ssm.DescribeDocumentPermissionOutput, error)
	DescribeDocumentPermissionAsync(ctx workflow.Context, input *ssm.DescribeDocumentPermissionInput) *SSMDescribeDocumentPermissionFuture

	DescribeEffectiveInstanceAssociations(ctx workflow.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error)
	DescribeEffectiveInstanceAssociationsAsync(ctx workflow.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput) *SSMDescribeEffectiveInstanceAssociationsFuture

	DescribeEffectivePatchesForPatchBaseline(ctx workflow.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error)
	DescribeEffectivePatchesForPatchBaselineAsync(ctx workflow.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput) *SSMDescribeEffectivePatchesForPatchBaselineFuture

	DescribeInstanceAssociationsStatus(ctx workflow.Context, input *ssm.DescribeInstanceAssociationsStatusInput) (*ssm.DescribeInstanceAssociationsStatusOutput, error)
	DescribeInstanceAssociationsStatusAsync(ctx workflow.Context, input *ssm.DescribeInstanceAssociationsStatusInput) *SSMDescribeInstanceAssociationsStatusFuture

	DescribeInstanceInformation(ctx workflow.Context, input *ssm.DescribeInstanceInformationInput) (*ssm.DescribeInstanceInformationOutput, error)
	DescribeInstanceInformationAsync(ctx workflow.Context, input *ssm.DescribeInstanceInformationInput) *SSMDescribeInstanceInformationFuture

	DescribeInstancePatchStates(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesInput) (*ssm.DescribeInstancePatchStatesOutput, error)
	DescribeInstancePatchStatesAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesInput) *SSMDescribeInstancePatchStatesFuture

	DescribeInstancePatchStatesForPatchGroup(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error)
	DescribeInstancePatchStatesForPatchGroupAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput) *SSMDescribeInstancePatchStatesForPatchGroupFuture

	DescribeInstancePatches(ctx workflow.Context, input *ssm.DescribeInstancePatchesInput) (*ssm.DescribeInstancePatchesOutput, error)
	DescribeInstancePatchesAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchesInput) *SSMDescribeInstancePatchesFuture

	DescribeInventoryDeletions(ctx workflow.Context, input *ssm.DescribeInventoryDeletionsInput) (*ssm.DescribeInventoryDeletionsOutput, error)
	DescribeInventoryDeletionsAsync(ctx workflow.Context, input *ssm.DescribeInventoryDeletionsInput) *SSMDescribeInventoryDeletionsFuture

	DescribeMaintenanceWindowExecutionTaskInvocations(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error)
	DescribeMaintenanceWindowExecutionTaskInvocationsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) *SSMDescribeMaintenanceWindowExecutionTaskInvocationsFuture

	DescribeMaintenanceWindowExecutionTasks(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error)
	DescribeMaintenanceWindowExecutionTasksAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput) *SSMDescribeMaintenanceWindowExecutionTasksFuture

	DescribeMaintenanceWindowExecutions(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error)
	DescribeMaintenanceWindowExecutionsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput) *SSMDescribeMaintenanceWindowExecutionsFuture

	DescribeMaintenanceWindowSchedule(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowScheduleInput) (*ssm.DescribeMaintenanceWindowScheduleOutput, error)
	DescribeMaintenanceWindowScheduleAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowScheduleInput) *SSMDescribeMaintenanceWindowScheduleFuture

	DescribeMaintenanceWindowTargets(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTargetsInput) (*ssm.DescribeMaintenanceWindowTargetsOutput, error)
	DescribeMaintenanceWindowTargetsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTargetsInput) *SSMDescribeMaintenanceWindowTargetsFuture

	DescribeMaintenanceWindowTasks(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTasksInput) (*ssm.DescribeMaintenanceWindowTasksOutput, error)
	DescribeMaintenanceWindowTasksAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTasksInput) *SSMDescribeMaintenanceWindowTasksFuture

	DescribeMaintenanceWindows(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsInput) (*ssm.DescribeMaintenanceWindowsOutput, error)
	DescribeMaintenanceWindowsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsInput) *SSMDescribeMaintenanceWindowsFuture

	DescribeMaintenanceWindowsForTarget(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error)
	DescribeMaintenanceWindowsForTargetAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput) *SSMDescribeMaintenanceWindowsForTargetFuture

	DescribeOpsItems(ctx workflow.Context, input *ssm.DescribeOpsItemsInput) (*ssm.DescribeOpsItemsOutput, error)
	DescribeOpsItemsAsync(ctx workflow.Context, input *ssm.DescribeOpsItemsInput) *SSMDescribeOpsItemsFuture

	DescribeParameters(ctx workflow.Context, input *ssm.DescribeParametersInput) (*ssm.DescribeParametersOutput, error)
	DescribeParametersAsync(ctx workflow.Context, input *ssm.DescribeParametersInput) *SSMDescribeParametersFuture

	DescribePatchBaselines(ctx workflow.Context, input *ssm.DescribePatchBaselinesInput) (*ssm.DescribePatchBaselinesOutput, error)
	DescribePatchBaselinesAsync(ctx workflow.Context, input *ssm.DescribePatchBaselinesInput) *SSMDescribePatchBaselinesFuture

	DescribePatchGroupState(ctx workflow.Context, input *ssm.DescribePatchGroupStateInput) (*ssm.DescribePatchGroupStateOutput, error)
	DescribePatchGroupStateAsync(ctx workflow.Context, input *ssm.DescribePatchGroupStateInput) *SSMDescribePatchGroupStateFuture

	DescribePatchGroups(ctx workflow.Context, input *ssm.DescribePatchGroupsInput) (*ssm.DescribePatchGroupsOutput, error)
	DescribePatchGroupsAsync(ctx workflow.Context, input *ssm.DescribePatchGroupsInput) *SSMDescribePatchGroupsFuture

	DescribePatchProperties(ctx workflow.Context, input *ssm.DescribePatchPropertiesInput) (*ssm.DescribePatchPropertiesOutput, error)
	DescribePatchPropertiesAsync(ctx workflow.Context, input *ssm.DescribePatchPropertiesInput) *SSMDescribePatchPropertiesFuture

	DescribeSessions(ctx workflow.Context, input *ssm.DescribeSessionsInput) (*ssm.DescribeSessionsOutput, error)
	DescribeSessionsAsync(ctx workflow.Context, input *ssm.DescribeSessionsInput) *SSMDescribeSessionsFuture

	GetAutomationExecution(ctx workflow.Context, input *ssm.GetAutomationExecutionInput) (*ssm.GetAutomationExecutionOutput, error)
	GetAutomationExecutionAsync(ctx workflow.Context, input *ssm.GetAutomationExecutionInput) *SSMGetAutomationExecutionFuture

	GetCalendarState(ctx workflow.Context, input *ssm.GetCalendarStateInput) (*ssm.GetCalendarStateOutput, error)
	GetCalendarStateAsync(ctx workflow.Context, input *ssm.GetCalendarStateInput) *SSMGetCalendarStateFuture

	GetCommandInvocation(ctx workflow.Context, input *ssm.GetCommandInvocationInput) (*ssm.GetCommandInvocationOutput, error)
	GetCommandInvocationAsync(ctx workflow.Context, input *ssm.GetCommandInvocationInput) *SSMGetCommandInvocationFuture

	GetConnectionStatus(ctx workflow.Context, input *ssm.GetConnectionStatusInput) (*ssm.GetConnectionStatusOutput, error)
	GetConnectionStatusAsync(ctx workflow.Context, input *ssm.GetConnectionStatusInput) *SSMGetConnectionStatusFuture

	GetDefaultPatchBaseline(ctx workflow.Context, input *ssm.GetDefaultPatchBaselineInput) (*ssm.GetDefaultPatchBaselineOutput, error)
	GetDefaultPatchBaselineAsync(ctx workflow.Context, input *ssm.GetDefaultPatchBaselineInput) *SSMGetDefaultPatchBaselineFuture

	GetDeployablePatchSnapshotForInstance(ctx workflow.Context, input *ssm.GetDeployablePatchSnapshotForInstanceInput) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error)
	GetDeployablePatchSnapshotForInstanceAsync(ctx workflow.Context, input *ssm.GetDeployablePatchSnapshotForInstanceInput) *SSMGetDeployablePatchSnapshotForInstanceFuture

	GetDocument(ctx workflow.Context, input *ssm.GetDocumentInput) (*ssm.GetDocumentOutput, error)
	GetDocumentAsync(ctx workflow.Context, input *ssm.GetDocumentInput) *SSMGetDocumentFuture

	GetInventory(ctx workflow.Context, input *ssm.GetInventoryInput) (*ssm.GetInventoryOutput, error)
	GetInventoryAsync(ctx workflow.Context, input *ssm.GetInventoryInput) *SSMGetInventoryFuture

	GetInventorySchema(ctx workflow.Context, input *ssm.GetInventorySchemaInput) (*ssm.GetInventorySchemaOutput, error)
	GetInventorySchemaAsync(ctx workflow.Context, input *ssm.GetInventorySchemaInput) *SSMGetInventorySchemaFuture

	GetMaintenanceWindow(ctx workflow.Context, input *ssm.GetMaintenanceWindowInput) (*ssm.GetMaintenanceWindowOutput, error)
	GetMaintenanceWindowAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowInput) *SSMGetMaintenanceWindowFuture

	GetMaintenanceWindowExecution(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionInput) (*ssm.GetMaintenanceWindowExecutionOutput, error)
	GetMaintenanceWindowExecutionAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionInput) *SSMGetMaintenanceWindowExecutionFuture

	GetMaintenanceWindowExecutionTask(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInput) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error)
	GetMaintenanceWindowExecutionTaskAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInput) *SSMGetMaintenanceWindowExecutionTaskFuture

	GetMaintenanceWindowExecutionTaskInvocation(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error)
	GetMaintenanceWindowExecutionTaskInvocationAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) *SSMGetMaintenanceWindowExecutionTaskInvocationFuture

	GetMaintenanceWindowTask(ctx workflow.Context, input *ssm.GetMaintenanceWindowTaskInput) (*ssm.GetMaintenanceWindowTaskOutput, error)
	GetMaintenanceWindowTaskAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowTaskInput) *SSMGetMaintenanceWindowTaskFuture

	GetOpsItem(ctx workflow.Context, input *ssm.GetOpsItemInput) (*ssm.GetOpsItemOutput, error)
	GetOpsItemAsync(ctx workflow.Context, input *ssm.GetOpsItemInput) *SSMGetOpsItemFuture

	GetOpsSummary(ctx workflow.Context, input *ssm.GetOpsSummaryInput) (*ssm.GetOpsSummaryOutput, error)
	GetOpsSummaryAsync(ctx workflow.Context, input *ssm.GetOpsSummaryInput) *SSMGetOpsSummaryFuture

	GetParameter(ctx workflow.Context, input *ssm.GetParameterInput) (*ssm.GetParameterOutput, error)
	GetParameterAsync(ctx workflow.Context, input *ssm.GetParameterInput) *SSMGetParameterFuture

	GetParameterHistory(ctx workflow.Context, input *ssm.GetParameterHistoryInput) (*ssm.GetParameterHistoryOutput, error)
	GetParameterHistoryAsync(ctx workflow.Context, input *ssm.GetParameterHistoryInput) *SSMGetParameterHistoryFuture

	GetParameters(ctx workflow.Context, input *ssm.GetParametersInput) (*ssm.GetParametersOutput, error)
	GetParametersAsync(ctx workflow.Context, input *ssm.GetParametersInput) *SSMGetParametersFuture

	GetParametersByPath(ctx workflow.Context, input *ssm.GetParametersByPathInput) (*ssm.GetParametersByPathOutput, error)
	GetParametersByPathAsync(ctx workflow.Context, input *ssm.GetParametersByPathInput) *SSMGetParametersByPathFuture

	GetPatchBaseline(ctx workflow.Context, input *ssm.GetPatchBaselineInput) (*ssm.GetPatchBaselineOutput, error)
	GetPatchBaselineAsync(ctx workflow.Context, input *ssm.GetPatchBaselineInput) *SSMGetPatchBaselineFuture

	GetPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.GetPatchBaselineForPatchGroupInput) (*ssm.GetPatchBaselineForPatchGroupOutput, error)
	GetPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.GetPatchBaselineForPatchGroupInput) *SSMGetPatchBaselineForPatchGroupFuture

	GetServiceSetting(ctx workflow.Context, input *ssm.GetServiceSettingInput) (*ssm.GetServiceSettingOutput, error)
	GetServiceSettingAsync(ctx workflow.Context, input *ssm.GetServiceSettingInput) *SSMGetServiceSettingFuture

	LabelParameterVersion(ctx workflow.Context, input *ssm.LabelParameterVersionInput) (*ssm.LabelParameterVersionOutput, error)
	LabelParameterVersionAsync(ctx workflow.Context, input *ssm.LabelParameterVersionInput) *SSMLabelParameterVersionFuture

	ListAssociationVersions(ctx workflow.Context, input *ssm.ListAssociationVersionsInput) (*ssm.ListAssociationVersionsOutput, error)
	ListAssociationVersionsAsync(ctx workflow.Context, input *ssm.ListAssociationVersionsInput) *SSMListAssociationVersionsFuture

	ListAssociations(ctx workflow.Context, input *ssm.ListAssociationsInput) (*ssm.ListAssociationsOutput, error)
	ListAssociationsAsync(ctx workflow.Context, input *ssm.ListAssociationsInput) *SSMListAssociationsFuture

	ListCommandInvocations(ctx workflow.Context, input *ssm.ListCommandInvocationsInput) (*ssm.ListCommandInvocationsOutput, error)
	ListCommandInvocationsAsync(ctx workflow.Context, input *ssm.ListCommandInvocationsInput) *SSMListCommandInvocationsFuture

	ListCommands(ctx workflow.Context, input *ssm.ListCommandsInput) (*ssm.ListCommandsOutput, error)
	ListCommandsAsync(ctx workflow.Context, input *ssm.ListCommandsInput) *SSMListCommandsFuture

	ListComplianceItems(ctx workflow.Context, input *ssm.ListComplianceItemsInput) (*ssm.ListComplianceItemsOutput, error)
	ListComplianceItemsAsync(ctx workflow.Context, input *ssm.ListComplianceItemsInput) *SSMListComplianceItemsFuture

	ListComplianceSummaries(ctx workflow.Context, input *ssm.ListComplianceSummariesInput) (*ssm.ListComplianceSummariesOutput, error)
	ListComplianceSummariesAsync(ctx workflow.Context, input *ssm.ListComplianceSummariesInput) *SSMListComplianceSummariesFuture

	ListDocumentVersions(ctx workflow.Context, input *ssm.ListDocumentVersionsInput) (*ssm.ListDocumentVersionsOutput, error)
	ListDocumentVersionsAsync(ctx workflow.Context, input *ssm.ListDocumentVersionsInput) *SSMListDocumentVersionsFuture

	ListDocuments(ctx workflow.Context, input *ssm.ListDocumentsInput) (*ssm.ListDocumentsOutput, error)
	ListDocumentsAsync(ctx workflow.Context, input *ssm.ListDocumentsInput) *SSMListDocumentsFuture

	ListInventoryEntries(ctx workflow.Context, input *ssm.ListInventoryEntriesInput) (*ssm.ListInventoryEntriesOutput, error)
	ListInventoryEntriesAsync(ctx workflow.Context, input *ssm.ListInventoryEntriesInput) *SSMListInventoryEntriesFuture

	ListResourceComplianceSummaries(ctx workflow.Context, input *ssm.ListResourceComplianceSummariesInput) (*ssm.ListResourceComplianceSummariesOutput, error)
	ListResourceComplianceSummariesAsync(ctx workflow.Context, input *ssm.ListResourceComplianceSummariesInput) *SSMListResourceComplianceSummariesFuture

	ListResourceDataSync(ctx workflow.Context, input *ssm.ListResourceDataSyncInput) (*ssm.ListResourceDataSyncOutput, error)
	ListResourceDataSyncAsync(ctx workflow.Context, input *ssm.ListResourceDataSyncInput) *SSMListResourceDataSyncFuture

	ListTagsForResource(ctx workflow.Context, input *ssm.ListTagsForResourceInput) (*ssm.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *ssm.ListTagsForResourceInput) *SSMListTagsForResourceFuture

	ModifyDocumentPermission(ctx workflow.Context, input *ssm.ModifyDocumentPermissionInput) (*ssm.ModifyDocumentPermissionOutput, error)
	ModifyDocumentPermissionAsync(ctx workflow.Context, input *ssm.ModifyDocumentPermissionInput) *SSMModifyDocumentPermissionFuture

	PutComplianceItems(ctx workflow.Context, input *ssm.PutComplianceItemsInput) (*ssm.PutComplianceItemsOutput, error)
	PutComplianceItemsAsync(ctx workflow.Context, input *ssm.PutComplianceItemsInput) *SSMPutComplianceItemsFuture

	PutInventory(ctx workflow.Context, input *ssm.PutInventoryInput) (*ssm.PutInventoryOutput, error)
	PutInventoryAsync(ctx workflow.Context, input *ssm.PutInventoryInput) *SSMPutInventoryFuture

	PutParameter(ctx workflow.Context, input *ssm.PutParameterInput) (*ssm.PutParameterOutput, error)
	PutParameterAsync(ctx workflow.Context, input *ssm.PutParameterInput) *SSMPutParameterFuture

	RegisterDefaultPatchBaseline(ctx workflow.Context, input *ssm.RegisterDefaultPatchBaselineInput) (*ssm.RegisterDefaultPatchBaselineOutput, error)
	RegisterDefaultPatchBaselineAsync(ctx workflow.Context, input *ssm.RegisterDefaultPatchBaselineInput) *SSMRegisterDefaultPatchBaselineFuture

	RegisterPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.RegisterPatchBaselineForPatchGroupInput) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error)
	RegisterPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.RegisterPatchBaselineForPatchGroupInput) *SSMRegisterPatchBaselineForPatchGroupFuture

	RegisterTargetWithMaintenanceWindow(ctx workflow.Context, input *ssm.RegisterTargetWithMaintenanceWindowInput) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error)
	RegisterTargetWithMaintenanceWindowAsync(ctx workflow.Context, input *ssm.RegisterTargetWithMaintenanceWindowInput) *SSMRegisterTargetWithMaintenanceWindowFuture

	RegisterTaskWithMaintenanceWindow(ctx workflow.Context, input *ssm.RegisterTaskWithMaintenanceWindowInput) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error)
	RegisterTaskWithMaintenanceWindowAsync(ctx workflow.Context, input *ssm.RegisterTaskWithMaintenanceWindowInput) *SSMRegisterTaskWithMaintenanceWindowFuture

	RemoveTagsFromResource(ctx workflow.Context, input *ssm.RemoveTagsFromResourceInput) (*ssm.RemoveTagsFromResourceOutput, error)
	RemoveTagsFromResourceAsync(ctx workflow.Context, input *ssm.RemoveTagsFromResourceInput) *SSMRemoveTagsFromResourceFuture

	ResetServiceSetting(ctx workflow.Context, input *ssm.ResetServiceSettingInput) (*ssm.ResetServiceSettingOutput, error)
	ResetServiceSettingAsync(ctx workflow.Context, input *ssm.ResetServiceSettingInput) *SSMResetServiceSettingFuture

	ResumeSession(ctx workflow.Context, input *ssm.ResumeSessionInput) (*ssm.ResumeSessionOutput, error)
	ResumeSessionAsync(ctx workflow.Context, input *ssm.ResumeSessionInput) *SSMResumeSessionFuture

	SendAutomationSignal(ctx workflow.Context, input *ssm.SendAutomationSignalInput) (*ssm.SendAutomationSignalOutput, error)
	SendAutomationSignalAsync(ctx workflow.Context, input *ssm.SendAutomationSignalInput) *SSMSendAutomationSignalFuture

	SendCommand(ctx workflow.Context, input *ssm.SendCommandInput) (*ssm.SendCommandOutput, error)
	SendCommandAsync(ctx workflow.Context, input *ssm.SendCommandInput) *SSMSendCommandFuture

	StartAssociationsOnce(ctx workflow.Context, input *ssm.StartAssociationsOnceInput) (*ssm.StartAssociationsOnceOutput, error)
	StartAssociationsOnceAsync(ctx workflow.Context, input *ssm.StartAssociationsOnceInput) *SSMStartAssociationsOnceFuture

	StartAutomationExecution(ctx workflow.Context, input *ssm.StartAutomationExecutionInput) (*ssm.StartAutomationExecutionOutput, error)
	StartAutomationExecutionAsync(ctx workflow.Context, input *ssm.StartAutomationExecutionInput) *SSMStartAutomationExecutionFuture

	StartSession(ctx workflow.Context, input *ssm.StartSessionInput) (*ssm.StartSessionOutput, error)
	StartSessionAsync(ctx workflow.Context, input *ssm.StartSessionInput) *SSMStartSessionFuture

	StopAutomationExecution(ctx workflow.Context, input *ssm.StopAutomationExecutionInput) (*ssm.StopAutomationExecutionOutput, error)
	StopAutomationExecutionAsync(ctx workflow.Context, input *ssm.StopAutomationExecutionInput) *SSMStopAutomationExecutionFuture

	TerminateSession(ctx workflow.Context, input *ssm.TerminateSessionInput) (*ssm.TerminateSessionOutput, error)
	TerminateSessionAsync(ctx workflow.Context, input *ssm.TerminateSessionInput) *SSMTerminateSessionFuture

	UpdateAssociation(ctx workflow.Context, input *ssm.UpdateAssociationInput) (*ssm.UpdateAssociationOutput, error)
	UpdateAssociationAsync(ctx workflow.Context, input *ssm.UpdateAssociationInput) *SSMUpdateAssociationFuture

	UpdateAssociationStatus(ctx workflow.Context, input *ssm.UpdateAssociationStatusInput) (*ssm.UpdateAssociationStatusOutput, error)
	UpdateAssociationStatusAsync(ctx workflow.Context, input *ssm.UpdateAssociationStatusInput) *SSMUpdateAssociationStatusFuture

	UpdateDocument(ctx workflow.Context, input *ssm.UpdateDocumentInput) (*ssm.UpdateDocumentOutput, error)
	UpdateDocumentAsync(ctx workflow.Context, input *ssm.UpdateDocumentInput) *SSMUpdateDocumentFuture

	UpdateDocumentDefaultVersion(ctx workflow.Context, input *ssm.UpdateDocumentDefaultVersionInput) (*ssm.UpdateDocumentDefaultVersionOutput, error)
	UpdateDocumentDefaultVersionAsync(ctx workflow.Context, input *ssm.UpdateDocumentDefaultVersionInput) *SSMUpdateDocumentDefaultVersionFuture

	UpdateMaintenanceWindow(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowInput) (*ssm.UpdateMaintenanceWindowOutput, error)
	UpdateMaintenanceWindowAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowInput) *SSMUpdateMaintenanceWindowFuture

	UpdateMaintenanceWindowTarget(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTargetInput) (*ssm.UpdateMaintenanceWindowTargetOutput, error)
	UpdateMaintenanceWindowTargetAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTargetInput) *SSMUpdateMaintenanceWindowTargetFuture

	UpdateMaintenanceWindowTask(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTaskInput) (*ssm.UpdateMaintenanceWindowTaskOutput, error)
	UpdateMaintenanceWindowTaskAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTaskInput) *SSMUpdateMaintenanceWindowTaskFuture

	UpdateManagedInstanceRole(ctx workflow.Context, input *ssm.UpdateManagedInstanceRoleInput) (*ssm.UpdateManagedInstanceRoleOutput, error)
	UpdateManagedInstanceRoleAsync(ctx workflow.Context, input *ssm.UpdateManagedInstanceRoleInput) *SSMUpdateManagedInstanceRoleFuture

	UpdateOpsItem(ctx workflow.Context, input *ssm.UpdateOpsItemInput) (*ssm.UpdateOpsItemOutput, error)
	UpdateOpsItemAsync(ctx workflow.Context, input *ssm.UpdateOpsItemInput) *SSMUpdateOpsItemFuture

	UpdatePatchBaseline(ctx workflow.Context, input *ssm.UpdatePatchBaselineInput) (*ssm.UpdatePatchBaselineOutput, error)
	UpdatePatchBaselineAsync(ctx workflow.Context, input *ssm.UpdatePatchBaselineInput) *SSMUpdatePatchBaselineFuture

	UpdateResourceDataSync(ctx workflow.Context, input *ssm.UpdateResourceDataSyncInput) (*ssm.UpdateResourceDataSyncOutput, error)
	UpdateResourceDataSyncAsync(ctx workflow.Context, input *ssm.UpdateResourceDataSyncInput) *SSMUpdateResourceDataSyncFuture

	UpdateServiceSetting(ctx workflow.Context, input *ssm.UpdateServiceSettingInput) (*ssm.UpdateServiceSettingOutput, error)
	UpdateServiceSettingAsync(ctx workflow.Context, input *ssm.UpdateServiceSettingInput) *SSMUpdateServiceSettingFuture

	WaitUntilCommandExecuted(ctx workflow.Context, input *ssm.GetCommandInvocationInput) error
	WaitUntilCommandExecutedAsync(ctx workflow.Context, input *ssm.GetCommandInvocationInput) *VoidFuture
}

type SSMStub struct{}

func NewSSMStub() SSMClient {
	return &SSMStub{}
}

type SSMAddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMAddTagsToResourceFuture) Get(ctx workflow.Context) (*ssm.AddTagsToResourceOutput, error) {
	var output ssm.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMCancelCommandFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMCancelCommandFuture) Get(ctx workflow.Context) (*ssm.CancelCommandOutput, error) {
	var output ssm.CancelCommandOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMCancelMaintenanceWindowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMCancelMaintenanceWindowExecutionFuture) Get(ctx workflow.Context) (*ssm.CancelMaintenanceWindowExecutionOutput, error) {
	var output ssm.CancelMaintenanceWindowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMCreateActivationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMCreateActivationFuture) Get(ctx workflow.Context) (*ssm.CreateActivationOutput, error) {
	var output ssm.CreateActivationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMCreateAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMCreateAssociationFuture) Get(ctx workflow.Context) (*ssm.CreateAssociationOutput, error) {
	var output ssm.CreateAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMCreateAssociationBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMCreateAssociationBatchFuture) Get(ctx workflow.Context) (*ssm.CreateAssociationBatchOutput, error) {
	var output ssm.CreateAssociationBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMCreateDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMCreateDocumentFuture) Get(ctx workflow.Context) (*ssm.CreateDocumentOutput, error) {
	var output ssm.CreateDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMCreateMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMCreateMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.CreateMaintenanceWindowOutput, error) {
	var output ssm.CreateMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMCreateOpsItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMCreateOpsItemFuture) Get(ctx workflow.Context) (*ssm.CreateOpsItemOutput, error) {
	var output ssm.CreateOpsItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMCreatePatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMCreatePatchBaselineFuture) Get(ctx workflow.Context) (*ssm.CreatePatchBaselineOutput, error) {
	var output ssm.CreatePatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMCreateResourceDataSyncFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMCreateResourceDataSyncFuture) Get(ctx workflow.Context) (*ssm.CreateResourceDataSyncOutput, error) {
	var output ssm.CreateResourceDataSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeleteActivationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeleteActivationFuture) Get(ctx workflow.Context) (*ssm.DeleteActivationOutput, error) {
	var output ssm.DeleteActivationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeleteAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeleteAssociationFuture) Get(ctx workflow.Context) (*ssm.DeleteAssociationOutput, error) {
	var output ssm.DeleteAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeleteDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeleteDocumentFuture) Get(ctx workflow.Context) (*ssm.DeleteDocumentOutput, error) {
	var output ssm.DeleteDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeleteInventoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeleteInventoryFuture) Get(ctx workflow.Context) (*ssm.DeleteInventoryOutput, error) {
	var output ssm.DeleteInventoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeleteMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeleteMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.DeleteMaintenanceWindowOutput, error) {
	var output ssm.DeleteMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeleteParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeleteParameterFuture) Get(ctx workflow.Context) (*ssm.DeleteParameterOutput, error) {
	var output ssm.DeleteParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeleteParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeleteParametersFuture) Get(ctx workflow.Context) (*ssm.DeleteParametersOutput, error) {
	var output ssm.DeleteParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeletePatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeletePatchBaselineFuture) Get(ctx workflow.Context) (*ssm.DeletePatchBaselineOutput, error) {
	var output ssm.DeletePatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeleteResourceDataSyncFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeleteResourceDataSyncFuture) Get(ctx workflow.Context) (*ssm.DeleteResourceDataSyncOutput, error) {
	var output ssm.DeleteResourceDataSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeregisterManagedInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeregisterManagedInstanceFuture) Get(ctx workflow.Context) (*ssm.DeregisterManagedInstanceOutput, error) {
	var output ssm.DeregisterManagedInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeregisterPatchBaselineForPatchGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeregisterPatchBaselineForPatchGroupFuture) Get(ctx workflow.Context) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error) {
	var output ssm.DeregisterPatchBaselineForPatchGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeregisterTargetFromMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeregisterTargetFromMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error) {
	var output ssm.DeregisterTargetFromMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDeregisterTaskFromMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDeregisterTaskFromMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error) {
	var output ssm.DeregisterTaskFromMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeActivationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeActivationsFuture) Get(ctx workflow.Context) (*ssm.DescribeActivationsOutput, error) {
	var output ssm.DescribeActivationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeAssociationFuture) Get(ctx workflow.Context) (*ssm.DescribeAssociationOutput, error) {
	var output ssm.DescribeAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeAssociationExecutionTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeAssociationExecutionTargetsFuture) Get(ctx workflow.Context) (*ssm.DescribeAssociationExecutionTargetsOutput, error) {
	var output ssm.DescribeAssociationExecutionTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeAssociationExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeAssociationExecutionsFuture) Get(ctx workflow.Context) (*ssm.DescribeAssociationExecutionsOutput, error) {
	var output ssm.DescribeAssociationExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeAutomationExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeAutomationExecutionsFuture) Get(ctx workflow.Context) (*ssm.DescribeAutomationExecutionsOutput, error) {
	var output ssm.DescribeAutomationExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeAutomationStepExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeAutomationStepExecutionsFuture) Get(ctx workflow.Context) (*ssm.DescribeAutomationStepExecutionsOutput, error) {
	var output ssm.DescribeAutomationStepExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeAvailablePatchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeAvailablePatchesFuture) Get(ctx workflow.Context) (*ssm.DescribeAvailablePatchesOutput, error) {
	var output ssm.DescribeAvailablePatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeDocumentFuture) Get(ctx workflow.Context) (*ssm.DescribeDocumentOutput, error) {
	var output ssm.DescribeDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeDocumentPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeDocumentPermissionFuture) Get(ctx workflow.Context) (*ssm.DescribeDocumentPermissionOutput, error) {
	var output ssm.DescribeDocumentPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeEffectiveInstanceAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeEffectiveInstanceAssociationsFuture) Get(ctx workflow.Context) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {
	var output ssm.DescribeEffectiveInstanceAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeEffectivePatchesForPatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeEffectivePatchesForPatchBaselineFuture) Get(ctx workflow.Context) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {
	var output ssm.DescribeEffectivePatchesForPatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeInstanceAssociationsStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeInstanceAssociationsStatusFuture) Get(ctx workflow.Context) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {
	var output ssm.DescribeInstanceAssociationsStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeInstanceInformationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeInstanceInformationFuture) Get(ctx workflow.Context) (*ssm.DescribeInstanceInformationOutput, error) {
	var output ssm.DescribeInstanceInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeInstancePatchStatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeInstancePatchStatesFuture) Get(ctx workflow.Context) (*ssm.DescribeInstancePatchStatesOutput, error) {
	var output ssm.DescribeInstancePatchStatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeInstancePatchStatesForPatchGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeInstancePatchStatesForPatchGroupFuture) Get(ctx workflow.Context) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {
	var output ssm.DescribeInstancePatchStatesForPatchGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeInstancePatchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeInstancePatchesFuture) Get(ctx workflow.Context) (*ssm.DescribeInstancePatchesOutput, error) {
	var output ssm.DescribeInstancePatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeInventoryDeletionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeInventoryDeletionsFuture) Get(ctx workflow.Context) (*ssm.DescribeInventoryDeletionsOutput, error) {
	var output ssm.DescribeInventoryDeletionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeMaintenanceWindowExecutionTaskInvocationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeMaintenanceWindowExecutionTaskInvocationsFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeMaintenanceWindowExecutionTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeMaintenanceWindowExecutionTasksFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeMaintenanceWindowExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeMaintenanceWindowExecutionsFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeMaintenanceWindowScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeMaintenanceWindowScheduleFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowScheduleOutput, error) {
	var output ssm.DescribeMaintenanceWindowScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeMaintenanceWindowTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeMaintenanceWindowTargetsFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {
	var output ssm.DescribeMaintenanceWindowTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeMaintenanceWindowTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeMaintenanceWindowTasksFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {
	var output ssm.DescribeMaintenanceWindowTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeMaintenanceWindowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeMaintenanceWindowsFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowsOutput, error) {
	var output ssm.DescribeMaintenanceWindowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeMaintenanceWindowsForTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeMaintenanceWindowsForTargetFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error) {
	var output ssm.DescribeMaintenanceWindowsForTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeOpsItemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeOpsItemsFuture) Get(ctx workflow.Context) (*ssm.DescribeOpsItemsOutput, error) {
	var output ssm.DescribeOpsItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeParametersFuture) Get(ctx workflow.Context) (*ssm.DescribeParametersOutput, error) {
	var output ssm.DescribeParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribePatchBaselinesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribePatchBaselinesFuture) Get(ctx workflow.Context) (*ssm.DescribePatchBaselinesOutput, error) {
	var output ssm.DescribePatchBaselinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribePatchGroupStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribePatchGroupStateFuture) Get(ctx workflow.Context) (*ssm.DescribePatchGroupStateOutput, error) {
	var output ssm.DescribePatchGroupStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribePatchGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribePatchGroupsFuture) Get(ctx workflow.Context) (*ssm.DescribePatchGroupsOutput, error) {
	var output ssm.DescribePatchGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribePatchPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribePatchPropertiesFuture) Get(ctx workflow.Context) (*ssm.DescribePatchPropertiesOutput, error) {
	var output ssm.DescribePatchPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMDescribeSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMDescribeSessionsFuture) Get(ctx workflow.Context) (*ssm.DescribeSessionsOutput, error) {
	var output ssm.DescribeSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetAutomationExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetAutomationExecutionFuture) Get(ctx workflow.Context) (*ssm.GetAutomationExecutionOutput, error) {
	var output ssm.GetAutomationExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetCalendarStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetCalendarStateFuture) Get(ctx workflow.Context) (*ssm.GetCalendarStateOutput, error) {
	var output ssm.GetCalendarStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetCommandInvocationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetCommandInvocationFuture) Get(ctx workflow.Context) (*ssm.GetCommandInvocationOutput, error) {
	var output ssm.GetCommandInvocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetConnectionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetConnectionStatusFuture) Get(ctx workflow.Context) (*ssm.GetConnectionStatusOutput, error) {
	var output ssm.GetConnectionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetDefaultPatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetDefaultPatchBaselineFuture) Get(ctx workflow.Context) (*ssm.GetDefaultPatchBaselineOutput, error) {
	var output ssm.GetDefaultPatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetDeployablePatchSnapshotForInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetDeployablePatchSnapshotForInstanceFuture) Get(ctx workflow.Context) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {
	var output ssm.GetDeployablePatchSnapshotForInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetDocumentFuture) Get(ctx workflow.Context) (*ssm.GetDocumentOutput, error) {
	var output ssm.GetDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetInventoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetInventoryFuture) Get(ctx workflow.Context) (*ssm.GetInventoryOutput, error) {
	var output ssm.GetInventoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetInventorySchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetInventorySchemaFuture) Get(ctx workflow.Context) (*ssm.GetInventorySchemaOutput, error) {
	var output ssm.GetInventorySchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowOutput, error) {
	var output ssm.GetMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetMaintenanceWindowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetMaintenanceWindowExecutionFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowExecutionOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetMaintenanceWindowExecutionTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetMaintenanceWindowExecutionTaskFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetMaintenanceWindowExecutionTaskInvocationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetMaintenanceWindowExecutionTaskInvocationFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetMaintenanceWindowTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetMaintenanceWindowTaskFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowTaskOutput, error) {
	var output ssm.GetMaintenanceWindowTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetOpsItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetOpsItemFuture) Get(ctx workflow.Context) (*ssm.GetOpsItemOutput, error) {
	var output ssm.GetOpsItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetOpsSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetOpsSummaryFuture) Get(ctx workflow.Context) (*ssm.GetOpsSummaryOutput, error) {
	var output ssm.GetOpsSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetParameterFuture) Get(ctx workflow.Context) (*ssm.GetParameterOutput, error) {
	var output ssm.GetParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetParameterHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetParameterHistoryFuture) Get(ctx workflow.Context) (*ssm.GetParameterHistoryOutput, error) {
	var output ssm.GetParameterHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetParametersFuture) Get(ctx workflow.Context) (*ssm.GetParametersOutput, error) {
	var output ssm.GetParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetParametersByPathFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetParametersByPathFuture) Get(ctx workflow.Context) (*ssm.GetParametersByPathOutput, error) {
	var output ssm.GetParametersByPathOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetPatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetPatchBaselineFuture) Get(ctx workflow.Context) (*ssm.GetPatchBaselineOutput, error) {
	var output ssm.GetPatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetPatchBaselineForPatchGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetPatchBaselineForPatchGroupFuture) Get(ctx workflow.Context) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {
	var output ssm.GetPatchBaselineForPatchGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMGetServiceSettingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMGetServiceSettingFuture) Get(ctx workflow.Context) (*ssm.GetServiceSettingOutput, error) {
	var output ssm.GetServiceSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMLabelParameterVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMLabelParameterVersionFuture) Get(ctx workflow.Context) (*ssm.LabelParameterVersionOutput, error) {
	var output ssm.LabelParameterVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMListAssociationVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMListAssociationVersionsFuture) Get(ctx workflow.Context) (*ssm.ListAssociationVersionsOutput, error) {
	var output ssm.ListAssociationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMListAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMListAssociationsFuture) Get(ctx workflow.Context) (*ssm.ListAssociationsOutput, error) {
	var output ssm.ListAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMListCommandInvocationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMListCommandInvocationsFuture) Get(ctx workflow.Context) (*ssm.ListCommandInvocationsOutput, error) {
	var output ssm.ListCommandInvocationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMListCommandsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMListCommandsFuture) Get(ctx workflow.Context) (*ssm.ListCommandsOutput, error) {
	var output ssm.ListCommandsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMListComplianceItemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMListComplianceItemsFuture) Get(ctx workflow.Context) (*ssm.ListComplianceItemsOutput, error) {
	var output ssm.ListComplianceItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMListComplianceSummariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMListComplianceSummariesFuture) Get(ctx workflow.Context) (*ssm.ListComplianceSummariesOutput, error) {
	var output ssm.ListComplianceSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMListDocumentVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMListDocumentVersionsFuture) Get(ctx workflow.Context) (*ssm.ListDocumentVersionsOutput, error) {
	var output ssm.ListDocumentVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMListDocumentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMListDocumentsFuture) Get(ctx workflow.Context) (*ssm.ListDocumentsOutput, error) {
	var output ssm.ListDocumentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMListInventoryEntriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMListInventoryEntriesFuture) Get(ctx workflow.Context) (*ssm.ListInventoryEntriesOutput, error) {
	var output ssm.ListInventoryEntriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMListResourceComplianceSummariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMListResourceComplianceSummariesFuture) Get(ctx workflow.Context) (*ssm.ListResourceComplianceSummariesOutput, error) {
	var output ssm.ListResourceComplianceSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMListResourceDataSyncFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMListResourceDataSyncFuture) Get(ctx workflow.Context) (*ssm.ListResourceDataSyncOutput, error) {
	var output ssm.ListResourceDataSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMListTagsForResourceFuture) Get(ctx workflow.Context) (*ssm.ListTagsForResourceOutput, error) {
	var output ssm.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMModifyDocumentPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMModifyDocumentPermissionFuture) Get(ctx workflow.Context) (*ssm.ModifyDocumentPermissionOutput, error) {
	var output ssm.ModifyDocumentPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMPutComplianceItemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMPutComplianceItemsFuture) Get(ctx workflow.Context) (*ssm.PutComplianceItemsOutput, error) {
	var output ssm.PutComplianceItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMPutInventoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMPutInventoryFuture) Get(ctx workflow.Context) (*ssm.PutInventoryOutput, error) {
	var output ssm.PutInventoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMPutParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMPutParameterFuture) Get(ctx workflow.Context) (*ssm.PutParameterOutput, error) {
	var output ssm.PutParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMRegisterDefaultPatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMRegisterDefaultPatchBaselineFuture) Get(ctx workflow.Context) (*ssm.RegisterDefaultPatchBaselineOutput, error) {
	var output ssm.RegisterDefaultPatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMRegisterPatchBaselineForPatchGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMRegisterPatchBaselineForPatchGroupFuture) Get(ctx workflow.Context) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error) {
	var output ssm.RegisterPatchBaselineForPatchGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMRegisterTargetWithMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMRegisterTargetWithMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error) {
	var output ssm.RegisterTargetWithMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMRegisterTaskWithMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMRegisterTaskWithMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error) {
	var output ssm.RegisterTaskWithMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMRemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*ssm.RemoveTagsFromResourceOutput, error) {
	var output ssm.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMResetServiceSettingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMResetServiceSettingFuture) Get(ctx workflow.Context) (*ssm.ResetServiceSettingOutput, error) {
	var output ssm.ResetServiceSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMResumeSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMResumeSessionFuture) Get(ctx workflow.Context) (*ssm.ResumeSessionOutput, error) {
	var output ssm.ResumeSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMSendAutomationSignalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMSendAutomationSignalFuture) Get(ctx workflow.Context) (*ssm.SendAutomationSignalOutput, error) {
	var output ssm.SendAutomationSignalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMSendCommandFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMSendCommandFuture) Get(ctx workflow.Context) (*ssm.SendCommandOutput, error) {
	var output ssm.SendCommandOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMStartAssociationsOnceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMStartAssociationsOnceFuture) Get(ctx workflow.Context) (*ssm.StartAssociationsOnceOutput, error) {
	var output ssm.StartAssociationsOnceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMStartAutomationExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMStartAutomationExecutionFuture) Get(ctx workflow.Context) (*ssm.StartAutomationExecutionOutput, error) {
	var output ssm.StartAutomationExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMStartSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMStartSessionFuture) Get(ctx workflow.Context) (*ssm.StartSessionOutput, error) {
	var output ssm.StartSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMStopAutomationExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMStopAutomationExecutionFuture) Get(ctx workflow.Context) (*ssm.StopAutomationExecutionOutput, error) {
	var output ssm.StopAutomationExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMTerminateSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMTerminateSessionFuture) Get(ctx workflow.Context) (*ssm.TerminateSessionOutput, error) {
	var output ssm.TerminateSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMUpdateAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMUpdateAssociationFuture) Get(ctx workflow.Context) (*ssm.UpdateAssociationOutput, error) {
	var output ssm.UpdateAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMUpdateAssociationStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMUpdateAssociationStatusFuture) Get(ctx workflow.Context) (*ssm.UpdateAssociationStatusOutput, error) {
	var output ssm.UpdateAssociationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMUpdateDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMUpdateDocumentFuture) Get(ctx workflow.Context) (*ssm.UpdateDocumentOutput, error) {
	var output ssm.UpdateDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMUpdateDocumentDefaultVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMUpdateDocumentDefaultVersionFuture) Get(ctx workflow.Context) (*ssm.UpdateDocumentDefaultVersionOutput, error) {
	var output ssm.UpdateDocumentDefaultVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMUpdateMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMUpdateMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.UpdateMaintenanceWindowOutput, error) {
	var output ssm.UpdateMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMUpdateMaintenanceWindowTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMUpdateMaintenanceWindowTargetFuture) Get(ctx workflow.Context) (*ssm.UpdateMaintenanceWindowTargetOutput, error) {
	var output ssm.UpdateMaintenanceWindowTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMUpdateMaintenanceWindowTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMUpdateMaintenanceWindowTaskFuture) Get(ctx workflow.Context) (*ssm.UpdateMaintenanceWindowTaskOutput, error) {
	var output ssm.UpdateMaintenanceWindowTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMUpdateManagedInstanceRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMUpdateManagedInstanceRoleFuture) Get(ctx workflow.Context) (*ssm.UpdateManagedInstanceRoleOutput, error) {
	var output ssm.UpdateManagedInstanceRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMUpdateOpsItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMUpdateOpsItemFuture) Get(ctx workflow.Context) (*ssm.UpdateOpsItemOutput, error) {
	var output ssm.UpdateOpsItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMUpdatePatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMUpdatePatchBaselineFuture) Get(ctx workflow.Context) (*ssm.UpdatePatchBaselineOutput, error) {
	var output ssm.UpdatePatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMUpdateResourceDataSyncFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMUpdateResourceDataSyncFuture) Get(ctx workflow.Context) (*ssm.UpdateResourceDataSyncOutput, error) {
	var output ssm.UpdateResourceDataSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSMUpdateServiceSettingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSMUpdateServiceSettingFuture) Get(ctx workflow.Context) (*ssm.UpdateServiceSettingOutput, error) {
	var output ssm.UpdateServiceSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) AddTagsToResource(ctx workflow.Context, input *ssm.AddTagsToResourceInput) (*ssm.AddTagsToResourceOutput, error) {
	var output ssm.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) AddTagsToResourceAsync(ctx workflow.Context, input *ssm.AddTagsToResourceInput) *SSMAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.AddTagsToResource", input)
	return &SSMAddTagsToResourceFuture{Future: future}
}

func (a *SSMStub) CancelCommand(ctx workflow.Context, input *ssm.CancelCommandInput) (*ssm.CancelCommandOutput, error) {
	var output ssm.CancelCommandOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CancelCommand", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CancelCommandAsync(ctx workflow.Context, input *ssm.CancelCommandInput) *SSMCancelCommandFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CancelCommand", input)
	return &SSMCancelCommandFuture{Future: future}
}

func (a *SSMStub) CancelMaintenanceWindowExecution(ctx workflow.Context, input *ssm.CancelMaintenanceWindowExecutionInput) (*ssm.CancelMaintenanceWindowExecutionOutput, error) {
	var output ssm.CancelMaintenanceWindowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CancelMaintenanceWindowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CancelMaintenanceWindowExecutionAsync(ctx workflow.Context, input *ssm.CancelMaintenanceWindowExecutionInput) *SSMCancelMaintenanceWindowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CancelMaintenanceWindowExecution", input)
	return &SSMCancelMaintenanceWindowExecutionFuture{Future: future}
}

func (a *SSMStub) CreateActivation(ctx workflow.Context, input *ssm.CreateActivationInput) (*ssm.CreateActivationOutput, error) {
	var output ssm.CreateActivationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateActivation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateActivationAsync(ctx workflow.Context, input *ssm.CreateActivationInput) *SSMCreateActivationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateActivation", input)
	return &SSMCreateActivationFuture{Future: future}
}

func (a *SSMStub) CreateAssociation(ctx workflow.Context, input *ssm.CreateAssociationInput) (*ssm.CreateAssociationOutput, error) {
	var output ssm.CreateAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateAssociationAsync(ctx workflow.Context, input *ssm.CreateAssociationInput) *SSMCreateAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateAssociation", input)
	return &SSMCreateAssociationFuture{Future: future}
}

func (a *SSMStub) CreateAssociationBatch(ctx workflow.Context, input *ssm.CreateAssociationBatchInput) (*ssm.CreateAssociationBatchOutput, error) {
	var output ssm.CreateAssociationBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateAssociationBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateAssociationBatchAsync(ctx workflow.Context, input *ssm.CreateAssociationBatchInput) *SSMCreateAssociationBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateAssociationBatch", input)
	return &SSMCreateAssociationBatchFuture{Future: future}
}

func (a *SSMStub) CreateDocument(ctx workflow.Context, input *ssm.CreateDocumentInput) (*ssm.CreateDocumentOutput, error) {
	var output ssm.CreateDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateDocumentAsync(ctx workflow.Context, input *ssm.CreateDocumentInput) *SSMCreateDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateDocument", input)
	return &SSMCreateDocumentFuture{Future: future}
}

func (a *SSMStub) CreateMaintenanceWindow(ctx workflow.Context, input *ssm.CreateMaintenanceWindowInput) (*ssm.CreateMaintenanceWindowOutput, error) {
	var output ssm.CreateMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateMaintenanceWindowAsync(ctx workflow.Context, input *ssm.CreateMaintenanceWindowInput) *SSMCreateMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateMaintenanceWindow", input)
	return &SSMCreateMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) CreateOpsItem(ctx workflow.Context, input *ssm.CreateOpsItemInput) (*ssm.CreateOpsItemOutput, error) {
	var output ssm.CreateOpsItemOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateOpsItem", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateOpsItemAsync(ctx workflow.Context, input *ssm.CreateOpsItemInput) *SSMCreateOpsItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateOpsItem", input)
	return &SSMCreateOpsItemFuture{Future: future}
}

func (a *SSMStub) CreatePatchBaseline(ctx workflow.Context, input *ssm.CreatePatchBaselineInput) (*ssm.CreatePatchBaselineOutput, error) {
	var output ssm.CreatePatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreatePatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreatePatchBaselineAsync(ctx workflow.Context, input *ssm.CreatePatchBaselineInput) *SSMCreatePatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreatePatchBaseline", input)
	return &SSMCreatePatchBaselineFuture{Future: future}
}

func (a *SSMStub) CreateResourceDataSync(ctx workflow.Context, input *ssm.CreateResourceDataSyncInput) (*ssm.CreateResourceDataSyncOutput, error) {
	var output ssm.CreateResourceDataSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateResourceDataSync", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateResourceDataSyncAsync(ctx workflow.Context, input *ssm.CreateResourceDataSyncInput) *SSMCreateResourceDataSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateResourceDataSync", input)
	return &SSMCreateResourceDataSyncFuture{Future: future}
}

func (a *SSMStub) DeleteActivation(ctx workflow.Context, input *ssm.DeleteActivationInput) (*ssm.DeleteActivationOutput, error) {
	var output ssm.DeleteActivationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteActivation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteActivationAsync(ctx workflow.Context, input *ssm.DeleteActivationInput) *SSMDeleteActivationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteActivation", input)
	return &SSMDeleteActivationFuture{Future: future}
}

func (a *SSMStub) DeleteAssociation(ctx workflow.Context, input *ssm.DeleteAssociationInput) (*ssm.DeleteAssociationOutput, error) {
	var output ssm.DeleteAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteAssociationAsync(ctx workflow.Context, input *ssm.DeleteAssociationInput) *SSMDeleteAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteAssociation", input)
	return &SSMDeleteAssociationFuture{Future: future}
}

func (a *SSMStub) DeleteDocument(ctx workflow.Context, input *ssm.DeleteDocumentInput) (*ssm.DeleteDocumentOutput, error) {
	var output ssm.DeleteDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteDocumentAsync(ctx workflow.Context, input *ssm.DeleteDocumentInput) *SSMDeleteDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteDocument", input)
	return &SSMDeleteDocumentFuture{Future: future}
}

func (a *SSMStub) DeleteInventory(ctx workflow.Context, input *ssm.DeleteInventoryInput) (*ssm.DeleteInventoryOutput, error) {
	var output ssm.DeleteInventoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteInventory", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteInventoryAsync(ctx workflow.Context, input *ssm.DeleteInventoryInput) *SSMDeleteInventoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteInventory", input)
	return &SSMDeleteInventoryFuture{Future: future}
}

func (a *SSMStub) DeleteMaintenanceWindow(ctx workflow.Context, input *ssm.DeleteMaintenanceWindowInput) (*ssm.DeleteMaintenanceWindowOutput, error) {
	var output ssm.DeleteMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeleteMaintenanceWindowInput) *SSMDeleteMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteMaintenanceWindow", input)
	return &SSMDeleteMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) DeleteParameter(ctx workflow.Context, input *ssm.DeleteParameterInput) (*ssm.DeleteParameterOutput, error) {
	var output ssm.DeleteParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteParameterAsync(ctx workflow.Context, input *ssm.DeleteParameterInput) *SSMDeleteParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteParameter", input)
	return &SSMDeleteParameterFuture{Future: future}
}

func (a *SSMStub) DeleteParameters(ctx workflow.Context, input *ssm.DeleteParametersInput) (*ssm.DeleteParametersOutput, error) {
	var output ssm.DeleteParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteParametersAsync(ctx workflow.Context, input *ssm.DeleteParametersInput) *SSMDeleteParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteParameters", input)
	return &SSMDeleteParametersFuture{Future: future}
}

func (a *SSMStub) DeletePatchBaseline(ctx workflow.Context, input *ssm.DeletePatchBaselineInput) (*ssm.DeletePatchBaselineOutput, error) {
	var output ssm.DeletePatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeletePatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeletePatchBaselineAsync(ctx workflow.Context, input *ssm.DeletePatchBaselineInput) *SSMDeletePatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeletePatchBaseline", input)
	return &SSMDeletePatchBaselineFuture{Future: future}
}

func (a *SSMStub) DeleteResourceDataSync(ctx workflow.Context, input *ssm.DeleteResourceDataSyncInput) (*ssm.DeleteResourceDataSyncOutput, error) {
	var output ssm.DeleteResourceDataSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteResourceDataSync", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteResourceDataSyncAsync(ctx workflow.Context, input *ssm.DeleteResourceDataSyncInput) *SSMDeleteResourceDataSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteResourceDataSync", input)
	return &SSMDeleteResourceDataSyncFuture{Future: future}
}

func (a *SSMStub) DeregisterManagedInstance(ctx workflow.Context, input *ssm.DeregisterManagedInstanceInput) (*ssm.DeregisterManagedInstanceOutput, error) {
	var output ssm.DeregisterManagedInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterManagedInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeregisterManagedInstanceAsync(ctx workflow.Context, input *ssm.DeregisterManagedInstanceInput) *SSMDeregisterManagedInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterManagedInstance", input)
	return &SSMDeregisterManagedInstanceFuture{Future: future}
}

func (a *SSMStub) DeregisterPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.DeregisterPatchBaselineForPatchGroupInput) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error) {
	var output ssm.DeregisterPatchBaselineForPatchGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterPatchBaselineForPatchGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeregisterPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.DeregisterPatchBaselineForPatchGroupInput) *SSMDeregisterPatchBaselineForPatchGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterPatchBaselineForPatchGroup", input)
	return &SSMDeregisterPatchBaselineForPatchGroupFuture{Future: future}
}

func (a *SSMStub) DeregisterTargetFromMaintenanceWindow(ctx workflow.Context, input *ssm.DeregisterTargetFromMaintenanceWindowInput) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error) {
	var output ssm.DeregisterTargetFromMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterTargetFromMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeregisterTargetFromMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeregisterTargetFromMaintenanceWindowInput) *SSMDeregisterTargetFromMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterTargetFromMaintenanceWindow", input)
	return &SSMDeregisterTargetFromMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) DeregisterTaskFromMaintenanceWindow(ctx workflow.Context, input *ssm.DeregisterTaskFromMaintenanceWindowInput) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error) {
	var output ssm.DeregisterTaskFromMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterTaskFromMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeregisterTaskFromMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeregisterTaskFromMaintenanceWindowInput) *SSMDeregisterTaskFromMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterTaskFromMaintenanceWindow", input)
	return &SSMDeregisterTaskFromMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) DescribeActivations(ctx workflow.Context, input *ssm.DescribeActivationsInput) (*ssm.DescribeActivationsOutput, error) {
	var output ssm.DescribeActivationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeActivations", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeActivationsAsync(ctx workflow.Context, input *ssm.DescribeActivationsInput) *SSMDescribeActivationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeActivations", input)
	return &SSMDescribeActivationsFuture{Future: future}
}

func (a *SSMStub) DescribeAssociation(ctx workflow.Context, input *ssm.DescribeAssociationInput) (*ssm.DescribeAssociationOutput, error) {
	var output ssm.DescribeAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeAssociationAsync(ctx workflow.Context, input *ssm.DescribeAssociationInput) *SSMDescribeAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAssociation", input)
	return &SSMDescribeAssociationFuture{Future: future}
}

func (a *SSMStub) DescribeAssociationExecutionTargets(ctx workflow.Context, input *ssm.DescribeAssociationExecutionTargetsInput) (*ssm.DescribeAssociationExecutionTargetsOutput, error) {
	var output ssm.DescribeAssociationExecutionTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAssociationExecutionTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeAssociationExecutionTargetsAsync(ctx workflow.Context, input *ssm.DescribeAssociationExecutionTargetsInput) *SSMDescribeAssociationExecutionTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAssociationExecutionTargets", input)
	return &SSMDescribeAssociationExecutionTargetsFuture{Future: future}
}

func (a *SSMStub) DescribeAssociationExecutions(ctx workflow.Context, input *ssm.DescribeAssociationExecutionsInput) (*ssm.DescribeAssociationExecutionsOutput, error) {
	var output ssm.DescribeAssociationExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAssociationExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeAssociationExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAssociationExecutionsInput) *SSMDescribeAssociationExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAssociationExecutions", input)
	return &SSMDescribeAssociationExecutionsFuture{Future: future}
}

func (a *SSMStub) DescribeAutomationExecutions(ctx workflow.Context, input *ssm.DescribeAutomationExecutionsInput) (*ssm.DescribeAutomationExecutionsOutput, error) {
	var output ssm.DescribeAutomationExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAutomationExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeAutomationExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAutomationExecutionsInput) *SSMDescribeAutomationExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAutomationExecutions", input)
	return &SSMDescribeAutomationExecutionsFuture{Future: future}
}

func (a *SSMStub) DescribeAutomationStepExecutions(ctx workflow.Context, input *ssm.DescribeAutomationStepExecutionsInput) (*ssm.DescribeAutomationStepExecutionsOutput, error) {
	var output ssm.DescribeAutomationStepExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAutomationStepExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeAutomationStepExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAutomationStepExecutionsInput) *SSMDescribeAutomationStepExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAutomationStepExecutions", input)
	return &SSMDescribeAutomationStepExecutionsFuture{Future: future}
}

func (a *SSMStub) DescribeAvailablePatches(ctx workflow.Context, input *ssm.DescribeAvailablePatchesInput) (*ssm.DescribeAvailablePatchesOutput, error) {
	var output ssm.DescribeAvailablePatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAvailablePatches", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeAvailablePatchesAsync(ctx workflow.Context, input *ssm.DescribeAvailablePatchesInput) *SSMDescribeAvailablePatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAvailablePatches", input)
	return &SSMDescribeAvailablePatchesFuture{Future: future}
}

func (a *SSMStub) DescribeDocument(ctx workflow.Context, input *ssm.DescribeDocumentInput) (*ssm.DescribeDocumentOutput, error) {
	var output ssm.DescribeDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeDocumentAsync(ctx workflow.Context, input *ssm.DescribeDocumentInput) *SSMDescribeDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeDocument", input)
	return &SSMDescribeDocumentFuture{Future: future}
}

func (a *SSMStub) DescribeDocumentPermission(ctx workflow.Context, input *ssm.DescribeDocumentPermissionInput) (*ssm.DescribeDocumentPermissionOutput, error) {
	var output ssm.DescribeDocumentPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeDocumentPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeDocumentPermissionAsync(ctx workflow.Context, input *ssm.DescribeDocumentPermissionInput) *SSMDescribeDocumentPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeDocumentPermission", input)
	return &SSMDescribeDocumentPermissionFuture{Future: future}
}

func (a *SSMStub) DescribeEffectiveInstanceAssociations(ctx workflow.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {
	var output ssm.DescribeEffectiveInstanceAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeEffectiveInstanceAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeEffectiveInstanceAssociationsAsync(ctx workflow.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput) *SSMDescribeEffectiveInstanceAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeEffectiveInstanceAssociations", input)
	return &SSMDescribeEffectiveInstanceAssociationsFuture{Future: future}
}

func (a *SSMStub) DescribeEffectivePatchesForPatchBaseline(ctx workflow.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {
	var output ssm.DescribeEffectivePatchesForPatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeEffectivePatchesForPatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeEffectivePatchesForPatchBaselineAsync(ctx workflow.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput) *SSMDescribeEffectivePatchesForPatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeEffectivePatchesForPatchBaseline", input)
	return &SSMDescribeEffectivePatchesForPatchBaselineFuture{Future: future}
}

func (a *SSMStub) DescribeInstanceAssociationsStatus(ctx workflow.Context, input *ssm.DescribeInstanceAssociationsStatusInput) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {
	var output ssm.DescribeInstanceAssociationsStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstanceAssociationsStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeInstanceAssociationsStatusAsync(ctx workflow.Context, input *ssm.DescribeInstanceAssociationsStatusInput) *SSMDescribeInstanceAssociationsStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstanceAssociationsStatus", input)
	return &SSMDescribeInstanceAssociationsStatusFuture{Future: future}
}

func (a *SSMStub) DescribeInstanceInformation(ctx workflow.Context, input *ssm.DescribeInstanceInformationInput) (*ssm.DescribeInstanceInformationOutput, error) {
	var output ssm.DescribeInstanceInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstanceInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeInstanceInformationAsync(ctx workflow.Context, input *ssm.DescribeInstanceInformationInput) *SSMDescribeInstanceInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstanceInformation", input)
	return &SSMDescribeInstanceInformationFuture{Future: future}
}

func (a *SSMStub) DescribeInstancePatchStates(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesInput) (*ssm.DescribeInstancePatchStatesOutput, error) {
	var output ssm.DescribeInstancePatchStatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstancePatchStates", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeInstancePatchStatesAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesInput) *SSMDescribeInstancePatchStatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstancePatchStates", input)
	return &SSMDescribeInstancePatchStatesFuture{Future: future}
}

func (a *SSMStub) DescribeInstancePatchStatesForPatchGroup(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {
	var output ssm.DescribeInstancePatchStatesForPatchGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstancePatchStatesForPatchGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeInstancePatchStatesForPatchGroupAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput) *SSMDescribeInstancePatchStatesForPatchGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstancePatchStatesForPatchGroup", input)
	return &SSMDescribeInstancePatchStatesForPatchGroupFuture{Future: future}
}

func (a *SSMStub) DescribeInstancePatches(ctx workflow.Context, input *ssm.DescribeInstancePatchesInput) (*ssm.DescribeInstancePatchesOutput, error) {
	var output ssm.DescribeInstancePatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstancePatches", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeInstancePatchesAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchesInput) *SSMDescribeInstancePatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstancePatches", input)
	return &SSMDescribeInstancePatchesFuture{Future: future}
}

func (a *SSMStub) DescribeInventoryDeletions(ctx workflow.Context, input *ssm.DescribeInventoryDeletionsInput) (*ssm.DescribeInventoryDeletionsOutput, error) {
	var output ssm.DescribeInventoryDeletionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInventoryDeletions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeInventoryDeletionsAsync(ctx workflow.Context, input *ssm.DescribeInventoryDeletionsInput) *SSMDescribeInventoryDeletionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInventoryDeletions", input)
	return &SSMDescribeInventoryDeletionsFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowExecutionTaskInvocations(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowExecutionTaskInvocations", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowExecutionTaskInvocationsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) *SSMDescribeMaintenanceWindowExecutionTaskInvocationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowExecutionTaskInvocations", input)
	return &SSMDescribeMaintenanceWindowExecutionTaskInvocationsFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowExecutionTasks(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowExecutionTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowExecutionTasksAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput) *SSMDescribeMaintenanceWindowExecutionTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowExecutionTasks", input)
	return &SSMDescribeMaintenanceWindowExecutionTasksFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowExecutions(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowExecutionsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput) *SSMDescribeMaintenanceWindowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowExecutions", input)
	return &SSMDescribeMaintenanceWindowExecutionsFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowSchedule(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowScheduleInput) (*ssm.DescribeMaintenanceWindowScheduleOutput, error) {
	var output ssm.DescribeMaintenanceWindowScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowScheduleAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowScheduleInput) *SSMDescribeMaintenanceWindowScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowSchedule", input)
	return &SSMDescribeMaintenanceWindowScheduleFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowTargets(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTargetsInput) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {
	var output ssm.DescribeMaintenanceWindowTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowTargetsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTargetsInput) *SSMDescribeMaintenanceWindowTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowTargets", input)
	return &SSMDescribeMaintenanceWindowTargetsFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowTasks(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTasksInput) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {
	var output ssm.DescribeMaintenanceWindowTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowTasksAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTasksInput) *SSMDescribeMaintenanceWindowTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowTasks", input)
	return &SSMDescribeMaintenanceWindowTasksFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindows(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsInput) (*ssm.DescribeMaintenanceWindowsOutput, error) {
	var output ssm.DescribeMaintenanceWindowsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindows", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsInput) *SSMDescribeMaintenanceWindowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindows", input)
	return &SSMDescribeMaintenanceWindowsFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowsForTarget(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error) {
	var output ssm.DescribeMaintenanceWindowsForTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowsForTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowsForTargetAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput) *SSMDescribeMaintenanceWindowsForTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowsForTarget", input)
	return &SSMDescribeMaintenanceWindowsForTargetFuture{Future: future}
}

func (a *SSMStub) DescribeOpsItems(ctx workflow.Context, input *ssm.DescribeOpsItemsInput) (*ssm.DescribeOpsItemsOutput, error) {
	var output ssm.DescribeOpsItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeOpsItems", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeOpsItemsAsync(ctx workflow.Context, input *ssm.DescribeOpsItemsInput) *SSMDescribeOpsItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeOpsItems", input)
	return &SSMDescribeOpsItemsFuture{Future: future}
}

func (a *SSMStub) DescribeParameters(ctx workflow.Context, input *ssm.DescribeParametersInput) (*ssm.DescribeParametersOutput, error) {
	var output ssm.DescribeParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeParametersAsync(ctx workflow.Context, input *ssm.DescribeParametersInput) *SSMDescribeParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeParameters", input)
	return &SSMDescribeParametersFuture{Future: future}
}

func (a *SSMStub) DescribePatchBaselines(ctx workflow.Context, input *ssm.DescribePatchBaselinesInput) (*ssm.DescribePatchBaselinesOutput, error) {
	var output ssm.DescribePatchBaselinesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchBaselines", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribePatchBaselinesAsync(ctx workflow.Context, input *ssm.DescribePatchBaselinesInput) *SSMDescribePatchBaselinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchBaselines", input)
	return &SSMDescribePatchBaselinesFuture{Future: future}
}

func (a *SSMStub) DescribePatchGroupState(ctx workflow.Context, input *ssm.DescribePatchGroupStateInput) (*ssm.DescribePatchGroupStateOutput, error) {
	var output ssm.DescribePatchGroupStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchGroupState", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribePatchGroupStateAsync(ctx workflow.Context, input *ssm.DescribePatchGroupStateInput) *SSMDescribePatchGroupStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchGroupState", input)
	return &SSMDescribePatchGroupStateFuture{Future: future}
}

func (a *SSMStub) DescribePatchGroups(ctx workflow.Context, input *ssm.DescribePatchGroupsInput) (*ssm.DescribePatchGroupsOutput, error) {
	var output ssm.DescribePatchGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribePatchGroupsAsync(ctx workflow.Context, input *ssm.DescribePatchGroupsInput) *SSMDescribePatchGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchGroups", input)
	return &SSMDescribePatchGroupsFuture{Future: future}
}

func (a *SSMStub) DescribePatchProperties(ctx workflow.Context, input *ssm.DescribePatchPropertiesInput) (*ssm.DescribePatchPropertiesOutput, error) {
	var output ssm.DescribePatchPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribePatchPropertiesAsync(ctx workflow.Context, input *ssm.DescribePatchPropertiesInput) *SSMDescribePatchPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchProperties", input)
	return &SSMDescribePatchPropertiesFuture{Future: future}
}

func (a *SSMStub) DescribeSessions(ctx workflow.Context, input *ssm.DescribeSessionsInput) (*ssm.DescribeSessionsOutput, error) {
	var output ssm.DescribeSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeSessionsAsync(ctx workflow.Context, input *ssm.DescribeSessionsInput) *SSMDescribeSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeSessions", input)
	return &SSMDescribeSessionsFuture{Future: future}
}

func (a *SSMStub) GetAutomationExecution(ctx workflow.Context, input *ssm.GetAutomationExecutionInput) (*ssm.GetAutomationExecutionOutput, error) {
	var output ssm.GetAutomationExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetAutomationExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetAutomationExecutionAsync(ctx workflow.Context, input *ssm.GetAutomationExecutionInput) *SSMGetAutomationExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetAutomationExecution", input)
	return &SSMGetAutomationExecutionFuture{Future: future}
}

func (a *SSMStub) GetCalendarState(ctx workflow.Context, input *ssm.GetCalendarStateInput) (*ssm.GetCalendarStateOutput, error) {
	var output ssm.GetCalendarStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetCalendarState", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetCalendarStateAsync(ctx workflow.Context, input *ssm.GetCalendarStateInput) *SSMGetCalendarStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetCalendarState", input)
	return &SSMGetCalendarStateFuture{Future: future}
}

func (a *SSMStub) GetCommandInvocation(ctx workflow.Context, input *ssm.GetCommandInvocationInput) (*ssm.GetCommandInvocationOutput, error) {
	var output ssm.GetCommandInvocationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetCommandInvocation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetCommandInvocationAsync(ctx workflow.Context, input *ssm.GetCommandInvocationInput) *SSMGetCommandInvocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetCommandInvocation", input)
	return &SSMGetCommandInvocationFuture{Future: future}
}

func (a *SSMStub) GetConnectionStatus(ctx workflow.Context, input *ssm.GetConnectionStatusInput) (*ssm.GetConnectionStatusOutput, error) {
	var output ssm.GetConnectionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetConnectionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetConnectionStatusAsync(ctx workflow.Context, input *ssm.GetConnectionStatusInput) *SSMGetConnectionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetConnectionStatus", input)
	return &SSMGetConnectionStatusFuture{Future: future}
}

func (a *SSMStub) GetDefaultPatchBaseline(ctx workflow.Context, input *ssm.GetDefaultPatchBaselineInput) (*ssm.GetDefaultPatchBaselineOutput, error) {
	var output ssm.GetDefaultPatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetDefaultPatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetDefaultPatchBaselineAsync(ctx workflow.Context, input *ssm.GetDefaultPatchBaselineInput) *SSMGetDefaultPatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetDefaultPatchBaseline", input)
	return &SSMGetDefaultPatchBaselineFuture{Future: future}
}

func (a *SSMStub) GetDeployablePatchSnapshotForInstance(ctx workflow.Context, input *ssm.GetDeployablePatchSnapshotForInstanceInput) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {
	var output ssm.GetDeployablePatchSnapshotForInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetDeployablePatchSnapshotForInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetDeployablePatchSnapshotForInstanceAsync(ctx workflow.Context, input *ssm.GetDeployablePatchSnapshotForInstanceInput) *SSMGetDeployablePatchSnapshotForInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetDeployablePatchSnapshotForInstance", input)
	return &SSMGetDeployablePatchSnapshotForInstanceFuture{Future: future}
}

func (a *SSMStub) GetDocument(ctx workflow.Context, input *ssm.GetDocumentInput) (*ssm.GetDocumentOutput, error) {
	var output ssm.GetDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetDocumentAsync(ctx workflow.Context, input *ssm.GetDocumentInput) *SSMGetDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetDocument", input)
	return &SSMGetDocumentFuture{Future: future}
}

func (a *SSMStub) GetInventory(ctx workflow.Context, input *ssm.GetInventoryInput) (*ssm.GetInventoryOutput, error) {
	var output ssm.GetInventoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetInventory", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetInventoryAsync(ctx workflow.Context, input *ssm.GetInventoryInput) *SSMGetInventoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetInventory", input)
	return &SSMGetInventoryFuture{Future: future}
}

func (a *SSMStub) GetInventorySchema(ctx workflow.Context, input *ssm.GetInventorySchemaInput) (*ssm.GetInventorySchemaOutput, error) {
	var output ssm.GetInventorySchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetInventorySchema", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetInventorySchemaAsync(ctx workflow.Context, input *ssm.GetInventorySchemaInput) *SSMGetInventorySchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetInventorySchema", input)
	return &SSMGetInventorySchemaFuture{Future: future}
}

func (a *SSMStub) GetMaintenanceWindow(ctx workflow.Context, input *ssm.GetMaintenanceWindowInput) (*ssm.GetMaintenanceWindowOutput, error) {
	var output ssm.GetMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetMaintenanceWindowAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowInput) *SSMGetMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindow", input)
	return &SSMGetMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) GetMaintenanceWindowExecution(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionInput) (*ssm.GetMaintenanceWindowExecutionOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetMaintenanceWindowExecutionAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionInput) *SSMGetMaintenanceWindowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowExecution", input)
	return &SSMGetMaintenanceWindowExecutionFuture{Future: future}
}

func (a *SSMStub) GetMaintenanceWindowExecutionTask(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInput) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowExecutionTask", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetMaintenanceWindowExecutionTaskAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInput) *SSMGetMaintenanceWindowExecutionTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowExecutionTask", input)
	return &SSMGetMaintenanceWindowExecutionTaskFuture{Future: future}
}

func (a *SSMStub) GetMaintenanceWindowExecutionTaskInvocation(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowExecutionTaskInvocation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetMaintenanceWindowExecutionTaskInvocationAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) *SSMGetMaintenanceWindowExecutionTaskInvocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowExecutionTaskInvocation", input)
	return &SSMGetMaintenanceWindowExecutionTaskInvocationFuture{Future: future}
}

func (a *SSMStub) GetMaintenanceWindowTask(ctx workflow.Context, input *ssm.GetMaintenanceWindowTaskInput) (*ssm.GetMaintenanceWindowTaskOutput, error) {
	var output ssm.GetMaintenanceWindowTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowTask", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetMaintenanceWindowTaskAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowTaskInput) *SSMGetMaintenanceWindowTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowTask", input)
	return &SSMGetMaintenanceWindowTaskFuture{Future: future}
}

func (a *SSMStub) GetOpsItem(ctx workflow.Context, input *ssm.GetOpsItemInput) (*ssm.GetOpsItemOutput, error) {
	var output ssm.GetOpsItemOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetOpsItem", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetOpsItemAsync(ctx workflow.Context, input *ssm.GetOpsItemInput) *SSMGetOpsItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetOpsItem", input)
	return &SSMGetOpsItemFuture{Future: future}
}

func (a *SSMStub) GetOpsSummary(ctx workflow.Context, input *ssm.GetOpsSummaryInput) (*ssm.GetOpsSummaryOutput, error) {
	var output ssm.GetOpsSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetOpsSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetOpsSummaryAsync(ctx workflow.Context, input *ssm.GetOpsSummaryInput) *SSMGetOpsSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetOpsSummary", input)
	return &SSMGetOpsSummaryFuture{Future: future}
}

func (a *SSMStub) GetParameter(ctx workflow.Context, input *ssm.GetParameterInput) (*ssm.GetParameterOutput, error) {
	var output ssm.GetParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetParameterAsync(ctx workflow.Context, input *ssm.GetParameterInput) *SSMGetParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetParameter", input)
	return &SSMGetParameterFuture{Future: future}
}

func (a *SSMStub) GetParameterHistory(ctx workflow.Context, input *ssm.GetParameterHistoryInput) (*ssm.GetParameterHistoryOutput, error) {
	var output ssm.GetParameterHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetParameterHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetParameterHistoryAsync(ctx workflow.Context, input *ssm.GetParameterHistoryInput) *SSMGetParameterHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetParameterHistory", input)
	return &SSMGetParameterHistoryFuture{Future: future}
}

func (a *SSMStub) GetParameters(ctx workflow.Context, input *ssm.GetParametersInput) (*ssm.GetParametersOutput, error) {
	var output ssm.GetParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetParametersAsync(ctx workflow.Context, input *ssm.GetParametersInput) *SSMGetParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetParameters", input)
	return &SSMGetParametersFuture{Future: future}
}

func (a *SSMStub) GetParametersByPath(ctx workflow.Context, input *ssm.GetParametersByPathInput) (*ssm.GetParametersByPathOutput, error) {
	var output ssm.GetParametersByPathOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetParametersByPath", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetParametersByPathAsync(ctx workflow.Context, input *ssm.GetParametersByPathInput) *SSMGetParametersByPathFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetParametersByPath", input)
	return &SSMGetParametersByPathFuture{Future: future}
}

func (a *SSMStub) GetPatchBaseline(ctx workflow.Context, input *ssm.GetPatchBaselineInput) (*ssm.GetPatchBaselineOutput, error) {
	var output ssm.GetPatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetPatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetPatchBaselineAsync(ctx workflow.Context, input *ssm.GetPatchBaselineInput) *SSMGetPatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetPatchBaseline", input)
	return &SSMGetPatchBaselineFuture{Future: future}
}

func (a *SSMStub) GetPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.GetPatchBaselineForPatchGroupInput) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {
	var output ssm.GetPatchBaselineForPatchGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetPatchBaselineForPatchGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.GetPatchBaselineForPatchGroupInput) *SSMGetPatchBaselineForPatchGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetPatchBaselineForPatchGroup", input)
	return &SSMGetPatchBaselineForPatchGroupFuture{Future: future}
}

func (a *SSMStub) GetServiceSetting(ctx workflow.Context, input *ssm.GetServiceSettingInput) (*ssm.GetServiceSettingOutput, error) {
	var output ssm.GetServiceSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetServiceSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetServiceSettingAsync(ctx workflow.Context, input *ssm.GetServiceSettingInput) *SSMGetServiceSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetServiceSetting", input)
	return &SSMGetServiceSettingFuture{Future: future}
}

func (a *SSMStub) LabelParameterVersion(ctx workflow.Context, input *ssm.LabelParameterVersionInput) (*ssm.LabelParameterVersionOutput, error) {
	var output ssm.LabelParameterVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.LabelParameterVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) LabelParameterVersionAsync(ctx workflow.Context, input *ssm.LabelParameterVersionInput) *SSMLabelParameterVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.LabelParameterVersion", input)
	return &SSMLabelParameterVersionFuture{Future: future}
}

func (a *SSMStub) ListAssociationVersions(ctx workflow.Context, input *ssm.ListAssociationVersionsInput) (*ssm.ListAssociationVersionsOutput, error) {
	var output ssm.ListAssociationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListAssociationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListAssociationVersionsAsync(ctx workflow.Context, input *ssm.ListAssociationVersionsInput) *SSMListAssociationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListAssociationVersions", input)
	return &SSMListAssociationVersionsFuture{Future: future}
}

func (a *SSMStub) ListAssociations(ctx workflow.Context, input *ssm.ListAssociationsInput) (*ssm.ListAssociationsOutput, error) {
	var output ssm.ListAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListAssociationsAsync(ctx workflow.Context, input *ssm.ListAssociationsInput) *SSMListAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListAssociations", input)
	return &SSMListAssociationsFuture{Future: future}
}

func (a *SSMStub) ListCommandInvocations(ctx workflow.Context, input *ssm.ListCommandInvocationsInput) (*ssm.ListCommandInvocationsOutput, error) {
	var output ssm.ListCommandInvocationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListCommandInvocations", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListCommandInvocationsAsync(ctx workflow.Context, input *ssm.ListCommandInvocationsInput) *SSMListCommandInvocationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListCommandInvocations", input)
	return &SSMListCommandInvocationsFuture{Future: future}
}

func (a *SSMStub) ListCommands(ctx workflow.Context, input *ssm.ListCommandsInput) (*ssm.ListCommandsOutput, error) {
	var output ssm.ListCommandsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListCommands", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListCommandsAsync(ctx workflow.Context, input *ssm.ListCommandsInput) *SSMListCommandsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListCommands", input)
	return &SSMListCommandsFuture{Future: future}
}

func (a *SSMStub) ListComplianceItems(ctx workflow.Context, input *ssm.ListComplianceItemsInput) (*ssm.ListComplianceItemsOutput, error) {
	var output ssm.ListComplianceItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListComplianceItems", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListComplianceItemsAsync(ctx workflow.Context, input *ssm.ListComplianceItemsInput) *SSMListComplianceItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListComplianceItems", input)
	return &SSMListComplianceItemsFuture{Future: future}
}

func (a *SSMStub) ListComplianceSummaries(ctx workflow.Context, input *ssm.ListComplianceSummariesInput) (*ssm.ListComplianceSummariesOutput, error) {
	var output ssm.ListComplianceSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListComplianceSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListComplianceSummariesAsync(ctx workflow.Context, input *ssm.ListComplianceSummariesInput) *SSMListComplianceSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListComplianceSummaries", input)
	return &SSMListComplianceSummariesFuture{Future: future}
}

func (a *SSMStub) ListDocumentVersions(ctx workflow.Context, input *ssm.ListDocumentVersionsInput) (*ssm.ListDocumentVersionsOutput, error) {
	var output ssm.ListDocumentVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListDocumentVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListDocumentVersionsAsync(ctx workflow.Context, input *ssm.ListDocumentVersionsInput) *SSMListDocumentVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListDocumentVersions", input)
	return &SSMListDocumentVersionsFuture{Future: future}
}

func (a *SSMStub) ListDocuments(ctx workflow.Context, input *ssm.ListDocumentsInput) (*ssm.ListDocumentsOutput, error) {
	var output ssm.ListDocumentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListDocuments", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListDocumentsAsync(ctx workflow.Context, input *ssm.ListDocumentsInput) *SSMListDocumentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListDocuments", input)
	return &SSMListDocumentsFuture{Future: future}
}

func (a *SSMStub) ListInventoryEntries(ctx workflow.Context, input *ssm.ListInventoryEntriesInput) (*ssm.ListInventoryEntriesOutput, error) {
	var output ssm.ListInventoryEntriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListInventoryEntries", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListInventoryEntriesAsync(ctx workflow.Context, input *ssm.ListInventoryEntriesInput) *SSMListInventoryEntriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListInventoryEntries", input)
	return &SSMListInventoryEntriesFuture{Future: future}
}

func (a *SSMStub) ListResourceComplianceSummaries(ctx workflow.Context, input *ssm.ListResourceComplianceSummariesInput) (*ssm.ListResourceComplianceSummariesOutput, error) {
	var output ssm.ListResourceComplianceSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListResourceComplianceSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListResourceComplianceSummariesAsync(ctx workflow.Context, input *ssm.ListResourceComplianceSummariesInput) *SSMListResourceComplianceSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListResourceComplianceSummaries", input)
	return &SSMListResourceComplianceSummariesFuture{Future: future}
}

func (a *SSMStub) ListResourceDataSync(ctx workflow.Context, input *ssm.ListResourceDataSyncInput) (*ssm.ListResourceDataSyncOutput, error) {
	var output ssm.ListResourceDataSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListResourceDataSync", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListResourceDataSyncAsync(ctx workflow.Context, input *ssm.ListResourceDataSyncInput) *SSMListResourceDataSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListResourceDataSync", input)
	return &SSMListResourceDataSyncFuture{Future: future}
}

func (a *SSMStub) ListTagsForResource(ctx workflow.Context, input *ssm.ListTagsForResourceInput) (*ssm.ListTagsForResourceOutput, error) {
	var output ssm.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListTagsForResourceAsync(ctx workflow.Context, input *ssm.ListTagsForResourceInput) *SSMListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListTagsForResource", input)
	return &SSMListTagsForResourceFuture{Future: future}
}

func (a *SSMStub) ModifyDocumentPermission(ctx workflow.Context, input *ssm.ModifyDocumentPermissionInput) (*ssm.ModifyDocumentPermissionOutput, error) {
	var output ssm.ModifyDocumentPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ModifyDocumentPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ModifyDocumentPermissionAsync(ctx workflow.Context, input *ssm.ModifyDocumentPermissionInput) *SSMModifyDocumentPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ModifyDocumentPermission", input)
	return &SSMModifyDocumentPermissionFuture{Future: future}
}

func (a *SSMStub) PutComplianceItems(ctx workflow.Context, input *ssm.PutComplianceItemsInput) (*ssm.PutComplianceItemsOutput, error) {
	var output ssm.PutComplianceItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.PutComplianceItems", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) PutComplianceItemsAsync(ctx workflow.Context, input *ssm.PutComplianceItemsInput) *SSMPutComplianceItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.PutComplianceItems", input)
	return &SSMPutComplianceItemsFuture{Future: future}
}

func (a *SSMStub) PutInventory(ctx workflow.Context, input *ssm.PutInventoryInput) (*ssm.PutInventoryOutput, error) {
	var output ssm.PutInventoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.PutInventory", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) PutInventoryAsync(ctx workflow.Context, input *ssm.PutInventoryInput) *SSMPutInventoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.PutInventory", input)
	return &SSMPutInventoryFuture{Future: future}
}

func (a *SSMStub) PutParameter(ctx workflow.Context, input *ssm.PutParameterInput) (*ssm.PutParameterOutput, error) {
	var output ssm.PutParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.PutParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) PutParameterAsync(ctx workflow.Context, input *ssm.PutParameterInput) *SSMPutParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.PutParameter", input)
	return &SSMPutParameterFuture{Future: future}
}

func (a *SSMStub) RegisterDefaultPatchBaseline(ctx workflow.Context, input *ssm.RegisterDefaultPatchBaselineInput) (*ssm.RegisterDefaultPatchBaselineOutput, error) {
	var output ssm.RegisterDefaultPatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterDefaultPatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) RegisterDefaultPatchBaselineAsync(ctx workflow.Context, input *ssm.RegisterDefaultPatchBaselineInput) *SSMRegisterDefaultPatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterDefaultPatchBaseline", input)
	return &SSMRegisterDefaultPatchBaselineFuture{Future: future}
}

func (a *SSMStub) RegisterPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.RegisterPatchBaselineForPatchGroupInput) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error) {
	var output ssm.RegisterPatchBaselineForPatchGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterPatchBaselineForPatchGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) RegisterPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.RegisterPatchBaselineForPatchGroupInput) *SSMRegisterPatchBaselineForPatchGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterPatchBaselineForPatchGroup", input)
	return &SSMRegisterPatchBaselineForPatchGroupFuture{Future: future}
}

func (a *SSMStub) RegisterTargetWithMaintenanceWindow(ctx workflow.Context, input *ssm.RegisterTargetWithMaintenanceWindowInput) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error) {
	var output ssm.RegisterTargetWithMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterTargetWithMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) RegisterTargetWithMaintenanceWindowAsync(ctx workflow.Context, input *ssm.RegisterTargetWithMaintenanceWindowInput) *SSMRegisterTargetWithMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterTargetWithMaintenanceWindow", input)
	return &SSMRegisterTargetWithMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) RegisterTaskWithMaintenanceWindow(ctx workflow.Context, input *ssm.RegisterTaskWithMaintenanceWindowInput) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error) {
	var output ssm.RegisterTaskWithMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterTaskWithMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) RegisterTaskWithMaintenanceWindowAsync(ctx workflow.Context, input *ssm.RegisterTaskWithMaintenanceWindowInput) *SSMRegisterTaskWithMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterTaskWithMaintenanceWindow", input)
	return &SSMRegisterTaskWithMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) RemoveTagsFromResource(ctx workflow.Context, input *ssm.RemoveTagsFromResourceInput) (*ssm.RemoveTagsFromResourceOutput, error) {
	var output ssm.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *ssm.RemoveTagsFromResourceInput) *SSMRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.RemoveTagsFromResource", input)
	return &SSMRemoveTagsFromResourceFuture{Future: future}
}

func (a *SSMStub) ResetServiceSetting(ctx workflow.Context, input *ssm.ResetServiceSettingInput) (*ssm.ResetServiceSettingOutput, error) {
	var output ssm.ResetServiceSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ResetServiceSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ResetServiceSettingAsync(ctx workflow.Context, input *ssm.ResetServiceSettingInput) *SSMResetServiceSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ResetServiceSetting", input)
	return &SSMResetServiceSettingFuture{Future: future}
}

func (a *SSMStub) ResumeSession(ctx workflow.Context, input *ssm.ResumeSessionInput) (*ssm.ResumeSessionOutput, error) {
	var output ssm.ResumeSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ResumeSession", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ResumeSessionAsync(ctx workflow.Context, input *ssm.ResumeSessionInput) *SSMResumeSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ResumeSession", input)
	return &SSMResumeSessionFuture{Future: future}
}

func (a *SSMStub) SendAutomationSignal(ctx workflow.Context, input *ssm.SendAutomationSignalInput) (*ssm.SendAutomationSignalOutput, error) {
	var output ssm.SendAutomationSignalOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.SendAutomationSignal", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) SendAutomationSignalAsync(ctx workflow.Context, input *ssm.SendAutomationSignalInput) *SSMSendAutomationSignalFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.SendAutomationSignal", input)
	return &SSMSendAutomationSignalFuture{Future: future}
}

func (a *SSMStub) SendCommand(ctx workflow.Context, input *ssm.SendCommandInput) (*ssm.SendCommandOutput, error) {
	var output ssm.SendCommandOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.SendCommand", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) SendCommandAsync(ctx workflow.Context, input *ssm.SendCommandInput) *SSMSendCommandFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.SendCommand", input)
	return &SSMSendCommandFuture{Future: future}
}

func (a *SSMStub) StartAssociationsOnce(ctx workflow.Context, input *ssm.StartAssociationsOnceInput) (*ssm.StartAssociationsOnceOutput, error) {
	var output ssm.StartAssociationsOnceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.StartAssociationsOnce", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) StartAssociationsOnceAsync(ctx workflow.Context, input *ssm.StartAssociationsOnceInput) *SSMStartAssociationsOnceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.StartAssociationsOnce", input)
	return &SSMStartAssociationsOnceFuture{Future: future}
}

func (a *SSMStub) StartAutomationExecution(ctx workflow.Context, input *ssm.StartAutomationExecutionInput) (*ssm.StartAutomationExecutionOutput, error) {
	var output ssm.StartAutomationExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.StartAutomationExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) StartAutomationExecutionAsync(ctx workflow.Context, input *ssm.StartAutomationExecutionInput) *SSMStartAutomationExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.StartAutomationExecution", input)
	return &SSMStartAutomationExecutionFuture{Future: future}
}

func (a *SSMStub) StartSession(ctx workflow.Context, input *ssm.StartSessionInput) (*ssm.StartSessionOutput, error) {
	var output ssm.StartSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.StartSession", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) StartSessionAsync(ctx workflow.Context, input *ssm.StartSessionInput) *SSMStartSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.StartSession", input)
	return &SSMStartSessionFuture{Future: future}
}

func (a *SSMStub) StopAutomationExecution(ctx workflow.Context, input *ssm.StopAutomationExecutionInput) (*ssm.StopAutomationExecutionOutput, error) {
	var output ssm.StopAutomationExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.StopAutomationExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) StopAutomationExecutionAsync(ctx workflow.Context, input *ssm.StopAutomationExecutionInput) *SSMStopAutomationExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.StopAutomationExecution", input)
	return &SSMStopAutomationExecutionFuture{Future: future}
}

func (a *SSMStub) TerminateSession(ctx workflow.Context, input *ssm.TerminateSessionInput) (*ssm.TerminateSessionOutput, error) {
	var output ssm.TerminateSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.TerminateSession", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) TerminateSessionAsync(ctx workflow.Context, input *ssm.TerminateSessionInput) *SSMTerminateSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.TerminateSession", input)
	return &SSMTerminateSessionFuture{Future: future}
}

func (a *SSMStub) UpdateAssociation(ctx workflow.Context, input *ssm.UpdateAssociationInput) (*ssm.UpdateAssociationOutput, error) {
	var output ssm.UpdateAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateAssociationAsync(ctx workflow.Context, input *ssm.UpdateAssociationInput) *SSMUpdateAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateAssociation", input)
	return &SSMUpdateAssociationFuture{Future: future}
}

func (a *SSMStub) UpdateAssociationStatus(ctx workflow.Context, input *ssm.UpdateAssociationStatusInput) (*ssm.UpdateAssociationStatusOutput, error) {
	var output ssm.UpdateAssociationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateAssociationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateAssociationStatusAsync(ctx workflow.Context, input *ssm.UpdateAssociationStatusInput) *SSMUpdateAssociationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateAssociationStatus", input)
	return &SSMUpdateAssociationStatusFuture{Future: future}
}

func (a *SSMStub) UpdateDocument(ctx workflow.Context, input *ssm.UpdateDocumentInput) (*ssm.UpdateDocumentOutput, error) {
	var output ssm.UpdateDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateDocumentAsync(ctx workflow.Context, input *ssm.UpdateDocumentInput) *SSMUpdateDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateDocument", input)
	return &SSMUpdateDocumentFuture{Future: future}
}

func (a *SSMStub) UpdateDocumentDefaultVersion(ctx workflow.Context, input *ssm.UpdateDocumentDefaultVersionInput) (*ssm.UpdateDocumentDefaultVersionOutput, error) {
	var output ssm.UpdateDocumentDefaultVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateDocumentDefaultVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateDocumentDefaultVersionAsync(ctx workflow.Context, input *ssm.UpdateDocumentDefaultVersionInput) *SSMUpdateDocumentDefaultVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateDocumentDefaultVersion", input)
	return &SSMUpdateDocumentDefaultVersionFuture{Future: future}
}

func (a *SSMStub) UpdateMaintenanceWindow(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowInput) (*ssm.UpdateMaintenanceWindowOutput, error) {
	var output ssm.UpdateMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateMaintenanceWindowAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowInput) *SSMUpdateMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateMaintenanceWindow", input)
	return &SSMUpdateMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) UpdateMaintenanceWindowTarget(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTargetInput) (*ssm.UpdateMaintenanceWindowTargetOutput, error) {
	var output ssm.UpdateMaintenanceWindowTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateMaintenanceWindowTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateMaintenanceWindowTargetAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTargetInput) *SSMUpdateMaintenanceWindowTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateMaintenanceWindowTarget", input)
	return &SSMUpdateMaintenanceWindowTargetFuture{Future: future}
}

func (a *SSMStub) UpdateMaintenanceWindowTask(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTaskInput) (*ssm.UpdateMaintenanceWindowTaskOutput, error) {
	var output ssm.UpdateMaintenanceWindowTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateMaintenanceWindowTask", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateMaintenanceWindowTaskAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTaskInput) *SSMUpdateMaintenanceWindowTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateMaintenanceWindowTask", input)
	return &SSMUpdateMaintenanceWindowTaskFuture{Future: future}
}

func (a *SSMStub) UpdateManagedInstanceRole(ctx workflow.Context, input *ssm.UpdateManagedInstanceRoleInput) (*ssm.UpdateManagedInstanceRoleOutput, error) {
	var output ssm.UpdateManagedInstanceRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateManagedInstanceRole", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateManagedInstanceRoleAsync(ctx workflow.Context, input *ssm.UpdateManagedInstanceRoleInput) *SSMUpdateManagedInstanceRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateManagedInstanceRole", input)
	return &SSMUpdateManagedInstanceRoleFuture{Future: future}
}

func (a *SSMStub) UpdateOpsItem(ctx workflow.Context, input *ssm.UpdateOpsItemInput) (*ssm.UpdateOpsItemOutput, error) {
	var output ssm.UpdateOpsItemOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateOpsItem", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateOpsItemAsync(ctx workflow.Context, input *ssm.UpdateOpsItemInput) *SSMUpdateOpsItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateOpsItem", input)
	return &SSMUpdateOpsItemFuture{Future: future}
}

func (a *SSMStub) UpdatePatchBaseline(ctx workflow.Context, input *ssm.UpdatePatchBaselineInput) (*ssm.UpdatePatchBaselineOutput, error) {
	var output ssm.UpdatePatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdatePatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdatePatchBaselineAsync(ctx workflow.Context, input *ssm.UpdatePatchBaselineInput) *SSMUpdatePatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdatePatchBaseline", input)
	return &SSMUpdatePatchBaselineFuture{Future: future}
}

func (a *SSMStub) UpdateResourceDataSync(ctx workflow.Context, input *ssm.UpdateResourceDataSyncInput) (*ssm.UpdateResourceDataSyncOutput, error) {
	var output ssm.UpdateResourceDataSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateResourceDataSync", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateResourceDataSyncAsync(ctx workflow.Context, input *ssm.UpdateResourceDataSyncInput) *SSMUpdateResourceDataSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateResourceDataSync", input)
	return &SSMUpdateResourceDataSyncFuture{Future: future}
}

func (a *SSMStub) UpdateServiceSetting(ctx workflow.Context, input *ssm.UpdateServiceSettingInput) (*ssm.UpdateServiceSettingOutput, error) {
	var output ssm.UpdateServiceSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateServiceSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateServiceSettingAsync(ctx workflow.Context, input *ssm.UpdateServiceSettingInput) *SSMUpdateServiceSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateServiceSetting", input)
	return &SSMUpdateServiceSettingFuture{Future: future}
}

func (a *SSMStub) WaitUntilCommandExecuted(ctx workflow.Context, input *ssm.GetCommandInvocationInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ssm.WaitUntilCommandExecuted", input).Get(ctx, nil)
}

func (a *SSMStub) WaitUntilCommandExecutedAsync(ctx workflow.Context, input *ssm.GetCommandInvocationInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.WaitUntilCommandExecuted", input)
	return NewVoidFuture(future)
}
