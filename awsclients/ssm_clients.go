// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/ssm"
	"go.temporal.io/sdk/workflow"
)

type SSMClient interface {
	AddTagsToResource(ctx workflow.Context, input *ssm.AddTagsToResourceInput) (*ssm.AddTagsToResourceOutput, error)
	AddTagsToResourceAsync(ctx workflow.Context, input *ssm.AddTagsToResourceInput) *SsmAddTagsToResourceFuture

	CancelCommand(ctx workflow.Context, input *ssm.CancelCommandInput) (*ssm.CancelCommandOutput, error)
	CancelCommandAsync(ctx workflow.Context, input *ssm.CancelCommandInput) *SsmCancelCommandFuture

	CancelMaintenanceWindowExecution(ctx workflow.Context, input *ssm.CancelMaintenanceWindowExecutionInput) (*ssm.CancelMaintenanceWindowExecutionOutput, error)
	CancelMaintenanceWindowExecutionAsync(ctx workflow.Context, input *ssm.CancelMaintenanceWindowExecutionInput) *SsmCancelMaintenanceWindowExecutionFuture

	CreateActivation(ctx workflow.Context, input *ssm.CreateActivationInput) (*ssm.CreateActivationOutput, error)
	CreateActivationAsync(ctx workflow.Context, input *ssm.CreateActivationInput) *SsmCreateActivationFuture

	CreateAssociation(ctx workflow.Context, input *ssm.CreateAssociationInput) (*ssm.CreateAssociationOutput, error)
	CreateAssociationAsync(ctx workflow.Context, input *ssm.CreateAssociationInput) *SsmCreateAssociationFuture

	CreateAssociationBatch(ctx workflow.Context, input *ssm.CreateAssociationBatchInput) (*ssm.CreateAssociationBatchOutput, error)
	CreateAssociationBatchAsync(ctx workflow.Context, input *ssm.CreateAssociationBatchInput) *SsmCreateAssociationBatchFuture

	CreateDocument(ctx workflow.Context, input *ssm.CreateDocumentInput) (*ssm.CreateDocumentOutput, error)
	CreateDocumentAsync(ctx workflow.Context, input *ssm.CreateDocumentInput) *SsmCreateDocumentFuture

	CreateMaintenanceWindow(ctx workflow.Context, input *ssm.CreateMaintenanceWindowInput) (*ssm.CreateMaintenanceWindowOutput, error)
	CreateMaintenanceWindowAsync(ctx workflow.Context, input *ssm.CreateMaintenanceWindowInput) *SsmCreateMaintenanceWindowFuture

	CreateOpsItem(ctx workflow.Context, input *ssm.CreateOpsItemInput) (*ssm.CreateOpsItemOutput, error)
	CreateOpsItemAsync(ctx workflow.Context, input *ssm.CreateOpsItemInput) *SsmCreateOpsItemFuture

	CreatePatchBaseline(ctx workflow.Context, input *ssm.CreatePatchBaselineInput) (*ssm.CreatePatchBaselineOutput, error)
	CreatePatchBaselineAsync(ctx workflow.Context, input *ssm.CreatePatchBaselineInput) *SsmCreatePatchBaselineFuture

	CreateResourceDataSync(ctx workflow.Context, input *ssm.CreateResourceDataSyncInput) (*ssm.CreateResourceDataSyncOutput, error)
	CreateResourceDataSyncAsync(ctx workflow.Context, input *ssm.CreateResourceDataSyncInput) *SsmCreateResourceDataSyncFuture

	DeleteActivation(ctx workflow.Context, input *ssm.DeleteActivationInput) (*ssm.DeleteActivationOutput, error)
	DeleteActivationAsync(ctx workflow.Context, input *ssm.DeleteActivationInput) *SsmDeleteActivationFuture

	DeleteAssociation(ctx workflow.Context, input *ssm.DeleteAssociationInput) (*ssm.DeleteAssociationOutput, error)
	DeleteAssociationAsync(ctx workflow.Context, input *ssm.DeleteAssociationInput) *SsmDeleteAssociationFuture

	DeleteDocument(ctx workflow.Context, input *ssm.DeleteDocumentInput) (*ssm.DeleteDocumentOutput, error)
	DeleteDocumentAsync(ctx workflow.Context, input *ssm.DeleteDocumentInput) *SsmDeleteDocumentFuture

	DeleteInventory(ctx workflow.Context, input *ssm.DeleteInventoryInput) (*ssm.DeleteInventoryOutput, error)
	DeleteInventoryAsync(ctx workflow.Context, input *ssm.DeleteInventoryInput) *SsmDeleteInventoryFuture

	DeleteMaintenanceWindow(ctx workflow.Context, input *ssm.DeleteMaintenanceWindowInput) (*ssm.DeleteMaintenanceWindowOutput, error)
	DeleteMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeleteMaintenanceWindowInput) *SsmDeleteMaintenanceWindowFuture

	DeleteParameter(ctx workflow.Context, input *ssm.DeleteParameterInput) (*ssm.DeleteParameterOutput, error)
	DeleteParameterAsync(ctx workflow.Context, input *ssm.DeleteParameterInput) *SsmDeleteParameterFuture

	DeleteParameters(ctx workflow.Context, input *ssm.DeleteParametersInput) (*ssm.DeleteParametersOutput, error)
	DeleteParametersAsync(ctx workflow.Context, input *ssm.DeleteParametersInput) *SsmDeleteParametersFuture

	DeletePatchBaseline(ctx workflow.Context, input *ssm.DeletePatchBaselineInput) (*ssm.DeletePatchBaselineOutput, error)
	DeletePatchBaselineAsync(ctx workflow.Context, input *ssm.DeletePatchBaselineInput) *SsmDeletePatchBaselineFuture

	DeleteResourceDataSync(ctx workflow.Context, input *ssm.DeleteResourceDataSyncInput) (*ssm.DeleteResourceDataSyncOutput, error)
	DeleteResourceDataSyncAsync(ctx workflow.Context, input *ssm.DeleteResourceDataSyncInput) *SsmDeleteResourceDataSyncFuture

	DeregisterManagedInstance(ctx workflow.Context, input *ssm.DeregisterManagedInstanceInput) (*ssm.DeregisterManagedInstanceOutput, error)
	DeregisterManagedInstanceAsync(ctx workflow.Context, input *ssm.DeregisterManagedInstanceInput) *SsmDeregisterManagedInstanceFuture

	DeregisterPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.DeregisterPatchBaselineForPatchGroupInput) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error)
	DeregisterPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.DeregisterPatchBaselineForPatchGroupInput) *SsmDeregisterPatchBaselineForPatchGroupFuture

	DeregisterTargetFromMaintenanceWindow(ctx workflow.Context, input *ssm.DeregisterTargetFromMaintenanceWindowInput) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error)
	DeregisterTargetFromMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeregisterTargetFromMaintenanceWindowInput) *SsmDeregisterTargetFromMaintenanceWindowFuture

	DeregisterTaskFromMaintenanceWindow(ctx workflow.Context, input *ssm.DeregisterTaskFromMaintenanceWindowInput) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error)
	DeregisterTaskFromMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeregisterTaskFromMaintenanceWindowInput) *SsmDeregisterTaskFromMaintenanceWindowFuture

	DescribeActivations(ctx workflow.Context, input *ssm.DescribeActivationsInput) (*ssm.DescribeActivationsOutput, error)
	DescribeActivationsAsync(ctx workflow.Context, input *ssm.DescribeActivationsInput) *SsmDescribeActivationsFuture

	DescribeAssociation(ctx workflow.Context, input *ssm.DescribeAssociationInput) (*ssm.DescribeAssociationOutput, error)
	DescribeAssociationAsync(ctx workflow.Context, input *ssm.DescribeAssociationInput) *SsmDescribeAssociationFuture

	DescribeAssociationExecutionTargets(ctx workflow.Context, input *ssm.DescribeAssociationExecutionTargetsInput) (*ssm.DescribeAssociationExecutionTargetsOutput, error)
	DescribeAssociationExecutionTargetsAsync(ctx workflow.Context, input *ssm.DescribeAssociationExecutionTargetsInput) *SsmDescribeAssociationExecutionTargetsFuture

	DescribeAssociationExecutions(ctx workflow.Context, input *ssm.DescribeAssociationExecutionsInput) (*ssm.DescribeAssociationExecutionsOutput, error)
	DescribeAssociationExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAssociationExecutionsInput) *SsmDescribeAssociationExecutionsFuture

	DescribeAutomationExecutions(ctx workflow.Context, input *ssm.DescribeAutomationExecutionsInput) (*ssm.DescribeAutomationExecutionsOutput, error)
	DescribeAutomationExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAutomationExecutionsInput) *SsmDescribeAutomationExecutionsFuture

	DescribeAutomationStepExecutions(ctx workflow.Context, input *ssm.DescribeAutomationStepExecutionsInput) (*ssm.DescribeAutomationStepExecutionsOutput, error)
	DescribeAutomationStepExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAutomationStepExecutionsInput) *SsmDescribeAutomationStepExecutionsFuture

	DescribeAvailablePatches(ctx workflow.Context, input *ssm.DescribeAvailablePatchesInput) (*ssm.DescribeAvailablePatchesOutput, error)
	DescribeAvailablePatchesAsync(ctx workflow.Context, input *ssm.DescribeAvailablePatchesInput) *SsmDescribeAvailablePatchesFuture

	DescribeDocument(ctx workflow.Context, input *ssm.DescribeDocumentInput) (*ssm.DescribeDocumentOutput, error)
	DescribeDocumentAsync(ctx workflow.Context, input *ssm.DescribeDocumentInput) *SsmDescribeDocumentFuture

	DescribeDocumentPermission(ctx workflow.Context, input *ssm.DescribeDocumentPermissionInput) (*ssm.DescribeDocumentPermissionOutput, error)
	DescribeDocumentPermissionAsync(ctx workflow.Context, input *ssm.DescribeDocumentPermissionInput) *SsmDescribeDocumentPermissionFuture

	DescribeEffectiveInstanceAssociations(ctx workflow.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error)
	DescribeEffectiveInstanceAssociationsAsync(ctx workflow.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput) *SsmDescribeEffectiveInstanceAssociationsFuture

	DescribeEffectivePatchesForPatchBaseline(ctx workflow.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error)
	DescribeEffectivePatchesForPatchBaselineAsync(ctx workflow.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput) *SsmDescribeEffectivePatchesForPatchBaselineFuture

	DescribeInstanceAssociationsStatus(ctx workflow.Context, input *ssm.DescribeInstanceAssociationsStatusInput) (*ssm.DescribeInstanceAssociationsStatusOutput, error)
	DescribeInstanceAssociationsStatusAsync(ctx workflow.Context, input *ssm.DescribeInstanceAssociationsStatusInput) *SsmDescribeInstanceAssociationsStatusFuture

	DescribeInstanceInformation(ctx workflow.Context, input *ssm.DescribeInstanceInformationInput) (*ssm.DescribeInstanceInformationOutput, error)
	DescribeInstanceInformationAsync(ctx workflow.Context, input *ssm.DescribeInstanceInformationInput) *SsmDescribeInstanceInformationFuture

	DescribeInstancePatchStates(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesInput) (*ssm.DescribeInstancePatchStatesOutput, error)
	DescribeInstancePatchStatesAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesInput) *SsmDescribeInstancePatchStatesFuture

	DescribeInstancePatchStatesForPatchGroup(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error)
	DescribeInstancePatchStatesForPatchGroupAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput) *SsmDescribeInstancePatchStatesForPatchGroupFuture

	DescribeInstancePatches(ctx workflow.Context, input *ssm.DescribeInstancePatchesInput) (*ssm.DescribeInstancePatchesOutput, error)
	DescribeInstancePatchesAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchesInput) *SsmDescribeInstancePatchesFuture

	DescribeInventoryDeletions(ctx workflow.Context, input *ssm.DescribeInventoryDeletionsInput) (*ssm.DescribeInventoryDeletionsOutput, error)
	DescribeInventoryDeletionsAsync(ctx workflow.Context, input *ssm.DescribeInventoryDeletionsInput) *SsmDescribeInventoryDeletionsFuture

	DescribeMaintenanceWindowExecutionTaskInvocations(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error)
	DescribeMaintenanceWindowExecutionTaskInvocationsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) *SsmDescribeMaintenanceWindowExecutionTaskInvocationsFuture

	DescribeMaintenanceWindowExecutionTasks(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error)
	DescribeMaintenanceWindowExecutionTasksAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput) *SsmDescribeMaintenanceWindowExecutionTasksFuture

	DescribeMaintenanceWindowExecutions(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error)
	DescribeMaintenanceWindowExecutionsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput) *SsmDescribeMaintenanceWindowExecutionsFuture

	DescribeMaintenanceWindowSchedule(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowScheduleInput) (*ssm.DescribeMaintenanceWindowScheduleOutput, error)
	DescribeMaintenanceWindowScheduleAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowScheduleInput) *SsmDescribeMaintenanceWindowScheduleFuture

	DescribeMaintenanceWindowTargets(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTargetsInput) (*ssm.DescribeMaintenanceWindowTargetsOutput, error)
	DescribeMaintenanceWindowTargetsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTargetsInput) *SsmDescribeMaintenanceWindowTargetsFuture

	DescribeMaintenanceWindowTasks(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTasksInput) (*ssm.DescribeMaintenanceWindowTasksOutput, error)
	DescribeMaintenanceWindowTasksAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTasksInput) *SsmDescribeMaintenanceWindowTasksFuture

	DescribeMaintenanceWindows(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsInput) (*ssm.DescribeMaintenanceWindowsOutput, error)
	DescribeMaintenanceWindowsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsInput) *SsmDescribeMaintenanceWindowsFuture

	DescribeMaintenanceWindowsForTarget(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error)
	DescribeMaintenanceWindowsForTargetAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput) *SsmDescribeMaintenanceWindowsForTargetFuture

	DescribeOpsItems(ctx workflow.Context, input *ssm.DescribeOpsItemsInput) (*ssm.DescribeOpsItemsOutput, error)
	DescribeOpsItemsAsync(ctx workflow.Context, input *ssm.DescribeOpsItemsInput) *SsmDescribeOpsItemsFuture

	DescribeParameters(ctx workflow.Context, input *ssm.DescribeParametersInput) (*ssm.DescribeParametersOutput, error)
	DescribeParametersAsync(ctx workflow.Context, input *ssm.DescribeParametersInput) *SsmDescribeParametersFuture

	DescribePatchBaselines(ctx workflow.Context, input *ssm.DescribePatchBaselinesInput) (*ssm.DescribePatchBaselinesOutput, error)
	DescribePatchBaselinesAsync(ctx workflow.Context, input *ssm.DescribePatchBaselinesInput) *SsmDescribePatchBaselinesFuture

	DescribePatchGroupState(ctx workflow.Context, input *ssm.DescribePatchGroupStateInput) (*ssm.DescribePatchGroupStateOutput, error)
	DescribePatchGroupStateAsync(ctx workflow.Context, input *ssm.DescribePatchGroupStateInput) *SsmDescribePatchGroupStateFuture

	DescribePatchGroups(ctx workflow.Context, input *ssm.DescribePatchGroupsInput) (*ssm.DescribePatchGroupsOutput, error)
	DescribePatchGroupsAsync(ctx workflow.Context, input *ssm.DescribePatchGroupsInput) *SsmDescribePatchGroupsFuture

	DescribePatchProperties(ctx workflow.Context, input *ssm.DescribePatchPropertiesInput) (*ssm.DescribePatchPropertiesOutput, error)
	DescribePatchPropertiesAsync(ctx workflow.Context, input *ssm.DescribePatchPropertiesInput) *SsmDescribePatchPropertiesFuture

	DescribeSessions(ctx workflow.Context, input *ssm.DescribeSessionsInput) (*ssm.DescribeSessionsOutput, error)
	DescribeSessionsAsync(ctx workflow.Context, input *ssm.DescribeSessionsInput) *SsmDescribeSessionsFuture

	GetAutomationExecution(ctx workflow.Context, input *ssm.GetAutomationExecutionInput) (*ssm.GetAutomationExecutionOutput, error)
	GetAutomationExecutionAsync(ctx workflow.Context, input *ssm.GetAutomationExecutionInput) *SsmGetAutomationExecutionFuture

	GetCalendarState(ctx workflow.Context, input *ssm.GetCalendarStateInput) (*ssm.GetCalendarStateOutput, error)
	GetCalendarStateAsync(ctx workflow.Context, input *ssm.GetCalendarStateInput) *SsmGetCalendarStateFuture

	GetCommandInvocation(ctx workflow.Context, input *ssm.GetCommandInvocationInput) (*ssm.GetCommandInvocationOutput, error)
	GetCommandInvocationAsync(ctx workflow.Context, input *ssm.GetCommandInvocationInput) *SsmGetCommandInvocationFuture

	GetConnectionStatus(ctx workflow.Context, input *ssm.GetConnectionStatusInput) (*ssm.GetConnectionStatusOutput, error)
	GetConnectionStatusAsync(ctx workflow.Context, input *ssm.GetConnectionStatusInput) *SsmGetConnectionStatusFuture

	GetDefaultPatchBaseline(ctx workflow.Context, input *ssm.GetDefaultPatchBaselineInput) (*ssm.GetDefaultPatchBaselineOutput, error)
	GetDefaultPatchBaselineAsync(ctx workflow.Context, input *ssm.GetDefaultPatchBaselineInput) *SsmGetDefaultPatchBaselineFuture

	GetDeployablePatchSnapshotForInstance(ctx workflow.Context, input *ssm.GetDeployablePatchSnapshotForInstanceInput) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error)
	GetDeployablePatchSnapshotForInstanceAsync(ctx workflow.Context, input *ssm.GetDeployablePatchSnapshotForInstanceInput) *SsmGetDeployablePatchSnapshotForInstanceFuture

	GetDocument(ctx workflow.Context, input *ssm.GetDocumentInput) (*ssm.GetDocumentOutput, error)
	GetDocumentAsync(ctx workflow.Context, input *ssm.GetDocumentInput) *SsmGetDocumentFuture

	GetInventory(ctx workflow.Context, input *ssm.GetInventoryInput) (*ssm.GetInventoryOutput, error)
	GetInventoryAsync(ctx workflow.Context, input *ssm.GetInventoryInput) *SsmGetInventoryFuture

	GetInventorySchema(ctx workflow.Context, input *ssm.GetInventorySchemaInput) (*ssm.GetInventorySchemaOutput, error)
	GetInventorySchemaAsync(ctx workflow.Context, input *ssm.GetInventorySchemaInput) *SsmGetInventorySchemaFuture

	GetMaintenanceWindow(ctx workflow.Context, input *ssm.GetMaintenanceWindowInput) (*ssm.GetMaintenanceWindowOutput, error)
	GetMaintenanceWindowAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowInput) *SsmGetMaintenanceWindowFuture

	GetMaintenanceWindowExecution(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionInput) (*ssm.GetMaintenanceWindowExecutionOutput, error)
	GetMaintenanceWindowExecutionAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionInput) *SsmGetMaintenanceWindowExecutionFuture

	GetMaintenanceWindowExecutionTask(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInput) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error)
	GetMaintenanceWindowExecutionTaskAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInput) *SsmGetMaintenanceWindowExecutionTaskFuture

	GetMaintenanceWindowExecutionTaskInvocation(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error)
	GetMaintenanceWindowExecutionTaskInvocationAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) *SsmGetMaintenanceWindowExecutionTaskInvocationFuture

	GetMaintenanceWindowTask(ctx workflow.Context, input *ssm.GetMaintenanceWindowTaskInput) (*ssm.GetMaintenanceWindowTaskOutput, error)
	GetMaintenanceWindowTaskAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowTaskInput) *SsmGetMaintenanceWindowTaskFuture

	GetOpsItem(ctx workflow.Context, input *ssm.GetOpsItemInput) (*ssm.GetOpsItemOutput, error)
	GetOpsItemAsync(ctx workflow.Context, input *ssm.GetOpsItemInput) *SsmGetOpsItemFuture

	GetOpsSummary(ctx workflow.Context, input *ssm.GetOpsSummaryInput) (*ssm.GetOpsSummaryOutput, error)
	GetOpsSummaryAsync(ctx workflow.Context, input *ssm.GetOpsSummaryInput) *SsmGetOpsSummaryFuture

	GetParameter(ctx workflow.Context, input *ssm.GetParameterInput) (*ssm.GetParameterOutput, error)
	GetParameterAsync(ctx workflow.Context, input *ssm.GetParameterInput) *SsmGetParameterFuture

	GetParameterHistory(ctx workflow.Context, input *ssm.GetParameterHistoryInput) (*ssm.GetParameterHistoryOutput, error)
	GetParameterHistoryAsync(ctx workflow.Context, input *ssm.GetParameterHistoryInput) *SsmGetParameterHistoryFuture

	GetParameters(ctx workflow.Context, input *ssm.GetParametersInput) (*ssm.GetParametersOutput, error)
	GetParametersAsync(ctx workflow.Context, input *ssm.GetParametersInput) *SsmGetParametersFuture

	GetParametersByPath(ctx workflow.Context, input *ssm.GetParametersByPathInput) (*ssm.GetParametersByPathOutput, error)
	GetParametersByPathAsync(ctx workflow.Context, input *ssm.GetParametersByPathInput) *SsmGetParametersByPathFuture

	GetPatchBaseline(ctx workflow.Context, input *ssm.GetPatchBaselineInput) (*ssm.GetPatchBaselineOutput, error)
	GetPatchBaselineAsync(ctx workflow.Context, input *ssm.GetPatchBaselineInput) *SsmGetPatchBaselineFuture

	GetPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.GetPatchBaselineForPatchGroupInput) (*ssm.GetPatchBaselineForPatchGroupOutput, error)
	GetPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.GetPatchBaselineForPatchGroupInput) *SsmGetPatchBaselineForPatchGroupFuture

	GetServiceSetting(ctx workflow.Context, input *ssm.GetServiceSettingInput) (*ssm.GetServiceSettingOutput, error)
	GetServiceSettingAsync(ctx workflow.Context, input *ssm.GetServiceSettingInput) *SsmGetServiceSettingFuture

	LabelParameterVersion(ctx workflow.Context, input *ssm.LabelParameterVersionInput) (*ssm.LabelParameterVersionOutput, error)
	LabelParameterVersionAsync(ctx workflow.Context, input *ssm.LabelParameterVersionInput) *SsmLabelParameterVersionFuture

	ListAssociationVersions(ctx workflow.Context, input *ssm.ListAssociationVersionsInput) (*ssm.ListAssociationVersionsOutput, error)
	ListAssociationVersionsAsync(ctx workflow.Context, input *ssm.ListAssociationVersionsInput) *SsmListAssociationVersionsFuture

	ListAssociations(ctx workflow.Context, input *ssm.ListAssociationsInput) (*ssm.ListAssociationsOutput, error)
	ListAssociationsAsync(ctx workflow.Context, input *ssm.ListAssociationsInput) *SsmListAssociationsFuture

	ListCommandInvocations(ctx workflow.Context, input *ssm.ListCommandInvocationsInput) (*ssm.ListCommandInvocationsOutput, error)
	ListCommandInvocationsAsync(ctx workflow.Context, input *ssm.ListCommandInvocationsInput) *SsmListCommandInvocationsFuture

	ListCommands(ctx workflow.Context, input *ssm.ListCommandsInput) (*ssm.ListCommandsOutput, error)
	ListCommandsAsync(ctx workflow.Context, input *ssm.ListCommandsInput) *SsmListCommandsFuture

	ListComplianceItems(ctx workflow.Context, input *ssm.ListComplianceItemsInput) (*ssm.ListComplianceItemsOutput, error)
	ListComplianceItemsAsync(ctx workflow.Context, input *ssm.ListComplianceItemsInput) *SsmListComplianceItemsFuture

	ListComplianceSummaries(ctx workflow.Context, input *ssm.ListComplianceSummariesInput) (*ssm.ListComplianceSummariesOutput, error)
	ListComplianceSummariesAsync(ctx workflow.Context, input *ssm.ListComplianceSummariesInput) *SsmListComplianceSummariesFuture

	ListDocumentVersions(ctx workflow.Context, input *ssm.ListDocumentVersionsInput) (*ssm.ListDocumentVersionsOutput, error)
	ListDocumentVersionsAsync(ctx workflow.Context, input *ssm.ListDocumentVersionsInput) *SsmListDocumentVersionsFuture

	ListDocuments(ctx workflow.Context, input *ssm.ListDocumentsInput) (*ssm.ListDocumentsOutput, error)
	ListDocumentsAsync(ctx workflow.Context, input *ssm.ListDocumentsInput) *SsmListDocumentsFuture

	ListInventoryEntries(ctx workflow.Context, input *ssm.ListInventoryEntriesInput) (*ssm.ListInventoryEntriesOutput, error)
	ListInventoryEntriesAsync(ctx workflow.Context, input *ssm.ListInventoryEntriesInput) *SsmListInventoryEntriesFuture

	ListResourceComplianceSummaries(ctx workflow.Context, input *ssm.ListResourceComplianceSummariesInput) (*ssm.ListResourceComplianceSummariesOutput, error)
	ListResourceComplianceSummariesAsync(ctx workflow.Context, input *ssm.ListResourceComplianceSummariesInput) *SsmListResourceComplianceSummariesFuture

	ListResourceDataSync(ctx workflow.Context, input *ssm.ListResourceDataSyncInput) (*ssm.ListResourceDataSyncOutput, error)
	ListResourceDataSyncAsync(ctx workflow.Context, input *ssm.ListResourceDataSyncInput) *SsmListResourceDataSyncFuture

	ListTagsForResource(ctx workflow.Context, input *ssm.ListTagsForResourceInput) (*ssm.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *ssm.ListTagsForResourceInput) *SsmListTagsForResourceFuture

	ModifyDocumentPermission(ctx workflow.Context, input *ssm.ModifyDocumentPermissionInput) (*ssm.ModifyDocumentPermissionOutput, error)
	ModifyDocumentPermissionAsync(ctx workflow.Context, input *ssm.ModifyDocumentPermissionInput) *SsmModifyDocumentPermissionFuture

	PutComplianceItems(ctx workflow.Context, input *ssm.PutComplianceItemsInput) (*ssm.PutComplianceItemsOutput, error)
	PutComplianceItemsAsync(ctx workflow.Context, input *ssm.PutComplianceItemsInput) *SsmPutComplianceItemsFuture

	PutInventory(ctx workflow.Context, input *ssm.PutInventoryInput) (*ssm.PutInventoryOutput, error)
	PutInventoryAsync(ctx workflow.Context, input *ssm.PutInventoryInput) *SsmPutInventoryFuture

	PutParameter(ctx workflow.Context, input *ssm.PutParameterInput) (*ssm.PutParameterOutput, error)
	PutParameterAsync(ctx workflow.Context, input *ssm.PutParameterInput) *SsmPutParameterFuture

	RegisterDefaultPatchBaseline(ctx workflow.Context, input *ssm.RegisterDefaultPatchBaselineInput) (*ssm.RegisterDefaultPatchBaselineOutput, error)
	RegisterDefaultPatchBaselineAsync(ctx workflow.Context, input *ssm.RegisterDefaultPatchBaselineInput) *SsmRegisterDefaultPatchBaselineFuture

	RegisterPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.RegisterPatchBaselineForPatchGroupInput) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error)
	RegisterPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.RegisterPatchBaselineForPatchGroupInput) *SsmRegisterPatchBaselineForPatchGroupFuture

	RegisterTargetWithMaintenanceWindow(ctx workflow.Context, input *ssm.RegisterTargetWithMaintenanceWindowInput) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error)
	RegisterTargetWithMaintenanceWindowAsync(ctx workflow.Context, input *ssm.RegisterTargetWithMaintenanceWindowInput) *SsmRegisterTargetWithMaintenanceWindowFuture

	RegisterTaskWithMaintenanceWindow(ctx workflow.Context, input *ssm.RegisterTaskWithMaintenanceWindowInput) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error)
	RegisterTaskWithMaintenanceWindowAsync(ctx workflow.Context, input *ssm.RegisterTaskWithMaintenanceWindowInput) *SsmRegisterTaskWithMaintenanceWindowFuture

	RemoveTagsFromResource(ctx workflow.Context, input *ssm.RemoveTagsFromResourceInput) (*ssm.RemoveTagsFromResourceOutput, error)
	RemoveTagsFromResourceAsync(ctx workflow.Context, input *ssm.RemoveTagsFromResourceInput) *SsmRemoveTagsFromResourceFuture

	ResetServiceSetting(ctx workflow.Context, input *ssm.ResetServiceSettingInput) (*ssm.ResetServiceSettingOutput, error)
	ResetServiceSettingAsync(ctx workflow.Context, input *ssm.ResetServiceSettingInput) *SsmResetServiceSettingFuture

	ResumeSession(ctx workflow.Context, input *ssm.ResumeSessionInput) (*ssm.ResumeSessionOutput, error)
	ResumeSessionAsync(ctx workflow.Context, input *ssm.ResumeSessionInput) *SsmResumeSessionFuture

	SendAutomationSignal(ctx workflow.Context, input *ssm.SendAutomationSignalInput) (*ssm.SendAutomationSignalOutput, error)
	SendAutomationSignalAsync(ctx workflow.Context, input *ssm.SendAutomationSignalInput) *SsmSendAutomationSignalFuture

	SendCommand(ctx workflow.Context, input *ssm.SendCommandInput) (*ssm.SendCommandOutput, error)
	SendCommandAsync(ctx workflow.Context, input *ssm.SendCommandInput) *SsmSendCommandFuture

	StartAssociationsOnce(ctx workflow.Context, input *ssm.StartAssociationsOnceInput) (*ssm.StartAssociationsOnceOutput, error)
	StartAssociationsOnceAsync(ctx workflow.Context, input *ssm.StartAssociationsOnceInput) *SsmStartAssociationsOnceFuture

	StartAutomationExecution(ctx workflow.Context, input *ssm.StartAutomationExecutionInput) (*ssm.StartAutomationExecutionOutput, error)
	StartAutomationExecutionAsync(ctx workflow.Context, input *ssm.StartAutomationExecutionInput) *SsmStartAutomationExecutionFuture

	StartSession(ctx workflow.Context, input *ssm.StartSessionInput) (*ssm.StartSessionOutput, error)
	StartSessionAsync(ctx workflow.Context, input *ssm.StartSessionInput) *SsmStartSessionFuture

	StopAutomationExecution(ctx workflow.Context, input *ssm.StopAutomationExecutionInput) (*ssm.StopAutomationExecutionOutput, error)
	StopAutomationExecutionAsync(ctx workflow.Context, input *ssm.StopAutomationExecutionInput) *SsmStopAutomationExecutionFuture

	TerminateSession(ctx workflow.Context, input *ssm.TerminateSessionInput) (*ssm.TerminateSessionOutput, error)
	TerminateSessionAsync(ctx workflow.Context, input *ssm.TerminateSessionInput) *SsmTerminateSessionFuture

	UpdateAssociation(ctx workflow.Context, input *ssm.UpdateAssociationInput) (*ssm.UpdateAssociationOutput, error)
	UpdateAssociationAsync(ctx workflow.Context, input *ssm.UpdateAssociationInput) *SsmUpdateAssociationFuture

	UpdateAssociationStatus(ctx workflow.Context, input *ssm.UpdateAssociationStatusInput) (*ssm.UpdateAssociationStatusOutput, error)
	UpdateAssociationStatusAsync(ctx workflow.Context, input *ssm.UpdateAssociationStatusInput) *SsmUpdateAssociationStatusFuture

	UpdateDocument(ctx workflow.Context, input *ssm.UpdateDocumentInput) (*ssm.UpdateDocumentOutput, error)
	UpdateDocumentAsync(ctx workflow.Context, input *ssm.UpdateDocumentInput) *SsmUpdateDocumentFuture

	UpdateDocumentDefaultVersion(ctx workflow.Context, input *ssm.UpdateDocumentDefaultVersionInput) (*ssm.UpdateDocumentDefaultVersionOutput, error)
	UpdateDocumentDefaultVersionAsync(ctx workflow.Context, input *ssm.UpdateDocumentDefaultVersionInput) *SsmUpdateDocumentDefaultVersionFuture

	UpdateMaintenanceWindow(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowInput) (*ssm.UpdateMaintenanceWindowOutput, error)
	UpdateMaintenanceWindowAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowInput) *SsmUpdateMaintenanceWindowFuture

	UpdateMaintenanceWindowTarget(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTargetInput) (*ssm.UpdateMaintenanceWindowTargetOutput, error)
	UpdateMaintenanceWindowTargetAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTargetInput) *SsmUpdateMaintenanceWindowTargetFuture

	UpdateMaintenanceWindowTask(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTaskInput) (*ssm.UpdateMaintenanceWindowTaskOutput, error)
	UpdateMaintenanceWindowTaskAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTaskInput) *SsmUpdateMaintenanceWindowTaskFuture

	UpdateManagedInstanceRole(ctx workflow.Context, input *ssm.UpdateManagedInstanceRoleInput) (*ssm.UpdateManagedInstanceRoleOutput, error)
	UpdateManagedInstanceRoleAsync(ctx workflow.Context, input *ssm.UpdateManagedInstanceRoleInput) *SsmUpdateManagedInstanceRoleFuture

	UpdateOpsItem(ctx workflow.Context, input *ssm.UpdateOpsItemInput) (*ssm.UpdateOpsItemOutput, error)
	UpdateOpsItemAsync(ctx workflow.Context, input *ssm.UpdateOpsItemInput) *SsmUpdateOpsItemFuture

	UpdatePatchBaseline(ctx workflow.Context, input *ssm.UpdatePatchBaselineInput) (*ssm.UpdatePatchBaselineOutput, error)
	UpdatePatchBaselineAsync(ctx workflow.Context, input *ssm.UpdatePatchBaselineInput) *SsmUpdatePatchBaselineFuture

	UpdateResourceDataSync(ctx workflow.Context, input *ssm.UpdateResourceDataSyncInput) (*ssm.UpdateResourceDataSyncOutput, error)
	UpdateResourceDataSyncAsync(ctx workflow.Context, input *ssm.UpdateResourceDataSyncInput) *SsmUpdateResourceDataSyncFuture

	UpdateServiceSetting(ctx workflow.Context, input *ssm.UpdateServiceSettingInput) (*ssm.UpdateServiceSettingOutput, error)
	UpdateServiceSettingAsync(ctx workflow.Context, input *ssm.UpdateServiceSettingInput) *SsmUpdateServiceSettingFuture

	WaitUntilCommandExecuted(ctx workflow.Context, input *ssm.GetCommandInvocationInput) error
	WaitUntilCommandExecutedAsync(ctx workflow.Context, input *ssm.GetCommandInvocationInput) *VoidFuture
}

type SSMStub struct{}

func NewSSMStub() SSMClient {
	return &SSMStub{}
}

type SsmAddTagsToResourceFuture struct {
	Future workflow.Future
}

func (r *SsmAddTagsToResourceFuture) Get(ctx workflow.Context) (*ssm.AddTagsToResourceOutput, error) {
	var output ssm.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmCancelCommandFuture struct {
	Future workflow.Future
}

func (r *SsmCancelCommandFuture) Get(ctx workflow.Context) (*ssm.CancelCommandOutput, error) {
	var output ssm.CancelCommandOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmCancelMaintenanceWindowExecutionFuture struct {
	Future workflow.Future
}

func (r *SsmCancelMaintenanceWindowExecutionFuture) Get(ctx workflow.Context) (*ssm.CancelMaintenanceWindowExecutionOutput, error) {
	var output ssm.CancelMaintenanceWindowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmCreateActivationFuture struct {
	Future workflow.Future
}

func (r *SsmCreateActivationFuture) Get(ctx workflow.Context) (*ssm.CreateActivationOutput, error) {
	var output ssm.CreateActivationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmCreateAssociationFuture struct {
	Future workflow.Future
}

func (r *SsmCreateAssociationFuture) Get(ctx workflow.Context) (*ssm.CreateAssociationOutput, error) {
	var output ssm.CreateAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmCreateAssociationBatchFuture struct {
	Future workflow.Future
}

func (r *SsmCreateAssociationBatchFuture) Get(ctx workflow.Context) (*ssm.CreateAssociationBatchOutput, error) {
	var output ssm.CreateAssociationBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmCreateDocumentFuture struct {
	Future workflow.Future
}

func (r *SsmCreateDocumentFuture) Get(ctx workflow.Context) (*ssm.CreateDocumentOutput, error) {
	var output ssm.CreateDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmCreateMaintenanceWindowFuture struct {
	Future workflow.Future
}

func (r *SsmCreateMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.CreateMaintenanceWindowOutput, error) {
	var output ssm.CreateMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmCreateOpsItemFuture struct {
	Future workflow.Future
}

func (r *SsmCreateOpsItemFuture) Get(ctx workflow.Context) (*ssm.CreateOpsItemOutput, error) {
	var output ssm.CreateOpsItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmCreatePatchBaselineFuture struct {
	Future workflow.Future
}

func (r *SsmCreatePatchBaselineFuture) Get(ctx workflow.Context) (*ssm.CreatePatchBaselineOutput, error) {
	var output ssm.CreatePatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmCreateResourceDataSyncFuture struct {
	Future workflow.Future
}

func (r *SsmCreateResourceDataSyncFuture) Get(ctx workflow.Context) (*ssm.CreateResourceDataSyncOutput, error) {
	var output ssm.CreateResourceDataSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeleteActivationFuture struct {
	Future workflow.Future
}

func (r *SsmDeleteActivationFuture) Get(ctx workflow.Context) (*ssm.DeleteActivationOutput, error) {
	var output ssm.DeleteActivationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeleteAssociationFuture struct {
	Future workflow.Future
}

func (r *SsmDeleteAssociationFuture) Get(ctx workflow.Context) (*ssm.DeleteAssociationOutput, error) {
	var output ssm.DeleteAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeleteDocumentFuture struct {
	Future workflow.Future
}

func (r *SsmDeleteDocumentFuture) Get(ctx workflow.Context) (*ssm.DeleteDocumentOutput, error) {
	var output ssm.DeleteDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeleteInventoryFuture struct {
	Future workflow.Future
}

func (r *SsmDeleteInventoryFuture) Get(ctx workflow.Context) (*ssm.DeleteInventoryOutput, error) {
	var output ssm.DeleteInventoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeleteMaintenanceWindowFuture struct {
	Future workflow.Future
}

func (r *SsmDeleteMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.DeleteMaintenanceWindowOutput, error) {
	var output ssm.DeleteMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeleteParameterFuture struct {
	Future workflow.Future
}

func (r *SsmDeleteParameterFuture) Get(ctx workflow.Context) (*ssm.DeleteParameterOutput, error) {
	var output ssm.DeleteParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeleteParametersFuture struct {
	Future workflow.Future
}

func (r *SsmDeleteParametersFuture) Get(ctx workflow.Context) (*ssm.DeleteParametersOutput, error) {
	var output ssm.DeleteParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeletePatchBaselineFuture struct {
	Future workflow.Future
}

func (r *SsmDeletePatchBaselineFuture) Get(ctx workflow.Context) (*ssm.DeletePatchBaselineOutput, error) {
	var output ssm.DeletePatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeleteResourceDataSyncFuture struct {
	Future workflow.Future
}

func (r *SsmDeleteResourceDataSyncFuture) Get(ctx workflow.Context) (*ssm.DeleteResourceDataSyncOutput, error) {
	var output ssm.DeleteResourceDataSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeregisterManagedInstanceFuture struct {
	Future workflow.Future
}

func (r *SsmDeregisterManagedInstanceFuture) Get(ctx workflow.Context) (*ssm.DeregisterManagedInstanceOutput, error) {
	var output ssm.DeregisterManagedInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeregisterPatchBaselineForPatchGroupFuture struct {
	Future workflow.Future
}

func (r *SsmDeregisterPatchBaselineForPatchGroupFuture) Get(ctx workflow.Context) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error) {
	var output ssm.DeregisterPatchBaselineForPatchGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeregisterTargetFromMaintenanceWindowFuture struct {
	Future workflow.Future
}

func (r *SsmDeregisterTargetFromMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error) {
	var output ssm.DeregisterTargetFromMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDeregisterTaskFromMaintenanceWindowFuture struct {
	Future workflow.Future
}

func (r *SsmDeregisterTaskFromMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error) {
	var output ssm.DeregisterTaskFromMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeActivationsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeActivationsFuture) Get(ctx workflow.Context) (*ssm.DescribeActivationsOutput, error) {
	var output ssm.DescribeActivationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeAssociationFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeAssociationFuture) Get(ctx workflow.Context) (*ssm.DescribeAssociationOutput, error) {
	var output ssm.DescribeAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeAssociationExecutionTargetsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeAssociationExecutionTargetsFuture) Get(ctx workflow.Context) (*ssm.DescribeAssociationExecutionTargetsOutput, error) {
	var output ssm.DescribeAssociationExecutionTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeAssociationExecutionsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeAssociationExecutionsFuture) Get(ctx workflow.Context) (*ssm.DescribeAssociationExecutionsOutput, error) {
	var output ssm.DescribeAssociationExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeAutomationExecutionsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeAutomationExecutionsFuture) Get(ctx workflow.Context) (*ssm.DescribeAutomationExecutionsOutput, error) {
	var output ssm.DescribeAutomationExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeAutomationStepExecutionsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeAutomationStepExecutionsFuture) Get(ctx workflow.Context) (*ssm.DescribeAutomationStepExecutionsOutput, error) {
	var output ssm.DescribeAutomationStepExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeAvailablePatchesFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeAvailablePatchesFuture) Get(ctx workflow.Context) (*ssm.DescribeAvailablePatchesOutput, error) {
	var output ssm.DescribeAvailablePatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeDocumentFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeDocumentFuture) Get(ctx workflow.Context) (*ssm.DescribeDocumentOutput, error) {
	var output ssm.DescribeDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeDocumentPermissionFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeDocumentPermissionFuture) Get(ctx workflow.Context) (*ssm.DescribeDocumentPermissionOutput, error) {
	var output ssm.DescribeDocumentPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeEffectiveInstanceAssociationsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeEffectiveInstanceAssociationsFuture) Get(ctx workflow.Context) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {
	var output ssm.DescribeEffectiveInstanceAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeEffectivePatchesForPatchBaselineFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeEffectivePatchesForPatchBaselineFuture) Get(ctx workflow.Context) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {
	var output ssm.DescribeEffectivePatchesForPatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeInstanceAssociationsStatusFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeInstanceAssociationsStatusFuture) Get(ctx workflow.Context) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {
	var output ssm.DescribeInstanceAssociationsStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeInstanceInformationFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeInstanceInformationFuture) Get(ctx workflow.Context) (*ssm.DescribeInstanceInformationOutput, error) {
	var output ssm.DescribeInstanceInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeInstancePatchStatesFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeInstancePatchStatesFuture) Get(ctx workflow.Context) (*ssm.DescribeInstancePatchStatesOutput, error) {
	var output ssm.DescribeInstancePatchStatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeInstancePatchStatesForPatchGroupFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeInstancePatchStatesForPatchGroupFuture) Get(ctx workflow.Context) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {
	var output ssm.DescribeInstancePatchStatesForPatchGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeInstancePatchesFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeInstancePatchesFuture) Get(ctx workflow.Context) (*ssm.DescribeInstancePatchesOutput, error) {
	var output ssm.DescribeInstancePatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeInventoryDeletionsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeInventoryDeletionsFuture) Get(ctx workflow.Context) (*ssm.DescribeInventoryDeletionsOutput, error) {
	var output ssm.DescribeInventoryDeletionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeMaintenanceWindowExecutionTaskInvocationsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeMaintenanceWindowExecutionTaskInvocationsFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeMaintenanceWindowExecutionTasksFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeMaintenanceWindowExecutionTasksFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeMaintenanceWindowExecutionsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeMaintenanceWindowExecutionsFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeMaintenanceWindowScheduleFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeMaintenanceWindowScheduleFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowScheduleOutput, error) {
	var output ssm.DescribeMaintenanceWindowScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeMaintenanceWindowTargetsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeMaintenanceWindowTargetsFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {
	var output ssm.DescribeMaintenanceWindowTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeMaintenanceWindowTasksFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeMaintenanceWindowTasksFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {
	var output ssm.DescribeMaintenanceWindowTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeMaintenanceWindowsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeMaintenanceWindowsFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowsOutput, error) {
	var output ssm.DescribeMaintenanceWindowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeMaintenanceWindowsForTargetFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeMaintenanceWindowsForTargetFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error) {
	var output ssm.DescribeMaintenanceWindowsForTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeOpsItemsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeOpsItemsFuture) Get(ctx workflow.Context) (*ssm.DescribeOpsItemsOutput, error) {
	var output ssm.DescribeOpsItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeParametersFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeParametersFuture) Get(ctx workflow.Context) (*ssm.DescribeParametersOutput, error) {
	var output ssm.DescribeParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribePatchBaselinesFuture struct {
	Future workflow.Future
}

func (r *SsmDescribePatchBaselinesFuture) Get(ctx workflow.Context) (*ssm.DescribePatchBaselinesOutput, error) {
	var output ssm.DescribePatchBaselinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribePatchGroupStateFuture struct {
	Future workflow.Future
}

func (r *SsmDescribePatchGroupStateFuture) Get(ctx workflow.Context) (*ssm.DescribePatchGroupStateOutput, error) {
	var output ssm.DescribePatchGroupStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribePatchGroupsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribePatchGroupsFuture) Get(ctx workflow.Context) (*ssm.DescribePatchGroupsOutput, error) {
	var output ssm.DescribePatchGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribePatchPropertiesFuture struct {
	Future workflow.Future
}

func (r *SsmDescribePatchPropertiesFuture) Get(ctx workflow.Context) (*ssm.DescribePatchPropertiesOutput, error) {
	var output ssm.DescribePatchPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmDescribeSessionsFuture struct {
	Future workflow.Future
}

func (r *SsmDescribeSessionsFuture) Get(ctx workflow.Context) (*ssm.DescribeSessionsOutput, error) {
	var output ssm.DescribeSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetAutomationExecutionFuture struct {
	Future workflow.Future
}

func (r *SsmGetAutomationExecutionFuture) Get(ctx workflow.Context) (*ssm.GetAutomationExecutionOutput, error) {
	var output ssm.GetAutomationExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetCalendarStateFuture struct {
	Future workflow.Future
}

func (r *SsmGetCalendarStateFuture) Get(ctx workflow.Context) (*ssm.GetCalendarStateOutput, error) {
	var output ssm.GetCalendarStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetCommandInvocationFuture struct {
	Future workflow.Future
}

func (r *SsmGetCommandInvocationFuture) Get(ctx workflow.Context) (*ssm.GetCommandInvocationOutput, error) {
	var output ssm.GetCommandInvocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetConnectionStatusFuture struct {
	Future workflow.Future
}

func (r *SsmGetConnectionStatusFuture) Get(ctx workflow.Context) (*ssm.GetConnectionStatusOutput, error) {
	var output ssm.GetConnectionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetDefaultPatchBaselineFuture struct {
	Future workflow.Future
}

func (r *SsmGetDefaultPatchBaselineFuture) Get(ctx workflow.Context) (*ssm.GetDefaultPatchBaselineOutput, error) {
	var output ssm.GetDefaultPatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetDeployablePatchSnapshotForInstanceFuture struct {
	Future workflow.Future
}

func (r *SsmGetDeployablePatchSnapshotForInstanceFuture) Get(ctx workflow.Context) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {
	var output ssm.GetDeployablePatchSnapshotForInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetDocumentFuture struct {
	Future workflow.Future
}

func (r *SsmGetDocumentFuture) Get(ctx workflow.Context) (*ssm.GetDocumentOutput, error) {
	var output ssm.GetDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetInventoryFuture struct {
	Future workflow.Future
}

func (r *SsmGetInventoryFuture) Get(ctx workflow.Context) (*ssm.GetInventoryOutput, error) {
	var output ssm.GetInventoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetInventorySchemaFuture struct {
	Future workflow.Future
}

func (r *SsmGetInventorySchemaFuture) Get(ctx workflow.Context) (*ssm.GetInventorySchemaOutput, error) {
	var output ssm.GetInventorySchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetMaintenanceWindowFuture struct {
	Future workflow.Future
}

func (r *SsmGetMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowOutput, error) {
	var output ssm.GetMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetMaintenanceWindowExecutionFuture struct {
	Future workflow.Future
}

func (r *SsmGetMaintenanceWindowExecutionFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowExecutionOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetMaintenanceWindowExecutionTaskFuture struct {
	Future workflow.Future
}

func (r *SsmGetMaintenanceWindowExecutionTaskFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetMaintenanceWindowExecutionTaskInvocationFuture struct {
	Future workflow.Future
}

func (r *SsmGetMaintenanceWindowExecutionTaskInvocationFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetMaintenanceWindowTaskFuture struct {
	Future workflow.Future
}

func (r *SsmGetMaintenanceWindowTaskFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowTaskOutput, error) {
	var output ssm.GetMaintenanceWindowTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetOpsItemFuture struct {
	Future workflow.Future
}

func (r *SsmGetOpsItemFuture) Get(ctx workflow.Context) (*ssm.GetOpsItemOutput, error) {
	var output ssm.GetOpsItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetOpsSummaryFuture struct {
	Future workflow.Future
}

func (r *SsmGetOpsSummaryFuture) Get(ctx workflow.Context) (*ssm.GetOpsSummaryOutput, error) {
	var output ssm.GetOpsSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetParameterFuture struct {
	Future workflow.Future
}

func (r *SsmGetParameterFuture) Get(ctx workflow.Context) (*ssm.GetParameterOutput, error) {
	var output ssm.GetParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetParameterHistoryFuture struct {
	Future workflow.Future
}

func (r *SsmGetParameterHistoryFuture) Get(ctx workflow.Context) (*ssm.GetParameterHistoryOutput, error) {
	var output ssm.GetParameterHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetParametersFuture struct {
	Future workflow.Future
}

func (r *SsmGetParametersFuture) Get(ctx workflow.Context) (*ssm.GetParametersOutput, error) {
	var output ssm.GetParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetParametersByPathFuture struct {
	Future workflow.Future
}

func (r *SsmGetParametersByPathFuture) Get(ctx workflow.Context) (*ssm.GetParametersByPathOutput, error) {
	var output ssm.GetParametersByPathOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetPatchBaselineFuture struct {
	Future workflow.Future
}

func (r *SsmGetPatchBaselineFuture) Get(ctx workflow.Context) (*ssm.GetPatchBaselineOutput, error) {
	var output ssm.GetPatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetPatchBaselineForPatchGroupFuture struct {
	Future workflow.Future
}

func (r *SsmGetPatchBaselineForPatchGroupFuture) Get(ctx workflow.Context) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {
	var output ssm.GetPatchBaselineForPatchGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmGetServiceSettingFuture struct {
	Future workflow.Future
}

func (r *SsmGetServiceSettingFuture) Get(ctx workflow.Context) (*ssm.GetServiceSettingOutput, error) {
	var output ssm.GetServiceSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmLabelParameterVersionFuture struct {
	Future workflow.Future
}

func (r *SsmLabelParameterVersionFuture) Get(ctx workflow.Context) (*ssm.LabelParameterVersionOutput, error) {
	var output ssm.LabelParameterVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmListAssociationVersionsFuture struct {
	Future workflow.Future
}

func (r *SsmListAssociationVersionsFuture) Get(ctx workflow.Context) (*ssm.ListAssociationVersionsOutput, error) {
	var output ssm.ListAssociationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmListAssociationsFuture struct {
	Future workflow.Future
}

func (r *SsmListAssociationsFuture) Get(ctx workflow.Context) (*ssm.ListAssociationsOutput, error) {
	var output ssm.ListAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmListCommandInvocationsFuture struct {
	Future workflow.Future
}

func (r *SsmListCommandInvocationsFuture) Get(ctx workflow.Context) (*ssm.ListCommandInvocationsOutput, error) {
	var output ssm.ListCommandInvocationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmListCommandsFuture struct {
	Future workflow.Future
}

func (r *SsmListCommandsFuture) Get(ctx workflow.Context) (*ssm.ListCommandsOutput, error) {
	var output ssm.ListCommandsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmListComplianceItemsFuture struct {
	Future workflow.Future
}

func (r *SsmListComplianceItemsFuture) Get(ctx workflow.Context) (*ssm.ListComplianceItemsOutput, error) {
	var output ssm.ListComplianceItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmListComplianceSummariesFuture struct {
	Future workflow.Future
}

func (r *SsmListComplianceSummariesFuture) Get(ctx workflow.Context) (*ssm.ListComplianceSummariesOutput, error) {
	var output ssm.ListComplianceSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmListDocumentVersionsFuture struct {
	Future workflow.Future
}

func (r *SsmListDocumentVersionsFuture) Get(ctx workflow.Context) (*ssm.ListDocumentVersionsOutput, error) {
	var output ssm.ListDocumentVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmListDocumentsFuture struct {
	Future workflow.Future
}

func (r *SsmListDocumentsFuture) Get(ctx workflow.Context) (*ssm.ListDocumentsOutput, error) {
	var output ssm.ListDocumentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmListInventoryEntriesFuture struct {
	Future workflow.Future
}

func (r *SsmListInventoryEntriesFuture) Get(ctx workflow.Context) (*ssm.ListInventoryEntriesOutput, error) {
	var output ssm.ListInventoryEntriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmListResourceComplianceSummariesFuture struct {
	Future workflow.Future
}

func (r *SsmListResourceComplianceSummariesFuture) Get(ctx workflow.Context) (*ssm.ListResourceComplianceSummariesOutput, error) {
	var output ssm.ListResourceComplianceSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmListResourceDataSyncFuture struct {
	Future workflow.Future
}

func (r *SsmListResourceDataSyncFuture) Get(ctx workflow.Context) (*ssm.ListResourceDataSyncOutput, error) {
	var output ssm.ListResourceDataSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *SsmListTagsForResourceFuture) Get(ctx workflow.Context) (*ssm.ListTagsForResourceOutput, error) {
	var output ssm.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmModifyDocumentPermissionFuture struct {
	Future workflow.Future
}

func (r *SsmModifyDocumentPermissionFuture) Get(ctx workflow.Context) (*ssm.ModifyDocumentPermissionOutput, error) {
	var output ssm.ModifyDocumentPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmPutComplianceItemsFuture struct {
	Future workflow.Future
}

func (r *SsmPutComplianceItemsFuture) Get(ctx workflow.Context) (*ssm.PutComplianceItemsOutput, error) {
	var output ssm.PutComplianceItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmPutInventoryFuture struct {
	Future workflow.Future
}

func (r *SsmPutInventoryFuture) Get(ctx workflow.Context) (*ssm.PutInventoryOutput, error) {
	var output ssm.PutInventoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmPutParameterFuture struct {
	Future workflow.Future
}

func (r *SsmPutParameterFuture) Get(ctx workflow.Context) (*ssm.PutParameterOutput, error) {
	var output ssm.PutParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmRegisterDefaultPatchBaselineFuture struct {
	Future workflow.Future
}

func (r *SsmRegisterDefaultPatchBaselineFuture) Get(ctx workflow.Context) (*ssm.RegisterDefaultPatchBaselineOutput, error) {
	var output ssm.RegisterDefaultPatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmRegisterPatchBaselineForPatchGroupFuture struct {
	Future workflow.Future
}

func (r *SsmRegisterPatchBaselineForPatchGroupFuture) Get(ctx workflow.Context) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error) {
	var output ssm.RegisterPatchBaselineForPatchGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmRegisterTargetWithMaintenanceWindowFuture struct {
	Future workflow.Future
}

func (r *SsmRegisterTargetWithMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error) {
	var output ssm.RegisterTargetWithMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmRegisterTaskWithMaintenanceWindowFuture struct {
	Future workflow.Future
}

func (r *SsmRegisterTaskWithMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error) {
	var output ssm.RegisterTaskWithMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmRemoveTagsFromResourceFuture struct {
	Future workflow.Future
}

func (r *SsmRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*ssm.RemoveTagsFromResourceOutput, error) {
	var output ssm.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmResetServiceSettingFuture struct {
	Future workflow.Future
}

func (r *SsmResetServiceSettingFuture) Get(ctx workflow.Context) (*ssm.ResetServiceSettingOutput, error) {
	var output ssm.ResetServiceSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmResumeSessionFuture struct {
	Future workflow.Future
}

func (r *SsmResumeSessionFuture) Get(ctx workflow.Context) (*ssm.ResumeSessionOutput, error) {
	var output ssm.ResumeSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmSendAutomationSignalFuture struct {
	Future workflow.Future
}

func (r *SsmSendAutomationSignalFuture) Get(ctx workflow.Context) (*ssm.SendAutomationSignalOutput, error) {
	var output ssm.SendAutomationSignalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmSendCommandFuture struct {
	Future workflow.Future
}

func (r *SsmSendCommandFuture) Get(ctx workflow.Context) (*ssm.SendCommandOutput, error) {
	var output ssm.SendCommandOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmStartAssociationsOnceFuture struct {
	Future workflow.Future
}

func (r *SsmStartAssociationsOnceFuture) Get(ctx workflow.Context) (*ssm.StartAssociationsOnceOutput, error) {
	var output ssm.StartAssociationsOnceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmStartAutomationExecutionFuture struct {
	Future workflow.Future
}

func (r *SsmStartAutomationExecutionFuture) Get(ctx workflow.Context) (*ssm.StartAutomationExecutionOutput, error) {
	var output ssm.StartAutomationExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmStartSessionFuture struct {
	Future workflow.Future
}

func (r *SsmStartSessionFuture) Get(ctx workflow.Context) (*ssm.StartSessionOutput, error) {
	var output ssm.StartSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmStopAutomationExecutionFuture struct {
	Future workflow.Future
}

func (r *SsmStopAutomationExecutionFuture) Get(ctx workflow.Context) (*ssm.StopAutomationExecutionOutput, error) {
	var output ssm.StopAutomationExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmTerminateSessionFuture struct {
	Future workflow.Future
}

func (r *SsmTerminateSessionFuture) Get(ctx workflow.Context) (*ssm.TerminateSessionOutput, error) {
	var output ssm.TerminateSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmUpdateAssociationFuture struct {
	Future workflow.Future
}

func (r *SsmUpdateAssociationFuture) Get(ctx workflow.Context) (*ssm.UpdateAssociationOutput, error) {
	var output ssm.UpdateAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmUpdateAssociationStatusFuture struct {
	Future workflow.Future
}

func (r *SsmUpdateAssociationStatusFuture) Get(ctx workflow.Context) (*ssm.UpdateAssociationStatusOutput, error) {
	var output ssm.UpdateAssociationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmUpdateDocumentFuture struct {
	Future workflow.Future
}

func (r *SsmUpdateDocumentFuture) Get(ctx workflow.Context) (*ssm.UpdateDocumentOutput, error) {
	var output ssm.UpdateDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmUpdateDocumentDefaultVersionFuture struct {
	Future workflow.Future
}

func (r *SsmUpdateDocumentDefaultVersionFuture) Get(ctx workflow.Context) (*ssm.UpdateDocumentDefaultVersionOutput, error) {
	var output ssm.UpdateDocumentDefaultVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmUpdateMaintenanceWindowFuture struct {
	Future workflow.Future
}

func (r *SsmUpdateMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.UpdateMaintenanceWindowOutput, error) {
	var output ssm.UpdateMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmUpdateMaintenanceWindowTargetFuture struct {
	Future workflow.Future
}

func (r *SsmUpdateMaintenanceWindowTargetFuture) Get(ctx workflow.Context) (*ssm.UpdateMaintenanceWindowTargetOutput, error) {
	var output ssm.UpdateMaintenanceWindowTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmUpdateMaintenanceWindowTaskFuture struct {
	Future workflow.Future
}

func (r *SsmUpdateMaintenanceWindowTaskFuture) Get(ctx workflow.Context) (*ssm.UpdateMaintenanceWindowTaskOutput, error) {
	var output ssm.UpdateMaintenanceWindowTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmUpdateManagedInstanceRoleFuture struct {
	Future workflow.Future
}

func (r *SsmUpdateManagedInstanceRoleFuture) Get(ctx workflow.Context) (*ssm.UpdateManagedInstanceRoleOutput, error) {
	var output ssm.UpdateManagedInstanceRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmUpdateOpsItemFuture struct {
	Future workflow.Future
}

func (r *SsmUpdateOpsItemFuture) Get(ctx workflow.Context) (*ssm.UpdateOpsItemOutput, error) {
	var output ssm.UpdateOpsItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmUpdatePatchBaselineFuture struct {
	Future workflow.Future
}

func (r *SsmUpdatePatchBaselineFuture) Get(ctx workflow.Context) (*ssm.UpdatePatchBaselineOutput, error) {
	var output ssm.UpdatePatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmUpdateResourceDataSyncFuture struct {
	Future workflow.Future
}

func (r *SsmUpdateResourceDataSyncFuture) Get(ctx workflow.Context) (*ssm.UpdateResourceDataSyncOutput, error) {
	var output ssm.UpdateResourceDataSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SsmUpdateServiceSettingFuture struct {
	Future workflow.Future
}

func (r *SsmUpdateServiceSettingFuture) Get(ctx workflow.Context) (*ssm.UpdateServiceSettingOutput, error) {
	var output ssm.UpdateServiceSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) AddTagsToResource(ctx workflow.Context, input *ssm.AddTagsToResourceInput) (*ssm.AddTagsToResourceOutput, error) {
	var output ssm.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) AddTagsToResourceAsync(ctx workflow.Context, input *ssm.AddTagsToResourceInput) *SsmAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.AddTagsToResource", input)
	return &SsmAddTagsToResourceFuture{Future: future}
}

func (a *SSMStub) CancelCommand(ctx workflow.Context, input *ssm.CancelCommandInput) (*ssm.CancelCommandOutput, error) {
	var output ssm.CancelCommandOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CancelCommand", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CancelCommandAsync(ctx workflow.Context, input *ssm.CancelCommandInput) *SsmCancelCommandFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CancelCommand", input)
	return &SsmCancelCommandFuture{Future: future}
}

func (a *SSMStub) CancelMaintenanceWindowExecution(ctx workflow.Context, input *ssm.CancelMaintenanceWindowExecutionInput) (*ssm.CancelMaintenanceWindowExecutionOutput, error) {
	var output ssm.CancelMaintenanceWindowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CancelMaintenanceWindowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CancelMaintenanceWindowExecutionAsync(ctx workflow.Context, input *ssm.CancelMaintenanceWindowExecutionInput) *SsmCancelMaintenanceWindowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CancelMaintenanceWindowExecution", input)
	return &SsmCancelMaintenanceWindowExecutionFuture{Future: future}
}

func (a *SSMStub) CreateActivation(ctx workflow.Context, input *ssm.CreateActivationInput) (*ssm.CreateActivationOutput, error) {
	var output ssm.CreateActivationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateActivation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateActivationAsync(ctx workflow.Context, input *ssm.CreateActivationInput) *SsmCreateActivationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateActivation", input)
	return &SsmCreateActivationFuture{Future: future}
}

func (a *SSMStub) CreateAssociation(ctx workflow.Context, input *ssm.CreateAssociationInput) (*ssm.CreateAssociationOutput, error) {
	var output ssm.CreateAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateAssociationAsync(ctx workflow.Context, input *ssm.CreateAssociationInput) *SsmCreateAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateAssociation", input)
	return &SsmCreateAssociationFuture{Future: future}
}

func (a *SSMStub) CreateAssociationBatch(ctx workflow.Context, input *ssm.CreateAssociationBatchInput) (*ssm.CreateAssociationBatchOutput, error) {
	var output ssm.CreateAssociationBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateAssociationBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateAssociationBatchAsync(ctx workflow.Context, input *ssm.CreateAssociationBatchInput) *SsmCreateAssociationBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateAssociationBatch", input)
	return &SsmCreateAssociationBatchFuture{Future: future}
}

func (a *SSMStub) CreateDocument(ctx workflow.Context, input *ssm.CreateDocumentInput) (*ssm.CreateDocumentOutput, error) {
	var output ssm.CreateDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateDocumentAsync(ctx workflow.Context, input *ssm.CreateDocumentInput) *SsmCreateDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateDocument", input)
	return &SsmCreateDocumentFuture{Future: future}
}

func (a *SSMStub) CreateMaintenanceWindow(ctx workflow.Context, input *ssm.CreateMaintenanceWindowInput) (*ssm.CreateMaintenanceWindowOutput, error) {
	var output ssm.CreateMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateMaintenanceWindowAsync(ctx workflow.Context, input *ssm.CreateMaintenanceWindowInput) *SsmCreateMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateMaintenanceWindow", input)
	return &SsmCreateMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) CreateOpsItem(ctx workflow.Context, input *ssm.CreateOpsItemInput) (*ssm.CreateOpsItemOutput, error) {
	var output ssm.CreateOpsItemOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateOpsItem", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateOpsItemAsync(ctx workflow.Context, input *ssm.CreateOpsItemInput) *SsmCreateOpsItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateOpsItem", input)
	return &SsmCreateOpsItemFuture{Future: future}
}

func (a *SSMStub) CreatePatchBaseline(ctx workflow.Context, input *ssm.CreatePatchBaselineInput) (*ssm.CreatePatchBaselineOutput, error) {
	var output ssm.CreatePatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreatePatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreatePatchBaselineAsync(ctx workflow.Context, input *ssm.CreatePatchBaselineInput) *SsmCreatePatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreatePatchBaseline", input)
	return &SsmCreatePatchBaselineFuture{Future: future}
}

func (a *SSMStub) CreateResourceDataSync(ctx workflow.Context, input *ssm.CreateResourceDataSyncInput) (*ssm.CreateResourceDataSyncOutput, error) {
	var output ssm.CreateResourceDataSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.CreateResourceDataSync", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) CreateResourceDataSyncAsync(ctx workflow.Context, input *ssm.CreateResourceDataSyncInput) *SsmCreateResourceDataSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.CreateResourceDataSync", input)
	return &SsmCreateResourceDataSyncFuture{Future: future}
}

func (a *SSMStub) DeleteActivation(ctx workflow.Context, input *ssm.DeleteActivationInput) (*ssm.DeleteActivationOutput, error) {
	var output ssm.DeleteActivationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteActivation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteActivationAsync(ctx workflow.Context, input *ssm.DeleteActivationInput) *SsmDeleteActivationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteActivation", input)
	return &SsmDeleteActivationFuture{Future: future}
}

func (a *SSMStub) DeleteAssociation(ctx workflow.Context, input *ssm.DeleteAssociationInput) (*ssm.DeleteAssociationOutput, error) {
	var output ssm.DeleteAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteAssociationAsync(ctx workflow.Context, input *ssm.DeleteAssociationInput) *SsmDeleteAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteAssociation", input)
	return &SsmDeleteAssociationFuture{Future: future}
}

func (a *SSMStub) DeleteDocument(ctx workflow.Context, input *ssm.DeleteDocumentInput) (*ssm.DeleteDocumentOutput, error) {
	var output ssm.DeleteDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteDocumentAsync(ctx workflow.Context, input *ssm.DeleteDocumentInput) *SsmDeleteDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteDocument", input)
	return &SsmDeleteDocumentFuture{Future: future}
}

func (a *SSMStub) DeleteInventory(ctx workflow.Context, input *ssm.DeleteInventoryInput) (*ssm.DeleteInventoryOutput, error) {
	var output ssm.DeleteInventoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteInventory", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteInventoryAsync(ctx workflow.Context, input *ssm.DeleteInventoryInput) *SsmDeleteInventoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteInventory", input)
	return &SsmDeleteInventoryFuture{Future: future}
}

func (a *SSMStub) DeleteMaintenanceWindow(ctx workflow.Context, input *ssm.DeleteMaintenanceWindowInput) (*ssm.DeleteMaintenanceWindowOutput, error) {
	var output ssm.DeleteMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeleteMaintenanceWindowInput) *SsmDeleteMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteMaintenanceWindow", input)
	return &SsmDeleteMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) DeleteParameter(ctx workflow.Context, input *ssm.DeleteParameterInput) (*ssm.DeleteParameterOutput, error) {
	var output ssm.DeleteParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteParameterAsync(ctx workflow.Context, input *ssm.DeleteParameterInput) *SsmDeleteParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteParameter", input)
	return &SsmDeleteParameterFuture{Future: future}
}

func (a *SSMStub) DeleteParameters(ctx workflow.Context, input *ssm.DeleteParametersInput) (*ssm.DeleteParametersOutput, error) {
	var output ssm.DeleteParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteParametersAsync(ctx workflow.Context, input *ssm.DeleteParametersInput) *SsmDeleteParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteParameters", input)
	return &SsmDeleteParametersFuture{Future: future}
}

func (a *SSMStub) DeletePatchBaseline(ctx workflow.Context, input *ssm.DeletePatchBaselineInput) (*ssm.DeletePatchBaselineOutput, error) {
	var output ssm.DeletePatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeletePatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeletePatchBaselineAsync(ctx workflow.Context, input *ssm.DeletePatchBaselineInput) *SsmDeletePatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeletePatchBaseline", input)
	return &SsmDeletePatchBaselineFuture{Future: future}
}

func (a *SSMStub) DeleteResourceDataSync(ctx workflow.Context, input *ssm.DeleteResourceDataSyncInput) (*ssm.DeleteResourceDataSyncOutput, error) {
	var output ssm.DeleteResourceDataSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteResourceDataSync", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeleteResourceDataSyncAsync(ctx workflow.Context, input *ssm.DeleteResourceDataSyncInput) *SsmDeleteResourceDataSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeleteResourceDataSync", input)
	return &SsmDeleteResourceDataSyncFuture{Future: future}
}

func (a *SSMStub) DeregisterManagedInstance(ctx workflow.Context, input *ssm.DeregisterManagedInstanceInput) (*ssm.DeregisterManagedInstanceOutput, error) {
	var output ssm.DeregisterManagedInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterManagedInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeregisterManagedInstanceAsync(ctx workflow.Context, input *ssm.DeregisterManagedInstanceInput) *SsmDeregisterManagedInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterManagedInstance", input)
	return &SsmDeregisterManagedInstanceFuture{Future: future}
}

func (a *SSMStub) DeregisterPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.DeregisterPatchBaselineForPatchGroupInput) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error) {
	var output ssm.DeregisterPatchBaselineForPatchGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterPatchBaselineForPatchGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeregisterPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.DeregisterPatchBaselineForPatchGroupInput) *SsmDeregisterPatchBaselineForPatchGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterPatchBaselineForPatchGroup", input)
	return &SsmDeregisterPatchBaselineForPatchGroupFuture{Future: future}
}

func (a *SSMStub) DeregisterTargetFromMaintenanceWindow(ctx workflow.Context, input *ssm.DeregisterTargetFromMaintenanceWindowInput) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error) {
	var output ssm.DeregisterTargetFromMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterTargetFromMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeregisterTargetFromMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeregisterTargetFromMaintenanceWindowInput) *SsmDeregisterTargetFromMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterTargetFromMaintenanceWindow", input)
	return &SsmDeregisterTargetFromMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) DeregisterTaskFromMaintenanceWindow(ctx workflow.Context, input *ssm.DeregisterTaskFromMaintenanceWindowInput) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error) {
	var output ssm.DeregisterTaskFromMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterTaskFromMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DeregisterTaskFromMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeregisterTaskFromMaintenanceWindowInput) *SsmDeregisterTaskFromMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DeregisterTaskFromMaintenanceWindow", input)
	return &SsmDeregisterTaskFromMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) DescribeActivations(ctx workflow.Context, input *ssm.DescribeActivationsInput) (*ssm.DescribeActivationsOutput, error) {
	var output ssm.DescribeActivationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeActivations", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeActivationsAsync(ctx workflow.Context, input *ssm.DescribeActivationsInput) *SsmDescribeActivationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeActivations", input)
	return &SsmDescribeActivationsFuture{Future: future}
}

func (a *SSMStub) DescribeAssociation(ctx workflow.Context, input *ssm.DescribeAssociationInput) (*ssm.DescribeAssociationOutput, error) {
	var output ssm.DescribeAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeAssociationAsync(ctx workflow.Context, input *ssm.DescribeAssociationInput) *SsmDescribeAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAssociation", input)
	return &SsmDescribeAssociationFuture{Future: future}
}

func (a *SSMStub) DescribeAssociationExecutionTargets(ctx workflow.Context, input *ssm.DescribeAssociationExecutionTargetsInput) (*ssm.DescribeAssociationExecutionTargetsOutput, error) {
	var output ssm.DescribeAssociationExecutionTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAssociationExecutionTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeAssociationExecutionTargetsAsync(ctx workflow.Context, input *ssm.DescribeAssociationExecutionTargetsInput) *SsmDescribeAssociationExecutionTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAssociationExecutionTargets", input)
	return &SsmDescribeAssociationExecutionTargetsFuture{Future: future}
}

func (a *SSMStub) DescribeAssociationExecutions(ctx workflow.Context, input *ssm.DescribeAssociationExecutionsInput) (*ssm.DescribeAssociationExecutionsOutput, error) {
	var output ssm.DescribeAssociationExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAssociationExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeAssociationExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAssociationExecutionsInput) *SsmDescribeAssociationExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAssociationExecutions", input)
	return &SsmDescribeAssociationExecutionsFuture{Future: future}
}

func (a *SSMStub) DescribeAutomationExecutions(ctx workflow.Context, input *ssm.DescribeAutomationExecutionsInput) (*ssm.DescribeAutomationExecutionsOutput, error) {
	var output ssm.DescribeAutomationExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAutomationExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeAutomationExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAutomationExecutionsInput) *SsmDescribeAutomationExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAutomationExecutions", input)
	return &SsmDescribeAutomationExecutionsFuture{Future: future}
}

func (a *SSMStub) DescribeAutomationStepExecutions(ctx workflow.Context, input *ssm.DescribeAutomationStepExecutionsInput) (*ssm.DescribeAutomationStepExecutionsOutput, error) {
	var output ssm.DescribeAutomationStepExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAutomationStepExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeAutomationStepExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAutomationStepExecutionsInput) *SsmDescribeAutomationStepExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAutomationStepExecutions", input)
	return &SsmDescribeAutomationStepExecutionsFuture{Future: future}
}

func (a *SSMStub) DescribeAvailablePatches(ctx workflow.Context, input *ssm.DescribeAvailablePatchesInput) (*ssm.DescribeAvailablePatchesOutput, error) {
	var output ssm.DescribeAvailablePatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAvailablePatches", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeAvailablePatchesAsync(ctx workflow.Context, input *ssm.DescribeAvailablePatchesInput) *SsmDescribeAvailablePatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeAvailablePatches", input)
	return &SsmDescribeAvailablePatchesFuture{Future: future}
}

func (a *SSMStub) DescribeDocument(ctx workflow.Context, input *ssm.DescribeDocumentInput) (*ssm.DescribeDocumentOutput, error) {
	var output ssm.DescribeDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeDocumentAsync(ctx workflow.Context, input *ssm.DescribeDocumentInput) *SsmDescribeDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeDocument", input)
	return &SsmDescribeDocumentFuture{Future: future}
}

func (a *SSMStub) DescribeDocumentPermission(ctx workflow.Context, input *ssm.DescribeDocumentPermissionInput) (*ssm.DescribeDocumentPermissionOutput, error) {
	var output ssm.DescribeDocumentPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeDocumentPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeDocumentPermissionAsync(ctx workflow.Context, input *ssm.DescribeDocumentPermissionInput) *SsmDescribeDocumentPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeDocumentPermission", input)
	return &SsmDescribeDocumentPermissionFuture{Future: future}
}

func (a *SSMStub) DescribeEffectiveInstanceAssociations(ctx workflow.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {
	var output ssm.DescribeEffectiveInstanceAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeEffectiveInstanceAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeEffectiveInstanceAssociationsAsync(ctx workflow.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput) *SsmDescribeEffectiveInstanceAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeEffectiveInstanceAssociations", input)
	return &SsmDescribeEffectiveInstanceAssociationsFuture{Future: future}
}

func (a *SSMStub) DescribeEffectivePatchesForPatchBaseline(ctx workflow.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {
	var output ssm.DescribeEffectivePatchesForPatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeEffectivePatchesForPatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeEffectivePatchesForPatchBaselineAsync(ctx workflow.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput) *SsmDescribeEffectivePatchesForPatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeEffectivePatchesForPatchBaseline", input)
	return &SsmDescribeEffectivePatchesForPatchBaselineFuture{Future: future}
}

func (a *SSMStub) DescribeInstanceAssociationsStatus(ctx workflow.Context, input *ssm.DescribeInstanceAssociationsStatusInput) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {
	var output ssm.DescribeInstanceAssociationsStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstanceAssociationsStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeInstanceAssociationsStatusAsync(ctx workflow.Context, input *ssm.DescribeInstanceAssociationsStatusInput) *SsmDescribeInstanceAssociationsStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstanceAssociationsStatus", input)
	return &SsmDescribeInstanceAssociationsStatusFuture{Future: future}
}

func (a *SSMStub) DescribeInstanceInformation(ctx workflow.Context, input *ssm.DescribeInstanceInformationInput) (*ssm.DescribeInstanceInformationOutput, error) {
	var output ssm.DescribeInstanceInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstanceInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeInstanceInformationAsync(ctx workflow.Context, input *ssm.DescribeInstanceInformationInput) *SsmDescribeInstanceInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstanceInformation", input)
	return &SsmDescribeInstanceInformationFuture{Future: future}
}

func (a *SSMStub) DescribeInstancePatchStates(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesInput) (*ssm.DescribeInstancePatchStatesOutput, error) {
	var output ssm.DescribeInstancePatchStatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstancePatchStates", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeInstancePatchStatesAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesInput) *SsmDescribeInstancePatchStatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstancePatchStates", input)
	return &SsmDescribeInstancePatchStatesFuture{Future: future}
}

func (a *SSMStub) DescribeInstancePatchStatesForPatchGroup(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {
	var output ssm.DescribeInstancePatchStatesForPatchGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstancePatchStatesForPatchGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeInstancePatchStatesForPatchGroupAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput) *SsmDescribeInstancePatchStatesForPatchGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstancePatchStatesForPatchGroup", input)
	return &SsmDescribeInstancePatchStatesForPatchGroupFuture{Future: future}
}

func (a *SSMStub) DescribeInstancePatches(ctx workflow.Context, input *ssm.DescribeInstancePatchesInput) (*ssm.DescribeInstancePatchesOutput, error) {
	var output ssm.DescribeInstancePatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstancePatches", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeInstancePatchesAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchesInput) *SsmDescribeInstancePatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInstancePatches", input)
	return &SsmDescribeInstancePatchesFuture{Future: future}
}

func (a *SSMStub) DescribeInventoryDeletions(ctx workflow.Context, input *ssm.DescribeInventoryDeletionsInput) (*ssm.DescribeInventoryDeletionsOutput, error) {
	var output ssm.DescribeInventoryDeletionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInventoryDeletions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeInventoryDeletionsAsync(ctx workflow.Context, input *ssm.DescribeInventoryDeletionsInput) *SsmDescribeInventoryDeletionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeInventoryDeletions", input)
	return &SsmDescribeInventoryDeletionsFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowExecutionTaskInvocations(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowExecutionTaskInvocations", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowExecutionTaskInvocationsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) *SsmDescribeMaintenanceWindowExecutionTaskInvocationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowExecutionTaskInvocations", input)
	return &SsmDescribeMaintenanceWindowExecutionTaskInvocationsFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowExecutionTasks(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowExecutionTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowExecutionTasksAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput) *SsmDescribeMaintenanceWindowExecutionTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowExecutionTasks", input)
	return &SsmDescribeMaintenanceWindowExecutionTasksFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowExecutions(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowExecutionsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput) *SsmDescribeMaintenanceWindowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowExecutions", input)
	return &SsmDescribeMaintenanceWindowExecutionsFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowSchedule(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowScheduleInput) (*ssm.DescribeMaintenanceWindowScheduleOutput, error) {
	var output ssm.DescribeMaintenanceWindowScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowScheduleAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowScheduleInput) *SsmDescribeMaintenanceWindowScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowSchedule", input)
	return &SsmDescribeMaintenanceWindowScheduleFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowTargets(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTargetsInput) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {
	var output ssm.DescribeMaintenanceWindowTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowTargetsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTargetsInput) *SsmDescribeMaintenanceWindowTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowTargets", input)
	return &SsmDescribeMaintenanceWindowTargetsFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowTasks(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTasksInput) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {
	var output ssm.DescribeMaintenanceWindowTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowTasksAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTasksInput) *SsmDescribeMaintenanceWindowTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowTasks", input)
	return &SsmDescribeMaintenanceWindowTasksFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindows(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsInput) (*ssm.DescribeMaintenanceWindowsOutput, error) {
	var output ssm.DescribeMaintenanceWindowsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindows", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsInput) *SsmDescribeMaintenanceWindowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindows", input)
	return &SsmDescribeMaintenanceWindowsFuture{Future: future}
}

func (a *SSMStub) DescribeMaintenanceWindowsForTarget(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error) {
	var output ssm.DescribeMaintenanceWindowsForTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowsForTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeMaintenanceWindowsForTargetAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput) *SsmDescribeMaintenanceWindowsForTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeMaintenanceWindowsForTarget", input)
	return &SsmDescribeMaintenanceWindowsForTargetFuture{Future: future}
}

func (a *SSMStub) DescribeOpsItems(ctx workflow.Context, input *ssm.DescribeOpsItemsInput) (*ssm.DescribeOpsItemsOutput, error) {
	var output ssm.DescribeOpsItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeOpsItems", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeOpsItemsAsync(ctx workflow.Context, input *ssm.DescribeOpsItemsInput) *SsmDescribeOpsItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeOpsItems", input)
	return &SsmDescribeOpsItemsFuture{Future: future}
}

func (a *SSMStub) DescribeParameters(ctx workflow.Context, input *ssm.DescribeParametersInput) (*ssm.DescribeParametersOutput, error) {
	var output ssm.DescribeParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeParametersAsync(ctx workflow.Context, input *ssm.DescribeParametersInput) *SsmDescribeParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeParameters", input)
	return &SsmDescribeParametersFuture{Future: future}
}

func (a *SSMStub) DescribePatchBaselines(ctx workflow.Context, input *ssm.DescribePatchBaselinesInput) (*ssm.DescribePatchBaselinesOutput, error) {
	var output ssm.DescribePatchBaselinesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchBaselines", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribePatchBaselinesAsync(ctx workflow.Context, input *ssm.DescribePatchBaselinesInput) *SsmDescribePatchBaselinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchBaselines", input)
	return &SsmDescribePatchBaselinesFuture{Future: future}
}

func (a *SSMStub) DescribePatchGroupState(ctx workflow.Context, input *ssm.DescribePatchGroupStateInput) (*ssm.DescribePatchGroupStateOutput, error) {
	var output ssm.DescribePatchGroupStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchGroupState", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribePatchGroupStateAsync(ctx workflow.Context, input *ssm.DescribePatchGroupStateInput) *SsmDescribePatchGroupStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchGroupState", input)
	return &SsmDescribePatchGroupStateFuture{Future: future}
}

func (a *SSMStub) DescribePatchGroups(ctx workflow.Context, input *ssm.DescribePatchGroupsInput) (*ssm.DescribePatchGroupsOutput, error) {
	var output ssm.DescribePatchGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribePatchGroupsAsync(ctx workflow.Context, input *ssm.DescribePatchGroupsInput) *SsmDescribePatchGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchGroups", input)
	return &SsmDescribePatchGroupsFuture{Future: future}
}

func (a *SSMStub) DescribePatchProperties(ctx workflow.Context, input *ssm.DescribePatchPropertiesInput) (*ssm.DescribePatchPropertiesOutput, error) {
	var output ssm.DescribePatchPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribePatchPropertiesAsync(ctx workflow.Context, input *ssm.DescribePatchPropertiesInput) *SsmDescribePatchPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribePatchProperties", input)
	return &SsmDescribePatchPropertiesFuture{Future: future}
}

func (a *SSMStub) DescribeSessions(ctx workflow.Context, input *ssm.DescribeSessionsInput) (*ssm.DescribeSessionsOutput, error) {
	var output ssm.DescribeSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) DescribeSessionsAsync(ctx workflow.Context, input *ssm.DescribeSessionsInput) *SsmDescribeSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.DescribeSessions", input)
	return &SsmDescribeSessionsFuture{Future: future}
}

func (a *SSMStub) GetAutomationExecution(ctx workflow.Context, input *ssm.GetAutomationExecutionInput) (*ssm.GetAutomationExecutionOutput, error) {
	var output ssm.GetAutomationExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetAutomationExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetAutomationExecutionAsync(ctx workflow.Context, input *ssm.GetAutomationExecutionInput) *SsmGetAutomationExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetAutomationExecution", input)
	return &SsmGetAutomationExecutionFuture{Future: future}
}

func (a *SSMStub) GetCalendarState(ctx workflow.Context, input *ssm.GetCalendarStateInput) (*ssm.GetCalendarStateOutput, error) {
	var output ssm.GetCalendarStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetCalendarState", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetCalendarStateAsync(ctx workflow.Context, input *ssm.GetCalendarStateInput) *SsmGetCalendarStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetCalendarState", input)
	return &SsmGetCalendarStateFuture{Future: future}
}

func (a *SSMStub) GetCommandInvocation(ctx workflow.Context, input *ssm.GetCommandInvocationInput) (*ssm.GetCommandInvocationOutput, error) {
	var output ssm.GetCommandInvocationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetCommandInvocation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetCommandInvocationAsync(ctx workflow.Context, input *ssm.GetCommandInvocationInput) *SsmGetCommandInvocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetCommandInvocation", input)
	return &SsmGetCommandInvocationFuture{Future: future}
}

func (a *SSMStub) GetConnectionStatus(ctx workflow.Context, input *ssm.GetConnectionStatusInput) (*ssm.GetConnectionStatusOutput, error) {
	var output ssm.GetConnectionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetConnectionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetConnectionStatusAsync(ctx workflow.Context, input *ssm.GetConnectionStatusInput) *SsmGetConnectionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetConnectionStatus", input)
	return &SsmGetConnectionStatusFuture{Future: future}
}

func (a *SSMStub) GetDefaultPatchBaseline(ctx workflow.Context, input *ssm.GetDefaultPatchBaselineInput) (*ssm.GetDefaultPatchBaselineOutput, error) {
	var output ssm.GetDefaultPatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetDefaultPatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetDefaultPatchBaselineAsync(ctx workflow.Context, input *ssm.GetDefaultPatchBaselineInput) *SsmGetDefaultPatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetDefaultPatchBaseline", input)
	return &SsmGetDefaultPatchBaselineFuture{Future: future}
}

func (a *SSMStub) GetDeployablePatchSnapshotForInstance(ctx workflow.Context, input *ssm.GetDeployablePatchSnapshotForInstanceInput) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {
	var output ssm.GetDeployablePatchSnapshotForInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetDeployablePatchSnapshotForInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetDeployablePatchSnapshotForInstanceAsync(ctx workflow.Context, input *ssm.GetDeployablePatchSnapshotForInstanceInput) *SsmGetDeployablePatchSnapshotForInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetDeployablePatchSnapshotForInstance", input)
	return &SsmGetDeployablePatchSnapshotForInstanceFuture{Future: future}
}

func (a *SSMStub) GetDocument(ctx workflow.Context, input *ssm.GetDocumentInput) (*ssm.GetDocumentOutput, error) {
	var output ssm.GetDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetDocumentAsync(ctx workflow.Context, input *ssm.GetDocumentInput) *SsmGetDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetDocument", input)
	return &SsmGetDocumentFuture{Future: future}
}

func (a *SSMStub) GetInventory(ctx workflow.Context, input *ssm.GetInventoryInput) (*ssm.GetInventoryOutput, error) {
	var output ssm.GetInventoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetInventory", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetInventoryAsync(ctx workflow.Context, input *ssm.GetInventoryInput) *SsmGetInventoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetInventory", input)
	return &SsmGetInventoryFuture{Future: future}
}

func (a *SSMStub) GetInventorySchema(ctx workflow.Context, input *ssm.GetInventorySchemaInput) (*ssm.GetInventorySchemaOutput, error) {
	var output ssm.GetInventorySchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetInventorySchema", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetInventorySchemaAsync(ctx workflow.Context, input *ssm.GetInventorySchemaInput) *SsmGetInventorySchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetInventorySchema", input)
	return &SsmGetInventorySchemaFuture{Future: future}
}

func (a *SSMStub) GetMaintenanceWindow(ctx workflow.Context, input *ssm.GetMaintenanceWindowInput) (*ssm.GetMaintenanceWindowOutput, error) {
	var output ssm.GetMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetMaintenanceWindowAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowInput) *SsmGetMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindow", input)
	return &SsmGetMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) GetMaintenanceWindowExecution(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionInput) (*ssm.GetMaintenanceWindowExecutionOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetMaintenanceWindowExecutionAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionInput) *SsmGetMaintenanceWindowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowExecution", input)
	return &SsmGetMaintenanceWindowExecutionFuture{Future: future}
}

func (a *SSMStub) GetMaintenanceWindowExecutionTask(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInput) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowExecutionTask", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetMaintenanceWindowExecutionTaskAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInput) *SsmGetMaintenanceWindowExecutionTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowExecutionTask", input)
	return &SsmGetMaintenanceWindowExecutionTaskFuture{Future: future}
}

func (a *SSMStub) GetMaintenanceWindowExecutionTaskInvocation(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowExecutionTaskInvocation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetMaintenanceWindowExecutionTaskInvocationAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) *SsmGetMaintenanceWindowExecutionTaskInvocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowExecutionTaskInvocation", input)
	return &SsmGetMaintenanceWindowExecutionTaskInvocationFuture{Future: future}
}

func (a *SSMStub) GetMaintenanceWindowTask(ctx workflow.Context, input *ssm.GetMaintenanceWindowTaskInput) (*ssm.GetMaintenanceWindowTaskOutput, error) {
	var output ssm.GetMaintenanceWindowTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowTask", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetMaintenanceWindowTaskAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowTaskInput) *SsmGetMaintenanceWindowTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetMaintenanceWindowTask", input)
	return &SsmGetMaintenanceWindowTaskFuture{Future: future}
}

func (a *SSMStub) GetOpsItem(ctx workflow.Context, input *ssm.GetOpsItemInput) (*ssm.GetOpsItemOutput, error) {
	var output ssm.GetOpsItemOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetOpsItem", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetOpsItemAsync(ctx workflow.Context, input *ssm.GetOpsItemInput) *SsmGetOpsItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetOpsItem", input)
	return &SsmGetOpsItemFuture{Future: future}
}

func (a *SSMStub) GetOpsSummary(ctx workflow.Context, input *ssm.GetOpsSummaryInput) (*ssm.GetOpsSummaryOutput, error) {
	var output ssm.GetOpsSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetOpsSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetOpsSummaryAsync(ctx workflow.Context, input *ssm.GetOpsSummaryInput) *SsmGetOpsSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetOpsSummary", input)
	return &SsmGetOpsSummaryFuture{Future: future}
}

func (a *SSMStub) GetParameter(ctx workflow.Context, input *ssm.GetParameterInput) (*ssm.GetParameterOutput, error) {
	var output ssm.GetParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetParameterAsync(ctx workflow.Context, input *ssm.GetParameterInput) *SsmGetParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetParameter", input)
	return &SsmGetParameterFuture{Future: future}
}

func (a *SSMStub) GetParameterHistory(ctx workflow.Context, input *ssm.GetParameterHistoryInput) (*ssm.GetParameterHistoryOutput, error) {
	var output ssm.GetParameterHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetParameterHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetParameterHistoryAsync(ctx workflow.Context, input *ssm.GetParameterHistoryInput) *SsmGetParameterHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetParameterHistory", input)
	return &SsmGetParameterHistoryFuture{Future: future}
}

func (a *SSMStub) GetParameters(ctx workflow.Context, input *ssm.GetParametersInput) (*ssm.GetParametersOutput, error) {
	var output ssm.GetParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetParametersAsync(ctx workflow.Context, input *ssm.GetParametersInput) *SsmGetParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetParameters", input)
	return &SsmGetParametersFuture{Future: future}
}

func (a *SSMStub) GetParametersByPath(ctx workflow.Context, input *ssm.GetParametersByPathInput) (*ssm.GetParametersByPathOutput, error) {
	var output ssm.GetParametersByPathOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetParametersByPath", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetParametersByPathAsync(ctx workflow.Context, input *ssm.GetParametersByPathInput) *SsmGetParametersByPathFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetParametersByPath", input)
	return &SsmGetParametersByPathFuture{Future: future}
}

func (a *SSMStub) GetPatchBaseline(ctx workflow.Context, input *ssm.GetPatchBaselineInput) (*ssm.GetPatchBaselineOutput, error) {
	var output ssm.GetPatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetPatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetPatchBaselineAsync(ctx workflow.Context, input *ssm.GetPatchBaselineInput) *SsmGetPatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetPatchBaseline", input)
	return &SsmGetPatchBaselineFuture{Future: future}
}

func (a *SSMStub) GetPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.GetPatchBaselineForPatchGroupInput) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {
	var output ssm.GetPatchBaselineForPatchGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetPatchBaselineForPatchGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.GetPatchBaselineForPatchGroupInput) *SsmGetPatchBaselineForPatchGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetPatchBaselineForPatchGroup", input)
	return &SsmGetPatchBaselineForPatchGroupFuture{Future: future}
}

func (a *SSMStub) GetServiceSetting(ctx workflow.Context, input *ssm.GetServiceSettingInput) (*ssm.GetServiceSettingOutput, error) {
	var output ssm.GetServiceSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.GetServiceSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) GetServiceSettingAsync(ctx workflow.Context, input *ssm.GetServiceSettingInput) *SsmGetServiceSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.GetServiceSetting", input)
	return &SsmGetServiceSettingFuture{Future: future}
}

func (a *SSMStub) LabelParameterVersion(ctx workflow.Context, input *ssm.LabelParameterVersionInput) (*ssm.LabelParameterVersionOutput, error) {
	var output ssm.LabelParameterVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.LabelParameterVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) LabelParameterVersionAsync(ctx workflow.Context, input *ssm.LabelParameterVersionInput) *SsmLabelParameterVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.LabelParameterVersion", input)
	return &SsmLabelParameterVersionFuture{Future: future}
}

func (a *SSMStub) ListAssociationVersions(ctx workflow.Context, input *ssm.ListAssociationVersionsInput) (*ssm.ListAssociationVersionsOutput, error) {
	var output ssm.ListAssociationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListAssociationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListAssociationVersionsAsync(ctx workflow.Context, input *ssm.ListAssociationVersionsInput) *SsmListAssociationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListAssociationVersions", input)
	return &SsmListAssociationVersionsFuture{Future: future}
}

func (a *SSMStub) ListAssociations(ctx workflow.Context, input *ssm.ListAssociationsInput) (*ssm.ListAssociationsOutput, error) {
	var output ssm.ListAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListAssociationsAsync(ctx workflow.Context, input *ssm.ListAssociationsInput) *SsmListAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListAssociations", input)
	return &SsmListAssociationsFuture{Future: future}
}

func (a *SSMStub) ListCommandInvocations(ctx workflow.Context, input *ssm.ListCommandInvocationsInput) (*ssm.ListCommandInvocationsOutput, error) {
	var output ssm.ListCommandInvocationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListCommandInvocations", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListCommandInvocationsAsync(ctx workflow.Context, input *ssm.ListCommandInvocationsInput) *SsmListCommandInvocationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListCommandInvocations", input)
	return &SsmListCommandInvocationsFuture{Future: future}
}

func (a *SSMStub) ListCommands(ctx workflow.Context, input *ssm.ListCommandsInput) (*ssm.ListCommandsOutput, error) {
	var output ssm.ListCommandsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListCommands", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListCommandsAsync(ctx workflow.Context, input *ssm.ListCommandsInput) *SsmListCommandsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListCommands", input)
	return &SsmListCommandsFuture{Future: future}
}

func (a *SSMStub) ListComplianceItems(ctx workflow.Context, input *ssm.ListComplianceItemsInput) (*ssm.ListComplianceItemsOutput, error) {
	var output ssm.ListComplianceItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListComplianceItems", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListComplianceItemsAsync(ctx workflow.Context, input *ssm.ListComplianceItemsInput) *SsmListComplianceItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListComplianceItems", input)
	return &SsmListComplianceItemsFuture{Future: future}
}

func (a *SSMStub) ListComplianceSummaries(ctx workflow.Context, input *ssm.ListComplianceSummariesInput) (*ssm.ListComplianceSummariesOutput, error) {
	var output ssm.ListComplianceSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListComplianceSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListComplianceSummariesAsync(ctx workflow.Context, input *ssm.ListComplianceSummariesInput) *SsmListComplianceSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListComplianceSummaries", input)
	return &SsmListComplianceSummariesFuture{Future: future}
}

func (a *SSMStub) ListDocumentVersions(ctx workflow.Context, input *ssm.ListDocumentVersionsInput) (*ssm.ListDocumentVersionsOutput, error) {
	var output ssm.ListDocumentVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListDocumentVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListDocumentVersionsAsync(ctx workflow.Context, input *ssm.ListDocumentVersionsInput) *SsmListDocumentVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListDocumentVersions", input)
	return &SsmListDocumentVersionsFuture{Future: future}
}

func (a *SSMStub) ListDocuments(ctx workflow.Context, input *ssm.ListDocumentsInput) (*ssm.ListDocumentsOutput, error) {
	var output ssm.ListDocumentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListDocuments", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListDocumentsAsync(ctx workflow.Context, input *ssm.ListDocumentsInput) *SsmListDocumentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListDocuments", input)
	return &SsmListDocumentsFuture{Future: future}
}

func (a *SSMStub) ListInventoryEntries(ctx workflow.Context, input *ssm.ListInventoryEntriesInput) (*ssm.ListInventoryEntriesOutput, error) {
	var output ssm.ListInventoryEntriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListInventoryEntries", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListInventoryEntriesAsync(ctx workflow.Context, input *ssm.ListInventoryEntriesInput) *SsmListInventoryEntriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListInventoryEntries", input)
	return &SsmListInventoryEntriesFuture{Future: future}
}

func (a *SSMStub) ListResourceComplianceSummaries(ctx workflow.Context, input *ssm.ListResourceComplianceSummariesInput) (*ssm.ListResourceComplianceSummariesOutput, error) {
	var output ssm.ListResourceComplianceSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListResourceComplianceSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListResourceComplianceSummariesAsync(ctx workflow.Context, input *ssm.ListResourceComplianceSummariesInput) *SsmListResourceComplianceSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListResourceComplianceSummaries", input)
	return &SsmListResourceComplianceSummariesFuture{Future: future}
}

func (a *SSMStub) ListResourceDataSync(ctx workflow.Context, input *ssm.ListResourceDataSyncInput) (*ssm.ListResourceDataSyncOutput, error) {
	var output ssm.ListResourceDataSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListResourceDataSync", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListResourceDataSyncAsync(ctx workflow.Context, input *ssm.ListResourceDataSyncInput) *SsmListResourceDataSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListResourceDataSync", input)
	return &SsmListResourceDataSyncFuture{Future: future}
}

func (a *SSMStub) ListTagsForResource(ctx workflow.Context, input *ssm.ListTagsForResourceInput) (*ssm.ListTagsForResourceOutput, error) {
	var output ssm.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ListTagsForResourceAsync(ctx workflow.Context, input *ssm.ListTagsForResourceInput) *SsmListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ListTagsForResource", input)
	return &SsmListTagsForResourceFuture{Future: future}
}

func (a *SSMStub) ModifyDocumentPermission(ctx workflow.Context, input *ssm.ModifyDocumentPermissionInput) (*ssm.ModifyDocumentPermissionOutput, error) {
	var output ssm.ModifyDocumentPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ModifyDocumentPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ModifyDocumentPermissionAsync(ctx workflow.Context, input *ssm.ModifyDocumentPermissionInput) *SsmModifyDocumentPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ModifyDocumentPermission", input)
	return &SsmModifyDocumentPermissionFuture{Future: future}
}

func (a *SSMStub) PutComplianceItems(ctx workflow.Context, input *ssm.PutComplianceItemsInput) (*ssm.PutComplianceItemsOutput, error) {
	var output ssm.PutComplianceItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.PutComplianceItems", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) PutComplianceItemsAsync(ctx workflow.Context, input *ssm.PutComplianceItemsInput) *SsmPutComplianceItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.PutComplianceItems", input)
	return &SsmPutComplianceItemsFuture{Future: future}
}

func (a *SSMStub) PutInventory(ctx workflow.Context, input *ssm.PutInventoryInput) (*ssm.PutInventoryOutput, error) {
	var output ssm.PutInventoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.PutInventory", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) PutInventoryAsync(ctx workflow.Context, input *ssm.PutInventoryInput) *SsmPutInventoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.PutInventory", input)
	return &SsmPutInventoryFuture{Future: future}
}

func (a *SSMStub) PutParameter(ctx workflow.Context, input *ssm.PutParameterInput) (*ssm.PutParameterOutput, error) {
	var output ssm.PutParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.PutParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) PutParameterAsync(ctx workflow.Context, input *ssm.PutParameterInput) *SsmPutParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.PutParameter", input)
	return &SsmPutParameterFuture{Future: future}
}

func (a *SSMStub) RegisterDefaultPatchBaseline(ctx workflow.Context, input *ssm.RegisterDefaultPatchBaselineInput) (*ssm.RegisterDefaultPatchBaselineOutput, error) {
	var output ssm.RegisterDefaultPatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterDefaultPatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) RegisterDefaultPatchBaselineAsync(ctx workflow.Context, input *ssm.RegisterDefaultPatchBaselineInput) *SsmRegisterDefaultPatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterDefaultPatchBaseline", input)
	return &SsmRegisterDefaultPatchBaselineFuture{Future: future}
}

func (a *SSMStub) RegisterPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.RegisterPatchBaselineForPatchGroupInput) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error) {
	var output ssm.RegisterPatchBaselineForPatchGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterPatchBaselineForPatchGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) RegisterPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.RegisterPatchBaselineForPatchGroupInput) *SsmRegisterPatchBaselineForPatchGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterPatchBaselineForPatchGroup", input)
	return &SsmRegisterPatchBaselineForPatchGroupFuture{Future: future}
}

func (a *SSMStub) RegisterTargetWithMaintenanceWindow(ctx workflow.Context, input *ssm.RegisterTargetWithMaintenanceWindowInput) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error) {
	var output ssm.RegisterTargetWithMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterTargetWithMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) RegisterTargetWithMaintenanceWindowAsync(ctx workflow.Context, input *ssm.RegisterTargetWithMaintenanceWindowInput) *SsmRegisterTargetWithMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterTargetWithMaintenanceWindow", input)
	return &SsmRegisterTargetWithMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) RegisterTaskWithMaintenanceWindow(ctx workflow.Context, input *ssm.RegisterTaskWithMaintenanceWindowInput) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error) {
	var output ssm.RegisterTaskWithMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterTaskWithMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) RegisterTaskWithMaintenanceWindowAsync(ctx workflow.Context, input *ssm.RegisterTaskWithMaintenanceWindowInput) *SsmRegisterTaskWithMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.RegisterTaskWithMaintenanceWindow", input)
	return &SsmRegisterTaskWithMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) RemoveTagsFromResource(ctx workflow.Context, input *ssm.RemoveTagsFromResourceInput) (*ssm.RemoveTagsFromResourceOutput, error) {
	var output ssm.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *ssm.RemoveTagsFromResourceInput) *SsmRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.RemoveTagsFromResource", input)
	return &SsmRemoveTagsFromResourceFuture{Future: future}
}

func (a *SSMStub) ResetServiceSetting(ctx workflow.Context, input *ssm.ResetServiceSettingInput) (*ssm.ResetServiceSettingOutput, error) {
	var output ssm.ResetServiceSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ResetServiceSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ResetServiceSettingAsync(ctx workflow.Context, input *ssm.ResetServiceSettingInput) *SsmResetServiceSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ResetServiceSetting", input)
	return &SsmResetServiceSettingFuture{Future: future}
}

func (a *SSMStub) ResumeSession(ctx workflow.Context, input *ssm.ResumeSessionInput) (*ssm.ResumeSessionOutput, error) {
	var output ssm.ResumeSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.ResumeSession", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) ResumeSessionAsync(ctx workflow.Context, input *ssm.ResumeSessionInput) *SsmResumeSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.ResumeSession", input)
	return &SsmResumeSessionFuture{Future: future}
}

func (a *SSMStub) SendAutomationSignal(ctx workflow.Context, input *ssm.SendAutomationSignalInput) (*ssm.SendAutomationSignalOutput, error) {
	var output ssm.SendAutomationSignalOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.SendAutomationSignal", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) SendAutomationSignalAsync(ctx workflow.Context, input *ssm.SendAutomationSignalInput) *SsmSendAutomationSignalFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.SendAutomationSignal", input)
	return &SsmSendAutomationSignalFuture{Future: future}
}

func (a *SSMStub) SendCommand(ctx workflow.Context, input *ssm.SendCommandInput) (*ssm.SendCommandOutput, error) {
	var output ssm.SendCommandOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.SendCommand", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) SendCommandAsync(ctx workflow.Context, input *ssm.SendCommandInput) *SsmSendCommandFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.SendCommand", input)
	return &SsmSendCommandFuture{Future: future}
}

func (a *SSMStub) StartAssociationsOnce(ctx workflow.Context, input *ssm.StartAssociationsOnceInput) (*ssm.StartAssociationsOnceOutput, error) {
	var output ssm.StartAssociationsOnceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.StartAssociationsOnce", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) StartAssociationsOnceAsync(ctx workflow.Context, input *ssm.StartAssociationsOnceInput) *SsmStartAssociationsOnceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.StartAssociationsOnce", input)
	return &SsmStartAssociationsOnceFuture{Future: future}
}

func (a *SSMStub) StartAutomationExecution(ctx workflow.Context, input *ssm.StartAutomationExecutionInput) (*ssm.StartAutomationExecutionOutput, error) {
	var output ssm.StartAutomationExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.StartAutomationExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) StartAutomationExecutionAsync(ctx workflow.Context, input *ssm.StartAutomationExecutionInput) *SsmStartAutomationExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.StartAutomationExecution", input)
	return &SsmStartAutomationExecutionFuture{Future: future}
}

func (a *SSMStub) StartSession(ctx workflow.Context, input *ssm.StartSessionInput) (*ssm.StartSessionOutput, error) {
	var output ssm.StartSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.StartSession", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) StartSessionAsync(ctx workflow.Context, input *ssm.StartSessionInput) *SsmStartSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.StartSession", input)
	return &SsmStartSessionFuture{Future: future}
}

func (a *SSMStub) StopAutomationExecution(ctx workflow.Context, input *ssm.StopAutomationExecutionInput) (*ssm.StopAutomationExecutionOutput, error) {
	var output ssm.StopAutomationExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.StopAutomationExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) StopAutomationExecutionAsync(ctx workflow.Context, input *ssm.StopAutomationExecutionInput) *SsmStopAutomationExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.StopAutomationExecution", input)
	return &SsmStopAutomationExecutionFuture{Future: future}
}

func (a *SSMStub) TerminateSession(ctx workflow.Context, input *ssm.TerminateSessionInput) (*ssm.TerminateSessionOutput, error) {
	var output ssm.TerminateSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.TerminateSession", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) TerminateSessionAsync(ctx workflow.Context, input *ssm.TerminateSessionInput) *SsmTerminateSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.TerminateSession", input)
	return &SsmTerminateSessionFuture{Future: future}
}

func (a *SSMStub) UpdateAssociation(ctx workflow.Context, input *ssm.UpdateAssociationInput) (*ssm.UpdateAssociationOutput, error) {
	var output ssm.UpdateAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateAssociationAsync(ctx workflow.Context, input *ssm.UpdateAssociationInput) *SsmUpdateAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateAssociation", input)
	return &SsmUpdateAssociationFuture{Future: future}
}

func (a *SSMStub) UpdateAssociationStatus(ctx workflow.Context, input *ssm.UpdateAssociationStatusInput) (*ssm.UpdateAssociationStatusOutput, error) {
	var output ssm.UpdateAssociationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateAssociationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateAssociationStatusAsync(ctx workflow.Context, input *ssm.UpdateAssociationStatusInput) *SsmUpdateAssociationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateAssociationStatus", input)
	return &SsmUpdateAssociationStatusFuture{Future: future}
}

func (a *SSMStub) UpdateDocument(ctx workflow.Context, input *ssm.UpdateDocumentInput) (*ssm.UpdateDocumentOutput, error) {
	var output ssm.UpdateDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateDocumentAsync(ctx workflow.Context, input *ssm.UpdateDocumentInput) *SsmUpdateDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateDocument", input)
	return &SsmUpdateDocumentFuture{Future: future}
}

func (a *SSMStub) UpdateDocumentDefaultVersion(ctx workflow.Context, input *ssm.UpdateDocumentDefaultVersionInput) (*ssm.UpdateDocumentDefaultVersionOutput, error) {
	var output ssm.UpdateDocumentDefaultVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateDocumentDefaultVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateDocumentDefaultVersionAsync(ctx workflow.Context, input *ssm.UpdateDocumentDefaultVersionInput) *SsmUpdateDocumentDefaultVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateDocumentDefaultVersion", input)
	return &SsmUpdateDocumentDefaultVersionFuture{Future: future}
}

func (a *SSMStub) UpdateMaintenanceWindow(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowInput) (*ssm.UpdateMaintenanceWindowOutput, error) {
	var output ssm.UpdateMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateMaintenanceWindowAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowInput) *SsmUpdateMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateMaintenanceWindow", input)
	return &SsmUpdateMaintenanceWindowFuture{Future: future}
}

func (a *SSMStub) UpdateMaintenanceWindowTarget(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTargetInput) (*ssm.UpdateMaintenanceWindowTargetOutput, error) {
	var output ssm.UpdateMaintenanceWindowTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateMaintenanceWindowTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateMaintenanceWindowTargetAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTargetInput) *SsmUpdateMaintenanceWindowTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateMaintenanceWindowTarget", input)
	return &SsmUpdateMaintenanceWindowTargetFuture{Future: future}
}

func (a *SSMStub) UpdateMaintenanceWindowTask(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTaskInput) (*ssm.UpdateMaintenanceWindowTaskOutput, error) {
	var output ssm.UpdateMaintenanceWindowTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateMaintenanceWindowTask", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateMaintenanceWindowTaskAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTaskInput) *SsmUpdateMaintenanceWindowTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateMaintenanceWindowTask", input)
	return &SsmUpdateMaintenanceWindowTaskFuture{Future: future}
}

func (a *SSMStub) UpdateManagedInstanceRole(ctx workflow.Context, input *ssm.UpdateManagedInstanceRoleInput) (*ssm.UpdateManagedInstanceRoleOutput, error) {
	var output ssm.UpdateManagedInstanceRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateManagedInstanceRole", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateManagedInstanceRoleAsync(ctx workflow.Context, input *ssm.UpdateManagedInstanceRoleInput) *SsmUpdateManagedInstanceRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateManagedInstanceRole", input)
	return &SsmUpdateManagedInstanceRoleFuture{Future: future}
}

func (a *SSMStub) UpdateOpsItem(ctx workflow.Context, input *ssm.UpdateOpsItemInput) (*ssm.UpdateOpsItemOutput, error) {
	var output ssm.UpdateOpsItemOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateOpsItem", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateOpsItemAsync(ctx workflow.Context, input *ssm.UpdateOpsItemInput) *SsmUpdateOpsItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateOpsItem", input)
	return &SsmUpdateOpsItemFuture{Future: future}
}

func (a *SSMStub) UpdatePatchBaseline(ctx workflow.Context, input *ssm.UpdatePatchBaselineInput) (*ssm.UpdatePatchBaselineOutput, error) {
	var output ssm.UpdatePatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdatePatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdatePatchBaselineAsync(ctx workflow.Context, input *ssm.UpdatePatchBaselineInput) *SsmUpdatePatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdatePatchBaseline", input)
	return &SsmUpdatePatchBaselineFuture{Future: future}
}

func (a *SSMStub) UpdateResourceDataSync(ctx workflow.Context, input *ssm.UpdateResourceDataSyncInput) (*ssm.UpdateResourceDataSyncOutput, error) {
	var output ssm.UpdateResourceDataSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateResourceDataSync", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateResourceDataSyncAsync(ctx workflow.Context, input *ssm.UpdateResourceDataSyncInput) *SsmUpdateResourceDataSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateResourceDataSync", input)
	return &SsmUpdateResourceDataSyncFuture{Future: future}
}

func (a *SSMStub) UpdateServiceSetting(ctx workflow.Context, input *ssm.UpdateServiceSettingInput) (*ssm.UpdateServiceSettingOutput, error) {
	var output ssm.UpdateServiceSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateServiceSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *SSMStub) UpdateServiceSettingAsync(ctx workflow.Context, input *ssm.UpdateServiceSettingInput) *SsmUpdateServiceSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.UpdateServiceSetting", input)
	return &SsmUpdateServiceSettingFuture{Future: future}
}

func (a *SSMStub) WaitUntilCommandExecuted(ctx workflow.Context, input *ssm.GetCommandInvocationInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ssm.WaitUntilCommandExecuted", input).Get(ctx, nil)
}

func (a *SSMStub) WaitUntilCommandExecutedAsync(ctx workflow.Context, input *ssm.GetCommandInvocationInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ssm.WaitUntilCommandExecuted", input)
	return NewVoidFuture(future)
}
