// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/kinesis"
	"go.temporal.io/sdk/workflow"
)

type KinesisClient interface {
	AddTagsToStream(ctx workflow.Context, input *kinesis.AddTagsToStreamInput) (*kinesis.AddTagsToStreamOutput, error)
	AddTagsToStreamAsync(ctx workflow.Context, input *kinesis.AddTagsToStreamInput) *KinesisAddTagsToStreamFuture

	CreateStream(ctx workflow.Context, input *kinesis.CreateStreamInput) (*kinesis.CreateStreamOutput, error)
	CreateStreamAsync(ctx workflow.Context, input *kinesis.CreateStreamInput) *KinesisCreateStreamFuture

	DecreaseStreamRetentionPeriod(ctx workflow.Context, input *kinesis.DecreaseStreamRetentionPeriodInput) (*kinesis.DecreaseStreamRetentionPeriodOutput, error)
	DecreaseStreamRetentionPeriodAsync(ctx workflow.Context, input *kinesis.DecreaseStreamRetentionPeriodInput) *KinesisDecreaseStreamRetentionPeriodFuture

	DeleteStream(ctx workflow.Context, input *kinesis.DeleteStreamInput) (*kinesis.DeleteStreamOutput, error)
	DeleteStreamAsync(ctx workflow.Context, input *kinesis.DeleteStreamInput) *KinesisDeleteStreamFuture

	DeregisterStreamConsumer(ctx workflow.Context, input *kinesis.DeregisterStreamConsumerInput) (*kinesis.DeregisterStreamConsumerOutput, error)
	DeregisterStreamConsumerAsync(ctx workflow.Context, input *kinesis.DeregisterStreamConsumerInput) *KinesisDeregisterStreamConsumerFuture

	DescribeLimits(ctx workflow.Context, input *kinesis.DescribeLimitsInput) (*kinesis.DescribeLimitsOutput, error)
	DescribeLimitsAsync(ctx workflow.Context, input *kinesis.DescribeLimitsInput) *KinesisDescribeLimitsFuture

	DescribeStream(ctx workflow.Context, input *kinesis.DescribeStreamInput) (*kinesis.DescribeStreamOutput, error)
	DescribeStreamAsync(ctx workflow.Context, input *kinesis.DescribeStreamInput) *KinesisDescribeStreamFuture

	DescribeStreamConsumer(ctx workflow.Context, input *kinesis.DescribeStreamConsumerInput) (*kinesis.DescribeStreamConsumerOutput, error)
	DescribeStreamConsumerAsync(ctx workflow.Context, input *kinesis.DescribeStreamConsumerInput) *KinesisDescribeStreamConsumerFuture

	DescribeStreamSummary(ctx workflow.Context, input *kinesis.DescribeStreamSummaryInput) (*kinesis.DescribeStreamSummaryOutput, error)
	DescribeStreamSummaryAsync(ctx workflow.Context, input *kinesis.DescribeStreamSummaryInput) *KinesisDescribeStreamSummaryFuture

	DisableEnhancedMonitoring(ctx workflow.Context, input *kinesis.DisableEnhancedMonitoringInput) (*kinesis.EnhancedMonitoringOutput, error)
	DisableEnhancedMonitoringAsync(ctx workflow.Context, input *kinesis.DisableEnhancedMonitoringInput) *KinesisDisableEnhancedMonitoringFuture

	EnableEnhancedMonitoring(ctx workflow.Context, input *kinesis.EnableEnhancedMonitoringInput) (*kinesis.EnhancedMonitoringOutput, error)
	EnableEnhancedMonitoringAsync(ctx workflow.Context, input *kinesis.EnableEnhancedMonitoringInput) *KinesisEnableEnhancedMonitoringFuture

	GetRecords(ctx workflow.Context, input *kinesis.GetRecordsInput) (*kinesis.GetRecordsOutput, error)
	GetRecordsAsync(ctx workflow.Context, input *kinesis.GetRecordsInput) *KinesisGetRecordsFuture

	GetShardIterator(ctx workflow.Context, input *kinesis.GetShardIteratorInput) (*kinesis.GetShardIteratorOutput, error)
	GetShardIteratorAsync(ctx workflow.Context, input *kinesis.GetShardIteratorInput) *KinesisGetShardIteratorFuture

	IncreaseStreamRetentionPeriod(ctx workflow.Context, input *kinesis.IncreaseStreamRetentionPeriodInput) (*kinesis.IncreaseStreamRetentionPeriodOutput, error)
	IncreaseStreamRetentionPeriodAsync(ctx workflow.Context, input *kinesis.IncreaseStreamRetentionPeriodInput) *KinesisIncreaseStreamRetentionPeriodFuture

	ListShards(ctx workflow.Context, input *kinesis.ListShardsInput) (*kinesis.ListShardsOutput, error)
	ListShardsAsync(ctx workflow.Context, input *kinesis.ListShardsInput) *KinesisListShardsFuture

	ListStreamConsumers(ctx workflow.Context, input *kinesis.ListStreamConsumersInput) (*kinesis.ListStreamConsumersOutput, error)
	ListStreamConsumersAsync(ctx workflow.Context, input *kinesis.ListStreamConsumersInput) *KinesisListStreamConsumersFuture

	ListStreams(ctx workflow.Context, input *kinesis.ListStreamsInput) (*kinesis.ListStreamsOutput, error)
	ListStreamsAsync(ctx workflow.Context, input *kinesis.ListStreamsInput) *KinesisListStreamsFuture

	ListTagsForStream(ctx workflow.Context, input *kinesis.ListTagsForStreamInput) (*kinesis.ListTagsForStreamOutput, error)
	ListTagsForStreamAsync(ctx workflow.Context, input *kinesis.ListTagsForStreamInput) *KinesisListTagsForStreamFuture

	MergeShards(ctx workflow.Context, input *kinesis.MergeShardsInput) (*kinesis.MergeShardsOutput, error)
	MergeShardsAsync(ctx workflow.Context, input *kinesis.MergeShardsInput) *KinesisMergeShardsFuture

	PutRecord(ctx workflow.Context, input *kinesis.PutRecordInput) (*kinesis.PutRecordOutput, error)
	PutRecordAsync(ctx workflow.Context, input *kinesis.PutRecordInput) *KinesisPutRecordFuture

	PutRecords(ctx workflow.Context, input *kinesis.PutRecordsInput) (*kinesis.PutRecordsOutput, error)
	PutRecordsAsync(ctx workflow.Context, input *kinesis.PutRecordsInput) *KinesisPutRecordsFuture

	RegisterStreamConsumer(ctx workflow.Context, input *kinesis.RegisterStreamConsumerInput) (*kinesis.RegisterStreamConsumerOutput, error)
	RegisterStreamConsumerAsync(ctx workflow.Context, input *kinesis.RegisterStreamConsumerInput) *KinesisRegisterStreamConsumerFuture

	RemoveTagsFromStream(ctx workflow.Context, input *kinesis.RemoveTagsFromStreamInput) (*kinesis.RemoveTagsFromStreamOutput, error)
	RemoveTagsFromStreamAsync(ctx workflow.Context, input *kinesis.RemoveTagsFromStreamInput) *KinesisRemoveTagsFromStreamFuture

	SplitShard(ctx workflow.Context, input *kinesis.SplitShardInput) (*kinesis.SplitShardOutput, error)
	SplitShardAsync(ctx workflow.Context, input *kinesis.SplitShardInput) *KinesisSplitShardFuture

	StartStreamEncryption(ctx workflow.Context, input *kinesis.StartStreamEncryptionInput) (*kinesis.StartStreamEncryptionOutput, error)
	StartStreamEncryptionAsync(ctx workflow.Context, input *kinesis.StartStreamEncryptionInput) *KinesisStartStreamEncryptionFuture

	StopStreamEncryption(ctx workflow.Context, input *kinesis.StopStreamEncryptionInput) (*kinesis.StopStreamEncryptionOutput, error)
	StopStreamEncryptionAsync(ctx workflow.Context, input *kinesis.StopStreamEncryptionInput) *KinesisStopStreamEncryptionFuture

	SubscribeToShard(ctx workflow.Context, input *kinesis.SubscribeToShardInput) (*kinesis.SubscribeToShardOutput, error)
	SubscribeToShardAsync(ctx workflow.Context, input *kinesis.SubscribeToShardInput) *KinesisSubscribeToShardFuture

	UpdateShardCount(ctx workflow.Context, input *kinesis.UpdateShardCountInput) (*kinesis.UpdateShardCountOutput, error)
	UpdateShardCountAsync(ctx workflow.Context, input *kinesis.UpdateShardCountInput) *KinesisUpdateShardCountFuture

	WaitUntilStreamExists(ctx workflow.Context, input *kinesis.DescribeStreamInput) error
	WaitUntilStreamExistsAsync(ctx workflow.Context, input *kinesis.DescribeStreamInput) workflow.Future

	WaitUntilStreamNotExists(ctx workflow.Context, input *kinesis.DescribeStreamInput) error
	WaitUntilStreamNotExistsAsync(ctx workflow.Context, input *kinesis.DescribeStreamInput) workflow.Future
}

type KinesisStub struct{}

func NewKinesisStub() KinesisClient {
	return &KinesisStub{}
}

type KinesisAddTagsToStreamFuture struct {
	Future workflow.Future
}

func (r *KinesisAddTagsToStreamFuture) Get(ctx workflow.Context) (*kinesis.AddTagsToStreamOutput, error) {
	var output kinesis.AddTagsToStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisCreateStreamFuture struct {
	Future workflow.Future
}

func (r *KinesisCreateStreamFuture) Get(ctx workflow.Context) (*kinesis.CreateStreamOutput, error) {
	var output kinesis.CreateStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisDecreaseStreamRetentionPeriodFuture struct {
	Future workflow.Future
}

func (r *KinesisDecreaseStreamRetentionPeriodFuture) Get(ctx workflow.Context) (*kinesis.DecreaseStreamRetentionPeriodOutput, error) {
	var output kinesis.DecreaseStreamRetentionPeriodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisDeleteStreamFuture struct {
	Future workflow.Future
}

func (r *KinesisDeleteStreamFuture) Get(ctx workflow.Context) (*kinesis.DeleteStreamOutput, error) {
	var output kinesis.DeleteStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisDeregisterStreamConsumerFuture struct {
	Future workflow.Future
}

func (r *KinesisDeregisterStreamConsumerFuture) Get(ctx workflow.Context) (*kinesis.DeregisterStreamConsumerOutput, error) {
	var output kinesis.DeregisterStreamConsumerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisDescribeLimitsFuture struct {
	Future workflow.Future
}

func (r *KinesisDescribeLimitsFuture) Get(ctx workflow.Context) (*kinesis.DescribeLimitsOutput, error) {
	var output kinesis.DescribeLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisDescribeStreamFuture struct {
	Future workflow.Future
}

func (r *KinesisDescribeStreamFuture) Get(ctx workflow.Context) (*kinesis.DescribeStreamOutput, error) {
	var output kinesis.DescribeStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisDescribeStreamConsumerFuture struct {
	Future workflow.Future
}

func (r *KinesisDescribeStreamConsumerFuture) Get(ctx workflow.Context) (*kinesis.DescribeStreamConsumerOutput, error) {
	var output kinesis.DescribeStreamConsumerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisDescribeStreamSummaryFuture struct {
	Future workflow.Future
}

func (r *KinesisDescribeStreamSummaryFuture) Get(ctx workflow.Context) (*kinesis.DescribeStreamSummaryOutput, error) {
	var output kinesis.DescribeStreamSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisDisableEnhancedMonitoringFuture struct {
	Future workflow.Future
}

func (r *KinesisDisableEnhancedMonitoringFuture) Get(ctx workflow.Context) (*kinesis.EnhancedMonitoringOutput, error) {
	var output kinesis.EnhancedMonitoringOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisEnableEnhancedMonitoringFuture struct {
	Future workflow.Future
}

func (r *KinesisEnableEnhancedMonitoringFuture) Get(ctx workflow.Context) (*kinesis.EnhancedMonitoringOutput, error) {
	var output kinesis.EnhancedMonitoringOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisGetRecordsFuture struct {
	Future workflow.Future
}

func (r *KinesisGetRecordsFuture) Get(ctx workflow.Context) (*kinesis.GetRecordsOutput, error) {
	var output kinesis.GetRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisGetShardIteratorFuture struct {
	Future workflow.Future
}

func (r *KinesisGetShardIteratorFuture) Get(ctx workflow.Context) (*kinesis.GetShardIteratorOutput, error) {
	var output kinesis.GetShardIteratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisIncreaseStreamRetentionPeriodFuture struct {
	Future workflow.Future
}

func (r *KinesisIncreaseStreamRetentionPeriodFuture) Get(ctx workflow.Context) (*kinesis.IncreaseStreamRetentionPeriodOutput, error) {
	var output kinesis.IncreaseStreamRetentionPeriodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisListShardsFuture struct {
	Future workflow.Future
}

func (r *KinesisListShardsFuture) Get(ctx workflow.Context) (*kinesis.ListShardsOutput, error) {
	var output kinesis.ListShardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisListStreamConsumersFuture struct {
	Future workflow.Future
}

func (r *KinesisListStreamConsumersFuture) Get(ctx workflow.Context) (*kinesis.ListStreamConsumersOutput, error) {
	var output kinesis.ListStreamConsumersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisListStreamsFuture struct {
	Future workflow.Future
}

func (r *KinesisListStreamsFuture) Get(ctx workflow.Context) (*kinesis.ListStreamsOutput, error) {
	var output kinesis.ListStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisListTagsForStreamFuture struct {
	Future workflow.Future
}

func (r *KinesisListTagsForStreamFuture) Get(ctx workflow.Context) (*kinesis.ListTagsForStreamOutput, error) {
	var output kinesis.ListTagsForStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisMergeShardsFuture struct {
	Future workflow.Future
}

func (r *KinesisMergeShardsFuture) Get(ctx workflow.Context) (*kinesis.MergeShardsOutput, error) {
	var output kinesis.MergeShardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisPutRecordFuture struct {
	Future workflow.Future
}

func (r *KinesisPutRecordFuture) Get(ctx workflow.Context) (*kinesis.PutRecordOutput, error) {
	var output kinesis.PutRecordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisPutRecordsFuture struct {
	Future workflow.Future
}

func (r *KinesisPutRecordsFuture) Get(ctx workflow.Context) (*kinesis.PutRecordsOutput, error) {
	var output kinesis.PutRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisRegisterStreamConsumerFuture struct {
	Future workflow.Future
}

func (r *KinesisRegisterStreamConsumerFuture) Get(ctx workflow.Context) (*kinesis.RegisterStreamConsumerOutput, error) {
	var output kinesis.RegisterStreamConsumerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisRemoveTagsFromStreamFuture struct {
	Future workflow.Future
}

func (r *KinesisRemoveTagsFromStreamFuture) Get(ctx workflow.Context) (*kinesis.RemoveTagsFromStreamOutput, error) {
	var output kinesis.RemoveTagsFromStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisSplitShardFuture struct {
	Future workflow.Future
}

func (r *KinesisSplitShardFuture) Get(ctx workflow.Context) (*kinesis.SplitShardOutput, error) {
	var output kinesis.SplitShardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisStartStreamEncryptionFuture struct {
	Future workflow.Future
}

func (r *KinesisStartStreamEncryptionFuture) Get(ctx workflow.Context) (*kinesis.StartStreamEncryptionOutput, error) {
	var output kinesis.StartStreamEncryptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisStopStreamEncryptionFuture struct {
	Future workflow.Future
}

func (r *KinesisStopStreamEncryptionFuture) Get(ctx workflow.Context) (*kinesis.StopStreamEncryptionOutput, error) {
	var output kinesis.StopStreamEncryptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisSubscribeToShardFuture struct {
	Future workflow.Future
}

func (r *KinesisSubscribeToShardFuture) Get(ctx workflow.Context) (*kinesis.SubscribeToShardOutput, error) {
	var output kinesis.SubscribeToShardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisUpdateShardCountFuture struct {
	Future workflow.Future
}

func (r *KinesisUpdateShardCountFuture) Get(ctx workflow.Context) (*kinesis.UpdateShardCountOutput, error) {
	var output kinesis.UpdateShardCountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) AddTagsToStream(ctx workflow.Context, input *kinesis.AddTagsToStreamInput) (*kinesis.AddTagsToStreamOutput, error) {
	var output kinesis.AddTagsToStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.AddTagsToStream", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) AddTagsToStreamAsync(ctx workflow.Context, input *kinesis.AddTagsToStreamInput) *KinesisAddTagsToStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.AddTagsToStream", input)
	return &KinesisAddTagsToStreamFuture{Future: future}
}

func (a *KinesisStub) CreateStream(ctx workflow.Context, input *kinesis.CreateStreamInput) (*kinesis.CreateStreamOutput, error) {
	var output kinesis.CreateStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.CreateStream", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) CreateStreamAsync(ctx workflow.Context, input *kinesis.CreateStreamInput) *KinesisCreateStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.CreateStream", input)
	return &KinesisCreateStreamFuture{Future: future}
}

func (a *KinesisStub) DecreaseStreamRetentionPeriod(ctx workflow.Context, input *kinesis.DecreaseStreamRetentionPeriodInput) (*kinesis.DecreaseStreamRetentionPeriodOutput, error) {
	var output kinesis.DecreaseStreamRetentionPeriodOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.DecreaseStreamRetentionPeriod", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) DecreaseStreamRetentionPeriodAsync(ctx workflow.Context, input *kinesis.DecreaseStreamRetentionPeriodInput) *KinesisDecreaseStreamRetentionPeriodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.DecreaseStreamRetentionPeriod", input)
	return &KinesisDecreaseStreamRetentionPeriodFuture{Future: future}
}

func (a *KinesisStub) DeleteStream(ctx workflow.Context, input *kinesis.DeleteStreamInput) (*kinesis.DeleteStreamOutput, error) {
	var output kinesis.DeleteStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.DeleteStream", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) DeleteStreamAsync(ctx workflow.Context, input *kinesis.DeleteStreamInput) *KinesisDeleteStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.DeleteStream", input)
	return &KinesisDeleteStreamFuture{Future: future}
}

func (a *KinesisStub) DeregisterStreamConsumer(ctx workflow.Context, input *kinesis.DeregisterStreamConsumerInput) (*kinesis.DeregisterStreamConsumerOutput, error) {
	var output kinesis.DeregisterStreamConsumerOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.DeregisterStreamConsumer", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) DeregisterStreamConsumerAsync(ctx workflow.Context, input *kinesis.DeregisterStreamConsumerInput) *KinesisDeregisterStreamConsumerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.DeregisterStreamConsumer", input)
	return &KinesisDeregisterStreamConsumerFuture{Future: future}
}

func (a *KinesisStub) DescribeLimits(ctx workflow.Context, input *kinesis.DescribeLimitsInput) (*kinesis.DescribeLimitsOutput, error) {
	var output kinesis.DescribeLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.DescribeLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) DescribeLimitsAsync(ctx workflow.Context, input *kinesis.DescribeLimitsInput) *KinesisDescribeLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.DescribeLimits", input)
	return &KinesisDescribeLimitsFuture{Future: future}
}

func (a *KinesisStub) DescribeStream(ctx workflow.Context, input *kinesis.DescribeStreamInput) (*kinesis.DescribeStreamOutput, error) {
	var output kinesis.DescribeStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.DescribeStream", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) DescribeStreamAsync(ctx workflow.Context, input *kinesis.DescribeStreamInput) *KinesisDescribeStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.DescribeStream", input)
	return &KinesisDescribeStreamFuture{Future: future}
}

func (a *KinesisStub) DescribeStreamConsumer(ctx workflow.Context, input *kinesis.DescribeStreamConsumerInput) (*kinesis.DescribeStreamConsumerOutput, error) {
	var output kinesis.DescribeStreamConsumerOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.DescribeStreamConsumer", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) DescribeStreamConsumerAsync(ctx workflow.Context, input *kinesis.DescribeStreamConsumerInput) *KinesisDescribeStreamConsumerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.DescribeStreamConsumer", input)
	return &KinesisDescribeStreamConsumerFuture{Future: future}
}

func (a *KinesisStub) DescribeStreamSummary(ctx workflow.Context, input *kinesis.DescribeStreamSummaryInput) (*kinesis.DescribeStreamSummaryOutput, error) {
	var output kinesis.DescribeStreamSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.DescribeStreamSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) DescribeStreamSummaryAsync(ctx workflow.Context, input *kinesis.DescribeStreamSummaryInput) *KinesisDescribeStreamSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.DescribeStreamSummary", input)
	return &KinesisDescribeStreamSummaryFuture{Future: future}
}

func (a *KinesisStub) DisableEnhancedMonitoring(ctx workflow.Context, input *kinesis.DisableEnhancedMonitoringInput) (*kinesis.EnhancedMonitoringOutput, error) {
	var output kinesis.EnhancedMonitoringOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.DisableEnhancedMonitoring", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) DisableEnhancedMonitoringAsync(ctx workflow.Context, input *kinesis.DisableEnhancedMonitoringInput) *KinesisDisableEnhancedMonitoringFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.DisableEnhancedMonitoring", input)
	return &KinesisDisableEnhancedMonitoringFuture{Future: future}
}

func (a *KinesisStub) EnableEnhancedMonitoring(ctx workflow.Context, input *kinesis.EnableEnhancedMonitoringInput) (*kinesis.EnhancedMonitoringOutput, error) {
	var output kinesis.EnhancedMonitoringOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.EnableEnhancedMonitoring", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) EnableEnhancedMonitoringAsync(ctx workflow.Context, input *kinesis.EnableEnhancedMonitoringInput) *KinesisEnableEnhancedMonitoringFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.EnableEnhancedMonitoring", input)
	return &KinesisEnableEnhancedMonitoringFuture{Future: future}
}

func (a *KinesisStub) GetRecords(ctx workflow.Context, input *kinesis.GetRecordsInput) (*kinesis.GetRecordsOutput, error) {
	var output kinesis.GetRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.GetRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) GetRecordsAsync(ctx workflow.Context, input *kinesis.GetRecordsInput) *KinesisGetRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.GetRecords", input)
	return &KinesisGetRecordsFuture{Future: future}
}

func (a *KinesisStub) GetShardIterator(ctx workflow.Context, input *kinesis.GetShardIteratorInput) (*kinesis.GetShardIteratorOutput, error) {
	var output kinesis.GetShardIteratorOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.GetShardIterator", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) GetShardIteratorAsync(ctx workflow.Context, input *kinesis.GetShardIteratorInput) *KinesisGetShardIteratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.GetShardIterator", input)
	return &KinesisGetShardIteratorFuture{Future: future}
}

func (a *KinesisStub) IncreaseStreamRetentionPeriod(ctx workflow.Context, input *kinesis.IncreaseStreamRetentionPeriodInput) (*kinesis.IncreaseStreamRetentionPeriodOutput, error) {
	var output kinesis.IncreaseStreamRetentionPeriodOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.IncreaseStreamRetentionPeriod", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) IncreaseStreamRetentionPeriodAsync(ctx workflow.Context, input *kinesis.IncreaseStreamRetentionPeriodInput) *KinesisIncreaseStreamRetentionPeriodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.IncreaseStreamRetentionPeriod", input)
	return &KinesisIncreaseStreamRetentionPeriodFuture{Future: future}
}

func (a *KinesisStub) ListShards(ctx workflow.Context, input *kinesis.ListShardsInput) (*kinesis.ListShardsOutput, error) {
	var output kinesis.ListShardsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.ListShards", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) ListShardsAsync(ctx workflow.Context, input *kinesis.ListShardsInput) *KinesisListShardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.ListShards", input)
	return &KinesisListShardsFuture{Future: future}
}

func (a *KinesisStub) ListStreamConsumers(ctx workflow.Context, input *kinesis.ListStreamConsumersInput) (*kinesis.ListStreamConsumersOutput, error) {
	var output kinesis.ListStreamConsumersOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.ListStreamConsumers", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) ListStreamConsumersAsync(ctx workflow.Context, input *kinesis.ListStreamConsumersInput) *KinesisListStreamConsumersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.ListStreamConsumers", input)
	return &KinesisListStreamConsumersFuture{Future: future}
}

func (a *KinesisStub) ListStreams(ctx workflow.Context, input *kinesis.ListStreamsInput) (*kinesis.ListStreamsOutput, error) {
	var output kinesis.ListStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.ListStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) ListStreamsAsync(ctx workflow.Context, input *kinesis.ListStreamsInput) *KinesisListStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.ListStreams", input)
	return &KinesisListStreamsFuture{Future: future}
}

func (a *KinesisStub) ListTagsForStream(ctx workflow.Context, input *kinesis.ListTagsForStreamInput) (*kinesis.ListTagsForStreamOutput, error) {
	var output kinesis.ListTagsForStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.ListTagsForStream", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) ListTagsForStreamAsync(ctx workflow.Context, input *kinesis.ListTagsForStreamInput) *KinesisListTagsForStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.ListTagsForStream", input)
	return &KinesisListTagsForStreamFuture{Future: future}
}

func (a *KinesisStub) MergeShards(ctx workflow.Context, input *kinesis.MergeShardsInput) (*kinesis.MergeShardsOutput, error) {
	var output kinesis.MergeShardsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.MergeShards", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) MergeShardsAsync(ctx workflow.Context, input *kinesis.MergeShardsInput) *KinesisMergeShardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.MergeShards", input)
	return &KinesisMergeShardsFuture{Future: future}
}

func (a *KinesisStub) PutRecord(ctx workflow.Context, input *kinesis.PutRecordInput) (*kinesis.PutRecordOutput, error) {
	var output kinesis.PutRecordOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.PutRecord", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) PutRecordAsync(ctx workflow.Context, input *kinesis.PutRecordInput) *KinesisPutRecordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.PutRecord", input)
	return &KinesisPutRecordFuture{Future: future}
}

func (a *KinesisStub) PutRecords(ctx workflow.Context, input *kinesis.PutRecordsInput) (*kinesis.PutRecordsOutput, error) {
	var output kinesis.PutRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.PutRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) PutRecordsAsync(ctx workflow.Context, input *kinesis.PutRecordsInput) *KinesisPutRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.PutRecords", input)
	return &KinesisPutRecordsFuture{Future: future}
}

func (a *KinesisStub) RegisterStreamConsumer(ctx workflow.Context, input *kinesis.RegisterStreamConsumerInput) (*kinesis.RegisterStreamConsumerOutput, error) {
	var output kinesis.RegisterStreamConsumerOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.RegisterStreamConsumer", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) RegisterStreamConsumerAsync(ctx workflow.Context, input *kinesis.RegisterStreamConsumerInput) *KinesisRegisterStreamConsumerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.RegisterStreamConsumer", input)
	return &KinesisRegisterStreamConsumerFuture{Future: future}
}

func (a *KinesisStub) RemoveTagsFromStream(ctx workflow.Context, input *kinesis.RemoveTagsFromStreamInput) (*kinesis.RemoveTagsFromStreamOutput, error) {
	var output kinesis.RemoveTagsFromStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.RemoveTagsFromStream", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) RemoveTagsFromStreamAsync(ctx workflow.Context, input *kinesis.RemoveTagsFromStreamInput) *KinesisRemoveTagsFromStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.RemoveTagsFromStream", input)
	return &KinesisRemoveTagsFromStreamFuture{Future: future}
}

func (a *KinesisStub) SplitShard(ctx workflow.Context, input *kinesis.SplitShardInput) (*kinesis.SplitShardOutput, error) {
	var output kinesis.SplitShardOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.SplitShard", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) SplitShardAsync(ctx workflow.Context, input *kinesis.SplitShardInput) *KinesisSplitShardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.SplitShard", input)
	return &KinesisSplitShardFuture{Future: future}
}

func (a *KinesisStub) StartStreamEncryption(ctx workflow.Context, input *kinesis.StartStreamEncryptionInput) (*kinesis.StartStreamEncryptionOutput, error) {
	var output kinesis.StartStreamEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.StartStreamEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) StartStreamEncryptionAsync(ctx workflow.Context, input *kinesis.StartStreamEncryptionInput) *KinesisStartStreamEncryptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.StartStreamEncryption", input)
	return &KinesisStartStreamEncryptionFuture{Future: future}
}

func (a *KinesisStub) StopStreamEncryption(ctx workflow.Context, input *kinesis.StopStreamEncryptionInput) (*kinesis.StopStreamEncryptionOutput, error) {
	var output kinesis.StopStreamEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.StopStreamEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) StopStreamEncryptionAsync(ctx workflow.Context, input *kinesis.StopStreamEncryptionInput) *KinesisStopStreamEncryptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.StopStreamEncryption", input)
	return &KinesisStopStreamEncryptionFuture{Future: future}
}

func (a *KinesisStub) SubscribeToShard(ctx workflow.Context, input *kinesis.SubscribeToShardInput) (*kinesis.SubscribeToShardOutput, error) {
	var output kinesis.SubscribeToShardOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.SubscribeToShard", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) SubscribeToShardAsync(ctx workflow.Context, input *kinesis.SubscribeToShardInput) *KinesisSubscribeToShardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.SubscribeToShard", input)
	return &KinesisSubscribeToShardFuture{Future: future}
}

func (a *KinesisStub) UpdateShardCount(ctx workflow.Context, input *kinesis.UpdateShardCountInput) (*kinesis.UpdateShardCountOutput, error) {
	var output kinesis.UpdateShardCountOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesis.UpdateShardCount", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisStub) UpdateShardCountAsync(ctx workflow.Context, input *kinesis.UpdateShardCountInput) *KinesisUpdateShardCountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesis.UpdateShardCount", input)
	return &KinesisUpdateShardCountFuture{Future: future}
}

func (a *KinesisStub) WaitUntilStreamExists(ctx workflow.Context, input *kinesis.DescribeStreamInput) error {
	return workflow.ExecuteActivity(ctx, "aws.kinesis.WaitUntilStreamExists", input).Get(ctx, nil)
}

func (a *KinesisStub) WaitUntilStreamExistsAsync(ctx workflow.Context, input *kinesis.DescribeStreamInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.kinesis.WaitUntilStreamExists", input)
}

func (a *KinesisStub) WaitUntilStreamNotExists(ctx workflow.Context, input *kinesis.DescribeStreamInput) error {
	return workflow.ExecuteActivity(ctx, "aws.kinesis.WaitUntilStreamNotExists", input).Get(ctx, nil)
}

func (a *KinesisStub) WaitUntilStreamNotExistsAsync(ctx workflow.Context, input *kinesis.DescribeStreamInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.kinesis.WaitUntilStreamNotExists", input)
}
