// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/medialive"
	"go.temporal.io/sdk/workflow"
)

type MediaLiveClient interface {
	BatchDelete(ctx workflow.Context, input *medialive.BatchDeleteInput) (*medialive.BatchDeleteOutput, error)
	BatchDeleteAsync(ctx workflow.Context, input *medialive.BatchDeleteInput) *MediaLiveBatchDeleteFuture

	BatchStart(ctx workflow.Context, input *medialive.BatchStartInput) (*medialive.BatchStartOutput, error)
	BatchStartAsync(ctx workflow.Context, input *medialive.BatchStartInput) *MediaLiveBatchStartFuture

	BatchStop(ctx workflow.Context, input *medialive.BatchStopInput) (*medialive.BatchStopOutput, error)
	BatchStopAsync(ctx workflow.Context, input *medialive.BatchStopInput) *MediaLiveBatchStopFuture

	BatchUpdateSchedule(ctx workflow.Context, input *medialive.BatchUpdateScheduleInput) (*medialive.BatchUpdateScheduleOutput, error)
	BatchUpdateScheduleAsync(ctx workflow.Context, input *medialive.BatchUpdateScheduleInput) *MediaLiveBatchUpdateScheduleFuture

	CreateChannel(ctx workflow.Context, input *medialive.CreateChannelInput) (*medialive.CreateChannelOutput, error)
	CreateChannelAsync(ctx workflow.Context, input *medialive.CreateChannelInput) *MediaLiveCreateChannelFuture

	CreateInput(ctx workflow.Context, input *medialive.CreateInputInput) (*medialive.CreateInputOutput, error)
	CreateInputAsync(ctx workflow.Context, input *medialive.CreateInputInput) *MediaLiveCreateInputFuture

	CreateInputSecurityGroup(ctx workflow.Context, input *medialive.CreateInputSecurityGroupInput) (*medialive.CreateInputSecurityGroupOutput, error)
	CreateInputSecurityGroupAsync(ctx workflow.Context, input *medialive.CreateInputSecurityGroupInput) *MediaLiveCreateInputSecurityGroupFuture

	CreateMultiplex(ctx workflow.Context, input *medialive.CreateMultiplexInput) (*medialive.CreateMultiplexOutput, error)
	CreateMultiplexAsync(ctx workflow.Context, input *medialive.CreateMultiplexInput) *MediaLiveCreateMultiplexFuture

	CreateMultiplexProgram(ctx workflow.Context, input *medialive.CreateMultiplexProgramInput) (*medialive.CreateMultiplexProgramOutput, error)
	CreateMultiplexProgramAsync(ctx workflow.Context, input *medialive.CreateMultiplexProgramInput) *MediaLiveCreateMultiplexProgramFuture

	CreateTags(ctx workflow.Context, input *medialive.CreateTagsInput) (*medialive.CreateTagsOutput, error)
	CreateTagsAsync(ctx workflow.Context, input *medialive.CreateTagsInput) *MediaLiveCreateTagsFuture

	DeleteChannel(ctx workflow.Context, input *medialive.DeleteChannelInput) (*medialive.DeleteChannelOutput, error)
	DeleteChannelAsync(ctx workflow.Context, input *medialive.DeleteChannelInput) *MediaLiveDeleteChannelFuture

	DeleteInput(ctx workflow.Context, input *medialive.DeleteInputInput) (*medialive.DeleteInputOutput, error)
	DeleteInputAsync(ctx workflow.Context, input *medialive.DeleteInputInput) *MediaLiveDeleteInputFuture

	DeleteInputSecurityGroup(ctx workflow.Context, input *medialive.DeleteInputSecurityGroupInput) (*medialive.DeleteInputSecurityGroupOutput, error)
	DeleteInputSecurityGroupAsync(ctx workflow.Context, input *medialive.DeleteInputSecurityGroupInput) *MediaLiveDeleteInputSecurityGroupFuture

	DeleteMultiplex(ctx workflow.Context, input *medialive.DeleteMultiplexInput) (*medialive.DeleteMultiplexOutput, error)
	DeleteMultiplexAsync(ctx workflow.Context, input *medialive.DeleteMultiplexInput) *MediaLiveDeleteMultiplexFuture

	DeleteMultiplexProgram(ctx workflow.Context, input *medialive.DeleteMultiplexProgramInput) (*medialive.DeleteMultiplexProgramOutput, error)
	DeleteMultiplexProgramAsync(ctx workflow.Context, input *medialive.DeleteMultiplexProgramInput) *MediaLiveDeleteMultiplexProgramFuture

	DeleteReservation(ctx workflow.Context, input *medialive.DeleteReservationInput) (*medialive.DeleteReservationOutput, error)
	DeleteReservationAsync(ctx workflow.Context, input *medialive.DeleteReservationInput) *MediaLiveDeleteReservationFuture

	DeleteSchedule(ctx workflow.Context, input *medialive.DeleteScheduleInput) (*medialive.DeleteScheduleOutput, error)
	DeleteScheduleAsync(ctx workflow.Context, input *medialive.DeleteScheduleInput) *MediaLiveDeleteScheduleFuture

	DeleteTags(ctx workflow.Context, input *medialive.DeleteTagsInput) (*medialive.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *medialive.DeleteTagsInput) *MediaLiveDeleteTagsFuture

	DescribeChannel(ctx workflow.Context, input *medialive.DescribeChannelInput) (*medialive.DescribeChannelOutput, error)
	DescribeChannelAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *MediaLiveDescribeChannelFuture

	DescribeInput(ctx workflow.Context, input *medialive.DescribeInputInput) (*medialive.DescribeInputOutput, error)
	DescribeInputAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *MediaLiveDescribeInputFuture

	DescribeInputDevice(ctx workflow.Context, input *medialive.DescribeInputDeviceInput) (*medialive.DescribeInputDeviceOutput, error)
	DescribeInputDeviceAsync(ctx workflow.Context, input *medialive.DescribeInputDeviceInput) *MediaLiveDescribeInputDeviceFuture

	DescribeInputDeviceThumbnail(ctx workflow.Context, input *medialive.DescribeInputDeviceThumbnailInput) (*medialive.DescribeInputDeviceThumbnailOutput, error)
	DescribeInputDeviceThumbnailAsync(ctx workflow.Context, input *medialive.DescribeInputDeviceThumbnailInput) *MediaLiveDescribeInputDeviceThumbnailFuture

	DescribeInputSecurityGroup(ctx workflow.Context, input *medialive.DescribeInputSecurityGroupInput) (*medialive.DescribeInputSecurityGroupOutput, error)
	DescribeInputSecurityGroupAsync(ctx workflow.Context, input *medialive.DescribeInputSecurityGroupInput) *MediaLiveDescribeInputSecurityGroupFuture

	DescribeMultiplex(ctx workflow.Context, input *medialive.DescribeMultiplexInput) (*medialive.DescribeMultiplexOutput, error)
	DescribeMultiplexAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *MediaLiveDescribeMultiplexFuture

	DescribeMultiplexProgram(ctx workflow.Context, input *medialive.DescribeMultiplexProgramInput) (*medialive.DescribeMultiplexProgramOutput, error)
	DescribeMultiplexProgramAsync(ctx workflow.Context, input *medialive.DescribeMultiplexProgramInput) *MediaLiveDescribeMultiplexProgramFuture

	DescribeOffering(ctx workflow.Context, input *medialive.DescribeOfferingInput) (*medialive.DescribeOfferingOutput, error)
	DescribeOfferingAsync(ctx workflow.Context, input *medialive.DescribeOfferingInput) *MediaLiveDescribeOfferingFuture

	DescribeReservation(ctx workflow.Context, input *medialive.DescribeReservationInput) (*medialive.DescribeReservationOutput, error)
	DescribeReservationAsync(ctx workflow.Context, input *medialive.DescribeReservationInput) *MediaLiveDescribeReservationFuture

	DescribeSchedule(ctx workflow.Context, input *medialive.DescribeScheduleInput) (*medialive.DescribeScheduleOutput, error)
	DescribeScheduleAsync(ctx workflow.Context, input *medialive.DescribeScheduleInput) *MediaLiveDescribeScheduleFuture

	ListChannels(ctx workflow.Context, input *medialive.ListChannelsInput) (*medialive.ListChannelsOutput, error)
	ListChannelsAsync(ctx workflow.Context, input *medialive.ListChannelsInput) *MediaLiveListChannelsFuture

	ListInputDevices(ctx workflow.Context, input *medialive.ListInputDevicesInput) (*medialive.ListInputDevicesOutput, error)
	ListInputDevicesAsync(ctx workflow.Context, input *medialive.ListInputDevicesInput) *MediaLiveListInputDevicesFuture

	ListInputSecurityGroups(ctx workflow.Context, input *medialive.ListInputSecurityGroupsInput) (*medialive.ListInputSecurityGroupsOutput, error)
	ListInputSecurityGroupsAsync(ctx workflow.Context, input *medialive.ListInputSecurityGroupsInput) *MediaLiveListInputSecurityGroupsFuture

	ListInputs(ctx workflow.Context, input *medialive.ListInputsInput) (*medialive.ListInputsOutput, error)
	ListInputsAsync(ctx workflow.Context, input *medialive.ListInputsInput) *MediaLiveListInputsFuture

	ListMultiplexPrograms(ctx workflow.Context, input *medialive.ListMultiplexProgramsInput) (*medialive.ListMultiplexProgramsOutput, error)
	ListMultiplexProgramsAsync(ctx workflow.Context, input *medialive.ListMultiplexProgramsInput) *MediaLiveListMultiplexProgramsFuture

	ListMultiplexes(ctx workflow.Context, input *medialive.ListMultiplexesInput) (*medialive.ListMultiplexesOutput, error)
	ListMultiplexesAsync(ctx workflow.Context, input *medialive.ListMultiplexesInput) *MediaLiveListMultiplexesFuture

	ListOfferings(ctx workflow.Context, input *medialive.ListOfferingsInput) (*medialive.ListOfferingsOutput, error)
	ListOfferingsAsync(ctx workflow.Context, input *medialive.ListOfferingsInput) *MediaLiveListOfferingsFuture

	ListReservations(ctx workflow.Context, input *medialive.ListReservationsInput) (*medialive.ListReservationsOutput, error)
	ListReservationsAsync(ctx workflow.Context, input *medialive.ListReservationsInput) *MediaLiveListReservationsFuture

	ListTagsForResource(ctx workflow.Context, input *medialive.ListTagsForResourceInput) (*medialive.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *medialive.ListTagsForResourceInput) *MediaLiveListTagsForResourceFuture

	PurchaseOffering(ctx workflow.Context, input *medialive.PurchaseOfferingInput) (*medialive.PurchaseOfferingOutput, error)
	PurchaseOfferingAsync(ctx workflow.Context, input *medialive.PurchaseOfferingInput) *MediaLivePurchaseOfferingFuture

	StartChannel(ctx workflow.Context, input *medialive.StartChannelInput) (*medialive.StartChannelOutput, error)
	StartChannelAsync(ctx workflow.Context, input *medialive.StartChannelInput) *MediaLiveStartChannelFuture

	StartMultiplex(ctx workflow.Context, input *medialive.StartMultiplexInput) (*medialive.StartMultiplexOutput, error)
	StartMultiplexAsync(ctx workflow.Context, input *medialive.StartMultiplexInput) *MediaLiveStartMultiplexFuture

	StopChannel(ctx workflow.Context, input *medialive.StopChannelInput) (*medialive.StopChannelOutput, error)
	StopChannelAsync(ctx workflow.Context, input *medialive.StopChannelInput) *MediaLiveStopChannelFuture

	StopMultiplex(ctx workflow.Context, input *medialive.StopMultiplexInput) (*medialive.StopMultiplexOutput, error)
	StopMultiplexAsync(ctx workflow.Context, input *medialive.StopMultiplexInput) *MediaLiveStopMultiplexFuture

	UpdateChannel(ctx workflow.Context, input *medialive.UpdateChannelInput) (*medialive.UpdateChannelOutput, error)
	UpdateChannelAsync(ctx workflow.Context, input *medialive.UpdateChannelInput) *MediaLiveUpdateChannelFuture

	UpdateChannelClass(ctx workflow.Context, input *medialive.UpdateChannelClassInput) (*medialive.UpdateChannelClassOutput, error)
	UpdateChannelClassAsync(ctx workflow.Context, input *medialive.UpdateChannelClassInput) *MediaLiveUpdateChannelClassFuture

	UpdateInput(ctx workflow.Context, input *medialive.UpdateInputInput) (*medialive.UpdateInputOutput, error)
	UpdateInputAsync(ctx workflow.Context, input *medialive.UpdateInputInput) *MediaLiveUpdateInputFuture

	UpdateInputDevice(ctx workflow.Context, input *medialive.UpdateInputDeviceInput) (*medialive.UpdateInputDeviceOutput, error)
	UpdateInputDeviceAsync(ctx workflow.Context, input *medialive.UpdateInputDeviceInput) *MediaLiveUpdateInputDeviceFuture

	UpdateInputSecurityGroup(ctx workflow.Context, input *medialive.UpdateInputSecurityGroupInput) (*medialive.UpdateInputSecurityGroupOutput, error)
	UpdateInputSecurityGroupAsync(ctx workflow.Context, input *medialive.UpdateInputSecurityGroupInput) *MediaLiveUpdateInputSecurityGroupFuture

	UpdateMultiplex(ctx workflow.Context, input *medialive.UpdateMultiplexInput) (*medialive.UpdateMultiplexOutput, error)
	UpdateMultiplexAsync(ctx workflow.Context, input *medialive.UpdateMultiplexInput) *MediaLiveUpdateMultiplexFuture

	UpdateMultiplexProgram(ctx workflow.Context, input *medialive.UpdateMultiplexProgramInput) (*medialive.UpdateMultiplexProgramOutput, error)
	UpdateMultiplexProgramAsync(ctx workflow.Context, input *medialive.UpdateMultiplexProgramInput) *MediaLiveUpdateMultiplexProgramFuture

	UpdateReservation(ctx workflow.Context, input *medialive.UpdateReservationInput) (*medialive.UpdateReservationOutput, error)
	UpdateReservationAsync(ctx workflow.Context, input *medialive.UpdateReservationInput) *MediaLiveUpdateReservationFuture

	WaitUntilChannelCreated(ctx workflow.Context, input *medialive.DescribeChannelInput) error
	WaitUntilChannelCreatedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *VoidFuture

	WaitUntilChannelDeleted(ctx workflow.Context, input *medialive.DescribeChannelInput) error
	WaitUntilChannelDeletedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *VoidFuture

	WaitUntilChannelRunning(ctx workflow.Context, input *medialive.DescribeChannelInput) error
	WaitUntilChannelRunningAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *VoidFuture

	WaitUntilChannelStopped(ctx workflow.Context, input *medialive.DescribeChannelInput) error
	WaitUntilChannelStoppedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *VoidFuture

	WaitUntilInputAttached(ctx workflow.Context, input *medialive.DescribeInputInput) error
	WaitUntilInputAttachedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *VoidFuture

	WaitUntilInputDeleted(ctx workflow.Context, input *medialive.DescribeInputInput) error
	WaitUntilInputDeletedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *VoidFuture

	WaitUntilInputDetached(ctx workflow.Context, input *medialive.DescribeInputInput) error
	WaitUntilInputDetachedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *VoidFuture

	WaitUntilMultiplexCreated(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error
	WaitUntilMultiplexCreatedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *VoidFuture

	WaitUntilMultiplexDeleted(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error
	WaitUntilMultiplexDeletedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *VoidFuture

	WaitUntilMultiplexRunning(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error
	WaitUntilMultiplexRunningAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *VoidFuture

	WaitUntilMultiplexStopped(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error
	WaitUntilMultiplexStoppedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *VoidFuture
}

type MediaLiveStub struct{}

func NewMediaLiveStub() MediaLiveClient {
	return &MediaLiveStub{}
}

type MediaLiveBatchDeleteFuture struct {
	Future workflow.Future
}

func (r *MediaLiveBatchDeleteFuture) Get(ctx workflow.Context) (*medialive.BatchDeleteOutput, error) {
	var output medialive.BatchDeleteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveBatchStartFuture struct {
	Future workflow.Future
}

func (r *MediaLiveBatchStartFuture) Get(ctx workflow.Context) (*medialive.BatchStartOutput, error) {
	var output medialive.BatchStartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveBatchStopFuture struct {
	Future workflow.Future
}

func (r *MediaLiveBatchStopFuture) Get(ctx workflow.Context) (*medialive.BatchStopOutput, error) {
	var output medialive.BatchStopOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveBatchUpdateScheduleFuture struct {
	Future workflow.Future
}

func (r *MediaLiveBatchUpdateScheduleFuture) Get(ctx workflow.Context) (*medialive.BatchUpdateScheduleOutput, error) {
	var output medialive.BatchUpdateScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCreateChannelFuture struct {
	Future workflow.Future
}

func (r *MediaLiveCreateChannelFuture) Get(ctx workflow.Context) (*medialive.CreateChannelOutput, error) {
	var output medialive.CreateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCreateInputFuture struct {
	Future workflow.Future
}

func (r *MediaLiveCreateInputFuture) Get(ctx workflow.Context) (*medialive.CreateInputOutput, error) {
	var output medialive.CreateInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCreateInputSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *MediaLiveCreateInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.CreateInputSecurityGroupOutput, error) {
	var output medialive.CreateInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCreateMultiplexFuture struct {
	Future workflow.Future
}

func (r *MediaLiveCreateMultiplexFuture) Get(ctx workflow.Context) (*medialive.CreateMultiplexOutput, error) {
	var output medialive.CreateMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCreateMultiplexProgramFuture struct {
	Future workflow.Future
}

func (r *MediaLiveCreateMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.CreateMultiplexProgramOutput, error) {
	var output medialive.CreateMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCreateTagsFuture struct {
	Future workflow.Future
}

func (r *MediaLiveCreateTagsFuture) Get(ctx workflow.Context) (*medialive.CreateTagsOutput, error) {
	var output medialive.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteChannelFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDeleteChannelFuture) Get(ctx workflow.Context) (*medialive.DeleteChannelOutput, error) {
	var output medialive.DeleteChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteInputFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDeleteInputFuture) Get(ctx workflow.Context) (*medialive.DeleteInputOutput, error) {
	var output medialive.DeleteInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteInputSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDeleteInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.DeleteInputSecurityGroupOutput, error) {
	var output medialive.DeleteInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteMultiplexFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDeleteMultiplexFuture) Get(ctx workflow.Context) (*medialive.DeleteMultiplexOutput, error) {
	var output medialive.DeleteMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteMultiplexProgramFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDeleteMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.DeleteMultiplexProgramOutput, error) {
	var output medialive.DeleteMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteReservationFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDeleteReservationFuture) Get(ctx workflow.Context) (*medialive.DeleteReservationOutput, error) {
	var output medialive.DeleteReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteScheduleFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDeleteScheduleFuture) Get(ctx workflow.Context) (*medialive.DeleteScheduleOutput, error) {
	var output medialive.DeleteScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteTagsFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDeleteTagsFuture) Get(ctx workflow.Context) (*medialive.DeleteTagsOutput, error) {
	var output medialive.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeChannelFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDescribeChannelFuture) Get(ctx workflow.Context) (*medialive.DescribeChannelOutput, error) {
	var output medialive.DescribeChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeInputFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDescribeInputFuture) Get(ctx workflow.Context) (*medialive.DescribeInputOutput, error) {
	var output medialive.DescribeInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeInputDeviceFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDescribeInputDeviceFuture) Get(ctx workflow.Context) (*medialive.DescribeInputDeviceOutput, error) {
	var output medialive.DescribeInputDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeInputDeviceThumbnailFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDescribeInputDeviceThumbnailFuture) Get(ctx workflow.Context) (*medialive.DescribeInputDeviceThumbnailOutput, error) {
	var output medialive.DescribeInputDeviceThumbnailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeInputSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDescribeInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.DescribeInputSecurityGroupOutput, error) {
	var output medialive.DescribeInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeMultiplexFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDescribeMultiplexFuture) Get(ctx workflow.Context) (*medialive.DescribeMultiplexOutput, error) {
	var output medialive.DescribeMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeMultiplexProgramFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDescribeMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.DescribeMultiplexProgramOutput, error) {
	var output medialive.DescribeMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeOfferingFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDescribeOfferingFuture) Get(ctx workflow.Context) (*medialive.DescribeOfferingOutput, error) {
	var output medialive.DescribeOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeReservationFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDescribeReservationFuture) Get(ctx workflow.Context) (*medialive.DescribeReservationOutput, error) {
	var output medialive.DescribeReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeScheduleFuture struct {
	Future workflow.Future
}

func (r *MediaLiveDescribeScheduleFuture) Get(ctx workflow.Context) (*medialive.DescribeScheduleOutput, error) {
	var output medialive.DescribeScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListChannelsFuture struct {
	Future workflow.Future
}

func (r *MediaLiveListChannelsFuture) Get(ctx workflow.Context) (*medialive.ListChannelsOutput, error) {
	var output medialive.ListChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListInputDevicesFuture struct {
	Future workflow.Future
}

func (r *MediaLiveListInputDevicesFuture) Get(ctx workflow.Context) (*medialive.ListInputDevicesOutput, error) {
	var output medialive.ListInputDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListInputSecurityGroupsFuture struct {
	Future workflow.Future
}

func (r *MediaLiveListInputSecurityGroupsFuture) Get(ctx workflow.Context) (*medialive.ListInputSecurityGroupsOutput, error) {
	var output medialive.ListInputSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListInputsFuture struct {
	Future workflow.Future
}

func (r *MediaLiveListInputsFuture) Get(ctx workflow.Context) (*medialive.ListInputsOutput, error) {
	var output medialive.ListInputsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListMultiplexProgramsFuture struct {
	Future workflow.Future
}

func (r *MediaLiveListMultiplexProgramsFuture) Get(ctx workflow.Context) (*medialive.ListMultiplexProgramsOutput, error) {
	var output medialive.ListMultiplexProgramsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListMultiplexesFuture struct {
	Future workflow.Future
}

func (r *MediaLiveListMultiplexesFuture) Get(ctx workflow.Context) (*medialive.ListMultiplexesOutput, error) {
	var output medialive.ListMultiplexesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListOfferingsFuture struct {
	Future workflow.Future
}

func (r *MediaLiveListOfferingsFuture) Get(ctx workflow.Context) (*medialive.ListOfferingsOutput, error) {
	var output medialive.ListOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListReservationsFuture struct {
	Future workflow.Future
}

func (r *MediaLiveListReservationsFuture) Get(ctx workflow.Context) (*medialive.ListReservationsOutput, error) {
	var output medialive.ListReservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *MediaLiveListTagsForResourceFuture) Get(ctx workflow.Context) (*medialive.ListTagsForResourceOutput, error) {
	var output medialive.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLivePurchaseOfferingFuture struct {
	Future workflow.Future
}

func (r *MediaLivePurchaseOfferingFuture) Get(ctx workflow.Context) (*medialive.PurchaseOfferingOutput, error) {
	var output medialive.PurchaseOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveStartChannelFuture struct {
	Future workflow.Future
}

func (r *MediaLiveStartChannelFuture) Get(ctx workflow.Context) (*medialive.StartChannelOutput, error) {
	var output medialive.StartChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveStartMultiplexFuture struct {
	Future workflow.Future
}

func (r *MediaLiveStartMultiplexFuture) Get(ctx workflow.Context) (*medialive.StartMultiplexOutput, error) {
	var output medialive.StartMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveStopChannelFuture struct {
	Future workflow.Future
}

func (r *MediaLiveStopChannelFuture) Get(ctx workflow.Context) (*medialive.StopChannelOutput, error) {
	var output medialive.StopChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveStopMultiplexFuture struct {
	Future workflow.Future
}

func (r *MediaLiveStopMultiplexFuture) Get(ctx workflow.Context) (*medialive.StopMultiplexOutput, error) {
	var output medialive.StopMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateChannelFuture struct {
	Future workflow.Future
}

func (r *MediaLiveUpdateChannelFuture) Get(ctx workflow.Context) (*medialive.UpdateChannelOutput, error) {
	var output medialive.UpdateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateChannelClassFuture struct {
	Future workflow.Future
}

func (r *MediaLiveUpdateChannelClassFuture) Get(ctx workflow.Context) (*medialive.UpdateChannelClassOutput, error) {
	var output medialive.UpdateChannelClassOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateInputFuture struct {
	Future workflow.Future
}

func (r *MediaLiveUpdateInputFuture) Get(ctx workflow.Context) (*medialive.UpdateInputOutput, error) {
	var output medialive.UpdateInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateInputDeviceFuture struct {
	Future workflow.Future
}

func (r *MediaLiveUpdateInputDeviceFuture) Get(ctx workflow.Context) (*medialive.UpdateInputDeviceOutput, error) {
	var output medialive.UpdateInputDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateInputSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *MediaLiveUpdateInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.UpdateInputSecurityGroupOutput, error) {
	var output medialive.UpdateInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateMultiplexFuture struct {
	Future workflow.Future
}

func (r *MediaLiveUpdateMultiplexFuture) Get(ctx workflow.Context) (*medialive.UpdateMultiplexOutput, error) {
	var output medialive.UpdateMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateMultiplexProgramFuture struct {
	Future workflow.Future
}

func (r *MediaLiveUpdateMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.UpdateMultiplexProgramOutput, error) {
	var output medialive.UpdateMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateReservationFuture struct {
	Future workflow.Future
}

func (r *MediaLiveUpdateReservationFuture) Get(ctx workflow.Context) (*medialive.UpdateReservationOutput, error) {
	var output medialive.UpdateReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) BatchDelete(ctx workflow.Context, input *medialive.BatchDeleteInput) (*medialive.BatchDeleteOutput, error) {
	var output medialive.BatchDeleteOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.BatchDelete", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) BatchDeleteAsync(ctx workflow.Context, input *medialive.BatchDeleteInput) *MediaLiveBatchDeleteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.BatchDelete", input)
	return &MediaLiveBatchDeleteFuture{Future: future}
}

func (a *MediaLiveStub) BatchStart(ctx workflow.Context, input *medialive.BatchStartInput) (*medialive.BatchStartOutput, error) {
	var output medialive.BatchStartOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.BatchStart", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) BatchStartAsync(ctx workflow.Context, input *medialive.BatchStartInput) *MediaLiveBatchStartFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.BatchStart", input)
	return &MediaLiveBatchStartFuture{Future: future}
}

func (a *MediaLiveStub) BatchStop(ctx workflow.Context, input *medialive.BatchStopInput) (*medialive.BatchStopOutput, error) {
	var output medialive.BatchStopOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.BatchStop", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) BatchStopAsync(ctx workflow.Context, input *medialive.BatchStopInput) *MediaLiveBatchStopFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.BatchStop", input)
	return &MediaLiveBatchStopFuture{Future: future}
}

func (a *MediaLiveStub) BatchUpdateSchedule(ctx workflow.Context, input *medialive.BatchUpdateScheduleInput) (*medialive.BatchUpdateScheduleOutput, error) {
	var output medialive.BatchUpdateScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.BatchUpdateSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) BatchUpdateScheduleAsync(ctx workflow.Context, input *medialive.BatchUpdateScheduleInput) *MediaLiveBatchUpdateScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.BatchUpdateSchedule", input)
	return &MediaLiveBatchUpdateScheduleFuture{Future: future}
}

func (a *MediaLiveStub) CreateChannel(ctx workflow.Context, input *medialive.CreateChannelInput) (*medialive.CreateChannelOutput, error) {
	var output medialive.CreateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.CreateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) CreateChannelAsync(ctx workflow.Context, input *medialive.CreateChannelInput) *MediaLiveCreateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.CreateChannel", input)
	return &MediaLiveCreateChannelFuture{Future: future}
}

func (a *MediaLiveStub) CreateInput(ctx workflow.Context, input *medialive.CreateInputInput) (*medialive.CreateInputOutput, error) {
	var output medialive.CreateInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.CreateInput", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) CreateInputAsync(ctx workflow.Context, input *medialive.CreateInputInput) *MediaLiveCreateInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.CreateInput", input)
	return &MediaLiveCreateInputFuture{Future: future}
}

func (a *MediaLiveStub) CreateInputSecurityGroup(ctx workflow.Context, input *medialive.CreateInputSecurityGroupInput) (*medialive.CreateInputSecurityGroupOutput, error) {
	var output medialive.CreateInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.CreateInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) CreateInputSecurityGroupAsync(ctx workflow.Context, input *medialive.CreateInputSecurityGroupInput) *MediaLiveCreateInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.CreateInputSecurityGroup", input)
	return &MediaLiveCreateInputSecurityGroupFuture{Future: future}
}

func (a *MediaLiveStub) CreateMultiplex(ctx workflow.Context, input *medialive.CreateMultiplexInput) (*medialive.CreateMultiplexOutput, error) {
	var output medialive.CreateMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.CreateMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) CreateMultiplexAsync(ctx workflow.Context, input *medialive.CreateMultiplexInput) *MediaLiveCreateMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.CreateMultiplex", input)
	return &MediaLiveCreateMultiplexFuture{Future: future}
}

func (a *MediaLiveStub) CreateMultiplexProgram(ctx workflow.Context, input *medialive.CreateMultiplexProgramInput) (*medialive.CreateMultiplexProgramOutput, error) {
	var output medialive.CreateMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.CreateMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) CreateMultiplexProgramAsync(ctx workflow.Context, input *medialive.CreateMultiplexProgramInput) *MediaLiveCreateMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.CreateMultiplexProgram", input)
	return &MediaLiveCreateMultiplexProgramFuture{Future: future}
}

func (a *MediaLiveStub) CreateTags(ctx workflow.Context, input *medialive.CreateTagsInput) (*medialive.CreateTagsOutput, error) {
	var output medialive.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) CreateTagsAsync(ctx workflow.Context, input *medialive.CreateTagsInput) *MediaLiveCreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.CreateTags", input)
	return &MediaLiveCreateTagsFuture{Future: future}
}

func (a *MediaLiveStub) DeleteChannel(ctx workflow.Context, input *medialive.DeleteChannelInput) (*medialive.DeleteChannelOutput, error) {
	var output medialive.DeleteChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteChannelAsync(ctx workflow.Context, input *medialive.DeleteChannelInput) *MediaLiveDeleteChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteChannel", input)
	return &MediaLiveDeleteChannelFuture{Future: future}
}

func (a *MediaLiveStub) DeleteInput(ctx workflow.Context, input *medialive.DeleteInputInput) (*medialive.DeleteInputOutput, error) {
	var output medialive.DeleteInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteInput", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteInputAsync(ctx workflow.Context, input *medialive.DeleteInputInput) *MediaLiveDeleteInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteInput", input)
	return &MediaLiveDeleteInputFuture{Future: future}
}

func (a *MediaLiveStub) DeleteInputSecurityGroup(ctx workflow.Context, input *medialive.DeleteInputSecurityGroupInput) (*medialive.DeleteInputSecurityGroupOutput, error) {
	var output medialive.DeleteInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteInputSecurityGroupAsync(ctx workflow.Context, input *medialive.DeleteInputSecurityGroupInput) *MediaLiveDeleteInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteInputSecurityGroup", input)
	return &MediaLiveDeleteInputSecurityGroupFuture{Future: future}
}

func (a *MediaLiveStub) DeleteMultiplex(ctx workflow.Context, input *medialive.DeleteMultiplexInput) (*medialive.DeleteMultiplexOutput, error) {
	var output medialive.DeleteMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteMultiplexAsync(ctx workflow.Context, input *medialive.DeleteMultiplexInput) *MediaLiveDeleteMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteMultiplex", input)
	return &MediaLiveDeleteMultiplexFuture{Future: future}
}

func (a *MediaLiveStub) DeleteMultiplexProgram(ctx workflow.Context, input *medialive.DeleteMultiplexProgramInput) (*medialive.DeleteMultiplexProgramOutput, error) {
	var output medialive.DeleteMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteMultiplexProgramAsync(ctx workflow.Context, input *medialive.DeleteMultiplexProgramInput) *MediaLiveDeleteMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteMultiplexProgram", input)
	return &MediaLiveDeleteMultiplexProgramFuture{Future: future}
}

func (a *MediaLiveStub) DeleteReservation(ctx workflow.Context, input *medialive.DeleteReservationInput) (*medialive.DeleteReservationOutput, error) {
	var output medialive.DeleteReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteReservationAsync(ctx workflow.Context, input *medialive.DeleteReservationInput) *MediaLiveDeleteReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteReservation", input)
	return &MediaLiveDeleteReservationFuture{Future: future}
}

func (a *MediaLiveStub) DeleteSchedule(ctx workflow.Context, input *medialive.DeleteScheduleInput) (*medialive.DeleteScheduleOutput, error) {
	var output medialive.DeleteScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteScheduleAsync(ctx workflow.Context, input *medialive.DeleteScheduleInput) *MediaLiveDeleteScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteSchedule", input)
	return &MediaLiveDeleteScheduleFuture{Future: future}
}

func (a *MediaLiveStub) DeleteTags(ctx workflow.Context, input *medialive.DeleteTagsInput) (*medialive.DeleteTagsOutput, error) {
	var output medialive.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteTagsAsync(ctx workflow.Context, input *medialive.DeleteTagsInput) *MediaLiveDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteTags", input)
	return &MediaLiveDeleteTagsFuture{Future: future}
}

func (a *MediaLiveStub) DescribeChannel(ctx workflow.Context, input *medialive.DescribeChannelInput) (*medialive.DescribeChannelOutput, error) {
	var output medialive.DescribeChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeChannelAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *MediaLiveDescribeChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeChannel", input)
	return &MediaLiveDescribeChannelFuture{Future: future}
}

func (a *MediaLiveStub) DescribeInput(ctx workflow.Context, input *medialive.DescribeInputInput) (*medialive.DescribeInputOutput, error) {
	var output medialive.DescribeInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInput", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeInputAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *MediaLiveDescribeInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInput", input)
	return &MediaLiveDescribeInputFuture{Future: future}
}

func (a *MediaLiveStub) DescribeInputDevice(ctx workflow.Context, input *medialive.DescribeInputDeviceInput) (*medialive.DescribeInputDeviceOutput, error) {
	var output medialive.DescribeInputDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInputDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeInputDeviceAsync(ctx workflow.Context, input *medialive.DescribeInputDeviceInput) *MediaLiveDescribeInputDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInputDevice", input)
	return &MediaLiveDescribeInputDeviceFuture{Future: future}
}

func (a *MediaLiveStub) DescribeInputDeviceThumbnail(ctx workflow.Context, input *medialive.DescribeInputDeviceThumbnailInput) (*medialive.DescribeInputDeviceThumbnailOutput, error) {
	var output medialive.DescribeInputDeviceThumbnailOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInputDeviceThumbnail", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeInputDeviceThumbnailAsync(ctx workflow.Context, input *medialive.DescribeInputDeviceThumbnailInput) *MediaLiveDescribeInputDeviceThumbnailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInputDeviceThumbnail", input)
	return &MediaLiveDescribeInputDeviceThumbnailFuture{Future: future}
}

func (a *MediaLiveStub) DescribeInputSecurityGroup(ctx workflow.Context, input *medialive.DescribeInputSecurityGroupInput) (*medialive.DescribeInputSecurityGroupOutput, error) {
	var output medialive.DescribeInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeInputSecurityGroupAsync(ctx workflow.Context, input *medialive.DescribeInputSecurityGroupInput) *MediaLiveDescribeInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInputSecurityGroup", input)
	return &MediaLiveDescribeInputSecurityGroupFuture{Future: future}
}

func (a *MediaLiveStub) DescribeMultiplex(ctx workflow.Context, input *medialive.DescribeMultiplexInput) (*medialive.DescribeMultiplexOutput, error) {
	var output medialive.DescribeMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeMultiplexAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *MediaLiveDescribeMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeMultiplex", input)
	return &MediaLiveDescribeMultiplexFuture{Future: future}
}

func (a *MediaLiveStub) DescribeMultiplexProgram(ctx workflow.Context, input *medialive.DescribeMultiplexProgramInput) (*medialive.DescribeMultiplexProgramOutput, error) {
	var output medialive.DescribeMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeMultiplexProgramAsync(ctx workflow.Context, input *medialive.DescribeMultiplexProgramInput) *MediaLiveDescribeMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeMultiplexProgram", input)
	return &MediaLiveDescribeMultiplexProgramFuture{Future: future}
}

func (a *MediaLiveStub) DescribeOffering(ctx workflow.Context, input *medialive.DescribeOfferingInput) (*medialive.DescribeOfferingOutput, error) {
	var output medialive.DescribeOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeOfferingAsync(ctx workflow.Context, input *medialive.DescribeOfferingInput) *MediaLiveDescribeOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeOffering", input)
	return &MediaLiveDescribeOfferingFuture{Future: future}
}

func (a *MediaLiveStub) DescribeReservation(ctx workflow.Context, input *medialive.DescribeReservationInput) (*medialive.DescribeReservationOutput, error) {
	var output medialive.DescribeReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeReservationAsync(ctx workflow.Context, input *medialive.DescribeReservationInput) *MediaLiveDescribeReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeReservation", input)
	return &MediaLiveDescribeReservationFuture{Future: future}
}

func (a *MediaLiveStub) DescribeSchedule(ctx workflow.Context, input *medialive.DescribeScheduleInput) (*medialive.DescribeScheduleOutput, error) {
	var output medialive.DescribeScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeScheduleAsync(ctx workflow.Context, input *medialive.DescribeScheduleInput) *MediaLiveDescribeScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeSchedule", input)
	return &MediaLiveDescribeScheduleFuture{Future: future}
}

func (a *MediaLiveStub) ListChannels(ctx workflow.Context, input *medialive.ListChannelsInput) (*medialive.ListChannelsOutput, error) {
	var output medialive.ListChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListChannelsAsync(ctx workflow.Context, input *medialive.ListChannelsInput) *MediaLiveListChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListChannels", input)
	return &MediaLiveListChannelsFuture{Future: future}
}

func (a *MediaLiveStub) ListInputDevices(ctx workflow.Context, input *medialive.ListInputDevicesInput) (*medialive.ListInputDevicesOutput, error) {
	var output medialive.ListInputDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListInputDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListInputDevicesAsync(ctx workflow.Context, input *medialive.ListInputDevicesInput) *MediaLiveListInputDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListInputDevices", input)
	return &MediaLiveListInputDevicesFuture{Future: future}
}

func (a *MediaLiveStub) ListInputSecurityGroups(ctx workflow.Context, input *medialive.ListInputSecurityGroupsInput) (*medialive.ListInputSecurityGroupsOutput, error) {
	var output medialive.ListInputSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListInputSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListInputSecurityGroupsAsync(ctx workflow.Context, input *medialive.ListInputSecurityGroupsInput) *MediaLiveListInputSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListInputSecurityGroups", input)
	return &MediaLiveListInputSecurityGroupsFuture{Future: future}
}

func (a *MediaLiveStub) ListInputs(ctx workflow.Context, input *medialive.ListInputsInput) (*medialive.ListInputsOutput, error) {
	var output medialive.ListInputsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListInputs", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListInputsAsync(ctx workflow.Context, input *medialive.ListInputsInput) *MediaLiveListInputsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListInputs", input)
	return &MediaLiveListInputsFuture{Future: future}
}

func (a *MediaLiveStub) ListMultiplexPrograms(ctx workflow.Context, input *medialive.ListMultiplexProgramsInput) (*medialive.ListMultiplexProgramsOutput, error) {
	var output medialive.ListMultiplexProgramsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListMultiplexPrograms", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListMultiplexProgramsAsync(ctx workflow.Context, input *medialive.ListMultiplexProgramsInput) *MediaLiveListMultiplexProgramsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListMultiplexPrograms", input)
	return &MediaLiveListMultiplexProgramsFuture{Future: future}
}

func (a *MediaLiveStub) ListMultiplexes(ctx workflow.Context, input *medialive.ListMultiplexesInput) (*medialive.ListMultiplexesOutput, error) {
	var output medialive.ListMultiplexesOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListMultiplexes", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListMultiplexesAsync(ctx workflow.Context, input *medialive.ListMultiplexesInput) *MediaLiveListMultiplexesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListMultiplexes", input)
	return &MediaLiveListMultiplexesFuture{Future: future}
}

func (a *MediaLiveStub) ListOfferings(ctx workflow.Context, input *medialive.ListOfferingsInput) (*medialive.ListOfferingsOutput, error) {
	var output medialive.ListOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListOfferingsAsync(ctx workflow.Context, input *medialive.ListOfferingsInput) *MediaLiveListOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListOfferings", input)
	return &MediaLiveListOfferingsFuture{Future: future}
}

func (a *MediaLiveStub) ListReservations(ctx workflow.Context, input *medialive.ListReservationsInput) (*medialive.ListReservationsOutput, error) {
	var output medialive.ListReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListReservationsAsync(ctx workflow.Context, input *medialive.ListReservationsInput) *MediaLiveListReservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListReservations", input)
	return &MediaLiveListReservationsFuture{Future: future}
}

func (a *MediaLiveStub) ListTagsForResource(ctx workflow.Context, input *medialive.ListTagsForResourceInput) (*medialive.ListTagsForResourceOutput, error) {
	var output medialive.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListTagsForResourceAsync(ctx workflow.Context, input *medialive.ListTagsForResourceInput) *MediaLiveListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListTagsForResource", input)
	return &MediaLiveListTagsForResourceFuture{Future: future}
}

func (a *MediaLiveStub) PurchaseOffering(ctx workflow.Context, input *medialive.PurchaseOfferingInput) (*medialive.PurchaseOfferingOutput, error) {
	var output medialive.PurchaseOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.PurchaseOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) PurchaseOfferingAsync(ctx workflow.Context, input *medialive.PurchaseOfferingInput) *MediaLivePurchaseOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.PurchaseOffering", input)
	return &MediaLivePurchaseOfferingFuture{Future: future}
}

func (a *MediaLiveStub) StartChannel(ctx workflow.Context, input *medialive.StartChannelInput) (*medialive.StartChannelOutput, error) {
	var output medialive.StartChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.StartChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) StartChannelAsync(ctx workflow.Context, input *medialive.StartChannelInput) *MediaLiveStartChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.StartChannel", input)
	return &MediaLiveStartChannelFuture{Future: future}
}

func (a *MediaLiveStub) StartMultiplex(ctx workflow.Context, input *medialive.StartMultiplexInput) (*medialive.StartMultiplexOutput, error) {
	var output medialive.StartMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.StartMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) StartMultiplexAsync(ctx workflow.Context, input *medialive.StartMultiplexInput) *MediaLiveStartMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.StartMultiplex", input)
	return &MediaLiveStartMultiplexFuture{Future: future}
}

func (a *MediaLiveStub) StopChannel(ctx workflow.Context, input *medialive.StopChannelInput) (*medialive.StopChannelOutput, error) {
	var output medialive.StopChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.StopChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) StopChannelAsync(ctx workflow.Context, input *medialive.StopChannelInput) *MediaLiveStopChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.StopChannel", input)
	return &MediaLiveStopChannelFuture{Future: future}
}

func (a *MediaLiveStub) StopMultiplex(ctx workflow.Context, input *medialive.StopMultiplexInput) (*medialive.StopMultiplexOutput, error) {
	var output medialive.StopMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.StopMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) StopMultiplexAsync(ctx workflow.Context, input *medialive.StopMultiplexInput) *MediaLiveStopMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.StopMultiplex", input)
	return &MediaLiveStopMultiplexFuture{Future: future}
}

func (a *MediaLiveStub) UpdateChannel(ctx workflow.Context, input *medialive.UpdateChannelInput) (*medialive.UpdateChannelOutput, error) {
	var output medialive.UpdateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateChannelAsync(ctx workflow.Context, input *medialive.UpdateChannelInput) *MediaLiveUpdateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateChannel", input)
	return &MediaLiveUpdateChannelFuture{Future: future}
}

func (a *MediaLiveStub) UpdateChannelClass(ctx workflow.Context, input *medialive.UpdateChannelClassInput) (*medialive.UpdateChannelClassOutput, error) {
	var output medialive.UpdateChannelClassOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateChannelClass", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateChannelClassAsync(ctx workflow.Context, input *medialive.UpdateChannelClassInput) *MediaLiveUpdateChannelClassFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateChannelClass", input)
	return &MediaLiveUpdateChannelClassFuture{Future: future}
}

func (a *MediaLiveStub) UpdateInput(ctx workflow.Context, input *medialive.UpdateInputInput) (*medialive.UpdateInputOutput, error) {
	var output medialive.UpdateInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateInput", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateInputAsync(ctx workflow.Context, input *medialive.UpdateInputInput) *MediaLiveUpdateInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateInput", input)
	return &MediaLiveUpdateInputFuture{Future: future}
}

func (a *MediaLiveStub) UpdateInputDevice(ctx workflow.Context, input *medialive.UpdateInputDeviceInput) (*medialive.UpdateInputDeviceOutput, error) {
	var output medialive.UpdateInputDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateInputDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateInputDeviceAsync(ctx workflow.Context, input *medialive.UpdateInputDeviceInput) *MediaLiveUpdateInputDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateInputDevice", input)
	return &MediaLiveUpdateInputDeviceFuture{Future: future}
}

func (a *MediaLiveStub) UpdateInputSecurityGroup(ctx workflow.Context, input *medialive.UpdateInputSecurityGroupInput) (*medialive.UpdateInputSecurityGroupOutput, error) {
	var output medialive.UpdateInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateInputSecurityGroupAsync(ctx workflow.Context, input *medialive.UpdateInputSecurityGroupInput) *MediaLiveUpdateInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateInputSecurityGroup", input)
	return &MediaLiveUpdateInputSecurityGroupFuture{Future: future}
}

func (a *MediaLiveStub) UpdateMultiplex(ctx workflow.Context, input *medialive.UpdateMultiplexInput) (*medialive.UpdateMultiplexOutput, error) {
	var output medialive.UpdateMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateMultiplexAsync(ctx workflow.Context, input *medialive.UpdateMultiplexInput) *MediaLiveUpdateMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateMultiplex", input)
	return &MediaLiveUpdateMultiplexFuture{Future: future}
}

func (a *MediaLiveStub) UpdateMultiplexProgram(ctx workflow.Context, input *medialive.UpdateMultiplexProgramInput) (*medialive.UpdateMultiplexProgramOutput, error) {
	var output medialive.UpdateMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateMultiplexProgramAsync(ctx workflow.Context, input *medialive.UpdateMultiplexProgramInput) *MediaLiveUpdateMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateMultiplexProgram", input)
	return &MediaLiveUpdateMultiplexProgramFuture{Future: future}
}

func (a *MediaLiveStub) UpdateReservation(ctx workflow.Context, input *medialive.UpdateReservationInput) (*medialive.UpdateReservationOutput, error) {
	var output medialive.UpdateReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateReservationAsync(ctx workflow.Context, input *medialive.UpdateReservationInput) *MediaLiveUpdateReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateReservation", input)
	return &MediaLiveUpdateReservationFuture{Future: future}
}

func (a *MediaLiveStub) WaitUntilChannelCreated(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelCreated", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilChannelCreatedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelCreated", input)
	return NewVoidFuture(future)
}

func (a *MediaLiveStub) WaitUntilChannelDeleted(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelDeleted", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilChannelDeletedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelDeleted", input)
	return NewVoidFuture(future)
}

func (a *MediaLiveStub) WaitUntilChannelRunning(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelRunning", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilChannelRunningAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelRunning", input)
	return NewVoidFuture(future)
}

func (a *MediaLiveStub) WaitUntilChannelStopped(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelStopped", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilChannelStoppedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelStopped", input)
	return NewVoidFuture(future)
}

func (a *MediaLiveStub) WaitUntilInputAttached(ctx workflow.Context, input *medialive.DescribeInputInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilInputAttached", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilInputAttachedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilInputAttached", input)
	return NewVoidFuture(future)
}

func (a *MediaLiveStub) WaitUntilInputDeleted(ctx workflow.Context, input *medialive.DescribeInputInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilInputDeleted", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilInputDeletedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilInputDeleted", input)
	return NewVoidFuture(future)
}

func (a *MediaLiveStub) WaitUntilInputDetached(ctx workflow.Context, input *medialive.DescribeInputInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilInputDetached", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilInputDetachedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilInputDetached", input)
	return NewVoidFuture(future)
}

func (a *MediaLiveStub) WaitUntilMultiplexCreated(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexCreated", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilMultiplexCreatedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexCreated", input)
	return NewVoidFuture(future)
}

func (a *MediaLiveStub) WaitUntilMultiplexDeleted(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexDeleted", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilMultiplexDeletedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexDeleted", input)
	return NewVoidFuture(future)
}

func (a *MediaLiveStub) WaitUntilMultiplexRunning(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexRunning", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilMultiplexRunningAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexRunning", input)
	return NewVoidFuture(future)
}

func (a *MediaLiveStub) WaitUntilMultiplexStopped(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexStopped", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilMultiplexStoppedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexStopped", input)
	return NewVoidFuture(future)
}
