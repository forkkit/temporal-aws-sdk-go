// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/medialive"
	"go.temporal.io/sdk/workflow"
)

type MediaLiveClient interface {
	BatchDelete(ctx workflow.Context, input *medialive.BatchDeleteInput) (*medialive.BatchDeleteOutput, error)
	BatchDeleteAsync(ctx workflow.Context, input *medialive.BatchDeleteInput) *MedialiveBatchDeleteFuture

	BatchStart(ctx workflow.Context, input *medialive.BatchStartInput) (*medialive.BatchStartOutput, error)
	BatchStartAsync(ctx workflow.Context, input *medialive.BatchStartInput) *MedialiveBatchStartFuture

	BatchStop(ctx workflow.Context, input *medialive.BatchStopInput) (*medialive.BatchStopOutput, error)
	BatchStopAsync(ctx workflow.Context, input *medialive.BatchStopInput) *MedialiveBatchStopFuture

	BatchUpdateSchedule(ctx workflow.Context, input *medialive.BatchUpdateScheduleInput) (*medialive.BatchUpdateScheduleOutput, error)
	BatchUpdateScheduleAsync(ctx workflow.Context, input *medialive.BatchUpdateScheduleInput) *MedialiveBatchUpdateScheduleFuture

	CreateChannel(ctx workflow.Context, input *medialive.CreateChannelInput) (*medialive.CreateChannelOutput, error)
	CreateChannelAsync(ctx workflow.Context, input *medialive.CreateChannelInput) *MedialiveCreateChannelFuture

	CreateInput(ctx workflow.Context, input *medialive.CreateInputInput) (*medialive.CreateInputOutput, error)
	CreateInputAsync(ctx workflow.Context, input *medialive.CreateInputInput) *MedialiveCreateInputFuture

	CreateInputSecurityGroup(ctx workflow.Context, input *medialive.CreateInputSecurityGroupInput) (*medialive.CreateInputSecurityGroupOutput, error)
	CreateInputSecurityGroupAsync(ctx workflow.Context, input *medialive.CreateInputSecurityGroupInput) *MedialiveCreateInputSecurityGroupFuture

	CreateMultiplex(ctx workflow.Context, input *medialive.CreateMultiplexInput) (*medialive.CreateMultiplexOutput, error)
	CreateMultiplexAsync(ctx workflow.Context, input *medialive.CreateMultiplexInput) *MedialiveCreateMultiplexFuture

	CreateMultiplexProgram(ctx workflow.Context, input *medialive.CreateMultiplexProgramInput) (*medialive.CreateMultiplexProgramOutput, error)
	CreateMultiplexProgramAsync(ctx workflow.Context, input *medialive.CreateMultiplexProgramInput) *MedialiveCreateMultiplexProgramFuture

	CreateTags(ctx workflow.Context, input *medialive.CreateTagsInput) (*medialive.CreateTagsOutput, error)
	CreateTagsAsync(ctx workflow.Context, input *medialive.CreateTagsInput) *MedialiveCreateTagsFuture

	DeleteChannel(ctx workflow.Context, input *medialive.DeleteChannelInput) (*medialive.DeleteChannelOutput, error)
	DeleteChannelAsync(ctx workflow.Context, input *medialive.DeleteChannelInput) *MedialiveDeleteChannelFuture

	DeleteInput(ctx workflow.Context, input *medialive.DeleteInputInput) (*medialive.DeleteInputOutput, error)
	DeleteInputAsync(ctx workflow.Context, input *medialive.DeleteInputInput) *MedialiveDeleteInputFuture

	DeleteInputSecurityGroup(ctx workflow.Context, input *medialive.DeleteInputSecurityGroupInput) (*medialive.DeleteInputSecurityGroupOutput, error)
	DeleteInputSecurityGroupAsync(ctx workflow.Context, input *medialive.DeleteInputSecurityGroupInput) *MedialiveDeleteInputSecurityGroupFuture

	DeleteMultiplex(ctx workflow.Context, input *medialive.DeleteMultiplexInput) (*medialive.DeleteMultiplexOutput, error)
	DeleteMultiplexAsync(ctx workflow.Context, input *medialive.DeleteMultiplexInput) *MedialiveDeleteMultiplexFuture

	DeleteMultiplexProgram(ctx workflow.Context, input *medialive.DeleteMultiplexProgramInput) (*medialive.DeleteMultiplexProgramOutput, error)
	DeleteMultiplexProgramAsync(ctx workflow.Context, input *medialive.DeleteMultiplexProgramInput) *MedialiveDeleteMultiplexProgramFuture

	DeleteReservation(ctx workflow.Context, input *medialive.DeleteReservationInput) (*medialive.DeleteReservationOutput, error)
	DeleteReservationAsync(ctx workflow.Context, input *medialive.DeleteReservationInput) *MedialiveDeleteReservationFuture

	DeleteSchedule(ctx workflow.Context, input *medialive.DeleteScheduleInput) (*medialive.DeleteScheduleOutput, error)
	DeleteScheduleAsync(ctx workflow.Context, input *medialive.DeleteScheduleInput) *MedialiveDeleteScheduleFuture

	DeleteTags(ctx workflow.Context, input *medialive.DeleteTagsInput) (*medialive.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *medialive.DeleteTagsInput) *MedialiveDeleteTagsFuture

	DescribeChannel(ctx workflow.Context, input *medialive.DescribeChannelInput) (*medialive.DescribeChannelOutput, error)
	DescribeChannelAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *MedialiveDescribeChannelFuture

	DescribeInput(ctx workflow.Context, input *medialive.DescribeInputInput) (*medialive.DescribeInputOutput, error)
	DescribeInputAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *MedialiveDescribeInputFuture

	DescribeInputDevice(ctx workflow.Context, input *medialive.DescribeInputDeviceInput) (*medialive.DescribeInputDeviceOutput, error)
	DescribeInputDeviceAsync(ctx workflow.Context, input *medialive.DescribeInputDeviceInput) *MedialiveDescribeInputDeviceFuture

	DescribeInputDeviceThumbnail(ctx workflow.Context, input *medialive.DescribeInputDeviceThumbnailInput) (*medialive.DescribeInputDeviceThumbnailOutput, error)
	DescribeInputDeviceThumbnailAsync(ctx workflow.Context, input *medialive.DescribeInputDeviceThumbnailInput) *MedialiveDescribeInputDeviceThumbnailFuture

	DescribeInputSecurityGroup(ctx workflow.Context, input *medialive.DescribeInputSecurityGroupInput) (*medialive.DescribeInputSecurityGroupOutput, error)
	DescribeInputSecurityGroupAsync(ctx workflow.Context, input *medialive.DescribeInputSecurityGroupInput) *MedialiveDescribeInputSecurityGroupFuture

	DescribeMultiplex(ctx workflow.Context, input *medialive.DescribeMultiplexInput) (*medialive.DescribeMultiplexOutput, error)
	DescribeMultiplexAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *MedialiveDescribeMultiplexFuture

	DescribeMultiplexProgram(ctx workflow.Context, input *medialive.DescribeMultiplexProgramInput) (*medialive.DescribeMultiplexProgramOutput, error)
	DescribeMultiplexProgramAsync(ctx workflow.Context, input *medialive.DescribeMultiplexProgramInput) *MedialiveDescribeMultiplexProgramFuture

	DescribeOffering(ctx workflow.Context, input *medialive.DescribeOfferingInput) (*medialive.DescribeOfferingOutput, error)
	DescribeOfferingAsync(ctx workflow.Context, input *medialive.DescribeOfferingInput) *MedialiveDescribeOfferingFuture

	DescribeReservation(ctx workflow.Context, input *medialive.DescribeReservationInput) (*medialive.DescribeReservationOutput, error)
	DescribeReservationAsync(ctx workflow.Context, input *medialive.DescribeReservationInput) *MedialiveDescribeReservationFuture

	DescribeSchedule(ctx workflow.Context, input *medialive.DescribeScheduleInput) (*medialive.DescribeScheduleOutput, error)
	DescribeScheduleAsync(ctx workflow.Context, input *medialive.DescribeScheduleInput) *MedialiveDescribeScheduleFuture

	ListChannels(ctx workflow.Context, input *medialive.ListChannelsInput) (*medialive.ListChannelsOutput, error)
	ListChannelsAsync(ctx workflow.Context, input *medialive.ListChannelsInput) *MedialiveListChannelsFuture

	ListInputDevices(ctx workflow.Context, input *medialive.ListInputDevicesInput) (*medialive.ListInputDevicesOutput, error)
	ListInputDevicesAsync(ctx workflow.Context, input *medialive.ListInputDevicesInput) *MedialiveListInputDevicesFuture

	ListInputSecurityGroups(ctx workflow.Context, input *medialive.ListInputSecurityGroupsInput) (*medialive.ListInputSecurityGroupsOutput, error)
	ListInputSecurityGroupsAsync(ctx workflow.Context, input *medialive.ListInputSecurityGroupsInput) *MedialiveListInputSecurityGroupsFuture

	ListInputs(ctx workflow.Context, input *medialive.ListInputsInput) (*medialive.ListInputsOutput, error)
	ListInputsAsync(ctx workflow.Context, input *medialive.ListInputsInput) *MedialiveListInputsFuture

	ListMultiplexPrograms(ctx workflow.Context, input *medialive.ListMultiplexProgramsInput) (*medialive.ListMultiplexProgramsOutput, error)
	ListMultiplexProgramsAsync(ctx workflow.Context, input *medialive.ListMultiplexProgramsInput) *MedialiveListMultiplexProgramsFuture

	ListMultiplexes(ctx workflow.Context, input *medialive.ListMultiplexesInput) (*medialive.ListMultiplexesOutput, error)
	ListMultiplexesAsync(ctx workflow.Context, input *medialive.ListMultiplexesInput) *MedialiveListMultiplexesFuture

	ListOfferings(ctx workflow.Context, input *medialive.ListOfferingsInput) (*medialive.ListOfferingsOutput, error)
	ListOfferingsAsync(ctx workflow.Context, input *medialive.ListOfferingsInput) *MedialiveListOfferingsFuture

	ListReservations(ctx workflow.Context, input *medialive.ListReservationsInput) (*medialive.ListReservationsOutput, error)
	ListReservationsAsync(ctx workflow.Context, input *medialive.ListReservationsInput) *MedialiveListReservationsFuture

	ListTagsForResource(ctx workflow.Context, input *medialive.ListTagsForResourceInput) (*medialive.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *medialive.ListTagsForResourceInput) *MedialiveListTagsForResourceFuture

	PurchaseOffering(ctx workflow.Context, input *medialive.PurchaseOfferingInput) (*medialive.PurchaseOfferingOutput, error)
	PurchaseOfferingAsync(ctx workflow.Context, input *medialive.PurchaseOfferingInput) *MedialivePurchaseOfferingFuture

	StartChannel(ctx workflow.Context, input *medialive.StartChannelInput) (*medialive.StartChannelOutput, error)
	StartChannelAsync(ctx workflow.Context, input *medialive.StartChannelInput) *MedialiveStartChannelFuture

	StartMultiplex(ctx workflow.Context, input *medialive.StartMultiplexInput) (*medialive.StartMultiplexOutput, error)
	StartMultiplexAsync(ctx workflow.Context, input *medialive.StartMultiplexInput) *MedialiveStartMultiplexFuture

	StopChannel(ctx workflow.Context, input *medialive.StopChannelInput) (*medialive.StopChannelOutput, error)
	StopChannelAsync(ctx workflow.Context, input *medialive.StopChannelInput) *MedialiveStopChannelFuture

	StopMultiplex(ctx workflow.Context, input *medialive.StopMultiplexInput) (*medialive.StopMultiplexOutput, error)
	StopMultiplexAsync(ctx workflow.Context, input *medialive.StopMultiplexInput) *MedialiveStopMultiplexFuture

	UpdateChannel(ctx workflow.Context, input *medialive.UpdateChannelInput) (*medialive.UpdateChannelOutput, error)
	UpdateChannelAsync(ctx workflow.Context, input *medialive.UpdateChannelInput) *MedialiveUpdateChannelFuture

	UpdateChannelClass(ctx workflow.Context, input *medialive.UpdateChannelClassInput) (*medialive.UpdateChannelClassOutput, error)
	UpdateChannelClassAsync(ctx workflow.Context, input *medialive.UpdateChannelClassInput) *MedialiveUpdateChannelClassFuture

	UpdateInput(ctx workflow.Context, input *medialive.UpdateInputInput) (*medialive.UpdateInputOutput, error)
	UpdateInputAsync(ctx workflow.Context, input *medialive.UpdateInputInput) *MedialiveUpdateInputFuture

	UpdateInputDevice(ctx workflow.Context, input *medialive.UpdateInputDeviceInput) (*medialive.UpdateInputDeviceOutput, error)
	UpdateInputDeviceAsync(ctx workflow.Context, input *medialive.UpdateInputDeviceInput) *MedialiveUpdateInputDeviceFuture

	UpdateInputSecurityGroup(ctx workflow.Context, input *medialive.UpdateInputSecurityGroupInput) (*medialive.UpdateInputSecurityGroupOutput, error)
	UpdateInputSecurityGroupAsync(ctx workflow.Context, input *medialive.UpdateInputSecurityGroupInput) *MedialiveUpdateInputSecurityGroupFuture

	UpdateMultiplex(ctx workflow.Context, input *medialive.UpdateMultiplexInput) (*medialive.UpdateMultiplexOutput, error)
	UpdateMultiplexAsync(ctx workflow.Context, input *medialive.UpdateMultiplexInput) *MedialiveUpdateMultiplexFuture

	UpdateMultiplexProgram(ctx workflow.Context, input *medialive.UpdateMultiplexProgramInput) (*medialive.UpdateMultiplexProgramOutput, error)
	UpdateMultiplexProgramAsync(ctx workflow.Context, input *medialive.UpdateMultiplexProgramInput) *MedialiveUpdateMultiplexProgramFuture

	UpdateReservation(ctx workflow.Context, input *medialive.UpdateReservationInput) (*medialive.UpdateReservationOutput, error)
	UpdateReservationAsync(ctx workflow.Context, input *medialive.UpdateReservationInput) *MedialiveUpdateReservationFuture

	WaitUntilChannelCreated(ctx workflow.Context, input *medialive.DescribeChannelInput) error
	WaitUntilChannelCreatedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) workflow.Future

	WaitUntilChannelDeleted(ctx workflow.Context, input *medialive.DescribeChannelInput) error
	WaitUntilChannelDeletedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) workflow.Future

	WaitUntilChannelRunning(ctx workflow.Context, input *medialive.DescribeChannelInput) error
	WaitUntilChannelRunningAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) workflow.Future

	WaitUntilChannelStopped(ctx workflow.Context, input *medialive.DescribeChannelInput) error
	WaitUntilChannelStoppedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) workflow.Future

	WaitUntilInputAttached(ctx workflow.Context, input *medialive.DescribeInputInput) error
	WaitUntilInputAttachedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) workflow.Future

	WaitUntilInputDeleted(ctx workflow.Context, input *medialive.DescribeInputInput) error
	WaitUntilInputDeletedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) workflow.Future

	WaitUntilInputDetached(ctx workflow.Context, input *medialive.DescribeInputInput) error
	WaitUntilInputDetachedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) workflow.Future

	WaitUntilMultiplexCreated(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error
	WaitUntilMultiplexCreatedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) workflow.Future

	WaitUntilMultiplexDeleted(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error
	WaitUntilMultiplexDeletedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) workflow.Future

	WaitUntilMultiplexRunning(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error
	WaitUntilMultiplexRunningAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) workflow.Future

	WaitUntilMultiplexStopped(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error
	WaitUntilMultiplexStoppedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) workflow.Future
}

type MediaLiveStub struct{}

func NewMediaLiveStub() MediaLiveClient {
	return &MediaLiveStub{}
}

type MedialiveBatchDeleteFuture struct {
	Future workflow.Future
}

func (r *MedialiveBatchDeleteFuture) Get(ctx workflow.Context) (*medialive.BatchDeleteOutput, error) {
	var output medialive.BatchDeleteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveBatchStartFuture struct {
	Future workflow.Future
}

func (r *MedialiveBatchStartFuture) Get(ctx workflow.Context) (*medialive.BatchStartOutput, error) {
	var output medialive.BatchStartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveBatchStopFuture struct {
	Future workflow.Future
}

func (r *MedialiveBatchStopFuture) Get(ctx workflow.Context) (*medialive.BatchStopOutput, error) {
	var output medialive.BatchStopOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveBatchUpdateScheduleFuture struct {
	Future workflow.Future
}

func (r *MedialiveBatchUpdateScheduleFuture) Get(ctx workflow.Context) (*medialive.BatchUpdateScheduleOutput, error) {
	var output medialive.BatchUpdateScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveCreateChannelFuture struct {
	Future workflow.Future
}

func (r *MedialiveCreateChannelFuture) Get(ctx workflow.Context) (*medialive.CreateChannelOutput, error) {
	var output medialive.CreateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveCreateInputFuture struct {
	Future workflow.Future
}

func (r *MedialiveCreateInputFuture) Get(ctx workflow.Context) (*medialive.CreateInputOutput, error) {
	var output medialive.CreateInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveCreateInputSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *MedialiveCreateInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.CreateInputSecurityGroupOutput, error) {
	var output medialive.CreateInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveCreateMultiplexFuture struct {
	Future workflow.Future
}

func (r *MedialiveCreateMultiplexFuture) Get(ctx workflow.Context) (*medialive.CreateMultiplexOutput, error) {
	var output medialive.CreateMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveCreateMultiplexProgramFuture struct {
	Future workflow.Future
}

func (r *MedialiveCreateMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.CreateMultiplexProgramOutput, error) {
	var output medialive.CreateMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveCreateTagsFuture struct {
	Future workflow.Future
}

func (r *MedialiveCreateTagsFuture) Get(ctx workflow.Context) (*medialive.CreateTagsOutput, error) {
	var output medialive.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDeleteChannelFuture struct {
	Future workflow.Future
}

func (r *MedialiveDeleteChannelFuture) Get(ctx workflow.Context) (*medialive.DeleteChannelOutput, error) {
	var output medialive.DeleteChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDeleteInputFuture struct {
	Future workflow.Future
}

func (r *MedialiveDeleteInputFuture) Get(ctx workflow.Context) (*medialive.DeleteInputOutput, error) {
	var output medialive.DeleteInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDeleteInputSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *MedialiveDeleteInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.DeleteInputSecurityGroupOutput, error) {
	var output medialive.DeleteInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDeleteMultiplexFuture struct {
	Future workflow.Future
}

func (r *MedialiveDeleteMultiplexFuture) Get(ctx workflow.Context) (*medialive.DeleteMultiplexOutput, error) {
	var output medialive.DeleteMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDeleteMultiplexProgramFuture struct {
	Future workflow.Future
}

func (r *MedialiveDeleteMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.DeleteMultiplexProgramOutput, error) {
	var output medialive.DeleteMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDeleteReservationFuture struct {
	Future workflow.Future
}

func (r *MedialiveDeleteReservationFuture) Get(ctx workflow.Context) (*medialive.DeleteReservationOutput, error) {
	var output medialive.DeleteReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDeleteScheduleFuture struct {
	Future workflow.Future
}

func (r *MedialiveDeleteScheduleFuture) Get(ctx workflow.Context) (*medialive.DeleteScheduleOutput, error) {
	var output medialive.DeleteScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDeleteTagsFuture struct {
	Future workflow.Future
}

func (r *MedialiveDeleteTagsFuture) Get(ctx workflow.Context) (*medialive.DeleteTagsOutput, error) {
	var output medialive.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDescribeChannelFuture struct {
	Future workflow.Future
}

func (r *MedialiveDescribeChannelFuture) Get(ctx workflow.Context) (*medialive.DescribeChannelOutput, error) {
	var output medialive.DescribeChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDescribeInputFuture struct {
	Future workflow.Future
}

func (r *MedialiveDescribeInputFuture) Get(ctx workflow.Context) (*medialive.DescribeInputOutput, error) {
	var output medialive.DescribeInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDescribeInputDeviceFuture struct {
	Future workflow.Future
}

func (r *MedialiveDescribeInputDeviceFuture) Get(ctx workflow.Context) (*medialive.DescribeInputDeviceOutput, error) {
	var output medialive.DescribeInputDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDescribeInputDeviceThumbnailFuture struct {
	Future workflow.Future
}

func (r *MedialiveDescribeInputDeviceThumbnailFuture) Get(ctx workflow.Context) (*medialive.DescribeInputDeviceThumbnailOutput, error) {
	var output medialive.DescribeInputDeviceThumbnailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDescribeInputSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *MedialiveDescribeInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.DescribeInputSecurityGroupOutput, error) {
	var output medialive.DescribeInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDescribeMultiplexFuture struct {
	Future workflow.Future
}

func (r *MedialiveDescribeMultiplexFuture) Get(ctx workflow.Context) (*medialive.DescribeMultiplexOutput, error) {
	var output medialive.DescribeMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDescribeMultiplexProgramFuture struct {
	Future workflow.Future
}

func (r *MedialiveDescribeMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.DescribeMultiplexProgramOutput, error) {
	var output medialive.DescribeMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDescribeOfferingFuture struct {
	Future workflow.Future
}

func (r *MedialiveDescribeOfferingFuture) Get(ctx workflow.Context) (*medialive.DescribeOfferingOutput, error) {
	var output medialive.DescribeOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDescribeReservationFuture struct {
	Future workflow.Future
}

func (r *MedialiveDescribeReservationFuture) Get(ctx workflow.Context) (*medialive.DescribeReservationOutput, error) {
	var output medialive.DescribeReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveDescribeScheduleFuture struct {
	Future workflow.Future
}

func (r *MedialiveDescribeScheduleFuture) Get(ctx workflow.Context) (*medialive.DescribeScheduleOutput, error) {
	var output medialive.DescribeScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveListChannelsFuture struct {
	Future workflow.Future
}

func (r *MedialiveListChannelsFuture) Get(ctx workflow.Context) (*medialive.ListChannelsOutput, error) {
	var output medialive.ListChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveListInputDevicesFuture struct {
	Future workflow.Future
}

func (r *MedialiveListInputDevicesFuture) Get(ctx workflow.Context) (*medialive.ListInputDevicesOutput, error) {
	var output medialive.ListInputDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveListInputSecurityGroupsFuture struct {
	Future workflow.Future
}

func (r *MedialiveListInputSecurityGroupsFuture) Get(ctx workflow.Context) (*medialive.ListInputSecurityGroupsOutput, error) {
	var output medialive.ListInputSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveListInputsFuture struct {
	Future workflow.Future
}

func (r *MedialiveListInputsFuture) Get(ctx workflow.Context) (*medialive.ListInputsOutput, error) {
	var output medialive.ListInputsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveListMultiplexProgramsFuture struct {
	Future workflow.Future
}

func (r *MedialiveListMultiplexProgramsFuture) Get(ctx workflow.Context) (*medialive.ListMultiplexProgramsOutput, error) {
	var output medialive.ListMultiplexProgramsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveListMultiplexesFuture struct {
	Future workflow.Future
}

func (r *MedialiveListMultiplexesFuture) Get(ctx workflow.Context) (*medialive.ListMultiplexesOutput, error) {
	var output medialive.ListMultiplexesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveListOfferingsFuture struct {
	Future workflow.Future
}

func (r *MedialiveListOfferingsFuture) Get(ctx workflow.Context) (*medialive.ListOfferingsOutput, error) {
	var output medialive.ListOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveListReservationsFuture struct {
	Future workflow.Future
}

func (r *MedialiveListReservationsFuture) Get(ctx workflow.Context) (*medialive.ListReservationsOutput, error) {
	var output medialive.ListReservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *MedialiveListTagsForResourceFuture) Get(ctx workflow.Context) (*medialive.ListTagsForResourceOutput, error) {
	var output medialive.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialivePurchaseOfferingFuture struct {
	Future workflow.Future
}

func (r *MedialivePurchaseOfferingFuture) Get(ctx workflow.Context) (*medialive.PurchaseOfferingOutput, error) {
	var output medialive.PurchaseOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveStartChannelFuture struct {
	Future workflow.Future
}

func (r *MedialiveStartChannelFuture) Get(ctx workflow.Context) (*medialive.StartChannelOutput, error) {
	var output medialive.StartChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveStartMultiplexFuture struct {
	Future workflow.Future
}

func (r *MedialiveStartMultiplexFuture) Get(ctx workflow.Context) (*medialive.StartMultiplexOutput, error) {
	var output medialive.StartMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveStopChannelFuture struct {
	Future workflow.Future
}

func (r *MedialiveStopChannelFuture) Get(ctx workflow.Context) (*medialive.StopChannelOutput, error) {
	var output medialive.StopChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveStopMultiplexFuture struct {
	Future workflow.Future
}

func (r *MedialiveStopMultiplexFuture) Get(ctx workflow.Context) (*medialive.StopMultiplexOutput, error) {
	var output medialive.StopMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveUpdateChannelFuture struct {
	Future workflow.Future
}

func (r *MedialiveUpdateChannelFuture) Get(ctx workflow.Context) (*medialive.UpdateChannelOutput, error) {
	var output medialive.UpdateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveUpdateChannelClassFuture struct {
	Future workflow.Future
}

func (r *MedialiveUpdateChannelClassFuture) Get(ctx workflow.Context) (*medialive.UpdateChannelClassOutput, error) {
	var output medialive.UpdateChannelClassOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveUpdateInputFuture struct {
	Future workflow.Future
}

func (r *MedialiveUpdateInputFuture) Get(ctx workflow.Context) (*medialive.UpdateInputOutput, error) {
	var output medialive.UpdateInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveUpdateInputDeviceFuture struct {
	Future workflow.Future
}

func (r *MedialiveUpdateInputDeviceFuture) Get(ctx workflow.Context) (*medialive.UpdateInputDeviceOutput, error) {
	var output medialive.UpdateInputDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveUpdateInputSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *MedialiveUpdateInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.UpdateInputSecurityGroupOutput, error) {
	var output medialive.UpdateInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveUpdateMultiplexFuture struct {
	Future workflow.Future
}

func (r *MedialiveUpdateMultiplexFuture) Get(ctx workflow.Context) (*medialive.UpdateMultiplexOutput, error) {
	var output medialive.UpdateMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveUpdateMultiplexProgramFuture struct {
	Future workflow.Future
}

func (r *MedialiveUpdateMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.UpdateMultiplexProgramOutput, error) {
	var output medialive.UpdateMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MedialiveUpdateReservationFuture struct {
	Future workflow.Future
}

func (r *MedialiveUpdateReservationFuture) Get(ctx workflow.Context) (*medialive.UpdateReservationOutput, error) {
	var output medialive.UpdateReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) BatchDelete(ctx workflow.Context, input *medialive.BatchDeleteInput) (*medialive.BatchDeleteOutput, error) {
	var output medialive.BatchDeleteOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.BatchDelete", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) BatchDeleteAsync(ctx workflow.Context, input *medialive.BatchDeleteInput) *MedialiveBatchDeleteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.BatchDelete", input)
	return &MedialiveBatchDeleteFuture{Future: future}
}

func (a *MediaLiveStub) BatchStart(ctx workflow.Context, input *medialive.BatchStartInput) (*medialive.BatchStartOutput, error) {
	var output medialive.BatchStartOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.BatchStart", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) BatchStartAsync(ctx workflow.Context, input *medialive.BatchStartInput) *MedialiveBatchStartFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.BatchStart", input)
	return &MedialiveBatchStartFuture{Future: future}
}

func (a *MediaLiveStub) BatchStop(ctx workflow.Context, input *medialive.BatchStopInput) (*medialive.BatchStopOutput, error) {
	var output medialive.BatchStopOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.BatchStop", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) BatchStopAsync(ctx workflow.Context, input *medialive.BatchStopInput) *MedialiveBatchStopFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.BatchStop", input)
	return &MedialiveBatchStopFuture{Future: future}
}

func (a *MediaLiveStub) BatchUpdateSchedule(ctx workflow.Context, input *medialive.BatchUpdateScheduleInput) (*medialive.BatchUpdateScheduleOutput, error) {
	var output medialive.BatchUpdateScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.BatchUpdateSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) BatchUpdateScheduleAsync(ctx workflow.Context, input *medialive.BatchUpdateScheduleInput) *MedialiveBatchUpdateScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.BatchUpdateSchedule", input)
	return &MedialiveBatchUpdateScheduleFuture{Future: future}
}

func (a *MediaLiveStub) CreateChannel(ctx workflow.Context, input *medialive.CreateChannelInput) (*medialive.CreateChannelOutput, error) {
	var output medialive.CreateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.CreateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) CreateChannelAsync(ctx workflow.Context, input *medialive.CreateChannelInput) *MedialiveCreateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.CreateChannel", input)
	return &MedialiveCreateChannelFuture{Future: future}
}

func (a *MediaLiveStub) CreateInput(ctx workflow.Context, input *medialive.CreateInputInput) (*medialive.CreateInputOutput, error) {
	var output medialive.CreateInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.CreateInput", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) CreateInputAsync(ctx workflow.Context, input *medialive.CreateInputInput) *MedialiveCreateInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.CreateInput", input)
	return &MedialiveCreateInputFuture{Future: future}
}

func (a *MediaLiveStub) CreateInputSecurityGroup(ctx workflow.Context, input *medialive.CreateInputSecurityGroupInput) (*medialive.CreateInputSecurityGroupOutput, error) {
	var output medialive.CreateInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.CreateInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) CreateInputSecurityGroupAsync(ctx workflow.Context, input *medialive.CreateInputSecurityGroupInput) *MedialiveCreateInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.CreateInputSecurityGroup", input)
	return &MedialiveCreateInputSecurityGroupFuture{Future: future}
}

func (a *MediaLiveStub) CreateMultiplex(ctx workflow.Context, input *medialive.CreateMultiplexInput) (*medialive.CreateMultiplexOutput, error) {
	var output medialive.CreateMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.CreateMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) CreateMultiplexAsync(ctx workflow.Context, input *medialive.CreateMultiplexInput) *MedialiveCreateMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.CreateMultiplex", input)
	return &MedialiveCreateMultiplexFuture{Future: future}
}

func (a *MediaLiveStub) CreateMultiplexProgram(ctx workflow.Context, input *medialive.CreateMultiplexProgramInput) (*medialive.CreateMultiplexProgramOutput, error) {
	var output medialive.CreateMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.CreateMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) CreateMultiplexProgramAsync(ctx workflow.Context, input *medialive.CreateMultiplexProgramInput) *MedialiveCreateMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.CreateMultiplexProgram", input)
	return &MedialiveCreateMultiplexProgramFuture{Future: future}
}

func (a *MediaLiveStub) CreateTags(ctx workflow.Context, input *medialive.CreateTagsInput) (*medialive.CreateTagsOutput, error) {
	var output medialive.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) CreateTagsAsync(ctx workflow.Context, input *medialive.CreateTagsInput) *MedialiveCreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.CreateTags", input)
	return &MedialiveCreateTagsFuture{Future: future}
}

func (a *MediaLiveStub) DeleteChannel(ctx workflow.Context, input *medialive.DeleteChannelInput) (*medialive.DeleteChannelOutput, error) {
	var output medialive.DeleteChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteChannelAsync(ctx workflow.Context, input *medialive.DeleteChannelInput) *MedialiveDeleteChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteChannel", input)
	return &MedialiveDeleteChannelFuture{Future: future}
}

func (a *MediaLiveStub) DeleteInput(ctx workflow.Context, input *medialive.DeleteInputInput) (*medialive.DeleteInputOutput, error) {
	var output medialive.DeleteInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteInput", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteInputAsync(ctx workflow.Context, input *medialive.DeleteInputInput) *MedialiveDeleteInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteInput", input)
	return &MedialiveDeleteInputFuture{Future: future}
}

func (a *MediaLiveStub) DeleteInputSecurityGroup(ctx workflow.Context, input *medialive.DeleteInputSecurityGroupInput) (*medialive.DeleteInputSecurityGroupOutput, error) {
	var output medialive.DeleteInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteInputSecurityGroupAsync(ctx workflow.Context, input *medialive.DeleteInputSecurityGroupInput) *MedialiveDeleteInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteInputSecurityGroup", input)
	return &MedialiveDeleteInputSecurityGroupFuture{Future: future}
}

func (a *MediaLiveStub) DeleteMultiplex(ctx workflow.Context, input *medialive.DeleteMultiplexInput) (*medialive.DeleteMultiplexOutput, error) {
	var output medialive.DeleteMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteMultiplexAsync(ctx workflow.Context, input *medialive.DeleteMultiplexInput) *MedialiveDeleteMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteMultiplex", input)
	return &MedialiveDeleteMultiplexFuture{Future: future}
}

func (a *MediaLiveStub) DeleteMultiplexProgram(ctx workflow.Context, input *medialive.DeleteMultiplexProgramInput) (*medialive.DeleteMultiplexProgramOutput, error) {
	var output medialive.DeleteMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteMultiplexProgramAsync(ctx workflow.Context, input *medialive.DeleteMultiplexProgramInput) *MedialiveDeleteMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteMultiplexProgram", input)
	return &MedialiveDeleteMultiplexProgramFuture{Future: future}
}

func (a *MediaLiveStub) DeleteReservation(ctx workflow.Context, input *medialive.DeleteReservationInput) (*medialive.DeleteReservationOutput, error) {
	var output medialive.DeleteReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteReservationAsync(ctx workflow.Context, input *medialive.DeleteReservationInput) *MedialiveDeleteReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteReservation", input)
	return &MedialiveDeleteReservationFuture{Future: future}
}

func (a *MediaLiveStub) DeleteSchedule(ctx workflow.Context, input *medialive.DeleteScheduleInput) (*medialive.DeleteScheduleOutput, error) {
	var output medialive.DeleteScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteScheduleAsync(ctx workflow.Context, input *medialive.DeleteScheduleInput) *MedialiveDeleteScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteSchedule", input)
	return &MedialiveDeleteScheduleFuture{Future: future}
}

func (a *MediaLiveStub) DeleteTags(ctx workflow.Context, input *medialive.DeleteTagsInput) (*medialive.DeleteTagsOutput, error) {
	var output medialive.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DeleteTagsAsync(ctx workflow.Context, input *medialive.DeleteTagsInput) *MedialiveDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DeleteTags", input)
	return &MedialiveDeleteTagsFuture{Future: future}
}

func (a *MediaLiveStub) DescribeChannel(ctx workflow.Context, input *medialive.DescribeChannelInput) (*medialive.DescribeChannelOutput, error) {
	var output medialive.DescribeChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeChannelAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *MedialiveDescribeChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeChannel", input)
	return &MedialiveDescribeChannelFuture{Future: future}
}

func (a *MediaLiveStub) DescribeInput(ctx workflow.Context, input *medialive.DescribeInputInput) (*medialive.DescribeInputOutput, error) {
	var output medialive.DescribeInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInput", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeInputAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *MedialiveDescribeInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInput", input)
	return &MedialiveDescribeInputFuture{Future: future}
}

func (a *MediaLiveStub) DescribeInputDevice(ctx workflow.Context, input *medialive.DescribeInputDeviceInput) (*medialive.DescribeInputDeviceOutput, error) {
	var output medialive.DescribeInputDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInputDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeInputDeviceAsync(ctx workflow.Context, input *medialive.DescribeInputDeviceInput) *MedialiveDescribeInputDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInputDevice", input)
	return &MedialiveDescribeInputDeviceFuture{Future: future}
}

func (a *MediaLiveStub) DescribeInputDeviceThumbnail(ctx workflow.Context, input *medialive.DescribeInputDeviceThumbnailInput) (*medialive.DescribeInputDeviceThumbnailOutput, error) {
	var output medialive.DescribeInputDeviceThumbnailOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInputDeviceThumbnail", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeInputDeviceThumbnailAsync(ctx workflow.Context, input *medialive.DescribeInputDeviceThumbnailInput) *MedialiveDescribeInputDeviceThumbnailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInputDeviceThumbnail", input)
	return &MedialiveDescribeInputDeviceThumbnailFuture{Future: future}
}

func (a *MediaLiveStub) DescribeInputSecurityGroup(ctx workflow.Context, input *medialive.DescribeInputSecurityGroupInput) (*medialive.DescribeInputSecurityGroupOutput, error) {
	var output medialive.DescribeInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeInputSecurityGroupAsync(ctx workflow.Context, input *medialive.DescribeInputSecurityGroupInput) *MedialiveDescribeInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeInputSecurityGroup", input)
	return &MedialiveDescribeInputSecurityGroupFuture{Future: future}
}

func (a *MediaLiveStub) DescribeMultiplex(ctx workflow.Context, input *medialive.DescribeMultiplexInput) (*medialive.DescribeMultiplexOutput, error) {
	var output medialive.DescribeMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeMultiplexAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *MedialiveDescribeMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeMultiplex", input)
	return &MedialiveDescribeMultiplexFuture{Future: future}
}

func (a *MediaLiveStub) DescribeMultiplexProgram(ctx workflow.Context, input *medialive.DescribeMultiplexProgramInput) (*medialive.DescribeMultiplexProgramOutput, error) {
	var output medialive.DescribeMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeMultiplexProgramAsync(ctx workflow.Context, input *medialive.DescribeMultiplexProgramInput) *MedialiveDescribeMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeMultiplexProgram", input)
	return &MedialiveDescribeMultiplexProgramFuture{Future: future}
}

func (a *MediaLiveStub) DescribeOffering(ctx workflow.Context, input *medialive.DescribeOfferingInput) (*medialive.DescribeOfferingOutput, error) {
	var output medialive.DescribeOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeOfferingAsync(ctx workflow.Context, input *medialive.DescribeOfferingInput) *MedialiveDescribeOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeOffering", input)
	return &MedialiveDescribeOfferingFuture{Future: future}
}

func (a *MediaLiveStub) DescribeReservation(ctx workflow.Context, input *medialive.DescribeReservationInput) (*medialive.DescribeReservationOutput, error) {
	var output medialive.DescribeReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeReservationAsync(ctx workflow.Context, input *medialive.DescribeReservationInput) *MedialiveDescribeReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeReservation", input)
	return &MedialiveDescribeReservationFuture{Future: future}
}

func (a *MediaLiveStub) DescribeSchedule(ctx workflow.Context, input *medialive.DescribeScheduleInput) (*medialive.DescribeScheduleOutput, error) {
	var output medialive.DescribeScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) DescribeScheduleAsync(ctx workflow.Context, input *medialive.DescribeScheduleInput) *MedialiveDescribeScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.DescribeSchedule", input)
	return &MedialiveDescribeScheduleFuture{Future: future}
}

func (a *MediaLiveStub) ListChannels(ctx workflow.Context, input *medialive.ListChannelsInput) (*medialive.ListChannelsOutput, error) {
	var output medialive.ListChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListChannelsAsync(ctx workflow.Context, input *medialive.ListChannelsInput) *MedialiveListChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListChannels", input)
	return &MedialiveListChannelsFuture{Future: future}
}

func (a *MediaLiveStub) ListInputDevices(ctx workflow.Context, input *medialive.ListInputDevicesInput) (*medialive.ListInputDevicesOutput, error) {
	var output medialive.ListInputDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListInputDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListInputDevicesAsync(ctx workflow.Context, input *medialive.ListInputDevicesInput) *MedialiveListInputDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListInputDevices", input)
	return &MedialiveListInputDevicesFuture{Future: future}
}

func (a *MediaLiveStub) ListInputSecurityGroups(ctx workflow.Context, input *medialive.ListInputSecurityGroupsInput) (*medialive.ListInputSecurityGroupsOutput, error) {
	var output medialive.ListInputSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListInputSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListInputSecurityGroupsAsync(ctx workflow.Context, input *medialive.ListInputSecurityGroupsInput) *MedialiveListInputSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListInputSecurityGroups", input)
	return &MedialiveListInputSecurityGroupsFuture{Future: future}
}

func (a *MediaLiveStub) ListInputs(ctx workflow.Context, input *medialive.ListInputsInput) (*medialive.ListInputsOutput, error) {
	var output medialive.ListInputsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListInputs", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListInputsAsync(ctx workflow.Context, input *medialive.ListInputsInput) *MedialiveListInputsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListInputs", input)
	return &MedialiveListInputsFuture{Future: future}
}

func (a *MediaLiveStub) ListMultiplexPrograms(ctx workflow.Context, input *medialive.ListMultiplexProgramsInput) (*medialive.ListMultiplexProgramsOutput, error) {
	var output medialive.ListMultiplexProgramsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListMultiplexPrograms", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListMultiplexProgramsAsync(ctx workflow.Context, input *medialive.ListMultiplexProgramsInput) *MedialiveListMultiplexProgramsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListMultiplexPrograms", input)
	return &MedialiveListMultiplexProgramsFuture{Future: future}
}

func (a *MediaLiveStub) ListMultiplexes(ctx workflow.Context, input *medialive.ListMultiplexesInput) (*medialive.ListMultiplexesOutput, error) {
	var output medialive.ListMultiplexesOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListMultiplexes", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListMultiplexesAsync(ctx workflow.Context, input *medialive.ListMultiplexesInput) *MedialiveListMultiplexesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListMultiplexes", input)
	return &MedialiveListMultiplexesFuture{Future: future}
}

func (a *MediaLiveStub) ListOfferings(ctx workflow.Context, input *medialive.ListOfferingsInput) (*medialive.ListOfferingsOutput, error) {
	var output medialive.ListOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListOfferingsAsync(ctx workflow.Context, input *medialive.ListOfferingsInput) *MedialiveListOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListOfferings", input)
	return &MedialiveListOfferingsFuture{Future: future}
}

func (a *MediaLiveStub) ListReservations(ctx workflow.Context, input *medialive.ListReservationsInput) (*medialive.ListReservationsOutput, error) {
	var output medialive.ListReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListReservationsAsync(ctx workflow.Context, input *medialive.ListReservationsInput) *MedialiveListReservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListReservations", input)
	return &MedialiveListReservationsFuture{Future: future}
}

func (a *MediaLiveStub) ListTagsForResource(ctx workflow.Context, input *medialive.ListTagsForResourceInput) (*medialive.ListTagsForResourceOutput, error) {
	var output medialive.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) ListTagsForResourceAsync(ctx workflow.Context, input *medialive.ListTagsForResourceInput) *MedialiveListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.ListTagsForResource", input)
	return &MedialiveListTagsForResourceFuture{Future: future}
}

func (a *MediaLiveStub) PurchaseOffering(ctx workflow.Context, input *medialive.PurchaseOfferingInput) (*medialive.PurchaseOfferingOutput, error) {
	var output medialive.PurchaseOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.PurchaseOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) PurchaseOfferingAsync(ctx workflow.Context, input *medialive.PurchaseOfferingInput) *MedialivePurchaseOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.PurchaseOffering", input)
	return &MedialivePurchaseOfferingFuture{Future: future}
}

func (a *MediaLiveStub) StartChannel(ctx workflow.Context, input *medialive.StartChannelInput) (*medialive.StartChannelOutput, error) {
	var output medialive.StartChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.StartChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) StartChannelAsync(ctx workflow.Context, input *medialive.StartChannelInput) *MedialiveStartChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.StartChannel", input)
	return &MedialiveStartChannelFuture{Future: future}
}

func (a *MediaLiveStub) StartMultiplex(ctx workflow.Context, input *medialive.StartMultiplexInput) (*medialive.StartMultiplexOutput, error) {
	var output medialive.StartMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.StartMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) StartMultiplexAsync(ctx workflow.Context, input *medialive.StartMultiplexInput) *MedialiveStartMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.StartMultiplex", input)
	return &MedialiveStartMultiplexFuture{Future: future}
}

func (a *MediaLiveStub) StopChannel(ctx workflow.Context, input *medialive.StopChannelInput) (*medialive.StopChannelOutput, error) {
	var output medialive.StopChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.StopChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) StopChannelAsync(ctx workflow.Context, input *medialive.StopChannelInput) *MedialiveStopChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.StopChannel", input)
	return &MedialiveStopChannelFuture{Future: future}
}

func (a *MediaLiveStub) StopMultiplex(ctx workflow.Context, input *medialive.StopMultiplexInput) (*medialive.StopMultiplexOutput, error) {
	var output medialive.StopMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.StopMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) StopMultiplexAsync(ctx workflow.Context, input *medialive.StopMultiplexInput) *MedialiveStopMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.StopMultiplex", input)
	return &MedialiveStopMultiplexFuture{Future: future}
}

func (a *MediaLiveStub) UpdateChannel(ctx workflow.Context, input *medialive.UpdateChannelInput) (*medialive.UpdateChannelOutput, error) {
	var output medialive.UpdateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateChannelAsync(ctx workflow.Context, input *medialive.UpdateChannelInput) *MedialiveUpdateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateChannel", input)
	return &MedialiveUpdateChannelFuture{Future: future}
}

func (a *MediaLiveStub) UpdateChannelClass(ctx workflow.Context, input *medialive.UpdateChannelClassInput) (*medialive.UpdateChannelClassOutput, error) {
	var output medialive.UpdateChannelClassOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateChannelClass", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateChannelClassAsync(ctx workflow.Context, input *medialive.UpdateChannelClassInput) *MedialiveUpdateChannelClassFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateChannelClass", input)
	return &MedialiveUpdateChannelClassFuture{Future: future}
}

func (a *MediaLiveStub) UpdateInput(ctx workflow.Context, input *medialive.UpdateInputInput) (*medialive.UpdateInputOutput, error) {
	var output medialive.UpdateInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateInput", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateInputAsync(ctx workflow.Context, input *medialive.UpdateInputInput) *MedialiveUpdateInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateInput", input)
	return &MedialiveUpdateInputFuture{Future: future}
}

func (a *MediaLiveStub) UpdateInputDevice(ctx workflow.Context, input *medialive.UpdateInputDeviceInput) (*medialive.UpdateInputDeviceOutput, error) {
	var output medialive.UpdateInputDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateInputDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateInputDeviceAsync(ctx workflow.Context, input *medialive.UpdateInputDeviceInput) *MedialiveUpdateInputDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateInputDevice", input)
	return &MedialiveUpdateInputDeviceFuture{Future: future}
}

func (a *MediaLiveStub) UpdateInputSecurityGroup(ctx workflow.Context, input *medialive.UpdateInputSecurityGroupInput) (*medialive.UpdateInputSecurityGroupOutput, error) {
	var output medialive.UpdateInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateInputSecurityGroupAsync(ctx workflow.Context, input *medialive.UpdateInputSecurityGroupInput) *MedialiveUpdateInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateInputSecurityGroup", input)
	return &MedialiveUpdateInputSecurityGroupFuture{Future: future}
}

func (a *MediaLiveStub) UpdateMultiplex(ctx workflow.Context, input *medialive.UpdateMultiplexInput) (*medialive.UpdateMultiplexOutput, error) {
	var output medialive.UpdateMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateMultiplexAsync(ctx workflow.Context, input *medialive.UpdateMultiplexInput) *MedialiveUpdateMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateMultiplex", input)
	return &MedialiveUpdateMultiplexFuture{Future: future}
}

func (a *MediaLiveStub) UpdateMultiplexProgram(ctx workflow.Context, input *medialive.UpdateMultiplexProgramInput) (*medialive.UpdateMultiplexProgramOutput, error) {
	var output medialive.UpdateMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateMultiplexProgramAsync(ctx workflow.Context, input *medialive.UpdateMultiplexProgramInput) *MedialiveUpdateMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateMultiplexProgram", input)
	return &MedialiveUpdateMultiplexProgramFuture{Future: future}
}

func (a *MediaLiveStub) UpdateReservation(ctx workflow.Context, input *medialive.UpdateReservationInput) (*medialive.UpdateReservationOutput, error) {
	var output medialive.UpdateReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaLiveStub) UpdateReservationAsync(ctx workflow.Context, input *medialive.UpdateReservationInput) *MedialiveUpdateReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.medialive.UpdateReservation", input)
	return &MedialiveUpdateReservationFuture{Future: future}
}

func (a *MediaLiveStub) WaitUntilChannelCreated(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelCreated", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilChannelCreatedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelCreated", input)
}

func (a *MediaLiveStub) WaitUntilChannelDeleted(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelDeleted", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilChannelDeletedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelDeleted", input)
}

func (a *MediaLiveStub) WaitUntilChannelRunning(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelRunning", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilChannelRunningAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelRunning", input)
}

func (a *MediaLiveStub) WaitUntilChannelStopped(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelStopped", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilChannelStoppedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilChannelStopped", input)
}

func (a *MediaLiveStub) WaitUntilInputAttached(ctx workflow.Context, input *medialive.DescribeInputInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilInputAttached", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilInputAttachedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilInputAttached", input)
}

func (a *MediaLiveStub) WaitUntilInputDeleted(ctx workflow.Context, input *medialive.DescribeInputInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilInputDeleted", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilInputDeletedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilInputDeleted", input)
}

func (a *MediaLiveStub) WaitUntilInputDetached(ctx workflow.Context, input *medialive.DescribeInputInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilInputDetached", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilInputDetachedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilInputDetached", input)
}

func (a *MediaLiveStub) WaitUntilMultiplexCreated(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexCreated", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilMultiplexCreatedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexCreated", input)
}

func (a *MediaLiveStub) WaitUntilMultiplexDeleted(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexDeleted", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilMultiplexDeletedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexDeleted", input)
}

func (a *MediaLiveStub) WaitUntilMultiplexRunning(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexRunning", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilMultiplexRunningAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexRunning", input)
}

func (a *MediaLiveStub) WaitUntilMultiplexStopped(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexStopped", input).Get(ctx, nil)
}

func (a *MediaLiveStub) WaitUntilMultiplexStoppedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.medialive.WaitUntilMultiplexStopped", input)
}
