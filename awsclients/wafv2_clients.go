// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/wafv2"
	"go.temporal.io/sdk/workflow"
)

type WAFV2Client interface {
	AssociateWebACL(ctx workflow.Context, input *wafv2.AssociateWebACLInput) (*wafv2.AssociateWebACLOutput, error)
	AssociateWebACLAsync(ctx workflow.Context, input *wafv2.AssociateWebACLInput) *Wafv2AssociateWebACLFuture

	CheckCapacity(ctx workflow.Context, input *wafv2.CheckCapacityInput) (*wafv2.CheckCapacityOutput, error)
	CheckCapacityAsync(ctx workflow.Context, input *wafv2.CheckCapacityInput) *Wafv2CheckCapacityFuture

	CreateIPSet(ctx workflow.Context, input *wafv2.CreateIPSetInput) (*wafv2.CreateIPSetOutput, error)
	CreateIPSetAsync(ctx workflow.Context, input *wafv2.CreateIPSetInput) *Wafv2CreateIPSetFuture

	CreateRegexPatternSet(ctx workflow.Context, input *wafv2.CreateRegexPatternSetInput) (*wafv2.CreateRegexPatternSetOutput, error)
	CreateRegexPatternSetAsync(ctx workflow.Context, input *wafv2.CreateRegexPatternSetInput) *Wafv2CreateRegexPatternSetFuture

	CreateRuleGroup(ctx workflow.Context, input *wafv2.CreateRuleGroupInput) (*wafv2.CreateRuleGroupOutput, error)
	CreateRuleGroupAsync(ctx workflow.Context, input *wafv2.CreateRuleGroupInput) *Wafv2CreateRuleGroupFuture

	CreateWebACL(ctx workflow.Context, input *wafv2.CreateWebACLInput) (*wafv2.CreateWebACLOutput, error)
	CreateWebACLAsync(ctx workflow.Context, input *wafv2.CreateWebACLInput) *Wafv2CreateWebACLFuture

	DeleteFirewallManagerRuleGroups(ctx workflow.Context, input *wafv2.DeleteFirewallManagerRuleGroupsInput) (*wafv2.DeleteFirewallManagerRuleGroupsOutput, error)
	DeleteFirewallManagerRuleGroupsAsync(ctx workflow.Context, input *wafv2.DeleteFirewallManagerRuleGroupsInput) *Wafv2DeleteFirewallManagerRuleGroupsFuture

	DeleteIPSet(ctx workflow.Context, input *wafv2.DeleteIPSetInput) (*wafv2.DeleteIPSetOutput, error)
	DeleteIPSetAsync(ctx workflow.Context, input *wafv2.DeleteIPSetInput) *Wafv2DeleteIPSetFuture

	DeleteLoggingConfiguration(ctx workflow.Context, input *wafv2.DeleteLoggingConfigurationInput) (*wafv2.DeleteLoggingConfigurationOutput, error)
	DeleteLoggingConfigurationAsync(ctx workflow.Context, input *wafv2.DeleteLoggingConfigurationInput) *Wafv2DeleteLoggingConfigurationFuture

	DeletePermissionPolicy(ctx workflow.Context, input *wafv2.DeletePermissionPolicyInput) (*wafv2.DeletePermissionPolicyOutput, error)
	DeletePermissionPolicyAsync(ctx workflow.Context, input *wafv2.DeletePermissionPolicyInput) *Wafv2DeletePermissionPolicyFuture

	DeleteRegexPatternSet(ctx workflow.Context, input *wafv2.DeleteRegexPatternSetInput) (*wafv2.DeleteRegexPatternSetOutput, error)
	DeleteRegexPatternSetAsync(ctx workflow.Context, input *wafv2.DeleteRegexPatternSetInput) *Wafv2DeleteRegexPatternSetFuture

	DeleteRuleGroup(ctx workflow.Context, input *wafv2.DeleteRuleGroupInput) (*wafv2.DeleteRuleGroupOutput, error)
	DeleteRuleGroupAsync(ctx workflow.Context, input *wafv2.DeleteRuleGroupInput) *Wafv2DeleteRuleGroupFuture

	DeleteWebACL(ctx workflow.Context, input *wafv2.DeleteWebACLInput) (*wafv2.DeleteWebACLOutput, error)
	DeleteWebACLAsync(ctx workflow.Context, input *wafv2.DeleteWebACLInput) *Wafv2DeleteWebACLFuture

	DescribeManagedRuleGroup(ctx workflow.Context, input *wafv2.DescribeManagedRuleGroupInput) (*wafv2.DescribeManagedRuleGroupOutput, error)
	DescribeManagedRuleGroupAsync(ctx workflow.Context, input *wafv2.DescribeManagedRuleGroupInput) *Wafv2DescribeManagedRuleGroupFuture

	DisassociateWebACL(ctx workflow.Context, input *wafv2.DisassociateWebACLInput) (*wafv2.DisassociateWebACLOutput, error)
	DisassociateWebACLAsync(ctx workflow.Context, input *wafv2.DisassociateWebACLInput) *Wafv2DisassociateWebACLFuture

	GetIPSet(ctx workflow.Context, input *wafv2.GetIPSetInput) (*wafv2.GetIPSetOutput, error)
	GetIPSetAsync(ctx workflow.Context, input *wafv2.GetIPSetInput) *Wafv2GetIPSetFuture

	GetLoggingConfiguration(ctx workflow.Context, input *wafv2.GetLoggingConfigurationInput) (*wafv2.GetLoggingConfigurationOutput, error)
	GetLoggingConfigurationAsync(ctx workflow.Context, input *wafv2.GetLoggingConfigurationInput) *Wafv2GetLoggingConfigurationFuture

	GetPermissionPolicy(ctx workflow.Context, input *wafv2.GetPermissionPolicyInput) (*wafv2.GetPermissionPolicyOutput, error)
	GetPermissionPolicyAsync(ctx workflow.Context, input *wafv2.GetPermissionPolicyInput) *Wafv2GetPermissionPolicyFuture

	GetRateBasedStatementManagedKeys(ctx workflow.Context, input *wafv2.GetRateBasedStatementManagedKeysInput) (*wafv2.GetRateBasedStatementManagedKeysOutput, error)
	GetRateBasedStatementManagedKeysAsync(ctx workflow.Context, input *wafv2.GetRateBasedStatementManagedKeysInput) *Wafv2GetRateBasedStatementManagedKeysFuture

	GetRegexPatternSet(ctx workflow.Context, input *wafv2.GetRegexPatternSetInput) (*wafv2.GetRegexPatternSetOutput, error)
	GetRegexPatternSetAsync(ctx workflow.Context, input *wafv2.GetRegexPatternSetInput) *Wafv2GetRegexPatternSetFuture

	GetRuleGroup(ctx workflow.Context, input *wafv2.GetRuleGroupInput) (*wafv2.GetRuleGroupOutput, error)
	GetRuleGroupAsync(ctx workflow.Context, input *wafv2.GetRuleGroupInput) *Wafv2GetRuleGroupFuture

	GetSampledRequests(ctx workflow.Context, input *wafv2.GetSampledRequestsInput) (*wafv2.GetSampledRequestsOutput, error)
	GetSampledRequestsAsync(ctx workflow.Context, input *wafv2.GetSampledRequestsInput) *Wafv2GetSampledRequestsFuture

	GetWebACL(ctx workflow.Context, input *wafv2.GetWebACLInput) (*wafv2.GetWebACLOutput, error)
	GetWebACLAsync(ctx workflow.Context, input *wafv2.GetWebACLInput) *Wafv2GetWebACLFuture

	GetWebACLForResource(ctx workflow.Context, input *wafv2.GetWebACLForResourceInput) (*wafv2.GetWebACLForResourceOutput, error)
	GetWebACLForResourceAsync(ctx workflow.Context, input *wafv2.GetWebACLForResourceInput) *Wafv2GetWebACLForResourceFuture

	ListAvailableManagedRuleGroups(ctx workflow.Context, input *wafv2.ListAvailableManagedRuleGroupsInput) (*wafv2.ListAvailableManagedRuleGroupsOutput, error)
	ListAvailableManagedRuleGroupsAsync(ctx workflow.Context, input *wafv2.ListAvailableManagedRuleGroupsInput) *Wafv2ListAvailableManagedRuleGroupsFuture

	ListIPSets(ctx workflow.Context, input *wafv2.ListIPSetsInput) (*wafv2.ListIPSetsOutput, error)
	ListIPSetsAsync(ctx workflow.Context, input *wafv2.ListIPSetsInput) *Wafv2ListIPSetsFuture

	ListLoggingConfigurations(ctx workflow.Context, input *wafv2.ListLoggingConfigurationsInput) (*wafv2.ListLoggingConfigurationsOutput, error)
	ListLoggingConfigurationsAsync(ctx workflow.Context, input *wafv2.ListLoggingConfigurationsInput) *Wafv2ListLoggingConfigurationsFuture

	ListRegexPatternSets(ctx workflow.Context, input *wafv2.ListRegexPatternSetsInput) (*wafv2.ListRegexPatternSetsOutput, error)
	ListRegexPatternSetsAsync(ctx workflow.Context, input *wafv2.ListRegexPatternSetsInput) *Wafv2ListRegexPatternSetsFuture

	ListResourcesForWebACL(ctx workflow.Context, input *wafv2.ListResourcesForWebACLInput) (*wafv2.ListResourcesForWebACLOutput, error)
	ListResourcesForWebACLAsync(ctx workflow.Context, input *wafv2.ListResourcesForWebACLInput) *Wafv2ListResourcesForWebACLFuture

	ListRuleGroups(ctx workflow.Context, input *wafv2.ListRuleGroupsInput) (*wafv2.ListRuleGroupsOutput, error)
	ListRuleGroupsAsync(ctx workflow.Context, input *wafv2.ListRuleGroupsInput) *Wafv2ListRuleGroupsFuture

	ListTagsForResource(ctx workflow.Context, input *wafv2.ListTagsForResourceInput) (*wafv2.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *wafv2.ListTagsForResourceInput) *Wafv2ListTagsForResourceFuture

	ListWebACLs(ctx workflow.Context, input *wafv2.ListWebACLsInput) (*wafv2.ListWebACLsOutput, error)
	ListWebACLsAsync(ctx workflow.Context, input *wafv2.ListWebACLsInput) *Wafv2ListWebACLsFuture

	PutLoggingConfiguration(ctx workflow.Context, input *wafv2.PutLoggingConfigurationInput) (*wafv2.PutLoggingConfigurationOutput, error)
	PutLoggingConfigurationAsync(ctx workflow.Context, input *wafv2.PutLoggingConfigurationInput) *Wafv2PutLoggingConfigurationFuture

	PutPermissionPolicy(ctx workflow.Context, input *wafv2.PutPermissionPolicyInput) (*wafv2.PutPermissionPolicyOutput, error)
	PutPermissionPolicyAsync(ctx workflow.Context, input *wafv2.PutPermissionPolicyInput) *Wafv2PutPermissionPolicyFuture

	TagResource(ctx workflow.Context, input *wafv2.TagResourceInput) (*wafv2.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *wafv2.TagResourceInput) *Wafv2TagResourceFuture

	UntagResource(ctx workflow.Context, input *wafv2.UntagResourceInput) (*wafv2.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *wafv2.UntagResourceInput) *Wafv2UntagResourceFuture

	UpdateIPSet(ctx workflow.Context, input *wafv2.UpdateIPSetInput) (*wafv2.UpdateIPSetOutput, error)
	UpdateIPSetAsync(ctx workflow.Context, input *wafv2.UpdateIPSetInput) *Wafv2UpdateIPSetFuture

	UpdateRegexPatternSet(ctx workflow.Context, input *wafv2.UpdateRegexPatternSetInput) (*wafv2.UpdateRegexPatternSetOutput, error)
	UpdateRegexPatternSetAsync(ctx workflow.Context, input *wafv2.UpdateRegexPatternSetInput) *Wafv2UpdateRegexPatternSetFuture

	UpdateRuleGroup(ctx workflow.Context, input *wafv2.UpdateRuleGroupInput) (*wafv2.UpdateRuleGroupOutput, error)
	UpdateRuleGroupAsync(ctx workflow.Context, input *wafv2.UpdateRuleGroupInput) *Wafv2UpdateRuleGroupFuture

	UpdateWebACL(ctx workflow.Context, input *wafv2.UpdateWebACLInput) (*wafv2.UpdateWebACLOutput, error)
	UpdateWebACLAsync(ctx workflow.Context, input *wafv2.UpdateWebACLInput) *Wafv2UpdateWebACLFuture
}

type WAFV2Stub struct{}

func NewWAFV2Stub() WAFV2Client {
	return &WAFV2Stub{}
}

type Wafv2AssociateWebACLFuture struct {
	Future workflow.Future
}

func (r *Wafv2AssociateWebACLFuture) Get(ctx workflow.Context) (*wafv2.AssociateWebACLOutput, error) {
	var output wafv2.AssociateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2CheckCapacityFuture struct {
	Future workflow.Future
}

func (r *Wafv2CheckCapacityFuture) Get(ctx workflow.Context) (*wafv2.CheckCapacityOutput, error) {
	var output wafv2.CheckCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2CreateIPSetFuture struct {
	Future workflow.Future
}

func (r *Wafv2CreateIPSetFuture) Get(ctx workflow.Context) (*wafv2.CreateIPSetOutput, error) {
	var output wafv2.CreateIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2CreateRegexPatternSetFuture struct {
	Future workflow.Future
}

func (r *Wafv2CreateRegexPatternSetFuture) Get(ctx workflow.Context) (*wafv2.CreateRegexPatternSetOutput, error) {
	var output wafv2.CreateRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2CreateRuleGroupFuture struct {
	Future workflow.Future
}

func (r *Wafv2CreateRuleGroupFuture) Get(ctx workflow.Context) (*wafv2.CreateRuleGroupOutput, error) {
	var output wafv2.CreateRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2CreateWebACLFuture struct {
	Future workflow.Future
}

func (r *Wafv2CreateWebACLFuture) Get(ctx workflow.Context) (*wafv2.CreateWebACLOutput, error) {
	var output wafv2.CreateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2DeleteFirewallManagerRuleGroupsFuture struct {
	Future workflow.Future
}

func (r *Wafv2DeleteFirewallManagerRuleGroupsFuture) Get(ctx workflow.Context) (*wafv2.DeleteFirewallManagerRuleGroupsOutput, error) {
	var output wafv2.DeleteFirewallManagerRuleGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2DeleteIPSetFuture struct {
	Future workflow.Future
}

func (r *Wafv2DeleteIPSetFuture) Get(ctx workflow.Context) (*wafv2.DeleteIPSetOutput, error) {
	var output wafv2.DeleteIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2DeleteLoggingConfigurationFuture struct {
	Future workflow.Future
}

func (r *Wafv2DeleteLoggingConfigurationFuture) Get(ctx workflow.Context) (*wafv2.DeleteLoggingConfigurationOutput, error) {
	var output wafv2.DeleteLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2DeletePermissionPolicyFuture struct {
	Future workflow.Future
}

func (r *Wafv2DeletePermissionPolicyFuture) Get(ctx workflow.Context) (*wafv2.DeletePermissionPolicyOutput, error) {
	var output wafv2.DeletePermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2DeleteRegexPatternSetFuture struct {
	Future workflow.Future
}

func (r *Wafv2DeleteRegexPatternSetFuture) Get(ctx workflow.Context) (*wafv2.DeleteRegexPatternSetOutput, error) {
	var output wafv2.DeleteRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2DeleteRuleGroupFuture struct {
	Future workflow.Future
}

func (r *Wafv2DeleteRuleGroupFuture) Get(ctx workflow.Context) (*wafv2.DeleteRuleGroupOutput, error) {
	var output wafv2.DeleteRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2DeleteWebACLFuture struct {
	Future workflow.Future
}

func (r *Wafv2DeleteWebACLFuture) Get(ctx workflow.Context) (*wafv2.DeleteWebACLOutput, error) {
	var output wafv2.DeleteWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2DescribeManagedRuleGroupFuture struct {
	Future workflow.Future
}

func (r *Wafv2DescribeManagedRuleGroupFuture) Get(ctx workflow.Context) (*wafv2.DescribeManagedRuleGroupOutput, error) {
	var output wafv2.DescribeManagedRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2DisassociateWebACLFuture struct {
	Future workflow.Future
}

func (r *Wafv2DisassociateWebACLFuture) Get(ctx workflow.Context) (*wafv2.DisassociateWebACLOutput, error) {
	var output wafv2.DisassociateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2GetIPSetFuture struct {
	Future workflow.Future
}

func (r *Wafv2GetIPSetFuture) Get(ctx workflow.Context) (*wafv2.GetIPSetOutput, error) {
	var output wafv2.GetIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2GetLoggingConfigurationFuture struct {
	Future workflow.Future
}

func (r *Wafv2GetLoggingConfigurationFuture) Get(ctx workflow.Context) (*wafv2.GetLoggingConfigurationOutput, error) {
	var output wafv2.GetLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2GetPermissionPolicyFuture struct {
	Future workflow.Future
}

func (r *Wafv2GetPermissionPolicyFuture) Get(ctx workflow.Context) (*wafv2.GetPermissionPolicyOutput, error) {
	var output wafv2.GetPermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2GetRateBasedStatementManagedKeysFuture struct {
	Future workflow.Future
}

func (r *Wafv2GetRateBasedStatementManagedKeysFuture) Get(ctx workflow.Context) (*wafv2.GetRateBasedStatementManagedKeysOutput, error) {
	var output wafv2.GetRateBasedStatementManagedKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2GetRegexPatternSetFuture struct {
	Future workflow.Future
}

func (r *Wafv2GetRegexPatternSetFuture) Get(ctx workflow.Context) (*wafv2.GetRegexPatternSetOutput, error) {
	var output wafv2.GetRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2GetRuleGroupFuture struct {
	Future workflow.Future
}

func (r *Wafv2GetRuleGroupFuture) Get(ctx workflow.Context) (*wafv2.GetRuleGroupOutput, error) {
	var output wafv2.GetRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2GetSampledRequestsFuture struct {
	Future workflow.Future
}

func (r *Wafv2GetSampledRequestsFuture) Get(ctx workflow.Context) (*wafv2.GetSampledRequestsOutput, error) {
	var output wafv2.GetSampledRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2GetWebACLFuture struct {
	Future workflow.Future
}

func (r *Wafv2GetWebACLFuture) Get(ctx workflow.Context) (*wafv2.GetWebACLOutput, error) {
	var output wafv2.GetWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2GetWebACLForResourceFuture struct {
	Future workflow.Future
}

func (r *Wafv2GetWebACLForResourceFuture) Get(ctx workflow.Context) (*wafv2.GetWebACLForResourceOutput, error) {
	var output wafv2.GetWebACLForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2ListAvailableManagedRuleGroupsFuture struct {
	Future workflow.Future
}

func (r *Wafv2ListAvailableManagedRuleGroupsFuture) Get(ctx workflow.Context) (*wafv2.ListAvailableManagedRuleGroupsOutput, error) {
	var output wafv2.ListAvailableManagedRuleGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2ListIPSetsFuture struct {
	Future workflow.Future
}

func (r *Wafv2ListIPSetsFuture) Get(ctx workflow.Context) (*wafv2.ListIPSetsOutput, error) {
	var output wafv2.ListIPSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2ListLoggingConfigurationsFuture struct {
	Future workflow.Future
}

func (r *Wafv2ListLoggingConfigurationsFuture) Get(ctx workflow.Context) (*wafv2.ListLoggingConfigurationsOutput, error) {
	var output wafv2.ListLoggingConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2ListRegexPatternSetsFuture struct {
	Future workflow.Future
}

func (r *Wafv2ListRegexPatternSetsFuture) Get(ctx workflow.Context) (*wafv2.ListRegexPatternSetsOutput, error) {
	var output wafv2.ListRegexPatternSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2ListResourcesForWebACLFuture struct {
	Future workflow.Future
}

func (r *Wafv2ListResourcesForWebACLFuture) Get(ctx workflow.Context) (*wafv2.ListResourcesForWebACLOutput, error) {
	var output wafv2.ListResourcesForWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2ListRuleGroupsFuture struct {
	Future workflow.Future
}

func (r *Wafv2ListRuleGroupsFuture) Get(ctx workflow.Context) (*wafv2.ListRuleGroupsOutput, error) {
	var output wafv2.ListRuleGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2ListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *Wafv2ListTagsForResourceFuture) Get(ctx workflow.Context) (*wafv2.ListTagsForResourceOutput, error) {
	var output wafv2.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2ListWebACLsFuture struct {
	Future workflow.Future
}

func (r *Wafv2ListWebACLsFuture) Get(ctx workflow.Context) (*wafv2.ListWebACLsOutput, error) {
	var output wafv2.ListWebACLsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2PutLoggingConfigurationFuture struct {
	Future workflow.Future
}

func (r *Wafv2PutLoggingConfigurationFuture) Get(ctx workflow.Context) (*wafv2.PutLoggingConfigurationOutput, error) {
	var output wafv2.PutLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2PutPermissionPolicyFuture struct {
	Future workflow.Future
}

func (r *Wafv2PutPermissionPolicyFuture) Get(ctx workflow.Context) (*wafv2.PutPermissionPolicyOutput, error) {
	var output wafv2.PutPermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2TagResourceFuture struct {
	Future workflow.Future
}

func (r *Wafv2TagResourceFuture) Get(ctx workflow.Context) (*wafv2.TagResourceOutput, error) {
	var output wafv2.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2UntagResourceFuture struct {
	Future workflow.Future
}

func (r *Wafv2UntagResourceFuture) Get(ctx workflow.Context) (*wafv2.UntagResourceOutput, error) {
	var output wafv2.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2UpdateIPSetFuture struct {
	Future workflow.Future
}

func (r *Wafv2UpdateIPSetFuture) Get(ctx workflow.Context) (*wafv2.UpdateIPSetOutput, error) {
	var output wafv2.UpdateIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2UpdateRegexPatternSetFuture struct {
	Future workflow.Future
}

func (r *Wafv2UpdateRegexPatternSetFuture) Get(ctx workflow.Context) (*wafv2.UpdateRegexPatternSetOutput, error) {
	var output wafv2.UpdateRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2UpdateRuleGroupFuture struct {
	Future workflow.Future
}

func (r *Wafv2UpdateRuleGroupFuture) Get(ctx workflow.Context) (*wafv2.UpdateRuleGroupOutput, error) {
	var output wafv2.UpdateRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Wafv2UpdateWebACLFuture struct {
	Future workflow.Future
}

func (r *Wafv2UpdateWebACLFuture) Get(ctx workflow.Context) (*wafv2.UpdateWebACLOutput, error) {
	var output wafv2.UpdateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) AssociateWebACL(ctx workflow.Context, input *wafv2.AssociateWebACLInput) (*wafv2.AssociateWebACLOutput, error) {
	var output wafv2.AssociateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.AssociateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) AssociateWebACLAsync(ctx workflow.Context, input *wafv2.AssociateWebACLInput) *Wafv2AssociateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.AssociateWebACL", input)
	return &Wafv2AssociateWebACLFuture{Future: future}
}

func (a *WAFV2Stub) CheckCapacity(ctx workflow.Context, input *wafv2.CheckCapacityInput) (*wafv2.CheckCapacityOutput, error) {
	var output wafv2.CheckCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.CheckCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) CheckCapacityAsync(ctx workflow.Context, input *wafv2.CheckCapacityInput) *Wafv2CheckCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.CheckCapacity", input)
	return &Wafv2CheckCapacityFuture{Future: future}
}

func (a *WAFV2Stub) CreateIPSet(ctx workflow.Context, input *wafv2.CreateIPSetInput) (*wafv2.CreateIPSetOutput, error) {
	var output wafv2.CreateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.CreateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) CreateIPSetAsync(ctx workflow.Context, input *wafv2.CreateIPSetInput) *Wafv2CreateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.CreateIPSet", input)
	return &Wafv2CreateIPSetFuture{Future: future}
}

func (a *WAFV2Stub) CreateRegexPatternSet(ctx workflow.Context, input *wafv2.CreateRegexPatternSetInput) (*wafv2.CreateRegexPatternSetOutput, error) {
	var output wafv2.CreateRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.CreateRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) CreateRegexPatternSetAsync(ctx workflow.Context, input *wafv2.CreateRegexPatternSetInput) *Wafv2CreateRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.CreateRegexPatternSet", input)
	return &Wafv2CreateRegexPatternSetFuture{Future: future}
}

func (a *WAFV2Stub) CreateRuleGroup(ctx workflow.Context, input *wafv2.CreateRuleGroupInput) (*wafv2.CreateRuleGroupOutput, error) {
	var output wafv2.CreateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.CreateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) CreateRuleGroupAsync(ctx workflow.Context, input *wafv2.CreateRuleGroupInput) *Wafv2CreateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.CreateRuleGroup", input)
	return &Wafv2CreateRuleGroupFuture{Future: future}
}

func (a *WAFV2Stub) CreateWebACL(ctx workflow.Context, input *wafv2.CreateWebACLInput) (*wafv2.CreateWebACLOutput, error) {
	var output wafv2.CreateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.CreateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) CreateWebACLAsync(ctx workflow.Context, input *wafv2.CreateWebACLInput) *Wafv2CreateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.CreateWebACL", input)
	return &Wafv2CreateWebACLFuture{Future: future}
}

func (a *WAFV2Stub) DeleteFirewallManagerRuleGroups(ctx workflow.Context, input *wafv2.DeleteFirewallManagerRuleGroupsInput) (*wafv2.DeleteFirewallManagerRuleGroupsOutput, error) {
	var output wafv2.DeleteFirewallManagerRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.DeleteFirewallManagerRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) DeleteFirewallManagerRuleGroupsAsync(ctx workflow.Context, input *wafv2.DeleteFirewallManagerRuleGroupsInput) *Wafv2DeleteFirewallManagerRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.DeleteFirewallManagerRuleGroups", input)
	return &Wafv2DeleteFirewallManagerRuleGroupsFuture{Future: future}
}

func (a *WAFV2Stub) DeleteIPSet(ctx workflow.Context, input *wafv2.DeleteIPSetInput) (*wafv2.DeleteIPSetOutput, error) {
	var output wafv2.DeleteIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.DeleteIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) DeleteIPSetAsync(ctx workflow.Context, input *wafv2.DeleteIPSetInput) *Wafv2DeleteIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.DeleteIPSet", input)
	return &Wafv2DeleteIPSetFuture{Future: future}
}

func (a *WAFV2Stub) DeleteLoggingConfiguration(ctx workflow.Context, input *wafv2.DeleteLoggingConfigurationInput) (*wafv2.DeleteLoggingConfigurationOutput, error) {
	var output wafv2.DeleteLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.DeleteLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) DeleteLoggingConfigurationAsync(ctx workflow.Context, input *wafv2.DeleteLoggingConfigurationInput) *Wafv2DeleteLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.DeleteLoggingConfiguration", input)
	return &Wafv2DeleteLoggingConfigurationFuture{Future: future}
}

func (a *WAFV2Stub) DeletePermissionPolicy(ctx workflow.Context, input *wafv2.DeletePermissionPolicyInput) (*wafv2.DeletePermissionPolicyOutput, error) {
	var output wafv2.DeletePermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.DeletePermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) DeletePermissionPolicyAsync(ctx workflow.Context, input *wafv2.DeletePermissionPolicyInput) *Wafv2DeletePermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.DeletePermissionPolicy", input)
	return &Wafv2DeletePermissionPolicyFuture{Future: future}
}

func (a *WAFV2Stub) DeleteRegexPatternSet(ctx workflow.Context, input *wafv2.DeleteRegexPatternSetInput) (*wafv2.DeleteRegexPatternSetOutput, error) {
	var output wafv2.DeleteRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.DeleteRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) DeleteRegexPatternSetAsync(ctx workflow.Context, input *wafv2.DeleteRegexPatternSetInput) *Wafv2DeleteRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.DeleteRegexPatternSet", input)
	return &Wafv2DeleteRegexPatternSetFuture{Future: future}
}

func (a *WAFV2Stub) DeleteRuleGroup(ctx workflow.Context, input *wafv2.DeleteRuleGroupInput) (*wafv2.DeleteRuleGroupOutput, error) {
	var output wafv2.DeleteRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.DeleteRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) DeleteRuleGroupAsync(ctx workflow.Context, input *wafv2.DeleteRuleGroupInput) *Wafv2DeleteRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.DeleteRuleGroup", input)
	return &Wafv2DeleteRuleGroupFuture{Future: future}
}

func (a *WAFV2Stub) DeleteWebACL(ctx workflow.Context, input *wafv2.DeleteWebACLInput) (*wafv2.DeleteWebACLOutput, error) {
	var output wafv2.DeleteWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.DeleteWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) DeleteWebACLAsync(ctx workflow.Context, input *wafv2.DeleteWebACLInput) *Wafv2DeleteWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.DeleteWebACL", input)
	return &Wafv2DeleteWebACLFuture{Future: future}
}

func (a *WAFV2Stub) DescribeManagedRuleGroup(ctx workflow.Context, input *wafv2.DescribeManagedRuleGroupInput) (*wafv2.DescribeManagedRuleGroupOutput, error) {
	var output wafv2.DescribeManagedRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.DescribeManagedRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) DescribeManagedRuleGroupAsync(ctx workflow.Context, input *wafv2.DescribeManagedRuleGroupInput) *Wafv2DescribeManagedRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.DescribeManagedRuleGroup", input)
	return &Wafv2DescribeManagedRuleGroupFuture{Future: future}
}

func (a *WAFV2Stub) DisassociateWebACL(ctx workflow.Context, input *wafv2.DisassociateWebACLInput) (*wafv2.DisassociateWebACLOutput, error) {
	var output wafv2.DisassociateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.DisassociateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) DisassociateWebACLAsync(ctx workflow.Context, input *wafv2.DisassociateWebACLInput) *Wafv2DisassociateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.DisassociateWebACL", input)
	return &Wafv2DisassociateWebACLFuture{Future: future}
}

func (a *WAFV2Stub) GetIPSet(ctx workflow.Context, input *wafv2.GetIPSetInput) (*wafv2.GetIPSetOutput, error) {
	var output wafv2.GetIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.GetIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) GetIPSetAsync(ctx workflow.Context, input *wafv2.GetIPSetInput) *Wafv2GetIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.GetIPSet", input)
	return &Wafv2GetIPSetFuture{Future: future}
}

func (a *WAFV2Stub) GetLoggingConfiguration(ctx workflow.Context, input *wafv2.GetLoggingConfigurationInput) (*wafv2.GetLoggingConfigurationOutput, error) {
	var output wafv2.GetLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.GetLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) GetLoggingConfigurationAsync(ctx workflow.Context, input *wafv2.GetLoggingConfigurationInput) *Wafv2GetLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.GetLoggingConfiguration", input)
	return &Wafv2GetLoggingConfigurationFuture{Future: future}
}

func (a *WAFV2Stub) GetPermissionPolicy(ctx workflow.Context, input *wafv2.GetPermissionPolicyInput) (*wafv2.GetPermissionPolicyOutput, error) {
	var output wafv2.GetPermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.GetPermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) GetPermissionPolicyAsync(ctx workflow.Context, input *wafv2.GetPermissionPolicyInput) *Wafv2GetPermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.GetPermissionPolicy", input)
	return &Wafv2GetPermissionPolicyFuture{Future: future}
}

func (a *WAFV2Stub) GetRateBasedStatementManagedKeys(ctx workflow.Context, input *wafv2.GetRateBasedStatementManagedKeysInput) (*wafv2.GetRateBasedStatementManagedKeysOutput, error) {
	var output wafv2.GetRateBasedStatementManagedKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.GetRateBasedStatementManagedKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) GetRateBasedStatementManagedKeysAsync(ctx workflow.Context, input *wafv2.GetRateBasedStatementManagedKeysInput) *Wafv2GetRateBasedStatementManagedKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.GetRateBasedStatementManagedKeys", input)
	return &Wafv2GetRateBasedStatementManagedKeysFuture{Future: future}
}

func (a *WAFV2Stub) GetRegexPatternSet(ctx workflow.Context, input *wafv2.GetRegexPatternSetInput) (*wafv2.GetRegexPatternSetOutput, error) {
	var output wafv2.GetRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.GetRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) GetRegexPatternSetAsync(ctx workflow.Context, input *wafv2.GetRegexPatternSetInput) *Wafv2GetRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.GetRegexPatternSet", input)
	return &Wafv2GetRegexPatternSetFuture{Future: future}
}

func (a *WAFV2Stub) GetRuleGroup(ctx workflow.Context, input *wafv2.GetRuleGroupInput) (*wafv2.GetRuleGroupOutput, error) {
	var output wafv2.GetRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.GetRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) GetRuleGroupAsync(ctx workflow.Context, input *wafv2.GetRuleGroupInput) *Wafv2GetRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.GetRuleGroup", input)
	return &Wafv2GetRuleGroupFuture{Future: future}
}

func (a *WAFV2Stub) GetSampledRequests(ctx workflow.Context, input *wafv2.GetSampledRequestsInput) (*wafv2.GetSampledRequestsOutput, error) {
	var output wafv2.GetSampledRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.GetSampledRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) GetSampledRequestsAsync(ctx workflow.Context, input *wafv2.GetSampledRequestsInput) *Wafv2GetSampledRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.GetSampledRequests", input)
	return &Wafv2GetSampledRequestsFuture{Future: future}
}

func (a *WAFV2Stub) GetWebACL(ctx workflow.Context, input *wafv2.GetWebACLInput) (*wafv2.GetWebACLOutput, error) {
	var output wafv2.GetWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.GetWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) GetWebACLAsync(ctx workflow.Context, input *wafv2.GetWebACLInput) *Wafv2GetWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.GetWebACL", input)
	return &Wafv2GetWebACLFuture{Future: future}
}

func (a *WAFV2Stub) GetWebACLForResource(ctx workflow.Context, input *wafv2.GetWebACLForResourceInput) (*wafv2.GetWebACLForResourceOutput, error) {
	var output wafv2.GetWebACLForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.GetWebACLForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) GetWebACLForResourceAsync(ctx workflow.Context, input *wafv2.GetWebACLForResourceInput) *Wafv2GetWebACLForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.GetWebACLForResource", input)
	return &Wafv2GetWebACLForResourceFuture{Future: future}
}

func (a *WAFV2Stub) ListAvailableManagedRuleGroups(ctx workflow.Context, input *wafv2.ListAvailableManagedRuleGroupsInput) (*wafv2.ListAvailableManagedRuleGroupsOutput, error) {
	var output wafv2.ListAvailableManagedRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.ListAvailableManagedRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) ListAvailableManagedRuleGroupsAsync(ctx workflow.Context, input *wafv2.ListAvailableManagedRuleGroupsInput) *Wafv2ListAvailableManagedRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.ListAvailableManagedRuleGroups", input)
	return &Wafv2ListAvailableManagedRuleGroupsFuture{Future: future}
}

func (a *WAFV2Stub) ListIPSets(ctx workflow.Context, input *wafv2.ListIPSetsInput) (*wafv2.ListIPSetsOutput, error) {
	var output wafv2.ListIPSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.ListIPSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) ListIPSetsAsync(ctx workflow.Context, input *wafv2.ListIPSetsInput) *Wafv2ListIPSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.ListIPSets", input)
	return &Wafv2ListIPSetsFuture{Future: future}
}

func (a *WAFV2Stub) ListLoggingConfigurations(ctx workflow.Context, input *wafv2.ListLoggingConfigurationsInput) (*wafv2.ListLoggingConfigurationsOutput, error) {
	var output wafv2.ListLoggingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.ListLoggingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) ListLoggingConfigurationsAsync(ctx workflow.Context, input *wafv2.ListLoggingConfigurationsInput) *Wafv2ListLoggingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.ListLoggingConfigurations", input)
	return &Wafv2ListLoggingConfigurationsFuture{Future: future}
}

func (a *WAFV2Stub) ListRegexPatternSets(ctx workflow.Context, input *wafv2.ListRegexPatternSetsInput) (*wafv2.ListRegexPatternSetsOutput, error) {
	var output wafv2.ListRegexPatternSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.ListRegexPatternSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) ListRegexPatternSetsAsync(ctx workflow.Context, input *wafv2.ListRegexPatternSetsInput) *Wafv2ListRegexPatternSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.ListRegexPatternSets", input)
	return &Wafv2ListRegexPatternSetsFuture{Future: future}
}

func (a *WAFV2Stub) ListResourcesForWebACL(ctx workflow.Context, input *wafv2.ListResourcesForWebACLInput) (*wafv2.ListResourcesForWebACLOutput, error) {
	var output wafv2.ListResourcesForWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.ListResourcesForWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) ListResourcesForWebACLAsync(ctx workflow.Context, input *wafv2.ListResourcesForWebACLInput) *Wafv2ListResourcesForWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.ListResourcesForWebACL", input)
	return &Wafv2ListResourcesForWebACLFuture{Future: future}
}

func (a *WAFV2Stub) ListRuleGroups(ctx workflow.Context, input *wafv2.ListRuleGroupsInput) (*wafv2.ListRuleGroupsOutput, error) {
	var output wafv2.ListRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.ListRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) ListRuleGroupsAsync(ctx workflow.Context, input *wafv2.ListRuleGroupsInput) *Wafv2ListRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.ListRuleGroups", input)
	return &Wafv2ListRuleGroupsFuture{Future: future}
}

func (a *WAFV2Stub) ListTagsForResource(ctx workflow.Context, input *wafv2.ListTagsForResourceInput) (*wafv2.ListTagsForResourceOutput, error) {
	var output wafv2.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) ListTagsForResourceAsync(ctx workflow.Context, input *wafv2.ListTagsForResourceInput) *Wafv2ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.ListTagsForResource", input)
	return &Wafv2ListTagsForResourceFuture{Future: future}
}

func (a *WAFV2Stub) ListWebACLs(ctx workflow.Context, input *wafv2.ListWebACLsInput) (*wafv2.ListWebACLsOutput, error) {
	var output wafv2.ListWebACLsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.ListWebACLs", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) ListWebACLsAsync(ctx workflow.Context, input *wafv2.ListWebACLsInput) *Wafv2ListWebACLsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.ListWebACLs", input)
	return &Wafv2ListWebACLsFuture{Future: future}
}

func (a *WAFV2Stub) PutLoggingConfiguration(ctx workflow.Context, input *wafv2.PutLoggingConfigurationInput) (*wafv2.PutLoggingConfigurationOutput, error) {
	var output wafv2.PutLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.PutLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) PutLoggingConfigurationAsync(ctx workflow.Context, input *wafv2.PutLoggingConfigurationInput) *Wafv2PutLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.PutLoggingConfiguration", input)
	return &Wafv2PutLoggingConfigurationFuture{Future: future}
}

func (a *WAFV2Stub) PutPermissionPolicy(ctx workflow.Context, input *wafv2.PutPermissionPolicyInput) (*wafv2.PutPermissionPolicyOutput, error) {
	var output wafv2.PutPermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.PutPermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) PutPermissionPolicyAsync(ctx workflow.Context, input *wafv2.PutPermissionPolicyInput) *Wafv2PutPermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.PutPermissionPolicy", input)
	return &Wafv2PutPermissionPolicyFuture{Future: future}
}

func (a *WAFV2Stub) TagResource(ctx workflow.Context, input *wafv2.TagResourceInput) (*wafv2.TagResourceOutput, error) {
	var output wafv2.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) TagResourceAsync(ctx workflow.Context, input *wafv2.TagResourceInput) *Wafv2TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.TagResource", input)
	return &Wafv2TagResourceFuture{Future: future}
}

func (a *WAFV2Stub) UntagResource(ctx workflow.Context, input *wafv2.UntagResourceInput) (*wafv2.UntagResourceOutput, error) {
	var output wafv2.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) UntagResourceAsync(ctx workflow.Context, input *wafv2.UntagResourceInput) *Wafv2UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.UntagResource", input)
	return &Wafv2UntagResourceFuture{Future: future}
}

func (a *WAFV2Stub) UpdateIPSet(ctx workflow.Context, input *wafv2.UpdateIPSetInput) (*wafv2.UpdateIPSetOutput, error) {
	var output wafv2.UpdateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.UpdateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) UpdateIPSetAsync(ctx workflow.Context, input *wafv2.UpdateIPSetInput) *Wafv2UpdateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.UpdateIPSet", input)
	return &Wafv2UpdateIPSetFuture{Future: future}
}

func (a *WAFV2Stub) UpdateRegexPatternSet(ctx workflow.Context, input *wafv2.UpdateRegexPatternSetInput) (*wafv2.UpdateRegexPatternSetOutput, error) {
	var output wafv2.UpdateRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.UpdateRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) UpdateRegexPatternSetAsync(ctx workflow.Context, input *wafv2.UpdateRegexPatternSetInput) *Wafv2UpdateRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.UpdateRegexPatternSet", input)
	return &Wafv2UpdateRegexPatternSetFuture{Future: future}
}

func (a *WAFV2Stub) UpdateRuleGroup(ctx workflow.Context, input *wafv2.UpdateRuleGroupInput) (*wafv2.UpdateRuleGroupOutput, error) {
	var output wafv2.UpdateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.UpdateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) UpdateRuleGroupAsync(ctx workflow.Context, input *wafv2.UpdateRuleGroupInput) *Wafv2UpdateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.UpdateRuleGroup", input)
	return &Wafv2UpdateRuleGroupFuture{Future: future}
}

func (a *WAFV2Stub) UpdateWebACL(ctx workflow.Context, input *wafv2.UpdateWebACLInput) (*wafv2.UpdateWebACLOutput, error) {
	var output wafv2.UpdateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafv2.UpdateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFV2Stub) UpdateWebACLAsync(ctx workflow.Context, input *wafv2.UpdateWebACLInput) *Wafv2UpdateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafv2.UpdateWebACL", input)
	return &Wafv2UpdateWebACLFuture{Future: future}
}
