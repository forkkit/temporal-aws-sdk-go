// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/apigateway"
	"go.temporal.io/sdk/workflow"
)

type APIGatewayClient interface {
	CreateApiKey(ctx workflow.Context, input *apigateway.CreateApiKeyInput) (*apigateway.ApiKey, error)
	CreateApiKeyAsync(ctx workflow.Context, input *apigateway.CreateApiKeyInput) *APIGatewayCreateApiKeyFuture

	CreateAuthorizer(ctx workflow.Context, input *apigateway.CreateAuthorizerInput) (*apigateway.Authorizer, error)
	CreateAuthorizerAsync(ctx workflow.Context, input *apigateway.CreateAuthorizerInput) *APIGatewayCreateAuthorizerFuture

	CreateBasePathMapping(ctx workflow.Context, input *apigateway.CreateBasePathMappingInput) (*apigateway.BasePathMapping, error)
	CreateBasePathMappingAsync(ctx workflow.Context, input *apigateway.CreateBasePathMappingInput) *APIGatewayCreateBasePathMappingFuture

	CreateDeployment(ctx workflow.Context, input *apigateway.CreateDeploymentInput) (*apigateway.Deployment, error)
	CreateDeploymentAsync(ctx workflow.Context, input *apigateway.CreateDeploymentInput) *APIGatewayCreateDeploymentFuture

	CreateDocumentationPart(ctx workflow.Context, input *apigateway.CreateDocumentationPartInput) (*apigateway.DocumentationPart, error)
	CreateDocumentationPartAsync(ctx workflow.Context, input *apigateway.CreateDocumentationPartInput) *APIGatewayCreateDocumentationPartFuture

	CreateDocumentationVersion(ctx workflow.Context, input *apigateway.CreateDocumentationVersionInput) (*apigateway.DocumentationVersion, error)
	CreateDocumentationVersionAsync(ctx workflow.Context, input *apigateway.CreateDocumentationVersionInput) *APIGatewayCreateDocumentationVersionFuture

	CreateDomainName(ctx workflow.Context, input *apigateway.CreateDomainNameInput) (*apigateway.DomainName, error)
	CreateDomainNameAsync(ctx workflow.Context, input *apigateway.CreateDomainNameInput) *APIGatewayCreateDomainNameFuture

	CreateModel(ctx workflow.Context, input *apigateway.CreateModelInput) (*apigateway.Model, error)
	CreateModelAsync(ctx workflow.Context, input *apigateway.CreateModelInput) *APIGatewayCreateModelFuture

	CreateRequestValidator(ctx workflow.Context, input *apigateway.CreateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error)
	CreateRequestValidatorAsync(ctx workflow.Context, input *apigateway.CreateRequestValidatorInput) *APIGatewayCreateRequestValidatorFuture

	CreateResource(ctx workflow.Context, input *apigateway.CreateResourceInput) (*apigateway.Resource, error)
	CreateResourceAsync(ctx workflow.Context, input *apigateway.CreateResourceInput) *APIGatewayCreateResourceFuture

	CreateRestApi(ctx workflow.Context, input *apigateway.CreateRestApiInput) (*apigateway.RestApi, error)
	CreateRestApiAsync(ctx workflow.Context, input *apigateway.CreateRestApiInput) *APIGatewayCreateRestApiFuture

	CreateStage(ctx workflow.Context, input *apigateway.CreateStageInput) (*apigateway.Stage, error)
	CreateStageAsync(ctx workflow.Context, input *apigateway.CreateStageInput) *APIGatewayCreateStageFuture

	CreateUsagePlan(ctx workflow.Context, input *apigateway.CreateUsagePlanInput) (*apigateway.UsagePlan, error)
	CreateUsagePlanAsync(ctx workflow.Context, input *apigateway.CreateUsagePlanInput) *APIGatewayCreateUsagePlanFuture

	CreateUsagePlanKey(ctx workflow.Context, input *apigateway.CreateUsagePlanKeyInput) (*apigateway.UsagePlanKey, error)
	CreateUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.CreateUsagePlanKeyInput) *APIGatewayCreateUsagePlanKeyFuture

	CreateVpcLink(ctx workflow.Context, input *apigateway.CreateVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error)
	CreateVpcLinkAsync(ctx workflow.Context, input *apigateway.CreateVpcLinkInput) *APIGatewayCreateVpcLinkFuture

	DeleteApiKey(ctx workflow.Context, input *apigateway.DeleteApiKeyInput) (*apigateway.DeleteApiKeyOutput, error)
	DeleteApiKeyAsync(ctx workflow.Context, input *apigateway.DeleteApiKeyInput) *APIGatewayDeleteApiKeyFuture

	DeleteAuthorizer(ctx workflow.Context, input *apigateway.DeleteAuthorizerInput) (*apigateway.DeleteAuthorizerOutput, error)
	DeleteAuthorizerAsync(ctx workflow.Context, input *apigateway.DeleteAuthorizerInput) *APIGatewayDeleteAuthorizerFuture

	DeleteBasePathMapping(ctx workflow.Context, input *apigateway.DeleteBasePathMappingInput) (*apigateway.DeleteBasePathMappingOutput, error)
	DeleteBasePathMappingAsync(ctx workflow.Context, input *apigateway.DeleteBasePathMappingInput) *APIGatewayDeleteBasePathMappingFuture

	DeleteClientCertificate(ctx workflow.Context, input *apigateway.DeleteClientCertificateInput) (*apigateway.DeleteClientCertificateOutput, error)
	DeleteClientCertificateAsync(ctx workflow.Context, input *apigateway.DeleteClientCertificateInput) *APIGatewayDeleteClientCertificateFuture

	DeleteDeployment(ctx workflow.Context, input *apigateway.DeleteDeploymentInput) (*apigateway.DeleteDeploymentOutput, error)
	DeleteDeploymentAsync(ctx workflow.Context, input *apigateway.DeleteDeploymentInput) *APIGatewayDeleteDeploymentFuture

	DeleteDocumentationPart(ctx workflow.Context, input *apigateway.DeleteDocumentationPartInput) (*apigateway.DeleteDocumentationPartOutput, error)
	DeleteDocumentationPartAsync(ctx workflow.Context, input *apigateway.DeleteDocumentationPartInput) *APIGatewayDeleteDocumentationPartFuture

	DeleteDocumentationVersion(ctx workflow.Context, input *apigateway.DeleteDocumentationVersionInput) (*apigateway.DeleteDocumentationVersionOutput, error)
	DeleteDocumentationVersionAsync(ctx workflow.Context, input *apigateway.DeleteDocumentationVersionInput) *APIGatewayDeleteDocumentationVersionFuture

	DeleteDomainName(ctx workflow.Context, input *apigateway.DeleteDomainNameInput) (*apigateway.DeleteDomainNameOutput, error)
	DeleteDomainNameAsync(ctx workflow.Context, input *apigateway.DeleteDomainNameInput) *APIGatewayDeleteDomainNameFuture

	DeleteGatewayResponse(ctx workflow.Context, input *apigateway.DeleteGatewayResponseInput) (*apigateway.DeleteGatewayResponseOutput, error)
	DeleteGatewayResponseAsync(ctx workflow.Context, input *apigateway.DeleteGatewayResponseInput) *APIGatewayDeleteGatewayResponseFuture

	DeleteIntegration(ctx workflow.Context, input *apigateway.DeleteIntegrationInput) (*apigateway.DeleteIntegrationOutput, error)
	DeleteIntegrationAsync(ctx workflow.Context, input *apigateway.DeleteIntegrationInput) *APIGatewayDeleteIntegrationFuture

	DeleteIntegrationResponse(ctx workflow.Context, input *apigateway.DeleteIntegrationResponseInput) (*apigateway.DeleteIntegrationResponseOutput, error)
	DeleteIntegrationResponseAsync(ctx workflow.Context, input *apigateway.DeleteIntegrationResponseInput) *APIGatewayDeleteIntegrationResponseFuture

	DeleteMethod(ctx workflow.Context, input *apigateway.DeleteMethodInput) (*apigateway.DeleteMethodOutput, error)
	DeleteMethodAsync(ctx workflow.Context, input *apigateway.DeleteMethodInput) *APIGatewayDeleteMethodFuture

	DeleteMethodResponse(ctx workflow.Context, input *apigateway.DeleteMethodResponseInput) (*apigateway.DeleteMethodResponseOutput, error)
	DeleteMethodResponseAsync(ctx workflow.Context, input *apigateway.DeleteMethodResponseInput) *APIGatewayDeleteMethodResponseFuture

	DeleteModel(ctx workflow.Context, input *apigateway.DeleteModelInput) (*apigateway.DeleteModelOutput, error)
	DeleteModelAsync(ctx workflow.Context, input *apigateway.DeleteModelInput) *APIGatewayDeleteModelFuture

	DeleteRequestValidator(ctx workflow.Context, input *apigateway.DeleteRequestValidatorInput) (*apigateway.DeleteRequestValidatorOutput, error)
	DeleteRequestValidatorAsync(ctx workflow.Context, input *apigateway.DeleteRequestValidatorInput) *APIGatewayDeleteRequestValidatorFuture

	DeleteResource(ctx workflow.Context, input *apigateway.DeleteResourceInput) (*apigateway.DeleteResourceOutput, error)
	DeleteResourceAsync(ctx workflow.Context, input *apigateway.DeleteResourceInput) *APIGatewayDeleteResourceFuture

	DeleteRestApi(ctx workflow.Context, input *apigateway.DeleteRestApiInput) (*apigateway.DeleteRestApiOutput, error)
	DeleteRestApiAsync(ctx workflow.Context, input *apigateway.DeleteRestApiInput) *APIGatewayDeleteRestApiFuture

	DeleteStage(ctx workflow.Context, input *apigateway.DeleteStageInput) (*apigateway.DeleteStageOutput, error)
	DeleteStageAsync(ctx workflow.Context, input *apigateway.DeleteStageInput) *APIGatewayDeleteStageFuture

	DeleteUsagePlan(ctx workflow.Context, input *apigateway.DeleteUsagePlanInput) (*apigateway.DeleteUsagePlanOutput, error)
	DeleteUsagePlanAsync(ctx workflow.Context, input *apigateway.DeleteUsagePlanInput) *APIGatewayDeleteUsagePlanFuture

	DeleteUsagePlanKey(ctx workflow.Context, input *apigateway.DeleteUsagePlanKeyInput) (*apigateway.DeleteUsagePlanKeyOutput, error)
	DeleteUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.DeleteUsagePlanKeyInput) *APIGatewayDeleteUsagePlanKeyFuture

	DeleteVpcLink(ctx workflow.Context, input *apigateway.DeleteVpcLinkInput) (*apigateway.DeleteVpcLinkOutput, error)
	DeleteVpcLinkAsync(ctx workflow.Context, input *apigateway.DeleteVpcLinkInput) *APIGatewayDeleteVpcLinkFuture

	FlushStageAuthorizersCache(ctx workflow.Context, input *apigateway.FlushStageAuthorizersCacheInput) (*apigateway.FlushStageAuthorizersCacheOutput, error)
	FlushStageAuthorizersCacheAsync(ctx workflow.Context, input *apigateway.FlushStageAuthorizersCacheInput) *APIGatewayFlushStageAuthorizersCacheFuture

	FlushStageCache(ctx workflow.Context, input *apigateway.FlushStageCacheInput) (*apigateway.FlushStageCacheOutput, error)
	FlushStageCacheAsync(ctx workflow.Context, input *apigateway.FlushStageCacheInput) *APIGatewayFlushStageCacheFuture

	GenerateClientCertificate(ctx workflow.Context, input *apigateway.GenerateClientCertificateInput) (*apigateway.ClientCertificate, error)
	GenerateClientCertificateAsync(ctx workflow.Context, input *apigateway.GenerateClientCertificateInput) *APIGatewayGenerateClientCertificateFuture

	GetAccount(ctx workflow.Context, input *apigateway.GetAccountInput) (*apigateway.Account, error)
	GetAccountAsync(ctx workflow.Context, input *apigateway.GetAccountInput) *APIGatewayGetAccountFuture

	GetApiKey(ctx workflow.Context, input *apigateway.GetApiKeyInput) (*apigateway.ApiKey, error)
	GetApiKeyAsync(ctx workflow.Context, input *apigateway.GetApiKeyInput) *APIGatewayGetApiKeyFuture

	GetApiKeys(ctx workflow.Context, input *apigateway.GetApiKeysInput) (*apigateway.GetApiKeysOutput, error)
	GetApiKeysAsync(ctx workflow.Context, input *apigateway.GetApiKeysInput) *APIGatewayGetApiKeysFuture

	GetAuthorizer(ctx workflow.Context, input *apigateway.GetAuthorizerInput) (*apigateway.Authorizer, error)
	GetAuthorizerAsync(ctx workflow.Context, input *apigateway.GetAuthorizerInput) *APIGatewayGetAuthorizerFuture

	GetAuthorizers(ctx workflow.Context, input *apigateway.GetAuthorizersInput) (*apigateway.GetAuthorizersOutput, error)
	GetAuthorizersAsync(ctx workflow.Context, input *apigateway.GetAuthorizersInput) *APIGatewayGetAuthorizersFuture

	GetBasePathMapping(ctx workflow.Context, input *apigateway.GetBasePathMappingInput) (*apigateway.BasePathMapping, error)
	GetBasePathMappingAsync(ctx workflow.Context, input *apigateway.GetBasePathMappingInput) *APIGatewayGetBasePathMappingFuture

	GetBasePathMappings(ctx workflow.Context, input *apigateway.GetBasePathMappingsInput) (*apigateway.GetBasePathMappingsOutput, error)
	GetBasePathMappingsAsync(ctx workflow.Context, input *apigateway.GetBasePathMappingsInput) *APIGatewayGetBasePathMappingsFuture

	GetClientCertificate(ctx workflow.Context, input *apigateway.GetClientCertificateInput) (*apigateway.ClientCertificate, error)
	GetClientCertificateAsync(ctx workflow.Context, input *apigateway.GetClientCertificateInput) *APIGatewayGetClientCertificateFuture

	GetClientCertificates(ctx workflow.Context, input *apigateway.GetClientCertificatesInput) (*apigateway.GetClientCertificatesOutput, error)
	GetClientCertificatesAsync(ctx workflow.Context, input *apigateway.GetClientCertificatesInput) *APIGatewayGetClientCertificatesFuture

	GetDeployment(ctx workflow.Context, input *apigateway.GetDeploymentInput) (*apigateway.Deployment, error)
	GetDeploymentAsync(ctx workflow.Context, input *apigateway.GetDeploymentInput) *APIGatewayGetDeploymentFuture

	GetDeployments(ctx workflow.Context, input *apigateway.GetDeploymentsInput) (*apigateway.GetDeploymentsOutput, error)
	GetDeploymentsAsync(ctx workflow.Context, input *apigateway.GetDeploymentsInput) *APIGatewayGetDeploymentsFuture

	GetDocumentationPart(ctx workflow.Context, input *apigateway.GetDocumentationPartInput) (*apigateway.DocumentationPart, error)
	GetDocumentationPartAsync(ctx workflow.Context, input *apigateway.GetDocumentationPartInput) *APIGatewayGetDocumentationPartFuture

	GetDocumentationParts(ctx workflow.Context, input *apigateway.GetDocumentationPartsInput) (*apigateway.GetDocumentationPartsOutput, error)
	GetDocumentationPartsAsync(ctx workflow.Context, input *apigateway.GetDocumentationPartsInput) *APIGatewayGetDocumentationPartsFuture

	GetDocumentationVersion(ctx workflow.Context, input *apigateway.GetDocumentationVersionInput) (*apigateway.DocumentationVersion, error)
	GetDocumentationVersionAsync(ctx workflow.Context, input *apigateway.GetDocumentationVersionInput) *APIGatewayGetDocumentationVersionFuture

	GetDocumentationVersions(ctx workflow.Context, input *apigateway.GetDocumentationVersionsInput) (*apigateway.GetDocumentationVersionsOutput, error)
	GetDocumentationVersionsAsync(ctx workflow.Context, input *apigateway.GetDocumentationVersionsInput) *APIGatewayGetDocumentationVersionsFuture

	GetDomainName(ctx workflow.Context, input *apigateway.GetDomainNameInput) (*apigateway.DomainName, error)
	GetDomainNameAsync(ctx workflow.Context, input *apigateway.GetDomainNameInput) *APIGatewayGetDomainNameFuture

	GetDomainNames(ctx workflow.Context, input *apigateway.GetDomainNamesInput) (*apigateway.GetDomainNamesOutput, error)
	GetDomainNamesAsync(ctx workflow.Context, input *apigateway.GetDomainNamesInput) *APIGatewayGetDomainNamesFuture

	GetExport(ctx workflow.Context, input *apigateway.GetExportInput) (*apigateway.GetExportOutput, error)
	GetExportAsync(ctx workflow.Context, input *apigateway.GetExportInput) *APIGatewayGetExportFuture

	GetGatewayResponse(ctx workflow.Context, input *apigateway.GetGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error)
	GetGatewayResponseAsync(ctx workflow.Context, input *apigateway.GetGatewayResponseInput) *APIGatewayGetGatewayResponseFuture

	GetGatewayResponses(ctx workflow.Context, input *apigateway.GetGatewayResponsesInput) (*apigateway.GetGatewayResponsesOutput, error)
	GetGatewayResponsesAsync(ctx workflow.Context, input *apigateway.GetGatewayResponsesInput) *APIGatewayGetGatewayResponsesFuture

	GetIntegration(ctx workflow.Context, input *apigateway.GetIntegrationInput) (*apigateway.Integration, error)
	GetIntegrationAsync(ctx workflow.Context, input *apigateway.GetIntegrationInput) *APIGatewayGetIntegrationFuture

	GetIntegrationResponse(ctx workflow.Context, input *apigateway.GetIntegrationResponseInput) (*apigateway.IntegrationResponse, error)
	GetIntegrationResponseAsync(ctx workflow.Context, input *apigateway.GetIntegrationResponseInput) *APIGatewayGetIntegrationResponseFuture

	GetMethod(ctx workflow.Context, input *apigateway.GetMethodInput) (*apigateway.Method, error)
	GetMethodAsync(ctx workflow.Context, input *apigateway.GetMethodInput) *APIGatewayGetMethodFuture

	GetMethodResponse(ctx workflow.Context, input *apigateway.GetMethodResponseInput) (*apigateway.MethodResponse, error)
	GetMethodResponseAsync(ctx workflow.Context, input *apigateway.GetMethodResponseInput) *APIGatewayGetMethodResponseFuture

	GetModel(ctx workflow.Context, input *apigateway.GetModelInput) (*apigateway.Model, error)
	GetModelAsync(ctx workflow.Context, input *apigateway.GetModelInput) *APIGatewayGetModelFuture

	GetModelTemplate(ctx workflow.Context, input *apigateway.GetModelTemplateInput) (*apigateway.GetModelTemplateOutput, error)
	GetModelTemplateAsync(ctx workflow.Context, input *apigateway.GetModelTemplateInput) *APIGatewayGetModelTemplateFuture

	GetModels(ctx workflow.Context, input *apigateway.GetModelsInput) (*apigateway.GetModelsOutput, error)
	GetModelsAsync(ctx workflow.Context, input *apigateway.GetModelsInput) *APIGatewayGetModelsFuture

	GetRequestValidator(ctx workflow.Context, input *apigateway.GetRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error)
	GetRequestValidatorAsync(ctx workflow.Context, input *apigateway.GetRequestValidatorInput) *APIGatewayGetRequestValidatorFuture

	GetRequestValidators(ctx workflow.Context, input *apigateway.GetRequestValidatorsInput) (*apigateway.GetRequestValidatorsOutput, error)
	GetRequestValidatorsAsync(ctx workflow.Context, input *apigateway.GetRequestValidatorsInput) *APIGatewayGetRequestValidatorsFuture

	GetResource(ctx workflow.Context, input *apigateway.GetResourceInput) (*apigateway.Resource, error)
	GetResourceAsync(ctx workflow.Context, input *apigateway.GetResourceInput) *APIGatewayGetResourceFuture

	GetResources(ctx workflow.Context, input *apigateway.GetResourcesInput) (*apigateway.GetResourcesOutput, error)
	GetResourcesAsync(ctx workflow.Context, input *apigateway.GetResourcesInput) *APIGatewayGetResourcesFuture

	GetRestApi(ctx workflow.Context, input *apigateway.GetRestApiInput) (*apigateway.RestApi, error)
	GetRestApiAsync(ctx workflow.Context, input *apigateway.GetRestApiInput) *APIGatewayGetRestApiFuture

	GetRestApis(ctx workflow.Context, input *apigateway.GetRestApisInput) (*apigateway.GetRestApisOutput, error)
	GetRestApisAsync(ctx workflow.Context, input *apigateway.GetRestApisInput) *APIGatewayGetRestApisFuture

	GetSdk(ctx workflow.Context, input *apigateway.GetSdkInput) (*apigateway.GetSdkOutput, error)
	GetSdkAsync(ctx workflow.Context, input *apigateway.GetSdkInput) *APIGatewayGetSdkFuture

	GetSdkType(ctx workflow.Context, input *apigateway.GetSdkTypeInput) (*apigateway.SdkType, error)
	GetSdkTypeAsync(ctx workflow.Context, input *apigateway.GetSdkTypeInput) *APIGatewayGetSdkTypeFuture

	GetSdkTypes(ctx workflow.Context, input *apigateway.GetSdkTypesInput) (*apigateway.GetSdkTypesOutput, error)
	GetSdkTypesAsync(ctx workflow.Context, input *apigateway.GetSdkTypesInput) *APIGatewayGetSdkTypesFuture

	GetStage(ctx workflow.Context, input *apigateway.GetStageInput) (*apigateway.Stage, error)
	GetStageAsync(ctx workflow.Context, input *apigateway.GetStageInput) *APIGatewayGetStageFuture

	GetStages(ctx workflow.Context, input *apigateway.GetStagesInput) (*apigateway.GetStagesOutput, error)
	GetStagesAsync(ctx workflow.Context, input *apigateway.GetStagesInput) *APIGatewayGetStagesFuture

	GetTags(ctx workflow.Context, input *apigateway.GetTagsInput) (*apigateway.GetTagsOutput, error)
	GetTagsAsync(ctx workflow.Context, input *apigateway.GetTagsInput) *APIGatewayGetTagsFuture

	GetUsage(ctx workflow.Context, input *apigateway.GetUsageInput) (*apigateway.Usage, error)
	GetUsageAsync(ctx workflow.Context, input *apigateway.GetUsageInput) *APIGatewayGetUsageFuture

	GetUsagePlan(ctx workflow.Context, input *apigateway.GetUsagePlanInput) (*apigateway.UsagePlan, error)
	GetUsagePlanAsync(ctx workflow.Context, input *apigateway.GetUsagePlanInput) *APIGatewayGetUsagePlanFuture

	GetUsagePlanKey(ctx workflow.Context, input *apigateway.GetUsagePlanKeyInput) (*apigateway.UsagePlanKey, error)
	GetUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.GetUsagePlanKeyInput) *APIGatewayGetUsagePlanKeyFuture

	GetUsagePlanKeys(ctx workflow.Context, input *apigateway.GetUsagePlanKeysInput) (*apigateway.GetUsagePlanKeysOutput, error)
	GetUsagePlanKeysAsync(ctx workflow.Context, input *apigateway.GetUsagePlanKeysInput) *APIGatewayGetUsagePlanKeysFuture

	GetUsagePlans(ctx workflow.Context, input *apigateway.GetUsagePlansInput) (*apigateway.GetUsagePlansOutput, error)
	GetUsagePlansAsync(ctx workflow.Context, input *apigateway.GetUsagePlansInput) *APIGatewayGetUsagePlansFuture

	GetVpcLink(ctx workflow.Context, input *apigateway.GetVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error)
	GetVpcLinkAsync(ctx workflow.Context, input *apigateway.GetVpcLinkInput) *APIGatewayGetVpcLinkFuture

	GetVpcLinks(ctx workflow.Context, input *apigateway.GetVpcLinksInput) (*apigateway.GetVpcLinksOutput, error)
	GetVpcLinksAsync(ctx workflow.Context, input *apigateway.GetVpcLinksInput) *APIGatewayGetVpcLinksFuture

	ImportApiKeys(ctx workflow.Context, input *apigateway.ImportApiKeysInput) (*apigateway.ImportApiKeysOutput, error)
	ImportApiKeysAsync(ctx workflow.Context, input *apigateway.ImportApiKeysInput) *APIGatewayImportApiKeysFuture

	ImportDocumentationParts(ctx workflow.Context, input *apigateway.ImportDocumentationPartsInput) (*apigateway.ImportDocumentationPartsOutput, error)
	ImportDocumentationPartsAsync(ctx workflow.Context, input *apigateway.ImportDocumentationPartsInput) *APIGatewayImportDocumentationPartsFuture

	ImportRestApi(ctx workflow.Context, input *apigateway.ImportRestApiInput) (*apigateway.RestApi, error)
	ImportRestApiAsync(ctx workflow.Context, input *apigateway.ImportRestApiInput) *APIGatewayImportRestApiFuture

	PutGatewayResponse(ctx workflow.Context, input *apigateway.PutGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error)
	PutGatewayResponseAsync(ctx workflow.Context, input *apigateway.PutGatewayResponseInput) *APIGatewayPutGatewayResponseFuture

	PutIntegration(ctx workflow.Context, input *apigateway.PutIntegrationInput) (*apigateway.Integration, error)
	PutIntegrationAsync(ctx workflow.Context, input *apigateway.PutIntegrationInput) *APIGatewayPutIntegrationFuture

	PutIntegrationResponse(ctx workflow.Context, input *apigateway.PutIntegrationResponseInput) (*apigateway.IntegrationResponse, error)
	PutIntegrationResponseAsync(ctx workflow.Context, input *apigateway.PutIntegrationResponseInput) *APIGatewayPutIntegrationResponseFuture

	PutMethod(ctx workflow.Context, input *apigateway.PutMethodInput) (*apigateway.Method, error)
	PutMethodAsync(ctx workflow.Context, input *apigateway.PutMethodInput) *APIGatewayPutMethodFuture

	PutMethodResponse(ctx workflow.Context, input *apigateway.PutMethodResponseInput) (*apigateway.MethodResponse, error)
	PutMethodResponseAsync(ctx workflow.Context, input *apigateway.PutMethodResponseInput) *APIGatewayPutMethodResponseFuture

	PutRestApi(ctx workflow.Context, input *apigateway.PutRestApiInput) (*apigateway.RestApi, error)
	PutRestApiAsync(ctx workflow.Context, input *apigateway.PutRestApiInput) *APIGatewayPutRestApiFuture

	TagResource(ctx workflow.Context, input *apigateway.TagResourceInput) (*apigateway.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *apigateway.TagResourceInput) *APIGatewayTagResourceFuture

	TestInvokeAuthorizer(ctx workflow.Context, input *apigateway.TestInvokeAuthorizerInput) (*apigateway.TestInvokeAuthorizerOutput, error)
	TestInvokeAuthorizerAsync(ctx workflow.Context, input *apigateway.TestInvokeAuthorizerInput) *APIGatewayTestInvokeAuthorizerFuture

	TestInvokeMethod(ctx workflow.Context, input *apigateway.TestInvokeMethodInput) (*apigateway.TestInvokeMethodOutput, error)
	TestInvokeMethodAsync(ctx workflow.Context, input *apigateway.TestInvokeMethodInput) *APIGatewayTestInvokeMethodFuture

	UntagResource(ctx workflow.Context, input *apigateway.UntagResourceInput) (*apigateway.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *apigateway.UntagResourceInput) *APIGatewayUntagResourceFuture

	UpdateAccount(ctx workflow.Context, input *apigateway.UpdateAccountInput) (*apigateway.Account, error)
	UpdateAccountAsync(ctx workflow.Context, input *apigateway.UpdateAccountInput) *APIGatewayUpdateAccountFuture

	UpdateApiKey(ctx workflow.Context, input *apigateway.UpdateApiKeyInput) (*apigateway.ApiKey, error)
	UpdateApiKeyAsync(ctx workflow.Context, input *apigateway.UpdateApiKeyInput) *APIGatewayUpdateApiKeyFuture

	UpdateAuthorizer(ctx workflow.Context, input *apigateway.UpdateAuthorizerInput) (*apigateway.Authorizer, error)
	UpdateAuthorizerAsync(ctx workflow.Context, input *apigateway.UpdateAuthorizerInput) *APIGatewayUpdateAuthorizerFuture

	UpdateBasePathMapping(ctx workflow.Context, input *apigateway.UpdateBasePathMappingInput) (*apigateway.BasePathMapping, error)
	UpdateBasePathMappingAsync(ctx workflow.Context, input *apigateway.UpdateBasePathMappingInput) *APIGatewayUpdateBasePathMappingFuture

	UpdateClientCertificate(ctx workflow.Context, input *apigateway.UpdateClientCertificateInput) (*apigateway.ClientCertificate, error)
	UpdateClientCertificateAsync(ctx workflow.Context, input *apigateway.UpdateClientCertificateInput) *APIGatewayUpdateClientCertificateFuture

	UpdateDeployment(ctx workflow.Context, input *apigateway.UpdateDeploymentInput) (*apigateway.Deployment, error)
	UpdateDeploymentAsync(ctx workflow.Context, input *apigateway.UpdateDeploymentInput) *APIGatewayUpdateDeploymentFuture

	UpdateDocumentationPart(ctx workflow.Context, input *apigateway.UpdateDocumentationPartInput) (*apigateway.DocumentationPart, error)
	UpdateDocumentationPartAsync(ctx workflow.Context, input *apigateway.UpdateDocumentationPartInput) *APIGatewayUpdateDocumentationPartFuture

	UpdateDocumentationVersion(ctx workflow.Context, input *apigateway.UpdateDocumentationVersionInput) (*apigateway.DocumentationVersion, error)
	UpdateDocumentationVersionAsync(ctx workflow.Context, input *apigateway.UpdateDocumentationVersionInput) *APIGatewayUpdateDocumentationVersionFuture

	UpdateDomainName(ctx workflow.Context, input *apigateway.UpdateDomainNameInput) (*apigateway.DomainName, error)
	UpdateDomainNameAsync(ctx workflow.Context, input *apigateway.UpdateDomainNameInput) *APIGatewayUpdateDomainNameFuture

	UpdateGatewayResponse(ctx workflow.Context, input *apigateway.UpdateGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error)
	UpdateGatewayResponseAsync(ctx workflow.Context, input *apigateway.UpdateGatewayResponseInput) *APIGatewayUpdateGatewayResponseFuture

	UpdateIntegration(ctx workflow.Context, input *apigateway.UpdateIntegrationInput) (*apigateway.Integration, error)
	UpdateIntegrationAsync(ctx workflow.Context, input *apigateway.UpdateIntegrationInput) *APIGatewayUpdateIntegrationFuture

	UpdateIntegrationResponse(ctx workflow.Context, input *apigateway.UpdateIntegrationResponseInput) (*apigateway.IntegrationResponse, error)
	UpdateIntegrationResponseAsync(ctx workflow.Context, input *apigateway.UpdateIntegrationResponseInput) *APIGatewayUpdateIntegrationResponseFuture

	UpdateMethod(ctx workflow.Context, input *apigateway.UpdateMethodInput) (*apigateway.Method, error)
	UpdateMethodAsync(ctx workflow.Context, input *apigateway.UpdateMethodInput) *APIGatewayUpdateMethodFuture

	UpdateMethodResponse(ctx workflow.Context, input *apigateway.UpdateMethodResponseInput) (*apigateway.MethodResponse, error)
	UpdateMethodResponseAsync(ctx workflow.Context, input *apigateway.UpdateMethodResponseInput) *APIGatewayUpdateMethodResponseFuture

	UpdateModel(ctx workflow.Context, input *apigateway.UpdateModelInput) (*apigateway.Model, error)
	UpdateModelAsync(ctx workflow.Context, input *apigateway.UpdateModelInput) *APIGatewayUpdateModelFuture

	UpdateRequestValidator(ctx workflow.Context, input *apigateway.UpdateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error)
	UpdateRequestValidatorAsync(ctx workflow.Context, input *apigateway.UpdateRequestValidatorInput) *APIGatewayUpdateRequestValidatorFuture

	UpdateResource(ctx workflow.Context, input *apigateway.UpdateResourceInput) (*apigateway.Resource, error)
	UpdateResourceAsync(ctx workflow.Context, input *apigateway.UpdateResourceInput) *APIGatewayUpdateResourceFuture

	UpdateRestApi(ctx workflow.Context, input *apigateway.UpdateRestApiInput) (*apigateway.RestApi, error)
	UpdateRestApiAsync(ctx workflow.Context, input *apigateway.UpdateRestApiInput) *APIGatewayUpdateRestApiFuture

	UpdateStage(ctx workflow.Context, input *apigateway.UpdateStageInput) (*apigateway.Stage, error)
	UpdateStageAsync(ctx workflow.Context, input *apigateway.UpdateStageInput) *APIGatewayUpdateStageFuture

	UpdateUsage(ctx workflow.Context, input *apigateway.UpdateUsageInput) (*apigateway.Usage, error)
	UpdateUsageAsync(ctx workflow.Context, input *apigateway.UpdateUsageInput) *APIGatewayUpdateUsageFuture

	UpdateUsagePlan(ctx workflow.Context, input *apigateway.UpdateUsagePlanInput) (*apigateway.UsagePlan, error)
	UpdateUsagePlanAsync(ctx workflow.Context, input *apigateway.UpdateUsagePlanInput) *APIGatewayUpdateUsagePlanFuture

	UpdateVpcLink(ctx workflow.Context, input *apigateway.UpdateVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error)
	UpdateVpcLinkAsync(ctx workflow.Context, input *apigateway.UpdateVpcLinkInput) *APIGatewayUpdateVpcLinkFuture
}

type APIGatewayStub struct{}

func NewAPIGatewayStub() APIGatewayClient {
	return &APIGatewayStub{}
}

type APIGatewayCreateApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateApiKeyFuture) Get(ctx workflow.Context) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateBasePathMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateDeploymentFuture) Get(ctx workflow.Context) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateDocumentationPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateDocumentationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateModelFuture) Get(ctx workflow.Context) (*apigateway.Model, error) {
	var output apigateway.Model
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateRequestValidatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateResourceFuture) Get(ctx workflow.Context) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateStageFuture) Get(ctx workflow.Context) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateUsagePlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateUsagePlanKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateUsagePlanKeyFuture) Get(ctx workflow.Context) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteApiKeyFuture) Get(ctx workflow.Context) (*apigateway.DeleteApiKeyOutput, error) {
	var output apigateway.DeleteApiKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.DeleteAuthorizerOutput, error) {
	var output apigateway.DeleteAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteBasePathMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.DeleteBasePathMappingOutput, error) {
	var output apigateway.DeleteBasePathMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.DeleteClientCertificateOutput, error) {
	var output apigateway.DeleteClientCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteDeploymentFuture) Get(ctx workflow.Context) (*apigateway.DeleteDeploymentOutput, error) {
	var output apigateway.DeleteDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteDocumentationPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DeleteDocumentationPartOutput, error) {
	var output apigateway.DeleteDocumentationPartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteDocumentationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DeleteDocumentationVersionOutput, error) {
	var output apigateway.DeleteDocumentationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DeleteDomainNameOutput, error) {
	var output apigateway.DeleteDomainNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteGatewayResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.DeleteGatewayResponseOutput, error) {
	var output apigateway.DeleteGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteIntegrationFuture) Get(ctx workflow.Context) (*apigateway.DeleteIntegrationOutput, error) {
	var output apigateway.DeleteIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.DeleteIntegrationResponseOutput, error) {
	var output apigateway.DeleteIntegrationResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteMethodFuture) Get(ctx workflow.Context) (*apigateway.DeleteMethodOutput, error) {
	var output apigateway.DeleteMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteMethodResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.DeleteMethodResponseOutput, error) {
	var output apigateway.DeleteMethodResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteModelFuture) Get(ctx workflow.Context) (*apigateway.DeleteModelOutput, error) {
	var output apigateway.DeleteModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteRequestValidatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.DeleteRequestValidatorOutput, error) {
	var output apigateway.DeleteRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteResourceFuture) Get(ctx workflow.Context) (*apigateway.DeleteResourceOutput, error) {
	var output apigateway.DeleteResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteRestApiFuture) Get(ctx workflow.Context) (*apigateway.DeleteRestApiOutput, error) {
	var output apigateway.DeleteRestApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteStageFuture) Get(ctx workflow.Context) (*apigateway.DeleteStageOutput, error) {
	var output apigateway.DeleteStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteUsagePlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.DeleteUsagePlanOutput, error) {
	var output apigateway.DeleteUsagePlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteUsagePlanKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteUsagePlanKeyFuture) Get(ctx workflow.Context) (*apigateway.DeleteUsagePlanKeyOutput, error) {
	var output apigateway.DeleteUsagePlanKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.DeleteVpcLinkOutput, error) {
	var output apigateway.DeleteVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayFlushStageAuthorizersCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayFlushStageAuthorizersCacheFuture) Get(ctx workflow.Context) (*apigateway.FlushStageAuthorizersCacheOutput, error) {
	var output apigateway.FlushStageAuthorizersCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayFlushStageCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayFlushStageCacheFuture) Get(ctx workflow.Context) (*apigateway.FlushStageCacheOutput, error) {
	var output apigateway.FlushStageCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGenerateClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGenerateClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetAccountFuture) Get(ctx workflow.Context) (*apigateway.Account, error) {
	var output apigateway.Account
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetApiKeyFuture) Get(ctx workflow.Context) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetApiKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetApiKeysFuture) Get(ctx workflow.Context) (*apigateway.GetApiKeysOutput, error) {
	var output apigateway.GetApiKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetAuthorizersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetAuthorizersFuture) Get(ctx workflow.Context) (*apigateway.GetAuthorizersOutput, error) {
	var output apigateway.GetAuthorizersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetBasePathMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetBasePathMappingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetBasePathMappingsFuture) Get(ctx workflow.Context) (*apigateway.GetBasePathMappingsOutput, error) {
	var output apigateway.GetBasePathMappingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetClientCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetClientCertificatesFuture) Get(ctx workflow.Context) (*apigateway.GetClientCertificatesOutput, error) {
	var output apigateway.GetClientCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDeploymentFuture) Get(ctx workflow.Context) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDeploymentsFuture) Get(ctx workflow.Context) (*apigateway.GetDeploymentsOutput, error) {
	var output apigateway.GetDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDocumentationPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDocumentationPartsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDocumentationPartsFuture) Get(ctx workflow.Context) (*apigateway.GetDocumentationPartsOutput, error) {
	var output apigateway.GetDocumentationPartsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDocumentationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDocumentationVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDocumentationVersionsFuture) Get(ctx workflow.Context) (*apigateway.GetDocumentationVersionsOutput, error) {
	var output apigateway.GetDocumentationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDomainNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDomainNamesFuture) Get(ctx workflow.Context) (*apigateway.GetDomainNamesOutput, error) {
	var output apigateway.GetDomainNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetExportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetExportFuture) Get(ctx workflow.Context) (*apigateway.GetExportOutput, error) {
	var output apigateway.GetExportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetGatewayResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetGatewayResponsesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetGatewayResponsesFuture) Get(ctx workflow.Context) (*apigateway.GetGatewayResponsesOutput, error) {
	var output apigateway.GetGatewayResponsesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetIntegrationFuture) Get(ctx workflow.Context) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetMethodFuture) Get(ctx workflow.Context) (*apigateway.Method, error) {
	var output apigateway.Method
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetMethodResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetModelFuture) Get(ctx workflow.Context) (*apigateway.Model, error) {
	var output apigateway.Model
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetModelTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetModelTemplateFuture) Get(ctx workflow.Context) (*apigateway.GetModelTemplateOutput, error) {
	var output apigateway.GetModelTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetModelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetModelsFuture) Get(ctx workflow.Context) (*apigateway.GetModelsOutput, error) {
	var output apigateway.GetModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetRequestValidatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetRequestValidatorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetRequestValidatorsFuture) Get(ctx workflow.Context) (*apigateway.GetRequestValidatorsOutput, error) {
	var output apigateway.GetRequestValidatorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetResourceFuture) Get(ctx workflow.Context) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetResourcesFuture) Get(ctx workflow.Context) (*apigateway.GetResourcesOutput, error) {
	var output apigateway.GetResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetRestApisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetRestApisFuture) Get(ctx workflow.Context) (*apigateway.GetRestApisOutput, error) {
	var output apigateway.GetRestApisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetSdkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetSdkFuture) Get(ctx workflow.Context) (*apigateway.GetSdkOutput, error) {
	var output apigateway.GetSdkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetSdkTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetSdkTypeFuture) Get(ctx workflow.Context) (*apigateway.SdkType, error) {
	var output apigateway.SdkType
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetSdkTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetSdkTypesFuture) Get(ctx workflow.Context) (*apigateway.GetSdkTypesOutput, error) {
	var output apigateway.GetSdkTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetStageFuture) Get(ctx workflow.Context) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetStagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetStagesFuture) Get(ctx workflow.Context) (*apigateway.GetStagesOutput, error) {
	var output apigateway.GetStagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetTagsFuture) Get(ctx workflow.Context) (*apigateway.GetTagsOutput, error) {
	var output apigateway.GetTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetUsageFuture) Get(ctx workflow.Context) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetUsagePlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetUsagePlanKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetUsagePlanKeyFuture) Get(ctx workflow.Context) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetUsagePlanKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetUsagePlanKeysFuture) Get(ctx workflow.Context) (*apigateway.GetUsagePlanKeysOutput, error) {
	var output apigateway.GetUsagePlanKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetUsagePlansFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetUsagePlansFuture) Get(ctx workflow.Context) (*apigateway.GetUsagePlansOutput, error) {
	var output apigateway.GetUsagePlansOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetVpcLinksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetVpcLinksFuture) Get(ctx workflow.Context) (*apigateway.GetVpcLinksOutput, error) {
	var output apigateway.GetVpcLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayImportApiKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayImportApiKeysFuture) Get(ctx workflow.Context) (*apigateway.ImportApiKeysOutput, error) {
	var output apigateway.ImportApiKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayImportDocumentationPartsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayImportDocumentationPartsFuture) Get(ctx workflow.Context) (*apigateway.ImportDocumentationPartsOutput, error) {
	var output apigateway.ImportDocumentationPartsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayImportRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayImportRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayPutGatewayResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayPutGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayPutIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayPutIntegrationFuture) Get(ctx workflow.Context) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayPutIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayPutIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayPutMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayPutMethodFuture) Get(ctx workflow.Context) (*apigateway.Method, error) {
	var output apigateway.Method
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayPutMethodResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayPutMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayPutRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayPutRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayTagResourceFuture) Get(ctx workflow.Context) (*apigateway.TagResourceOutput, error) {
	var output apigateway.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayTestInvokeAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayTestInvokeAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.TestInvokeAuthorizerOutput, error) {
	var output apigateway.TestInvokeAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayTestInvokeMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayTestInvokeMethodFuture) Get(ctx workflow.Context) (*apigateway.TestInvokeMethodOutput, error) {
	var output apigateway.TestInvokeMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUntagResourceFuture) Get(ctx workflow.Context) (*apigateway.UntagResourceOutput, error) {
	var output apigateway.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateAccountFuture) Get(ctx workflow.Context) (*apigateway.Account, error) {
	var output apigateway.Account
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateApiKeyFuture) Get(ctx workflow.Context) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateBasePathMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateDeploymentFuture) Get(ctx workflow.Context) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateDocumentationPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateDocumentationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateGatewayResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateIntegrationFuture) Get(ctx workflow.Context) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateMethodFuture) Get(ctx workflow.Context) (*apigateway.Method, error) {
	var output apigateway.Method
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateMethodResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateModelFuture) Get(ctx workflow.Context) (*apigateway.Model, error) {
	var output apigateway.Model
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateRequestValidatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateResourceFuture) Get(ctx workflow.Context) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateStageFuture) Get(ctx workflow.Context) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateUsageFuture) Get(ctx workflow.Context) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateUsagePlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateApiKey(ctx workflow.Context, input *apigateway.CreateApiKeyInput) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateApiKeyAsync(ctx workflow.Context, input *apigateway.CreateApiKeyInput) *APIGatewayCreateApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateApiKey", input)
	return &APIGatewayCreateApiKeyFuture{Future: future}
}

func (a *APIGatewayStub) CreateAuthorizer(ctx workflow.Context, input *apigateway.CreateAuthorizerInput) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateAuthorizerAsync(ctx workflow.Context, input *apigateway.CreateAuthorizerInput) *APIGatewayCreateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateAuthorizer", input)
	return &APIGatewayCreateAuthorizerFuture{Future: future}
}

func (a *APIGatewayStub) CreateBasePathMapping(ctx workflow.Context, input *apigateway.CreateBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateBasePathMappingAsync(ctx workflow.Context, input *apigateway.CreateBasePathMappingInput) *APIGatewayCreateBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateBasePathMapping", input)
	return &APIGatewayCreateBasePathMappingFuture{Future: future}
}

func (a *APIGatewayStub) CreateDeployment(ctx workflow.Context, input *apigateway.CreateDeploymentInput) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateDeploymentAsync(ctx workflow.Context, input *apigateway.CreateDeploymentInput) *APIGatewayCreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDeployment", input)
	return &APIGatewayCreateDeploymentFuture{Future: future}
}

func (a *APIGatewayStub) CreateDocumentationPart(ctx workflow.Context, input *apigateway.CreateDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateDocumentationPartAsync(ctx workflow.Context, input *apigateway.CreateDocumentationPartInput) *APIGatewayCreateDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDocumentationPart", input)
	return &APIGatewayCreateDocumentationPartFuture{Future: future}
}

func (a *APIGatewayStub) CreateDocumentationVersion(ctx workflow.Context, input *apigateway.CreateDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateDocumentationVersionAsync(ctx workflow.Context, input *apigateway.CreateDocumentationVersionInput) *APIGatewayCreateDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDocumentationVersion", input)
	return &APIGatewayCreateDocumentationVersionFuture{Future: future}
}

func (a *APIGatewayStub) CreateDomainName(ctx workflow.Context, input *apigateway.CreateDomainNameInput) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateDomainNameAsync(ctx workflow.Context, input *apigateway.CreateDomainNameInput) *APIGatewayCreateDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDomainName", input)
	return &APIGatewayCreateDomainNameFuture{Future: future}
}

func (a *APIGatewayStub) CreateModel(ctx workflow.Context, input *apigateway.CreateModelInput) (*apigateway.Model, error) {
	var output apigateway.Model
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateModelAsync(ctx workflow.Context, input *apigateway.CreateModelInput) *APIGatewayCreateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateModel", input)
	return &APIGatewayCreateModelFuture{Future: future}
}

func (a *APIGatewayStub) CreateRequestValidator(ctx workflow.Context, input *apigateway.CreateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateRequestValidatorAsync(ctx workflow.Context, input *apigateway.CreateRequestValidatorInput) *APIGatewayCreateRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateRequestValidator", input)
	return &APIGatewayCreateRequestValidatorFuture{Future: future}
}

func (a *APIGatewayStub) CreateResource(ctx workflow.Context, input *apigateway.CreateResourceInput) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateResourceAsync(ctx workflow.Context, input *apigateway.CreateResourceInput) *APIGatewayCreateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateResource", input)
	return &APIGatewayCreateResourceFuture{Future: future}
}

func (a *APIGatewayStub) CreateRestApi(ctx workflow.Context, input *apigateway.CreateRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateRestApiAsync(ctx workflow.Context, input *apigateway.CreateRestApiInput) *APIGatewayCreateRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateRestApi", input)
	return &APIGatewayCreateRestApiFuture{Future: future}
}

func (a *APIGatewayStub) CreateStage(ctx workflow.Context, input *apigateway.CreateStageInput) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateStage", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateStageAsync(ctx workflow.Context, input *apigateway.CreateStageInput) *APIGatewayCreateStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateStage", input)
	return &APIGatewayCreateStageFuture{Future: future}
}

func (a *APIGatewayStub) CreateUsagePlan(ctx workflow.Context, input *apigateway.CreateUsagePlanInput) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateUsagePlanAsync(ctx workflow.Context, input *apigateway.CreateUsagePlanInput) *APIGatewayCreateUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateUsagePlan", input)
	return &APIGatewayCreateUsagePlanFuture{Future: future}
}

func (a *APIGatewayStub) CreateUsagePlanKey(ctx workflow.Context, input *apigateway.CreateUsagePlanKeyInput) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateUsagePlanKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.CreateUsagePlanKeyInput) *APIGatewayCreateUsagePlanKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateUsagePlanKey", input)
	return &APIGatewayCreateUsagePlanKeyFuture{Future: future}
}

func (a *APIGatewayStub) CreateVpcLink(ctx workflow.Context, input *apigateway.CreateVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateVpcLinkAsync(ctx workflow.Context, input *apigateway.CreateVpcLinkInput) *APIGatewayCreateVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateVpcLink", input)
	return &APIGatewayCreateVpcLinkFuture{Future: future}
}

func (a *APIGatewayStub) DeleteApiKey(ctx workflow.Context, input *apigateway.DeleteApiKeyInput) (*apigateway.DeleteApiKeyOutput, error) {
	var output apigateway.DeleteApiKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteApiKeyAsync(ctx workflow.Context, input *apigateway.DeleteApiKeyInput) *APIGatewayDeleteApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteApiKey", input)
	return &APIGatewayDeleteApiKeyFuture{Future: future}
}

func (a *APIGatewayStub) DeleteAuthorizer(ctx workflow.Context, input *apigateway.DeleteAuthorizerInput) (*apigateway.DeleteAuthorizerOutput, error) {
	var output apigateway.DeleteAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteAuthorizerAsync(ctx workflow.Context, input *apigateway.DeleteAuthorizerInput) *APIGatewayDeleteAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteAuthorizer", input)
	return &APIGatewayDeleteAuthorizerFuture{Future: future}
}

func (a *APIGatewayStub) DeleteBasePathMapping(ctx workflow.Context, input *apigateway.DeleteBasePathMappingInput) (*apigateway.DeleteBasePathMappingOutput, error) {
	var output apigateway.DeleteBasePathMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteBasePathMappingAsync(ctx workflow.Context, input *apigateway.DeleteBasePathMappingInput) *APIGatewayDeleteBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteBasePathMapping", input)
	return &APIGatewayDeleteBasePathMappingFuture{Future: future}
}

func (a *APIGatewayStub) DeleteClientCertificate(ctx workflow.Context, input *apigateway.DeleteClientCertificateInput) (*apigateway.DeleteClientCertificateOutput, error) {
	var output apigateway.DeleteClientCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteClientCertificateAsync(ctx workflow.Context, input *apigateway.DeleteClientCertificateInput) *APIGatewayDeleteClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteClientCertificate", input)
	return &APIGatewayDeleteClientCertificateFuture{Future: future}
}

func (a *APIGatewayStub) DeleteDeployment(ctx workflow.Context, input *apigateway.DeleteDeploymentInput) (*apigateway.DeleteDeploymentOutput, error) {
	var output apigateway.DeleteDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteDeploymentAsync(ctx workflow.Context, input *apigateway.DeleteDeploymentInput) *APIGatewayDeleteDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDeployment", input)
	return &APIGatewayDeleteDeploymentFuture{Future: future}
}

func (a *APIGatewayStub) DeleteDocumentationPart(ctx workflow.Context, input *apigateway.DeleteDocumentationPartInput) (*apigateway.DeleteDocumentationPartOutput, error) {
	var output apigateway.DeleteDocumentationPartOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteDocumentationPartAsync(ctx workflow.Context, input *apigateway.DeleteDocumentationPartInput) *APIGatewayDeleteDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDocumentationPart", input)
	return &APIGatewayDeleteDocumentationPartFuture{Future: future}
}

func (a *APIGatewayStub) DeleteDocumentationVersion(ctx workflow.Context, input *apigateway.DeleteDocumentationVersionInput) (*apigateway.DeleteDocumentationVersionOutput, error) {
	var output apigateway.DeleteDocumentationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteDocumentationVersionAsync(ctx workflow.Context, input *apigateway.DeleteDocumentationVersionInput) *APIGatewayDeleteDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDocumentationVersion", input)
	return &APIGatewayDeleteDocumentationVersionFuture{Future: future}
}

func (a *APIGatewayStub) DeleteDomainName(ctx workflow.Context, input *apigateway.DeleteDomainNameInput) (*apigateway.DeleteDomainNameOutput, error) {
	var output apigateway.DeleteDomainNameOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteDomainNameAsync(ctx workflow.Context, input *apigateway.DeleteDomainNameInput) *APIGatewayDeleteDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDomainName", input)
	return &APIGatewayDeleteDomainNameFuture{Future: future}
}

func (a *APIGatewayStub) DeleteGatewayResponse(ctx workflow.Context, input *apigateway.DeleteGatewayResponseInput) (*apigateway.DeleteGatewayResponseOutput, error) {
	var output apigateway.DeleteGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteGatewayResponseAsync(ctx workflow.Context, input *apigateway.DeleteGatewayResponseInput) *APIGatewayDeleteGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteGatewayResponse", input)
	return &APIGatewayDeleteGatewayResponseFuture{Future: future}
}

func (a *APIGatewayStub) DeleteIntegration(ctx workflow.Context, input *apigateway.DeleteIntegrationInput) (*apigateway.DeleteIntegrationOutput, error) {
	var output apigateway.DeleteIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteIntegrationAsync(ctx workflow.Context, input *apigateway.DeleteIntegrationInput) *APIGatewayDeleteIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteIntegration", input)
	return &APIGatewayDeleteIntegrationFuture{Future: future}
}

func (a *APIGatewayStub) DeleteIntegrationResponse(ctx workflow.Context, input *apigateway.DeleteIntegrationResponseInput) (*apigateway.DeleteIntegrationResponseOutput, error) {
	var output apigateway.DeleteIntegrationResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteIntegrationResponseAsync(ctx workflow.Context, input *apigateway.DeleteIntegrationResponseInput) *APIGatewayDeleteIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteIntegrationResponse", input)
	return &APIGatewayDeleteIntegrationResponseFuture{Future: future}
}

func (a *APIGatewayStub) DeleteMethod(ctx workflow.Context, input *apigateway.DeleteMethodInput) (*apigateway.DeleteMethodOutput, error) {
	var output apigateway.DeleteMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteMethodAsync(ctx workflow.Context, input *apigateway.DeleteMethodInput) *APIGatewayDeleteMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteMethod", input)
	return &APIGatewayDeleteMethodFuture{Future: future}
}

func (a *APIGatewayStub) DeleteMethodResponse(ctx workflow.Context, input *apigateway.DeleteMethodResponseInput) (*apigateway.DeleteMethodResponseOutput, error) {
	var output apigateway.DeleteMethodResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteMethodResponseAsync(ctx workflow.Context, input *apigateway.DeleteMethodResponseInput) *APIGatewayDeleteMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteMethodResponse", input)
	return &APIGatewayDeleteMethodResponseFuture{Future: future}
}

func (a *APIGatewayStub) DeleteModel(ctx workflow.Context, input *apigateway.DeleteModelInput) (*apigateway.DeleteModelOutput, error) {
	var output apigateway.DeleteModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteModel", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteModelAsync(ctx workflow.Context, input *apigateway.DeleteModelInput) *APIGatewayDeleteModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteModel", input)
	return &APIGatewayDeleteModelFuture{Future: future}
}

func (a *APIGatewayStub) DeleteRequestValidator(ctx workflow.Context, input *apigateway.DeleteRequestValidatorInput) (*apigateway.DeleteRequestValidatorOutput, error) {
	var output apigateway.DeleteRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteRequestValidatorAsync(ctx workflow.Context, input *apigateway.DeleteRequestValidatorInput) *APIGatewayDeleteRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteRequestValidator", input)
	return &APIGatewayDeleteRequestValidatorFuture{Future: future}
}

func (a *APIGatewayStub) DeleteResource(ctx workflow.Context, input *apigateway.DeleteResourceInput) (*apigateway.DeleteResourceOutput, error) {
	var output apigateway.DeleteResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteResource", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteResourceAsync(ctx workflow.Context, input *apigateway.DeleteResourceInput) *APIGatewayDeleteResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteResource", input)
	return &APIGatewayDeleteResourceFuture{Future: future}
}

func (a *APIGatewayStub) DeleteRestApi(ctx workflow.Context, input *apigateway.DeleteRestApiInput) (*apigateway.DeleteRestApiOutput, error) {
	var output apigateway.DeleteRestApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteRestApiAsync(ctx workflow.Context, input *apigateway.DeleteRestApiInput) *APIGatewayDeleteRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteRestApi", input)
	return &APIGatewayDeleteRestApiFuture{Future: future}
}

func (a *APIGatewayStub) DeleteStage(ctx workflow.Context, input *apigateway.DeleteStageInput) (*apigateway.DeleteStageOutput, error) {
	var output apigateway.DeleteStageOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteStage", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteStageAsync(ctx workflow.Context, input *apigateway.DeleteStageInput) *APIGatewayDeleteStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteStage", input)
	return &APIGatewayDeleteStageFuture{Future: future}
}

func (a *APIGatewayStub) DeleteUsagePlan(ctx workflow.Context, input *apigateway.DeleteUsagePlanInput) (*apigateway.DeleteUsagePlanOutput, error) {
	var output apigateway.DeleteUsagePlanOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteUsagePlanAsync(ctx workflow.Context, input *apigateway.DeleteUsagePlanInput) *APIGatewayDeleteUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteUsagePlan", input)
	return &APIGatewayDeleteUsagePlanFuture{Future: future}
}

func (a *APIGatewayStub) DeleteUsagePlanKey(ctx workflow.Context, input *apigateway.DeleteUsagePlanKeyInput) (*apigateway.DeleteUsagePlanKeyOutput, error) {
	var output apigateway.DeleteUsagePlanKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteUsagePlanKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.DeleteUsagePlanKeyInput) *APIGatewayDeleteUsagePlanKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteUsagePlanKey", input)
	return &APIGatewayDeleteUsagePlanKeyFuture{Future: future}
}

func (a *APIGatewayStub) DeleteVpcLink(ctx workflow.Context, input *apigateway.DeleteVpcLinkInput) (*apigateway.DeleteVpcLinkOutput, error) {
	var output apigateway.DeleteVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteVpcLinkAsync(ctx workflow.Context, input *apigateway.DeleteVpcLinkInput) *APIGatewayDeleteVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteVpcLink", input)
	return &APIGatewayDeleteVpcLinkFuture{Future: future}
}

func (a *APIGatewayStub) FlushStageAuthorizersCache(ctx workflow.Context, input *apigateway.FlushStageAuthorizersCacheInput) (*apigateway.FlushStageAuthorizersCacheOutput, error) {
	var output apigateway.FlushStageAuthorizersCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.FlushStageAuthorizersCache", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) FlushStageAuthorizersCacheAsync(ctx workflow.Context, input *apigateway.FlushStageAuthorizersCacheInput) *APIGatewayFlushStageAuthorizersCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.FlushStageAuthorizersCache", input)
	return &APIGatewayFlushStageAuthorizersCacheFuture{Future: future}
}

func (a *APIGatewayStub) FlushStageCache(ctx workflow.Context, input *apigateway.FlushStageCacheInput) (*apigateway.FlushStageCacheOutput, error) {
	var output apigateway.FlushStageCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.FlushStageCache", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) FlushStageCacheAsync(ctx workflow.Context, input *apigateway.FlushStageCacheInput) *APIGatewayFlushStageCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.FlushStageCache", input)
	return &APIGatewayFlushStageCacheFuture{Future: future}
}

func (a *APIGatewayStub) GenerateClientCertificate(ctx workflow.Context, input *apigateway.GenerateClientCertificateInput) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GenerateClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GenerateClientCertificateAsync(ctx workflow.Context, input *apigateway.GenerateClientCertificateInput) *APIGatewayGenerateClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GenerateClientCertificate", input)
	return &APIGatewayGenerateClientCertificateFuture{Future: future}
}

func (a *APIGatewayStub) GetAccount(ctx workflow.Context, input *apigateway.GetAccountInput) (*apigateway.Account, error) {
	var output apigateway.Account
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetAccountAsync(ctx workflow.Context, input *apigateway.GetAccountInput) *APIGatewayGetAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetAccount", input)
	return &APIGatewayGetAccountFuture{Future: future}
}

func (a *APIGatewayStub) GetApiKey(ctx workflow.Context, input *apigateway.GetApiKeyInput) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetApiKeyAsync(ctx workflow.Context, input *apigateway.GetApiKeyInput) *APIGatewayGetApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetApiKey", input)
	return &APIGatewayGetApiKeyFuture{Future: future}
}

func (a *APIGatewayStub) GetApiKeys(ctx workflow.Context, input *apigateway.GetApiKeysInput) (*apigateway.GetApiKeysOutput, error) {
	var output apigateway.GetApiKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetApiKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetApiKeysAsync(ctx workflow.Context, input *apigateway.GetApiKeysInput) *APIGatewayGetApiKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetApiKeys", input)
	return &APIGatewayGetApiKeysFuture{Future: future}
}

func (a *APIGatewayStub) GetAuthorizer(ctx workflow.Context, input *apigateway.GetAuthorizerInput) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetAuthorizerAsync(ctx workflow.Context, input *apigateway.GetAuthorizerInput) *APIGatewayGetAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetAuthorizer", input)
	return &APIGatewayGetAuthorizerFuture{Future: future}
}

func (a *APIGatewayStub) GetAuthorizers(ctx workflow.Context, input *apigateway.GetAuthorizersInput) (*apigateway.GetAuthorizersOutput, error) {
	var output apigateway.GetAuthorizersOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetAuthorizers", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetAuthorizersAsync(ctx workflow.Context, input *apigateway.GetAuthorizersInput) *APIGatewayGetAuthorizersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetAuthorizers", input)
	return &APIGatewayGetAuthorizersFuture{Future: future}
}

func (a *APIGatewayStub) GetBasePathMapping(ctx workflow.Context, input *apigateway.GetBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetBasePathMappingAsync(ctx workflow.Context, input *apigateway.GetBasePathMappingInput) *APIGatewayGetBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetBasePathMapping", input)
	return &APIGatewayGetBasePathMappingFuture{Future: future}
}

func (a *APIGatewayStub) GetBasePathMappings(ctx workflow.Context, input *apigateway.GetBasePathMappingsInput) (*apigateway.GetBasePathMappingsOutput, error) {
	var output apigateway.GetBasePathMappingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetBasePathMappings", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetBasePathMappingsAsync(ctx workflow.Context, input *apigateway.GetBasePathMappingsInput) *APIGatewayGetBasePathMappingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetBasePathMappings", input)
	return &APIGatewayGetBasePathMappingsFuture{Future: future}
}

func (a *APIGatewayStub) GetClientCertificate(ctx workflow.Context, input *apigateway.GetClientCertificateInput) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetClientCertificateAsync(ctx workflow.Context, input *apigateway.GetClientCertificateInput) *APIGatewayGetClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetClientCertificate", input)
	return &APIGatewayGetClientCertificateFuture{Future: future}
}

func (a *APIGatewayStub) GetClientCertificates(ctx workflow.Context, input *apigateway.GetClientCertificatesInput) (*apigateway.GetClientCertificatesOutput, error) {
	var output apigateway.GetClientCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetClientCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetClientCertificatesAsync(ctx workflow.Context, input *apigateway.GetClientCertificatesInput) *APIGatewayGetClientCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetClientCertificates", input)
	return &APIGatewayGetClientCertificatesFuture{Future: future}
}

func (a *APIGatewayStub) GetDeployment(ctx workflow.Context, input *apigateway.GetDeploymentInput) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDeploymentAsync(ctx workflow.Context, input *apigateway.GetDeploymentInput) *APIGatewayGetDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDeployment", input)
	return &APIGatewayGetDeploymentFuture{Future: future}
}

func (a *APIGatewayStub) GetDeployments(ctx workflow.Context, input *apigateway.GetDeploymentsInput) (*apigateway.GetDeploymentsOutput, error) {
	var output apigateway.GetDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDeploymentsAsync(ctx workflow.Context, input *apigateway.GetDeploymentsInput) *APIGatewayGetDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDeployments", input)
	return &APIGatewayGetDeploymentsFuture{Future: future}
}

func (a *APIGatewayStub) GetDocumentationPart(ctx workflow.Context, input *apigateway.GetDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDocumentationPartAsync(ctx workflow.Context, input *apigateway.GetDocumentationPartInput) *APIGatewayGetDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationPart", input)
	return &APIGatewayGetDocumentationPartFuture{Future: future}
}

func (a *APIGatewayStub) GetDocumentationParts(ctx workflow.Context, input *apigateway.GetDocumentationPartsInput) (*apigateway.GetDocumentationPartsOutput, error) {
	var output apigateway.GetDocumentationPartsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationParts", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDocumentationPartsAsync(ctx workflow.Context, input *apigateway.GetDocumentationPartsInput) *APIGatewayGetDocumentationPartsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationParts", input)
	return &APIGatewayGetDocumentationPartsFuture{Future: future}
}

func (a *APIGatewayStub) GetDocumentationVersion(ctx workflow.Context, input *apigateway.GetDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDocumentationVersionAsync(ctx workflow.Context, input *apigateway.GetDocumentationVersionInput) *APIGatewayGetDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationVersion", input)
	return &APIGatewayGetDocumentationVersionFuture{Future: future}
}

func (a *APIGatewayStub) GetDocumentationVersions(ctx workflow.Context, input *apigateway.GetDocumentationVersionsInput) (*apigateway.GetDocumentationVersionsOutput, error) {
	var output apigateway.GetDocumentationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDocumentationVersionsAsync(ctx workflow.Context, input *apigateway.GetDocumentationVersionsInput) *APIGatewayGetDocumentationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationVersions", input)
	return &APIGatewayGetDocumentationVersionsFuture{Future: future}
}

func (a *APIGatewayStub) GetDomainName(ctx workflow.Context, input *apigateway.GetDomainNameInput) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDomainNameAsync(ctx workflow.Context, input *apigateway.GetDomainNameInput) *APIGatewayGetDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDomainName", input)
	return &APIGatewayGetDomainNameFuture{Future: future}
}

func (a *APIGatewayStub) GetDomainNames(ctx workflow.Context, input *apigateway.GetDomainNamesInput) (*apigateway.GetDomainNamesOutput, error) {
	var output apigateway.GetDomainNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDomainNames", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDomainNamesAsync(ctx workflow.Context, input *apigateway.GetDomainNamesInput) *APIGatewayGetDomainNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDomainNames", input)
	return &APIGatewayGetDomainNamesFuture{Future: future}
}

func (a *APIGatewayStub) GetExport(ctx workflow.Context, input *apigateway.GetExportInput) (*apigateway.GetExportOutput, error) {
	var output apigateway.GetExportOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetExport", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetExportAsync(ctx workflow.Context, input *apigateway.GetExportInput) *APIGatewayGetExportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetExport", input)
	return &APIGatewayGetExportFuture{Future: future}
}

func (a *APIGatewayStub) GetGatewayResponse(ctx workflow.Context, input *apigateway.GetGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetGatewayResponseAsync(ctx workflow.Context, input *apigateway.GetGatewayResponseInput) *APIGatewayGetGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetGatewayResponse", input)
	return &APIGatewayGetGatewayResponseFuture{Future: future}
}

func (a *APIGatewayStub) GetGatewayResponses(ctx workflow.Context, input *apigateway.GetGatewayResponsesInput) (*apigateway.GetGatewayResponsesOutput, error) {
	var output apigateway.GetGatewayResponsesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetGatewayResponses", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetGatewayResponsesAsync(ctx workflow.Context, input *apigateway.GetGatewayResponsesInput) *APIGatewayGetGatewayResponsesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetGatewayResponses", input)
	return &APIGatewayGetGatewayResponsesFuture{Future: future}
}

func (a *APIGatewayStub) GetIntegration(ctx workflow.Context, input *apigateway.GetIntegrationInput) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetIntegrationAsync(ctx workflow.Context, input *apigateway.GetIntegrationInput) *APIGatewayGetIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetIntegration", input)
	return &APIGatewayGetIntegrationFuture{Future: future}
}

func (a *APIGatewayStub) GetIntegrationResponse(ctx workflow.Context, input *apigateway.GetIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetIntegrationResponseAsync(ctx workflow.Context, input *apigateway.GetIntegrationResponseInput) *APIGatewayGetIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetIntegrationResponse", input)
	return &APIGatewayGetIntegrationResponseFuture{Future: future}
}

func (a *APIGatewayStub) GetMethod(ctx workflow.Context, input *apigateway.GetMethodInput) (*apigateway.Method, error) {
	var output apigateway.Method
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetMethodAsync(ctx workflow.Context, input *apigateway.GetMethodInput) *APIGatewayGetMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetMethod", input)
	return &APIGatewayGetMethodFuture{Future: future}
}

func (a *APIGatewayStub) GetMethodResponse(ctx workflow.Context, input *apigateway.GetMethodResponseInput) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetMethodResponseAsync(ctx workflow.Context, input *apigateway.GetMethodResponseInput) *APIGatewayGetMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetMethodResponse", input)
	return &APIGatewayGetMethodResponseFuture{Future: future}
}

func (a *APIGatewayStub) GetModel(ctx workflow.Context, input *apigateway.GetModelInput) (*apigateway.Model, error) {
	var output apigateway.Model
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetModelAsync(ctx workflow.Context, input *apigateway.GetModelInput) *APIGatewayGetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetModel", input)
	return &APIGatewayGetModelFuture{Future: future}
}

func (a *APIGatewayStub) GetModelTemplate(ctx workflow.Context, input *apigateway.GetModelTemplateInput) (*apigateway.GetModelTemplateOutput, error) {
	var output apigateway.GetModelTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetModelTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetModelTemplateAsync(ctx workflow.Context, input *apigateway.GetModelTemplateInput) *APIGatewayGetModelTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetModelTemplate", input)
	return &APIGatewayGetModelTemplateFuture{Future: future}
}

func (a *APIGatewayStub) GetModels(ctx workflow.Context, input *apigateway.GetModelsInput) (*apigateway.GetModelsOutput, error) {
	var output apigateway.GetModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetModels", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetModelsAsync(ctx workflow.Context, input *apigateway.GetModelsInput) *APIGatewayGetModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetModels", input)
	return &APIGatewayGetModelsFuture{Future: future}
}

func (a *APIGatewayStub) GetRequestValidator(ctx workflow.Context, input *apigateway.GetRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetRequestValidatorAsync(ctx workflow.Context, input *apigateway.GetRequestValidatorInput) *APIGatewayGetRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRequestValidator", input)
	return &APIGatewayGetRequestValidatorFuture{Future: future}
}

func (a *APIGatewayStub) GetRequestValidators(ctx workflow.Context, input *apigateway.GetRequestValidatorsInput) (*apigateway.GetRequestValidatorsOutput, error) {
	var output apigateway.GetRequestValidatorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRequestValidators", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetRequestValidatorsAsync(ctx workflow.Context, input *apigateway.GetRequestValidatorsInput) *APIGatewayGetRequestValidatorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRequestValidators", input)
	return &APIGatewayGetRequestValidatorsFuture{Future: future}
}

func (a *APIGatewayStub) GetResource(ctx workflow.Context, input *apigateway.GetResourceInput) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetResource", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetResourceAsync(ctx workflow.Context, input *apigateway.GetResourceInput) *APIGatewayGetResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetResource", input)
	return &APIGatewayGetResourceFuture{Future: future}
}

func (a *APIGatewayStub) GetResources(ctx workflow.Context, input *apigateway.GetResourcesInput) (*apigateway.GetResourcesOutput, error) {
	var output apigateway.GetResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetResources", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetResourcesAsync(ctx workflow.Context, input *apigateway.GetResourcesInput) *APIGatewayGetResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetResources", input)
	return &APIGatewayGetResourcesFuture{Future: future}
}

func (a *APIGatewayStub) GetRestApi(ctx workflow.Context, input *apigateway.GetRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetRestApiAsync(ctx workflow.Context, input *apigateway.GetRestApiInput) *APIGatewayGetRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRestApi", input)
	return &APIGatewayGetRestApiFuture{Future: future}
}

func (a *APIGatewayStub) GetRestApis(ctx workflow.Context, input *apigateway.GetRestApisInput) (*apigateway.GetRestApisOutput, error) {
	var output apigateway.GetRestApisOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRestApis", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetRestApisAsync(ctx workflow.Context, input *apigateway.GetRestApisInput) *APIGatewayGetRestApisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRestApis", input)
	return &APIGatewayGetRestApisFuture{Future: future}
}

func (a *APIGatewayStub) GetSdk(ctx workflow.Context, input *apigateway.GetSdkInput) (*apigateway.GetSdkOutput, error) {
	var output apigateway.GetSdkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetSdk", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetSdkAsync(ctx workflow.Context, input *apigateway.GetSdkInput) *APIGatewayGetSdkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetSdk", input)
	return &APIGatewayGetSdkFuture{Future: future}
}

func (a *APIGatewayStub) GetSdkType(ctx workflow.Context, input *apigateway.GetSdkTypeInput) (*apigateway.SdkType, error) {
	var output apigateway.SdkType
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetSdkType", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetSdkTypeAsync(ctx workflow.Context, input *apigateway.GetSdkTypeInput) *APIGatewayGetSdkTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetSdkType", input)
	return &APIGatewayGetSdkTypeFuture{Future: future}
}

func (a *APIGatewayStub) GetSdkTypes(ctx workflow.Context, input *apigateway.GetSdkTypesInput) (*apigateway.GetSdkTypesOutput, error) {
	var output apigateway.GetSdkTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetSdkTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetSdkTypesAsync(ctx workflow.Context, input *apigateway.GetSdkTypesInput) *APIGatewayGetSdkTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetSdkTypes", input)
	return &APIGatewayGetSdkTypesFuture{Future: future}
}

func (a *APIGatewayStub) GetStage(ctx workflow.Context, input *apigateway.GetStageInput) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetStage", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetStageAsync(ctx workflow.Context, input *apigateway.GetStageInput) *APIGatewayGetStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetStage", input)
	return &APIGatewayGetStageFuture{Future: future}
}

func (a *APIGatewayStub) GetStages(ctx workflow.Context, input *apigateway.GetStagesInput) (*apigateway.GetStagesOutput, error) {
	var output apigateway.GetStagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetStages", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetStagesAsync(ctx workflow.Context, input *apigateway.GetStagesInput) *APIGatewayGetStagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetStages", input)
	return &APIGatewayGetStagesFuture{Future: future}
}

func (a *APIGatewayStub) GetTags(ctx workflow.Context, input *apigateway.GetTagsInput) (*apigateway.GetTagsOutput, error) {
	var output apigateway.GetTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetTags", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetTagsAsync(ctx workflow.Context, input *apigateway.GetTagsInput) *APIGatewayGetTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetTags", input)
	return &APIGatewayGetTagsFuture{Future: future}
}

func (a *APIGatewayStub) GetUsage(ctx workflow.Context, input *apigateway.GetUsageInput) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetUsageAsync(ctx workflow.Context, input *apigateway.GetUsageInput) *APIGatewayGetUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsage", input)
	return &APIGatewayGetUsageFuture{Future: future}
}

func (a *APIGatewayStub) GetUsagePlan(ctx workflow.Context, input *apigateway.GetUsagePlanInput) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetUsagePlanAsync(ctx workflow.Context, input *apigateway.GetUsagePlanInput) *APIGatewayGetUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlan", input)
	return &APIGatewayGetUsagePlanFuture{Future: future}
}

func (a *APIGatewayStub) GetUsagePlanKey(ctx workflow.Context, input *apigateway.GetUsagePlanKeyInput) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlanKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.GetUsagePlanKeyInput) *APIGatewayGetUsagePlanKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlanKey", input)
	return &APIGatewayGetUsagePlanKeyFuture{Future: future}
}

func (a *APIGatewayStub) GetUsagePlanKeys(ctx workflow.Context, input *apigateway.GetUsagePlanKeysInput) (*apigateway.GetUsagePlanKeysOutput, error) {
	var output apigateway.GetUsagePlanKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlanKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetUsagePlanKeysAsync(ctx workflow.Context, input *apigateway.GetUsagePlanKeysInput) *APIGatewayGetUsagePlanKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlanKeys", input)
	return &APIGatewayGetUsagePlanKeysFuture{Future: future}
}

func (a *APIGatewayStub) GetUsagePlans(ctx workflow.Context, input *apigateway.GetUsagePlansInput) (*apigateway.GetUsagePlansOutput, error) {
	var output apigateway.GetUsagePlansOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlans", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetUsagePlansAsync(ctx workflow.Context, input *apigateway.GetUsagePlansInput) *APIGatewayGetUsagePlansFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlans", input)
	return &APIGatewayGetUsagePlansFuture{Future: future}
}

func (a *APIGatewayStub) GetVpcLink(ctx workflow.Context, input *apigateway.GetVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetVpcLinkAsync(ctx workflow.Context, input *apigateway.GetVpcLinkInput) *APIGatewayGetVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetVpcLink", input)
	return &APIGatewayGetVpcLinkFuture{Future: future}
}

func (a *APIGatewayStub) GetVpcLinks(ctx workflow.Context, input *apigateway.GetVpcLinksInput) (*apigateway.GetVpcLinksOutput, error) {
	var output apigateway.GetVpcLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetVpcLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetVpcLinksAsync(ctx workflow.Context, input *apigateway.GetVpcLinksInput) *APIGatewayGetVpcLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetVpcLinks", input)
	return &APIGatewayGetVpcLinksFuture{Future: future}
}

func (a *APIGatewayStub) ImportApiKeys(ctx workflow.Context, input *apigateway.ImportApiKeysInput) (*apigateway.ImportApiKeysOutput, error) {
	var output apigateway.ImportApiKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.ImportApiKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) ImportApiKeysAsync(ctx workflow.Context, input *apigateway.ImportApiKeysInput) *APIGatewayImportApiKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.ImportApiKeys", input)
	return &APIGatewayImportApiKeysFuture{Future: future}
}

func (a *APIGatewayStub) ImportDocumentationParts(ctx workflow.Context, input *apigateway.ImportDocumentationPartsInput) (*apigateway.ImportDocumentationPartsOutput, error) {
	var output apigateway.ImportDocumentationPartsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.ImportDocumentationParts", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) ImportDocumentationPartsAsync(ctx workflow.Context, input *apigateway.ImportDocumentationPartsInput) *APIGatewayImportDocumentationPartsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.ImportDocumentationParts", input)
	return &APIGatewayImportDocumentationPartsFuture{Future: future}
}

func (a *APIGatewayStub) ImportRestApi(ctx workflow.Context, input *apigateway.ImportRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.ImportRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) ImportRestApiAsync(ctx workflow.Context, input *apigateway.ImportRestApiInput) *APIGatewayImportRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.ImportRestApi", input)
	return &APIGatewayImportRestApiFuture{Future: future}
}

func (a *APIGatewayStub) PutGatewayResponse(ctx workflow.Context, input *apigateway.PutGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.PutGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) PutGatewayResponseAsync(ctx workflow.Context, input *apigateway.PutGatewayResponseInput) *APIGatewayPutGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.PutGatewayResponse", input)
	return &APIGatewayPutGatewayResponseFuture{Future: future}
}

func (a *APIGatewayStub) PutIntegration(ctx workflow.Context, input *apigateway.PutIntegrationInput) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.PutIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) PutIntegrationAsync(ctx workflow.Context, input *apigateway.PutIntegrationInput) *APIGatewayPutIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.PutIntegration", input)
	return &APIGatewayPutIntegrationFuture{Future: future}
}

func (a *APIGatewayStub) PutIntegrationResponse(ctx workflow.Context, input *apigateway.PutIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.PutIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) PutIntegrationResponseAsync(ctx workflow.Context, input *apigateway.PutIntegrationResponseInput) *APIGatewayPutIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.PutIntegrationResponse", input)
	return &APIGatewayPutIntegrationResponseFuture{Future: future}
}

func (a *APIGatewayStub) PutMethod(ctx workflow.Context, input *apigateway.PutMethodInput) (*apigateway.Method, error) {
	var output apigateway.Method
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.PutMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) PutMethodAsync(ctx workflow.Context, input *apigateway.PutMethodInput) *APIGatewayPutMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.PutMethod", input)
	return &APIGatewayPutMethodFuture{Future: future}
}

func (a *APIGatewayStub) PutMethodResponse(ctx workflow.Context, input *apigateway.PutMethodResponseInput) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.PutMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) PutMethodResponseAsync(ctx workflow.Context, input *apigateway.PutMethodResponseInput) *APIGatewayPutMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.PutMethodResponse", input)
	return &APIGatewayPutMethodResponseFuture{Future: future}
}

func (a *APIGatewayStub) PutRestApi(ctx workflow.Context, input *apigateway.PutRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.PutRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) PutRestApiAsync(ctx workflow.Context, input *apigateway.PutRestApiInput) *APIGatewayPutRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.PutRestApi", input)
	return &APIGatewayPutRestApiFuture{Future: future}
}

func (a *APIGatewayStub) TagResource(ctx workflow.Context, input *apigateway.TagResourceInput) (*apigateway.TagResourceOutput, error) {
	var output apigateway.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) TagResourceAsync(ctx workflow.Context, input *apigateway.TagResourceInput) *APIGatewayTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.TagResource", input)
	return &APIGatewayTagResourceFuture{Future: future}
}

func (a *APIGatewayStub) TestInvokeAuthorizer(ctx workflow.Context, input *apigateway.TestInvokeAuthorizerInput) (*apigateway.TestInvokeAuthorizerOutput, error) {
	var output apigateway.TestInvokeAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.TestInvokeAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) TestInvokeAuthorizerAsync(ctx workflow.Context, input *apigateway.TestInvokeAuthorizerInput) *APIGatewayTestInvokeAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.TestInvokeAuthorizer", input)
	return &APIGatewayTestInvokeAuthorizerFuture{Future: future}
}

func (a *APIGatewayStub) TestInvokeMethod(ctx workflow.Context, input *apigateway.TestInvokeMethodInput) (*apigateway.TestInvokeMethodOutput, error) {
	var output apigateway.TestInvokeMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.TestInvokeMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) TestInvokeMethodAsync(ctx workflow.Context, input *apigateway.TestInvokeMethodInput) *APIGatewayTestInvokeMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.TestInvokeMethod", input)
	return &APIGatewayTestInvokeMethodFuture{Future: future}
}

func (a *APIGatewayStub) UntagResource(ctx workflow.Context, input *apigateway.UntagResourceInput) (*apigateway.UntagResourceOutput, error) {
	var output apigateway.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UntagResourceAsync(ctx workflow.Context, input *apigateway.UntagResourceInput) *APIGatewayUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UntagResource", input)
	return &APIGatewayUntagResourceFuture{Future: future}
}

func (a *APIGatewayStub) UpdateAccount(ctx workflow.Context, input *apigateway.UpdateAccountInput) (*apigateway.Account, error) {
	var output apigateway.Account
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateAccountAsync(ctx workflow.Context, input *apigateway.UpdateAccountInput) *APIGatewayUpdateAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateAccount", input)
	return &APIGatewayUpdateAccountFuture{Future: future}
}

func (a *APIGatewayStub) UpdateApiKey(ctx workflow.Context, input *apigateway.UpdateApiKeyInput) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateApiKeyAsync(ctx workflow.Context, input *apigateway.UpdateApiKeyInput) *APIGatewayUpdateApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateApiKey", input)
	return &APIGatewayUpdateApiKeyFuture{Future: future}
}

func (a *APIGatewayStub) UpdateAuthorizer(ctx workflow.Context, input *apigateway.UpdateAuthorizerInput) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateAuthorizerAsync(ctx workflow.Context, input *apigateway.UpdateAuthorizerInput) *APIGatewayUpdateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateAuthorizer", input)
	return &APIGatewayUpdateAuthorizerFuture{Future: future}
}

func (a *APIGatewayStub) UpdateBasePathMapping(ctx workflow.Context, input *apigateway.UpdateBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateBasePathMappingAsync(ctx workflow.Context, input *apigateway.UpdateBasePathMappingInput) *APIGatewayUpdateBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateBasePathMapping", input)
	return &APIGatewayUpdateBasePathMappingFuture{Future: future}
}

func (a *APIGatewayStub) UpdateClientCertificate(ctx workflow.Context, input *apigateway.UpdateClientCertificateInput) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateClientCertificateAsync(ctx workflow.Context, input *apigateway.UpdateClientCertificateInput) *APIGatewayUpdateClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateClientCertificate", input)
	return &APIGatewayUpdateClientCertificateFuture{Future: future}
}

func (a *APIGatewayStub) UpdateDeployment(ctx workflow.Context, input *apigateway.UpdateDeploymentInput) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateDeploymentAsync(ctx workflow.Context, input *apigateway.UpdateDeploymentInput) *APIGatewayUpdateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDeployment", input)
	return &APIGatewayUpdateDeploymentFuture{Future: future}
}

func (a *APIGatewayStub) UpdateDocumentationPart(ctx workflow.Context, input *apigateway.UpdateDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateDocumentationPartAsync(ctx workflow.Context, input *apigateway.UpdateDocumentationPartInput) *APIGatewayUpdateDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDocumentationPart", input)
	return &APIGatewayUpdateDocumentationPartFuture{Future: future}
}

func (a *APIGatewayStub) UpdateDocumentationVersion(ctx workflow.Context, input *apigateway.UpdateDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateDocumentationVersionAsync(ctx workflow.Context, input *apigateway.UpdateDocumentationVersionInput) *APIGatewayUpdateDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDocumentationVersion", input)
	return &APIGatewayUpdateDocumentationVersionFuture{Future: future}
}

func (a *APIGatewayStub) UpdateDomainName(ctx workflow.Context, input *apigateway.UpdateDomainNameInput) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateDomainNameAsync(ctx workflow.Context, input *apigateway.UpdateDomainNameInput) *APIGatewayUpdateDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDomainName", input)
	return &APIGatewayUpdateDomainNameFuture{Future: future}
}

func (a *APIGatewayStub) UpdateGatewayResponse(ctx workflow.Context, input *apigateway.UpdateGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateGatewayResponseAsync(ctx workflow.Context, input *apigateway.UpdateGatewayResponseInput) *APIGatewayUpdateGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateGatewayResponse", input)
	return &APIGatewayUpdateGatewayResponseFuture{Future: future}
}

func (a *APIGatewayStub) UpdateIntegration(ctx workflow.Context, input *apigateway.UpdateIntegrationInput) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateIntegrationAsync(ctx workflow.Context, input *apigateway.UpdateIntegrationInput) *APIGatewayUpdateIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateIntegration", input)
	return &APIGatewayUpdateIntegrationFuture{Future: future}
}

func (a *APIGatewayStub) UpdateIntegrationResponse(ctx workflow.Context, input *apigateway.UpdateIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateIntegrationResponseAsync(ctx workflow.Context, input *apigateway.UpdateIntegrationResponseInput) *APIGatewayUpdateIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateIntegrationResponse", input)
	return &APIGatewayUpdateIntegrationResponseFuture{Future: future}
}

func (a *APIGatewayStub) UpdateMethod(ctx workflow.Context, input *apigateway.UpdateMethodInput) (*apigateway.Method, error) {
	var output apigateway.Method
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateMethodAsync(ctx workflow.Context, input *apigateway.UpdateMethodInput) *APIGatewayUpdateMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateMethod", input)
	return &APIGatewayUpdateMethodFuture{Future: future}
}

func (a *APIGatewayStub) UpdateMethodResponse(ctx workflow.Context, input *apigateway.UpdateMethodResponseInput) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateMethodResponseAsync(ctx workflow.Context, input *apigateway.UpdateMethodResponseInput) *APIGatewayUpdateMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateMethodResponse", input)
	return &APIGatewayUpdateMethodResponseFuture{Future: future}
}

func (a *APIGatewayStub) UpdateModel(ctx workflow.Context, input *apigateway.UpdateModelInput) (*apigateway.Model, error) {
	var output apigateway.Model
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateModelAsync(ctx workflow.Context, input *apigateway.UpdateModelInput) *APIGatewayUpdateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateModel", input)
	return &APIGatewayUpdateModelFuture{Future: future}
}

func (a *APIGatewayStub) UpdateRequestValidator(ctx workflow.Context, input *apigateway.UpdateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateRequestValidatorAsync(ctx workflow.Context, input *apigateway.UpdateRequestValidatorInput) *APIGatewayUpdateRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateRequestValidator", input)
	return &APIGatewayUpdateRequestValidatorFuture{Future: future}
}

func (a *APIGatewayStub) UpdateResource(ctx workflow.Context, input *apigateway.UpdateResourceInput) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateResourceAsync(ctx workflow.Context, input *apigateway.UpdateResourceInput) *APIGatewayUpdateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateResource", input)
	return &APIGatewayUpdateResourceFuture{Future: future}
}

func (a *APIGatewayStub) UpdateRestApi(ctx workflow.Context, input *apigateway.UpdateRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateRestApiAsync(ctx workflow.Context, input *apigateway.UpdateRestApiInput) *APIGatewayUpdateRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateRestApi", input)
	return &APIGatewayUpdateRestApiFuture{Future: future}
}

func (a *APIGatewayStub) UpdateStage(ctx workflow.Context, input *apigateway.UpdateStageInput) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateStage", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateStageAsync(ctx workflow.Context, input *apigateway.UpdateStageInput) *APIGatewayUpdateStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateStage", input)
	return &APIGatewayUpdateStageFuture{Future: future}
}

func (a *APIGatewayStub) UpdateUsage(ctx workflow.Context, input *apigateway.UpdateUsageInput) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateUsageAsync(ctx workflow.Context, input *apigateway.UpdateUsageInput) *APIGatewayUpdateUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateUsage", input)
	return &APIGatewayUpdateUsageFuture{Future: future}
}

func (a *APIGatewayStub) UpdateUsagePlan(ctx workflow.Context, input *apigateway.UpdateUsagePlanInput) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateUsagePlanAsync(ctx workflow.Context, input *apigateway.UpdateUsagePlanInput) *APIGatewayUpdateUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateUsagePlan", input)
	return &APIGatewayUpdateUsagePlanFuture{Future: future}
}

func (a *APIGatewayStub) UpdateVpcLink(ctx workflow.Context, input *apigateway.UpdateVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateVpcLinkAsync(ctx workflow.Context, input *apigateway.UpdateVpcLinkInput) *APIGatewayUpdateVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateVpcLink", input)
	return &APIGatewayUpdateVpcLinkFuture{Future: future}
}
