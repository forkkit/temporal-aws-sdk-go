// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/apigateway"
	"go.temporal.io/sdk/workflow"
)

type APIGatewayClient interface {
	CreateApiKey(ctx workflow.Context, input *apigateway.CreateApiKeyInput) (*apigateway.ApiKey, error)
	CreateApiKeyAsync(ctx workflow.Context, input *apigateway.CreateApiKeyInput) *ApigatewayCreateApiKeyFuture

	CreateAuthorizer(ctx workflow.Context, input *apigateway.CreateAuthorizerInput) (*apigateway.Authorizer, error)
	CreateAuthorizerAsync(ctx workflow.Context, input *apigateway.CreateAuthorizerInput) *ApigatewayCreateAuthorizerFuture

	CreateBasePathMapping(ctx workflow.Context, input *apigateway.CreateBasePathMappingInput) (*apigateway.BasePathMapping, error)
	CreateBasePathMappingAsync(ctx workflow.Context, input *apigateway.CreateBasePathMappingInput) *ApigatewayCreateBasePathMappingFuture

	CreateDeployment(ctx workflow.Context, input *apigateway.CreateDeploymentInput) (*apigateway.Deployment, error)
	CreateDeploymentAsync(ctx workflow.Context, input *apigateway.CreateDeploymentInput) *ApigatewayCreateDeploymentFuture

	CreateDocumentationPart(ctx workflow.Context, input *apigateway.CreateDocumentationPartInput) (*apigateway.DocumentationPart, error)
	CreateDocumentationPartAsync(ctx workflow.Context, input *apigateway.CreateDocumentationPartInput) *ApigatewayCreateDocumentationPartFuture

	CreateDocumentationVersion(ctx workflow.Context, input *apigateway.CreateDocumentationVersionInput) (*apigateway.DocumentationVersion, error)
	CreateDocumentationVersionAsync(ctx workflow.Context, input *apigateway.CreateDocumentationVersionInput) *ApigatewayCreateDocumentationVersionFuture

	CreateDomainName(ctx workflow.Context, input *apigateway.CreateDomainNameInput) (*apigateway.DomainName, error)
	CreateDomainNameAsync(ctx workflow.Context, input *apigateway.CreateDomainNameInput) *ApigatewayCreateDomainNameFuture

	CreateModel(ctx workflow.Context, input *apigateway.CreateModelInput) (*apigateway.Model, error)
	CreateModelAsync(ctx workflow.Context, input *apigateway.CreateModelInput) *ApigatewayCreateModelFuture

	CreateRequestValidator(ctx workflow.Context, input *apigateway.CreateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error)
	CreateRequestValidatorAsync(ctx workflow.Context, input *apigateway.CreateRequestValidatorInput) *ApigatewayCreateRequestValidatorFuture

	CreateResource(ctx workflow.Context, input *apigateway.CreateResourceInput) (*apigateway.Resource, error)
	CreateResourceAsync(ctx workflow.Context, input *apigateway.CreateResourceInput) *ApigatewayCreateResourceFuture

	CreateRestApi(ctx workflow.Context, input *apigateway.CreateRestApiInput) (*apigateway.RestApi, error)
	CreateRestApiAsync(ctx workflow.Context, input *apigateway.CreateRestApiInput) *ApigatewayCreateRestApiFuture

	CreateStage(ctx workflow.Context, input *apigateway.CreateStageInput) (*apigateway.Stage, error)
	CreateStageAsync(ctx workflow.Context, input *apigateway.CreateStageInput) *ApigatewayCreateStageFuture

	CreateUsagePlan(ctx workflow.Context, input *apigateway.CreateUsagePlanInput) (*apigateway.UsagePlan, error)
	CreateUsagePlanAsync(ctx workflow.Context, input *apigateway.CreateUsagePlanInput) *ApigatewayCreateUsagePlanFuture

	CreateUsagePlanKey(ctx workflow.Context, input *apigateway.CreateUsagePlanKeyInput) (*apigateway.UsagePlanKey, error)
	CreateUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.CreateUsagePlanKeyInput) *ApigatewayCreateUsagePlanKeyFuture

	CreateVpcLink(ctx workflow.Context, input *apigateway.CreateVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error)
	CreateVpcLinkAsync(ctx workflow.Context, input *apigateway.CreateVpcLinkInput) *ApigatewayCreateVpcLinkFuture

	DeleteApiKey(ctx workflow.Context, input *apigateway.DeleteApiKeyInput) (*apigateway.DeleteApiKeyOutput, error)
	DeleteApiKeyAsync(ctx workflow.Context, input *apigateway.DeleteApiKeyInput) *ApigatewayDeleteApiKeyFuture

	DeleteAuthorizer(ctx workflow.Context, input *apigateway.DeleteAuthorizerInput) (*apigateway.DeleteAuthorizerOutput, error)
	DeleteAuthorizerAsync(ctx workflow.Context, input *apigateway.DeleteAuthorizerInput) *ApigatewayDeleteAuthorizerFuture

	DeleteBasePathMapping(ctx workflow.Context, input *apigateway.DeleteBasePathMappingInput) (*apigateway.DeleteBasePathMappingOutput, error)
	DeleteBasePathMappingAsync(ctx workflow.Context, input *apigateway.DeleteBasePathMappingInput) *ApigatewayDeleteBasePathMappingFuture

	DeleteClientCertificate(ctx workflow.Context, input *apigateway.DeleteClientCertificateInput) (*apigateway.DeleteClientCertificateOutput, error)
	DeleteClientCertificateAsync(ctx workflow.Context, input *apigateway.DeleteClientCertificateInput) *ApigatewayDeleteClientCertificateFuture

	DeleteDeployment(ctx workflow.Context, input *apigateway.DeleteDeploymentInput) (*apigateway.DeleteDeploymentOutput, error)
	DeleteDeploymentAsync(ctx workflow.Context, input *apigateway.DeleteDeploymentInput) *ApigatewayDeleteDeploymentFuture

	DeleteDocumentationPart(ctx workflow.Context, input *apigateway.DeleteDocumentationPartInput) (*apigateway.DeleteDocumentationPartOutput, error)
	DeleteDocumentationPartAsync(ctx workflow.Context, input *apigateway.DeleteDocumentationPartInput) *ApigatewayDeleteDocumentationPartFuture

	DeleteDocumentationVersion(ctx workflow.Context, input *apigateway.DeleteDocumentationVersionInput) (*apigateway.DeleteDocumentationVersionOutput, error)
	DeleteDocumentationVersionAsync(ctx workflow.Context, input *apigateway.DeleteDocumentationVersionInput) *ApigatewayDeleteDocumentationVersionFuture

	DeleteDomainName(ctx workflow.Context, input *apigateway.DeleteDomainNameInput) (*apigateway.DeleteDomainNameOutput, error)
	DeleteDomainNameAsync(ctx workflow.Context, input *apigateway.DeleteDomainNameInput) *ApigatewayDeleteDomainNameFuture

	DeleteGatewayResponse(ctx workflow.Context, input *apigateway.DeleteGatewayResponseInput) (*apigateway.DeleteGatewayResponseOutput, error)
	DeleteGatewayResponseAsync(ctx workflow.Context, input *apigateway.DeleteGatewayResponseInput) *ApigatewayDeleteGatewayResponseFuture

	DeleteIntegration(ctx workflow.Context, input *apigateway.DeleteIntegrationInput) (*apigateway.DeleteIntegrationOutput, error)
	DeleteIntegrationAsync(ctx workflow.Context, input *apigateway.DeleteIntegrationInput) *ApigatewayDeleteIntegrationFuture

	DeleteIntegrationResponse(ctx workflow.Context, input *apigateway.DeleteIntegrationResponseInput) (*apigateway.DeleteIntegrationResponseOutput, error)
	DeleteIntegrationResponseAsync(ctx workflow.Context, input *apigateway.DeleteIntegrationResponseInput) *ApigatewayDeleteIntegrationResponseFuture

	DeleteMethod(ctx workflow.Context, input *apigateway.DeleteMethodInput) (*apigateway.DeleteMethodOutput, error)
	DeleteMethodAsync(ctx workflow.Context, input *apigateway.DeleteMethodInput) *ApigatewayDeleteMethodFuture

	DeleteMethodResponse(ctx workflow.Context, input *apigateway.DeleteMethodResponseInput) (*apigateway.DeleteMethodResponseOutput, error)
	DeleteMethodResponseAsync(ctx workflow.Context, input *apigateway.DeleteMethodResponseInput) *ApigatewayDeleteMethodResponseFuture

	DeleteModel(ctx workflow.Context, input *apigateway.DeleteModelInput) (*apigateway.DeleteModelOutput, error)
	DeleteModelAsync(ctx workflow.Context, input *apigateway.DeleteModelInput) *ApigatewayDeleteModelFuture

	DeleteRequestValidator(ctx workflow.Context, input *apigateway.DeleteRequestValidatorInput) (*apigateway.DeleteRequestValidatorOutput, error)
	DeleteRequestValidatorAsync(ctx workflow.Context, input *apigateway.DeleteRequestValidatorInput) *ApigatewayDeleteRequestValidatorFuture

	DeleteResource(ctx workflow.Context, input *apigateway.DeleteResourceInput) (*apigateway.DeleteResourceOutput, error)
	DeleteResourceAsync(ctx workflow.Context, input *apigateway.DeleteResourceInput) *ApigatewayDeleteResourceFuture

	DeleteRestApi(ctx workflow.Context, input *apigateway.DeleteRestApiInput) (*apigateway.DeleteRestApiOutput, error)
	DeleteRestApiAsync(ctx workflow.Context, input *apigateway.DeleteRestApiInput) *ApigatewayDeleteRestApiFuture

	DeleteStage(ctx workflow.Context, input *apigateway.DeleteStageInput) (*apigateway.DeleteStageOutput, error)
	DeleteStageAsync(ctx workflow.Context, input *apigateway.DeleteStageInput) *ApigatewayDeleteStageFuture

	DeleteUsagePlan(ctx workflow.Context, input *apigateway.DeleteUsagePlanInput) (*apigateway.DeleteUsagePlanOutput, error)
	DeleteUsagePlanAsync(ctx workflow.Context, input *apigateway.DeleteUsagePlanInput) *ApigatewayDeleteUsagePlanFuture

	DeleteUsagePlanKey(ctx workflow.Context, input *apigateway.DeleteUsagePlanKeyInput) (*apigateway.DeleteUsagePlanKeyOutput, error)
	DeleteUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.DeleteUsagePlanKeyInput) *ApigatewayDeleteUsagePlanKeyFuture

	DeleteVpcLink(ctx workflow.Context, input *apigateway.DeleteVpcLinkInput) (*apigateway.DeleteVpcLinkOutput, error)
	DeleteVpcLinkAsync(ctx workflow.Context, input *apigateway.DeleteVpcLinkInput) *ApigatewayDeleteVpcLinkFuture

	FlushStageAuthorizersCache(ctx workflow.Context, input *apigateway.FlushStageAuthorizersCacheInput) (*apigateway.FlushStageAuthorizersCacheOutput, error)
	FlushStageAuthorizersCacheAsync(ctx workflow.Context, input *apigateway.FlushStageAuthorizersCacheInput) *ApigatewayFlushStageAuthorizersCacheFuture

	FlushStageCache(ctx workflow.Context, input *apigateway.FlushStageCacheInput) (*apigateway.FlushStageCacheOutput, error)
	FlushStageCacheAsync(ctx workflow.Context, input *apigateway.FlushStageCacheInput) *ApigatewayFlushStageCacheFuture

	GenerateClientCertificate(ctx workflow.Context, input *apigateway.GenerateClientCertificateInput) (*apigateway.ClientCertificate, error)
	GenerateClientCertificateAsync(ctx workflow.Context, input *apigateway.GenerateClientCertificateInput) *ApigatewayGenerateClientCertificateFuture

	GetAccount(ctx workflow.Context, input *apigateway.GetAccountInput) (*apigateway.Account, error)
	GetAccountAsync(ctx workflow.Context, input *apigateway.GetAccountInput) *ApigatewayGetAccountFuture

	GetApiKey(ctx workflow.Context, input *apigateway.GetApiKeyInput) (*apigateway.ApiKey, error)
	GetApiKeyAsync(ctx workflow.Context, input *apigateway.GetApiKeyInput) *ApigatewayGetApiKeyFuture

	GetApiKeys(ctx workflow.Context, input *apigateway.GetApiKeysInput) (*apigateway.GetApiKeysOutput, error)
	GetApiKeysAsync(ctx workflow.Context, input *apigateway.GetApiKeysInput) *ApigatewayGetApiKeysFuture

	GetAuthorizer(ctx workflow.Context, input *apigateway.GetAuthorizerInput) (*apigateway.Authorizer, error)
	GetAuthorizerAsync(ctx workflow.Context, input *apigateway.GetAuthorizerInput) *ApigatewayGetAuthorizerFuture

	GetAuthorizers(ctx workflow.Context, input *apigateway.GetAuthorizersInput) (*apigateway.GetAuthorizersOutput, error)
	GetAuthorizersAsync(ctx workflow.Context, input *apigateway.GetAuthorizersInput) *ApigatewayGetAuthorizersFuture

	GetBasePathMapping(ctx workflow.Context, input *apigateway.GetBasePathMappingInput) (*apigateway.BasePathMapping, error)
	GetBasePathMappingAsync(ctx workflow.Context, input *apigateway.GetBasePathMappingInput) *ApigatewayGetBasePathMappingFuture

	GetBasePathMappings(ctx workflow.Context, input *apigateway.GetBasePathMappingsInput) (*apigateway.GetBasePathMappingsOutput, error)
	GetBasePathMappingsAsync(ctx workflow.Context, input *apigateway.GetBasePathMappingsInput) *ApigatewayGetBasePathMappingsFuture

	GetClientCertificate(ctx workflow.Context, input *apigateway.GetClientCertificateInput) (*apigateway.ClientCertificate, error)
	GetClientCertificateAsync(ctx workflow.Context, input *apigateway.GetClientCertificateInput) *ApigatewayGetClientCertificateFuture

	GetClientCertificates(ctx workflow.Context, input *apigateway.GetClientCertificatesInput) (*apigateway.GetClientCertificatesOutput, error)
	GetClientCertificatesAsync(ctx workflow.Context, input *apigateway.GetClientCertificatesInput) *ApigatewayGetClientCertificatesFuture

	GetDeployment(ctx workflow.Context, input *apigateway.GetDeploymentInput) (*apigateway.Deployment, error)
	GetDeploymentAsync(ctx workflow.Context, input *apigateway.GetDeploymentInput) *ApigatewayGetDeploymentFuture

	GetDeployments(ctx workflow.Context, input *apigateway.GetDeploymentsInput) (*apigateway.GetDeploymentsOutput, error)
	GetDeploymentsAsync(ctx workflow.Context, input *apigateway.GetDeploymentsInput) *ApigatewayGetDeploymentsFuture

	GetDocumentationPart(ctx workflow.Context, input *apigateway.GetDocumentationPartInput) (*apigateway.DocumentationPart, error)
	GetDocumentationPartAsync(ctx workflow.Context, input *apigateway.GetDocumentationPartInput) *ApigatewayGetDocumentationPartFuture

	GetDocumentationParts(ctx workflow.Context, input *apigateway.GetDocumentationPartsInput) (*apigateway.GetDocumentationPartsOutput, error)
	GetDocumentationPartsAsync(ctx workflow.Context, input *apigateway.GetDocumentationPartsInput) *ApigatewayGetDocumentationPartsFuture

	GetDocumentationVersion(ctx workflow.Context, input *apigateway.GetDocumentationVersionInput) (*apigateway.DocumentationVersion, error)
	GetDocumentationVersionAsync(ctx workflow.Context, input *apigateway.GetDocumentationVersionInput) *ApigatewayGetDocumentationVersionFuture

	GetDocumentationVersions(ctx workflow.Context, input *apigateway.GetDocumentationVersionsInput) (*apigateway.GetDocumentationVersionsOutput, error)
	GetDocumentationVersionsAsync(ctx workflow.Context, input *apigateway.GetDocumentationVersionsInput) *ApigatewayGetDocumentationVersionsFuture

	GetDomainName(ctx workflow.Context, input *apigateway.GetDomainNameInput) (*apigateway.DomainName, error)
	GetDomainNameAsync(ctx workflow.Context, input *apigateway.GetDomainNameInput) *ApigatewayGetDomainNameFuture

	GetDomainNames(ctx workflow.Context, input *apigateway.GetDomainNamesInput) (*apigateway.GetDomainNamesOutput, error)
	GetDomainNamesAsync(ctx workflow.Context, input *apigateway.GetDomainNamesInput) *ApigatewayGetDomainNamesFuture

	GetExport(ctx workflow.Context, input *apigateway.GetExportInput) (*apigateway.GetExportOutput, error)
	GetExportAsync(ctx workflow.Context, input *apigateway.GetExportInput) *ApigatewayGetExportFuture

	GetGatewayResponse(ctx workflow.Context, input *apigateway.GetGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error)
	GetGatewayResponseAsync(ctx workflow.Context, input *apigateway.GetGatewayResponseInput) *ApigatewayGetGatewayResponseFuture

	GetGatewayResponses(ctx workflow.Context, input *apigateway.GetGatewayResponsesInput) (*apigateway.GetGatewayResponsesOutput, error)
	GetGatewayResponsesAsync(ctx workflow.Context, input *apigateway.GetGatewayResponsesInput) *ApigatewayGetGatewayResponsesFuture

	GetIntegration(ctx workflow.Context, input *apigateway.GetIntegrationInput) (*apigateway.Integration, error)
	GetIntegrationAsync(ctx workflow.Context, input *apigateway.GetIntegrationInput) *ApigatewayGetIntegrationFuture

	GetIntegrationResponse(ctx workflow.Context, input *apigateway.GetIntegrationResponseInput) (*apigateway.IntegrationResponse, error)
	GetIntegrationResponseAsync(ctx workflow.Context, input *apigateway.GetIntegrationResponseInput) *ApigatewayGetIntegrationResponseFuture

	GetMethod(ctx workflow.Context, input *apigateway.GetMethodInput) (*apigateway.Method, error)
	GetMethodAsync(ctx workflow.Context, input *apigateway.GetMethodInput) *ApigatewayGetMethodFuture

	GetMethodResponse(ctx workflow.Context, input *apigateway.GetMethodResponseInput) (*apigateway.MethodResponse, error)
	GetMethodResponseAsync(ctx workflow.Context, input *apigateway.GetMethodResponseInput) *ApigatewayGetMethodResponseFuture

	GetModel(ctx workflow.Context, input *apigateway.GetModelInput) (*apigateway.Model, error)
	GetModelAsync(ctx workflow.Context, input *apigateway.GetModelInput) *ApigatewayGetModelFuture

	GetModelTemplate(ctx workflow.Context, input *apigateway.GetModelTemplateInput) (*apigateway.GetModelTemplateOutput, error)
	GetModelTemplateAsync(ctx workflow.Context, input *apigateway.GetModelTemplateInput) *ApigatewayGetModelTemplateFuture

	GetModels(ctx workflow.Context, input *apigateway.GetModelsInput) (*apigateway.GetModelsOutput, error)
	GetModelsAsync(ctx workflow.Context, input *apigateway.GetModelsInput) *ApigatewayGetModelsFuture

	GetRequestValidator(ctx workflow.Context, input *apigateway.GetRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error)
	GetRequestValidatorAsync(ctx workflow.Context, input *apigateway.GetRequestValidatorInput) *ApigatewayGetRequestValidatorFuture

	GetRequestValidators(ctx workflow.Context, input *apigateway.GetRequestValidatorsInput) (*apigateway.GetRequestValidatorsOutput, error)
	GetRequestValidatorsAsync(ctx workflow.Context, input *apigateway.GetRequestValidatorsInput) *ApigatewayGetRequestValidatorsFuture

	GetResource(ctx workflow.Context, input *apigateway.GetResourceInput) (*apigateway.Resource, error)
	GetResourceAsync(ctx workflow.Context, input *apigateway.GetResourceInput) *ApigatewayGetResourceFuture

	GetResources(ctx workflow.Context, input *apigateway.GetResourcesInput) (*apigateway.GetResourcesOutput, error)
	GetResourcesAsync(ctx workflow.Context, input *apigateway.GetResourcesInput) *ApigatewayGetResourcesFuture

	GetRestApi(ctx workflow.Context, input *apigateway.GetRestApiInput) (*apigateway.RestApi, error)
	GetRestApiAsync(ctx workflow.Context, input *apigateway.GetRestApiInput) *ApigatewayGetRestApiFuture

	GetRestApis(ctx workflow.Context, input *apigateway.GetRestApisInput) (*apigateway.GetRestApisOutput, error)
	GetRestApisAsync(ctx workflow.Context, input *apigateway.GetRestApisInput) *ApigatewayGetRestApisFuture

	GetSdk(ctx workflow.Context, input *apigateway.GetSdkInput) (*apigateway.GetSdkOutput, error)
	GetSdkAsync(ctx workflow.Context, input *apigateway.GetSdkInput) *ApigatewayGetSdkFuture

	GetSdkType(ctx workflow.Context, input *apigateway.GetSdkTypeInput) (*apigateway.SdkType, error)
	GetSdkTypeAsync(ctx workflow.Context, input *apigateway.GetSdkTypeInput) *ApigatewayGetSdkTypeFuture

	GetSdkTypes(ctx workflow.Context, input *apigateway.GetSdkTypesInput) (*apigateway.GetSdkTypesOutput, error)
	GetSdkTypesAsync(ctx workflow.Context, input *apigateway.GetSdkTypesInput) *ApigatewayGetSdkTypesFuture

	GetStage(ctx workflow.Context, input *apigateway.GetStageInput) (*apigateway.Stage, error)
	GetStageAsync(ctx workflow.Context, input *apigateway.GetStageInput) *ApigatewayGetStageFuture

	GetStages(ctx workflow.Context, input *apigateway.GetStagesInput) (*apigateway.GetStagesOutput, error)
	GetStagesAsync(ctx workflow.Context, input *apigateway.GetStagesInput) *ApigatewayGetStagesFuture

	GetTags(ctx workflow.Context, input *apigateway.GetTagsInput) (*apigateway.GetTagsOutput, error)
	GetTagsAsync(ctx workflow.Context, input *apigateway.GetTagsInput) *ApigatewayGetTagsFuture

	GetUsage(ctx workflow.Context, input *apigateway.GetUsageInput) (*apigateway.Usage, error)
	GetUsageAsync(ctx workflow.Context, input *apigateway.GetUsageInput) *ApigatewayGetUsageFuture

	GetUsagePlan(ctx workflow.Context, input *apigateway.GetUsagePlanInput) (*apigateway.UsagePlan, error)
	GetUsagePlanAsync(ctx workflow.Context, input *apigateway.GetUsagePlanInput) *ApigatewayGetUsagePlanFuture

	GetUsagePlanKey(ctx workflow.Context, input *apigateway.GetUsagePlanKeyInput) (*apigateway.UsagePlanKey, error)
	GetUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.GetUsagePlanKeyInput) *ApigatewayGetUsagePlanKeyFuture

	GetUsagePlanKeys(ctx workflow.Context, input *apigateway.GetUsagePlanKeysInput) (*apigateway.GetUsagePlanKeysOutput, error)
	GetUsagePlanKeysAsync(ctx workflow.Context, input *apigateway.GetUsagePlanKeysInput) *ApigatewayGetUsagePlanKeysFuture

	GetUsagePlans(ctx workflow.Context, input *apigateway.GetUsagePlansInput) (*apigateway.GetUsagePlansOutput, error)
	GetUsagePlansAsync(ctx workflow.Context, input *apigateway.GetUsagePlansInput) *ApigatewayGetUsagePlansFuture

	GetVpcLink(ctx workflow.Context, input *apigateway.GetVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error)
	GetVpcLinkAsync(ctx workflow.Context, input *apigateway.GetVpcLinkInput) *ApigatewayGetVpcLinkFuture

	GetVpcLinks(ctx workflow.Context, input *apigateway.GetVpcLinksInput) (*apigateway.GetVpcLinksOutput, error)
	GetVpcLinksAsync(ctx workflow.Context, input *apigateway.GetVpcLinksInput) *ApigatewayGetVpcLinksFuture

	ImportApiKeys(ctx workflow.Context, input *apigateway.ImportApiKeysInput) (*apigateway.ImportApiKeysOutput, error)
	ImportApiKeysAsync(ctx workflow.Context, input *apigateway.ImportApiKeysInput) *ApigatewayImportApiKeysFuture

	ImportDocumentationParts(ctx workflow.Context, input *apigateway.ImportDocumentationPartsInput) (*apigateway.ImportDocumentationPartsOutput, error)
	ImportDocumentationPartsAsync(ctx workflow.Context, input *apigateway.ImportDocumentationPartsInput) *ApigatewayImportDocumentationPartsFuture

	ImportRestApi(ctx workflow.Context, input *apigateway.ImportRestApiInput) (*apigateway.RestApi, error)
	ImportRestApiAsync(ctx workflow.Context, input *apigateway.ImportRestApiInput) *ApigatewayImportRestApiFuture

	PutGatewayResponse(ctx workflow.Context, input *apigateway.PutGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error)
	PutGatewayResponseAsync(ctx workflow.Context, input *apigateway.PutGatewayResponseInput) *ApigatewayPutGatewayResponseFuture

	PutIntegration(ctx workflow.Context, input *apigateway.PutIntegrationInput) (*apigateway.Integration, error)
	PutIntegrationAsync(ctx workflow.Context, input *apigateway.PutIntegrationInput) *ApigatewayPutIntegrationFuture

	PutIntegrationResponse(ctx workflow.Context, input *apigateway.PutIntegrationResponseInput) (*apigateway.IntegrationResponse, error)
	PutIntegrationResponseAsync(ctx workflow.Context, input *apigateway.PutIntegrationResponseInput) *ApigatewayPutIntegrationResponseFuture

	PutMethod(ctx workflow.Context, input *apigateway.PutMethodInput) (*apigateway.Method, error)
	PutMethodAsync(ctx workflow.Context, input *apigateway.PutMethodInput) *ApigatewayPutMethodFuture

	PutMethodResponse(ctx workflow.Context, input *apigateway.PutMethodResponseInput) (*apigateway.MethodResponse, error)
	PutMethodResponseAsync(ctx workflow.Context, input *apigateway.PutMethodResponseInput) *ApigatewayPutMethodResponseFuture

	PutRestApi(ctx workflow.Context, input *apigateway.PutRestApiInput) (*apigateway.RestApi, error)
	PutRestApiAsync(ctx workflow.Context, input *apigateway.PutRestApiInput) *ApigatewayPutRestApiFuture

	TagResource(ctx workflow.Context, input *apigateway.TagResourceInput) (*apigateway.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *apigateway.TagResourceInput) *ApigatewayTagResourceFuture

	TestInvokeAuthorizer(ctx workflow.Context, input *apigateway.TestInvokeAuthorizerInput) (*apigateway.TestInvokeAuthorizerOutput, error)
	TestInvokeAuthorizerAsync(ctx workflow.Context, input *apigateway.TestInvokeAuthorizerInput) *ApigatewayTestInvokeAuthorizerFuture

	TestInvokeMethod(ctx workflow.Context, input *apigateway.TestInvokeMethodInput) (*apigateway.TestInvokeMethodOutput, error)
	TestInvokeMethodAsync(ctx workflow.Context, input *apigateway.TestInvokeMethodInput) *ApigatewayTestInvokeMethodFuture

	UntagResource(ctx workflow.Context, input *apigateway.UntagResourceInput) (*apigateway.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *apigateway.UntagResourceInput) *ApigatewayUntagResourceFuture

	UpdateAccount(ctx workflow.Context, input *apigateway.UpdateAccountInput) (*apigateway.Account, error)
	UpdateAccountAsync(ctx workflow.Context, input *apigateway.UpdateAccountInput) *ApigatewayUpdateAccountFuture

	UpdateApiKey(ctx workflow.Context, input *apigateway.UpdateApiKeyInput) (*apigateway.ApiKey, error)
	UpdateApiKeyAsync(ctx workflow.Context, input *apigateway.UpdateApiKeyInput) *ApigatewayUpdateApiKeyFuture

	UpdateAuthorizer(ctx workflow.Context, input *apigateway.UpdateAuthorizerInput) (*apigateway.Authorizer, error)
	UpdateAuthorizerAsync(ctx workflow.Context, input *apigateway.UpdateAuthorizerInput) *ApigatewayUpdateAuthorizerFuture

	UpdateBasePathMapping(ctx workflow.Context, input *apigateway.UpdateBasePathMappingInput) (*apigateway.BasePathMapping, error)
	UpdateBasePathMappingAsync(ctx workflow.Context, input *apigateway.UpdateBasePathMappingInput) *ApigatewayUpdateBasePathMappingFuture

	UpdateClientCertificate(ctx workflow.Context, input *apigateway.UpdateClientCertificateInput) (*apigateway.ClientCertificate, error)
	UpdateClientCertificateAsync(ctx workflow.Context, input *apigateway.UpdateClientCertificateInput) *ApigatewayUpdateClientCertificateFuture

	UpdateDeployment(ctx workflow.Context, input *apigateway.UpdateDeploymentInput) (*apigateway.Deployment, error)
	UpdateDeploymentAsync(ctx workflow.Context, input *apigateway.UpdateDeploymentInput) *ApigatewayUpdateDeploymentFuture

	UpdateDocumentationPart(ctx workflow.Context, input *apigateway.UpdateDocumentationPartInput) (*apigateway.DocumentationPart, error)
	UpdateDocumentationPartAsync(ctx workflow.Context, input *apigateway.UpdateDocumentationPartInput) *ApigatewayUpdateDocumentationPartFuture

	UpdateDocumentationVersion(ctx workflow.Context, input *apigateway.UpdateDocumentationVersionInput) (*apigateway.DocumentationVersion, error)
	UpdateDocumentationVersionAsync(ctx workflow.Context, input *apigateway.UpdateDocumentationVersionInput) *ApigatewayUpdateDocumentationVersionFuture

	UpdateDomainName(ctx workflow.Context, input *apigateway.UpdateDomainNameInput) (*apigateway.DomainName, error)
	UpdateDomainNameAsync(ctx workflow.Context, input *apigateway.UpdateDomainNameInput) *ApigatewayUpdateDomainNameFuture

	UpdateGatewayResponse(ctx workflow.Context, input *apigateway.UpdateGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error)
	UpdateGatewayResponseAsync(ctx workflow.Context, input *apigateway.UpdateGatewayResponseInput) *ApigatewayUpdateGatewayResponseFuture

	UpdateIntegration(ctx workflow.Context, input *apigateway.UpdateIntegrationInput) (*apigateway.Integration, error)
	UpdateIntegrationAsync(ctx workflow.Context, input *apigateway.UpdateIntegrationInput) *ApigatewayUpdateIntegrationFuture

	UpdateIntegrationResponse(ctx workflow.Context, input *apigateway.UpdateIntegrationResponseInput) (*apigateway.IntegrationResponse, error)
	UpdateIntegrationResponseAsync(ctx workflow.Context, input *apigateway.UpdateIntegrationResponseInput) *ApigatewayUpdateIntegrationResponseFuture

	UpdateMethod(ctx workflow.Context, input *apigateway.UpdateMethodInput) (*apigateway.Method, error)
	UpdateMethodAsync(ctx workflow.Context, input *apigateway.UpdateMethodInput) *ApigatewayUpdateMethodFuture

	UpdateMethodResponse(ctx workflow.Context, input *apigateway.UpdateMethodResponseInput) (*apigateway.MethodResponse, error)
	UpdateMethodResponseAsync(ctx workflow.Context, input *apigateway.UpdateMethodResponseInput) *ApigatewayUpdateMethodResponseFuture

	UpdateModel(ctx workflow.Context, input *apigateway.UpdateModelInput) (*apigateway.Model, error)
	UpdateModelAsync(ctx workflow.Context, input *apigateway.UpdateModelInput) *ApigatewayUpdateModelFuture

	UpdateRequestValidator(ctx workflow.Context, input *apigateway.UpdateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error)
	UpdateRequestValidatorAsync(ctx workflow.Context, input *apigateway.UpdateRequestValidatorInput) *ApigatewayUpdateRequestValidatorFuture

	UpdateResource(ctx workflow.Context, input *apigateway.UpdateResourceInput) (*apigateway.Resource, error)
	UpdateResourceAsync(ctx workflow.Context, input *apigateway.UpdateResourceInput) *ApigatewayUpdateResourceFuture

	UpdateRestApi(ctx workflow.Context, input *apigateway.UpdateRestApiInput) (*apigateway.RestApi, error)
	UpdateRestApiAsync(ctx workflow.Context, input *apigateway.UpdateRestApiInput) *ApigatewayUpdateRestApiFuture

	UpdateStage(ctx workflow.Context, input *apigateway.UpdateStageInput) (*apigateway.Stage, error)
	UpdateStageAsync(ctx workflow.Context, input *apigateway.UpdateStageInput) *ApigatewayUpdateStageFuture

	UpdateUsage(ctx workflow.Context, input *apigateway.UpdateUsageInput) (*apigateway.Usage, error)
	UpdateUsageAsync(ctx workflow.Context, input *apigateway.UpdateUsageInput) *ApigatewayUpdateUsageFuture

	UpdateUsagePlan(ctx workflow.Context, input *apigateway.UpdateUsagePlanInput) (*apigateway.UsagePlan, error)
	UpdateUsagePlanAsync(ctx workflow.Context, input *apigateway.UpdateUsagePlanInput) *ApigatewayUpdateUsagePlanFuture

	UpdateVpcLink(ctx workflow.Context, input *apigateway.UpdateVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error)
	UpdateVpcLinkAsync(ctx workflow.Context, input *apigateway.UpdateVpcLinkInput) *ApigatewayUpdateVpcLinkFuture
}

type APIGatewayStub struct{}

func NewAPIGatewayStub() APIGatewayClient {
	return &APIGatewayStub{}
}

type ApigatewayCreateApiKeyFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateApiKeyFuture) Get(ctx workflow.Context) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateAuthorizerFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateBasePathMappingFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateDeploymentFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateDeploymentFuture) Get(ctx workflow.Context) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateDocumentationPartFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateDocumentationVersionFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateDomainNameFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateModelFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateModelFuture) Get(ctx workflow.Context) (*apigateway.Model, error) {
	var output apigateway.Model
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateRequestValidatorFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateResourceFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateResourceFuture) Get(ctx workflow.Context) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateRestApiFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateStageFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateStageFuture) Get(ctx workflow.Context) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateUsagePlanFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateUsagePlanKeyFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateUsagePlanKeyFuture) Get(ctx workflow.Context) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayCreateVpcLinkFuture struct {
	Future workflow.Future
}

func (r *ApigatewayCreateVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteApiKeyFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteApiKeyFuture) Get(ctx workflow.Context) (*apigateway.DeleteApiKeyOutput, error) {
	var output apigateway.DeleteApiKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteAuthorizerFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.DeleteAuthorizerOutput, error) {
	var output apigateway.DeleteAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteBasePathMappingFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.DeleteBasePathMappingOutput, error) {
	var output apigateway.DeleteBasePathMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteClientCertificateFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.DeleteClientCertificateOutput, error) {
	var output apigateway.DeleteClientCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteDeploymentFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteDeploymentFuture) Get(ctx workflow.Context) (*apigateway.DeleteDeploymentOutput, error) {
	var output apigateway.DeleteDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteDocumentationPartFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DeleteDocumentationPartOutput, error) {
	var output apigateway.DeleteDocumentationPartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteDocumentationVersionFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DeleteDocumentationVersionOutput, error) {
	var output apigateway.DeleteDocumentationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteDomainNameFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DeleteDomainNameOutput, error) {
	var output apigateway.DeleteDomainNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteGatewayResponseFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.DeleteGatewayResponseOutput, error) {
	var output apigateway.DeleteGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteIntegrationFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteIntegrationFuture) Get(ctx workflow.Context) (*apigateway.DeleteIntegrationOutput, error) {
	var output apigateway.DeleteIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteIntegrationResponseFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.DeleteIntegrationResponseOutput, error) {
	var output apigateway.DeleteIntegrationResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteMethodFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteMethodFuture) Get(ctx workflow.Context) (*apigateway.DeleteMethodOutput, error) {
	var output apigateway.DeleteMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteMethodResponseFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.DeleteMethodResponseOutput, error) {
	var output apigateway.DeleteMethodResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteModelFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteModelFuture) Get(ctx workflow.Context) (*apigateway.DeleteModelOutput, error) {
	var output apigateway.DeleteModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteRequestValidatorFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.DeleteRequestValidatorOutput, error) {
	var output apigateway.DeleteRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteResourceFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteResourceFuture) Get(ctx workflow.Context) (*apigateway.DeleteResourceOutput, error) {
	var output apigateway.DeleteResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteRestApiFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteRestApiFuture) Get(ctx workflow.Context) (*apigateway.DeleteRestApiOutput, error) {
	var output apigateway.DeleteRestApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteStageFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteStageFuture) Get(ctx workflow.Context) (*apigateway.DeleteStageOutput, error) {
	var output apigateway.DeleteStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteUsagePlanFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.DeleteUsagePlanOutput, error) {
	var output apigateway.DeleteUsagePlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteUsagePlanKeyFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteUsagePlanKeyFuture) Get(ctx workflow.Context) (*apigateway.DeleteUsagePlanKeyOutput, error) {
	var output apigateway.DeleteUsagePlanKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayDeleteVpcLinkFuture struct {
	Future workflow.Future
}

func (r *ApigatewayDeleteVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.DeleteVpcLinkOutput, error) {
	var output apigateway.DeleteVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayFlushStageAuthorizersCacheFuture struct {
	Future workflow.Future
}

func (r *ApigatewayFlushStageAuthorizersCacheFuture) Get(ctx workflow.Context) (*apigateway.FlushStageAuthorizersCacheOutput, error) {
	var output apigateway.FlushStageAuthorizersCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayFlushStageCacheFuture struct {
	Future workflow.Future
}

func (r *ApigatewayFlushStageCacheFuture) Get(ctx workflow.Context) (*apigateway.FlushStageCacheOutput, error) {
	var output apigateway.FlushStageCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGenerateClientCertificateFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGenerateClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetAccountFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetAccountFuture) Get(ctx workflow.Context) (*apigateway.Account, error) {
	var output apigateway.Account
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetApiKeyFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetApiKeyFuture) Get(ctx workflow.Context) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetApiKeysFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetApiKeysFuture) Get(ctx workflow.Context) (*apigateway.GetApiKeysOutput, error) {
	var output apigateway.GetApiKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetAuthorizerFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetAuthorizersFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetAuthorizersFuture) Get(ctx workflow.Context) (*apigateway.GetAuthorizersOutput, error) {
	var output apigateway.GetAuthorizersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetBasePathMappingFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetBasePathMappingsFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetBasePathMappingsFuture) Get(ctx workflow.Context) (*apigateway.GetBasePathMappingsOutput, error) {
	var output apigateway.GetBasePathMappingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetClientCertificateFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetClientCertificatesFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetClientCertificatesFuture) Get(ctx workflow.Context) (*apigateway.GetClientCertificatesOutput, error) {
	var output apigateway.GetClientCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetDeploymentFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetDeploymentFuture) Get(ctx workflow.Context) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetDeploymentsFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetDeploymentsFuture) Get(ctx workflow.Context) (*apigateway.GetDeploymentsOutput, error) {
	var output apigateway.GetDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetDocumentationPartFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetDocumentationPartsFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetDocumentationPartsFuture) Get(ctx workflow.Context) (*apigateway.GetDocumentationPartsOutput, error) {
	var output apigateway.GetDocumentationPartsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetDocumentationVersionFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetDocumentationVersionsFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetDocumentationVersionsFuture) Get(ctx workflow.Context) (*apigateway.GetDocumentationVersionsOutput, error) {
	var output apigateway.GetDocumentationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetDomainNameFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetDomainNamesFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetDomainNamesFuture) Get(ctx workflow.Context) (*apigateway.GetDomainNamesOutput, error) {
	var output apigateway.GetDomainNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetExportFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetExportFuture) Get(ctx workflow.Context) (*apigateway.GetExportOutput, error) {
	var output apigateway.GetExportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetGatewayResponseFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetGatewayResponsesFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetGatewayResponsesFuture) Get(ctx workflow.Context) (*apigateway.GetGatewayResponsesOutput, error) {
	var output apigateway.GetGatewayResponsesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetIntegrationFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetIntegrationFuture) Get(ctx workflow.Context) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetIntegrationResponseFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetMethodFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetMethodFuture) Get(ctx workflow.Context) (*apigateway.Method, error) {
	var output apigateway.Method
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetMethodResponseFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetModelFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetModelFuture) Get(ctx workflow.Context) (*apigateway.Model, error) {
	var output apigateway.Model
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetModelTemplateFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetModelTemplateFuture) Get(ctx workflow.Context) (*apigateway.GetModelTemplateOutput, error) {
	var output apigateway.GetModelTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetModelsFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetModelsFuture) Get(ctx workflow.Context) (*apigateway.GetModelsOutput, error) {
	var output apigateway.GetModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetRequestValidatorFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetRequestValidatorsFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetRequestValidatorsFuture) Get(ctx workflow.Context) (*apigateway.GetRequestValidatorsOutput, error) {
	var output apigateway.GetRequestValidatorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetResourceFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetResourceFuture) Get(ctx workflow.Context) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetResourcesFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetResourcesFuture) Get(ctx workflow.Context) (*apigateway.GetResourcesOutput, error) {
	var output apigateway.GetResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetRestApiFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetRestApisFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetRestApisFuture) Get(ctx workflow.Context) (*apigateway.GetRestApisOutput, error) {
	var output apigateway.GetRestApisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetSdkFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetSdkFuture) Get(ctx workflow.Context) (*apigateway.GetSdkOutput, error) {
	var output apigateway.GetSdkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetSdkTypeFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetSdkTypeFuture) Get(ctx workflow.Context) (*apigateway.SdkType, error) {
	var output apigateway.SdkType
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetSdkTypesFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetSdkTypesFuture) Get(ctx workflow.Context) (*apigateway.GetSdkTypesOutput, error) {
	var output apigateway.GetSdkTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetStageFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetStageFuture) Get(ctx workflow.Context) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetStagesFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetStagesFuture) Get(ctx workflow.Context) (*apigateway.GetStagesOutput, error) {
	var output apigateway.GetStagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetTagsFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetTagsFuture) Get(ctx workflow.Context) (*apigateway.GetTagsOutput, error) {
	var output apigateway.GetTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetUsageFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetUsageFuture) Get(ctx workflow.Context) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetUsagePlanFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetUsagePlanKeyFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetUsagePlanKeyFuture) Get(ctx workflow.Context) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetUsagePlanKeysFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetUsagePlanKeysFuture) Get(ctx workflow.Context) (*apigateway.GetUsagePlanKeysOutput, error) {
	var output apigateway.GetUsagePlanKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetUsagePlansFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetUsagePlansFuture) Get(ctx workflow.Context) (*apigateway.GetUsagePlansOutput, error) {
	var output apigateway.GetUsagePlansOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetVpcLinkFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayGetVpcLinksFuture struct {
	Future workflow.Future
}

func (r *ApigatewayGetVpcLinksFuture) Get(ctx workflow.Context) (*apigateway.GetVpcLinksOutput, error) {
	var output apigateway.GetVpcLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayImportApiKeysFuture struct {
	Future workflow.Future
}

func (r *ApigatewayImportApiKeysFuture) Get(ctx workflow.Context) (*apigateway.ImportApiKeysOutput, error) {
	var output apigateway.ImportApiKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayImportDocumentationPartsFuture struct {
	Future workflow.Future
}

func (r *ApigatewayImportDocumentationPartsFuture) Get(ctx workflow.Context) (*apigateway.ImportDocumentationPartsOutput, error) {
	var output apigateway.ImportDocumentationPartsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayImportRestApiFuture struct {
	Future workflow.Future
}

func (r *ApigatewayImportRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayPutGatewayResponseFuture struct {
	Future workflow.Future
}

func (r *ApigatewayPutGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayPutIntegrationFuture struct {
	Future workflow.Future
}

func (r *ApigatewayPutIntegrationFuture) Get(ctx workflow.Context) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayPutIntegrationResponseFuture struct {
	Future workflow.Future
}

func (r *ApigatewayPutIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayPutMethodFuture struct {
	Future workflow.Future
}

func (r *ApigatewayPutMethodFuture) Get(ctx workflow.Context) (*apigateway.Method, error) {
	var output apigateway.Method
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayPutMethodResponseFuture struct {
	Future workflow.Future
}

func (r *ApigatewayPutMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayPutRestApiFuture struct {
	Future workflow.Future
}

func (r *ApigatewayPutRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayTagResourceFuture struct {
	Future workflow.Future
}

func (r *ApigatewayTagResourceFuture) Get(ctx workflow.Context) (*apigateway.TagResourceOutput, error) {
	var output apigateway.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayTestInvokeAuthorizerFuture struct {
	Future workflow.Future
}

func (r *ApigatewayTestInvokeAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.TestInvokeAuthorizerOutput, error) {
	var output apigateway.TestInvokeAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayTestInvokeMethodFuture struct {
	Future workflow.Future
}

func (r *ApigatewayTestInvokeMethodFuture) Get(ctx workflow.Context) (*apigateway.TestInvokeMethodOutput, error) {
	var output apigateway.TestInvokeMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUntagResourceFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUntagResourceFuture) Get(ctx workflow.Context) (*apigateway.UntagResourceOutput, error) {
	var output apigateway.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateAccountFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateAccountFuture) Get(ctx workflow.Context) (*apigateway.Account, error) {
	var output apigateway.Account
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateApiKeyFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateApiKeyFuture) Get(ctx workflow.Context) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateAuthorizerFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateBasePathMappingFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateClientCertificateFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateDeploymentFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateDeploymentFuture) Get(ctx workflow.Context) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateDocumentationPartFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateDocumentationVersionFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateDomainNameFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateGatewayResponseFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateIntegrationFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateIntegrationFuture) Get(ctx workflow.Context) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateIntegrationResponseFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateMethodFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateMethodFuture) Get(ctx workflow.Context) (*apigateway.Method, error) {
	var output apigateway.Method
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateMethodResponseFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateModelFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateModelFuture) Get(ctx workflow.Context) (*apigateway.Model, error) {
	var output apigateway.Model
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateRequestValidatorFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateResourceFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateResourceFuture) Get(ctx workflow.Context) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateRestApiFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateStageFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateStageFuture) Get(ctx workflow.Context) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateUsageFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateUsageFuture) Get(ctx workflow.Context) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateUsagePlanFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApigatewayUpdateVpcLinkFuture struct {
	Future workflow.Future
}

func (r *ApigatewayUpdateVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateApiKey(ctx workflow.Context, input *apigateway.CreateApiKeyInput) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateApiKeyAsync(ctx workflow.Context, input *apigateway.CreateApiKeyInput) *ApigatewayCreateApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateApiKey", input)
	return &ApigatewayCreateApiKeyFuture{Future: future}
}

func (a *APIGatewayStub) CreateAuthorizer(ctx workflow.Context, input *apigateway.CreateAuthorizerInput) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateAuthorizerAsync(ctx workflow.Context, input *apigateway.CreateAuthorizerInput) *ApigatewayCreateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateAuthorizer", input)
	return &ApigatewayCreateAuthorizerFuture{Future: future}
}

func (a *APIGatewayStub) CreateBasePathMapping(ctx workflow.Context, input *apigateway.CreateBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateBasePathMappingAsync(ctx workflow.Context, input *apigateway.CreateBasePathMappingInput) *ApigatewayCreateBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateBasePathMapping", input)
	return &ApigatewayCreateBasePathMappingFuture{Future: future}
}

func (a *APIGatewayStub) CreateDeployment(ctx workflow.Context, input *apigateway.CreateDeploymentInput) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateDeploymentAsync(ctx workflow.Context, input *apigateway.CreateDeploymentInput) *ApigatewayCreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDeployment", input)
	return &ApigatewayCreateDeploymentFuture{Future: future}
}

func (a *APIGatewayStub) CreateDocumentationPart(ctx workflow.Context, input *apigateway.CreateDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateDocumentationPartAsync(ctx workflow.Context, input *apigateway.CreateDocumentationPartInput) *ApigatewayCreateDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDocumentationPart", input)
	return &ApigatewayCreateDocumentationPartFuture{Future: future}
}

func (a *APIGatewayStub) CreateDocumentationVersion(ctx workflow.Context, input *apigateway.CreateDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateDocumentationVersionAsync(ctx workflow.Context, input *apigateway.CreateDocumentationVersionInput) *ApigatewayCreateDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDocumentationVersion", input)
	return &ApigatewayCreateDocumentationVersionFuture{Future: future}
}

func (a *APIGatewayStub) CreateDomainName(ctx workflow.Context, input *apigateway.CreateDomainNameInput) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateDomainNameAsync(ctx workflow.Context, input *apigateway.CreateDomainNameInput) *ApigatewayCreateDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateDomainName", input)
	return &ApigatewayCreateDomainNameFuture{Future: future}
}

func (a *APIGatewayStub) CreateModel(ctx workflow.Context, input *apigateway.CreateModelInput) (*apigateway.Model, error) {
	var output apigateway.Model
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateModelAsync(ctx workflow.Context, input *apigateway.CreateModelInput) *ApigatewayCreateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateModel", input)
	return &ApigatewayCreateModelFuture{Future: future}
}

func (a *APIGatewayStub) CreateRequestValidator(ctx workflow.Context, input *apigateway.CreateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateRequestValidatorAsync(ctx workflow.Context, input *apigateway.CreateRequestValidatorInput) *ApigatewayCreateRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateRequestValidator", input)
	return &ApigatewayCreateRequestValidatorFuture{Future: future}
}

func (a *APIGatewayStub) CreateResource(ctx workflow.Context, input *apigateway.CreateResourceInput) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateResourceAsync(ctx workflow.Context, input *apigateway.CreateResourceInput) *ApigatewayCreateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateResource", input)
	return &ApigatewayCreateResourceFuture{Future: future}
}

func (a *APIGatewayStub) CreateRestApi(ctx workflow.Context, input *apigateway.CreateRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateRestApiAsync(ctx workflow.Context, input *apigateway.CreateRestApiInput) *ApigatewayCreateRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateRestApi", input)
	return &ApigatewayCreateRestApiFuture{Future: future}
}

func (a *APIGatewayStub) CreateStage(ctx workflow.Context, input *apigateway.CreateStageInput) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateStage", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateStageAsync(ctx workflow.Context, input *apigateway.CreateStageInput) *ApigatewayCreateStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateStage", input)
	return &ApigatewayCreateStageFuture{Future: future}
}

func (a *APIGatewayStub) CreateUsagePlan(ctx workflow.Context, input *apigateway.CreateUsagePlanInput) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateUsagePlanAsync(ctx workflow.Context, input *apigateway.CreateUsagePlanInput) *ApigatewayCreateUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateUsagePlan", input)
	return &ApigatewayCreateUsagePlanFuture{Future: future}
}

func (a *APIGatewayStub) CreateUsagePlanKey(ctx workflow.Context, input *apigateway.CreateUsagePlanKeyInput) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateUsagePlanKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.CreateUsagePlanKeyInput) *ApigatewayCreateUsagePlanKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateUsagePlanKey", input)
	return &ApigatewayCreateUsagePlanKeyFuture{Future: future}
}

func (a *APIGatewayStub) CreateVpcLink(ctx workflow.Context, input *apigateway.CreateVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) CreateVpcLinkAsync(ctx workflow.Context, input *apigateway.CreateVpcLinkInput) *ApigatewayCreateVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.CreateVpcLink", input)
	return &ApigatewayCreateVpcLinkFuture{Future: future}
}

func (a *APIGatewayStub) DeleteApiKey(ctx workflow.Context, input *apigateway.DeleteApiKeyInput) (*apigateway.DeleteApiKeyOutput, error) {
	var output apigateway.DeleteApiKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteApiKeyAsync(ctx workflow.Context, input *apigateway.DeleteApiKeyInput) *ApigatewayDeleteApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteApiKey", input)
	return &ApigatewayDeleteApiKeyFuture{Future: future}
}

func (a *APIGatewayStub) DeleteAuthorizer(ctx workflow.Context, input *apigateway.DeleteAuthorizerInput) (*apigateway.DeleteAuthorizerOutput, error) {
	var output apigateway.DeleteAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteAuthorizerAsync(ctx workflow.Context, input *apigateway.DeleteAuthorizerInput) *ApigatewayDeleteAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteAuthorizer", input)
	return &ApigatewayDeleteAuthorizerFuture{Future: future}
}

func (a *APIGatewayStub) DeleteBasePathMapping(ctx workflow.Context, input *apigateway.DeleteBasePathMappingInput) (*apigateway.DeleteBasePathMappingOutput, error) {
	var output apigateway.DeleteBasePathMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteBasePathMappingAsync(ctx workflow.Context, input *apigateway.DeleteBasePathMappingInput) *ApigatewayDeleteBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteBasePathMapping", input)
	return &ApigatewayDeleteBasePathMappingFuture{Future: future}
}

func (a *APIGatewayStub) DeleteClientCertificate(ctx workflow.Context, input *apigateway.DeleteClientCertificateInput) (*apigateway.DeleteClientCertificateOutput, error) {
	var output apigateway.DeleteClientCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteClientCertificateAsync(ctx workflow.Context, input *apigateway.DeleteClientCertificateInput) *ApigatewayDeleteClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteClientCertificate", input)
	return &ApigatewayDeleteClientCertificateFuture{Future: future}
}

func (a *APIGatewayStub) DeleteDeployment(ctx workflow.Context, input *apigateway.DeleteDeploymentInput) (*apigateway.DeleteDeploymentOutput, error) {
	var output apigateway.DeleteDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteDeploymentAsync(ctx workflow.Context, input *apigateway.DeleteDeploymentInput) *ApigatewayDeleteDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDeployment", input)
	return &ApigatewayDeleteDeploymentFuture{Future: future}
}

func (a *APIGatewayStub) DeleteDocumentationPart(ctx workflow.Context, input *apigateway.DeleteDocumentationPartInput) (*apigateway.DeleteDocumentationPartOutput, error) {
	var output apigateway.DeleteDocumentationPartOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteDocumentationPartAsync(ctx workflow.Context, input *apigateway.DeleteDocumentationPartInput) *ApigatewayDeleteDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDocumentationPart", input)
	return &ApigatewayDeleteDocumentationPartFuture{Future: future}
}

func (a *APIGatewayStub) DeleteDocumentationVersion(ctx workflow.Context, input *apigateway.DeleteDocumentationVersionInput) (*apigateway.DeleteDocumentationVersionOutput, error) {
	var output apigateway.DeleteDocumentationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteDocumentationVersionAsync(ctx workflow.Context, input *apigateway.DeleteDocumentationVersionInput) *ApigatewayDeleteDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDocumentationVersion", input)
	return &ApigatewayDeleteDocumentationVersionFuture{Future: future}
}

func (a *APIGatewayStub) DeleteDomainName(ctx workflow.Context, input *apigateway.DeleteDomainNameInput) (*apigateway.DeleteDomainNameOutput, error) {
	var output apigateway.DeleteDomainNameOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteDomainNameAsync(ctx workflow.Context, input *apigateway.DeleteDomainNameInput) *ApigatewayDeleteDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteDomainName", input)
	return &ApigatewayDeleteDomainNameFuture{Future: future}
}

func (a *APIGatewayStub) DeleteGatewayResponse(ctx workflow.Context, input *apigateway.DeleteGatewayResponseInput) (*apigateway.DeleteGatewayResponseOutput, error) {
	var output apigateway.DeleteGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteGatewayResponseAsync(ctx workflow.Context, input *apigateway.DeleteGatewayResponseInput) *ApigatewayDeleteGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteGatewayResponse", input)
	return &ApigatewayDeleteGatewayResponseFuture{Future: future}
}

func (a *APIGatewayStub) DeleteIntegration(ctx workflow.Context, input *apigateway.DeleteIntegrationInput) (*apigateway.DeleteIntegrationOutput, error) {
	var output apigateway.DeleteIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteIntegrationAsync(ctx workflow.Context, input *apigateway.DeleteIntegrationInput) *ApigatewayDeleteIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteIntegration", input)
	return &ApigatewayDeleteIntegrationFuture{Future: future}
}

func (a *APIGatewayStub) DeleteIntegrationResponse(ctx workflow.Context, input *apigateway.DeleteIntegrationResponseInput) (*apigateway.DeleteIntegrationResponseOutput, error) {
	var output apigateway.DeleteIntegrationResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteIntegrationResponseAsync(ctx workflow.Context, input *apigateway.DeleteIntegrationResponseInput) *ApigatewayDeleteIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteIntegrationResponse", input)
	return &ApigatewayDeleteIntegrationResponseFuture{Future: future}
}

func (a *APIGatewayStub) DeleteMethod(ctx workflow.Context, input *apigateway.DeleteMethodInput) (*apigateway.DeleteMethodOutput, error) {
	var output apigateway.DeleteMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteMethodAsync(ctx workflow.Context, input *apigateway.DeleteMethodInput) *ApigatewayDeleteMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteMethod", input)
	return &ApigatewayDeleteMethodFuture{Future: future}
}

func (a *APIGatewayStub) DeleteMethodResponse(ctx workflow.Context, input *apigateway.DeleteMethodResponseInput) (*apigateway.DeleteMethodResponseOutput, error) {
	var output apigateway.DeleteMethodResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteMethodResponseAsync(ctx workflow.Context, input *apigateway.DeleteMethodResponseInput) *ApigatewayDeleteMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteMethodResponse", input)
	return &ApigatewayDeleteMethodResponseFuture{Future: future}
}

func (a *APIGatewayStub) DeleteModel(ctx workflow.Context, input *apigateway.DeleteModelInput) (*apigateway.DeleteModelOutput, error) {
	var output apigateway.DeleteModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteModel", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteModelAsync(ctx workflow.Context, input *apigateway.DeleteModelInput) *ApigatewayDeleteModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteModel", input)
	return &ApigatewayDeleteModelFuture{Future: future}
}

func (a *APIGatewayStub) DeleteRequestValidator(ctx workflow.Context, input *apigateway.DeleteRequestValidatorInput) (*apigateway.DeleteRequestValidatorOutput, error) {
	var output apigateway.DeleteRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteRequestValidatorAsync(ctx workflow.Context, input *apigateway.DeleteRequestValidatorInput) *ApigatewayDeleteRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteRequestValidator", input)
	return &ApigatewayDeleteRequestValidatorFuture{Future: future}
}

func (a *APIGatewayStub) DeleteResource(ctx workflow.Context, input *apigateway.DeleteResourceInput) (*apigateway.DeleteResourceOutput, error) {
	var output apigateway.DeleteResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteResource", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteResourceAsync(ctx workflow.Context, input *apigateway.DeleteResourceInput) *ApigatewayDeleteResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteResource", input)
	return &ApigatewayDeleteResourceFuture{Future: future}
}

func (a *APIGatewayStub) DeleteRestApi(ctx workflow.Context, input *apigateway.DeleteRestApiInput) (*apigateway.DeleteRestApiOutput, error) {
	var output apigateway.DeleteRestApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteRestApiAsync(ctx workflow.Context, input *apigateway.DeleteRestApiInput) *ApigatewayDeleteRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteRestApi", input)
	return &ApigatewayDeleteRestApiFuture{Future: future}
}

func (a *APIGatewayStub) DeleteStage(ctx workflow.Context, input *apigateway.DeleteStageInput) (*apigateway.DeleteStageOutput, error) {
	var output apigateway.DeleteStageOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteStage", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteStageAsync(ctx workflow.Context, input *apigateway.DeleteStageInput) *ApigatewayDeleteStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteStage", input)
	return &ApigatewayDeleteStageFuture{Future: future}
}

func (a *APIGatewayStub) DeleteUsagePlan(ctx workflow.Context, input *apigateway.DeleteUsagePlanInput) (*apigateway.DeleteUsagePlanOutput, error) {
	var output apigateway.DeleteUsagePlanOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteUsagePlanAsync(ctx workflow.Context, input *apigateway.DeleteUsagePlanInput) *ApigatewayDeleteUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteUsagePlan", input)
	return &ApigatewayDeleteUsagePlanFuture{Future: future}
}

func (a *APIGatewayStub) DeleteUsagePlanKey(ctx workflow.Context, input *apigateway.DeleteUsagePlanKeyInput) (*apigateway.DeleteUsagePlanKeyOutput, error) {
	var output apigateway.DeleteUsagePlanKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteUsagePlanKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.DeleteUsagePlanKeyInput) *ApigatewayDeleteUsagePlanKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteUsagePlanKey", input)
	return &ApigatewayDeleteUsagePlanKeyFuture{Future: future}
}

func (a *APIGatewayStub) DeleteVpcLink(ctx workflow.Context, input *apigateway.DeleteVpcLinkInput) (*apigateway.DeleteVpcLinkOutput, error) {
	var output apigateway.DeleteVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) DeleteVpcLinkAsync(ctx workflow.Context, input *apigateway.DeleteVpcLinkInput) *ApigatewayDeleteVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.DeleteVpcLink", input)
	return &ApigatewayDeleteVpcLinkFuture{Future: future}
}

func (a *APIGatewayStub) FlushStageAuthorizersCache(ctx workflow.Context, input *apigateway.FlushStageAuthorizersCacheInput) (*apigateway.FlushStageAuthorizersCacheOutput, error) {
	var output apigateway.FlushStageAuthorizersCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.FlushStageAuthorizersCache", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) FlushStageAuthorizersCacheAsync(ctx workflow.Context, input *apigateway.FlushStageAuthorizersCacheInput) *ApigatewayFlushStageAuthorizersCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.FlushStageAuthorizersCache", input)
	return &ApigatewayFlushStageAuthorizersCacheFuture{Future: future}
}

func (a *APIGatewayStub) FlushStageCache(ctx workflow.Context, input *apigateway.FlushStageCacheInput) (*apigateway.FlushStageCacheOutput, error) {
	var output apigateway.FlushStageCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.FlushStageCache", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) FlushStageCacheAsync(ctx workflow.Context, input *apigateway.FlushStageCacheInput) *ApigatewayFlushStageCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.FlushStageCache", input)
	return &ApigatewayFlushStageCacheFuture{Future: future}
}

func (a *APIGatewayStub) GenerateClientCertificate(ctx workflow.Context, input *apigateway.GenerateClientCertificateInput) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GenerateClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GenerateClientCertificateAsync(ctx workflow.Context, input *apigateway.GenerateClientCertificateInput) *ApigatewayGenerateClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GenerateClientCertificate", input)
	return &ApigatewayGenerateClientCertificateFuture{Future: future}
}

func (a *APIGatewayStub) GetAccount(ctx workflow.Context, input *apigateway.GetAccountInput) (*apigateway.Account, error) {
	var output apigateway.Account
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetAccountAsync(ctx workflow.Context, input *apigateway.GetAccountInput) *ApigatewayGetAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetAccount", input)
	return &ApigatewayGetAccountFuture{Future: future}
}

func (a *APIGatewayStub) GetApiKey(ctx workflow.Context, input *apigateway.GetApiKeyInput) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetApiKeyAsync(ctx workflow.Context, input *apigateway.GetApiKeyInput) *ApigatewayGetApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetApiKey", input)
	return &ApigatewayGetApiKeyFuture{Future: future}
}

func (a *APIGatewayStub) GetApiKeys(ctx workflow.Context, input *apigateway.GetApiKeysInput) (*apigateway.GetApiKeysOutput, error) {
	var output apigateway.GetApiKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetApiKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetApiKeysAsync(ctx workflow.Context, input *apigateway.GetApiKeysInput) *ApigatewayGetApiKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetApiKeys", input)
	return &ApigatewayGetApiKeysFuture{Future: future}
}

func (a *APIGatewayStub) GetAuthorizer(ctx workflow.Context, input *apigateway.GetAuthorizerInput) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetAuthorizerAsync(ctx workflow.Context, input *apigateway.GetAuthorizerInput) *ApigatewayGetAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetAuthorizer", input)
	return &ApigatewayGetAuthorizerFuture{Future: future}
}

func (a *APIGatewayStub) GetAuthorizers(ctx workflow.Context, input *apigateway.GetAuthorizersInput) (*apigateway.GetAuthorizersOutput, error) {
	var output apigateway.GetAuthorizersOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetAuthorizers", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetAuthorizersAsync(ctx workflow.Context, input *apigateway.GetAuthorizersInput) *ApigatewayGetAuthorizersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetAuthorizers", input)
	return &ApigatewayGetAuthorizersFuture{Future: future}
}

func (a *APIGatewayStub) GetBasePathMapping(ctx workflow.Context, input *apigateway.GetBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetBasePathMappingAsync(ctx workflow.Context, input *apigateway.GetBasePathMappingInput) *ApigatewayGetBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetBasePathMapping", input)
	return &ApigatewayGetBasePathMappingFuture{Future: future}
}

func (a *APIGatewayStub) GetBasePathMappings(ctx workflow.Context, input *apigateway.GetBasePathMappingsInput) (*apigateway.GetBasePathMappingsOutput, error) {
	var output apigateway.GetBasePathMappingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetBasePathMappings", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetBasePathMappingsAsync(ctx workflow.Context, input *apigateway.GetBasePathMappingsInput) *ApigatewayGetBasePathMappingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetBasePathMappings", input)
	return &ApigatewayGetBasePathMappingsFuture{Future: future}
}

func (a *APIGatewayStub) GetClientCertificate(ctx workflow.Context, input *apigateway.GetClientCertificateInput) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetClientCertificateAsync(ctx workflow.Context, input *apigateway.GetClientCertificateInput) *ApigatewayGetClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetClientCertificate", input)
	return &ApigatewayGetClientCertificateFuture{Future: future}
}

func (a *APIGatewayStub) GetClientCertificates(ctx workflow.Context, input *apigateway.GetClientCertificatesInput) (*apigateway.GetClientCertificatesOutput, error) {
	var output apigateway.GetClientCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetClientCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetClientCertificatesAsync(ctx workflow.Context, input *apigateway.GetClientCertificatesInput) *ApigatewayGetClientCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetClientCertificates", input)
	return &ApigatewayGetClientCertificatesFuture{Future: future}
}

func (a *APIGatewayStub) GetDeployment(ctx workflow.Context, input *apigateway.GetDeploymentInput) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDeploymentAsync(ctx workflow.Context, input *apigateway.GetDeploymentInput) *ApigatewayGetDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDeployment", input)
	return &ApigatewayGetDeploymentFuture{Future: future}
}

func (a *APIGatewayStub) GetDeployments(ctx workflow.Context, input *apigateway.GetDeploymentsInput) (*apigateway.GetDeploymentsOutput, error) {
	var output apigateway.GetDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDeploymentsAsync(ctx workflow.Context, input *apigateway.GetDeploymentsInput) *ApigatewayGetDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDeployments", input)
	return &ApigatewayGetDeploymentsFuture{Future: future}
}

func (a *APIGatewayStub) GetDocumentationPart(ctx workflow.Context, input *apigateway.GetDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDocumentationPartAsync(ctx workflow.Context, input *apigateway.GetDocumentationPartInput) *ApigatewayGetDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationPart", input)
	return &ApigatewayGetDocumentationPartFuture{Future: future}
}

func (a *APIGatewayStub) GetDocumentationParts(ctx workflow.Context, input *apigateway.GetDocumentationPartsInput) (*apigateway.GetDocumentationPartsOutput, error) {
	var output apigateway.GetDocumentationPartsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationParts", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDocumentationPartsAsync(ctx workflow.Context, input *apigateway.GetDocumentationPartsInput) *ApigatewayGetDocumentationPartsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationParts", input)
	return &ApigatewayGetDocumentationPartsFuture{Future: future}
}

func (a *APIGatewayStub) GetDocumentationVersion(ctx workflow.Context, input *apigateway.GetDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDocumentationVersionAsync(ctx workflow.Context, input *apigateway.GetDocumentationVersionInput) *ApigatewayGetDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationVersion", input)
	return &ApigatewayGetDocumentationVersionFuture{Future: future}
}

func (a *APIGatewayStub) GetDocumentationVersions(ctx workflow.Context, input *apigateway.GetDocumentationVersionsInput) (*apigateway.GetDocumentationVersionsOutput, error) {
	var output apigateway.GetDocumentationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDocumentationVersionsAsync(ctx workflow.Context, input *apigateway.GetDocumentationVersionsInput) *ApigatewayGetDocumentationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDocumentationVersions", input)
	return &ApigatewayGetDocumentationVersionsFuture{Future: future}
}

func (a *APIGatewayStub) GetDomainName(ctx workflow.Context, input *apigateway.GetDomainNameInput) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDomainNameAsync(ctx workflow.Context, input *apigateway.GetDomainNameInput) *ApigatewayGetDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDomainName", input)
	return &ApigatewayGetDomainNameFuture{Future: future}
}

func (a *APIGatewayStub) GetDomainNames(ctx workflow.Context, input *apigateway.GetDomainNamesInput) (*apigateway.GetDomainNamesOutput, error) {
	var output apigateway.GetDomainNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDomainNames", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetDomainNamesAsync(ctx workflow.Context, input *apigateway.GetDomainNamesInput) *ApigatewayGetDomainNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetDomainNames", input)
	return &ApigatewayGetDomainNamesFuture{Future: future}
}

func (a *APIGatewayStub) GetExport(ctx workflow.Context, input *apigateway.GetExportInput) (*apigateway.GetExportOutput, error) {
	var output apigateway.GetExportOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetExport", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetExportAsync(ctx workflow.Context, input *apigateway.GetExportInput) *ApigatewayGetExportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetExport", input)
	return &ApigatewayGetExportFuture{Future: future}
}

func (a *APIGatewayStub) GetGatewayResponse(ctx workflow.Context, input *apigateway.GetGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetGatewayResponseAsync(ctx workflow.Context, input *apigateway.GetGatewayResponseInput) *ApigatewayGetGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetGatewayResponse", input)
	return &ApigatewayGetGatewayResponseFuture{Future: future}
}

func (a *APIGatewayStub) GetGatewayResponses(ctx workflow.Context, input *apigateway.GetGatewayResponsesInput) (*apigateway.GetGatewayResponsesOutput, error) {
	var output apigateway.GetGatewayResponsesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetGatewayResponses", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetGatewayResponsesAsync(ctx workflow.Context, input *apigateway.GetGatewayResponsesInput) *ApigatewayGetGatewayResponsesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetGatewayResponses", input)
	return &ApigatewayGetGatewayResponsesFuture{Future: future}
}

func (a *APIGatewayStub) GetIntegration(ctx workflow.Context, input *apigateway.GetIntegrationInput) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetIntegrationAsync(ctx workflow.Context, input *apigateway.GetIntegrationInput) *ApigatewayGetIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetIntegration", input)
	return &ApigatewayGetIntegrationFuture{Future: future}
}

func (a *APIGatewayStub) GetIntegrationResponse(ctx workflow.Context, input *apigateway.GetIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetIntegrationResponseAsync(ctx workflow.Context, input *apigateway.GetIntegrationResponseInput) *ApigatewayGetIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetIntegrationResponse", input)
	return &ApigatewayGetIntegrationResponseFuture{Future: future}
}

func (a *APIGatewayStub) GetMethod(ctx workflow.Context, input *apigateway.GetMethodInput) (*apigateway.Method, error) {
	var output apigateway.Method
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetMethodAsync(ctx workflow.Context, input *apigateway.GetMethodInput) *ApigatewayGetMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetMethod", input)
	return &ApigatewayGetMethodFuture{Future: future}
}

func (a *APIGatewayStub) GetMethodResponse(ctx workflow.Context, input *apigateway.GetMethodResponseInput) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetMethodResponseAsync(ctx workflow.Context, input *apigateway.GetMethodResponseInput) *ApigatewayGetMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetMethodResponse", input)
	return &ApigatewayGetMethodResponseFuture{Future: future}
}

func (a *APIGatewayStub) GetModel(ctx workflow.Context, input *apigateway.GetModelInput) (*apigateway.Model, error) {
	var output apigateway.Model
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetModelAsync(ctx workflow.Context, input *apigateway.GetModelInput) *ApigatewayGetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetModel", input)
	return &ApigatewayGetModelFuture{Future: future}
}

func (a *APIGatewayStub) GetModelTemplate(ctx workflow.Context, input *apigateway.GetModelTemplateInput) (*apigateway.GetModelTemplateOutput, error) {
	var output apigateway.GetModelTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetModelTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetModelTemplateAsync(ctx workflow.Context, input *apigateway.GetModelTemplateInput) *ApigatewayGetModelTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetModelTemplate", input)
	return &ApigatewayGetModelTemplateFuture{Future: future}
}

func (a *APIGatewayStub) GetModels(ctx workflow.Context, input *apigateway.GetModelsInput) (*apigateway.GetModelsOutput, error) {
	var output apigateway.GetModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetModels", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetModelsAsync(ctx workflow.Context, input *apigateway.GetModelsInput) *ApigatewayGetModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetModels", input)
	return &ApigatewayGetModelsFuture{Future: future}
}

func (a *APIGatewayStub) GetRequestValidator(ctx workflow.Context, input *apigateway.GetRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetRequestValidatorAsync(ctx workflow.Context, input *apigateway.GetRequestValidatorInput) *ApigatewayGetRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRequestValidator", input)
	return &ApigatewayGetRequestValidatorFuture{Future: future}
}

func (a *APIGatewayStub) GetRequestValidators(ctx workflow.Context, input *apigateway.GetRequestValidatorsInput) (*apigateway.GetRequestValidatorsOutput, error) {
	var output apigateway.GetRequestValidatorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRequestValidators", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetRequestValidatorsAsync(ctx workflow.Context, input *apigateway.GetRequestValidatorsInput) *ApigatewayGetRequestValidatorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRequestValidators", input)
	return &ApigatewayGetRequestValidatorsFuture{Future: future}
}

func (a *APIGatewayStub) GetResource(ctx workflow.Context, input *apigateway.GetResourceInput) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetResource", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetResourceAsync(ctx workflow.Context, input *apigateway.GetResourceInput) *ApigatewayGetResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetResource", input)
	return &ApigatewayGetResourceFuture{Future: future}
}

func (a *APIGatewayStub) GetResources(ctx workflow.Context, input *apigateway.GetResourcesInput) (*apigateway.GetResourcesOutput, error) {
	var output apigateway.GetResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetResources", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetResourcesAsync(ctx workflow.Context, input *apigateway.GetResourcesInput) *ApigatewayGetResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetResources", input)
	return &ApigatewayGetResourcesFuture{Future: future}
}

func (a *APIGatewayStub) GetRestApi(ctx workflow.Context, input *apigateway.GetRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetRestApiAsync(ctx workflow.Context, input *apigateway.GetRestApiInput) *ApigatewayGetRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRestApi", input)
	return &ApigatewayGetRestApiFuture{Future: future}
}

func (a *APIGatewayStub) GetRestApis(ctx workflow.Context, input *apigateway.GetRestApisInput) (*apigateway.GetRestApisOutput, error) {
	var output apigateway.GetRestApisOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRestApis", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetRestApisAsync(ctx workflow.Context, input *apigateway.GetRestApisInput) *ApigatewayGetRestApisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetRestApis", input)
	return &ApigatewayGetRestApisFuture{Future: future}
}

func (a *APIGatewayStub) GetSdk(ctx workflow.Context, input *apigateway.GetSdkInput) (*apigateway.GetSdkOutput, error) {
	var output apigateway.GetSdkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetSdk", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetSdkAsync(ctx workflow.Context, input *apigateway.GetSdkInput) *ApigatewayGetSdkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetSdk", input)
	return &ApigatewayGetSdkFuture{Future: future}
}

func (a *APIGatewayStub) GetSdkType(ctx workflow.Context, input *apigateway.GetSdkTypeInput) (*apigateway.SdkType, error) {
	var output apigateway.SdkType
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetSdkType", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetSdkTypeAsync(ctx workflow.Context, input *apigateway.GetSdkTypeInput) *ApigatewayGetSdkTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetSdkType", input)
	return &ApigatewayGetSdkTypeFuture{Future: future}
}

func (a *APIGatewayStub) GetSdkTypes(ctx workflow.Context, input *apigateway.GetSdkTypesInput) (*apigateway.GetSdkTypesOutput, error) {
	var output apigateway.GetSdkTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetSdkTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetSdkTypesAsync(ctx workflow.Context, input *apigateway.GetSdkTypesInput) *ApigatewayGetSdkTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetSdkTypes", input)
	return &ApigatewayGetSdkTypesFuture{Future: future}
}

func (a *APIGatewayStub) GetStage(ctx workflow.Context, input *apigateway.GetStageInput) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetStage", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetStageAsync(ctx workflow.Context, input *apigateway.GetStageInput) *ApigatewayGetStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetStage", input)
	return &ApigatewayGetStageFuture{Future: future}
}

func (a *APIGatewayStub) GetStages(ctx workflow.Context, input *apigateway.GetStagesInput) (*apigateway.GetStagesOutput, error) {
	var output apigateway.GetStagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetStages", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetStagesAsync(ctx workflow.Context, input *apigateway.GetStagesInput) *ApigatewayGetStagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetStages", input)
	return &ApigatewayGetStagesFuture{Future: future}
}

func (a *APIGatewayStub) GetTags(ctx workflow.Context, input *apigateway.GetTagsInput) (*apigateway.GetTagsOutput, error) {
	var output apigateway.GetTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetTags", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetTagsAsync(ctx workflow.Context, input *apigateway.GetTagsInput) *ApigatewayGetTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetTags", input)
	return &ApigatewayGetTagsFuture{Future: future}
}

func (a *APIGatewayStub) GetUsage(ctx workflow.Context, input *apigateway.GetUsageInput) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetUsageAsync(ctx workflow.Context, input *apigateway.GetUsageInput) *ApigatewayGetUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsage", input)
	return &ApigatewayGetUsageFuture{Future: future}
}

func (a *APIGatewayStub) GetUsagePlan(ctx workflow.Context, input *apigateway.GetUsagePlanInput) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetUsagePlanAsync(ctx workflow.Context, input *apigateway.GetUsagePlanInput) *ApigatewayGetUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlan", input)
	return &ApigatewayGetUsagePlanFuture{Future: future}
}

func (a *APIGatewayStub) GetUsagePlanKey(ctx workflow.Context, input *apigateway.GetUsagePlanKeyInput) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlanKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.GetUsagePlanKeyInput) *ApigatewayGetUsagePlanKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlanKey", input)
	return &ApigatewayGetUsagePlanKeyFuture{Future: future}
}

func (a *APIGatewayStub) GetUsagePlanKeys(ctx workflow.Context, input *apigateway.GetUsagePlanKeysInput) (*apigateway.GetUsagePlanKeysOutput, error) {
	var output apigateway.GetUsagePlanKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlanKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetUsagePlanKeysAsync(ctx workflow.Context, input *apigateway.GetUsagePlanKeysInput) *ApigatewayGetUsagePlanKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlanKeys", input)
	return &ApigatewayGetUsagePlanKeysFuture{Future: future}
}

func (a *APIGatewayStub) GetUsagePlans(ctx workflow.Context, input *apigateway.GetUsagePlansInput) (*apigateway.GetUsagePlansOutput, error) {
	var output apigateway.GetUsagePlansOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlans", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetUsagePlansAsync(ctx workflow.Context, input *apigateway.GetUsagePlansInput) *ApigatewayGetUsagePlansFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetUsagePlans", input)
	return &ApigatewayGetUsagePlansFuture{Future: future}
}

func (a *APIGatewayStub) GetVpcLink(ctx workflow.Context, input *apigateway.GetVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetVpcLinkAsync(ctx workflow.Context, input *apigateway.GetVpcLinkInput) *ApigatewayGetVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetVpcLink", input)
	return &ApigatewayGetVpcLinkFuture{Future: future}
}

func (a *APIGatewayStub) GetVpcLinks(ctx workflow.Context, input *apigateway.GetVpcLinksInput) (*apigateway.GetVpcLinksOutput, error) {
	var output apigateway.GetVpcLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.GetVpcLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) GetVpcLinksAsync(ctx workflow.Context, input *apigateway.GetVpcLinksInput) *ApigatewayGetVpcLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.GetVpcLinks", input)
	return &ApigatewayGetVpcLinksFuture{Future: future}
}

func (a *APIGatewayStub) ImportApiKeys(ctx workflow.Context, input *apigateway.ImportApiKeysInput) (*apigateway.ImportApiKeysOutput, error) {
	var output apigateway.ImportApiKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.ImportApiKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) ImportApiKeysAsync(ctx workflow.Context, input *apigateway.ImportApiKeysInput) *ApigatewayImportApiKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.ImportApiKeys", input)
	return &ApigatewayImportApiKeysFuture{Future: future}
}

func (a *APIGatewayStub) ImportDocumentationParts(ctx workflow.Context, input *apigateway.ImportDocumentationPartsInput) (*apigateway.ImportDocumentationPartsOutput, error) {
	var output apigateway.ImportDocumentationPartsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.ImportDocumentationParts", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) ImportDocumentationPartsAsync(ctx workflow.Context, input *apigateway.ImportDocumentationPartsInput) *ApigatewayImportDocumentationPartsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.ImportDocumentationParts", input)
	return &ApigatewayImportDocumentationPartsFuture{Future: future}
}

func (a *APIGatewayStub) ImportRestApi(ctx workflow.Context, input *apigateway.ImportRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.ImportRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) ImportRestApiAsync(ctx workflow.Context, input *apigateway.ImportRestApiInput) *ApigatewayImportRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.ImportRestApi", input)
	return &ApigatewayImportRestApiFuture{Future: future}
}

func (a *APIGatewayStub) PutGatewayResponse(ctx workflow.Context, input *apigateway.PutGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.PutGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) PutGatewayResponseAsync(ctx workflow.Context, input *apigateway.PutGatewayResponseInput) *ApigatewayPutGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.PutGatewayResponse", input)
	return &ApigatewayPutGatewayResponseFuture{Future: future}
}

func (a *APIGatewayStub) PutIntegration(ctx workflow.Context, input *apigateway.PutIntegrationInput) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.PutIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) PutIntegrationAsync(ctx workflow.Context, input *apigateway.PutIntegrationInput) *ApigatewayPutIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.PutIntegration", input)
	return &ApigatewayPutIntegrationFuture{Future: future}
}

func (a *APIGatewayStub) PutIntegrationResponse(ctx workflow.Context, input *apigateway.PutIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.PutIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) PutIntegrationResponseAsync(ctx workflow.Context, input *apigateway.PutIntegrationResponseInput) *ApigatewayPutIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.PutIntegrationResponse", input)
	return &ApigatewayPutIntegrationResponseFuture{Future: future}
}

func (a *APIGatewayStub) PutMethod(ctx workflow.Context, input *apigateway.PutMethodInput) (*apigateway.Method, error) {
	var output apigateway.Method
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.PutMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) PutMethodAsync(ctx workflow.Context, input *apigateway.PutMethodInput) *ApigatewayPutMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.PutMethod", input)
	return &ApigatewayPutMethodFuture{Future: future}
}

func (a *APIGatewayStub) PutMethodResponse(ctx workflow.Context, input *apigateway.PutMethodResponseInput) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.PutMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) PutMethodResponseAsync(ctx workflow.Context, input *apigateway.PutMethodResponseInput) *ApigatewayPutMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.PutMethodResponse", input)
	return &ApigatewayPutMethodResponseFuture{Future: future}
}

func (a *APIGatewayStub) PutRestApi(ctx workflow.Context, input *apigateway.PutRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.PutRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) PutRestApiAsync(ctx workflow.Context, input *apigateway.PutRestApiInput) *ApigatewayPutRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.PutRestApi", input)
	return &ApigatewayPutRestApiFuture{Future: future}
}

func (a *APIGatewayStub) TagResource(ctx workflow.Context, input *apigateway.TagResourceInput) (*apigateway.TagResourceOutput, error) {
	var output apigateway.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) TagResourceAsync(ctx workflow.Context, input *apigateway.TagResourceInput) *ApigatewayTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.TagResource", input)
	return &ApigatewayTagResourceFuture{Future: future}
}

func (a *APIGatewayStub) TestInvokeAuthorizer(ctx workflow.Context, input *apigateway.TestInvokeAuthorizerInput) (*apigateway.TestInvokeAuthorizerOutput, error) {
	var output apigateway.TestInvokeAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.TestInvokeAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) TestInvokeAuthorizerAsync(ctx workflow.Context, input *apigateway.TestInvokeAuthorizerInput) *ApigatewayTestInvokeAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.TestInvokeAuthorizer", input)
	return &ApigatewayTestInvokeAuthorizerFuture{Future: future}
}

func (a *APIGatewayStub) TestInvokeMethod(ctx workflow.Context, input *apigateway.TestInvokeMethodInput) (*apigateway.TestInvokeMethodOutput, error) {
	var output apigateway.TestInvokeMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.TestInvokeMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) TestInvokeMethodAsync(ctx workflow.Context, input *apigateway.TestInvokeMethodInput) *ApigatewayTestInvokeMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.TestInvokeMethod", input)
	return &ApigatewayTestInvokeMethodFuture{Future: future}
}

func (a *APIGatewayStub) UntagResource(ctx workflow.Context, input *apigateway.UntagResourceInput) (*apigateway.UntagResourceOutput, error) {
	var output apigateway.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UntagResourceAsync(ctx workflow.Context, input *apigateway.UntagResourceInput) *ApigatewayUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UntagResource", input)
	return &ApigatewayUntagResourceFuture{Future: future}
}

func (a *APIGatewayStub) UpdateAccount(ctx workflow.Context, input *apigateway.UpdateAccountInput) (*apigateway.Account, error) {
	var output apigateway.Account
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateAccountAsync(ctx workflow.Context, input *apigateway.UpdateAccountInput) *ApigatewayUpdateAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateAccount", input)
	return &ApigatewayUpdateAccountFuture{Future: future}
}

func (a *APIGatewayStub) UpdateApiKey(ctx workflow.Context, input *apigateway.UpdateApiKeyInput) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateApiKeyAsync(ctx workflow.Context, input *apigateway.UpdateApiKeyInput) *ApigatewayUpdateApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateApiKey", input)
	return &ApigatewayUpdateApiKeyFuture{Future: future}
}

func (a *APIGatewayStub) UpdateAuthorizer(ctx workflow.Context, input *apigateway.UpdateAuthorizerInput) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateAuthorizerAsync(ctx workflow.Context, input *apigateway.UpdateAuthorizerInput) *ApigatewayUpdateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateAuthorizer", input)
	return &ApigatewayUpdateAuthorizerFuture{Future: future}
}

func (a *APIGatewayStub) UpdateBasePathMapping(ctx workflow.Context, input *apigateway.UpdateBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateBasePathMappingAsync(ctx workflow.Context, input *apigateway.UpdateBasePathMappingInput) *ApigatewayUpdateBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateBasePathMapping", input)
	return &ApigatewayUpdateBasePathMappingFuture{Future: future}
}

func (a *APIGatewayStub) UpdateClientCertificate(ctx workflow.Context, input *apigateway.UpdateClientCertificateInput) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateClientCertificateAsync(ctx workflow.Context, input *apigateway.UpdateClientCertificateInput) *ApigatewayUpdateClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateClientCertificate", input)
	return &ApigatewayUpdateClientCertificateFuture{Future: future}
}

func (a *APIGatewayStub) UpdateDeployment(ctx workflow.Context, input *apigateway.UpdateDeploymentInput) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateDeploymentAsync(ctx workflow.Context, input *apigateway.UpdateDeploymentInput) *ApigatewayUpdateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDeployment", input)
	return &ApigatewayUpdateDeploymentFuture{Future: future}
}

func (a *APIGatewayStub) UpdateDocumentationPart(ctx workflow.Context, input *apigateway.UpdateDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateDocumentationPartAsync(ctx workflow.Context, input *apigateway.UpdateDocumentationPartInput) *ApigatewayUpdateDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDocumentationPart", input)
	return &ApigatewayUpdateDocumentationPartFuture{Future: future}
}

func (a *APIGatewayStub) UpdateDocumentationVersion(ctx workflow.Context, input *apigateway.UpdateDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateDocumentationVersionAsync(ctx workflow.Context, input *apigateway.UpdateDocumentationVersionInput) *ApigatewayUpdateDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDocumentationVersion", input)
	return &ApigatewayUpdateDocumentationVersionFuture{Future: future}
}

func (a *APIGatewayStub) UpdateDomainName(ctx workflow.Context, input *apigateway.UpdateDomainNameInput) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateDomainNameAsync(ctx workflow.Context, input *apigateway.UpdateDomainNameInput) *ApigatewayUpdateDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateDomainName", input)
	return &ApigatewayUpdateDomainNameFuture{Future: future}
}

func (a *APIGatewayStub) UpdateGatewayResponse(ctx workflow.Context, input *apigateway.UpdateGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateGatewayResponseAsync(ctx workflow.Context, input *apigateway.UpdateGatewayResponseInput) *ApigatewayUpdateGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateGatewayResponse", input)
	return &ApigatewayUpdateGatewayResponseFuture{Future: future}
}

func (a *APIGatewayStub) UpdateIntegration(ctx workflow.Context, input *apigateway.UpdateIntegrationInput) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateIntegrationAsync(ctx workflow.Context, input *apigateway.UpdateIntegrationInput) *ApigatewayUpdateIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateIntegration", input)
	return &ApigatewayUpdateIntegrationFuture{Future: future}
}

func (a *APIGatewayStub) UpdateIntegrationResponse(ctx workflow.Context, input *apigateway.UpdateIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateIntegrationResponseAsync(ctx workflow.Context, input *apigateway.UpdateIntegrationResponseInput) *ApigatewayUpdateIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateIntegrationResponse", input)
	return &ApigatewayUpdateIntegrationResponseFuture{Future: future}
}

func (a *APIGatewayStub) UpdateMethod(ctx workflow.Context, input *apigateway.UpdateMethodInput) (*apigateway.Method, error) {
	var output apigateway.Method
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateMethodAsync(ctx workflow.Context, input *apigateway.UpdateMethodInput) *ApigatewayUpdateMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateMethod", input)
	return &ApigatewayUpdateMethodFuture{Future: future}
}

func (a *APIGatewayStub) UpdateMethodResponse(ctx workflow.Context, input *apigateway.UpdateMethodResponseInput) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateMethodResponseAsync(ctx workflow.Context, input *apigateway.UpdateMethodResponseInput) *ApigatewayUpdateMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateMethodResponse", input)
	return &ApigatewayUpdateMethodResponseFuture{Future: future}
}

func (a *APIGatewayStub) UpdateModel(ctx workflow.Context, input *apigateway.UpdateModelInput) (*apigateway.Model, error) {
	var output apigateway.Model
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateModelAsync(ctx workflow.Context, input *apigateway.UpdateModelInput) *ApigatewayUpdateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateModel", input)
	return &ApigatewayUpdateModelFuture{Future: future}
}

func (a *APIGatewayStub) UpdateRequestValidator(ctx workflow.Context, input *apigateway.UpdateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateRequestValidatorAsync(ctx workflow.Context, input *apigateway.UpdateRequestValidatorInput) *ApigatewayUpdateRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateRequestValidator", input)
	return &ApigatewayUpdateRequestValidatorFuture{Future: future}
}

func (a *APIGatewayStub) UpdateResource(ctx workflow.Context, input *apigateway.UpdateResourceInput) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateResourceAsync(ctx workflow.Context, input *apigateway.UpdateResourceInput) *ApigatewayUpdateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateResource", input)
	return &ApigatewayUpdateResourceFuture{Future: future}
}

func (a *APIGatewayStub) UpdateRestApi(ctx workflow.Context, input *apigateway.UpdateRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateRestApiAsync(ctx workflow.Context, input *apigateway.UpdateRestApiInput) *ApigatewayUpdateRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateRestApi", input)
	return &ApigatewayUpdateRestApiFuture{Future: future}
}

func (a *APIGatewayStub) UpdateStage(ctx workflow.Context, input *apigateway.UpdateStageInput) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateStage", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateStageAsync(ctx workflow.Context, input *apigateway.UpdateStageInput) *ApigatewayUpdateStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateStage", input)
	return &ApigatewayUpdateStageFuture{Future: future}
}

func (a *APIGatewayStub) UpdateUsage(ctx workflow.Context, input *apigateway.UpdateUsageInput) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateUsageAsync(ctx workflow.Context, input *apigateway.UpdateUsageInput) *ApigatewayUpdateUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateUsage", input)
	return &ApigatewayUpdateUsageFuture{Future: future}
}

func (a *APIGatewayStub) UpdateUsagePlan(ctx workflow.Context, input *apigateway.UpdateUsagePlanInput) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateUsagePlanAsync(ctx workflow.Context, input *apigateway.UpdateUsagePlanInput) *ApigatewayUpdateUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateUsagePlan", input)
	return &ApigatewayUpdateUsagePlanFuture{Future: future}
}

func (a *APIGatewayStub) UpdateVpcLink(ctx workflow.Context, input *apigateway.UpdateVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *APIGatewayStub) UpdateVpcLinkAsync(ctx workflow.Context, input *apigateway.UpdateVpcLinkInput) *ApigatewayUpdateVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigateway.UpdateVpcLink", input)
	return &ApigatewayUpdateVpcLinkFuture{Future: future}
}
