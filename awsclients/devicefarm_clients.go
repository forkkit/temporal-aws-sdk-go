// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/devicefarm"
	"go.temporal.io/sdk/workflow"
)

type DeviceFarmClient interface {
	CreateDevicePool(ctx workflow.Context, input *devicefarm.CreateDevicePoolInput) (*devicefarm.CreateDevicePoolOutput, error)
	CreateDevicePoolAsync(ctx workflow.Context, input *devicefarm.CreateDevicePoolInput) *DevicefarmCreateDevicePoolFuture

	CreateInstanceProfile(ctx workflow.Context, input *devicefarm.CreateInstanceProfileInput) (*devicefarm.CreateInstanceProfileOutput, error)
	CreateInstanceProfileAsync(ctx workflow.Context, input *devicefarm.CreateInstanceProfileInput) *DevicefarmCreateInstanceProfileFuture

	CreateNetworkProfile(ctx workflow.Context, input *devicefarm.CreateNetworkProfileInput) (*devicefarm.CreateNetworkProfileOutput, error)
	CreateNetworkProfileAsync(ctx workflow.Context, input *devicefarm.CreateNetworkProfileInput) *DevicefarmCreateNetworkProfileFuture

	CreateProject(ctx workflow.Context, input *devicefarm.CreateProjectInput) (*devicefarm.CreateProjectOutput, error)
	CreateProjectAsync(ctx workflow.Context, input *devicefarm.CreateProjectInput) *DevicefarmCreateProjectFuture

	CreateRemoteAccessSession(ctx workflow.Context, input *devicefarm.CreateRemoteAccessSessionInput) (*devicefarm.CreateRemoteAccessSessionOutput, error)
	CreateRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.CreateRemoteAccessSessionInput) *DevicefarmCreateRemoteAccessSessionFuture

	CreateTestGridProject(ctx workflow.Context, input *devicefarm.CreateTestGridProjectInput) (*devicefarm.CreateTestGridProjectOutput, error)
	CreateTestGridProjectAsync(ctx workflow.Context, input *devicefarm.CreateTestGridProjectInput) *DevicefarmCreateTestGridProjectFuture

	CreateTestGridUrl(ctx workflow.Context, input *devicefarm.CreateTestGridUrlInput) (*devicefarm.CreateTestGridUrlOutput, error)
	CreateTestGridUrlAsync(ctx workflow.Context, input *devicefarm.CreateTestGridUrlInput) *DevicefarmCreateTestGridUrlFuture

	CreateUpload(ctx workflow.Context, input *devicefarm.CreateUploadInput) (*devicefarm.CreateUploadOutput, error)
	CreateUploadAsync(ctx workflow.Context, input *devicefarm.CreateUploadInput) *DevicefarmCreateUploadFuture

	CreateVPCEConfiguration(ctx workflow.Context, input *devicefarm.CreateVPCEConfigurationInput) (*devicefarm.CreateVPCEConfigurationOutput, error)
	CreateVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.CreateVPCEConfigurationInput) *DevicefarmCreateVPCEConfigurationFuture

	DeleteDevicePool(ctx workflow.Context, input *devicefarm.DeleteDevicePoolInput) (*devicefarm.DeleteDevicePoolOutput, error)
	DeleteDevicePoolAsync(ctx workflow.Context, input *devicefarm.DeleteDevicePoolInput) *DevicefarmDeleteDevicePoolFuture

	DeleteInstanceProfile(ctx workflow.Context, input *devicefarm.DeleteInstanceProfileInput) (*devicefarm.DeleteInstanceProfileOutput, error)
	DeleteInstanceProfileAsync(ctx workflow.Context, input *devicefarm.DeleteInstanceProfileInput) *DevicefarmDeleteInstanceProfileFuture

	DeleteNetworkProfile(ctx workflow.Context, input *devicefarm.DeleteNetworkProfileInput) (*devicefarm.DeleteNetworkProfileOutput, error)
	DeleteNetworkProfileAsync(ctx workflow.Context, input *devicefarm.DeleteNetworkProfileInput) *DevicefarmDeleteNetworkProfileFuture

	DeleteProject(ctx workflow.Context, input *devicefarm.DeleteProjectInput) (*devicefarm.DeleteProjectOutput, error)
	DeleteProjectAsync(ctx workflow.Context, input *devicefarm.DeleteProjectInput) *DevicefarmDeleteProjectFuture

	DeleteRemoteAccessSession(ctx workflow.Context, input *devicefarm.DeleteRemoteAccessSessionInput) (*devicefarm.DeleteRemoteAccessSessionOutput, error)
	DeleteRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.DeleteRemoteAccessSessionInput) *DevicefarmDeleteRemoteAccessSessionFuture

	DeleteRun(ctx workflow.Context, input *devicefarm.DeleteRunInput) (*devicefarm.DeleteRunOutput, error)
	DeleteRunAsync(ctx workflow.Context, input *devicefarm.DeleteRunInput) *DevicefarmDeleteRunFuture

	DeleteTestGridProject(ctx workflow.Context, input *devicefarm.DeleteTestGridProjectInput) (*devicefarm.DeleteTestGridProjectOutput, error)
	DeleteTestGridProjectAsync(ctx workflow.Context, input *devicefarm.DeleteTestGridProjectInput) *DevicefarmDeleteTestGridProjectFuture

	DeleteUpload(ctx workflow.Context, input *devicefarm.DeleteUploadInput) (*devicefarm.DeleteUploadOutput, error)
	DeleteUploadAsync(ctx workflow.Context, input *devicefarm.DeleteUploadInput) *DevicefarmDeleteUploadFuture

	DeleteVPCEConfiguration(ctx workflow.Context, input *devicefarm.DeleteVPCEConfigurationInput) (*devicefarm.DeleteVPCEConfigurationOutput, error)
	DeleteVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.DeleteVPCEConfigurationInput) *DevicefarmDeleteVPCEConfigurationFuture

	GetAccountSettings(ctx workflow.Context, input *devicefarm.GetAccountSettingsInput) (*devicefarm.GetAccountSettingsOutput, error)
	GetAccountSettingsAsync(ctx workflow.Context, input *devicefarm.GetAccountSettingsInput) *DevicefarmGetAccountSettingsFuture

	GetDevice(ctx workflow.Context, input *devicefarm.GetDeviceInput) (*devicefarm.GetDeviceOutput, error)
	GetDeviceAsync(ctx workflow.Context, input *devicefarm.GetDeviceInput) *DevicefarmGetDeviceFuture

	GetDeviceInstance(ctx workflow.Context, input *devicefarm.GetDeviceInstanceInput) (*devicefarm.GetDeviceInstanceOutput, error)
	GetDeviceInstanceAsync(ctx workflow.Context, input *devicefarm.GetDeviceInstanceInput) *DevicefarmGetDeviceInstanceFuture

	GetDevicePool(ctx workflow.Context, input *devicefarm.GetDevicePoolInput) (*devicefarm.GetDevicePoolOutput, error)
	GetDevicePoolAsync(ctx workflow.Context, input *devicefarm.GetDevicePoolInput) *DevicefarmGetDevicePoolFuture

	GetDevicePoolCompatibility(ctx workflow.Context, input *devicefarm.GetDevicePoolCompatibilityInput) (*devicefarm.GetDevicePoolCompatibilityOutput, error)
	GetDevicePoolCompatibilityAsync(ctx workflow.Context, input *devicefarm.GetDevicePoolCompatibilityInput) *DevicefarmGetDevicePoolCompatibilityFuture

	GetInstanceProfile(ctx workflow.Context, input *devicefarm.GetInstanceProfileInput) (*devicefarm.GetInstanceProfileOutput, error)
	GetInstanceProfileAsync(ctx workflow.Context, input *devicefarm.GetInstanceProfileInput) *DevicefarmGetInstanceProfileFuture

	GetJob(ctx workflow.Context, input *devicefarm.GetJobInput) (*devicefarm.GetJobOutput, error)
	GetJobAsync(ctx workflow.Context, input *devicefarm.GetJobInput) *DevicefarmGetJobFuture

	GetNetworkProfile(ctx workflow.Context, input *devicefarm.GetNetworkProfileInput) (*devicefarm.GetNetworkProfileOutput, error)
	GetNetworkProfileAsync(ctx workflow.Context, input *devicefarm.GetNetworkProfileInput) *DevicefarmGetNetworkProfileFuture

	GetOfferingStatus(ctx workflow.Context, input *devicefarm.GetOfferingStatusInput) (*devicefarm.GetOfferingStatusOutput, error)
	GetOfferingStatusAsync(ctx workflow.Context, input *devicefarm.GetOfferingStatusInput) *DevicefarmGetOfferingStatusFuture

	GetProject(ctx workflow.Context, input *devicefarm.GetProjectInput) (*devicefarm.GetProjectOutput, error)
	GetProjectAsync(ctx workflow.Context, input *devicefarm.GetProjectInput) *DevicefarmGetProjectFuture

	GetRemoteAccessSession(ctx workflow.Context, input *devicefarm.GetRemoteAccessSessionInput) (*devicefarm.GetRemoteAccessSessionOutput, error)
	GetRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.GetRemoteAccessSessionInput) *DevicefarmGetRemoteAccessSessionFuture

	GetRun(ctx workflow.Context, input *devicefarm.GetRunInput) (*devicefarm.GetRunOutput, error)
	GetRunAsync(ctx workflow.Context, input *devicefarm.GetRunInput) *DevicefarmGetRunFuture

	GetSuite(ctx workflow.Context, input *devicefarm.GetSuiteInput) (*devicefarm.GetSuiteOutput, error)
	GetSuiteAsync(ctx workflow.Context, input *devicefarm.GetSuiteInput) *DevicefarmGetSuiteFuture

	GetTest(ctx workflow.Context, input *devicefarm.GetTestInput) (*devicefarm.GetTestOutput, error)
	GetTestAsync(ctx workflow.Context, input *devicefarm.GetTestInput) *DevicefarmGetTestFuture

	GetTestGridProject(ctx workflow.Context, input *devicefarm.GetTestGridProjectInput) (*devicefarm.GetTestGridProjectOutput, error)
	GetTestGridProjectAsync(ctx workflow.Context, input *devicefarm.GetTestGridProjectInput) *DevicefarmGetTestGridProjectFuture

	GetTestGridSession(ctx workflow.Context, input *devicefarm.GetTestGridSessionInput) (*devicefarm.GetTestGridSessionOutput, error)
	GetTestGridSessionAsync(ctx workflow.Context, input *devicefarm.GetTestGridSessionInput) *DevicefarmGetTestGridSessionFuture

	GetUpload(ctx workflow.Context, input *devicefarm.GetUploadInput) (*devicefarm.GetUploadOutput, error)
	GetUploadAsync(ctx workflow.Context, input *devicefarm.GetUploadInput) *DevicefarmGetUploadFuture

	GetVPCEConfiguration(ctx workflow.Context, input *devicefarm.GetVPCEConfigurationInput) (*devicefarm.GetVPCEConfigurationOutput, error)
	GetVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.GetVPCEConfigurationInput) *DevicefarmGetVPCEConfigurationFuture

	InstallToRemoteAccessSession(ctx workflow.Context, input *devicefarm.InstallToRemoteAccessSessionInput) (*devicefarm.InstallToRemoteAccessSessionOutput, error)
	InstallToRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.InstallToRemoteAccessSessionInput) *DevicefarmInstallToRemoteAccessSessionFuture

	ListArtifacts(ctx workflow.Context, input *devicefarm.ListArtifactsInput) (*devicefarm.ListArtifactsOutput, error)
	ListArtifactsAsync(ctx workflow.Context, input *devicefarm.ListArtifactsInput) *DevicefarmListArtifactsFuture

	ListDeviceInstances(ctx workflow.Context, input *devicefarm.ListDeviceInstancesInput) (*devicefarm.ListDeviceInstancesOutput, error)
	ListDeviceInstancesAsync(ctx workflow.Context, input *devicefarm.ListDeviceInstancesInput) *DevicefarmListDeviceInstancesFuture

	ListDevicePools(ctx workflow.Context, input *devicefarm.ListDevicePoolsInput) (*devicefarm.ListDevicePoolsOutput, error)
	ListDevicePoolsAsync(ctx workflow.Context, input *devicefarm.ListDevicePoolsInput) *DevicefarmListDevicePoolsFuture

	ListDevices(ctx workflow.Context, input *devicefarm.ListDevicesInput) (*devicefarm.ListDevicesOutput, error)
	ListDevicesAsync(ctx workflow.Context, input *devicefarm.ListDevicesInput) *DevicefarmListDevicesFuture

	ListInstanceProfiles(ctx workflow.Context, input *devicefarm.ListInstanceProfilesInput) (*devicefarm.ListInstanceProfilesOutput, error)
	ListInstanceProfilesAsync(ctx workflow.Context, input *devicefarm.ListInstanceProfilesInput) *DevicefarmListInstanceProfilesFuture

	ListJobs(ctx workflow.Context, input *devicefarm.ListJobsInput) (*devicefarm.ListJobsOutput, error)
	ListJobsAsync(ctx workflow.Context, input *devicefarm.ListJobsInput) *DevicefarmListJobsFuture

	ListNetworkProfiles(ctx workflow.Context, input *devicefarm.ListNetworkProfilesInput) (*devicefarm.ListNetworkProfilesOutput, error)
	ListNetworkProfilesAsync(ctx workflow.Context, input *devicefarm.ListNetworkProfilesInput) *DevicefarmListNetworkProfilesFuture

	ListOfferingPromotions(ctx workflow.Context, input *devicefarm.ListOfferingPromotionsInput) (*devicefarm.ListOfferingPromotionsOutput, error)
	ListOfferingPromotionsAsync(ctx workflow.Context, input *devicefarm.ListOfferingPromotionsInput) *DevicefarmListOfferingPromotionsFuture

	ListOfferingTransactions(ctx workflow.Context, input *devicefarm.ListOfferingTransactionsInput) (*devicefarm.ListOfferingTransactionsOutput, error)
	ListOfferingTransactionsAsync(ctx workflow.Context, input *devicefarm.ListOfferingTransactionsInput) *DevicefarmListOfferingTransactionsFuture

	ListOfferings(ctx workflow.Context, input *devicefarm.ListOfferingsInput) (*devicefarm.ListOfferingsOutput, error)
	ListOfferingsAsync(ctx workflow.Context, input *devicefarm.ListOfferingsInput) *DevicefarmListOfferingsFuture

	ListProjects(ctx workflow.Context, input *devicefarm.ListProjectsInput) (*devicefarm.ListProjectsOutput, error)
	ListProjectsAsync(ctx workflow.Context, input *devicefarm.ListProjectsInput) *DevicefarmListProjectsFuture

	ListRemoteAccessSessions(ctx workflow.Context, input *devicefarm.ListRemoteAccessSessionsInput) (*devicefarm.ListRemoteAccessSessionsOutput, error)
	ListRemoteAccessSessionsAsync(ctx workflow.Context, input *devicefarm.ListRemoteAccessSessionsInput) *DevicefarmListRemoteAccessSessionsFuture

	ListRuns(ctx workflow.Context, input *devicefarm.ListRunsInput) (*devicefarm.ListRunsOutput, error)
	ListRunsAsync(ctx workflow.Context, input *devicefarm.ListRunsInput) *DevicefarmListRunsFuture

	ListSamples(ctx workflow.Context, input *devicefarm.ListSamplesInput) (*devicefarm.ListSamplesOutput, error)
	ListSamplesAsync(ctx workflow.Context, input *devicefarm.ListSamplesInput) *DevicefarmListSamplesFuture

	ListSuites(ctx workflow.Context, input *devicefarm.ListSuitesInput) (*devicefarm.ListSuitesOutput, error)
	ListSuitesAsync(ctx workflow.Context, input *devicefarm.ListSuitesInput) *DevicefarmListSuitesFuture

	ListTagsForResource(ctx workflow.Context, input *devicefarm.ListTagsForResourceInput) (*devicefarm.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *devicefarm.ListTagsForResourceInput) *DevicefarmListTagsForResourceFuture

	ListTestGridProjects(ctx workflow.Context, input *devicefarm.ListTestGridProjectsInput) (*devicefarm.ListTestGridProjectsOutput, error)
	ListTestGridProjectsAsync(ctx workflow.Context, input *devicefarm.ListTestGridProjectsInput) *DevicefarmListTestGridProjectsFuture

	ListTestGridSessionActions(ctx workflow.Context, input *devicefarm.ListTestGridSessionActionsInput) (*devicefarm.ListTestGridSessionActionsOutput, error)
	ListTestGridSessionActionsAsync(ctx workflow.Context, input *devicefarm.ListTestGridSessionActionsInput) *DevicefarmListTestGridSessionActionsFuture

	ListTestGridSessionArtifacts(ctx workflow.Context, input *devicefarm.ListTestGridSessionArtifactsInput) (*devicefarm.ListTestGridSessionArtifactsOutput, error)
	ListTestGridSessionArtifactsAsync(ctx workflow.Context, input *devicefarm.ListTestGridSessionArtifactsInput) *DevicefarmListTestGridSessionArtifactsFuture

	ListTestGridSessions(ctx workflow.Context, input *devicefarm.ListTestGridSessionsInput) (*devicefarm.ListTestGridSessionsOutput, error)
	ListTestGridSessionsAsync(ctx workflow.Context, input *devicefarm.ListTestGridSessionsInput) *DevicefarmListTestGridSessionsFuture

	ListTests(ctx workflow.Context, input *devicefarm.ListTestsInput) (*devicefarm.ListTestsOutput, error)
	ListTestsAsync(ctx workflow.Context, input *devicefarm.ListTestsInput) *DevicefarmListTestsFuture

	ListUniqueProblems(ctx workflow.Context, input *devicefarm.ListUniqueProblemsInput) (*devicefarm.ListUniqueProblemsOutput, error)
	ListUniqueProblemsAsync(ctx workflow.Context, input *devicefarm.ListUniqueProblemsInput) *DevicefarmListUniqueProblemsFuture

	ListUploads(ctx workflow.Context, input *devicefarm.ListUploadsInput) (*devicefarm.ListUploadsOutput, error)
	ListUploadsAsync(ctx workflow.Context, input *devicefarm.ListUploadsInput) *DevicefarmListUploadsFuture

	ListVPCEConfigurations(ctx workflow.Context, input *devicefarm.ListVPCEConfigurationsInput) (*devicefarm.ListVPCEConfigurationsOutput, error)
	ListVPCEConfigurationsAsync(ctx workflow.Context, input *devicefarm.ListVPCEConfigurationsInput) *DevicefarmListVPCEConfigurationsFuture

	PurchaseOffering(ctx workflow.Context, input *devicefarm.PurchaseOfferingInput) (*devicefarm.PurchaseOfferingOutput, error)
	PurchaseOfferingAsync(ctx workflow.Context, input *devicefarm.PurchaseOfferingInput) *DevicefarmPurchaseOfferingFuture

	RenewOffering(ctx workflow.Context, input *devicefarm.RenewOfferingInput) (*devicefarm.RenewOfferingOutput, error)
	RenewOfferingAsync(ctx workflow.Context, input *devicefarm.RenewOfferingInput) *DevicefarmRenewOfferingFuture

	ScheduleRun(ctx workflow.Context, input *devicefarm.ScheduleRunInput) (*devicefarm.ScheduleRunOutput, error)
	ScheduleRunAsync(ctx workflow.Context, input *devicefarm.ScheduleRunInput) *DevicefarmScheduleRunFuture

	StopJob(ctx workflow.Context, input *devicefarm.StopJobInput) (*devicefarm.StopJobOutput, error)
	StopJobAsync(ctx workflow.Context, input *devicefarm.StopJobInput) *DevicefarmStopJobFuture

	StopRemoteAccessSession(ctx workflow.Context, input *devicefarm.StopRemoteAccessSessionInput) (*devicefarm.StopRemoteAccessSessionOutput, error)
	StopRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.StopRemoteAccessSessionInput) *DevicefarmStopRemoteAccessSessionFuture

	StopRun(ctx workflow.Context, input *devicefarm.StopRunInput) (*devicefarm.StopRunOutput, error)
	StopRunAsync(ctx workflow.Context, input *devicefarm.StopRunInput) *DevicefarmStopRunFuture

	TagResource(ctx workflow.Context, input *devicefarm.TagResourceInput) (*devicefarm.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *devicefarm.TagResourceInput) *DevicefarmTagResourceFuture

	UntagResource(ctx workflow.Context, input *devicefarm.UntagResourceInput) (*devicefarm.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *devicefarm.UntagResourceInput) *DevicefarmUntagResourceFuture

	UpdateDeviceInstance(ctx workflow.Context, input *devicefarm.UpdateDeviceInstanceInput) (*devicefarm.UpdateDeviceInstanceOutput, error)
	UpdateDeviceInstanceAsync(ctx workflow.Context, input *devicefarm.UpdateDeviceInstanceInput) *DevicefarmUpdateDeviceInstanceFuture

	UpdateDevicePool(ctx workflow.Context, input *devicefarm.UpdateDevicePoolInput) (*devicefarm.UpdateDevicePoolOutput, error)
	UpdateDevicePoolAsync(ctx workflow.Context, input *devicefarm.UpdateDevicePoolInput) *DevicefarmUpdateDevicePoolFuture

	UpdateInstanceProfile(ctx workflow.Context, input *devicefarm.UpdateInstanceProfileInput) (*devicefarm.UpdateInstanceProfileOutput, error)
	UpdateInstanceProfileAsync(ctx workflow.Context, input *devicefarm.UpdateInstanceProfileInput) *DevicefarmUpdateInstanceProfileFuture

	UpdateNetworkProfile(ctx workflow.Context, input *devicefarm.UpdateNetworkProfileInput) (*devicefarm.UpdateNetworkProfileOutput, error)
	UpdateNetworkProfileAsync(ctx workflow.Context, input *devicefarm.UpdateNetworkProfileInput) *DevicefarmUpdateNetworkProfileFuture

	UpdateProject(ctx workflow.Context, input *devicefarm.UpdateProjectInput) (*devicefarm.UpdateProjectOutput, error)
	UpdateProjectAsync(ctx workflow.Context, input *devicefarm.UpdateProjectInput) *DevicefarmUpdateProjectFuture

	UpdateTestGridProject(ctx workflow.Context, input *devicefarm.UpdateTestGridProjectInput) (*devicefarm.UpdateTestGridProjectOutput, error)
	UpdateTestGridProjectAsync(ctx workflow.Context, input *devicefarm.UpdateTestGridProjectInput) *DevicefarmUpdateTestGridProjectFuture

	UpdateUpload(ctx workflow.Context, input *devicefarm.UpdateUploadInput) (*devicefarm.UpdateUploadOutput, error)
	UpdateUploadAsync(ctx workflow.Context, input *devicefarm.UpdateUploadInput) *DevicefarmUpdateUploadFuture

	UpdateVPCEConfiguration(ctx workflow.Context, input *devicefarm.UpdateVPCEConfigurationInput) (*devicefarm.UpdateVPCEConfigurationOutput, error)
	UpdateVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.UpdateVPCEConfigurationInput) *DevicefarmUpdateVPCEConfigurationFuture
}

type DeviceFarmStub struct{}

func NewDeviceFarmStub() DeviceFarmClient {
	return &DeviceFarmStub{}
}

type DevicefarmCreateDevicePoolFuture struct {
	Future workflow.Future
}

func (r *DevicefarmCreateDevicePoolFuture) Get(ctx workflow.Context) (*devicefarm.CreateDevicePoolOutput, error) {
	var output devicefarm.CreateDevicePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmCreateInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *DevicefarmCreateInstanceProfileFuture) Get(ctx workflow.Context) (*devicefarm.CreateInstanceProfileOutput, error) {
	var output devicefarm.CreateInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmCreateNetworkProfileFuture struct {
	Future workflow.Future
}

func (r *DevicefarmCreateNetworkProfileFuture) Get(ctx workflow.Context) (*devicefarm.CreateNetworkProfileOutput, error) {
	var output devicefarm.CreateNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmCreateProjectFuture struct {
	Future workflow.Future
}

func (r *DevicefarmCreateProjectFuture) Get(ctx workflow.Context) (*devicefarm.CreateProjectOutput, error) {
	var output devicefarm.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmCreateRemoteAccessSessionFuture struct {
	Future workflow.Future
}

func (r *DevicefarmCreateRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.CreateRemoteAccessSessionOutput, error) {
	var output devicefarm.CreateRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmCreateTestGridProjectFuture struct {
	Future workflow.Future
}

func (r *DevicefarmCreateTestGridProjectFuture) Get(ctx workflow.Context) (*devicefarm.CreateTestGridProjectOutput, error) {
	var output devicefarm.CreateTestGridProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmCreateTestGridUrlFuture struct {
	Future workflow.Future
}

func (r *DevicefarmCreateTestGridUrlFuture) Get(ctx workflow.Context) (*devicefarm.CreateTestGridUrlOutput, error) {
	var output devicefarm.CreateTestGridUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmCreateUploadFuture struct {
	Future workflow.Future
}

func (r *DevicefarmCreateUploadFuture) Get(ctx workflow.Context) (*devicefarm.CreateUploadOutput, error) {
	var output devicefarm.CreateUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmCreateVPCEConfigurationFuture struct {
	Future workflow.Future
}

func (r *DevicefarmCreateVPCEConfigurationFuture) Get(ctx workflow.Context) (*devicefarm.CreateVPCEConfigurationOutput, error) {
	var output devicefarm.CreateVPCEConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmDeleteDevicePoolFuture struct {
	Future workflow.Future
}

func (r *DevicefarmDeleteDevicePoolFuture) Get(ctx workflow.Context) (*devicefarm.DeleteDevicePoolOutput, error) {
	var output devicefarm.DeleteDevicePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmDeleteInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *DevicefarmDeleteInstanceProfileFuture) Get(ctx workflow.Context) (*devicefarm.DeleteInstanceProfileOutput, error) {
	var output devicefarm.DeleteInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmDeleteNetworkProfileFuture struct {
	Future workflow.Future
}

func (r *DevicefarmDeleteNetworkProfileFuture) Get(ctx workflow.Context) (*devicefarm.DeleteNetworkProfileOutput, error) {
	var output devicefarm.DeleteNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmDeleteProjectFuture struct {
	Future workflow.Future
}

func (r *DevicefarmDeleteProjectFuture) Get(ctx workflow.Context) (*devicefarm.DeleteProjectOutput, error) {
	var output devicefarm.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmDeleteRemoteAccessSessionFuture struct {
	Future workflow.Future
}

func (r *DevicefarmDeleteRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.DeleteRemoteAccessSessionOutput, error) {
	var output devicefarm.DeleteRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmDeleteRunFuture struct {
	Future workflow.Future
}

func (r *DevicefarmDeleteRunFuture) Get(ctx workflow.Context) (*devicefarm.DeleteRunOutput, error) {
	var output devicefarm.DeleteRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmDeleteTestGridProjectFuture struct {
	Future workflow.Future
}

func (r *DevicefarmDeleteTestGridProjectFuture) Get(ctx workflow.Context) (*devicefarm.DeleteTestGridProjectOutput, error) {
	var output devicefarm.DeleteTestGridProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmDeleteUploadFuture struct {
	Future workflow.Future
}

func (r *DevicefarmDeleteUploadFuture) Get(ctx workflow.Context) (*devicefarm.DeleteUploadOutput, error) {
	var output devicefarm.DeleteUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmDeleteVPCEConfigurationFuture struct {
	Future workflow.Future
}

func (r *DevicefarmDeleteVPCEConfigurationFuture) Get(ctx workflow.Context) (*devicefarm.DeleteVPCEConfigurationOutput, error) {
	var output devicefarm.DeleteVPCEConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetAccountSettingsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetAccountSettingsFuture) Get(ctx workflow.Context) (*devicefarm.GetAccountSettingsOutput, error) {
	var output devicefarm.GetAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetDeviceFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetDeviceFuture) Get(ctx workflow.Context) (*devicefarm.GetDeviceOutput, error) {
	var output devicefarm.GetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetDeviceInstanceFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetDeviceInstanceFuture) Get(ctx workflow.Context) (*devicefarm.GetDeviceInstanceOutput, error) {
	var output devicefarm.GetDeviceInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetDevicePoolFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetDevicePoolFuture) Get(ctx workflow.Context) (*devicefarm.GetDevicePoolOutput, error) {
	var output devicefarm.GetDevicePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetDevicePoolCompatibilityFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetDevicePoolCompatibilityFuture) Get(ctx workflow.Context) (*devicefarm.GetDevicePoolCompatibilityOutput, error) {
	var output devicefarm.GetDevicePoolCompatibilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetInstanceProfileFuture) Get(ctx workflow.Context) (*devicefarm.GetInstanceProfileOutput, error) {
	var output devicefarm.GetInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetJobFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetJobFuture) Get(ctx workflow.Context) (*devicefarm.GetJobOutput, error) {
	var output devicefarm.GetJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetNetworkProfileFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetNetworkProfileFuture) Get(ctx workflow.Context) (*devicefarm.GetNetworkProfileOutput, error) {
	var output devicefarm.GetNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetOfferingStatusFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetOfferingStatusFuture) Get(ctx workflow.Context) (*devicefarm.GetOfferingStatusOutput, error) {
	var output devicefarm.GetOfferingStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetProjectFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetProjectFuture) Get(ctx workflow.Context) (*devicefarm.GetProjectOutput, error) {
	var output devicefarm.GetProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetRemoteAccessSessionFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.GetRemoteAccessSessionOutput, error) {
	var output devicefarm.GetRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetRunFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetRunFuture) Get(ctx workflow.Context) (*devicefarm.GetRunOutput, error) {
	var output devicefarm.GetRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetSuiteFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetSuiteFuture) Get(ctx workflow.Context) (*devicefarm.GetSuiteOutput, error) {
	var output devicefarm.GetSuiteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetTestFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetTestFuture) Get(ctx workflow.Context) (*devicefarm.GetTestOutput, error) {
	var output devicefarm.GetTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetTestGridProjectFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetTestGridProjectFuture) Get(ctx workflow.Context) (*devicefarm.GetTestGridProjectOutput, error) {
	var output devicefarm.GetTestGridProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetTestGridSessionFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetTestGridSessionFuture) Get(ctx workflow.Context) (*devicefarm.GetTestGridSessionOutput, error) {
	var output devicefarm.GetTestGridSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetUploadFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetUploadFuture) Get(ctx workflow.Context) (*devicefarm.GetUploadOutput, error) {
	var output devicefarm.GetUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmGetVPCEConfigurationFuture struct {
	Future workflow.Future
}

func (r *DevicefarmGetVPCEConfigurationFuture) Get(ctx workflow.Context) (*devicefarm.GetVPCEConfigurationOutput, error) {
	var output devicefarm.GetVPCEConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmInstallToRemoteAccessSessionFuture struct {
	Future workflow.Future
}

func (r *DevicefarmInstallToRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.InstallToRemoteAccessSessionOutput, error) {
	var output devicefarm.InstallToRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListArtifactsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListArtifactsFuture) Get(ctx workflow.Context) (*devicefarm.ListArtifactsOutput, error) {
	var output devicefarm.ListArtifactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListDeviceInstancesFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListDeviceInstancesFuture) Get(ctx workflow.Context) (*devicefarm.ListDeviceInstancesOutput, error) {
	var output devicefarm.ListDeviceInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListDevicePoolsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListDevicePoolsFuture) Get(ctx workflow.Context) (*devicefarm.ListDevicePoolsOutput, error) {
	var output devicefarm.ListDevicePoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListDevicesFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListDevicesFuture) Get(ctx workflow.Context) (*devicefarm.ListDevicesOutput, error) {
	var output devicefarm.ListDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListInstanceProfilesFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListInstanceProfilesFuture) Get(ctx workflow.Context) (*devicefarm.ListInstanceProfilesOutput, error) {
	var output devicefarm.ListInstanceProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListJobsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListJobsFuture) Get(ctx workflow.Context) (*devicefarm.ListJobsOutput, error) {
	var output devicefarm.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListNetworkProfilesFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListNetworkProfilesFuture) Get(ctx workflow.Context) (*devicefarm.ListNetworkProfilesOutput, error) {
	var output devicefarm.ListNetworkProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListOfferingPromotionsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListOfferingPromotionsFuture) Get(ctx workflow.Context) (*devicefarm.ListOfferingPromotionsOutput, error) {
	var output devicefarm.ListOfferingPromotionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListOfferingTransactionsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListOfferingTransactionsFuture) Get(ctx workflow.Context) (*devicefarm.ListOfferingTransactionsOutput, error) {
	var output devicefarm.ListOfferingTransactionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListOfferingsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListOfferingsFuture) Get(ctx workflow.Context) (*devicefarm.ListOfferingsOutput, error) {
	var output devicefarm.ListOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListProjectsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListProjectsFuture) Get(ctx workflow.Context) (*devicefarm.ListProjectsOutput, error) {
	var output devicefarm.ListProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListRemoteAccessSessionsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListRemoteAccessSessionsFuture) Get(ctx workflow.Context) (*devicefarm.ListRemoteAccessSessionsOutput, error) {
	var output devicefarm.ListRemoteAccessSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListRunsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListRunsFuture) Get(ctx workflow.Context) (*devicefarm.ListRunsOutput, error) {
	var output devicefarm.ListRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListSamplesFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListSamplesFuture) Get(ctx workflow.Context) (*devicefarm.ListSamplesOutput, error) {
	var output devicefarm.ListSamplesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListSuitesFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListSuitesFuture) Get(ctx workflow.Context) (*devicefarm.ListSuitesOutput, error) {
	var output devicefarm.ListSuitesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListTagsForResourceFuture) Get(ctx workflow.Context) (*devicefarm.ListTagsForResourceOutput, error) {
	var output devicefarm.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListTestGridProjectsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListTestGridProjectsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestGridProjectsOutput, error) {
	var output devicefarm.ListTestGridProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListTestGridSessionActionsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListTestGridSessionActionsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestGridSessionActionsOutput, error) {
	var output devicefarm.ListTestGridSessionActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListTestGridSessionArtifactsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListTestGridSessionArtifactsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestGridSessionArtifactsOutput, error) {
	var output devicefarm.ListTestGridSessionArtifactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListTestGridSessionsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListTestGridSessionsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestGridSessionsOutput, error) {
	var output devicefarm.ListTestGridSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListTestsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListTestsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestsOutput, error) {
	var output devicefarm.ListTestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListUniqueProblemsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListUniqueProblemsFuture) Get(ctx workflow.Context) (*devicefarm.ListUniqueProblemsOutput, error) {
	var output devicefarm.ListUniqueProblemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListUploadsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListUploadsFuture) Get(ctx workflow.Context) (*devicefarm.ListUploadsOutput, error) {
	var output devicefarm.ListUploadsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmListVPCEConfigurationsFuture struct {
	Future workflow.Future
}

func (r *DevicefarmListVPCEConfigurationsFuture) Get(ctx workflow.Context) (*devicefarm.ListVPCEConfigurationsOutput, error) {
	var output devicefarm.ListVPCEConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmPurchaseOfferingFuture struct {
	Future workflow.Future
}

func (r *DevicefarmPurchaseOfferingFuture) Get(ctx workflow.Context) (*devicefarm.PurchaseOfferingOutput, error) {
	var output devicefarm.PurchaseOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmRenewOfferingFuture struct {
	Future workflow.Future
}

func (r *DevicefarmRenewOfferingFuture) Get(ctx workflow.Context) (*devicefarm.RenewOfferingOutput, error) {
	var output devicefarm.RenewOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmScheduleRunFuture struct {
	Future workflow.Future
}

func (r *DevicefarmScheduleRunFuture) Get(ctx workflow.Context) (*devicefarm.ScheduleRunOutput, error) {
	var output devicefarm.ScheduleRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmStopJobFuture struct {
	Future workflow.Future
}

func (r *DevicefarmStopJobFuture) Get(ctx workflow.Context) (*devicefarm.StopJobOutput, error) {
	var output devicefarm.StopJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmStopRemoteAccessSessionFuture struct {
	Future workflow.Future
}

func (r *DevicefarmStopRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.StopRemoteAccessSessionOutput, error) {
	var output devicefarm.StopRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmStopRunFuture struct {
	Future workflow.Future
}

func (r *DevicefarmStopRunFuture) Get(ctx workflow.Context) (*devicefarm.StopRunOutput, error) {
	var output devicefarm.StopRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmTagResourceFuture struct {
	Future workflow.Future
}

func (r *DevicefarmTagResourceFuture) Get(ctx workflow.Context) (*devicefarm.TagResourceOutput, error) {
	var output devicefarm.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmUntagResourceFuture struct {
	Future workflow.Future
}

func (r *DevicefarmUntagResourceFuture) Get(ctx workflow.Context) (*devicefarm.UntagResourceOutput, error) {
	var output devicefarm.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmUpdateDeviceInstanceFuture struct {
	Future workflow.Future
}

func (r *DevicefarmUpdateDeviceInstanceFuture) Get(ctx workflow.Context) (*devicefarm.UpdateDeviceInstanceOutput, error) {
	var output devicefarm.UpdateDeviceInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmUpdateDevicePoolFuture struct {
	Future workflow.Future
}

func (r *DevicefarmUpdateDevicePoolFuture) Get(ctx workflow.Context) (*devicefarm.UpdateDevicePoolOutput, error) {
	var output devicefarm.UpdateDevicePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmUpdateInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *DevicefarmUpdateInstanceProfileFuture) Get(ctx workflow.Context) (*devicefarm.UpdateInstanceProfileOutput, error) {
	var output devicefarm.UpdateInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmUpdateNetworkProfileFuture struct {
	Future workflow.Future
}

func (r *DevicefarmUpdateNetworkProfileFuture) Get(ctx workflow.Context) (*devicefarm.UpdateNetworkProfileOutput, error) {
	var output devicefarm.UpdateNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmUpdateProjectFuture struct {
	Future workflow.Future
}

func (r *DevicefarmUpdateProjectFuture) Get(ctx workflow.Context) (*devicefarm.UpdateProjectOutput, error) {
	var output devicefarm.UpdateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmUpdateTestGridProjectFuture struct {
	Future workflow.Future
}

func (r *DevicefarmUpdateTestGridProjectFuture) Get(ctx workflow.Context) (*devicefarm.UpdateTestGridProjectOutput, error) {
	var output devicefarm.UpdateTestGridProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmUpdateUploadFuture struct {
	Future workflow.Future
}

func (r *DevicefarmUpdateUploadFuture) Get(ctx workflow.Context) (*devicefarm.UpdateUploadOutput, error) {
	var output devicefarm.UpdateUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DevicefarmUpdateVPCEConfigurationFuture struct {
	Future workflow.Future
}

func (r *DevicefarmUpdateVPCEConfigurationFuture) Get(ctx workflow.Context) (*devicefarm.UpdateVPCEConfigurationOutput, error) {
	var output devicefarm.UpdateVPCEConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) CreateDevicePool(ctx workflow.Context, input *devicefarm.CreateDevicePoolInput) (*devicefarm.CreateDevicePoolOutput, error) {
	var output devicefarm.CreateDevicePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateDevicePool", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) CreateDevicePoolAsync(ctx workflow.Context, input *devicefarm.CreateDevicePoolInput) *DevicefarmCreateDevicePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateDevicePool", input)
	return &DevicefarmCreateDevicePoolFuture{Future: future}
}

func (a *DeviceFarmStub) CreateInstanceProfile(ctx workflow.Context, input *devicefarm.CreateInstanceProfileInput) (*devicefarm.CreateInstanceProfileOutput, error) {
	var output devicefarm.CreateInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) CreateInstanceProfileAsync(ctx workflow.Context, input *devicefarm.CreateInstanceProfileInput) *DevicefarmCreateInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateInstanceProfile", input)
	return &DevicefarmCreateInstanceProfileFuture{Future: future}
}

func (a *DeviceFarmStub) CreateNetworkProfile(ctx workflow.Context, input *devicefarm.CreateNetworkProfileInput) (*devicefarm.CreateNetworkProfileOutput, error) {
	var output devicefarm.CreateNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) CreateNetworkProfileAsync(ctx workflow.Context, input *devicefarm.CreateNetworkProfileInput) *DevicefarmCreateNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateNetworkProfile", input)
	return &DevicefarmCreateNetworkProfileFuture{Future: future}
}

func (a *DeviceFarmStub) CreateProject(ctx workflow.Context, input *devicefarm.CreateProjectInput) (*devicefarm.CreateProjectOutput, error) {
	var output devicefarm.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) CreateProjectAsync(ctx workflow.Context, input *devicefarm.CreateProjectInput) *DevicefarmCreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateProject", input)
	return &DevicefarmCreateProjectFuture{Future: future}
}

func (a *DeviceFarmStub) CreateRemoteAccessSession(ctx workflow.Context, input *devicefarm.CreateRemoteAccessSessionInput) (*devicefarm.CreateRemoteAccessSessionOutput, error) {
	var output devicefarm.CreateRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) CreateRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.CreateRemoteAccessSessionInput) *DevicefarmCreateRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateRemoteAccessSession", input)
	return &DevicefarmCreateRemoteAccessSessionFuture{Future: future}
}

func (a *DeviceFarmStub) CreateTestGridProject(ctx workflow.Context, input *devicefarm.CreateTestGridProjectInput) (*devicefarm.CreateTestGridProjectOutput, error) {
	var output devicefarm.CreateTestGridProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateTestGridProject", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) CreateTestGridProjectAsync(ctx workflow.Context, input *devicefarm.CreateTestGridProjectInput) *DevicefarmCreateTestGridProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateTestGridProject", input)
	return &DevicefarmCreateTestGridProjectFuture{Future: future}
}

func (a *DeviceFarmStub) CreateTestGridUrl(ctx workflow.Context, input *devicefarm.CreateTestGridUrlInput) (*devicefarm.CreateTestGridUrlOutput, error) {
	var output devicefarm.CreateTestGridUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateTestGridUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) CreateTestGridUrlAsync(ctx workflow.Context, input *devicefarm.CreateTestGridUrlInput) *DevicefarmCreateTestGridUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateTestGridUrl", input)
	return &DevicefarmCreateTestGridUrlFuture{Future: future}
}

func (a *DeviceFarmStub) CreateUpload(ctx workflow.Context, input *devicefarm.CreateUploadInput) (*devicefarm.CreateUploadOutput, error) {
	var output devicefarm.CreateUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) CreateUploadAsync(ctx workflow.Context, input *devicefarm.CreateUploadInput) *DevicefarmCreateUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateUpload", input)
	return &DevicefarmCreateUploadFuture{Future: future}
}

func (a *DeviceFarmStub) CreateVPCEConfiguration(ctx workflow.Context, input *devicefarm.CreateVPCEConfigurationInput) (*devicefarm.CreateVPCEConfigurationOutput, error) {
	var output devicefarm.CreateVPCEConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateVPCEConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) CreateVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.CreateVPCEConfigurationInput) *DevicefarmCreateVPCEConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.CreateVPCEConfiguration", input)
	return &DevicefarmCreateVPCEConfigurationFuture{Future: future}
}

func (a *DeviceFarmStub) DeleteDevicePool(ctx workflow.Context, input *devicefarm.DeleteDevicePoolInput) (*devicefarm.DeleteDevicePoolOutput, error) {
	var output devicefarm.DeleteDevicePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteDevicePool", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) DeleteDevicePoolAsync(ctx workflow.Context, input *devicefarm.DeleteDevicePoolInput) *DevicefarmDeleteDevicePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteDevicePool", input)
	return &DevicefarmDeleteDevicePoolFuture{Future: future}
}

func (a *DeviceFarmStub) DeleteInstanceProfile(ctx workflow.Context, input *devicefarm.DeleteInstanceProfileInput) (*devicefarm.DeleteInstanceProfileOutput, error) {
	var output devicefarm.DeleteInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) DeleteInstanceProfileAsync(ctx workflow.Context, input *devicefarm.DeleteInstanceProfileInput) *DevicefarmDeleteInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteInstanceProfile", input)
	return &DevicefarmDeleteInstanceProfileFuture{Future: future}
}

func (a *DeviceFarmStub) DeleteNetworkProfile(ctx workflow.Context, input *devicefarm.DeleteNetworkProfileInput) (*devicefarm.DeleteNetworkProfileOutput, error) {
	var output devicefarm.DeleteNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) DeleteNetworkProfileAsync(ctx workflow.Context, input *devicefarm.DeleteNetworkProfileInput) *DevicefarmDeleteNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteNetworkProfile", input)
	return &DevicefarmDeleteNetworkProfileFuture{Future: future}
}

func (a *DeviceFarmStub) DeleteProject(ctx workflow.Context, input *devicefarm.DeleteProjectInput) (*devicefarm.DeleteProjectOutput, error) {
	var output devicefarm.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) DeleteProjectAsync(ctx workflow.Context, input *devicefarm.DeleteProjectInput) *DevicefarmDeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteProject", input)
	return &DevicefarmDeleteProjectFuture{Future: future}
}

func (a *DeviceFarmStub) DeleteRemoteAccessSession(ctx workflow.Context, input *devicefarm.DeleteRemoteAccessSessionInput) (*devicefarm.DeleteRemoteAccessSessionOutput, error) {
	var output devicefarm.DeleteRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) DeleteRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.DeleteRemoteAccessSessionInput) *DevicefarmDeleteRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteRemoteAccessSession", input)
	return &DevicefarmDeleteRemoteAccessSessionFuture{Future: future}
}

func (a *DeviceFarmStub) DeleteRun(ctx workflow.Context, input *devicefarm.DeleteRunInput) (*devicefarm.DeleteRunOutput, error) {
	var output devicefarm.DeleteRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteRun", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) DeleteRunAsync(ctx workflow.Context, input *devicefarm.DeleteRunInput) *DevicefarmDeleteRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteRun", input)
	return &DevicefarmDeleteRunFuture{Future: future}
}

func (a *DeviceFarmStub) DeleteTestGridProject(ctx workflow.Context, input *devicefarm.DeleteTestGridProjectInput) (*devicefarm.DeleteTestGridProjectOutput, error) {
	var output devicefarm.DeleteTestGridProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteTestGridProject", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) DeleteTestGridProjectAsync(ctx workflow.Context, input *devicefarm.DeleteTestGridProjectInput) *DevicefarmDeleteTestGridProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteTestGridProject", input)
	return &DevicefarmDeleteTestGridProjectFuture{Future: future}
}

func (a *DeviceFarmStub) DeleteUpload(ctx workflow.Context, input *devicefarm.DeleteUploadInput) (*devicefarm.DeleteUploadOutput, error) {
	var output devicefarm.DeleteUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) DeleteUploadAsync(ctx workflow.Context, input *devicefarm.DeleteUploadInput) *DevicefarmDeleteUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteUpload", input)
	return &DevicefarmDeleteUploadFuture{Future: future}
}

func (a *DeviceFarmStub) DeleteVPCEConfiguration(ctx workflow.Context, input *devicefarm.DeleteVPCEConfigurationInput) (*devicefarm.DeleteVPCEConfigurationOutput, error) {
	var output devicefarm.DeleteVPCEConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteVPCEConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) DeleteVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.DeleteVPCEConfigurationInput) *DevicefarmDeleteVPCEConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.DeleteVPCEConfiguration", input)
	return &DevicefarmDeleteVPCEConfigurationFuture{Future: future}
}

func (a *DeviceFarmStub) GetAccountSettings(ctx workflow.Context, input *devicefarm.GetAccountSettingsInput) (*devicefarm.GetAccountSettingsOutput, error) {
	var output devicefarm.GetAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetAccountSettingsAsync(ctx workflow.Context, input *devicefarm.GetAccountSettingsInput) *DevicefarmGetAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetAccountSettings", input)
	return &DevicefarmGetAccountSettingsFuture{Future: future}
}

func (a *DeviceFarmStub) GetDevice(ctx workflow.Context, input *devicefarm.GetDeviceInput) (*devicefarm.GetDeviceOutput, error) {
	var output devicefarm.GetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetDeviceAsync(ctx workflow.Context, input *devicefarm.GetDeviceInput) *DevicefarmGetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetDevice", input)
	return &DevicefarmGetDeviceFuture{Future: future}
}

func (a *DeviceFarmStub) GetDeviceInstance(ctx workflow.Context, input *devicefarm.GetDeviceInstanceInput) (*devicefarm.GetDeviceInstanceOutput, error) {
	var output devicefarm.GetDeviceInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetDeviceInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetDeviceInstanceAsync(ctx workflow.Context, input *devicefarm.GetDeviceInstanceInput) *DevicefarmGetDeviceInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetDeviceInstance", input)
	return &DevicefarmGetDeviceInstanceFuture{Future: future}
}

func (a *DeviceFarmStub) GetDevicePool(ctx workflow.Context, input *devicefarm.GetDevicePoolInput) (*devicefarm.GetDevicePoolOutput, error) {
	var output devicefarm.GetDevicePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetDevicePool", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetDevicePoolAsync(ctx workflow.Context, input *devicefarm.GetDevicePoolInput) *DevicefarmGetDevicePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetDevicePool", input)
	return &DevicefarmGetDevicePoolFuture{Future: future}
}

func (a *DeviceFarmStub) GetDevicePoolCompatibility(ctx workflow.Context, input *devicefarm.GetDevicePoolCompatibilityInput) (*devicefarm.GetDevicePoolCompatibilityOutput, error) {
	var output devicefarm.GetDevicePoolCompatibilityOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetDevicePoolCompatibility", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetDevicePoolCompatibilityAsync(ctx workflow.Context, input *devicefarm.GetDevicePoolCompatibilityInput) *DevicefarmGetDevicePoolCompatibilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetDevicePoolCompatibility", input)
	return &DevicefarmGetDevicePoolCompatibilityFuture{Future: future}
}

func (a *DeviceFarmStub) GetInstanceProfile(ctx workflow.Context, input *devicefarm.GetInstanceProfileInput) (*devicefarm.GetInstanceProfileOutput, error) {
	var output devicefarm.GetInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetInstanceProfileAsync(ctx workflow.Context, input *devicefarm.GetInstanceProfileInput) *DevicefarmGetInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetInstanceProfile", input)
	return &DevicefarmGetInstanceProfileFuture{Future: future}
}

func (a *DeviceFarmStub) GetJob(ctx workflow.Context, input *devicefarm.GetJobInput) (*devicefarm.GetJobOutput, error) {
	var output devicefarm.GetJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetJob", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetJobAsync(ctx workflow.Context, input *devicefarm.GetJobInput) *DevicefarmGetJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetJob", input)
	return &DevicefarmGetJobFuture{Future: future}
}

func (a *DeviceFarmStub) GetNetworkProfile(ctx workflow.Context, input *devicefarm.GetNetworkProfileInput) (*devicefarm.GetNetworkProfileOutput, error) {
	var output devicefarm.GetNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetNetworkProfileAsync(ctx workflow.Context, input *devicefarm.GetNetworkProfileInput) *DevicefarmGetNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetNetworkProfile", input)
	return &DevicefarmGetNetworkProfileFuture{Future: future}
}

func (a *DeviceFarmStub) GetOfferingStatus(ctx workflow.Context, input *devicefarm.GetOfferingStatusInput) (*devicefarm.GetOfferingStatusOutput, error) {
	var output devicefarm.GetOfferingStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetOfferingStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetOfferingStatusAsync(ctx workflow.Context, input *devicefarm.GetOfferingStatusInput) *DevicefarmGetOfferingStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetOfferingStatus", input)
	return &DevicefarmGetOfferingStatusFuture{Future: future}
}

func (a *DeviceFarmStub) GetProject(ctx workflow.Context, input *devicefarm.GetProjectInput) (*devicefarm.GetProjectOutput, error) {
	var output devicefarm.GetProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetProject", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetProjectAsync(ctx workflow.Context, input *devicefarm.GetProjectInput) *DevicefarmGetProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetProject", input)
	return &DevicefarmGetProjectFuture{Future: future}
}

func (a *DeviceFarmStub) GetRemoteAccessSession(ctx workflow.Context, input *devicefarm.GetRemoteAccessSessionInput) (*devicefarm.GetRemoteAccessSessionOutput, error) {
	var output devicefarm.GetRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.GetRemoteAccessSessionInput) *DevicefarmGetRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetRemoteAccessSession", input)
	return &DevicefarmGetRemoteAccessSessionFuture{Future: future}
}

func (a *DeviceFarmStub) GetRun(ctx workflow.Context, input *devicefarm.GetRunInput) (*devicefarm.GetRunOutput, error) {
	var output devicefarm.GetRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetRun", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetRunAsync(ctx workflow.Context, input *devicefarm.GetRunInput) *DevicefarmGetRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetRun", input)
	return &DevicefarmGetRunFuture{Future: future}
}

func (a *DeviceFarmStub) GetSuite(ctx workflow.Context, input *devicefarm.GetSuiteInput) (*devicefarm.GetSuiteOutput, error) {
	var output devicefarm.GetSuiteOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetSuite", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetSuiteAsync(ctx workflow.Context, input *devicefarm.GetSuiteInput) *DevicefarmGetSuiteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetSuite", input)
	return &DevicefarmGetSuiteFuture{Future: future}
}

func (a *DeviceFarmStub) GetTest(ctx workflow.Context, input *devicefarm.GetTestInput) (*devicefarm.GetTestOutput, error) {
	var output devicefarm.GetTestOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetTest", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetTestAsync(ctx workflow.Context, input *devicefarm.GetTestInput) *DevicefarmGetTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetTest", input)
	return &DevicefarmGetTestFuture{Future: future}
}

func (a *DeviceFarmStub) GetTestGridProject(ctx workflow.Context, input *devicefarm.GetTestGridProjectInput) (*devicefarm.GetTestGridProjectOutput, error) {
	var output devicefarm.GetTestGridProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetTestGridProject", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetTestGridProjectAsync(ctx workflow.Context, input *devicefarm.GetTestGridProjectInput) *DevicefarmGetTestGridProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetTestGridProject", input)
	return &DevicefarmGetTestGridProjectFuture{Future: future}
}

func (a *DeviceFarmStub) GetTestGridSession(ctx workflow.Context, input *devicefarm.GetTestGridSessionInput) (*devicefarm.GetTestGridSessionOutput, error) {
	var output devicefarm.GetTestGridSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetTestGridSession", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetTestGridSessionAsync(ctx workflow.Context, input *devicefarm.GetTestGridSessionInput) *DevicefarmGetTestGridSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetTestGridSession", input)
	return &DevicefarmGetTestGridSessionFuture{Future: future}
}

func (a *DeviceFarmStub) GetUpload(ctx workflow.Context, input *devicefarm.GetUploadInput) (*devicefarm.GetUploadOutput, error) {
	var output devicefarm.GetUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetUploadAsync(ctx workflow.Context, input *devicefarm.GetUploadInput) *DevicefarmGetUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetUpload", input)
	return &DevicefarmGetUploadFuture{Future: future}
}

func (a *DeviceFarmStub) GetVPCEConfiguration(ctx workflow.Context, input *devicefarm.GetVPCEConfigurationInput) (*devicefarm.GetVPCEConfigurationOutput, error) {
	var output devicefarm.GetVPCEConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetVPCEConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) GetVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.GetVPCEConfigurationInput) *DevicefarmGetVPCEConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.GetVPCEConfiguration", input)
	return &DevicefarmGetVPCEConfigurationFuture{Future: future}
}

func (a *DeviceFarmStub) InstallToRemoteAccessSession(ctx workflow.Context, input *devicefarm.InstallToRemoteAccessSessionInput) (*devicefarm.InstallToRemoteAccessSessionOutput, error) {
	var output devicefarm.InstallToRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.InstallToRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) InstallToRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.InstallToRemoteAccessSessionInput) *DevicefarmInstallToRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.InstallToRemoteAccessSession", input)
	return &DevicefarmInstallToRemoteAccessSessionFuture{Future: future}
}

func (a *DeviceFarmStub) ListArtifacts(ctx workflow.Context, input *devicefarm.ListArtifactsInput) (*devicefarm.ListArtifactsOutput, error) {
	var output devicefarm.ListArtifactsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListArtifacts", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListArtifactsAsync(ctx workflow.Context, input *devicefarm.ListArtifactsInput) *DevicefarmListArtifactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListArtifacts", input)
	return &DevicefarmListArtifactsFuture{Future: future}
}

func (a *DeviceFarmStub) ListDeviceInstances(ctx workflow.Context, input *devicefarm.ListDeviceInstancesInput) (*devicefarm.ListDeviceInstancesOutput, error) {
	var output devicefarm.ListDeviceInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListDeviceInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListDeviceInstancesAsync(ctx workflow.Context, input *devicefarm.ListDeviceInstancesInput) *DevicefarmListDeviceInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListDeviceInstances", input)
	return &DevicefarmListDeviceInstancesFuture{Future: future}
}

func (a *DeviceFarmStub) ListDevicePools(ctx workflow.Context, input *devicefarm.ListDevicePoolsInput) (*devicefarm.ListDevicePoolsOutput, error) {
	var output devicefarm.ListDevicePoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListDevicePools", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListDevicePoolsAsync(ctx workflow.Context, input *devicefarm.ListDevicePoolsInput) *DevicefarmListDevicePoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListDevicePools", input)
	return &DevicefarmListDevicePoolsFuture{Future: future}
}

func (a *DeviceFarmStub) ListDevices(ctx workflow.Context, input *devicefarm.ListDevicesInput) (*devicefarm.ListDevicesOutput, error) {
	var output devicefarm.ListDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListDevicesAsync(ctx workflow.Context, input *devicefarm.ListDevicesInput) *DevicefarmListDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListDevices", input)
	return &DevicefarmListDevicesFuture{Future: future}
}

func (a *DeviceFarmStub) ListInstanceProfiles(ctx workflow.Context, input *devicefarm.ListInstanceProfilesInput) (*devicefarm.ListInstanceProfilesOutput, error) {
	var output devicefarm.ListInstanceProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListInstanceProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListInstanceProfilesAsync(ctx workflow.Context, input *devicefarm.ListInstanceProfilesInput) *DevicefarmListInstanceProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListInstanceProfiles", input)
	return &DevicefarmListInstanceProfilesFuture{Future: future}
}

func (a *DeviceFarmStub) ListJobs(ctx workflow.Context, input *devicefarm.ListJobsInput) (*devicefarm.ListJobsOutput, error) {
	var output devicefarm.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListJobsAsync(ctx workflow.Context, input *devicefarm.ListJobsInput) *DevicefarmListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListJobs", input)
	return &DevicefarmListJobsFuture{Future: future}
}

func (a *DeviceFarmStub) ListNetworkProfiles(ctx workflow.Context, input *devicefarm.ListNetworkProfilesInput) (*devicefarm.ListNetworkProfilesOutput, error) {
	var output devicefarm.ListNetworkProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListNetworkProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListNetworkProfilesAsync(ctx workflow.Context, input *devicefarm.ListNetworkProfilesInput) *DevicefarmListNetworkProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListNetworkProfiles", input)
	return &DevicefarmListNetworkProfilesFuture{Future: future}
}

func (a *DeviceFarmStub) ListOfferingPromotions(ctx workflow.Context, input *devicefarm.ListOfferingPromotionsInput) (*devicefarm.ListOfferingPromotionsOutput, error) {
	var output devicefarm.ListOfferingPromotionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListOfferingPromotions", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListOfferingPromotionsAsync(ctx workflow.Context, input *devicefarm.ListOfferingPromotionsInput) *DevicefarmListOfferingPromotionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListOfferingPromotions", input)
	return &DevicefarmListOfferingPromotionsFuture{Future: future}
}

func (a *DeviceFarmStub) ListOfferingTransactions(ctx workflow.Context, input *devicefarm.ListOfferingTransactionsInput) (*devicefarm.ListOfferingTransactionsOutput, error) {
	var output devicefarm.ListOfferingTransactionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListOfferingTransactions", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListOfferingTransactionsAsync(ctx workflow.Context, input *devicefarm.ListOfferingTransactionsInput) *DevicefarmListOfferingTransactionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListOfferingTransactions", input)
	return &DevicefarmListOfferingTransactionsFuture{Future: future}
}

func (a *DeviceFarmStub) ListOfferings(ctx workflow.Context, input *devicefarm.ListOfferingsInput) (*devicefarm.ListOfferingsOutput, error) {
	var output devicefarm.ListOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListOfferingsAsync(ctx workflow.Context, input *devicefarm.ListOfferingsInput) *DevicefarmListOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListOfferings", input)
	return &DevicefarmListOfferingsFuture{Future: future}
}

func (a *DeviceFarmStub) ListProjects(ctx workflow.Context, input *devicefarm.ListProjectsInput) (*devicefarm.ListProjectsOutput, error) {
	var output devicefarm.ListProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListProjectsAsync(ctx workflow.Context, input *devicefarm.ListProjectsInput) *DevicefarmListProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListProjects", input)
	return &DevicefarmListProjectsFuture{Future: future}
}

func (a *DeviceFarmStub) ListRemoteAccessSessions(ctx workflow.Context, input *devicefarm.ListRemoteAccessSessionsInput) (*devicefarm.ListRemoteAccessSessionsOutput, error) {
	var output devicefarm.ListRemoteAccessSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListRemoteAccessSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListRemoteAccessSessionsAsync(ctx workflow.Context, input *devicefarm.ListRemoteAccessSessionsInput) *DevicefarmListRemoteAccessSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListRemoteAccessSessions", input)
	return &DevicefarmListRemoteAccessSessionsFuture{Future: future}
}

func (a *DeviceFarmStub) ListRuns(ctx workflow.Context, input *devicefarm.ListRunsInput) (*devicefarm.ListRunsOutput, error) {
	var output devicefarm.ListRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListRunsAsync(ctx workflow.Context, input *devicefarm.ListRunsInput) *DevicefarmListRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListRuns", input)
	return &DevicefarmListRunsFuture{Future: future}
}

func (a *DeviceFarmStub) ListSamples(ctx workflow.Context, input *devicefarm.ListSamplesInput) (*devicefarm.ListSamplesOutput, error) {
	var output devicefarm.ListSamplesOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListSamples", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListSamplesAsync(ctx workflow.Context, input *devicefarm.ListSamplesInput) *DevicefarmListSamplesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListSamples", input)
	return &DevicefarmListSamplesFuture{Future: future}
}

func (a *DeviceFarmStub) ListSuites(ctx workflow.Context, input *devicefarm.ListSuitesInput) (*devicefarm.ListSuitesOutput, error) {
	var output devicefarm.ListSuitesOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListSuites", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListSuitesAsync(ctx workflow.Context, input *devicefarm.ListSuitesInput) *DevicefarmListSuitesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListSuites", input)
	return &DevicefarmListSuitesFuture{Future: future}
}

func (a *DeviceFarmStub) ListTagsForResource(ctx workflow.Context, input *devicefarm.ListTagsForResourceInput) (*devicefarm.ListTagsForResourceOutput, error) {
	var output devicefarm.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListTagsForResourceAsync(ctx workflow.Context, input *devicefarm.ListTagsForResourceInput) *DevicefarmListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListTagsForResource", input)
	return &DevicefarmListTagsForResourceFuture{Future: future}
}

func (a *DeviceFarmStub) ListTestGridProjects(ctx workflow.Context, input *devicefarm.ListTestGridProjectsInput) (*devicefarm.ListTestGridProjectsOutput, error) {
	var output devicefarm.ListTestGridProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListTestGridProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListTestGridProjectsAsync(ctx workflow.Context, input *devicefarm.ListTestGridProjectsInput) *DevicefarmListTestGridProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListTestGridProjects", input)
	return &DevicefarmListTestGridProjectsFuture{Future: future}
}

func (a *DeviceFarmStub) ListTestGridSessionActions(ctx workflow.Context, input *devicefarm.ListTestGridSessionActionsInput) (*devicefarm.ListTestGridSessionActionsOutput, error) {
	var output devicefarm.ListTestGridSessionActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListTestGridSessionActions", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListTestGridSessionActionsAsync(ctx workflow.Context, input *devicefarm.ListTestGridSessionActionsInput) *DevicefarmListTestGridSessionActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListTestGridSessionActions", input)
	return &DevicefarmListTestGridSessionActionsFuture{Future: future}
}

func (a *DeviceFarmStub) ListTestGridSessionArtifacts(ctx workflow.Context, input *devicefarm.ListTestGridSessionArtifactsInput) (*devicefarm.ListTestGridSessionArtifactsOutput, error) {
	var output devicefarm.ListTestGridSessionArtifactsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListTestGridSessionArtifacts", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListTestGridSessionArtifactsAsync(ctx workflow.Context, input *devicefarm.ListTestGridSessionArtifactsInput) *DevicefarmListTestGridSessionArtifactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListTestGridSessionArtifacts", input)
	return &DevicefarmListTestGridSessionArtifactsFuture{Future: future}
}

func (a *DeviceFarmStub) ListTestGridSessions(ctx workflow.Context, input *devicefarm.ListTestGridSessionsInput) (*devicefarm.ListTestGridSessionsOutput, error) {
	var output devicefarm.ListTestGridSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListTestGridSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListTestGridSessionsAsync(ctx workflow.Context, input *devicefarm.ListTestGridSessionsInput) *DevicefarmListTestGridSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListTestGridSessions", input)
	return &DevicefarmListTestGridSessionsFuture{Future: future}
}

func (a *DeviceFarmStub) ListTests(ctx workflow.Context, input *devicefarm.ListTestsInput) (*devicefarm.ListTestsOutput, error) {
	var output devicefarm.ListTestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListTests", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListTestsAsync(ctx workflow.Context, input *devicefarm.ListTestsInput) *DevicefarmListTestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListTests", input)
	return &DevicefarmListTestsFuture{Future: future}
}

func (a *DeviceFarmStub) ListUniqueProblems(ctx workflow.Context, input *devicefarm.ListUniqueProblemsInput) (*devicefarm.ListUniqueProblemsOutput, error) {
	var output devicefarm.ListUniqueProblemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListUniqueProblems", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListUniqueProblemsAsync(ctx workflow.Context, input *devicefarm.ListUniqueProblemsInput) *DevicefarmListUniqueProblemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListUniqueProblems", input)
	return &DevicefarmListUniqueProblemsFuture{Future: future}
}

func (a *DeviceFarmStub) ListUploads(ctx workflow.Context, input *devicefarm.ListUploadsInput) (*devicefarm.ListUploadsOutput, error) {
	var output devicefarm.ListUploadsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListUploads", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListUploadsAsync(ctx workflow.Context, input *devicefarm.ListUploadsInput) *DevicefarmListUploadsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListUploads", input)
	return &DevicefarmListUploadsFuture{Future: future}
}

func (a *DeviceFarmStub) ListVPCEConfigurations(ctx workflow.Context, input *devicefarm.ListVPCEConfigurationsInput) (*devicefarm.ListVPCEConfigurationsOutput, error) {
	var output devicefarm.ListVPCEConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListVPCEConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ListVPCEConfigurationsAsync(ctx workflow.Context, input *devicefarm.ListVPCEConfigurationsInput) *DevicefarmListVPCEConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ListVPCEConfigurations", input)
	return &DevicefarmListVPCEConfigurationsFuture{Future: future}
}

func (a *DeviceFarmStub) PurchaseOffering(ctx workflow.Context, input *devicefarm.PurchaseOfferingInput) (*devicefarm.PurchaseOfferingOutput, error) {
	var output devicefarm.PurchaseOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.PurchaseOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) PurchaseOfferingAsync(ctx workflow.Context, input *devicefarm.PurchaseOfferingInput) *DevicefarmPurchaseOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.PurchaseOffering", input)
	return &DevicefarmPurchaseOfferingFuture{Future: future}
}

func (a *DeviceFarmStub) RenewOffering(ctx workflow.Context, input *devicefarm.RenewOfferingInput) (*devicefarm.RenewOfferingOutput, error) {
	var output devicefarm.RenewOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.RenewOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) RenewOfferingAsync(ctx workflow.Context, input *devicefarm.RenewOfferingInput) *DevicefarmRenewOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.RenewOffering", input)
	return &DevicefarmRenewOfferingFuture{Future: future}
}

func (a *DeviceFarmStub) ScheduleRun(ctx workflow.Context, input *devicefarm.ScheduleRunInput) (*devicefarm.ScheduleRunOutput, error) {
	var output devicefarm.ScheduleRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.ScheduleRun", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) ScheduleRunAsync(ctx workflow.Context, input *devicefarm.ScheduleRunInput) *DevicefarmScheduleRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.ScheduleRun", input)
	return &DevicefarmScheduleRunFuture{Future: future}
}

func (a *DeviceFarmStub) StopJob(ctx workflow.Context, input *devicefarm.StopJobInput) (*devicefarm.StopJobOutput, error) {
	var output devicefarm.StopJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.StopJob", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) StopJobAsync(ctx workflow.Context, input *devicefarm.StopJobInput) *DevicefarmStopJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.StopJob", input)
	return &DevicefarmStopJobFuture{Future: future}
}

func (a *DeviceFarmStub) StopRemoteAccessSession(ctx workflow.Context, input *devicefarm.StopRemoteAccessSessionInput) (*devicefarm.StopRemoteAccessSessionOutput, error) {
	var output devicefarm.StopRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.StopRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) StopRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.StopRemoteAccessSessionInput) *DevicefarmStopRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.StopRemoteAccessSession", input)
	return &DevicefarmStopRemoteAccessSessionFuture{Future: future}
}

func (a *DeviceFarmStub) StopRun(ctx workflow.Context, input *devicefarm.StopRunInput) (*devicefarm.StopRunOutput, error) {
	var output devicefarm.StopRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.StopRun", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) StopRunAsync(ctx workflow.Context, input *devicefarm.StopRunInput) *DevicefarmStopRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.StopRun", input)
	return &DevicefarmStopRunFuture{Future: future}
}

func (a *DeviceFarmStub) TagResource(ctx workflow.Context, input *devicefarm.TagResourceInput) (*devicefarm.TagResourceOutput, error) {
	var output devicefarm.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) TagResourceAsync(ctx workflow.Context, input *devicefarm.TagResourceInput) *DevicefarmTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.TagResource", input)
	return &DevicefarmTagResourceFuture{Future: future}
}

func (a *DeviceFarmStub) UntagResource(ctx workflow.Context, input *devicefarm.UntagResourceInput) (*devicefarm.UntagResourceOutput, error) {
	var output devicefarm.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) UntagResourceAsync(ctx workflow.Context, input *devicefarm.UntagResourceInput) *DevicefarmUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.UntagResource", input)
	return &DevicefarmUntagResourceFuture{Future: future}
}

func (a *DeviceFarmStub) UpdateDeviceInstance(ctx workflow.Context, input *devicefarm.UpdateDeviceInstanceInput) (*devicefarm.UpdateDeviceInstanceOutput, error) {
	var output devicefarm.UpdateDeviceInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateDeviceInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) UpdateDeviceInstanceAsync(ctx workflow.Context, input *devicefarm.UpdateDeviceInstanceInput) *DevicefarmUpdateDeviceInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateDeviceInstance", input)
	return &DevicefarmUpdateDeviceInstanceFuture{Future: future}
}

func (a *DeviceFarmStub) UpdateDevicePool(ctx workflow.Context, input *devicefarm.UpdateDevicePoolInput) (*devicefarm.UpdateDevicePoolOutput, error) {
	var output devicefarm.UpdateDevicePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateDevicePool", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) UpdateDevicePoolAsync(ctx workflow.Context, input *devicefarm.UpdateDevicePoolInput) *DevicefarmUpdateDevicePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateDevicePool", input)
	return &DevicefarmUpdateDevicePoolFuture{Future: future}
}

func (a *DeviceFarmStub) UpdateInstanceProfile(ctx workflow.Context, input *devicefarm.UpdateInstanceProfileInput) (*devicefarm.UpdateInstanceProfileOutput, error) {
	var output devicefarm.UpdateInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) UpdateInstanceProfileAsync(ctx workflow.Context, input *devicefarm.UpdateInstanceProfileInput) *DevicefarmUpdateInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateInstanceProfile", input)
	return &DevicefarmUpdateInstanceProfileFuture{Future: future}
}

func (a *DeviceFarmStub) UpdateNetworkProfile(ctx workflow.Context, input *devicefarm.UpdateNetworkProfileInput) (*devicefarm.UpdateNetworkProfileOutput, error) {
	var output devicefarm.UpdateNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) UpdateNetworkProfileAsync(ctx workflow.Context, input *devicefarm.UpdateNetworkProfileInput) *DevicefarmUpdateNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateNetworkProfile", input)
	return &DevicefarmUpdateNetworkProfileFuture{Future: future}
}

func (a *DeviceFarmStub) UpdateProject(ctx workflow.Context, input *devicefarm.UpdateProjectInput) (*devicefarm.UpdateProjectOutput, error) {
	var output devicefarm.UpdateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) UpdateProjectAsync(ctx workflow.Context, input *devicefarm.UpdateProjectInput) *DevicefarmUpdateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateProject", input)
	return &DevicefarmUpdateProjectFuture{Future: future}
}

func (a *DeviceFarmStub) UpdateTestGridProject(ctx workflow.Context, input *devicefarm.UpdateTestGridProjectInput) (*devicefarm.UpdateTestGridProjectOutput, error) {
	var output devicefarm.UpdateTestGridProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateTestGridProject", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) UpdateTestGridProjectAsync(ctx workflow.Context, input *devicefarm.UpdateTestGridProjectInput) *DevicefarmUpdateTestGridProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateTestGridProject", input)
	return &DevicefarmUpdateTestGridProjectFuture{Future: future}
}

func (a *DeviceFarmStub) UpdateUpload(ctx workflow.Context, input *devicefarm.UpdateUploadInput) (*devicefarm.UpdateUploadOutput, error) {
	var output devicefarm.UpdateUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) UpdateUploadAsync(ctx workflow.Context, input *devicefarm.UpdateUploadInput) *DevicefarmUpdateUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateUpload", input)
	return &DevicefarmUpdateUploadFuture{Future: future}
}

func (a *DeviceFarmStub) UpdateVPCEConfiguration(ctx workflow.Context, input *devicefarm.UpdateVPCEConfigurationInput) (*devicefarm.UpdateVPCEConfigurationOutput, error) {
	var output devicefarm.UpdateVPCEConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateVPCEConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *DeviceFarmStub) UpdateVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.UpdateVPCEConfigurationInput) *DevicefarmUpdateVPCEConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.devicefarm.UpdateVPCEConfiguration", input)
	return &DevicefarmUpdateVPCEConfigurationFuture{Future: future}
}
