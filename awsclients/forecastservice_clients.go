// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/forecastservice"
	"go.temporal.io/sdk/workflow"
)

type ForecastServiceClient interface {
	CreateDataset(ctx workflow.Context, input *forecastservice.CreateDatasetInput) (*forecastservice.CreateDatasetOutput, error)
	CreateDatasetAsync(ctx workflow.Context, input *forecastservice.CreateDatasetInput) *ForecastserviceCreateDatasetFuture

	CreateDatasetGroup(ctx workflow.Context, input *forecastservice.CreateDatasetGroupInput) (*forecastservice.CreateDatasetGroupOutput, error)
	CreateDatasetGroupAsync(ctx workflow.Context, input *forecastservice.CreateDatasetGroupInput) *ForecastserviceCreateDatasetGroupFuture

	CreateDatasetImportJob(ctx workflow.Context, input *forecastservice.CreateDatasetImportJobInput) (*forecastservice.CreateDatasetImportJobOutput, error)
	CreateDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.CreateDatasetImportJobInput) *ForecastserviceCreateDatasetImportJobFuture

	CreateForecast(ctx workflow.Context, input *forecastservice.CreateForecastInput) (*forecastservice.CreateForecastOutput, error)
	CreateForecastAsync(ctx workflow.Context, input *forecastservice.CreateForecastInput) *ForecastserviceCreateForecastFuture

	CreateForecastExportJob(ctx workflow.Context, input *forecastservice.CreateForecastExportJobInput) (*forecastservice.CreateForecastExportJobOutput, error)
	CreateForecastExportJobAsync(ctx workflow.Context, input *forecastservice.CreateForecastExportJobInput) *ForecastserviceCreateForecastExportJobFuture

	CreatePredictor(ctx workflow.Context, input *forecastservice.CreatePredictorInput) (*forecastservice.CreatePredictorOutput, error)
	CreatePredictorAsync(ctx workflow.Context, input *forecastservice.CreatePredictorInput) *ForecastserviceCreatePredictorFuture

	DeleteDataset(ctx workflow.Context, input *forecastservice.DeleteDatasetInput) (*forecastservice.DeleteDatasetOutput, error)
	DeleteDatasetAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetInput) *ForecastserviceDeleteDatasetFuture

	DeleteDatasetGroup(ctx workflow.Context, input *forecastservice.DeleteDatasetGroupInput) (*forecastservice.DeleteDatasetGroupOutput, error)
	DeleteDatasetGroupAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetGroupInput) *ForecastserviceDeleteDatasetGroupFuture

	DeleteDatasetImportJob(ctx workflow.Context, input *forecastservice.DeleteDatasetImportJobInput) (*forecastservice.DeleteDatasetImportJobOutput, error)
	DeleteDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetImportJobInput) *ForecastserviceDeleteDatasetImportJobFuture

	DeleteForecast(ctx workflow.Context, input *forecastservice.DeleteForecastInput) (*forecastservice.DeleteForecastOutput, error)
	DeleteForecastAsync(ctx workflow.Context, input *forecastservice.DeleteForecastInput) *ForecastserviceDeleteForecastFuture

	DeleteForecastExportJob(ctx workflow.Context, input *forecastservice.DeleteForecastExportJobInput) (*forecastservice.DeleteForecastExportJobOutput, error)
	DeleteForecastExportJobAsync(ctx workflow.Context, input *forecastservice.DeleteForecastExportJobInput) *ForecastserviceDeleteForecastExportJobFuture

	DeletePredictor(ctx workflow.Context, input *forecastservice.DeletePredictorInput) (*forecastservice.DeletePredictorOutput, error)
	DeletePredictorAsync(ctx workflow.Context, input *forecastservice.DeletePredictorInput) *ForecastserviceDeletePredictorFuture

	DescribeDataset(ctx workflow.Context, input *forecastservice.DescribeDatasetInput) (*forecastservice.DescribeDatasetOutput, error)
	DescribeDatasetAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetInput) *ForecastserviceDescribeDatasetFuture

	DescribeDatasetGroup(ctx workflow.Context, input *forecastservice.DescribeDatasetGroupInput) (*forecastservice.DescribeDatasetGroupOutput, error)
	DescribeDatasetGroupAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetGroupInput) *ForecastserviceDescribeDatasetGroupFuture

	DescribeDatasetImportJob(ctx workflow.Context, input *forecastservice.DescribeDatasetImportJobInput) (*forecastservice.DescribeDatasetImportJobOutput, error)
	DescribeDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetImportJobInput) *ForecastserviceDescribeDatasetImportJobFuture

	DescribeForecast(ctx workflow.Context, input *forecastservice.DescribeForecastInput) (*forecastservice.DescribeForecastOutput, error)
	DescribeForecastAsync(ctx workflow.Context, input *forecastservice.DescribeForecastInput) *ForecastserviceDescribeForecastFuture

	DescribeForecastExportJob(ctx workflow.Context, input *forecastservice.DescribeForecastExportJobInput) (*forecastservice.DescribeForecastExportJobOutput, error)
	DescribeForecastExportJobAsync(ctx workflow.Context, input *forecastservice.DescribeForecastExportJobInput) *ForecastserviceDescribeForecastExportJobFuture

	DescribePredictor(ctx workflow.Context, input *forecastservice.DescribePredictorInput) (*forecastservice.DescribePredictorOutput, error)
	DescribePredictorAsync(ctx workflow.Context, input *forecastservice.DescribePredictorInput) *ForecastserviceDescribePredictorFuture

	GetAccuracyMetrics(ctx workflow.Context, input *forecastservice.GetAccuracyMetricsInput) (*forecastservice.GetAccuracyMetricsOutput, error)
	GetAccuracyMetricsAsync(ctx workflow.Context, input *forecastservice.GetAccuracyMetricsInput) *ForecastserviceGetAccuracyMetricsFuture

	ListDatasetGroups(ctx workflow.Context, input *forecastservice.ListDatasetGroupsInput) (*forecastservice.ListDatasetGroupsOutput, error)
	ListDatasetGroupsAsync(ctx workflow.Context, input *forecastservice.ListDatasetGroupsInput) *ForecastserviceListDatasetGroupsFuture

	ListDatasetImportJobs(ctx workflow.Context, input *forecastservice.ListDatasetImportJobsInput) (*forecastservice.ListDatasetImportJobsOutput, error)
	ListDatasetImportJobsAsync(ctx workflow.Context, input *forecastservice.ListDatasetImportJobsInput) *ForecastserviceListDatasetImportJobsFuture

	ListDatasets(ctx workflow.Context, input *forecastservice.ListDatasetsInput) (*forecastservice.ListDatasetsOutput, error)
	ListDatasetsAsync(ctx workflow.Context, input *forecastservice.ListDatasetsInput) *ForecastserviceListDatasetsFuture

	ListForecastExportJobs(ctx workflow.Context, input *forecastservice.ListForecastExportJobsInput) (*forecastservice.ListForecastExportJobsOutput, error)
	ListForecastExportJobsAsync(ctx workflow.Context, input *forecastservice.ListForecastExportJobsInput) *ForecastserviceListForecastExportJobsFuture

	ListForecasts(ctx workflow.Context, input *forecastservice.ListForecastsInput) (*forecastservice.ListForecastsOutput, error)
	ListForecastsAsync(ctx workflow.Context, input *forecastservice.ListForecastsInput) *ForecastserviceListForecastsFuture

	ListPredictors(ctx workflow.Context, input *forecastservice.ListPredictorsInput) (*forecastservice.ListPredictorsOutput, error)
	ListPredictorsAsync(ctx workflow.Context, input *forecastservice.ListPredictorsInput) *ForecastserviceListPredictorsFuture

	ListTagsForResource(ctx workflow.Context, input *forecastservice.ListTagsForResourceInput) (*forecastservice.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *forecastservice.ListTagsForResourceInput) *ForecastserviceListTagsForResourceFuture

	TagResource(ctx workflow.Context, input *forecastservice.TagResourceInput) (*forecastservice.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *forecastservice.TagResourceInput) *ForecastserviceTagResourceFuture

	UntagResource(ctx workflow.Context, input *forecastservice.UntagResourceInput) (*forecastservice.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *forecastservice.UntagResourceInput) *ForecastserviceUntagResourceFuture

	UpdateDatasetGroup(ctx workflow.Context, input *forecastservice.UpdateDatasetGroupInput) (*forecastservice.UpdateDatasetGroupOutput, error)
	UpdateDatasetGroupAsync(ctx workflow.Context, input *forecastservice.UpdateDatasetGroupInput) *ForecastserviceUpdateDatasetGroupFuture
}

type ForecastServiceStub struct{}

func NewForecastServiceStub() ForecastServiceClient {
	return &ForecastServiceStub{}
}

type ForecastserviceCreateDatasetFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceCreateDatasetFuture) Get(ctx workflow.Context) (*forecastservice.CreateDatasetOutput, error) {
	var output forecastservice.CreateDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceCreateDatasetGroupFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceCreateDatasetGroupFuture) Get(ctx workflow.Context) (*forecastservice.CreateDatasetGroupOutput, error) {
	var output forecastservice.CreateDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceCreateDatasetImportJobFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceCreateDatasetImportJobFuture) Get(ctx workflow.Context) (*forecastservice.CreateDatasetImportJobOutput, error) {
	var output forecastservice.CreateDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceCreateForecastFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceCreateForecastFuture) Get(ctx workflow.Context) (*forecastservice.CreateForecastOutput, error) {
	var output forecastservice.CreateForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceCreateForecastExportJobFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceCreateForecastExportJobFuture) Get(ctx workflow.Context) (*forecastservice.CreateForecastExportJobOutput, error) {
	var output forecastservice.CreateForecastExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceCreatePredictorFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceCreatePredictorFuture) Get(ctx workflow.Context) (*forecastservice.CreatePredictorOutput, error) {
	var output forecastservice.CreatePredictorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceDeleteDatasetFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceDeleteDatasetFuture) Get(ctx workflow.Context) (*forecastservice.DeleteDatasetOutput, error) {
	var output forecastservice.DeleteDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceDeleteDatasetGroupFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceDeleteDatasetGroupFuture) Get(ctx workflow.Context) (*forecastservice.DeleteDatasetGroupOutput, error) {
	var output forecastservice.DeleteDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceDeleteDatasetImportJobFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceDeleteDatasetImportJobFuture) Get(ctx workflow.Context) (*forecastservice.DeleteDatasetImportJobOutput, error) {
	var output forecastservice.DeleteDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceDeleteForecastFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceDeleteForecastFuture) Get(ctx workflow.Context) (*forecastservice.DeleteForecastOutput, error) {
	var output forecastservice.DeleteForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceDeleteForecastExportJobFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceDeleteForecastExportJobFuture) Get(ctx workflow.Context) (*forecastservice.DeleteForecastExportJobOutput, error) {
	var output forecastservice.DeleteForecastExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceDeletePredictorFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceDeletePredictorFuture) Get(ctx workflow.Context) (*forecastservice.DeletePredictorOutput, error) {
	var output forecastservice.DeletePredictorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceDescribeDatasetFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceDescribeDatasetFuture) Get(ctx workflow.Context) (*forecastservice.DescribeDatasetOutput, error) {
	var output forecastservice.DescribeDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceDescribeDatasetGroupFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceDescribeDatasetGroupFuture) Get(ctx workflow.Context) (*forecastservice.DescribeDatasetGroupOutput, error) {
	var output forecastservice.DescribeDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceDescribeDatasetImportJobFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceDescribeDatasetImportJobFuture) Get(ctx workflow.Context) (*forecastservice.DescribeDatasetImportJobOutput, error) {
	var output forecastservice.DescribeDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceDescribeForecastFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceDescribeForecastFuture) Get(ctx workflow.Context) (*forecastservice.DescribeForecastOutput, error) {
	var output forecastservice.DescribeForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceDescribeForecastExportJobFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceDescribeForecastExportJobFuture) Get(ctx workflow.Context) (*forecastservice.DescribeForecastExportJobOutput, error) {
	var output forecastservice.DescribeForecastExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceDescribePredictorFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceDescribePredictorFuture) Get(ctx workflow.Context) (*forecastservice.DescribePredictorOutput, error) {
	var output forecastservice.DescribePredictorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceGetAccuracyMetricsFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceGetAccuracyMetricsFuture) Get(ctx workflow.Context) (*forecastservice.GetAccuracyMetricsOutput, error) {
	var output forecastservice.GetAccuracyMetricsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceListDatasetGroupsFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceListDatasetGroupsFuture) Get(ctx workflow.Context) (*forecastservice.ListDatasetGroupsOutput, error) {
	var output forecastservice.ListDatasetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceListDatasetImportJobsFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceListDatasetImportJobsFuture) Get(ctx workflow.Context) (*forecastservice.ListDatasetImportJobsOutput, error) {
	var output forecastservice.ListDatasetImportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceListDatasetsFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceListDatasetsFuture) Get(ctx workflow.Context) (*forecastservice.ListDatasetsOutput, error) {
	var output forecastservice.ListDatasetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceListForecastExportJobsFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceListForecastExportJobsFuture) Get(ctx workflow.Context) (*forecastservice.ListForecastExportJobsOutput, error) {
	var output forecastservice.ListForecastExportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceListForecastsFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceListForecastsFuture) Get(ctx workflow.Context) (*forecastservice.ListForecastsOutput, error) {
	var output forecastservice.ListForecastsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceListPredictorsFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceListPredictorsFuture) Get(ctx workflow.Context) (*forecastservice.ListPredictorsOutput, error) {
	var output forecastservice.ListPredictorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceListTagsForResourceFuture) Get(ctx workflow.Context) (*forecastservice.ListTagsForResourceOutput, error) {
	var output forecastservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceTagResourceFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceTagResourceFuture) Get(ctx workflow.Context) (*forecastservice.TagResourceOutput, error) {
	var output forecastservice.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceUntagResourceFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceUntagResourceFuture) Get(ctx workflow.Context) (*forecastservice.UntagResourceOutput, error) {
	var output forecastservice.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastserviceUpdateDatasetGroupFuture struct {
	Future workflow.Future
}

func (r *ForecastserviceUpdateDatasetGroupFuture) Get(ctx workflow.Context) (*forecastservice.UpdateDatasetGroupOutput, error) {
	var output forecastservice.UpdateDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreateDataset(ctx workflow.Context, input *forecastservice.CreateDatasetInput) (*forecastservice.CreateDatasetOutput, error) {
	var output forecastservice.CreateDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreateDatasetAsync(ctx workflow.Context, input *forecastservice.CreateDatasetInput) *ForecastserviceCreateDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateDataset", input)
	return &ForecastserviceCreateDatasetFuture{Future: future}
}

func (a *ForecastServiceStub) CreateDatasetGroup(ctx workflow.Context, input *forecastservice.CreateDatasetGroupInput) (*forecastservice.CreateDatasetGroupOutput, error) {
	var output forecastservice.CreateDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreateDatasetGroupAsync(ctx workflow.Context, input *forecastservice.CreateDatasetGroupInput) *ForecastserviceCreateDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateDatasetGroup", input)
	return &ForecastserviceCreateDatasetGroupFuture{Future: future}
}

func (a *ForecastServiceStub) CreateDatasetImportJob(ctx workflow.Context, input *forecastservice.CreateDatasetImportJobInput) (*forecastservice.CreateDatasetImportJobOutput, error) {
	var output forecastservice.CreateDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreateDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.CreateDatasetImportJobInput) *ForecastserviceCreateDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateDatasetImportJob", input)
	return &ForecastserviceCreateDatasetImportJobFuture{Future: future}
}

func (a *ForecastServiceStub) CreateForecast(ctx workflow.Context, input *forecastservice.CreateForecastInput) (*forecastservice.CreateForecastOutput, error) {
	var output forecastservice.CreateForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreateForecastAsync(ctx workflow.Context, input *forecastservice.CreateForecastInput) *ForecastserviceCreateForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateForecast", input)
	return &ForecastserviceCreateForecastFuture{Future: future}
}

func (a *ForecastServiceStub) CreateForecastExportJob(ctx workflow.Context, input *forecastservice.CreateForecastExportJobInput) (*forecastservice.CreateForecastExportJobOutput, error) {
	var output forecastservice.CreateForecastExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateForecastExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreateForecastExportJobAsync(ctx workflow.Context, input *forecastservice.CreateForecastExportJobInput) *ForecastserviceCreateForecastExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateForecastExportJob", input)
	return &ForecastserviceCreateForecastExportJobFuture{Future: future}
}

func (a *ForecastServiceStub) CreatePredictor(ctx workflow.Context, input *forecastservice.CreatePredictorInput) (*forecastservice.CreatePredictorOutput, error) {
	var output forecastservice.CreatePredictorOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreatePredictor", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreatePredictorAsync(ctx workflow.Context, input *forecastservice.CreatePredictorInput) *ForecastserviceCreatePredictorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreatePredictor", input)
	return &ForecastserviceCreatePredictorFuture{Future: future}
}

func (a *ForecastServiceStub) DeleteDataset(ctx workflow.Context, input *forecastservice.DeleteDatasetInput) (*forecastservice.DeleteDatasetOutput, error) {
	var output forecastservice.DeleteDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DeleteDatasetAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetInput) *ForecastserviceDeleteDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteDataset", input)
	return &ForecastserviceDeleteDatasetFuture{Future: future}
}

func (a *ForecastServiceStub) DeleteDatasetGroup(ctx workflow.Context, input *forecastservice.DeleteDatasetGroupInput) (*forecastservice.DeleteDatasetGroupOutput, error) {
	var output forecastservice.DeleteDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DeleteDatasetGroupAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetGroupInput) *ForecastserviceDeleteDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteDatasetGroup", input)
	return &ForecastserviceDeleteDatasetGroupFuture{Future: future}
}

func (a *ForecastServiceStub) DeleteDatasetImportJob(ctx workflow.Context, input *forecastservice.DeleteDatasetImportJobInput) (*forecastservice.DeleteDatasetImportJobOutput, error) {
	var output forecastservice.DeleteDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DeleteDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetImportJobInput) *ForecastserviceDeleteDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteDatasetImportJob", input)
	return &ForecastserviceDeleteDatasetImportJobFuture{Future: future}
}

func (a *ForecastServiceStub) DeleteForecast(ctx workflow.Context, input *forecastservice.DeleteForecastInput) (*forecastservice.DeleteForecastOutput, error) {
	var output forecastservice.DeleteForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DeleteForecastAsync(ctx workflow.Context, input *forecastservice.DeleteForecastInput) *ForecastserviceDeleteForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteForecast", input)
	return &ForecastserviceDeleteForecastFuture{Future: future}
}

func (a *ForecastServiceStub) DeleteForecastExportJob(ctx workflow.Context, input *forecastservice.DeleteForecastExportJobInput) (*forecastservice.DeleteForecastExportJobOutput, error) {
	var output forecastservice.DeleteForecastExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteForecastExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DeleteForecastExportJobAsync(ctx workflow.Context, input *forecastservice.DeleteForecastExportJobInput) *ForecastserviceDeleteForecastExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteForecastExportJob", input)
	return &ForecastserviceDeleteForecastExportJobFuture{Future: future}
}

func (a *ForecastServiceStub) DeletePredictor(ctx workflow.Context, input *forecastservice.DeletePredictorInput) (*forecastservice.DeletePredictorOutput, error) {
	var output forecastservice.DeletePredictorOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeletePredictor", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DeletePredictorAsync(ctx workflow.Context, input *forecastservice.DeletePredictorInput) *ForecastserviceDeletePredictorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeletePredictor", input)
	return &ForecastserviceDeletePredictorFuture{Future: future}
}

func (a *ForecastServiceStub) DescribeDataset(ctx workflow.Context, input *forecastservice.DescribeDatasetInput) (*forecastservice.DescribeDatasetOutput, error) {
	var output forecastservice.DescribeDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DescribeDatasetAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetInput) *ForecastserviceDescribeDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeDataset", input)
	return &ForecastserviceDescribeDatasetFuture{Future: future}
}

func (a *ForecastServiceStub) DescribeDatasetGroup(ctx workflow.Context, input *forecastservice.DescribeDatasetGroupInput) (*forecastservice.DescribeDatasetGroupOutput, error) {
	var output forecastservice.DescribeDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DescribeDatasetGroupAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetGroupInput) *ForecastserviceDescribeDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeDatasetGroup", input)
	return &ForecastserviceDescribeDatasetGroupFuture{Future: future}
}

func (a *ForecastServiceStub) DescribeDatasetImportJob(ctx workflow.Context, input *forecastservice.DescribeDatasetImportJobInput) (*forecastservice.DescribeDatasetImportJobOutput, error) {
	var output forecastservice.DescribeDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DescribeDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetImportJobInput) *ForecastserviceDescribeDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeDatasetImportJob", input)
	return &ForecastserviceDescribeDatasetImportJobFuture{Future: future}
}

func (a *ForecastServiceStub) DescribeForecast(ctx workflow.Context, input *forecastservice.DescribeForecastInput) (*forecastservice.DescribeForecastOutput, error) {
	var output forecastservice.DescribeForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DescribeForecastAsync(ctx workflow.Context, input *forecastservice.DescribeForecastInput) *ForecastserviceDescribeForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeForecast", input)
	return &ForecastserviceDescribeForecastFuture{Future: future}
}

func (a *ForecastServiceStub) DescribeForecastExportJob(ctx workflow.Context, input *forecastservice.DescribeForecastExportJobInput) (*forecastservice.DescribeForecastExportJobOutput, error) {
	var output forecastservice.DescribeForecastExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeForecastExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DescribeForecastExportJobAsync(ctx workflow.Context, input *forecastservice.DescribeForecastExportJobInput) *ForecastserviceDescribeForecastExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeForecastExportJob", input)
	return &ForecastserviceDescribeForecastExportJobFuture{Future: future}
}

func (a *ForecastServiceStub) DescribePredictor(ctx workflow.Context, input *forecastservice.DescribePredictorInput) (*forecastservice.DescribePredictorOutput, error) {
	var output forecastservice.DescribePredictorOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribePredictor", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DescribePredictorAsync(ctx workflow.Context, input *forecastservice.DescribePredictorInput) *ForecastserviceDescribePredictorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribePredictor", input)
	return &ForecastserviceDescribePredictorFuture{Future: future}
}

func (a *ForecastServiceStub) GetAccuracyMetrics(ctx workflow.Context, input *forecastservice.GetAccuracyMetricsInput) (*forecastservice.GetAccuracyMetricsOutput, error) {
	var output forecastservice.GetAccuracyMetricsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.GetAccuracyMetrics", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) GetAccuracyMetricsAsync(ctx workflow.Context, input *forecastservice.GetAccuracyMetricsInput) *ForecastserviceGetAccuracyMetricsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.GetAccuracyMetrics", input)
	return &ForecastserviceGetAccuracyMetricsFuture{Future: future}
}

func (a *ForecastServiceStub) ListDatasetGroups(ctx workflow.Context, input *forecastservice.ListDatasetGroupsInput) (*forecastservice.ListDatasetGroupsOutput, error) {
	var output forecastservice.ListDatasetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListDatasetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListDatasetGroupsAsync(ctx workflow.Context, input *forecastservice.ListDatasetGroupsInput) *ForecastserviceListDatasetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListDatasetGroups", input)
	return &ForecastserviceListDatasetGroupsFuture{Future: future}
}

func (a *ForecastServiceStub) ListDatasetImportJobs(ctx workflow.Context, input *forecastservice.ListDatasetImportJobsInput) (*forecastservice.ListDatasetImportJobsOutput, error) {
	var output forecastservice.ListDatasetImportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListDatasetImportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListDatasetImportJobsAsync(ctx workflow.Context, input *forecastservice.ListDatasetImportJobsInput) *ForecastserviceListDatasetImportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListDatasetImportJobs", input)
	return &ForecastserviceListDatasetImportJobsFuture{Future: future}
}

func (a *ForecastServiceStub) ListDatasets(ctx workflow.Context, input *forecastservice.ListDatasetsInput) (*forecastservice.ListDatasetsOutput, error) {
	var output forecastservice.ListDatasetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListDatasets", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListDatasetsAsync(ctx workflow.Context, input *forecastservice.ListDatasetsInput) *ForecastserviceListDatasetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListDatasets", input)
	return &ForecastserviceListDatasetsFuture{Future: future}
}

func (a *ForecastServiceStub) ListForecastExportJobs(ctx workflow.Context, input *forecastservice.ListForecastExportJobsInput) (*forecastservice.ListForecastExportJobsOutput, error) {
	var output forecastservice.ListForecastExportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListForecastExportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListForecastExportJobsAsync(ctx workflow.Context, input *forecastservice.ListForecastExportJobsInput) *ForecastserviceListForecastExportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListForecastExportJobs", input)
	return &ForecastserviceListForecastExportJobsFuture{Future: future}
}

func (a *ForecastServiceStub) ListForecasts(ctx workflow.Context, input *forecastservice.ListForecastsInput) (*forecastservice.ListForecastsOutput, error) {
	var output forecastservice.ListForecastsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListForecasts", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListForecastsAsync(ctx workflow.Context, input *forecastservice.ListForecastsInput) *ForecastserviceListForecastsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListForecasts", input)
	return &ForecastserviceListForecastsFuture{Future: future}
}

func (a *ForecastServiceStub) ListPredictors(ctx workflow.Context, input *forecastservice.ListPredictorsInput) (*forecastservice.ListPredictorsOutput, error) {
	var output forecastservice.ListPredictorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListPredictors", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListPredictorsAsync(ctx workflow.Context, input *forecastservice.ListPredictorsInput) *ForecastserviceListPredictorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListPredictors", input)
	return &ForecastserviceListPredictorsFuture{Future: future}
}

func (a *ForecastServiceStub) ListTagsForResource(ctx workflow.Context, input *forecastservice.ListTagsForResourceInput) (*forecastservice.ListTagsForResourceOutput, error) {
	var output forecastservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListTagsForResourceAsync(ctx workflow.Context, input *forecastservice.ListTagsForResourceInput) *ForecastserviceListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListTagsForResource", input)
	return &ForecastserviceListTagsForResourceFuture{Future: future}
}

func (a *ForecastServiceStub) TagResource(ctx workflow.Context, input *forecastservice.TagResourceInput) (*forecastservice.TagResourceOutput, error) {
	var output forecastservice.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) TagResourceAsync(ctx workflow.Context, input *forecastservice.TagResourceInput) *ForecastserviceTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.TagResource", input)
	return &ForecastserviceTagResourceFuture{Future: future}
}

func (a *ForecastServiceStub) UntagResource(ctx workflow.Context, input *forecastservice.UntagResourceInput) (*forecastservice.UntagResourceOutput, error) {
	var output forecastservice.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) UntagResourceAsync(ctx workflow.Context, input *forecastservice.UntagResourceInput) *ForecastserviceUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.UntagResource", input)
	return &ForecastserviceUntagResourceFuture{Future: future}
}

func (a *ForecastServiceStub) UpdateDatasetGroup(ctx workflow.Context, input *forecastservice.UpdateDatasetGroupInput) (*forecastservice.UpdateDatasetGroupOutput, error) {
	var output forecastservice.UpdateDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.UpdateDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) UpdateDatasetGroupAsync(ctx workflow.Context, input *forecastservice.UpdateDatasetGroupInput) *ForecastserviceUpdateDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.UpdateDatasetGroup", input)
	return &ForecastserviceUpdateDatasetGroupFuture{Future: future}
}
