// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/forecastservice"
	"go.temporal.io/sdk/workflow"
)

type ForecastServiceClient interface {
	CreateDataset(ctx workflow.Context, input *forecastservice.CreateDatasetInput) (*forecastservice.CreateDatasetOutput, error)
	CreateDatasetAsync(ctx workflow.Context, input *forecastservice.CreateDatasetInput) *ForecastServiceCreateDatasetFuture

	CreateDatasetGroup(ctx workflow.Context, input *forecastservice.CreateDatasetGroupInput) (*forecastservice.CreateDatasetGroupOutput, error)
	CreateDatasetGroupAsync(ctx workflow.Context, input *forecastservice.CreateDatasetGroupInput) *ForecastServiceCreateDatasetGroupFuture

	CreateDatasetImportJob(ctx workflow.Context, input *forecastservice.CreateDatasetImportJobInput) (*forecastservice.CreateDatasetImportJobOutput, error)
	CreateDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.CreateDatasetImportJobInput) *ForecastServiceCreateDatasetImportJobFuture

	CreateForecast(ctx workflow.Context, input *forecastservice.CreateForecastInput) (*forecastservice.CreateForecastOutput, error)
	CreateForecastAsync(ctx workflow.Context, input *forecastservice.CreateForecastInput) *ForecastServiceCreateForecastFuture

	CreateForecastExportJob(ctx workflow.Context, input *forecastservice.CreateForecastExportJobInput) (*forecastservice.CreateForecastExportJobOutput, error)
	CreateForecastExportJobAsync(ctx workflow.Context, input *forecastservice.CreateForecastExportJobInput) *ForecastServiceCreateForecastExportJobFuture

	CreatePredictor(ctx workflow.Context, input *forecastservice.CreatePredictorInput) (*forecastservice.CreatePredictorOutput, error)
	CreatePredictorAsync(ctx workflow.Context, input *forecastservice.CreatePredictorInput) *ForecastServiceCreatePredictorFuture

	DeleteDataset(ctx workflow.Context, input *forecastservice.DeleteDatasetInput) (*forecastservice.DeleteDatasetOutput, error)
	DeleteDatasetAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetInput) *ForecastServiceDeleteDatasetFuture

	DeleteDatasetGroup(ctx workflow.Context, input *forecastservice.DeleteDatasetGroupInput) (*forecastservice.DeleteDatasetGroupOutput, error)
	DeleteDatasetGroupAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetGroupInput) *ForecastServiceDeleteDatasetGroupFuture

	DeleteDatasetImportJob(ctx workflow.Context, input *forecastservice.DeleteDatasetImportJobInput) (*forecastservice.DeleteDatasetImportJobOutput, error)
	DeleteDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetImportJobInput) *ForecastServiceDeleteDatasetImportJobFuture

	DeleteForecast(ctx workflow.Context, input *forecastservice.DeleteForecastInput) (*forecastservice.DeleteForecastOutput, error)
	DeleteForecastAsync(ctx workflow.Context, input *forecastservice.DeleteForecastInput) *ForecastServiceDeleteForecastFuture

	DeleteForecastExportJob(ctx workflow.Context, input *forecastservice.DeleteForecastExportJobInput) (*forecastservice.DeleteForecastExportJobOutput, error)
	DeleteForecastExportJobAsync(ctx workflow.Context, input *forecastservice.DeleteForecastExportJobInput) *ForecastServiceDeleteForecastExportJobFuture

	DeletePredictor(ctx workflow.Context, input *forecastservice.DeletePredictorInput) (*forecastservice.DeletePredictorOutput, error)
	DeletePredictorAsync(ctx workflow.Context, input *forecastservice.DeletePredictorInput) *ForecastServiceDeletePredictorFuture

	DescribeDataset(ctx workflow.Context, input *forecastservice.DescribeDatasetInput) (*forecastservice.DescribeDatasetOutput, error)
	DescribeDatasetAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetInput) *ForecastServiceDescribeDatasetFuture

	DescribeDatasetGroup(ctx workflow.Context, input *forecastservice.DescribeDatasetGroupInput) (*forecastservice.DescribeDatasetGroupOutput, error)
	DescribeDatasetGroupAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetGroupInput) *ForecastServiceDescribeDatasetGroupFuture

	DescribeDatasetImportJob(ctx workflow.Context, input *forecastservice.DescribeDatasetImportJobInput) (*forecastservice.DescribeDatasetImportJobOutput, error)
	DescribeDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetImportJobInput) *ForecastServiceDescribeDatasetImportJobFuture

	DescribeForecast(ctx workflow.Context, input *forecastservice.DescribeForecastInput) (*forecastservice.DescribeForecastOutput, error)
	DescribeForecastAsync(ctx workflow.Context, input *forecastservice.DescribeForecastInput) *ForecastServiceDescribeForecastFuture

	DescribeForecastExportJob(ctx workflow.Context, input *forecastservice.DescribeForecastExportJobInput) (*forecastservice.DescribeForecastExportJobOutput, error)
	DescribeForecastExportJobAsync(ctx workflow.Context, input *forecastservice.DescribeForecastExportJobInput) *ForecastServiceDescribeForecastExportJobFuture

	DescribePredictor(ctx workflow.Context, input *forecastservice.DescribePredictorInput) (*forecastservice.DescribePredictorOutput, error)
	DescribePredictorAsync(ctx workflow.Context, input *forecastservice.DescribePredictorInput) *ForecastServiceDescribePredictorFuture

	GetAccuracyMetrics(ctx workflow.Context, input *forecastservice.GetAccuracyMetricsInput) (*forecastservice.GetAccuracyMetricsOutput, error)
	GetAccuracyMetricsAsync(ctx workflow.Context, input *forecastservice.GetAccuracyMetricsInput) *ForecastServiceGetAccuracyMetricsFuture

	ListDatasetGroups(ctx workflow.Context, input *forecastservice.ListDatasetGroupsInput) (*forecastservice.ListDatasetGroupsOutput, error)
	ListDatasetGroupsAsync(ctx workflow.Context, input *forecastservice.ListDatasetGroupsInput) *ForecastServiceListDatasetGroupsFuture

	ListDatasetImportJobs(ctx workflow.Context, input *forecastservice.ListDatasetImportJobsInput) (*forecastservice.ListDatasetImportJobsOutput, error)
	ListDatasetImportJobsAsync(ctx workflow.Context, input *forecastservice.ListDatasetImportJobsInput) *ForecastServiceListDatasetImportJobsFuture

	ListDatasets(ctx workflow.Context, input *forecastservice.ListDatasetsInput) (*forecastservice.ListDatasetsOutput, error)
	ListDatasetsAsync(ctx workflow.Context, input *forecastservice.ListDatasetsInput) *ForecastServiceListDatasetsFuture

	ListForecastExportJobs(ctx workflow.Context, input *forecastservice.ListForecastExportJobsInput) (*forecastservice.ListForecastExportJobsOutput, error)
	ListForecastExportJobsAsync(ctx workflow.Context, input *forecastservice.ListForecastExportJobsInput) *ForecastServiceListForecastExportJobsFuture

	ListForecasts(ctx workflow.Context, input *forecastservice.ListForecastsInput) (*forecastservice.ListForecastsOutput, error)
	ListForecastsAsync(ctx workflow.Context, input *forecastservice.ListForecastsInput) *ForecastServiceListForecastsFuture

	ListPredictors(ctx workflow.Context, input *forecastservice.ListPredictorsInput) (*forecastservice.ListPredictorsOutput, error)
	ListPredictorsAsync(ctx workflow.Context, input *forecastservice.ListPredictorsInput) *ForecastServiceListPredictorsFuture

	ListTagsForResource(ctx workflow.Context, input *forecastservice.ListTagsForResourceInput) (*forecastservice.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *forecastservice.ListTagsForResourceInput) *ForecastServiceListTagsForResourceFuture

	TagResource(ctx workflow.Context, input *forecastservice.TagResourceInput) (*forecastservice.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *forecastservice.TagResourceInput) *ForecastServiceTagResourceFuture

	UntagResource(ctx workflow.Context, input *forecastservice.UntagResourceInput) (*forecastservice.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *forecastservice.UntagResourceInput) *ForecastServiceUntagResourceFuture

	UpdateDatasetGroup(ctx workflow.Context, input *forecastservice.UpdateDatasetGroupInput) (*forecastservice.UpdateDatasetGroupOutput, error)
	UpdateDatasetGroupAsync(ctx workflow.Context, input *forecastservice.UpdateDatasetGroupInput) *ForecastServiceUpdateDatasetGroupFuture
}

type ForecastServiceStub struct{}

func NewForecastServiceStub() ForecastServiceClient {
	return &ForecastServiceStub{}
}

type ForecastServiceCreateDatasetFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceCreateDatasetFuture) Get(ctx workflow.Context) (*forecastservice.CreateDatasetOutput, error) {
	var output forecastservice.CreateDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceCreateDatasetGroupFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceCreateDatasetGroupFuture) Get(ctx workflow.Context) (*forecastservice.CreateDatasetGroupOutput, error) {
	var output forecastservice.CreateDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceCreateDatasetImportJobFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceCreateDatasetImportJobFuture) Get(ctx workflow.Context) (*forecastservice.CreateDatasetImportJobOutput, error) {
	var output forecastservice.CreateDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceCreateForecastFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceCreateForecastFuture) Get(ctx workflow.Context) (*forecastservice.CreateForecastOutput, error) {
	var output forecastservice.CreateForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceCreateForecastExportJobFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceCreateForecastExportJobFuture) Get(ctx workflow.Context) (*forecastservice.CreateForecastExportJobOutput, error) {
	var output forecastservice.CreateForecastExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceCreatePredictorFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceCreatePredictorFuture) Get(ctx workflow.Context) (*forecastservice.CreatePredictorOutput, error) {
	var output forecastservice.CreatePredictorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceDeleteDatasetFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceDeleteDatasetFuture) Get(ctx workflow.Context) (*forecastservice.DeleteDatasetOutput, error) {
	var output forecastservice.DeleteDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceDeleteDatasetGroupFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceDeleteDatasetGroupFuture) Get(ctx workflow.Context) (*forecastservice.DeleteDatasetGroupOutput, error) {
	var output forecastservice.DeleteDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceDeleteDatasetImportJobFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceDeleteDatasetImportJobFuture) Get(ctx workflow.Context) (*forecastservice.DeleteDatasetImportJobOutput, error) {
	var output forecastservice.DeleteDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceDeleteForecastFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceDeleteForecastFuture) Get(ctx workflow.Context) (*forecastservice.DeleteForecastOutput, error) {
	var output forecastservice.DeleteForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceDeleteForecastExportJobFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceDeleteForecastExportJobFuture) Get(ctx workflow.Context) (*forecastservice.DeleteForecastExportJobOutput, error) {
	var output forecastservice.DeleteForecastExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceDeletePredictorFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceDeletePredictorFuture) Get(ctx workflow.Context) (*forecastservice.DeletePredictorOutput, error) {
	var output forecastservice.DeletePredictorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceDescribeDatasetFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceDescribeDatasetFuture) Get(ctx workflow.Context) (*forecastservice.DescribeDatasetOutput, error) {
	var output forecastservice.DescribeDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceDescribeDatasetGroupFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceDescribeDatasetGroupFuture) Get(ctx workflow.Context) (*forecastservice.DescribeDatasetGroupOutput, error) {
	var output forecastservice.DescribeDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceDescribeDatasetImportJobFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceDescribeDatasetImportJobFuture) Get(ctx workflow.Context) (*forecastservice.DescribeDatasetImportJobOutput, error) {
	var output forecastservice.DescribeDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceDescribeForecastFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceDescribeForecastFuture) Get(ctx workflow.Context) (*forecastservice.DescribeForecastOutput, error) {
	var output forecastservice.DescribeForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceDescribeForecastExportJobFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceDescribeForecastExportJobFuture) Get(ctx workflow.Context) (*forecastservice.DescribeForecastExportJobOutput, error) {
	var output forecastservice.DescribeForecastExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceDescribePredictorFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceDescribePredictorFuture) Get(ctx workflow.Context) (*forecastservice.DescribePredictorOutput, error) {
	var output forecastservice.DescribePredictorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceGetAccuracyMetricsFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceGetAccuracyMetricsFuture) Get(ctx workflow.Context) (*forecastservice.GetAccuracyMetricsOutput, error) {
	var output forecastservice.GetAccuracyMetricsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceListDatasetGroupsFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceListDatasetGroupsFuture) Get(ctx workflow.Context) (*forecastservice.ListDatasetGroupsOutput, error) {
	var output forecastservice.ListDatasetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceListDatasetImportJobsFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceListDatasetImportJobsFuture) Get(ctx workflow.Context) (*forecastservice.ListDatasetImportJobsOutput, error) {
	var output forecastservice.ListDatasetImportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceListDatasetsFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceListDatasetsFuture) Get(ctx workflow.Context) (*forecastservice.ListDatasetsOutput, error) {
	var output forecastservice.ListDatasetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceListForecastExportJobsFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceListForecastExportJobsFuture) Get(ctx workflow.Context) (*forecastservice.ListForecastExportJobsOutput, error) {
	var output forecastservice.ListForecastExportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceListForecastsFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceListForecastsFuture) Get(ctx workflow.Context) (*forecastservice.ListForecastsOutput, error) {
	var output forecastservice.ListForecastsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceListPredictorsFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceListPredictorsFuture) Get(ctx workflow.Context) (*forecastservice.ListPredictorsOutput, error) {
	var output forecastservice.ListPredictorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceListTagsForResourceFuture) Get(ctx workflow.Context) (*forecastservice.ListTagsForResourceOutput, error) {
	var output forecastservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceTagResourceFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceTagResourceFuture) Get(ctx workflow.Context) (*forecastservice.TagResourceOutput, error) {
	var output forecastservice.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceUntagResourceFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceUntagResourceFuture) Get(ctx workflow.Context) (*forecastservice.UntagResourceOutput, error) {
	var output forecastservice.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForecastServiceUpdateDatasetGroupFuture struct {
	Future workflow.Future
}

func (r *ForecastServiceUpdateDatasetGroupFuture) Get(ctx workflow.Context) (*forecastservice.UpdateDatasetGroupOutput, error) {
	var output forecastservice.UpdateDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreateDataset(ctx workflow.Context, input *forecastservice.CreateDatasetInput) (*forecastservice.CreateDatasetOutput, error) {
	var output forecastservice.CreateDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreateDatasetAsync(ctx workflow.Context, input *forecastservice.CreateDatasetInput) *ForecastServiceCreateDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateDataset", input)
	return &ForecastServiceCreateDatasetFuture{Future: future}
}

func (a *ForecastServiceStub) CreateDatasetGroup(ctx workflow.Context, input *forecastservice.CreateDatasetGroupInput) (*forecastservice.CreateDatasetGroupOutput, error) {
	var output forecastservice.CreateDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreateDatasetGroupAsync(ctx workflow.Context, input *forecastservice.CreateDatasetGroupInput) *ForecastServiceCreateDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateDatasetGroup", input)
	return &ForecastServiceCreateDatasetGroupFuture{Future: future}
}

func (a *ForecastServiceStub) CreateDatasetImportJob(ctx workflow.Context, input *forecastservice.CreateDatasetImportJobInput) (*forecastservice.CreateDatasetImportJobOutput, error) {
	var output forecastservice.CreateDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreateDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.CreateDatasetImportJobInput) *ForecastServiceCreateDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateDatasetImportJob", input)
	return &ForecastServiceCreateDatasetImportJobFuture{Future: future}
}

func (a *ForecastServiceStub) CreateForecast(ctx workflow.Context, input *forecastservice.CreateForecastInput) (*forecastservice.CreateForecastOutput, error) {
	var output forecastservice.CreateForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreateForecastAsync(ctx workflow.Context, input *forecastservice.CreateForecastInput) *ForecastServiceCreateForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateForecast", input)
	return &ForecastServiceCreateForecastFuture{Future: future}
}

func (a *ForecastServiceStub) CreateForecastExportJob(ctx workflow.Context, input *forecastservice.CreateForecastExportJobInput) (*forecastservice.CreateForecastExportJobOutput, error) {
	var output forecastservice.CreateForecastExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateForecastExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreateForecastExportJobAsync(ctx workflow.Context, input *forecastservice.CreateForecastExportJobInput) *ForecastServiceCreateForecastExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreateForecastExportJob", input)
	return &ForecastServiceCreateForecastExportJobFuture{Future: future}
}

func (a *ForecastServiceStub) CreatePredictor(ctx workflow.Context, input *forecastservice.CreatePredictorInput) (*forecastservice.CreatePredictorOutput, error) {
	var output forecastservice.CreatePredictorOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreatePredictor", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) CreatePredictorAsync(ctx workflow.Context, input *forecastservice.CreatePredictorInput) *ForecastServiceCreatePredictorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.CreatePredictor", input)
	return &ForecastServiceCreatePredictorFuture{Future: future}
}

func (a *ForecastServiceStub) DeleteDataset(ctx workflow.Context, input *forecastservice.DeleteDatasetInput) (*forecastservice.DeleteDatasetOutput, error) {
	var output forecastservice.DeleteDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DeleteDatasetAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetInput) *ForecastServiceDeleteDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteDataset", input)
	return &ForecastServiceDeleteDatasetFuture{Future: future}
}

func (a *ForecastServiceStub) DeleteDatasetGroup(ctx workflow.Context, input *forecastservice.DeleteDatasetGroupInput) (*forecastservice.DeleteDatasetGroupOutput, error) {
	var output forecastservice.DeleteDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DeleteDatasetGroupAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetGroupInput) *ForecastServiceDeleteDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteDatasetGroup", input)
	return &ForecastServiceDeleteDatasetGroupFuture{Future: future}
}

func (a *ForecastServiceStub) DeleteDatasetImportJob(ctx workflow.Context, input *forecastservice.DeleteDatasetImportJobInput) (*forecastservice.DeleteDatasetImportJobOutput, error) {
	var output forecastservice.DeleteDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DeleteDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetImportJobInput) *ForecastServiceDeleteDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteDatasetImportJob", input)
	return &ForecastServiceDeleteDatasetImportJobFuture{Future: future}
}

func (a *ForecastServiceStub) DeleteForecast(ctx workflow.Context, input *forecastservice.DeleteForecastInput) (*forecastservice.DeleteForecastOutput, error) {
	var output forecastservice.DeleteForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DeleteForecastAsync(ctx workflow.Context, input *forecastservice.DeleteForecastInput) *ForecastServiceDeleteForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteForecast", input)
	return &ForecastServiceDeleteForecastFuture{Future: future}
}

func (a *ForecastServiceStub) DeleteForecastExportJob(ctx workflow.Context, input *forecastservice.DeleteForecastExportJobInput) (*forecastservice.DeleteForecastExportJobOutput, error) {
	var output forecastservice.DeleteForecastExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteForecastExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DeleteForecastExportJobAsync(ctx workflow.Context, input *forecastservice.DeleteForecastExportJobInput) *ForecastServiceDeleteForecastExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeleteForecastExportJob", input)
	return &ForecastServiceDeleteForecastExportJobFuture{Future: future}
}

func (a *ForecastServiceStub) DeletePredictor(ctx workflow.Context, input *forecastservice.DeletePredictorInput) (*forecastservice.DeletePredictorOutput, error) {
	var output forecastservice.DeletePredictorOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeletePredictor", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DeletePredictorAsync(ctx workflow.Context, input *forecastservice.DeletePredictorInput) *ForecastServiceDeletePredictorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DeletePredictor", input)
	return &ForecastServiceDeletePredictorFuture{Future: future}
}

func (a *ForecastServiceStub) DescribeDataset(ctx workflow.Context, input *forecastservice.DescribeDatasetInput) (*forecastservice.DescribeDatasetOutput, error) {
	var output forecastservice.DescribeDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DescribeDatasetAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetInput) *ForecastServiceDescribeDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeDataset", input)
	return &ForecastServiceDescribeDatasetFuture{Future: future}
}

func (a *ForecastServiceStub) DescribeDatasetGroup(ctx workflow.Context, input *forecastservice.DescribeDatasetGroupInput) (*forecastservice.DescribeDatasetGroupOutput, error) {
	var output forecastservice.DescribeDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DescribeDatasetGroupAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetGroupInput) *ForecastServiceDescribeDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeDatasetGroup", input)
	return &ForecastServiceDescribeDatasetGroupFuture{Future: future}
}

func (a *ForecastServiceStub) DescribeDatasetImportJob(ctx workflow.Context, input *forecastservice.DescribeDatasetImportJobInput) (*forecastservice.DescribeDatasetImportJobOutput, error) {
	var output forecastservice.DescribeDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DescribeDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetImportJobInput) *ForecastServiceDescribeDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeDatasetImportJob", input)
	return &ForecastServiceDescribeDatasetImportJobFuture{Future: future}
}

func (a *ForecastServiceStub) DescribeForecast(ctx workflow.Context, input *forecastservice.DescribeForecastInput) (*forecastservice.DescribeForecastOutput, error) {
	var output forecastservice.DescribeForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DescribeForecastAsync(ctx workflow.Context, input *forecastservice.DescribeForecastInput) *ForecastServiceDescribeForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeForecast", input)
	return &ForecastServiceDescribeForecastFuture{Future: future}
}

func (a *ForecastServiceStub) DescribeForecastExportJob(ctx workflow.Context, input *forecastservice.DescribeForecastExportJobInput) (*forecastservice.DescribeForecastExportJobOutput, error) {
	var output forecastservice.DescribeForecastExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeForecastExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DescribeForecastExportJobAsync(ctx workflow.Context, input *forecastservice.DescribeForecastExportJobInput) *ForecastServiceDescribeForecastExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribeForecastExportJob", input)
	return &ForecastServiceDescribeForecastExportJobFuture{Future: future}
}

func (a *ForecastServiceStub) DescribePredictor(ctx workflow.Context, input *forecastservice.DescribePredictorInput) (*forecastservice.DescribePredictorOutput, error) {
	var output forecastservice.DescribePredictorOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribePredictor", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) DescribePredictorAsync(ctx workflow.Context, input *forecastservice.DescribePredictorInput) *ForecastServiceDescribePredictorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.DescribePredictor", input)
	return &ForecastServiceDescribePredictorFuture{Future: future}
}

func (a *ForecastServiceStub) GetAccuracyMetrics(ctx workflow.Context, input *forecastservice.GetAccuracyMetricsInput) (*forecastservice.GetAccuracyMetricsOutput, error) {
	var output forecastservice.GetAccuracyMetricsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.GetAccuracyMetrics", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) GetAccuracyMetricsAsync(ctx workflow.Context, input *forecastservice.GetAccuracyMetricsInput) *ForecastServiceGetAccuracyMetricsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.GetAccuracyMetrics", input)
	return &ForecastServiceGetAccuracyMetricsFuture{Future: future}
}

func (a *ForecastServiceStub) ListDatasetGroups(ctx workflow.Context, input *forecastservice.ListDatasetGroupsInput) (*forecastservice.ListDatasetGroupsOutput, error) {
	var output forecastservice.ListDatasetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListDatasetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListDatasetGroupsAsync(ctx workflow.Context, input *forecastservice.ListDatasetGroupsInput) *ForecastServiceListDatasetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListDatasetGroups", input)
	return &ForecastServiceListDatasetGroupsFuture{Future: future}
}

func (a *ForecastServiceStub) ListDatasetImportJobs(ctx workflow.Context, input *forecastservice.ListDatasetImportJobsInput) (*forecastservice.ListDatasetImportJobsOutput, error) {
	var output forecastservice.ListDatasetImportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListDatasetImportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListDatasetImportJobsAsync(ctx workflow.Context, input *forecastservice.ListDatasetImportJobsInput) *ForecastServiceListDatasetImportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListDatasetImportJobs", input)
	return &ForecastServiceListDatasetImportJobsFuture{Future: future}
}

func (a *ForecastServiceStub) ListDatasets(ctx workflow.Context, input *forecastservice.ListDatasetsInput) (*forecastservice.ListDatasetsOutput, error) {
	var output forecastservice.ListDatasetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListDatasets", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListDatasetsAsync(ctx workflow.Context, input *forecastservice.ListDatasetsInput) *ForecastServiceListDatasetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListDatasets", input)
	return &ForecastServiceListDatasetsFuture{Future: future}
}

func (a *ForecastServiceStub) ListForecastExportJobs(ctx workflow.Context, input *forecastservice.ListForecastExportJobsInput) (*forecastservice.ListForecastExportJobsOutput, error) {
	var output forecastservice.ListForecastExportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListForecastExportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListForecastExportJobsAsync(ctx workflow.Context, input *forecastservice.ListForecastExportJobsInput) *ForecastServiceListForecastExportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListForecastExportJobs", input)
	return &ForecastServiceListForecastExportJobsFuture{Future: future}
}

func (a *ForecastServiceStub) ListForecasts(ctx workflow.Context, input *forecastservice.ListForecastsInput) (*forecastservice.ListForecastsOutput, error) {
	var output forecastservice.ListForecastsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListForecasts", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListForecastsAsync(ctx workflow.Context, input *forecastservice.ListForecastsInput) *ForecastServiceListForecastsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListForecasts", input)
	return &ForecastServiceListForecastsFuture{Future: future}
}

func (a *ForecastServiceStub) ListPredictors(ctx workflow.Context, input *forecastservice.ListPredictorsInput) (*forecastservice.ListPredictorsOutput, error) {
	var output forecastservice.ListPredictorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListPredictors", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListPredictorsAsync(ctx workflow.Context, input *forecastservice.ListPredictorsInput) *ForecastServiceListPredictorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListPredictors", input)
	return &ForecastServiceListPredictorsFuture{Future: future}
}

func (a *ForecastServiceStub) ListTagsForResource(ctx workflow.Context, input *forecastservice.ListTagsForResourceInput) (*forecastservice.ListTagsForResourceOutput, error) {
	var output forecastservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) ListTagsForResourceAsync(ctx workflow.Context, input *forecastservice.ListTagsForResourceInput) *ForecastServiceListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.ListTagsForResource", input)
	return &ForecastServiceListTagsForResourceFuture{Future: future}
}

func (a *ForecastServiceStub) TagResource(ctx workflow.Context, input *forecastservice.TagResourceInput) (*forecastservice.TagResourceOutput, error) {
	var output forecastservice.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) TagResourceAsync(ctx workflow.Context, input *forecastservice.TagResourceInput) *ForecastServiceTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.TagResource", input)
	return &ForecastServiceTagResourceFuture{Future: future}
}

func (a *ForecastServiceStub) UntagResource(ctx workflow.Context, input *forecastservice.UntagResourceInput) (*forecastservice.UntagResourceOutput, error) {
	var output forecastservice.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) UntagResourceAsync(ctx workflow.Context, input *forecastservice.UntagResourceInput) *ForecastServiceUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.UntagResource", input)
	return &ForecastServiceUntagResourceFuture{Future: future}
}

func (a *ForecastServiceStub) UpdateDatasetGroup(ctx workflow.Context, input *forecastservice.UpdateDatasetGroupInput) (*forecastservice.UpdateDatasetGroupOutput, error) {
	var output forecastservice.UpdateDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.forecastservice.UpdateDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ForecastServiceStub) UpdateDatasetGroupAsync(ctx workflow.Context, input *forecastservice.UpdateDatasetGroupInput) *ForecastServiceUpdateDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.forecastservice.UpdateDatasetGroup", input)
	return &ForecastServiceUpdateDatasetGroupFuture{Future: future}
}
