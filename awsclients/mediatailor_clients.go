// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/mediatailor"
	"go.temporal.io/sdk/workflow"
)

type MediaTailorClient interface {
	DeletePlaybackConfiguration(ctx workflow.Context, input *mediatailor.DeletePlaybackConfigurationInput) (*mediatailor.DeletePlaybackConfigurationOutput, error)
	DeletePlaybackConfigurationAsync(ctx workflow.Context, input *mediatailor.DeletePlaybackConfigurationInput) *MediaTailorDeletePlaybackConfigurationFuture

	GetPlaybackConfiguration(ctx workflow.Context, input *mediatailor.GetPlaybackConfigurationInput) (*mediatailor.GetPlaybackConfigurationOutput, error)
	GetPlaybackConfigurationAsync(ctx workflow.Context, input *mediatailor.GetPlaybackConfigurationInput) *MediaTailorGetPlaybackConfigurationFuture

	ListPlaybackConfigurations(ctx workflow.Context, input *mediatailor.ListPlaybackConfigurationsInput) (*mediatailor.ListPlaybackConfigurationsOutput, error)
	ListPlaybackConfigurationsAsync(ctx workflow.Context, input *mediatailor.ListPlaybackConfigurationsInput) *MediaTailorListPlaybackConfigurationsFuture

	ListTagsForResource(ctx workflow.Context, input *mediatailor.ListTagsForResourceInput) (*mediatailor.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *mediatailor.ListTagsForResourceInput) *MediaTailorListTagsForResourceFuture

	PutPlaybackConfiguration(ctx workflow.Context, input *mediatailor.PutPlaybackConfigurationInput) (*mediatailor.PutPlaybackConfigurationOutput, error)
	PutPlaybackConfigurationAsync(ctx workflow.Context, input *mediatailor.PutPlaybackConfigurationInput) *MediaTailorPutPlaybackConfigurationFuture

	TagResource(ctx workflow.Context, input *mediatailor.TagResourceInput) (*mediatailor.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *mediatailor.TagResourceInput) *MediaTailorTagResourceFuture

	UntagResource(ctx workflow.Context, input *mediatailor.UntagResourceInput) (*mediatailor.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *mediatailor.UntagResourceInput) *MediaTailorUntagResourceFuture
}

type MediaTailorStub struct{}

func NewMediaTailorStub() MediaTailorClient {
	return &MediaTailorStub{}
}

type MediaTailorDeletePlaybackConfigurationFuture struct {
	Future workflow.Future
}

func (r *MediaTailorDeletePlaybackConfigurationFuture) Get(ctx workflow.Context) (*mediatailor.DeletePlaybackConfigurationOutput, error) {
	var output mediatailor.DeletePlaybackConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaTailorGetPlaybackConfigurationFuture struct {
	Future workflow.Future
}

func (r *MediaTailorGetPlaybackConfigurationFuture) Get(ctx workflow.Context) (*mediatailor.GetPlaybackConfigurationOutput, error) {
	var output mediatailor.GetPlaybackConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaTailorListPlaybackConfigurationsFuture struct {
	Future workflow.Future
}

func (r *MediaTailorListPlaybackConfigurationsFuture) Get(ctx workflow.Context) (*mediatailor.ListPlaybackConfigurationsOutput, error) {
	var output mediatailor.ListPlaybackConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaTailorListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *MediaTailorListTagsForResourceFuture) Get(ctx workflow.Context) (*mediatailor.ListTagsForResourceOutput, error) {
	var output mediatailor.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaTailorPutPlaybackConfigurationFuture struct {
	Future workflow.Future
}

func (r *MediaTailorPutPlaybackConfigurationFuture) Get(ctx workflow.Context) (*mediatailor.PutPlaybackConfigurationOutput, error) {
	var output mediatailor.PutPlaybackConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaTailorTagResourceFuture struct {
	Future workflow.Future
}

func (r *MediaTailorTagResourceFuture) Get(ctx workflow.Context) (*mediatailor.TagResourceOutput, error) {
	var output mediatailor.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaTailorUntagResourceFuture struct {
	Future workflow.Future
}

func (r *MediaTailorUntagResourceFuture) Get(ctx workflow.Context) (*mediatailor.UntagResourceOutput, error) {
	var output mediatailor.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MediaTailorStub) DeletePlaybackConfiguration(ctx workflow.Context, input *mediatailor.DeletePlaybackConfigurationInput) (*mediatailor.DeletePlaybackConfigurationOutput, error) {
	var output mediatailor.DeletePlaybackConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediatailor.DeletePlaybackConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaTailorStub) DeletePlaybackConfigurationAsync(ctx workflow.Context, input *mediatailor.DeletePlaybackConfigurationInput) *MediaTailorDeletePlaybackConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediatailor.DeletePlaybackConfiguration", input)
	return &MediaTailorDeletePlaybackConfigurationFuture{Future: future}
}

func (a *MediaTailorStub) GetPlaybackConfiguration(ctx workflow.Context, input *mediatailor.GetPlaybackConfigurationInput) (*mediatailor.GetPlaybackConfigurationOutput, error) {
	var output mediatailor.GetPlaybackConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediatailor.GetPlaybackConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaTailorStub) GetPlaybackConfigurationAsync(ctx workflow.Context, input *mediatailor.GetPlaybackConfigurationInput) *MediaTailorGetPlaybackConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediatailor.GetPlaybackConfiguration", input)
	return &MediaTailorGetPlaybackConfigurationFuture{Future: future}
}

func (a *MediaTailorStub) ListPlaybackConfigurations(ctx workflow.Context, input *mediatailor.ListPlaybackConfigurationsInput) (*mediatailor.ListPlaybackConfigurationsOutput, error) {
	var output mediatailor.ListPlaybackConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediatailor.ListPlaybackConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaTailorStub) ListPlaybackConfigurationsAsync(ctx workflow.Context, input *mediatailor.ListPlaybackConfigurationsInput) *MediaTailorListPlaybackConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediatailor.ListPlaybackConfigurations", input)
	return &MediaTailorListPlaybackConfigurationsFuture{Future: future}
}

func (a *MediaTailorStub) ListTagsForResource(ctx workflow.Context, input *mediatailor.ListTagsForResourceInput) (*mediatailor.ListTagsForResourceOutput, error) {
	var output mediatailor.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediatailor.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaTailorStub) ListTagsForResourceAsync(ctx workflow.Context, input *mediatailor.ListTagsForResourceInput) *MediaTailorListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediatailor.ListTagsForResource", input)
	return &MediaTailorListTagsForResourceFuture{Future: future}
}

func (a *MediaTailorStub) PutPlaybackConfiguration(ctx workflow.Context, input *mediatailor.PutPlaybackConfigurationInput) (*mediatailor.PutPlaybackConfigurationOutput, error) {
	var output mediatailor.PutPlaybackConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediatailor.PutPlaybackConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaTailorStub) PutPlaybackConfigurationAsync(ctx workflow.Context, input *mediatailor.PutPlaybackConfigurationInput) *MediaTailorPutPlaybackConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediatailor.PutPlaybackConfiguration", input)
	return &MediaTailorPutPlaybackConfigurationFuture{Future: future}
}

func (a *MediaTailorStub) TagResource(ctx workflow.Context, input *mediatailor.TagResourceInput) (*mediatailor.TagResourceOutput, error) {
	var output mediatailor.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediatailor.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaTailorStub) TagResourceAsync(ctx workflow.Context, input *mediatailor.TagResourceInput) *MediaTailorTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediatailor.TagResource", input)
	return &MediaTailorTagResourceFuture{Future: future}
}

func (a *MediaTailorStub) UntagResource(ctx workflow.Context, input *mediatailor.UntagResourceInput) (*mediatailor.UntagResourceOutput, error) {
	var output mediatailor.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediatailor.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaTailorStub) UntagResourceAsync(ctx workflow.Context, input *mediatailor.UntagResourceInput) *MediaTailorUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediatailor.UntagResource", input)
	return &MediaTailorUntagResourceFuture{Future: future}
}
