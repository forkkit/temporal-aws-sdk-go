// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/neptune"
	"go.temporal.io/sdk/workflow"
)

type NeptuneClient interface {
	AddRoleToDBCluster(ctx workflow.Context, input *neptune.AddRoleToDBClusterInput) (*neptune.AddRoleToDBClusterOutput, error)
	AddRoleToDBClusterAsync(ctx workflow.Context, input *neptune.AddRoleToDBClusterInput) *NeptuneAddRoleToDBClusterFuture

	AddSourceIdentifierToSubscription(ctx workflow.Context, input *neptune.AddSourceIdentifierToSubscriptionInput) (*neptune.AddSourceIdentifierToSubscriptionOutput, error)
	AddSourceIdentifierToSubscriptionAsync(ctx workflow.Context, input *neptune.AddSourceIdentifierToSubscriptionInput) *NeptuneAddSourceIdentifierToSubscriptionFuture

	AddTagsToResource(ctx workflow.Context, input *neptune.AddTagsToResourceInput) (*neptune.AddTagsToResourceOutput, error)
	AddTagsToResourceAsync(ctx workflow.Context, input *neptune.AddTagsToResourceInput) *NeptuneAddTagsToResourceFuture

	ApplyPendingMaintenanceAction(ctx workflow.Context, input *neptune.ApplyPendingMaintenanceActionInput) (*neptune.ApplyPendingMaintenanceActionOutput, error)
	ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *neptune.ApplyPendingMaintenanceActionInput) *NeptuneApplyPendingMaintenanceActionFuture

	CopyDBClusterParameterGroup(ctx workflow.Context, input *neptune.CopyDBClusterParameterGroupInput) (*neptune.CopyDBClusterParameterGroupOutput, error)
	CopyDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.CopyDBClusterParameterGroupInput) *NeptuneCopyDBClusterParameterGroupFuture

	CopyDBClusterSnapshot(ctx workflow.Context, input *neptune.CopyDBClusterSnapshotInput) (*neptune.CopyDBClusterSnapshotOutput, error)
	CopyDBClusterSnapshotAsync(ctx workflow.Context, input *neptune.CopyDBClusterSnapshotInput) *NeptuneCopyDBClusterSnapshotFuture

	CopyDBParameterGroup(ctx workflow.Context, input *neptune.CopyDBParameterGroupInput) (*neptune.CopyDBParameterGroupOutput, error)
	CopyDBParameterGroupAsync(ctx workflow.Context, input *neptune.CopyDBParameterGroupInput) *NeptuneCopyDBParameterGroupFuture

	CreateDBCluster(ctx workflow.Context, input *neptune.CreateDBClusterInput) (*neptune.CreateDBClusterOutput, error)
	CreateDBClusterAsync(ctx workflow.Context, input *neptune.CreateDBClusterInput) *NeptuneCreateDBClusterFuture

	CreateDBClusterParameterGroup(ctx workflow.Context, input *neptune.CreateDBClusterParameterGroupInput) (*neptune.CreateDBClusterParameterGroupOutput, error)
	CreateDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.CreateDBClusterParameterGroupInput) *NeptuneCreateDBClusterParameterGroupFuture

	CreateDBClusterSnapshot(ctx workflow.Context, input *neptune.CreateDBClusterSnapshotInput) (*neptune.CreateDBClusterSnapshotOutput, error)
	CreateDBClusterSnapshotAsync(ctx workflow.Context, input *neptune.CreateDBClusterSnapshotInput) *NeptuneCreateDBClusterSnapshotFuture

	CreateDBInstance(ctx workflow.Context, input *neptune.CreateDBInstanceInput) (*neptune.CreateDBInstanceOutput, error)
	CreateDBInstanceAsync(ctx workflow.Context, input *neptune.CreateDBInstanceInput) *NeptuneCreateDBInstanceFuture

	CreateDBParameterGroup(ctx workflow.Context, input *neptune.CreateDBParameterGroupInput) (*neptune.CreateDBParameterGroupOutput, error)
	CreateDBParameterGroupAsync(ctx workflow.Context, input *neptune.CreateDBParameterGroupInput) *NeptuneCreateDBParameterGroupFuture

	CreateDBSubnetGroup(ctx workflow.Context, input *neptune.CreateDBSubnetGroupInput) (*neptune.CreateDBSubnetGroupOutput, error)
	CreateDBSubnetGroupAsync(ctx workflow.Context, input *neptune.CreateDBSubnetGroupInput) *NeptuneCreateDBSubnetGroupFuture

	CreateEventSubscription(ctx workflow.Context, input *neptune.CreateEventSubscriptionInput) (*neptune.CreateEventSubscriptionOutput, error)
	CreateEventSubscriptionAsync(ctx workflow.Context, input *neptune.CreateEventSubscriptionInput) *NeptuneCreateEventSubscriptionFuture

	DeleteDBCluster(ctx workflow.Context, input *neptune.DeleteDBClusterInput) (*neptune.DeleteDBClusterOutput, error)
	DeleteDBClusterAsync(ctx workflow.Context, input *neptune.DeleteDBClusterInput) *NeptuneDeleteDBClusterFuture

	DeleteDBClusterParameterGroup(ctx workflow.Context, input *neptune.DeleteDBClusterParameterGroupInput) (*neptune.DeleteDBClusterParameterGroupOutput, error)
	DeleteDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.DeleteDBClusterParameterGroupInput) *NeptuneDeleteDBClusterParameterGroupFuture

	DeleteDBClusterSnapshot(ctx workflow.Context, input *neptune.DeleteDBClusterSnapshotInput) (*neptune.DeleteDBClusterSnapshotOutput, error)
	DeleteDBClusterSnapshotAsync(ctx workflow.Context, input *neptune.DeleteDBClusterSnapshotInput) *NeptuneDeleteDBClusterSnapshotFuture

	DeleteDBInstance(ctx workflow.Context, input *neptune.DeleteDBInstanceInput) (*neptune.DeleteDBInstanceOutput, error)
	DeleteDBInstanceAsync(ctx workflow.Context, input *neptune.DeleteDBInstanceInput) *NeptuneDeleteDBInstanceFuture

	DeleteDBParameterGroup(ctx workflow.Context, input *neptune.DeleteDBParameterGroupInput) (*neptune.DeleteDBParameterGroupOutput, error)
	DeleteDBParameterGroupAsync(ctx workflow.Context, input *neptune.DeleteDBParameterGroupInput) *NeptuneDeleteDBParameterGroupFuture

	DeleteDBSubnetGroup(ctx workflow.Context, input *neptune.DeleteDBSubnetGroupInput) (*neptune.DeleteDBSubnetGroupOutput, error)
	DeleteDBSubnetGroupAsync(ctx workflow.Context, input *neptune.DeleteDBSubnetGroupInput) *NeptuneDeleteDBSubnetGroupFuture

	DeleteEventSubscription(ctx workflow.Context, input *neptune.DeleteEventSubscriptionInput) (*neptune.DeleteEventSubscriptionOutput, error)
	DeleteEventSubscriptionAsync(ctx workflow.Context, input *neptune.DeleteEventSubscriptionInput) *NeptuneDeleteEventSubscriptionFuture

	DescribeDBClusterParameterGroups(ctx workflow.Context, input *neptune.DescribeDBClusterParameterGroupsInput) (*neptune.DescribeDBClusterParameterGroupsOutput, error)
	DescribeDBClusterParameterGroupsAsync(ctx workflow.Context, input *neptune.DescribeDBClusterParameterGroupsInput) *NeptuneDescribeDBClusterParameterGroupsFuture

	DescribeDBClusterParameters(ctx workflow.Context, input *neptune.DescribeDBClusterParametersInput) (*neptune.DescribeDBClusterParametersOutput, error)
	DescribeDBClusterParametersAsync(ctx workflow.Context, input *neptune.DescribeDBClusterParametersInput) *NeptuneDescribeDBClusterParametersFuture

	DescribeDBClusterSnapshotAttributes(ctx workflow.Context, input *neptune.DescribeDBClusterSnapshotAttributesInput) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error)
	DescribeDBClusterSnapshotAttributesAsync(ctx workflow.Context, input *neptune.DescribeDBClusterSnapshotAttributesInput) *NeptuneDescribeDBClusterSnapshotAttributesFuture

	DescribeDBClusterSnapshots(ctx workflow.Context, input *neptune.DescribeDBClusterSnapshotsInput) (*neptune.DescribeDBClusterSnapshotsOutput, error)
	DescribeDBClusterSnapshotsAsync(ctx workflow.Context, input *neptune.DescribeDBClusterSnapshotsInput) *NeptuneDescribeDBClusterSnapshotsFuture

	DescribeDBClusters(ctx workflow.Context, input *neptune.DescribeDBClustersInput) (*neptune.DescribeDBClustersOutput, error)
	DescribeDBClustersAsync(ctx workflow.Context, input *neptune.DescribeDBClustersInput) *NeptuneDescribeDBClustersFuture

	DescribeDBEngineVersions(ctx workflow.Context, input *neptune.DescribeDBEngineVersionsInput) (*neptune.DescribeDBEngineVersionsOutput, error)
	DescribeDBEngineVersionsAsync(ctx workflow.Context, input *neptune.DescribeDBEngineVersionsInput) *NeptuneDescribeDBEngineVersionsFuture

	DescribeDBInstances(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) (*neptune.DescribeDBInstancesOutput, error)
	DescribeDBInstancesAsync(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) *NeptuneDescribeDBInstancesFuture

	DescribeDBParameterGroups(ctx workflow.Context, input *neptune.DescribeDBParameterGroupsInput) (*neptune.DescribeDBParameterGroupsOutput, error)
	DescribeDBParameterGroupsAsync(ctx workflow.Context, input *neptune.DescribeDBParameterGroupsInput) *NeptuneDescribeDBParameterGroupsFuture

	DescribeDBParameters(ctx workflow.Context, input *neptune.DescribeDBParametersInput) (*neptune.DescribeDBParametersOutput, error)
	DescribeDBParametersAsync(ctx workflow.Context, input *neptune.DescribeDBParametersInput) *NeptuneDescribeDBParametersFuture

	DescribeDBSubnetGroups(ctx workflow.Context, input *neptune.DescribeDBSubnetGroupsInput) (*neptune.DescribeDBSubnetGroupsOutput, error)
	DescribeDBSubnetGroupsAsync(ctx workflow.Context, input *neptune.DescribeDBSubnetGroupsInput) *NeptuneDescribeDBSubnetGroupsFuture

	DescribeEngineDefaultClusterParameters(ctx workflow.Context, input *neptune.DescribeEngineDefaultClusterParametersInput) (*neptune.DescribeEngineDefaultClusterParametersOutput, error)
	DescribeEngineDefaultClusterParametersAsync(ctx workflow.Context, input *neptune.DescribeEngineDefaultClusterParametersInput) *NeptuneDescribeEngineDefaultClusterParametersFuture

	DescribeEngineDefaultParameters(ctx workflow.Context, input *neptune.DescribeEngineDefaultParametersInput) (*neptune.DescribeEngineDefaultParametersOutput, error)
	DescribeEngineDefaultParametersAsync(ctx workflow.Context, input *neptune.DescribeEngineDefaultParametersInput) *NeptuneDescribeEngineDefaultParametersFuture

	DescribeEventCategories(ctx workflow.Context, input *neptune.DescribeEventCategoriesInput) (*neptune.DescribeEventCategoriesOutput, error)
	DescribeEventCategoriesAsync(ctx workflow.Context, input *neptune.DescribeEventCategoriesInput) *NeptuneDescribeEventCategoriesFuture

	DescribeEventSubscriptions(ctx workflow.Context, input *neptune.DescribeEventSubscriptionsInput) (*neptune.DescribeEventSubscriptionsOutput, error)
	DescribeEventSubscriptionsAsync(ctx workflow.Context, input *neptune.DescribeEventSubscriptionsInput) *NeptuneDescribeEventSubscriptionsFuture

	DescribeEvents(ctx workflow.Context, input *neptune.DescribeEventsInput) (*neptune.DescribeEventsOutput, error)
	DescribeEventsAsync(ctx workflow.Context, input *neptune.DescribeEventsInput) *NeptuneDescribeEventsFuture

	DescribeOrderableDBInstanceOptions(ctx workflow.Context, input *neptune.DescribeOrderableDBInstanceOptionsInput) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error)
	DescribeOrderableDBInstanceOptionsAsync(ctx workflow.Context, input *neptune.DescribeOrderableDBInstanceOptionsInput) *NeptuneDescribeOrderableDBInstanceOptionsFuture

	DescribePendingMaintenanceActions(ctx workflow.Context, input *neptune.DescribePendingMaintenanceActionsInput) (*neptune.DescribePendingMaintenanceActionsOutput, error)
	DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *neptune.DescribePendingMaintenanceActionsInput) *NeptuneDescribePendingMaintenanceActionsFuture

	DescribeValidDBInstanceModifications(ctx workflow.Context, input *neptune.DescribeValidDBInstanceModificationsInput) (*neptune.DescribeValidDBInstanceModificationsOutput, error)
	DescribeValidDBInstanceModificationsAsync(ctx workflow.Context, input *neptune.DescribeValidDBInstanceModificationsInput) *NeptuneDescribeValidDBInstanceModificationsFuture

	FailoverDBCluster(ctx workflow.Context, input *neptune.FailoverDBClusterInput) (*neptune.FailoverDBClusterOutput, error)
	FailoverDBClusterAsync(ctx workflow.Context, input *neptune.FailoverDBClusterInput) *NeptuneFailoverDBClusterFuture

	ListTagsForResource(ctx workflow.Context, input *neptune.ListTagsForResourceInput) (*neptune.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *neptune.ListTagsForResourceInput) *NeptuneListTagsForResourceFuture

	ModifyDBCluster(ctx workflow.Context, input *neptune.ModifyDBClusterInput) (*neptune.ModifyDBClusterOutput, error)
	ModifyDBClusterAsync(ctx workflow.Context, input *neptune.ModifyDBClusterInput) *NeptuneModifyDBClusterFuture

	ModifyDBClusterParameterGroup(ctx workflow.Context, input *neptune.ModifyDBClusterParameterGroupInput) (*neptune.ResetDBClusterParameterGroupOutput, error)
	ModifyDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.ModifyDBClusterParameterGroupInput) *NeptuneModifyDBClusterParameterGroupFuture

	ModifyDBClusterSnapshotAttribute(ctx workflow.Context, input *neptune.ModifyDBClusterSnapshotAttributeInput) (*neptune.ModifyDBClusterSnapshotAttributeOutput, error)
	ModifyDBClusterSnapshotAttributeAsync(ctx workflow.Context, input *neptune.ModifyDBClusterSnapshotAttributeInput) *NeptuneModifyDBClusterSnapshotAttributeFuture

	ModifyDBInstance(ctx workflow.Context, input *neptune.ModifyDBInstanceInput) (*neptune.ModifyDBInstanceOutput, error)
	ModifyDBInstanceAsync(ctx workflow.Context, input *neptune.ModifyDBInstanceInput) *NeptuneModifyDBInstanceFuture

	ModifyDBParameterGroup(ctx workflow.Context, input *neptune.ModifyDBParameterGroupInput) (*neptune.ResetDBParameterGroupOutput, error)
	ModifyDBParameterGroupAsync(ctx workflow.Context, input *neptune.ModifyDBParameterGroupInput) *NeptuneModifyDBParameterGroupFuture

	ModifyDBSubnetGroup(ctx workflow.Context, input *neptune.ModifyDBSubnetGroupInput) (*neptune.ModifyDBSubnetGroupOutput, error)
	ModifyDBSubnetGroupAsync(ctx workflow.Context, input *neptune.ModifyDBSubnetGroupInput) *NeptuneModifyDBSubnetGroupFuture

	ModifyEventSubscription(ctx workflow.Context, input *neptune.ModifyEventSubscriptionInput) (*neptune.ModifyEventSubscriptionOutput, error)
	ModifyEventSubscriptionAsync(ctx workflow.Context, input *neptune.ModifyEventSubscriptionInput) *NeptuneModifyEventSubscriptionFuture

	PromoteReadReplicaDBCluster(ctx workflow.Context, input *neptune.PromoteReadReplicaDBClusterInput) (*neptune.PromoteReadReplicaDBClusterOutput, error)
	PromoteReadReplicaDBClusterAsync(ctx workflow.Context, input *neptune.PromoteReadReplicaDBClusterInput) *NeptunePromoteReadReplicaDBClusterFuture

	RebootDBInstance(ctx workflow.Context, input *neptune.RebootDBInstanceInput) (*neptune.RebootDBInstanceOutput, error)
	RebootDBInstanceAsync(ctx workflow.Context, input *neptune.RebootDBInstanceInput) *NeptuneRebootDBInstanceFuture

	RemoveRoleFromDBCluster(ctx workflow.Context, input *neptune.RemoveRoleFromDBClusterInput) (*neptune.RemoveRoleFromDBClusterOutput, error)
	RemoveRoleFromDBClusterAsync(ctx workflow.Context, input *neptune.RemoveRoleFromDBClusterInput) *NeptuneRemoveRoleFromDBClusterFuture

	RemoveSourceIdentifierFromSubscription(ctx workflow.Context, input *neptune.RemoveSourceIdentifierFromSubscriptionInput) (*neptune.RemoveSourceIdentifierFromSubscriptionOutput, error)
	RemoveSourceIdentifierFromSubscriptionAsync(ctx workflow.Context, input *neptune.RemoveSourceIdentifierFromSubscriptionInput) *NeptuneRemoveSourceIdentifierFromSubscriptionFuture

	RemoveTagsFromResource(ctx workflow.Context, input *neptune.RemoveTagsFromResourceInput) (*neptune.RemoveTagsFromResourceOutput, error)
	RemoveTagsFromResourceAsync(ctx workflow.Context, input *neptune.RemoveTagsFromResourceInput) *NeptuneRemoveTagsFromResourceFuture

	ResetDBClusterParameterGroup(ctx workflow.Context, input *neptune.ResetDBClusterParameterGroupInput) (*neptune.ResetDBClusterParameterGroupOutput, error)
	ResetDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.ResetDBClusterParameterGroupInput) *NeptuneResetDBClusterParameterGroupFuture

	ResetDBParameterGroup(ctx workflow.Context, input *neptune.ResetDBParameterGroupInput) (*neptune.ResetDBParameterGroupOutput, error)
	ResetDBParameterGroupAsync(ctx workflow.Context, input *neptune.ResetDBParameterGroupInput) *NeptuneResetDBParameterGroupFuture

	RestoreDBClusterFromSnapshot(ctx workflow.Context, input *neptune.RestoreDBClusterFromSnapshotInput) (*neptune.RestoreDBClusterFromSnapshotOutput, error)
	RestoreDBClusterFromSnapshotAsync(ctx workflow.Context, input *neptune.RestoreDBClusterFromSnapshotInput) *NeptuneRestoreDBClusterFromSnapshotFuture

	RestoreDBClusterToPointInTime(ctx workflow.Context, input *neptune.RestoreDBClusterToPointInTimeInput) (*neptune.RestoreDBClusterToPointInTimeOutput, error)
	RestoreDBClusterToPointInTimeAsync(ctx workflow.Context, input *neptune.RestoreDBClusterToPointInTimeInput) *NeptuneRestoreDBClusterToPointInTimeFuture

	StartDBCluster(ctx workflow.Context, input *neptune.StartDBClusterInput) (*neptune.StartDBClusterOutput, error)
	StartDBClusterAsync(ctx workflow.Context, input *neptune.StartDBClusterInput) *NeptuneStartDBClusterFuture

	StopDBCluster(ctx workflow.Context, input *neptune.StopDBClusterInput) (*neptune.StopDBClusterOutput, error)
	StopDBClusterAsync(ctx workflow.Context, input *neptune.StopDBClusterInput) *NeptuneStopDBClusterFuture

	WaitUntilDBInstanceAvailable(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) error
	WaitUntilDBInstanceAvailableAsync(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) workflow.Future

	WaitUntilDBInstanceDeleted(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) error
	WaitUntilDBInstanceDeletedAsync(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) workflow.Future
}

type NeptuneStub struct{}

func NewNeptuneStub() NeptuneClient {
	return &NeptuneStub{}
}

type NeptuneAddRoleToDBClusterFuture struct {
	Future workflow.Future
}

func (r *NeptuneAddRoleToDBClusterFuture) Get(ctx workflow.Context) (*neptune.AddRoleToDBClusterOutput, error) {
	var output neptune.AddRoleToDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneAddSourceIdentifierToSubscriptionFuture struct {
	Future workflow.Future
}

func (r *NeptuneAddSourceIdentifierToSubscriptionFuture) Get(ctx workflow.Context) (*neptune.AddSourceIdentifierToSubscriptionOutput, error) {
	var output neptune.AddSourceIdentifierToSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneAddTagsToResourceFuture struct {
	Future workflow.Future
}

func (r *NeptuneAddTagsToResourceFuture) Get(ctx workflow.Context) (*neptune.AddTagsToResourceOutput, error) {
	var output neptune.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneApplyPendingMaintenanceActionFuture struct {
	Future workflow.Future
}

func (r *NeptuneApplyPendingMaintenanceActionFuture) Get(ctx workflow.Context) (*neptune.ApplyPendingMaintenanceActionOutput, error) {
	var output neptune.ApplyPendingMaintenanceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneCopyDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneCopyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*neptune.CopyDBClusterParameterGroupOutput, error) {
	var output neptune.CopyDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneCopyDBClusterSnapshotFuture struct {
	Future workflow.Future
}

func (r *NeptuneCopyDBClusterSnapshotFuture) Get(ctx workflow.Context) (*neptune.CopyDBClusterSnapshotOutput, error) {
	var output neptune.CopyDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneCopyDBParameterGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneCopyDBParameterGroupFuture) Get(ctx workflow.Context) (*neptune.CopyDBParameterGroupOutput, error) {
	var output neptune.CopyDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneCreateDBClusterFuture struct {
	Future workflow.Future
}

func (r *NeptuneCreateDBClusterFuture) Get(ctx workflow.Context) (*neptune.CreateDBClusterOutput, error) {
	var output neptune.CreateDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneCreateDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneCreateDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*neptune.CreateDBClusterParameterGroupOutput, error) {
	var output neptune.CreateDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneCreateDBClusterSnapshotFuture struct {
	Future workflow.Future
}

func (r *NeptuneCreateDBClusterSnapshotFuture) Get(ctx workflow.Context) (*neptune.CreateDBClusterSnapshotOutput, error) {
	var output neptune.CreateDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneCreateDBInstanceFuture struct {
	Future workflow.Future
}

func (r *NeptuneCreateDBInstanceFuture) Get(ctx workflow.Context) (*neptune.CreateDBInstanceOutput, error) {
	var output neptune.CreateDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneCreateDBParameterGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneCreateDBParameterGroupFuture) Get(ctx workflow.Context) (*neptune.CreateDBParameterGroupOutput, error) {
	var output neptune.CreateDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneCreateDBSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneCreateDBSubnetGroupFuture) Get(ctx workflow.Context) (*neptune.CreateDBSubnetGroupOutput, error) {
	var output neptune.CreateDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneCreateEventSubscriptionFuture struct {
	Future workflow.Future
}

func (r *NeptuneCreateEventSubscriptionFuture) Get(ctx workflow.Context) (*neptune.CreateEventSubscriptionOutput, error) {
	var output neptune.CreateEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDeleteDBClusterFuture struct {
	Future workflow.Future
}

func (r *NeptuneDeleteDBClusterFuture) Get(ctx workflow.Context) (*neptune.DeleteDBClusterOutput, error) {
	var output neptune.DeleteDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDeleteDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneDeleteDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*neptune.DeleteDBClusterParameterGroupOutput, error) {
	var output neptune.DeleteDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDeleteDBClusterSnapshotFuture struct {
	Future workflow.Future
}

func (r *NeptuneDeleteDBClusterSnapshotFuture) Get(ctx workflow.Context) (*neptune.DeleteDBClusterSnapshotOutput, error) {
	var output neptune.DeleteDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDeleteDBInstanceFuture struct {
	Future workflow.Future
}

func (r *NeptuneDeleteDBInstanceFuture) Get(ctx workflow.Context) (*neptune.DeleteDBInstanceOutput, error) {
	var output neptune.DeleteDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDeleteDBParameterGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneDeleteDBParameterGroupFuture) Get(ctx workflow.Context) (*neptune.DeleteDBParameterGroupOutput, error) {
	var output neptune.DeleteDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDeleteDBSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneDeleteDBSubnetGroupFuture) Get(ctx workflow.Context) (*neptune.DeleteDBSubnetGroupOutput, error) {
	var output neptune.DeleteDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDeleteEventSubscriptionFuture struct {
	Future workflow.Future
}

func (r *NeptuneDeleteEventSubscriptionFuture) Get(ctx workflow.Context) (*neptune.DeleteEventSubscriptionOutput, error) {
	var output neptune.DeleteEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeDBClusterParameterGroupsFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeDBClusterParameterGroupsFuture) Get(ctx workflow.Context) (*neptune.DescribeDBClusterParameterGroupsOutput, error) {
	var output neptune.DescribeDBClusterParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeDBClusterParametersFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeDBClusterParametersFuture) Get(ctx workflow.Context) (*neptune.DescribeDBClusterParametersOutput, error) {
	var output neptune.DescribeDBClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeDBClusterSnapshotAttributesFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeDBClusterSnapshotAttributesFuture) Get(ctx workflow.Context) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output neptune.DescribeDBClusterSnapshotAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeDBClusterSnapshotsFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeDBClusterSnapshotsFuture) Get(ctx workflow.Context) (*neptune.DescribeDBClusterSnapshotsOutput, error) {
	var output neptune.DescribeDBClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeDBClustersFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeDBClustersFuture) Get(ctx workflow.Context) (*neptune.DescribeDBClustersOutput, error) {
	var output neptune.DescribeDBClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeDBEngineVersionsFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeDBEngineVersionsFuture) Get(ctx workflow.Context) (*neptune.DescribeDBEngineVersionsOutput, error) {
	var output neptune.DescribeDBEngineVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeDBInstancesFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeDBInstancesFuture) Get(ctx workflow.Context) (*neptune.DescribeDBInstancesOutput, error) {
	var output neptune.DescribeDBInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeDBParameterGroupsFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeDBParameterGroupsFuture) Get(ctx workflow.Context) (*neptune.DescribeDBParameterGroupsOutput, error) {
	var output neptune.DescribeDBParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeDBParametersFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeDBParametersFuture) Get(ctx workflow.Context) (*neptune.DescribeDBParametersOutput, error) {
	var output neptune.DescribeDBParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeDBSubnetGroupsFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeDBSubnetGroupsFuture) Get(ctx workflow.Context) (*neptune.DescribeDBSubnetGroupsOutput, error) {
	var output neptune.DescribeDBSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeEngineDefaultClusterParametersFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeEngineDefaultClusterParametersFuture) Get(ctx workflow.Context) (*neptune.DescribeEngineDefaultClusterParametersOutput, error) {
	var output neptune.DescribeEngineDefaultClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeEngineDefaultParametersFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeEngineDefaultParametersFuture) Get(ctx workflow.Context) (*neptune.DescribeEngineDefaultParametersOutput, error) {
	var output neptune.DescribeEngineDefaultParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeEventCategoriesFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeEventCategoriesFuture) Get(ctx workflow.Context) (*neptune.DescribeEventCategoriesOutput, error) {
	var output neptune.DescribeEventCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeEventSubscriptionsFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeEventSubscriptionsFuture) Get(ctx workflow.Context) (*neptune.DescribeEventSubscriptionsOutput, error) {
	var output neptune.DescribeEventSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeEventsFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeEventsFuture) Get(ctx workflow.Context) (*neptune.DescribeEventsOutput, error) {
	var output neptune.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeOrderableDBInstanceOptionsFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeOrderableDBInstanceOptionsFuture) Get(ctx workflow.Context) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output neptune.DescribeOrderableDBInstanceOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribePendingMaintenanceActionsFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribePendingMaintenanceActionsFuture) Get(ctx workflow.Context) (*neptune.DescribePendingMaintenanceActionsOutput, error) {
	var output neptune.DescribePendingMaintenanceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneDescribeValidDBInstanceModificationsFuture struct {
	Future workflow.Future
}

func (r *NeptuneDescribeValidDBInstanceModificationsFuture) Get(ctx workflow.Context) (*neptune.DescribeValidDBInstanceModificationsOutput, error) {
	var output neptune.DescribeValidDBInstanceModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneFailoverDBClusterFuture struct {
	Future workflow.Future
}

func (r *NeptuneFailoverDBClusterFuture) Get(ctx workflow.Context) (*neptune.FailoverDBClusterOutput, error) {
	var output neptune.FailoverDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *NeptuneListTagsForResourceFuture) Get(ctx workflow.Context) (*neptune.ListTagsForResourceOutput, error) {
	var output neptune.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneModifyDBClusterFuture struct {
	Future workflow.Future
}

func (r *NeptuneModifyDBClusterFuture) Get(ctx workflow.Context) (*neptune.ModifyDBClusterOutput, error) {
	var output neptune.ModifyDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneModifyDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneModifyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	var output neptune.ResetDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneModifyDBClusterSnapshotAttributeFuture struct {
	Future workflow.Future
}

func (r *NeptuneModifyDBClusterSnapshotAttributeFuture) Get(ctx workflow.Context) (*neptune.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output neptune.ModifyDBClusterSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneModifyDBInstanceFuture struct {
	Future workflow.Future
}

func (r *NeptuneModifyDBInstanceFuture) Get(ctx workflow.Context) (*neptune.ModifyDBInstanceOutput, error) {
	var output neptune.ModifyDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneModifyDBParameterGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneModifyDBParameterGroupFuture) Get(ctx workflow.Context) (*neptune.ResetDBParameterGroupOutput, error) {
	var output neptune.ResetDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneModifyDBSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneModifyDBSubnetGroupFuture) Get(ctx workflow.Context) (*neptune.ModifyDBSubnetGroupOutput, error) {
	var output neptune.ModifyDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneModifyEventSubscriptionFuture struct {
	Future workflow.Future
}

func (r *NeptuneModifyEventSubscriptionFuture) Get(ctx workflow.Context) (*neptune.ModifyEventSubscriptionOutput, error) {
	var output neptune.ModifyEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptunePromoteReadReplicaDBClusterFuture struct {
	Future workflow.Future
}

func (r *NeptunePromoteReadReplicaDBClusterFuture) Get(ctx workflow.Context) (*neptune.PromoteReadReplicaDBClusterOutput, error) {
	var output neptune.PromoteReadReplicaDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneRebootDBInstanceFuture struct {
	Future workflow.Future
}

func (r *NeptuneRebootDBInstanceFuture) Get(ctx workflow.Context) (*neptune.RebootDBInstanceOutput, error) {
	var output neptune.RebootDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneRemoveRoleFromDBClusterFuture struct {
	Future workflow.Future
}

func (r *NeptuneRemoveRoleFromDBClusterFuture) Get(ctx workflow.Context) (*neptune.RemoveRoleFromDBClusterOutput, error) {
	var output neptune.RemoveRoleFromDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneRemoveSourceIdentifierFromSubscriptionFuture struct {
	Future workflow.Future
}

func (r *NeptuneRemoveSourceIdentifierFromSubscriptionFuture) Get(ctx workflow.Context) (*neptune.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	var output neptune.RemoveSourceIdentifierFromSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneRemoveTagsFromResourceFuture struct {
	Future workflow.Future
}

func (r *NeptuneRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*neptune.RemoveTagsFromResourceOutput, error) {
	var output neptune.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneResetDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneResetDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	var output neptune.ResetDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneResetDBParameterGroupFuture struct {
	Future workflow.Future
}

func (r *NeptuneResetDBParameterGroupFuture) Get(ctx workflow.Context) (*neptune.ResetDBParameterGroupOutput, error) {
	var output neptune.ResetDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneRestoreDBClusterFromSnapshotFuture struct {
	Future workflow.Future
}

func (r *NeptuneRestoreDBClusterFromSnapshotFuture) Get(ctx workflow.Context) (*neptune.RestoreDBClusterFromSnapshotOutput, error) {
	var output neptune.RestoreDBClusterFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneRestoreDBClusterToPointInTimeFuture struct {
	Future workflow.Future
}

func (r *NeptuneRestoreDBClusterToPointInTimeFuture) Get(ctx workflow.Context) (*neptune.RestoreDBClusterToPointInTimeOutput, error) {
	var output neptune.RestoreDBClusterToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneStartDBClusterFuture struct {
	Future workflow.Future
}

func (r *NeptuneStartDBClusterFuture) Get(ctx workflow.Context) (*neptune.StartDBClusterOutput, error) {
	var output neptune.StartDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NeptuneStopDBClusterFuture struct {
	Future workflow.Future
}

func (r *NeptuneStopDBClusterFuture) Get(ctx workflow.Context) (*neptune.StopDBClusterOutput, error) {
	var output neptune.StopDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) AddRoleToDBCluster(ctx workflow.Context, input *neptune.AddRoleToDBClusterInput) (*neptune.AddRoleToDBClusterOutput, error) {
	var output neptune.AddRoleToDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.AddRoleToDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) AddRoleToDBClusterAsync(ctx workflow.Context, input *neptune.AddRoleToDBClusterInput) *NeptuneAddRoleToDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.AddRoleToDBCluster", input)
	return &NeptuneAddRoleToDBClusterFuture{Future: future}
}

func (a *NeptuneStub) AddSourceIdentifierToSubscription(ctx workflow.Context, input *neptune.AddSourceIdentifierToSubscriptionInput) (*neptune.AddSourceIdentifierToSubscriptionOutput, error) {
	var output neptune.AddSourceIdentifierToSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.AddSourceIdentifierToSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) AddSourceIdentifierToSubscriptionAsync(ctx workflow.Context, input *neptune.AddSourceIdentifierToSubscriptionInput) *NeptuneAddSourceIdentifierToSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.AddSourceIdentifierToSubscription", input)
	return &NeptuneAddSourceIdentifierToSubscriptionFuture{Future: future}
}

func (a *NeptuneStub) AddTagsToResource(ctx workflow.Context, input *neptune.AddTagsToResourceInput) (*neptune.AddTagsToResourceOutput, error) {
	var output neptune.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) AddTagsToResourceAsync(ctx workflow.Context, input *neptune.AddTagsToResourceInput) *NeptuneAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.AddTagsToResource", input)
	return &NeptuneAddTagsToResourceFuture{Future: future}
}

func (a *NeptuneStub) ApplyPendingMaintenanceAction(ctx workflow.Context, input *neptune.ApplyPendingMaintenanceActionInput) (*neptune.ApplyPendingMaintenanceActionOutput, error) {
	var output neptune.ApplyPendingMaintenanceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.ApplyPendingMaintenanceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *neptune.ApplyPendingMaintenanceActionInput) *NeptuneApplyPendingMaintenanceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.ApplyPendingMaintenanceAction", input)
	return &NeptuneApplyPendingMaintenanceActionFuture{Future: future}
}

func (a *NeptuneStub) CopyDBClusterParameterGroup(ctx workflow.Context, input *neptune.CopyDBClusterParameterGroupInput) (*neptune.CopyDBClusterParameterGroupOutput, error) {
	var output neptune.CopyDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.CopyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) CopyDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.CopyDBClusterParameterGroupInput) *NeptuneCopyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.CopyDBClusterParameterGroup", input)
	return &NeptuneCopyDBClusterParameterGroupFuture{Future: future}
}

func (a *NeptuneStub) CopyDBClusterSnapshot(ctx workflow.Context, input *neptune.CopyDBClusterSnapshotInput) (*neptune.CopyDBClusterSnapshotOutput, error) {
	var output neptune.CopyDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.CopyDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) CopyDBClusterSnapshotAsync(ctx workflow.Context, input *neptune.CopyDBClusterSnapshotInput) *NeptuneCopyDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.CopyDBClusterSnapshot", input)
	return &NeptuneCopyDBClusterSnapshotFuture{Future: future}
}

func (a *NeptuneStub) CopyDBParameterGroup(ctx workflow.Context, input *neptune.CopyDBParameterGroupInput) (*neptune.CopyDBParameterGroupOutput, error) {
	var output neptune.CopyDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.CopyDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) CopyDBParameterGroupAsync(ctx workflow.Context, input *neptune.CopyDBParameterGroupInput) *NeptuneCopyDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.CopyDBParameterGroup", input)
	return &NeptuneCopyDBParameterGroupFuture{Future: future}
}

func (a *NeptuneStub) CreateDBCluster(ctx workflow.Context, input *neptune.CreateDBClusterInput) (*neptune.CreateDBClusterOutput, error) {
	var output neptune.CreateDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.CreateDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) CreateDBClusterAsync(ctx workflow.Context, input *neptune.CreateDBClusterInput) *NeptuneCreateDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.CreateDBCluster", input)
	return &NeptuneCreateDBClusterFuture{Future: future}
}

func (a *NeptuneStub) CreateDBClusterParameterGroup(ctx workflow.Context, input *neptune.CreateDBClusterParameterGroupInput) (*neptune.CreateDBClusterParameterGroupOutput, error) {
	var output neptune.CreateDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.CreateDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) CreateDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.CreateDBClusterParameterGroupInput) *NeptuneCreateDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.CreateDBClusterParameterGroup", input)
	return &NeptuneCreateDBClusterParameterGroupFuture{Future: future}
}

func (a *NeptuneStub) CreateDBClusterSnapshot(ctx workflow.Context, input *neptune.CreateDBClusterSnapshotInput) (*neptune.CreateDBClusterSnapshotOutput, error) {
	var output neptune.CreateDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.CreateDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) CreateDBClusterSnapshotAsync(ctx workflow.Context, input *neptune.CreateDBClusterSnapshotInput) *NeptuneCreateDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.CreateDBClusterSnapshot", input)
	return &NeptuneCreateDBClusterSnapshotFuture{Future: future}
}

func (a *NeptuneStub) CreateDBInstance(ctx workflow.Context, input *neptune.CreateDBInstanceInput) (*neptune.CreateDBInstanceOutput, error) {
	var output neptune.CreateDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.CreateDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) CreateDBInstanceAsync(ctx workflow.Context, input *neptune.CreateDBInstanceInput) *NeptuneCreateDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.CreateDBInstance", input)
	return &NeptuneCreateDBInstanceFuture{Future: future}
}

func (a *NeptuneStub) CreateDBParameterGroup(ctx workflow.Context, input *neptune.CreateDBParameterGroupInput) (*neptune.CreateDBParameterGroupOutput, error) {
	var output neptune.CreateDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.CreateDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) CreateDBParameterGroupAsync(ctx workflow.Context, input *neptune.CreateDBParameterGroupInput) *NeptuneCreateDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.CreateDBParameterGroup", input)
	return &NeptuneCreateDBParameterGroupFuture{Future: future}
}

func (a *NeptuneStub) CreateDBSubnetGroup(ctx workflow.Context, input *neptune.CreateDBSubnetGroupInput) (*neptune.CreateDBSubnetGroupOutput, error) {
	var output neptune.CreateDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.CreateDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) CreateDBSubnetGroupAsync(ctx workflow.Context, input *neptune.CreateDBSubnetGroupInput) *NeptuneCreateDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.CreateDBSubnetGroup", input)
	return &NeptuneCreateDBSubnetGroupFuture{Future: future}
}

func (a *NeptuneStub) CreateEventSubscription(ctx workflow.Context, input *neptune.CreateEventSubscriptionInput) (*neptune.CreateEventSubscriptionOutput, error) {
	var output neptune.CreateEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.CreateEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) CreateEventSubscriptionAsync(ctx workflow.Context, input *neptune.CreateEventSubscriptionInput) *NeptuneCreateEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.CreateEventSubscription", input)
	return &NeptuneCreateEventSubscriptionFuture{Future: future}
}

func (a *NeptuneStub) DeleteDBCluster(ctx workflow.Context, input *neptune.DeleteDBClusterInput) (*neptune.DeleteDBClusterOutput, error) {
	var output neptune.DeleteDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DeleteDBClusterAsync(ctx workflow.Context, input *neptune.DeleteDBClusterInput) *NeptuneDeleteDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteDBCluster", input)
	return &NeptuneDeleteDBClusterFuture{Future: future}
}

func (a *NeptuneStub) DeleteDBClusterParameterGroup(ctx workflow.Context, input *neptune.DeleteDBClusterParameterGroupInput) (*neptune.DeleteDBClusterParameterGroupOutput, error) {
	var output neptune.DeleteDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DeleteDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.DeleteDBClusterParameterGroupInput) *NeptuneDeleteDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteDBClusterParameterGroup", input)
	return &NeptuneDeleteDBClusterParameterGroupFuture{Future: future}
}

func (a *NeptuneStub) DeleteDBClusterSnapshot(ctx workflow.Context, input *neptune.DeleteDBClusterSnapshotInput) (*neptune.DeleteDBClusterSnapshotOutput, error) {
	var output neptune.DeleteDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DeleteDBClusterSnapshotAsync(ctx workflow.Context, input *neptune.DeleteDBClusterSnapshotInput) *NeptuneDeleteDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteDBClusterSnapshot", input)
	return &NeptuneDeleteDBClusterSnapshotFuture{Future: future}
}

func (a *NeptuneStub) DeleteDBInstance(ctx workflow.Context, input *neptune.DeleteDBInstanceInput) (*neptune.DeleteDBInstanceOutput, error) {
	var output neptune.DeleteDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DeleteDBInstanceAsync(ctx workflow.Context, input *neptune.DeleteDBInstanceInput) *NeptuneDeleteDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteDBInstance", input)
	return &NeptuneDeleteDBInstanceFuture{Future: future}
}

func (a *NeptuneStub) DeleteDBParameterGroup(ctx workflow.Context, input *neptune.DeleteDBParameterGroupInput) (*neptune.DeleteDBParameterGroupOutput, error) {
	var output neptune.DeleteDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DeleteDBParameterGroupAsync(ctx workflow.Context, input *neptune.DeleteDBParameterGroupInput) *NeptuneDeleteDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteDBParameterGroup", input)
	return &NeptuneDeleteDBParameterGroupFuture{Future: future}
}

func (a *NeptuneStub) DeleteDBSubnetGroup(ctx workflow.Context, input *neptune.DeleteDBSubnetGroupInput) (*neptune.DeleteDBSubnetGroupOutput, error) {
	var output neptune.DeleteDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DeleteDBSubnetGroupAsync(ctx workflow.Context, input *neptune.DeleteDBSubnetGroupInput) *NeptuneDeleteDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteDBSubnetGroup", input)
	return &NeptuneDeleteDBSubnetGroupFuture{Future: future}
}

func (a *NeptuneStub) DeleteEventSubscription(ctx workflow.Context, input *neptune.DeleteEventSubscriptionInput) (*neptune.DeleteEventSubscriptionOutput, error) {
	var output neptune.DeleteEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DeleteEventSubscriptionAsync(ctx workflow.Context, input *neptune.DeleteEventSubscriptionInput) *NeptuneDeleteEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DeleteEventSubscription", input)
	return &NeptuneDeleteEventSubscriptionFuture{Future: future}
}

func (a *NeptuneStub) DescribeDBClusterParameterGroups(ctx workflow.Context, input *neptune.DescribeDBClusterParameterGroupsInput) (*neptune.DescribeDBClusterParameterGroupsOutput, error) {
	var output neptune.DescribeDBClusterParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBClusterParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeDBClusterParameterGroupsAsync(ctx workflow.Context, input *neptune.DescribeDBClusterParameterGroupsInput) *NeptuneDescribeDBClusterParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBClusterParameterGroups", input)
	return &NeptuneDescribeDBClusterParameterGroupsFuture{Future: future}
}

func (a *NeptuneStub) DescribeDBClusterParameters(ctx workflow.Context, input *neptune.DescribeDBClusterParametersInput) (*neptune.DescribeDBClusterParametersOutput, error) {
	var output neptune.DescribeDBClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeDBClusterParametersAsync(ctx workflow.Context, input *neptune.DescribeDBClusterParametersInput) *NeptuneDescribeDBClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBClusterParameters", input)
	return &NeptuneDescribeDBClusterParametersFuture{Future: future}
}

func (a *NeptuneStub) DescribeDBClusterSnapshotAttributes(ctx workflow.Context, input *neptune.DescribeDBClusterSnapshotAttributesInput) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output neptune.DescribeDBClusterSnapshotAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBClusterSnapshotAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeDBClusterSnapshotAttributesAsync(ctx workflow.Context, input *neptune.DescribeDBClusterSnapshotAttributesInput) *NeptuneDescribeDBClusterSnapshotAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBClusterSnapshotAttributes", input)
	return &NeptuneDescribeDBClusterSnapshotAttributesFuture{Future: future}
}

func (a *NeptuneStub) DescribeDBClusterSnapshots(ctx workflow.Context, input *neptune.DescribeDBClusterSnapshotsInput) (*neptune.DescribeDBClusterSnapshotsOutput, error) {
	var output neptune.DescribeDBClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeDBClusterSnapshotsAsync(ctx workflow.Context, input *neptune.DescribeDBClusterSnapshotsInput) *NeptuneDescribeDBClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBClusterSnapshots", input)
	return &NeptuneDescribeDBClusterSnapshotsFuture{Future: future}
}

func (a *NeptuneStub) DescribeDBClusters(ctx workflow.Context, input *neptune.DescribeDBClustersInput) (*neptune.DescribeDBClustersOutput, error) {
	var output neptune.DescribeDBClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeDBClustersAsync(ctx workflow.Context, input *neptune.DescribeDBClustersInput) *NeptuneDescribeDBClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBClusters", input)
	return &NeptuneDescribeDBClustersFuture{Future: future}
}

func (a *NeptuneStub) DescribeDBEngineVersions(ctx workflow.Context, input *neptune.DescribeDBEngineVersionsInput) (*neptune.DescribeDBEngineVersionsOutput, error) {
	var output neptune.DescribeDBEngineVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBEngineVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeDBEngineVersionsAsync(ctx workflow.Context, input *neptune.DescribeDBEngineVersionsInput) *NeptuneDescribeDBEngineVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBEngineVersions", input)
	return &NeptuneDescribeDBEngineVersionsFuture{Future: future}
}

func (a *NeptuneStub) DescribeDBInstances(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) (*neptune.DescribeDBInstancesOutput, error) {
	var output neptune.DescribeDBInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeDBInstancesAsync(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) *NeptuneDescribeDBInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBInstances", input)
	return &NeptuneDescribeDBInstancesFuture{Future: future}
}

func (a *NeptuneStub) DescribeDBParameterGroups(ctx workflow.Context, input *neptune.DescribeDBParameterGroupsInput) (*neptune.DescribeDBParameterGroupsOutput, error) {
	var output neptune.DescribeDBParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeDBParameterGroupsAsync(ctx workflow.Context, input *neptune.DescribeDBParameterGroupsInput) *NeptuneDescribeDBParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBParameterGroups", input)
	return &NeptuneDescribeDBParameterGroupsFuture{Future: future}
}

func (a *NeptuneStub) DescribeDBParameters(ctx workflow.Context, input *neptune.DescribeDBParametersInput) (*neptune.DescribeDBParametersOutput, error) {
	var output neptune.DescribeDBParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeDBParametersAsync(ctx workflow.Context, input *neptune.DescribeDBParametersInput) *NeptuneDescribeDBParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBParameters", input)
	return &NeptuneDescribeDBParametersFuture{Future: future}
}

func (a *NeptuneStub) DescribeDBSubnetGroups(ctx workflow.Context, input *neptune.DescribeDBSubnetGroupsInput) (*neptune.DescribeDBSubnetGroupsOutput, error) {
	var output neptune.DescribeDBSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeDBSubnetGroupsAsync(ctx workflow.Context, input *neptune.DescribeDBSubnetGroupsInput) *NeptuneDescribeDBSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeDBSubnetGroups", input)
	return &NeptuneDescribeDBSubnetGroupsFuture{Future: future}
}

func (a *NeptuneStub) DescribeEngineDefaultClusterParameters(ctx workflow.Context, input *neptune.DescribeEngineDefaultClusterParametersInput) (*neptune.DescribeEngineDefaultClusterParametersOutput, error) {
	var output neptune.DescribeEngineDefaultClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeEngineDefaultClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeEngineDefaultClusterParametersAsync(ctx workflow.Context, input *neptune.DescribeEngineDefaultClusterParametersInput) *NeptuneDescribeEngineDefaultClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeEngineDefaultClusterParameters", input)
	return &NeptuneDescribeEngineDefaultClusterParametersFuture{Future: future}
}

func (a *NeptuneStub) DescribeEngineDefaultParameters(ctx workflow.Context, input *neptune.DescribeEngineDefaultParametersInput) (*neptune.DescribeEngineDefaultParametersOutput, error) {
	var output neptune.DescribeEngineDefaultParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeEngineDefaultParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeEngineDefaultParametersAsync(ctx workflow.Context, input *neptune.DescribeEngineDefaultParametersInput) *NeptuneDescribeEngineDefaultParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeEngineDefaultParameters", input)
	return &NeptuneDescribeEngineDefaultParametersFuture{Future: future}
}

func (a *NeptuneStub) DescribeEventCategories(ctx workflow.Context, input *neptune.DescribeEventCategoriesInput) (*neptune.DescribeEventCategoriesOutput, error) {
	var output neptune.DescribeEventCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeEventCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeEventCategoriesAsync(ctx workflow.Context, input *neptune.DescribeEventCategoriesInput) *NeptuneDescribeEventCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeEventCategories", input)
	return &NeptuneDescribeEventCategoriesFuture{Future: future}
}

func (a *NeptuneStub) DescribeEventSubscriptions(ctx workflow.Context, input *neptune.DescribeEventSubscriptionsInput) (*neptune.DescribeEventSubscriptionsOutput, error) {
	var output neptune.DescribeEventSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeEventSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeEventSubscriptionsAsync(ctx workflow.Context, input *neptune.DescribeEventSubscriptionsInput) *NeptuneDescribeEventSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeEventSubscriptions", input)
	return &NeptuneDescribeEventSubscriptionsFuture{Future: future}
}

func (a *NeptuneStub) DescribeEvents(ctx workflow.Context, input *neptune.DescribeEventsInput) (*neptune.DescribeEventsOutput, error) {
	var output neptune.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeEventsAsync(ctx workflow.Context, input *neptune.DescribeEventsInput) *NeptuneDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeEvents", input)
	return &NeptuneDescribeEventsFuture{Future: future}
}

func (a *NeptuneStub) DescribeOrderableDBInstanceOptions(ctx workflow.Context, input *neptune.DescribeOrderableDBInstanceOptionsInput) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output neptune.DescribeOrderableDBInstanceOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeOrderableDBInstanceOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeOrderableDBInstanceOptionsAsync(ctx workflow.Context, input *neptune.DescribeOrderableDBInstanceOptionsInput) *NeptuneDescribeOrderableDBInstanceOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeOrderableDBInstanceOptions", input)
	return &NeptuneDescribeOrderableDBInstanceOptionsFuture{Future: future}
}

func (a *NeptuneStub) DescribePendingMaintenanceActions(ctx workflow.Context, input *neptune.DescribePendingMaintenanceActionsInput) (*neptune.DescribePendingMaintenanceActionsOutput, error) {
	var output neptune.DescribePendingMaintenanceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribePendingMaintenanceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *neptune.DescribePendingMaintenanceActionsInput) *NeptuneDescribePendingMaintenanceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribePendingMaintenanceActions", input)
	return &NeptuneDescribePendingMaintenanceActionsFuture{Future: future}
}

func (a *NeptuneStub) DescribeValidDBInstanceModifications(ctx workflow.Context, input *neptune.DescribeValidDBInstanceModificationsInput) (*neptune.DescribeValidDBInstanceModificationsOutput, error) {
	var output neptune.DescribeValidDBInstanceModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeValidDBInstanceModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) DescribeValidDBInstanceModificationsAsync(ctx workflow.Context, input *neptune.DescribeValidDBInstanceModificationsInput) *NeptuneDescribeValidDBInstanceModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.DescribeValidDBInstanceModifications", input)
	return &NeptuneDescribeValidDBInstanceModificationsFuture{Future: future}
}

func (a *NeptuneStub) FailoverDBCluster(ctx workflow.Context, input *neptune.FailoverDBClusterInput) (*neptune.FailoverDBClusterOutput, error) {
	var output neptune.FailoverDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.FailoverDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) FailoverDBClusterAsync(ctx workflow.Context, input *neptune.FailoverDBClusterInput) *NeptuneFailoverDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.FailoverDBCluster", input)
	return &NeptuneFailoverDBClusterFuture{Future: future}
}

func (a *NeptuneStub) ListTagsForResource(ctx workflow.Context, input *neptune.ListTagsForResourceInput) (*neptune.ListTagsForResourceOutput, error) {
	var output neptune.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) ListTagsForResourceAsync(ctx workflow.Context, input *neptune.ListTagsForResourceInput) *NeptuneListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.ListTagsForResource", input)
	return &NeptuneListTagsForResourceFuture{Future: future}
}

func (a *NeptuneStub) ModifyDBCluster(ctx workflow.Context, input *neptune.ModifyDBClusterInput) (*neptune.ModifyDBClusterOutput, error) {
	var output neptune.ModifyDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) ModifyDBClusterAsync(ctx workflow.Context, input *neptune.ModifyDBClusterInput) *NeptuneModifyDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyDBCluster", input)
	return &NeptuneModifyDBClusterFuture{Future: future}
}

func (a *NeptuneStub) ModifyDBClusterParameterGroup(ctx workflow.Context, input *neptune.ModifyDBClusterParameterGroupInput) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	var output neptune.ResetDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) ModifyDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.ModifyDBClusterParameterGroupInput) *NeptuneModifyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyDBClusterParameterGroup", input)
	return &NeptuneModifyDBClusterParameterGroupFuture{Future: future}
}

func (a *NeptuneStub) ModifyDBClusterSnapshotAttribute(ctx workflow.Context, input *neptune.ModifyDBClusterSnapshotAttributeInput) (*neptune.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output neptune.ModifyDBClusterSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyDBClusterSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) ModifyDBClusterSnapshotAttributeAsync(ctx workflow.Context, input *neptune.ModifyDBClusterSnapshotAttributeInput) *NeptuneModifyDBClusterSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyDBClusterSnapshotAttribute", input)
	return &NeptuneModifyDBClusterSnapshotAttributeFuture{Future: future}
}

func (a *NeptuneStub) ModifyDBInstance(ctx workflow.Context, input *neptune.ModifyDBInstanceInput) (*neptune.ModifyDBInstanceOutput, error) {
	var output neptune.ModifyDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) ModifyDBInstanceAsync(ctx workflow.Context, input *neptune.ModifyDBInstanceInput) *NeptuneModifyDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyDBInstance", input)
	return &NeptuneModifyDBInstanceFuture{Future: future}
}

func (a *NeptuneStub) ModifyDBParameterGroup(ctx workflow.Context, input *neptune.ModifyDBParameterGroupInput) (*neptune.ResetDBParameterGroupOutput, error) {
	var output neptune.ResetDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) ModifyDBParameterGroupAsync(ctx workflow.Context, input *neptune.ModifyDBParameterGroupInput) *NeptuneModifyDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyDBParameterGroup", input)
	return &NeptuneModifyDBParameterGroupFuture{Future: future}
}

func (a *NeptuneStub) ModifyDBSubnetGroup(ctx workflow.Context, input *neptune.ModifyDBSubnetGroupInput) (*neptune.ModifyDBSubnetGroupOutput, error) {
	var output neptune.ModifyDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) ModifyDBSubnetGroupAsync(ctx workflow.Context, input *neptune.ModifyDBSubnetGroupInput) *NeptuneModifyDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyDBSubnetGroup", input)
	return &NeptuneModifyDBSubnetGroupFuture{Future: future}
}

func (a *NeptuneStub) ModifyEventSubscription(ctx workflow.Context, input *neptune.ModifyEventSubscriptionInput) (*neptune.ModifyEventSubscriptionOutput, error) {
	var output neptune.ModifyEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) ModifyEventSubscriptionAsync(ctx workflow.Context, input *neptune.ModifyEventSubscriptionInput) *NeptuneModifyEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.ModifyEventSubscription", input)
	return &NeptuneModifyEventSubscriptionFuture{Future: future}
}

func (a *NeptuneStub) PromoteReadReplicaDBCluster(ctx workflow.Context, input *neptune.PromoteReadReplicaDBClusterInput) (*neptune.PromoteReadReplicaDBClusterOutput, error) {
	var output neptune.PromoteReadReplicaDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.PromoteReadReplicaDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) PromoteReadReplicaDBClusterAsync(ctx workflow.Context, input *neptune.PromoteReadReplicaDBClusterInput) *NeptunePromoteReadReplicaDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.PromoteReadReplicaDBCluster", input)
	return &NeptunePromoteReadReplicaDBClusterFuture{Future: future}
}

func (a *NeptuneStub) RebootDBInstance(ctx workflow.Context, input *neptune.RebootDBInstanceInput) (*neptune.RebootDBInstanceOutput, error) {
	var output neptune.RebootDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.RebootDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) RebootDBInstanceAsync(ctx workflow.Context, input *neptune.RebootDBInstanceInput) *NeptuneRebootDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.RebootDBInstance", input)
	return &NeptuneRebootDBInstanceFuture{Future: future}
}

func (a *NeptuneStub) RemoveRoleFromDBCluster(ctx workflow.Context, input *neptune.RemoveRoleFromDBClusterInput) (*neptune.RemoveRoleFromDBClusterOutput, error) {
	var output neptune.RemoveRoleFromDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.RemoveRoleFromDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) RemoveRoleFromDBClusterAsync(ctx workflow.Context, input *neptune.RemoveRoleFromDBClusterInput) *NeptuneRemoveRoleFromDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.RemoveRoleFromDBCluster", input)
	return &NeptuneRemoveRoleFromDBClusterFuture{Future: future}
}

func (a *NeptuneStub) RemoveSourceIdentifierFromSubscription(ctx workflow.Context, input *neptune.RemoveSourceIdentifierFromSubscriptionInput) (*neptune.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	var output neptune.RemoveSourceIdentifierFromSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.RemoveSourceIdentifierFromSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) RemoveSourceIdentifierFromSubscriptionAsync(ctx workflow.Context, input *neptune.RemoveSourceIdentifierFromSubscriptionInput) *NeptuneRemoveSourceIdentifierFromSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.RemoveSourceIdentifierFromSubscription", input)
	return &NeptuneRemoveSourceIdentifierFromSubscriptionFuture{Future: future}
}

func (a *NeptuneStub) RemoveTagsFromResource(ctx workflow.Context, input *neptune.RemoveTagsFromResourceInput) (*neptune.RemoveTagsFromResourceOutput, error) {
	var output neptune.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *neptune.RemoveTagsFromResourceInput) *NeptuneRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.RemoveTagsFromResource", input)
	return &NeptuneRemoveTagsFromResourceFuture{Future: future}
}

func (a *NeptuneStub) ResetDBClusterParameterGroup(ctx workflow.Context, input *neptune.ResetDBClusterParameterGroupInput) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	var output neptune.ResetDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.ResetDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) ResetDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.ResetDBClusterParameterGroupInput) *NeptuneResetDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.ResetDBClusterParameterGroup", input)
	return &NeptuneResetDBClusterParameterGroupFuture{Future: future}
}

func (a *NeptuneStub) ResetDBParameterGroup(ctx workflow.Context, input *neptune.ResetDBParameterGroupInput) (*neptune.ResetDBParameterGroupOutput, error) {
	var output neptune.ResetDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.ResetDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) ResetDBParameterGroupAsync(ctx workflow.Context, input *neptune.ResetDBParameterGroupInput) *NeptuneResetDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.ResetDBParameterGroup", input)
	return &NeptuneResetDBParameterGroupFuture{Future: future}
}

func (a *NeptuneStub) RestoreDBClusterFromSnapshot(ctx workflow.Context, input *neptune.RestoreDBClusterFromSnapshotInput) (*neptune.RestoreDBClusterFromSnapshotOutput, error) {
	var output neptune.RestoreDBClusterFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.RestoreDBClusterFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) RestoreDBClusterFromSnapshotAsync(ctx workflow.Context, input *neptune.RestoreDBClusterFromSnapshotInput) *NeptuneRestoreDBClusterFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.RestoreDBClusterFromSnapshot", input)
	return &NeptuneRestoreDBClusterFromSnapshotFuture{Future: future}
}

func (a *NeptuneStub) RestoreDBClusterToPointInTime(ctx workflow.Context, input *neptune.RestoreDBClusterToPointInTimeInput) (*neptune.RestoreDBClusterToPointInTimeOutput, error) {
	var output neptune.RestoreDBClusterToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.RestoreDBClusterToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) RestoreDBClusterToPointInTimeAsync(ctx workflow.Context, input *neptune.RestoreDBClusterToPointInTimeInput) *NeptuneRestoreDBClusterToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.RestoreDBClusterToPointInTime", input)
	return &NeptuneRestoreDBClusterToPointInTimeFuture{Future: future}
}

func (a *NeptuneStub) StartDBCluster(ctx workflow.Context, input *neptune.StartDBClusterInput) (*neptune.StartDBClusterOutput, error) {
	var output neptune.StartDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.StartDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) StartDBClusterAsync(ctx workflow.Context, input *neptune.StartDBClusterInput) *NeptuneStartDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.StartDBCluster", input)
	return &NeptuneStartDBClusterFuture{Future: future}
}

func (a *NeptuneStub) StopDBCluster(ctx workflow.Context, input *neptune.StopDBClusterInput) (*neptune.StopDBClusterOutput, error) {
	var output neptune.StopDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.neptune.StopDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *NeptuneStub) StopDBClusterAsync(ctx workflow.Context, input *neptune.StopDBClusterInput) *NeptuneStopDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.neptune.StopDBCluster", input)
	return &NeptuneStopDBClusterFuture{Future: future}
}

func (a *NeptuneStub) WaitUntilDBInstanceAvailable(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.neptune.WaitUntilDBInstanceAvailable", input).Get(ctx, nil)
}

func (a *NeptuneStub) WaitUntilDBInstanceAvailableAsync(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.neptune.WaitUntilDBInstanceAvailable", input)
}

func (a *NeptuneStub) WaitUntilDBInstanceDeleted(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.neptune.WaitUntilDBInstanceDeleted", input).Get(ctx, nil)
}

func (a *NeptuneStub) WaitUntilDBInstanceDeletedAsync(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.neptune.WaitUntilDBInstanceDeleted", input)
}
