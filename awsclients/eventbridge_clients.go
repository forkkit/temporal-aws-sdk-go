// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/eventbridge"
	"go.temporal.io/sdk/workflow"
)

type EventBridgeClient interface {
	ActivateEventSource(ctx workflow.Context, input *eventbridge.ActivateEventSourceInput) (*eventbridge.ActivateEventSourceOutput, error)
	ActivateEventSourceAsync(ctx workflow.Context, input *eventbridge.ActivateEventSourceInput) *EventBridgeActivateEventSourceFuture

	CreateEventBus(ctx workflow.Context, input *eventbridge.CreateEventBusInput) (*eventbridge.CreateEventBusOutput, error)
	CreateEventBusAsync(ctx workflow.Context, input *eventbridge.CreateEventBusInput) *EventBridgeCreateEventBusFuture

	CreatePartnerEventSource(ctx workflow.Context, input *eventbridge.CreatePartnerEventSourceInput) (*eventbridge.CreatePartnerEventSourceOutput, error)
	CreatePartnerEventSourceAsync(ctx workflow.Context, input *eventbridge.CreatePartnerEventSourceInput) *EventBridgeCreatePartnerEventSourceFuture

	DeactivateEventSource(ctx workflow.Context, input *eventbridge.DeactivateEventSourceInput) (*eventbridge.DeactivateEventSourceOutput, error)
	DeactivateEventSourceAsync(ctx workflow.Context, input *eventbridge.DeactivateEventSourceInput) *EventBridgeDeactivateEventSourceFuture

	DeleteEventBus(ctx workflow.Context, input *eventbridge.DeleteEventBusInput) (*eventbridge.DeleteEventBusOutput, error)
	DeleteEventBusAsync(ctx workflow.Context, input *eventbridge.DeleteEventBusInput) *EventBridgeDeleteEventBusFuture

	DeletePartnerEventSource(ctx workflow.Context, input *eventbridge.DeletePartnerEventSourceInput) (*eventbridge.DeletePartnerEventSourceOutput, error)
	DeletePartnerEventSourceAsync(ctx workflow.Context, input *eventbridge.DeletePartnerEventSourceInput) *EventBridgeDeletePartnerEventSourceFuture

	DeleteRule(ctx workflow.Context, input *eventbridge.DeleteRuleInput) (*eventbridge.DeleteRuleOutput, error)
	DeleteRuleAsync(ctx workflow.Context, input *eventbridge.DeleteRuleInput) *EventBridgeDeleteRuleFuture

	DescribeEventBus(ctx workflow.Context, input *eventbridge.DescribeEventBusInput) (*eventbridge.DescribeEventBusOutput, error)
	DescribeEventBusAsync(ctx workflow.Context, input *eventbridge.DescribeEventBusInput) *EventBridgeDescribeEventBusFuture

	DescribeEventSource(ctx workflow.Context, input *eventbridge.DescribeEventSourceInput) (*eventbridge.DescribeEventSourceOutput, error)
	DescribeEventSourceAsync(ctx workflow.Context, input *eventbridge.DescribeEventSourceInput) *EventBridgeDescribeEventSourceFuture

	DescribePartnerEventSource(ctx workflow.Context, input *eventbridge.DescribePartnerEventSourceInput) (*eventbridge.DescribePartnerEventSourceOutput, error)
	DescribePartnerEventSourceAsync(ctx workflow.Context, input *eventbridge.DescribePartnerEventSourceInput) *EventBridgeDescribePartnerEventSourceFuture

	DescribeRule(ctx workflow.Context, input *eventbridge.DescribeRuleInput) (*eventbridge.DescribeRuleOutput, error)
	DescribeRuleAsync(ctx workflow.Context, input *eventbridge.DescribeRuleInput) *EventBridgeDescribeRuleFuture

	DisableRule(ctx workflow.Context, input *eventbridge.DisableRuleInput) (*eventbridge.DisableRuleOutput, error)
	DisableRuleAsync(ctx workflow.Context, input *eventbridge.DisableRuleInput) *EventBridgeDisableRuleFuture

	EnableRule(ctx workflow.Context, input *eventbridge.EnableRuleInput) (*eventbridge.EnableRuleOutput, error)
	EnableRuleAsync(ctx workflow.Context, input *eventbridge.EnableRuleInput) *EventBridgeEnableRuleFuture

	ListEventBuses(ctx workflow.Context, input *eventbridge.ListEventBusesInput) (*eventbridge.ListEventBusesOutput, error)
	ListEventBusesAsync(ctx workflow.Context, input *eventbridge.ListEventBusesInput) *EventBridgeListEventBusesFuture

	ListEventSources(ctx workflow.Context, input *eventbridge.ListEventSourcesInput) (*eventbridge.ListEventSourcesOutput, error)
	ListEventSourcesAsync(ctx workflow.Context, input *eventbridge.ListEventSourcesInput) *EventBridgeListEventSourcesFuture

	ListPartnerEventSourceAccounts(ctx workflow.Context, input *eventbridge.ListPartnerEventSourceAccountsInput) (*eventbridge.ListPartnerEventSourceAccountsOutput, error)
	ListPartnerEventSourceAccountsAsync(ctx workflow.Context, input *eventbridge.ListPartnerEventSourceAccountsInput) *EventBridgeListPartnerEventSourceAccountsFuture

	ListPartnerEventSources(ctx workflow.Context, input *eventbridge.ListPartnerEventSourcesInput) (*eventbridge.ListPartnerEventSourcesOutput, error)
	ListPartnerEventSourcesAsync(ctx workflow.Context, input *eventbridge.ListPartnerEventSourcesInput) *EventBridgeListPartnerEventSourcesFuture

	ListRuleNamesByTarget(ctx workflow.Context, input *eventbridge.ListRuleNamesByTargetInput) (*eventbridge.ListRuleNamesByTargetOutput, error)
	ListRuleNamesByTargetAsync(ctx workflow.Context, input *eventbridge.ListRuleNamesByTargetInput) *EventBridgeListRuleNamesByTargetFuture

	ListRules(ctx workflow.Context, input *eventbridge.ListRulesInput) (*eventbridge.ListRulesOutput, error)
	ListRulesAsync(ctx workflow.Context, input *eventbridge.ListRulesInput) *EventBridgeListRulesFuture

	ListTagsForResource(ctx workflow.Context, input *eventbridge.ListTagsForResourceInput) (*eventbridge.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *eventbridge.ListTagsForResourceInput) *EventBridgeListTagsForResourceFuture

	ListTargetsByRule(ctx workflow.Context, input *eventbridge.ListTargetsByRuleInput) (*eventbridge.ListTargetsByRuleOutput, error)
	ListTargetsByRuleAsync(ctx workflow.Context, input *eventbridge.ListTargetsByRuleInput) *EventBridgeListTargetsByRuleFuture

	PutEvents(ctx workflow.Context, input *eventbridge.PutEventsInput) (*eventbridge.PutEventsOutput, error)
	PutEventsAsync(ctx workflow.Context, input *eventbridge.PutEventsInput) *EventBridgePutEventsFuture

	PutPartnerEvents(ctx workflow.Context, input *eventbridge.PutPartnerEventsInput) (*eventbridge.PutPartnerEventsOutput, error)
	PutPartnerEventsAsync(ctx workflow.Context, input *eventbridge.PutPartnerEventsInput) *EventBridgePutPartnerEventsFuture

	PutPermission(ctx workflow.Context, input *eventbridge.PutPermissionInput) (*eventbridge.PutPermissionOutput, error)
	PutPermissionAsync(ctx workflow.Context, input *eventbridge.PutPermissionInput) *EventBridgePutPermissionFuture

	PutRule(ctx workflow.Context, input *eventbridge.PutRuleInput) (*eventbridge.PutRuleOutput, error)
	PutRuleAsync(ctx workflow.Context, input *eventbridge.PutRuleInput) *EventBridgePutRuleFuture

	PutTargets(ctx workflow.Context, input *eventbridge.PutTargetsInput) (*eventbridge.PutTargetsOutput, error)
	PutTargetsAsync(ctx workflow.Context, input *eventbridge.PutTargetsInput) *EventBridgePutTargetsFuture

	RemovePermission(ctx workflow.Context, input *eventbridge.RemovePermissionInput) (*eventbridge.RemovePermissionOutput, error)
	RemovePermissionAsync(ctx workflow.Context, input *eventbridge.RemovePermissionInput) *EventBridgeRemovePermissionFuture

	RemoveTargets(ctx workflow.Context, input *eventbridge.RemoveTargetsInput) (*eventbridge.RemoveTargetsOutput, error)
	RemoveTargetsAsync(ctx workflow.Context, input *eventbridge.RemoveTargetsInput) *EventBridgeRemoveTargetsFuture

	TagResource(ctx workflow.Context, input *eventbridge.TagResourceInput) (*eventbridge.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *eventbridge.TagResourceInput) *EventBridgeTagResourceFuture

	TestEventPattern(ctx workflow.Context, input *eventbridge.TestEventPatternInput) (*eventbridge.TestEventPatternOutput, error)
	TestEventPatternAsync(ctx workflow.Context, input *eventbridge.TestEventPatternInput) *EventBridgeTestEventPatternFuture

	UntagResource(ctx workflow.Context, input *eventbridge.UntagResourceInput) (*eventbridge.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *eventbridge.UntagResourceInput) *EventBridgeUntagResourceFuture
}

type EventBridgeStub struct{}

func NewEventBridgeStub() EventBridgeClient {
	return &EventBridgeStub{}
}

type EventBridgeActivateEventSourceFuture struct {
	Future workflow.Future
}

func (r *EventBridgeActivateEventSourceFuture) Get(ctx workflow.Context) (*eventbridge.ActivateEventSourceOutput, error) {
	var output eventbridge.ActivateEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeCreateEventBusFuture struct {
	Future workflow.Future
}

func (r *EventBridgeCreateEventBusFuture) Get(ctx workflow.Context) (*eventbridge.CreateEventBusOutput, error) {
	var output eventbridge.CreateEventBusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeCreatePartnerEventSourceFuture struct {
	Future workflow.Future
}

func (r *EventBridgeCreatePartnerEventSourceFuture) Get(ctx workflow.Context) (*eventbridge.CreatePartnerEventSourceOutput, error) {
	var output eventbridge.CreatePartnerEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeDeactivateEventSourceFuture struct {
	Future workflow.Future
}

func (r *EventBridgeDeactivateEventSourceFuture) Get(ctx workflow.Context) (*eventbridge.DeactivateEventSourceOutput, error) {
	var output eventbridge.DeactivateEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeDeleteEventBusFuture struct {
	Future workflow.Future
}

func (r *EventBridgeDeleteEventBusFuture) Get(ctx workflow.Context) (*eventbridge.DeleteEventBusOutput, error) {
	var output eventbridge.DeleteEventBusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeDeletePartnerEventSourceFuture struct {
	Future workflow.Future
}

func (r *EventBridgeDeletePartnerEventSourceFuture) Get(ctx workflow.Context) (*eventbridge.DeletePartnerEventSourceOutput, error) {
	var output eventbridge.DeletePartnerEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeDeleteRuleFuture struct {
	Future workflow.Future
}

func (r *EventBridgeDeleteRuleFuture) Get(ctx workflow.Context) (*eventbridge.DeleteRuleOutput, error) {
	var output eventbridge.DeleteRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeDescribeEventBusFuture struct {
	Future workflow.Future
}

func (r *EventBridgeDescribeEventBusFuture) Get(ctx workflow.Context) (*eventbridge.DescribeEventBusOutput, error) {
	var output eventbridge.DescribeEventBusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeDescribeEventSourceFuture struct {
	Future workflow.Future
}

func (r *EventBridgeDescribeEventSourceFuture) Get(ctx workflow.Context) (*eventbridge.DescribeEventSourceOutput, error) {
	var output eventbridge.DescribeEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeDescribePartnerEventSourceFuture struct {
	Future workflow.Future
}

func (r *EventBridgeDescribePartnerEventSourceFuture) Get(ctx workflow.Context) (*eventbridge.DescribePartnerEventSourceOutput, error) {
	var output eventbridge.DescribePartnerEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeDescribeRuleFuture struct {
	Future workflow.Future
}

func (r *EventBridgeDescribeRuleFuture) Get(ctx workflow.Context) (*eventbridge.DescribeRuleOutput, error) {
	var output eventbridge.DescribeRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeDisableRuleFuture struct {
	Future workflow.Future
}

func (r *EventBridgeDisableRuleFuture) Get(ctx workflow.Context) (*eventbridge.DisableRuleOutput, error) {
	var output eventbridge.DisableRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeEnableRuleFuture struct {
	Future workflow.Future
}

func (r *EventBridgeEnableRuleFuture) Get(ctx workflow.Context) (*eventbridge.EnableRuleOutput, error) {
	var output eventbridge.EnableRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeListEventBusesFuture struct {
	Future workflow.Future
}

func (r *EventBridgeListEventBusesFuture) Get(ctx workflow.Context) (*eventbridge.ListEventBusesOutput, error) {
	var output eventbridge.ListEventBusesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeListEventSourcesFuture struct {
	Future workflow.Future
}

func (r *EventBridgeListEventSourcesFuture) Get(ctx workflow.Context) (*eventbridge.ListEventSourcesOutput, error) {
	var output eventbridge.ListEventSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeListPartnerEventSourceAccountsFuture struct {
	Future workflow.Future
}

func (r *EventBridgeListPartnerEventSourceAccountsFuture) Get(ctx workflow.Context) (*eventbridge.ListPartnerEventSourceAccountsOutput, error) {
	var output eventbridge.ListPartnerEventSourceAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeListPartnerEventSourcesFuture struct {
	Future workflow.Future
}

func (r *EventBridgeListPartnerEventSourcesFuture) Get(ctx workflow.Context) (*eventbridge.ListPartnerEventSourcesOutput, error) {
	var output eventbridge.ListPartnerEventSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeListRuleNamesByTargetFuture struct {
	Future workflow.Future
}

func (r *EventBridgeListRuleNamesByTargetFuture) Get(ctx workflow.Context) (*eventbridge.ListRuleNamesByTargetOutput, error) {
	var output eventbridge.ListRuleNamesByTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeListRulesFuture struct {
	Future workflow.Future
}

func (r *EventBridgeListRulesFuture) Get(ctx workflow.Context) (*eventbridge.ListRulesOutput, error) {
	var output eventbridge.ListRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *EventBridgeListTagsForResourceFuture) Get(ctx workflow.Context) (*eventbridge.ListTagsForResourceOutput, error) {
	var output eventbridge.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeListTargetsByRuleFuture struct {
	Future workflow.Future
}

func (r *EventBridgeListTargetsByRuleFuture) Get(ctx workflow.Context) (*eventbridge.ListTargetsByRuleOutput, error) {
	var output eventbridge.ListTargetsByRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgePutEventsFuture struct {
	Future workflow.Future
}

func (r *EventBridgePutEventsFuture) Get(ctx workflow.Context) (*eventbridge.PutEventsOutput, error) {
	var output eventbridge.PutEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgePutPartnerEventsFuture struct {
	Future workflow.Future
}

func (r *EventBridgePutPartnerEventsFuture) Get(ctx workflow.Context) (*eventbridge.PutPartnerEventsOutput, error) {
	var output eventbridge.PutPartnerEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgePutPermissionFuture struct {
	Future workflow.Future
}

func (r *EventBridgePutPermissionFuture) Get(ctx workflow.Context) (*eventbridge.PutPermissionOutput, error) {
	var output eventbridge.PutPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgePutRuleFuture struct {
	Future workflow.Future
}

func (r *EventBridgePutRuleFuture) Get(ctx workflow.Context) (*eventbridge.PutRuleOutput, error) {
	var output eventbridge.PutRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgePutTargetsFuture struct {
	Future workflow.Future
}

func (r *EventBridgePutTargetsFuture) Get(ctx workflow.Context) (*eventbridge.PutTargetsOutput, error) {
	var output eventbridge.PutTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeRemovePermissionFuture struct {
	Future workflow.Future
}

func (r *EventBridgeRemovePermissionFuture) Get(ctx workflow.Context) (*eventbridge.RemovePermissionOutput, error) {
	var output eventbridge.RemovePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeRemoveTargetsFuture struct {
	Future workflow.Future
}

func (r *EventBridgeRemoveTargetsFuture) Get(ctx workflow.Context) (*eventbridge.RemoveTargetsOutput, error) {
	var output eventbridge.RemoveTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeTagResourceFuture struct {
	Future workflow.Future
}

func (r *EventBridgeTagResourceFuture) Get(ctx workflow.Context) (*eventbridge.TagResourceOutput, error) {
	var output eventbridge.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeTestEventPatternFuture struct {
	Future workflow.Future
}

func (r *EventBridgeTestEventPatternFuture) Get(ctx workflow.Context) (*eventbridge.TestEventPatternOutput, error) {
	var output eventbridge.TestEventPatternOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventBridgeUntagResourceFuture struct {
	Future workflow.Future
}

func (r *EventBridgeUntagResourceFuture) Get(ctx workflow.Context) (*eventbridge.UntagResourceOutput, error) {
	var output eventbridge.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ActivateEventSource(ctx workflow.Context, input *eventbridge.ActivateEventSourceInput) (*eventbridge.ActivateEventSourceOutput, error) {
	var output eventbridge.ActivateEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ActivateEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ActivateEventSourceAsync(ctx workflow.Context, input *eventbridge.ActivateEventSourceInput) *EventBridgeActivateEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ActivateEventSource", input)
	return &EventBridgeActivateEventSourceFuture{Future: future}
}

func (a *EventBridgeStub) CreateEventBus(ctx workflow.Context, input *eventbridge.CreateEventBusInput) (*eventbridge.CreateEventBusOutput, error) {
	var output eventbridge.CreateEventBusOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.CreateEventBus", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) CreateEventBusAsync(ctx workflow.Context, input *eventbridge.CreateEventBusInput) *EventBridgeCreateEventBusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.CreateEventBus", input)
	return &EventBridgeCreateEventBusFuture{Future: future}
}

func (a *EventBridgeStub) CreatePartnerEventSource(ctx workflow.Context, input *eventbridge.CreatePartnerEventSourceInput) (*eventbridge.CreatePartnerEventSourceOutput, error) {
	var output eventbridge.CreatePartnerEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.CreatePartnerEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) CreatePartnerEventSourceAsync(ctx workflow.Context, input *eventbridge.CreatePartnerEventSourceInput) *EventBridgeCreatePartnerEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.CreatePartnerEventSource", input)
	return &EventBridgeCreatePartnerEventSourceFuture{Future: future}
}

func (a *EventBridgeStub) DeactivateEventSource(ctx workflow.Context, input *eventbridge.DeactivateEventSourceInput) (*eventbridge.DeactivateEventSourceOutput, error) {
	var output eventbridge.DeactivateEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeactivateEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DeactivateEventSourceAsync(ctx workflow.Context, input *eventbridge.DeactivateEventSourceInput) *EventBridgeDeactivateEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeactivateEventSource", input)
	return &EventBridgeDeactivateEventSourceFuture{Future: future}
}

func (a *EventBridgeStub) DeleteEventBus(ctx workflow.Context, input *eventbridge.DeleteEventBusInput) (*eventbridge.DeleteEventBusOutput, error) {
	var output eventbridge.DeleteEventBusOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeleteEventBus", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DeleteEventBusAsync(ctx workflow.Context, input *eventbridge.DeleteEventBusInput) *EventBridgeDeleteEventBusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeleteEventBus", input)
	return &EventBridgeDeleteEventBusFuture{Future: future}
}

func (a *EventBridgeStub) DeletePartnerEventSource(ctx workflow.Context, input *eventbridge.DeletePartnerEventSourceInput) (*eventbridge.DeletePartnerEventSourceOutput, error) {
	var output eventbridge.DeletePartnerEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeletePartnerEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DeletePartnerEventSourceAsync(ctx workflow.Context, input *eventbridge.DeletePartnerEventSourceInput) *EventBridgeDeletePartnerEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeletePartnerEventSource", input)
	return &EventBridgeDeletePartnerEventSourceFuture{Future: future}
}

func (a *EventBridgeStub) DeleteRule(ctx workflow.Context, input *eventbridge.DeleteRuleInput) (*eventbridge.DeleteRuleOutput, error) {
	var output eventbridge.DeleteRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeleteRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DeleteRuleAsync(ctx workflow.Context, input *eventbridge.DeleteRuleInput) *EventBridgeDeleteRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeleteRule", input)
	return &EventBridgeDeleteRuleFuture{Future: future}
}

func (a *EventBridgeStub) DescribeEventBus(ctx workflow.Context, input *eventbridge.DescribeEventBusInput) (*eventbridge.DescribeEventBusOutput, error) {
	var output eventbridge.DescribeEventBusOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribeEventBus", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DescribeEventBusAsync(ctx workflow.Context, input *eventbridge.DescribeEventBusInput) *EventBridgeDescribeEventBusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribeEventBus", input)
	return &EventBridgeDescribeEventBusFuture{Future: future}
}

func (a *EventBridgeStub) DescribeEventSource(ctx workflow.Context, input *eventbridge.DescribeEventSourceInput) (*eventbridge.DescribeEventSourceOutput, error) {
	var output eventbridge.DescribeEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribeEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DescribeEventSourceAsync(ctx workflow.Context, input *eventbridge.DescribeEventSourceInput) *EventBridgeDescribeEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribeEventSource", input)
	return &EventBridgeDescribeEventSourceFuture{Future: future}
}

func (a *EventBridgeStub) DescribePartnerEventSource(ctx workflow.Context, input *eventbridge.DescribePartnerEventSourceInput) (*eventbridge.DescribePartnerEventSourceOutput, error) {
	var output eventbridge.DescribePartnerEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribePartnerEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DescribePartnerEventSourceAsync(ctx workflow.Context, input *eventbridge.DescribePartnerEventSourceInput) *EventBridgeDescribePartnerEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribePartnerEventSource", input)
	return &EventBridgeDescribePartnerEventSourceFuture{Future: future}
}

func (a *EventBridgeStub) DescribeRule(ctx workflow.Context, input *eventbridge.DescribeRuleInput) (*eventbridge.DescribeRuleOutput, error) {
	var output eventbridge.DescribeRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribeRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DescribeRuleAsync(ctx workflow.Context, input *eventbridge.DescribeRuleInput) *EventBridgeDescribeRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribeRule", input)
	return &EventBridgeDescribeRuleFuture{Future: future}
}

func (a *EventBridgeStub) DisableRule(ctx workflow.Context, input *eventbridge.DisableRuleInput) (*eventbridge.DisableRuleOutput, error) {
	var output eventbridge.DisableRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DisableRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DisableRuleAsync(ctx workflow.Context, input *eventbridge.DisableRuleInput) *EventBridgeDisableRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DisableRule", input)
	return &EventBridgeDisableRuleFuture{Future: future}
}

func (a *EventBridgeStub) EnableRule(ctx workflow.Context, input *eventbridge.EnableRuleInput) (*eventbridge.EnableRuleOutput, error) {
	var output eventbridge.EnableRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.EnableRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) EnableRuleAsync(ctx workflow.Context, input *eventbridge.EnableRuleInput) *EventBridgeEnableRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.EnableRule", input)
	return &EventBridgeEnableRuleFuture{Future: future}
}

func (a *EventBridgeStub) ListEventBuses(ctx workflow.Context, input *eventbridge.ListEventBusesInput) (*eventbridge.ListEventBusesOutput, error) {
	var output eventbridge.ListEventBusesOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListEventBuses", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListEventBusesAsync(ctx workflow.Context, input *eventbridge.ListEventBusesInput) *EventBridgeListEventBusesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListEventBuses", input)
	return &EventBridgeListEventBusesFuture{Future: future}
}

func (a *EventBridgeStub) ListEventSources(ctx workflow.Context, input *eventbridge.ListEventSourcesInput) (*eventbridge.ListEventSourcesOutput, error) {
	var output eventbridge.ListEventSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListEventSources", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListEventSourcesAsync(ctx workflow.Context, input *eventbridge.ListEventSourcesInput) *EventBridgeListEventSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListEventSources", input)
	return &EventBridgeListEventSourcesFuture{Future: future}
}

func (a *EventBridgeStub) ListPartnerEventSourceAccounts(ctx workflow.Context, input *eventbridge.ListPartnerEventSourceAccountsInput) (*eventbridge.ListPartnerEventSourceAccountsOutput, error) {
	var output eventbridge.ListPartnerEventSourceAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListPartnerEventSourceAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListPartnerEventSourceAccountsAsync(ctx workflow.Context, input *eventbridge.ListPartnerEventSourceAccountsInput) *EventBridgeListPartnerEventSourceAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListPartnerEventSourceAccounts", input)
	return &EventBridgeListPartnerEventSourceAccountsFuture{Future: future}
}

func (a *EventBridgeStub) ListPartnerEventSources(ctx workflow.Context, input *eventbridge.ListPartnerEventSourcesInput) (*eventbridge.ListPartnerEventSourcesOutput, error) {
	var output eventbridge.ListPartnerEventSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListPartnerEventSources", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListPartnerEventSourcesAsync(ctx workflow.Context, input *eventbridge.ListPartnerEventSourcesInput) *EventBridgeListPartnerEventSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListPartnerEventSources", input)
	return &EventBridgeListPartnerEventSourcesFuture{Future: future}
}

func (a *EventBridgeStub) ListRuleNamesByTarget(ctx workflow.Context, input *eventbridge.ListRuleNamesByTargetInput) (*eventbridge.ListRuleNamesByTargetOutput, error) {
	var output eventbridge.ListRuleNamesByTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListRuleNamesByTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListRuleNamesByTargetAsync(ctx workflow.Context, input *eventbridge.ListRuleNamesByTargetInput) *EventBridgeListRuleNamesByTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListRuleNamesByTarget", input)
	return &EventBridgeListRuleNamesByTargetFuture{Future: future}
}

func (a *EventBridgeStub) ListRules(ctx workflow.Context, input *eventbridge.ListRulesInput) (*eventbridge.ListRulesOutput, error) {
	var output eventbridge.ListRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListRules", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListRulesAsync(ctx workflow.Context, input *eventbridge.ListRulesInput) *EventBridgeListRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListRules", input)
	return &EventBridgeListRulesFuture{Future: future}
}

func (a *EventBridgeStub) ListTagsForResource(ctx workflow.Context, input *eventbridge.ListTagsForResourceInput) (*eventbridge.ListTagsForResourceOutput, error) {
	var output eventbridge.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListTagsForResourceAsync(ctx workflow.Context, input *eventbridge.ListTagsForResourceInput) *EventBridgeListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListTagsForResource", input)
	return &EventBridgeListTagsForResourceFuture{Future: future}
}

func (a *EventBridgeStub) ListTargetsByRule(ctx workflow.Context, input *eventbridge.ListTargetsByRuleInput) (*eventbridge.ListTargetsByRuleOutput, error) {
	var output eventbridge.ListTargetsByRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListTargetsByRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListTargetsByRuleAsync(ctx workflow.Context, input *eventbridge.ListTargetsByRuleInput) *EventBridgeListTargetsByRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListTargetsByRule", input)
	return &EventBridgeListTargetsByRuleFuture{Future: future}
}

func (a *EventBridgeStub) PutEvents(ctx workflow.Context, input *eventbridge.PutEventsInput) (*eventbridge.PutEventsOutput, error) {
	var output eventbridge.PutEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) PutEventsAsync(ctx workflow.Context, input *eventbridge.PutEventsInput) *EventBridgePutEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutEvents", input)
	return &EventBridgePutEventsFuture{Future: future}
}

func (a *EventBridgeStub) PutPartnerEvents(ctx workflow.Context, input *eventbridge.PutPartnerEventsInput) (*eventbridge.PutPartnerEventsOutput, error) {
	var output eventbridge.PutPartnerEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutPartnerEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) PutPartnerEventsAsync(ctx workflow.Context, input *eventbridge.PutPartnerEventsInput) *EventBridgePutPartnerEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutPartnerEvents", input)
	return &EventBridgePutPartnerEventsFuture{Future: future}
}

func (a *EventBridgeStub) PutPermission(ctx workflow.Context, input *eventbridge.PutPermissionInput) (*eventbridge.PutPermissionOutput, error) {
	var output eventbridge.PutPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) PutPermissionAsync(ctx workflow.Context, input *eventbridge.PutPermissionInput) *EventBridgePutPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutPermission", input)
	return &EventBridgePutPermissionFuture{Future: future}
}

func (a *EventBridgeStub) PutRule(ctx workflow.Context, input *eventbridge.PutRuleInput) (*eventbridge.PutRuleOutput, error) {
	var output eventbridge.PutRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) PutRuleAsync(ctx workflow.Context, input *eventbridge.PutRuleInput) *EventBridgePutRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutRule", input)
	return &EventBridgePutRuleFuture{Future: future}
}

func (a *EventBridgeStub) PutTargets(ctx workflow.Context, input *eventbridge.PutTargetsInput) (*eventbridge.PutTargetsOutput, error) {
	var output eventbridge.PutTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) PutTargetsAsync(ctx workflow.Context, input *eventbridge.PutTargetsInput) *EventBridgePutTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutTargets", input)
	return &EventBridgePutTargetsFuture{Future: future}
}

func (a *EventBridgeStub) RemovePermission(ctx workflow.Context, input *eventbridge.RemovePermissionInput) (*eventbridge.RemovePermissionOutput, error) {
	var output eventbridge.RemovePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.RemovePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) RemovePermissionAsync(ctx workflow.Context, input *eventbridge.RemovePermissionInput) *EventBridgeRemovePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.RemovePermission", input)
	return &EventBridgeRemovePermissionFuture{Future: future}
}

func (a *EventBridgeStub) RemoveTargets(ctx workflow.Context, input *eventbridge.RemoveTargetsInput) (*eventbridge.RemoveTargetsOutput, error) {
	var output eventbridge.RemoveTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.RemoveTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) RemoveTargetsAsync(ctx workflow.Context, input *eventbridge.RemoveTargetsInput) *EventBridgeRemoveTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.RemoveTargets", input)
	return &EventBridgeRemoveTargetsFuture{Future: future}
}

func (a *EventBridgeStub) TagResource(ctx workflow.Context, input *eventbridge.TagResourceInput) (*eventbridge.TagResourceOutput, error) {
	var output eventbridge.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) TagResourceAsync(ctx workflow.Context, input *eventbridge.TagResourceInput) *EventBridgeTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.TagResource", input)
	return &EventBridgeTagResourceFuture{Future: future}
}

func (a *EventBridgeStub) TestEventPattern(ctx workflow.Context, input *eventbridge.TestEventPatternInput) (*eventbridge.TestEventPatternOutput, error) {
	var output eventbridge.TestEventPatternOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.TestEventPattern", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) TestEventPatternAsync(ctx workflow.Context, input *eventbridge.TestEventPatternInput) *EventBridgeTestEventPatternFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.TestEventPattern", input)
	return &EventBridgeTestEventPatternFuture{Future: future}
}

func (a *EventBridgeStub) UntagResource(ctx workflow.Context, input *eventbridge.UntagResourceInput) (*eventbridge.UntagResourceOutput, error) {
	var output eventbridge.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) UntagResourceAsync(ctx workflow.Context, input *eventbridge.UntagResourceInput) *EventBridgeUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.UntagResource", input)
	return &EventBridgeUntagResourceFuture{Future: future}
}
