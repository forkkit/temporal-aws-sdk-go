// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/eventbridge"
	"go.temporal.io/sdk/workflow"
)

type EventBridgeClient interface {
	ActivateEventSource(ctx workflow.Context, input *eventbridge.ActivateEventSourceInput) (*eventbridge.ActivateEventSourceOutput, error)
	ActivateEventSourceAsync(ctx workflow.Context, input *eventbridge.ActivateEventSourceInput) *EventbridgeActivateEventSourceFuture

	CreateEventBus(ctx workflow.Context, input *eventbridge.CreateEventBusInput) (*eventbridge.CreateEventBusOutput, error)
	CreateEventBusAsync(ctx workflow.Context, input *eventbridge.CreateEventBusInput) *EventbridgeCreateEventBusFuture

	CreatePartnerEventSource(ctx workflow.Context, input *eventbridge.CreatePartnerEventSourceInput) (*eventbridge.CreatePartnerEventSourceOutput, error)
	CreatePartnerEventSourceAsync(ctx workflow.Context, input *eventbridge.CreatePartnerEventSourceInput) *EventbridgeCreatePartnerEventSourceFuture

	DeactivateEventSource(ctx workflow.Context, input *eventbridge.DeactivateEventSourceInput) (*eventbridge.DeactivateEventSourceOutput, error)
	DeactivateEventSourceAsync(ctx workflow.Context, input *eventbridge.DeactivateEventSourceInput) *EventbridgeDeactivateEventSourceFuture

	DeleteEventBus(ctx workflow.Context, input *eventbridge.DeleteEventBusInput) (*eventbridge.DeleteEventBusOutput, error)
	DeleteEventBusAsync(ctx workflow.Context, input *eventbridge.DeleteEventBusInput) *EventbridgeDeleteEventBusFuture

	DeletePartnerEventSource(ctx workflow.Context, input *eventbridge.DeletePartnerEventSourceInput) (*eventbridge.DeletePartnerEventSourceOutput, error)
	DeletePartnerEventSourceAsync(ctx workflow.Context, input *eventbridge.DeletePartnerEventSourceInput) *EventbridgeDeletePartnerEventSourceFuture

	DeleteRule(ctx workflow.Context, input *eventbridge.DeleteRuleInput) (*eventbridge.DeleteRuleOutput, error)
	DeleteRuleAsync(ctx workflow.Context, input *eventbridge.DeleteRuleInput) *EventbridgeDeleteRuleFuture

	DescribeEventBus(ctx workflow.Context, input *eventbridge.DescribeEventBusInput) (*eventbridge.DescribeEventBusOutput, error)
	DescribeEventBusAsync(ctx workflow.Context, input *eventbridge.DescribeEventBusInput) *EventbridgeDescribeEventBusFuture

	DescribeEventSource(ctx workflow.Context, input *eventbridge.DescribeEventSourceInput) (*eventbridge.DescribeEventSourceOutput, error)
	DescribeEventSourceAsync(ctx workflow.Context, input *eventbridge.DescribeEventSourceInput) *EventbridgeDescribeEventSourceFuture

	DescribePartnerEventSource(ctx workflow.Context, input *eventbridge.DescribePartnerEventSourceInput) (*eventbridge.DescribePartnerEventSourceOutput, error)
	DescribePartnerEventSourceAsync(ctx workflow.Context, input *eventbridge.DescribePartnerEventSourceInput) *EventbridgeDescribePartnerEventSourceFuture

	DescribeRule(ctx workflow.Context, input *eventbridge.DescribeRuleInput) (*eventbridge.DescribeRuleOutput, error)
	DescribeRuleAsync(ctx workflow.Context, input *eventbridge.DescribeRuleInput) *EventbridgeDescribeRuleFuture

	DisableRule(ctx workflow.Context, input *eventbridge.DisableRuleInput) (*eventbridge.DisableRuleOutput, error)
	DisableRuleAsync(ctx workflow.Context, input *eventbridge.DisableRuleInput) *EventbridgeDisableRuleFuture

	EnableRule(ctx workflow.Context, input *eventbridge.EnableRuleInput) (*eventbridge.EnableRuleOutput, error)
	EnableRuleAsync(ctx workflow.Context, input *eventbridge.EnableRuleInput) *EventbridgeEnableRuleFuture

	ListEventBuses(ctx workflow.Context, input *eventbridge.ListEventBusesInput) (*eventbridge.ListEventBusesOutput, error)
	ListEventBusesAsync(ctx workflow.Context, input *eventbridge.ListEventBusesInput) *EventbridgeListEventBusesFuture

	ListEventSources(ctx workflow.Context, input *eventbridge.ListEventSourcesInput) (*eventbridge.ListEventSourcesOutput, error)
	ListEventSourcesAsync(ctx workflow.Context, input *eventbridge.ListEventSourcesInput) *EventbridgeListEventSourcesFuture

	ListPartnerEventSourceAccounts(ctx workflow.Context, input *eventbridge.ListPartnerEventSourceAccountsInput) (*eventbridge.ListPartnerEventSourceAccountsOutput, error)
	ListPartnerEventSourceAccountsAsync(ctx workflow.Context, input *eventbridge.ListPartnerEventSourceAccountsInput) *EventbridgeListPartnerEventSourceAccountsFuture

	ListPartnerEventSources(ctx workflow.Context, input *eventbridge.ListPartnerEventSourcesInput) (*eventbridge.ListPartnerEventSourcesOutput, error)
	ListPartnerEventSourcesAsync(ctx workflow.Context, input *eventbridge.ListPartnerEventSourcesInput) *EventbridgeListPartnerEventSourcesFuture

	ListRuleNamesByTarget(ctx workflow.Context, input *eventbridge.ListRuleNamesByTargetInput) (*eventbridge.ListRuleNamesByTargetOutput, error)
	ListRuleNamesByTargetAsync(ctx workflow.Context, input *eventbridge.ListRuleNamesByTargetInput) *EventbridgeListRuleNamesByTargetFuture

	ListRules(ctx workflow.Context, input *eventbridge.ListRulesInput) (*eventbridge.ListRulesOutput, error)
	ListRulesAsync(ctx workflow.Context, input *eventbridge.ListRulesInput) *EventbridgeListRulesFuture

	ListTagsForResource(ctx workflow.Context, input *eventbridge.ListTagsForResourceInput) (*eventbridge.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *eventbridge.ListTagsForResourceInput) *EventbridgeListTagsForResourceFuture

	ListTargetsByRule(ctx workflow.Context, input *eventbridge.ListTargetsByRuleInput) (*eventbridge.ListTargetsByRuleOutput, error)
	ListTargetsByRuleAsync(ctx workflow.Context, input *eventbridge.ListTargetsByRuleInput) *EventbridgeListTargetsByRuleFuture

	PutEvents(ctx workflow.Context, input *eventbridge.PutEventsInput) (*eventbridge.PutEventsOutput, error)
	PutEventsAsync(ctx workflow.Context, input *eventbridge.PutEventsInput) *EventbridgePutEventsFuture

	PutPartnerEvents(ctx workflow.Context, input *eventbridge.PutPartnerEventsInput) (*eventbridge.PutPartnerEventsOutput, error)
	PutPartnerEventsAsync(ctx workflow.Context, input *eventbridge.PutPartnerEventsInput) *EventbridgePutPartnerEventsFuture

	PutPermission(ctx workflow.Context, input *eventbridge.PutPermissionInput) (*eventbridge.PutPermissionOutput, error)
	PutPermissionAsync(ctx workflow.Context, input *eventbridge.PutPermissionInput) *EventbridgePutPermissionFuture

	PutRule(ctx workflow.Context, input *eventbridge.PutRuleInput) (*eventbridge.PutRuleOutput, error)
	PutRuleAsync(ctx workflow.Context, input *eventbridge.PutRuleInput) *EventbridgePutRuleFuture

	PutTargets(ctx workflow.Context, input *eventbridge.PutTargetsInput) (*eventbridge.PutTargetsOutput, error)
	PutTargetsAsync(ctx workflow.Context, input *eventbridge.PutTargetsInput) *EventbridgePutTargetsFuture

	RemovePermission(ctx workflow.Context, input *eventbridge.RemovePermissionInput) (*eventbridge.RemovePermissionOutput, error)
	RemovePermissionAsync(ctx workflow.Context, input *eventbridge.RemovePermissionInput) *EventbridgeRemovePermissionFuture

	RemoveTargets(ctx workflow.Context, input *eventbridge.RemoveTargetsInput) (*eventbridge.RemoveTargetsOutput, error)
	RemoveTargetsAsync(ctx workflow.Context, input *eventbridge.RemoveTargetsInput) *EventbridgeRemoveTargetsFuture

	TagResource(ctx workflow.Context, input *eventbridge.TagResourceInput) (*eventbridge.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *eventbridge.TagResourceInput) *EventbridgeTagResourceFuture

	TestEventPattern(ctx workflow.Context, input *eventbridge.TestEventPatternInput) (*eventbridge.TestEventPatternOutput, error)
	TestEventPatternAsync(ctx workflow.Context, input *eventbridge.TestEventPatternInput) *EventbridgeTestEventPatternFuture

	UntagResource(ctx workflow.Context, input *eventbridge.UntagResourceInput) (*eventbridge.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *eventbridge.UntagResourceInput) *EventbridgeUntagResourceFuture
}

type EventBridgeStub struct{}

func NewEventBridgeStub() EventBridgeClient {
	return &EventBridgeStub{}
}

type EventbridgeActivateEventSourceFuture struct {
	Future workflow.Future
}

func (r *EventbridgeActivateEventSourceFuture) Get(ctx workflow.Context) (*eventbridge.ActivateEventSourceOutput, error) {
	var output eventbridge.ActivateEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeCreateEventBusFuture struct {
	Future workflow.Future
}

func (r *EventbridgeCreateEventBusFuture) Get(ctx workflow.Context) (*eventbridge.CreateEventBusOutput, error) {
	var output eventbridge.CreateEventBusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeCreatePartnerEventSourceFuture struct {
	Future workflow.Future
}

func (r *EventbridgeCreatePartnerEventSourceFuture) Get(ctx workflow.Context) (*eventbridge.CreatePartnerEventSourceOutput, error) {
	var output eventbridge.CreatePartnerEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeDeactivateEventSourceFuture struct {
	Future workflow.Future
}

func (r *EventbridgeDeactivateEventSourceFuture) Get(ctx workflow.Context) (*eventbridge.DeactivateEventSourceOutput, error) {
	var output eventbridge.DeactivateEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeDeleteEventBusFuture struct {
	Future workflow.Future
}

func (r *EventbridgeDeleteEventBusFuture) Get(ctx workflow.Context) (*eventbridge.DeleteEventBusOutput, error) {
	var output eventbridge.DeleteEventBusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeDeletePartnerEventSourceFuture struct {
	Future workflow.Future
}

func (r *EventbridgeDeletePartnerEventSourceFuture) Get(ctx workflow.Context) (*eventbridge.DeletePartnerEventSourceOutput, error) {
	var output eventbridge.DeletePartnerEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeDeleteRuleFuture struct {
	Future workflow.Future
}

func (r *EventbridgeDeleteRuleFuture) Get(ctx workflow.Context) (*eventbridge.DeleteRuleOutput, error) {
	var output eventbridge.DeleteRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeDescribeEventBusFuture struct {
	Future workflow.Future
}

func (r *EventbridgeDescribeEventBusFuture) Get(ctx workflow.Context) (*eventbridge.DescribeEventBusOutput, error) {
	var output eventbridge.DescribeEventBusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeDescribeEventSourceFuture struct {
	Future workflow.Future
}

func (r *EventbridgeDescribeEventSourceFuture) Get(ctx workflow.Context) (*eventbridge.DescribeEventSourceOutput, error) {
	var output eventbridge.DescribeEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeDescribePartnerEventSourceFuture struct {
	Future workflow.Future
}

func (r *EventbridgeDescribePartnerEventSourceFuture) Get(ctx workflow.Context) (*eventbridge.DescribePartnerEventSourceOutput, error) {
	var output eventbridge.DescribePartnerEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeDescribeRuleFuture struct {
	Future workflow.Future
}

func (r *EventbridgeDescribeRuleFuture) Get(ctx workflow.Context) (*eventbridge.DescribeRuleOutput, error) {
	var output eventbridge.DescribeRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeDisableRuleFuture struct {
	Future workflow.Future
}

func (r *EventbridgeDisableRuleFuture) Get(ctx workflow.Context) (*eventbridge.DisableRuleOutput, error) {
	var output eventbridge.DisableRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeEnableRuleFuture struct {
	Future workflow.Future
}

func (r *EventbridgeEnableRuleFuture) Get(ctx workflow.Context) (*eventbridge.EnableRuleOutput, error) {
	var output eventbridge.EnableRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeListEventBusesFuture struct {
	Future workflow.Future
}

func (r *EventbridgeListEventBusesFuture) Get(ctx workflow.Context) (*eventbridge.ListEventBusesOutput, error) {
	var output eventbridge.ListEventBusesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeListEventSourcesFuture struct {
	Future workflow.Future
}

func (r *EventbridgeListEventSourcesFuture) Get(ctx workflow.Context) (*eventbridge.ListEventSourcesOutput, error) {
	var output eventbridge.ListEventSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeListPartnerEventSourceAccountsFuture struct {
	Future workflow.Future
}

func (r *EventbridgeListPartnerEventSourceAccountsFuture) Get(ctx workflow.Context) (*eventbridge.ListPartnerEventSourceAccountsOutput, error) {
	var output eventbridge.ListPartnerEventSourceAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeListPartnerEventSourcesFuture struct {
	Future workflow.Future
}

func (r *EventbridgeListPartnerEventSourcesFuture) Get(ctx workflow.Context) (*eventbridge.ListPartnerEventSourcesOutput, error) {
	var output eventbridge.ListPartnerEventSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeListRuleNamesByTargetFuture struct {
	Future workflow.Future
}

func (r *EventbridgeListRuleNamesByTargetFuture) Get(ctx workflow.Context) (*eventbridge.ListRuleNamesByTargetOutput, error) {
	var output eventbridge.ListRuleNamesByTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeListRulesFuture struct {
	Future workflow.Future
}

func (r *EventbridgeListRulesFuture) Get(ctx workflow.Context) (*eventbridge.ListRulesOutput, error) {
	var output eventbridge.ListRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *EventbridgeListTagsForResourceFuture) Get(ctx workflow.Context) (*eventbridge.ListTagsForResourceOutput, error) {
	var output eventbridge.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeListTargetsByRuleFuture struct {
	Future workflow.Future
}

func (r *EventbridgeListTargetsByRuleFuture) Get(ctx workflow.Context) (*eventbridge.ListTargetsByRuleOutput, error) {
	var output eventbridge.ListTargetsByRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgePutEventsFuture struct {
	Future workflow.Future
}

func (r *EventbridgePutEventsFuture) Get(ctx workflow.Context) (*eventbridge.PutEventsOutput, error) {
	var output eventbridge.PutEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgePutPartnerEventsFuture struct {
	Future workflow.Future
}

func (r *EventbridgePutPartnerEventsFuture) Get(ctx workflow.Context) (*eventbridge.PutPartnerEventsOutput, error) {
	var output eventbridge.PutPartnerEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgePutPermissionFuture struct {
	Future workflow.Future
}

func (r *EventbridgePutPermissionFuture) Get(ctx workflow.Context) (*eventbridge.PutPermissionOutput, error) {
	var output eventbridge.PutPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgePutRuleFuture struct {
	Future workflow.Future
}

func (r *EventbridgePutRuleFuture) Get(ctx workflow.Context) (*eventbridge.PutRuleOutput, error) {
	var output eventbridge.PutRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgePutTargetsFuture struct {
	Future workflow.Future
}

func (r *EventbridgePutTargetsFuture) Get(ctx workflow.Context) (*eventbridge.PutTargetsOutput, error) {
	var output eventbridge.PutTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeRemovePermissionFuture struct {
	Future workflow.Future
}

func (r *EventbridgeRemovePermissionFuture) Get(ctx workflow.Context) (*eventbridge.RemovePermissionOutput, error) {
	var output eventbridge.RemovePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeRemoveTargetsFuture struct {
	Future workflow.Future
}

func (r *EventbridgeRemoveTargetsFuture) Get(ctx workflow.Context) (*eventbridge.RemoveTargetsOutput, error) {
	var output eventbridge.RemoveTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeTagResourceFuture struct {
	Future workflow.Future
}

func (r *EventbridgeTagResourceFuture) Get(ctx workflow.Context) (*eventbridge.TagResourceOutput, error) {
	var output eventbridge.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeTestEventPatternFuture struct {
	Future workflow.Future
}

func (r *EventbridgeTestEventPatternFuture) Get(ctx workflow.Context) (*eventbridge.TestEventPatternOutput, error) {
	var output eventbridge.TestEventPatternOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EventbridgeUntagResourceFuture struct {
	Future workflow.Future
}

func (r *EventbridgeUntagResourceFuture) Get(ctx workflow.Context) (*eventbridge.UntagResourceOutput, error) {
	var output eventbridge.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ActivateEventSource(ctx workflow.Context, input *eventbridge.ActivateEventSourceInput) (*eventbridge.ActivateEventSourceOutput, error) {
	var output eventbridge.ActivateEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ActivateEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ActivateEventSourceAsync(ctx workflow.Context, input *eventbridge.ActivateEventSourceInput) *EventbridgeActivateEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ActivateEventSource", input)
	return &EventbridgeActivateEventSourceFuture{Future: future}
}

func (a *EventBridgeStub) CreateEventBus(ctx workflow.Context, input *eventbridge.CreateEventBusInput) (*eventbridge.CreateEventBusOutput, error) {
	var output eventbridge.CreateEventBusOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.CreateEventBus", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) CreateEventBusAsync(ctx workflow.Context, input *eventbridge.CreateEventBusInput) *EventbridgeCreateEventBusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.CreateEventBus", input)
	return &EventbridgeCreateEventBusFuture{Future: future}
}

func (a *EventBridgeStub) CreatePartnerEventSource(ctx workflow.Context, input *eventbridge.CreatePartnerEventSourceInput) (*eventbridge.CreatePartnerEventSourceOutput, error) {
	var output eventbridge.CreatePartnerEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.CreatePartnerEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) CreatePartnerEventSourceAsync(ctx workflow.Context, input *eventbridge.CreatePartnerEventSourceInput) *EventbridgeCreatePartnerEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.CreatePartnerEventSource", input)
	return &EventbridgeCreatePartnerEventSourceFuture{Future: future}
}

func (a *EventBridgeStub) DeactivateEventSource(ctx workflow.Context, input *eventbridge.DeactivateEventSourceInput) (*eventbridge.DeactivateEventSourceOutput, error) {
	var output eventbridge.DeactivateEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeactivateEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DeactivateEventSourceAsync(ctx workflow.Context, input *eventbridge.DeactivateEventSourceInput) *EventbridgeDeactivateEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeactivateEventSource", input)
	return &EventbridgeDeactivateEventSourceFuture{Future: future}
}

func (a *EventBridgeStub) DeleteEventBus(ctx workflow.Context, input *eventbridge.DeleteEventBusInput) (*eventbridge.DeleteEventBusOutput, error) {
	var output eventbridge.DeleteEventBusOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeleteEventBus", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DeleteEventBusAsync(ctx workflow.Context, input *eventbridge.DeleteEventBusInput) *EventbridgeDeleteEventBusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeleteEventBus", input)
	return &EventbridgeDeleteEventBusFuture{Future: future}
}

func (a *EventBridgeStub) DeletePartnerEventSource(ctx workflow.Context, input *eventbridge.DeletePartnerEventSourceInput) (*eventbridge.DeletePartnerEventSourceOutput, error) {
	var output eventbridge.DeletePartnerEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeletePartnerEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DeletePartnerEventSourceAsync(ctx workflow.Context, input *eventbridge.DeletePartnerEventSourceInput) *EventbridgeDeletePartnerEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeletePartnerEventSource", input)
	return &EventbridgeDeletePartnerEventSourceFuture{Future: future}
}

func (a *EventBridgeStub) DeleteRule(ctx workflow.Context, input *eventbridge.DeleteRuleInput) (*eventbridge.DeleteRuleOutput, error) {
	var output eventbridge.DeleteRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeleteRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DeleteRuleAsync(ctx workflow.Context, input *eventbridge.DeleteRuleInput) *EventbridgeDeleteRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DeleteRule", input)
	return &EventbridgeDeleteRuleFuture{Future: future}
}

func (a *EventBridgeStub) DescribeEventBus(ctx workflow.Context, input *eventbridge.DescribeEventBusInput) (*eventbridge.DescribeEventBusOutput, error) {
	var output eventbridge.DescribeEventBusOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribeEventBus", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DescribeEventBusAsync(ctx workflow.Context, input *eventbridge.DescribeEventBusInput) *EventbridgeDescribeEventBusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribeEventBus", input)
	return &EventbridgeDescribeEventBusFuture{Future: future}
}

func (a *EventBridgeStub) DescribeEventSource(ctx workflow.Context, input *eventbridge.DescribeEventSourceInput) (*eventbridge.DescribeEventSourceOutput, error) {
	var output eventbridge.DescribeEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribeEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DescribeEventSourceAsync(ctx workflow.Context, input *eventbridge.DescribeEventSourceInput) *EventbridgeDescribeEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribeEventSource", input)
	return &EventbridgeDescribeEventSourceFuture{Future: future}
}

func (a *EventBridgeStub) DescribePartnerEventSource(ctx workflow.Context, input *eventbridge.DescribePartnerEventSourceInput) (*eventbridge.DescribePartnerEventSourceOutput, error) {
	var output eventbridge.DescribePartnerEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribePartnerEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DescribePartnerEventSourceAsync(ctx workflow.Context, input *eventbridge.DescribePartnerEventSourceInput) *EventbridgeDescribePartnerEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribePartnerEventSource", input)
	return &EventbridgeDescribePartnerEventSourceFuture{Future: future}
}

func (a *EventBridgeStub) DescribeRule(ctx workflow.Context, input *eventbridge.DescribeRuleInput) (*eventbridge.DescribeRuleOutput, error) {
	var output eventbridge.DescribeRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribeRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DescribeRuleAsync(ctx workflow.Context, input *eventbridge.DescribeRuleInput) *EventbridgeDescribeRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DescribeRule", input)
	return &EventbridgeDescribeRuleFuture{Future: future}
}

func (a *EventBridgeStub) DisableRule(ctx workflow.Context, input *eventbridge.DisableRuleInput) (*eventbridge.DisableRuleOutput, error) {
	var output eventbridge.DisableRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.DisableRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) DisableRuleAsync(ctx workflow.Context, input *eventbridge.DisableRuleInput) *EventbridgeDisableRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.DisableRule", input)
	return &EventbridgeDisableRuleFuture{Future: future}
}

func (a *EventBridgeStub) EnableRule(ctx workflow.Context, input *eventbridge.EnableRuleInput) (*eventbridge.EnableRuleOutput, error) {
	var output eventbridge.EnableRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.EnableRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) EnableRuleAsync(ctx workflow.Context, input *eventbridge.EnableRuleInput) *EventbridgeEnableRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.EnableRule", input)
	return &EventbridgeEnableRuleFuture{Future: future}
}

func (a *EventBridgeStub) ListEventBuses(ctx workflow.Context, input *eventbridge.ListEventBusesInput) (*eventbridge.ListEventBusesOutput, error) {
	var output eventbridge.ListEventBusesOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListEventBuses", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListEventBusesAsync(ctx workflow.Context, input *eventbridge.ListEventBusesInput) *EventbridgeListEventBusesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListEventBuses", input)
	return &EventbridgeListEventBusesFuture{Future: future}
}

func (a *EventBridgeStub) ListEventSources(ctx workflow.Context, input *eventbridge.ListEventSourcesInput) (*eventbridge.ListEventSourcesOutput, error) {
	var output eventbridge.ListEventSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListEventSources", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListEventSourcesAsync(ctx workflow.Context, input *eventbridge.ListEventSourcesInput) *EventbridgeListEventSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListEventSources", input)
	return &EventbridgeListEventSourcesFuture{Future: future}
}

func (a *EventBridgeStub) ListPartnerEventSourceAccounts(ctx workflow.Context, input *eventbridge.ListPartnerEventSourceAccountsInput) (*eventbridge.ListPartnerEventSourceAccountsOutput, error) {
	var output eventbridge.ListPartnerEventSourceAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListPartnerEventSourceAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListPartnerEventSourceAccountsAsync(ctx workflow.Context, input *eventbridge.ListPartnerEventSourceAccountsInput) *EventbridgeListPartnerEventSourceAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListPartnerEventSourceAccounts", input)
	return &EventbridgeListPartnerEventSourceAccountsFuture{Future: future}
}

func (a *EventBridgeStub) ListPartnerEventSources(ctx workflow.Context, input *eventbridge.ListPartnerEventSourcesInput) (*eventbridge.ListPartnerEventSourcesOutput, error) {
	var output eventbridge.ListPartnerEventSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListPartnerEventSources", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListPartnerEventSourcesAsync(ctx workflow.Context, input *eventbridge.ListPartnerEventSourcesInput) *EventbridgeListPartnerEventSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListPartnerEventSources", input)
	return &EventbridgeListPartnerEventSourcesFuture{Future: future}
}

func (a *EventBridgeStub) ListRuleNamesByTarget(ctx workflow.Context, input *eventbridge.ListRuleNamesByTargetInput) (*eventbridge.ListRuleNamesByTargetOutput, error) {
	var output eventbridge.ListRuleNamesByTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListRuleNamesByTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListRuleNamesByTargetAsync(ctx workflow.Context, input *eventbridge.ListRuleNamesByTargetInput) *EventbridgeListRuleNamesByTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListRuleNamesByTarget", input)
	return &EventbridgeListRuleNamesByTargetFuture{Future: future}
}

func (a *EventBridgeStub) ListRules(ctx workflow.Context, input *eventbridge.ListRulesInput) (*eventbridge.ListRulesOutput, error) {
	var output eventbridge.ListRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListRules", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListRulesAsync(ctx workflow.Context, input *eventbridge.ListRulesInput) *EventbridgeListRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListRules", input)
	return &EventbridgeListRulesFuture{Future: future}
}

func (a *EventBridgeStub) ListTagsForResource(ctx workflow.Context, input *eventbridge.ListTagsForResourceInput) (*eventbridge.ListTagsForResourceOutput, error) {
	var output eventbridge.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListTagsForResourceAsync(ctx workflow.Context, input *eventbridge.ListTagsForResourceInput) *EventbridgeListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListTagsForResource", input)
	return &EventbridgeListTagsForResourceFuture{Future: future}
}

func (a *EventBridgeStub) ListTargetsByRule(ctx workflow.Context, input *eventbridge.ListTargetsByRuleInput) (*eventbridge.ListTargetsByRuleOutput, error) {
	var output eventbridge.ListTargetsByRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListTargetsByRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) ListTargetsByRuleAsync(ctx workflow.Context, input *eventbridge.ListTargetsByRuleInput) *EventbridgeListTargetsByRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.ListTargetsByRule", input)
	return &EventbridgeListTargetsByRuleFuture{Future: future}
}

func (a *EventBridgeStub) PutEvents(ctx workflow.Context, input *eventbridge.PutEventsInput) (*eventbridge.PutEventsOutput, error) {
	var output eventbridge.PutEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) PutEventsAsync(ctx workflow.Context, input *eventbridge.PutEventsInput) *EventbridgePutEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutEvents", input)
	return &EventbridgePutEventsFuture{Future: future}
}

func (a *EventBridgeStub) PutPartnerEvents(ctx workflow.Context, input *eventbridge.PutPartnerEventsInput) (*eventbridge.PutPartnerEventsOutput, error) {
	var output eventbridge.PutPartnerEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutPartnerEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) PutPartnerEventsAsync(ctx workflow.Context, input *eventbridge.PutPartnerEventsInput) *EventbridgePutPartnerEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutPartnerEvents", input)
	return &EventbridgePutPartnerEventsFuture{Future: future}
}

func (a *EventBridgeStub) PutPermission(ctx workflow.Context, input *eventbridge.PutPermissionInput) (*eventbridge.PutPermissionOutput, error) {
	var output eventbridge.PutPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) PutPermissionAsync(ctx workflow.Context, input *eventbridge.PutPermissionInput) *EventbridgePutPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutPermission", input)
	return &EventbridgePutPermissionFuture{Future: future}
}

func (a *EventBridgeStub) PutRule(ctx workflow.Context, input *eventbridge.PutRuleInput) (*eventbridge.PutRuleOutput, error) {
	var output eventbridge.PutRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) PutRuleAsync(ctx workflow.Context, input *eventbridge.PutRuleInput) *EventbridgePutRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutRule", input)
	return &EventbridgePutRuleFuture{Future: future}
}

func (a *EventBridgeStub) PutTargets(ctx workflow.Context, input *eventbridge.PutTargetsInput) (*eventbridge.PutTargetsOutput, error) {
	var output eventbridge.PutTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) PutTargetsAsync(ctx workflow.Context, input *eventbridge.PutTargetsInput) *EventbridgePutTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.PutTargets", input)
	return &EventbridgePutTargetsFuture{Future: future}
}

func (a *EventBridgeStub) RemovePermission(ctx workflow.Context, input *eventbridge.RemovePermissionInput) (*eventbridge.RemovePermissionOutput, error) {
	var output eventbridge.RemovePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.RemovePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) RemovePermissionAsync(ctx workflow.Context, input *eventbridge.RemovePermissionInput) *EventbridgeRemovePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.RemovePermission", input)
	return &EventbridgeRemovePermissionFuture{Future: future}
}

func (a *EventBridgeStub) RemoveTargets(ctx workflow.Context, input *eventbridge.RemoveTargetsInput) (*eventbridge.RemoveTargetsOutput, error) {
	var output eventbridge.RemoveTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.RemoveTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) RemoveTargetsAsync(ctx workflow.Context, input *eventbridge.RemoveTargetsInput) *EventbridgeRemoveTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.RemoveTargets", input)
	return &EventbridgeRemoveTargetsFuture{Future: future}
}

func (a *EventBridgeStub) TagResource(ctx workflow.Context, input *eventbridge.TagResourceInput) (*eventbridge.TagResourceOutput, error) {
	var output eventbridge.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) TagResourceAsync(ctx workflow.Context, input *eventbridge.TagResourceInput) *EventbridgeTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.TagResource", input)
	return &EventbridgeTagResourceFuture{Future: future}
}

func (a *EventBridgeStub) TestEventPattern(ctx workflow.Context, input *eventbridge.TestEventPatternInput) (*eventbridge.TestEventPatternOutput, error) {
	var output eventbridge.TestEventPatternOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.TestEventPattern", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) TestEventPatternAsync(ctx workflow.Context, input *eventbridge.TestEventPatternInput) *EventbridgeTestEventPatternFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.TestEventPattern", input)
	return &EventbridgeTestEventPatternFuture{Future: future}
}

func (a *EventBridgeStub) UntagResource(ctx workflow.Context, input *eventbridge.UntagResourceInput) (*eventbridge.UntagResourceOutput, error) {
	var output eventbridge.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eventbridge.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EventBridgeStub) UntagResourceAsync(ctx workflow.Context, input *eventbridge.UntagResourceInput) *EventbridgeUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eventbridge.UntagResource", input)
	return &EventbridgeUntagResourceFuture{Future: future}
}
