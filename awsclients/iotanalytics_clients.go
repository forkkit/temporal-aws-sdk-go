// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/iotanalytics"
	"go.temporal.io/sdk/workflow"
)

type IoTAnalyticsClient interface {
	BatchPutMessage(ctx workflow.Context, input *iotanalytics.BatchPutMessageInput) (*iotanalytics.BatchPutMessageOutput, error)
	BatchPutMessageAsync(ctx workflow.Context, input *iotanalytics.BatchPutMessageInput) *IotanalyticsBatchPutMessageFuture

	CancelPipelineReprocessing(ctx workflow.Context, input *iotanalytics.CancelPipelineReprocessingInput) (*iotanalytics.CancelPipelineReprocessingOutput, error)
	CancelPipelineReprocessingAsync(ctx workflow.Context, input *iotanalytics.CancelPipelineReprocessingInput) *IotanalyticsCancelPipelineReprocessingFuture

	CreateChannel(ctx workflow.Context, input *iotanalytics.CreateChannelInput) (*iotanalytics.CreateChannelOutput, error)
	CreateChannelAsync(ctx workflow.Context, input *iotanalytics.CreateChannelInput) *IotanalyticsCreateChannelFuture

	CreateDataset(ctx workflow.Context, input *iotanalytics.CreateDatasetInput) (*iotanalytics.CreateDatasetOutput, error)
	CreateDatasetAsync(ctx workflow.Context, input *iotanalytics.CreateDatasetInput) *IotanalyticsCreateDatasetFuture

	CreateDatasetContent(ctx workflow.Context, input *iotanalytics.CreateDatasetContentInput) (*iotanalytics.CreateDatasetContentOutput, error)
	CreateDatasetContentAsync(ctx workflow.Context, input *iotanalytics.CreateDatasetContentInput) *IotanalyticsCreateDatasetContentFuture

	CreateDatastore(ctx workflow.Context, input *iotanalytics.CreateDatastoreInput) (*iotanalytics.CreateDatastoreOutput, error)
	CreateDatastoreAsync(ctx workflow.Context, input *iotanalytics.CreateDatastoreInput) *IotanalyticsCreateDatastoreFuture

	CreatePipeline(ctx workflow.Context, input *iotanalytics.CreatePipelineInput) (*iotanalytics.CreatePipelineOutput, error)
	CreatePipelineAsync(ctx workflow.Context, input *iotanalytics.CreatePipelineInput) *IotanalyticsCreatePipelineFuture

	DeleteChannel(ctx workflow.Context, input *iotanalytics.DeleteChannelInput) (*iotanalytics.DeleteChannelOutput, error)
	DeleteChannelAsync(ctx workflow.Context, input *iotanalytics.DeleteChannelInput) *IotanalyticsDeleteChannelFuture

	DeleteDataset(ctx workflow.Context, input *iotanalytics.DeleteDatasetInput) (*iotanalytics.DeleteDatasetOutput, error)
	DeleteDatasetAsync(ctx workflow.Context, input *iotanalytics.DeleteDatasetInput) *IotanalyticsDeleteDatasetFuture

	DeleteDatasetContent(ctx workflow.Context, input *iotanalytics.DeleteDatasetContentInput) (*iotanalytics.DeleteDatasetContentOutput, error)
	DeleteDatasetContentAsync(ctx workflow.Context, input *iotanalytics.DeleteDatasetContentInput) *IotanalyticsDeleteDatasetContentFuture

	DeleteDatastore(ctx workflow.Context, input *iotanalytics.DeleteDatastoreInput) (*iotanalytics.DeleteDatastoreOutput, error)
	DeleteDatastoreAsync(ctx workflow.Context, input *iotanalytics.DeleteDatastoreInput) *IotanalyticsDeleteDatastoreFuture

	DeletePipeline(ctx workflow.Context, input *iotanalytics.DeletePipelineInput) (*iotanalytics.DeletePipelineOutput, error)
	DeletePipelineAsync(ctx workflow.Context, input *iotanalytics.DeletePipelineInput) *IotanalyticsDeletePipelineFuture

	DescribeChannel(ctx workflow.Context, input *iotanalytics.DescribeChannelInput) (*iotanalytics.DescribeChannelOutput, error)
	DescribeChannelAsync(ctx workflow.Context, input *iotanalytics.DescribeChannelInput) *IotanalyticsDescribeChannelFuture

	DescribeDataset(ctx workflow.Context, input *iotanalytics.DescribeDatasetInput) (*iotanalytics.DescribeDatasetOutput, error)
	DescribeDatasetAsync(ctx workflow.Context, input *iotanalytics.DescribeDatasetInput) *IotanalyticsDescribeDatasetFuture

	DescribeDatastore(ctx workflow.Context, input *iotanalytics.DescribeDatastoreInput) (*iotanalytics.DescribeDatastoreOutput, error)
	DescribeDatastoreAsync(ctx workflow.Context, input *iotanalytics.DescribeDatastoreInput) *IotanalyticsDescribeDatastoreFuture

	DescribeLoggingOptions(ctx workflow.Context, input *iotanalytics.DescribeLoggingOptionsInput) (*iotanalytics.DescribeLoggingOptionsOutput, error)
	DescribeLoggingOptionsAsync(ctx workflow.Context, input *iotanalytics.DescribeLoggingOptionsInput) *IotanalyticsDescribeLoggingOptionsFuture

	DescribePipeline(ctx workflow.Context, input *iotanalytics.DescribePipelineInput) (*iotanalytics.DescribePipelineOutput, error)
	DescribePipelineAsync(ctx workflow.Context, input *iotanalytics.DescribePipelineInput) *IotanalyticsDescribePipelineFuture

	GetDatasetContent(ctx workflow.Context, input *iotanalytics.GetDatasetContentInput) (*iotanalytics.GetDatasetContentOutput, error)
	GetDatasetContentAsync(ctx workflow.Context, input *iotanalytics.GetDatasetContentInput) *IotanalyticsGetDatasetContentFuture

	ListChannels(ctx workflow.Context, input *iotanalytics.ListChannelsInput) (*iotanalytics.ListChannelsOutput, error)
	ListChannelsAsync(ctx workflow.Context, input *iotanalytics.ListChannelsInput) *IotanalyticsListChannelsFuture

	ListDatasetContents(ctx workflow.Context, input *iotanalytics.ListDatasetContentsInput) (*iotanalytics.ListDatasetContentsOutput, error)
	ListDatasetContentsAsync(ctx workflow.Context, input *iotanalytics.ListDatasetContentsInput) *IotanalyticsListDatasetContentsFuture

	ListDatasets(ctx workflow.Context, input *iotanalytics.ListDatasetsInput) (*iotanalytics.ListDatasetsOutput, error)
	ListDatasetsAsync(ctx workflow.Context, input *iotanalytics.ListDatasetsInput) *IotanalyticsListDatasetsFuture

	ListDatastores(ctx workflow.Context, input *iotanalytics.ListDatastoresInput) (*iotanalytics.ListDatastoresOutput, error)
	ListDatastoresAsync(ctx workflow.Context, input *iotanalytics.ListDatastoresInput) *IotanalyticsListDatastoresFuture

	ListPipelines(ctx workflow.Context, input *iotanalytics.ListPipelinesInput) (*iotanalytics.ListPipelinesOutput, error)
	ListPipelinesAsync(ctx workflow.Context, input *iotanalytics.ListPipelinesInput) *IotanalyticsListPipelinesFuture

	ListTagsForResource(ctx workflow.Context, input *iotanalytics.ListTagsForResourceInput) (*iotanalytics.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *iotanalytics.ListTagsForResourceInput) *IotanalyticsListTagsForResourceFuture

	PutLoggingOptions(ctx workflow.Context, input *iotanalytics.PutLoggingOptionsInput) (*iotanalytics.PutLoggingOptionsOutput, error)
	PutLoggingOptionsAsync(ctx workflow.Context, input *iotanalytics.PutLoggingOptionsInput) *IotanalyticsPutLoggingOptionsFuture

	RunPipelineActivity(ctx workflow.Context, input *iotanalytics.RunPipelineActivityInput) (*iotanalytics.RunPipelineActivityOutput, error)
	RunPipelineActivityAsync(ctx workflow.Context, input *iotanalytics.RunPipelineActivityInput) *IotanalyticsRunPipelineActivityFuture

	SampleChannelData(ctx workflow.Context, input *iotanalytics.SampleChannelDataInput) (*iotanalytics.SampleChannelDataOutput, error)
	SampleChannelDataAsync(ctx workflow.Context, input *iotanalytics.SampleChannelDataInput) *IotanalyticsSampleChannelDataFuture

	StartPipelineReprocessing(ctx workflow.Context, input *iotanalytics.StartPipelineReprocessingInput) (*iotanalytics.StartPipelineReprocessingOutput, error)
	StartPipelineReprocessingAsync(ctx workflow.Context, input *iotanalytics.StartPipelineReprocessingInput) *IotanalyticsStartPipelineReprocessingFuture

	TagResource(ctx workflow.Context, input *iotanalytics.TagResourceInput) (*iotanalytics.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *iotanalytics.TagResourceInput) *IotanalyticsTagResourceFuture

	UntagResource(ctx workflow.Context, input *iotanalytics.UntagResourceInput) (*iotanalytics.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *iotanalytics.UntagResourceInput) *IotanalyticsUntagResourceFuture

	UpdateChannel(ctx workflow.Context, input *iotanalytics.UpdateChannelInput) (*iotanalytics.UpdateChannelOutput, error)
	UpdateChannelAsync(ctx workflow.Context, input *iotanalytics.UpdateChannelInput) *IotanalyticsUpdateChannelFuture

	UpdateDataset(ctx workflow.Context, input *iotanalytics.UpdateDatasetInput) (*iotanalytics.UpdateDatasetOutput, error)
	UpdateDatasetAsync(ctx workflow.Context, input *iotanalytics.UpdateDatasetInput) *IotanalyticsUpdateDatasetFuture

	UpdateDatastore(ctx workflow.Context, input *iotanalytics.UpdateDatastoreInput) (*iotanalytics.UpdateDatastoreOutput, error)
	UpdateDatastoreAsync(ctx workflow.Context, input *iotanalytics.UpdateDatastoreInput) *IotanalyticsUpdateDatastoreFuture

	UpdatePipeline(ctx workflow.Context, input *iotanalytics.UpdatePipelineInput) (*iotanalytics.UpdatePipelineOutput, error)
	UpdatePipelineAsync(ctx workflow.Context, input *iotanalytics.UpdatePipelineInput) *IotanalyticsUpdatePipelineFuture
}

type IoTAnalyticsStub struct{}

func NewIoTAnalyticsStub() IoTAnalyticsClient {
	return &IoTAnalyticsStub{}
}

type IotanalyticsBatchPutMessageFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsBatchPutMessageFuture) Get(ctx workflow.Context) (*iotanalytics.BatchPutMessageOutput, error) {
	var output iotanalytics.BatchPutMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsCancelPipelineReprocessingFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsCancelPipelineReprocessingFuture) Get(ctx workflow.Context) (*iotanalytics.CancelPipelineReprocessingOutput, error) {
	var output iotanalytics.CancelPipelineReprocessingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsCreateChannelFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsCreateChannelFuture) Get(ctx workflow.Context) (*iotanalytics.CreateChannelOutput, error) {
	var output iotanalytics.CreateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsCreateDatasetFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsCreateDatasetFuture) Get(ctx workflow.Context) (*iotanalytics.CreateDatasetOutput, error) {
	var output iotanalytics.CreateDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsCreateDatasetContentFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsCreateDatasetContentFuture) Get(ctx workflow.Context) (*iotanalytics.CreateDatasetContentOutput, error) {
	var output iotanalytics.CreateDatasetContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsCreateDatastoreFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsCreateDatastoreFuture) Get(ctx workflow.Context) (*iotanalytics.CreateDatastoreOutput, error) {
	var output iotanalytics.CreateDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsCreatePipelineFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsCreatePipelineFuture) Get(ctx workflow.Context) (*iotanalytics.CreatePipelineOutput, error) {
	var output iotanalytics.CreatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsDeleteChannelFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsDeleteChannelFuture) Get(ctx workflow.Context) (*iotanalytics.DeleteChannelOutput, error) {
	var output iotanalytics.DeleteChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsDeleteDatasetFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsDeleteDatasetFuture) Get(ctx workflow.Context) (*iotanalytics.DeleteDatasetOutput, error) {
	var output iotanalytics.DeleteDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsDeleteDatasetContentFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsDeleteDatasetContentFuture) Get(ctx workflow.Context) (*iotanalytics.DeleteDatasetContentOutput, error) {
	var output iotanalytics.DeleteDatasetContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsDeleteDatastoreFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsDeleteDatastoreFuture) Get(ctx workflow.Context) (*iotanalytics.DeleteDatastoreOutput, error) {
	var output iotanalytics.DeleteDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsDeletePipelineFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsDeletePipelineFuture) Get(ctx workflow.Context) (*iotanalytics.DeletePipelineOutput, error) {
	var output iotanalytics.DeletePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsDescribeChannelFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsDescribeChannelFuture) Get(ctx workflow.Context) (*iotanalytics.DescribeChannelOutput, error) {
	var output iotanalytics.DescribeChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsDescribeDatasetFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsDescribeDatasetFuture) Get(ctx workflow.Context) (*iotanalytics.DescribeDatasetOutput, error) {
	var output iotanalytics.DescribeDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsDescribeDatastoreFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsDescribeDatastoreFuture) Get(ctx workflow.Context) (*iotanalytics.DescribeDatastoreOutput, error) {
	var output iotanalytics.DescribeDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsDescribeLoggingOptionsFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsDescribeLoggingOptionsFuture) Get(ctx workflow.Context) (*iotanalytics.DescribeLoggingOptionsOutput, error) {
	var output iotanalytics.DescribeLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsDescribePipelineFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsDescribePipelineFuture) Get(ctx workflow.Context) (*iotanalytics.DescribePipelineOutput, error) {
	var output iotanalytics.DescribePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsGetDatasetContentFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsGetDatasetContentFuture) Get(ctx workflow.Context) (*iotanalytics.GetDatasetContentOutput, error) {
	var output iotanalytics.GetDatasetContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsListChannelsFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsListChannelsFuture) Get(ctx workflow.Context) (*iotanalytics.ListChannelsOutput, error) {
	var output iotanalytics.ListChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsListDatasetContentsFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsListDatasetContentsFuture) Get(ctx workflow.Context) (*iotanalytics.ListDatasetContentsOutput, error) {
	var output iotanalytics.ListDatasetContentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsListDatasetsFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsListDatasetsFuture) Get(ctx workflow.Context) (*iotanalytics.ListDatasetsOutput, error) {
	var output iotanalytics.ListDatasetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsListDatastoresFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsListDatastoresFuture) Get(ctx workflow.Context) (*iotanalytics.ListDatastoresOutput, error) {
	var output iotanalytics.ListDatastoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsListPipelinesFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsListPipelinesFuture) Get(ctx workflow.Context) (*iotanalytics.ListPipelinesOutput, error) {
	var output iotanalytics.ListPipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsListTagsForResourceFuture) Get(ctx workflow.Context) (*iotanalytics.ListTagsForResourceOutput, error) {
	var output iotanalytics.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsPutLoggingOptionsFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsPutLoggingOptionsFuture) Get(ctx workflow.Context) (*iotanalytics.PutLoggingOptionsOutput, error) {
	var output iotanalytics.PutLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsRunPipelineActivityFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsRunPipelineActivityFuture) Get(ctx workflow.Context) (*iotanalytics.RunPipelineActivityOutput, error) {
	var output iotanalytics.RunPipelineActivityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsSampleChannelDataFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsSampleChannelDataFuture) Get(ctx workflow.Context) (*iotanalytics.SampleChannelDataOutput, error) {
	var output iotanalytics.SampleChannelDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsStartPipelineReprocessingFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsStartPipelineReprocessingFuture) Get(ctx workflow.Context) (*iotanalytics.StartPipelineReprocessingOutput, error) {
	var output iotanalytics.StartPipelineReprocessingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsTagResourceFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsTagResourceFuture) Get(ctx workflow.Context) (*iotanalytics.TagResourceOutput, error) {
	var output iotanalytics.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsUntagResourceFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsUntagResourceFuture) Get(ctx workflow.Context) (*iotanalytics.UntagResourceOutput, error) {
	var output iotanalytics.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsUpdateChannelFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsUpdateChannelFuture) Get(ctx workflow.Context) (*iotanalytics.UpdateChannelOutput, error) {
	var output iotanalytics.UpdateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsUpdateDatasetFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsUpdateDatasetFuture) Get(ctx workflow.Context) (*iotanalytics.UpdateDatasetOutput, error) {
	var output iotanalytics.UpdateDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsUpdateDatastoreFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsUpdateDatastoreFuture) Get(ctx workflow.Context) (*iotanalytics.UpdateDatastoreOutput, error) {
	var output iotanalytics.UpdateDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotanalyticsUpdatePipelineFuture struct {
	Future workflow.Future
}

func (r *IotanalyticsUpdatePipelineFuture) Get(ctx workflow.Context) (*iotanalytics.UpdatePipelineOutput, error) {
	var output iotanalytics.UpdatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) BatchPutMessage(ctx workflow.Context, input *iotanalytics.BatchPutMessageInput) (*iotanalytics.BatchPutMessageOutput, error) {
	var output iotanalytics.BatchPutMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.BatchPutMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) BatchPutMessageAsync(ctx workflow.Context, input *iotanalytics.BatchPutMessageInput) *IotanalyticsBatchPutMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.BatchPutMessage", input)
	return &IotanalyticsBatchPutMessageFuture{Future: future}
}

func (a *IoTAnalyticsStub) CancelPipelineReprocessing(ctx workflow.Context, input *iotanalytics.CancelPipelineReprocessingInput) (*iotanalytics.CancelPipelineReprocessingOutput, error) {
	var output iotanalytics.CancelPipelineReprocessingOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.CancelPipelineReprocessing", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) CancelPipelineReprocessingAsync(ctx workflow.Context, input *iotanalytics.CancelPipelineReprocessingInput) *IotanalyticsCancelPipelineReprocessingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.CancelPipelineReprocessing", input)
	return &IotanalyticsCancelPipelineReprocessingFuture{Future: future}
}

func (a *IoTAnalyticsStub) CreateChannel(ctx workflow.Context, input *iotanalytics.CreateChannelInput) (*iotanalytics.CreateChannelOutput, error) {
	var output iotanalytics.CreateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.CreateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) CreateChannelAsync(ctx workflow.Context, input *iotanalytics.CreateChannelInput) *IotanalyticsCreateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.CreateChannel", input)
	return &IotanalyticsCreateChannelFuture{Future: future}
}

func (a *IoTAnalyticsStub) CreateDataset(ctx workflow.Context, input *iotanalytics.CreateDatasetInput) (*iotanalytics.CreateDatasetOutput, error) {
	var output iotanalytics.CreateDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.CreateDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) CreateDatasetAsync(ctx workflow.Context, input *iotanalytics.CreateDatasetInput) *IotanalyticsCreateDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.CreateDataset", input)
	return &IotanalyticsCreateDatasetFuture{Future: future}
}

func (a *IoTAnalyticsStub) CreateDatasetContent(ctx workflow.Context, input *iotanalytics.CreateDatasetContentInput) (*iotanalytics.CreateDatasetContentOutput, error) {
	var output iotanalytics.CreateDatasetContentOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.CreateDatasetContent", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) CreateDatasetContentAsync(ctx workflow.Context, input *iotanalytics.CreateDatasetContentInput) *IotanalyticsCreateDatasetContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.CreateDatasetContent", input)
	return &IotanalyticsCreateDatasetContentFuture{Future: future}
}

func (a *IoTAnalyticsStub) CreateDatastore(ctx workflow.Context, input *iotanalytics.CreateDatastoreInput) (*iotanalytics.CreateDatastoreOutput, error) {
	var output iotanalytics.CreateDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.CreateDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) CreateDatastoreAsync(ctx workflow.Context, input *iotanalytics.CreateDatastoreInput) *IotanalyticsCreateDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.CreateDatastore", input)
	return &IotanalyticsCreateDatastoreFuture{Future: future}
}

func (a *IoTAnalyticsStub) CreatePipeline(ctx workflow.Context, input *iotanalytics.CreatePipelineInput) (*iotanalytics.CreatePipelineOutput, error) {
	var output iotanalytics.CreatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.CreatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) CreatePipelineAsync(ctx workflow.Context, input *iotanalytics.CreatePipelineInput) *IotanalyticsCreatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.CreatePipeline", input)
	return &IotanalyticsCreatePipelineFuture{Future: future}
}

func (a *IoTAnalyticsStub) DeleteChannel(ctx workflow.Context, input *iotanalytics.DeleteChannelInput) (*iotanalytics.DeleteChannelOutput, error) {
	var output iotanalytics.DeleteChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DeleteChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) DeleteChannelAsync(ctx workflow.Context, input *iotanalytics.DeleteChannelInput) *IotanalyticsDeleteChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DeleteChannel", input)
	return &IotanalyticsDeleteChannelFuture{Future: future}
}

func (a *IoTAnalyticsStub) DeleteDataset(ctx workflow.Context, input *iotanalytics.DeleteDatasetInput) (*iotanalytics.DeleteDatasetOutput, error) {
	var output iotanalytics.DeleteDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DeleteDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) DeleteDatasetAsync(ctx workflow.Context, input *iotanalytics.DeleteDatasetInput) *IotanalyticsDeleteDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DeleteDataset", input)
	return &IotanalyticsDeleteDatasetFuture{Future: future}
}

func (a *IoTAnalyticsStub) DeleteDatasetContent(ctx workflow.Context, input *iotanalytics.DeleteDatasetContentInput) (*iotanalytics.DeleteDatasetContentOutput, error) {
	var output iotanalytics.DeleteDatasetContentOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DeleteDatasetContent", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) DeleteDatasetContentAsync(ctx workflow.Context, input *iotanalytics.DeleteDatasetContentInput) *IotanalyticsDeleteDatasetContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DeleteDatasetContent", input)
	return &IotanalyticsDeleteDatasetContentFuture{Future: future}
}

func (a *IoTAnalyticsStub) DeleteDatastore(ctx workflow.Context, input *iotanalytics.DeleteDatastoreInput) (*iotanalytics.DeleteDatastoreOutput, error) {
	var output iotanalytics.DeleteDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DeleteDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) DeleteDatastoreAsync(ctx workflow.Context, input *iotanalytics.DeleteDatastoreInput) *IotanalyticsDeleteDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DeleteDatastore", input)
	return &IotanalyticsDeleteDatastoreFuture{Future: future}
}

func (a *IoTAnalyticsStub) DeletePipeline(ctx workflow.Context, input *iotanalytics.DeletePipelineInput) (*iotanalytics.DeletePipelineOutput, error) {
	var output iotanalytics.DeletePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DeletePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) DeletePipelineAsync(ctx workflow.Context, input *iotanalytics.DeletePipelineInput) *IotanalyticsDeletePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DeletePipeline", input)
	return &IotanalyticsDeletePipelineFuture{Future: future}
}

func (a *IoTAnalyticsStub) DescribeChannel(ctx workflow.Context, input *iotanalytics.DescribeChannelInput) (*iotanalytics.DescribeChannelOutput, error) {
	var output iotanalytics.DescribeChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DescribeChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) DescribeChannelAsync(ctx workflow.Context, input *iotanalytics.DescribeChannelInput) *IotanalyticsDescribeChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DescribeChannel", input)
	return &IotanalyticsDescribeChannelFuture{Future: future}
}

func (a *IoTAnalyticsStub) DescribeDataset(ctx workflow.Context, input *iotanalytics.DescribeDatasetInput) (*iotanalytics.DescribeDatasetOutput, error) {
	var output iotanalytics.DescribeDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DescribeDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) DescribeDatasetAsync(ctx workflow.Context, input *iotanalytics.DescribeDatasetInput) *IotanalyticsDescribeDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DescribeDataset", input)
	return &IotanalyticsDescribeDatasetFuture{Future: future}
}

func (a *IoTAnalyticsStub) DescribeDatastore(ctx workflow.Context, input *iotanalytics.DescribeDatastoreInput) (*iotanalytics.DescribeDatastoreOutput, error) {
	var output iotanalytics.DescribeDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DescribeDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) DescribeDatastoreAsync(ctx workflow.Context, input *iotanalytics.DescribeDatastoreInput) *IotanalyticsDescribeDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DescribeDatastore", input)
	return &IotanalyticsDescribeDatastoreFuture{Future: future}
}

func (a *IoTAnalyticsStub) DescribeLoggingOptions(ctx workflow.Context, input *iotanalytics.DescribeLoggingOptionsInput) (*iotanalytics.DescribeLoggingOptionsOutput, error) {
	var output iotanalytics.DescribeLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DescribeLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) DescribeLoggingOptionsAsync(ctx workflow.Context, input *iotanalytics.DescribeLoggingOptionsInput) *IotanalyticsDescribeLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DescribeLoggingOptions", input)
	return &IotanalyticsDescribeLoggingOptionsFuture{Future: future}
}

func (a *IoTAnalyticsStub) DescribePipeline(ctx workflow.Context, input *iotanalytics.DescribePipelineInput) (*iotanalytics.DescribePipelineOutput, error) {
	var output iotanalytics.DescribePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DescribePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) DescribePipelineAsync(ctx workflow.Context, input *iotanalytics.DescribePipelineInput) *IotanalyticsDescribePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.DescribePipeline", input)
	return &IotanalyticsDescribePipelineFuture{Future: future}
}

func (a *IoTAnalyticsStub) GetDatasetContent(ctx workflow.Context, input *iotanalytics.GetDatasetContentInput) (*iotanalytics.GetDatasetContentOutput, error) {
	var output iotanalytics.GetDatasetContentOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.GetDatasetContent", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) GetDatasetContentAsync(ctx workflow.Context, input *iotanalytics.GetDatasetContentInput) *IotanalyticsGetDatasetContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.GetDatasetContent", input)
	return &IotanalyticsGetDatasetContentFuture{Future: future}
}

func (a *IoTAnalyticsStub) ListChannels(ctx workflow.Context, input *iotanalytics.ListChannelsInput) (*iotanalytics.ListChannelsOutput, error) {
	var output iotanalytics.ListChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.ListChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) ListChannelsAsync(ctx workflow.Context, input *iotanalytics.ListChannelsInput) *IotanalyticsListChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.ListChannels", input)
	return &IotanalyticsListChannelsFuture{Future: future}
}

func (a *IoTAnalyticsStub) ListDatasetContents(ctx workflow.Context, input *iotanalytics.ListDatasetContentsInput) (*iotanalytics.ListDatasetContentsOutput, error) {
	var output iotanalytics.ListDatasetContentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.ListDatasetContents", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) ListDatasetContentsAsync(ctx workflow.Context, input *iotanalytics.ListDatasetContentsInput) *IotanalyticsListDatasetContentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.ListDatasetContents", input)
	return &IotanalyticsListDatasetContentsFuture{Future: future}
}

func (a *IoTAnalyticsStub) ListDatasets(ctx workflow.Context, input *iotanalytics.ListDatasetsInput) (*iotanalytics.ListDatasetsOutput, error) {
	var output iotanalytics.ListDatasetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.ListDatasets", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) ListDatasetsAsync(ctx workflow.Context, input *iotanalytics.ListDatasetsInput) *IotanalyticsListDatasetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.ListDatasets", input)
	return &IotanalyticsListDatasetsFuture{Future: future}
}

func (a *IoTAnalyticsStub) ListDatastores(ctx workflow.Context, input *iotanalytics.ListDatastoresInput) (*iotanalytics.ListDatastoresOutput, error) {
	var output iotanalytics.ListDatastoresOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.ListDatastores", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) ListDatastoresAsync(ctx workflow.Context, input *iotanalytics.ListDatastoresInput) *IotanalyticsListDatastoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.ListDatastores", input)
	return &IotanalyticsListDatastoresFuture{Future: future}
}

func (a *IoTAnalyticsStub) ListPipelines(ctx workflow.Context, input *iotanalytics.ListPipelinesInput) (*iotanalytics.ListPipelinesOutput, error) {
	var output iotanalytics.ListPipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.ListPipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) ListPipelinesAsync(ctx workflow.Context, input *iotanalytics.ListPipelinesInput) *IotanalyticsListPipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.ListPipelines", input)
	return &IotanalyticsListPipelinesFuture{Future: future}
}

func (a *IoTAnalyticsStub) ListTagsForResource(ctx workflow.Context, input *iotanalytics.ListTagsForResourceInput) (*iotanalytics.ListTagsForResourceOutput, error) {
	var output iotanalytics.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) ListTagsForResourceAsync(ctx workflow.Context, input *iotanalytics.ListTagsForResourceInput) *IotanalyticsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.ListTagsForResource", input)
	return &IotanalyticsListTagsForResourceFuture{Future: future}
}

func (a *IoTAnalyticsStub) PutLoggingOptions(ctx workflow.Context, input *iotanalytics.PutLoggingOptionsInput) (*iotanalytics.PutLoggingOptionsOutput, error) {
	var output iotanalytics.PutLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.PutLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) PutLoggingOptionsAsync(ctx workflow.Context, input *iotanalytics.PutLoggingOptionsInput) *IotanalyticsPutLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.PutLoggingOptions", input)
	return &IotanalyticsPutLoggingOptionsFuture{Future: future}
}

func (a *IoTAnalyticsStub) RunPipelineActivity(ctx workflow.Context, input *iotanalytics.RunPipelineActivityInput) (*iotanalytics.RunPipelineActivityOutput, error) {
	var output iotanalytics.RunPipelineActivityOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.RunPipelineActivity", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) RunPipelineActivityAsync(ctx workflow.Context, input *iotanalytics.RunPipelineActivityInput) *IotanalyticsRunPipelineActivityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.RunPipelineActivity", input)
	return &IotanalyticsRunPipelineActivityFuture{Future: future}
}

func (a *IoTAnalyticsStub) SampleChannelData(ctx workflow.Context, input *iotanalytics.SampleChannelDataInput) (*iotanalytics.SampleChannelDataOutput, error) {
	var output iotanalytics.SampleChannelDataOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.SampleChannelData", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) SampleChannelDataAsync(ctx workflow.Context, input *iotanalytics.SampleChannelDataInput) *IotanalyticsSampleChannelDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.SampleChannelData", input)
	return &IotanalyticsSampleChannelDataFuture{Future: future}
}

func (a *IoTAnalyticsStub) StartPipelineReprocessing(ctx workflow.Context, input *iotanalytics.StartPipelineReprocessingInput) (*iotanalytics.StartPipelineReprocessingOutput, error) {
	var output iotanalytics.StartPipelineReprocessingOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.StartPipelineReprocessing", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) StartPipelineReprocessingAsync(ctx workflow.Context, input *iotanalytics.StartPipelineReprocessingInput) *IotanalyticsStartPipelineReprocessingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.StartPipelineReprocessing", input)
	return &IotanalyticsStartPipelineReprocessingFuture{Future: future}
}

func (a *IoTAnalyticsStub) TagResource(ctx workflow.Context, input *iotanalytics.TagResourceInput) (*iotanalytics.TagResourceOutput, error) {
	var output iotanalytics.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) TagResourceAsync(ctx workflow.Context, input *iotanalytics.TagResourceInput) *IotanalyticsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.TagResource", input)
	return &IotanalyticsTagResourceFuture{Future: future}
}

func (a *IoTAnalyticsStub) UntagResource(ctx workflow.Context, input *iotanalytics.UntagResourceInput) (*iotanalytics.UntagResourceOutput, error) {
	var output iotanalytics.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) UntagResourceAsync(ctx workflow.Context, input *iotanalytics.UntagResourceInput) *IotanalyticsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.UntagResource", input)
	return &IotanalyticsUntagResourceFuture{Future: future}
}

func (a *IoTAnalyticsStub) UpdateChannel(ctx workflow.Context, input *iotanalytics.UpdateChannelInput) (*iotanalytics.UpdateChannelOutput, error) {
	var output iotanalytics.UpdateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.UpdateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) UpdateChannelAsync(ctx workflow.Context, input *iotanalytics.UpdateChannelInput) *IotanalyticsUpdateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.UpdateChannel", input)
	return &IotanalyticsUpdateChannelFuture{Future: future}
}

func (a *IoTAnalyticsStub) UpdateDataset(ctx workflow.Context, input *iotanalytics.UpdateDatasetInput) (*iotanalytics.UpdateDatasetOutput, error) {
	var output iotanalytics.UpdateDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.UpdateDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) UpdateDatasetAsync(ctx workflow.Context, input *iotanalytics.UpdateDatasetInput) *IotanalyticsUpdateDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.UpdateDataset", input)
	return &IotanalyticsUpdateDatasetFuture{Future: future}
}

func (a *IoTAnalyticsStub) UpdateDatastore(ctx workflow.Context, input *iotanalytics.UpdateDatastoreInput) (*iotanalytics.UpdateDatastoreOutput, error) {
	var output iotanalytics.UpdateDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.UpdateDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) UpdateDatastoreAsync(ctx workflow.Context, input *iotanalytics.UpdateDatastoreInput) *IotanalyticsUpdateDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.UpdateDatastore", input)
	return &IotanalyticsUpdateDatastoreFuture{Future: future}
}

func (a *IoTAnalyticsStub) UpdatePipeline(ctx workflow.Context, input *iotanalytics.UpdatePipelineInput) (*iotanalytics.UpdatePipelineOutput, error) {
	var output iotanalytics.UpdatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotanalytics.UpdatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTAnalyticsStub) UpdatePipelineAsync(ctx workflow.Context, input *iotanalytics.UpdatePipelineInput) *IotanalyticsUpdatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotanalytics.UpdatePipeline", input)
	return &IotanalyticsUpdatePipelineFuture{Future: future}
}
