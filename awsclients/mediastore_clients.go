// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/mediastore"
	"go.temporal.io/sdk/workflow"
)

type MediaStoreClient interface {
	CreateContainer(ctx workflow.Context, input *mediastore.CreateContainerInput) (*mediastore.CreateContainerOutput, error)
	CreateContainerAsync(ctx workflow.Context, input *mediastore.CreateContainerInput) *MediastoreCreateContainerFuture

	DeleteContainer(ctx workflow.Context, input *mediastore.DeleteContainerInput) (*mediastore.DeleteContainerOutput, error)
	DeleteContainerAsync(ctx workflow.Context, input *mediastore.DeleteContainerInput) *MediastoreDeleteContainerFuture

	DeleteContainerPolicy(ctx workflow.Context, input *mediastore.DeleteContainerPolicyInput) (*mediastore.DeleteContainerPolicyOutput, error)
	DeleteContainerPolicyAsync(ctx workflow.Context, input *mediastore.DeleteContainerPolicyInput) *MediastoreDeleteContainerPolicyFuture

	DeleteCorsPolicy(ctx workflow.Context, input *mediastore.DeleteCorsPolicyInput) (*mediastore.DeleteCorsPolicyOutput, error)
	DeleteCorsPolicyAsync(ctx workflow.Context, input *mediastore.DeleteCorsPolicyInput) *MediastoreDeleteCorsPolicyFuture

	DeleteLifecyclePolicy(ctx workflow.Context, input *mediastore.DeleteLifecyclePolicyInput) (*mediastore.DeleteLifecyclePolicyOutput, error)
	DeleteLifecyclePolicyAsync(ctx workflow.Context, input *mediastore.DeleteLifecyclePolicyInput) *MediastoreDeleteLifecyclePolicyFuture

	DeleteMetricPolicy(ctx workflow.Context, input *mediastore.DeleteMetricPolicyInput) (*mediastore.DeleteMetricPolicyOutput, error)
	DeleteMetricPolicyAsync(ctx workflow.Context, input *mediastore.DeleteMetricPolicyInput) *MediastoreDeleteMetricPolicyFuture

	DescribeContainer(ctx workflow.Context, input *mediastore.DescribeContainerInput) (*mediastore.DescribeContainerOutput, error)
	DescribeContainerAsync(ctx workflow.Context, input *mediastore.DescribeContainerInput) *MediastoreDescribeContainerFuture

	GetContainerPolicy(ctx workflow.Context, input *mediastore.GetContainerPolicyInput) (*mediastore.GetContainerPolicyOutput, error)
	GetContainerPolicyAsync(ctx workflow.Context, input *mediastore.GetContainerPolicyInput) *MediastoreGetContainerPolicyFuture

	GetCorsPolicy(ctx workflow.Context, input *mediastore.GetCorsPolicyInput) (*mediastore.GetCorsPolicyOutput, error)
	GetCorsPolicyAsync(ctx workflow.Context, input *mediastore.GetCorsPolicyInput) *MediastoreGetCorsPolicyFuture

	GetLifecyclePolicy(ctx workflow.Context, input *mediastore.GetLifecyclePolicyInput) (*mediastore.GetLifecyclePolicyOutput, error)
	GetLifecyclePolicyAsync(ctx workflow.Context, input *mediastore.GetLifecyclePolicyInput) *MediastoreGetLifecyclePolicyFuture

	GetMetricPolicy(ctx workflow.Context, input *mediastore.GetMetricPolicyInput) (*mediastore.GetMetricPolicyOutput, error)
	GetMetricPolicyAsync(ctx workflow.Context, input *mediastore.GetMetricPolicyInput) *MediastoreGetMetricPolicyFuture

	ListContainers(ctx workflow.Context, input *mediastore.ListContainersInput) (*mediastore.ListContainersOutput, error)
	ListContainersAsync(ctx workflow.Context, input *mediastore.ListContainersInput) *MediastoreListContainersFuture

	ListTagsForResource(ctx workflow.Context, input *mediastore.ListTagsForResourceInput) (*mediastore.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *mediastore.ListTagsForResourceInput) *MediastoreListTagsForResourceFuture

	PutContainerPolicy(ctx workflow.Context, input *mediastore.PutContainerPolicyInput) (*mediastore.PutContainerPolicyOutput, error)
	PutContainerPolicyAsync(ctx workflow.Context, input *mediastore.PutContainerPolicyInput) *MediastorePutContainerPolicyFuture

	PutCorsPolicy(ctx workflow.Context, input *mediastore.PutCorsPolicyInput) (*mediastore.PutCorsPolicyOutput, error)
	PutCorsPolicyAsync(ctx workflow.Context, input *mediastore.PutCorsPolicyInput) *MediastorePutCorsPolicyFuture

	PutLifecyclePolicy(ctx workflow.Context, input *mediastore.PutLifecyclePolicyInput) (*mediastore.PutLifecyclePolicyOutput, error)
	PutLifecyclePolicyAsync(ctx workflow.Context, input *mediastore.PutLifecyclePolicyInput) *MediastorePutLifecyclePolicyFuture

	PutMetricPolicy(ctx workflow.Context, input *mediastore.PutMetricPolicyInput) (*mediastore.PutMetricPolicyOutput, error)
	PutMetricPolicyAsync(ctx workflow.Context, input *mediastore.PutMetricPolicyInput) *MediastorePutMetricPolicyFuture

	StartAccessLogging(ctx workflow.Context, input *mediastore.StartAccessLoggingInput) (*mediastore.StartAccessLoggingOutput, error)
	StartAccessLoggingAsync(ctx workflow.Context, input *mediastore.StartAccessLoggingInput) *MediastoreStartAccessLoggingFuture

	StopAccessLogging(ctx workflow.Context, input *mediastore.StopAccessLoggingInput) (*mediastore.StopAccessLoggingOutput, error)
	StopAccessLoggingAsync(ctx workflow.Context, input *mediastore.StopAccessLoggingInput) *MediastoreStopAccessLoggingFuture

	TagResource(ctx workflow.Context, input *mediastore.TagResourceInput) (*mediastore.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *mediastore.TagResourceInput) *MediastoreTagResourceFuture

	UntagResource(ctx workflow.Context, input *mediastore.UntagResourceInput) (*mediastore.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *mediastore.UntagResourceInput) *MediastoreUntagResourceFuture
}

type MediaStoreStub struct{}

func NewMediaStoreStub() MediaStoreClient {
	return &MediaStoreStub{}
}

type MediastoreCreateContainerFuture struct {
	Future workflow.Future
}

func (r *MediastoreCreateContainerFuture) Get(ctx workflow.Context) (*mediastore.CreateContainerOutput, error) {
	var output mediastore.CreateContainerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreDeleteContainerFuture struct {
	Future workflow.Future
}

func (r *MediastoreDeleteContainerFuture) Get(ctx workflow.Context) (*mediastore.DeleteContainerOutput, error) {
	var output mediastore.DeleteContainerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreDeleteContainerPolicyFuture struct {
	Future workflow.Future
}

func (r *MediastoreDeleteContainerPolicyFuture) Get(ctx workflow.Context) (*mediastore.DeleteContainerPolicyOutput, error) {
	var output mediastore.DeleteContainerPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreDeleteCorsPolicyFuture struct {
	Future workflow.Future
}

func (r *MediastoreDeleteCorsPolicyFuture) Get(ctx workflow.Context) (*mediastore.DeleteCorsPolicyOutput, error) {
	var output mediastore.DeleteCorsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreDeleteLifecyclePolicyFuture struct {
	Future workflow.Future
}

func (r *MediastoreDeleteLifecyclePolicyFuture) Get(ctx workflow.Context) (*mediastore.DeleteLifecyclePolicyOutput, error) {
	var output mediastore.DeleteLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreDeleteMetricPolicyFuture struct {
	Future workflow.Future
}

func (r *MediastoreDeleteMetricPolicyFuture) Get(ctx workflow.Context) (*mediastore.DeleteMetricPolicyOutput, error) {
	var output mediastore.DeleteMetricPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreDescribeContainerFuture struct {
	Future workflow.Future
}

func (r *MediastoreDescribeContainerFuture) Get(ctx workflow.Context) (*mediastore.DescribeContainerOutput, error) {
	var output mediastore.DescribeContainerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreGetContainerPolicyFuture struct {
	Future workflow.Future
}

func (r *MediastoreGetContainerPolicyFuture) Get(ctx workflow.Context) (*mediastore.GetContainerPolicyOutput, error) {
	var output mediastore.GetContainerPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreGetCorsPolicyFuture struct {
	Future workflow.Future
}

func (r *MediastoreGetCorsPolicyFuture) Get(ctx workflow.Context) (*mediastore.GetCorsPolicyOutput, error) {
	var output mediastore.GetCorsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreGetLifecyclePolicyFuture struct {
	Future workflow.Future
}

func (r *MediastoreGetLifecyclePolicyFuture) Get(ctx workflow.Context) (*mediastore.GetLifecyclePolicyOutput, error) {
	var output mediastore.GetLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreGetMetricPolicyFuture struct {
	Future workflow.Future
}

func (r *MediastoreGetMetricPolicyFuture) Get(ctx workflow.Context) (*mediastore.GetMetricPolicyOutput, error) {
	var output mediastore.GetMetricPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreListContainersFuture struct {
	Future workflow.Future
}

func (r *MediastoreListContainersFuture) Get(ctx workflow.Context) (*mediastore.ListContainersOutput, error) {
	var output mediastore.ListContainersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *MediastoreListTagsForResourceFuture) Get(ctx workflow.Context) (*mediastore.ListTagsForResourceOutput, error) {
	var output mediastore.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastorePutContainerPolicyFuture struct {
	Future workflow.Future
}

func (r *MediastorePutContainerPolicyFuture) Get(ctx workflow.Context) (*mediastore.PutContainerPolicyOutput, error) {
	var output mediastore.PutContainerPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastorePutCorsPolicyFuture struct {
	Future workflow.Future
}

func (r *MediastorePutCorsPolicyFuture) Get(ctx workflow.Context) (*mediastore.PutCorsPolicyOutput, error) {
	var output mediastore.PutCorsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastorePutLifecyclePolicyFuture struct {
	Future workflow.Future
}

func (r *MediastorePutLifecyclePolicyFuture) Get(ctx workflow.Context) (*mediastore.PutLifecyclePolicyOutput, error) {
	var output mediastore.PutLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastorePutMetricPolicyFuture struct {
	Future workflow.Future
}

func (r *MediastorePutMetricPolicyFuture) Get(ctx workflow.Context) (*mediastore.PutMetricPolicyOutput, error) {
	var output mediastore.PutMetricPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreStartAccessLoggingFuture struct {
	Future workflow.Future
}

func (r *MediastoreStartAccessLoggingFuture) Get(ctx workflow.Context) (*mediastore.StartAccessLoggingOutput, error) {
	var output mediastore.StartAccessLoggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreStopAccessLoggingFuture struct {
	Future workflow.Future
}

func (r *MediastoreStopAccessLoggingFuture) Get(ctx workflow.Context) (*mediastore.StopAccessLoggingOutput, error) {
	var output mediastore.StopAccessLoggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreTagResourceFuture struct {
	Future workflow.Future
}

func (r *MediastoreTagResourceFuture) Get(ctx workflow.Context) (*mediastore.TagResourceOutput, error) {
	var output mediastore.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoreUntagResourceFuture struct {
	Future workflow.Future
}

func (r *MediastoreUntagResourceFuture) Get(ctx workflow.Context) (*mediastore.UntagResourceOutput, error) {
	var output mediastore.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) CreateContainer(ctx workflow.Context, input *mediastore.CreateContainerInput) (*mediastore.CreateContainerOutput, error) {
	var output mediastore.CreateContainerOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.CreateContainer", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) CreateContainerAsync(ctx workflow.Context, input *mediastore.CreateContainerInput) *MediastoreCreateContainerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.CreateContainer", input)
	return &MediastoreCreateContainerFuture{Future: future}
}

func (a *MediaStoreStub) DeleteContainer(ctx workflow.Context, input *mediastore.DeleteContainerInput) (*mediastore.DeleteContainerOutput, error) {
	var output mediastore.DeleteContainerOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.DeleteContainer", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) DeleteContainerAsync(ctx workflow.Context, input *mediastore.DeleteContainerInput) *MediastoreDeleteContainerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.DeleteContainer", input)
	return &MediastoreDeleteContainerFuture{Future: future}
}

func (a *MediaStoreStub) DeleteContainerPolicy(ctx workflow.Context, input *mediastore.DeleteContainerPolicyInput) (*mediastore.DeleteContainerPolicyOutput, error) {
	var output mediastore.DeleteContainerPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.DeleteContainerPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) DeleteContainerPolicyAsync(ctx workflow.Context, input *mediastore.DeleteContainerPolicyInput) *MediastoreDeleteContainerPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.DeleteContainerPolicy", input)
	return &MediastoreDeleteContainerPolicyFuture{Future: future}
}

func (a *MediaStoreStub) DeleteCorsPolicy(ctx workflow.Context, input *mediastore.DeleteCorsPolicyInput) (*mediastore.DeleteCorsPolicyOutput, error) {
	var output mediastore.DeleteCorsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.DeleteCorsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) DeleteCorsPolicyAsync(ctx workflow.Context, input *mediastore.DeleteCorsPolicyInput) *MediastoreDeleteCorsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.DeleteCorsPolicy", input)
	return &MediastoreDeleteCorsPolicyFuture{Future: future}
}

func (a *MediaStoreStub) DeleteLifecyclePolicy(ctx workflow.Context, input *mediastore.DeleteLifecyclePolicyInput) (*mediastore.DeleteLifecyclePolicyOutput, error) {
	var output mediastore.DeleteLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.DeleteLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) DeleteLifecyclePolicyAsync(ctx workflow.Context, input *mediastore.DeleteLifecyclePolicyInput) *MediastoreDeleteLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.DeleteLifecyclePolicy", input)
	return &MediastoreDeleteLifecyclePolicyFuture{Future: future}
}

func (a *MediaStoreStub) DeleteMetricPolicy(ctx workflow.Context, input *mediastore.DeleteMetricPolicyInput) (*mediastore.DeleteMetricPolicyOutput, error) {
	var output mediastore.DeleteMetricPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.DeleteMetricPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) DeleteMetricPolicyAsync(ctx workflow.Context, input *mediastore.DeleteMetricPolicyInput) *MediastoreDeleteMetricPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.DeleteMetricPolicy", input)
	return &MediastoreDeleteMetricPolicyFuture{Future: future}
}

func (a *MediaStoreStub) DescribeContainer(ctx workflow.Context, input *mediastore.DescribeContainerInput) (*mediastore.DescribeContainerOutput, error) {
	var output mediastore.DescribeContainerOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.DescribeContainer", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) DescribeContainerAsync(ctx workflow.Context, input *mediastore.DescribeContainerInput) *MediastoreDescribeContainerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.DescribeContainer", input)
	return &MediastoreDescribeContainerFuture{Future: future}
}

func (a *MediaStoreStub) GetContainerPolicy(ctx workflow.Context, input *mediastore.GetContainerPolicyInput) (*mediastore.GetContainerPolicyOutput, error) {
	var output mediastore.GetContainerPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.GetContainerPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) GetContainerPolicyAsync(ctx workflow.Context, input *mediastore.GetContainerPolicyInput) *MediastoreGetContainerPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.GetContainerPolicy", input)
	return &MediastoreGetContainerPolicyFuture{Future: future}
}

func (a *MediaStoreStub) GetCorsPolicy(ctx workflow.Context, input *mediastore.GetCorsPolicyInput) (*mediastore.GetCorsPolicyOutput, error) {
	var output mediastore.GetCorsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.GetCorsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) GetCorsPolicyAsync(ctx workflow.Context, input *mediastore.GetCorsPolicyInput) *MediastoreGetCorsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.GetCorsPolicy", input)
	return &MediastoreGetCorsPolicyFuture{Future: future}
}

func (a *MediaStoreStub) GetLifecyclePolicy(ctx workflow.Context, input *mediastore.GetLifecyclePolicyInput) (*mediastore.GetLifecyclePolicyOutput, error) {
	var output mediastore.GetLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.GetLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) GetLifecyclePolicyAsync(ctx workflow.Context, input *mediastore.GetLifecyclePolicyInput) *MediastoreGetLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.GetLifecyclePolicy", input)
	return &MediastoreGetLifecyclePolicyFuture{Future: future}
}

func (a *MediaStoreStub) GetMetricPolicy(ctx workflow.Context, input *mediastore.GetMetricPolicyInput) (*mediastore.GetMetricPolicyOutput, error) {
	var output mediastore.GetMetricPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.GetMetricPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) GetMetricPolicyAsync(ctx workflow.Context, input *mediastore.GetMetricPolicyInput) *MediastoreGetMetricPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.GetMetricPolicy", input)
	return &MediastoreGetMetricPolicyFuture{Future: future}
}

func (a *MediaStoreStub) ListContainers(ctx workflow.Context, input *mediastore.ListContainersInput) (*mediastore.ListContainersOutput, error) {
	var output mediastore.ListContainersOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.ListContainers", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) ListContainersAsync(ctx workflow.Context, input *mediastore.ListContainersInput) *MediastoreListContainersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.ListContainers", input)
	return &MediastoreListContainersFuture{Future: future}
}

func (a *MediaStoreStub) ListTagsForResource(ctx workflow.Context, input *mediastore.ListTagsForResourceInput) (*mediastore.ListTagsForResourceOutput, error) {
	var output mediastore.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) ListTagsForResourceAsync(ctx workflow.Context, input *mediastore.ListTagsForResourceInput) *MediastoreListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.ListTagsForResource", input)
	return &MediastoreListTagsForResourceFuture{Future: future}
}

func (a *MediaStoreStub) PutContainerPolicy(ctx workflow.Context, input *mediastore.PutContainerPolicyInput) (*mediastore.PutContainerPolicyOutput, error) {
	var output mediastore.PutContainerPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.PutContainerPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) PutContainerPolicyAsync(ctx workflow.Context, input *mediastore.PutContainerPolicyInput) *MediastorePutContainerPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.PutContainerPolicy", input)
	return &MediastorePutContainerPolicyFuture{Future: future}
}

func (a *MediaStoreStub) PutCorsPolicy(ctx workflow.Context, input *mediastore.PutCorsPolicyInput) (*mediastore.PutCorsPolicyOutput, error) {
	var output mediastore.PutCorsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.PutCorsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) PutCorsPolicyAsync(ctx workflow.Context, input *mediastore.PutCorsPolicyInput) *MediastorePutCorsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.PutCorsPolicy", input)
	return &MediastorePutCorsPolicyFuture{Future: future}
}

func (a *MediaStoreStub) PutLifecyclePolicy(ctx workflow.Context, input *mediastore.PutLifecyclePolicyInput) (*mediastore.PutLifecyclePolicyOutput, error) {
	var output mediastore.PutLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.PutLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) PutLifecyclePolicyAsync(ctx workflow.Context, input *mediastore.PutLifecyclePolicyInput) *MediastorePutLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.PutLifecyclePolicy", input)
	return &MediastorePutLifecyclePolicyFuture{Future: future}
}

func (a *MediaStoreStub) PutMetricPolicy(ctx workflow.Context, input *mediastore.PutMetricPolicyInput) (*mediastore.PutMetricPolicyOutput, error) {
	var output mediastore.PutMetricPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.PutMetricPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) PutMetricPolicyAsync(ctx workflow.Context, input *mediastore.PutMetricPolicyInput) *MediastorePutMetricPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.PutMetricPolicy", input)
	return &MediastorePutMetricPolicyFuture{Future: future}
}

func (a *MediaStoreStub) StartAccessLogging(ctx workflow.Context, input *mediastore.StartAccessLoggingInput) (*mediastore.StartAccessLoggingOutput, error) {
	var output mediastore.StartAccessLoggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.StartAccessLogging", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) StartAccessLoggingAsync(ctx workflow.Context, input *mediastore.StartAccessLoggingInput) *MediastoreStartAccessLoggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.StartAccessLogging", input)
	return &MediastoreStartAccessLoggingFuture{Future: future}
}

func (a *MediaStoreStub) StopAccessLogging(ctx workflow.Context, input *mediastore.StopAccessLoggingInput) (*mediastore.StopAccessLoggingOutput, error) {
	var output mediastore.StopAccessLoggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.StopAccessLogging", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) StopAccessLoggingAsync(ctx workflow.Context, input *mediastore.StopAccessLoggingInput) *MediastoreStopAccessLoggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.StopAccessLogging", input)
	return &MediastoreStopAccessLoggingFuture{Future: future}
}

func (a *MediaStoreStub) TagResource(ctx workflow.Context, input *mediastore.TagResourceInput) (*mediastore.TagResourceOutput, error) {
	var output mediastore.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) TagResourceAsync(ctx workflow.Context, input *mediastore.TagResourceInput) *MediastoreTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.TagResource", input)
	return &MediastoreTagResourceFuture{Future: future}
}

func (a *MediaStoreStub) UntagResource(ctx workflow.Context, input *mediastore.UntagResourceInput) (*mediastore.UntagResourceOutput, error) {
	var output mediastore.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastore.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreStub) UntagResourceAsync(ctx workflow.Context, input *mediastore.UntagResourceInput) *MediastoreUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastore.UntagResource", input)
	return &MediastoreUntagResourceFuture{Future: future}
}
