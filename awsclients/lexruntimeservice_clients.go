// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/lexruntimeservice"
	"go.temporal.io/sdk/workflow"
)

type LexRuntimeServiceClient interface {
	DeleteSession(ctx workflow.Context, input *lexruntimeservice.DeleteSessionInput) (*lexruntimeservice.DeleteSessionOutput, error)
	DeleteSessionAsync(ctx workflow.Context, input *lexruntimeservice.DeleteSessionInput) *LexruntimeserviceDeleteSessionFuture

	GetSession(ctx workflow.Context, input *lexruntimeservice.GetSessionInput) (*lexruntimeservice.GetSessionOutput, error)
	GetSessionAsync(ctx workflow.Context, input *lexruntimeservice.GetSessionInput) *LexruntimeserviceGetSessionFuture

	PostContent(ctx workflow.Context, input *lexruntimeservice.PostContentInput) (*lexruntimeservice.PostContentOutput, error)
	PostContentAsync(ctx workflow.Context, input *lexruntimeservice.PostContentInput) *LexruntimeservicePostContentFuture

	PostText(ctx workflow.Context, input *lexruntimeservice.PostTextInput) (*lexruntimeservice.PostTextOutput, error)
	PostTextAsync(ctx workflow.Context, input *lexruntimeservice.PostTextInput) *LexruntimeservicePostTextFuture

	PutSession(ctx workflow.Context, input *lexruntimeservice.PutSessionInput) (*lexruntimeservice.PutSessionOutput, error)
	PutSessionAsync(ctx workflow.Context, input *lexruntimeservice.PutSessionInput) *LexruntimeservicePutSessionFuture
}

type LexRuntimeServiceStub struct{}

func NewLexRuntimeServiceStub() LexRuntimeServiceClient {
	return &LexRuntimeServiceStub{}
}

type LexruntimeserviceDeleteSessionFuture struct {
	Future workflow.Future
}

func (r *LexruntimeserviceDeleteSessionFuture) Get(ctx workflow.Context) (*lexruntimeservice.DeleteSessionOutput, error) {
	var output lexruntimeservice.DeleteSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexruntimeserviceGetSessionFuture struct {
	Future workflow.Future
}

func (r *LexruntimeserviceGetSessionFuture) Get(ctx workflow.Context) (*lexruntimeservice.GetSessionOutput, error) {
	var output lexruntimeservice.GetSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexruntimeservicePostContentFuture struct {
	Future workflow.Future
}

func (r *LexruntimeservicePostContentFuture) Get(ctx workflow.Context) (*lexruntimeservice.PostContentOutput, error) {
	var output lexruntimeservice.PostContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexruntimeservicePostTextFuture struct {
	Future workflow.Future
}

func (r *LexruntimeservicePostTextFuture) Get(ctx workflow.Context) (*lexruntimeservice.PostTextOutput, error) {
	var output lexruntimeservice.PostTextOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexruntimeservicePutSessionFuture struct {
	Future workflow.Future
}

func (r *LexruntimeservicePutSessionFuture) Get(ctx workflow.Context) (*lexruntimeservice.PutSessionOutput, error) {
	var output lexruntimeservice.PutSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *LexRuntimeServiceStub) DeleteSession(ctx workflow.Context, input *lexruntimeservice.DeleteSessionInput) (*lexruntimeservice.DeleteSessionOutput, error) {
	var output lexruntimeservice.DeleteSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexruntimeservice.DeleteSession", input).Get(ctx, &output)
	return &output, err
}

func (a *LexRuntimeServiceStub) DeleteSessionAsync(ctx workflow.Context, input *lexruntimeservice.DeleteSessionInput) *LexruntimeserviceDeleteSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexruntimeservice.DeleteSession", input)
	return &LexruntimeserviceDeleteSessionFuture{Future: future}
}

func (a *LexRuntimeServiceStub) GetSession(ctx workflow.Context, input *lexruntimeservice.GetSessionInput) (*lexruntimeservice.GetSessionOutput, error) {
	var output lexruntimeservice.GetSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexruntimeservice.GetSession", input).Get(ctx, &output)
	return &output, err
}

func (a *LexRuntimeServiceStub) GetSessionAsync(ctx workflow.Context, input *lexruntimeservice.GetSessionInput) *LexruntimeserviceGetSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexruntimeservice.GetSession", input)
	return &LexruntimeserviceGetSessionFuture{Future: future}
}

func (a *LexRuntimeServiceStub) PostContent(ctx workflow.Context, input *lexruntimeservice.PostContentInput) (*lexruntimeservice.PostContentOutput, error) {
	var output lexruntimeservice.PostContentOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexruntimeservice.PostContent", input).Get(ctx, &output)
	return &output, err
}

func (a *LexRuntimeServiceStub) PostContentAsync(ctx workflow.Context, input *lexruntimeservice.PostContentInput) *LexruntimeservicePostContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexruntimeservice.PostContent", input)
	return &LexruntimeservicePostContentFuture{Future: future}
}

func (a *LexRuntimeServiceStub) PostText(ctx workflow.Context, input *lexruntimeservice.PostTextInput) (*lexruntimeservice.PostTextOutput, error) {
	var output lexruntimeservice.PostTextOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexruntimeservice.PostText", input).Get(ctx, &output)
	return &output, err
}

func (a *LexRuntimeServiceStub) PostTextAsync(ctx workflow.Context, input *lexruntimeservice.PostTextInput) *LexruntimeservicePostTextFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexruntimeservice.PostText", input)
	return &LexruntimeservicePostTextFuture{Future: future}
}

func (a *LexRuntimeServiceStub) PutSession(ctx workflow.Context, input *lexruntimeservice.PutSessionInput) (*lexruntimeservice.PutSessionOutput, error) {
	var output lexruntimeservice.PutSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexruntimeservice.PutSession", input).Get(ctx, &output)
	return &output, err
}

func (a *LexRuntimeServiceStub) PutSessionAsync(ctx workflow.Context, input *lexruntimeservice.PutSessionInput) *LexruntimeservicePutSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexruntimeservice.PutSession", input)
	return &LexruntimeservicePutSessionFuture{Future: future}
}
