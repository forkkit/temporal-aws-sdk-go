// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/elasticache"
	"go.temporal.io/sdk/workflow"
)

type ElastiCacheClient interface {
	AddTagsToResource(ctx workflow.Context, input *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error)
	AddTagsToResourceAsync(ctx workflow.Context, input *elasticache.AddTagsToResourceInput) *ElastiCacheAddTagsToResourceFuture

	AuthorizeCacheSecurityGroupIngress(ctx workflow.Context, input *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)
	AuthorizeCacheSecurityGroupIngressAsync(ctx workflow.Context, input *elasticache.AuthorizeCacheSecurityGroupIngressInput) *ElastiCacheAuthorizeCacheSecurityGroupIngressFuture

	BatchApplyUpdateAction(ctx workflow.Context, input *elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error)
	BatchApplyUpdateActionAsync(ctx workflow.Context, input *elasticache.BatchApplyUpdateActionInput) *ElastiCacheBatchApplyUpdateActionFuture

	BatchStopUpdateAction(ctx workflow.Context, input *elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error)
	BatchStopUpdateActionAsync(ctx workflow.Context, input *elasticache.BatchStopUpdateActionInput) *ElastiCacheBatchStopUpdateActionFuture

	CompleteMigration(ctx workflow.Context, input *elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error)
	CompleteMigrationAsync(ctx workflow.Context, input *elasticache.CompleteMigrationInput) *ElastiCacheCompleteMigrationFuture

	CopySnapshot(ctx workflow.Context, input *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error)
	CopySnapshotAsync(ctx workflow.Context, input *elasticache.CopySnapshotInput) *ElastiCacheCopySnapshotFuture

	CreateCacheCluster(ctx workflow.Context, input *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error)
	CreateCacheClusterAsync(ctx workflow.Context, input *elasticache.CreateCacheClusterInput) *ElastiCacheCreateCacheClusterFuture

	CreateCacheParameterGroup(ctx workflow.Context, input *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error)
	CreateCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheParameterGroupInput) *ElastiCacheCreateCacheParameterGroupFuture

	CreateCacheSecurityGroup(ctx workflow.Context, input *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error)
	CreateCacheSecurityGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheSecurityGroupInput) *ElastiCacheCreateCacheSecurityGroupFuture

	CreateCacheSubnetGroup(ctx workflow.Context, input *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error)
	CreateCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheSubnetGroupInput) *ElastiCacheCreateCacheSubnetGroupFuture

	CreateGlobalReplicationGroup(ctx workflow.Context, input *elasticache.CreateGlobalReplicationGroupInput) (*elasticache.CreateGlobalReplicationGroupOutput, error)
	CreateGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.CreateGlobalReplicationGroupInput) *ElastiCacheCreateGlobalReplicationGroupFuture

	CreateReplicationGroup(ctx workflow.Context, input *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error)
	CreateReplicationGroupAsync(ctx workflow.Context, input *elasticache.CreateReplicationGroupInput) *ElastiCacheCreateReplicationGroupFuture

	CreateSnapshot(ctx workflow.Context, input *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error)
	CreateSnapshotAsync(ctx workflow.Context, input *elasticache.CreateSnapshotInput) *ElastiCacheCreateSnapshotFuture

	CreateUser(ctx workflow.Context, input *elasticache.CreateUserInput) (*elasticache.CreateUserOutput, error)
	CreateUserAsync(ctx workflow.Context, input *elasticache.CreateUserInput) *ElastiCacheCreateUserFuture

	CreateUserGroup(ctx workflow.Context, input *elasticache.CreateUserGroupInput) (*elasticache.CreateUserGroupOutput, error)
	CreateUserGroupAsync(ctx workflow.Context, input *elasticache.CreateUserGroupInput) *ElastiCacheCreateUserGroupFuture

	DecreaseNodeGroupsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error)
	DecreaseNodeGroupsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) *ElastiCacheDecreaseNodeGroupsInGlobalReplicationGroupFuture

	DecreaseReplicaCount(ctx workflow.Context, input *elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error)
	DecreaseReplicaCountAsync(ctx workflow.Context, input *elasticache.DecreaseReplicaCountInput) *ElastiCacheDecreaseReplicaCountFuture

	DeleteCacheCluster(ctx workflow.Context, input *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error)
	DeleteCacheClusterAsync(ctx workflow.Context, input *elasticache.DeleteCacheClusterInput) *ElastiCacheDeleteCacheClusterFuture

	DeleteCacheParameterGroup(ctx workflow.Context, input *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error)
	DeleteCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheParameterGroupInput) *ElastiCacheDeleteCacheParameterGroupFuture

	DeleteCacheSecurityGroup(ctx workflow.Context, input *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error)
	DeleteCacheSecurityGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheSecurityGroupInput) *ElastiCacheDeleteCacheSecurityGroupFuture

	DeleteCacheSubnetGroup(ctx workflow.Context, input *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error)
	DeleteCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheSubnetGroupInput) *ElastiCacheDeleteCacheSubnetGroupFuture

	DeleteGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DeleteGlobalReplicationGroupInput) (*elasticache.DeleteGlobalReplicationGroupOutput, error)
	DeleteGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DeleteGlobalReplicationGroupInput) *ElastiCacheDeleteGlobalReplicationGroupFuture

	DeleteReplicationGroup(ctx workflow.Context, input *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error)
	DeleteReplicationGroupAsync(ctx workflow.Context, input *elasticache.DeleteReplicationGroupInput) *ElastiCacheDeleteReplicationGroupFuture

	DeleteSnapshot(ctx workflow.Context, input *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error)
	DeleteSnapshotAsync(ctx workflow.Context, input *elasticache.DeleteSnapshotInput) *ElastiCacheDeleteSnapshotFuture

	DeleteUser(ctx workflow.Context, input *elasticache.DeleteUserInput) (*elasticache.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *elasticache.DeleteUserInput) *ElastiCacheDeleteUserFuture

	DeleteUserGroup(ctx workflow.Context, input *elasticache.DeleteUserGroupInput) (*elasticache.DeleteUserGroupOutput, error)
	DeleteUserGroupAsync(ctx workflow.Context, input *elasticache.DeleteUserGroupInput) *ElastiCacheDeleteUserGroupFuture

	DescribeCacheClusters(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error)
	DescribeCacheClustersAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *ElastiCacheDescribeCacheClustersFuture

	DescribeCacheEngineVersions(ctx workflow.Context, input *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error)
	DescribeCacheEngineVersionsAsync(ctx workflow.Context, input *elasticache.DescribeCacheEngineVersionsInput) *ElastiCacheDescribeCacheEngineVersionsFuture

	DescribeCacheParameterGroups(ctx workflow.Context, input *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error)
	DescribeCacheParameterGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheParameterGroupsInput) *ElastiCacheDescribeCacheParameterGroupsFuture

	DescribeCacheParameters(ctx workflow.Context, input *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error)
	DescribeCacheParametersAsync(ctx workflow.Context, input *elasticache.DescribeCacheParametersInput) *ElastiCacheDescribeCacheParametersFuture

	DescribeCacheSecurityGroups(ctx workflow.Context, input *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error)
	DescribeCacheSecurityGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheSecurityGroupsInput) *ElastiCacheDescribeCacheSecurityGroupsFuture

	DescribeCacheSubnetGroups(ctx workflow.Context, input *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error)
	DescribeCacheSubnetGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheSubnetGroupsInput) *ElastiCacheDescribeCacheSubnetGroupsFuture

	DescribeEngineDefaultParameters(ctx workflow.Context, input *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error)
	DescribeEngineDefaultParametersAsync(ctx workflow.Context, input *elasticache.DescribeEngineDefaultParametersInput) *ElastiCacheDescribeEngineDefaultParametersFuture

	DescribeEvents(ctx workflow.Context, input *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error)
	DescribeEventsAsync(ctx workflow.Context, input *elasticache.DescribeEventsInput) *ElastiCacheDescribeEventsFuture

	DescribeGlobalReplicationGroups(ctx workflow.Context, input *elasticache.DescribeGlobalReplicationGroupsInput) (*elasticache.DescribeGlobalReplicationGroupsOutput, error)
	DescribeGlobalReplicationGroupsAsync(ctx workflow.Context, input *elasticache.DescribeGlobalReplicationGroupsInput) *ElastiCacheDescribeGlobalReplicationGroupsFuture

	DescribeReplicationGroups(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error)
	DescribeReplicationGroupsAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *ElastiCacheDescribeReplicationGroupsFuture

	DescribeReservedCacheNodes(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error)
	DescribeReservedCacheNodesAsync(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesInput) *ElastiCacheDescribeReservedCacheNodesFuture

	DescribeReservedCacheNodesOfferings(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)
	DescribeReservedCacheNodesOfferingsAsync(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesOfferingsInput) *ElastiCacheDescribeReservedCacheNodesOfferingsFuture

	DescribeServiceUpdates(ctx workflow.Context, input *elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error)
	DescribeServiceUpdatesAsync(ctx workflow.Context, input *elasticache.DescribeServiceUpdatesInput) *ElastiCacheDescribeServiceUpdatesFuture

	DescribeSnapshots(ctx workflow.Context, input *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error)
	DescribeSnapshotsAsync(ctx workflow.Context, input *elasticache.DescribeSnapshotsInput) *ElastiCacheDescribeSnapshotsFuture

	DescribeUpdateActions(ctx workflow.Context, input *elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error)
	DescribeUpdateActionsAsync(ctx workflow.Context, input *elasticache.DescribeUpdateActionsInput) *ElastiCacheDescribeUpdateActionsFuture

	DescribeUserGroups(ctx workflow.Context, input *elasticache.DescribeUserGroupsInput) (*elasticache.DescribeUserGroupsOutput, error)
	DescribeUserGroupsAsync(ctx workflow.Context, input *elasticache.DescribeUserGroupsInput) *ElastiCacheDescribeUserGroupsFuture

	DescribeUsers(ctx workflow.Context, input *elasticache.DescribeUsersInput) (*elasticache.DescribeUsersOutput, error)
	DescribeUsersAsync(ctx workflow.Context, input *elasticache.DescribeUsersInput) *ElastiCacheDescribeUsersFuture

	DisassociateGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DisassociateGlobalReplicationGroupInput) (*elasticache.DisassociateGlobalReplicationGroupOutput, error)
	DisassociateGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DisassociateGlobalReplicationGroupInput) *ElastiCacheDisassociateGlobalReplicationGroupFuture

	FailoverGlobalReplicationGroup(ctx workflow.Context, input *elasticache.FailoverGlobalReplicationGroupInput) (*elasticache.FailoverGlobalReplicationGroupOutput, error)
	FailoverGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.FailoverGlobalReplicationGroupInput) *ElastiCacheFailoverGlobalReplicationGroupFuture

	IncreaseNodeGroupsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error)
	IncreaseNodeGroupsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) *ElastiCacheIncreaseNodeGroupsInGlobalReplicationGroupFuture

	IncreaseReplicaCount(ctx workflow.Context, input *elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error)
	IncreaseReplicaCountAsync(ctx workflow.Context, input *elasticache.IncreaseReplicaCountInput) *ElastiCacheIncreaseReplicaCountFuture

	ListAllowedNodeTypeModifications(ctx workflow.Context, input *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)
	ListAllowedNodeTypeModificationsAsync(ctx workflow.Context, input *elasticache.ListAllowedNodeTypeModificationsInput) *ElastiCacheListAllowedNodeTypeModificationsFuture

	ListTagsForResource(ctx workflow.Context, input *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *elasticache.ListTagsForResourceInput) *ElastiCacheListTagsForResourceFuture

	ModifyCacheCluster(ctx workflow.Context, input *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error)
	ModifyCacheClusterAsync(ctx workflow.Context, input *elasticache.ModifyCacheClusterInput) *ElastiCacheModifyCacheClusterFuture

	ModifyCacheParameterGroup(ctx workflow.Context, input *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)
	ModifyCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.ModifyCacheParameterGroupInput) *ElastiCacheModifyCacheParameterGroupFuture

	ModifyCacheSubnetGroup(ctx workflow.Context, input *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error)
	ModifyCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.ModifyCacheSubnetGroupInput) *ElastiCacheModifyCacheSubnetGroupFuture

	ModifyGlobalReplicationGroup(ctx workflow.Context, input *elasticache.ModifyGlobalReplicationGroupInput) (*elasticache.ModifyGlobalReplicationGroupOutput, error)
	ModifyGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.ModifyGlobalReplicationGroupInput) *ElastiCacheModifyGlobalReplicationGroupFuture

	ModifyReplicationGroup(ctx workflow.Context, input *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error)
	ModifyReplicationGroupAsync(ctx workflow.Context, input *elasticache.ModifyReplicationGroupInput) *ElastiCacheModifyReplicationGroupFuture

	ModifyReplicationGroupShardConfiguration(ctx workflow.Context, input *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)
	ModifyReplicationGroupShardConfigurationAsync(ctx workflow.Context, input *elasticache.ModifyReplicationGroupShardConfigurationInput) *ElastiCacheModifyReplicationGroupShardConfigurationFuture

	ModifyUser(ctx workflow.Context, input *elasticache.ModifyUserInput) (*elasticache.ModifyUserOutput, error)
	ModifyUserAsync(ctx workflow.Context, input *elasticache.ModifyUserInput) *ElastiCacheModifyUserFuture

	ModifyUserGroup(ctx workflow.Context, input *elasticache.ModifyUserGroupInput) (*elasticache.ModifyUserGroupOutput, error)
	ModifyUserGroupAsync(ctx workflow.Context, input *elasticache.ModifyUserGroupInput) *ElastiCacheModifyUserGroupFuture

	PurchaseReservedCacheNodesOffering(ctx workflow.Context, input *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)
	PurchaseReservedCacheNodesOfferingAsync(ctx workflow.Context, input *elasticache.PurchaseReservedCacheNodesOfferingInput) *ElastiCachePurchaseReservedCacheNodesOfferingFuture

	RebalanceSlotsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error)
	RebalanceSlotsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) *ElastiCacheRebalanceSlotsInGlobalReplicationGroupFuture

	RebootCacheCluster(ctx workflow.Context, input *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error)
	RebootCacheClusterAsync(ctx workflow.Context, input *elasticache.RebootCacheClusterInput) *ElastiCacheRebootCacheClusterFuture

	RemoveTagsFromResource(ctx workflow.Context, input *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error)
	RemoveTagsFromResourceAsync(ctx workflow.Context, input *elasticache.RemoveTagsFromResourceInput) *ElastiCacheRemoveTagsFromResourceFuture

	ResetCacheParameterGroup(ctx workflow.Context, input *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)
	ResetCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.ResetCacheParameterGroupInput) *ElastiCacheResetCacheParameterGroupFuture

	RevokeCacheSecurityGroupIngress(ctx workflow.Context, input *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)
	RevokeCacheSecurityGroupIngressAsync(ctx workflow.Context, input *elasticache.RevokeCacheSecurityGroupIngressInput) *ElastiCacheRevokeCacheSecurityGroupIngressFuture

	StartMigration(ctx workflow.Context, input *elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error)
	StartMigrationAsync(ctx workflow.Context, input *elasticache.StartMigrationInput) *ElastiCacheStartMigrationFuture

	TestFailover(ctx workflow.Context, input *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error)
	TestFailoverAsync(ctx workflow.Context, input *elasticache.TestFailoverInput) *ElastiCacheTestFailoverFuture

	WaitUntilCacheClusterAvailable(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) error
	WaitUntilCacheClusterAvailableAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *VoidFuture

	WaitUntilCacheClusterDeleted(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) error
	WaitUntilCacheClusterDeletedAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *VoidFuture

	WaitUntilReplicationGroupAvailable(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) error
	WaitUntilReplicationGroupAvailableAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *VoidFuture

	WaitUntilReplicationGroupDeleted(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) error
	WaitUntilReplicationGroupDeletedAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *VoidFuture
}

type ElastiCacheStub struct{}

func NewElastiCacheStub() ElastiCacheClient {
	return &ElastiCacheStub{}
}

type ElastiCacheAddTagsToResourceFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheAddTagsToResourceFuture) Get(ctx workflow.Context) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheAuthorizeCacheSecurityGroupIngressFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheAuthorizeCacheSecurityGroupIngressFuture) Get(ctx workflow.Context) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	var output elasticache.AuthorizeCacheSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheBatchApplyUpdateActionFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheBatchApplyUpdateActionFuture) Get(ctx workflow.Context) (*elasticache.BatchApplyUpdateActionOutput, error) {
	var output elasticache.BatchApplyUpdateActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheBatchStopUpdateActionFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheBatchStopUpdateActionFuture) Get(ctx workflow.Context) (*elasticache.BatchStopUpdateActionOutput, error) {
	var output elasticache.BatchStopUpdateActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheCompleteMigrationFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheCompleteMigrationFuture) Get(ctx workflow.Context) (*elasticache.CompleteMigrationOutput, error) {
	var output elasticache.CompleteMigrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheCopySnapshotFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheCopySnapshotFuture) Get(ctx workflow.Context) (*elasticache.CopySnapshotOutput, error) {
	var output elasticache.CopySnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheCreateCacheClusterFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheCreateCacheClusterFuture) Get(ctx workflow.Context) (*elasticache.CreateCacheClusterOutput, error) {
	var output elasticache.CreateCacheClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheCreateCacheParameterGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheCreateCacheParameterGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateCacheParameterGroupOutput, error) {
	var output elasticache.CreateCacheParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheCreateCacheSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheCreateCacheSecurityGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	var output elasticache.CreateCacheSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheCreateCacheSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheCreateCacheSubnetGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	var output elasticache.CreateCacheSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheCreateGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheCreateGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateGlobalReplicationGroupOutput, error) {
	var output elasticache.CreateGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheCreateReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheCreateReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateReplicationGroupOutput, error) {
	var output elasticache.CreateReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheCreateSnapshotFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheCreateSnapshotFuture) Get(ctx workflow.Context) (*elasticache.CreateSnapshotOutput, error) {
	var output elasticache.CreateSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheCreateUserFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheCreateUserFuture) Get(ctx workflow.Context) (*elasticache.CreateUserOutput, error) {
	var output elasticache.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheCreateUserGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheCreateUserGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateUserGroupOutput, error) {
	var output elasticache.CreateUserGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDecreaseNodeGroupsInGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDecreaseNodeGroupsInGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	var output elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDecreaseReplicaCountFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDecreaseReplicaCountFuture) Get(ctx workflow.Context) (*elasticache.DecreaseReplicaCountOutput, error) {
	var output elasticache.DecreaseReplicaCountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDeleteCacheClusterFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDeleteCacheClusterFuture) Get(ctx workflow.Context) (*elasticache.DeleteCacheClusterOutput, error) {
	var output elasticache.DeleteCacheClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDeleteCacheParameterGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDeleteCacheParameterGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	var output elasticache.DeleteCacheParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDeleteCacheSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDeleteCacheSecurityGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	var output elasticache.DeleteCacheSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDeleteCacheSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDeleteCacheSubnetGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	var output elasticache.DeleteCacheSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDeleteGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDeleteGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteGlobalReplicationGroupOutput, error) {
	var output elasticache.DeleteGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDeleteReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDeleteReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteReplicationGroupOutput, error) {
	var output elasticache.DeleteReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDeleteSnapshotFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDeleteSnapshotFuture) Get(ctx workflow.Context) (*elasticache.DeleteSnapshotOutput, error) {
	var output elasticache.DeleteSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDeleteUserFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDeleteUserFuture) Get(ctx workflow.Context) (*elasticache.DeleteUserOutput, error) {
	var output elasticache.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDeleteUserGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDeleteUserGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteUserGroupOutput, error) {
	var output elasticache.DeleteUserGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeCacheClustersFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeCacheClustersFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheClustersOutput, error) {
	var output elasticache.DescribeCacheClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeCacheEngineVersionsFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeCacheEngineVersionsFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	var output elasticache.DescribeCacheEngineVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeCacheParameterGroupsFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeCacheParameterGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	var output elasticache.DescribeCacheParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeCacheParametersFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeCacheParametersFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheParametersOutput, error) {
	var output elasticache.DescribeCacheParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeCacheSecurityGroupsFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeCacheSecurityGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	var output elasticache.DescribeCacheSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeCacheSubnetGroupsFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeCacheSubnetGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	var output elasticache.DescribeCacheSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeEngineDefaultParametersFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeEngineDefaultParametersFuture) Get(ctx workflow.Context) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	var output elasticache.DescribeEngineDefaultParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeEventsFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeEventsFuture) Get(ctx workflow.Context) (*elasticache.DescribeEventsOutput, error) {
	var output elasticache.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeGlobalReplicationGroupsFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeGlobalReplicationGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeGlobalReplicationGroupsOutput, error) {
	var output elasticache.DescribeGlobalReplicationGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeReplicationGroupsFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeReplicationGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeReplicationGroupsOutput, error) {
	var output elasticache.DescribeReplicationGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeReservedCacheNodesFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeReservedCacheNodesFuture) Get(ctx workflow.Context) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	var output elasticache.DescribeReservedCacheNodesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeReservedCacheNodesOfferingsFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeReservedCacheNodesOfferingsFuture) Get(ctx workflow.Context) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	var output elasticache.DescribeReservedCacheNodesOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeServiceUpdatesFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeServiceUpdatesFuture) Get(ctx workflow.Context) (*elasticache.DescribeServiceUpdatesOutput, error) {
	var output elasticache.DescribeServiceUpdatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeSnapshotsFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeSnapshotsFuture) Get(ctx workflow.Context) (*elasticache.DescribeSnapshotsOutput, error) {
	var output elasticache.DescribeSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeUpdateActionsFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeUpdateActionsFuture) Get(ctx workflow.Context) (*elasticache.DescribeUpdateActionsOutput, error) {
	var output elasticache.DescribeUpdateActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeUserGroupsFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeUserGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeUserGroupsOutput, error) {
	var output elasticache.DescribeUserGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDescribeUsersFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDescribeUsersFuture) Get(ctx workflow.Context) (*elasticache.DescribeUsersOutput, error) {
	var output elasticache.DescribeUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheDisassociateGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheDisassociateGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.DisassociateGlobalReplicationGroupOutput, error) {
	var output elasticache.DisassociateGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheFailoverGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheFailoverGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.FailoverGlobalReplicationGroupOutput, error) {
	var output elasticache.FailoverGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheIncreaseNodeGroupsInGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheIncreaseNodeGroupsInGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	var output elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheIncreaseReplicaCountFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheIncreaseReplicaCountFuture) Get(ctx workflow.Context) (*elasticache.IncreaseReplicaCountOutput, error) {
	var output elasticache.IncreaseReplicaCountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheListAllowedNodeTypeModificationsFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheListAllowedNodeTypeModificationsFuture) Get(ctx workflow.Context) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	var output elasticache.ListAllowedNodeTypeModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheListTagsForResourceFuture) Get(ctx workflow.Context) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheModifyCacheClusterFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheModifyCacheClusterFuture) Get(ctx workflow.Context) (*elasticache.ModifyCacheClusterOutput, error) {
	var output elasticache.ModifyCacheClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheModifyCacheParameterGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheModifyCacheParameterGroupFuture) Get(ctx workflow.Context) (*elasticache.CacheParameterGroupNameMessage, error) {
	var output elasticache.CacheParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheModifyCacheSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheModifyCacheSubnetGroupFuture) Get(ctx workflow.Context) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	var output elasticache.ModifyCacheSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheModifyGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheModifyGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.ModifyGlobalReplicationGroupOutput, error) {
	var output elasticache.ModifyGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheModifyReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheModifyReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.ModifyReplicationGroupOutput, error) {
	var output elasticache.ModifyReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheModifyReplicationGroupShardConfigurationFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheModifyReplicationGroupShardConfigurationFuture) Get(ctx workflow.Context) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	var output elasticache.ModifyReplicationGroupShardConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheModifyUserFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheModifyUserFuture) Get(ctx workflow.Context) (*elasticache.ModifyUserOutput, error) {
	var output elasticache.ModifyUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheModifyUserGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheModifyUserGroupFuture) Get(ctx workflow.Context) (*elasticache.ModifyUserGroupOutput, error) {
	var output elasticache.ModifyUserGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCachePurchaseReservedCacheNodesOfferingFuture struct {
	Future workflow.Future
}

func (r *ElastiCachePurchaseReservedCacheNodesOfferingFuture) Get(ctx workflow.Context) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	var output elasticache.PurchaseReservedCacheNodesOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheRebalanceSlotsInGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheRebalanceSlotsInGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error) {
	var output elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheRebootCacheClusterFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheRebootCacheClusterFuture) Get(ctx workflow.Context) (*elasticache.RebootCacheClusterOutput, error) {
	var output elasticache.RebootCacheClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheRemoveTagsFromResourceFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheResetCacheParameterGroupFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheResetCacheParameterGroupFuture) Get(ctx workflow.Context) (*elasticache.CacheParameterGroupNameMessage, error) {
	var output elasticache.CacheParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheRevokeCacheSecurityGroupIngressFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheRevokeCacheSecurityGroupIngressFuture) Get(ctx workflow.Context) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	var output elasticache.RevokeCacheSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheStartMigrationFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheStartMigrationFuture) Get(ctx workflow.Context) (*elasticache.StartMigrationOutput, error) {
	var output elasticache.StartMigrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastiCacheTestFailoverFuture struct {
	Future workflow.Future
}

func (r *ElastiCacheTestFailoverFuture) Get(ctx workflow.Context) (*elasticache.TestFailoverOutput, error) {
	var output elasticache.TestFailoverOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) AddTagsToResource(ctx workflow.Context, input *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) AddTagsToResourceAsync(ctx workflow.Context, input *elasticache.AddTagsToResourceInput) *ElastiCacheAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.AddTagsToResource", input)
	return &ElastiCacheAddTagsToResourceFuture{Future: future}
}

func (a *ElastiCacheStub) AuthorizeCacheSecurityGroupIngress(ctx workflow.Context, input *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	var output elasticache.AuthorizeCacheSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.AuthorizeCacheSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) AuthorizeCacheSecurityGroupIngressAsync(ctx workflow.Context, input *elasticache.AuthorizeCacheSecurityGroupIngressInput) *ElastiCacheAuthorizeCacheSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.AuthorizeCacheSecurityGroupIngress", input)
	return &ElastiCacheAuthorizeCacheSecurityGroupIngressFuture{Future: future}
}

func (a *ElastiCacheStub) BatchApplyUpdateAction(ctx workflow.Context, input *elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error) {
	var output elasticache.BatchApplyUpdateActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.BatchApplyUpdateAction", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) BatchApplyUpdateActionAsync(ctx workflow.Context, input *elasticache.BatchApplyUpdateActionInput) *ElastiCacheBatchApplyUpdateActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.BatchApplyUpdateAction", input)
	return &ElastiCacheBatchApplyUpdateActionFuture{Future: future}
}

func (a *ElastiCacheStub) BatchStopUpdateAction(ctx workflow.Context, input *elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error) {
	var output elasticache.BatchStopUpdateActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.BatchStopUpdateAction", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) BatchStopUpdateActionAsync(ctx workflow.Context, input *elasticache.BatchStopUpdateActionInput) *ElastiCacheBatchStopUpdateActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.BatchStopUpdateAction", input)
	return &ElastiCacheBatchStopUpdateActionFuture{Future: future}
}

func (a *ElastiCacheStub) CompleteMigration(ctx workflow.Context, input *elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error) {
	var output elasticache.CompleteMigrationOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CompleteMigration", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CompleteMigrationAsync(ctx workflow.Context, input *elasticache.CompleteMigrationInput) *ElastiCacheCompleteMigrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CompleteMigration", input)
	return &ElastiCacheCompleteMigrationFuture{Future: future}
}

func (a *ElastiCacheStub) CopySnapshot(ctx workflow.Context, input *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error) {
	var output elasticache.CopySnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CopySnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CopySnapshotAsync(ctx workflow.Context, input *elasticache.CopySnapshotInput) *ElastiCacheCopySnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CopySnapshot", input)
	return &ElastiCacheCopySnapshotFuture{Future: future}
}

func (a *ElastiCacheStub) CreateCacheCluster(ctx workflow.Context, input *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error) {
	var output elasticache.CreateCacheClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateCacheClusterAsync(ctx workflow.Context, input *elasticache.CreateCacheClusterInput) *ElastiCacheCreateCacheClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheCluster", input)
	return &ElastiCacheCreateCacheClusterFuture{Future: future}
}

func (a *ElastiCacheStub) CreateCacheParameterGroup(ctx workflow.Context, input *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error) {
	var output elasticache.CreateCacheParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheParameterGroupInput) *ElastiCacheCreateCacheParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheParameterGroup", input)
	return &ElastiCacheCreateCacheParameterGroupFuture{Future: future}
}

func (a *ElastiCacheStub) CreateCacheSecurityGroup(ctx workflow.Context, input *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	var output elasticache.CreateCacheSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateCacheSecurityGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheSecurityGroupInput) *ElastiCacheCreateCacheSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheSecurityGroup", input)
	return &ElastiCacheCreateCacheSecurityGroupFuture{Future: future}
}

func (a *ElastiCacheStub) CreateCacheSubnetGroup(ctx workflow.Context, input *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	var output elasticache.CreateCacheSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheSubnetGroupInput) *ElastiCacheCreateCacheSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheSubnetGroup", input)
	return &ElastiCacheCreateCacheSubnetGroupFuture{Future: future}
}

func (a *ElastiCacheStub) CreateGlobalReplicationGroup(ctx workflow.Context, input *elasticache.CreateGlobalReplicationGroupInput) (*elasticache.CreateGlobalReplicationGroupOutput, error) {
	var output elasticache.CreateGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.CreateGlobalReplicationGroupInput) *ElastiCacheCreateGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateGlobalReplicationGroup", input)
	return &ElastiCacheCreateGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) CreateReplicationGroup(ctx workflow.Context, input *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error) {
	var output elasticache.CreateReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateReplicationGroupAsync(ctx workflow.Context, input *elasticache.CreateReplicationGroupInput) *ElastiCacheCreateReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateReplicationGroup", input)
	return &ElastiCacheCreateReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) CreateSnapshot(ctx workflow.Context, input *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error) {
	var output elasticache.CreateSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateSnapshotAsync(ctx workflow.Context, input *elasticache.CreateSnapshotInput) *ElastiCacheCreateSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateSnapshot", input)
	return &ElastiCacheCreateSnapshotFuture{Future: future}
}

func (a *ElastiCacheStub) CreateUser(ctx workflow.Context, input *elasticache.CreateUserInput) (*elasticache.CreateUserOutput, error) {
	var output elasticache.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateUserAsync(ctx workflow.Context, input *elasticache.CreateUserInput) *ElastiCacheCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateUser", input)
	return &ElastiCacheCreateUserFuture{Future: future}
}

func (a *ElastiCacheStub) CreateUserGroup(ctx workflow.Context, input *elasticache.CreateUserGroupInput) (*elasticache.CreateUserGroupOutput, error) {
	var output elasticache.CreateUserGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateUserGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateUserGroupAsync(ctx workflow.Context, input *elasticache.CreateUserGroupInput) *ElastiCacheCreateUserGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateUserGroup", input)
	return &ElastiCacheCreateUserGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DecreaseNodeGroupsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	var output elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DecreaseNodeGroupsInGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DecreaseNodeGroupsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) *ElastiCacheDecreaseNodeGroupsInGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DecreaseNodeGroupsInGlobalReplicationGroup", input)
	return &ElastiCacheDecreaseNodeGroupsInGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DecreaseReplicaCount(ctx workflow.Context, input *elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error) {
	var output elasticache.DecreaseReplicaCountOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DecreaseReplicaCount", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DecreaseReplicaCountAsync(ctx workflow.Context, input *elasticache.DecreaseReplicaCountInput) *ElastiCacheDecreaseReplicaCountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DecreaseReplicaCount", input)
	return &ElastiCacheDecreaseReplicaCountFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteCacheCluster(ctx workflow.Context, input *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error) {
	var output elasticache.DeleteCacheClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteCacheClusterAsync(ctx workflow.Context, input *elasticache.DeleteCacheClusterInput) *ElastiCacheDeleteCacheClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheCluster", input)
	return &ElastiCacheDeleteCacheClusterFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteCacheParameterGroup(ctx workflow.Context, input *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	var output elasticache.DeleteCacheParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheParameterGroupInput) *ElastiCacheDeleteCacheParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheParameterGroup", input)
	return &ElastiCacheDeleteCacheParameterGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteCacheSecurityGroup(ctx workflow.Context, input *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	var output elasticache.DeleteCacheSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteCacheSecurityGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheSecurityGroupInput) *ElastiCacheDeleteCacheSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheSecurityGroup", input)
	return &ElastiCacheDeleteCacheSecurityGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteCacheSubnetGroup(ctx workflow.Context, input *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	var output elasticache.DeleteCacheSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheSubnetGroupInput) *ElastiCacheDeleteCacheSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheSubnetGroup", input)
	return &ElastiCacheDeleteCacheSubnetGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DeleteGlobalReplicationGroupInput) (*elasticache.DeleteGlobalReplicationGroupOutput, error) {
	var output elasticache.DeleteGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DeleteGlobalReplicationGroupInput) *ElastiCacheDeleteGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteGlobalReplicationGroup", input)
	return &ElastiCacheDeleteGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteReplicationGroup(ctx workflow.Context, input *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error) {
	var output elasticache.DeleteReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteReplicationGroupAsync(ctx workflow.Context, input *elasticache.DeleteReplicationGroupInput) *ElastiCacheDeleteReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteReplicationGroup", input)
	return &ElastiCacheDeleteReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteSnapshot(ctx workflow.Context, input *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error) {
	var output elasticache.DeleteSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteSnapshotAsync(ctx workflow.Context, input *elasticache.DeleteSnapshotInput) *ElastiCacheDeleteSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteSnapshot", input)
	return &ElastiCacheDeleteSnapshotFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteUser(ctx workflow.Context, input *elasticache.DeleteUserInput) (*elasticache.DeleteUserOutput, error) {
	var output elasticache.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteUserAsync(ctx workflow.Context, input *elasticache.DeleteUserInput) *ElastiCacheDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteUser", input)
	return &ElastiCacheDeleteUserFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteUserGroup(ctx workflow.Context, input *elasticache.DeleteUserGroupInput) (*elasticache.DeleteUserGroupOutput, error) {
	var output elasticache.DeleteUserGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteUserGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteUserGroupAsync(ctx workflow.Context, input *elasticache.DeleteUserGroupInput) *ElastiCacheDeleteUserGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteUserGroup", input)
	return &ElastiCacheDeleteUserGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeCacheClusters(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error) {
	var output elasticache.DescribeCacheClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeCacheClustersAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *ElastiCacheDescribeCacheClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheClusters", input)
	return &ElastiCacheDescribeCacheClustersFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeCacheEngineVersions(ctx workflow.Context, input *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	var output elasticache.DescribeCacheEngineVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheEngineVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeCacheEngineVersionsAsync(ctx workflow.Context, input *elasticache.DescribeCacheEngineVersionsInput) *ElastiCacheDescribeCacheEngineVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheEngineVersions", input)
	return &ElastiCacheDescribeCacheEngineVersionsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeCacheParameterGroups(ctx workflow.Context, input *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	var output elasticache.DescribeCacheParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeCacheParameterGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheParameterGroupsInput) *ElastiCacheDescribeCacheParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheParameterGroups", input)
	return &ElastiCacheDescribeCacheParameterGroupsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeCacheParameters(ctx workflow.Context, input *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error) {
	var output elasticache.DescribeCacheParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeCacheParametersAsync(ctx workflow.Context, input *elasticache.DescribeCacheParametersInput) *ElastiCacheDescribeCacheParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheParameters", input)
	return &ElastiCacheDescribeCacheParametersFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeCacheSecurityGroups(ctx workflow.Context, input *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	var output elasticache.DescribeCacheSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeCacheSecurityGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheSecurityGroupsInput) *ElastiCacheDescribeCacheSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheSecurityGroups", input)
	return &ElastiCacheDescribeCacheSecurityGroupsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeCacheSubnetGroups(ctx workflow.Context, input *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	var output elasticache.DescribeCacheSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeCacheSubnetGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheSubnetGroupsInput) *ElastiCacheDescribeCacheSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheSubnetGroups", input)
	return &ElastiCacheDescribeCacheSubnetGroupsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeEngineDefaultParameters(ctx workflow.Context, input *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	var output elasticache.DescribeEngineDefaultParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeEngineDefaultParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeEngineDefaultParametersAsync(ctx workflow.Context, input *elasticache.DescribeEngineDefaultParametersInput) *ElastiCacheDescribeEngineDefaultParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeEngineDefaultParameters", input)
	return &ElastiCacheDescribeEngineDefaultParametersFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeEvents(ctx workflow.Context, input *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error) {
	var output elasticache.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeEventsAsync(ctx workflow.Context, input *elasticache.DescribeEventsInput) *ElastiCacheDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeEvents", input)
	return &ElastiCacheDescribeEventsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeGlobalReplicationGroups(ctx workflow.Context, input *elasticache.DescribeGlobalReplicationGroupsInput) (*elasticache.DescribeGlobalReplicationGroupsOutput, error) {
	var output elasticache.DescribeGlobalReplicationGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeGlobalReplicationGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeGlobalReplicationGroupsAsync(ctx workflow.Context, input *elasticache.DescribeGlobalReplicationGroupsInput) *ElastiCacheDescribeGlobalReplicationGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeGlobalReplicationGroups", input)
	return &ElastiCacheDescribeGlobalReplicationGroupsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeReplicationGroups(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error) {
	var output elasticache.DescribeReplicationGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeReplicationGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeReplicationGroupsAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *ElastiCacheDescribeReplicationGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeReplicationGroups", input)
	return &ElastiCacheDescribeReplicationGroupsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeReservedCacheNodes(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	var output elasticache.DescribeReservedCacheNodesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeReservedCacheNodes", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeReservedCacheNodesAsync(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesInput) *ElastiCacheDescribeReservedCacheNodesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeReservedCacheNodes", input)
	return &ElastiCacheDescribeReservedCacheNodesFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeReservedCacheNodesOfferings(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	var output elasticache.DescribeReservedCacheNodesOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeReservedCacheNodesOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeReservedCacheNodesOfferingsAsync(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesOfferingsInput) *ElastiCacheDescribeReservedCacheNodesOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeReservedCacheNodesOfferings", input)
	return &ElastiCacheDescribeReservedCacheNodesOfferingsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeServiceUpdates(ctx workflow.Context, input *elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error) {
	var output elasticache.DescribeServiceUpdatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeServiceUpdates", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeServiceUpdatesAsync(ctx workflow.Context, input *elasticache.DescribeServiceUpdatesInput) *ElastiCacheDescribeServiceUpdatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeServiceUpdates", input)
	return &ElastiCacheDescribeServiceUpdatesFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeSnapshots(ctx workflow.Context, input *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error) {
	var output elasticache.DescribeSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeSnapshotsAsync(ctx workflow.Context, input *elasticache.DescribeSnapshotsInput) *ElastiCacheDescribeSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeSnapshots", input)
	return &ElastiCacheDescribeSnapshotsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeUpdateActions(ctx workflow.Context, input *elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error) {
	var output elasticache.DescribeUpdateActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeUpdateActions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeUpdateActionsAsync(ctx workflow.Context, input *elasticache.DescribeUpdateActionsInput) *ElastiCacheDescribeUpdateActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeUpdateActions", input)
	return &ElastiCacheDescribeUpdateActionsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeUserGroups(ctx workflow.Context, input *elasticache.DescribeUserGroupsInput) (*elasticache.DescribeUserGroupsOutput, error) {
	var output elasticache.DescribeUserGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeUserGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeUserGroupsAsync(ctx workflow.Context, input *elasticache.DescribeUserGroupsInput) *ElastiCacheDescribeUserGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeUserGroups", input)
	return &ElastiCacheDescribeUserGroupsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeUsers(ctx workflow.Context, input *elasticache.DescribeUsersInput) (*elasticache.DescribeUsersOutput, error) {
	var output elasticache.DescribeUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeUsersAsync(ctx workflow.Context, input *elasticache.DescribeUsersInput) *ElastiCacheDescribeUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeUsers", input)
	return &ElastiCacheDescribeUsersFuture{Future: future}
}

func (a *ElastiCacheStub) DisassociateGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DisassociateGlobalReplicationGroupInput) (*elasticache.DisassociateGlobalReplicationGroupOutput, error) {
	var output elasticache.DisassociateGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DisassociateGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DisassociateGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DisassociateGlobalReplicationGroupInput) *ElastiCacheDisassociateGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DisassociateGlobalReplicationGroup", input)
	return &ElastiCacheDisassociateGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) FailoverGlobalReplicationGroup(ctx workflow.Context, input *elasticache.FailoverGlobalReplicationGroupInput) (*elasticache.FailoverGlobalReplicationGroupOutput, error) {
	var output elasticache.FailoverGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.FailoverGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) FailoverGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.FailoverGlobalReplicationGroupInput) *ElastiCacheFailoverGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.FailoverGlobalReplicationGroup", input)
	return &ElastiCacheFailoverGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) IncreaseNodeGroupsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	var output elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.IncreaseNodeGroupsInGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) IncreaseNodeGroupsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) *ElastiCacheIncreaseNodeGroupsInGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.IncreaseNodeGroupsInGlobalReplicationGroup", input)
	return &ElastiCacheIncreaseNodeGroupsInGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) IncreaseReplicaCount(ctx workflow.Context, input *elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error) {
	var output elasticache.IncreaseReplicaCountOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.IncreaseReplicaCount", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) IncreaseReplicaCountAsync(ctx workflow.Context, input *elasticache.IncreaseReplicaCountInput) *ElastiCacheIncreaseReplicaCountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.IncreaseReplicaCount", input)
	return &ElastiCacheIncreaseReplicaCountFuture{Future: future}
}

func (a *ElastiCacheStub) ListAllowedNodeTypeModifications(ctx workflow.Context, input *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	var output elasticache.ListAllowedNodeTypeModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ListAllowedNodeTypeModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ListAllowedNodeTypeModificationsAsync(ctx workflow.Context, input *elasticache.ListAllowedNodeTypeModificationsInput) *ElastiCacheListAllowedNodeTypeModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ListAllowedNodeTypeModifications", input)
	return &ElastiCacheListAllowedNodeTypeModificationsFuture{Future: future}
}

func (a *ElastiCacheStub) ListTagsForResource(ctx workflow.Context, input *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ListTagsForResourceAsync(ctx workflow.Context, input *elasticache.ListTagsForResourceInput) *ElastiCacheListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ListTagsForResource", input)
	return &ElastiCacheListTagsForResourceFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyCacheCluster(ctx workflow.Context, input *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error) {
	var output elasticache.ModifyCacheClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyCacheCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyCacheClusterAsync(ctx workflow.Context, input *elasticache.ModifyCacheClusterInput) *ElastiCacheModifyCacheClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyCacheCluster", input)
	return &ElastiCacheModifyCacheClusterFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyCacheParameterGroup(ctx workflow.Context, input *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	var output elasticache.CacheParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyCacheParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.ModifyCacheParameterGroupInput) *ElastiCacheModifyCacheParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyCacheParameterGroup", input)
	return &ElastiCacheModifyCacheParameterGroupFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyCacheSubnetGroup(ctx workflow.Context, input *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	var output elasticache.ModifyCacheSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyCacheSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.ModifyCacheSubnetGroupInput) *ElastiCacheModifyCacheSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyCacheSubnetGroup", input)
	return &ElastiCacheModifyCacheSubnetGroupFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyGlobalReplicationGroup(ctx workflow.Context, input *elasticache.ModifyGlobalReplicationGroupInput) (*elasticache.ModifyGlobalReplicationGroupOutput, error) {
	var output elasticache.ModifyGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.ModifyGlobalReplicationGroupInput) *ElastiCacheModifyGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyGlobalReplicationGroup", input)
	return &ElastiCacheModifyGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyReplicationGroup(ctx workflow.Context, input *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error) {
	var output elasticache.ModifyReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyReplicationGroupAsync(ctx workflow.Context, input *elasticache.ModifyReplicationGroupInput) *ElastiCacheModifyReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyReplicationGroup", input)
	return &ElastiCacheModifyReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyReplicationGroupShardConfiguration(ctx workflow.Context, input *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	var output elasticache.ModifyReplicationGroupShardConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyReplicationGroupShardConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyReplicationGroupShardConfigurationAsync(ctx workflow.Context, input *elasticache.ModifyReplicationGroupShardConfigurationInput) *ElastiCacheModifyReplicationGroupShardConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyReplicationGroupShardConfiguration", input)
	return &ElastiCacheModifyReplicationGroupShardConfigurationFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyUser(ctx workflow.Context, input *elasticache.ModifyUserInput) (*elasticache.ModifyUserOutput, error) {
	var output elasticache.ModifyUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyUserAsync(ctx workflow.Context, input *elasticache.ModifyUserInput) *ElastiCacheModifyUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyUser", input)
	return &ElastiCacheModifyUserFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyUserGroup(ctx workflow.Context, input *elasticache.ModifyUserGroupInput) (*elasticache.ModifyUserGroupOutput, error) {
	var output elasticache.ModifyUserGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyUserGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyUserGroupAsync(ctx workflow.Context, input *elasticache.ModifyUserGroupInput) *ElastiCacheModifyUserGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyUserGroup", input)
	return &ElastiCacheModifyUserGroupFuture{Future: future}
}

func (a *ElastiCacheStub) PurchaseReservedCacheNodesOffering(ctx workflow.Context, input *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	var output elasticache.PurchaseReservedCacheNodesOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.PurchaseReservedCacheNodesOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) PurchaseReservedCacheNodesOfferingAsync(ctx workflow.Context, input *elasticache.PurchaseReservedCacheNodesOfferingInput) *ElastiCachePurchaseReservedCacheNodesOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.PurchaseReservedCacheNodesOffering", input)
	return &ElastiCachePurchaseReservedCacheNodesOfferingFuture{Future: future}
}

func (a *ElastiCacheStub) RebalanceSlotsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error) {
	var output elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.RebalanceSlotsInGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) RebalanceSlotsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) *ElastiCacheRebalanceSlotsInGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.RebalanceSlotsInGlobalReplicationGroup", input)
	return &ElastiCacheRebalanceSlotsInGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) RebootCacheCluster(ctx workflow.Context, input *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error) {
	var output elasticache.RebootCacheClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.RebootCacheCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) RebootCacheClusterAsync(ctx workflow.Context, input *elasticache.RebootCacheClusterInput) *ElastiCacheRebootCacheClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.RebootCacheCluster", input)
	return &ElastiCacheRebootCacheClusterFuture{Future: future}
}

func (a *ElastiCacheStub) RemoveTagsFromResource(ctx workflow.Context, input *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *elasticache.RemoveTagsFromResourceInput) *ElastiCacheRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.RemoveTagsFromResource", input)
	return &ElastiCacheRemoveTagsFromResourceFuture{Future: future}
}

func (a *ElastiCacheStub) ResetCacheParameterGroup(ctx workflow.Context, input *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	var output elasticache.CacheParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ResetCacheParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ResetCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.ResetCacheParameterGroupInput) *ElastiCacheResetCacheParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ResetCacheParameterGroup", input)
	return &ElastiCacheResetCacheParameterGroupFuture{Future: future}
}

func (a *ElastiCacheStub) RevokeCacheSecurityGroupIngress(ctx workflow.Context, input *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	var output elasticache.RevokeCacheSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.RevokeCacheSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) RevokeCacheSecurityGroupIngressAsync(ctx workflow.Context, input *elasticache.RevokeCacheSecurityGroupIngressInput) *ElastiCacheRevokeCacheSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.RevokeCacheSecurityGroupIngress", input)
	return &ElastiCacheRevokeCacheSecurityGroupIngressFuture{Future: future}
}

func (a *ElastiCacheStub) StartMigration(ctx workflow.Context, input *elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error) {
	var output elasticache.StartMigrationOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.StartMigration", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) StartMigrationAsync(ctx workflow.Context, input *elasticache.StartMigrationInput) *ElastiCacheStartMigrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.StartMigration", input)
	return &ElastiCacheStartMigrationFuture{Future: future}
}

func (a *ElastiCacheStub) TestFailover(ctx workflow.Context, input *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error) {
	var output elasticache.TestFailoverOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.TestFailover", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) TestFailoverAsync(ctx workflow.Context, input *elasticache.TestFailoverInput) *ElastiCacheTestFailoverFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.TestFailover", input)
	return &ElastiCacheTestFailoverFuture{Future: future}
}

func (a *ElastiCacheStub) WaitUntilCacheClusterAvailable(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilCacheClusterAvailable", input).Get(ctx, nil)
}

func (a *ElastiCacheStub) WaitUntilCacheClusterAvailableAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilCacheClusterAvailable", input)
	return NewVoidFuture(future)
}

func (a *ElastiCacheStub) WaitUntilCacheClusterDeleted(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilCacheClusterDeleted", input).Get(ctx, nil)
}

func (a *ElastiCacheStub) WaitUntilCacheClusterDeletedAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilCacheClusterDeleted", input)
	return NewVoidFuture(future)
}

func (a *ElastiCacheStub) WaitUntilReplicationGroupAvailable(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilReplicationGroupAvailable", input).Get(ctx, nil)
}

func (a *ElastiCacheStub) WaitUntilReplicationGroupAvailableAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilReplicationGroupAvailable", input)
	return NewVoidFuture(future)
}

func (a *ElastiCacheStub) WaitUntilReplicationGroupDeleted(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilReplicationGroupDeleted", input).Get(ctx, nil)
}

func (a *ElastiCacheStub) WaitUntilReplicationGroupDeletedAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilReplicationGroupDeleted", input)
	return NewVoidFuture(future)
}
