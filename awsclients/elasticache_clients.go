// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/elasticache"
	"go.temporal.io/sdk/workflow"
)

type ElastiCacheClient interface {
	AddTagsToResource(ctx workflow.Context, input *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error)
	AddTagsToResourceAsync(ctx workflow.Context, input *elasticache.AddTagsToResourceInput) *ElasticacheAddTagsToResourceFuture

	AuthorizeCacheSecurityGroupIngress(ctx workflow.Context, input *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)
	AuthorizeCacheSecurityGroupIngressAsync(ctx workflow.Context, input *elasticache.AuthorizeCacheSecurityGroupIngressInput) *ElasticacheAuthorizeCacheSecurityGroupIngressFuture

	BatchApplyUpdateAction(ctx workflow.Context, input *elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error)
	BatchApplyUpdateActionAsync(ctx workflow.Context, input *elasticache.BatchApplyUpdateActionInput) *ElasticacheBatchApplyUpdateActionFuture

	BatchStopUpdateAction(ctx workflow.Context, input *elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error)
	BatchStopUpdateActionAsync(ctx workflow.Context, input *elasticache.BatchStopUpdateActionInput) *ElasticacheBatchStopUpdateActionFuture

	CompleteMigration(ctx workflow.Context, input *elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error)
	CompleteMigrationAsync(ctx workflow.Context, input *elasticache.CompleteMigrationInput) *ElasticacheCompleteMigrationFuture

	CopySnapshot(ctx workflow.Context, input *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error)
	CopySnapshotAsync(ctx workflow.Context, input *elasticache.CopySnapshotInput) *ElasticacheCopySnapshotFuture

	CreateCacheCluster(ctx workflow.Context, input *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error)
	CreateCacheClusterAsync(ctx workflow.Context, input *elasticache.CreateCacheClusterInput) *ElasticacheCreateCacheClusterFuture

	CreateCacheParameterGroup(ctx workflow.Context, input *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error)
	CreateCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheParameterGroupInput) *ElasticacheCreateCacheParameterGroupFuture

	CreateCacheSecurityGroup(ctx workflow.Context, input *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error)
	CreateCacheSecurityGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheSecurityGroupInput) *ElasticacheCreateCacheSecurityGroupFuture

	CreateCacheSubnetGroup(ctx workflow.Context, input *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error)
	CreateCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheSubnetGroupInput) *ElasticacheCreateCacheSubnetGroupFuture

	CreateGlobalReplicationGroup(ctx workflow.Context, input *elasticache.CreateGlobalReplicationGroupInput) (*elasticache.CreateGlobalReplicationGroupOutput, error)
	CreateGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.CreateGlobalReplicationGroupInput) *ElasticacheCreateGlobalReplicationGroupFuture

	CreateReplicationGroup(ctx workflow.Context, input *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error)
	CreateReplicationGroupAsync(ctx workflow.Context, input *elasticache.CreateReplicationGroupInput) *ElasticacheCreateReplicationGroupFuture

	CreateSnapshot(ctx workflow.Context, input *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error)
	CreateSnapshotAsync(ctx workflow.Context, input *elasticache.CreateSnapshotInput) *ElasticacheCreateSnapshotFuture

	CreateUser(ctx workflow.Context, input *elasticache.CreateUserInput) (*elasticache.CreateUserOutput, error)
	CreateUserAsync(ctx workflow.Context, input *elasticache.CreateUserInput) *ElasticacheCreateUserFuture

	CreateUserGroup(ctx workflow.Context, input *elasticache.CreateUserGroupInput) (*elasticache.CreateUserGroupOutput, error)
	CreateUserGroupAsync(ctx workflow.Context, input *elasticache.CreateUserGroupInput) *ElasticacheCreateUserGroupFuture

	DecreaseNodeGroupsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error)
	DecreaseNodeGroupsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) *ElasticacheDecreaseNodeGroupsInGlobalReplicationGroupFuture

	DecreaseReplicaCount(ctx workflow.Context, input *elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error)
	DecreaseReplicaCountAsync(ctx workflow.Context, input *elasticache.DecreaseReplicaCountInput) *ElasticacheDecreaseReplicaCountFuture

	DeleteCacheCluster(ctx workflow.Context, input *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error)
	DeleteCacheClusterAsync(ctx workflow.Context, input *elasticache.DeleteCacheClusterInput) *ElasticacheDeleteCacheClusterFuture

	DeleteCacheParameterGroup(ctx workflow.Context, input *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error)
	DeleteCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheParameterGroupInput) *ElasticacheDeleteCacheParameterGroupFuture

	DeleteCacheSecurityGroup(ctx workflow.Context, input *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error)
	DeleteCacheSecurityGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheSecurityGroupInput) *ElasticacheDeleteCacheSecurityGroupFuture

	DeleteCacheSubnetGroup(ctx workflow.Context, input *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error)
	DeleteCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheSubnetGroupInput) *ElasticacheDeleteCacheSubnetGroupFuture

	DeleteGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DeleteGlobalReplicationGroupInput) (*elasticache.DeleteGlobalReplicationGroupOutput, error)
	DeleteGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DeleteGlobalReplicationGroupInput) *ElasticacheDeleteGlobalReplicationGroupFuture

	DeleteReplicationGroup(ctx workflow.Context, input *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error)
	DeleteReplicationGroupAsync(ctx workflow.Context, input *elasticache.DeleteReplicationGroupInput) *ElasticacheDeleteReplicationGroupFuture

	DeleteSnapshot(ctx workflow.Context, input *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error)
	DeleteSnapshotAsync(ctx workflow.Context, input *elasticache.DeleteSnapshotInput) *ElasticacheDeleteSnapshotFuture

	DeleteUser(ctx workflow.Context, input *elasticache.DeleteUserInput) (*elasticache.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *elasticache.DeleteUserInput) *ElasticacheDeleteUserFuture

	DeleteUserGroup(ctx workflow.Context, input *elasticache.DeleteUserGroupInput) (*elasticache.DeleteUserGroupOutput, error)
	DeleteUserGroupAsync(ctx workflow.Context, input *elasticache.DeleteUserGroupInput) *ElasticacheDeleteUserGroupFuture

	DescribeCacheClusters(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error)
	DescribeCacheClustersAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *ElasticacheDescribeCacheClustersFuture

	DescribeCacheEngineVersions(ctx workflow.Context, input *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error)
	DescribeCacheEngineVersionsAsync(ctx workflow.Context, input *elasticache.DescribeCacheEngineVersionsInput) *ElasticacheDescribeCacheEngineVersionsFuture

	DescribeCacheParameterGroups(ctx workflow.Context, input *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error)
	DescribeCacheParameterGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheParameterGroupsInput) *ElasticacheDescribeCacheParameterGroupsFuture

	DescribeCacheParameters(ctx workflow.Context, input *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error)
	DescribeCacheParametersAsync(ctx workflow.Context, input *elasticache.DescribeCacheParametersInput) *ElasticacheDescribeCacheParametersFuture

	DescribeCacheSecurityGroups(ctx workflow.Context, input *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error)
	DescribeCacheSecurityGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheSecurityGroupsInput) *ElasticacheDescribeCacheSecurityGroupsFuture

	DescribeCacheSubnetGroups(ctx workflow.Context, input *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error)
	DescribeCacheSubnetGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheSubnetGroupsInput) *ElasticacheDescribeCacheSubnetGroupsFuture

	DescribeEngineDefaultParameters(ctx workflow.Context, input *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error)
	DescribeEngineDefaultParametersAsync(ctx workflow.Context, input *elasticache.DescribeEngineDefaultParametersInput) *ElasticacheDescribeEngineDefaultParametersFuture

	DescribeEvents(ctx workflow.Context, input *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error)
	DescribeEventsAsync(ctx workflow.Context, input *elasticache.DescribeEventsInput) *ElasticacheDescribeEventsFuture

	DescribeGlobalReplicationGroups(ctx workflow.Context, input *elasticache.DescribeGlobalReplicationGroupsInput) (*elasticache.DescribeGlobalReplicationGroupsOutput, error)
	DescribeGlobalReplicationGroupsAsync(ctx workflow.Context, input *elasticache.DescribeGlobalReplicationGroupsInput) *ElasticacheDescribeGlobalReplicationGroupsFuture

	DescribeReplicationGroups(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error)
	DescribeReplicationGroupsAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *ElasticacheDescribeReplicationGroupsFuture

	DescribeReservedCacheNodes(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error)
	DescribeReservedCacheNodesAsync(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesInput) *ElasticacheDescribeReservedCacheNodesFuture

	DescribeReservedCacheNodesOfferings(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)
	DescribeReservedCacheNodesOfferingsAsync(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesOfferingsInput) *ElasticacheDescribeReservedCacheNodesOfferingsFuture

	DescribeServiceUpdates(ctx workflow.Context, input *elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error)
	DescribeServiceUpdatesAsync(ctx workflow.Context, input *elasticache.DescribeServiceUpdatesInput) *ElasticacheDescribeServiceUpdatesFuture

	DescribeSnapshots(ctx workflow.Context, input *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error)
	DescribeSnapshotsAsync(ctx workflow.Context, input *elasticache.DescribeSnapshotsInput) *ElasticacheDescribeSnapshotsFuture

	DescribeUpdateActions(ctx workflow.Context, input *elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error)
	DescribeUpdateActionsAsync(ctx workflow.Context, input *elasticache.DescribeUpdateActionsInput) *ElasticacheDescribeUpdateActionsFuture

	DescribeUserGroups(ctx workflow.Context, input *elasticache.DescribeUserGroupsInput) (*elasticache.DescribeUserGroupsOutput, error)
	DescribeUserGroupsAsync(ctx workflow.Context, input *elasticache.DescribeUserGroupsInput) *ElasticacheDescribeUserGroupsFuture

	DescribeUsers(ctx workflow.Context, input *elasticache.DescribeUsersInput) (*elasticache.DescribeUsersOutput, error)
	DescribeUsersAsync(ctx workflow.Context, input *elasticache.DescribeUsersInput) *ElasticacheDescribeUsersFuture

	DisassociateGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DisassociateGlobalReplicationGroupInput) (*elasticache.DisassociateGlobalReplicationGroupOutput, error)
	DisassociateGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DisassociateGlobalReplicationGroupInput) *ElasticacheDisassociateGlobalReplicationGroupFuture

	FailoverGlobalReplicationGroup(ctx workflow.Context, input *elasticache.FailoverGlobalReplicationGroupInput) (*elasticache.FailoverGlobalReplicationGroupOutput, error)
	FailoverGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.FailoverGlobalReplicationGroupInput) *ElasticacheFailoverGlobalReplicationGroupFuture

	IncreaseNodeGroupsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error)
	IncreaseNodeGroupsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) *ElasticacheIncreaseNodeGroupsInGlobalReplicationGroupFuture

	IncreaseReplicaCount(ctx workflow.Context, input *elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error)
	IncreaseReplicaCountAsync(ctx workflow.Context, input *elasticache.IncreaseReplicaCountInput) *ElasticacheIncreaseReplicaCountFuture

	ListAllowedNodeTypeModifications(ctx workflow.Context, input *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)
	ListAllowedNodeTypeModificationsAsync(ctx workflow.Context, input *elasticache.ListAllowedNodeTypeModificationsInput) *ElasticacheListAllowedNodeTypeModificationsFuture

	ListTagsForResource(ctx workflow.Context, input *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *elasticache.ListTagsForResourceInput) *ElasticacheListTagsForResourceFuture

	ModifyCacheCluster(ctx workflow.Context, input *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error)
	ModifyCacheClusterAsync(ctx workflow.Context, input *elasticache.ModifyCacheClusterInput) *ElasticacheModifyCacheClusterFuture

	ModifyCacheParameterGroup(ctx workflow.Context, input *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)
	ModifyCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.ModifyCacheParameterGroupInput) *ElasticacheModifyCacheParameterGroupFuture

	ModifyCacheSubnetGroup(ctx workflow.Context, input *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error)
	ModifyCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.ModifyCacheSubnetGroupInput) *ElasticacheModifyCacheSubnetGroupFuture

	ModifyGlobalReplicationGroup(ctx workflow.Context, input *elasticache.ModifyGlobalReplicationGroupInput) (*elasticache.ModifyGlobalReplicationGroupOutput, error)
	ModifyGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.ModifyGlobalReplicationGroupInput) *ElasticacheModifyGlobalReplicationGroupFuture

	ModifyReplicationGroup(ctx workflow.Context, input *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error)
	ModifyReplicationGroupAsync(ctx workflow.Context, input *elasticache.ModifyReplicationGroupInput) *ElasticacheModifyReplicationGroupFuture

	ModifyReplicationGroupShardConfiguration(ctx workflow.Context, input *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)
	ModifyReplicationGroupShardConfigurationAsync(ctx workflow.Context, input *elasticache.ModifyReplicationGroupShardConfigurationInput) *ElasticacheModifyReplicationGroupShardConfigurationFuture

	ModifyUser(ctx workflow.Context, input *elasticache.ModifyUserInput) (*elasticache.ModifyUserOutput, error)
	ModifyUserAsync(ctx workflow.Context, input *elasticache.ModifyUserInput) *ElasticacheModifyUserFuture

	ModifyUserGroup(ctx workflow.Context, input *elasticache.ModifyUserGroupInput) (*elasticache.ModifyUserGroupOutput, error)
	ModifyUserGroupAsync(ctx workflow.Context, input *elasticache.ModifyUserGroupInput) *ElasticacheModifyUserGroupFuture

	PurchaseReservedCacheNodesOffering(ctx workflow.Context, input *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)
	PurchaseReservedCacheNodesOfferingAsync(ctx workflow.Context, input *elasticache.PurchaseReservedCacheNodesOfferingInput) *ElasticachePurchaseReservedCacheNodesOfferingFuture

	RebalanceSlotsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error)
	RebalanceSlotsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) *ElasticacheRebalanceSlotsInGlobalReplicationGroupFuture

	RebootCacheCluster(ctx workflow.Context, input *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error)
	RebootCacheClusterAsync(ctx workflow.Context, input *elasticache.RebootCacheClusterInput) *ElasticacheRebootCacheClusterFuture

	RemoveTagsFromResource(ctx workflow.Context, input *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error)
	RemoveTagsFromResourceAsync(ctx workflow.Context, input *elasticache.RemoveTagsFromResourceInput) *ElasticacheRemoveTagsFromResourceFuture

	ResetCacheParameterGroup(ctx workflow.Context, input *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)
	ResetCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.ResetCacheParameterGroupInput) *ElasticacheResetCacheParameterGroupFuture

	RevokeCacheSecurityGroupIngress(ctx workflow.Context, input *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)
	RevokeCacheSecurityGroupIngressAsync(ctx workflow.Context, input *elasticache.RevokeCacheSecurityGroupIngressInput) *ElasticacheRevokeCacheSecurityGroupIngressFuture

	StartMigration(ctx workflow.Context, input *elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error)
	StartMigrationAsync(ctx workflow.Context, input *elasticache.StartMigrationInput) *ElasticacheStartMigrationFuture

	TestFailover(ctx workflow.Context, input *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error)
	TestFailoverAsync(ctx workflow.Context, input *elasticache.TestFailoverInput) *ElasticacheTestFailoverFuture

	WaitUntilCacheClusterAvailable(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) error
	WaitUntilCacheClusterAvailableAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *VoidFuture

	WaitUntilCacheClusterDeleted(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) error
	WaitUntilCacheClusterDeletedAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *VoidFuture

	WaitUntilReplicationGroupAvailable(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) error
	WaitUntilReplicationGroupAvailableAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *VoidFuture

	WaitUntilReplicationGroupDeleted(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) error
	WaitUntilReplicationGroupDeletedAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *VoidFuture
}

type ElastiCacheStub struct{}

func NewElastiCacheStub() ElastiCacheClient {
	return &ElastiCacheStub{}
}

type ElasticacheAddTagsToResourceFuture struct {
	Future workflow.Future
}

func (r *ElasticacheAddTagsToResourceFuture) Get(ctx workflow.Context) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheAuthorizeCacheSecurityGroupIngressFuture struct {
	Future workflow.Future
}

func (r *ElasticacheAuthorizeCacheSecurityGroupIngressFuture) Get(ctx workflow.Context) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	var output elasticache.AuthorizeCacheSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheBatchApplyUpdateActionFuture struct {
	Future workflow.Future
}

func (r *ElasticacheBatchApplyUpdateActionFuture) Get(ctx workflow.Context) (*elasticache.BatchApplyUpdateActionOutput, error) {
	var output elasticache.BatchApplyUpdateActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheBatchStopUpdateActionFuture struct {
	Future workflow.Future
}

func (r *ElasticacheBatchStopUpdateActionFuture) Get(ctx workflow.Context) (*elasticache.BatchStopUpdateActionOutput, error) {
	var output elasticache.BatchStopUpdateActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheCompleteMigrationFuture struct {
	Future workflow.Future
}

func (r *ElasticacheCompleteMigrationFuture) Get(ctx workflow.Context) (*elasticache.CompleteMigrationOutput, error) {
	var output elasticache.CompleteMigrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheCopySnapshotFuture struct {
	Future workflow.Future
}

func (r *ElasticacheCopySnapshotFuture) Get(ctx workflow.Context) (*elasticache.CopySnapshotOutput, error) {
	var output elasticache.CopySnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheCreateCacheClusterFuture struct {
	Future workflow.Future
}

func (r *ElasticacheCreateCacheClusterFuture) Get(ctx workflow.Context) (*elasticache.CreateCacheClusterOutput, error) {
	var output elasticache.CreateCacheClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheCreateCacheParameterGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheCreateCacheParameterGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateCacheParameterGroupOutput, error) {
	var output elasticache.CreateCacheParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheCreateCacheSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheCreateCacheSecurityGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	var output elasticache.CreateCacheSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheCreateCacheSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheCreateCacheSubnetGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	var output elasticache.CreateCacheSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheCreateGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheCreateGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateGlobalReplicationGroupOutput, error) {
	var output elasticache.CreateGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheCreateReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheCreateReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateReplicationGroupOutput, error) {
	var output elasticache.CreateReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheCreateSnapshotFuture struct {
	Future workflow.Future
}

func (r *ElasticacheCreateSnapshotFuture) Get(ctx workflow.Context) (*elasticache.CreateSnapshotOutput, error) {
	var output elasticache.CreateSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheCreateUserFuture struct {
	Future workflow.Future
}

func (r *ElasticacheCreateUserFuture) Get(ctx workflow.Context) (*elasticache.CreateUserOutput, error) {
	var output elasticache.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheCreateUserGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheCreateUserGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateUserGroupOutput, error) {
	var output elasticache.CreateUserGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDecreaseNodeGroupsInGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDecreaseNodeGroupsInGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	var output elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDecreaseReplicaCountFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDecreaseReplicaCountFuture) Get(ctx workflow.Context) (*elasticache.DecreaseReplicaCountOutput, error) {
	var output elasticache.DecreaseReplicaCountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDeleteCacheClusterFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDeleteCacheClusterFuture) Get(ctx workflow.Context) (*elasticache.DeleteCacheClusterOutput, error) {
	var output elasticache.DeleteCacheClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDeleteCacheParameterGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDeleteCacheParameterGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	var output elasticache.DeleteCacheParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDeleteCacheSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDeleteCacheSecurityGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	var output elasticache.DeleteCacheSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDeleteCacheSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDeleteCacheSubnetGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	var output elasticache.DeleteCacheSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDeleteGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDeleteGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteGlobalReplicationGroupOutput, error) {
	var output elasticache.DeleteGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDeleteReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDeleteReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteReplicationGroupOutput, error) {
	var output elasticache.DeleteReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDeleteSnapshotFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDeleteSnapshotFuture) Get(ctx workflow.Context) (*elasticache.DeleteSnapshotOutput, error) {
	var output elasticache.DeleteSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDeleteUserFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDeleteUserFuture) Get(ctx workflow.Context) (*elasticache.DeleteUserOutput, error) {
	var output elasticache.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDeleteUserGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDeleteUserGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteUserGroupOutput, error) {
	var output elasticache.DeleteUserGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeCacheClustersFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeCacheClustersFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheClustersOutput, error) {
	var output elasticache.DescribeCacheClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeCacheEngineVersionsFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeCacheEngineVersionsFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	var output elasticache.DescribeCacheEngineVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeCacheParameterGroupsFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeCacheParameterGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	var output elasticache.DescribeCacheParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeCacheParametersFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeCacheParametersFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheParametersOutput, error) {
	var output elasticache.DescribeCacheParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeCacheSecurityGroupsFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeCacheSecurityGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	var output elasticache.DescribeCacheSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeCacheSubnetGroupsFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeCacheSubnetGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	var output elasticache.DescribeCacheSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeEngineDefaultParametersFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeEngineDefaultParametersFuture) Get(ctx workflow.Context) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	var output elasticache.DescribeEngineDefaultParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeEventsFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeEventsFuture) Get(ctx workflow.Context) (*elasticache.DescribeEventsOutput, error) {
	var output elasticache.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeGlobalReplicationGroupsFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeGlobalReplicationGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeGlobalReplicationGroupsOutput, error) {
	var output elasticache.DescribeGlobalReplicationGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeReplicationGroupsFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeReplicationGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeReplicationGroupsOutput, error) {
	var output elasticache.DescribeReplicationGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeReservedCacheNodesFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeReservedCacheNodesFuture) Get(ctx workflow.Context) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	var output elasticache.DescribeReservedCacheNodesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeReservedCacheNodesOfferingsFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeReservedCacheNodesOfferingsFuture) Get(ctx workflow.Context) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	var output elasticache.DescribeReservedCacheNodesOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeServiceUpdatesFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeServiceUpdatesFuture) Get(ctx workflow.Context) (*elasticache.DescribeServiceUpdatesOutput, error) {
	var output elasticache.DescribeServiceUpdatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeSnapshotsFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeSnapshotsFuture) Get(ctx workflow.Context) (*elasticache.DescribeSnapshotsOutput, error) {
	var output elasticache.DescribeSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeUpdateActionsFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeUpdateActionsFuture) Get(ctx workflow.Context) (*elasticache.DescribeUpdateActionsOutput, error) {
	var output elasticache.DescribeUpdateActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeUserGroupsFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeUserGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeUserGroupsOutput, error) {
	var output elasticache.DescribeUserGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDescribeUsersFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDescribeUsersFuture) Get(ctx workflow.Context) (*elasticache.DescribeUsersOutput, error) {
	var output elasticache.DescribeUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheDisassociateGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheDisassociateGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.DisassociateGlobalReplicationGroupOutput, error) {
	var output elasticache.DisassociateGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheFailoverGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheFailoverGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.FailoverGlobalReplicationGroupOutput, error) {
	var output elasticache.FailoverGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheIncreaseNodeGroupsInGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheIncreaseNodeGroupsInGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	var output elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheIncreaseReplicaCountFuture struct {
	Future workflow.Future
}

func (r *ElasticacheIncreaseReplicaCountFuture) Get(ctx workflow.Context) (*elasticache.IncreaseReplicaCountOutput, error) {
	var output elasticache.IncreaseReplicaCountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheListAllowedNodeTypeModificationsFuture struct {
	Future workflow.Future
}

func (r *ElasticacheListAllowedNodeTypeModificationsFuture) Get(ctx workflow.Context) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	var output elasticache.ListAllowedNodeTypeModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ElasticacheListTagsForResourceFuture) Get(ctx workflow.Context) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheModifyCacheClusterFuture struct {
	Future workflow.Future
}

func (r *ElasticacheModifyCacheClusterFuture) Get(ctx workflow.Context) (*elasticache.ModifyCacheClusterOutput, error) {
	var output elasticache.ModifyCacheClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheModifyCacheParameterGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheModifyCacheParameterGroupFuture) Get(ctx workflow.Context) (*elasticache.CacheParameterGroupNameMessage, error) {
	var output elasticache.CacheParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheModifyCacheSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheModifyCacheSubnetGroupFuture) Get(ctx workflow.Context) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	var output elasticache.ModifyCacheSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheModifyGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheModifyGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.ModifyGlobalReplicationGroupOutput, error) {
	var output elasticache.ModifyGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheModifyReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheModifyReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.ModifyReplicationGroupOutput, error) {
	var output elasticache.ModifyReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheModifyReplicationGroupShardConfigurationFuture struct {
	Future workflow.Future
}

func (r *ElasticacheModifyReplicationGroupShardConfigurationFuture) Get(ctx workflow.Context) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	var output elasticache.ModifyReplicationGroupShardConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheModifyUserFuture struct {
	Future workflow.Future
}

func (r *ElasticacheModifyUserFuture) Get(ctx workflow.Context) (*elasticache.ModifyUserOutput, error) {
	var output elasticache.ModifyUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheModifyUserGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheModifyUserGroupFuture) Get(ctx workflow.Context) (*elasticache.ModifyUserGroupOutput, error) {
	var output elasticache.ModifyUserGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticachePurchaseReservedCacheNodesOfferingFuture struct {
	Future workflow.Future
}

func (r *ElasticachePurchaseReservedCacheNodesOfferingFuture) Get(ctx workflow.Context) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	var output elasticache.PurchaseReservedCacheNodesOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheRebalanceSlotsInGlobalReplicationGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheRebalanceSlotsInGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error) {
	var output elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheRebootCacheClusterFuture struct {
	Future workflow.Future
}

func (r *ElasticacheRebootCacheClusterFuture) Get(ctx workflow.Context) (*elasticache.RebootCacheClusterOutput, error) {
	var output elasticache.RebootCacheClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheRemoveTagsFromResourceFuture struct {
	Future workflow.Future
}

func (r *ElasticacheRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheResetCacheParameterGroupFuture struct {
	Future workflow.Future
}

func (r *ElasticacheResetCacheParameterGroupFuture) Get(ctx workflow.Context) (*elasticache.CacheParameterGroupNameMessage, error) {
	var output elasticache.CacheParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheRevokeCacheSecurityGroupIngressFuture struct {
	Future workflow.Future
}

func (r *ElasticacheRevokeCacheSecurityGroupIngressFuture) Get(ctx workflow.Context) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	var output elasticache.RevokeCacheSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheStartMigrationFuture struct {
	Future workflow.Future
}

func (r *ElasticacheStartMigrationFuture) Get(ctx workflow.Context) (*elasticache.StartMigrationOutput, error) {
	var output elasticache.StartMigrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticacheTestFailoverFuture struct {
	Future workflow.Future
}

func (r *ElasticacheTestFailoverFuture) Get(ctx workflow.Context) (*elasticache.TestFailoverOutput, error) {
	var output elasticache.TestFailoverOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) AddTagsToResource(ctx workflow.Context, input *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) AddTagsToResourceAsync(ctx workflow.Context, input *elasticache.AddTagsToResourceInput) *ElasticacheAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.AddTagsToResource", input)
	return &ElasticacheAddTagsToResourceFuture{Future: future}
}

func (a *ElastiCacheStub) AuthorizeCacheSecurityGroupIngress(ctx workflow.Context, input *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	var output elasticache.AuthorizeCacheSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.AuthorizeCacheSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) AuthorizeCacheSecurityGroupIngressAsync(ctx workflow.Context, input *elasticache.AuthorizeCacheSecurityGroupIngressInput) *ElasticacheAuthorizeCacheSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.AuthorizeCacheSecurityGroupIngress", input)
	return &ElasticacheAuthorizeCacheSecurityGroupIngressFuture{Future: future}
}

func (a *ElastiCacheStub) BatchApplyUpdateAction(ctx workflow.Context, input *elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error) {
	var output elasticache.BatchApplyUpdateActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.BatchApplyUpdateAction", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) BatchApplyUpdateActionAsync(ctx workflow.Context, input *elasticache.BatchApplyUpdateActionInput) *ElasticacheBatchApplyUpdateActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.BatchApplyUpdateAction", input)
	return &ElasticacheBatchApplyUpdateActionFuture{Future: future}
}

func (a *ElastiCacheStub) BatchStopUpdateAction(ctx workflow.Context, input *elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error) {
	var output elasticache.BatchStopUpdateActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.BatchStopUpdateAction", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) BatchStopUpdateActionAsync(ctx workflow.Context, input *elasticache.BatchStopUpdateActionInput) *ElasticacheBatchStopUpdateActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.BatchStopUpdateAction", input)
	return &ElasticacheBatchStopUpdateActionFuture{Future: future}
}

func (a *ElastiCacheStub) CompleteMigration(ctx workflow.Context, input *elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error) {
	var output elasticache.CompleteMigrationOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CompleteMigration", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CompleteMigrationAsync(ctx workflow.Context, input *elasticache.CompleteMigrationInput) *ElasticacheCompleteMigrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CompleteMigration", input)
	return &ElasticacheCompleteMigrationFuture{Future: future}
}

func (a *ElastiCacheStub) CopySnapshot(ctx workflow.Context, input *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error) {
	var output elasticache.CopySnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CopySnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CopySnapshotAsync(ctx workflow.Context, input *elasticache.CopySnapshotInput) *ElasticacheCopySnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CopySnapshot", input)
	return &ElasticacheCopySnapshotFuture{Future: future}
}

func (a *ElastiCacheStub) CreateCacheCluster(ctx workflow.Context, input *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error) {
	var output elasticache.CreateCacheClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateCacheClusterAsync(ctx workflow.Context, input *elasticache.CreateCacheClusterInput) *ElasticacheCreateCacheClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheCluster", input)
	return &ElasticacheCreateCacheClusterFuture{Future: future}
}

func (a *ElastiCacheStub) CreateCacheParameterGroup(ctx workflow.Context, input *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error) {
	var output elasticache.CreateCacheParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheParameterGroupInput) *ElasticacheCreateCacheParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheParameterGroup", input)
	return &ElasticacheCreateCacheParameterGroupFuture{Future: future}
}

func (a *ElastiCacheStub) CreateCacheSecurityGroup(ctx workflow.Context, input *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	var output elasticache.CreateCacheSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateCacheSecurityGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheSecurityGroupInput) *ElasticacheCreateCacheSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheSecurityGroup", input)
	return &ElasticacheCreateCacheSecurityGroupFuture{Future: future}
}

func (a *ElastiCacheStub) CreateCacheSubnetGroup(ctx workflow.Context, input *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	var output elasticache.CreateCacheSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheSubnetGroupInput) *ElasticacheCreateCacheSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateCacheSubnetGroup", input)
	return &ElasticacheCreateCacheSubnetGroupFuture{Future: future}
}

func (a *ElastiCacheStub) CreateGlobalReplicationGroup(ctx workflow.Context, input *elasticache.CreateGlobalReplicationGroupInput) (*elasticache.CreateGlobalReplicationGroupOutput, error) {
	var output elasticache.CreateGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.CreateGlobalReplicationGroupInput) *ElasticacheCreateGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateGlobalReplicationGroup", input)
	return &ElasticacheCreateGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) CreateReplicationGroup(ctx workflow.Context, input *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error) {
	var output elasticache.CreateReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateReplicationGroupAsync(ctx workflow.Context, input *elasticache.CreateReplicationGroupInput) *ElasticacheCreateReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateReplicationGroup", input)
	return &ElasticacheCreateReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) CreateSnapshot(ctx workflow.Context, input *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error) {
	var output elasticache.CreateSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateSnapshotAsync(ctx workflow.Context, input *elasticache.CreateSnapshotInput) *ElasticacheCreateSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateSnapshot", input)
	return &ElasticacheCreateSnapshotFuture{Future: future}
}

func (a *ElastiCacheStub) CreateUser(ctx workflow.Context, input *elasticache.CreateUserInput) (*elasticache.CreateUserOutput, error) {
	var output elasticache.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateUserAsync(ctx workflow.Context, input *elasticache.CreateUserInput) *ElasticacheCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateUser", input)
	return &ElasticacheCreateUserFuture{Future: future}
}

func (a *ElastiCacheStub) CreateUserGroup(ctx workflow.Context, input *elasticache.CreateUserGroupInput) (*elasticache.CreateUserGroupOutput, error) {
	var output elasticache.CreateUserGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateUserGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) CreateUserGroupAsync(ctx workflow.Context, input *elasticache.CreateUserGroupInput) *ElasticacheCreateUserGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.CreateUserGroup", input)
	return &ElasticacheCreateUserGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DecreaseNodeGroupsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	var output elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DecreaseNodeGroupsInGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DecreaseNodeGroupsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) *ElasticacheDecreaseNodeGroupsInGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DecreaseNodeGroupsInGlobalReplicationGroup", input)
	return &ElasticacheDecreaseNodeGroupsInGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DecreaseReplicaCount(ctx workflow.Context, input *elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error) {
	var output elasticache.DecreaseReplicaCountOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DecreaseReplicaCount", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DecreaseReplicaCountAsync(ctx workflow.Context, input *elasticache.DecreaseReplicaCountInput) *ElasticacheDecreaseReplicaCountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DecreaseReplicaCount", input)
	return &ElasticacheDecreaseReplicaCountFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteCacheCluster(ctx workflow.Context, input *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error) {
	var output elasticache.DeleteCacheClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteCacheClusterAsync(ctx workflow.Context, input *elasticache.DeleteCacheClusterInput) *ElasticacheDeleteCacheClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheCluster", input)
	return &ElasticacheDeleteCacheClusterFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteCacheParameterGroup(ctx workflow.Context, input *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	var output elasticache.DeleteCacheParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheParameterGroupInput) *ElasticacheDeleteCacheParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheParameterGroup", input)
	return &ElasticacheDeleteCacheParameterGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteCacheSecurityGroup(ctx workflow.Context, input *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	var output elasticache.DeleteCacheSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteCacheSecurityGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheSecurityGroupInput) *ElasticacheDeleteCacheSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheSecurityGroup", input)
	return &ElasticacheDeleteCacheSecurityGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteCacheSubnetGroup(ctx workflow.Context, input *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	var output elasticache.DeleteCacheSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheSubnetGroupInput) *ElasticacheDeleteCacheSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteCacheSubnetGroup", input)
	return &ElasticacheDeleteCacheSubnetGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DeleteGlobalReplicationGroupInput) (*elasticache.DeleteGlobalReplicationGroupOutput, error) {
	var output elasticache.DeleteGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DeleteGlobalReplicationGroupInput) *ElasticacheDeleteGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteGlobalReplicationGroup", input)
	return &ElasticacheDeleteGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteReplicationGroup(ctx workflow.Context, input *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error) {
	var output elasticache.DeleteReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteReplicationGroupAsync(ctx workflow.Context, input *elasticache.DeleteReplicationGroupInput) *ElasticacheDeleteReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteReplicationGroup", input)
	return &ElasticacheDeleteReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteSnapshot(ctx workflow.Context, input *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error) {
	var output elasticache.DeleteSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteSnapshotAsync(ctx workflow.Context, input *elasticache.DeleteSnapshotInput) *ElasticacheDeleteSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteSnapshot", input)
	return &ElasticacheDeleteSnapshotFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteUser(ctx workflow.Context, input *elasticache.DeleteUserInput) (*elasticache.DeleteUserOutput, error) {
	var output elasticache.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteUserAsync(ctx workflow.Context, input *elasticache.DeleteUserInput) *ElasticacheDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteUser", input)
	return &ElasticacheDeleteUserFuture{Future: future}
}

func (a *ElastiCacheStub) DeleteUserGroup(ctx workflow.Context, input *elasticache.DeleteUserGroupInput) (*elasticache.DeleteUserGroupOutput, error) {
	var output elasticache.DeleteUserGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteUserGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DeleteUserGroupAsync(ctx workflow.Context, input *elasticache.DeleteUserGroupInput) *ElasticacheDeleteUserGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DeleteUserGroup", input)
	return &ElasticacheDeleteUserGroupFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeCacheClusters(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error) {
	var output elasticache.DescribeCacheClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeCacheClustersAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *ElasticacheDescribeCacheClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheClusters", input)
	return &ElasticacheDescribeCacheClustersFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeCacheEngineVersions(ctx workflow.Context, input *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	var output elasticache.DescribeCacheEngineVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheEngineVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeCacheEngineVersionsAsync(ctx workflow.Context, input *elasticache.DescribeCacheEngineVersionsInput) *ElasticacheDescribeCacheEngineVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheEngineVersions", input)
	return &ElasticacheDescribeCacheEngineVersionsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeCacheParameterGroups(ctx workflow.Context, input *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	var output elasticache.DescribeCacheParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeCacheParameterGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheParameterGroupsInput) *ElasticacheDescribeCacheParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheParameterGroups", input)
	return &ElasticacheDescribeCacheParameterGroupsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeCacheParameters(ctx workflow.Context, input *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error) {
	var output elasticache.DescribeCacheParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeCacheParametersAsync(ctx workflow.Context, input *elasticache.DescribeCacheParametersInput) *ElasticacheDescribeCacheParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheParameters", input)
	return &ElasticacheDescribeCacheParametersFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeCacheSecurityGroups(ctx workflow.Context, input *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	var output elasticache.DescribeCacheSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeCacheSecurityGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheSecurityGroupsInput) *ElasticacheDescribeCacheSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheSecurityGroups", input)
	return &ElasticacheDescribeCacheSecurityGroupsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeCacheSubnetGroups(ctx workflow.Context, input *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	var output elasticache.DescribeCacheSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeCacheSubnetGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheSubnetGroupsInput) *ElasticacheDescribeCacheSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeCacheSubnetGroups", input)
	return &ElasticacheDescribeCacheSubnetGroupsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeEngineDefaultParameters(ctx workflow.Context, input *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	var output elasticache.DescribeEngineDefaultParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeEngineDefaultParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeEngineDefaultParametersAsync(ctx workflow.Context, input *elasticache.DescribeEngineDefaultParametersInput) *ElasticacheDescribeEngineDefaultParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeEngineDefaultParameters", input)
	return &ElasticacheDescribeEngineDefaultParametersFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeEvents(ctx workflow.Context, input *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error) {
	var output elasticache.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeEventsAsync(ctx workflow.Context, input *elasticache.DescribeEventsInput) *ElasticacheDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeEvents", input)
	return &ElasticacheDescribeEventsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeGlobalReplicationGroups(ctx workflow.Context, input *elasticache.DescribeGlobalReplicationGroupsInput) (*elasticache.DescribeGlobalReplicationGroupsOutput, error) {
	var output elasticache.DescribeGlobalReplicationGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeGlobalReplicationGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeGlobalReplicationGroupsAsync(ctx workflow.Context, input *elasticache.DescribeGlobalReplicationGroupsInput) *ElasticacheDescribeGlobalReplicationGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeGlobalReplicationGroups", input)
	return &ElasticacheDescribeGlobalReplicationGroupsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeReplicationGroups(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error) {
	var output elasticache.DescribeReplicationGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeReplicationGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeReplicationGroupsAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *ElasticacheDescribeReplicationGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeReplicationGroups", input)
	return &ElasticacheDescribeReplicationGroupsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeReservedCacheNodes(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	var output elasticache.DescribeReservedCacheNodesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeReservedCacheNodes", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeReservedCacheNodesAsync(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesInput) *ElasticacheDescribeReservedCacheNodesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeReservedCacheNodes", input)
	return &ElasticacheDescribeReservedCacheNodesFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeReservedCacheNodesOfferings(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	var output elasticache.DescribeReservedCacheNodesOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeReservedCacheNodesOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeReservedCacheNodesOfferingsAsync(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesOfferingsInput) *ElasticacheDescribeReservedCacheNodesOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeReservedCacheNodesOfferings", input)
	return &ElasticacheDescribeReservedCacheNodesOfferingsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeServiceUpdates(ctx workflow.Context, input *elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error) {
	var output elasticache.DescribeServiceUpdatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeServiceUpdates", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeServiceUpdatesAsync(ctx workflow.Context, input *elasticache.DescribeServiceUpdatesInput) *ElasticacheDescribeServiceUpdatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeServiceUpdates", input)
	return &ElasticacheDescribeServiceUpdatesFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeSnapshots(ctx workflow.Context, input *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error) {
	var output elasticache.DescribeSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeSnapshotsAsync(ctx workflow.Context, input *elasticache.DescribeSnapshotsInput) *ElasticacheDescribeSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeSnapshots", input)
	return &ElasticacheDescribeSnapshotsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeUpdateActions(ctx workflow.Context, input *elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error) {
	var output elasticache.DescribeUpdateActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeUpdateActions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeUpdateActionsAsync(ctx workflow.Context, input *elasticache.DescribeUpdateActionsInput) *ElasticacheDescribeUpdateActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeUpdateActions", input)
	return &ElasticacheDescribeUpdateActionsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeUserGroups(ctx workflow.Context, input *elasticache.DescribeUserGroupsInput) (*elasticache.DescribeUserGroupsOutput, error) {
	var output elasticache.DescribeUserGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeUserGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeUserGroupsAsync(ctx workflow.Context, input *elasticache.DescribeUserGroupsInput) *ElasticacheDescribeUserGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeUserGroups", input)
	return &ElasticacheDescribeUserGroupsFuture{Future: future}
}

func (a *ElastiCacheStub) DescribeUsers(ctx workflow.Context, input *elasticache.DescribeUsersInput) (*elasticache.DescribeUsersOutput, error) {
	var output elasticache.DescribeUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DescribeUsersAsync(ctx workflow.Context, input *elasticache.DescribeUsersInput) *ElasticacheDescribeUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DescribeUsers", input)
	return &ElasticacheDescribeUsersFuture{Future: future}
}

func (a *ElastiCacheStub) DisassociateGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DisassociateGlobalReplicationGroupInput) (*elasticache.DisassociateGlobalReplicationGroupOutput, error) {
	var output elasticache.DisassociateGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.DisassociateGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) DisassociateGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DisassociateGlobalReplicationGroupInput) *ElasticacheDisassociateGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.DisassociateGlobalReplicationGroup", input)
	return &ElasticacheDisassociateGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) FailoverGlobalReplicationGroup(ctx workflow.Context, input *elasticache.FailoverGlobalReplicationGroupInput) (*elasticache.FailoverGlobalReplicationGroupOutput, error) {
	var output elasticache.FailoverGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.FailoverGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) FailoverGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.FailoverGlobalReplicationGroupInput) *ElasticacheFailoverGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.FailoverGlobalReplicationGroup", input)
	return &ElasticacheFailoverGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) IncreaseNodeGroupsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	var output elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.IncreaseNodeGroupsInGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) IncreaseNodeGroupsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) *ElasticacheIncreaseNodeGroupsInGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.IncreaseNodeGroupsInGlobalReplicationGroup", input)
	return &ElasticacheIncreaseNodeGroupsInGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) IncreaseReplicaCount(ctx workflow.Context, input *elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error) {
	var output elasticache.IncreaseReplicaCountOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.IncreaseReplicaCount", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) IncreaseReplicaCountAsync(ctx workflow.Context, input *elasticache.IncreaseReplicaCountInput) *ElasticacheIncreaseReplicaCountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.IncreaseReplicaCount", input)
	return &ElasticacheIncreaseReplicaCountFuture{Future: future}
}

func (a *ElastiCacheStub) ListAllowedNodeTypeModifications(ctx workflow.Context, input *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	var output elasticache.ListAllowedNodeTypeModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ListAllowedNodeTypeModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ListAllowedNodeTypeModificationsAsync(ctx workflow.Context, input *elasticache.ListAllowedNodeTypeModificationsInput) *ElasticacheListAllowedNodeTypeModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ListAllowedNodeTypeModifications", input)
	return &ElasticacheListAllowedNodeTypeModificationsFuture{Future: future}
}

func (a *ElastiCacheStub) ListTagsForResource(ctx workflow.Context, input *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ListTagsForResourceAsync(ctx workflow.Context, input *elasticache.ListTagsForResourceInput) *ElasticacheListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ListTagsForResource", input)
	return &ElasticacheListTagsForResourceFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyCacheCluster(ctx workflow.Context, input *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error) {
	var output elasticache.ModifyCacheClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyCacheCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyCacheClusterAsync(ctx workflow.Context, input *elasticache.ModifyCacheClusterInput) *ElasticacheModifyCacheClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyCacheCluster", input)
	return &ElasticacheModifyCacheClusterFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyCacheParameterGroup(ctx workflow.Context, input *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	var output elasticache.CacheParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyCacheParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.ModifyCacheParameterGroupInput) *ElasticacheModifyCacheParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyCacheParameterGroup", input)
	return &ElasticacheModifyCacheParameterGroupFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyCacheSubnetGroup(ctx workflow.Context, input *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	var output elasticache.ModifyCacheSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyCacheSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.ModifyCacheSubnetGroupInput) *ElasticacheModifyCacheSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyCacheSubnetGroup", input)
	return &ElasticacheModifyCacheSubnetGroupFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyGlobalReplicationGroup(ctx workflow.Context, input *elasticache.ModifyGlobalReplicationGroupInput) (*elasticache.ModifyGlobalReplicationGroupOutput, error) {
	var output elasticache.ModifyGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.ModifyGlobalReplicationGroupInput) *ElasticacheModifyGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyGlobalReplicationGroup", input)
	return &ElasticacheModifyGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyReplicationGroup(ctx workflow.Context, input *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error) {
	var output elasticache.ModifyReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyReplicationGroupAsync(ctx workflow.Context, input *elasticache.ModifyReplicationGroupInput) *ElasticacheModifyReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyReplicationGroup", input)
	return &ElasticacheModifyReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyReplicationGroupShardConfiguration(ctx workflow.Context, input *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	var output elasticache.ModifyReplicationGroupShardConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyReplicationGroupShardConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyReplicationGroupShardConfigurationAsync(ctx workflow.Context, input *elasticache.ModifyReplicationGroupShardConfigurationInput) *ElasticacheModifyReplicationGroupShardConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyReplicationGroupShardConfiguration", input)
	return &ElasticacheModifyReplicationGroupShardConfigurationFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyUser(ctx workflow.Context, input *elasticache.ModifyUserInput) (*elasticache.ModifyUserOutput, error) {
	var output elasticache.ModifyUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyUserAsync(ctx workflow.Context, input *elasticache.ModifyUserInput) *ElasticacheModifyUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyUser", input)
	return &ElasticacheModifyUserFuture{Future: future}
}

func (a *ElastiCacheStub) ModifyUserGroup(ctx workflow.Context, input *elasticache.ModifyUserGroupInput) (*elasticache.ModifyUserGroupOutput, error) {
	var output elasticache.ModifyUserGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyUserGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ModifyUserGroupAsync(ctx workflow.Context, input *elasticache.ModifyUserGroupInput) *ElasticacheModifyUserGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ModifyUserGroup", input)
	return &ElasticacheModifyUserGroupFuture{Future: future}
}

func (a *ElastiCacheStub) PurchaseReservedCacheNodesOffering(ctx workflow.Context, input *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	var output elasticache.PurchaseReservedCacheNodesOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.PurchaseReservedCacheNodesOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) PurchaseReservedCacheNodesOfferingAsync(ctx workflow.Context, input *elasticache.PurchaseReservedCacheNodesOfferingInput) *ElasticachePurchaseReservedCacheNodesOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.PurchaseReservedCacheNodesOffering", input)
	return &ElasticachePurchaseReservedCacheNodesOfferingFuture{Future: future}
}

func (a *ElastiCacheStub) RebalanceSlotsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error) {
	var output elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.RebalanceSlotsInGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) RebalanceSlotsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) *ElasticacheRebalanceSlotsInGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.RebalanceSlotsInGlobalReplicationGroup", input)
	return &ElasticacheRebalanceSlotsInGlobalReplicationGroupFuture{Future: future}
}

func (a *ElastiCacheStub) RebootCacheCluster(ctx workflow.Context, input *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error) {
	var output elasticache.RebootCacheClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.RebootCacheCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) RebootCacheClusterAsync(ctx workflow.Context, input *elasticache.RebootCacheClusterInput) *ElasticacheRebootCacheClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.RebootCacheCluster", input)
	return &ElasticacheRebootCacheClusterFuture{Future: future}
}

func (a *ElastiCacheStub) RemoveTagsFromResource(ctx workflow.Context, input *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *elasticache.RemoveTagsFromResourceInput) *ElasticacheRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.RemoveTagsFromResource", input)
	return &ElasticacheRemoveTagsFromResourceFuture{Future: future}
}

func (a *ElastiCacheStub) ResetCacheParameterGroup(ctx workflow.Context, input *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	var output elasticache.CacheParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.ResetCacheParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) ResetCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.ResetCacheParameterGroupInput) *ElasticacheResetCacheParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.ResetCacheParameterGroup", input)
	return &ElasticacheResetCacheParameterGroupFuture{Future: future}
}

func (a *ElastiCacheStub) RevokeCacheSecurityGroupIngress(ctx workflow.Context, input *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	var output elasticache.RevokeCacheSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.RevokeCacheSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) RevokeCacheSecurityGroupIngressAsync(ctx workflow.Context, input *elasticache.RevokeCacheSecurityGroupIngressInput) *ElasticacheRevokeCacheSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.RevokeCacheSecurityGroupIngress", input)
	return &ElasticacheRevokeCacheSecurityGroupIngressFuture{Future: future}
}

func (a *ElastiCacheStub) StartMigration(ctx workflow.Context, input *elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error) {
	var output elasticache.StartMigrationOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.StartMigration", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) StartMigrationAsync(ctx workflow.Context, input *elasticache.StartMigrationInput) *ElasticacheStartMigrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.StartMigration", input)
	return &ElasticacheStartMigrationFuture{Future: future}
}

func (a *ElastiCacheStub) TestFailover(ctx workflow.Context, input *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error) {
	var output elasticache.TestFailoverOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticache.TestFailover", input).Get(ctx, &output)
	return &output, err
}

func (a *ElastiCacheStub) TestFailoverAsync(ctx workflow.Context, input *elasticache.TestFailoverInput) *ElasticacheTestFailoverFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.TestFailover", input)
	return &ElasticacheTestFailoverFuture{Future: future}
}

func (a *ElastiCacheStub) WaitUntilCacheClusterAvailable(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilCacheClusterAvailable", input).Get(ctx, nil)
}

func (a *ElastiCacheStub) WaitUntilCacheClusterAvailableAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilCacheClusterAvailable", input)
	return NewVoidFuture(future)
}

func (a *ElastiCacheStub) WaitUntilCacheClusterDeleted(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilCacheClusterDeleted", input).Get(ctx, nil)
}

func (a *ElastiCacheStub) WaitUntilCacheClusterDeletedAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilCacheClusterDeleted", input)
	return NewVoidFuture(future)
}

func (a *ElastiCacheStub) WaitUntilReplicationGroupAvailable(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilReplicationGroupAvailable", input).Get(ctx, nil)
}

func (a *ElastiCacheStub) WaitUntilReplicationGroupAvailableAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilReplicationGroupAvailable", input)
	return NewVoidFuture(future)
}

func (a *ElastiCacheStub) WaitUntilReplicationGroupDeleted(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilReplicationGroupDeleted", input).Get(ctx, nil)
}

func (a *ElastiCacheStub) WaitUntilReplicationGroupDeletedAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticache.WaitUntilReplicationGroupDeleted", input)
	return NewVoidFuture(future)
}
