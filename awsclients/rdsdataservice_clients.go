// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/rdsdataservice"
	"go.temporal.io/sdk/workflow"
)

type RDSDataServiceClient interface {
	BatchExecuteStatement(ctx workflow.Context, input *rdsdataservice.BatchExecuteStatementInput) (*rdsdataservice.BatchExecuteStatementOutput, error)
	BatchExecuteStatementAsync(ctx workflow.Context, input *rdsdataservice.BatchExecuteStatementInput) *RDSDataServiceBatchExecuteStatementFuture

	BeginTransaction(ctx workflow.Context, input *rdsdataservice.BeginTransactionInput) (*rdsdataservice.BeginTransactionOutput, error)
	BeginTransactionAsync(ctx workflow.Context, input *rdsdataservice.BeginTransactionInput) *RDSDataServiceBeginTransactionFuture

	CommitTransaction(ctx workflow.Context, input *rdsdataservice.CommitTransactionInput) (*rdsdataservice.CommitTransactionOutput, error)
	CommitTransactionAsync(ctx workflow.Context, input *rdsdataservice.CommitTransactionInput) *RDSDataServiceCommitTransactionFuture

	ExecuteSql(ctx workflow.Context, input *rdsdataservice.ExecuteSqlInput) (*rdsdataservice.ExecuteSqlOutput, error)
	ExecuteSqlAsync(ctx workflow.Context, input *rdsdataservice.ExecuteSqlInput) *RDSDataServiceExecuteSqlFuture

	ExecuteStatement(ctx workflow.Context, input *rdsdataservice.ExecuteStatementInput) (*rdsdataservice.ExecuteStatementOutput, error)
	ExecuteStatementAsync(ctx workflow.Context, input *rdsdataservice.ExecuteStatementInput) *RDSDataServiceExecuteStatementFuture

	RollbackTransaction(ctx workflow.Context, input *rdsdataservice.RollbackTransactionInput) (*rdsdataservice.RollbackTransactionOutput, error)
	RollbackTransactionAsync(ctx workflow.Context, input *rdsdataservice.RollbackTransactionInput) *RDSDataServiceRollbackTransactionFuture
}

type RDSDataServiceStub struct{}

func NewRDSDataServiceStub() RDSDataServiceClient {
	return &RDSDataServiceStub{}
}

type RDSDataServiceBatchExecuteStatementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDataServiceBatchExecuteStatementFuture) Get(ctx workflow.Context) (*rdsdataservice.BatchExecuteStatementOutput, error) {
	var output rdsdataservice.BatchExecuteStatementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDataServiceBeginTransactionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDataServiceBeginTransactionFuture) Get(ctx workflow.Context) (*rdsdataservice.BeginTransactionOutput, error) {
	var output rdsdataservice.BeginTransactionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDataServiceCommitTransactionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDataServiceCommitTransactionFuture) Get(ctx workflow.Context) (*rdsdataservice.CommitTransactionOutput, error) {
	var output rdsdataservice.CommitTransactionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDataServiceExecuteSqlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDataServiceExecuteSqlFuture) Get(ctx workflow.Context) (*rdsdataservice.ExecuteSqlOutput, error) {
	var output rdsdataservice.ExecuteSqlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDataServiceExecuteStatementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDataServiceExecuteStatementFuture) Get(ctx workflow.Context) (*rdsdataservice.ExecuteStatementOutput, error) {
	var output rdsdataservice.ExecuteStatementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDataServiceRollbackTransactionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDataServiceRollbackTransactionFuture) Get(ctx workflow.Context) (*rdsdataservice.RollbackTransactionOutput, error) {
	var output rdsdataservice.RollbackTransactionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *RDSDataServiceStub) BatchExecuteStatement(ctx workflow.Context, input *rdsdataservice.BatchExecuteStatementInput) (*rdsdataservice.BatchExecuteStatementOutput, error) {
	var output rdsdataservice.BatchExecuteStatementOutput
	err := workflow.ExecuteActivity(ctx, "aws.rdsdataservice.BatchExecuteStatement", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSDataServiceStub) BatchExecuteStatementAsync(ctx workflow.Context, input *rdsdataservice.BatchExecuteStatementInput) *RDSDataServiceBatchExecuteStatementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rdsdataservice.BatchExecuteStatement", input)
	return &RDSDataServiceBatchExecuteStatementFuture{Future: future}
}

func (a *RDSDataServiceStub) BeginTransaction(ctx workflow.Context, input *rdsdataservice.BeginTransactionInput) (*rdsdataservice.BeginTransactionOutput, error) {
	var output rdsdataservice.BeginTransactionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rdsdataservice.BeginTransaction", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSDataServiceStub) BeginTransactionAsync(ctx workflow.Context, input *rdsdataservice.BeginTransactionInput) *RDSDataServiceBeginTransactionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rdsdataservice.BeginTransaction", input)
	return &RDSDataServiceBeginTransactionFuture{Future: future}
}

func (a *RDSDataServiceStub) CommitTransaction(ctx workflow.Context, input *rdsdataservice.CommitTransactionInput) (*rdsdataservice.CommitTransactionOutput, error) {
	var output rdsdataservice.CommitTransactionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rdsdataservice.CommitTransaction", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSDataServiceStub) CommitTransactionAsync(ctx workflow.Context, input *rdsdataservice.CommitTransactionInput) *RDSDataServiceCommitTransactionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rdsdataservice.CommitTransaction", input)
	return &RDSDataServiceCommitTransactionFuture{Future: future}
}

func (a *RDSDataServiceStub) ExecuteSql(ctx workflow.Context, input *rdsdataservice.ExecuteSqlInput) (*rdsdataservice.ExecuteSqlOutput, error) {
	var output rdsdataservice.ExecuteSqlOutput
	err := workflow.ExecuteActivity(ctx, "aws.rdsdataservice.ExecuteSql", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSDataServiceStub) ExecuteSqlAsync(ctx workflow.Context, input *rdsdataservice.ExecuteSqlInput) *RDSDataServiceExecuteSqlFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rdsdataservice.ExecuteSql", input)
	return &RDSDataServiceExecuteSqlFuture{Future: future}
}

func (a *RDSDataServiceStub) ExecuteStatement(ctx workflow.Context, input *rdsdataservice.ExecuteStatementInput) (*rdsdataservice.ExecuteStatementOutput, error) {
	var output rdsdataservice.ExecuteStatementOutput
	err := workflow.ExecuteActivity(ctx, "aws.rdsdataservice.ExecuteStatement", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSDataServiceStub) ExecuteStatementAsync(ctx workflow.Context, input *rdsdataservice.ExecuteStatementInput) *RDSDataServiceExecuteStatementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rdsdataservice.ExecuteStatement", input)
	return &RDSDataServiceExecuteStatementFuture{Future: future}
}

func (a *RDSDataServiceStub) RollbackTransaction(ctx workflow.Context, input *rdsdataservice.RollbackTransactionInput) (*rdsdataservice.RollbackTransactionOutput, error) {
	var output rdsdataservice.RollbackTransactionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rdsdataservice.RollbackTransaction", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSDataServiceStub) RollbackTransactionAsync(ctx workflow.Context, input *rdsdataservice.RollbackTransactionInput) *RDSDataServiceRollbackTransactionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rdsdataservice.RollbackTransaction", input)
	return &RDSDataServiceRollbackTransactionFuture{Future: future}
}
