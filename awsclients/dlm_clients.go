// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/dlm"
	"go.temporal.io/sdk/workflow"
)

type DLMClient interface {
	CreateLifecyclePolicy(ctx workflow.Context, input *dlm.CreateLifecyclePolicyInput) (*dlm.CreateLifecyclePolicyOutput, error)
	CreateLifecyclePolicyAsync(ctx workflow.Context, input *dlm.CreateLifecyclePolicyInput) *DlmCreateLifecyclePolicyFuture

	DeleteLifecyclePolicy(ctx workflow.Context, input *dlm.DeleteLifecyclePolicyInput) (*dlm.DeleteLifecyclePolicyOutput, error)
	DeleteLifecyclePolicyAsync(ctx workflow.Context, input *dlm.DeleteLifecyclePolicyInput) *DlmDeleteLifecyclePolicyFuture

	GetLifecyclePolicies(ctx workflow.Context, input *dlm.GetLifecyclePoliciesInput) (*dlm.GetLifecyclePoliciesOutput, error)
	GetLifecyclePoliciesAsync(ctx workflow.Context, input *dlm.GetLifecyclePoliciesInput) *DlmGetLifecyclePoliciesFuture

	GetLifecyclePolicy(ctx workflow.Context, input *dlm.GetLifecyclePolicyInput) (*dlm.GetLifecyclePolicyOutput, error)
	GetLifecyclePolicyAsync(ctx workflow.Context, input *dlm.GetLifecyclePolicyInput) *DlmGetLifecyclePolicyFuture

	ListTagsForResource(ctx workflow.Context, input *dlm.ListTagsForResourceInput) (*dlm.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *dlm.ListTagsForResourceInput) *DlmListTagsForResourceFuture

	TagResource(ctx workflow.Context, input *dlm.TagResourceInput) (*dlm.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *dlm.TagResourceInput) *DlmTagResourceFuture

	UntagResource(ctx workflow.Context, input *dlm.UntagResourceInput) (*dlm.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *dlm.UntagResourceInput) *DlmUntagResourceFuture

	UpdateLifecyclePolicy(ctx workflow.Context, input *dlm.UpdateLifecyclePolicyInput) (*dlm.UpdateLifecyclePolicyOutput, error)
	UpdateLifecyclePolicyAsync(ctx workflow.Context, input *dlm.UpdateLifecyclePolicyInput) *DlmUpdateLifecyclePolicyFuture
}

type DLMStub struct{}

func NewDLMStub() DLMClient {
	return &DLMStub{}
}

type DlmCreateLifecyclePolicyFuture struct {
	Future workflow.Future
}

func (r *DlmCreateLifecyclePolicyFuture) Get(ctx workflow.Context) (*dlm.CreateLifecyclePolicyOutput, error) {
	var output dlm.CreateLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DlmDeleteLifecyclePolicyFuture struct {
	Future workflow.Future
}

func (r *DlmDeleteLifecyclePolicyFuture) Get(ctx workflow.Context) (*dlm.DeleteLifecyclePolicyOutput, error) {
	var output dlm.DeleteLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DlmGetLifecyclePoliciesFuture struct {
	Future workflow.Future
}

func (r *DlmGetLifecyclePoliciesFuture) Get(ctx workflow.Context) (*dlm.GetLifecyclePoliciesOutput, error) {
	var output dlm.GetLifecyclePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DlmGetLifecyclePolicyFuture struct {
	Future workflow.Future
}

func (r *DlmGetLifecyclePolicyFuture) Get(ctx workflow.Context) (*dlm.GetLifecyclePolicyOutput, error) {
	var output dlm.GetLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DlmListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *DlmListTagsForResourceFuture) Get(ctx workflow.Context) (*dlm.ListTagsForResourceOutput, error) {
	var output dlm.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DlmTagResourceFuture struct {
	Future workflow.Future
}

func (r *DlmTagResourceFuture) Get(ctx workflow.Context) (*dlm.TagResourceOutput, error) {
	var output dlm.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DlmUntagResourceFuture struct {
	Future workflow.Future
}

func (r *DlmUntagResourceFuture) Get(ctx workflow.Context) (*dlm.UntagResourceOutput, error) {
	var output dlm.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DlmUpdateLifecyclePolicyFuture struct {
	Future workflow.Future
}

func (r *DlmUpdateLifecyclePolicyFuture) Get(ctx workflow.Context) (*dlm.UpdateLifecyclePolicyOutput, error) {
	var output dlm.UpdateLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *DLMStub) CreateLifecyclePolicy(ctx workflow.Context, input *dlm.CreateLifecyclePolicyInput) (*dlm.CreateLifecyclePolicyOutput, error) {
	var output dlm.CreateLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.dlm.CreateLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *DLMStub) CreateLifecyclePolicyAsync(ctx workflow.Context, input *dlm.CreateLifecyclePolicyInput) *DlmCreateLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dlm.CreateLifecyclePolicy", input)
	return &DlmCreateLifecyclePolicyFuture{Future: future}
}

func (a *DLMStub) DeleteLifecyclePolicy(ctx workflow.Context, input *dlm.DeleteLifecyclePolicyInput) (*dlm.DeleteLifecyclePolicyOutput, error) {
	var output dlm.DeleteLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.dlm.DeleteLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *DLMStub) DeleteLifecyclePolicyAsync(ctx workflow.Context, input *dlm.DeleteLifecyclePolicyInput) *DlmDeleteLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dlm.DeleteLifecyclePolicy", input)
	return &DlmDeleteLifecyclePolicyFuture{Future: future}
}

func (a *DLMStub) GetLifecyclePolicies(ctx workflow.Context, input *dlm.GetLifecyclePoliciesInput) (*dlm.GetLifecyclePoliciesOutput, error) {
	var output dlm.GetLifecyclePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.dlm.GetLifecyclePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *DLMStub) GetLifecyclePoliciesAsync(ctx workflow.Context, input *dlm.GetLifecyclePoliciesInput) *DlmGetLifecyclePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dlm.GetLifecyclePolicies", input)
	return &DlmGetLifecyclePoliciesFuture{Future: future}
}

func (a *DLMStub) GetLifecyclePolicy(ctx workflow.Context, input *dlm.GetLifecyclePolicyInput) (*dlm.GetLifecyclePolicyOutput, error) {
	var output dlm.GetLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.dlm.GetLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *DLMStub) GetLifecyclePolicyAsync(ctx workflow.Context, input *dlm.GetLifecyclePolicyInput) *DlmGetLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dlm.GetLifecyclePolicy", input)
	return &DlmGetLifecyclePolicyFuture{Future: future}
}

func (a *DLMStub) ListTagsForResource(ctx workflow.Context, input *dlm.ListTagsForResourceInput) (*dlm.ListTagsForResourceOutput, error) {
	var output dlm.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.dlm.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DLMStub) ListTagsForResourceAsync(ctx workflow.Context, input *dlm.ListTagsForResourceInput) *DlmListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dlm.ListTagsForResource", input)
	return &DlmListTagsForResourceFuture{Future: future}
}

func (a *DLMStub) TagResource(ctx workflow.Context, input *dlm.TagResourceInput) (*dlm.TagResourceOutput, error) {
	var output dlm.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.dlm.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DLMStub) TagResourceAsync(ctx workflow.Context, input *dlm.TagResourceInput) *DlmTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dlm.TagResource", input)
	return &DlmTagResourceFuture{Future: future}
}

func (a *DLMStub) UntagResource(ctx workflow.Context, input *dlm.UntagResourceInput) (*dlm.UntagResourceOutput, error) {
	var output dlm.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.dlm.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DLMStub) UntagResourceAsync(ctx workflow.Context, input *dlm.UntagResourceInput) *DlmUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dlm.UntagResource", input)
	return &DlmUntagResourceFuture{Future: future}
}

func (a *DLMStub) UpdateLifecyclePolicy(ctx workflow.Context, input *dlm.UpdateLifecyclePolicyInput) (*dlm.UpdateLifecyclePolicyOutput, error) {
	var output dlm.UpdateLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.dlm.UpdateLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *DLMStub) UpdateLifecyclePolicyAsync(ctx workflow.Context, input *dlm.UpdateLifecyclePolicyInput) *DlmUpdateLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dlm.UpdateLifecyclePolicy", input)
	return &DlmUpdateLifecyclePolicyFuture{Future: future}
}
