// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/snowball"
	"go.temporal.io/sdk/workflow"
)

type SnowballClient interface {
	CancelCluster(ctx workflow.Context, input *snowball.CancelClusterInput) (*snowball.CancelClusterOutput, error)
	CancelClusterAsync(ctx workflow.Context, input *snowball.CancelClusterInput) *SnowballCancelClusterFuture

	CancelJob(ctx workflow.Context, input *snowball.CancelJobInput) (*snowball.CancelJobOutput, error)
	CancelJobAsync(ctx workflow.Context, input *snowball.CancelJobInput) *SnowballCancelJobFuture

	CreateAddress(ctx workflow.Context, input *snowball.CreateAddressInput) (*snowball.CreateAddressOutput, error)
	CreateAddressAsync(ctx workflow.Context, input *snowball.CreateAddressInput) *SnowballCreateAddressFuture

	CreateCluster(ctx workflow.Context, input *snowball.CreateClusterInput) (*snowball.CreateClusterOutput, error)
	CreateClusterAsync(ctx workflow.Context, input *snowball.CreateClusterInput) *SnowballCreateClusterFuture

	CreateJob(ctx workflow.Context, input *snowball.CreateJobInput) (*snowball.CreateJobOutput, error)
	CreateJobAsync(ctx workflow.Context, input *snowball.CreateJobInput) *SnowballCreateJobFuture

	CreateReturnShippingLabel(ctx workflow.Context, input *snowball.CreateReturnShippingLabelInput) (*snowball.CreateReturnShippingLabelOutput, error)
	CreateReturnShippingLabelAsync(ctx workflow.Context, input *snowball.CreateReturnShippingLabelInput) *SnowballCreateReturnShippingLabelFuture

	DescribeAddress(ctx workflow.Context, input *snowball.DescribeAddressInput) (*snowball.DescribeAddressOutput, error)
	DescribeAddressAsync(ctx workflow.Context, input *snowball.DescribeAddressInput) *SnowballDescribeAddressFuture

	DescribeAddresses(ctx workflow.Context, input *snowball.DescribeAddressesInput) (*snowball.DescribeAddressesOutput, error)
	DescribeAddressesAsync(ctx workflow.Context, input *snowball.DescribeAddressesInput) *SnowballDescribeAddressesFuture

	DescribeCluster(ctx workflow.Context, input *snowball.DescribeClusterInput) (*snowball.DescribeClusterOutput, error)
	DescribeClusterAsync(ctx workflow.Context, input *snowball.DescribeClusterInput) *SnowballDescribeClusterFuture

	DescribeJob(ctx workflow.Context, input *snowball.DescribeJobInput) (*snowball.DescribeJobOutput, error)
	DescribeJobAsync(ctx workflow.Context, input *snowball.DescribeJobInput) *SnowballDescribeJobFuture

	DescribeReturnShippingLabel(ctx workflow.Context, input *snowball.DescribeReturnShippingLabelInput) (*snowball.DescribeReturnShippingLabelOutput, error)
	DescribeReturnShippingLabelAsync(ctx workflow.Context, input *snowball.DescribeReturnShippingLabelInput) *SnowballDescribeReturnShippingLabelFuture

	GetJobManifest(ctx workflow.Context, input *snowball.GetJobManifestInput) (*snowball.GetJobManifestOutput, error)
	GetJobManifestAsync(ctx workflow.Context, input *snowball.GetJobManifestInput) *SnowballGetJobManifestFuture

	GetJobUnlockCode(ctx workflow.Context, input *snowball.GetJobUnlockCodeInput) (*snowball.GetJobUnlockCodeOutput, error)
	GetJobUnlockCodeAsync(ctx workflow.Context, input *snowball.GetJobUnlockCodeInput) *SnowballGetJobUnlockCodeFuture

	GetSnowballUsage(ctx workflow.Context, input *snowball.GetSnowballUsageInput) (*snowball.GetSnowballUsageOutput, error)
	GetSnowballUsageAsync(ctx workflow.Context, input *snowball.GetSnowballUsageInput) *SnowballGetSnowballUsageFuture

	GetSoftwareUpdates(ctx workflow.Context, input *snowball.GetSoftwareUpdatesInput) (*snowball.GetSoftwareUpdatesOutput, error)
	GetSoftwareUpdatesAsync(ctx workflow.Context, input *snowball.GetSoftwareUpdatesInput) *SnowballGetSoftwareUpdatesFuture

	ListClusterJobs(ctx workflow.Context, input *snowball.ListClusterJobsInput) (*snowball.ListClusterJobsOutput, error)
	ListClusterJobsAsync(ctx workflow.Context, input *snowball.ListClusterJobsInput) *SnowballListClusterJobsFuture

	ListClusters(ctx workflow.Context, input *snowball.ListClustersInput) (*snowball.ListClustersOutput, error)
	ListClustersAsync(ctx workflow.Context, input *snowball.ListClustersInput) *SnowballListClustersFuture

	ListCompatibleImages(ctx workflow.Context, input *snowball.ListCompatibleImagesInput) (*snowball.ListCompatibleImagesOutput, error)
	ListCompatibleImagesAsync(ctx workflow.Context, input *snowball.ListCompatibleImagesInput) *SnowballListCompatibleImagesFuture

	ListJobs(ctx workflow.Context, input *snowball.ListJobsInput) (*snowball.ListJobsOutput, error)
	ListJobsAsync(ctx workflow.Context, input *snowball.ListJobsInput) *SnowballListJobsFuture

	UpdateCluster(ctx workflow.Context, input *snowball.UpdateClusterInput) (*snowball.UpdateClusterOutput, error)
	UpdateClusterAsync(ctx workflow.Context, input *snowball.UpdateClusterInput) *SnowballUpdateClusterFuture

	UpdateJob(ctx workflow.Context, input *snowball.UpdateJobInput) (*snowball.UpdateJobOutput, error)
	UpdateJobAsync(ctx workflow.Context, input *snowball.UpdateJobInput) *SnowballUpdateJobFuture

	UpdateJobShipmentState(ctx workflow.Context, input *snowball.UpdateJobShipmentStateInput) (*snowball.UpdateJobShipmentStateOutput, error)
	UpdateJobShipmentStateAsync(ctx workflow.Context, input *snowball.UpdateJobShipmentStateInput) *SnowballUpdateJobShipmentStateFuture
}

type SnowballStub struct{}

func NewSnowballStub() SnowballClient {
	return &SnowballStub{}
}

type SnowballCancelClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballCancelClusterFuture) Get(ctx workflow.Context) (*snowball.CancelClusterOutput, error) {
	var output snowball.CancelClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballCancelJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballCancelJobFuture) Get(ctx workflow.Context) (*snowball.CancelJobOutput, error) {
	var output snowball.CancelJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballCreateAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballCreateAddressFuture) Get(ctx workflow.Context) (*snowball.CreateAddressOutput, error) {
	var output snowball.CreateAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballCreateClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballCreateClusterFuture) Get(ctx workflow.Context) (*snowball.CreateClusterOutput, error) {
	var output snowball.CreateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballCreateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballCreateJobFuture) Get(ctx workflow.Context) (*snowball.CreateJobOutput, error) {
	var output snowball.CreateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballCreateReturnShippingLabelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballCreateReturnShippingLabelFuture) Get(ctx workflow.Context) (*snowball.CreateReturnShippingLabelOutput, error) {
	var output snowball.CreateReturnShippingLabelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballDescribeAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballDescribeAddressFuture) Get(ctx workflow.Context) (*snowball.DescribeAddressOutput, error) {
	var output snowball.DescribeAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballDescribeAddressesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballDescribeAddressesFuture) Get(ctx workflow.Context) (*snowball.DescribeAddressesOutput, error) {
	var output snowball.DescribeAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballDescribeClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballDescribeClusterFuture) Get(ctx workflow.Context) (*snowball.DescribeClusterOutput, error) {
	var output snowball.DescribeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballDescribeJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballDescribeJobFuture) Get(ctx workflow.Context) (*snowball.DescribeJobOutput, error) {
	var output snowball.DescribeJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballDescribeReturnShippingLabelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballDescribeReturnShippingLabelFuture) Get(ctx workflow.Context) (*snowball.DescribeReturnShippingLabelOutput, error) {
	var output snowball.DescribeReturnShippingLabelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballGetJobManifestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballGetJobManifestFuture) Get(ctx workflow.Context) (*snowball.GetJobManifestOutput, error) {
	var output snowball.GetJobManifestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballGetJobUnlockCodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballGetJobUnlockCodeFuture) Get(ctx workflow.Context) (*snowball.GetJobUnlockCodeOutput, error) {
	var output snowball.GetJobUnlockCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballGetSnowballUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballGetSnowballUsageFuture) Get(ctx workflow.Context) (*snowball.GetSnowballUsageOutput, error) {
	var output snowball.GetSnowballUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballGetSoftwareUpdatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballGetSoftwareUpdatesFuture) Get(ctx workflow.Context) (*snowball.GetSoftwareUpdatesOutput, error) {
	var output snowball.GetSoftwareUpdatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballListClusterJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballListClusterJobsFuture) Get(ctx workflow.Context) (*snowball.ListClusterJobsOutput, error) {
	var output snowball.ListClusterJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballListClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballListClustersFuture) Get(ctx workflow.Context) (*snowball.ListClustersOutput, error) {
	var output snowball.ListClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballListCompatibleImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballListCompatibleImagesFuture) Get(ctx workflow.Context) (*snowball.ListCompatibleImagesOutput, error) {
	var output snowball.ListCompatibleImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballListJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballListJobsFuture) Get(ctx workflow.Context) (*snowball.ListJobsOutput, error) {
	var output snowball.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballUpdateClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballUpdateClusterFuture) Get(ctx workflow.Context) (*snowball.UpdateClusterOutput, error) {
	var output snowball.UpdateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballUpdateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballUpdateJobFuture) Get(ctx workflow.Context) (*snowball.UpdateJobOutput, error) {
	var output snowball.UpdateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SnowballUpdateJobShipmentStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SnowballUpdateJobShipmentStateFuture) Get(ctx workflow.Context) (*snowball.UpdateJobShipmentStateOutput, error) {
	var output snowball.UpdateJobShipmentStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) CancelCluster(ctx workflow.Context, input *snowball.CancelClusterInput) (*snowball.CancelClusterOutput, error) {
	var output snowball.CancelClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.CancelCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) CancelClusterAsync(ctx workflow.Context, input *snowball.CancelClusterInput) *SnowballCancelClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.CancelCluster", input)
	return &SnowballCancelClusterFuture{Future: future}
}

func (a *SnowballStub) CancelJob(ctx workflow.Context, input *snowball.CancelJobInput) (*snowball.CancelJobOutput, error) {
	var output snowball.CancelJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.CancelJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) CancelJobAsync(ctx workflow.Context, input *snowball.CancelJobInput) *SnowballCancelJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.CancelJob", input)
	return &SnowballCancelJobFuture{Future: future}
}

func (a *SnowballStub) CreateAddress(ctx workflow.Context, input *snowball.CreateAddressInput) (*snowball.CreateAddressOutput, error) {
	var output snowball.CreateAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.CreateAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) CreateAddressAsync(ctx workflow.Context, input *snowball.CreateAddressInput) *SnowballCreateAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.CreateAddress", input)
	return &SnowballCreateAddressFuture{Future: future}
}

func (a *SnowballStub) CreateCluster(ctx workflow.Context, input *snowball.CreateClusterInput) (*snowball.CreateClusterOutput, error) {
	var output snowball.CreateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.CreateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) CreateClusterAsync(ctx workflow.Context, input *snowball.CreateClusterInput) *SnowballCreateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.CreateCluster", input)
	return &SnowballCreateClusterFuture{Future: future}
}

func (a *SnowballStub) CreateJob(ctx workflow.Context, input *snowball.CreateJobInput) (*snowball.CreateJobOutput, error) {
	var output snowball.CreateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) CreateJobAsync(ctx workflow.Context, input *snowball.CreateJobInput) *SnowballCreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.CreateJob", input)
	return &SnowballCreateJobFuture{Future: future}
}

func (a *SnowballStub) CreateReturnShippingLabel(ctx workflow.Context, input *snowball.CreateReturnShippingLabelInput) (*snowball.CreateReturnShippingLabelOutput, error) {
	var output snowball.CreateReturnShippingLabelOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.CreateReturnShippingLabel", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) CreateReturnShippingLabelAsync(ctx workflow.Context, input *snowball.CreateReturnShippingLabelInput) *SnowballCreateReturnShippingLabelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.CreateReturnShippingLabel", input)
	return &SnowballCreateReturnShippingLabelFuture{Future: future}
}

func (a *SnowballStub) DescribeAddress(ctx workflow.Context, input *snowball.DescribeAddressInput) (*snowball.DescribeAddressOutput, error) {
	var output snowball.DescribeAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.DescribeAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) DescribeAddressAsync(ctx workflow.Context, input *snowball.DescribeAddressInput) *SnowballDescribeAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.DescribeAddress", input)
	return &SnowballDescribeAddressFuture{Future: future}
}

func (a *SnowballStub) DescribeAddresses(ctx workflow.Context, input *snowball.DescribeAddressesInput) (*snowball.DescribeAddressesOutput, error) {
	var output snowball.DescribeAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.DescribeAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) DescribeAddressesAsync(ctx workflow.Context, input *snowball.DescribeAddressesInput) *SnowballDescribeAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.DescribeAddresses", input)
	return &SnowballDescribeAddressesFuture{Future: future}
}

func (a *SnowballStub) DescribeCluster(ctx workflow.Context, input *snowball.DescribeClusterInput) (*snowball.DescribeClusterOutput, error) {
	var output snowball.DescribeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.DescribeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) DescribeClusterAsync(ctx workflow.Context, input *snowball.DescribeClusterInput) *SnowballDescribeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.DescribeCluster", input)
	return &SnowballDescribeClusterFuture{Future: future}
}

func (a *SnowballStub) DescribeJob(ctx workflow.Context, input *snowball.DescribeJobInput) (*snowball.DescribeJobOutput, error) {
	var output snowball.DescribeJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.DescribeJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) DescribeJobAsync(ctx workflow.Context, input *snowball.DescribeJobInput) *SnowballDescribeJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.DescribeJob", input)
	return &SnowballDescribeJobFuture{Future: future}
}

func (a *SnowballStub) DescribeReturnShippingLabel(ctx workflow.Context, input *snowball.DescribeReturnShippingLabelInput) (*snowball.DescribeReturnShippingLabelOutput, error) {
	var output snowball.DescribeReturnShippingLabelOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.DescribeReturnShippingLabel", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) DescribeReturnShippingLabelAsync(ctx workflow.Context, input *snowball.DescribeReturnShippingLabelInput) *SnowballDescribeReturnShippingLabelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.DescribeReturnShippingLabel", input)
	return &SnowballDescribeReturnShippingLabelFuture{Future: future}
}

func (a *SnowballStub) GetJobManifest(ctx workflow.Context, input *snowball.GetJobManifestInput) (*snowball.GetJobManifestOutput, error) {
	var output snowball.GetJobManifestOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.GetJobManifest", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) GetJobManifestAsync(ctx workflow.Context, input *snowball.GetJobManifestInput) *SnowballGetJobManifestFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.GetJobManifest", input)
	return &SnowballGetJobManifestFuture{Future: future}
}

func (a *SnowballStub) GetJobUnlockCode(ctx workflow.Context, input *snowball.GetJobUnlockCodeInput) (*snowball.GetJobUnlockCodeOutput, error) {
	var output snowball.GetJobUnlockCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.GetJobUnlockCode", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) GetJobUnlockCodeAsync(ctx workflow.Context, input *snowball.GetJobUnlockCodeInput) *SnowballGetJobUnlockCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.GetJobUnlockCode", input)
	return &SnowballGetJobUnlockCodeFuture{Future: future}
}

func (a *SnowballStub) GetSnowballUsage(ctx workflow.Context, input *snowball.GetSnowballUsageInput) (*snowball.GetSnowballUsageOutput, error) {
	var output snowball.GetSnowballUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.GetSnowballUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) GetSnowballUsageAsync(ctx workflow.Context, input *snowball.GetSnowballUsageInput) *SnowballGetSnowballUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.GetSnowballUsage", input)
	return &SnowballGetSnowballUsageFuture{Future: future}
}

func (a *SnowballStub) GetSoftwareUpdates(ctx workflow.Context, input *snowball.GetSoftwareUpdatesInput) (*snowball.GetSoftwareUpdatesOutput, error) {
	var output snowball.GetSoftwareUpdatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.GetSoftwareUpdates", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) GetSoftwareUpdatesAsync(ctx workflow.Context, input *snowball.GetSoftwareUpdatesInput) *SnowballGetSoftwareUpdatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.GetSoftwareUpdates", input)
	return &SnowballGetSoftwareUpdatesFuture{Future: future}
}

func (a *SnowballStub) ListClusterJobs(ctx workflow.Context, input *snowball.ListClusterJobsInput) (*snowball.ListClusterJobsOutput, error) {
	var output snowball.ListClusterJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.ListClusterJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) ListClusterJobsAsync(ctx workflow.Context, input *snowball.ListClusterJobsInput) *SnowballListClusterJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.ListClusterJobs", input)
	return &SnowballListClusterJobsFuture{Future: future}
}

func (a *SnowballStub) ListClusters(ctx workflow.Context, input *snowball.ListClustersInput) (*snowball.ListClustersOutput, error) {
	var output snowball.ListClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.ListClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) ListClustersAsync(ctx workflow.Context, input *snowball.ListClustersInput) *SnowballListClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.ListClusters", input)
	return &SnowballListClustersFuture{Future: future}
}

func (a *SnowballStub) ListCompatibleImages(ctx workflow.Context, input *snowball.ListCompatibleImagesInput) (*snowball.ListCompatibleImagesOutput, error) {
	var output snowball.ListCompatibleImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.ListCompatibleImages", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) ListCompatibleImagesAsync(ctx workflow.Context, input *snowball.ListCompatibleImagesInput) *SnowballListCompatibleImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.ListCompatibleImages", input)
	return &SnowballListCompatibleImagesFuture{Future: future}
}

func (a *SnowballStub) ListJobs(ctx workflow.Context, input *snowball.ListJobsInput) (*snowball.ListJobsOutput, error) {
	var output snowball.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) ListJobsAsync(ctx workflow.Context, input *snowball.ListJobsInput) *SnowballListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.ListJobs", input)
	return &SnowballListJobsFuture{Future: future}
}

func (a *SnowballStub) UpdateCluster(ctx workflow.Context, input *snowball.UpdateClusterInput) (*snowball.UpdateClusterOutput, error) {
	var output snowball.UpdateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.UpdateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) UpdateClusterAsync(ctx workflow.Context, input *snowball.UpdateClusterInput) *SnowballUpdateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.UpdateCluster", input)
	return &SnowballUpdateClusterFuture{Future: future}
}

func (a *SnowballStub) UpdateJob(ctx workflow.Context, input *snowball.UpdateJobInput) (*snowball.UpdateJobOutput, error) {
	var output snowball.UpdateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.UpdateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) UpdateJobAsync(ctx workflow.Context, input *snowball.UpdateJobInput) *SnowballUpdateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.UpdateJob", input)
	return &SnowballUpdateJobFuture{Future: future}
}

func (a *SnowballStub) UpdateJobShipmentState(ctx workflow.Context, input *snowball.UpdateJobShipmentStateInput) (*snowball.UpdateJobShipmentStateOutput, error) {
	var output snowball.UpdateJobShipmentStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.snowball.UpdateJobShipmentState", input).Get(ctx, &output)
	return &output, err
}

func (a *SnowballStub) UpdateJobShipmentStateAsync(ctx workflow.Context, input *snowball.UpdateJobShipmentStateInput) *SnowballUpdateJobShipmentStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.snowball.UpdateJobShipmentState", input)
	return &SnowballUpdateJobShipmentStateFuture{Future: future}
}
