// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/costexplorer"
	"go.temporal.io/sdk/workflow"
)

type CostExplorerClient interface {
	CreateAnomalyMonitor(ctx workflow.Context, input *costexplorer.CreateAnomalyMonitorInput) (*costexplorer.CreateAnomalyMonitorOutput, error)
	CreateAnomalyMonitorAsync(ctx workflow.Context, input *costexplorer.CreateAnomalyMonitorInput) *CostexplorerCreateAnomalyMonitorFuture

	CreateAnomalySubscription(ctx workflow.Context, input *costexplorer.CreateAnomalySubscriptionInput) (*costexplorer.CreateAnomalySubscriptionOutput, error)
	CreateAnomalySubscriptionAsync(ctx workflow.Context, input *costexplorer.CreateAnomalySubscriptionInput) *CostexplorerCreateAnomalySubscriptionFuture

	CreateCostCategoryDefinition(ctx workflow.Context, input *costexplorer.CreateCostCategoryDefinitionInput) (*costexplorer.CreateCostCategoryDefinitionOutput, error)
	CreateCostCategoryDefinitionAsync(ctx workflow.Context, input *costexplorer.CreateCostCategoryDefinitionInput) *CostexplorerCreateCostCategoryDefinitionFuture

	DeleteAnomalyMonitor(ctx workflow.Context, input *costexplorer.DeleteAnomalyMonitorInput) (*costexplorer.DeleteAnomalyMonitorOutput, error)
	DeleteAnomalyMonitorAsync(ctx workflow.Context, input *costexplorer.DeleteAnomalyMonitorInput) *CostexplorerDeleteAnomalyMonitorFuture

	DeleteAnomalySubscription(ctx workflow.Context, input *costexplorer.DeleteAnomalySubscriptionInput) (*costexplorer.DeleteAnomalySubscriptionOutput, error)
	DeleteAnomalySubscriptionAsync(ctx workflow.Context, input *costexplorer.DeleteAnomalySubscriptionInput) *CostexplorerDeleteAnomalySubscriptionFuture

	DeleteCostCategoryDefinition(ctx workflow.Context, input *costexplorer.DeleteCostCategoryDefinitionInput) (*costexplorer.DeleteCostCategoryDefinitionOutput, error)
	DeleteCostCategoryDefinitionAsync(ctx workflow.Context, input *costexplorer.DeleteCostCategoryDefinitionInput) *CostexplorerDeleteCostCategoryDefinitionFuture

	DescribeCostCategoryDefinition(ctx workflow.Context, input *costexplorer.DescribeCostCategoryDefinitionInput) (*costexplorer.DescribeCostCategoryDefinitionOutput, error)
	DescribeCostCategoryDefinitionAsync(ctx workflow.Context, input *costexplorer.DescribeCostCategoryDefinitionInput) *CostexplorerDescribeCostCategoryDefinitionFuture

	GetAnomalies(ctx workflow.Context, input *costexplorer.GetAnomaliesInput) (*costexplorer.GetAnomaliesOutput, error)
	GetAnomaliesAsync(ctx workflow.Context, input *costexplorer.GetAnomaliesInput) *CostexplorerGetAnomaliesFuture

	GetAnomalyMonitors(ctx workflow.Context, input *costexplorer.GetAnomalyMonitorsInput) (*costexplorer.GetAnomalyMonitorsOutput, error)
	GetAnomalyMonitorsAsync(ctx workflow.Context, input *costexplorer.GetAnomalyMonitorsInput) *CostexplorerGetAnomalyMonitorsFuture

	GetAnomalySubscriptions(ctx workflow.Context, input *costexplorer.GetAnomalySubscriptionsInput) (*costexplorer.GetAnomalySubscriptionsOutput, error)
	GetAnomalySubscriptionsAsync(ctx workflow.Context, input *costexplorer.GetAnomalySubscriptionsInput) *CostexplorerGetAnomalySubscriptionsFuture

	GetCostAndUsage(ctx workflow.Context, input *costexplorer.GetCostAndUsageInput) (*costexplorer.GetCostAndUsageOutput, error)
	GetCostAndUsageAsync(ctx workflow.Context, input *costexplorer.GetCostAndUsageInput) *CostexplorerGetCostAndUsageFuture

	GetCostAndUsageWithResources(ctx workflow.Context, input *costexplorer.GetCostAndUsageWithResourcesInput) (*costexplorer.GetCostAndUsageWithResourcesOutput, error)
	GetCostAndUsageWithResourcesAsync(ctx workflow.Context, input *costexplorer.GetCostAndUsageWithResourcesInput) *CostexplorerGetCostAndUsageWithResourcesFuture

	GetCostForecast(ctx workflow.Context, input *costexplorer.GetCostForecastInput) (*costexplorer.GetCostForecastOutput, error)
	GetCostForecastAsync(ctx workflow.Context, input *costexplorer.GetCostForecastInput) *CostexplorerGetCostForecastFuture

	GetDimensionValues(ctx workflow.Context, input *costexplorer.GetDimensionValuesInput) (*costexplorer.GetDimensionValuesOutput, error)
	GetDimensionValuesAsync(ctx workflow.Context, input *costexplorer.GetDimensionValuesInput) *CostexplorerGetDimensionValuesFuture

	GetReservationCoverage(ctx workflow.Context, input *costexplorer.GetReservationCoverageInput) (*costexplorer.GetReservationCoverageOutput, error)
	GetReservationCoverageAsync(ctx workflow.Context, input *costexplorer.GetReservationCoverageInput) *CostexplorerGetReservationCoverageFuture

	GetReservationPurchaseRecommendation(ctx workflow.Context, input *costexplorer.GetReservationPurchaseRecommendationInput) (*costexplorer.GetReservationPurchaseRecommendationOutput, error)
	GetReservationPurchaseRecommendationAsync(ctx workflow.Context, input *costexplorer.GetReservationPurchaseRecommendationInput) *CostexplorerGetReservationPurchaseRecommendationFuture

	GetReservationUtilization(ctx workflow.Context, input *costexplorer.GetReservationUtilizationInput) (*costexplorer.GetReservationUtilizationOutput, error)
	GetReservationUtilizationAsync(ctx workflow.Context, input *costexplorer.GetReservationUtilizationInput) *CostexplorerGetReservationUtilizationFuture

	GetRightsizingRecommendation(ctx workflow.Context, input *costexplorer.GetRightsizingRecommendationInput) (*costexplorer.GetRightsizingRecommendationOutput, error)
	GetRightsizingRecommendationAsync(ctx workflow.Context, input *costexplorer.GetRightsizingRecommendationInput) *CostexplorerGetRightsizingRecommendationFuture

	GetSavingsPlansCoverage(ctx workflow.Context, input *costexplorer.GetSavingsPlansCoverageInput) (*costexplorer.GetSavingsPlansCoverageOutput, error)
	GetSavingsPlansCoverageAsync(ctx workflow.Context, input *costexplorer.GetSavingsPlansCoverageInput) *CostexplorerGetSavingsPlansCoverageFuture

	GetSavingsPlansPurchaseRecommendation(ctx workflow.Context, input *costexplorer.GetSavingsPlansPurchaseRecommendationInput) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error)
	GetSavingsPlansPurchaseRecommendationAsync(ctx workflow.Context, input *costexplorer.GetSavingsPlansPurchaseRecommendationInput) *CostexplorerGetSavingsPlansPurchaseRecommendationFuture

	GetSavingsPlansUtilization(ctx workflow.Context, input *costexplorer.GetSavingsPlansUtilizationInput) (*costexplorer.GetSavingsPlansUtilizationOutput, error)
	GetSavingsPlansUtilizationAsync(ctx workflow.Context, input *costexplorer.GetSavingsPlansUtilizationInput) *CostexplorerGetSavingsPlansUtilizationFuture

	GetSavingsPlansUtilizationDetails(ctx workflow.Context, input *costexplorer.GetSavingsPlansUtilizationDetailsInput) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error)
	GetSavingsPlansUtilizationDetailsAsync(ctx workflow.Context, input *costexplorer.GetSavingsPlansUtilizationDetailsInput) *CostexplorerGetSavingsPlansUtilizationDetailsFuture

	GetTags(ctx workflow.Context, input *costexplorer.GetTagsInput) (*costexplorer.GetTagsOutput, error)
	GetTagsAsync(ctx workflow.Context, input *costexplorer.GetTagsInput) *CostexplorerGetTagsFuture

	GetUsageForecast(ctx workflow.Context, input *costexplorer.GetUsageForecastInput) (*costexplorer.GetUsageForecastOutput, error)
	GetUsageForecastAsync(ctx workflow.Context, input *costexplorer.GetUsageForecastInput) *CostexplorerGetUsageForecastFuture

	ListCostCategoryDefinitions(ctx workflow.Context, input *costexplorer.ListCostCategoryDefinitionsInput) (*costexplorer.ListCostCategoryDefinitionsOutput, error)
	ListCostCategoryDefinitionsAsync(ctx workflow.Context, input *costexplorer.ListCostCategoryDefinitionsInput) *CostexplorerListCostCategoryDefinitionsFuture

	ProvideAnomalyFeedback(ctx workflow.Context, input *costexplorer.ProvideAnomalyFeedbackInput) (*costexplorer.ProvideAnomalyFeedbackOutput, error)
	ProvideAnomalyFeedbackAsync(ctx workflow.Context, input *costexplorer.ProvideAnomalyFeedbackInput) *CostexplorerProvideAnomalyFeedbackFuture

	UpdateAnomalyMonitor(ctx workflow.Context, input *costexplorer.UpdateAnomalyMonitorInput) (*costexplorer.UpdateAnomalyMonitorOutput, error)
	UpdateAnomalyMonitorAsync(ctx workflow.Context, input *costexplorer.UpdateAnomalyMonitorInput) *CostexplorerUpdateAnomalyMonitorFuture

	UpdateAnomalySubscription(ctx workflow.Context, input *costexplorer.UpdateAnomalySubscriptionInput) (*costexplorer.UpdateAnomalySubscriptionOutput, error)
	UpdateAnomalySubscriptionAsync(ctx workflow.Context, input *costexplorer.UpdateAnomalySubscriptionInput) *CostexplorerUpdateAnomalySubscriptionFuture

	UpdateCostCategoryDefinition(ctx workflow.Context, input *costexplorer.UpdateCostCategoryDefinitionInput) (*costexplorer.UpdateCostCategoryDefinitionOutput, error)
	UpdateCostCategoryDefinitionAsync(ctx workflow.Context, input *costexplorer.UpdateCostCategoryDefinitionInput) *CostexplorerUpdateCostCategoryDefinitionFuture
}

type CostExplorerStub struct{}

func NewCostExplorerStub() CostExplorerClient {
	return &CostExplorerStub{}
}

type CostexplorerCreateAnomalyMonitorFuture struct {
	Future workflow.Future
}

func (r *CostexplorerCreateAnomalyMonitorFuture) Get(ctx workflow.Context) (*costexplorer.CreateAnomalyMonitorOutput, error) {
	var output costexplorer.CreateAnomalyMonitorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerCreateAnomalySubscriptionFuture struct {
	Future workflow.Future
}

func (r *CostexplorerCreateAnomalySubscriptionFuture) Get(ctx workflow.Context) (*costexplorer.CreateAnomalySubscriptionOutput, error) {
	var output costexplorer.CreateAnomalySubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerCreateCostCategoryDefinitionFuture struct {
	Future workflow.Future
}

func (r *CostexplorerCreateCostCategoryDefinitionFuture) Get(ctx workflow.Context) (*costexplorer.CreateCostCategoryDefinitionOutput, error) {
	var output costexplorer.CreateCostCategoryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerDeleteAnomalyMonitorFuture struct {
	Future workflow.Future
}

func (r *CostexplorerDeleteAnomalyMonitorFuture) Get(ctx workflow.Context) (*costexplorer.DeleteAnomalyMonitorOutput, error) {
	var output costexplorer.DeleteAnomalyMonitorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerDeleteAnomalySubscriptionFuture struct {
	Future workflow.Future
}

func (r *CostexplorerDeleteAnomalySubscriptionFuture) Get(ctx workflow.Context) (*costexplorer.DeleteAnomalySubscriptionOutput, error) {
	var output costexplorer.DeleteAnomalySubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerDeleteCostCategoryDefinitionFuture struct {
	Future workflow.Future
}

func (r *CostexplorerDeleteCostCategoryDefinitionFuture) Get(ctx workflow.Context) (*costexplorer.DeleteCostCategoryDefinitionOutput, error) {
	var output costexplorer.DeleteCostCategoryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerDescribeCostCategoryDefinitionFuture struct {
	Future workflow.Future
}

func (r *CostexplorerDescribeCostCategoryDefinitionFuture) Get(ctx workflow.Context) (*costexplorer.DescribeCostCategoryDefinitionOutput, error) {
	var output costexplorer.DescribeCostCategoryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetAnomaliesFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetAnomaliesFuture) Get(ctx workflow.Context) (*costexplorer.GetAnomaliesOutput, error) {
	var output costexplorer.GetAnomaliesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetAnomalyMonitorsFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetAnomalyMonitorsFuture) Get(ctx workflow.Context) (*costexplorer.GetAnomalyMonitorsOutput, error) {
	var output costexplorer.GetAnomalyMonitorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetAnomalySubscriptionsFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetAnomalySubscriptionsFuture) Get(ctx workflow.Context) (*costexplorer.GetAnomalySubscriptionsOutput, error) {
	var output costexplorer.GetAnomalySubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetCostAndUsageFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetCostAndUsageFuture) Get(ctx workflow.Context) (*costexplorer.GetCostAndUsageOutput, error) {
	var output costexplorer.GetCostAndUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetCostAndUsageWithResourcesFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetCostAndUsageWithResourcesFuture) Get(ctx workflow.Context) (*costexplorer.GetCostAndUsageWithResourcesOutput, error) {
	var output costexplorer.GetCostAndUsageWithResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetCostForecastFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetCostForecastFuture) Get(ctx workflow.Context) (*costexplorer.GetCostForecastOutput, error) {
	var output costexplorer.GetCostForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetDimensionValuesFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetDimensionValuesFuture) Get(ctx workflow.Context) (*costexplorer.GetDimensionValuesOutput, error) {
	var output costexplorer.GetDimensionValuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetReservationCoverageFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetReservationCoverageFuture) Get(ctx workflow.Context) (*costexplorer.GetReservationCoverageOutput, error) {
	var output costexplorer.GetReservationCoverageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetReservationPurchaseRecommendationFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetReservationPurchaseRecommendationFuture) Get(ctx workflow.Context) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	var output costexplorer.GetReservationPurchaseRecommendationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetReservationUtilizationFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetReservationUtilizationFuture) Get(ctx workflow.Context) (*costexplorer.GetReservationUtilizationOutput, error) {
	var output costexplorer.GetReservationUtilizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetRightsizingRecommendationFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetRightsizingRecommendationFuture) Get(ctx workflow.Context) (*costexplorer.GetRightsizingRecommendationOutput, error) {
	var output costexplorer.GetRightsizingRecommendationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetSavingsPlansCoverageFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetSavingsPlansCoverageFuture) Get(ctx workflow.Context) (*costexplorer.GetSavingsPlansCoverageOutput, error) {
	var output costexplorer.GetSavingsPlansCoverageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetSavingsPlansPurchaseRecommendationFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetSavingsPlansPurchaseRecommendationFuture) Get(ctx workflow.Context) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error) {
	var output costexplorer.GetSavingsPlansPurchaseRecommendationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetSavingsPlansUtilizationFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetSavingsPlansUtilizationFuture) Get(ctx workflow.Context) (*costexplorer.GetSavingsPlansUtilizationOutput, error) {
	var output costexplorer.GetSavingsPlansUtilizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetSavingsPlansUtilizationDetailsFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetSavingsPlansUtilizationDetailsFuture) Get(ctx workflow.Context) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error) {
	var output costexplorer.GetSavingsPlansUtilizationDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetTagsFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetTagsFuture) Get(ctx workflow.Context) (*costexplorer.GetTagsOutput, error) {
	var output costexplorer.GetTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerGetUsageForecastFuture struct {
	Future workflow.Future
}

func (r *CostexplorerGetUsageForecastFuture) Get(ctx workflow.Context) (*costexplorer.GetUsageForecastOutput, error) {
	var output costexplorer.GetUsageForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerListCostCategoryDefinitionsFuture struct {
	Future workflow.Future
}

func (r *CostexplorerListCostCategoryDefinitionsFuture) Get(ctx workflow.Context) (*costexplorer.ListCostCategoryDefinitionsOutput, error) {
	var output costexplorer.ListCostCategoryDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerProvideAnomalyFeedbackFuture struct {
	Future workflow.Future
}

func (r *CostexplorerProvideAnomalyFeedbackFuture) Get(ctx workflow.Context) (*costexplorer.ProvideAnomalyFeedbackOutput, error) {
	var output costexplorer.ProvideAnomalyFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerUpdateAnomalyMonitorFuture struct {
	Future workflow.Future
}

func (r *CostexplorerUpdateAnomalyMonitorFuture) Get(ctx workflow.Context) (*costexplorer.UpdateAnomalyMonitorOutput, error) {
	var output costexplorer.UpdateAnomalyMonitorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerUpdateAnomalySubscriptionFuture struct {
	Future workflow.Future
}

func (r *CostexplorerUpdateAnomalySubscriptionFuture) Get(ctx workflow.Context) (*costexplorer.UpdateAnomalySubscriptionOutput, error) {
	var output costexplorer.UpdateAnomalySubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CostexplorerUpdateCostCategoryDefinitionFuture struct {
	Future workflow.Future
}

func (r *CostexplorerUpdateCostCategoryDefinitionFuture) Get(ctx workflow.Context) (*costexplorer.UpdateCostCategoryDefinitionOutput, error) {
	var output costexplorer.UpdateCostCategoryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) CreateAnomalyMonitor(ctx workflow.Context, input *costexplorer.CreateAnomalyMonitorInput) (*costexplorer.CreateAnomalyMonitorOutput, error) {
	var output costexplorer.CreateAnomalyMonitorOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.CreateAnomalyMonitor", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) CreateAnomalyMonitorAsync(ctx workflow.Context, input *costexplorer.CreateAnomalyMonitorInput) *CostexplorerCreateAnomalyMonitorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.CreateAnomalyMonitor", input)
	return &CostexplorerCreateAnomalyMonitorFuture{Future: future}
}

func (a *CostExplorerStub) CreateAnomalySubscription(ctx workflow.Context, input *costexplorer.CreateAnomalySubscriptionInput) (*costexplorer.CreateAnomalySubscriptionOutput, error) {
	var output costexplorer.CreateAnomalySubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.CreateAnomalySubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) CreateAnomalySubscriptionAsync(ctx workflow.Context, input *costexplorer.CreateAnomalySubscriptionInput) *CostexplorerCreateAnomalySubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.CreateAnomalySubscription", input)
	return &CostexplorerCreateAnomalySubscriptionFuture{Future: future}
}

func (a *CostExplorerStub) CreateCostCategoryDefinition(ctx workflow.Context, input *costexplorer.CreateCostCategoryDefinitionInput) (*costexplorer.CreateCostCategoryDefinitionOutput, error) {
	var output costexplorer.CreateCostCategoryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.CreateCostCategoryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) CreateCostCategoryDefinitionAsync(ctx workflow.Context, input *costexplorer.CreateCostCategoryDefinitionInput) *CostexplorerCreateCostCategoryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.CreateCostCategoryDefinition", input)
	return &CostexplorerCreateCostCategoryDefinitionFuture{Future: future}
}

func (a *CostExplorerStub) DeleteAnomalyMonitor(ctx workflow.Context, input *costexplorer.DeleteAnomalyMonitorInput) (*costexplorer.DeleteAnomalyMonitorOutput, error) {
	var output costexplorer.DeleteAnomalyMonitorOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.DeleteAnomalyMonitor", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) DeleteAnomalyMonitorAsync(ctx workflow.Context, input *costexplorer.DeleteAnomalyMonitorInput) *CostexplorerDeleteAnomalyMonitorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.DeleteAnomalyMonitor", input)
	return &CostexplorerDeleteAnomalyMonitorFuture{Future: future}
}

func (a *CostExplorerStub) DeleteAnomalySubscription(ctx workflow.Context, input *costexplorer.DeleteAnomalySubscriptionInput) (*costexplorer.DeleteAnomalySubscriptionOutput, error) {
	var output costexplorer.DeleteAnomalySubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.DeleteAnomalySubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) DeleteAnomalySubscriptionAsync(ctx workflow.Context, input *costexplorer.DeleteAnomalySubscriptionInput) *CostexplorerDeleteAnomalySubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.DeleteAnomalySubscription", input)
	return &CostexplorerDeleteAnomalySubscriptionFuture{Future: future}
}

func (a *CostExplorerStub) DeleteCostCategoryDefinition(ctx workflow.Context, input *costexplorer.DeleteCostCategoryDefinitionInput) (*costexplorer.DeleteCostCategoryDefinitionOutput, error) {
	var output costexplorer.DeleteCostCategoryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.DeleteCostCategoryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) DeleteCostCategoryDefinitionAsync(ctx workflow.Context, input *costexplorer.DeleteCostCategoryDefinitionInput) *CostexplorerDeleteCostCategoryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.DeleteCostCategoryDefinition", input)
	return &CostexplorerDeleteCostCategoryDefinitionFuture{Future: future}
}

func (a *CostExplorerStub) DescribeCostCategoryDefinition(ctx workflow.Context, input *costexplorer.DescribeCostCategoryDefinitionInput) (*costexplorer.DescribeCostCategoryDefinitionOutput, error) {
	var output costexplorer.DescribeCostCategoryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.DescribeCostCategoryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) DescribeCostCategoryDefinitionAsync(ctx workflow.Context, input *costexplorer.DescribeCostCategoryDefinitionInput) *CostexplorerDescribeCostCategoryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.DescribeCostCategoryDefinition", input)
	return &CostexplorerDescribeCostCategoryDefinitionFuture{Future: future}
}

func (a *CostExplorerStub) GetAnomalies(ctx workflow.Context, input *costexplorer.GetAnomaliesInput) (*costexplorer.GetAnomaliesOutput, error) {
	var output costexplorer.GetAnomaliesOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetAnomalies", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetAnomaliesAsync(ctx workflow.Context, input *costexplorer.GetAnomaliesInput) *CostexplorerGetAnomaliesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetAnomalies", input)
	return &CostexplorerGetAnomaliesFuture{Future: future}
}

func (a *CostExplorerStub) GetAnomalyMonitors(ctx workflow.Context, input *costexplorer.GetAnomalyMonitorsInput) (*costexplorer.GetAnomalyMonitorsOutput, error) {
	var output costexplorer.GetAnomalyMonitorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetAnomalyMonitors", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetAnomalyMonitorsAsync(ctx workflow.Context, input *costexplorer.GetAnomalyMonitorsInput) *CostexplorerGetAnomalyMonitorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetAnomalyMonitors", input)
	return &CostexplorerGetAnomalyMonitorsFuture{Future: future}
}

func (a *CostExplorerStub) GetAnomalySubscriptions(ctx workflow.Context, input *costexplorer.GetAnomalySubscriptionsInput) (*costexplorer.GetAnomalySubscriptionsOutput, error) {
	var output costexplorer.GetAnomalySubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetAnomalySubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetAnomalySubscriptionsAsync(ctx workflow.Context, input *costexplorer.GetAnomalySubscriptionsInput) *CostexplorerGetAnomalySubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetAnomalySubscriptions", input)
	return &CostexplorerGetAnomalySubscriptionsFuture{Future: future}
}

func (a *CostExplorerStub) GetCostAndUsage(ctx workflow.Context, input *costexplorer.GetCostAndUsageInput) (*costexplorer.GetCostAndUsageOutput, error) {
	var output costexplorer.GetCostAndUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetCostAndUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetCostAndUsageAsync(ctx workflow.Context, input *costexplorer.GetCostAndUsageInput) *CostexplorerGetCostAndUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetCostAndUsage", input)
	return &CostexplorerGetCostAndUsageFuture{Future: future}
}

func (a *CostExplorerStub) GetCostAndUsageWithResources(ctx workflow.Context, input *costexplorer.GetCostAndUsageWithResourcesInput) (*costexplorer.GetCostAndUsageWithResourcesOutput, error) {
	var output costexplorer.GetCostAndUsageWithResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetCostAndUsageWithResources", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetCostAndUsageWithResourcesAsync(ctx workflow.Context, input *costexplorer.GetCostAndUsageWithResourcesInput) *CostexplorerGetCostAndUsageWithResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetCostAndUsageWithResources", input)
	return &CostexplorerGetCostAndUsageWithResourcesFuture{Future: future}
}

func (a *CostExplorerStub) GetCostForecast(ctx workflow.Context, input *costexplorer.GetCostForecastInput) (*costexplorer.GetCostForecastOutput, error) {
	var output costexplorer.GetCostForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetCostForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetCostForecastAsync(ctx workflow.Context, input *costexplorer.GetCostForecastInput) *CostexplorerGetCostForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetCostForecast", input)
	return &CostexplorerGetCostForecastFuture{Future: future}
}

func (a *CostExplorerStub) GetDimensionValues(ctx workflow.Context, input *costexplorer.GetDimensionValuesInput) (*costexplorer.GetDimensionValuesOutput, error) {
	var output costexplorer.GetDimensionValuesOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetDimensionValues", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetDimensionValuesAsync(ctx workflow.Context, input *costexplorer.GetDimensionValuesInput) *CostexplorerGetDimensionValuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetDimensionValues", input)
	return &CostexplorerGetDimensionValuesFuture{Future: future}
}

func (a *CostExplorerStub) GetReservationCoverage(ctx workflow.Context, input *costexplorer.GetReservationCoverageInput) (*costexplorer.GetReservationCoverageOutput, error) {
	var output costexplorer.GetReservationCoverageOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetReservationCoverage", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetReservationCoverageAsync(ctx workflow.Context, input *costexplorer.GetReservationCoverageInput) *CostexplorerGetReservationCoverageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetReservationCoverage", input)
	return &CostexplorerGetReservationCoverageFuture{Future: future}
}

func (a *CostExplorerStub) GetReservationPurchaseRecommendation(ctx workflow.Context, input *costexplorer.GetReservationPurchaseRecommendationInput) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	var output costexplorer.GetReservationPurchaseRecommendationOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetReservationPurchaseRecommendation", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetReservationPurchaseRecommendationAsync(ctx workflow.Context, input *costexplorer.GetReservationPurchaseRecommendationInput) *CostexplorerGetReservationPurchaseRecommendationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetReservationPurchaseRecommendation", input)
	return &CostexplorerGetReservationPurchaseRecommendationFuture{Future: future}
}

func (a *CostExplorerStub) GetReservationUtilization(ctx workflow.Context, input *costexplorer.GetReservationUtilizationInput) (*costexplorer.GetReservationUtilizationOutput, error) {
	var output costexplorer.GetReservationUtilizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetReservationUtilization", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetReservationUtilizationAsync(ctx workflow.Context, input *costexplorer.GetReservationUtilizationInput) *CostexplorerGetReservationUtilizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetReservationUtilization", input)
	return &CostexplorerGetReservationUtilizationFuture{Future: future}
}

func (a *CostExplorerStub) GetRightsizingRecommendation(ctx workflow.Context, input *costexplorer.GetRightsizingRecommendationInput) (*costexplorer.GetRightsizingRecommendationOutput, error) {
	var output costexplorer.GetRightsizingRecommendationOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetRightsizingRecommendation", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetRightsizingRecommendationAsync(ctx workflow.Context, input *costexplorer.GetRightsizingRecommendationInput) *CostexplorerGetRightsizingRecommendationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetRightsizingRecommendation", input)
	return &CostexplorerGetRightsizingRecommendationFuture{Future: future}
}

func (a *CostExplorerStub) GetSavingsPlansCoverage(ctx workflow.Context, input *costexplorer.GetSavingsPlansCoverageInput) (*costexplorer.GetSavingsPlansCoverageOutput, error) {
	var output costexplorer.GetSavingsPlansCoverageOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetSavingsPlansCoverage", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetSavingsPlansCoverageAsync(ctx workflow.Context, input *costexplorer.GetSavingsPlansCoverageInput) *CostexplorerGetSavingsPlansCoverageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetSavingsPlansCoverage", input)
	return &CostexplorerGetSavingsPlansCoverageFuture{Future: future}
}

func (a *CostExplorerStub) GetSavingsPlansPurchaseRecommendation(ctx workflow.Context, input *costexplorer.GetSavingsPlansPurchaseRecommendationInput) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error) {
	var output costexplorer.GetSavingsPlansPurchaseRecommendationOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetSavingsPlansPurchaseRecommendation", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetSavingsPlansPurchaseRecommendationAsync(ctx workflow.Context, input *costexplorer.GetSavingsPlansPurchaseRecommendationInput) *CostexplorerGetSavingsPlansPurchaseRecommendationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetSavingsPlansPurchaseRecommendation", input)
	return &CostexplorerGetSavingsPlansPurchaseRecommendationFuture{Future: future}
}

func (a *CostExplorerStub) GetSavingsPlansUtilization(ctx workflow.Context, input *costexplorer.GetSavingsPlansUtilizationInput) (*costexplorer.GetSavingsPlansUtilizationOutput, error) {
	var output costexplorer.GetSavingsPlansUtilizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetSavingsPlansUtilization", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetSavingsPlansUtilizationAsync(ctx workflow.Context, input *costexplorer.GetSavingsPlansUtilizationInput) *CostexplorerGetSavingsPlansUtilizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetSavingsPlansUtilization", input)
	return &CostexplorerGetSavingsPlansUtilizationFuture{Future: future}
}

func (a *CostExplorerStub) GetSavingsPlansUtilizationDetails(ctx workflow.Context, input *costexplorer.GetSavingsPlansUtilizationDetailsInput) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error) {
	var output costexplorer.GetSavingsPlansUtilizationDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetSavingsPlansUtilizationDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetSavingsPlansUtilizationDetailsAsync(ctx workflow.Context, input *costexplorer.GetSavingsPlansUtilizationDetailsInput) *CostexplorerGetSavingsPlansUtilizationDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetSavingsPlansUtilizationDetails", input)
	return &CostexplorerGetSavingsPlansUtilizationDetailsFuture{Future: future}
}

func (a *CostExplorerStub) GetTags(ctx workflow.Context, input *costexplorer.GetTagsInput) (*costexplorer.GetTagsOutput, error) {
	var output costexplorer.GetTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetTags", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetTagsAsync(ctx workflow.Context, input *costexplorer.GetTagsInput) *CostexplorerGetTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetTags", input)
	return &CostexplorerGetTagsFuture{Future: future}
}

func (a *CostExplorerStub) GetUsageForecast(ctx workflow.Context, input *costexplorer.GetUsageForecastInput) (*costexplorer.GetUsageForecastOutput, error) {
	var output costexplorer.GetUsageForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetUsageForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) GetUsageForecastAsync(ctx workflow.Context, input *costexplorer.GetUsageForecastInput) *CostexplorerGetUsageForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.GetUsageForecast", input)
	return &CostexplorerGetUsageForecastFuture{Future: future}
}

func (a *CostExplorerStub) ListCostCategoryDefinitions(ctx workflow.Context, input *costexplorer.ListCostCategoryDefinitionsInput) (*costexplorer.ListCostCategoryDefinitionsOutput, error) {
	var output costexplorer.ListCostCategoryDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.ListCostCategoryDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) ListCostCategoryDefinitionsAsync(ctx workflow.Context, input *costexplorer.ListCostCategoryDefinitionsInput) *CostexplorerListCostCategoryDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.ListCostCategoryDefinitions", input)
	return &CostexplorerListCostCategoryDefinitionsFuture{Future: future}
}

func (a *CostExplorerStub) ProvideAnomalyFeedback(ctx workflow.Context, input *costexplorer.ProvideAnomalyFeedbackInput) (*costexplorer.ProvideAnomalyFeedbackOutput, error) {
	var output costexplorer.ProvideAnomalyFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.ProvideAnomalyFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) ProvideAnomalyFeedbackAsync(ctx workflow.Context, input *costexplorer.ProvideAnomalyFeedbackInput) *CostexplorerProvideAnomalyFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.ProvideAnomalyFeedback", input)
	return &CostexplorerProvideAnomalyFeedbackFuture{Future: future}
}

func (a *CostExplorerStub) UpdateAnomalyMonitor(ctx workflow.Context, input *costexplorer.UpdateAnomalyMonitorInput) (*costexplorer.UpdateAnomalyMonitorOutput, error) {
	var output costexplorer.UpdateAnomalyMonitorOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.UpdateAnomalyMonitor", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) UpdateAnomalyMonitorAsync(ctx workflow.Context, input *costexplorer.UpdateAnomalyMonitorInput) *CostexplorerUpdateAnomalyMonitorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.UpdateAnomalyMonitor", input)
	return &CostexplorerUpdateAnomalyMonitorFuture{Future: future}
}

func (a *CostExplorerStub) UpdateAnomalySubscription(ctx workflow.Context, input *costexplorer.UpdateAnomalySubscriptionInput) (*costexplorer.UpdateAnomalySubscriptionOutput, error) {
	var output costexplorer.UpdateAnomalySubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.UpdateAnomalySubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) UpdateAnomalySubscriptionAsync(ctx workflow.Context, input *costexplorer.UpdateAnomalySubscriptionInput) *CostexplorerUpdateAnomalySubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.UpdateAnomalySubscription", input)
	return &CostexplorerUpdateAnomalySubscriptionFuture{Future: future}
}

func (a *CostExplorerStub) UpdateCostCategoryDefinition(ctx workflow.Context, input *costexplorer.UpdateCostCategoryDefinitionInput) (*costexplorer.UpdateCostCategoryDefinitionOutput, error) {
	var output costexplorer.UpdateCostCategoryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.costexplorer.UpdateCostCategoryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *CostExplorerStub) UpdateCostCategoryDefinitionAsync(ctx workflow.Context, input *costexplorer.UpdateCostCategoryDefinitionInput) *CostexplorerUpdateCostCategoryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.costexplorer.UpdateCostCategoryDefinition", input)
	return &CostexplorerUpdateCostCategoryDefinitionFuture{Future: future}
}
