// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/elastictranscoder"
	"go.temporal.io/sdk/workflow"
)

type ElasticTranscoderClient interface {
	CancelJob(ctx workflow.Context, input *elastictranscoder.CancelJobInput) (*elastictranscoder.CancelJobOutput, error)
	CancelJobAsync(ctx workflow.Context, input *elastictranscoder.CancelJobInput) *ElastictranscoderCancelJobFuture

	CreateJob(ctx workflow.Context, input *elastictranscoder.CreateJobInput) (*elastictranscoder.CreateJobResponse, error)
	CreateJobAsync(ctx workflow.Context, input *elastictranscoder.CreateJobInput) *ElastictranscoderCreateJobFuture

	CreatePipeline(ctx workflow.Context, input *elastictranscoder.CreatePipelineInput) (*elastictranscoder.CreatePipelineOutput, error)
	CreatePipelineAsync(ctx workflow.Context, input *elastictranscoder.CreatePipelineInput) *ElastictranscoderCreatePipelineFuture

	CreatePreset(ctx workflow.Context, input *elastictranscoder.CreatePresetInput) (*elastictranscoder.CreatePresetOutput, error)
	CreatePresetAsync(ctx workflow.Context, input *elastictranscoder.CreatePresetInput) *ElastictranscoderCreatePresetFuture

	DeletePipeline(ctx workflow.Context, input *elastictranscoder.DeletePipelineInput) (*elastictranscoder.DeletePipelineOutput, error)
	DeletePipelineAsync(ctx workflow.Context, input *elastictranscoder.DeletePipelineInput) *ElastictranscoderDeletePipelineFuture

	DeletePreset(ctx workflow.Context, input *elastictranscoder.DeletePresetInput) (*elastictranscoder.DeletePresetOutput, error)
	DeletePresetAsync(ctx workflow.Context, input *elastictranscoder.DeletePresetInput) *ElastictranscoderDeletePresetFuture

	ListJobsByPipeline(ctx workflow.Context, input *elastictranscoder.ListJobsByPipelineInput) (*elastictranscoder.ListJobsByPipelineOutput, error)
	ListJobsByPipelineAsync(ctx workflow.Context, input *elastictranscoder.ListJobsByPipelineInput) *ElastictranscoderListJobsByPipelineFuture

	ListJobsByStatus(ctx workflow.Context, input *elastictranscoder.ListJobsByStatusInput) (*elastictranscoder.ListJobsByStatusOutput, error)
	ListJobsByStatusAsync(ctx workflow.Context, input *elastictranscoder.ListJobsByStatusInput) *ElastictranscoderListJobsByStatusFuture

	ListPipelines(ctx workflow.Context, input *elastictranscoder.ListPipelinesInput) (*elastictranscoder.ListPipelinesOutput, error)
	ListPipelinesAsync(ctx workflow.Context, input *elastictranscoder.ListPipelinesInput) *ElastictranscoderListPipelinesFuture

	ListPresets(ctx workflow.Context, input *elastictranscoder.ListPresetsInput) (*elastictranscoder.ListPresetsOutput, error)
	ListPresetsAsync(ctx workflow.Context, input *elastictranscoder.ListPresetsInput) *ElastictranscoderListPresetsFuture

	ReadJob(ctx workflow.Context, input *elastictranscoder.ReadJobInput) (*elastictranscoder.ReadJobOutput, error)
	ReadJobAsync(ctx workflow.Context, input *elastictranscoder.ReadJobInput) *ElastictranscoderReadJobFuture

	ReadPipeline(ctx workflow.Context, input *elastictranscoder.ReadPipelineInput) (*elastictranscoder.ReadPipelineOutput, error)
	ReadPipelineAsync(ctx workflow.Context, input *elastictranscoder.ReadPipelineInput) *ElastictranscoderReadPipelineFuture

	ReadPreset(ctx workflow.Context, input *elastictranscoder.ReadPresetInput) (*elastictranscoder.ReadPresetOutput, error)
	ReadPresetAsync(ctx workflow.Context, input *elastictranscoder.ReadPresetInput) *ElastictranscoderReadPresetFuture

	TestRole(ctx workflow.Context, input *elastictranscoder.TestRoleInput) (*elastictranscoder.TestRoleOutput, error)
	TestRoleAsync(ctx workflow.Context, input *elastictranscoder.TestRoleInput) *ElastictranscoderTestRoleFuture

	UpdatePipeline(ctx workflow.Context, input *elastictranscoder.UpdatePipelineInput) (*elastictranscoder.UpdatePipelineOutput, error)
	UpdatePipelineAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineInput) *ElastictranscoderUpdatePipelineFuture

	UpdatePipelineNotifications(ctx workflow.Context, input *elastictranscoder.UpdatePipelineNotificationsInput) (*elastictranscoder.UpdatePipelineNotificationsOutput, error)
	UpdatePipelineNotificationsAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineNotificationsInput) *ElastictranscoderUpdatePipelineNotificationsFuture

	UpdatePipelineStatus(ctx workflow.Context, input *elastictranscoder.UpdatePipelineStatusInput) (*elastictranscoder.UpdatePipelineStatusOutput, error)
	UpdatePipelineStatusAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineStatusInput) *ElastictranscoderUpdatePipelineStatusFuture

	WaitUntilJobComplete(ctx workflow.Context, input *elastictranscoder.ReadJobInput) error
	WaitUntilJobCompleteAsync(ctx workflow.Context, input *elastictranscoder.ReadJobInput) *VoidFuture
}

type ElasticTranscoderStub struct{}

func NewElasticTranscoderStub() ElasticTranscoderClient {
	return &ElasticTranscoderStub{}
}

type ElastictranscoderCancelJobFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderCancelJobFuture) Get(ctx workflow.Context) (*elastictranscoder.CancelJobOutput, error) {
	var output elastictranscoder.CancelJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderCreateJobFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderCreateJobFuture) Get(ctx workflow.Context) (*elastictranscoder.CreateJobResponse, error) {
	var output elastictranscoder.CreateJobResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderCreatePipelineFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderCreatePipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.CreatePipelineOutput, error) {
	var output elastictranscoder.CreatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderCreatePresetFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderCreatePresetFuture) Get(ctx workflow.Context) (*elastictranscoder.CreatePresetOutput, error) {
	var output elastictranscoder.CreatePresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderDeletePipelineFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderDeletePipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.DeletePipelineOutput, error) {
	var output elastictranscoder.DeletePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderDeletePresetFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderDeletePresetFuture) Get(ctx workflow.Context) (*elastictranscoder.DeletePresetOutput, error) {
	var output elastictranscoder.DeletePresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderListJobsByPipelineFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderListJobsByPipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.ListJobsByPipelineOutput, error) {
	var output elastictranscoder.ListJobsByPipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderListJobsByStatusFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderListJobsByStatusFuture) Get(ctx workflow.Context) (*elastictranscoder.ListJobsByStatusOutput, error) {
	var output elastictranscoder.ListJobsByStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderListPipelinesFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderListPipelinesFuture) Get(ctx workflow.Context) (*elastictranscoder.ListPipelinesOutput, error) {
	var output elastictranscoder.ListPipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderListPresetsFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderListPresetsFuture) Get(ctx workflow.Context) (*elastictranscoder.ListPresetsOutput, error) {
	var output elastictranscoder.ListPresetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderReadJobFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderReadJobFuture) Get(ctx workflow.Context) (*elastictranscoder.ReadJobOutput, error) {
	var output elastictranscoder.ReadJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderReadPipelineFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderReadPipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.ReadPipelineOutput, error) {
	var output elastictranscoder.ReadPipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderReadPresetFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderReadPresetFuture) Get(ctx workflow.Context) (*elastictranscoder.ReadPresetOutput, error) {
	var output elastictranscoder.ReadPresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderTestRoleFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderTestRoleFuture) Get(ctx workflow.Context) (*elastictranscoder.TestRoleOutput, error) {
	var output elastictranscoder.TestRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderUpdatePipelineFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderUpdatePipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.UpdatePipelineOutput, error) {
	var output elastictranscoder.UpdatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderUpdatePipelineNotificationsFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderUpdatePipelineNotificationsFuture) Get(ctx workflow.Context) (*elastictranscoder.UpdatePipelineNotificationsOutput, error) {
	var output elastictranscoder.UpdatePipelineNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElastictranscoderUpdatePipelineStatusFuture struct {
	Future workflow.Future
}

func (r *ElastictranscoderUpdatePipelineStatusFuture) Get(ctx workflow.Context) (*elastictranscoder.UpdatePipelineStatusOutput, error) {
	var output elastictranscoder.UpdatePipelineStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) CancelJob(ctx workflow.Context, input *elastictranscoder.CancelJobInput) (*elastictranscoder.CancelJobOutput, error) {
	var output elastictranscoder.CancelJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CancelJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) CancelJobAsync(ctx workflow.Context, input *elastictranscoder.CancelJobInput) *ElastictranscoderCancelJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CancelJob", input)
	return &ElastictranscoderCancelJobFuture{Future: future}
}

func (a *ElasticTranscoderStub) CreateJob(ctx workflow.Context, input *elastictranscoder.CreateJobInput) (*elastictranscoder.CreateJobResponse, error) {
	var output elastictranscoder.CreateJobResponse
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) CreateJobAsync(ctx workflow.Context, input *elastictranscoder.CreateJobInput) *ElastictranscoderCreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CreateJob", input)
	return &ElastictranscoderCreateJobFuture{Future: future}
}

func (a *ElasticTranscoderStub) CreatePipeline(ctx workflow.Context, input *elastictranscoder.CreatePipelineInput) (*elastictranscoder.CreatePipelineOutput, error) {
	var output elastictranscoder.CreatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CreatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) CreatePipelineAsync(ctx workflow.Context, input *elastictranscoder.CreatePipelineInput) *ElastictranscoderCreatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CreatePipeline", input)
	return &ElastictranscoderCreatePipelineFuture{Future: future}
}

func (a *ElasticTranscoderStub) CreatePreset(ctx workflow.Context, input *elastictranscoder.CreatePresetInput) (*elastictranscoder.CreatePresetOutput, error) {
	var output elastictranscoder.CreatePresetOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CreatePreset", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) CreatePresetAsync(ctx workflow.Context, input *elastictranscoder.CreatePresetInput) *ElastictranscoderCreatePresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CreatePreset", input)
	return &ElastictranscoderCreatePresetFuture{Future: future}
}

func (a *ElasticTranscoderStub) DeletePipeline(ctx workflow.Context, input *elastictranscoder.DeletePipelineInput) (*elastictranscoder.DeletePipelineOutput, error) {
	var output elastictranscoder.DeletePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.DeletePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) DeletePipelineAsync(ctx workflow.Context, input *elastictranscoder.DeletePipelineInput) *ElastictranscoderDeletePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.DeletePipeline", input)
	return &ElastictranscoderDeletePipelineFuture{Future: future}
}

func (a *ElasticTranscoderStub) DeletePreset(ctx workflow.Context, input *elastictranscoder.DeletePresetInput) (*elastictranscoder.DeletePresetOutput, error) {
	var output elastictranscoder.DeletePresetOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.DeletePreset", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) DeletePresetAsync(ctx workflow.Context, input *elastictranscoder.DeletePresetInput) *ElastictranscoderDeletePresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.DeletePreset", input)
	return &ElastictranscoderDeletePresetFuture{Future: future}
}

func (a *ElasticTranscoderStub) ListJobsByPipeline(ctx workflow.Context, input *elastictranscoder.ListJobsByPipelineInput) (*elastictranscoder.ListJobsByPipelineOutput, error) {
	var output elastictranscoder.ListJobsByPipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListJobsByPipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ListJobsByPipelineAsync(ctx workflow.Context, input *elastictranscoder.ListJobsByPipelineInput) *ElastictranscoderListJobsByPipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListJobsByPipeline", input)
	return &ElastictranscoderListJobsByPipelineFuture{Future: future}
}

func (a *ElasticTranscoderStub) ListJobsByStatus(ctx workflow.Context, input *elastictranscoder.ListJobsByStatusInput) (*elastictranscoder.ListJobsByStatusOutput, error) {
	var output elastictranscoder.ListJobsByStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListJobsByStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ListJobsByStatusAsync(ctx workflow.Context, input *elastictranscoder.ListJobsByStatusInput) *ElastictranscoderListJobsByStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListJobsByStatus", input)
	return &ElastictranscoderListJobsByStatusFuture{Future: future}
}

func (a *ElasticTranscoderStub) ListPipelines(ctx workflow.Context, input *elastictranscoder.ListPipelinesInput) (*elastictranscoder.ListPipelinesOutput, error) {
	var output elastictranscoder.ListPipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListPipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ListPipelinesAsync(ctx workflow.Context, input *elastictranscoder.ListPipelinesInput) *ElastictranscoderListPipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListPipelines", input)
	return &ElastictranscoderListPipelinesFuture{Future: future}
}

func (a *ElasticTranscoderStub) ListPresets(ctx workflow.Context, input *elastictranscoder.ListPresetsInput) (*elastictranscoder.ListPresetsOutput, error) {
	var output elastictranscoder.ListPresetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListPresets", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ListPresetsAsync(ctx workflow.Context, input *elastictranscoder.ListPresetsInput) *ElastictranscoderListPresetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListPresets", input)
	return &ElastictranscoderListPresetsFuture{Future: future}
}

func (a *ElasticTranscoderStub) ReadJob(ctx workflow.Context, input *elastictranscoder.ReadJobInput) (*elastictranscoder.ReadJobOutput, error) {
	var output elastictranscoder.ReadJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ReadJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ReadJobAsync(ctx workflow.Context, input *elastictranscoder.ReadJobInput) *ElastictranscoderReadJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ReadJob", input)
	return &ElastictranscoderReadJobFuture{Future: future}
}

func (a *ElasticTranscoderStub) ReadPipeline(ctx workflow.Context, input *elastictranscoder.ReadPipelineInput) (*elastictranscoder.ReadPipelineOutput, error) {
	var output elastictranscoder.ReadPipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ReadPipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ReadPipelineAsync(ctx workflow.Context, input *elastictranscoder.ReadPipelineInput) *ElastictranscoderReadPipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ReadPipeline", input)
	return &ElastictranscoderReadPipelineFuture{Future: future}
}

func (a *ElasticTranscoderStub) ReadPreset(ctx workflow.Context, input *elastictranscoder.ReadPresetInput) (*elastictranscoder.ReadPresetOutput, error) {
	var output elastictranscoder.ReadPresetOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ReadPreset", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ReadPresetAsync(ctx workflow.Context, input *elastictranscoder.ReadPresetInput) *ElastictranscoderReadPresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ReadPreset", input)
	return &ElastictranscoderReadPresetFuture{Future: future}
}

func (a *ElasticTranscoderStub) TestRole(ctx workflow.Context, input *elastictranscoder.TestRoleInput) (*elastictranscoder.TestRoleOutput, error) {
	var output elastictranscoder.TestRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.TestRole", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) TestRoleAsync(ctx workflow.Context, input *elastictranscoder.TestRoleInput) *ElastictranscoderTestRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.TestRole", input)
	return &ElastictranscoderTestRoleFuture{Future: future}
}

func (a *ElasticTranscoderStub) UpdatePipeline(ctx workflow.Context, input *elastictranscoder.UpdatePipelineInput) (*elastictranscoder.UpdatePipelineOutput, error) {
	var output elastictranscoder.UpdatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.UpdatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) UpdatePipelineAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineInput) *ElastictranscoderUpdatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.UpdatePipeline", input)
	return &ElastictranscoderUpdatePipelineFuture{Future: future}
}

func (a *ElasticTranscoderStub) UpdatePipelineNotifications(ctx workflow.Context, input *elastictranscoder.UpdatePipelineNotificationsInput) (*elastictranscoder.UpdatePipelineNotificationsOutput, error) {
	var output elastictranscoder.UpdatePipelineNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.UpdatePipelineNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) UpdatePipelineNotificationsAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineNotificationsInput) *ElastictranscoderUpdatePipelineNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.UpdatePipelineNotifications", input)
	return &ElastictranscoderUpdatePipelineNotificationsFuture{Future: future}
}

func (a *ElasticTranscoderStub) UpdatePipelineStatus(ctx workflow.Context, input *elastictranscoder.UpdatePipelineStatusInput) (*elastictranscoder.UpdatePipelineStatusOutput, error) {
	var output elastictranscoder.UpdatePipelineStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.UpdatePipelineStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) UpdatePipelineStatusAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineStatusInput) *ElastictranscoderUpdatePipelineStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.UpdatePipelineStatus", input)
	return &ElastictranscoderUpdatePipelineStatusFuture{Future: future}
}

func (a *ElasticTranscoderStub) WaitUntilJobComplete(ctx workflow.Context, input *elastictranscoder.ReadJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elastictranscoder.WaitUntilJobComplete", input).Get(ctx, nil)
}

func (a *ElasticTranscoderStub) WaitUntilJobCompleteAsync(ctx workflow.Context, input *elastictranscoder.ReadJobInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.WaitUntilJobComplete", input)
	return NewVoidFuture(future)
}
