// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/elastictranscoder"
	"go.temporal.io/sdk/workflow"
)

type ElasticTranscoderClient interface {
	CancelJob(ctx workflow.Context, input *elastictranscoder.CancelJobInput) (*elastictranscoder.CancelJobOutput, error)
	CancelJobAsync(ctx workflow.Context, input *elastictranscoder.CancelJobInput) *ElasticTranscoderCancelJobFuture

	CreateJob(ctx workflow.Context, input *elastictranscoder.CreateJobInput) (*elastictranscoder.CreateJobResponse, error)
	CreateJobAsync(ctx workflow.Context, input *elastictranscoder.CreateJobInput) *ElasticTranscoderCreateJobFuture

	CreatePipeline(ctx workflow.Context, input *elastictranscoder.CreatePipelineInput) (*elastictranscoder.CreatePipelineOutput, error)
	CreatePipelineAsync(ctx workflow.Context, input *elastictranscoder.CreatePipelineInput) *ElasticTranscoderCreatePipelineFuture

	CreatePreset(ctx workflow.Context, input *elastictranscoder.CreatePresetInput) (*elastictranscoder.CreatePresetOutput, error)
	CreatePresetAsync(ctx workflow.Context, input *elastictranscoder.CreatePresetInput) *ElasticTranscoderCreatePresetFuture

	DeletePipeline(ctx workflow.Context, input *elastictranscoder.DeletePipelineInput) (*elastictranscoder.DeletePipelineOutput, error)
	DeletePipelineAsync(ctx workflow.Context, input *elastictranscoder.DeletePipelineInput) *ElasticTranscoderDeletePipelineFuture

	DeletePreset(ctx workflow.Context, input *elastictranscoder.DeletePresetInput) (*elastictranscoder.DeletePresetOutput, error)
	DeletePresetAsync(ctx workflow.Context, input *elastictranscoder.DeletePresetInput) *ElasticTranscoderDeletePresetFuture

	ListJobsByPipeline(ctx workflow.Context, input *elastictranscoder.ListJobsByPipelineInput) (*elastictranscoder.ListJobsByPipelineOutput, error)
	ListJobsByPipelineAsync(ctx workflow.Context, input *elastictranscoder.ListJobsByPipelineInput) *ElasticTranscoderListJobsByPipelineFuture

	ListJobsByStatus(ctx workflow.Context, input *elastictranscoder.ListJobsByStatusInput) (*elastictranscoder.ListJobsByStatusOutput, error)
	ListJobsByStatusAsync(ctx workflow.Context, input *elastictranscoder.ListJobsByStatusInput) *ElasticTranscoderListJobsByStatusFuture

	ListPipelines(ctx workflow.Context, input *elastictranscoder.ListPipelinesInput) (*elastictranscoder.ListPipelinesOutput, error)
	ListPipelinesAsync(ctx workflow.Context, input *elastictranscoder.ListPipelinesInput) *ElasticTranscoderListPipelinesFuture

	ListPresets(ctx workflow.Context, input *elastictranscoder.ListPresetsInput) (*elastictranscoder.ListPresetsOutput, error)
	ListPresetsAsync(ctx workflow.Context, input *elastictranscoder.ListPresetsInput) *ElasticTranscoderListPresetsFuture

	ReadJob(ctx workflow.Context, input *elastictranscoder.ReadJobInput) (*elastictranscoder.ReadJobOutput, error)
	ReadJobAsync(ctx workflow.Context, input *elastictranscoder.ReadJobInput) *ElasticTranscoderReadJobFuture

	ReadPipeline(ctx workflow.Context, input *elastictranscoder.ReadPipelineInput) (*elastictranscoder.ReadPipelineOutput, error)
	ReadPipelineAsync(ctx workflow.Context, input *elastictranscoder.ReadPipelineInput) *ElasticTranscoderReadPipelineFuture

	ReadPreset(ctx workflow.Context, input *elastictranscoder.ReadPresetInput) (*elastictranscoder.ReadPresetOutput, error)
	ReadPresetAsync(ctx workflow.Context, input *elastictranscoder.ReadPresetInput) *ElasticTranscoderReadPresetFuture

	TestRole(ctx workflow.Context, input *elastictranscoder.TestRoleInput) (*elastictranscoder.TestRoleOutput, error)
	TestRoleAsync(ctx workflow.Context, input *elastictranscoder.TestRoleInput) *ElasticTranscoderTestRoleFuture

	UpdatePipeline(ctx workflow.Context, input *elastictranscoder.UpdatePipelineInput) (*elastictranscoder.UpdatePipelineOutput, error)
	UpdatePipelineAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineInput) *ElasticTranscoderUpdatePipelineFuture

	UpdatePipelineNotifications(ctx workflow.Context, input *elastictranscoder.UpdatePipelineNotificationsInput) (*elastictranscoder.UpdatePipelineNotificationsOutput, error)
	UpdatePipelineNotificationsAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineNotificationsInput) *ElasticTranscoderUpdatePipelineNotificationsFuture

	UpdatePipelineStatus(ctx workflow.Context, input *elastictranscoder.UpdatePipelineStatusInput) (*elastictranscoder.UpdatePipelineStatusOutput, error)
	UpdatePipelineStatusAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineStatusInput) *ElasticTranscoderUpdatePipelineStatusFuture

	WaitUntilJobComplete(ctx workflow.Context, input *elastictranscoder.ReadJobInput) error
	WaitUntilJobCompleteAsync(ctx workflow.Context, input *elastictranscoder.ReadJobInput) *VoidFuture
}

type ElasticTranscoderStub struct{}

func NewElasticTranscoderStub() ElasticTranscoderClient {
	return &ElasticTranscoderStub{}
}

type ElasticTranscoderCancelJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderCancelJobFuture) Get(ctx workflow.Context) (*elastictranscoder.CancelJobOutput, error) {
	var output elastictranscoder.CancelJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderCreateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderCreateJobFuture) Get(ctx workflow.Context) (*elastictranscoder.CreateJobResponse, error) {
	var output elastictranscoder.CreateJobResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderCreatePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderCreatePipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.CreatePipelineOutput, error) {
	var output elastictranscoder.CreatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderCreatePresetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderCreatePresetFuture) Get(ctx workflow.Context) (*elastictranscoder.CreatePresetOutput, error) {
	var output elastictranscoder.CreatePresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderDeletePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderDeletePipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.DeletePipelineOutput, error) {
	var output elastictranscoder.DeletePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderDeletePresetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderDeletePresetFuture) Get(ctx workflow.Context) (*elastictranscoder.DeletePresetOutput, error) {
	var output elastictranscoder.DeletePresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderListJobsByPipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderListJobsByPipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.ListJobsByPipelineOutput, error) {
	var output elastictranscoder.ListJobsByPipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderListJobsByStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderListJobsByStatusFuture) Get(ctx workflow.Context) (*elastictranscoder.ListJobsByStatusOutput, error) {
	var output elastictranscoder.ListJobsByStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderListPipelinesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderListPipelinesFuture) Get(ctx workflow.Context) (*elastictranscoder.ListPipelinesOutput, error) {
	var output elastictranscoder.ListPipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderListPresetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderListPresetsFuture) Get(ctx workflow.Context) (*elastictranscoder.ListPresetsOutput, error) {
	var output elastictranscoder.ListPresetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderReadJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderReadJobFuture) Get(ctx workflow.Context) (*elastictranscoder.ReadJobOutput, error) {
	var output elastictranscoder.ReadJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderReadPipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderReadPipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.ReadPipelineOutput, error) {
	var output elastictranscoder.ReadPipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderReadPresetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderReadPresetFuture) Get(ctx workflow.Context) (*elastictranscoder.ReadPresetOutput, error) {
	var output elastictranscoder.ReadPresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderTestRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderTestRoleFuture) Get(ctx workflow.Context) (*elastictranscoder.TestRoleOutput, error) {
	var output elastictranscoder.TestRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderUpdatePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderUpdatePipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.UpdatePipelineOutput, error) {
	var output elastictranscoder.UpdatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderUpdatePipelineNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderUpdatePipelineNotificationsFuture) Get(ctx workflow.Context) (*elastictranscoder.UpdatePipelineNotificationsOutput, error) {
	var output elastictranscoder.UpdatePipelineNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderUpdatePipelineStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderUpdatePipelineStatusFuture) Get(ctx workflow.Context) (*elastictranscoder.UpdatePipelineStatusOutput, error) {
	var output elastictranscoder.UpdatePipelineStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) CancelJob(ctx workflow.Context, input *elastictranscoder.CancelJobInput) (*elastictranscoder.CancelJobOutput, error) {
	var output elastictranscoder.CancelJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CancelJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) CancelJobAsync(ctx workflow.Context, input *elastictranscoder.CancelJobInput) *ElasticTranscoderCancelJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CancelJob", input)
	return &ElasticTranscoderCancelJobFuture{Future: future}
}

func (a *ElasticTranscoderStub) CreateJob(ctx workflow.Context, input *elastictranscoder.CreateJobInput) (*elastictranscoder.CreateJobResponse, error) {
	var output elastictranscoder.CreateJobResponse
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) CreateJobAsync(ctx workflow.Context, input *elastictranscoder.CreateJobInput) *ElasticTranscoderCreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CreateJob", input)
	return &ElasticTranscoderCreateJobFuture{Future: future}
}

func (a *ElasticTranscoderStub) CreatePipeline(ctx workflow.Context, input *elastictranscoder.CreatePipelineInput) (*elastictranscoder.CreatePipelineOutput, error) {
	var output elastictranscoder.CreatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CreatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) CreatePipelineAsync(ctx workflow.Context, input *elastictranscoder.CreatePipelineInput) *ElasticTranscoderCreatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CreatePipeline", input)
	return &ElasticTranscoderCreatePipelineFuture{Future: future}
}

func (a *ElasticTranscoderStub) CreatePreset(ctx workflow.Context, input *elastictranscoder.CreatePresetInput) (*elastictranscoder.CreatePresetOutput, error) {
	var output elastictranscoder.CreatePresetOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CreatePreset", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) CreatePresetAsync(ctx workflow.Context, input *elastictranscoder.CreatePresetInput) *ElasticTranscoderCreatePresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.CreatePreset", input)
	return &ElasticTranscoderCreatePresetFuture{Future: future}
}

func (a *ElasticTranscoderStub) DeletePipeline(ctx workflow.Context, input *elastictranscoder.DeletePipelineInput) (*elastictranscoder.DeletePipelineOutput, error) {
	var output elastictranscoder.DeletePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.DeletePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) DeletePipelineAsync(ctx workflow.Context, input *elastictranscoder.DeletePipelineInput) *ElasticTranscoderDeletePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.DeletePipeline", input)
	return &ElasticTranscoderDeletePipelineFuture{Future: future}
}

func (a *ElasticTranscoderStub) DeletePreset(ctx workflow.Context, input *elastictranscoder.DeletePresetInput) (*elastictranscoder.DeletePresetOutput, error) {
	var output elastictranscoder.DeletePresetOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.DeletePreset", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) DeletePresetAsync(ctx workflow.Context, input *elastictranscoder.DeletePresetInput) *ElasticTranscoderDeletePresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.DeletePreset", input)
	return &ElasticTranscoderDeletePresetFuture{Future: future}
}

func (a *ElasticTranscoderStub) ListJobsByPipeline(ctx workflow.Context, input *elastictranscoder.ListJobsByPipelineInput) (*elastictranscoder.ListJobsByPipelineOutput, error) {
	var output elastictranscoder.ListJobsByPipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListJobsByPipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ListJobsByPipelineAsync(ctx workflow.Context, input *elastictranscoder.ListJobsByPipelineInput) *ElasticTranscoderListJobsByPipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListJobsByPipeline", input)
	return &ElasticTranscoderListJobsByPipelineFuture{Future: future}
}

func (a *ElasticTranscoderStub) ListJobsByStatus(ctx workflow.Context, input *elastictranscoder.ListJobsByStatusInput) (*elastictranscoder.ListJobsByStatusOutput, error) {
	var output elastictranscoder.ListJobsByStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListJobsByStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ListJobsByStatusAsync(ctx workflow.Context, input *elastictranscoder.ListJobsByStatusInput) *ElasticTranscoderListJobsByStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListJobsByStatus", input)
	return &ElasticTranscoderListJobsByStatusFuture{Future: future}
}

func (a *ElasticTranscoderStub) ListPipelines(ctx workflow.Context, input *elastictranscoder.ListPipelinesInput) (*elastictranscoder.ListPipelinesOutput, error) {
	var output elastictranscoder.ListPipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListPipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ListPipelinesAsync(ctx workflow.Context, input *elastictranscoder.ListPipelinesInput) *ElasticTranscoderListPipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListPipelines", input)
	return &ElasticTranscoderListPipelinesFuture{Future: future}
}

func (a *ElasticTranscoderStub) ListPresets(ctx workflow.Context, input *elastictranscoder.ListPresetsInput) (*elastictranscoder.ListPresetsOutput, error) {
	var output elastictranscoder.ListPresetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListPresets", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ListPresetsAsync(ctx workflow.Context, input *elastictranscoder.ListPresetsInput) *ElasticTranscoderListPresetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ListPresets", input)
	return &ElasticTranscoderListPresetsFuture{Future: future}
}

func (a *ElasticTranscoderStub) ReadJob(ctx workflow.Context, input *elastictranscoder.ReadJobInput) (*elastictranscoder.ReadJobOutput, error) {
	var output elastictranscoder.ReadJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ReadJob", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ReadJobAsync(ctx workflow.Context, input *elastictranscoder.ReadJobInput) *ElasticTranscoderReadJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ReadJob", input)
	return &ElasticTranscoderReadJobFuture{Future: future}
}

func (a *ElasticTranscoderStub) ReadPipeline(ctx workflow.Context, input *elastictranscoder.ReadPipelineInput) (*elastictranscoder.ReadPipelineOutput, error) {
	var output elastictranscoder.ReadPipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ReadPipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ReadPipelineAsync(ctx workflow.Context, input *elastictranscoder.ReadPipelineInput) *ElasticTranscoderReadPipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ReadPipeline", input)
	return &ElasticTranscoderReadPipelineFuture{Future: future}
}

func (a *ElasticTranscoderStub) ReadPreset(ctx workflow.Context, input *elastictranscoder.ReadPresetInput) (*elastictranscoder.ReadPresetOutput, error) {
	var output elastictranscoder.ReadPresetOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ReadPreset", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) ReadPresetAsync(ctx workflow.Context, input *elastictranscoder.ReadPresetInput) *ElasticTranscoderReadPresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.ReadPreset", input)
	return &ElasticTranscoderReadPresetFuture{Future: future}
}

func (a *ElasticTranscoderStub) TestRole(ctx workflow.Context, input *elastictranscoder.TestRoleInput) (*elastictranscoder.TestRoleOutput, error) {
	var output elastictranscoder.TestRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.TestRole", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) TestRoleAsync(ctx workflow.Context, input *elastictranscoder.TestRoleInput) *ElasticTranscoderTestRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.TestRole", input)
	return &ElasticTranscoderTestRoleFuture{Future: future}
}

func (a *ElasticTranscoderStub) UpdatePipeline(ctx workflow.Context, input *elastictranscoder.UpdatePipelineInput) (*elastictranscoder.UpdatePipelineOutput, error) {
	var output elastictranscoder.UpdatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.UpdatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) UpdatePipelineAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineInput) *ElasticTranscoderUpdatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.UpdatePipeline", input)
	return &ElasticTranscoderUpdatePipelineFuture{Future: future}
}

func (a *ElasticTranscoderStub) UpdatePipelineNotifications(ctx workflow.Context, input *elastictranscoder.UpdatePipelineNotificationsInput) (*elastictranscoder.UpdatePipelineNotificationsOutput, error) {
	var output elastictranscoder.UpdatePipelineNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.UpdatePipelineNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) UpdatePipelineNotificationsAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineNotificationsInput) *ElasticTranscoderUpdatePipelineNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.UpdatePipelineNotifications", input)
	return &ElasticTranscoderUpdatePipelineNotificationsFuture{Future: future}
}

func (a *ElasticTranscoderStub) UpdatePipelineStatus(ctx workflow.Context, input *elastictranscoder.UpdatePipelineStatusInput) (*elastictranscoder.UpdatePipelineStatusOutput, error) {
	var output elastictranscoder.UpdatePipelineStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.UpdatePipelineStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticTranscoderStub) UpdatePipelineStatusAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineStatusInput) *ElasticTranscoderUpdatePipelineStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.UpdatePipelineStatus", input)
	return &ElasticTranscoderUpdatePipelineStatusFuture{Future: future}
}

func (a *ElasticTranscoderStub) WaitUntilJobComplete(ctx workflow.Context, input *elastictranscoder.ReadJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elastictranscoder.WaitUntilJobComplete", input).Get(ctx, nil)
}

func (a *ElasticTranscoderStub) WaitUntilJobCompleteAsync(ctx workflow.Context, input *elastictranscoder.ReadJobInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elastictranscoder.WaitUntilJobComplete", input)
	return NewVoidFuture(future)
}
