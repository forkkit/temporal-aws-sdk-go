// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/organizations"
	"go.temporal.io/sdk/workflow"
)

type OrganizationsClient interface {
	AcceptHandshake(ctx workflow.Context, input *organizations.AcceptHandshakeInput) (*organizations.AcceptHandshakeOutput, error)
	AcceptHandshakeAsync(ctx workflow.Context, input *organizations.AcceptHandshakeInput) *OrganizationsAcceptHandshakeFuture

	AttachPolicy(ctx workflow.Context, input *organizations.AttachPolicyInput) (*organizations.AttachPolicyOutput, error)
	AttachPolicyAsync(ctx workflow.Context, input *organizations.AttachPolicyInput) *OrganizationsAttachPolicyFuture

	CancelHandshake(ctx workflow.Context, input *organizations.CancelHandshakeInput) (*organizations.CancelHandshakeOutput, error)
	CancelHandshakeAsync(ctx workflow.Context, input *organizations.CancelHandshakeInput) *OrganizationsCancelHandshakeFuture

	CreateAccount(ctx workflow.Context, input *organizations.CreateAccountInput) (*organizations.CreateAccountOutput, error)
	CreateAccountAsync(ctx workflow.Context, input *organizations.CreateAccountInput) *OrganizationsCreateAccountFuture

	CreateGovCloudAccount(ctx workflow.Context, input *organizations.CreateGovCloudAccountInput) (*organizations.CreateGovCloudAccountOutput, error)
	CreateGovCloudAccountAsync(ctx workflow.Context, input *organizations.CreateGovCloudAccountInput) *OrganizationsCreateGovCloudAccountFuture

	CreateOrganization(ctx workflow.Context, input *organizations.CreateOrganizationInput) (*organizations.CreateOrganizationOutput, error)
	CreateOrganizationAsync(ctx workflow.Context, input *organizations.CreateOrganizationInput) *OrganizationsCreateOrganizationFuture

	CreateOrganizationalUnit(ctx workflow.Context, input *organizations.CreateOrganizationalUnitInput) (*organizations.CreateOrganizationalUnitOutput, error)
	CreateOrganizationalUnitAsync(ctx workflow.Context, input *organizations.CreateOrganizationalUnitInput) *OrganizationsCreateOrganizationalUnitFuture

	CreatePolicy(ctx workflow.Context, input *organizations.CreatePolicyInput) (*organizations.CreatePolicyOutput, error)
	CreatePolicyAsync(ctx workflow.Context, input *organizations.CreatePolicyInput) *OrganizationsCreatePolicyFuture

	DeclineHandshake(ctx workflow.Context, input *organizations.DeclineHandshakeInput) (*organizations.DeclineHandshakeOutput, error)
	DeclineHandshakeAsync(ctx workflow.Context, input *organizations.DeclineHandshakeInput) *OrganizationsDeclineHandshakeFuture

	DeleteOrganization(ctx workflow.Context, input *organizations.DeleteOrganizationInput) (*organizations.DeleteOrganizationOutput, error)
	DeleteOrganizationAsync(ctx workflow.Context, input *organizations.DeleteOrganizationInput) *OrganizationsDeleteOrganizationFuture

	DeleteOrganizationalUnit(ctx workflow.Context, input *organizations.DeleteOrganizationalUnitInput) (*organizations.DeleteOrganizationalUnitOutput, error)
	DeleteOrganizationalUnitAsync(ctx workflow.Context, input *organizations.DeleteOrganizationalUnitInput) *OrganizationsDeleteOrganizationalUnitFuture

	DeletePolicy(ctx workflow.Context, input *organizations.DeletePolicyInput) (*organizations.DeletePolicyOutput, error)
	DeletePolicyAsync(ctx workflow.Context, input *organizations.DeletePolicyInput) *OrganizationsDeletePolicyFuture

	DeregisterDelegatedAdministrator(ctx workflow.Context, input *organizations.DeregisterDelegatedAdministratorInput) (*organizations.DeregisterDelegatedAdministratorOutput, error)
	DeregisterDelegatedAdministratorAsync(ctx workflow.Context, input *organizations.DeregisterDelegatedAdministratorInput) *OrganizationsDeregisterDelegatedAdministratorFuture

	DescribeAccount(ctx workflow.Context, input *organizations.DescribeAccountInput) (*organizations.DescribeAccountOutput, error)
	DescribeAccountAsync(ctx workflow.Context, input *organizations.DescribeAccountInput) *OrganizationsDescribeAccountFuture

	DescribeCreateAccountStatus(ctx workflow.Context, input *organizations.DescribeCreateAccountStatusInput) (*organizations.DescribeCreateAccountStatusOutput, error)
	DescribeCreateAccountStatusAsync(ctx workflow.Context, input *organizations.DescribeCreateAccountStatusInput) *OrganizationsDescribeCreateAccountStatusFuture

	DescribeEffectivePolicy(ctx workflow.Context, input *organizations.DescribeEffectivePolicyInput) (*organizations.DescribeEffectivePolicyOutput, error)
	DescribeEffectivePolicyAsync(ctx workflow.Context, input *organizations.DescribeEffectivePolicyInput) *OrganizationsDescribeEffectivePolicyFuture

	DescribeHandshake(ctx workflow.Context, input *organizations.DescribeHandshakeInput) (*organizations.DescribeHandshakeOutput, error)
	DescribeHandshakeAsync(ctx workflow.Context, input *organizations.DescribeHandshakeInput) *OrganizationsDescribeHandshakeFuture

	DescribeOrganization(ctx workflow.Context, input *organizations.DescribeOrganizationInput) (*organizations.DescribeOrganizationOutput, error)
	DescribeOrganizationAsync(ctx workflow.Context, input *organizations.DescribeOrganizationInput) *OrganizationsDescribeOrganizationFuture

	DescribeOrganizationalUnit(ctx workflow.Context, input *organizations.DescribeOrganizationalUnitInput) (*organizations.DescribeOrganizationalUnitOutput, error)
	DescribeOrganizationalUnitAsync(ctx workflow.Context, input *organizations.DescribeOrganizationalUnitInput) *OrganizationsDescribeOrganizationalUnitFuture

	DescribePolicy(ctx workflow.Context, input *organizations.DescribePolicyInput) (*organizations.DescribePolicyOutput, error)
	DescribePolicyAsync(ctx workflow.Context, input *organizations.DescribePolicyInput) *OrganizationsDescribePolicyFuture

	DetachPolicy(ctx workflow.Context, input *organizations.DetachPolicyInput) (*organizations.DetachPolicyOutput, error)
	DetachPolicyAsync(ctx workflow.Context, input *organizations.DetachPolicyInput) *OrganizationsDetachPolicyFuture

	DisableAWSServiceAccess(ctx workflow.Context, input *organizations.DisableAWSServiceAccessInput) (*organizations.DisableAWSServiceAccessOutput, error)
	DisableAWSServiceAccessAsync(ctx workflow.Context, input *organizations.DisableAWSServiceAccessInput) *OrganizationsDisableAWSServiceAccessFuture

	DisablePolicyType(ctx workflow.Context, input *organizations.DisablePolicyTypeInput) (*organizations.DisablePolicyTypeOutput, error)
	DisablePolicyTypeAsync(ctx workflow.Context, input *organizations.DisablePolicyTypeInput) *OrganizationsDisablePolicyTypeFuture

	EnableAWSServiceAccess(ctx workflow.Context, input *organizations.EnableAWSServiceAccessInput) (*organizations.EnableAWSServiceAccessOutput, error)
	EnableAWSServiceAccessAsync(ctx workflow.Context, input *organizations.EnableAWSServiceAccessInput) *OrganizationsEnableAWSServiceAccessFuture

	EnableAllFeatures(ctx workflow.Context, input *organizations.EnableAllFeaturesInput) (*organizations.EnableAllFeaturesOutput, error)
	EnableAllFeaturesAsync(ctx workflow.Context, input *organizations.EnableAllFeaturesInput) *OrganizationsEnableAllFeaturesFuture

	EnablePolicyType(ctx workflow.Context, input *organizations.EnablePolicyTypeInput) (*organizations.EnablePolicyTypeOutput, error)
	EnablePolicyTypeAsync(ctx workflow.Context, input *organizations.EnablePolicyTypeInput) *OrganizationsEnablePolicyTypeFuture

	InviteAccountToOrganization(ctx workflow.Context, input *organizations.InviteAccountToOrganizationInput) (*organizations.InviteAccountToOrganizationOutput, error)
	InviteAccountToOrganizationAsync(ctx workflow.Context, input *organizations.InviteAccountToOrganizationInput) *OrganizationsInviteAccountToOrganizationFuture

	LeaveOrganization(ctx workflow.Context, input *organizations.LeaveOrganizationInput) (*organizations.LeaveOrganizationOutput, error)
	LeaveOrganizationAsync(ctx workflow.Context, input *organizations.LeaveOrganizationInput) *OrganizationsLeaveOrganizationFuture

	ListAWSServiceAccessForOrganization(ctx workflow.Context, input *organizations.ListAWSServiceAccessForOrganizationInput) (*organizations.ListAWSServiceAccessForOrganizationOutput, error)
	ListAWSServiceAccessForOrganizationAsync(ctx workflow.Context, input *organizations.ListAWSServiceAccessForOrganizationInput) *OrganizationsListAWSServiceAccessForOrganizationFuture

	ListAccounts(ctx workflow.Context, input *organizations.ListAccountsInput) (*organizations.ListAccountsOutput, error)
	ListAccountsAsync(ctx workflow.Context, input *organizations.ListAccountsInput) *OrganizationsListAccountsFuture

	ListAccountsForParent(ctx workflow.Context, input *organizations.ListAccountsForParentInput) (*organizations.ListAccountsForParentOutput, error)
	ListAccountsForParentAsync(ctx workflow.Context, input *organizations.ListAccountsForParentInput) *OrganizationsListAccountsForParentFuture

	ListChildren(ctx workflow.Context, input *organizations.ListChildrenInput) (*organizations.ListChildrenOutput, error)
	ListChildrenAsync(ctx workflow.Context, input *organizations.ListChildrenInput) *OrganizationsListChildrenFuture

	ListCreateAccountStatus(ctx workflow.Context, input *organizations.ListCreateAccountStatusInput) (*organizations.ListCreateAccountStatusOutput, error)
	ListCreateAccountStatusAsync(ctx workflow.Context, input *organizations.ListCreateAccountStatusInput) *OrganizationsListCreateAccountStatusFuture

	ListDelegatedAdministrators(ctx workflow.Context, input *organizations.ListDelegatedAdministratorsInput) (*organizations.ListDelegatedAdministratorsOutput, error)
	ListDelegatedAdministratorsAsync(ctx workflow.Context, input *organizations.ListDelegatedAdministratorsInput) *OrganizationsListDelegatedAdministratorsFuture

	ListDelegatedServicesForAccount(ctx workflow.Context, input *organizations.ListDelegatedServicesForAccountInput) (*organizations.ListDelegatedServicesForAccountOutput, error)
	ListDelegatedServicesForAccountAsync(ctx workflow.Context, input *organizations.ListDelegatedServicesForAccountInput) *OrganizationsListDelegatedServicesForAccountFuture

	ListHandshakesForAccount(ctx workflow.Context, input *organizations.ListHandshakesForAccountInput) (*organizations.ListHandshakesForAccountOutput, error)
	ListHandshakesForAccountAsync(ctx workflow.Context, input *organizations.ListHandshakesForAccountInput) *OrganizationsListHandshakesForAccountFuture

	ListHandshakesForOrganization(ctx workflow.Context, input *organizations.ListHandshakesForOrganizationInput) (*organizations.ListHandshakesForOrganizationOutput, error)
	ListHandshakesForOrganizationAsync(ctx workflow.Context, input *organizations.ListHandshakesForOrganizationInput) *OrganizationsListHandshakesForOrganizationFuture

	ListOrganizationalUnitsForParent(ctx workflow.Context, input *organizations.ListOrganizationalUnitsForParentInput) (*organizations.ListOrganizationalUnitsForParentOutput, error)
	ListOrganizationalUnitsForParentAsync(ctx workflow.Context, input *organizations.ListOrganizationalUnitsForParentInput) *OrganizationsListOrganizationalUnitsForParentFuture

	ListParents(ctx workflow.Context, input *organizations.ListParentsInput) (*organizations.ListParentsOutput, error)
	ListParentsAsync(ctx workflow.Context, input *organizations.ListParentsInput) *OrganizationsListParentsFuture

	ListPolicies(ctx workflow.Context, input *organizations.ListPoliciesInput) (*organizations.ListPoliciesOutput, error)
	ListPoliciesAsync(ctx workflow.Context, input *organizations.ListPoliciesInput) *OrganizationsListPoliciesFuture

	ListPoliciesForTarget(ctx workflow.Context, input *organizations.ListPoliciesForTargetInput) (*organizations.ListPoliciesForTargetOutput, error)
	ListPoliciesForTargetAsync(ctx workflow.Context, input *organizations.ListPoliciesForTargetInput) *OrganizationsListPoliciesForTargetFuture

	ListRoots(ctx workflow.Context, input *organizations.ListRootsInput) (*organizations.ListRootsOutput, error)
	ListRootsAsync(ctx workflow.Context, input *organizations.ListRootsInput) *OrganizationsListRootsFuture

	ListTagsForResource(ctx workflow.Context, input *organizations.ListTagsForResourceInput) (*organizations.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *organizations.ListTagsForResourceInput) *OrganizationsListTagsForResourceFuture

	ListTargetsForPolicy(ctx workflow.Context, input *organizations.ListTargetsForPolicyInput) (*organizations.ListTargetsForPolicyOutput, error)
	ListTargetsForPolicyAsync(ctx workflow.Context, input *organizations.ListTargetsForPolicyInput) *OrganizationsListTargetsForPolicyFuture

	MoveAccount(ctx workflow.Context, input *organizations.MoveAccountInput) (*organizations.MoveAccountOutput, error)
	MoveAccountAsync(ctx workflow.Context, input *organizations.MoveAccountInput) *OrganizationsMoveAccountFuture

	RegisterDelegatedAdministrator(ctx workflow.Context, input *organizations.RegisterDelegatedAdministratorInput) (*organizations.RegisterDelegatedAdministratorOutput, error)
	RegisterDelegatedAdministratorAsync(ctx workflow.Context, input *organizations.RegisterDelegatedAdministratorInput) *OrganizationsRegisterDelegatedAdministratorFuture

	RemoveAccountFromOrganization(ctx workflow.Context, input *organizations.RemoveAccountFromOrganizationInput) (*organizations.RemoveAccountFromOrganizationOutput, error)
	RemoveAccountFromOrganizationAsync(ctx workflow.Context, input *organizations.RemoveAccountFromOrganizationInput) *OrganizationsRemoveAccountFromOrganizationFuture

	TagResource(ctx workflow.Context, input *organizations.TagResourceInput) (*organizations.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *organizations.TagResourceInput) *OrganizationsTagResourceFuture

	UntagResource(ctx workflow.Context, input *organizations.UntagResourceInput) (*organizations.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *organizations.UntagResourceInput) *OrganizationsUntagResourceFuture

	UpdateOrganizationalUnit(ctx workflow.Context, input *organizations.UpdateOrganizationalUnitInput) (*organizations.UpdateOrganizationalUnitOutput, error)
	UpdateOrganizationalUnitAsync(ctx workflow.Context, input *organizations.UpdateOrganizationalUnitInput) *OrganizationsUpdateOrganizationalUnitFuture

	UpdatePolicy(ctx workflow.Context, input *organizations.UpdatePolicyInput) (*organizations.UpdatePolicyOutput, error)
	UpdatePolicyAsync(ctx workflow.Context, input *organizations.UpdatePolicyInput) *OrganizationsUpdatePolicyFuture
}

type OrganizationsStub struct{}

func NewOrganizationsStub() OrganizationsClient {
	return &OrganizationsStub{}
}

type OrganizationsAcceptHandshakeFuture struct {
	Future workflow.Future
}

func (r *OrganizationsAcceptHandshakeFuture) Get(ctx workflow.Context) (*organizations.AcceptHandshakeOutput, error) {
	var output organizations.AcceptHandshakeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsAttachPolicyFuture struct {
	Future workflow.Future
}

func (r *OrganizationsAttachPolicyFuture) Get(ctx workflow.Context) (*organizations.AttachPolicyOutput, error) {
	var output organizations.AttachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsCancelHandshakeFuture struct {
	Future workflow.Future
}

func (r *OrganizationsCancelHandshakeFuture) Get(ctx workflow.Context) (*organizations.CancelHandshakeOutput, error) {
	var output organizations.CancelHandshakeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsCreateAccountFuture struct {
	Future workflow.Future
}

func (r *OrganizationsCreateAccountFuture) Get(ctx workflow.Context) (*organizations.CreateAccountOutput, error) {
	var output organizations.CreateAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsCreateGovCloudAccountFuture struct {
	Future workflow.Future
}

func (r *OrganizationsCreateGovCloudAccountFuture) Get(ctx workflow.Context) (*organizations.CreateGovCloudAccountOutput, error) {
	var output organizations.CreateGovCloudAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsCreateOrganizationFuture struct {
	Future workflow.Future
}

func (r *OrganizationsCreateOrganizationFuture) Get(ctx workflow.Context) (*organizations.CreateOrganizationOutput, error) {
	var output organizations.CreateOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsCreateOrganizationalUnitFuture struct {
	Future workflow.Future
}

func (r *OrganizationsCreateOrganizationalUnitFuture) Get(ctx workflow.Context) (*organizations.CreateOrganizationalUnitOutput, error) {
	var output organizations.CreateOrganizationalUnitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsCreatePolicyFuture struct {
	Future workflow.Future
}

func (r *OrganizationsCreatePolicyFuture) Get(ctx workflow.Context) (*organizations.CreatePolicyOutput, error) {
	var output organizations.CreatePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDeclineHandshakeFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDeclineHandshakeFuture) Get(ctx workflow.Context) (*organizations.DeclineHandshakeOutput, error) {
	var output organizations.DeclineHandshakeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDeleteOrganizationFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDeleteOrganizationFuture) Get(ctx workflow.Context) (*organizations.DeleteOrganizationOutput, error) {
	var output organizations.DeleteOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDeleteOrganizationalUnitFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDeleteOrganizationalUnitFuture) Get(ctx workflow.Context) (*organizations.DeleteOrganizationalUnitOutput, error) {
	var output organizations.DeleteOrganizationalUnitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDeletePolicyFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDeletePolicyFuture) Get(ctx workflow.Context) (*organizations.DeletePolicyOutput, error) {
	var output organizations.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDeregisterDelegatedAdministratorFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDeregisterDelegatedAdministratorFuture) Get(ctx workflow.Context) (*organizations.DeregisterDelegatedAdministratorOutput, error) {
	var output organizations.DeregisterDelegatedAdministratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribeAccountFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDescribeAccountFuture) Get(ctx workflow.Context) (*organizations.DescribeAccountOutput, error) {
	var output organizations.DescribeAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribeCreateAccountStatusFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDescribeCreateAccountStatusFuture) Get(ctx workflow.Context) (*organizations.DescribeCreateAccountStatusOutput, error) {
	var output organizations.DescribeCreateAccountStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribeEffectivePolicyFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDescribeEffectivePolicyFuture) Get(ctx workflow.Context) (*organizations.DescribeEffectivePolicyOutput, error) {
	var output organizations.DescribeEffectivePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribeHandshakeFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDescribeHandshakeFuture) Get(ctx workflow.Context) (*organizations.DescribeHandshakeOutput, error) {
	var output organizations.DescribeHandshakeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribeOrganizationFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDescribeOrganizationFuture) Get(ctx workflow.Context) (*organizations.DescribeOrganizationOutput, error) {
	var output organizations.DescribeOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribeOrganizationalUnitFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDescribeOrganizationalUnitFuture) Get(ctx workflow.Context) (*organizations.DescribeOrganizationalUnitOutput, error) {
	var output organizations.DescribeOrganizationalUnitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribePolicyFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDescribePolicyFuture) Get(ctx workflow.Context) (*organizations.DescribePolicyOutput, error) {
	var output organizations.DescribePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDetachPolicyFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDetachPolicyFuture) Get(ctx workflow.Context) (*organizations.DetachPolicyOutput, error) {
	var output organizations.DetachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDisableAWSServiceAccessFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDisableAWSServiceAccessFuture) Get(ctx workflow.Context) (*organizations.DisableAWSServiceAccessOutput, error) {
	var output organizations.DisableAWSServiceAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDisablePolicyTypeFuture struct {
	Future workflow.Future
}

func (r *OrganizationsDisablePolicyTypeFuture) Get(ctx workflow.Context) (*organizations.DisablePolicyTypeOutput, error) {
	var output organizations.DisablePolicyTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsEnableAWSServiceAccessFuture struct {
	Future workflow.Future
}

func (r *OrganizationsEnableAWSServiceAccessFuture) Get(ctx workflow.Context) (*organizations.EnableAWSServiceAccessOutput, error) {
	var output organizations.EnableAWSServiceAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsEnableAllFeaturesFuture struct {
	Future workflow.Future
}

func (r *OrganizationsEnableAllFeaturesFuture) Get(ctx workflow.Context) (*organizations.EnableAllFeaturesOutput, error) {
	var output organizations.EnableAllFeaturesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsEnablePolicyTypeFuture struct {
	Future workflow.Future
}

func (r *OrganizationsEnablePolicyTypeFuture) Get(ctx workflow.Context) (*organizations.EnablePolicyTypeOutput, error) {
	var output organizations.EnablePolicyTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsInviteAccountToOrganizationFuture struct {
	Future workflow.Future
}

func (r *OrganizationsInviteAccountToOrganizationFuture) Get(ctx workflow.Context) (*organizations.InviteAccountToOrganizationOutput, error) {
	var output organizations.InviteAccountToOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsLeaveOrganizationFuture struct {
	Future workflow.Future
}

func (r *OrganizationsLeaveOrganizationFuture) Get(ctx workflow.Context) (*organizations.LeaveOrganizationOutput, error) {
	var output organizations.LeaveOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListAWSServiceAccessForOrganizationFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListAWSServiceAccessForOrganizationFuture) Get(ctx workflow.Context) (*organizations.ListAWSServiceAccessForOrganizationOutput, error) {
	var output organizations.ListAWSServiceAccessForOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListAccountsFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListAccountsFuture) Get(ctx workflow.Context) (*organizations.ListAccountsOutput, error) {
	var output organizations.ListAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListAccountsForParentFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListAccountsForParentFuture) Get(ctx workflow.Context) (*organizations.ListAccountsForParentOutput, error) {
	var output organizations.ListAccountsForParentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListChildrenFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListChildrenFuture) Get(ctx workflow.Context) (*organizations.ListChildrenOutput, error) {
	var output organizations.ListChildrenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListCreateAccountStatusFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListCreateAccountStatusFuture) Get(ctx workflow.Context) (*organizations.ListCreateAccountStatusOutput, error) {
	var output organizations.ListCreateAccountStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListDelegatedAdministratorsFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListDelegatedAdministratorsFuture) Get(ctx workflow.Context) (*organizations.ListDelegatedAdministratorsOutput, error) {
	var output organizations.ListDelegatedAdministratorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListDelegatedServicesForAccountFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListDelegatedServicesForAccountFuture) Get(ctx workflow.Context) (*organizations.ListDelegatedServicesForAccountOutput, error) {
	var output organizations.ListDelegatedServicesForAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListHandshakesForAccountFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListHandshakesForAccountFuture) Get(ctx workflow.Context) (*organizations.ListHandshakesForAccountOutput, error) {
	var output organizations.ListHandshakesForAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListHandshakesForOrganizationFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListHandshakesForOrganizationFuture) Get(ctx workflow.Context) (*organizations.ListHandshakesForOrganizationOutput, error) {
	var output organizations.ListHandshakesForOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListOrganizationalUnitsForParentFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListOrganizationalUnitsForParentFuture) Get(ctx workflow.Context) (*organizations.ListOrganizationalUnitsForParentOutput, error) {
	var output organizations.ListOrganizationalUnitsForParentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListParentsFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListParentsFuture) Get(ctx workflow.Context) (*organizations.ListParentsOutput, error) {
	var output organizations.ListParentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListPoliciesFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListPoliciesFuture) Get(ctx workflow.Context) (*organizations.ListPoliciesOutput, error) {
	var output organizations.ListPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListPoliciesForTargetFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListPoliciesForTargetFuture) Get(ctx workflow.Context) (*organizations.ListPoliciesForTargetOutput, error) {
	var output organizations.ListPoliciesForTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListRootsFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListRootsFuture) Get(ctx workflow.Context) (*organizations.ListRootsOutput, error) {
	var output organizations.ListRootsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListTagsForResourceFuture) Get(ctx workflow.Context) (*organizations.ListTagsForResourceOutput, error) {
	var output organizations.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListTargetsForPolicyFuture struct {
	Future workflow.Future
}

func (r *OrganizationsListTargetsForPolicyFuture) Get(ctx workflow.Context) (*organizations.ListTargetsForPolicyOutput, error) {
	var output organizations.ListTargetsForPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsMoveAccountFuture struct {
	Future workflow.Future
}

func (r *OrganizationsMoveAccountFuture) Get(ctx workflow.Context) (*organizations.MoveAccountOutput, error) {
	var output organizations.MoveAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsRegisterDelegatedAdministratorFuture struct {
	Future workflow.Future
}

func (r *OrganizationsRegisterDelegatedAdministratorFuture) Get(ctx workflow.Context) (*organizations.RegisterDelegatedAdministratorOutput, error) {
	var output organizations.RegisterDelegatedAdministratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsRemoveAccountFromOrganizationFuture struct {
	Future workflow.Future
}

func (r *OrganizationsRemoveAccountFromOrganizationFuture) Get(ctx workflow.Context) (*organizations.RemoveAccountFromOrganizationOutput, error) {
	var output organizations.RemoveAccountFromOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsTagResourceFuture struct {
	Future workflow.Future
}

func (r *OrganizationsTagResourceFuture) Get(ctx workflow.Context) (*organizations.TagResourceOutput, error) {
	var output organizations.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsUntagResourceFuture struct {
	Future workflow.Future
}

func (r *OrganizationsUntagResourceFuture) Get(ctx workflow.Context) (*organizations.UntagResourceOutput, error) {
	var output organizations.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsUpdateOrganizationalUnitFuture struct {
	Future workflow.Future
}

func (r *OrganizationsUpdateOrganizationalUnitFuture) Get(ctx workflow.Context) (*organizations.UpdateOrganizationalUnitOutput, error) {
	var output organizations.UpdateOrganizationalUnitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsUpdatePolicyFuture struct {
	Future workflow.Future
}

func (r *OrganizationsUpdatePolicyFuture) Get(ctx workflow.Context) (*organizations.UpdatePolicyOutput, error) {
	var output organizations.UpdatePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) AcceptHandshake(ctx workflow.Context, input *organizations.AcceptHandshakeInput) (*organizations.AcceptHandshakeOutput, error) {
	var output organizations.AcceptHandshakeOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.AcceptHandshake", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) AcceptHandshakeAsync(ctx workflow.Context, input *organizations.AcceptHandshakeInput) *OrganizationsAcceptHandshakeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.AcceptHandshake", input)
	return &OrganizationsAcceptHandshakeFuture{Future: future}
}

func (a *OrganizationsStub) AttachPolicy(ctx workflow.Context, input *organizations.AttachPolicyInput) (*organizations.AttachPolicyOutput, error) {
	var output organizations.AttachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.AttachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) AttachPolicyAsync(ctx workflow.Context, input *organizations.AttachPolicyInput) *OrganizationsAttachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.AttachPolicy", input)
	return &OrganizationsAttachPolicyFuture{Future: future}
}

func (a *OrganizationsStub) CancelHandshake(ctx workflow.Context, input *organizations.CancelHandshakeInput) (*organizations.CancelHandshakeOutput, error) {
	var output organizations.CancelHandshakeOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.CancelHandshake", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) CancelHandshakeAsync(ctx workflow.Context, input *organizations.CancelHandshakeInput) *OrganizationsCancelHandshakeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.CancelHandshake", input)
	return &OrganizationsCancelHandshakeFuture{Future: future}
}

func (a *OrganizationsStub) CreateAccount(ctx workflow.Context, input *organizations.CreateAccountInput) (*organizations.CreateAccountOutput, error) {
	var output organizations.CreateAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.CreateAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) CreateAccountAsync(ctx workflow.Context, input *organizations.CreateAccountInput) *OrganizationsCreateAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.CreateAccount", input)
	return &OrganizationsCreateAccountFuture{Future: future}
}

func (a *OrganizationsStub) CreateGovCloudAccount(ctx workflow.Context, input *organizations.CreateGovCloudAccountInput) (*organizations.CreateGovCloudAccountOutput, error) {
	var output organizations.CreateGovCloudAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.CreateGovCloudAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) CreateGovCloudAccountAsync(ctx workflow.Context, input *organizations.CreateGovCloudAccountInput) *OrganizationsCreateGovCloudAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.CreateGovCloudAccount", input)
	return &OrganizationsCreateGovCloudAccountFuture{Future: future}
}

func (a *OrganizationsStub) CreateOrganization(ctx workflow.Context, input *organizations.CreateOrganizationInput) (*organizations.CreateOrganizationOutput, error) {
	var output organizations.CreateOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.CreateOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) CreateOrganizationAsync(ctx workflow.Context, input *organizations.CreateOrganizationInput) *OrganizationsCreateOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.CreateOrganization", input)
	return &OrganizationsCreateOrganizationFuture{Future: future}
}

func (a *OrganizationsStub) CreateOrganizationalUnit(ctx workflow.Context, input *organizations.CreateOrganizationalUnitInput) (*organizations.CreateOrganizationalUnitOutput, error) {
	var output organizations.CreateOrganizationalUnitOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.CreateOrganizationalUnit", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) CreateOrganizationalUnitAsync(ctx workflow.Context, input *organizations.CreateOrganizationalUnitInput) *OrganizationsCreateOrganizationalUnitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.CreateOrganizationalUnit", input)
	return &OrganizationsCreateOrganizationalUnitFuture{Future: future}
}

func (a *OrganizationsStub) CreatePolicy(ctx workflow.Context, input *organizations.CreatePolicyInput) (*organizations.CreatePolicyOutput, error) {
	var output organizations.CreatePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.CreatePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) CreatePolicyAsync(ctx workflow.Context, input *organizations.CreatePolicyInput) *OrganizationsCreatePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.CreatePolicy", input)
	return &OrganizationsCreatePolicyFuture{Future: future}
}

func (a *OrganizationsStub) DeclineHandshake(ctx workflow.Context, input *organizations.DeclineHandshakeInput) (*organizations.DeclineHandshakeOutput, error) {
	var output organizations.DeclineHandshakeOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DeclineHandshake", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DeclineHandshakeAsync(ctx workflow.Context, input *organizations.DeclineHandshakeInput) *OrganizationsDeclineHandshakeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DeclineHandshake", input)
	return &OrganizationsDeclineHandshakeFuture{Future: future}
}

func (a *OrganizationsStub) DeleteOrganization(ctx workflow.Context, input *organizations.DeleteOrganizationInput) (*organizations.DeleteOrganizationOutput, error) {
	var output organizations.DeleteOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DeleteOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DeleteOrganizationAsync(ctx workflow.Context, input *organizations.DeleteOrganizationInput) *OrganizationsDeleteOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DeleteOrganization", input)
	return &OrganizationsDeleteOrganizationFuture{Future: future}
}

func (a *OrganizationsStub) DeleteOrganizationalUnit(ctx workflow.Context, input *organizations.DeleteOrganizationalUnitInput) (*organizations.DeleteOrganizationalUnitOutput, error) {
	var output organizations.DeleteOrganizationalUnitOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DeleteOrganizationalUnit", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DeleteOrganizationalUnitAsync(ctx workflow.Context, input *organizations.DeleteOrganizationalUnitInput) *OrganizationsDeleteOrganizationalUnitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DeleteOrganizationalUnit", input)
	return &OrganizationsDeleteOrganizationalUnitFuture{Future: future}
}

func (a *OrganizationsStub) DeletePolicy(ctx workflow.Context, input *organizations.DeletePolicyInput) (*organizations.DeletePolicyOutput, error) {
	var output organizations.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DeletePolicyAsync(ctx workflow.Context, input *organizations.DeletePolicyInput) *OrganizationsDeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DeletePolicy", input)
	return &OrganizationsDeletePolicyFuture{Future: future}
}

func (a *OrganizationsStub) DeregisterDelegatedAdministrator(ctx workflow.Context, input *organizations.DeregisterDelegatedAdministratorInput) (*organizations.DeregisterDelegatedAdministratorOutput, error) {
	var output organizations.DeregisterDelegatedAdministratorOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DeregisterDelegatedAdministrator", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DeregisterDelegatedAdministratorAsync(ctx workflow.Context, input *organizations.DeregisterDelegatedAdministratorInput) *OrganizationsDeregisterDelegatedAdministratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DeregisterDelegatedAdministrator", input)
	return &OrganizationsDeregisterDelegatedAdministratorFuture{Future: future}
}

func (a *OrganizationsStub) DescribeAccount(ctx workflow.Context, input *organizations.DescribeAccountInput) (*organizations.DescribeAccountOutput, error) {
	var output organizations.DescribeAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DescribeAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DescribeAccountAsync(ctx workflow.Context, input *organizations.DescribeAccountInput) *OrganizationsDescribeAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DescribeAccount", input)
	return &OrganizationsDescribeAccountFuture{Future: future}
}

func (a *OrganizationsStub) DescribeCreateAccountStatus(ctx workflow.Context, input *organizations.DescribeCreateAccountStatusInput) (*organizations.DescribeCreateAccountStatusOutput, error) {
	var output organizations.DescribeCreateAccountStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DescribeCreateAccountStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DescribeCreateAccountStatusAsync(ctx workflow.Context, input *organizations.DescribeCreateAccountStatusInput) *OrganizationsDescribeCreateAccountStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DescribeCreateAccountStatus", input)
	return &OrganizationsDescribeCreateAccountStatusFuture{Future: future}
}

func (a *OrganizationsStub) DescribeEffectivePolicy(ctx workflow.Context, input *organizations.DescribeEffectivePolicyInput) (*organizations.DescribeEffectivePolicyOutput, error) {
	var output organizations.DescribeEffectivePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DescribeEffectivePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DescribeEffectivePolicyAsync(ctx workflow.Context, input *organizations.DescribeEffectivePolicyInput) *OrganizationsDescribeEffectivePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DescribeEffectivePolicy", input)
	return &OrganizationsDescribeEffectivePolicyFuture{Future: future}
}

func (a *OrganizationsStub) DescribeHandshake(ctx workflow.Context, input *organizations.DescribeHandshakeInput) (*organizations.DescribeHandshakeOutput, error) {
	var output organizations.DescribeHandshakeOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DescribeHandshake", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DescribeHandshakeAsync(ctx workflow.Context, input *organizations.DescribeHandshakeInput) *OrganizationsDescribeHandshakeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DescribeHandshake", input)
	return &OrganizationsDescribeHandshakeFuture{Future: future}
}

func (a *OrganizationsStub) DescribeOrganization(ctx workflow.Context, input *organizations.DescribeOrganizationInput) (*organizations.DescribeOrganizationOutput, error) {
	var output organizations.DescribeOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DescribeOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DescribeOrganizationAsync(ctx workflow.Context, input *organizations.DescribeOrganizationInput) *OrganizationsDescribeOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DescribeOrganization", input)
	return &OrganizationsDescribeOrganizationFuture{Future: future}
}

func (a *OrganizationsStub) DescribeOrganizationalUnit(ctx workflow.Context, input *organizations.DescribeOrganizationalUnitInput) (*organizations.DescribeOrganizationalUnitOutput, error) {
	var output organizations.DescribeOrganizationalUnitOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DescribeOrganizationalUnit", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DescribeOrganizationalUnitAsync(ctx workflow.Context, input *organizations.DescribeOrganizationalUnitInput) *OrganizationsDescribeOrganizationalUnitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DescribeOrganizationalUnit", input)
	return &OrganizationsDescribeOrganizationalUnitFuture{Future: future}
}

func (a *OrganizationsStub) DescribePolicy(ctx workflow.Context, input *organizations.DescribePolicyInput) (*organizations.DescribePolicyOutput, error) {
	var output organizations.DescribePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DescribePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DescribePolicyAsync(ctx workflow.Context, input *organizations.DescribePolicyInput) *OrganizationsDescribePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DescribePolicy", input)
	return &OrganizationsDescribePolicyFuture{Future: future}
}

func (a *OrganizationsStub) DetachPolicy(ctx workflow.Context, input *organizations.DetachPolicyInput) (*organizations.DetachPolicyOutput, error) {
	var output organizations.DetachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DetachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DetachPolicyAsync(ctx workflow.Context, input *organizations.DetachPolicyInput) *OrganizationsDetachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DetachPolicy", input)
	return &OrganizationsDetachPolicyFuture{Future: future}
}

func (a *OrganizationsStub) DisableAWSServiceAccess(ctx workflow.Context, input *organizations.DisableAWSServiceAccessInput) (*organizations.DisableAWSServiceAccessOutput, error) {
	var output organizations.DisableAWSServiceAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DisableAWSServiceAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DisableAWSServiceAccessAsync(ctx workflow.Context, input *organizations.DisableAWSServiceAccessInput) *OrganizationsDisableAWSServiceAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DisableAWSServiceAccess", input)
	return &OrganizationsDisableAWSServiceAccessFuture{Future: future}
}

func (a *OrganizationsStub) DisablePolicyType(ctx workflow.Context, input *organizations.DisablePolicyTypeInput) (*organizations.DisablePolicyTypeOutput, error) {
	var output organizations.DisablePolicyTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.DisablePolicyType", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) DisablePolicyTypeAsync(ctx workflow.Context, input *organizations.DisablePolicyTypeInput) *OrganizationsDisablePolicyTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.DisablePolicyType", input)
	return &OrganizationsDisablePolicyTypeFuture{Future: future}
}

func (a *OrganizationsStub) EnableAWSServiceAccess(ctx workflow.Context, input *organizations.EnableAWSServiceAccessInput) (*organizations.EnableAWSServiceAccessOutput, error) {
	var output organizations.EnableAWSServiceAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.EnableAWSServiceAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) EnableAWSServiceAccessAsync(ctx workflow.Context, input *organizations.EnableAWSServiceAccessInput) *OrganizationsEnableAWSServiceAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.EnableAWSServiceAccess", input)
	return &OrganizationsEnableAWSServiceAccessFuture{Future: future}
}

func (a *OrganizationsStub) EnableAllFeatures(ctx workflow.Context, input *organizations.EnableAllFeaturesInput) (*organizations.EnableAllFeaturesOutput, error) {
	var output organizations.EnableAllFeaturesOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.EnableAllFeatures", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) EnableAllFeaturesAsync(ctx workflow.Context, input *organizations.EnableAllFeaturesInput) *OrganizationsEnableAllFeaturesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.EnableAllFeatures", input)
	return &OrganizationsEnableAllFeaturesFuture{Future: future}
}

func (a *OrganizationsStub) EnablePolicyType(ctx workflow.Context, input *organizations.EnablePolicyTypeInput) (*organizations.EnablePolicyTypeOutput, error) {
	var output organizations.EnablePolicyTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.EnablePolicyType", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) EnablePolicyTypeAsync(ctx workflow.Context, input *organizations.EnablePolicyTypeInput) *OrganizationsEnablePolicyTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.EnablePolicyType", input)
	return &OrganizationsEnablePolicyTypeFuture{Future: future}
}

func (a *OrganizationsStub) InviteAccountToOrganization(ctx workflow.Context, input *organizations.InviteAccountToOrganizationInput) (*organizations.InviteAccountToOrganizationOutput, error) {
	var output organizations.InviteAccountToOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.InviteAccountToOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) InviteAccountToOrganizationAsync(ctx workflow.Context, input *organizations.InviteAccountToOrganizationInput) *OrganizationsInviteAccountToOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.InviteAccountToOrganization", input)
	return &OrganizationsInviteAccountToOrganizationFuture{Future: future}
}

func (a *OrganizationsStub) LeaveOrganization(ctx workflow.Context, input *organizations.LeaveOrganizationInput) (*organizations.LeaveOrganizationOutput, error) {
	var output organizations.LeaveOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.LeaveOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) LeaveOrganizationAsync(ctx workflow.Context, input *organizations.LeaveOrganizationInput) *OrganizationsLeaveOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.LeaveOrganization", input)
	return &OrganizationsLeaveOrganizationFuture{Future: future}
}

func (a *OrganizationsStub) ListAWSServiceAccessForOrganization(ctx workflow.Context, input *organizations.ListAWSServiceAccessForOrganizationInput) (*organizations.ListAWSServiceAccessForOrganizationOutput, error) {
	var output organizations.ListAWSServiceAccessForOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListAWSServiceAccessForOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListAWSServiceAccessForOrganizationAsync(ctx workflow.Context, input *organizations.ListAWSServiceAccessForOrganizationInput) *OrganizationsListAWSServiceAccessForOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListAWSServiceAccessForOrganization", input)
	return &OrganizationsListAWSServiceAccessForOrganizationFuture{Future: future}
}

func (a *OrganizationsStub) ListAccounts(ctx workflow.Context, input *organizations.ListAccountsInput) (*organizations.ListAccountsOutput, error) {
	var output organizations.ListAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListAccountsAsync(ctx workflow.Context, input *organizations.ListAccountsInput) *OrganizationsListAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListAccounts", input)
	return &OrganizationsListAccountsFuture{Future: future}
}

func (a *OrganizationsStub) ListAccountsForParent(ctx workflow.Context, input *organizations.ListAccountsForParentInput) (*organizations.ListAccountsForParentOutput, error) {
	var output organizations.ListAccountsForParentOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListAccountsForParent", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListAccountsForParentAsync(ctx workflow.Context, input *organizations.ListAccountsForParentInput) *OrganizationsListAccountsForParentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListAccountsForParent", input)
	return &OrganizationsListAccountsForParentFuture{Future: future}
}

func (a *OrganizationsStub) ListChildren(ctx workflow.Context, input *organizations.ListChildrenInput) (*organizations.ListChildrenOutput, error) {
	var output organizations.ListChildrenOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListChildren", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListChildrenAsync(ctx workflow.Context, input *organizations.ListChildrenInput) *OrganizationsListChildrenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListChildren", input)
	return &OrganizationsListChildrenFuture{Future: future}
}

func (a *OrganizationsStub) ListCreateAccountStatus(ctx workflow.Context, input *organizations.ListCreateAccountStatusInput) (*organizations.ListCreateAccountStatusOutput, error) {
	var output organizations.ListCreateAccountStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListCreateAccountStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListCreateAccountStatusAsync(ctx workflow.Context, input *organizations.ListCreateAccountStatusInput) *OrganizationsListCreateAccountStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListCreateAccountStatus", input)
	return &OrganizationsListCreateAccountStatusFuture{Future: future}
}

func (a *OrganizationsStub) ListDelegatedAdministrators(ctx workflow.Context, input *organizations.ListDelegatedAdministratorsInput) (*organizations.ListDelegatedAdministratorsOutput, error) {
	var output organizations.ListDelegatedAdministratorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListDelegatedAdministrators", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListDelegatedAdministratorsAsync(ctx workflow.Context, input *organizations.ListDelegatedAdministratorsInput) *OrganizationsListDelegatedAdministratorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListDelegatedAdministrators", input)
	return &OrganizationsListDelegatedAdministratorsFuture{Future: future}
}

func (a *OrganizationsStub) ListDelegatedServicesForAccount(ctx workflow.Context, input *organizations.ListDelegatedServicesForAccountInput) (*organizations.ListDelegatedServicesForAccountOutput, error) {
	var output organizations.ListDelegatedServicesForAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListDelegatedServicesForAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListDelegatedServicesForAccountAsync(ctx workflow.Context, input *organizations.ListDelegatedServicesForAccountInput) *OrganizationsListDelegatedServicesForAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListDelegatedServicesForAccount", input)
	return &OrganizationsListDelegatedServicesForAccountFuture{Future: future}
}

func (a *OrganizationsStub) ListHandshakesForAccount(ctx workflow.Context, input *organizations.ListHandshakesForAccountInput) (*organizations.ListHandshakesForAccountOutput, error) {
	var output organizations.ListHandshakesForAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListHandshakesForAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListHandshakesForAccountAsync(ctx workflow.Context, input *organizations.ListHandshakesForAccountInput) *OrganizationsListHandshakesForAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListHandshakesForAccount", input)
	return &OrganizationsListHandshakesForAccountFuture{Future: future}
}

func (a *OrganizationsStub) ListHandshakesForOrganization(ctx workflow.Context, input *organizations.ListHandshakesForOrganizationInput) (*organizations.ListHandshakesForOrganizationOutput, error) {
	var output organizations.ListHandshakesForOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListHandshakesForOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListHandshakesForOrganizationAsync(ctx workflow.Context, input *organizations.ListHandshakesForOrganizationInput) *OrganizationsListHandshakesForOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListHandshakesForOrganization", input)
	return &OrganizationsListHandshakesForOrganizationFuture{Future: future}
}

func (a *OrganizationsStub) ListOrganizationalUnitsForParent(ctx workflow.Context, input *organizations.ListOrganizationalUnitsForParentInput) (*organizations.ListOrganizationalUnitsForParentOutput, error) {
	var output organizations.ListOrganizationalUnitsForParentOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListOrganizationalUnitsForParent", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListOrganizationalUnitsForParentAsync(ctx workflow.Context, input *organizations.ListOrganizationalUnitsForParentInput) *OrganizationsListOrganizationalUnitsForParentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListOrganizationalUnitsForParent", input)
	return &OrganizationsListOrganizationalUnitsForParentFuture{Future: future}
}

func (a *OrganizationsStub) ListParents(ctx workflow.Context, input *organizations.ListParentsInput) (*organizations.ListParentsOutput, error) {
	var output organizations.ListParentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListParents", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListParentsAsync(ctx workflow.Context, input *organizations.ListParentsInput) *OrganizationsListParentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListParents", input)
	return &OrganizationsListParentsFuture{Future: future}
}

func (a *OrganizationsStub) ListPolicies(ctx workflow.Context, input *organizations.ListPoliciesInput) (*organizations.ListPoliciesOutput, error) {
	var output organizations.ListPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListPoliciesAsync(ctx workflow.Context, input *organizations.ListPoliciesInput) *OrganizationsListPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListPolicies", input)
	return &OrganizationsListPoliciesFuture{Future: future}
}

func (a *OrganizationsStub) ListPoliciesForTarget(ctx workflow.Context, input *organizations.ListPoliciesForTargetInput) (*organizations.ListPoliciesForTargetOutput, error) {
	var output organizations.ListPoliciesForTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListPoliciesForTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListPoliciesForTargetAsync(ctx workflow.Context, input *organizations.ListPoliciesForTargetInput) *OrganizationsListPoliciesForTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListPoliciesForTarget", input)
	return &OrganizationsListPoliciesForTargetFuture{Future: future}
}

func (a *OrganizationsStub) ListRoots(ctx workflow.Context, input *organizations.ListRootsInput) (*organizations.ListRootsOutput, error) {
	var output organizations.ListRootsOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListRoots", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListRootsAsync(ctx workflow.Context, input *organizations.ListRootsInput) *OrganizationsListRootsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListRoots", input)
	return &OrganizationsListRootsFuture{Future: future}
}

func (a *OrganizationsStub) ListTagsForResource(ctx workflow.Context, input *organizations.ListTagsForResourceInput) (*organizations.ListTagsForResourceOutput, error) {
	var output organizations.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListTagsForResourceAsync(ctx workflow.Context, input *organizations.ListTagsForResourceInput) *OrganizationsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListTagsForResource", input)
	return &OrganizationsListTagsForResourceFuture{Future: future}
}

func (a *OrganizationsStub) ListTargetsForPolicy(ctx workflow.Context, input *organizations.ListTargetsForPolicyInput) (*organizations.ListTargetsForPolicyOutput, error) {
	var output organizations.ListTargetsForPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.ListTargetsForPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) ListTargetsForPolicyAsync(ctx workflow.Context, input *organizations.ListTargetsForPolicyInput) *OrganizationsListTargetsForPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.ListTargetsForPolicy", input)
	return &OrganizationsListTargetsForPolicyFuture{Future: future}
}

func (a *OrganizationsStub) MoveAccount(ctx workflow.Context, input *organizations.MoveAccountInput) (*organizations.MoveAccountOutput, error) {
	var output organizations.MoveAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.MoveAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) MoveAccountAsync(ctx workflow.Context, input *organizations.MoveAccountInput) *OrganizationsMoveAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.MoveAccount", input)
	return &OrganizationsMoveAccountFuture{Future: future}
}

func (a *OrganizationsStub) RegisterDelegatedAdministrator(ctx workflow.Context, input *organizations.RegisterDelegatedAdministratorInput) (*organizations.RegisterDelegatedAdministratorOutput, error) {
	var output organizations.RegisterDelegatedAdministratorOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.RegisterDelegatedAdministrator", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) RegisterDelegatedAdministratorAsync(ctx workflow.Context, input *organizations.RegisterDelegatedAdministratorInput) *OrganizationsRegisterDelegatedAdministratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.RegisterDelegatedAdministrator", input)
	return &OrganizationsRegisterDelegatedAdministratorFuture{Future: future}
}

func (a *OrganizationsStub) RemoveAccountFromOrganization(ctx workflow.Context, input *organizations.RemoveAccountFromOrganizationInput) (*organizations.RemoveAccountFromOrganizationOutput, error) {
	var output organizations.RemoveAccountFromOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.RemoveAccountFromOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) RemoveAccountFromOrganizationAsync(ctx workflow.Context, input *organizations.RemoveAccountFromOrganizationInput) *OrganizationsRemoveAccountFromOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.RemoveAccountFromOrganization", input)
	return &OrganizationsRemoveAccountFromOrganizationFuture{Future: future}
}

func (a *OrganizationsStub) TagResource(ctx workflow.Context, input *organizations.TagResourceInput) (*organizations.TagResourceOutput, error) {
	var output organizations.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) TagResourceAsync(ctx workflow.Context, input *organizations.TagResourceInput) *OrganizationsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.TagResource", input)
	return &OrganizationsTagResourceFuture{Future: future}
}

func (a *OrganizationsStub) UntagResource(ctx workflow.Context, input *organizations.UntagResourceInput) (*organizations.UntagResourceOutput, error) {
	var output organizations.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) UntagResourceAsync(ctx workflow.Context, input *organizations.UntagResourceInput) *OrganizationsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.UntagResource", input)
	return &OrganizationsUntagResourceFuture{Future: future}
}

func (a *OrganizationsStub) UpdateOrganizationalUnit(ctx workflow.Context, input *organizations.UpdateOrganizationalUnitInput) (*organizations.UpdateOrganizationalUnitOutput, error) {
	var output organizations.UpdateOrganizationalUnitOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.UpdateOrganizationalUnit", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) UpdateOrganizationalUnitAsync(ctx workflow.Context, input *organizations.UpdateOrganizationalUnitInput) *OrganizationsUpdateOrganizationalUnitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.UpdateOrganizationalUnit", input)
	return &OrganizationsUpdateOrganizationalUnitFuture{Future: future}
}

func (a *OrganizationsStub) UpdatePolicy(ctx workflow.Context, input *organizations.UpdatePolicyInput) (*organizations.UpdatePolicyOutput, error) {
	var output organizations.UpdatePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.organizations.UpdatePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *OrganizationsStub) UpdatePolicyAsync(ctx workflow.Context, input *organizations.UpdatePolicyInput) *OrganizationsUpdatePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.organizations.UpdatePolicy", input)
	return &OrganizationsUpdatePolicyFuture{Future: future}
}
