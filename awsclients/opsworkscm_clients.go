// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/opsworkscm"
	"go.temporal.io/sdk/workflow"
)

type OpsWorksCMClient interface {
	AssociateNode(ctx workflow.Context, input *opsworkscm.AssociateNodeInput) (*opsworkscm.AssociateNodeOutput, error)
	AssociateNodeAsync(ctx workflow.Context, input *opsworkscm.AssociateNodeInput) *OpsworkscmAssociateNodeFuture

	CreateBackup(ctx workflow.Context, input *opsworkscm.CreateBackupInput) (*opsworkscm.CreateBackupOutput, error)
	CreateBackupAsync(ctx workflow.Context, input *opsworkscm.CreateBackupInput) *OpsworkscmCreateBackupFuture

	CreateServer(ctx workflow.Context, input *opsworkscm.CreateServerInput) (*opsworkscm.CreateServerOutput, error)
	CreateServerAsync(ctx workflow.Context, input *opsworkscm.CreateServerInput) *OpsworkscmCreateServerFuture

	DeleteBackup(ctx workflow.Context, input *opsworkscm.DeleteBackupInput) (*opsworkscm.DeleteBackupOutput, error)
	DeleteBackupAsync(ctx workflow.Context, input *opsworkscm.DeleteBackupInput) *OpsworkscmDeleteBackupFuture

	DeleteServer(ctx workflow.Context, input *opsworkscm.DeleteServerInput) (*opsworkscm.DeleteServerOutput, error)
	DeleteServerAsync(ctx workflow.Context, input *opsworkscm.DeleteServerInput) *OpsworkscmDeleteServerFuture

	DescribeAccountAttributes(ctx workflow.Context, input *opsworkscm.DescribeAccountAttributesInput) (*opsworkscm.DescribeAccountAttributesOutput, error)
	DescribeAccountAttributesAsync(ctx workflow.Context, input *opsworkscm.DescribeAccountAttributesInput) *OpsworkscmDescribeAccountAttributesFuture

	DescribeBackups(ctx workflow.Context, input *opsworkscm.DescribeBackupsInput) (*opsworkscm.DescribeBackupsOutput, error)
	DescribeBackupsAsync(ctx workflow.Context, input *opsworkscm.DescribeBackupsInput) *OpsworkscmDescribeBackupsFuture

	DescribeEvents(ctx workflow.Context, input *opsworkscm.DescribeEventsInput) (*opsworkscm.DescribeEventsOutput, error)
	DescribeEventsAsync(ctx workflow.Context, input *opsworkscm.DescribeEventsInput) *OpsworkscmDescribeEventsFuture

	DescribeNodeAssociationStatus(ctx workflow.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) (*opsworkscm.DescribeNodeAssociationStatusOutput, error)
	DescribeNodeAssociationStatusAsync(ctx workflow.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) *OpsworkscmDescribeNodeAssociationStatusFuture

	DescribeServers(ctx workflow.Context, input *opsworkscm.DescribeServersInput) (*opsworkscm.DescribeServersOutput, error)
	DescribeServersAsync(ctx workflow.Context, input *opsworkscm.DescribeServersInput) *OpsworkscmDescribeServersFuture

	DisassociateNode(ctx workflow.Context, input *opsworkscm.DisassociateNodeInput) (*opsworkscm.DisassociateNodeOutput, error)
	DisassociateNodeAsync(ctx workflow.Context, input *opsworkscm.DisassociateNodeInput) *OpsworkscmDisassociateNodeFuture

	ExportServerEngineAttribute(ctx workflow.Context, input *opsworkscm.ExportServerEngineAttributeInput) (*opsworkscm.ExportServerEngineAttributeOutput, error)
	ExportServerEngineAttributeAsync(ctx workflow.Context, input *opsworkscm.ExportServerEngineAttributeInput) *OpsworkscmExportServerEngineAttributeFuture

	ListTagsForResource(ctx workflow.Context, input *opsworkscm.ListTagsForResourceInput) (*opsworkscm.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *opsworkscm.ListTagsForResourceInput) *OpsworkscmListTagsForResourceFuture

	RestoreServer(ctx workflow.Context, input *opsworkscm.RestoreServerInput) (*opsworkscm.RestoreServerOutput, error)
	RestoreServerAsync(ctx workflow.Context, input *opsworkscm.RestoreServerInput) *OpsworkscmRestoreServerFuture

	StartMaintenance(ctx workflow.Context, input *opsworkscm.StartMaintenanceInput) (*opsworkscm.StartMaintenanceOutput, error)
	StartMaintenanceAsync(ctx workflow.Context, input *opsworkscm.StartMaintenanceInput) *OpsworkscmStartMaintenanceFuture

	TagResource(ctx workflow.Context, input *opsworkscm.TagResourceInput) (*opsworkscm.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *opsworkscm.TagResourceInput) *OpsworkscmTagResourceFuture

	UntagResource(ctx workflow.Context, input *opsworkscm.UntagResourceInput) (*opsworkscm.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *opsworkscm.UntagResourceInput) *OpsworkscmUntagResourceFuture

	UpdateServer(ctx workflow.Context, input *opsworkscm.UpdateServerInput) (*opsworkscm.UpdateServerOutput, error)
	UpdateServerAsync(ctx workflow.Context, input *opsworkscm.UpdateServerInput) *OpsworkscmUpdateServerFuture

	UpdateServerEngineAttributes(ctx workflow.Context, input *opsworkscm.UpdateServerEngineAttributesInput) (*opsworkscm.UpdateServerEngineAttributesOutput, error)
	UpdateServerEngineAttributesAsync(ctx workflow.Context, input *opsworkscm.UpdateServerEngineAttributesInput) *OpsworkscmUpdateServerEngineAttributesFuture

	WaitUntilNodeAssociated(ctx workflow.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) error
	WaitUntilNodeAssociatedAsync(ctx workflow.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) *VoidFuture
}

type OpsWorksCMStub struct{}

func NewOpsWorksCMStub() OpsWorksCMClient {
	return &OpsWorksCMStub{}
}

type OpsworkscmAssociateNodeFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmAssociateNodeFuture) Get(ctx workflow.Context) (*opsworkscm.AssociateNodeOutput, error) {
	var output opsworkscm.AssociateNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmCreateBackupFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmCreateBackupFuture) Get(ctx workflow.Context) (*opsworkscm.CreateBackupOutput, error) {
	var output opsworkscm.CreateBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmCreateServerFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmCreateServerFuture) Get(ctx workflow.Context) (*opsworkscm.CreateServerOutput, error) {
	var output opsworkscm.CreateServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmDeleteBackupFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmDeleteBackupFuture) Get(ctx workflow.Context) (*opsworkscm.DeleteBackupOutput, error) {
	var output opsworkscm.DeleteBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmDeleteServerFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmDeleteServerFuture) Get(ctx workflow.Context) (*opsworkscm.DeleteServerOutput, error) {
	var output opsworkscm.DeleteServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmDescribeAccountAttributesFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmDescribeAccountAttributesFuture) Get(ctx workflow.Context) (*opsworkscm.DescribeAccountAttributesOutput, error) {
	var output opsworkscm.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmDescribeBackupsFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmDescribeBackupsFuture) Get(ctx workflow.Context) (*opsworkscm.DescribeBackupsOutput, error) {
	var output opsworkscm.DescribeBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmDescribeEventsFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmDescribeEventsFuture) Get(ctx workflow.Context) (*opsworkscm.DescribeEventsOutput, error) {
	var output opsworkscm.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmDescribeNodeAssociationStatusFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmDescribeNodeAssociationStatusFuture) Get(ctx workflow.Context) (*opsworkscm.DescribeNodeAssociationStatusOutput, error) {
	var output opsworkscm.DescribeNodeAssociationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmDescribeServersFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmDescribeServersFuture) Get(ctx workflow.Context) (*opsworkscm.DescribeServersOutput, error) {
	var output opsworkscm.DescribeServersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmDisassociateNodeFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmDisassociateNodeFuture) Get(ctx workflow.Context) (*opsworkscm.DisassociateNodeOutput, error) {
	var output opsworkscm.DisassociateNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmExportServerEngineAttributeFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmExportServerEngineAttributeFuture) Get(ctx workflow.Context) (*opsworkscm.ExportServerEngineAttributeOutput, error) {
	var output opsworkscm.ExportServerEngineAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmListTagsForResourceFuture) Get(ctx workflow.Context) (*opsworkscm.ListTagsForResourceOutput, error) {
	var output opsworkscm.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmRestoreServerFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmRestoreServerFuture) Get(ctx workflow.Context) (*opsworkscm.RestoreServerOutput, error) {
	var output opsworkscm.RestoreServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmStartMaintenanceFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmStartMaintenanceFuture) Get(ctx workflow.Context) (*opsworkscm.StartMaintenanceOutput, error) {
	var output opsworkscm.StartMaintenanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmTagResourceFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmTagResourceFuture) Get(ctx workflow.Context) (*opsworkscm.TagResourceOutput, error) {
	var output opsworkscm.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmUntagResourceFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmUntagResourceFuture) Get(ctx workflow.Context) (*opsworkscm.UntagResourceOutput, error) {
	var output opsworkscm.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmUpdateServerFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmUpdateServerFuture) Get(ctx workflow.Context) (*opsworkscm.UpdateServerOutput, error) {
	var output opsworkscm.UpdateServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworkscmUpdateServerEngineAttributesFuture struct {
	Future workflow.Future
}

func (r *OpsworkscmUpdateServerEngineAttributesFuture) Get(ctx workflow.Context) (*opsworkscm.UpdateServerEngineAttributesOutput, error) {
	var output opsworkscm.UpdateServerEngineAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) AssociateNode(ctx workflow.Context, input *opsworkscm.AssociateNodeInput) (*opsworkscm.AssociateNodeOutput, error) {
	var output opsworkscm.AssociateNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.AssociateNode", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) AssociateNodeAsync(ctx workflow.Context, input *opsworkscm.AssociateNodeInput) *OpsworkscmAssociateNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.AssociateNode", input)
	return &OpsworkscmAssociateNodeFuture{Future: future}
}

func (a *OpsWorksCMStub) CreateBackup(ctx workflow.Context, input *opsworkscm.CreateBackupInput) (*opsworkscm.CreateBackupOutput, error) {
	var output opsworkscm.CreateBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.CreateBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) CreateBackupAsync(ctx workflow.Context, input *opsworkscm.CreateBackupInput) *OpsworkscmCreateBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.CreateBackup", input)
	return &OpsworkscmCreateBackupFuture{Future: future}
}

func (a *OpsWorksCMStub) CreateServer(ctx workflow.Context, input *opsworkscm.CreateServerInput) (*opsworkscm.CreateServerOutput, error) {
	var output opsworkscm.CreateServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.CreateServer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) CreateServerAsync(ctx workflow.Context, input *opsworkscm.CreateServerInput) *OpsworkscmCreateServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.CreateServer", input)
	return &OpsworkscmCreateServerFuture{Future: future}
}

func (a *OpsWorksCMStub) DeleteBackup(ctx workflow.Context, input *opsworkscm.DeleteBackupInput) (*opsworkscm.DeleteBackupOutput, error) {
	var output opsworkscm.DeleteBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DeleteBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) DeleteBackupAsync(ctx workflow.Context, input *opsworkscm.DeleteBackupInput) *OpsworkscmDeleteBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DeleteBackup", input)
	return &OpsworkscmDeleteBackupFuture{Future: future}
}

func (a *OpsWorksCMStub) DeleteServer(ctx workflow.Context, input *opsworkscm.DeleteServerInput) (*opsworkscm.DeleteServerOutput, error) {
	var output opsworkscm.DeleteServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DeleteServer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) DeleteServerAsync(ctx workflow.Context, input *opsworkscm.DeleteServerInput) *OpsworkscmDeleteServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DeleteServer", input)
	return &OpsworkscmDeleteServerFuture{Future: future}
}

func (a *OpsWorksCMStub) DescribeAccountAttributes(ctx workflow.Context, input *opsworkscm.DescribeAccountAttributesInput) (*opsworkscm.DescribeAccountAttributesOutput, error) {
	var output opsworkscm.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) DescribeAccountAttributesAsync(ctx workflow.Context, input *opsworkscm.DescribeAccountAttributesInput) *OpsworkscmDescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DescribeAccountAttributes", input)
	return &OpsworkscmDescribeAccountAttributesFuture{Future: future}
}

func (a *OpsWorksCMStub) DescribeBackups(ctx workflow.Context, input *opsworkscm.DescribeBackupsInput) (*opsworkscm.DescribeBackupsOutput, error) {
	var output opsworkscm.DescribeBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DescribeBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) DescribeBackupsAsync(ctx workflow.Context, input *opsworkscm.DescribeBackupsInput) *OpsworkscmDescribeBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DescribeBackups", input)
	return &OpsworkscmDescribeBackupsFuture{Future: future}
}

func (a *OpsWorksCMStub) DescribeEvents(ctx workflow.Context, input *opsworkscm.DescribeEventsInput) (*opsworkscm.DescribeEventsOutput, error) {
	var output opsworkscm.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) DescribeEventsAsync(ctx workflow.Context, input *opsworkscm.DescribeEventsInput) *OpsworkscmDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DescribeEvents", input)
	return &OpsworkscmDescribeEventsFuture{Future: future}
}

func (a *OpsWorksCMStub) DescribeNodeAssociationStatus(ctx workflow.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) (*opsworkscm.DescribeNodeAssociationStatusOutput, error) {
	var output opsworkscm.DescribeNodeAssociationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DescribeNodeAssociationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) DescribeNodeAssociationStatusAsync(ctx workflow.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) *OpsworkscmDescribeNodeAssociationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DescribeNodeAssociationStatus", input)
	return &OpsworkscmDescribeNodeAssociationStatusFuture{Future: future}
}

func (a *OpsWorksCMStub) DescribeServers(ctx workflow.Context, input *opsworkscm.DescribeServersInput) (*opsworkscm.DescribeServersOutput, error) {
	var output opsworkscm.DescribeServersOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DescribeServers", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) DescribeServersAsync(ctx workflow.Context, input *opsworkscm.DescribeServersInput) *OpsworkscmDescribeServersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DescribeServers", input)
	return &OpsworkscmDescribeServersFuture{Future: future}
}

func (a *OpsWorksCMStub) DisassociateNode(ctx workflow.Context, input *opsworkscm.DisassociateNodeInput) (*opsworkscm.DisassociateNodeOutput, error) {
	var output opsworkscm.DisassociateNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DisassociateNode", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) DisassociateNodeAsync(ctx workflow.Context, input *opsworkscm.DisassociateNodeInput) *OpsworkscmDisassociateNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.DisassociateNode", input)
	return &OpsworkscmDisassociateNodeFuture{Future: future}
}

func (a *OpsWorksCMStub) ExportServerEngineAttribute(ctx workflow.Context, input *opsworkscm.ExportServerEngineAttributeInput) (*opsworkscm.ExportServerEngineAttributeOutput, error) {
	var output opsworkscm.ExportServerEngineAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.ExportServerEngineAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) ExportServerEngineAttributeAsync(ctx workflow.Context, input *opsworkscm.ExportServerEngineAttributeInput) *OpsworkscmExportServerEngineAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.ExportServerEngineAttribute", input)
	return &OpsworkscmExportServerEngineAttributeFuture{Future: future}
}

func (a *OpsWorksCMStub) ListTagsForResource(ctx workflow.Context, input *opsworkscm.ListTagsForResourceInput) (*opsworkscm.ListTagsForResourceOutput, error) {
	var output opsworkscm.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) ListTagsForResourceAsync(ctx workflow.Context, input *opsworkscm.ListTagsForResourceInput) *OpsworkscmListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.ListTagsForResource", input)
	return &OpsworkscmListTagsForResourceFuture{Future: future}
}

func (a *OpsWorksCMStub) RestoreServer(ctx workflow.Context, input *opsworkscm.RestoreServerInput) (*opsworkscm.RestoreServerOutput, error) {
	var output opsworkscm.RestoreServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.RestoreServer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) RestoreServerAsync(ctx workflow.Context, input *opsworkscm.RestoreServerInput) *OpsworkscmRestoreServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.RestoreServer", input)
	return &OpsworkscmRestoreServerFuture{Future: future}
}

func (a *OpsWorksCMStub) StartMaintenance(ctx workflow.Context, input *opsworkscm.StartMaintenanceInput) (*opsworkscm.StartMaintenanceOutput, error) {
	var output opsworkscm.StartMaintenanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.StartMaintenance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) StartMaintenanceAsync(ctx workflow.Context, input *opsworkscm.StartMaintenanceInput) *OpsworkscmStartMaintenanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.StartMaintenance", input)
	return &OpsworkscmStartMaintenanceFuture{Future: future}
}

func (a *OpsWorksCMStub) TagResource(ctx workflow.Context, input *opsworkscm.TagResourceInput) (*opsworkscm.TagResourceOutput, error) {
	var output opsworkscm.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) TagResourceAsync(ctx workflow.Context, input *opsworkscm.TagResourceInput) *OpsworkscmTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.TagResource", input)
	return &OpsworkscmTagResourceFuture{Future: future}
}

func (a *OpsWorksCMStub) UntagResource(ctx workflow.Context, input *opsworkscm.UntagResourceInput) (*opsworkscm.UntagResourceOutput, error) {
	var output opsworkscm.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) UntagResourceAsync(ctx workflow.Context, input *opsworkscm.UntagResourceInput) *OpsworkscmUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.UntagResource", input)
	return &OpsworkscmUntagResourceFuture{Future: future}
}

func (a *OpsWorksCMStub) UpdateServer(ctx workflow.Context, input *opsworkscm.UpdateServerInput) (*opsworkscm.UpdateServerOutput, error) {
	var output opsworkscm.UpdateServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.UpdateServer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) UpdateServerAsync(ctx workflow.Context, input *opsworkscm.UpdateServerInput) *OpsworkscmUpdateServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.UpdateServer", input)
	return &OpsworkscmUpdateServerFuture{Future: future}
}

func (a *OpsWorksCMStub) UpdateServerEngineAttributes(ctx workflow.Context, input *opsworkscm.UpdateServerEngineAttributesInput) (*opsworkscm.UpdateServerEngineAttributesOutput, error) {
	var output opsworkscm.UpdateServerEngineAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworkscm.UpdateServerEngineAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksCMStub) UpdateServerEngineAttributesAsync(ctx workflow.Context, input *opsworkscm.UpdateServerEngineAttributesInput) *OpsworkscmUpdateServerEngineAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.UpdateServerEngineAttributes", input)
	return &OpsworkscmUpdateServerEngineAttributesFuture{Future: future}
}

func (a *OpsWorksCMStub) WaitUntilNodeAssociated(ctx workflow.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworkscm.WaitUntilNodeAssociated", input).Get(ctx, nil)
}

func (a *OpsWorksCMStub) WaitUntilNodeAssociatedAsync(ctx workflow.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworkscm.WaitUntilNodeAssociated", input)
	return NewVoidFuture(future)
}
