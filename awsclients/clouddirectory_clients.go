// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/clouddirectory"
	"go.temporal.io/sdk/workflow"
)

type CloudDirectoryClient interface {
	AddFacetToObject(ctx workflow.Context, input *clouddirectory.AddFacetToObjectInput) (*clouddirectory.AddFacetToObjectOutput, error)
	AddFacetToObjectAsync(ctx workflow.Context, input *clouddirectory.AddFacetToObjectInput) *ClouddirectoryAddFacetToObjectFuture

	ApplySchema(ctx workflow.Context, input *clouddirectory.ApplySchemaInput) (*clouddirectory.ApplySchemaOutput, error)
	ApplySchemaAsync(ctx workflow.Context, input *clouddirectory.ApplySchemaInput) *ClouddirectoryApplySchemaFuture

	AttachObject(ctx workflow.Context, input *clouddirectory.AttachObjectInput) (*clouddirectory.AttachObjectOutput, error)
	AttachObjectAsync(ctx workflow.Context, input *clouddirectory.AttachObjectInput) *ClouddirectoryAttachObjectFuture

	AttachPolicy(ctx workflow.Context, input *clouddirectory.AttachPolicyInput) (*clouddirectory.AttachPolicyOutput, error)
	AttachPolicyAsync(ctx workflow.Context, input *clouddirectory.AttachPolicyInput) *ClouddirectoryAttachPolicyFuture

	AttachToIndex(ctx workflow.Context, input *clouddirectory.AttachToIndexInput) (*clouddirectory.AttachToIndexOutput, error)
	AttachToIndexAsync(ctx workflow.Context, input *clouddirectory.AttachToIndexInput) *ClouddirectoryAttachToIndexFuture

	AttachTypedLink(ctx workflow.Context, input *clouddirectory.AttachTypedLinkInput) (*clouddirectory.AttachTypedLinkOutput, error)
	AttachTypedLinkAsync(ctx workflow.Context, input *clouddirectory.AttachTypedLinkInput) *ClouddirectoryAttachTypedLinkFuture

	BatchRead(ctx workflow.Context, input *clouddirectory.BatchReadInput) (*clouddirectory.BatchReadOutput, error)
	BatchReadAsync(ctx workflow.Context, input *clouddirectory.BatchReadInput) *ClouddirectoryBatchReadFuture

	BatchWrite(ctx workflow.Context, input *clouddirectory.BatchWriteInput) (*clouddirectory.BatchWriteOutput, error)
	BatchWriteAsync(ctx workflow.Context, input *clouddirectory.BatchWriteInput) *ClouddirectoryBatchWriteFuture

	CreateDirectory(ctx workflow.Context, input *clouddirectory.CreateDirectoryInput) (*clouddirectory.CreateDirectoryOutput, error)
	CreateDirectoryAsync(ctx workflow.Context, input *clouddirectory.CreateDirectoryInput) *ClouddirectoryCreateDirectoryFuture

	CreateFacet(ctx workflow.Context, input *clouddirectory.CreateFacetInput) (*clouddirectory.CreateFacetOutput, error)
	CreateFacetAsync(ctx workflow.Context, input *clouddirectory.CreateFacetInput) *ClouddirectoryCreateFacetFuture

	CreateIndex(ctx workflow.Context, input *clouddirectory.CreateIndexInput) (*clouddirectory.CreateIndexOutput, error)
	CreateIndexAsync(ctx workflow.Context, input *clouddirectory.CreateIndexInput) *ClouddirectoryCreateIndexFuture

	CreateObject(ctx workflow.Context, input *clouddirectory.CreateObjectInput) (*clouddirectory.CreateObjectOutput, error)
	CreateObjectAsync(ctx workflow.Context, input *clouddirectory.CreateObjectInput) *ClouddirectoryCreateObjectFuture

	CreateSchema(ctx workflow.Context, input *clouddirectory.CreateSchemaInput) (*clouddirectory.CreateSchemaOutput, error)
	CreateSchemaAsync(ctx workflow.Context, input *clouddirectory.CreateSchemaInput) *ClouddirectoryCreateSchemaFuture

	CreateTypedLinkFacet(ctx workflow.Context, input *clouddirectory.CreateTypedLinkFacetInput) (*clouddirectory.CreateTypedLinkFacetOutput, error)
	CreateTypedLinkFacetAsync(ctx workflow.Context, input *clouddirectory.CreateTypedLinkFacetInput) *ClouddirectoryCreateTypedLinkFacetFuture

	DeleteDirectory(ctx workflow.Context, input *clouddirectory.DeleteDirectoryInput) (*clouddirectory.DeleteDirectoryOutput, error)
	DeleteDirectoryAsync(ctx workflow.Context, input *clouddirectory.DeleteDirectoryInput) *ClouddirectoryDeleteDirectoryFuture

	DeleteFacet(ctx workflow.Context, input *clouddirectory.DeleteFacetInput) (*clouddirectory.DeleteFacetOutput, error)
	DeleteFacetAsync(ctx workflow.Context, input *clouddirectory.DeleteFacetInput) *ClouddirectoryDeleteFacetFuture

	DeleteObject(ctx workflow.Context, input *clouddirectory.DeleteObjectInput) (*clouddirectory.DeleteObjectOutput, error)
	DeleteObjectAsync(ctx workflow.Context, input *clouddirectory.DeleteObjectInput) *ClouddirectoryDeleteObjectFuture

	DeleteSchema(ctx workflow.Context, input *clouddirectory.DeleteSchemaInput) (*clouddirectory.DeleteSchemaOutput, error)
	DeleteSchemaAsync(ctx workflow.Context, input *clouddirectory.DeleteSchemaInput) *ClouddirectoryDeleteSchemaFuture

	DeleteTypedLinkFacet(ctx workflow.Context, input *clouddirectory.DeleteTypedLinkFacetInput) (*clouddirectory.DeleteTypedLinkFacetOutput, error)
	DeleteTypedLinkFacetAsync(ctx workflow.Context, input *clouddirectory.DeleteTypedLinkFacetInput) *ClouddirectoryDeleteTypedLinkFacetFuture

	DetachFromIndex(ctx workflow.Context, input *clouddirectory.DetachFromIndexInput) (*clouddirectory.DetachFromIndexOutput, error)
	DetachFromIndexAsync(ctx workflow.Context, input *clouddirectory.DetachFromIndexInput) *ClouddirectoryDetachFromIndexFuture

	DetachObject(ctx workflow.Context, input *clouddirectory.DetachObjectInput) (*clouddirectory.DetachObjectOutput, error)
	DetachObjectAsync(ctx workflow.Context, input *clouddirectory.DetachObjectInput) *ClouddirectoryDetachObjectFuture

	DetachPolicy(ctx workflow.Context, input *clouddirectory.DetachPolicyInput) (*clouddirectory.DetachPolicyOutput, error)
	DetachPolicyAsync(ctx workflow.Context, input *clouddirectory.DetachPolicyInput) *ClouddirectoryDetachPolicyFuture

	DetachTypedLink(ctx workflow.Context, input *clouddirectory.DetachTypedLinkInput) (*clouddirectory.DetachTypedLinkOutput, error)
	DetachTypedLinkAsync(ctx workflow.Context, input *clouddirectory.DetachTypedLinkInput) *ClouddirectoryDetachTypedLinkFuture

	DisableDirectory(ctx workflow.Context, input *clouddirectory.DisableDirectoryInput) (*clouddirectory.DisableDirectoryOutput, error)
	DisableDirectoryAsync(ctx workflow.Context, input *clouddirectory.DisableDirectoryInput) *ClouddirectoryDisableDirectoryFuture

	EnableDirectory(ctx workflow.Context, input *clouddirectory.EnableDirectoryInput) (*clouddirectory.EnableDirectoryOutput, error)
	EnableDirectoryAsync(ctx workflow.Context, input *clouddirectory.EnableDirectoryInput) *ClouddirectoryEnableDirectoryFuture

	GetAppliedSchemaVersion(ctx workflow.Context, input *clouddirectory.GetAppliedSchemaVersionInput) (*clouddirectory.GetAppliedSchemaVersionOutput, error)
	GetAppliedSchemaVersionAsync(ctx workflow.Context, input *clouddirectory.GetAppliedSchemaVersionInput) *ClouddirectoryGetAppliedSchemaVersionFuture

	GetDirectory(ctx workflow.Context, input *clouddirectory.GetDirectoryInput) (*clouddirectory.GetDirectoryOutput, error)
	GetDirectoryAsync(ctx workflow.Context, input *clouddirectory.GetDirectoryInput) *ClouddirectoryGetDirectoryFuture

	GetFacet(ctx workflow.Context, input *clouddirectory.GetFacetInput) (*clouddirectory.GetFacetOutput, error)
	GetFacetAsync(ctx workflow.Context, input *clouddirectory.GetFacetInput) *ClouddirectoryGetFacetFuture

	GetLinkAttributes(ctx workflow.Context, input *clouddirectory.GetLinkAttributesInput) (*clouddirectory.GetLinkAttributesOutput, error)
	GetLinkAttributesAsync(ctx workflow.Context, input *clouddirectory.GetLinkAttributesInput) *ClouddirectoryGetLinkAttributesFuture

	GetObjectAttributes(ctx workflow.Context, input *clouddirectory.GetObjectAttributesInput) (*clouddirectory.GetObjectAttributesOutput, error)
	GetObjectAttributesAsync(ctx workflow.Context, input *clouddirectory.GetObjectAttributesInput) *ClouddirectoryGetObjectAttributesFuture

	GetObjectInformation(ctx workflow.Context, input *clouddirectory.GetObjectInformationInput) (*clouddirectory.GetObjectInformationOutput, error)
	GetObjectInformationAsync(ctx workflow.Context, input *clouddirectory.GetObjectInformationInput) *ClouddirectoryGetObjectInformationFuture

	GetSchemaAsJson(ctx workflow.Context, input *clouddirectory.GetSchemaAsJsonInput) (*clouddirectory.GetSchemaAsJsonOutput, error)
	GetSchemaAsJsonAsync(ctx workflow.Context, input *clouddirectory.GetSchemaAsJsonInput) *ClouddirectoryGetSchemaAsJsonFuture

	GetTypedLinkFacetInformation(ctx workflow.Context, input *clouddirectory.GetTypedLinkFacetInformationInput) (*clouddirectory.GetTypedLinkFacetInformationOutput, error)
	GetTypedLinkFacetInformationAsync(ctx workflow.Context, input *clouddirectory.GetTypedLinkFacetInformationInput) *ClouddirectoryGetTypedLinkFacetInformationFuture

	ListAppliedSchemaArns(ctx workflow.Context, input *clouddirectory.ListAppliedSchemaArnsInput) (*clouddirectory.ListAppliedSchemaArnsOutput, error)
	ListAppliedSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListAppliedSchemaArnsInput) *ClouddirectoryListAppliedSchemaArnsFuture

	ListAttachedIndices(ctx workflow.Context, input *clouddirectory.ListAttachedIndicesInput) (*clouddirectory.ListAttachedIndicesOutput, error)
	ListAttachedIndicesAsync(ctx workflow.Context, input *clouddirectory.ListAttachedIndicesInput) *ClouddirectoryListAttachedIndicesFuture

	ListDevelopmentSchemaArns(ctx workflow.Context, input *clouddirectory.ListDevelopmentSchemaArnsInput) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error)
	ListDevelopmentSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListDevelopmentSchemaArnsInput) *ClouddirectoryListDevelopmentSchemaArnsFuture

	ListDirectories(ctx workflow.Context, input *clouddirectory.ListDirectoriesInput) (*clouddirectory.ListDirectoriesOutput, error)
	ListDirectoriesAsync(ctx workflow.Context, input *clouddirectory.ListDirectoriesInput) *ClouddirectoryListDirectoriesFuture

	ListFacetAttributes(ctx workflow.Context, input *clouddirectory.ListFacetAttributesInput) (*clouddirectory.ListFacetAttributesOutput, error)
	ListFacetAttributesAsync(ctx workflow.Context, input *clouddirectory.ListFacetAttributesInput) *ClouddirectoryListFacetAttributesFuture

	ListFacetNames(ctx workflow.Context, input *clouddirectory.ListFacetNamesInput) (*clouddirectory.ListFacetNamesOutput, error)
	ListFacetNamesAsync(ctx workflow.Context, input *clouddirectory.ListFacetNamesInput) *ClouddirectoryListFacetNamesFuture

	ListIncomingTypedLinks(ctx workflow.Context, input *clouddirectory.ListIncomingTypedLinksInput) (*clouddirectory.ListIncomingTypedLinksOutput, error)
	ListIncomingTypedLinksAsync(ctx workflow.Context, input *clouddirectory.ListIncomingTypedLinksInput) *ClouddirectoryListIncomingTypedLinksFuture

	ListIndex(ctx workflow.Context, input *clouddirectory.ListIndexInput) (*clouddirectory.ListIndexOutput, error)
	ListIndexAsync(ctx workflow.Context, input *clouddirectory.ListIndexInput) *ClouddirectoryListIndexFuture

	ListManagedSchemaArns(ctx workflow.Context, input *clouddirectory.ListManagedSchemaArnsInput) (*clouddirectory.ListManagedSchemaArnsOutput, error)
	ListManagedSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListManagedSchemaArnsInput) *ClouddirectoryListManagedSchemaArnsFuture

	ListObjectAttributes(ctx workflow.Context, input *clouddirectory.ListObjectAttributesInput) (*clouddirectory.ListObjectAttributesOutput, error)
	ListObjectAttributesAsync(ctx workflow.Context, input *clouddirectory.ListObjectAttributesInput) *ClouddirectoryListObjectAttributesFuture

	ListObjectChildren(ctx workflow.Context, input *clouddirectory.ListObjectChildrenInput) (*clouddirectory.ListObjectChildrenOutput, error)
	ListObjectChildrenAsync(ctx workflow.Context, input *clouddirectory.ListObjectChildrenInput) *ClouddirectoryListObjectChildrenFuture

	ListObjectParentPaths(ctx workflow.Context, input *clouddirectory.ListObjectParentPathsInput) (*clouddirectory.ListObjectParentPathsOutput, error)
	ListObjectParentPathsAsync(ctx workflow.Context, input *clouddirectory.ListObjectParentPathsInput) *ClouddirectoryListObjectParentPathsFuture

	ListObjectParents(ctx workflow.Context, input *clouddirectory.ListObjectParentsInput) (*clouddirectory.ListObjectParentsOutput, error)
	ListObjectParentsAsync(ctx workflow.Context, input *clouddirectory.ListObjectParentsInput) *ClouddirectoryListObjectParentsFuture

	ListObjectPolicies(ctx workflow.Context, input *clouddirectory.ListObjectPoliciesInput) (*clouddirectory.ListObjectPoliciesOutput, error)
	ListObjectPoliciesAsync(ctx workflow.Context, input *clouddirectory.ListObjectPoliciesInput) *ClouddirectoryListObjectPoliciesFuture

	ListOutgoingTypedLinks(ctx workflow.Context, input *clouddirectory.ListOutgoingTypedLinksInput) (*clouddirectory.ListOutgoingTypedLinksOutput, error)
	ListOutgoingTypedLinksAsync(ctx workflow.Context, input *clouddirectory.ListOutgoingTypedLinksInput) *ClouddirectoryListOutgoingTypedLinksFuture

	ListPolicyAttachments(ctx workflow.Context, input *clouddirectory.ListPolicyAttachmentsInput) (*clouddirectory.ListPolicyAttachmentsOutput, error)
	ListPolicyAttachmentsAsync(ctx workflow.Context, input *clouddirectory.ListPolicyAttachmentsInput) *ClouddirectoryListPolicyAttachmentsFuture

	ListPublishedSchemaArns(ctx workflow.Context, input *clouddirectory.ListPublishedSchemaArnsInput) (*clouddirectory.ListPublishedSchemaArnsOutput, error)
	ListPublishedSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListPublishedSchemaArnsInput) *ClouddirectoryListPublishedSchemaArnsFuture

	ListTagsForResource(ctx workflow.Context, input *clouddirectory.ListTagsForResourceInput) (*clouddirectory.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *clouddirectory.ListTagsForResourceInput) *ClouddirectoryListTagsForResourceFuture

	ListTypedLinkFacetAttributes(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetAttributesInput) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error)
	ListTypedLinkFacetAttributesAsync(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetAttributesInput) *ClouddirectoryListTypedLinkFacetAttributesFuture

	ListTypedLinkFacetNames(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetNamesInput) (*clouddirectory.ListTypedLinkFacetNamesOutput, error)
	ListTypedLinkFacetNamesAsync(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetNamesInput) *ClouddirectoryListTypedLinkFacetNamesFuture

	LookupPolicy(ctx workflow.Context, input *clouddirectory.LookupPolicyInput) (*clouddirectory.LookupPolicyOutput, error)
	LookupPolicyAsync(ctx workflow.Context, input *clouddirectory.LookupPolicyInput) *ClouddirectoryLookupPolicyFuture

	PublishSchema(ctx workflow.Context, input *clouddirectory.PublishSchemaInput) (*clouddirectory.PublishSchemaOutput, error)
	PublishSchemaAsync(ctx workflow.Context, input *clouddirectory.PublishSchemaInput) *ClouddirectoryPublishSchemaFuture

	PutSchemaFromJson(ctx workflow.Context, input *clouddirectory.PutSchemaFromJsonInput) (*clouddirectory.PutSchemaFromJsonOutput, error)
	PutSchemaFromJsonAsync(ctx workflow.Context, input *clouddirectory.PutSchemaFromJsonInput) *ClouddirectoryPutSchemaFromJsonFuture

	RemoveFacetFromObject(ctx workflow.Context, input *clouddirectory.RemoveFacetFromObjectInput) (*clouddirectory.RemoveFacetFromObjectOutput, error)
	RemoveFacetFromObjectAsync(ctx workflow.Context, input *clouddirectory.RemoveFacetFromObjectInput) *ClouddirectoryRemoveFacetFromObjectFuture

	TagResource(ctx workflow.Context, input *clouddirectory.TagResourceInput) (*clouddirectory.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *clouddirectory.TagResourceInput) *ClouddirectoryTagResourceFuture

	UntagResource(ctx workflow.Context, input *clouddirectory.UntagResourceInput) (*clouddirectory.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *clouddirectory.UntagResourceInput) *ClouddirectoryUntagResourceFuture

	UpdateFacet(ctx workflow.Context, input *clouddirectory.UpdateFacetInput) (*clouddirectory.UpdateFacetOutput, error)
	UpdateFacetAsync(ctx workflow.Context, input *clouddirectory.UpdateFacetInput) *ClouddirectoryUpdateFacetFuture

	UpdateLinkAttributes(ctx workflow.Context, input *clouddirectory.UpdateLinkAttributesInput) (*clouddirectory.UpdateLinkAttributesOutput, error)
	UpdateLinkAttributesAsync(ctx workflow.Context, input *clouddirectory.UpdateLinkAttributesInput) *ClouddirectoryUpdateLinkAttributesFuture

	UpdateObjectAttributes(ctx workflow.Context, input *clouddirectory.UpdateObjectAttributesInput) (*clouddirectory.UpdateObjectAttributesOutput, error)
	UpdateObjectAttributesAsync(ctx workflow.Context, input *clouddirectory.UpdateObjectAttributesInput) *ClouddirectoryUpdateObjectAttributesFuture

	UpdateSchema(ctx workflow.Context, input *clouddirectory.UpdateSchemaInput) (*clouddirectory.UpdateSchemaOutput, error)
	UpdateSchemaAsync(ctx workflow.Context, input *clouddirectory.UpdateSchemaInput) *ClouddirectoryUpdateSchemaFuture

	UpdateTypedLinkFacet(ctx workflow.Context, input *clouddirectory.UpdateTypedLinkFacetInput) (*clouddirectory.UpdateTypedLinkFacetOutput, error)
	UpdateTypedLinkFacetAsync(ctx workflow.Context, input *clouddirectory.UpdateTypedLinkFacetInput) *ClouddirectoryUpdateTypedLinkFacetFuture

	UpgradeAppliedSchema(ctx workflow.Context, input *clouddirectory.UpgradeAppliedSchemaInput) (*clouddirectory.UpgradeAppliedSchemaOutput, error)
	UpgradeAppliedSchemaAsync(ctx workflow.Context, input *clouddirectory.UpgradeAppliedSchemaInput) *ClouddirectoryUpgradeAppliedSchemaFuture

	UpgradePublishedSchema(ctx workflow.Context, input *clouddirectory.UpgradePublishedSchemaInput) (*clouddirectory.UpgradePublishedSchemaOutput, error)
	UpgradePublishedSchemaAsync(ctx workflow.Context, input *clouddirectory.UpgradePublishedSchemaInput) *ClouddirectoryUpgradePublishedSchemaFuture
}

type CloudDirectoryStub struct{}

func NewCloudDirectoryStub() CloudDirectoryClient {
	return &CloudDirectoryStub{}
}

type ClouddirectoryAddFacetToObjectFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryAddFacetToObjectFuture) Get(ctx workflow.Context) (*clouddirectory.AddFacetToObjectOutput, error) {
	var output clouddirectory.AddFacetToObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryApplySchemaFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryApplySchemaFuture) Get(ctx workflow.Context) (*clouddirectory.ApplySchemaOutput, error) {
	var output clouddirectory.ApplySchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryAttachObjectFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryAttachObjectFuture) Get(ctx workflow.Context) (*clouddirectory.AttachObjectOutput, error) {
	var output clouddirectory.AttachObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryAttachPolicyFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryAttachPolicyFuture) Get(ctx workflow.Context) (*clouddirectory.AttachPolicyOutput, error) {
	var output clouddirectory.AttachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryAttachToIndexFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryAttachToIndexFuture) Get(ctx workflow.Context) (*clouddirectory.AttachToIndexOutput, error) {
	var output clouddirectory.AttachToIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryAttachTypedLinkFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryAttachTypedLinkFuture) Get(ctx workflow.Context) (*clouddirectory.AttachTypedLinkOutput, error) {
	var output clouddirectory.AttachTypedLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryBatchReadFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryBatchReadFuture) Get(ctx workflow.Context) (*clouddirectory.BatchReadOutput, error) {
	var output clouddirectory.BatchReadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryBatchWriteFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryBatchWriteFuture) Get(ctx workflow.Context) (*clouddirectory.BatchWriteOutput, error) {
	var output clouddirectory.BatchWriteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryCreateDirectoryFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryCreateDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.CreateDirectoryOutput, error) {
	var output clouddirectory.CreateDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryCreateFacetFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryCreateFacetFuture) Get(ctx workflow.Context) (*clouddirectory.CreateFacetOutput, error) {
	var output clouddirectory.CreateFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryCreateIndexFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryCreateIndexFuture) Get(ctx workflow.Context) (*clouddirectory.CreateIndexOutput, error) {
	var output clouddirectory.CreateIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryCreateObjectFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryCreateObjectFuture) Get(ctx workflow.Context) (*clouddirectory.CreateObjectOutput, error) {
	var output clouddirectory.CreateObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryCreateSchemaFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryCreateSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.CreateSchemaOutput, error) {
	var output clouddirectory.CreateSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryCreateTypedLinkFacetFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryCreateTypedLinkFacetFuture) Get(ctx workflow.Context) (*clouddirectory.CreateTypedLinkFacetOutput, error) {
	var output clouddirectory.CreateTypedLinkFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryDeleteDirectoryFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryDeleteDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteDirectoryOutput, error) {
	var output clouddirectory.DeleteDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryDeleteFacetFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryDeleteFacetFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteFacetOutput, error) {
	var output clouddirectory.DeleteFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryDeleteObjectFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryDeleteObjectFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteObjectOutput, error) {
	var output clouddirectory.DeleteObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryDeleteSchemaFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryDeleteSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteSchemaOutput, error) {
	var output clouddirectory.DeleteSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryDeleteTypedLinkFacetFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryDeleteTypedLinkFacetFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteTypedLinkFacetOutput, error) {
	var output clouddirectory.DeleteTypedLinkFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryDetachFromIndexFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryDetachFromIndexFuture) Get(ctx workflow.Context) (*clouddirectory.DetachFromIndexOutput, error) {
	var output clouddirectory.DetachFromIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryDetachObjectFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryDetachObjectFuture) Get(ctx workflow.Context) (*clouddirectory.DetachObjectOutput, error) {
	var output clouddirectory.DetachObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryDetachPolicyFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryDetachPolicyFuture) Get(ctx workflow.Context) (*clouddirectory.DetachPolicyOutput, error) {
	var output clouddirectory.DetachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryDetachTypedLinkFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryDetachTypedLinkFuture) Get(ctx workflow.Context) (*clouddirectory.DetachTypedLinkOutput, error) {
	var output clouddirectory.DetachTypedLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryDisableDirectoryFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryDisableDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.DisableDirectoryOutput, error) {
	var output clouddirectory.DisableDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryEnableDirectoryFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryEnableDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.EnableDirectoryOutput, error) {
	var output clouddirectory.EnableDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryGetAppliedSchemaVersionFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryGetAppliedSchemaVersionFuture) Get(ctx workflow.Context) (*clouddirectory.GetAppliedSchemaVersionOutput, error) {
	var output clouddirectory.GetAppliedSchemaVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryGetDirectoryFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryGetDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.GetDirectoryOutput, error) {
	var output clouddirectory.GetDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryGetFacetFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryGetFacetFuture) Get(ctx workflow.Context) (*clouddirectory.GetFacetOutput, error) {
	var output clouddirectory.GetFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryGetLinkAttributesFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryGetLinkAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.GetLinkAttributesOutput, error) {
	var output clouddirectory.GetLinkAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryGetObjectAttributesFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryGetObjectAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.GetObjectAttributesOutput, error) {
	var output clouddirectory.GetObjectAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryGetObjectInformationFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryGetObjectInformationFuture) Get(ctx workflow.Context) (*clouddirectory.GetObjectInformationOutput, error) {
	var output clouddirectory.GetObjectInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryGetSchemaAsJsonFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryGetSchemaAsJsonFuture) Get(ctx workflow.Context) (*clouddirectory.GetSchemaAsJsonOutput, error) {
	var output clouddirectory.GetSchemaAsJsonOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryGetTypedLinkFacetInformationFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryGetTypedLinkFacetInformationFuture) Get(ctx workflow.Context) (*clouddirectory.GetTypedLinkFacetInformationOutput, error) {
	var output clouddirectory.GetTypedLinkFacetInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListAppliedSchemaArnsFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListAppliedSchemaArnsFuture) Get(ctx workflow.Context) (*clouddirectory.ListAppliedSchemaArnsOutput, error) {
	var output clouddirectory.ListAppliedSchemaArnsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListAttachedIndicesFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListAttachedIndicesFuture) Get(ctx workflow.Context) (*clouddirectory.ListAttachedIndicesOutput, error) {
	var output clouddirectory.ListAttachedIndicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListDevelopmentSchemaArnsFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListDevelopmentSchemaArnsFuture) Get(ctx workflow.Context) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error) {
	var output clouddirectory.ListDevelopmentSchemaArnsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListDirectoriesFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListDirectoriesFuture) Get(ctx workflow.Context) (*clouddirectory.ListDirectoriesOutput, error) {
	var output clouddirectory.ListDirectoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListFacetAttributesFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListFacetAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.ListFacetAttributesOutput, error) {
	var output clouddirectory.ListFacetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListFacetNamesFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListFacetNamesFuture) Get(ctx workflow.Context) (*clouddirectory.ListFacetNamesOutput, error) {
	var output clouddirectory.ListFacetNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListIncomingTypedLinksFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListIncomingTypedLinksFuture) Get(ctx workflow.Context) (*clouddirectory.ListIncomingTypedLinksOutput, error) {
	var output clouddirectory.ListIncomingTypedLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListIndexFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListIndexFuture) Get(ctx workflow.Context) (*clouddirectory.ListIndexOutput, error) {
	var output clouddirectory.ListIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListManagedSchemaArnsFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListManagedSchemaArnsFuture) Get(ctx workflow.Context) (*clouddirectory.ListManagedSchemaArnsOutput, error) {
	var output clouddirectory.ListManagedSchemaArnsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListObjectAttributesFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListObjectAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectAttributesOutput, error) {
	var output clouddirectory.ListObjectAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListObjectChildrenFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListObjectChildrenFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectChildrenOutput, error) {
	var output clouddirectory.ListObjectChildrenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListObjectParentPathsFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListObjectParentPathsFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectParentPathsOutput, error) {
	var output clouddirectory.ListObjectParentPathsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListObjectParentsFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListObjectParentsFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectParentsOutput, error) {
	var output clouddirectory.ListObjectParentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListObjectPoliciesFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListObjectPoliciesFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectPoliciesOutput, error) {
	var output clouddirectory.ListObjectPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListOutgoingTypedLinksFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListOutgoingTypedLinksFuture) Get(ctx workflow.Context) (*clouddirectory.ListOutgoingTypedLinksOutput, error) {
	var output clouddirectory.ListOutgoingTypedLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListPolicyAttachmentsFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListPolicyAttachmentsFuture) Get(ctx workflow.Context) (*clouddirectory.ListPolicyAttachmentsOutput, error) {
	var output clouddirectory.ListPolicyAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListPublishedSchemaArnsFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListPublishedSchemaArnsFuture) Get(ctx workflow.Context) (*clouddirectory.ListPublishedSchemaArnsOutput, error) {
	var output clouddirectory.ListPublishedSchemaArnsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListTagsForResourceFuture) Get(ctx workflow.Context) (*clouddirectory.ListTagsForResourceOutput, error) {
	var output clouddirectory.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListTypedLinkFacetAttributesFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListTypedLinkFacetAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error) {
	var output clouddirectory.ListTypedLinkFacetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryListTypedLinkFacetNamesFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryListTypedLinkFacetNamesFuture) Get(ctx workflow.Context) (*clouddirectory.ListTypedLinkFacetNamesOutput, error) {
	var output clouddirectory.ListTypedLinkFacetNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryLookupPolicyFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryLookupPolicyFuture) Get(ctx workflow.Context) (*clouddirectory.LookupPolicyOutput, error) {
	var output clouddirectory.LookupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryPublishSchemaFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryPublishSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.PublishSchemaOutput, error) {
	var output clouddirectory.PublishSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryPutSchemaFromJsonFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryPutSchemaFromJsonFuture) Get(ctx workflow.Context) (*clouddirectory.PutSchemaFromJsonOutput, error) {
	var output clouddirectory.PutSchemaFromJsonOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryRemoveFacetFromObjectFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryRemoveFacetFromObjectFuture) Get(ctx workflow.Context) (*clouddirectory.RemoveFacetFromObjectOutput, error) {
	var output clouddirectory.RemoveFacetFromObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryTagResourceFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryTagResourceFuture) Get(ctx workflow.Context) (*clouddirectory.TagResourceOutput, error) {
	var output clouddirectory.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryUntagResourceFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryUntagResourceFuture) Get(ctx workflow.Context) (*clouddirectory.UntagResourceOutput, error) {
	var output clouddirectory.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryUpdateFacetFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryUpdateFacetFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateFacetOutput, error) {
	var output clouddirectory.UpdateFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryUpdateLinkAttributesFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryUpdateLinkAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateLinkAttributesOutput, error) {
	var output clouddirectory.UpdateLinkAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryUpdateObjectAttributesFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryUpdateObjectAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateObjectAttributesOutput, error) {
	var output clouddirectory.UpdateObjectAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryUpdateSchemaFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryUpdateSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateSchemaOutput, error) {
	var output clouddirectory.UpdateSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryUpdateTypedLinkFacetFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryUpdateTypedLinkFacetFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateTypedLinkFacetOutput, error) {
	var output clouddirectory.UpdateTypedLinkFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryUpgradeAppliedSchemaFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryUpgradeAppliedSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.UpgradeAppliedSchemaOutput, error) {
	var output clouddirectory.UpgradeAppliedSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClouddirectoryUpgradePublishedSchemaFuture struct {
	Future workflow.Future
}

func (r *ClouddirectoryUpgradePublishedSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.UpgradePublishedSchemaOutput, error) {
	var output clouddirectory.UpgradePublishedSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) AddFacetToObject(ctx workflow.Context, input *clouddirectory.AddFacetToObjectInput) (*clouddirectory.AddFacetToObjectOutput, error) {
	var output clouddirectory.AddFacetToObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.AddFacetToObject", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) AddFacetToObjectAsync(ctx workflow.Context, input *clouddirectory.AddFacetToObjectInput) *ClouddirectoryAddFacetToObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.AddFacetToObject", input)
	return &ClouddirectoryAddFacetToObjectFuture{Future: future}
}

func (a *CloudDirectoryStub) ApplySchema(ctx workflow.Context, input *clouddirectory.ApplySchemaInput) (*clouddirectory.ApplySchemaOutput, error) {
	var output clouddirectory.ApplySchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ApplySchema", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ApplySchemaAsync(ctx workflow.Context, input *clouddirectory.ApplySchemaInput) *ClouddirectoryApplySchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ApplySchema", input)
	return &ClouddirectoryApplySchemaFuture{Future: future}
}

func (a *CloudDirectoryStub) AttachObject(ctx workflow.Context, input *clouddirectory.AttachObjectInput) (*clouddirectory.AttachObjectOutput, error) {
	var output clouddirectory.AttachObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.AttachObject", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) AttachObjectAsync(ctx workflow.Context, input *clouddirectory.AttachObjectInput) *ClouddirectoryAttachObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.AttachObject", input)
	return &ClouddirectoryAttachObjectFuture{Future: future}
}

func (a *CloudDirectoryStub) AttachPolicy(ctx workflow.Context, input *clouddirectory.AttachPolicyInput) (*clouddirectory.AttachPolicyOutput, error) {
	var output clouddirectory.AttachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.AttachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) AttachPolicyAsync(ctx workflow.Context, input *clouddirectory.AttachPolicyInput) *ClouddirectoryAttachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.AttachPolicy", input)
	return &ClouddirectoryAttachPolicyFuture{Future: future}
}

func (a *CloudDirectoryStub) AttachToIndex(ctx workflow.Context, input *clouddirectory.AttachToIndexInput) (*clouddirectory.AttachToIndexOutput, error) {
	var output clouddirectory.AttachToIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.AttachToIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) AttachToIndexAsync(ctx workflow.Context, input *clouddirectory.AttachToIndexInput) *ClouddirectoryAttachToIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.AttachToIndex", input)
	return &ClouddirectoryAttachToIndexFuture{Future: future}
}

func (a *CloudDirectoryStub) AttachTypedLink(ctx workflow.Context, input *clouddirectory.AttachTypedLinkInput) (*clouddirectory.AttachTypedLinkOutput, error) {
	var output clouddirectory.AttachTypedLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.AttachTypedLink", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) AttachTypedLinkAsync(ctx workflow.Context, input *clouddirectory.AttachTypedLinkInput) *ClouddirectoryAttachTypedLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.AttachTypedLink", input)
	return &ClouddirectoryAttachTypedLinkFuture{Future: future}
}

func (a *CloudDirectoryStub) BatchRead(ctx workflow.Context, input *clouddirectory.BatchReadInput) (*clouddirectory.BatchReadOutput, error) {
	var output clouddirectory.BatchReadOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.BatchRead", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) BatchReadAsync(ctx workflow.Context, input *clouddirectory.BatchReadInput) *ClouddirectoryBatchReadFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.BatchRead", input)
	return &ClouddirectoryBatchReadFuture{Future: future}
}

func (a *CloudDirectoryStub) BatchWrite(ctx workflow.Context, input *clouddirectory.BatchWriteInput) (*clouddirectory.BatchWriteOutput, error) {
	var output clouddirectory.BatchWriteOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.BatchWrite", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) BatchWriteAsync(ctx workflow.Context, input *clouddirectory.BatchWriteInput) *ClouddirectoryBatchWriteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.BatchWrite", input)
	return &ClouddirectoryBatchWriteFuture{Future: future}
}

func (a *CloudDirectoryStub) CreateDirectory(ctx workflow.Context, input *clouddirectory.CreateDirectoryInput) (*clouddirectory.CreateDirectoryOutput, error) {
	var output clouddirectory.CreateDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.CreateDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) CreateDirectoryAsync(ctx workflow.Context, input *clouddirectory.CreateDirectoryInput) *ClouddirectoryCreateDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.CreateDirectory", input)
	return &ClouddirectoryCreateDirectoryFuture{Future: future}
}

func (a *CloudDirectoryStub) CreateFacet(ctx workflow.Context, input *clouddirectory.CreateFacetInput) (*clouddirectory.CreateFacetOutput, error) {
	var output clouddirectory.CreateFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.CreateFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) CreateFacetAsync(ctx workflow.Context, input *clouddirectory.CreateFacetInput) *ClouddirectoryCreateFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.CreateFacet", input)
	return &ClouddirectoryCreateFacetFuture{Future: future}
}

func (a *CloudDirectoryStub) CreateIndex(ctx workflow.Context, input *clouddirectory.CreateIndexInput) (*clouddirectory.CreateIndexOutput, error) {
	var output clouddirectory.CreateIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.CreateIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) CreateIndexAsync(ctx workflow.Context, input *clouddirectory.CreateIndexInput) *ClouddirectoryCreateIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.CreateIndex", input)
	return &ClouddirectoryCreateIndexFuture{Future: future}
}

func (a *CloudDirectoryStub) CreateObject(ctx workflow.Context, input *clouddirectory.CreateObjectInput) (*clouddirectory.CreateObjectOutput, error) {
	var output clouddirectory.CreateObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.CreateObject", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) CreateObjectAsync(ctx workflow.Context, input *clouddirectory.CreateObjectInput) *ClouddirectoryCreateObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.CreateObject", input)
	return &ClouddirectoryCreateObjectFuture{Future: future}
}

func (a *CloudDirectoryStub) CreateSchema(ctx workflow.Context, input *clouddirectory.CreateSchemaInput) (*clouddirectory.CreateSchemaOutput, error) {
	var output clouddirectory.CreateSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.CreateSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) CreateSchemaAsync(ctx workflow.Context, input *clouddirectory.CreateSchemaInput) *ClouddirectoryCreateSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.CreateSchema", input)
	return &ClouddirectoryCreateSchemaFuture{Future: future}
}

func (a *CloudDirectoryStub) CreateTypedLinkFacet(ctx workflow.Context, input *clouddirectory.CreateTypedLinkFacetInput) (*clouddirectory.CreateTypedLinkFacetOutput, error) {
	var output clouddirectory.CreateTypedLinkFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.CreateTypedLinkFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) CreateTypedLinkFacetAsync(ctx workflow.Context, input *clouddirectory.CreateTypedLinkFacetInput) *ClouddirectoryCreateTypedLinkFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.CreateTypedLinkFacet", input)
	return &ClouddirectoryCreateTypedLinkFacetFuture{Future: future}
}

func (a *CloudDirectoryStub) DeleteDirectory(ctx workflow.Context, input *clouddirectory.DeleteDirectoryInput) (*clouddirectory.DeleteDirectoryOutput, error) {
	var output clouddirectory.DeleteDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DeleteDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) DeleteDirectoryAsync(ctx workflow.Context, input *clouddirectory.DeleteDirectoryInput) *ClouddirectoryDeleteDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DeleteDirectory", input)
	return &ClouddirectoryDeleteDirectoryFuture{Future: future}
}

func (a *CloudDirectoryStub) DeleteFacet(ctx workflow.Context, input *clouddirectory.DeleteFacetInput) (*clouddirectory.DeleteFacetOutput, error) {
	var output clouddirectory.DeleteFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DeleteFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) DeleteFacetAsync(ctx workflow.Context, input *clouddirectory.DeleteFacetInput) *ClouddirectoryDeleteFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DeleteFacet", input)
	return &ClouddirectoryDeleteFacetFuture{Future: future}
}

func (a *CloudDirectoryStub) DeleteObject(ctx workflow.Context, input *clouddirectory.DeleteObjectInput) (*clouddirectory.DeleteObjectOutput, error) {
	var output clouddirectory.DeleteObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DeleteObject", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) DeleteObjectAsync(ctx workflow.Context, input *clouddirectory.DeleteObjectInput) *ClouddirectoryDeleteObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DeleteObject", input)
	return &ClouddirectoryDeleteObjectFuture{Future: future}
}

func (a *CloudDirectoryStub) DeleteSchema(ctx workflow.Context, input *clouddirectory.DeleteSchemaInput) (*clouddirectory.DeleteSchemaOutput, error) {
	var output clouddirectory.DeleteSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DeleteSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) DeleteSchemaAsync(ctx workflow.Context, input *clouddirectory.DeleteSchemaInput) *ClouddirectoryDeleteSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DeleteSchema", input)
	return &ClouddirectoryDeleteSchemaFuture{Future: future}
}

func (a *CloudDirectoryStub) DeleteTypedLinkFacet(ctx workflow.Context, input *clouddirectory.DeleteTypedLinkFacetInput) (*clouddirectory.DeleteTypedLinkFacetOutput, error) {
	var output clouddirectory.DeleteTypedLinkFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DeleteTypedLinkFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) DeleteTypedLinkFacetAsync(ctx workflow.Context, input *clouddirectory.DeleteTypedLinkFacetInput) *ClouddirectoryDeleteTypedLinkFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DeleteTypedLinkFacet", input)
	return &ClouddirectoryDeleteTypedLinkFacetFuture{Future: future}
}

func (a *CloudDirectoryStub) DetachFromIndex(ctx workflow.Context, input *clouddirectory.DetachFromIndexInput) (*clouddirectory.DetachFromIndexOutput, error) {
	var output clouddirectory.DetachFromIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DetachFromIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) DetachFromIndexAsync(ctx workflow.Context, input *clouddirectory.DetachFromIndexInput) *ClouddirectoryDetachFromIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DetachFromIndex", input)
	return &ClouddirectoryDetachFromIndexFuture{Future: future}
}

func (a *CloudDirectoryStub) DetachObject(ctx workflow.Context, input *clouddirectory.DetachObjectInput) (*clouddirectory.DetachObjectOutput, error) {
	var output clouddirectory.DetachObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DetachObject", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) DetachObjectAsync(ctx workflow.Context, input *clouddirectory.DetachObjectInput) *ClouddirectoryDetachObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DetachObject", input)
	return &ClouddirectoryDetachObjectFuture{Future: future}
}

func (a *CloudDirectoryStub) DetachPolicy(ctx workflow.Context, input *clouddirectory.DetachPolicyInput) (*clouddirectory.DetachPolicyOutput, error) {
	var output clouddirectory.DetachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DetachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) DetachPolicyAsync(ctx workflow.Context, input *clouddirectory.DetachPolicyInput) *ClouddirectoryDetachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DetachPolicy", input)
	return &ClouddirectoryDetachPolicyFuture{Future: future}
}

func (a *CloudDirectoryStub) DetachTypedLink(ctx workflow.Context, input *clouddirectory.DetachTypedLinkInput) (*clouddirectory.DetachTypedLinkOutput, error) {
	var output clouddirectory.DetachTypedLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DetachTypedLink", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) DetachTypedLinkAsync(ctx workflow.Context, input *clouddirectory.DetachTypedLinkInput) *ClouddirectoryDetachTypedLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DetachTypedLink", input)
	return &ClouddirectoryDetachTypedLinkFuture{Future: future}
}

func (a *CloudDirectoryStub) DisableDirectory(ctx workflow.Context, input *clouddirectory.DisableDirectoryInput) (*clouddirectory.DisableDirectoryOutput, error) {
	var output clouddirectory.DisableDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DisableDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) DisableDirectoryAsync(ctx workflow.Context, input *clouddirectory.DisableDirectoryInput) *ClouddirectoryDisableDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.DisableDirectory", input)
	return &ClouddirectoryDisableDirectoryFuture{Future: future}
}

func (a *CloudDirectoryStub) EnableDirectory(ctx workflow.Context, input *clouddirectory.EnableDirectoryInput) (*clouddirectory.EnableDirectoryOutput, error) {
	var output clouddirectory.EnableDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.EnableDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) EnableDirectoryAsync(ctx workflow.Context, input *clouddirectory.EnableDirectoryInput) *ClouddirectoryEnableDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.EnableDirectory", input)
	return &ClouddirectoryEnableDirectoryFuture{Future: future}
}

func (a *CloudDirectoryStub) GetAppliedSchemaVersion(ctx workflow.Context, input *clouddirectory.GetAppliedSchemaVersionInput) (*clouddirectory.GetAppliedSchemaVersionOutput, error) {
	var output clouddirectory.GetAppliedSchemaVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetAppliedSchemaVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) GetAppliedSchemaVersionAsync(ctx workflow.Context, input *clouddirectory.GetAppliedSchemaVersionInput) *ClouddirectoryGetAppliedSchemaVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetAppliedSchemaVersion", input)
	return &ClouddirectoryGetAppliedSchemaVersionFuture{Future: future}
}

func (a *CloudDirectoryStub) GetDirectory(ctx workflow.Context, input *clouddirectory.GetDirectoryInput) (*clouddirectory.GetDirectoryOutput, error) {
	var output clouddirectory.GetDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) GetDirectoryAsync(ctx workflow.Context, input *clouddirectory.GetDirectoryInput) *ClouddirectoryGetDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetDirectory", input)
	return &ClouddirectoryGetDirectoryFuture{Future: future}
}

func (a *CloudDirectoryStub) GetFacet(ctx workflow.Context, input *clouddirectory.GetFacetInput) (*clouddirectory.GetFacetOutput, error) {
	var output clouddirectory.GetFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) GetFacetAsync(ctx workflow.Context, input *clouddirectory.GetFacetInput) *ClouddirectoryGetFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetFacet", input)
	return &ClouddirectoryGetFacetFuture{Future: future}
}

func (a *CloudDirectoryStub) GetLinkAttributes(ctx workflow.Context, input *clouddirectory.GetLinkAttributesInput) (*clouddirectory.GetLinkAttributesOutput, error) {
	var output clouddirectory.GetLinkAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetLinkAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) GetLinkAttributesAsync(ctx workflow.Context, input *clouddirectory.GetLinkAttributesInput) *ClouddirectoryGetLinkAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetLinkAttributes", input)
	return &ClouddirectoryGetLinkAttributesFuture{Future: future}
}

func (a *CloudDirectoryStub) GetObjectAttributes(ctx workflow.Context, input *clouddirectory.GetObjectAttributesInput) (*clouddirectory.GetObjectAttributesOutput, error) {
	var output clouddirectory.GetObjectAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetObjectAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) GetObjectAttributesAsync(ctx workflow.Context, input *clouddirectory.GetObjectAttributesInput) *ClouddirectoryGetObjectAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetObjectAttributes", input)
	return &ClouddirectoryGetObjectAttributesFuture{Future: future}
}

func (a *CloudDirectoryStub) GetObjectInformation(ctx workflow.Context, input *clouddirectory.GetObjectInformationInput) (*clouddirectory.GetObjectInformationOutput, error) {
	var output clouddirectory.GetObjectInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetObjectInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) GetObjectInformationAsync(ctx workflow.Context, input *clouddirectory.GetObjectInformationInput) *ClouddirectoryGetObjectInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetObjectInformation", input)
	return &ClouddirectoryGetObjectInformationFuture{Future: future}
}

func (a *CloudDirectoryStub) GetSchemaAsJson(ctx workflow.Context, input *clouddirectory.GetSchemaAsJsonInput) (*clouddirectory.GetSchemaAsJsonOutput, error) {
	var output clouddirectory.GetSchemaAsJsonOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetSchemaAsJson", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) GetSchemaAsJsonAsync(ctx workflow.Context, input *clouddirectory.GetSchemaAsJsonInput) *ClouddirectoryGetSchemaAsJsonFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetSchemaAsJson", input)
	return &ClouddirectoryGetSchemaAsJsonFuture{Future: future}
}

func (a *CloudDirectoryStub) GetTypedLinkFacetInformation(ctx workflow.Context, input *clouddirectory.GetTypedLinkFacetInformationInput) (*clouddirectory.GetTypedLinkFacetInformationOutput, error) {
	var output clouddirectory.GetTypedLinkFacetInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetTypedLinkFacetInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) GetTypedLinkFacetInformationAsync(ctx workflow.Context, input *clouddirectory.GetTypedLinkFacetInformationInput) *ClouddirectoryGetTypedLinkFacetInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.GetTypedLinkFacetInformation", input)
	return &ClouddirectoryGetTypedLinkFacetInformationFuture{Future: future}
}

func (a *CloudDirectoryStub) ListAppliedSchemaArns(ctx workflow.Context, input *clouddirectory.ListAppliedSchemaArnsInput) (*clouddirectory.ListAppliedSchemaArnsOutput, error) {
	var output clouddirectory.ListAppliedSchemaArnsOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListAppliedSchemaArns", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListAppliedSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListAppliedSchemaArnsInput) *ClouddirectoryListAppliedSchemaArnsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListAppliedSchemaArns", input)
	return &ClouddirectoryListAppliedSchemaArnsFuture{Future: future}
}

func (a *CloudDirectoryStub) ListAttachedIndices(ctx workflow.Context, input *clouddirectory.ListAttachedIndicesInput) (*clouddirectory.ListAttachedIndicesOutput, error) {
	var output clouddirectory.ListAttachedIndicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListAttachedIndices", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListAttachedIndicesAsync(ctx workflow.Context, input *clouddirectory.ListAttachedIndicesInput) *ClouddirectoryListAttachedIndicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListAttachedIndices", input)
	return &ClouddirectoryListAttachedIndicesFuture{Future: future}
}

func (a *CloudDirectoryStub) ListDevelopmentSchemaArns(ctx workflow.Context, input *clouddirectory.ListDevelopmentSchemaArnsInput) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error) {
	var output clouddirectory.ListDevelopmentSchemaArnsOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListDevelopmentSchemaArns", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListDevelopmentSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListDevelopmentSchemaArnsInput) *ClouddirectoryListDevelopmentSchemaArnsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListDevelopmentSchemaArns", input)
	return &ClouddirectoryListDevelopmentSchemaArnsFuture{Future: future}
}

func (a *CloudDirectoryStub) ListDirectories(ctx workflow.Context, input *clouddirectory.ListDirectoriesInput) (*clouddirectory.ListDirectoriesOutput, error) {
	var output clouddirectory.ListDirectoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListDirectories", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListDirectoriesAsync(ctx workflow.Context, input *clouddirectory.ListDirectoriesInput) *ClouddirectoryListDirectoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListDirectories", input)
	return &ClouddirectoryListDirectoriesFuture{Future: future}
}

func (a *CloudDirectoryStub) ListFacetAttributes(ctx workflow.Context, input *clouddirectory.ListFacetAttributesInput) (*clouddirectory.ListFacetAttributesOutput, error) {
	var output clouddirectory.ListFacetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListFacetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListFacetAttributesAsync(ctx workflow.Context, input *clouddirectory.ListFacetAttributesInput) *ClouddirectoryListFacetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListFacetAttributes", input)
	return &ClouddirectoryListFacetAttributesFuture{Future: future}
}

func (a *CloudDirectoryStub) ListFacetNames(ctx workflow.Context, input *clouddirectory.ListFacetNamesInput) (*clouddirectory.ListFacetNamesOutput, error) {
	var output clouddirectory.ListFacetNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListFacetNames", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListFacetNamesAsync(ctx workflow.Context, input *clouddirectory.ListFacetNamesInput) *ClouddirectoryListFacetNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListFacetNames", input)
	return &ClouddirectoryListFacetNamesFuture{Future: future}
}

func (a *CloudDirectoryStub) ListIncomingTypedLinks(ctx workflow.Context, input *clouddirectory.ListIncomingTypedLinksInput) (*clouddirectory.ListIncomingTypedLinksOutput, error) {
	var output clouddirectory.ListIncomingTypedLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListIncomingTypedLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListIncomingTypedLinksAsync(ctx workflow.Context, input *clouddirectory.ListIncomingTypedLinksInput) *ClouddirectoryListIncomingTypedLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListIncomingTypedLinks", input)
	return &ClouddirectoryListIncomingTypedLinksFuture{Future: future}
}

func (a *CloudDirectoryStub) ListIndex(ctx workflow.Context, input *clouddirectory.ListIndexInput) (*clouddirectory.ListIndexOutput, error) {
	var output clouddirectory.ListIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListIndexAsync(ctx workflow.Context, input *clouddirectory.ListIndexInput) *ClouddirectoryListIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListIndex", input)
	return &ClouddirectoryListIndexFuture{Future: future}
}

func (a *CloudDirectoryStub) ListManagedSchemaArns(ctx workflow.Context, input *clouddirectory.ListManagedSchemaArnsInput) (*clouddirectory.ListManagedSchemaArnsOutput, error) {
	var output clouddirectory.ListManagedSchemaArnsOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListManagedSchemaArns", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListManagedSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListManagedSchemaArnsInput) *ClouddirectoryListManagedSchemaArnsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListManagedSchemaArns", input)
	return &ClouddirectoryListManagedSchemaArnsFuture{Future: future}
}

func (a *CloudDirectoryStub) ListObjectAttributes(ctx workflow.Context, input *clouddirectory.ListObjectAttributesInput) (*clouddirectory.ListObjectAttributesOutput, error) {
	var output clouddirectory.ListObjectAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListObjectAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListObjectAttributesAsync(ctx workflow.Context, input *clouddirectory.ListObjectAttributesInput) *ClouddirectoryListObjectAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListObjectAttributes", input)
	return &ClouddirectoryListObjectAttributesFuture{Future: future}
}

func (a *CloudDirectoryStub) ListObjectChildren(ctx workflow.Context, input *clouddirectory.ListObjectChildrenInput) (*clouddirectory.ListObjectChildrenOutput, error) {
	var output clouddirectory.ListObjectChildrenOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListObjectChildren", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListObjectChildrenAsync(ctx workflow.Context, input *clouddirectory.ListObjectChildrenInput) *ClouddirectoryListObjectChildrenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListObjectChildren", input)
	return &ClouddirectoryListObjectChildrenFuture{Future: future}
}

func (a *CloudDirectoryStub) ListObjectParentPaths(ctx workflow.Context, input *clouddirectory.ListObjectParentPathsInput) (*clouddirectory.ListObjectParentPathsOutput, error) {
	var output clouddirectory.ListObjectParentPathsOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListObjectParentPaths", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListObjectParentPathsAsync(ctx workflow.Context, input *clouddirectory.ListObjectParentPathsInput) *ClouddirectoryListObjectParentPathsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListObjectParentPaths", input)
	return &ClouddirectoryListObjectParentPathsFuture{Future: future}
}

func (a *CloudDirectoryStub) ListObjectParents(ctx workflow.Context, input *clouddirectory.ListObjectParentsInput) (*clouddirectory.ListObjectParentsOutput, error) {
	var output clouddirectory.ListObjectParentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListObjectParents", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListObjectParentsAsync(ctx workflow.Context, input *clouddirectory.ListObjectParentsInput) *ClouddirectoryListObjectParentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListObjectParents", input)
	return &ClouddirectoryListObjectParentsFuture{Future: future}
}

func (a *CloudDirectoryStub) ListObjectPolicies(ctx workflow.Context, input *clouddirectory.ListObjectPoliciesInput) (*clouddirectory.ListObjectPoliciesOutput, error) {
	var output clouddirectory.ListObjectPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListObjectPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListObjectPoliciesAsync(ctx workflow.Context, input *clouddirectory.ListObjectPoliciesInput) *ClouddirectoryListObjectPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListObjectPolicies", input)
	return &ClouddirectoryListObjectPoliciesFuture{Future: future}
}

func (a *CloudDirectoryStub) ListOutgoingTypedLinks(ctx workflow.Context, input *clouddirectory.ListOutgoingTypedLinksInput) (*clouddirectory.ListOutgoingTypedLinksOutput, error) {
	var output clouddirectory.ListOutgoingTypedLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListOutgoingTypedLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListOutgoingTypedLinksAsync(ctx workflow.Context, input *clouddirectory.ListOutgoingTypedLinksInput) *ClouddirectoryListOutgoingTypedLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListOutgoingTypedLinks", input)
	return &ClouddirectoryListOutgoingTypedLinksFuture{Future: future}
}

func (a *CloudDirectoryStub) ListPolicyAttachments(ctx workflow.Context, input *clouddirectory.ListPolicyAttachmentsInput) (*clouddirectory.ListPolicyAttachmentsOutput, error) {
	var output clouddirectory.ListPolicyAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListPolicyAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListPolicyAttachmentsAsync(ctx workflow.Context, input *clouddirectory.ListPolicyAttachmentsInput) *ClouddirectoryListPolicyAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListPolicyAttachments", input)
	return &ClouddirectoryListPolicyAttachmentsFuture{Future: future}
}

func (a *CloudDirectoryStub) ListPublishedSchemaArns(ctx workflow.Context, input *clouddirectory.ListPublishedSchemaArnsInput) (*clouddirectory.ListPublishedSchemaArnsOutput, error) {
	var output clouddirectory.ListPublishedSchemaArnsOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListPublishedSchemaArns", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListPublishedSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListPublishedSchemaArnsInput) *ClouddirectoryListPublishedSchemaArnsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListPublishedSchemaArns", input)
	return &ClouddirectoryListPublishedSchemaArnsFuture{Future: future}
}

func (a *CloudDirectoryStub) ListTagsForResource(ctx workflow.Context, input *clouddirectory.ListTagsForResourceInput) (*clouddirectory.ListTagsForResourceOutput, error) {
	var output clouddirectory.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListTagsForResourceAsync(ctx workflow.Context, input *clouddirectory.ListTagsForResourceInput) *ClouddirectoryListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListTagsForResource", input)
	return &ClouddirectoryListTagsForResourceFuture{Future: future}
}

func (a *CloudDirectoryStub) ListTypedLinkFacetAttributes(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetAttributesInput) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error) {
	var output clouddirectory.ListTypedLinkFacetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListTypedLinkFacetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListTypedLinkFacetAttributesAsync(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetAttributesInput) *ClouddirectoryListTypedLinkFacetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListTypedLinkFacetAttributes", input)
	return &ClouddirectoryListTypedLinkFacetAttributesFuture{Future: future}
}

func (a *CloudDirectoryStub) ListTypedLinkFacetNames(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetNamesInput) (*clouddirectory.ListTypedLinkFacetNamesOutput, error) {
	var output clouddirectory.ListTypedLinkFacetNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListTypedLinkFacetNames", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) ListTypedLinkFacetNamesAsync(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetNamesInput) *ClouddirectoryListTypedLinkFacetNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.ListTypedLinkFacetNames", input)
	return &ClouddirectoryListTypedLinkFacetNamesFuture{Future: future}
}

func (a *CloudDirectoryStub) LookupPolicy(ctx workflow.Context, input *clouddirectory.LookupPolicyInput) (*clouddirectory.LookupPolicyOutput, error) {
	var output clouddirectory.LookupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.LookupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) LookupPolicyAsync(ctx workflow.Context, input *clouddirectory.LookupPolicyInput) *ClouddirectoryLookupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.LookupPolicy", input)
	return &ClouddirectoryLookupPolicyFuture{Future: future}
}

func (a *CloudDirectoryStub) PublishSchema(ctx workflow.Context, input *clouddirectory.PublishSchemaInput) (*clouddirectory.PublishSchemaOutput, error) {
	var output clouddirectory.PublishSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.PublishSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) PublishSchemaAsync(ctx workflow.Context, input *clouddirectory.PublishSchemaInput) *ClouddirectoryPublishSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.PublishSchema", input)
	return &ClouddirectoryPublishSchemaFuture{Future: future}
}

func (a *CloudDirectoryStub) PutSchemaFromJson(ctx workflow.Context, input *clouddirectory.PutSchemaFromJsonInput) (*clouddirectory.PutSchemaFromJsonOutput, error) {
	var output clouddirectory.PutSchemaFromJsonOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.PutSchemaFromJson", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) PutSchemaFromJsonAsync(ctx workflow.Context, input *clouddirectory.PutSchemaFromJsonInput) *ClouddirectoryPutSchemaFromJsonFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.PutSchemaFromJson", input)
	return &ClouddirectoryPutSchemaFromJsonFuture{Future: future}
}

func (a *CloudDirectoryStub) RemoveFacetFromObject(ctx workflow.Context, input *clouddirectory.RemoveFacetFromObjectInput) (*clouddirectory.RemoveFacetFromObjectOutput, error) {
	var output clouddirectory.RemoveFacetFromObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.RemoveFacetFromObject", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) RemoveFacetFromObjectAsync(ctx workflow.Context, input *clouddirectory.RemoveFacetFromObjectInput) *ClouddirectoryRemoveFacetFromObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.RemoveFacetFromObject", input)
	return &ClouddirectoryRemoveFacetFromObjectFuture{Future: future}
}

func (a *CloudDirectoryStub) TagResource(ctx workflow.Context, input *clouddirectory.TagResourceInput) (*clouddirectory.TagResourceOutput, error) {
	var output clouddirectory.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) TagResourceAsync(ctx workflow.Context, input *clouddirectory.TagResourceInput) *ClouddirectoryTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.TagResource", input)
	return &ClouddirectoryTagResourceFuture{Future: future}
}

func (a *CloudDirectoryStub) UntagResource(ctx workflow.Context, input *clouddirectory.UntagResourceInput) (*clouddirectory.UntagResourceOutput, error) {
	var output clouddirectory.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) UntagResourceAsync(ctx workflow.Context, input *clouddirectory.UntagResourceInput) *ClouddirectoryUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UntagResource", input)
	return &ClouddirectoryUntagResourceFuture{Future: future}
}

func (a *CloudDirectoryStub) UpdateFacet(ctx workflow.Context, input *clouddirectory.UpdateFacetInput) (*clouddirectory.UpdateFacetOutput, error) {
	var output clouddirectory.UpdateFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpdateFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) UpdateFacetAsync(ctx workflow.Context, input *clouddirectory.UpdateFacetInput) *ClouddirectoryUpdateFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpdateFacet", input)
	return &ClouddirectoryUpdateFacetFuture{Future: future}
}

func (a *CloudDirectoryStub) UpdateLinkAttributes(ctx workflow.Context, input *clouddirectory.UpdateLinkAttributesInput) (*clouddirectory.UpdateLinkAttributesOutput, error) {
	var output clouddirectory.UpdateLinkAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpdateLinkAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) UpdateLinkAttributesAsync(ctx workflow.Context, input *clouddirectory.UpdateLinkAttributesInput) *ClouddirectoryUpdateLinkAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpdateLinkAttributes", input)
	return &ClouddirectoryUpdateLinkAttributesFuture{Future: future}
}

func (a *CloudDirectoryStub) UpdateObjectAttributes(ctx workflow.Context, input *clouddirectory.UpdateObjectAttributesInput) (*clouddirectory.UpdateObjectAttributesOutput, error) {
	var output clouddirectory.UpdateObjectAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpdateObjectAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) UpdateObjectAttributesAsync(ctx workflow.Context, input *clouddirectory.UpdateObjectAttributesInput) *ClouddirectoryUpdateObjectAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpdateObjectAttributes", input)
	return &ClouddirectoryUpdateObjectAttributesFuture{Future: future}
}

func (a *CloudDirectoryStub) UpdateSchema(ctx workflow.Context, input *clouddirectory.UpdateSchemaInput) (*clouddirectory.UpdateSchemaOutput, error) {
	var output clouddirectory.UpdateSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpdateSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) UpdateSchemaAsync(ctx workflow.Context, input *clouddirectory.UpdateSchemaInput) *ClouddirectoryUpdateSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpdateSchema", input)
	return &ClouddirectoryUpdateSchemaFuture{Future: future}
}

func (a *CloudDirectoryStub) UpdateTypedLinkFacet(ctx workflow.Context, input *clouddirectory.UpdateTypedLinkFacetInput) (*clouddirectory.UpdateTypedLinkFacetOutput, error) {
	var output clouddirectory.UpdateTypedLinkFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpdateTypedLinkFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) UpdateTypedLinkFacetAsync(ctx workflow.Context, input *clouddirectory.UpdateTypedLinkFacetInput) *ClouddirectoryUpdateTypedLinkFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpdateTypedLinkFacet", input)
	return &ClouddirectoryUpdateTypedLinkFacetFuture{Future: future}
}

func (a *CloudDirectoryStub) UpgradeAppliedSchema(ctx workflow.Context, input *clouddirectory.UpgradeAppliedSchemaInput) (*clouddirectory.UpgradeAppliedSchemaOutput, error) {
	var output clouddirectory.UpgradeAppliedSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpgradeAppliedSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) UpgradeAppliedSchemaAsync(ctx workflow.Context, input *clouddirectory.UpgradeAppliedSchemaInput) *ClouddirectoryUpgradeAppliedSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpgradeAppliedSchema", input)
	return &ClouddirectoryUpgradeAppliedSchemaFuture{Future: future}
}

func (a *CloudDirectoryStub) UpgradePublishedSchema(ctx workflow.Context, input *clouddirectory.UpgradePublishedSchemaInput) (*clouddirectory.UpgradePublishedSchemaOutput, error) {
	var output clouddirectory.UpgradePublishedSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpgradePublishedSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudDirectoryStub) UpgradePublishedSchemaAsync(ctx workflow.Context, input *clouddirectory.UpgradePublishedSchemaInput) *ClouddirectoryUpgradePublishedSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.clouddirectory.UpgradePublishedSchema", input)
	return &ClouddirectoryUpgradePublishedSchemaFuture{Future: future}
}
