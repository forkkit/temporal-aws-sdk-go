// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/elasticsearchservice"
	"go.temporal.io/sdk/workflow"
)

type ElasticsearchServiceClient interface {
	AcceptInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.AcceptInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput, error)
	AcceptInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.AcceptInboundCrossClusterSearchConnectionInput) *ElasticsearchserviceAcceptInboundCrossClusterSearchConnectionFuture

	AddTags(ctx workflow.Context, input *elasticsearchservice.AddTagsInput) (*elasticsearchservice.AddTagsOutput, error)
	AddTagsAsync(ctx workflow.Context, input *elasticsearchservice.AddTagsInput) *ElasticsearchserviceAddTagsFuture

	AssociatePackage(ctx workflow.Context, input *elasticsearchservice.AssociatePackageInput) (*elasticsearchservice.AssociatePackageOutput, error)
	AssociatePackageAsync(ctx workflow.Context, input *elasticsearchservice.AssociatePackageInput) *ElasticsearchserviceAssociatePackageFuture

	CancelElasticsearchServiceSoftwareUpdate(ctx workflow.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error)
	CancelElasticsearchServiceSoftwareUpdateAsync(ctx workflow.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) *ElasticsearchserviceCancelElasticsearchServiceSoftwareUpdateFuture

	CreateElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.CreateElasticsearchDomainInput) (*elasticsearchservice.CreateElasticsearchDomainOutput, error)
	CreateElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.CreateElasticsearchDomainInput) *ElasticsearchserviceCreateElasticsearchDomainFuture

	CreateOutboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.CreateOutboundCrossClusterSearchConnectionInput) (*elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput, error)
	CreateOutboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.CreateOutboundCrossClusterSearchConnectionInput) *ElasticsearchserviceCreateOutboundCrossClusterSearchConnectionFuture

	CreatePackage(ctx workflow.Context, input *elasticsearchservice.CreatePackageInput) (*elasticsearchservice.CreatePackageOutput, error)
	CreatePackageAsync(ctx workflow.Context, input *elasticsearchservice.CreatePackageInput) *ElasticsearchserviceCreatePackageFuture

	DeleteElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error)
	DeleteElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput) *ElasticsearchserviceDeleteElasticsearchDomainFuture

	DeleteElasticsearchServiceRole(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error)
	DeleteElasticsearchServiceRoleAsync(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput) *ElasticsearchserviceDeleteElasticsearchServiceRoleFuture

	DeleteInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.DeleteInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput, error)
	DeleteInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.DeleteInboundCrossClusterSearchConnectionInput) *ElasticsearchserviceDeleteInboundCrossClusterSearchConnectionFuture

	DeleteOutboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionInput) (*elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput, error)
	DeleteOutboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionInput) *ElasticsearchserviceDeleteOutboundCrossClusterSearchConnectionFuture

	DeletePackage(ctx workflow.Context, input *elasticsearchservice.DeletePackageInput) (*elasticsearchservice.DeletePackageOutput, error)
	DeletePackageAsync(ctx workflow.Context, input *elasticsearchservice.DeletePackageInput) *ElasticsearchserviceDeletePackageFuture

	DescribeElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error)
	DescribeElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput) *ElasticsearchserviceDescribeElasticsearchDomainFuture

	DescribeElasticsearchDomainConfig(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error)
	DescribeElasticsearchDomainConfigAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput) *ElasticsearchserviceDescribeElasticsearchDomainConfigFuture

	DescribeElasticsearchDomains(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error)
	DescribeElasticsearchDomainsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput) *ElasticsearchserviceDescribeElasticsearchDomainsFuture

	DescribeElasticsearchInstanceTypeLimits(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error)
	DescribeElasticsearchInstanceTypeLimitsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) *ElasticsearchserviceDescribeElasticsearchInstanceTypeLimitsFuture

	DescribeInboundCrossClusterSearchConnections(ctx workflow.Context, input *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput) (*elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput, error)
	DescribeInboundCrossClusterSearchConnectionsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput) *ElasticsearchserviceDescribeInboundCrossClusterSearchConnectionsFuture

	DescribeOutboundCrossClusterSearchConnections(ctx workflow.Context, input *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput) (*elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput, error)
	DescribeOutboundCrossClusterSearchConnectionsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput) *ElasticsearchserviceDescribeOutboundCrossClusterSearchConnectionsFuture

	DescribePackages(ctx workflow.Context, input *elasticsearchservice.DescribePackagesInput) (*elasticsearchservice.DescribePackagesOutput, error)
	DescribePackagesAsync(ctx workflow.Context, input *elasticsearchservice.DescribePackagesInput) *ElasticsearchserviceDescribePackagesFuture

	DescribeReservedElasticsearchInstanceOfferings(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error)
	DescribeReservedElasticsearchInstanceOfferingsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) *ElasticsearchserviceDescribeReservedElasticsearchInstanceOfferingsFuture

	DescribeReservedElasticsearchInstances(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error)
	DescribeReservedElasticsearchInstancesAsync(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) *ElasticsearchserviceDescribeReservedElasticsearchInstancesFuture

	DissociatePackage(ctx workflow.Context, input *elasticsearchservice.DissociatePackageInput) (*elasticsearchservice.DissociatePackageOutput, error)
	DissociatePackageAsync(ctx workflow.Context, input *elasticsearchservice.DissociatePackageInput) *ElasticsearchserviceDissociatePackageFuture

	GetCompatibleElasticsearchVersions(ctx workflow.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error)
	GetCompatibleElasticsearchVersionsAsync(ctx workflow.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) *ElasticsearchserviceGetCompatibleElasticsearchVersionsFuture

	GetUpgradeHistory(ctx workflow.Context, input *elasticsearchservice.GetUpgradeHistoryInput) (*elasticsearchservice.GetUpgradeHistoryOutput, error)
	GetUpgradeHistoryAsync(ctx workflow.Context, input *elasticsearchservice.GetUpgradeHistoryInput) *ElasticsearchserviceGetUpgradeHistoryFuture

	GetUpgradeStatus(ctx workflow.Context, input *elasticsearchservice.GetUpgradeStatusInput) (*elasticsearchservice.GetUpgradeStatusOutput, error)
	GetUpgradeStatusAsync(ctx workflow.Context, input *elasticsearchservice.GetUpgradeStatusInput) *ElasticsearchserviceGetUpgradeStatusFuture

	ListDomainNames(ctx workflow.Context, input *elasticsearchservice.ListDomainNamesInput) (*elasticsearchservice.ListDomainNamesOutput, error)
	ListDomainNamesAsync(ctx workflow.Context, input *elasticsearchservice.ListDomainNamesInput) *ElasticsearchserviceListDomainNamesFuture

	ListDomainsForPackage(ctx workflow.Context, input *elasticsearchservice.ListDomainsForPackageInput) (*elasticsearchservice.ListDomainsForPackageOutput, error)
	ListDomainsForPackageAsync(ctx workflow.Context, input *elasticsearchservice.ListDomainsForPackageInput) *ElasticsearchserviceListDomainsForPackageFuture

	ListElasticsearchInstanceTypes(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error)
	ListElasticsearchInstanceTypesAsync(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput) *ElasticsearchserviceListElasticsearchInstanceTypesFuture

	ListElasticsearchVersions(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchVersionsInput) (*elasticsearchservice.ListElasticsearchVersionsOutput, error)
	ListElasticsearchVersionsAsync(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchVersionsInput) *ElasticsearchserviceListElasticsearchVersionsFuture

	ListPackagesForDomain(ctx workflow.Context, input *elasticsearchservice.ListPackagesForDomainInput) (*elasticsearchservice.ListPackagesForDomainOutput, error)
	ListPackagesForDomainAsync(ctx workflow.Context, input *elasticsearchservice.ListPackagesForDomainInput) *ElasticsearchserviceListPackagesForDomainFuture

	ListTags(ctx workflow.Context, input *elasticsearchservice.ListTagsInput) (*elasticsearchservice.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *elasticsearchservice.ListTagsInput) *ElasticsearchserviceListTagsFuture

	PurchaseReservedElasticsearchInstanceOffering(ctx workflow.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error)
	PurchaseReservedElasticsearchInstanceOfferingAsync(ctx workflow.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) *ElasticsearchservicePurchaseReservedElasticsearchInstanceOfferingFuture

	RejectInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.RejectInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput, error)
	RejectInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.RejectInboundCrossClusterSearchConnectionInput) *ElasticsearchserviceRejectInboundCrossClusterSearchConnectionFuture

	RemoveTags(ctx workflow.Context, input *elasticsearchservice.RemoveTagsInput) (*elasticsearchservice.RemoveTagsOutput, error)
	RemoveTagsAsync(ctx workflow.Context, input *elasticsearchservice.RemoveTagsInput) *ElasticsearchserviceRemoveTagsFuture

	StartElasticsearchServiceSoftwareUpdate(ctx workflow.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error)
	StartElasticsearchServiceSoftwareUpdateAsync(ctx workflow.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) *ElasticsearchserviceStartElasticsearchServiceSoftwareUpdateFuture

	UpdateElasticsearchDomainConfig(ctx workflow.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error)
	UpdateElasticsearchDomainConfigAsync(ctx workflow.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput) *ElasticsearchserviceUpdateElasticsearchDomainConfigFuture

	UpgradeElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error)
	UpgradeElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput) *ElasticsearchserviceUpgradeElasticsearchDomainFuture
}

type ElasticsearchServiceStub struct{}

func NewElasticsearchServiceStub() ElasticsearchServiceClient {
	return &ElasticsearchServiceStub{}
}

type ElasticsearchserviceAcceptInboundCrossClusterSearchConnectionFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceAcceptInboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceAddTagsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceAddTagsFuture) Get(ctx workflow.Context) (*elasticsearchservice.AddTagsOutput, error) {
	var output elasticsearchservice.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceAssociatePackageFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceAssociatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.AssociatePackageOutput, error) {
	var output elasticsearchservice.AssociatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceCancelElasticsearchServiceSoftwareUpdateFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceCancelElasticsearchServiceSoftwareUpdateFuture) Get(ctx workflow.Context) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceCreateElasticsearchDomainFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceCreateElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.CreateElasticsearchDomainOutput, error) {
	var output elasticsearchservice.CreateElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceCreateOutboundCrossClusterSearchConnectionFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceCreateOutboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceCreatePackageFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceCreatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.CreatePackageOutput, error) {
	var output elasticsearchservice.CreatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDeleteElasticsearchDomainFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDeleteElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDeleteElasticsearchServiceRoleFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDeleteElasticsearchServiceRoleFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchServiceRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDeleteInboundCrossClusterSearchConnectionFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDeleteInboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDeleteOutboundCrossClusterSearchConnectionFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDeleteOutboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDeletePackageFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDeletePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeletePackageOutput, error) {
	var output elasticsearchservice.DeletePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDescribeElasticsearchDomainFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDescribeElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDescribeElasticsearchDomainConfigFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDescribeElasticsearchDomainConfigFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDescribeElasticsearchDomainsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDescribeElasticsearchDomainsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDescribeElasticsearchInstanceTypeLimitsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDescribeElasticsearchInstanceTypeLimitsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDescribeInboundCrossClusterSearchConnectionsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDescribeInboundCrossClusterSearchConnectionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDescribeOutboundCrossClusterSearchConnectionsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDescribeOutboundCrossClusterSearchConnectionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDescribePackagesFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDescribePackagesFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribePackagesOutput, error) {
	var output elasticsearchservice.DescribePackagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDescribeReservedElasticsearchInstanceOfferingsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDescribeReservedElasticsearchInstanceOfferingsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDescribeReservedElasticsearchInstancesFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDescribeReservedElasticsearchInstancesFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceDissociatePackageFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceDissociatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.DissociatePackageOutput, error) {
	var output elasticsearchservice.DissociatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceGetCompatibleElasticsearchVersionsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceGetCompatibleElasticsearchVersionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.GetCompatibleElasticsearchVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceGetUpgradeHistoryFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceGetUpgradeHistoryFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetUpgradeHistoryOutput, error) {
	var output elasticsearchservice.GetUpgradeHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceGetUpgradeStatusFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceGetUpgradeStatusFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetUpgradeStatusOutput, error) {
	var output elasticsearchservice.GetUpgradeStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceListDomainNamesFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceListDomainNamesFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListDomainNamesOutput, error) {
	var output elasticsearchservice.ListDomainNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceListDomainsForPackageFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceListDomainsForPackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListDomainsForPackageOutput, error) {
	var output elasticsearchservice.ListDomainsForPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceListElasticsearchInstanceTypesFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceListElasticsearchInstanceTypesFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error) {
	var output elasticsearchservice.ListElasticsearchInstanceTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceListElasticsearchVersionsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceListElasticsearchVersionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.ListElasticsearchVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceListPackagesForDomainFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceListPackagesForDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListPackagesForDomainOutput, error) {
	var output elasticsearchservice.ListPackagesForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceListTagsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceListTagsFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListTagsOutput, error) {
	var output elasticsearchservice.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchservicePurchaseReservedElasticsearchInstanceOfferingFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchservicePurchaseReservedElasticsearchInstanceOfferingFuture) Get(ctx workflow.Context) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error) {
	var output elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceRejectInboundCrossClusterSearchConnectionFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceRejectInboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceRemoveTagsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceRemoveTagsFuture) Get(ctx workflow.Context) (*elasticsearchservice.RemoveTagsOutput, error) {
	var output elasticsearchservice.RemoveTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceStartElasticsearchServiceSoftwareUpdateFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceStartElasticsearchServiceSoftwareUpdateFuture) Get(ctx workflow.Context) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceUpdateElasticsearchDomainConfigFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceUpdateElasticsearchDomainConfigFuture) Get(ctx workflow.Context) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.UpdateElasticsearchDomainConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchserviceUpgradeElasticsearchDomainFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchserviceUpgradeElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.UpgradeElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) AcceptInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.AcceptInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.AcceptInboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) AcceptInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.AcceptInboundCrossClusterSearchConnectionInput) *ElasticsearchserviceAcceptInboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.AcceptInboundCrossClusterSearchConnection", input)
	return &ElasticsearchserviceAcceptInboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *ElasticsearchServiceStub) AddTags(ctx workflow.Context, input *elasticsearchservice.AddTagsInput) (*elasticsearchservice.AddTagsOutput, error) {
	var output elasticsearchservice.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) AddTagsAsync(ctx workflow.Context, input *elasticsearchservice.AddTagsInput) *ElasticsearchserviceAddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.AddTags", input)
	return &ElasticsearchserviceAddTagsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) AssociatePackage(ctx workflow.Context, input *elasticsearchservice.AssociatePackageInput) (*elasticsearchservice.AssociatePackageOutput, error) {
	var output elasticsearchservice.AssociatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.AssociatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) AssociatePackageAsync(ctx workflow.Context, input *elasticsearchservice.AssociatePackageInput) *ElasticsearchserviceAssociatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.AssociatePackage", input)
	return &ElasticsearchserviceAssociatePackageFuture{Future: future}
}

func (a *ElasticsearchServiceStub) CancelElasticsearchServiceSoftwareUpdate(ctx workflow.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CancelElasticsearchServiceSoftwareUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) CancelElasticsearchServiceSoftwareUpdateAsync(ctx workflow.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) *ElasticsearchserviceCancelElasticsearchServiceSoftwareUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CancelElasticsearchServiceSoftwareUpdate", input)
	return &ElasticsearchserviceCancelElasticsearchServiceSoftwareUpdateFuture{Future: future}
}

func (a *ElasticsearchServiceStub) CreateElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.CreateElasticsearchDomainInput) (*elasticsearchservice.CreateElasticsearchDomainOutput, error) {
	var output elasticsearchservice.CreateElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CreateElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) CreateElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.CreateElasticsearchDomainInput) *ElasticsearchserviceCreateElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CreateElasticsearchDomain", input)
	return &ElasticsearchserviceCreateElasticsearchDomainFuture{Future: future}
}

func (a *ElasticsearchServiceStub) CreateOutboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.CreateOutboundCrossClusterSearchConnectionInput) (*elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CreateOutboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) CreateOutboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.CreateOutboundCrossClusterSearchConnectionInput) *ElasticsearchserviceCreateOutboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CreateOutboundCrossClusterSearchConnection", input)
	return &ElasticsearchserviceCreateOutboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *ElasticsearchServiceStub) CreatePackage(ctx workflow.Context, input *elasticsearchservice.CreatePackageInput) (*elasticsearchservice.CreatePackageOutput, error) {
	var output elasticsearchservice.CreatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CreatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) CreatePackageAsync(ctx workflow.Context, input *elasticsearchservice.CreatePackageInput) *ElasticsearchserviceCreatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CreatePackage", input)
	return &ElasticsearchserviceCreatePackageFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DeleteElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DeleteElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput) *ElasticsearchserviceDeleteElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteElasticsearchDomain", input)
	return &ElasticsearchserviceDeleteElasticsearchDomainFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DeleteElasticsearchServiceRole(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchServiceRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteElasticsearchServiceRole", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DeleteElasticsearchServiceRoleAsync(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput) *ElasticsearchserviceDeleteElasticsearchServiceRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteElasticsearchServiceRole", input)
	return &ElasticsearchserviceDeleteElasticsearchServiceRoleFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DeleteInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.DeleteInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteInboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DeleteInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.DeleteInboundCrossClusterSearchConnectionInput) *ElasticsearchserviceDeleteInboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteInboundCrossClusterSearchConnection", input)
	return &ElasticsearchserviceDeleteInboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DeleteOutboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionInput) (*elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteOutboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DeleteOutboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionInput) *ElasticsearchserviceDeleteOutboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteOutboundCrossClusterSearchConnection", input)
	return &ElasticsearchserviceDeleteOutboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DeletePackage(ctx workflow.Context, input *elasticsearchservice.DeletePackageInput) (*elasticsearchservice.DeletePackageOutput, error) {
	var output elasticsearchservice.DeletePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeletePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DeletePackageAsync(ctx workflow.Context, input *elasticsearchservice.DeletePackageInput) *ElasticsearchserviceDeletePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeletePackage", input)
	return &ElasticsearchserviceDeletePackageFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput) *ElasticsearchserviceDescribeElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchDomain", input)
	return &ElasticsearchserviceDescribeElasticsearchDomainFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchDomainConfig(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchDomainConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchDomainConfigAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput) *ElasticsearchserviceDescribeElasticsearchDomainConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchDomainConfig", input)
	return &ElasticsearchserviceDescribeElasticsearchDomainConfigFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchDomains(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchDomainsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput) *ElasticsearchserviceDescribeElasticsearchDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchDomains", input)
	return &ElasticsearchserviceDescribeElasticsearchDomainsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchInstanceTypeLimits(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchInstanceTypeLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchInstanceTypeLimitsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) *ElasticsearchserviceDescribeElasticsearchInstanceTypeLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchInstanceTypeLimits", input)
	return &ElasticsearchserviceDescribeElasticsearchInstanceTypeLimitsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeInboundCrossClusterSearchConnections(ctx workflow.Context, input *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput) (*elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeInboundCrossClusterSearchConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeInboundCrossClusterSearchConnectionsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput) *ElasticsearchserviceDescribeInboundCrossClusterSearchConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeInboundCrossClusterSearchConnections", input)
	return &ElasticsearchserviceDescribeInboundCrossClusterSearchConnectionsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeOutboundCrossClusterSearchConnections(ctx workflow.Context, input *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput) (*elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeOutboundCrossClusterSearchConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeOutboundCrossClusterSearchConnectionsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput) *ElasticsearchserviceDescribeOutboundCrossClusterSearchConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeOutboundCrossClusterSearchConnections", input)
	return &ElasticsearchserviceDescribeOutboundCrossClusterSearchConnectionsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribePackages(ctx workflow.Context, input *elasticsearchservice.DescribePackagesInput) (*elasticsearchservice.DescribePackagesOutput, error) {
	var output elasticsearchservice.DescribePackagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribePackages", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribePackagesAsync(ctx workflow.Context, input *elasticsearchservice.DescribePackagesInput) *ElasticsearchserviceDescribePackagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribePackages", input)
	return &ElasticsearchserviceDescribePackagesFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeReservedElasticsearchInstanceOfferings(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeReservedElasticsearchInstanceOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeReservedElasticsearchInstanceOfferingsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) *ElasticsearchserviceDescribeReservedElasticsearchInstanceOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeReservedElasticsearchInstanceOfferings", input)
	return &ElasticsearchserviceDescribeReservedElasticsearchInstanceOfferingsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeReservedElasticsearchInstances(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeReservedElasticsearchInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeReservedElasticsearchInstancesAsync(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) *ElasticsearchserviceDescribeReservedElasticsearchInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeReservedElasticsearchInstances", input)
	return &ElasticsearchserviceDescribeReservedElasticsearchInstancesFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DissociatePackage(ctx workflow.Context, input *elasticsearchservice.DissociatePackageInput) (*elasticsearchservice.DissociatePackageOutput, error) {
	var output elasticsearchservice.DissociatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DissociatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DissociatePackageAsync(ctx workflow.Context, input *elasticsearchservice.DissociatePackageInput) *ElasticsearchserviceDissociatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DissociatePackage", input)
	return &ElasticsearchserviceDissociatePackageFuture{Future: future}
}

func (a *ElasticsearchServiceStub) GetCompatibleElasticsearchVersions(ctx workflow.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.GetCompatibleElasticsearchVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.GetCompatibleElasticsearchVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) GetCompatibleElasticsearchVersionsAsync(ctx workflow.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) *ElasticsearchserviceGetCompatibleElasticsearchVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.GetCompatibleElasticsearchVersions", input)
	return &ElasticsearchserviceGetCompatibleElasticsearchVersionsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) GetUpgradeHistory(ctx workflow.Context, input *elasticsearchservice.GetUpgradeHistoryInput) (*elasticsearchservice.GetUpgradeHistoryOutput, error) {
	var output elasticsearchservice.GetUpgradeHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.GetUpgradeHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) GetUpgradeHistoryAsync(ctx workflow.Context, input *elasticsearchservice.GetUpgradeHistoryInput) *ElasticsearchserviceGetUpgradeHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.GetUpgradeHistory", input)
	return &ElasticsearchserviceGetUpgradeHistoryFuture{Future: future}
}

func (a *ElasticsearchServiceStub) GetUpgradeStatus(ctx workflow.Context, input *elasticsearchservice.GetUpgradeStatusInput) (*elasticsearchservice.GetUpgradeStatusOutput, error) {
	var output elasticsearchservice.GetUpgradeStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.GetUpgradeStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) GetUpgradeStatusAsync(ctx workflow.Context, input *elasticsearchservice.GetUpgradeStatusInput) *ElasticsearchserviceGetUpgradeStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.GetUpgradeStatus", input)
	return &ElasticsearchserviceGetUpgradeStatusFuture{Future: future}
}

func (a *ElasticsearchServiceStub) ListDomainNames(ctx workflow.Context, input *elasticsearchservice.ListDomainNamesInput) (*elasticsearchservice.ListDomainNamesOutput, error) {
	var output elasticsearchservice.ListDomainNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListDomainNames", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) ListDomainNamesAsync(ctx workflow.Context, input *elasticsearchservice.ListDomainNamesInput) *ElasticsearchserviceListDomainNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListDomainNames", input)
	return &ElasticsearchserviceListDomainNamesFuture{Future: future}
}

func (a *ElasticsearchServiceStub) ListDomainsForPackage(ctx workflow.Context, input *elasticsearchservice.ListDomainsForPackageInput) (*elasticsearchservice.ListDomainsForPackageOutput, error) {
	var output elasticsearchservice.ListDomainsForPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListDomainsForPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) ListDomainsForPackageAsync(ctx workflow.Context, input *elasticsearchservice.ListDomainsForPackageInput) *ElasticsearchserviceListDomainsForPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListDomainsForPackage", input)
	return &ElasticsearchserviceListDomainsForPackageFuture{Future: future}
}

func (a *ElasticsearchServiceStub) ListElasticsearchInstanceTypes(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error) {
	var output elasticsearchservice.ListElasticsearchInstanceTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListElasticsearchInstanceTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) ListElasticsearchInstanceTypesAsync(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput) *ElasticsearchserviceListElasticsearchInstanceTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListElasticsearchInstanceTypes", input)
	return &ElasticsearchserviceListElasticsearchInstanceTypesFuture{Future: future}
}

func (a *ElasticsearchServiceStub) ListElasticsearchVersions(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchVersionsInput) (*elasticsearchservice.ListElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.ListElasticsearchVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListElasticsearchVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) ListElasticsearchVersionsAsync(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchVersionsInput) *ElasticsearchserviceListElasticsearchVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListElasticsearchVersions", input)
	return &ElasticsearchserviceListElasticsearchVersionsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) ListPackagesForDomain(ctx workflow.Context, input *elasticsearchservice.ListPackagesForDomainInput) (*elasticsearchservice.ListPackagesForDomainOutput, error) {
	var output elasticsearchservice.ListPackagesForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListPackagesForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) ListPackagesForDomainAsync(ctx workflow.Context, input *elasticsearchservice.ListPackagesForDomainInput) *ElasticsearchserviceListPackagesForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListPackagesForDomain", input)
	return &ElasticsearchserviceListPackagesForDomainFuture{Future: future}
}

func (a *ElasticsearchServiceStub) ListTags(ctx workflow.Context, input *elasticsearchservice.ListTagsInput) (*elasticsearchservice.ListTagsOutput, error) {
	var output elasticsearchservice.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) ListTagsAsync(ctx workflow.Context, input *elasticsearchservice.ListTagsInput) *ElasticsearchserviceListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListTags", input)
	return &ElasticsearchserviceListTagsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) PurchaseReservedElasticsearchInstanceOffering(ctx workflow.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error) {
	var output elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.PurchaseReservedElasticsearchInstanceOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) PurchaseReservedElasticsearchInstanceOfferingAsync(ctx workflow.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) *ElasticsearchservicePurchaseReservedElasticsearchInstanceOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.PurchaseReservedElasticsearchInstanceOffering", input)
	return &ElasticsearchservicePurchaseReservedElasticsearchInstanceOfferingFuture{Future: future}
}

func (a *ElasticsearchServiceStub) RejectInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.RejectInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.RejectInboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) RejectInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.RejectInboundCrossClusterSearchConnectionInput) *ElasticsearchserviceRejectInboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.RejectInboundCrossClusterSearchConnection", input)
	return &ElasticsearchserviceRejectInboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *ElasticsearchServiceStub) RemoveTags(ctx workflow.Context, input *elasticsearchservice.RemoveTagsInput) (*elasticsearchservice.RemoveTagsOutput, error) {
	var output elasticsearchservice.RemoveTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.RemoveTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) RemoveTagsAsync(ctx workflow.Context, input *elasticsearchservice.RemoveTagsInput) *ElasticsearchserviceRemoveTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.RemoveTags", input)
	return &ElasticsearchserviceRemoveTagsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) StartElasticsearchServiceSoftwareUpdate(ctx workflow.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.StartElasticsearchServiceSoftwareUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) StartElasticsearchServiceSoftwareUpdateAsync(ctx workflow.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) *ElasticsearchserviceStartElasticsearchServiceSoftwareUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.StartElasticsearchServiceSoftwareUpdate", input)
	return &ElasticsearchserviceStartElasticsearchServiceSoftwareUpdateFuture{Future: future}
}

func (a *ElasticsearchServiceStub) UpdateElasticsearchDomainConfig(ctx workflow.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.UpdateElasticsearchDomainConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.UpdateElasticsearchDomainConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) UpdateElasticsearchDomainConfigAsync(ctx workflow.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput) *ElasticsearchserviceUpdateElasticsearchDomainConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.UpdateElasticsearchDomainConfig", input)
	return &ElasticsearchserviceUpdateElasticsearchDomainConfigFuture{Future: future}
}

func (a *ElasticsearchServiceStub) UpgradeElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.UpgradeElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.UpgradeElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) UpgradeElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput) *ElasticsearchserviceUpgradeElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.UpgradeElasticsearchDomain", input)
	return &ElasticsearchserviceUpgradeElasticsearchDomainFuture{Future: future}
}
