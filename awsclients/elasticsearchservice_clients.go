// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/elasticsearchservice"
	"go.temporal.io/sdk/workflow"
)

type ElasticsearchServiceClient interface {
	AcceptInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.AcceptInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput, error)
	AcceptInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.AcceptInboundCrossClusterSearchConnectionInput) *ElasticsearchServiceAcceptInboundCrossClusterSearchConnectionFuture

	AddTags(ctx workflow.Context, input *elasticsearchservice.AddTagsInput) (*elasticsearchservice.AddTagsOutput, error)
	AddTagsAsync(ctx workflow.Context, input *elasticsearchservice.AddTagsInput) *ElasticsearchServiceAddTagsFuture

	AssociatePackage(ctx workflow.Context, input *elasticsearchservice.AssociatePackageInput) (*elasticsearchservice.AssociatePackageOutput, error)
	AssociatePackageAsync(ctx workflow.Context, input *elasticsearchservice.AssociatePackageInput) *ElasticsearchServiceAssociatePackageFuture

	CancelElasticsearchServiceSoftwareUpdate(ctx workflow.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error)
	CancelElasticsearchServiceSoftwareUpdateAsync(ctx workflow.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) *ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateFuture

	CreateElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.CreateElasticsearchDomainInput) (*elasticsearchservice.CreateElasticsearchDomainOutput, error)
	CreateElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.CreateElasticsearchDomainInput) *ElasticsearchServiceCreateElasticsearchDomainFuture

	CreateOutboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.CreateOutboundCrossClusterSearchConnectionInput) (*elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput, error)
	CreateOutboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.CreateOutboundCrossClusterSearchConnectionInput) *ElasticsearchServiceCreateOutboundCrossClusterSearchConnectionFuture

	CreatePackage(ctx workflow.Context, input *elasticsearchservice.CreatePackageInput) (*elasticsearchservice.CreatePackageOutput, error)
	CreatePackageAsync(ctx workflow.Context, input *elasticsearchservice.CreatePackageInput) *ElasticsearchServiceCreatePackageFuture

	DeleteElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error)
	DeleteElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput) *ElasticsearchServiceDeleteElasticsearchDomainFuture

	DeleteElasticsearchServiceRole(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error)
	DeleteElasticsearchServiceRoleAsync(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput) *ElasticsearchServiceDeleteElasticsearchServiceRoleFuture

	DeleteInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.DeleteInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput, error)
	DeleteInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.DeleteInboundCrossClusterSearchConnectionInput) *ElasticsearchServiceDeleteInboundCrossClusterSearchConnectionFuture

	DeleteOutboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionInput) (*elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput, error)
	DeleteOutboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionInput) *ElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionFuture

	DeletePackage(ctx workflow.Context, input *elasticsearchservice.DeletePackageInput) (*elasticsearchservice.DeletePackageOutput, error)
	DeletePackageAsync(ctx workflow.Context, input *elasticsearchservice.DeletePackageInput) *ElasticsearchServiceDeletePackageFuture

	DescribeElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error)
	DescribeElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput) *ElasticsearchServiceDescribeElasticsearchDomainFuture

	DescribeElasticsearchDomainConfig(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error)
	DescribeElasticsearchDomainConfigAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput) *ElasticsearchServiceDescribeElasticsearchDomainConfigFuture

	DescribeElasticsearchDomains(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error)
	DescribeElasticsearchDomainsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput) *ElasticsearchServiceDescribeElasticsearchDomainsFuture

	DescribeElasticsearchInstanceTypeLimits(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error)
	DescribeElasticsearchInstanceTypeLimitsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) *ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsFuture

	DescribeInboundCrossClusterSearchConnections(ctx workflow.Context, input *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput) (*elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput, error)
	DescribeInboundCrossClusterSearchConnectionsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput) *ElasticsearchServiceDescribeInboundCrossClusterSearchConnectionsFuture

	DescribeOutboundCrossClusterSearchConnections(ctx workflow.Context, input *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput) (*elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput, error)
	DescribeOutboundCrossClusterSearchConnectionsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput) *ElasticsearchServiceDescribeOutboundCrossClusterSearchConnectionsFuture

	DescribePackages(ctx workflow.Context, input *elasticsearchservice.DescribePackagesInput) (*elasticsearchservice.DescribePackagesOutput, error)
	DescribePackagesAsync(ctx workflow.Context, input *elasticsearchservice.DescribePackagesInput) *ElasticsearchServiceDescribePackagesFuture

	DescribeReservedElasticsearchInstanceOfferings(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error)
	DescribeReservedElasticsearchInstanceOfferingsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) *ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsFuture

	DescribeReservedElasticsearchInstances(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error)
	DescribeReservedElasticsearchInstancesAsync(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) *ElasticsearchServiceDescribeReservedElasticsearchInstancesFuture

	DissociatePackage(ctx workflow.Context, input *elasticsearchservice.DissociatePackageInput) (*elasticsearchservice.DissociatePackageOutput, error)
	DissociatePackageAsync(ctx workflow.Context, input *elasticsearchservice.DissociatePackageInput) *ElasticsearchServiceDissociatePackageFuture

	GetCompatibleElasticsearchVersions(ctx workflow.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error)
	GetCompatibleElasticsearchVersionsAsync(ctx workflow.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) *ElasticsearchServiceGetCompatibleElasticsearchVersionsFuture

	GetUpgradeHistory(ctx workflow.Context, input *elasticsearchservice.GetUpgradeHistoryInput) (*elasticsearchservice.GetUpgradeHistoryOutput, error)
	GetUpgradeHistoryAsync(ctx workflow.Context, input *elasticsearchservice.GetUpgradeHistoryInput) *ElasticsearchServiceGetUpgradeHistoryFuture

	GetUpgradeStatus(ctx workflow.Context, input *elasticsearchservice.GetUpgradeStatusInput) (*elasticsearchservice.GetUpgradeStatusOutput, error)
	GetUpgradeStatusAsync(ctx workflow.Context, input *elasticsearchservice.GetUpgradeStatusInput) *ElasticsearchServiceGetUpgradeStatusFuture

	ListDomainNames(ctx workflow.Context, input *elasticsearchservice.ListDomainNamesInput) (*elasticsearchservice.ListDomainNamesOutput, error)
	ListDomainNamesAsync(ctx workflow.Context, input *elasticsearchservice.ListDomainNamesInput) *ElasticsearchServiceListDomainNamesFuture

	ListDomainsForPackage(ctx workflow.Context, input *elasticsearchservice.ListDomainsForPackageInput) (*elasticsearchservice.ListDomainsForPackageOutput, error)
	ListDomainsForPackageAsync(ctx workflow.Context, input *elasticsearchservice.ListDomainsForPackageInput) *ElasticsearchServiceListDomainsForPackageFuture

	ListElasticsearchInstanceTypes(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error)
	ListElasticsearchInstanceTypesAsync(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput) *ElasticsearchServiceListElasticsearchInstanceTypesFuture

	ListElasticsearchVersions(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchVersionsInput) (*elasticsearchservice.ListElasticsearchVersionsOutput, error)
	ListElasticsearchVersionsAsync(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchVersionsInput) *ElasticsearchServiceListElasticsearchVersionsFuture

	ListPackagesForDomain(ctx workflow.Context, input *elasticsearchservice.ListPackagesForDomainInput) (*elasticsearchservice.ListPackagesForDomainOutput, error)
	ListPackagesForDomainAsync(ctx workflow.Context, input *elasticsearchservice.ListPackagesForDomainInput) *ElasticsearchServiceListPackagesForDomainFuture

	ListTags(ctx workflow.Context, input *elasticsearchservice.ListTagsInput) (*elasticsearchservice.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *elasticsearchservice.ListTagsInput) *ElasticsearchServiceListTagsFuture

	PurchaseReservedElasticsearchInstanceOffering(ctx workflow.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error)
	PurchaseReservedElasticsearchInstanceOfferingAsync(ctx workflow.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) *ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingFuture

	RejectInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.RejectInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput, error)
	RejectInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.RejectInboundCrossClusterSearchConnectionInput) *ElasticsearchServiceRejectInboundCrossClusterSearchConnectionFuture

	RemoveTags(ctx workflow.Context, input *elasticsearchservice.RemoveTagsInput) (*elasticsearchservice.RemoveTagsOutput, error)
	RemoveTagsAsync(ctx workflow.Context, input *elasticsearchservice.RemoveTagsInput) *ElasticsearchServiceRemoveTagsFuture

	StartElasticsearchServiceSoftwareUpdate(ctx workflow.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error)
	StartElasticsearchServiceSoftwareUpdateAsync(ctx workflow.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) *ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateFuture

	UpdateElasticsearchDomainConfig(ctx workflow.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error)
	UpdateElasticsearchDomainConfigAsync(ctx workflow.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput) *ElasticsearchServiceUpdateElasticsearchDomainConfigFuture

	UpgradeElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error)
	UpgradeElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput) *ElasticsearchServiceUpgradeElasticsearchDomainFuture
}

type ElasticsearchServiceStub struct{}

func NewElasticsearchServiceStub() ElasticsearchServiceClient {
	return &ElasticsearchServiceStub{}
}

type ElasticsearchServiceAcceptInboundCrossClusterSearchConnectionFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceAcceptInboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceAddTagsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceAddTagsFuture) Get(ctx workflow.Context) (*elasticsearchservice.AddTagsOutput, error) {
	var output elasticsearchservice.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceAssociatePackageFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceAssociatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.AssociatePackageOutput, error) {
	var output elasticsearchservice.AssociatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateFuture) Get(ctx workflow.Context) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceCreateElasticsearchDomainFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceCreateElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.CreateElasticsearchDomainOutput, error) {
	var output elasticsearchservice.CreateElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceCreateOutboundCrossClusterSearchConnectionFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceCreateOutboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceCreatePackageFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceCreatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.CreatePackageOutput, error) {
	var output elasticsearchservice.CreatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDeleteElasticsearchDomainFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDeleteElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDeleteElasticsearchServiceRoleFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDeleteElasticsearchServiceRoleFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchServiceRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDeleteInboundCrossClusterSearchConnectionFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDeleteInboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDeletePackageFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDeletePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeletePackageOutput, error) {
	var output elasticsearchservice.DeletePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeElasticsearchDomainFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeElasticsearchDomainConfigFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeElasticsearchDomainConfigFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeElasticsearchDomainsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeElasticsearchDomainsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeInboundCrossClusterSearchConnectionsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeInboundCrossClusterSearchConnectionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeOutboundCrossClusterSearchConnectionsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeOutboundCrossClusterSearchConnectionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribePackagesFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribePackagesFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribePackagesOutput, error) {
	var output elasticsearchservice.DescribePackagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeReservedElasticsearchInstancesFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeReservedElasticsearchInstancesFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDissociatePackageFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceDissociatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.DissociatePackageOutput, error) {
	var output elasticsearchservice.DissociatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceGetCompatibleElasticsearchVersionsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceGetCompatibleElasticsearchVersionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.GetCompatibleElasticsearchVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceGetUpgradeHistoryFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceGetUpgradeHistoryFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetUpgradeHistoryOutput, error) {
	var output elasticsearchservice.GetUpgradeHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceGetUpgradeStatusFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceGetUpgradeStatusFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetUpgradeStatusOutput, error) {
	var output elasticsearchservice.GetUpgradeStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceListDomainNamesFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceListDomainNamesFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListDomainNamesOutput, error) {
	var output elasticsearchservice.ListDomainNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceListDomainsForPackageFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceListDomainsForPackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListDomainsForPackageOutput, error) {
	var output elasticsearchservice.ListDomainsForPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceListElasticsearchInstanceTypesFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceListElasticsearchInstanceTypesFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error) {
	var output elasticsearchservice.ListElasticsearchInstanceTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceListElasticsearchVersionsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceListElasticsearchVersionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.ListElasticsearchVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceListPackagesForDomainFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceListPackagesForDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListPackagesForDomainOutput, error) {
	var output elasticsearchservice.ListPackagesForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceListTagsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceListTagsFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListTagsOutput, error) {
	var output elasticsearchservice.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingFuture) Get(ctx workflow.Context) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error) {
	var output elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceRejectInboundCrossClusterSearchConnectionFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceRejectInboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceRemoveTagsFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceRemoveTagsFuture) Get(ctx workflow.Context) (*elasticsearchservice.RemoveTagsOutput, error) {
	var output elasticsearchservice.RemoveTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateFuture) Get(ctx workflow.Context) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceUpdateElasticsearchDomainConfigFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceUpdateElasticsearchDomainConfigFuture) Get(ctx workflow.Context) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.UpdateElasticsearchDomainConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceUpgradeElasticsearchDomainFuture struct {
	Future workflow.Future
}

func (r *ElasticsearchServiceUpgradeElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.UpgradeElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) AcceptInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.AcceptInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.AcceptInboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) AcceptInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.AcceptInboundCrossClusterSearchConnectionInput) *ElasticsearchServiceAcceptInboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.AcceptInboundCrossClusterSearchConnection", input)
	return &ElasticsearchServiceAcceptInboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *ElasticsearchServiceStub) AddTags(ctx workflow.Context, input *elasticsearchservice.AddTagsInput) (*elasticsearchservice.AddTagsOutput, error) {
	var output elasticsearchservice.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) AddTagsAsync(ctx workflow.Context, input *elasticsearchservice.AddTagsInput) *ElasticsearchServiceAddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.AddTags", input)
	return &ElasticsearchServiceAddTagsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) AssociatePackage(ctx workflow.Context, input *elasticsearchservice.AssociatePackageInput) (*elasticsearchservice.AssociatePackageOutput, error) {
	var output elasticsearchservice.AssociatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.AssociatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) AssociatePackageAsync(ctx workflow.Context, input *elasticsearchservice.AssociatePackageInput) *ElasticsearchServiceAssociatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.AssociatePackage", input)
	return &ElasticsearchServiceAssociatePackageFuture{Future: future}
}

func (a *ElasticsearchServiceStub) CancelElasticsearchServiceSoftwareUpdate(ctx workflow.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CancelElasticsearchServiceSoftwareUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) CancelElasticsearchServiceSoftwareUpdateAsync(ctx workflow.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) *ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CancelElasticsearchServiceSoftwareUpdate", input)
	return &ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateFuture{Future: future}
}

func (a *ElasticsearchServiceStub) CreateElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.CreateElasticsearchDomainInput) (*elasticsearchservice.CreateElasticsearchDomainOutput, error) {
	var output elasticsearchservice.CreateElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CreateElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) CreateElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.CreateElasticsearchDomainInput) *ElasticsearchServiceCreateElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CreateElasticsearchDomain", input)
	return &ElasticsearchServiceCreateElasticsearchDomainFuture{Future: future}
}

func (a *ElasticsearchServiceStub) CreateOutboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.CreateOutboundCrossClusterSearchConnectionInput) (*elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CreateOutboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) CreateOutboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.CreateOutboundCrossClusterSearchConnectionInput) *ElasticsearchServiceCreateOutboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CreateOutboundCrossClusterSearchConnection", input)
	return &ElasticsearchServiceCreateOutboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *ElasticsearchServiceStub) CreatePackage(ctx workflow.Context, input *elasticsearchservice.CreatePackageInput) (*elasticsearchservice.CreatePackageOutput, error) {
	var output elasticsearchservice.CreatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CreatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) CreatePackageAsync(ctx workflow.Context, input *elasticsearchservice.CreatePackageInput) *ElasticsearchServiceCreatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.CreatePackage", input)
	return &ElasticsearchServiceCreatePackageFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DeleteElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DeleteElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput) *ElasticsearchServiceDeleteElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteElasticsearchDomain", input)
	return &ElasticsearchServiceDeleteElasticsearchDomainFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DeleteElasticsearchServiceRole(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchServiceRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteElasticsearchServiceRole", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DeleteElasticsearchServiceRoleAsync(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput) *ElasticsearchServiceDeleteElasticsearchServiceRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteElasticsearchServiceRole", input)
	return &ElasticsearchServiceDeleteElasticsearchServiceRoleFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DeleteInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.DeleteInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteInboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DeleteInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.DeleteInboundCrossClusterSearchConnectionInput) *ElasticsearchServiceDeleteInboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteInboundCrossClusterSearchConnection", input)
	return &ElasticsearchServiceDeleteInboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DeleteOutboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionInput) (*elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteOutboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DeleteOutboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionInput) *ElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeleteOutboundCrossClusterSearchConnection", input)
	return &ElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DeletePackage(ctx workflow.Context, input *elasticsearchservice.DeletePackageInput) (*elasticsearchservice.DeletePackageOutput, error) {
	var output elasticsearchservice.DeletePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeletePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DeletePackageAsync(ctx workflow.Context, input *elasticsearchservice.DeletePackageInput) *ElasticsearchServiceDeletePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DeletePackage", input)
	return &ElasticsearchServiceDeletePackageFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput) *ElasticsearchServiceDescribeElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchDomain", input)
	return &ElasticsearchServiceDescribeElasticsearchDomainFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchDomainConfig(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchDomainConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchDomainConfigAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput) *ElasticsearchServiceDescribeElasticsearchDomainConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchDomainConfig", input)
	return &ElasticsearchServiceDescribeElasticsearchDomainConfigFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchDomains(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchDomainsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput) *ElasticsearchServiceDescribeElasticsearchDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchDomains", input)
	return &ElasticsearchServiceDescribeElasticsearchDomainsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchInstanceTypeLimits(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchInstanceTypeLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeElasticsearchInstanceTypeLimitsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) *ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeElasticsearchInstanceTypeLimits", input)
	return &ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeInboundCrossClusterSearchConnections(ctx workflow.Context, input *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput) (*elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeInboundCrossClusterSearchConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeInboundCrossClusterSearchConnectionsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput) *ElasticsearchServiceDescribeInboundCrossClusterSearchConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeInboundCrossClusterSearchConnections", input)
	return &ElasticsearchServiceDescribeInboundCrossClusterSearchConnectionsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeOutboundCrossClusterSearchConnections(ctx workflow.Context, input *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput) (*elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeOutboundCrossClusterSearchConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeOutboundCrossClusterSearchConnectionsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput) *ElasticsearchServiceDescribeOutboundCrossClusterSearchConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeOutboundCrossClusterSearchConnections", input)
	return &ElasticsearchServiceDescribeOutboundCrossClusterSearchConnectionsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribePackages(ctx workflow.Context, input *elasticsearchservice.DescribePackagesInput) (*elasticsearchservice.DescribePackagesOutput, error) {
	var output elasticsearchservice.DescribePackagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribePackages", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribePackagesAsync(ctx workflow.Context, input *elasticsearchservice.DescribePackagesInput) *ElasticsearchServiceDescribePackagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribePackages", input)
	return &ElasticsearchServiceDescribePackagesFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeReservedElasticsearchInstanceOfferings(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeReservedElasticsearchInstanceOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeReservedElasticsearchInstanceOfferingsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) *ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeReservedElasticsearchInstanceOfferings", input)
	return &ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DescribeReservedElasticsearchInstances(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeReservedElasticsearchInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DescribeReservedElasticsearchInstancesAsync(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) *ElasticsearchServiceDescribeReservedElasticsearchInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DescribeReservedElasticsearchInstances", input)
	return &ElasticsearchServiceDescribeReservedElasticsearchInstancesFuture{Future: future}
}

func (a *ElasticsearchServiceStub) DissociatePackage(ctx workflow.Context, input *elasticsearchservice.DissociatePackageInput) (*elasticsearchservice.DissociatePackageOutput, error) {
	var output elasticsearchservice.DissociatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DissociatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) DissociatePackageAsync(ctx workflow.Context, input *elasticsearchservice.DissociatePackageInput) *ElasticsearchServiceDissociatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.DissociatePackage", input)
	return &ElasticsearchServiceDissociatePackageFuture{Future: future}
}

func (a *ElasticsearchServiceStub) GetCompatibleElasticsearchVersions(ctx workflow.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.GetCompatibleElasticsearchVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.GetCompatibleElasticsearchVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) GetCompatibleElasticsearchVersionsAsync(ctx workflow.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) *ElasticsearchServiceGetCompatibleElasticsearchVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.GetCompatibleElasticsearchVersions", input)
	return &ElasticsearchServiceGetCompatibleElasticsearchVersionsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) GetUpgradeHistory(ctx workflow.Context, input *elasticsearchservice.GetUpgradeHistoryInput) (*elasticsearchservice.GetUpgradeHistoryOutput, error) {
	var output elasticsearchservice.GetUpgradeHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.GetUpgradeHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) GetUpgradeHistoryAsync(ctx workflow.Context, input *elasticsearchservice.GetUpgradeHistoryInput) *ElasticsearchServiceGetUpgradeHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.GetUpgradeHistory", input)
	return &ElasticsearchServiceGetUpgradeHistoryFuture{Future: future}
}

func (a *ElasticsearchServiceStub) GetUpgradeStatus(ctx workflow.Context, input *elasticsearchservice.GetUpgradeStatusInput) (*elasticsearchservice.GetUpgradeStatusOutput, error) {
	var output elasticsearchservice.GetUpgradeStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.GetUpgradeStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) GetUpgradeStatusAsync(ctx workflow.Context, input *elasticsearchservice.GetUpgradeStatusInput) *ElasticsearchServiceGetUpgradeStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.GetUpgradeStatus", input)
	return &ElasticsearchServiceGetUpgradeStatusFuture{Future: future}
}

func (a *ElasticsearchServiceStub) ListDomainNames(ctx workflow.Context, input *elasticsearchservice.ListDomainNamesInput) (*elasticsearchservice.ListDomainNamesOutput, error) {
	var output elasticsearchservice.ListDomainNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListDomainNames", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) ListDomainNamesAsync(ctx workflow.Context, input *elasticsearchservice.ListDomainNamesInput) *ElasticsearchServiceListDomainNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListDomainNames", input)
	return &ElasticsearchServiceListDomainNamesFuture{Future: future}
}

func (a *ElasticsearchServiceStub) ListDomainsForPackage(ctx workflow.Context, input *elasticsearchservice.ListDomainsForPackageInput) (*elasticsearchservice.ListDomainsForPackageOutput, error) {
	var output elasticsearchservice.ListDomainsForPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListDomainsForPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) ListDomainsForPackageAsync(ctx workflow.Context, input *elasticsearchservice.ListDomainsForPackageInput) *ElasticsearchServiceListDomainsForPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListDomainsForPackage", input)
	return &ElasticsearchServiceListDomainsForPackageFuture{Future: future}
}

func (a *ElasticsearchServiceStub) ListElasticsearchInstanceTypes(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error) {
	var output elasticsearchservice.ListElasticsearchInstanceTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListElasticsearchInstanceTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) ListElasticsearchInstanceTypesAsync(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput) *ElasticsearchServiceListElasticsearchInstanceTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListElasticsearchInstanceTypes", input)
	return &ElasticsearchServiceListElasticsearchInstanceTypesFuture{Future: future}
}

func (a *ElasticsearchServiceStub) ListElasticsearchVersions(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchVersionsInput) (*elasticsearchservice.ListElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.ListElasticsearchVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListElasticsearchVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) ListElasticsearchVersionsAsync(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchVersionsInput) *ElasticsearchServiceListElasticsearchVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListElasticsearchVersions", input)
	return &ElasticsearchServiceListElasticsearchVersionsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) ListPackagesForDomain(ctx workflow.Context, input *elasticsearchservice.ListPackagesForDomainInput) (*elasticsearchservice.ListPackagesForDomainOutput, error) {
	var output elasticsearchservice.ListPackagesForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListPackagesForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) ListPackagesForDomainAsync(ctx workflow.Context, input *elasticsearchservice.ListPackagesForDomainInput) *ElasticsearchServiceListPackagesForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListPackagesForDomain", input)
	return &ElasticsearchServiceListPackagesForDomainFuture{Future: future}
}

func (a *ElasticsearchServiceStub) ListTags(ctx workflow.Context, input *elasticsearchservice.ListTagsInput) (*elasticsearchservice.ListTagsOutput, error) {
	var output elasticsearchservice.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) ListTagsAsync(ctx workflow.Context, input *elasticsearchservice.ListTagsInput) *ElasticsearchServiceListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.ListTags", input)
	return &ElasticsearchServiceListTagsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) PurchaseReservedElasticsearchInstanceOffering(ctx workflow.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error) {
	var output elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.PurchaseReservedElasticsearchInstanceOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) PurchaseReservedElasticsearchInstanceOfferingAsync(ctx workflow.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) *ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.PurchaseReservedElasticsearchInstanceOffering", input)
	return &ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingFuture{Future: future}
}

func (a *ElasticsearchServiceStub) RejectInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.RejectInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.RejectInboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) RejectInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.RejectInboundCrossClusterSearchConnectionInput) *ElasticsearchServiceRejectInboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.RejectInboundCrossClusterSearchConnection", input)
	return &ElasticsearchServiceRejectInboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *ElasticsearchServiceStub) RemoveTags(ctx workflow.Context, input *elasticsearchservice.RemoveTagsInput) (*elasticsearchservice.RemoveTagsOutput, error) {
	var output elasticsearchservice.RemoveTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.RemoveTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) RemoveTagsAsync(ctx workflow.Context, input *elasticsearchservice.RemoveTagsInput) *ElasticsearchServiceRemoveTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.RemoveTags", input)
	return &ElasticsearchServiceRemoveTagsFuture{Future: future}
}

func (a *ElasticsearchServiceStub) StartElasticsearchServiceSoftwareUpdate(ctx workflow.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.StartElasticsearchServiceSoftwareUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) StartElasticsearchServiceSoftwareUpdateAsync(ctx workflow.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) *ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.StartElasticsearchServiceSoftwareUpdate", input)
	return &ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateFuture{Future: future}
}

func (a *ElasticsearchServiceStub) UpdateElasticsearchDomainConfig(ctx workflow.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.UpdateElasticsearchDomainConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.UpdateElasticsearchDomainConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) UpdateElasticsearchDomainConfigAsync(ctx workflow.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput) *ElasticsearchServiceUpdateElasticsearchDomainConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.UpdateElasticsearchDomainConfig", input)
	return &ElasticsearchServiceUpdateElasticsearchDomainConfigFuture{Future: future}
}

func (a *ElasticsearchServiceStub) UpgradeElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.UpgradeElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.UpgradeElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticsearchServiceStub) UpgradeElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput) *ElasticsearchServiceUpgradeElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticsearchservice.UpgradeElasticsearchDomain", input)
	return &ElasticsearchServiceUpgradeElasticsearchDomainFuture{Future: future}
}
