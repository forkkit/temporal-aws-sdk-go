// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/directoryservice"
	"go.temporal.io/sdk/workflow"
)

type DirectoryServiceClient interface {
	AcceptSharedDirectory(ctx workflow.Context, input *directoryservice.AcceptSharedDirectoryInput) (*directoryservice.AcceptSharedDirectoryOutput, error)
	AcceptSharedDirectoryAsync(ctx workflow.Context, input *directoryservice.AcceptSharedDirectoryInput) *DirectoryserviceAcceptSharedDirectoryFuture

	AddIpRoutes(ctx workflow.Context, input *directoryservice.AddIpRoutesInput) (*directoryservice.AddIpRoutesOutput, error)
	AddIpRoutesAsync(ctx workflow.Context, input *directoryservice.AddIpRoutesInput) *DirectoryserviceAddIpRoutesFuture

	AddTagsToResource(ctx workflow.Context, input *directoryservice.AddTagsToResourceInput) (*directoryservice.AddTagsToResourceOutput, error)
	AddTagsToResourceAsync(ctx workflow.Context, input *directoryservice.AddTagsToResourceInput) *DirectoryserviceAddTagsToResourceFuture

	CancelSchemaExtension(ctx workflow.Context, input *directoryservice.CancelSchemaExtensionInput) (*directoryservice.CancelSchemaExtensionOutput, error)
	CancelSchemaExtensionAsync(ctx workflow.Context, input *directoryservice.CancelSchemaExtensionInput) *DirectoryserviceCancelSchemaExtensionFuture

	ConnectDirectory(ctx workflow.Context, input *directoryservice.ConnectDirectoryInput) (*directoryservice.ConnectDirectoryOutput, error)
	ConnectDirectoryAsync(ctx workflow.Context, input *directoryservice.ConnectDirectoryInput) *DirectoryserviceConnectDirectoryFuture

	CreateAlias(ctx workflow.Context, input *directoryservice.CreateAliasInput) (*directoryservice.CreateAliasOutput, error)
	CreateAliasAsync(ctx workflow.Context, input *directoryservice.CreateAliasInput) *DirectoryserviceCreateAliasFuture

	CreateComputer(ctx workflow.Context, input *directoryservice.CreateComputerInput) (*directoryservice.CreateComputerOutput, error)
	CreateComputerAsync(ctx workflow.Context, input *directoryservice.CreateComputerInput) *DirectoryserviceCreateComputerFuture

	CreateConditionalForwarder(ctx workflow.Context, input *directoryservice.CreateConditionalForwarderInput) (*directoryservice.CreateConditionalForwarderOutput, error)
	CreateConditionalForwarderAsync(ctx workflow.Context, input *directoryservice.CreateConditionalForwarderInput) *DirectoryserviceCreateConditionalForwarderFuture

	CreateDirectory(ctx workflow.Context, input *directoryservice.CreateDirectoryInput) (*directoryservice.CreateDirectoryOutput, error)
	CreateDirectoryAsync(ctx workflow.Context, input *directoryservice.CreateDirectoryInput) *DirectoryserviceCreateDirectoryFuture

	CreateLogSubscription(ctx workflow.Context, input *directoryservice.CreateLogSubscriptionInput) (*directoryservice.CreateLogSubscriptionOutput, error)
	CreateLogSubscriptionAsync(ctx workflow.Context, input *directoryservice.CreateLogSubscriptionInput) *DirectoryserviceCreateLogSubscriptionFuture

	CreateMicrosoftAD(ctx workflow.Context, input *directoryservice.CreateMicrosoftADInput) (*directoryservice.CreateMicrosoftADOutput, error)
	CreateMicrosoftADAsync(ctx workflow.Context, input *directoryservice.CreateMicrosoftADInput) *DirectoryserviceCreateMicrosoftADFuture

	CreateSnapshot(ctx workflow.Context, input *directoryservice.CreateSnapshotInput) (*directoryservice.CreateSnapshotOutput, error)
	CreateSnapshotAsync(ctx workflow.Context, input *directoryservice.CreateSnapshotInput) *DirectoryserviceCreateSnapshotFuture

	CreateTrust(ctx workflow.Context, input *directoryservice.CreateTrustInput) (*directoryservice.CreateTrustOutput, error)
	CreateTrustAsync(ctx workflow.Context, input *directoryservice.CreateTrustInput) *DirectoryserviceCreateTrustFuture

	DeleteConditionalForwarder(ctx workflow.Context, input *directoryservice.DeleteConditionalForwarderInput) (*directoryservice.DeleteConditionalForwarderOutput, error)
	DeleteConditionalForwarderAsync(ctx workflow.Context, input *directoryservice.DeleteConditionalForwarderInput) *DirectoryserviceDeleteConditionalForwarderFuture

	DeleteDirectory(ctx workflow.Context, input *directoryservice.DeleteDirectoryInput) (*directoryservice.DeleteDirectoryOutput, error)
	DeleteDirectoryAsync(ctx workflow.Context, input *directoryservice.DeleteDirectoryInput) *DirectoryserviceDeleteDirectoryFuture

	DeleteLogSubscription(ctx workflow.Context, input *directoryservice.DeleteLogSubscriptionInput) (*directoryservice.DeleteLogSubscriptionOutput, error)
	DeleteLogSubscriptionAsync(ctx workflow.Context, input *directoryservice.DeleteLogSubscriptionInput) *DirectoryserviceDeleteLogSubscriptionFuture

	DeleteSnapshot(ctx workflow.Context, input *directoryservice.DeleteSnapshotInput) (*directoryservice.DeleteSnapshotOutput, error)
	DeleteSnapshotAsync(ctx workflow.Context, input *directoryservice.DeleteSnapshotInput) *DirectoryserviceDeleteSnapshotFuture

	DeleteTrust(ctx workflow.Context, input *directoryservice.DeleteTrustInput) (*directoryservice.DeleteTrustOutput, error)
	DeleteTrustAsync(ctx workflow.Context, input *directoryservice.DeleteTrustInput) *DirectoryserviceDeleteTrustFuture

	DeregisterCertificate(ctx workflow.Context, input *directoryservice.DeregisterCertificateInput) (*directoryservice.DeregisterCertificateOutput, error)
	DeregisterCertificateAsync(ctx workflow.Context, input *directoryservice.DeregisterCertificateInput) *DirectoryserviceDeregisterCertificateFuture

	DeregisterEventTopic(ctx workflow.Context, input *directoryservice.DeregisterEventTopicInput) (*directoryservice.DeregisterEventTopicOutput, error)
	DeregisterEventTopicAsync(ctx workflow.Context, input *directoryservice.DeregisterEventTopicInput) *DirectoryserviceDeregisterEventTopicFuture

	DescribeCertificate(ctx workflow.Context, input *directoryservice.DescribeCertificateInput) (*directoryservice.DescribeCertificateOutput, error)
	DescribeCertificateAsync(ctx workflow.Context, input *directoryservice.DescribeCertificateInput) *DirectoryserviceDescribeCertificateFuture

	DescribeConditionalForwarders(ctx workflow.Context, input *directoryservice.DescribeConditionalForwardersInput) (*directoryservice.DescribeConditionalForwardersOutput, error)
	DescribeConditionalForwardersAsync(ctx workflow.Context, input *directoryservice.DescribeConditionalForwardersInput) *DirectoryserviceDescribeConditionalForwardersFuture

	DescribeDirectories(ctx workflow.Context, input *directoryservice.DescribeDirectoriesInput) (*directoryservice.DescribeDirectoriesOutput, error)
	DescribeDirectoriesAsync(ctx workflow.Context, input *directoryservice.DescribeDirectoriesInput) *DirectoryserviceDescribeDirectoriesFuture

	DescribeDomainControllers(ctx workflow.Context, input *directoryservice.DescribeDomainControllersInput) (*directoryservice.DescribeDomainControllersOutput, error)
	DescribeDomainControllersAsync(ctx workflow.Context, input *directoryservice.DescribeDomainControllersInput) *DirectoryserviceDescribeDomainControllersFuture

	DescribeEventTopics(ctx workflow.Context, input *directoryservice.DescribeEventTopicsInput) (*directoryservice.DescribeEventTopicsOutput, error)
	DescribeEventTopicsAsync(ctx workflow.Context, input *directoryservice.DescribeEventTopicsInput) *DirectoryserviceDescribeEventTopicsFuture

	DescribeLDAPSSettings(ctx workflow.Context, input *directoryservice.DescribeLDAPSSettingsInput) (*directoryservice.DescribeLDAPSSettingsOutput, error)
	DescribeLDAPSSettingsAsync(ctx workflow.Context, input *directoryservice.DescribeLDAPSSettingsInput) *DirectoryserviceDescribeLDAPSSettingsFuture

	DescribeSharedDirectories(ctx workflow.Context, input *directoryservice.DescribeSharedDirectoriesInput) (*directoryservice.DescribeSharedDirectoriesOutput, error)
	DescribeSharedDirectoriesAsync(ctx workflow.Context, input *directoryservice.DescribeSharedDirectoriesInput) *DirectoryserviceDescribeSharedDirectoriesFuture

	DescribeSnapshots(ctx workflow.Context, input *directoryservice.DescribeSnapshotsInput) (*directoryservice.DescribeSnapshotsOutput, error)
	DescribeSnapshotsAsync(ctx workflow.Context, input *directoryservice.DescribeSnapshotsInput) *DirectoryserviceDescribeSnapshotsFuture

	DescribeTrusts(ctx workflow.Context, input *directoryservice.DescribeTrustsInput) (*directoryservice.DescribeTrustsOutput, error)
	DescribeTrustsAsync(ctx workflow.Context, input *directoryservice.DescribeTrustsInput) *DirectoryserviceDescribeTrustsFuture

	DisableLDAPS(ctx workflow.Context, input *directoryservice.DisableLDAPSInput) (*directoryservice.DisableLDAPSOutput, error)
	DisableLDAPSAsync(ctx workflow.Context, input *directoryservice.DisableLDAPSInput) *DirectoryserviceDisableLDAPSFuture

	DisableRadius(ctx workflow.Context, input *directoryservice.DisableRadiusInput) (*directoryservice.DisableRadiusOutput, error)
	DisableRadiusAsync(ctx workflow.Context, input *directoryservice.DisableRadiusInput) *DirectoryserviceDisableRadiusFuture

	DisableSso(ctx workflow.Context, input *directoryservice.DisableSsoInput) (*directoryservice.DisableSsoOutput, error)
	DisableSsoAsync(ctx workflow.Context, input *directoryservice.DisableSsoInput) *DirectoryserviceDisableSsoFuture

	EnableLDAPS(ctx workflow.Context, input *directoryservice.EnableLDAPSInput) (*directoryservice.EnableLDAPSOutput, error)
	EnableLDAPSAsync(ctx workflow.Context, input *directoryservice.EnableLDAPSInput) *DirectoryserviceEnableLDAPSFuture

	EnableRadius(ctx workflow.Context, input *directoryservice.EnableRadiusInput) (*directoryservice.EnableRadiusOutput, error)
	EnableRadiusAsync(ctx workflow.Context, input *directoryservice.EnableRadiusInput) *DirectoryserviceEnableRadiusFuture

	EnableSso(ctx workflow.Context, input *directoryservice.EnableSsoInput) (*directoryservice.EnableSsoOutput, error)
	EnableSsoAsync(ctx workflow.Context, input *directoryservice.EnableSsoInput) *DirectoryserviceEnableSsoFuture

	GetDirectoryLimits(ctx workflow.Context, input *directoryservice.GetDirectoryLimitsInput) (*directoryservice.GetDirectoryLimitsOutput, error)
	GetDirectoryLimitsAsync(ctx workflow.Context, input *directoryservice.GetDirectoryLimitsInput) *DirectoryserviceGetDirectoryLimitsFuture

	GetSnapshotLimits(ctx workflow.Context, input *directoryservice.GetSnapshotLimitsInput) (*directoryservice.GetSnapshotLimitsOutput, error)
	GetSnapshotLimitsAsync(ctx workflow.Context, input *directoryservice.GetSnapshotLimitsInput) *DirectoryserviceGetSnapshotLimitsFuture

	ListCertificates(ctx workflow.Context, input *directoryservice.ListCertificatesInput) (*directoryservice.ListCertificatesOutput, error)
	ListCertificatesAsync(ctx workflow.Context, input *directoryservice.ListCertificatesInput) *DirectoryserviceListCertificatesFuture

	ListIpRoutes(ctx workflow.Context, input *directoryservice.ListIpRoutesInput) (*directoryservice.ListIpRoutesOutput, error)
	ListIpRoutesAsync(ctx workflow.Context, input *directoryservice.ListIpRoutesInput) *DirectoryserviceListIpRoutesFuture

	ListLogSubscriptions(ctx workflow.Context, input *directoryservice.ListLogSubscriptionsInput) (*directoryservice.ListLogSubscriptionsOutput, error)
	ListLogSubscriptionsAsync(ctx workflow.Context, input *directoryservice.ListLogSubscriptionsInput) *DirectoryserviceListLogSubscriptionsFuture

	ListSchemaExtensions(ctx workflow.Context, input *directoryservice.ListSchemaExtensionsInput) (*directoryservice.ListSchemaExtensionsOutput, error)
	ListSchemaExtensionsAsync(ctx workflow.Context, input *directoryservice.ListSchemaExtensionsInput) *DirectoryserviceListSchemaExtensionsFuture

	ListTagsForResource(ctx workflow.Context, input *directoryservice.ListTagsForResourceInput) (*directoryservice.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *directoryservice.ListTagsForResourceInput) *DirectoryserviceListTagsForResourceFuture

	RegisterCertificate(ctx workflow.Context, input *directoryservice.RegisterCertificateInput) (*directoryservice.RegisterCertificateOutput, error)
	RegisterCertificateAsync(ctx workflow.Context, input *directoryservice.RegisterCertificateInput) *DirectoryserviceRegisterCertificateFuture

	RegisterEventTopic(ctx workflow.Context, input *directoryservice.RegisterEventTopicInput) (*directoryservice.RegisterEventTopicOutput, error)
	RegisterEventTopicAsync(ctx workflow.Context, input *directoryservice.RegisterEventTopicInput) *DirectoryserviceRegisterEventTopicFuture

	RejectSharedDirectory(ctx workflow.Context, input *directoryservice.RejectSharedDirectoryInput) (*directoryservice.RejectSharedDirectoryOutput, error)
	RejectSharedDirectoryAsync(ctx workflow.Context, input *directoryservice.RejectSharedDirectoryInput) *DirectoryserviceRejectSharedDirectoryFuture

	RemoveIpRoutes(ctx workflow.Context, input *directoryservice.RemoveIpRoutesInput) (*directoryservice.RemoveIpRoutesOutput, error)
	RemoveIpRoutesAsync(ctx workflow.Context, input *directoryservice.RemoveIpRoutesInput) *DirectoryserviceRemoveIpRoutesFuture

	RemoveTagsFromResource(ctx workflow.Context, input *directoryservice.RemoveTagsFromResourceInput) (*directoryservice.RemoveTagsFromResourceOutput, error)
	RemoveTagsFromResourceAsync(ctx workflow.Context, input *directoryservice.RemoveTagsFromResourceInput) *DirectoryserviceRemoveTagsFromResourceFuture

	ResetUserPassword(ctx workflow.Context, input *directoryservice.ResetUserPasswordInput) (*directoryservice.ResetUserPasswordOutput, error)
	ResetUserPasswordAsync(ctx workflow.Context, input *directoryservice.ResetUserPasswordInput) *DirectoryserviceResetUserPasswordFuture

	RestoreFromSnapshot(ctx workflow.Context, input *directoryservice.RestoreFromSnapshotInput) (*directoryservice.RestoreFromSnapshotOutput, error)
	RestoreFromSnapshotAsync(ctx workflow.Context, input *directoryservice.RestoreFromSnapshotInput) *DirectoryserviceRestoreFromSnapshotFuture

	ShareDirectory(ctx workflow.Context, input *directoryservice.ShareDirectoryInput) (*directoryservice.ShareDirectoryOutput, error)
	ShareDirectoryAsync(ctx workflow.Context, input *directoryservice.ShareDirectoryInput) *DirectoryserviceShareDirectoryFuture

	StartSchemaExtension(ctx workflow.Context, input *directoryservice.StartSchemaExtensionInput) (*directoryservice.StartSchemaExtensionOutput, error)
	StartSchemaExtensionAsync(ctx workflow.Context, input *directoryservice.StartSchemaExtensionInput) *DirectoryserviceStartSchemaExtensionFuture

	UnshareDirectory(ctx workflow.Context, input *directoryservice.UnshareDirectoryInput) (*directoryservice.UnshareDirectoryOutput, error)
	UnshareDirectoryAsync(ctx workflow.Context, input *directoryservice.UnshareDirectoryInput) *DirectoryserviceUnshareDirectoryFuture

	UpdateConditionalForwarder(ctx workflow.Context, input *directoryservice.UpdateConditionalForwarderInput) (*directoryservice.UpdateConditionalForwarderOutput, error)
	UpdateConditionalForwarderAsync(ctx workflow.Context, input *directoryservice.UpdateConditionalForwarderInput) *DirectoryserviceUpdateConditionalForwarderFuture

	UpdateNumberOfDomainControllers(ctx workflow.Context, input *directoryservice.UpdateNumberOfDomainControllersInput) (*directoryservice.UpdateNumberOfDomainControllersOutput, error)
	UpdateNumberOfDomainControllersAsync(ctx workflow.Context, input *directoryservice.UpdateNumberOfDomainControllersInput) *DirectoryserviceUpdateNumberOfDomainControllersFuture

	UpdateRadius(ctx workflow.Context, input *directoryservice.UpdateRadiusInput) (*directoryservice.UpdateRadiusOutput, error)
	UpdateRadiusAsync(ctx workflow.Context, input *directoryservice.UpdateRadiusInput) *DirectoryserviceUpdateRadiusFuture

	UpdateTrust(ctx workflow.Context, input *directoryservice.UpdateTrustInput) (*directoryservice.UpdateTrustOutput, error)
	UpdateTrustAsync(ctx workflow.Context, input *directoryservice.UpdateTrustInput) *DirectoryserviceUpdateTrustFuture

	VerifyTrust(ctx workflow.Context, input *directoryservice.VerifyTrustInput) (*directoryservice.VerifyTrustOutput, error)
	VerifyTrustAsync(ctx workflow.Context, input *directoryservice.VerifyTrustInput) *DirectoryserviceVerifyTrustFuture
}

type DirectoryServiceStub struct{}

func NewDirectoryServiceStub() DirectoryServiceClient {
	return &DirectoryServiceStub{}
}

type DirectoryserviceAcceptSharedDirectoryFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceAcceptSharedDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.AcceptSharedDirectoryOutput, error) {
	var output directoryservice.AcceptSharedDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceAddIpRoutesFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceAddIpRoutesFuture) Get(ctx workflow.Context) (*directoryservice.AddIpRoutesOutput, error) {
	var output directoryservice.AddIpRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceAddTagsToResourceFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceAddTagsToResourceFuture) Get(ctx workflow.Context) (*directoryservice.AddTagsToResourceOutput, error) {
	var output directoryservice.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceCancelSchemaExtensionFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceCancelSchemaExtensionFuture) Get(ctx workflow.Context) (*directoryservice.CancelSchemaExtensionOutput, error) {
	var output directoryservice.CancelSchemaExtensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceConnectDirectoryFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceConnectDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.ConnectDirectoryOutput, error) {
	var output directoryservice.ConnectDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceCreateAliasFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceCreateAliasFuture) Get(ctx workflow.Context) (*directoryservice.CreateAliasOutput, error) {
	var output directoryservice.CreateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceCreateComputerFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceCreateComputerFuture) Get(ctx workflow.Context) (*directoryservice.CreateComputerOutput, error) {
	var output directoryservice.CreateComputerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceCreateConditionalForwarderFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceCreateConditionalForwarderFuture) Get(ctx workflow.Context) (*directoryservice.CreateConditionalForwarderOutput, error) {
	var output directoryservice.CreateConditionalForwarderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceCreateDirectoryFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceCreateDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.CreateDirectoryOutput, error) {
	var output directoryservice.CreateDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceCreateLogSubscriptionFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceCreateLogSubscriptionFuture) Get(ctx workflow.Context) (*directoryservice.CreateLogSubscriptionOutput, error) {
	var output directoryservice.CreateLogSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceCreateMicrosoftADFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceCreateMicrosoftADFuture) Get(ctx workflow.Context) (*directoryservice.CreateMicrosoftADOutput, error) {
	var output directoryservice.CreateMicrosoftADOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceCreateSnapshotFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceCreateSnapshotFuture) Get(ctx workflow.Context) (*directoryservice.CreateSnapshotOutput, error) {
	var output directoryservice.CreateSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceCreateTrustFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceCreateTrustFuture) Get(ctx workflow.Context) (*directoryservice.CreateTrustOutput, error) {
	var output directoryservice.CreateTrustOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDeleteConditionalForwarderFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDeleteConditionalForwarderFuture) Get(ctx workflow.Context) (*directoryservice.DeleteConditionalForwarderOutput, error) {
	var output directoryservice.DeleteConditionalForwarderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDeleteDirectoryFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDeleteDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.DeleteDirectoryOutput, error) {
	var output directoryservice.DeleteDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDeleteLogSubscriptionFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDeleteLogSubscriptionFuture) Get(ctx workflow.Context) (*directoryservice.DeleteLogSubscriptionOutput, error) {
	var output directoryservice.DeleteLogSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDeleteSnapshotFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDeleteSnapshotFuture) Get(ctx workflow.Context) (*directoryservice.DeleteSnapshotOutput, error) {
	var output directoryservice.DeleteSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDeleteTrustFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDeleteTrustFuture) Get(ctx workflow.Context) (*directoryservice.DeleteTrustOutput, error) {
	var output directoryservice.DeleteTrustOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDeregisterCertificateFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDeregisterCertificateFuture) Get(ctx workflow.Context) (*directoryservice.DeregisterCertificateOutput, error) {
	var output directoryservice.DeregisterCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDeregisterEventTopicFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDeregisterEventTopicFuture) Get(ctx workflow.Context) (*directoryservice.DeregisterEventTopicOutput, error) {
	var output directoryservice.DeregisterEventTopicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDescribeCertificateFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDescribeCertificateFuture) Get(ctx workflow.Context) (*directoryservice.DescribeCertificateOutput, error) {
	var output directoryservice.DescribeCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDescribeConditionalForwardersFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDescribeConditionalForwardersFuture) Get(ctx workflow.Context) (*directoryservice.DescribeConditionalForwardersOutput, error) {
	var output directoryservice.DescribeConditionalForwardersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDescribeDirectoriesFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDescribeDirectoriesFuture) Get(ctx workflow.Context) (*directoryservice.DescribeDirectoriesOutput, error) {
	var output directoryservice.DescribeDirectoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDescribeDomainControllersFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDescribeDomainControllersFuture) Get(ctx workflow.Context) (*directoryservice.DescribeDomainControllersOutput, error) {
	var output directoryservice.DescribeDomainControllersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDescribeEventTopicsFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDescribeEventTopicsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeEventTopicsOutput, error) {
	var output directoryservice.DescribeEventTopicsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDescribeLDAPSSettingsFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDescribeLDAPSSettingsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeLDAPSSettingsOutput, error) {
	var output directoryservice.DescribeLDAPSSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDescribeSharedDirectoriesFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDescribeSharedDirectoriesFuture) Get(ctx workflow.Context) (*directoryservice.DescribeSharedDirectoriesOutput, error) {
	var output directoryservice.DescribeSharedDirectoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDescribeSnapshotsFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDescribeSnapshotsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeSnapshotsOutput, error) {
	var output directoryservice.DescribeSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDescribeTrustsFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDescribeTrustsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeTrustsOutput, error) {
	var output directoryservice.DescribeTrustsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDisableLDAPSFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDisableLDAPSFuture) Get(ctx workflow.Context) (*directoryservice.DisableLDAPSOutput, error) {
	var output directoryservice.DisableLDAPSOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDisableRadiusFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDisableRadiusFuture) Get(ctx workflow.Context) (*directoryservice.DisableRadiusOutput, error) {
	var output directoryservice.DisableRadiusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceDisableSsoFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceDisableSsoFuture) Get(ctx workflow.Context) (*directoryservice.DisableSsoOutput, error) {
	var output directoryservice.DisableSsoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceEnableLDAPSFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceEnableLDAPSFuture) Get(ctx workflow.Context) (*directoryservice.EnableLDAPSOutput, error) {
	var output directoryservice.EnableLDAPSOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceEnableRadiusFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceEnableRadiusFuture) Get(ctx workflow.Context) (*directoryservice.EnableRadiusOutput, error) {
	var output directoryservice.EnableRadiusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceEnableSsoFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceEnableSsoFuture) Get(ctx workflow.Context) (*directoryservice.EnableSsoOutput, error) {
	var output directoryservice.EnableSsoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceGetDirectoryLimitsFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceGetDirectoryLimitsFuture) Get(ctx workflow.Context) (*directoryservice.GetDirectoryLimitsOutput, error) {
	var output directoryservice.GetDirectoryLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceGetSnapshotLimitsFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceGetSnapshotLimitsFuture) Get(ctx workflow.Context) (*directoryservice.GetSnapshotLimitsOutput, error) {
	var output directoryservice.GetSnapshotLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceListCertificatesFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceListCertificatesFuture) Get(ctx workflow.Context) (*directoryservice.ListCertificatesOutput, error) {
	var output directoryservice.ListCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceListIpRoutesFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceListIpRoutesFuture) Get(ctx workflow.Context) (*directoryservice.ListIpRoutesOutput, error) {
	var output directoryservice.ListIpRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceListLogSubscriptionsFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceListLogSubscriptionsFuture) Get(ctx workflow.Context) (*directoryservice.ListLogSubscriptionsOutput, error) {
	var output directoryservice.ListLogSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceListSchemaExtensionsFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceListSchemaExtensionsFuture) Get(ctx workflow.Context) (*directoryservice.ListSchemaExtensionsOutput, error) {
	var output directoryservice.ListSchemaExtensionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceListTagsForResourceFuture) Get(ctx workflow.Context) (*directoryservice.ListTagsForResourceOutput, error) {
	var output directoryservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceRegisterCertificateFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceRegisterCertificateFuture) Get(ctx workflow.Context) (*directoryservice.RegisterCertificateOutput, error) {
	var output directoryservice.RegisterCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceRegisterEventTopicFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceRegisterEventTopicFuture) Get(ctx workflow.Context) (*directoryservice.RegisterEventTopicOutput, error) {
	var output directoryservice.RegisterEventTopicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceRejectSharedDirectoryFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceRejectSharedDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.RejectSharedDirectoryOutput, error) {
	var output directoryservice.RejectSharedDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceRemoveIpRoutesFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceRemoveIpRoutesFuture) Get(ctx workflow.Context) (*directoryservice.RemoveIpRoutesOutput, error) {
	var output directoryservice.RemoveIpRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceRemoveTagsFromResourceFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*directoryservice.RemoveTagsFromResourceOutput, error) {
	var output directoryservice.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceResetUserPasswordFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceResetUserPasswordFuture) Get(ctx workflow.Context) (*directoryservice.ResetUserPasswordOutput, error) {
	var output directoryservice.ResetUserPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceRestoreFromSnapshotFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceRestoreFromSnapshotFuture) Get(ctx workflow.Context) (*directoryservice.RestoreFromSnapshotOutput, error) {
	var output directoryservice.RestoreFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceShareDirectoryFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceShareDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.ShareDirectoryOutput, error) {
	var output directoryservice.ShareDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceStartSchemaExtensionFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceStartSchemaExtensionFuture) Get(ctx workflow.Context) (*directoryservice.StartSchemaExtensionOutput, error) {
	var output directoryservice.StartSchemaExtensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceUnshareDirectoryFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceUnshareDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.UnshareDirectoryOutput, error) {
	var output directoryservice.UnshareDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceUpdateConditionalForwarderFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceUpdateConditionalForwarderFuture) Get(ctx workflow.Context) (*directoryservice.UpdateConditionalForwarderOutput, error) {
	var output directoryservice.UpdateConditionalForwarderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceUpdateNumberOfDomainControllersFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceUpdateNumberOfDomainControllersFuture) Get(ctx workflow.Context) (*directoryservice.UpdateNumberOfDomainControllersOutput, error) {
	var output directoryservice.UpdateNumberOfDomainControllersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceUpdateRadiusFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceUpdateRadiusFuture) Get(ctx workflow.Context) (*directoryservice.UpdateRadiusOutput, error) {
	var output directoryservice.UpdateRadiusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceUpdateTrustFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceUpdateTrustFuture) Get(ctx workflow.Context) (*directoryservice.UpdateTrustOutput, error) {
	var output directoryservice.UpdateTrustOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryserviceVerifyTrustFuture struct {
	Future workflow.Future
}

func (r *DirectoryserviceVerifyTrustFuture) Get(ctx workflow.Context) (*directoryservice.VerifyTrustOutput, error) {
	var output directoryservice.VerifyTrustOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) AcceptSharedDirectory(ctx workflow.Context, input *directoryservice.AcceptSharedDirectoryInput) (*directoryservice.AcceptSharedDirectoryOutput, error) {
	var output directoryservice.AcceptSharedDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.AcceptSharedDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) AcceptSharedDirectoryAsync(ctx workflow.Context, input *directoryservice.AcceptSharedDirectoryInput) *DirectoryserviceAcceptSharedDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.AcceptSharedDirectory", input)
	return &DirectoryserviceAcceptSharedDirectoryFuture{Future: future}
}

func (a *DirectoryServiceStub) AddIpRoutes(ctx workflow.Context, input *directoryservice.AddIpRoutesInput) (*directoryservice.AddIpRoutesOutput, error) {
	var output directoryservice.AddIpRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.AddIpRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) AddIpRoutesAsync(ctx workflow.Context, input *directoryservice.AddIpRoutesInput) *DirectoryserviceAddIpRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.AddIpRoutes", input)
	return &DirectoryserviceAddIpRoutesFuture{Future: future}
}

func (a *DirectoryServiceStub) AddTagsToResource(ctx workflow.Context, input *directoryservice.AddTagsToResourceInput) (*directoryservice.AddTagsToResourceOutput, error) {
	var output directoryservice.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) AddTagsToResourceAsync(ctx workflow.Context, input *directoryservice.AddTagsToResourceInput) *DirectoryserviceAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.AddTagsToResource", input)
	return &DirectoryserviceAddTagsToResourceFuture{Future: future}
}

func (a *DirectoryServiceStub) CancelSchemaExtension(ctx workflow.Context, input *directoryservice.CancelSchemaExtensionInput) (*directoryservice.CancelSchemaExtensionOutput, error) {
	var output directoryservice.CancelSchemaExtensionOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.CancelSchemaExtension", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) CancelSchemaExtensionAsync(ctx workflow.Context, input *directoryservice.CancelSchemaExtensionInput) *DirectoryserviceCancelSchemaExtensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.CancelSchemaExtension", input)
	return &DirectoryserviceCancelSchemaExtensionFuture{Future: future}
}

func (a *DirectoryServiceStub) ConnectDirectory(ctx workflow.Context, input *directoryservice.ConnectDirectoryInput) (*directoryservice.ConnectDirectoryOutput, error) {
	var output directoryservice.ConnectDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.ConnectDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) ConnectDirectoryAsync(ctx workflow.Context, input *directoryservice.ConnectDirectoryInput) *DirectoryserviceConnectDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.ConnectDirectory", input)
	return &DirectoryserviceConnectDirectoryFuture{Future: future}
}

func (a *DirectoryServiceStub) CreateAlias(ctx workflow.Context, input *directoryservice.CreateAliasInput) (*directoryservice.CreateAliasOutput, error) {
	var output directoryservice.CreateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) CreateAliasAsync(ctx workflow.Context, input *directoryservice.CreateAliasInput) *DirectoryserviceCreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateAlias", input)
	return &DirectoryserviceCreateAliasFuture{Future: future}
}

func (a *DirectoryServiceStub) CreateComputer(ctx workflow.Context, input *directoryservice.CreateComputerInput) (*directoryservice.CreateComputerOutput, error) {
	var output directoryservice.CreateComputerOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateComputer", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) CreateComputerAsync(ctx workflow.Context, input *directoryservice.CreateComputerInput) *DirectoryserviceCreateComputerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateComputer", input)
	return &DirectoryserviceCreateComputerFuture{Future: future}
}

func (a *DirectoryServiceStub) CreateConditionalForwarder(ctx workflow.Context, input *directoryservice.CreateConditionalForwarderInput) (*directoryservice.CreateConditionalForwarderOutput, error) {
	var output directoryservice.CreateConditionalForwarderOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateConditionalForwarder", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) CreateConditionalForwarderAsync(ctx workflow.Context, input *directoryservice.CreateConditionalForwarderInput) *DirectoryserviceCreateConditionalForwarderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateConditionalForwarder", input)
	return &DirectoryserviceCreateConditionalForwarderFuture{Future: future}
}

func (a *DirectoryServiceStub) CreateDirectory(ctx workflow.Context, input *directoryservice.CreateDirectoryInput) (*directoryservice.CreateDirectoryOutput, error) {
	var output directoryservice.CreateDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) CreateDirectoryAsync(ctx workflow.Context, input *directoryservice.CreateDirectoryInput) *DirectoryserviceCreateDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateDirectory", input)
	return &DirectoryserviceCreateDirectoryFuture{Future: future}
}

func (a *DirectoryServiceStub) CreateLogSubscription(ctx workflow.Context, input *directoryservice.CreateLogSubscriptionInput) (*directoryservice.CreateLogSubscriptionOutput, error) {
	var output directoryservice.CreateLogSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateLogSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) CreateLogSubscriptionAsync(ctx workflow.Context, input *directoryservice.CreateLogSubscriptionInput) *DirectoryserviceCreateLogSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateLogSubscription", input)
	return &DirectoryserviceCreateLogSubscriptionFuture{Future: future}
}

func (a *DirectoryServiceStub) CreateMicrosoftAD(ctx workflow.Context, input *directoryservice.CreateMicrosoftADInput) (*directoryservice.CreateMicrosoftADOutput, error) {
	var output directoryservice.CreateMicrosoftADOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateMicrosoftAD", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) CreateMicrosoftADAsync(ctx workflow.Context, input *directoryservice.CreateMicrosoftADInput) *DirectoryserviceCreateMicrosoftADFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateMicrosoftAD", input)
	return &DirectoryserviceCreateMicrosoftADFuture{Future: future}
}

func (a *DirectoryServiceStub) CreateSnapshot(ctx workflow.Context, input *directoryservice.CreateSnapshotInput) (*directoryservice.CreateSnapshotOutput, error) {
	var output directoryservice.CreateSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) CreateSnapshotAsync(ctx workflow.Context, input *directoryservice.CreateSnapshotInput) *DirectoryserviceCreateSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateSnapshot", input)
	return &DirectoryserviceCreateSnapshotFuture{Future: future}
}

func (a *DirectoryServiceStub) CreateTrust(ctx workflow.Context, input *directoryservice.CreateTrustInput) (*directoryservice.CreateTrustOutput, error) {
	var output directoryservice.CreateTrustOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateTrust", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) CreateTrustAsync(ctx workflow.Context, input *directoryservice.CreateTrustInput) *DirectoryserviceCreateTrustFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.CreateTrust", input)
	return &DirectoryserviceCreateTrustFuture{Future: future}
}

func (a *DirectoryServiceStub) DeleteConditionalForwarder(ctx workflow.Context, input *directoryservice.DeleteConditionalForwarderInput) (*directoryservice.DeleteConditionalForwarderOutput, error) {
	var output directoryservice.DeleteConditionalForwarderOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeleteConditionalForwarder", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DeleteConditionalForwarderAsync(ctx workflow.Context, input *directoryservice.DeleteConditionalForwarderInput) *DirectoryserviceDeleteConditionalForwarderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeleteConditionalForwarder", input)
	return &DirectoryserviceDeleteConditionalForwarderFuture{Future: future}
}

func (a *DirectoryServiceStub) DeleteDirectory(ctx workflow.Context, input *directoryservice.DeleteDirectoryInput) (*directoryservice.DeleteDirectoryOutput, error) {
	var output directoryservice.DeleteDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeleteDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DeleteDirectoryAsync(ctx workflow.Context, input *directoryservice.DeleteDirectoryInput) *DirectoryserviceDeleteDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeleteDirectory", input)
	return &DirectoryserviceDeleteDirectoryFuture{Future: future}
}

func (a *DirectoryServiceStub) DeleteLogSubscription(ctx workflow.Context, input *directoryservice.DeleteLogSubscriptionInput) (*directoryservice.DeleteLogSubscriptionOutput, error) {
	var output directoryservice.DeleteLogSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeleteLogSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DeleteLogSubscriptionAsync(ctx workflow.Context, input *directoryservice.DeleteLogSubscriptionInput) *DirectoryserviceDeleteLogSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeleteLogSubscription", input)
	return &DirectoryserviceDeleteLogSubscriptionFuture{Future: future}
}

func (a *DirectoryServiceStub) DeleteSnapshot(ctx workflow.Context, input *directoryservice.DeleteSnapshotInput) (*directoryservice.DeleteSnapshotOutput, error) {
	var output directoryservice.DeleteSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeleteSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DeleteSnapshotAsync(ctx workflow.Context, input *directoryservice.DeleteSnapshotInput) *DirectoryserviceDeleteSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeleteSnapshot", input)
	return &DirectoryserviceDeleteSnapshotFuture{Future: future}
}

func (a *DirectoryServiceStub) DeleteTrust(ctx workflow.Context, input *directoryservice.DeleteTrustInput) (*directoryservice.DeleteTrustOutput, error) {
	var output directoryservice.DeleteTrustOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeleteTrust", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DeleteTrustAsync(ctx workflow.Context, input *directoryservice.DeleteTrustInput) *DirectoryserviceDeleteTrustFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeleteTrust", input)
	return &DirectoryserviceDeleteTrustFuture{Future: future}
}

func (a *DirectoryServiceStub) DeregisterCertificate(ctx workflow.Context, input *directoryservice.DeregisterCertificateInput) (*directoryservice.DeregisterCertificateOutput, error) {
	var output directoryservice.DeregisterCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeregisterCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DeregisterCertificateAsync(ctx workflow.Context, input *directoryservice.DeregisterCertificateInput) *DirectoryserviceDeregisterCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeregisterCertificate", input)
	return &DirectoryserviceDeregisterCertificateFuture{Future: future}
}

func (a *DirectoryServiceStub) DeregisterEventTopic(ctx workflow.Context, input *directoryservice.DeregisterEventTopicInput) (*directoryservice.DeregisterEventTopicOutput, error) {
	var output directoryservice.DeregisterEventTopicOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeregisterEventTopic", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DeregisterEventTopicAsync(ctx workflow.Context, input *directoryservice.DeregisterEventTopicInput) *DirectoryserviceDeregisterEventTopicFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DeregisterEventTopic", input)
	return &DirectoryserviceDeregisterEventTopicFuture{Future: future}
}

func (a *DirectoryServiceStub) DescribeCertificate(ctx workflow.Context, input *directoryservice.DescribeCertificateInput) (*directoryservice.DescribeCertificateOutput, error) {
	var output directoryservice.DescribeCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DescribeCertificateAsync(ctx workflow.Context, input *directoryservice.DescribeCertificateInput) *DirectoryserviceDescribeCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeCertificate", input)
	return &DirectoryserviceDescribeCertificateFuture{Future: future}
}

func (a *DirectoryServiceStub) DescribeConditionalForwarders(ctx workflow.Context, input *directoryservice.DescribeConditionalForwardersInput) (*directoryservice.DescribeConditionalForwardersOutput, error) {
	var output directoryservice.DescribeConditionalForwardersOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeConditionalForwarders", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DescribeConditionalForwardersAsync(ctx workflow.Context, input *directoryservice.DescribeConditionalForwardersInput) *DirectoryserviceDescribeConditionalForwardersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeConditionalForwarders", input)
	return &DirectoryserviceDescribeConditionalForwardersFuture{Future: future}
}

func (a *DirectoryServiceStub) DescribeDirectories(ctx workflow.Context, input *directoryservice.DescribeDirectoriesInput) (*directoryservice.DescribeDirectoriesOutput, error) {
	var output directoryservice.DescribeDirectoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeDirectories", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DescribeDirectoriesAsync(ctx workflow.Context, input *directoryservice.DescribeDirectoriesInput) *DirectoryserviceDescribeDirectoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeDirectories", input)
	return &DirectoryserviceDescribeDirectoriesFuture{Future: future}
}

func (a *DirectoryServiceStub) DescribeDomainControllers(ctx workflow.Context, input *directoryservice.DescribeDomainControllersInput) (*directoryservice.DescribeDomainControllersOutput, error) {
	var output directoryservice.DescribeDomainControllersOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeDomainControllers", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DescribeDomainControllersAsync(ctx workflow.Context, input *directoryservice.DescribeDomainControllersInput) *DirectoryserviceDescribeDomainControllersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeDomainControllers", input)
	return &DirectoryserviceDescribeDomainControllersFuture{Future: future}
}

func (a *DirectoryServiceStub) DescribeEventTopics(ctx workflow.Context, input *directoryservice.DescribeEventTopicsInput) (*directoryservice.DescribeEventTopicsOutput, error) {
	var output directoryservice.DescribeEventTopicsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeEventTopics", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DescribeEventTopicsAsync(ctx workflow.Context, input *directoryservice.DescribeEventTopicsInput) *DirectoryserviceDescribeEventTopicsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeEventTopics", input)
	return &DirectoryserviceDescribeEventTopicsFuture{Future: future}
}

func (a *DirectoryServiceStub) DescribeLDAPSSettings(ctx workflow.Context, input *directoryservice.DescribeLDAPSSettingsInput) (*directoryservice.DescribeLDAPSSettingsOutput, error) {
	var output directoryservice.DescribeLDAPSSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeLDAPSSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DescribeLDAPSSettingsAsync(ctx workflow.Context, input *directoryservice.DescribeLDAPSSettingsInput) *DirectoryserviceDescribeLDAPSSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeLDAPSSettings", input)
	return &DirectoryserviceDescribeLDAPSSettingsFuture{Future: future}
}

func (a *DirectoryServiceStub) DescribeSharedDirectories(ctx workflow.Context, input *directoryservice.DescribeSharedDirectoriesInput) (*directoryservice.DescribeSharedDirectoriesOutput, error) {
	var output directoryservice.DescribeSharedDirectoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeSharedDirectories", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DescribeSharedDirectoriesAsync(ctx workflow.Context, input *directoryservice.DescribeSharedDirectoriesInput) *DirectoryserviceDescribeSharedDirectoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeSharedDirectories", input)
	return &DirectoryserviceDescribeSharedDirectoriesFuture{Future: future}
}

func (a *DirectoryServiceStub) DescribeSnapshots(ctx workflow.Context, input *directoryservice.DescribeSnapshotsInput) (*directoryservice.DescribeSnapshotsOutput, error) {
	var output directoryservice.DescribeSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DescribeSnapshotsAsync(ctx workflow.Context, input *directoryservice.DescribeSnapshotsInput) *DirectoryserviceDescribeSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeSnapshots", input)
	return &DirectoryserviceDescribeSnapshotsFuture{Future: future}
}

func (a *DirectoryServiceStub) DescribeTrusts(ctx workflow.Context, input *directoryservice.DescribeTrustsInput) (*directoryservice.DescribeTrustsOutput, error) {
	var output directoryservice.DescribeTrustsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeTrusts", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DescribeTrustsAsync(ctx workflow.Context, input *directoryservice.DescribeTrustsInput) *DirectoryserviceDescribeTrustsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DescribeTrusts", input)
	return &DirectoryserviceDescribeTrustsFuture{Future: future}
}

func (a *DirectoryServiceStub) DisableLDAPS(ctx workflow.Context, input *directoryservice.DisableLDAPSInput) (*directoryservice.DisableLDAPSOutput, error) {
	var output directoryservice.DisableLDAPSOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DisableLDAPS", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DisableLDAPSAsync(ctx workflow.Context, input *directoryservice.DisableLDAPSInput) *DirectoryserviceDisableLDAPSFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DisableLDAPS", input)
	return &DirectoryserviceDisableLDAPSFuture{Future: future}
}

func (a *DirectoryServiceStub) DisableRadius(ctx workflow.Context, input *directoryservice.DisableRadiusInput) (*directoryservice.DisableRadiusOutput, error) {
	var output directoryservice.DisableRadiusOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DisableRadius", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DisableRadiusAsync(ctx workflow.Context, input *directoryservice.DisableRadiusInput) *DirectoryserviceDisableRadiusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DisableRadius", input)
	return &DirectoryserviceDisableRadiusFuture{Future: future}
}

func (a *DirectoryServiceStub) DisableSso(ctx workflow.Context, input *directoryservice.DisableSsoInput) (*directoryservice.DisableSsoOutput, error) {
	var output directoryservice.DisableSsoOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.DisableSso", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) DisableSsoAsync(ctx workflow.Context, input *directoryservice.DisableSsoInput) *DirectoryserviceDisableSsoFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.DisableSso", input)
	return &DirectoryserviceDisableSsoFuture{Future: future}
}

func (a *DirectoryServiceStub) EnableLDAPS(ctx workflow.Context, input *directoryservice.EnableLDAPSInput) (*directoryservice.EnableLDAPSOutput, error) {
	var output directoryservice.EnableLDAPSOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.EnableLDAPS", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) EnableLDAPSAsync(ctx workflow.Context, input *directoryservice.EnableLDAPSInput) *DirectoryserviceEnableLDAPSFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.EnableLDAPS", input)
	return &DirectoryserviceEnableLDAPSFuture{Future: future}
}

func (a *DirectoryServiceStub) EnableRadius(ctx workflow.Context, input *directoryservice.EnableRadiusInput) (*directoryservice.EnableRadiusOutput, error) {
	var output directoryservice.EnableRadiusOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.EnableRadius", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) EnableRadiusAsync(ctx workflow.Context, input *directoryservice.EnableRadiusInput) *DirectoryserviceEnableRadiusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.EnableRadius", input)
	return &DirectoryserviceEnableRadiusFuture{Future: future}
}

func (a *DirectoryServiceStub) EnableSso(ctx workflow.Context, input *directoryservice.EnableSsoInput) (*directoryservice.EnableSsoOutput, error) {
	var output directoryservice.EnableSsoOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.EnableSso", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) EnableSsoAsync(ctx workflow.Context, input *directoryservice.EnableSsoInput) *DirectoryserviceEnableSsoFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.EnableSso", input)
	return &DirectoryserviceEnableSsoFuture{Future: future}
}

func (a *DirectoryServiceStub) GetDirectoryLimits(ctx workflow.Context, input *directoryservice.GetDirectoryLimitsInput) (*directoryservice.GetDirectoryLimitsOutput, error) {
	var output directoryservice.GetDirectoryLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.GetDirectoryLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) GetDirectoryLimitsAsync(ctx workflow.Context, input *directoryservice.GetDirectoryLimitsInput) *DirectoryserviceGetDirectoryLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.GetDirectoryLimits", input)
	return &DirectoryserviceGetDirectoryLimitsFuture{Future: future}
}

func (a *DirectoryServiceStub) GetSnapshotLimits(ctx workflow.Context, input *directoryservice.GetSnapshotLimitsInput) (*directoryservice.GetSnapshotLimitsOutput, error) {
	var output directoryservice.GetSnapshotLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.GetSnapshotLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) GetSnapshotLimitsAsync(ctx workflow.Context, input *directoryservice.GetSnapshotLimitsInput) *DirectoryserviceGetSnapshotLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.GetSnapshotLimits", input)
	return &DirectoryserviceGetSnapshotLimitsFuture{Future: future}
}

func (a *DirectoryServiceStub) ListCertificates(ctx workflow.Context, input *directoryservice.ListCertificatesInput) (*directoryservice.ListCertificatesOutput, error) {
	var output directoryservice.ListCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.ListCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) ListCertificatesAsync(ctx workflow.Context, input *directoryservice.ListCertificatesInput) *DirectoryserviceListCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.ListCertificates", input)
	return &DirectoryserviceListCertificatesFuture{Future: future}
}

func (a *DirectoryServiceStub) ListIpRoutes(ctx workflow.Context, input *directoryservice.ListIpRoutesInput) (*directoryservice.ListIpRoutesOutput, error) {
	var output directoryservice.ListIpRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.ListIpRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) ListIpRoutesAsync(ctx workflow.Context, input *directoryservice.ListIpRoutesInput) *DirectoryserviceListIpRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.ListIpRoutes", input)
	return &DirectoryserviceListIpRoutesFuture{Future: future}
}

func (a *DirectoryServiceStub) ListLogSubscriptions(ctx workflow.Context, input *directoryservice.ListLogSubscriptionsInput) (*directoryservice.ListLogSubscriptionsOutput, error) {
	var output directoryservice.ListLogSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.ListLogSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) ListLogSubscriptionsAsync(ctx workflow.Context, input *directoryservice.ListLogSubscriptionsInput) *DirectoryserviceListLogSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.ListLogSubscriptions", input)
	return &DirectoryserviceListLogSubscriptionsFuture{Future: future}
}

func (a *DirectoryServiceStub) ListSchemaExtensions(ctx workflow.Context, input *directoryservice.ListSchemaExtensionsInput) (*directoryservice.ListSchemaExtensionsOutput, error) {
	var output directoryservice.ListSchemaExtensionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.ListSchemaExtensions", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) ListSchemaExtensionsAsync(ctx workflow.Context, input *directoryservice.ListSchemaExtensionsInput) *DirectoryserviceListSchemaExtensionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.ListSchemaExtensions", input)
	return &DirectoryserviceListSchemaExtensionsFuture{Future: future}
}

func (a *DirectoryServiceStub) ListTagsForResource(ctx workflow.Context, input *directoryservice.ListTagsForResourceInput) (*directoryservice.ListTagsForResourceOutput, error) {
	var output directoryservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) ListTagsForResourceAsync(ctx workflow.Context, input *directoryservice.ListTagsForResourceInput) *DirectoryserviceListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.ListTagsForResource", input)
	return &DirectoryserviceListTagsForResourceFuture{Future: future}
}

func (a *DirectoryServiceStub) RegisterCertificate(ctx workflow.Context, input *directoryservice.RegisterCertificateInput) (*directoryservice.RegisterCertificateOutput, error) {
	var output directoryservice.RegisterCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.RegisterCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) RegisterCertificateAsync(ctx workflow.Context, input *directoryservice.RegisterCertificateInput) *DirectoryserviceRegisterCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.RegisterCertificate", input)
	return &DirectoryserviceRegisterCertificateFuture{Future: future}
}

func (a *DirectoryServiceStub) RegisterEventTopic(ctx workflow.Context, input *directoryservice.RegisterEventTopicInput) (*directoryservice.RegisterEventTopicOutput, error) {
	var output directoryservice.RegisterEventTopicOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.RegisterEventTopic", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) RegisterEventTopicAsync(ctx workflow.Context, input *directoryservice.RegisterEventTopicInput) *DirectoryserviceRegisterEventTopicFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.RegisterEventTopic", input)
	return &DirectoryserviceRegisterEventTopicFuture{Future: future}
}

func (a *DirectoryServiceStub) RejectSharedDirectory(ctx workflow.Context, input *directoryservice.RejectSharedDirectoryInput) (*directoryservice.RejectSharedDirectoryOutput, error) {
	var output directoryservice.RejectSharedDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.RejectSharedDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) RejectSharedDirectoryAsync(ctx workflow.Context, input *directoryservice.RejectSharedDirectoryInput) *DirectoryserviceRejectSharedDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.RejectSharedDirectory", input)
	return &DirectoryserviceRejectSharedDirectoryFuture{Future: future}
}

func (a *DirectoryServiceStub) RemoveIpRoutes(ctx workflow.Context, input *directoryservice.RemoveIpRoutesInput) (*directoryservice.RemoveIpRoutesOutput, error) {
	var output directoryservice.RemoveIpRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.RemoveIpRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) RemoveIpRoutesAsync(ctx workflow.Context, input *directoryservice.RemoveIpRoutesInput) *DirectoryserviceRemoveIpRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.RemoveIpRoutes", input)
	return &DirectoryserviceRemoveIpRoutesFuture{Future: future}
}

func (a *DirectoryServiceStub) RemoveTagsFromResource(ctx workflow.Context, input *directoryservice.RemoveTagsFromResourceInput) (*directoryservice.RemoveTagsFromResourceOutput, error) {
	var output directoryservice.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *directoryservice.RemoveTagsFromResourceInput) *DirectoryserviceRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.RemoveTagsFromResource", input)
	return &DirectoryserviceRemoveTagsFromResourceFuture{Future: future}
}

func (a *DirectoryServiceStub) ResetUserPassword(ctx workflow.Context, input *directoryservice.ResetUserPasswordInput) (*directoryservice.ResetUserPasswordOutput, error) {
	var output directoryservice.ResetUserPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.ResetUserPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) ResetUserPasswordAsync(ctx workflow.Context, input *directoryservice.ResetUserPasswordInput) *DirectoryserviceResetUserPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.ResetUserPassword", input)
	return &DirectoryserviceResetUserPasswordFuture{Future: future}
}

func (a *DirectoryServiceStub) RestoreFromSnapshot(ctx workflow.Context, input *directoryservice.RestoreFromSnapshotInput) (*directoryservice.RestoreFromSnapshotOutput, error) {
	var output directoryservice.RestoreFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.RestoreFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) RestoreFromSnapshotAsync(ctx workflow.Context, input *directoryservice.RestoreFromSnapshotInput) *DirectoryserviceRestoreFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.RestoreFromSnapshot", input)
	return &DirectoryserviceRestoreFromSnapshotFuture{Future: future}
}

func (a *DirectoryServiceStub) ShareDirectory(ctx workflow.Context, input *directoryservice.ShareDirectoryInput) (*directoryservice.ShareDirectoryOutput, error) {
	var output directoryservice.ShareDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.ShareDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) ShareDirectoryAsync(ctx workflow.Context, input *directoryservice.ShareDirectoryInput) *DirectoryserviceShareDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.ShareDirectory", input)
	return &DirectoryserviceShareDirectoryFuture{Future: future}
}

func (a *DirectoryServiceStub) StartSchemaExtension(ctx workflow.Context, input *directoryservice.StartSchemaExtensionInput) (*directoryservice.StartSchemaExtensionOutput, error) {
	var output directoryservice.StartSchemaExtensionOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.StartSchemaExtension", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) StartSchemaExtensionAsync(ctx workflow.Context, input *directoryservice.StartSchemaExtensionInput) *DirectoryserviceStartSchemaExtensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.StartSchemaExtension", input)
	return &DirectoryserviceStartSchemaExtensionFuture{Future: future}
}

func (a *DirectoryServiceStub) UnshareDirectory(ctx workflow.Context, input *directoryservice.UnshareDirectoryInput) (*directoryservice.UnshareDirectoryOutput, error) {
	var output directoryservice.UnshareDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.UnshareDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) UnshareDirectoryAsync(ctx workflow.Context, input *directoryservice.UnshareDirectoryInput) *DirectoryserviceUnshareDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.UnshareDirectory", input)
	return &DirectoryserviceUnshareDirectoryFuture{Future: future}
}

func (a *DirectoryServiceStub) UpdateConditionalForwarder(ctx workflow.Context, input *directoryservice.UpdateConditionalForwarderInput) (*directoryservice.UpdateConditionalForwarderOutput, error) {
	var output directoryservice.UpdateConditionalForwarderOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.UpdateConditionalForwarder", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) UpdateConditionalForwarderAsync(ctx workflow.Context, input *directoryservice.UpdateConditionalForwarderInput) *DirectoryserviceUpdateConditionalForwarderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.UpdateConditionalForwarder", input)
	return &DirectoryserviceUpdateConditionalForwarderFuture{Future: future}
}

func (a *DirectoryServiceStub) UpdateNumberOfDomainControllers(ctx workflow.Context, input *directoryservice.UpdateNumberOfDomainControllersInput) (*directoryservice.UpdateNumberOfDomainControllersOutput, error) {
	var output directoryservice.UpdateNumberOfDomainControllersOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.UpdateNumberOfDomainControllers", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) UpdateNumberOfDomainControllersAsync(ctx workflow.Context, input *directoryservice.UpdateNumberOfDomainControllersInput) *DirectoryserviceUpdateNumberOfDomainControllersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.UpdateNumberOfDomainControllers", input)
	return &DirectoryserviceUpdateNumberOfDomainControllersFuture{Future: future}
}

func (a *DirectoryServiceStub) UpdateRadius(ctx workflow.Context, input *directoryservice.UpdateRadiusInput) (*directoryservice.UpdateRadiusOutput, error) {
	var output directoryservice.UpdateRadiusOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.UpdateRadius", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) UpdateRadiusAsync(ctx workflow.Context, input *directoryservice.UpdateRadiusInput) *DirectoryserviceUpdateRadiusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.UpdateRadius", input)
	return &DirectoryserviceUpdateRadiusFuture{Future: future}
}

func (a *DirectoryServiceStub) UpdateTrust(ctx workflow.Context, input *directoryservice.UpdateTrustInput) (*directoryservice.UpdateTrustOutput, error) {
	var output directoryservice.UpdateTrustOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.UpdateTrust", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) UpdateTrustAsync(ctx workflow.Context, input *directoryservice.UpdateTrustInput) *DirectoryserviceUpdateTrustFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.UpdateTrust", input)
	return &DirectoryserviceUpdateTrustFuture{Future: future}
}

func (a *DirectoryServiceStub) VerifyTrust(ctx workflow.Context, input *directoryservice.VerifyTrustInput) (*directoryservice.VerifyTrustOutput, error) {
	var output directoryservice.VerifyTrustOutput
	err := workflow.ExecuteActivity(ctx, "aws.directoryservice.VerifyTrust", input).Get(ctx, &output)
	return &output, err
}

func (a *DirectoryServiceStub) VerifyTrustAsync(ctx workflow.Context, input *directoryservice.VerifyTrustInput) *DirectoryserviceVerifyTrustFuture {
	future := workflow.ExecuteActivity(ctx, "aws.directoryservice.VerifyTrust", input)
	return &DirectoryserviceVerifyTrustFuture{Future: future}
}
