// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/rekognition"
	"go.temporal.io/sdk/workflow"
)

type RekognitionClient interface {
	CompareFaces(ctx workflow.Context, input *rekognition.CompareFacesInput) (*rekognition.CompareFacesOutput, error)
	CompareFacesAsync(ctx workflow.Context, input *rekognition.CompareFacesInput) *RekognitionCompareFacesFuture

	CreateCollection(ctx workflow.Context, input *rekognition.CreateCollectionInput) (*rekognition.CreateCollectionOutput, error)
	CreateCollectionAsync(ctx workflow.Context, input *rekognition.CreateCollectionInput) *RekognitionCreateCollectionFuture

	CreateProject(ctx workflow.Context, input *rekognition.CreateProjectInput) (*rekognition.CreateProjectOutput, error)
	CreateProjectAsync(ctx workflow.Context, input *rekognition.CreateProjectInput) *RekognitionCreateProjectFuture

	CreateProjectVersion(ctx workflow.Context, input *rekognition.CreateProjectVersionInput) (*rekognition.CreateProjectVersionOutput, error)
	CreateProjectVersionAsync(ctx workflow.Context, input *rekognition.CreateProjectVersionInput) *RekognitionCreateProjectVersionFuture

	CreateStreamProcessor(ctx workflow.Context, input *rekognition.CreateStreamProcessorInput) (*rekognition.CreateStreamProcessorOutput, error)
	CreateStreamProcessorAsync(ctx workflow.Context, input *rekognition.CreateStreamProcessorInput) *RekognitionCreateStreamProcessorFuture

	DeleteCollection(ctx workflow.Context, input *rekognition.DeleteCollectionInput) (*rekognition.DeleteCollectionOutput, error)
	DeleteCollectionAsync(ctx workflow.Context, input *rekognition.DeleteCollectionInput) *RekognitionDeleteCollectionFuture

	DeleteFaces(ctx workflow.Context, input *rekognition.DeleteFacesInput) (*rekognition.DeleteFacesOutput, error)
	DeleteFacesAsync(ctx workflow.Context, input *rekognition.DeleteFacesInput) *RekognitionDeleteFacesFuture

	DeleteProject(ctx workflow.Context, input *rekognition.DeleteProjectInput) (*rekognition.DeleteProjectOutput, error)
	DeleteProjectAsync(ctx workflow.Context, input *rekognition.DeleteProjectInput) *RekognitionDeleteProjectFuture

	DeleteProjectVersion(ctx workflow.Context, input *rekognition.DeleteProjectVersionInput) (*rekognition.DeleteProjectVersionOutput, error)
	DeleteProjectVersionAsync(ctx workflow.Context, input *rekognition.DeleteProjectVersionInput) *RekognitionDeleteProjectVersionFuture

	DeleteStreamProcessor(ctx workflow.Context, input *rekognition.DeleteStreamProcessorInput) (*rekognition.DeleteStreamProcessorOutput, error)
	DeleteStreamProcessorAsync(ctx workflow.Context, input *rekognition.DeleteStreamProcessorInput) *RekognitionDeleteStreamProcessorFuture

	DescribeCollection(ctx workflow.Context, input *rekognition.DescribeCollectionInput) (*rekognition.DescribeCollectionOutput, error)
	DescribeCollectionAsync(ctx workflow.Context, input *rekognition.DescribeCollectionInput) *RekognitionDescribeCollectionFuture

	DescribeProjectVersions(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) (*rekognition.DescribeProjectVersionsOutput, error)
	DescribeProjectVersionsAsync(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) *RekognitionDescribeProjectVersionsFuture

	DescribeProjects(ctx workflow.Context, input *rekognition.DescribeProjectsInput) (*rekognition.DescribeProjectsOutput, error)
	DescribeProjectsAsync(ctx workflow.Context, input *rekognition.DescribeProjectsInput) *RekognitionDescribeProjectsFuture

	DescribeStreamProcessor(ctx workflow.Context, input *rekognition.DescribeStreamProcessorInput) (*rekognition.DescribeStreamProcessorOutput, error)
	DescribeStreamProcessorAsync(ctx workflow.Context, input *rekognition.DescribeStreamProcessorInput) *RekognitionDescribeStreamProcessorFuture

	DetectCustomLabels(ctx workflow.Context, input *rekognition.DetectCustomLabelsInput) (*rekognition.DetectCustomLabelsOutput, error)
	DetectCustomLabelsAsync(ctx workflow.Context, input *rekognition.DetectCustomLabelsInput) *RekognitionDetectCustomLabelsFuture

	DetectFaces(ctx workflow.Context, input *rekognition.DetectFacesInput) (*rekognition.DetectFacesOutput, error)
	DetectFacesAsync(ctx workflow.Context, input *rekognition.DetectFacesInput) *RekognitionDetectFacesFuture

	DetectLabels(ctx workflow.Context, input *rekognition.DetectLabelsInput) (*rekognition.DetectLabelsOutput, error)
	DetectLabelsAsync(ctx workflow.Context, input *rekognition.DetectLabelsInput) *RekognitionDetectLabelsFuture

	DetectModerationLabels(ctx workflow.Context, input *rekognition.DetectModerationLabelsInput) (*rekognition.DetectModerationLabelsOutput, error)
	DetectModerationLabelsAsync(ctx workflow.Context, input *rekognition.DetectModerationLabelsInput) *RekognitionDetectModerationLabelsFuture

	DetectText(ctx workflow.Context, input *rekognition.DetectTextInput) (*rekognition.DetectTextOutput, error)
	DetectTextAsync(ctx workflow.Context, input *rekognition.DetectTextInput) *RekognitionDetectTextFuture

	GetCelebrityInfo(ctx workflow.Context, input *rekognition.GetCelebrityInfoInput) (*rekognition.GetCelebrityInfoOutput, error)
	GetCelebrityInfoAsync(ctx workflow.Context, input *rekognition.GetCelebrityInfoInput) *RekognitionGetCelebrityInfoFuture

	GetCelebrityRecognition(ctx workflow.Context, input *rekognition.GetCelebrityRecognitionInput) (*rekognition.GetCelebrityRecognitionOutput, error)
	GetCelebrityRecognitionAsync(ctx workflow.Context, input *rekognition.GetCelebrityRecognitionInput) *RekognitionGetCelebrityRecognitionFuture

	GetContentModeration(ctx workflow.Context, input *rekognition.GetContentModerationInput) (*rekognition.GetContentModerationOutput, error)
	GetContentModerationAsync(ctx workflow.Context, input *rekognition.GetContentModerationInput) *RekognitionGetContentModerationFuture

	GetFaceDetection(ctx workflow.Context, input *rekognition.GetFaceDetectionInput) (*rekognition.GetFaceDetectionOutput, error)
	GetFaceDetectionAsync(ctx workflow.Context, input *rekognition.GetFaceDetectionInput) *RekognitionGetFaceDetectionFuture

	GetFaceSearch(ctx workflow.Context, input *rekognition.GetFaceSearchInput) (*rekognition.GetFaceSearchOutput, error)
	GetFaceSearchAsync(ctx workflow.Context, input *rekognition.GetFaceSearchInput) *RekognitionGetFaceSearchFuture

	GetLabelDetection(ctx workflow.Context, input *rekognition.GetLabelDetectionInput) (*rekognition.GetLabelDetectionOutput, error)
	GetLabelDetectionAsync(ctx workflow.Context, input *rekognition.GetLabelDetectionInput) *RekognitionGetLabelDetectionFuture

	GetPersonTracking(ctx workflow.Context, input *rekognition.GetPersonTrackingInput) (*rekognition.GetPersonTrackingOutput, error)
	GetPersonTrackingAsync(ctx workflow.Context, input *rekognition.GetPersonTrackingInput) *RekognitionGetPersonTrackingFuture

	GetSegmentDetection(ctx workflow.Context, input *rekognition.GetSegmentDetectionInput) (*rekognition.GetSegmentDetectionOutput, error)
	GetSegmentDetectionAsync(ctx workflow.Context, input *rekognition.GetSegmentDetectionInput) *RekognitionGetSegmentDetectionFuture

	GetTextDetection(ctx workflow.Context, input *rekognition.GetTextDetectionInput) (*rekognition.GetTextDetectionOutput, error)
	GetTextDetectionAsync(ctx workflow.Context, input *rekognition.GetTextDetectionInput) *RekognitionGetTextDetectionFuture

	IndexFaces(ctx workflow.Context, input *rekognition.IndexFacesInput) (*rekognition.IndexFacesOutput, error)
	IndexFacesAsync(ctx workflow.Context, input *rekognition.IndexFacesInput) *RekognitionIndexFacesFuture

	ListCollections(ctx workflow.Context, input *rekognition.ListCollectionsInput) (*rekognition.ListCollectionsOutput, error)
	ListCollectionsAsync(ctx workflow.Context, input *rekognition.ListCollectionsInput) *RekognitionListCollectionsFuture

	ListFaces(ctx workflow.Context, input *rekognition.ListFacesInput) (*rekognition.ListFacesOutput, error)
	ListFacesAsync(ctx workflow.Context, input *rekognition.ListFacesInput) *RekognitionListFacesFuture

	ListStreamProcessors(ctx workflow.Context, input *rekognition.ListStreamProcessorsInput) (*rekognition.ListStreamProcessorsOutput, error)
	ListStreamProcessorsAsync(ctx workflow.Context, input *rekognition.ListStreamProcessorsInput) *RekognitionListStreamProcessorsFuture

	RecognizeCelebrities(ctx workflow.Context, input *rekognition.RecognizeCelebritiesInput) (*rekognition.RecognizeCelebritiesOutput, error)
	RecognizeCelebritiesAsync(ctx workflow.Context, input *rekognition.RecognizeCelebritiesInput) *RekognitionRecognizeCelebritiesFuture

	SearchFaces(ctx workflow.Context, input *rekognition.SearchFacesInput) (*rekognition.SearchFacesOutput, error)
	SearchFacesAsync(ctx workflow.Context, input *rekognition.SearchFacesInput) *RekognitionSearchFacesFuture

	SearchFacesByImage(ctx workflow.Context, input *rekognition.SearchFacesByImageInput) (*rekognition.SearchFacesByImageOutput, error)
	SearchFacesByImageAsync(ctx workflow.Context, input *rekognition.SearchFacesByImageInput) *RekognitionSearchFacesByImageFuture

	StartCelebrityRecognition(ctx workflow.Context, input *rekognition.StartCelebrityRecognitionInput) (*rekognition.StartCelebrityRecognitionOutput, error)
	StartCelebrityRecognitionAsync(ctx workflow.Context, input *rekognition.StartCelebrityRecognitionInput) *RekognitionStartCelebrityRecognitionFuture

	StartContentModeration(ctx workflow.Context, input *rekognition.StartContentModerationInput) (*rekognition.StartContentModerationOutput, error)
	StartContentModerationAsync(ctx workflow.Context, input *rekognition.StartContentModerationInput) *RekognitionStartContentModerationFuture

	StartFaceDetection(ctx workflow.Context, input *rekognition.StartFaceDetectionInput) (*rekognition.StartFaceDetectionOutput, error)
	StartFaceDetectionAsync(ctx workflow.Context, input *rekognition.StartFaceDetectionInput) *RekognitionStartFaceDetectionFuture

	StartFaceSearch(ctx workflow.Context, input *rekognition.StartFaceSearchInput) (*rekognition.StartFaceSearchOutput, error)
	StartFaceSearchAsync(ctx workflow.Context, input *rekognition.StartFaceSearchInput) *RekognitionStartFaceSearchFuture

	StartLabelDetection(ctx workflow.Context, input *rekognition.StartLabelDetectionInput) (*rekognition.StartLabelDetectionOutput, error)
	StartLabelDetectionAsync(ctx workflow.Context, input *rekognition.StartLabelDetectionInput) *RekognitionStartLabelDetectionFuture

	StartPersonTracking(ctx workflow.Context, input *rekognition.StartPersonTrackingInput) (*rekognition.StartPersonTrackingOutput, error)
	StartPersonTrackingAsync(ctx workflow.Context, input *rekognition.StartPersonTrackingInput) *RekognitionStartPersonTrackingFuture

	StartProjectVersion(ctx workflow.Context, input *rekognition.StartProjectVersionInput) (*rekognition.StartProjectVersionOutput, error)
	StartProjectVersionAsync(ctx workflow.Context, input *rekognition.StartProjectVersionInput) *RekognitionStartProjectVersionFuture

	StartSegmentDetection(ctx workflow.Context, input *rekognition.StartSegmentDetectionInput) (*rekognition.StartSegmentDetectionOutput, error)
	StartSegmentDetectionAsync(ctx workflow.Context, input *rekognition.StartSegmentDetectionInput) *RekognitionStartSegmentDetectionFuture

	StartStreamProcessor(ctx workflow.Context, input *rekognition.StartStreamProcessorInput) (*rekognition.StartStreamProcessorOutput, error)
	StartStreamProcessorAsync(ctx workflow.Context, input *rekognition.StartStreamProcessorInput) *RekognitionStartStreamProcessorFuture

	StartTextDetection(ctx workflow.Context, input *rekognition.StartTextDetectionInput) (*rekognition.StartTextDetectionOutput, error)
	StartTextDetectionAsync(ctx workflow.Context, input *rekognition.StartTextDetectionInput) *RekognitionStartTextDetectionFuture

	StopProjectVersion(ctx workflow.Context, input *rekognition.StopProjectVersionInput) (*rekognition.StopProjectVersionOutput, error)
	StopProjectVersionAsync(ctx workflow.Context, input *rekognition.StopProjectVersionInput) *RekognitionStopProjectVersionFuture

	StopStreamProcessor(ctx workflow.Context, input *rekognition.StopStreamProcessorInput) (*rekognition.StopStreamProcessorOutput, error)
	StopStreamProcessorAsync(ctx workflow.Context, input *rekognition.StopStreamProcessorInput) *RekognitionStopStreamProcessorFuture

	WaitUntilProjectVersionRunning(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) error
	WaitUntilProjectVersionRunningAsync(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) workflow.Future

	WaitUntilProjectVersionTrainingCompleted(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) error
	WaitUntilProjectVersionTrainingCompletedAsync(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) workflow.Future
}

type RekognitionStub struct{}

func NewRekognitionStub() RekognitionClient {
	return &RekognitionStub{}
}

type RekognitionCompareFacesFuture struct {
	Future workflow.Future
}

func (r *RekognitionCompareFacesFuture) Get(ctx workflow.Context) (*rekognition.CompareFacesOutput, error) {
	var output rekognition.CompareFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionCreateCollectionFuture struct {
	Future workflow.Future
}

func (r *RekognitionCreateCollectionFuture) Get(ctx workflow.Context) (*rekognition.CreateCollectionOutput, error) {
	var output rekognition.CreateCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionCreateProjectFuture struct {
	Future workflow.Future
}

func (r *RekognitionCreateProjectFuture) Get(ctx workflow.Context) (*rekognition.CreateProjectOutput, error) {
	var output rekognition.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionCreateProjectVersionFuture struct {
	Future workflow.Future
}

func (r *RekognitionCreateProjectVersionFuture) Get(ctx workflow.Context) (*rekognition.CreateProjectVersionOutput, error) {
	var output rekognition.CreateProjectVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionCreateStreamProcessorFuture struct {
	Future workflow.Future
}

func (r *RekognitionCreateStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.CreateStreamProcessorOutput, error) {
	var output rekognition.CreateStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDeleteCollectionFuture struct {
	Future workflow.Future
}

func (r *RekognitionDeleteCollectionFuture) Get(ctx workflow.Context) (*rekognition.DeleteCollectionOutput, error) {
	var output rekognition.DeleteCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDeleteFacesFuture struct {
	Future workflow.Future
}

func (r *RekognitionDeleteFacesFuture) Get(ctx workflow.Context) (*rekognition.DeleteFacesOutput, error) {
	var output rekognition.DeleteFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDeleteProjectFuture struct {
	Future workflow.Future
}

func (r *RekognitionDeleteProjectFuture) Get(ctx workflow.Context) (*rekognition.DeleteProjectOutput, error) {
	var output rekognition.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDeleteProjectVersionFuture struct {
	Future workflow.Future
}

func (r *RekognitionDeleteProjectVersionFuture) Get(ctx workflow.Context) (*rekognition.DeleteProjectVersionOutput, error) {
	var output rekognition.DeleteProjectVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDeleteStreamProcessorFuture struct {
	Future workflow.Future
}

func (r *RekognitionDeleteStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.DeleteStreamProcessorOutput, error) {
	var output rekognition.DeleteStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDescribeCollectionFuture struct {
	Future workflow.Future
}

func (r *RekognitionDescribeCollectionFuture) Get(ctx workflow.Context) (*rekognition.DescribeCollectionOutput, error) {
	var output rekognition.DescribeCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDescribeProjectVersionsFuture struct {
	Future workflow.Future
}

func (r *RekognitionDescribeProjectVersionsFuture) Get(ctx workflow.Context) (*rekognition.DescribeProjectVersionsOutput, error) {
	var output rekognition.DescribeProjectVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDescribeProjectsFuture struct {
	Future workflow.Future
}

func (r *RekognitionDescribeProjectsFuture) Get(ctx workflow.Context) (*rekognition.DescribeProjectsOutput, error) {
	var output rekognition.DescribeProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDescribeStreamProcessorFuture struct {
	Future workflow.Future
}

func (r *RekognitionDescribeStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.DescribeStreamProcessorOutput, error) {
	var output rekognition.DescribeStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDetectCustomLabelsFuture struct {
	Future workflow.Future
}

func (r *RekognitionDetectCustomLabelsFuture) Get(ctx workflow.Context) (*rekognition.DetectCustomLabelsOutput, error) {
	var output rekognition.DetectCustomLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDetectFacesFuture struct {
	Future workflow.Future
}

func (r *RekognitionDetectFacesFuture) Get(ctx workflow.Context) (*rekognition.DetectFacesOutput, error) {
	var output rekognition.DetectFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDetectLabelsFuture struct {
	Future workflow.Future
}

func (r *RekognitionDetectLabelsFuture) Get(ctx workflow.Context) (*rekognition.DetectLabelsOutput, error) {
	var output rekognition.DetectLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDetectModerationLabelsFuture struct {
	Future workflow.Future
}

func (r *RekognitionDetectModerationLabelsFuture) Get(ctx workflow.Context) (*rekognition.DetectModerationLabelsOutput, error) {
	var output rekognition.DetectModerationLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDetectTextFuture struct {
	Future workflow.Future
}

func (r *RekognitionDetectTextFuture) Get(ctx workflow.Context) (*rekognition.DetectTextOutput, error) {
	var output rekognition.DetectTextOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetCelebrityInfoFuture struct {
	Future workflow.Future
}

func (r *RekognitionGetCelebrityInfoFuture) Get(ctx workflow.Context) (*rekognition.GetCelebrityInfoOutput, error) {
	var output rekognition.GetCelebrityInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetCelebrityRecognitionFuture struct {
	Future workflow.Future
}

func (r *RekognitionGetCelebrityRecognitionFuture) Get(ctx workflow.Context) (*rekognition.GetCelebrityRecognitionOutput, error) {
	var output rekognition.GetCelebrityRecognitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetContentModerationFuture struct {
	Future workflow.Future
}

func (r *RekognitionGetContentModerationFuture) Get(ctx workflow.Context) (*rekognition.GetContentModerationOutput, error) {
	var output rekognition.GetContentModerationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetFaceDetectionFuture struct {
	Future workflow.Future
}

func (r *RekognitionGetFaceDetectionFuture) Get(ctx workflow.Context) (*rekognition.GetFaceDetectionOutput, error) {
	var output rekognition.GetFaceDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetFaceSearchFuture struct {
	Future workflow.Future
}

func (r *RekognitionGetFaceSearchFuture) Get(ctx workflow.Context) (*rekognition.GetFaceSearchOutput, error) {
	var output rekognition.GetFaceSearchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetLabelDetectionFuture struct {
	Future workflow.Future
}

func (r *RekognitionGetLabelDetectionFuture) Get(ctx workflow.Context) (*rekognition.GetLabelDetectionOutput, error) {
	var output rekognition.GetLabelDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetPersonTrackingFuture struct {
	Future workflow.Future
}

func (r *RekognitionGetPersonTrackingFuture) Get(ctx workflow.Context) (*rekognition.GetPersonTrackingOutput, error) {
	var output rekognition.GetPersonTrackingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetSegmentDetectionFuture struct {
	Future workflow.Future
}

func (r *RekognitionGetSegmentDetectionFuture) Get(ctx workflow.Context) (*rekognition.GetSegmentDetectionOutput, error) {
	var output rekognition.GetSegmentDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetTextDetectionFuture struct {
	Future workflow.Future
}

func (r *RekognitionGetTextDetectionFuture) Get(ctx workflow.Context) (*rekognition.GetTextDetectionOutput, error) {
	var output rekognition.GetTextDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionIndexFacesFuture struct {
	Future workflow.Future
}

func (r *RekognitionIndexFacesFuture) Get(ctx workflow.Context) (*rekognition.IndexFacesOutput, error) {
	var output rekognition.IndexFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionListCollectionsFuture struct {
	Future workflow.Future
}

func (r *RekognitionListCollectionsFuture) Get(ctx workflow.Context) (*rekognition.ListCollectionsOutput, error) {
	var output rekognition.ListCollectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionListFacesFuture struct {
	Future workflow.Future
}

func (r *RekognitionListFacesFuture) Get(ctx workflow.Context) (*rekognition.ListFacesOutput, error) {
	var output rekognition.ListFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionListStreamProcessorsFuture struct {
	Future workflow.Future
}

func (r *RekognitionListStreamProcessorsFuture) Get(ctx workflow.Context) (*rekognition.ListStreamProcessorsOutput, error) {
	var output rekognition.ListStreamProcessorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionRecognizeCelebritiesFuture struct {
	Future workflow.Future
}

func (r *RekognitionRecognizeCelebritiesFuture) Get(ctx workflow.Context) (*rekognition.RecognizeCelebritiesOutput, error) {
	var output rekognition.RecognizeCelebritiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionSearchFacesFuture struct {
	Future workflow.Future
}

func (r *RekognitionSearchFacesFuture) Get(ctx workflow.Context) (*rekognition.SearchFacesOutput, error) {
	var output rekognition.SearchFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionSearchFacesByImageFuture struct {
	Future workflow.Future
}

func (r *RekognitionSearchFacesByImageFuture) Get(ctx workflow.Context) (*rekognition.SearchFacesByImageOutput, error) {
	var output rekognition.SearchFacesByImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartCelebrityRecognitionFuture struct {
	Future workflow.Future
}

func (r *RekognitionStartCelebrityRecognitionFuture) Get(ctx workflow.Context) (*rekognition.StartCelebrityRecognitionOutput, error) {
	var output rekognition.StartCelebrityRecognitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartContentModerationFuture struct {
	Future workflow.Future
}

func (r *RekognitionStartContentModerationFuture) Get(ctx workflow.Context) (*rekognition.StartContentModerationOutput, error) {
	var output rekognition.StartContentModerationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartFaceDetectionFuture struct {
	Future workflow.Future
}

func (r *RekognitionStartFaceDetectionFuture) Get(ctx workflow.Context) (*rekognition.StartFaceDetectionOutput, error) {
	var output rekognition.StartFaceDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartFaceSearchFuture struct {
	Future workflow.Future
}

func (r *RekognitionStartFaceSearchFuture) Get(ctx workflow.Context) (*rekognition.StartFaceSearchOutput, error) {
	var output rekognition.StartFaceSearchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartLabelDetectionFuture struct {
	Future workflow.Future
}

func (r *RekognitionStartLabelDetectionFuture) Get(ctx workflow.Context) (*rekognition.StartLabelDetectionOutput, error) {
	var output rekognition.StartLabelDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartPersonTrackingFuture struct {
	Future workflow.Future
}

func (r *RekognitionStartPersonTrackingFuture) Get(ctx workflow.Context) (*rekognition.StartPersonTrackingOutput, error) {
	var output rekognition.StartPersonTrackingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartProjectVersionFuture struct {
	Future workflow.Future
}

func (r *RekognitionStartProjectVersionFuture) Get(ctx workflow.Context) (*rekognition.StartProjectVersionOutput, error) {
	var output rekognition.StartProjectVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartSegmentDetectionFuture struct {
	Future workflow.Future
}

func (r *RekognitionStartSegmentDetectionFuture) Get(ctx workflow.Context) (*rekognition.StartSegmentDetectionOutput, error) {
	var output rekognition.StartSegmentDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartStreamProcessorFuture struct {
	Future workflow.Future
}

func (r *RekognitionStartStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.StartStreamProcessorOutput, error) {
	var output rekognition.StartStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartTextDetectionFuture struct {
	Future workflow.Future
}

func (r *RekognitionStartTextDetectionFuture) Get(ctx workflow.Context) (*rekognition.StartTextDetectionOutput, error) {
	var output rekognition.StartTextDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStopProjectVersionFuture struct {
	Future workflow.Future
}

func (r *RekognitionStopProjectVersionFuture) Get(ctx workflow.Context) (*rekognition.StopProjectVersionOutput, error) {
	var output rekognition.StopProjectVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStopStreamProcessorFuture struct {
	Future workflow.Future
}

func (r *RekognitionStopStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.StopStreamProcessorOutput, error) {
	var output rekognition.StopStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) CompareFaces(ctx workflow.Context, input *rekognition.CompareFacesInput) (*rekognition.CompareFacesOutput, error) {
	var output rekognition.CompareFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.CompareFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) CompareFacesAsync(ctx workflow.Context, input *rekognition.CompareFacesInput) *RekognitionCompareFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.CompareFaces", input)
	return &RekognitionCompareFacesFuture{Future: future}
}

func (a *RekognitionStub) CreateCollection(ctx workflow.Context, input *rekognition.CreateCollectionInput) (*rekognition.CreateCollectionOutput, error) {
	var output rekognition.CreateCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.CreateCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) CreateCollectionAsync(ctx workflow.Context, input *rekognition.CreateCollectionInput) *RekognitionCreateCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.CreateCollection", input)
	return &RekognitionCreateCollectionFuture{Future: future}
}

func (a *RekognitionStub) CreateProject(ctx workflow.Context, input *rekognition.CreateProjectInput) (*rekognition.CreateProjectOutput, error) {
	var output rekognition.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) CreateProjectAsync(ctx workflow.Context, input *rekognition.CreateProjectInput) *RekognitionCreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.CreateProject", input)
	return &RekognitionCreateProjectFuture{Future: future}
}

func (a *RekognitionStub) CreateProjectVersion(ctx workflow.Context, input *rekognition.CreateProjectVersionInput) (*rekognition.CreateProjectVersionOutput, error) {
	var output rekognition.CreateProjectVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.CreateProjectVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) CreateProjectVersionAsync(ctx workflow.Context, input *rekognition.CreateProjectVersionInput) *RekognitionCreateProjectVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.CreateProjectVersion", input)
	return &RekognitionCreateProjectVersionFuture{Future: future}
}

func (a *RekognitionStub) CreateStreamProcessor(ctx workflow.Context, input *rekognition.CreateStreamProcessorInput) (*rekognition.CreateStreamProcessorOutput, error) {
	var output rekognition.CreateStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.CreateStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) CreateStreamProcessorAsync(ctx workflow.Context, input *rekognition.CreateStreamProcessorInput) *RekognitionCreateStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.CreateStreamProcessor", input)
	return &RekognitionCreateStreamProcessorFuture{Future: future}
}

func (a *RekognitionStub) DeleteCollection(ctx workflow.Context, input *rekognition.DeleteCollectionInput) (*rekognition.DeleteCollectionOutput, error) {
	var output rekognition.DeleteCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DeleteCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DeleteCollectionAsync(ctx workflow.Context, input *rekognition.DeleteCollectionInput) *RekognitionDeleteCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DeleteCollection", input)
	return &RekognitionDeleteCollectionFuture{Future: future}
}

func (a *RekognitionStub) DeleteFaces(ctx workflow.Context, input *rekognition.DeleteFacesInput) (*rekognition.DeleteFacesOutput, error) {
	var output rekognition.DeleteFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DeleteFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DeleteFacesAsync(ctx workflow.Context, input *rekognition.DeleteFacesInput) *RekognitionDeleteFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DeleteFaces", input)
	return &RekognitionDeleteFacesFuture{Future: future}
}

func (a *RekognitionStub) DeleteProject(ctx workflow.Context, input *rekognition.DeleteProjectInput) (*rekognition.DeleteProjectOutput, error) {
	var output rekognition.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DeleteProjectAsync(ctx workflow.Context, input *rekognition.DeleteProjectInput) *RekognitionDeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DeleteProject", input)
	return &RekognitionDeleteProjectFuture{Future: future}
}

func (a *RekognitionStub) DeleteProjectVersion(ctx workflow.Context, input *rekognition.DeleteProjectVersionInput) (*rekognition.DeleteProjectVersionOutput, error) {
	var output rekognition.DeleteProjectVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DeleteProjectVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DeleteProjectVersionAsync(ctx workflow.Context, input *rekognition.DeleteProjectVersionInput) *RekognitionDeleteProjectVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DeleteProjectVersion", input)
	return &RekognitionDeleteProjectVersionFuture{Future: future}
}

func (a *RekognitionStub) DeleteStreamProcessor(ctx workflow.Context, input *rekognition.DeleteStreamProcessorInput) (*rekognition.DeleteStreamProcessorOutput, error) {
	var output rekognition.DeleteStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DeleteStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DeleteStreamProcessorAsync(ctx workflow.Context, input *rekognition.DeleteStreamProcessorInput) *RekognitionDeleteStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DeleteStreamProcessor", input)
	return &RekognitionDeleteStreamProcessorFuture{Future: future}
}

func (a *RekognitionStub) DescribeCollection(ctx workflow.Context, input *rekognition.DescribeCollectionInput) (*rekognition.DescribeCollectionOutput, error) {
	var output rekognition.DescribeCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DescribeCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DescribeCollectionAsync(ctx workflow.Context, input *rekognition.DescribeCollectionInput) *RekognitionDescribeCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DescribeCollection", input)
	return &RekognitionDescribeCollectionFuture{Future: future}
}

func (a *RekognitionStub) DescribeProjectVersions(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) (*rekognition.DescribeProjectVersionsOutput, error) {
	var output rekognition.DescribeProjectVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DescribeProjectVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DescribeProjectVersionsAsync(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) *RekognitionDescribeProjectVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DescribeProjectVersions", input)
	return &RekognitionDescribeProjectVersionsFuture{Future: future}
}

func (a *RekognitionStub) DescribeProjects(ctx workflow.Context, input *rekognition.DescribeProjectsInput) (*rekognition.DescribeProjectsOutput, error) {
	var output rekognition.DescribeProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DescribeProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DescribeProjectsAsync(ctx workflow.Context, input *rekognition.DescribeProjectsInput) *RekognitionDescribeProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DescribeProjects", input)
	return &RekognitionDescribeProjectsFuture{Future: future}
}

func (a *RekognitionStub) DescribeStreamProcessor(ctx workflow.Context, input *rekognition.DescribeStreamProcessorInput) (*rekognition.DescribeStreamProcessorOutput, error) {
	var output rekognition.DescribeStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DescribeStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DescribeStreamProcessorAsync(ctx workflow.Context, input *rekognition.DescribeStreamProcessorInput) *RekognitionDescribeStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DescribeStreamProcessor", input)
	return &RekognitionDescribeStreamProcessorFuture{Future: future}
}

func (a *RekognitionStub) DetectCustomLabels(ctx workflow.Context, input *rekognition.DetectCustomLabelsInput) (*rekognition.DetectCustomLabelsOutput, error) {
	var output rekognition.DetectCustomLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DetectCustomLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DetectCustomLabelsAsync(ctx workflow.Context, input *rekognition.DetectCustomLabelsInput) *RekognitionDetectCustomLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DetectCustomLabels", input)
	return &RekognitionDetectCustomLabelsFuture{Future: future}
}

func (a *RekognitionStub) DetectFaces(ctx workflow.Context, input *rekognition.DetectFacesInput) (*rekognition.DetectFacesOutput, error) {
	var output rekognition.DetectFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DetectFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DetectFacesAsync(ctx workflow.Context, input *rekognition.DetectFacesInput) *RekognitionDetectFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DetectFaces", input)
	return &RekognitionDetectFacesFuture{Future: future}
}

func (a *RekognitionStub) DetectLabels(ctx workflow.Context, input *rekognition.DetectLabelsInput) (*rekognition.DetectLabelsOutput, error) {
	var output rekognition.DetectLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DetectLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DetectLabelsAsync(ctx workflow.Context, input *rekognition.DetectLabelsInput) *RekognitionDetectLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DetectLabels", input)
	return &RekognitionDetectLabelsFuture{Future: future}
}

func (a *RekognitionStub) DetectModerationLabels(ctx workflow.Context, input *rekognition.DetectModerationLabelsInput) (*rekognition.DetectModerationLabelsOutput, error) {
	var output rekognition.DetectModerationLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DetectModerationLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DetectModerationLabelsAsync(ctx workflow.Context, input *rekognition.DetectModerationLabelsInput) *RekognitionDetectModerationLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DetectModerationLabels", input)
	return &RekognitionDetectModerationLabelsFuture{Future: future}
}

func (a *RekognitionStub) DetectText(ctx workflow.Context, input *rekognition.DetectTextInput) (*rekognition.DetectTextOutput, error) {
	var output rekognition.DetectTextOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.DetectText", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) DetectTextAsync(ctx workflow.Context, input *rekognition.DetectTextInput) *RekognitionDetectTextFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.DetectText", input)
	return &RekognitionDetectTextFuture{Future: future}
}

func (a *RekognitionStub) GetCelebrityInfo(ctx workflow.Context, input *rekognition.GetCelebrityInfoInput) (*rekognition.GetCelebrityInfoOutput, error) {
	var output rekognition.GetCelebrityInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.GetCelebrityInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) GetCelebrityInfoAsync(ctx workflow.Context, input *rekognition.GetCelebrityInfoInput) *RekognitionGetCelebrityInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.GetCelebrityInfo", input)
	return &RekognitionGetCelebrityInfoFuture{Future: future}
}

func (a *RekognitionStub) GetCelebrityRecognition(ctx workflow.Context, input *rekognition.GetCelebrityRecognitionInput) (*rekognition.GetCelebrityRecognitionOutput, error) {
	var output rekognition.GetCelebrityRecognitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.GetCelebrityRecognition", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) GetCelebrityRecognitionAsync(ctx workflow.Context, input *rekognition.GetCelebrityRecognitionInput) *RekognitionGetCelebrityRecognitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.GetCelebrityRecognition", input)
	return &RekognitionGetCelebrityRecognitionFuture{Future: future}
}

func (a *RekognitionStub) GetContentModeration(ctx workflow.Context, input *rekognition.GetContentModerationInput) (*rekognition.GetContentModerationOutput, error) {
	var output rekognition.GetContentModerationOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.GetContentModeration", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) GetContentModerationAsync(ctx workflow.Context, input *rekognition.GetContentModerationInput) *RekognitionGetContentModerationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.GetContentModeration", input)
	return &RekognitionGetContentModerationFuture{Future: future}
}

func (a *RekognitionStub) GetFaceDetection(ctx workflow.Context, input *rekognition.GetFaceDetectionInput) (*rekognition.GetFaceDetectionOutput, error) {
	var output rekognition.GetFaceDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.GetFaceDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) GetFaceDetectionAsync(ctx workflow.Context, input *rekognition.GetFaceDetectionInput) *RekognitionGetFaceDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.GetFaceDetection", input)
	return &RekognitionGetFaceDetectionFuture{Future: future}
}

func (a *RekognitionStub) GetFaceSearch(ctx workflow.Context, input *rekognition.GetFaceSearchInput) (*rekognition.GetFaceSearchOutput, error) {
	var output rekognition.GetFaceSearchOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.GetFaceSearch", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) GetFaceSearchAsync(ctx workflow.Context, input *rekognition.GetFaceSearchInput) *RekognitionGetFaceSearchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.GetFaceSearch", input)
	return &RekognitionGetFaceSearchFuture{Future: future}
}

func (a *RekognitionStub) GetLabelDetection(ctx workflow.Context, input *rekognition.GetLabelDetectionInput) (*rekognition.GetLabelDetectionOutput, error) {
	var output rekognition.GetLabelDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.GetLabelDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) GetLabelDetectionAsync(ctx workflow.Context, input *rekognition.GetLabelDetectionInput) *RekognitionGetLabelDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.GetLabelDetection", input)
	return &RekognitionGetLabelDetectionFuture{Future: future}
}

func (a *RekognitionStub) GetPersonTracking(ctx workflow.Context, input *rekognition.GetPersonTrackingInput) (*rekognition.GetPersonTrackingOutput, error) {
	var output rekognition.GetPersonTrackingOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.GetPersonTracking", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) GetPersonTrackingAsync(ctx workflow.Context, input *rekognition.GetPersonTrackingInput) *RekognitionGetPersonTrackingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.GetPersonTracking", input)
	return &RekognitionGetPersonTrackingFuture{Future: future}
}

func (a *RekognitionStub) GetSegmentDetection(ctx workflow.Context, input *rekognition.GetSegmentDetectionInput) (*rekognition.GetSegmentDetectionOutput, error) {
	var output rekognition.GetSegmentDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.GetSegmentDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) GetSegmentDetectionAsync(ctx workflow.Context, input *rekognition.GetSegmentDetectionInput) *RekognitionGetSegmentDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.GetSegmentDetection", input)
	return &RekognitionGetSegmentDetectionFuture{Future: future}
}

func (a *RekognitionStub) GetTextDetection(ctx workflow.Context, input *rekognition.GetTextDetectionInput) (*rekognition.GetTextDetectionOutput, error) {
	var output rekognition.GetTextDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.GetTextDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) GetTextDetectionAsync(ctx workflow.Context, input *rekognition.GetTextDetectionInput) *RekognitionGetTextDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.GetTextDetection", input)
	return &RekognitionGetTextDetectionFuture{Future: future}
}

func (a *RekognitionStub) IndexFaces(ctx workflow.Context, input *rekognition.IndexFacesInput) (*rekognition.IndexFacesOutput, error) {
	var output rekognition.IndexFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.IndexFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) IndexFacesAsync(ctx workflow.Context, input *rekognition.IndexFacesInput) *RekognitionIndexFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.IndexFaces", input)
	return &RekognitionIndexFacesFuture{Future: future}
}

func (a *RekognitionStub) ListCollections(ctx workflow.Context, input *rekognition.ListCollectionsInput) (*rekognition.ListCollectionsOutput, error) {
	var output rekognition.ListCollectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.ListCollections", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) ListCollectionsAsync(ctx workflow.Context, input *rekognition.ListCollectionsInput) *RekognitionListCollectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.ListCollections", input)
	return &RekognitionListCollectionsFuture{Future: future}
}

func (a *RekognitionStub) ListFaces(ctx workflow.Context, input *rekognition.ListFacesInput) (*rekognition.ListFacesOutput, error) {
	var output rekognition.ListFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.ListFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) ListFacesAsync(ctx workflow.Context, input *rekognition.ListFacesInput) *RekognitionListFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.ListFaces", input)
	return &RekognitionListFacesFuture{Future: future}
}

func (a *RekognitionStub) ListStreamProcessors(ctx workflow.Context, input *rekognition.ListStreamProcessorsInput) (*rekognition.ListStreamProcessorsOutput, error) {
	var output rekognition.ListStreamProcessorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.ListStreamProcessors", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) ListStreamProcessorsAsync(ctx workflow.Context, input *rekognition.ListStreamProcessorsInput) *RekognitionListStreamProcessorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.ListStreamProcessors", input)
	return &RekognitionListStreamProcessorsFuture{Future: future}
}

func (a *RekognitionStub) RecognizeCelebrities(ctx workflow.Context, input *rekognition.RecognizeCelebritiesInput) (*rekognition.RecognizeCelebritiesOutput, error) {
	var output rekognition.RecognizeCelebritiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.RecognizeCelebrities", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) RecognizeCelebritiesAsync(ctx workflow.Context, input *rekognition.RecognizeCelebritiesInput) *RekognitionRecognizeCelebritiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.RecognizeCelebrities", input)
	return &RekognitionRecognizeCelebritiesFuture{Future: future}
}

func (a *RekognitionStub) SearchFaces(ctx workflow.Context, input *rekognition.SearchFacesInput) (*rekognition.SearchFacesOutput, error) {
	var output rekognition.SearchFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.SearchFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) SearchFacesAsync(ctx workflow.Context, input *rekognition.SearchFacesInput) *RekognitionSearchFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.SearchFaces", input)
	return &RekognitionSearchFacesFuture{Future: future}
}

func (a *RekognitionStub) SearchFacesByImage(ctx workflow.Context, input *rekognition.SearchFacesByImageInput) (*rekognition.SearchFacesByImageOutput, error) {
	var output rekognition.SearchFacesByImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.SearchFacesByImage", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) SearchFacesByImageAsync(ctx workflow.Context, input *rekognition.SearchFacesByImageInput) *RekognitionSearchFacesByImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.SearchFacesByImage", input)
	return &RekognitionSearchFacesByImageFuture{Future: future}
}

func (a *RekognitionStub) StartCelebrityRecognition(ctx workflow.Context, input *rekognition.StartCelebrityRecognitionInput) (*rekognition.StartCelebrityRecognitionOutput, error) {
	var output rekognition.StartCelebrityRecognitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.StartCelebrityRecognition", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) StartCelebrityRecognitionAsync(ctx workflow.Context, input *rekognition.StartCelebrityRecognitionInput) *RekognitionStartCelebrityRecognitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.StartCelebrityRecognition", input)
	return &RekognitionStartCelebrityRecognitionFuture{Future: future}
}

func (a *RekognitionStub) StartContentModeration(ctx workflow.Context, input *rekognition.StartContentModerationInput) (*rekognition.StartContentModerationOutput, error) {
	var output rekognition.StartContentModerationOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.StartContentModeration", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) StartContentModerationAsync(ctx workflow.Context, input *rekognition.StartContentModerationInput) *RekognitionStartContentModerationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.StartContentModeration", input)
	return &RekognitionStartContentModerationFuture{Future: future}
}

func (a *RekognitionStub) StartFaceDetection(ctx workflow.Context, input *rekognition.StartFaceDetectionInput) (*rekognition.StartFaceDetectionOutput, error) {
	var output rekognition.StartFaceDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.StartFaceDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) StartFaceDetectionAsync(ctx workflow.Context, input *rekognition.StartFaceDetectionInput) *RekognitionStartFaceDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.StartFaceDetection", input)
	return &RekognitionStartFaceDetectionFuture{Future: future}
}

func (a *RekognitionStub) StartFaceSearch(ctx workflow.Context, input *rekognition.StartFaceSearchInput) (*rekognition.StartFaceSearchOutput, error) {
	var output rekognition.StartFaceSearchOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.StartFaceSearch", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) StartFaceSearchAsync(ctx workflow.Context, input *rekognition.StartFaceSearchInput) *RekognitionStartFaceSearchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.StartFaceSearch", input)
	return &RekognitionStartFaceSearchFuture{Future: future}
}

func (a *RekognitionStub) StartLabelDetection(ctx workflow.Context, input *rekognition.StartLabelDetectionInput) (*rekognition.StartLabelDetectionOutput, error) {
	var output rekognition.StartLabelDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.StartLabelDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) StartLabelDetectionAsync(ctx workflow.Context, input *rekognition.StartLabelDetectionInput) *RekognitionStartLabelDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.StartLabelDetection", input)
	return &RekognitionStartLabelDetectionFuture{Future: future}
}

func (a *RekognitionStub) StartPersonTracking(ctx workflow.Context, input *rekognition.StartPersonTrackingInput) (*rekognition.StartPersonTrackingOutput, error) {
	var output rekognition.StartPersonTrackingOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.StartPersonTracking", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) StartPersonTrackingAsync(ctx workflow.Context, input *rekognition.StartPersonTrackingInput) *RekognitionStartPersonTrackingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.StartPersonTracking", input)
	return &RekognitionStartPersonTrackingFuture{Future: future}
}

func (a *RekognitionStub) StartProjectVersion(ctx workflow.Context, input *rekognition.StartProjectVersionInput) (*rekognition.StartProjectVersionOutput, error) {
	var output rekognition.StartProjectVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.StartProjectVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) StartProjectVersionAsync(ctx workflow.Context, input *rekognition.StartProjectVersionInput) *RekognitionStartProjectVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.StartProjectVersion", input)
	return &RekognitionStartProjectVersionFuture{Future: future}
}

func (a *RekognitionStub) StartSegmentDetection(ctx workflow.Context, input *rekognition.StartSegmentDetectionInput) (*rekognition.StartSegmentDetectionOutput, error) {
	var output rekognition.StartSegmentDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.StartSegmentDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) StartSegmentDetectionAsync(ctx workflow.Context, input *rekognition.StartSegmentDetectionInput) *RekognitionStartSegmentDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.StartSegmentDetection", input)
	return &RekognitionStartSegmentDetectionFuture{Future: future}
}

func (a *RekognitionStub) StartStreamProcessor(ctx workflow.Context, input *rekognition.StartStreamProcessorInput) (*rekognition.StartStreamProcessorOutput, error) {
	var output rekognition.StartStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.StartStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) StartStreamProcessorAsync(ctx workflow.Context, input *rekognition.StartStreamProcessorInput) *RekognitionStartStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.StartStreamProcessor", input)
	return &RekognitionStartStreamProcessorFuture{Future: future}
}

func (a *RekognitionStub) StartTextDetection(ctx workflow.Context, input *rekognition.StartTextDetectionInput) (*rekognition.StartTextDetectionOutput, error) {
	var output rekognition.StartTextDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.StartTextDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) StartTextDetectionAsync(ctx workflow.Context, input *rekognition.StartTextDetectionInput) *RekognitionStartTextDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.StartTextDetection", input)
	return &RekognitionStartTextDetectionFuture{Future: future}
}

func (a *RekognitionStub) StopProjectVersion(ctx workflow.Context, input *rekognition.StopProjectVersionInput) (*rekognition.StopProjectVersionOutput, error) {
	var output rekognition.StopProjectVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.StopProjectVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) StopProjectVersionAsync(ctx workflow.Context, input *rekognition.StopProjectVersionInput) *RekognitionStopProjectVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.StopProjectVersion", input)
	return &RekognitionStopProjectVersionFuture{Future: future}
}

func (a *RekognitionStub) StopStreamProcessor(ctx workflow.Context, input *rekognition.StopStreamProcessorInput) (*rekognition.StopStreamProcessorOutput, error) {
	var output rekognition.StopStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws.rekognition.StopStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *RekognitionStub) StopStreamProcessorAsync(ctx workflow.Context, input *rekognition.StopStreamProcessorInput) *RekognitionStopStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rekognition.StopStreamProcessor", input)
	return &RekognitionStopStreamProcessorFuture{Future: future}
}

func (a *RekognitionStub) WaitUntilProjectVersionRunning(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.rekognition.WaitUntilProjectVersionRunning", input).Get(ctx, nil)
}

func (a *RekognitionStub) WaitUntilProjectVersionRunningAsync(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.rekognition.WaitUntilProjectVersionRunning", input)
}

func (a *RekognitionStub) WaitUntilProjectVersionTrainingCompleted(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.rekognition.WaitUntilProjectVersionTrainingCompleted", input).Get(ctx, nil)
}

func (a *RekognitionStub) WaitUntilProjectVersionTrainingCompletedAsync(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.rekognition.WaitUntilProjectVersionTrainingCompleted", input)
}
