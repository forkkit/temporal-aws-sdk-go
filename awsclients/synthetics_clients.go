// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/synthetics"
	"go.temporal.io/sdk/workflow"
)

type SyntheticsClient interface {
	CreateCanary(ctx workflow.Context, input *synthetics.CreateCanaryInput) (*synthetics.CreateCanaryOutput, error)
	CreateCanaryAsync(ctx workflow.Context, input *synthetics.CreateCanaryInput) *SyntheticsCreateCanaryFuture

	DeleteCanary(ctx workflow.Context, input *synthetics.DeleteCanaryInput) (*synthetics.DeleteCanaryOutput, error)
	DeleteCanaryAsync(ctx workflow.Context, input *synthetics.DeleteCanaryInput) *SyntheticsDeleteCanaryFuture

	DescribeCanaries(ctx workflow.Context, input *synthetics.DescribeCanariesInput) (*synthetics.DescribeCanariesOutput, error)
	DescribeCanariesAsync(ctx workflow.Context, input *synthetics.DescribeCanariesInput) *SyntheticsDescribeCanariesFuture

	DescribeCanariesLastRun(ctx workflow.Context, input *synthetics.DescribeCanariesLastRunInput) (*synthetics.DescribeCanariesLastRunOutput, error)
	DescribeCanariesLastRunAsync(ctx workflow.Context, input *synthetics.DescribeCanariesLastRunInput) *SyntheticsDescribeCanariesLastRunFuture

	DescribeRuntimeVersions(ctx workflow.Context, input *synthetics.DescribeRuntimeVersionsInput) (*synthetics.DescribeRuntimeVersionsOutput, error)
	DescribeRuntimeVersionsAsync(ctx workflow.Context, input *synthetics.DescribeRuntimeVersionsInput) *SyntheticsDescribeRuntimeVersionsFuture

	GetCanary(ctx workflow.Context, input *synthetics.GetCanaryInput) (*synthetics.GetCanaryOutput, error)
	GetCanaryAsync(ctx workflow.Context, input *synthetics.GetCanaryInput) *SyntheticsGetCanaryFuture

	GetCanaryRuns(ctx workflow.Context, input *synthetics.GetCanaryRunsInput) (*synthetics.GetCanaryRunsOutput, error)
	GetCanaryRunsAsync(ctx workflow.Context, input *synthetics.GetCanaryRunsInput) *SyntheticsGetCanaryRunsFuture

	ListTagsForResource(ctx workflow.Context, input *synthetics.ListTagsForResourceInput) (*synthetics.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *synthetics.ListTagsForResourceInput) *SyntheticsListTagsForResourceFuture

	StartCanary(ctx workflow.Context, input *synthetics.StartCanaryInput) (*synthetics.StartCanaryOutput, error)
	StartCanaryAsync(ctx workflow.Context, input *synthetics.StartCanaryInput) *SyntheticsStartCanaryFuture

	StopCanary(ctx workflow.Context, input *synthetics.StopCanaryInput) (*synthetics.StopCanaryOutput, error)
	StopCanaryAsync(ctx workflow.Context, input *synthetics.StopCanaryInput) *SyntheticsStopCanaryFuture

	TagResource(ctx workflow.Context, input *synthetics.TagResourceInput) (*synthetics.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *synthetics.TagResourceInput) *SyntheticsTagResourceFuture

	UntagResource(ctx workflow.Context, input *synthetics.UntagResourceInput) (*synthetics.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *synthetics.UntagResourceInput) *SyntheticsUntagResourceFuture

	UpdateCanary(ctx workflow.Context, input *synthetics.UpdateCanaryInput) (*synthetics.UpdateCanaryOutput, error)
	UpdateCanaryAsync(ctx workflow.Context, input *synthetics.UpdateCanaryInput) *SyntheticsUpdateCanaryFuture
}

type SyntheticsStub struct{}

func NewSyntheticsStub() SyntheticsClient {
	return &SyntheticsStub{}
}

type SyntheticsCreateCanaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsCreateCanaryFuture) Get(ctx workflow.Context) (*synthetics.CreateCanaryOutput, error) {
	var output synthetics.CreateCanaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsDeleteCanaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsDeleteCanaryFuture) Get(ctx workflow.Context) (*synthetics.DeleteCanaryOutput, error) {
	var output synthetics.DeleteCanaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsDescribeCanariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsDescribeCanariesFuture) Get(ctx workflow.Context) (*synthetics.DescribeCanariesOutput, error) {
	var output synthetics.DescribeCanariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsDescribeCanariesLastRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsDescribeCanariesLastRunFuture) Get(ctx workflow.Context) (*synthetics.DescribeCanariesLastRunOutput, error) {
	var output synthetics.DescribeCanariesLastRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsDescribeRuntimeVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsDescribeRuntimeVersionsFuture) Get(ctx workflow.Context) (*synthetics.DescribeRuntimeVersionsOutput, error) {
	var output synthetics.DescribeRuntimeVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsGetCanaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsGetCanaryFuture) Get(ctx workflow.Context) (*synthetics.GetCanaryOutput, error) {
	var output synthetics.GetCanaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsGetCanaryRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsGetCanaryRunsFuture) Get(ctx workflow.Context) (*synthetics.GetCanaryRunsOutput, error) {
	var output synthetics.GetCanaryRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsListTagsForResourceFuture) Get(ctx workflow.Context) (*synthetics.ListTagsForResourceOutput, error) {
	var output synthetics.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsStartCanaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsStartCanaryFuture) Get(ctx workflow.Context) (*synthetics.StartCanaryOutput, error) {
	var output synthetics.StartCanaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsStopCanaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsStopCanaryFuture) Get(ctx workflow.Context) (*synthetics.StopCanaryOutput, error) {
	var output synthetics.StopCanaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsTagResourceFuture) Get(ctx workflow.Context) (*synthetics.TagResourceOutput, error) {
	var output synthetics.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsUntagResourceFuture) Get(ctx workflow.Context) (*synthetics.UntagResourceOutput, error) {
	var output synthetics.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsUpdateCanaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsUpdateCanaryFuture) Get(ctx workflow.Context) (*synthetics.UpdateCanaryOutput, error) {
	var output synthetics.UpdateCanaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) CreateCanary(ctx workflow.Context, input *synthetics.CreateCanaryInput) (*synthetics.CreateCanaryOutput, error) {
	var output synthetics.CreateCanaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.CreateCanary", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) CreateCanaryAsync(ctx workflow.Context, input *synthetics.CreateCanaryInput) *SyntheticsCreateCanaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.CreateCanary", input)
	return &SyntheticsCreateCanaryFuture{Future: future}
}

func (a *SyntheticsStub) DeleteCanary(ctx workflow.Context, input *synthetics.DeleteCanaryInput) (*synthetics.DeleteCanaryOutput, error) {
	var output synthetics.DeleteCanaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.DeleteCanary", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) DeleteCanaryAsync(ctx workflow.Context, input *synthetics.DeleteCanaryInput) *SyntheticsDeleteCanaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.DeleteCanary", input)
	return &SyntheticsDeleteCanaryFuture{Future: future}
}

func (a *SyntheticsStub) DescribeCanaries(ctx workflow.Context, input *synthetics.DescribeCanariesInput) (*synthetics.DescribeCanariesOutput, error) {
	var output synthetics.DescribeCanariesOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.DescribeCanaries", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) DescribeCanariesAsync(ctx workflow.Context, input *synthetics.DescribeCanariesInput) *SyntheticsDescribeCanariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.DescribeCanaries", input)
	return &SyntheticsDescribeCanariesFuture{Future: future}
}

func (a *SyntheticsStub) DescribeCanariesLastRun(ctx workflow.Context, input *synthetics.DescribeCanariesLastRunInput) (*synthetics.DescribeCanariesLastRunOutput, error) {
	var output synthetics.DescribeCanariesLastRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.DescribeCanariesLastRun", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) DescribeCanariesLastRunAsync(ctx workflow.Context, input *synthetics.DescribeCanariesLastRunInput) *SyntheticsDescribeCanariesLastRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.DescribeCanariesLastRun", input)
	return &SyntheticsDescribeCanariesLastRunFuture{Future: future}
}

func (a *SyntheticsStub) DescribeRuntimeVersions(ctx workflow.Context, input *synthetics.DescribeRuntimeVersionsInput) (*synthetics.DescribeRuntimeVersionsOutput, error) {
	var output synthetics.DescribeRuntimeVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.DescribeRuntimeVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) DescribeRuntimeVersionsAsync(ctx workflow.Context, input *synthetics.DescribeRuntimeVersionsInput) *SyntheticsDescribeRuntimeVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.DescribeRuntimeVersions", input)
	return &SyntheticsDescribeRuntimeVersionsFuture{Future: future}
}

func (a *SyntheticsStub) GetCanary(ctx workflow.Context, input *synthetics.GetCanaryInput) (*synthetics.GetCanaryOutput, error) {
	var output synthetics.GetCanaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.GetCanary", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) GetCanaryAsync(ctx workflow.Context, input *synthetics.GetCanaryInput) *SyntheticsGetCanaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.GetCanary", input)
	return &SyntheticsGetCanaryFuture{Future: future}
}

func (a *SyntheticsStub) GetCanaryRuns(ctx workflow.Context, input *synthetics.GetCanaryRunsInput) (*synthetics.GetCanaryRunsOutput, error) {
	var output synthetics.GetCanaryRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.GetCanaryRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) GetCanaryRunsAsync(ctx workflow.Context, input *synthetics.GetCanaryRunsInput) *SyntheticsGetCanaryRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.GetCanaryRuns", input)
	return &SyntheticsGetCanaryRunsFuture{Future: future}
}

func (a *SyntheticsStub) ListTagsForResource(ctx workflow.Context, input *synthetics.ListTagsForResourceInput) (*synthetics.ListTagsForResourceOutput, error) {
	var output synthetics.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) ListTagsForResourceAsync(ctx workflow.Context, input *synthetics.ListTagsForResourceInput) *SyntheticsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.ListTagsForResource", input)
	return &SyntheticsListTagsForResourceFuture{Future: future}
}

func (a *SyntheticsStub) StartCanary(ctx workflow.Context, input *synthetics.StartCanaryInput) (*synthetics.StartCanaryOutput, error) {
	var output synthetics.StartCanaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.StartCanary", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) StartCanaryAsync(ctx workflow.Context, input *synthetics.StartCanaryInput) *SyntheticsStartCanaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.StartCanary", input)
	return &SyntheticsStartCanaryFuture{Future: future}
}

func (a *SyntheticsStub) StopCanary(ctx workflow.Context, input *synthetics.StopCanaryInput) (*synthetics.StopCanaryOutput, error) {
	var output synthetics.StopCanaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.StopCanary", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) StopCanaryAsync(ctx workflow.Context, input *synthetics.StopCanaryInput) *SyntheticsStopCanaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.StopCanary", input)
	return &SyntheticsStopCanaryFuture{Future: future}
}

func (a *SyntheticsStub) TagResource(ctx workflow.Context, input *synthetics.TagResourceInput) (*synthetics.TagResourceOutput, error) {
	var output synthetics.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) TagResourceAsync(ctx workflow.Context, input *synthetics.TagResourceInput) *SyntheticsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.TagResource", input)
	return &SyntheticsTagResourceFuture{Future: future}
}

func (a *SyntheticsStub) UntagResource(ctx workflow.Context, input *synthetics.UntagResourceInput) (*synthetics.UntagResourceOutput, error) {
	var output synthetics.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) UntagResourceAsync(ctx workflow.Context, input *synthetics.UntagResourceInput) *SyntheticsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.UntagResource", input)
	return &SyntheticsUntagResourceFuture{Future: future}
}

func (a *SyntheticsStub) UpdateCanary(ctx workflow.Context, input *synthetics.UpdateCanaryInput) (*synthetics.UpdateCanaryOutput, error) {
	var output synthetics.UpdateCanaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.synthetics.UpdateCanary", input).Get(ctx, &output)
	return &output, err
}

func (a *SyntheticsStub) UpdateCanaryAsync(ctx workflow.Context, input *synthetics.UpdateCanaryInput) *SyntheticsUpdateCanaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.synthetics.UpdateCanary", input)
	return &SyntheticsUpdateCanaryFuture{Future: future}
}
