// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/lexmodelbuildingservice"
	"go.temporal.io/sdk/workflow"
)

type LexModelBuildingServiceClient interface {
	CreateBotVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateBotVersionInput) (*lexmodelbuildingservice.CreateBotVersionOutput, error)
	CreateBotVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateBotVersionInput) *LexModelBuildingServiceCreateBotVersionFuture

	CreateIntentVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateIntentVersionInput) (*lexmodelbuildingservice.CreateIntentVersionOutput, error)
	CreateIntentVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateIntentVersionInput) *LexModelBuildingServiceCreateIntentVersionFuture

	CreateSlotTypeVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateSlotTypeVersionInput) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error)
	CreateSlotTypeVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateSlotTypeVersionInput) *LexModelBuildingServiceCreateSlotTypeVersionFuture

	DeleteBot(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotInput) (*lexmodelbuildingservice.DeleteBotOutput, error)
	DeleteBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotInput) *LexModelBuildingServiceDeleteBotFuture

	DeleteBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotAliasInput) (*lexmodelbuildingservice.DeleteBotAliasOutput, error)
	DeleteBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotAliasInput) *LexModelBuildingServiceDeleteBotAliasFuture

	DeleteBotChannelAssociation(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotChannelAssociationInput) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error)
	DeleteBotChannelAssociationAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotChannelAssociationInput) *LexModelBuildingServiceDeleteBotChannelAssociationFuture

	DeleteBotVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotVersionInput) (*lexmodelbuildingservice.DeleteBotVersionOutput, error)
	DeleteBotVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotVersionInput) *LexModelBuildingServiceDeleteBotVersionFuture

	DeleteIntent(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentInput) (*lexmodelbuildingservice.DeleteIntentOutput, error)
	DeleteIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentInput) *LexModelBuildingServiceDeleteIntentFuture

	DeleteIntentVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentVersionInput) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error)
	DeleteIntentVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentVersionInput) *LexModelBuildingServiceDeleteIntentVersionFuture

	DeleteSlotType(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeInput) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error)
	DeleteSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeInput) *LexModelBuildingServiceDeleteSlotTypeFuture

	DeleteSlotTypeVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeVersionInput) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error)
	DeleteSlotTypeVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeVersionInput) *LexModelBuildingServiceDeleteSlotTypeVersionFuture

	DeleteUtterances(ctx workflow.Context, input *lexmodelbuildingservice.DeleteUtterancesInput) (*lexmodelbuildingservice.DeleteUtterancesOutput, error)
	DeleteUtterancesAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteUtterancesInput) *LexModelBuildingServiceDeleteUtterancesFuture

	GetBot(ctx workflow.Context, input *lexmodelbuildingservice.GetBotInput) (*lexmodelbuildingservice.GetBotOutput, error)
	GetBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotInput) *LexModelBuildingServiceGetBotFuture

	GetBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasInput) (*lexmodelbuildingservice.GetBotAliasOutput, error)
	GetBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasInput) *LexModelBuildingServiceGetBotAliasFuture

	GetBotAliases(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasesInput) (*lexmodelbuildingservice.GetBotAliasesOutput, error)
	GetBotAliasesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasesInput) *LexModelBuildingServiceGetBotAliasesFuture

	GetBotChannelAssociation(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationInput) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error)
	GetBotChannelAssociationAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationInput) *LexModelBuildingServiceGetBotChannelAssociationFuture

	GetBotChannelAssociations(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error)
	GetBotChannelAssociationsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput) *LexModelBuildingServiceGetBotChannelAssociationsFuture

	GetBotVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetBotVersionsInput) (*lexmodelbuildingservice.GetBotVersionsOutput, error)
	GetBotVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotVersionsInput) *LexModelBuildingServiceGetBotVersionsFuture

	GetBots(ctx workflow.Context, input *lexmodelbuildingservice.GetBotsInput) (*lexmodelbuildingservice.GetBotsOutput, error)
	GetBotsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotsInput) *LexModelBuildingServiceGetBotsFuture

	GetBuiltinIntent(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentInput) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error)
	GetBuiltinIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentInput) *LexModelBuildingServiceGetBuiltinIntentFuture

	GetBuiltinIntents(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error)
	GetBuiltinIntentsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput) *LexModelBuildingServiceGetBuiltinIntentsFuture

	GetBuiltinSlotTypes(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error)
	GetBuiltinSlotTypesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput) *LexModelBuildingServiceGetBuiltinSlotTypesFuture

	GetExport(ctx workflow.Context, input *lexmodelbuildingservice.GetExportInput) (*lexmodelbuildingservice.GetExportOutput, error)
	GetExportAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetExportInput) *LexModelBuildingServiceGetExportFuture

	GetImport(ctx workflow.Context, input *lexmodelbuildingservice.GetImportInput) (*lexmodelbuildingservice.GetImportOutput, error)
	GetImportAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetImportInput) *LexModelBuildingServiceGetImportFuture

	GetIntent(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentInput) (*lexmodelbuildingservice.GetIntentOutput, error)
	GetIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentInput) *LexModelBuildingServiceGetIntentFuture

	GetIntentVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentVersionsInput) (*lexmodelbuildingservice.GetIntentVersionsOutput, error)
	GetIntentVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentVersionsInput) *LexModelBuildingServiceGetIntentVersionsFuture

	GetIntents(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentsInput) (*lexmodelbuildingservice.GetIntentsOutput, error)
	GetIntentsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentsInput) *LexModelBuildingServiceGetIntentsFuture

	GetSlotType(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeInput) (*lexmodelbuildingservice.GetSlotTypeOutput, error)
	GetSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeInput) *LexModelBuildingServiceGetSlotTypeFuture

	GetSlotTypeVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error)
	GetSlotTypeVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput) *LexModelBuildingServiceGetSlotTypeVersionsFuture

	GetSlotTypes(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypesInput) (*lexmodelbuildingservice.GetSlotTypesOutput, error)
	GetSlotTypesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypesInput) *LexModelBuildingServiceGetSlotTypesFuture

	GetUtterancesView(ctx workflow.Context, input *lexmodelbuildingservice.GetUtterancesViewInput) (*lexmodelbuildingservice.GetUtterancesViewOutput, error)
	GetUtterancesViewAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetUtterancesViewInput) *LexModelBuildingServiceGetUtterancesViewFuture

	ListTagsForResource(ctx workflow.Context, input *lexmodelbuildingservice.ListTagsForResourceInput) (*lexmodelbuildingservice.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.ListTagsForResourceInput) *LexModelBuildingServiceListTagsForResourceFuture

	PutBot(ctx workflow.Context, input *lexmodelbuildingservice.PutBotInput) (*lexmodelbuildingservice.PutBotOutput, error)
	PutBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutBotInput) *LexModelBuildingServicePutBotFuture

	PutBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.PutBotAliasInput) (*lexmodelbuildingservice.PutBotAliasOutput, error)
	PutBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutBotAliasInput) *LexModelBuildingServicePutBotAliasFuture

	PutIntent(ctx workflow.Context, input *lexmodelbuildingservice.PutIntentInput) (*lexmodelbuildingservice.PutIntentOutput, error)
	PutIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutIntentInput) *LexModelBuildingServicePutIntentFuture

	PutSlotType(ctx workflow.Context, input *lexmodelbuildingservice.PutSlotTypeInput) (*lexmodelbuildingservice.PutSlotTypeOutput, error)
	PutSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutSlotTypeInput) *LexModelBuildingServicePutSlotTypeFuture

	StartImport(ctx workflow.Context, input *lexmodelbuildingservice.StartImportInput) (*lexmodelbuildingservice.StartImportOutput, error)
	StartImportAsync(ctx workflow.Context, input *lexmodelbuildingservice.StartImportInput) *LexModelBuildingServiceStartImportFuture

	TagResource(ctx workflow.Context, input *lexmodelbuildingservice.TagResourceInput) (*lexmodelbuildingservice.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.TagResourceInput) *LexModelBuildingServiceTagResourceFuture

	UntagResource(ctx workflow.Context, input *lexmodelbuildingservice.UntagResourceInput) (*lexmodelbuildingservice.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.UntagResourceInput) *LexModelBuildingServiceUntagResourceFuture
}

type LexModelBuildingServiceStub struct{}

func NewLexModelBuildingServiceStub() LexModelBuildingServiceClient {
	return &LexModelBuildingServiceStub{}
}

type LexModelBuildingServiceCreateBotVersionFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceCreateBotVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.CreateBotVersionOutput, error) {
	var output lexmodelbuildingservice.CreateBotVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceCreateIntentVersionFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceCreateIntentVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.CreateIntentVersionOutput, error) {
	var output lexmodelbuildingservice.CreateIntentVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceCreateSlotTypeVersionFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceCreateSlotTypeVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error) {
	var output lexmodelbuildingservice.CreateSlotTypeVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteBotFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteBotFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteBotOutput, error) {
	var output lexmodelbuildingservice.DeleteBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteBotAliasFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteBotAliasFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteBotAliasOutput, error) {
	var output lexmodelbuildingservice.DeleteBotAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteBotChannelAssociationFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteBotChannelAssociationFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error) {
	var output lexmodelbuildingservice.DeleteBotChannelAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteBotVersionFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteBotVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteBotVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteBotVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteIntentFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteIntentFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteIntentOutput, error) {
	var output lexmodelbuildingservice.DeleteIntentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteIntentVersionFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteIntentVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteIntentVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteSlotTypeFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteSlotTypeFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error) {
	var output lexmodelbuildingservice.DeleteSlotTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteSlotTypeVersionFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteSlotTypeVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteSlotTypeVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteUtterancesFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteUtterancesFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteUtterancesOutput, error) {
	var output lexmodelbuildingservice.DeleteUtterancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotOutput, error) {
	var output lexmodelbuildingservice.GetBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotAliasFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotAliasFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotAliasOutput, error) {
	var output lexmodelbuildingservice.GetBotAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotAliasesFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotAliasesFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotAliasesOutput, error) {
	var output lexmodelbuildingservice.GetBotAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotChannelAssociationFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotChannelAssociationFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error) {
	var output lexmodelbuildingservice.GetBotChannelAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotChannelAssociationsFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotChannelAssociationsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error) {
	var output lexmodelbuildingservice.GetBotChannelAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotVersionsFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotVersionsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotVersionsOutput, error) {
	var output lexmodelbuildingservice.GetBotVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotsFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotsOutput, error) {
	var output lexmodelbuildingservice.GetBotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBuiltinIntentFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBuiltinIntentFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinIntentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBuiltinIntentsFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBuiltinIntentsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinIntentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBuiltinSlotTypesFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBuiltinSlotTypesFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinSlotTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetExportFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetExportFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetExportOutput, error) {
	var output lexmodelbuildingservice.GetExportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetImportFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetImportFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetImportOutput, error) {
	var output lexmodelbuildingservice.GetImportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetIntentFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetIntentFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetIntentOutput, error) {
	var output lexmodelbuildingservice.GetIntentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetIntentVersionsFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetIntentVersionsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetIntentVersionsOutput, error) {
	var output lexmodelbuildingservice.GetIntentVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetIntentsFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetIntentsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetIntentsOutput, error) {
	var output lexmodelbuildingservice.GetIntentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetSlotTypeFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetSlotTypeFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetSlotTypeOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetSlotTypeVersionsFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetSlotTypeVersionsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypeVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetSlotTypesFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetSlotTypesFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetSlotTypesOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetUtterancesViewFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetUtterancesViewFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetUtterancesViewOutput, error) {
	var output lexmodelbuildingservice.GetUtterancesViewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceListTagsForResourceFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.ListTagsForResourceOutput, error) {
	var output lexmodelbuildingservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServicePutBotFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServicePutBotFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.PutBotOutput, error) {
	var output lexmodelbuildingservice.PutBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServicePutBotAliasFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServicePutBotAliasFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.PutBotAliasOutput, error) {
	var output lexmodelbuildingservice.PutBotAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServicePutIntentFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServicePutIntentFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.PutIntentOutput, error) {
	var output lexmodelbuildingservice.PutIntentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServicePutSlotTypeFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServicePutSlotTypeFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.PutSlotTypeOutput, error) {
	var output lexmodelbuildingservice.PutSlotTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceStartImportFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceStartImportFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.StartImportOutput, error) {
	var output lexmodelbuildingservice.StartImportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceTagResourceFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceTagResourceFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.TagResourceOutput, error) {
	var output lexmodelbuildingservice.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceUntagResourceFuture struct {
	Future workflow.Future
}

func (r *LexModelBuildingServiceUntagResourceFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.UntagResourceOutput, error) {
	var output lexmodelbuildingservice.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) CreateBotVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateBotVersionInput) (*lexmodelbuildingservice.CreateBotVersionOutput, error) {
	var output lexmodelbuildingservice.CreateBotVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.CreateBotVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) CreateBotVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateBotVersionInput) *LexModelBuildingServiceCreateBotVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.CreateBotVersion", input)
	return &LexModelBuildingServiceCreateBotVersionFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) CreateIntentVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateIntentVersionInput) (*lexmodelbuildingservice.CreateIntentVersionOutput, error) {
	var output lexmodelbuildingservice.CreateIntentVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.CreateIntentVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) CreateIntentVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateIntentVersionInput) *LexModelBuildingServiceCreateIntentVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.CreateIntentVersion", input)
	return &LexModelBuildingServiceCreateIntentVersionFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) CreateSlotTypeVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateSlotTypeVersionInput) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error) {
	var output lexmodelbuildingservice.CreateSlotTypeVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.CreateSlotTypeVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) CreateSlotTypeVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateSlotTypeVersionInput) *LexModelBuildingServiceCreateSlotTypeVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.CreateSlotTypeVersion", input)
	return &LexModelBuildingServiceCreateSlotTypeVersionFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteBot(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotInput) (*lexmodelbuildingservice.DeleteBotOutput, error) {
	var output lexmodelbuildingservice.DeleteBotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBot", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotInput) *LexModelBuildingServiceDeleteBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBot", input)
	return &LexModelBuildingServiceDeleteBotFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotAliasInput) (*lexmodelbuildingservice.DeleteBotAliasOutput, error) {
	var output lexmodelbuildingservice.DeleteBotAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBotAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotAliasInput) *LexModelBuildingServiceDeleteBotAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBotAlias", input)
	return &LexModelBuildingServiceDeleteBotAliasFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteBotChannelAssociation(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotChannelAssociationInput) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error) {
	var output lexmodelbuildingservice.DeleteBotChannelAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBotChannelAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteBotChannelAssociationAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotChannelAssociationInput) *LexModelBuildingServiceDeleteBotChannelAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBotChannelAssociation", input)
	return &LexModelBuildingServiceDeleteBotChannelAssociationFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteBotVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotVersionInput) (*lexmodelbuildingservice.DeleteBotVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteBotVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBotVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteBotVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotVersionInput) *LexModelBuildingServiceDeleteBotVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBotVersion", input)
	return &LexModelBuildingServiceDeleteBotVersionFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteIntent(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentInput) (*lexmodelbuildingservice.DeleteIntentOutput, error) {
	var output lexmodelbuildingservice.DeleteIntentOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteIntent", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentInput) *LexModelBuildingServiceDeleteIntentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteIntent", input)
	return &LexModelBuildingServiceDeleteIntentFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteIntentVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentVersionInput) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteIntentVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteIntentVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteIntentVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentVersionInput) *LexModelBuildingServiceDeleteIntentVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteIntentVersion", input)
	return &LexModelBuildingServiceDeleteIntentVersionFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteSlotType(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeInput) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error) {
	var output lexmodelbuildingservice.DeleteSlotTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteSlotType", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeInput) *LexModelBuildingServiceDeleteSlotTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteSlotType", input)
	return &LexModelBuildingServiceDeleteSlotTypeFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteSlotTypeVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeVersionInput) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteSlotTypeVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteSlotTypeVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteSlotTypeVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeVersionInput) *LexModelBuildingServiceDeleteSlotTypeVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteSlotTypeVersion", input)
	return &LexModelBuildingServiceDeleteSlotTypeVersionFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteUtterances(ctx workflow.Context, input *lexmodelbuildingservice.DeleteUtterancesInput) (*lexmodelbuildingservice.DeleteUtterancesOutput, error) {
	var output lexmodelbuildingservice.DeleteUtterancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteUtterances", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteUtterancesAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteUtterancesInput) *LexModelBuildingServiceDeleteUtterancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteUtterances", input)
	return &LexModelBuildingServiceDeleteUtterancesFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBot(ctx workflow.Context, input *lexmodelbuildingservice.GetBotInput) (*lexmodelbuildingservice.GetBotOutput, error) {
	var output lexmodelbuildingservice.GetBotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBot", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotInput) *LexModelBuildingServiceGetBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBot", input)
	return &LexModelBuildingServiceGetBotFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasInput) (*lexmodelbuildingservice.GetBotAliasOutput, error) {
	var output lexmodelbuildingservice.GetBotAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasInput) *LexModelBuildingServiceGetBotAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotAlias", input)
	return &LexModelBuildingServiceGetBotAliasFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBotAliases(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasesInput) (*lexmodelbuildingservice.GetBotAliasesOutput, error) {
	var output lexmodelbuildingservice.GetBotAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotAliasesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasesInput) *LexModelBuildingServiceGetBotAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotAliases", input)
	return &LexModelBuildingServiceGetBotAliasesFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBotChannelAssociation(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationInput) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error) {
	var output lexmodelbuildingservice.GetBotChannelAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotChannelAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotChannelAssociationAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationInput) *LexModelBuildingServiceGetBotChannelAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotChannelAssociation", input)
	return &LexModelBuildingServiceGetBotChannelAssociationFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBotChannelAssociations(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error) {
	var output lexmodelbuildingservice.GetBotChannelAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotChannelAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotChannelAssociationsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput) *LexModelBuildingServiceGetBotChannelAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotChannelAssociations", input)
	return &LexModelBuildingServiceGetBotChannelAssociationsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBotVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetBotVersionsInput) (*lexmodelbuildingservice.GetBotVersionsOutput, error) {
	var output lexmodelbuildingservice.GetBotVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotVersionsInput) *LexModelBuildingServiceGetBotVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotVersions", input)
	return &LexModelBuildingServiceGetBotVersionsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBots(ctx workflow.Context, input *lexmodelbuildingservice.GetBotsInput) (*lexmodelbuildingservice.GetBotsOutput, error) {
	var output lexmodelbuildingservice.GetBotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBots", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotsInput) *LexModelBuildingServiceGetBotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBots", input)
	return &LexModelBuildingServiceGetBotsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBuiltinIntent(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentInput) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinIntentOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBuiltinIntent", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBuiltinIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentInput) *LexModelBuildingServiceGetBuiltinIntentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBuiltinIntent", input)
	return &LexModelBuildingServiceGetBuiltinIntentFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBuiltinIntents(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinIntentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBuiltinIntents", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBuiltinIntentsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput) *LexModelBuildingServiceGetBuiltinIntentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBuiltinIntents", input)
	return &LexModelBuildingServiceGetBuiltinIntentsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBuiltinSlotTypes(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinSlotTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBuiltinSlotTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBuiltinSlotTypesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput) *LexModelBuildingServiceGetBuiltinSlotTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBuiltinSlotTypes", input)
	return &LexModelBuildingServiceGetBuiltinSlotTypesFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetExport(ctx workflow.Context, input *lexmodelbuildingservice.GetExportInput) (*lexmodelbuildingservice.GetExportOutput, error) {
	var output lexmodelbuildingservice.GetExportOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetExport", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetExportAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetExportInput) *LexModelBuildingServiceGetExportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetExport", input)
	return &LexModelBuildingServiceGetExportFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetImport(ctx workflow.Context, input *lexmodelbuildingservice.GetImportInput) (*lexmodelbuildingservice.GetImportOutput, error) {
	var output lexmodelbuildingservice.GetImportOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetImport", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetImportAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetImportInput) *LexModelBuildingServiceGetImportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetImport", input)
	return &LexModelBuildingServiceGetImportFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetIntent(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentInput) (*lexmodelbuildingservice.GetIntentOutput, error) {
	var output lexmodelbuildingservice.GetIntentOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetIntent", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentInput) *LexModelBuildingServiceGetIntentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetIntent", input)
	return &LexModelBuildingServiceGetIntentFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetIntentVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentVersionsInput) (*lexmodelbuildingservice.GetIntentVersionsOutput, error) {
	var output lexmodelbuildingservice.GetIntentVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetIntentVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetIntentVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentVersionsInput) *LexModelBuildingServiceGetIntentVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetIntentVersions", input)
	return &LexModelBuildingServiceGetIntentVersionsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetIntents(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentsInput) (*lexmodelbuildingservice.GetIntentsOutput, error) {
	var output lexmodelbuildingservice.GetIntentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetIntents", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetIntentsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentsInput) *LexModelBuildingServiceGetIntentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetIntents", input)
	return &LexModelBuildingServiceGetIntentsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetSlotType(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeInput) (*lexmodelbuildingservice.GetSlotTypeOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetSlotType", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeInput) *LexModelBuildingServiceGetSlotTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetSlotType", input)
	return &LexModelBuildingServiceGetSlotTypeFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetSlotTypeVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypeVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetSlotTypeVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetSlotTypeVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput) *LexModelBuildingServiceGetSlotTypeVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetSlotTypeVersions", input)
	return &LexModelBuildingServiceGetSlotTypeVersionsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetSlotTypes(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypesInput) (*lexmodelbuildingservice.GetSlotTypesOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetSlotTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetSlotTypesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypesInput) *LexModelBuildingServiceGetSlotTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetSlotTypes", input)
	return &LexModelBuildingServiceGetSlotTypesFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetUtterancesView(ctx workflow.Context, input *lexmodelbuildingservice.GetUtterancesViewInput) (*lexmodelbuildingservice.GetUtterancesViewOutput, error) {
	var output lexmodelbuildingservice.GetUtterancesViewOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetUtterancesView", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetUtterancesViewAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetUtterancesViewInput) *LexModelBuildingServiceGetUtterancesViewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetUtterancesView", input)
	return &LexModelBuildingServiceGetUtterancesViewFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) ListTagsForResource(ctx workflow.Context, input *lexmodelbuildingservice.ListTagsForResourceInput) (*lexmodelbuildingservice.ListTagsForResourceOutput, error) {
	var output lexmodelbuildingservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) ListTagsForResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.ListTagsForResourceInput) *LexModelBuildingServiceListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.ListTagsForResource", input)
	return &LexModelBuildingServiceListTagsForResourceFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) PutBot(ctx workflow.Context, input *lexmodelbuildingservice.PutBotInput) (*lexmodelbuildingservice.PutBotOutput, error) {
	var output lexmodelbuildingservice.PutBotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutBot", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) PutBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutBotInput) *LexModelBuildingServicePutBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutBot", input)
	return &LexModelBuildingServicePutBotFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) PutBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.PutBotAliasInput) (*lexmodelbuildingservice.PutBotAliasOutput, error) {
	var output lexmodelbuildingservice.PutBotAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutBotAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) PutBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutBotAliasInput) *LexModelBuildingServicePutBotAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutBotAlias", input)
	return &LexModelBuildingServicePutBotAliasFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) PutIntent(ctx workflow.Context, input *lexmodelbuildingservice.PutIntentInput) (*lexmodelbuildingservice.PutIntentOutput, error) {
	var output lexmodelbuildingservice.PutIntentOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutIntent", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) PutIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutIntentInput) *LexModelBuildingServicePutIntentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutIntent", input)
	return &LexModelBuildingServicePutIntentFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) PutSlotType(ctx workflow.Context, input *lexmodelbuildingservice.PutSlotTypeInput) (*lexmodelbuildingservice.PutSlotTypeOutput, error) {
	var output lexmodelbuildingservice.PutSlotTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutSlotType", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) PutSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutSlotTypeInput) *LexModelBuildingServicePutSlotTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutSlotType", input)
	return &LexModelBuildingServicePutSlotTypeFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) StartImport(ctx workflow.Context, input *lexmodelbuildingservice.StartImportInput) (*lexmodelbuildingservice.StartImportOutput, error) {
	var output lexmodelbuildingservice.StartImportOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.StartImport", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) StartImportAsync(ctx workflow.Context, input *lexmodelbuildingservice.StartImportInput) *LexModelBuildingServiceStartImportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.StartImport", input)
	return &LexModelBuildingServiceStartImportFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) TagResource(ctx workflow.Context, input *lexmodelbuildingservice.TagResourceInput) (*lexmodelbuildingservice.TagResourceOutput, error) {
	var output lexmodelbuildingservice.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) TagResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.TagResourceInput) *LexModelBuildingServiceTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.TagResource", input)
	return &LexModelBuildingServiceTagResourceFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) UntagResource(ctx workflow.Context, input *lexmodelbuildingservice.UntagResourceInput) (*lexmodelbuildingservice.UntagResourceOutput, error) {
	var output lexmodelbuildingservice.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) UntagResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.UntagResourceInput) *LexModelBuildingServiceUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.UntagResource", input)
	return &LexModelBuildingServiceUntagResourceFuture{Future: future}
}
