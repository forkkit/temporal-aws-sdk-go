// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/lexmodelbuildingservice"
	"go.temporal.io/sdk/workflow"
)

type LexModelBuildingServiceClient interface {
	CreateBotVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateBotVersionInput) (*lexmodelbuildingservice.CreateBotVersionOutput, error)
	CreateBotVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateBotVersionInput) *LexmodelbuildingserviceCreateBotVersionFuture

	CreateIntentVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateIntentVersionInput) (*lexmodelbuildingservice.CreateIntentVersionOutput, error)
	CreateIntentVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateIntentVersionInput) *LexmodelbuildingserviceCreateIntentVersionFuture

	CreateSlotTypeVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateSlotTypeVersionInput) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error)
	CreateSlotTypeVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateSlotTypeVersionInput) *LexmodelbuildingserviceCreateSlotTypeVersionFuture

	DeleteBot(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotInput) (*lexmodelbuildingservice.DeleteBotOutput, error)
	DeleteBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotInput) *LexmodelbuildingserviceDeleteBotFuture

	DeleteBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotAliasInput) (*lexmodelbuildingservice.DeleteBotAliasOutput, error)
	DeleteBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotAliasInput) *LexmodelbuildingserviceDeleteBotAliasFuture

	DeleteBotChannelAssociation(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotChannelAssociationInput) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error)
	DeleteBotChannelAssociationAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotChannelAssociationInput) *LexmodelbuildingserviceDeleteBotChannelAssociationFuture

	DeleteBotVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotVersionInput) (*lexmodelbuildingservice.DeleteBotVersionOutput, error)
	DeleteBotVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotVersionInput) *LexmodelbuildingserviceDeleteBotVersionFuture

	DeleteIntent(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentInput) (*lexmodelbuildingservice.DeleteIntentOutput, error)
	DeleteIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentInput) *LexmodelbuildingserviceDeleteIntentFuture

	DeleteIntentVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentVersionInput) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error)
	DeleteIntentVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentVersionInput) *LexmodelbuildingserviceDeleteIntentVersionFuture

	DeleteSlotType(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeInput) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error)
	DeleteSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeInput) *LexmodelbuildingserviceDeleteSlotTypeFuture

	DeleteSlotTypeVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeVersionInput) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error)
	DeleteSlotTypeVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeVersionInput) *LexmodelbuildingserviceDeleteSlotTypeVersionFuture

	DeleteUtterances(ctx workflow.Context, input *lexmodelbuildingservice.DeleteUtterancesInput) (*lexmodelbuildingservice.DeleteUtterancesOutput, error)
	DeleteUtterancesAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteUtterancesInput) *LexmodelbuildingserviceDeleteUtterancesFuture

	GetBot(ctx workflow.Context, input *lexmodelbuildingservice.GetBotInput) (*lexmodelbuildingservice.GetBotOutput, error)
	GetBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotInput) *LexmodelbuildingserviceGetBotFuture

	GetBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasInput) (*lexmodelbuildingservice.GetBotAliasOutput, error)
	GetBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasInput) *LexmodelbuildingserviceGetBotAliasFuture

	GetBotAliases(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasesInput) (*lexmodelbuildingservice.GetBotAliasesOutput, error)
	GetBotAliasesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasesInput) *LexmodelbuildingserviceGetBotAliasesFuture

	GetBotChannelAssociation(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationInput) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error)
	GetBotChannelAssociationAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationInput) *LexmodelbuildingserviceGetBotChannelAssociationFuture

	GetBotChannelAssociations(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error)
	GetBotChannelAssociationsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput) *LexmodelbuildingserviceGetBotChannelAssociationsFuture

	GetBotVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetBotVersionsInput) (*lexmodelbuildingservice.GetBotVersionsOutput, error)
	GetBotVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotVersionsInput) *LexmodelbuildingserviceGetBotVersionsFuture

	GetBots(ctx workflow.Context, input *lexmodelbuildingservice.GetBotsInput) (*lexmodelbuildingservice.GetBotsOutput, error)
	GetBotsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotsInput) *LexmodelbuildingserviceGetBotsFuture

	GetBuiltinIntent(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentInput) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error)
	GetBuiltinIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentInput) *LexmodelbuildingserviceGetBuiltinIntentFuture

	GetBuiltinIntents(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error)
	GetBuiltinIntentsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput) *LexmodelbuildingserviceGetBuiltinIntentsFuture

	GetBuiltinSlotTypes(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error)
	GetBuiltinSlotTypesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput) *LexmodelbuildingserviceGetBuiltinSlotTypesFuture

	GetExport(ctx workflow.Context, input *lexmodelbuildingservice.GetExportInput) (*lexmodelbuildingservice.GetExportOutput, error)
	GetExportAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetExportInput) *LexmodelbuildingserviceGetExportFuture

	GetImport(ctx workflow.Context, input *lexmodelbuildingservice.GetImportInput) (*lexmodelbuildingservice.GetImportOutput, error)
	GetImportAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetImportInput) *LexmodelbuildingserviceGetImportFuture

	GetIntent(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentInput) (*lexmodelbuildingservice.GetIntentOutput, error)
	GetIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentInput) *LexmodelbuildingserviceGetIntentFuture

	GetIntentVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentVersionsInput) (*lexmodelbuildingservice.GetIntentVersionsOutput, error)
	GetIntentVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentVersionsInput) *LexmodelbuildingserviceGetIntentVersionsFuture

	GetIntents(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentsInput) (*lexmodelbuildingservice.GetIntentsOutput, error)
	GetIntentsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentsInput) *LexmodelbuildingserviceGetIntentsFuture

	GetSlotType(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeInput) (*lexmodelbuildingservice.GetSlotTypeOutput, error)
	GetSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeInput) *LexmodelbuildingserviceGetSlotTypeFuture

	GetSlotTypeVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error)
	GetSlotTypeVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput) *LexmodelbuildingserviceGetSlotTypeVersionsFuture

	GetSlotTypes(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypesInput) (*lexmodelbuildingservice.GetSlotTypesOutput, error)
	GetSlotTypesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypesInput) *LexmodelbuildingserviceGetSlotTypesFuture

	GetUtterancesView(ctx workflow.Context, input *lexmodelbuildingservice.GetUtterancesViewInput) (*lexmodelbuildingservice.GetUtterancesViewOutput, error)
	GetUtterancesViewAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetUtterancesViewInput) *LexmodelbuildingserviceGetUtterancesViewFuture

	ListTagsForResource(ctx workflow.Context, input *lexmodelbuildingservice.ListTagsForResourceInput) (*lexmodelbuildingservice.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.ListTagsForResourceInput) *LexmodelbuildingserviceListTagsForResourceFuture

	PutBot(ctx workflow.Context, input *lexmodelbuildingservice.PutBotInput) (*lexmodelbuildingservice.PutBotOutput, error)
	PutBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutBotInput) *LexmodelbuildingservicePutBotFuture

	PutBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.PutBotAliasInput) (*lexmodelbuildingservice.PutBotAliasOutput, error)
	PutBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutBotAliasInput) *LexmodelbuildingservicePutBotAliasFuture

	PutIntent(ctx workflow.Context, input *lexmodelbuildingservice.PutIntentInput) (*lexmodelbuildingservice.PutIntentOutput, error)
	PutIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutIntentInput) *LexmodelbuildingservicePutIntentFuture

	PutSlotType(ctx workflow.Context, input *lexmodelbuildingservice.PutSlotTypeInput) (*lexmodelbuildingservice.PutSlotTypeOutput, error)
	PutSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutSlotTypeInput) *LexmodelbuildingservicePutSlotTypeFuture

	StartImport(ctx workflow.Context, input *lexmodelbuildingservice.StartImportInput) (*lexmodelbuildingservice.StartImportOutput, error)
	StartImportAsync(ctx workflow.Context, input *lexmodelbuildingservice.StartImportInput) *LexmodelbuildingserviceStartImportFuture

	TagResource(ctx workflow.Context, input *lexmodelbuildingservice.TagResourceInput) (*lexmodelbuildingservice.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.TagResourceInput) *LexmodelbuildingserviceTagResourceFuture

	UntagResource(ctx workflow.Context, input *lexmodelbuildingservice.UntagResourceInput) (*lexmodelbuildingservice.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.UntagResourceInput) *LexmodelbuildingserviceUntagResourceFuture
}

type LexModelBuildingServiceStub struct{}

func NewLexModelBuildingServiceStub() LexModelBuildingServiceClient {
	return &LexModelBuildingServiceStub{}
}

type LexmodelbuildingserviceCreateBotVersionFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceCreateBotVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.CreateBotVersionOutput, error) {
	var output lexmodelbuildingservice.CreateBotVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceCreateIntentVersionFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceCreateIntentVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.CreateIntentVersionOutput, error) {
	var output lexmodelbuildingservice.CreateIntentVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceCreateSlotTypeVersionFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceCreateSlotTypeVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error) {
	var output lexmodelbuildingservice.CreateSlotTypeVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceDeleteBotFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceDeleteBotFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteBotOutput, error) {
	var output lexmodelbuildingservice.DeleteBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceDeleteBotAliasFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceDeleteBotAliasFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteBotAliasOutput, error) {
	var output lexmodelbuildingservice.DeleteBotAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceDeleteBotChannelAssociationFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceDeleteBotChannelAssociationFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error) {
	var output lexmodelbuildingservice.DeleteBotChannelAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceDeleteBotVersionFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceDeleteBotVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteBotVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteBotVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceDeleteIntentFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceDeleteIntentFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteIntentOutput, error) {
	var output lexmodelbuildingservice.DeleteIntentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceDeleteIntentVersionFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceDeleteIntentVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteIntentVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceDeleteSlotTypeFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceDeleteSlotTypeFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error) {
	var output lexmodelbuildingservice.DeleteSlotTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceDeleteSlotTypeVersionFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceDeleteSlotTypeVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteSlotTypeVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceDeleteUtterancesFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceDeleteUtterancesFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteUtterancesOutput, error) {
	var output lexmodelbuildingservice.DeleteUtterancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetBotFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetBotFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotOutput, error) {
	var output lexmodelbuildingservice.GetBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetBotAliasFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetBotAliasFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotAliasOutput, error) {
	var output lexmodelbuildingservice.GetBotAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetBotAliasesFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetBotAliasesFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotAliasesOutput, error) {
	var output lexmodelbuildingservice.GetBotAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetBotChannelAssociationFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetBotChannelAssociationFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error) {
	var output lexmodelbuildingservice.GetBotChannelAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetBotChannelAssociationsFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetBotChannelAssociationsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error) {
	var output lexmodelbuildingservice.GetBotChannelAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetBotVersionsFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetBotVersionsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotVersionsOutput, error) {
	var output lexmodelbuildingservice.GetBotVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetBotsFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetBotsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotsOutput, error) {
	var output lexmodelbuildingservice.GetBotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetBuiltinIntentFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetBuiltinIntentFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinIntentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetBuiltinIntentsFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetBuiltinIntentsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinIntentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetBuiltinSlotTypesFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetBuiltinSlotTypesFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinSlotTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetExportFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetExportFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetExportOutput, error) {
	var output lexmodelbuildingservice.GetExportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetImportFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetImportFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetImportOutput, error) {
	var output lexmodelbuildingservice.GetImportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetIntentFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetIntentFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetIntentOutput, error) {
	var output lexmodelbuildingservice.GetIntentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetIntentVersionsFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetIntentVersionsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetIntentVersionsOutput, error) {
	var output lexmodelbuildingservice.GetIntentVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetIntentsFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetIntentsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetIntentsOutput, error) {
	var output lexmodelbuildingservice.GetIntentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetSlotTypeFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetSlotTypeFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetSlotTypeOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetSlotTypeVersionsFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetSlotTypeVersionsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypeVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetSlotTypesFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetSlotTypesFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetSlotTypesOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceGetUtterancesViewFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceGetUtterancesViewFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetUtterancesViewOutput, error) {
	var output lexmodelbuildingservice.GetUtterancesViewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceListTagsForResourceFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.ListTagsForResourceOutput, error) {
	var output lexmodelbuildingservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingservicePutBotFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingservicePutBotFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.PutBotOutput, error) {
	var output lexmodelbuildingservice.PutBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingservicePutBotAliasFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingservicePutBotAliasFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.PutBotAliasOutput, error) {
	var output lexmodelbuildingservice.PutBotAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingservicePutIntentFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingservicePutIntentFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.PutIntentOutput, error) {
	var output lexmodelbuildingservice.PutIntentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingservicePutSlotTypeFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingservicePutSlotTypeFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.PutSlotTypeOutput, error) {
	var output lexmodelbuildingservice.PutSlotTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceStartImportFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceStartImportFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.StartImportOutput, error) {
	var output lexmodelbuildingservice.StartImportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceTagResourceFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceTagResourceFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.TagResourceOutput, error) {
	var output lexmodelbuildingservice.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexmodelbuildingserviceUntagResourceFuture struct {
	Future workflow.Future
}

func (r *LexmodelbuildingserviceUntagResourceFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.UntagResourceOutput, error) {
	var output lexmodelbuildingservice.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) CreateBotVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateBotVersionInput) (*lexmodelbuildingservice.CreateBotVersionOutput, error) {
	var output lexmodelbuildingservice.CreateBotVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.CreateBotVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) CreateBotVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateBotVersionInput) *LexmodelbuildingserviceCreateBotVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.CreateBotVersion", input)
	return &LexmodelbuildingserviceCreateBotVersionFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) CreateIntentVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateIntentVersionInput) (*lexmodelbuildingservice.CreateIntentVersionOutput, error) {
	var output lexmodelbuildingservice.CreateIntentVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.CreateIntentVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) CreateIntentVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateIntentVersionInput) *LexmodelbuildingserviceCreateIntentVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.CreateIntentVersion", input)
	return &LexmodelbuildingserviceCreateIntentVersionFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) CreateSlotTypeVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateSlotTypeVersionInput) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error) {
	var output lexmodelbuildingservice.CreateSlotTypeVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.CreateSlotTypeVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) CreateSlotTypeVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateSlotTypeVersionInput) *LexmodelbuildingserviceCreateSlotTypeVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.CreateSlotTypeVersion", input)
	return &LexmodelbuildingserviceCreateSlotTypeVersionFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteBot(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotInput) (*lexmodelbuildingservice.DeleteBotOutput, error) {
	var output lexmodelbuildingservice.DeleteBotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBot", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotInput) *LexmodelbuildingserviceDeleteBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBot", input)
	return &LexmodelbuildingserviceDeleteBotFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotAliasInput) (*lexmodelbuildingservice.DeleteBotAliasOutput, error) {
	var output lexmodelbuildingservice.DeleteBotAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBotAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotAliasInput) *LexmodelbuildingserviceDeleteBotAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBotAlias", input)
	return &LexmodelbuildingserviceDeleteBotAliasFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteBotChannelAssociation(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotChannelAssociationInput) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error) {
	var output lexmodelbuildingservice.DeleteBotChannelAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBotChannelAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteBotChannelAssociationAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotChannelAssociationInput) *LexmodelbuildingserviceDeleteBotChannelAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBotChannelAssociation", input)
	return &LexmodelbuildingserviceDeleteBotChannelAssociationFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteBotVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotVersionInput) (*lexmodelbuildingservice.DeleteBotVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteBotVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBotVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteBotVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotVersionInput) *LexmodelbuildingserviceDeleteBotVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteBotVersion", input)
	return &LexmodelbuildingserviceDeleteBotVersionFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteIntent(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentInput) (*lexmodelbuildingservice.DeleteIntentOutput, error) {
	var output lexmodelbuildingservice.DeleteIntentOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteIntent", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentInput) *LexmodelbuildingserviceDeleteIntentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteIntent", input)
	return &LexmodelbuildingserviceDeleteIntentFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteIntentVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentVersionInput) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteIntentVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteIntentVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteIntentVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentVersionInput) *LexmodelbuildingserviceDeleteIntentVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteIntentVersion", input)
	return &LexmodelbuildingserviceDeleteIntentVersionFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteSlotType(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeInput) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error) {
	var output lexmodelbuildingservice.DeleteSlotTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteSlotType", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeInput) *LexmodelbuildingserviceDeleteSlotTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteSlotType", input)
	return &LexmodelbuildingserviceDeleteSlotTypeFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteSlotTypeVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeVersionInput) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteSlotTypeVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteSlotTypeVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteSlotTypeVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeVersionInput) *LexmodelbuildingserviceDeleteSlotTypeVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteSlotTypeVersion", input)
	return &LexmodelbuildingserviceDeleteSlotTypeVersionFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) DeleteUtterances(ctx workflow.Context, input *lexmodelbuildingservice.DeleteUtterancesInput) (*lexmodelbuildingservice.DeleteUtterancesOutput, error) {
	var output lexmodelbuildingservice.DeleteUtterancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteUtterances", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) DeleteUtterancesAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteUtterancesInput) *LexmodelbuildingserviceDeleteUtterancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.DeleteUtterances", input)
	return &LexmodelbuildingserviceDeleteUtterancesFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBot(ctx workflow.Context, input *lexmodelbuildingservice.GetBotInput) (*lexmodelbuildingservice.GetBotOutput, error) {
	var output lexmodelbuildingservice.GetBotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBot", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotInput) *LexmodelbuildingserviceGetBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBot", input)
	return &LexmodelbuildingserviceGetBotFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasInput) (*lexmodelbuildingservice.GetBotAliasOutput, error) {
	var output lexmodelbuildingservice.GetBotAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasInput) *LexmodelbuildingserviceGetBotAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotAlias", input)
	return &LexmodelbuildingserviceGetBotAliasFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBotAliases(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasesInput) (*lexmodelbuildingservice.GetBotAliasesOutput, error) {
	var output lexmodelbuildingservice.GetBotAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotAliasesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasesInput) *LexmodelbuildingserviceGetBotAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotAliases", input)
	return &LexmodelbuildingserviceGetBotAliasesFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBotChannelAssociation(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationInput) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error) {
	var output lexmodelbuildingservice.GetBotChannelAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotChannelAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotChannelAssociationAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationInput) *LexmodelbuildingserviceGetBotChannelAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotChannelAssociation", input)
	return &LexmodelbuildingserviceGetBotChannelAssociationFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBotChannelAssociations(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error) {
	var output lexmodelbuildingservice.GetBotChannelAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotChannelAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotChannelAssociationsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput) *LexmodelbuildingserviceGetBotChannelAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotChannelAssociations", input)
	return &LexmodelbuildingserviceGetBotChannelAssociationsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBotVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetBotVersionsInput) (*lexmodelbuildingservice.GetBotVersionsOutput, error) {
	var output lexmodelbuildingservice.GetBotVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotVersionsInput) *LexmodelbuildingserviceGetBotVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBotVersions", input)
	return &LexmodelbuildingserviceGetBotVersionsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBots(ctx workflow.Context, input *lexmodelbuildingservice.GetBotsInput) (*lexmodelbuildingservice.GetBotsOutput, error) {
	var output lexmodelbuildingservice.GetBotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBots", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBotsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotsInput) *LexmodelbuildingserviceGetBotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBots", input)
	return &LexmodelbuildingserviceGetBotsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBuiltinIntent(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentInput) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinIntentOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBuiltinIntent", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBuiltinIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentInput) *LexmodelbuildingserviceGetBuiltinIntentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBuiltinIntent", input)
	return &LexmodelbuildingserviceGetBuiltinIntentFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBuiltinIntents(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinIntentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBuiltinIntents", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBuiltinIntentsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput) *LexmodelbuildingserviceGetBuiltinIntentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBuiltinIntents", input)
	return &LexmodelbuildingserviceGetBuiltinIntentsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetBuiltinSlotTypes(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinSlotTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBuiltinSlotTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetBuiltinSlotTypesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput) *LexmodelbuildingserviceGetBuiltinSlotTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetBuiltinSlotTypes", input)
	return &LexmodelbuildingserviceGetBuiltinSlotTypesFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetExport(ctx workflow.Context, input *lexmodelbuildingservice.GetExportInput) (*lexmodelbuildingservice.GetExportOutput, error) {
	var output lexmodelbuildingservice.GetExportOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetExport", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetExportAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetExportInput) *LexmodelbuildingserviceGetExportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetExport", input)
	return &LexmodelbuildingserviceGetExportFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetImport(ctx workflow.Context, input *lexmodelbuildingservice.GetImportInput) (*lexmodelbuildingservice.GetImportOutput, error) {
	var output lexmodelbuildingservice.GetImportOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetImport", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetImportAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetImportInput) *LexmodelbuildingserviceGetImportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetImport", input)
	return &LexmodelbuildingserviceGetImportFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetIntent(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentInput) (*lexmodelbuildingservice.GetIntentOutput, error) {
	var output lexmodelbuildingservice.GetIntentOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetIntent", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentInput) *LexmodelbuildingserviceGetIntentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetIntent", input)
	return &LexmodelbuildingserviceGetIntentFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetIntentVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentVersionsInput) (*lexmodelbuildingservice.GetIntentVersionsOutput, error) {
	var output lexmodelbuildingservice.GetIntentVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetIntentVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetIntentVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentVersionsInput) *LexmodelbuildingserviceGetIntentVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetIntentVersions", input)
	return &LexmodelbuildingserviceGetIntentVersionsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetIntents(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentsInput) (*lexmodelbuildingservice.GetIntentsOutput, error) {
	var output lexmodelbuildingservice.GetIntentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetIntents", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetIntentsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentsInput) *LexmodelbuildingserviceGetIntentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetIntents", input)
	return &LexmodelbuildingserviceGetIntentsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetSlotType(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeInput) (*lexmodelbuildingservice.GetSlotTypeOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetSlotType", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeInput) *LexmodelbuildingserviceGetSlotTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetSlotType", input)
	return &LexmodelbuildingserviceGetSlotTypeFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetSlotTypeVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypeVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetSlotTypeVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetSlotTypeVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput) *LexmodelbuildingserviceGetSlotTypeVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetSlotTypeVersions", input)
	return &LexmodelbuildingserviceGetSlotTypeVersionsFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetSlotTypes(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypesInput) (*lexmodelbuildingservice.GetSlotTypesOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetSlotTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetSlotTypesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypesInput) *LexmodelbuildingserviceGetSlotTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetSlotTypes", input)
	return &LexmodelbuildingserviceGetSlotTypesFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) GetUtterancesView(ctx workflow.Context, input *lexmodelbuildingservice.GetUtterancesViewInput) (*lexmodelbuildingservice.GetUtterancesViewOutput, error) {
	var output lexmodelbuildingservice.GetUtterancesViewOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetUtterancesView", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) GetUtterancesViewAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetUtterancesViewInput) *LexmodelbuildingserviceGetUtterancesViewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.GetUtterancesView", input)
	return &LexmodelbuildingserviceGetUtterancesViewFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) ListTagsForResource(ctx workflow.Context, input *lexmodelbuildingservice.ListTagsForResourceInput) (*lexmodelbuildingservice.ListTagsForResourceOutput, error) {
	var output lexmodelbuildingservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) ListTagsForResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.ListTagsForResourceInput) *LexmodelbuildingserviceListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.ListTagsForResource", input)
	return &LexmodelbuildingserviceListTagsForResourceFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) PutBot(ctx workflow.Context, input *lexmodelbuildingservice.PutBotInput) (*lexmodelbuildingservice.PutBotOutput, error) {
	var output lexmodelbuildingservice.PutBotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutBot", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) PutBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutBotInput) *LexmodelbuildingservicePutBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutBot", input)
	return &LexmodelbuildingservicePutBotFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) PutBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.PutBotAliasInput) (*lexmodelbuildingservice.PutBotAliasOutput, error) {
	var output lexmodelbuildingservice.PutBotAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutBotAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) PutBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutBotAliasInput) *LexmodelbuildingservicePutBotAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutBotAlias", input)
	return &LexmodelbuildingservicePutBotAliasFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) PutIntent(ctx workflow.Context, input *lexmodelbuildingservice.PutIntentInput) (*lexmodelbuildingservice.PutIntentOutput, error) {
	var output lexmodelbuildingservice.PutIntentOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutIntent", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) PutIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutIntentInput) *LexmodelbuildingservicePutIntentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutIntent", input)
	return &LexmodelbuildingservicePutIntentFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) PutSlotType(ctx workflow.Context, input *lexmodelbuildingservice.PutSlotTypeInput) (*lexmodelbuildingservice.PutSlotTypeOutput, error) {
	var output lexmodelbuildingservice.PutSlotTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutSlotType", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) PutSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutSlotTypeInput) *LexmodelbuildingservicePutSlotTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.PutSlotType", input)
	return &LexmodelbuildingservicePutSlotTypeFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) StartImport(ctx workflow.Context, input *lexmodelbuildingservice.StartImportInput) (*lexmodelbuildingservice.StartImportOutput, error) {
	var output lexmodelbuildingservice.StartImportOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.StartImport", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) StartImportAsync(ctx workflow.Context, input *lexmodelbuildingservice.StartImportInput) *LexmodelbuildingserviceStartImportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.StartImport", input)
	return &LexmodelbuildingserviceStartImportFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) TagResource(ctx workflow.Context, input *lexmodelbuildingservice.TagResourceInput) (*lexmodelbuildingservice.TagResourceOutput, error) {
	var output lexmodelbuildingservice.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) TagResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.TagResourceInput) *LexmodelbuildingserviceTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.TagResource", input)
	return &LexmodelbuildingserviceTagResourceFuture{Future: future}
}

func (a *LexModelBuildingServiceStub) UntagResource(ctx workflow.Context, input *lexmodelbuildingservice.UntagResourceInput) (*lexmodelbuildingservice.UntagResourceOutput, error) {
	var output lexmodelbuildingservice.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LexModelBuildingServiceStub) UntagResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.UntagResourceInput) *LexmodelbuildingserviceUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lexmodelbuildingservice.UntagResource", input)
	return &LexmodelbuildingserviceUntagResourceFuture{Future: future}
}
