// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/configservice"
	"go.temporal.io/sdk/workflow"
)

type ConfigServiceClient interface {
	BatchGetAggregateResourceConfig(ctx workflow.Context, input *configservice.BatchGetAggregateResourceConfigInput) (*configservice.BatchGetAggregateResourceConfigOutput, error)
	BatchGetAggregateResourceConfigAsync(ctx workflow.Context, input *configservice.BatchGetAggregateResourceConfigInput) *ConfigserviceBatchGetAggregateResourceConfigFuture

	BatchGetResourceConfig(ctx workflow.Context, input *configservice.BatchGetResourceConfigInput) (*configservice.BatchGetResourceConfigOutput, error)
	BatchGetResourceConfigAsync(ctx workflow.Context, input *configservice.BatchGetResourceConfigInput) *ConfigserviceBatchGetResourceConfigFuture

	DeleteAggregationAuthorization(ctx workflow.Context, input *configservice.DeleteAggregationAuthorizationInput) (*configservice.DeleteAggregationAuthorizationOutput, error)
	DeleteAggregationAuthorizationAsync(ctx workflow.Context, input *configservice.DeleteAggregationAuthorizationInput) *ConfigserviceDeleteAggregationAuthorizationFuture

	DeleteConfigRule(ctx workflow.Context, input *configservice.DeleteConfigRuleInput) (*configservice.DeleteConfigRuleOutput, error)
	DeleteConfigRuleAsync(ctx workflow.Context, input *configservice.DeleteConfigRuleInput) *ConfigserviceDeleteConfigRuleFuture

	DeleteConfigurationAggregator(ctx workflow.Context, input *configservice.DeleteConfigurationAggregatorInput) (*configservice.DeleteConfigurationAggregatorOutput, error)
	DeleteConfigurationAggregatorAsync(ctx workflow.Context, input *configservice.DeleteConfigurationAggregatorInput) *ConfigserviceDeleteConfigurationAggregatorFuture

	DeleteConfigurationRecorder(ctx workflow.Context, input *configservice.DeleteConfigurationRecorderInput) (*configservice.DeleteConfigurationRecorderOutput, error)
	DeleteConfigurationRecorderAsync(ctx workflow.Context, input *configservice.DeleteConfigurationRecorderInput) *ConfigserviceDeleteConfigurationRecorderFuture

	DeleteConformancePack(ctx workflow.Context, input *configservice.DeleteConformancePackInput) (*configservice.DeleteConformancePackOutput, error)
	DeleteConformancePackAsync(ctx workflow.Context, input *configservice.DeleteConformancePackInput) *ConfigserviceDeleteConformancePackFuture

	DeleteDeliveryChannel(ctx workflow.Context, input *configservice.DeleteDeliveryChannelInput) (*configservice.DeleteDeliveryChannelOutput, error)
	DeleteDeliveryChannelAsync(ctx workflow.Context, input *configservice.DeleteDeliveryChannelInput) *ConfigserviceDeleteDeliveryChannelFuture

	DeleteEvaluationResults(ctx workflow.Context, input *configservice.DeleteEvaluationResultsInput) (*configservice.DeleteEvaluationResultsOutput, error)
	DeleteEvaluationResultsAsync(ctx workflow.Context, input *configservice.DeleteEvaluationResultsInput) *ConfigserviceDeleteEvaluationResultsFuture

	DeleteOrganizationConfigRule(ctx workflow.Context, input *configservice.DeleteOrganizationConfigRuleInput) (*configservice.DeleteOrganizationConfigRuleOutput, error)
	DeleteOrganizationConfigRuleAsync(ctx workflow.Context, input *configservice.DeleteOrganizationConfigRuleInput) *ConfigserviceDeleteOrganizationConfigRuleFuture

	DeleteOrganizationConformancePack(ctx workflow.Context, input *configservice.DeleteOrganizationConformancePackInput) (*configservice.DeleteOrganizationConformancePackOutput, error)
	DeleteOrganizationConformancePackAsync(ctx workflow.Context, input *configservice.DeleteOrganizationConformancePackInput) *ConfigserviceDeleteOrganizationConformancePackFuture

	DeleteRemediationConfiguration(ctx workflow.Context, input *configservice.DeleteRemediationConfigurationInput) (*configservice.DeleteRemediationConfigurationOutput, error)
	DeleteRemediationConfigurationAsync(ctx workflow.Context, input *configservice.DeleteRemediationConfigurationInput) *ConfigserviceDeleteRemediationConfigurationFuture

	DeleteRemediationExceptions(ctx workflow.Context, input *configservice.DeleteRemediationExceptionsInput) (*configservice.DeleteRemediationExceptionsOutput, error)
	DeleteRemediationExceptionsAsync(ctx workflow.Context, input *configservice.DeleteRemediationExceptionsInput) *ConfigserviceDeleteRemediationExceptionsFuture

	DeleteResourceConfig(ctx workflow.Context, input *configservice.DeleteResourceConfigInput) (*configservice.DeleteResourceConfigOutput, error)
	DeleteResourceConfigAsync(ctx workflow.Context, input *configservice.DeleteResourceConfigInput) *ConfigserviceDeleteResourceConfigFuture

	DeleteRetentionConfiguration(ctx workflow.Context, input *configservice.DeleteRetentionConfigurationInput) (*configservice.DeleteRetentionConfigurationOutput, error)
	DeleteRetentionConfigurationAsync(ctx workflow.Context, input *configservice.DeleteRetentionConfigurationInput) *ConfigserviceDeleteRetentionConfigurationFuture

	DeliverConfigSnapshot(ctx workflow.Context, input *configservice.DeliverConfigSnapshotInput) (*configservice.DeliverConfigSnapshotOutput, error)
	DeliverConfigSnapshotAsync(ctx workflow.Context, input *configservice.DeliverConfigSnapshotInput) *ConfigserviceDeliverConfigSnapshotFuture

	DescribeAggregateComplianceByConfigRules(ctx workflow.Context, input *configservice.DescribeAggregateComplianceByConfigRulesInput) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error)
	DescribeAggregateComplianceByConfigRulesAsync(ctx workflow.Context, input *configservice.DescribeAggregateComplianceByConfigRulesInput) *ConfigserviceDescribeAggregateComplianceByConfigRulesFuture

	DescribeAggregationAuthorizations(ctx workflow.Context, input *configservice.DescribeAggregationAuthorizationsInput) (*configservice.DescribeAggregationAuthorizationsOutput, error)
	DescribeAggregationAuthorizationsAsync(ctx workflow.Context, input *configservice.DescribeAggregationAuthorizationsInput) *ConfigserviceDescribeAggregationAuthorizationsFuture

	DescribeComplianceByConfigRule(ctx workflow.Context, input *configservice.DescribeComplianceByConfigRuleInput) (*configservice.DescribeComplianceByConfigRuleOutput, error)
	DescribeComplianceByConfigRuleAsync(ctx workflow.Context, input *configservice.DescribeComplianceByConfigRuleInput) *ConfigserviceDescribeComplianceByConfigRuleFuture

	DescribeComplianceByResource(ctx workflow.Context, input *configservice.DescribeComplianceByResourceInput) (*configservice.DescribeComplianceByResourceOutput, error)
	DescribeComplianceByResourceAsync(ctx workflow.Context, input *configservice.DescribeComplianceByResourceInput) *ConfigserviceDescribeComplianceByResourceFuture

	DescribeConfigRuleEvaluationStatus(ctx workflow.Context, input *configservice.DescribeConfigRuleEvaluationStatusInput) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error)
	DescribeConfigRuleEvaluationStatusAsync(ctx workflow.Context, input *configservice.DescribeConfigRuleEvaluationStatusInput) *ConfigserviceDescribeConfigRuleEvaluationStatusFuture

	DescribeConfigRules(ctx workflow.Context, input *configservice.DescribeConfigRulesInput) (*configservice.DescribeConfigRulesOutput, error)
	DescribeConfigRulesAsync(ctx workflow.Context, input *configservice.DescribeConfigRulesInput) *ConfigserviceDescribeConfigRulesFuture

	DescribeConfigurationAggregatorSourcesStatus(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorSourcesStatusInput) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error)
	DescribeConfigurationAggregatorSourcesStatusAsync(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorSourcesStatusInput) *ConfigserviceDescribeConfigurationAggregatorSourcesStatusFuture

	DescribeConfigurationAggregators(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorsInput) (*configservice.DescribeConfigurationAggregatorsOutput, error)
	DescribeConfigurationAggregatorsAsync(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorsInput) *ConfigserviceDescribeConfigurationAggregatorsFuture

	DescribeConfigurationRecorderStatus(ctx workflow.Context, input *configservice.DescribeConfigurationRecorderStatusInput) (*configservice.DescribeConfigurationRecorderStatusOutput, error)
	DescribeConfigurationRecorderStatusAsync(ctx workflow.Context, input *configservice.DescribeConfigurationRecorderStatusInput) *ConfigserviceDescribeConfigurationRecorderStatusFuture

	DescribeConfigurationRecorders(ctx workflow.Context, input *configservice.DescribeConfigurationRecordersInput) (*configservice.DescribeConfigurationRecordersOutput, error)
	DescribeConfigurationRecordersAsync(ctx workflow.Context, input *configservice.DescribeConfigurationRecordersInput) *ConfigserviceDescribeConfigurationRecordersFuture

	DescribeConformancePackCompliance(ctx workflow.Context, input *configservice.DescribeConformancePackComplianceInput) (*configservice.DescribeConformancePackComplianceOutput, error)
	DescribeConformancePackComplianceAsync(ctx workflow.Context, input *configservice.DescribeConformancePackComplianceInput) *ConfigserviceDescribeConformancePackComplianceFuture

	DescribeConformancePackStatus(ctx workflow.Context, input *configservice.DescribeConformancePackStatusInput) (*configservice.DescribeConformancePackStatusOutput, error)
	DescribeConformancePackStatusAsync(ctx workflow.Context, input *configservice.DescribeConformancePackStatusInput) *ConfigserviceDescribeConformancePackStatusFuture

	DescribeConformancePacks(ctx workflow.Context, input *configservice.DescribeConformancePacksInput) (*configservice.DescribeConformancePacksOutput, error)
	DescribeConformancePacksAsync(ctx workflow.Context, input *configservice.DescribeConformancePacksInput) *ConfigserviceDescribeConformancePacksFuture

	DescribeDeliveryChannelStatus(ctx workflow.Context, input *configservice.DescribeDeliveryChannelStatusInput) (*configservice.DescribeDeliveryChannelStatusOutput, error)
	DescribeDeliveryChannelStatusAsync(ctx workflow.Context, input *configservice.DescribeDeliveryChannelStatusInput) *ConfigserviceDescribeDeliveryChannelStatusFuture

	DescribeDeliveryChannels(ctx workflow.Context, input *configservice.DescribeDeliveryChannelsInput) (*configservice.DescribeDeliveryChannelsOutput, error)
	DescribeDeliveryChannelsAsync(ctx workflow.Context, input *configservice.DescribeDeliveryChannelsInput) *ConfigserviceDescribeDeliveryChannelsFuture

	DescribeOrganizationConfigRuleStatuses(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRuleStatusesInput) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error)
	DescribeOrganizationConfigRuleStatusesAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRuleStatusesInput) *ConfigserviceDescribeOrganizationConfigRuleStatusesFuture

	DescribeOrganizationConfigRules(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRulesInput) (*configservice.DescribeOrganizationConfigRulesOutput, error)
	DescribeOrganizationConfigRulesAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRulesInput) *ConfigserviceDescribeOrganizationConfigRulesFuture

	DescribeOrganizationConformancePackStatuses(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePackStatusesInput) (*configservice.DescribeOrganizationConformancePackStatusesOutput, error)
	DescribeOrganizationConformancePackStatusesAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePackStatusesInput) *ConfigserviceDescribeOrganizationConformancePackStatusesFuture

	DescribeOrganizationConformancePacks(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePacksInput) (*configservice.DescribeOrganizationConformancePacksOutput, error)
	DescribeOrganizationConformancePacksAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePacksInput) *ConfigserviceDescribeOrganizationConformancePacksFuture

	DescribePendingAggregationRequests(ctx workflow.Context, input *configservice.DescribePendingAggregationRequestsInput) (*configservice.DescribePendingAggregationRequestsOutput, error)
	DescribePendingAggregationRequestsAsync(ctx workflow.Context, input *configservice.DescribePendingAggregationRequestsInput) *ConfigserviceDescribePendingAggregationRequestsFuture

	DescribeRemediationConfigurations(ctx workflow.Context, input *configservice.DescribeRemediationConfigurationsInput) (*configservice.DescribeRemediationConfigurationsOutput, error)
	DescribeRemediationConfigurationsAsync(ctx workflow.Context, input *configservice.DescribeRemediationConfigurationsInput) *ConfigserviceDescribeRemediationConfigurationsFuture

	DescribeRemediationExceptions(ctx workflow.Context, input *configservice.DescribeRemediationExceptionsInput) (*configservice.DescribeRemediationExceptionsOutput, error)
	DescribeRemediationExceptionsAsync(ctx workflow.Context, input *configservice.DescribeRemediationExceptionsInput) *ConfigserviceDescribeRemediationExceptionsFuture

	DescribeRemediationExecutionStatus(ctx workflow.Context, input *configservice.DescribeRemediationExecutionStatusInput) (*configservice.DescribeRemediationExecutionStatusOutput, error)
	DescribeRemediationExecutionStatusAsync(ctx workflow.Context, input *configservice.DescribeRemediationExecutionStatusInput) *ConfigserviceDescribeRemediationExecutionStatusFuture

	DescribeRetentionConfigurations(ctx workflow.Context, input *configservice.DescribeRetentionConfigurationsInput) (*configservice.DescribeRetentionConfigurationsOutput, error)
	DescribeRetentionConfigurationsAsync(ctx workflow.Context, input *configservice.DescribeRetentionConfigurationsInput) *ConfigserviceDescribeRetentionConfigurationsFuture

	GetAggregateComplianceDetailsByConfigRule(ctx workflow.Context, input *configservice.GetAggregateComplianceDetailsByConfigRuleInput) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error)
	GetAggregateComplianceDetailsByConfigRuleAsync(ctx workflow.Context, input *configservice.GetAggregateComplianceDetailsByConfigRuleInput) *ConfigserviceGetAggregateComplianceDetailsByConfigRuleFuture

	GetAggregateConfigRuleComplianceSummary(ctx workflow.Context, input *configservice.GetAggregateConfigRuleComplianceSummaryInput) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error)
	GetAggregateConfigRuleComplianceSummaryAsync(ctx workflow.Context, input *configservice.GetAggregateConfigRuleComplianceSummaryInput) *ConfigserviceGetAggregateConfigRuleComplianceSummaryFuture

	GetAggregateDiscoveredResourceCounts(ctx workflow.Context, input *configservice.GetAggregateDiscoveredResourceCountsInput) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error)
	GetAggregateDiscoveredResourceCountsAsync(ctx workflow.Context, input *configservice.GetAggregateDiscoveredResourceCountsInput) *ConfigserviceGetAggregateDiscoveredResourceCountsFuture

	GetAggregateResourceConfig(ctx workflow.Context, input *configservice.GetAggregateResourceConfigInput) (*configservice.GetAggregateResourceConfigOutput, error)
	GetAggregateResourceConfigAsync(ctx workflow.Context, input *configservice.GetAggregateResourceConfigInput) *ConfigserviceGetAggregateResourceConfigFuture

	GetComplianceDetailsByConfigRule(ctx workflow.Context, input *configservice.GetComplianceDetailsByConfigRuleInput) (*configservice.GetComplianceDetailsByConfigRuleOutput, error)
	GetComplianceDetailsByConfigRuleAsync(ctx workflow.Context, input *configservice.GetComplianceDetailsByConfigRuleInput) *ConfigserviceGetComplianceDetailsByConfigRuleFuture

	GetComplianceDetailsByResource(ctx workflow.Context, input *configservice.GetComplianceDetailsByResourceInput) (*configservice.GetComplianceDetailsByResourceOutput, error)
	GetComplianceDetailsByResourceAsync(ctx workflow.Context, input *configservice.GetComplianceDetailsByResourceInput) *ConfigserviceGetComplianceDetailsByResourceFuture

	GetComplianceSummaryByConfigRule(ctx workflow.Context, input *configservice.GetComplianceSummaryByConfigRuleInput) (*configservice.GetComplianceSummaryByConfigRuleOutput, error)
	GetComplianceSummaryByConfigRuleAsync(ctx workflow.Context, input *configservice.GetComplianceSummaryByConfigRuleInput) *ConfigserviceGetComplianceSummaryByConfigRuleFuture

	GetComplianceSummaryByResourceType(ctx workflow.Context, input *configservice.GetComplianceSummaryByResourceTypeInput) (*configservice.GetComplianceSummaryByResourceTypeOutput, error)
	GetComplianceSummaryByResourceTypeAsync(ctx workflow.Context, input *configservice.GetComplianceSummaryByResourceTypeInput) *ConfigserviceGetComplianceSummaryByResourceTypeFuture

	GetConformancePackComplianceDetails(ctx workflow.Context, input *configservice.GetConformancePackComplianceDetailsInput) (*configservice.GetConformancePackComplianceDetailsOutput, error)
	GetConformancePackComplianceDetailsAsync(ctx workflow.Context, input *configservice.GetConformancePackComplianceDetailsInput) *ConfigserviceGetConformancePackComplianceDetailsFuture

	GetConformancePackComplianceSummary(ctx workflow.Context, input *configservice.GetConformancePackComplianceSummaryInput) (*configservice.GetConformancePackComplianceSummaryOutput, error)
	GetConformancePackComplianceSummaryAsync(ctx workflow.Context, input *configservice.GetConformancePackComplianceSummaryInput) *ConfigserviceGetConformancePackComplianceSummaryFuture

	GetDiscoveredResourceCounts(ctx workflow.Context, input *configservice.GetDiscoveredResourceCountsInput) (*configservice.GetDiscoveredResourceCountsOutput, error)
	GetDiscoveredResourceCountsAsync(ctx workflow.Context, input *configservice.GetDiscoveredResourceCountsInput) *ConfigserviceGetDiscoveredResourceCountsFuture

	GetOrganizationConfigRuleDetailedStatus(ctx workflow.Context, input *configservice.GetOrganizationConfigRuleDetailedStatusInput) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error)
	GetOrganizationConfigRuleDetailedStatusAsync(ctx workflow.Context, input *configservice.GetOrganizationConfigRuleDetailedStatusInput) *ConfigserviceGetOrganizationConfigRuleDetailedStatusFuture

	GetOrganizationConformancePackDetailedStatus(ctx workflow.Context, input *configservice.GetOrganizationConformancePackDetailedStatusInput) (*configservice.GetOrganizationConformancePackDetailedStatusOutput, error)
	GetOrganizationConformancePackDetailedStatusAsync(ctx workflow.Context, input *configservice.GetOrganizationConformancePackDetailedStatusInput) *ConfigserviceGetOrganizationConformancePackDetailedStatusFuture

	GetResourceConfigHistory(ctx workflow.Context, input *configservice.GetResourceConfigHistoryInput) (*configservice.GetResourceConfigHistoryOutput, error)
	GetResourceConfigHistoryAsync(ctx workflow.Context, input *configservice.GetResourceConfigHistoryInput) *ConfigserviceGetResourceConfigHistoryFuture

	ListAggregateDiscoveredResources(ctx workflow.Context, input *configservice.ListAggregateDiscoveredResourcesInput) (*configservice.ListAggregateDiscoveredResourcesOutput, error)
	ListAggregateDiscoveredResourcesAsync(ctx workflow.Context, input *configservice.ListAggregateDiscoveredResourcesInput) *ConfigserviceListAggregateDiscoveredResourcesFuture

	ListDiscoveredResources(ctx workflow.Context, input *configservice.ListDiscoveredResourcesInput) (*configservice.ListDiscoveredResourcesOutput, error)
	ListDiscoveredResourcesAsync(ctx workflow.Context, input *configservice.ListDiscoveredResourcesInput) *ConfigserviceListDiscoveredResourcesFuture

	ListTagsForResource(ctx workflow.Context, input *configservice.ListTagsForResourceInput) (*configservice.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *configservice.ListTagsForResourceInput) *ConfigserviceListTagsForResourceFuture

	PutAggregationAuthorization(ctx workflow.Context, input *configservice.PutAggregationAuthorizationInput) (*configservice.PutAggregationAuthorizationOutput, error)
	PutAggregationAuthorizationAsync(ctx workflow.Context, input *configservice.PutAggregationAuthorizationInput) *ConfigservicePutAggregationAuthorizationFuture

	PutConfigRule(ctx workflow.Context, input *configservice.PutConfigRuleInput) (*configservice.PutConfigRuleOutput, error)
	PutConfigRuleAsync(ctx workflow.Context, input *configservice.PutConfigRuleInput) *ConfigservicePutConfigRuleFuture

	PutConfigurationAggregator(ctx workflow.Context, input *configservice.PutConfigurationAggregatorInput) (*configservice.PutConfigurationAggregatorOutput, error)
	PutConfigurationAggregatorAsync(ctx workflow.Context, input *configservice.PutConfigurationAggregatorInput) *ConfigservicePutConfigurationAggregatorFuture

	PutConfigurationRecorder(ctx workflow.Context, input *configservice.PutConfigurationRecorderInput) (*configservice.PutConfigurationRecorderOutput, error)
	PutConfigurationRecorderAsync(ctx workflow.Context, input *configservice.PutConfigurationRecorderInput) *ConfigservicePutConfigurationRecorderFuture

	PutConformancePack(ctx workflow.Context, input *configservice.PutConformancePackInput) (*configservice.PutConformancePackOutput, error)
	PutConformancePackAsync(ctx workflow.Context, input *configservice.PutConformancePackInput) *ConfigservicePutConformancePackFuture

	PutDeliveryChannel(ctx workflow.Context, input *configservice.PutDeliveryChannelInput) (*configservice.PutDeliveryChannelOutput, error)
	PutDeliveryChannelAsync(ctx workflow.Context, input *configservice.PutDeliveryChannelInput) *ConfigservicePutDeliveryChannelFuture

	PutEvaluations(ctx workflow.Context, input *configservice.PutEvaluationsInput) (*configservice.PutEvaluationsOutput, error)
	PutEvaluationsAsync(ctx workflow.Context, input *configservice.PutEvaluationsInput) *ConfigservicePutEvaluationsFuture

	PutOrganizationConfigRule(ctx workflow.Context, input *configservice.PutOrganizationConfigRuleInput) (*configservice.PutOrganizationConfigRuleOutput, error)
	PutOrganizationConfigRuleAsync(ctx workflow.Context, input *configservice.PutOrganizationConfigRuleInput) *ConfigservicePutOrganizationConfigRuleFuture

	PutOrganizationConformancePack(ctx workflow.Context, input *configservice.PutOrganizationConformancePackInput) (*configservice.PutOrganizationConformancePackOutput, error)
	PutOrganizationConformancePackAsync(ctx workflow.Context, input *configservice.PutOrganizationConformancePackInput) *ConfigservicePutOrganizationConformancePackFuture

	PutRemediationConfigurations(ctx workflow.Context, input *configservice.PutRemediationConfigurationsInput) (*configservice.PutRemediationConfigurationsOutput, error)
	PutRemediationConfigurationsAsync(ctx workflow.Context, input *configservice.PutRemediationConfigurationsInput) *ConfigservicePutRemediationConfigurationsFuture

	PutRemediationExceptions(ctx workflow.Context, input *configservice.PutRemediationExceptionsInput) (*configservice.PutRemediationExceptionsOutput, error)
	PutRemediationExceptionsAsync(ctx workflow.Context, input *configservice.PutRemediationExceptionsInput) *ConfigservicePutRemediationExceptionsFuture

	PutResourceConfig(ctx workflow.Context, input *configservice.PutResourceConfigInput) (*configservice.PutResourceConfigOutput, error)
	PutResourceConfigAsync(ctx workflow.Context, input *configservice.PutResourceConfigInput) *ConfigservicePutResourceConfigFuture

	PutRetentionConfiguration(ctx workflow.Context, input *configservice.PutRetentionConfigurationInput) (*configservice.PutRetentionConfigurationOutput, error)
	PutRetentionConfigurationAsync(ctx workflow.Context, input *configservice.PutRetentionConfigurationInput) *ConfigservicePutRetentionConfigurationFuture

	SelectAggregateResourceConfig(ctx workflow.Context, input *configservice.SelectAggregateResourceConfigInput) (*configservice.SelectAggregateResourceConfigOutput, error)
	SelectAggregateResourceConfigAsync(ctx workflow.Context, input *configservice.SelectAggregateResourceConfigInput) *ConfigserviceSelectAggregateResourceConfigFuture

	SelectResourceConfig(ctx workflow.Context, input *configservice.SelectResourceConfigInput) (*configservice.SelectResourceConfigOutput, error)
	SelectResourceConfigAsync(ctx workflow.Context, input *configservice.SelectResourceConfigInput) *ConfigserviceSelectResourceConfigFuture

	StartConfigRulesEvaluation(ctx workflow.Context, input *configservice.StartConfigRulesEvaluationInput) (*configservice.StartConfigRulesEvaluationOutput, error)
	StartConfigRulesEvaluationAsync(ctx workflow.Context, input *configservice.StartConfigRulesEvaluationInput) *ConfigserviceStartConfigRulesEvaluationFuture

	StartConfigurationRecorder(ctx workflow.Context, input *configservice.StartConfigurationRecorderInput) (*configservice.StartConfigurationRecorderOutput, error)
	StartConfigurationRecorderAsync(ctx workflow.Context, input *configservice.StartConfigurationRecorderInput) *ConfigserviceStartConfigurationRecorderFuture

	StartRemediationExecution(ctx workflow.Context, input *configservice.StartRemediationExecutionInput) (*configservice.StartRemediationExecutionOutput, error)
	StartRemediationExecutionAsync(ctx workflow.Context, input *configservice.StartRemediationExecutionInput) *ConfigserviceStartRemediationExecutionFuture

	StopConfigurationRecorder(ctx workflow.Context, input *configservice.StopConfigurationRecorderInput) (*configservice.StopConfigurationRecorderOutput, error)
	StopConfigurationRecorderAsync(ctx workflow.Context, input *configservice.StopConfigurationRecorderInput) *ConfigserviceStopConfigurationRecorderFuture

	TagResource(ctx workflow.Context, input *configservice.TagResourceInput) (*configservice.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *configservice.TagResourceInput) *ConfigserviceTagResourceFuture

	UntagResource(ctx workflow.Context, input *configservice.UntagResourceInput) (*configservice.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *configservice.UntagResourceInput) *ConfigserviceUntagResourceFuture
}

type ConfigServiceStub struct{}

func NewConfigServiceStub() ConfigServiceClient {
	return &ConfigServiceStub{}
}

type ConfigserviceBatchGetAggregateResourceConfigFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceBatchGetAggregateResourceConfigFuture) Get(ctx workflow.Context) (*configservice.BatchGetAggregateResourceConfigOutput, error) {
	var output configservice.BatchGetAggregateResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceBatchGetResourceConfigFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceBatchGetResourceConfigFuture) Get(ctx workflow.Context) (*configservice.BatchGetResourceConfigOutput, error) {
	var output configservice.BatchGetResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteAggregationAuthorizationFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteAggregationAuthorizationFuture) Get(ctx workflow.Context) (*configservice.DeleteAggregationAuthorizationOutput, error) {
	var output configservice.DeleteAggregationAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteConfigRuleFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteConfigRuleFuture) Get(ctx workflow.Context) (*configservice.DeleteConfigRuleOutput, error) {
	var output configservice.DeleteConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteConfigurationAggregatorFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteConfigurationAggregatorFuture) Get(ctx workflow.Context) (*configservice.DeleteConfigurationAggregatorOutput, error) {
	var output configservice.DeleteConfigurationAggregatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteConfigurationRecorderFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteConfigurationRecorderFuture) Get(ctx workflow.Context) (*configservice.DeleteConfigurationRecorderOutput, error) {
	var output configservice.DeleteConfigurationRecorderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteConformancePackFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteConformancePackFuture) Get(ctx workflow.Context) (*configservice.DeleteConformancePackOutput, error) {
	var output configservice.DeleteConformancePackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteDeliveryChannelFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteDeliveryChannelFuture) Get(ctx workflow.Context) (*configservice.DeleteDeliveryChannelOutput, error) {
	var output configservice.DeleteDeliveryChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteEvaluationResultsFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteEvaluationResultsFuture) Get(ctx workflow.Context) (*configservice.DeleteEvaluationResultsOutput, error) {
	var output configservice.DeleteEvaluationResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteOrganizationConfigRuleFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteOrganizationConfigRuleFuture) Get(ctx workflow.Context) (*configservice.DeleteOrganizationConfigRuleOutput, error) {
	var output configservice.DeleteOrganizationConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteOrganizationConformancePackFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteOrganizationConformancePackFuture) Get(ctx workflow.Context) (*configservice.DeleteOrganizationConformancePackOutput, error) {
	var output configservice.DeleteOrganizationConformancePackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteRemediationConfigurationFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteRemediationConfigurationFuture) Get(ctx workflow.Context) (*configservice.DeleteRemediationConfigurationOutput, error) {
	var output configservice.DeleteRemediationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteRemediationExceptionsFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteRemediationExceptionsFuture) Get(ctx workflow.Context) (*configservice.DeleteRemediationExceptionsOutput, error) {
	var output configservice.DeleteRemediationExceptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteResourceConfigFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteResourceConfigFuture) Get(ctx workflow.Context) (*configservice.DeleteResourceConfigOutput, error) {
	var output configservice.DeleteResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeleteRetentionConfigurationFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeleteRetentionConfigurationFuture) Get(ctx workflow.Context) (*configservice.DeleteRetentionConfigurationOutput, error) {
	var output configservice.DeleteRetentionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDeliverConfigSnapshotFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDeliverConfigSnapshotFuture) Get(ctx workflow.Context) (*configservice.DeliverConfigSnapshotOutput, error) {
	var output configservice.DeliverConfigSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeAggregateComplianceByConfigRulesFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeAggregateComplianceByConfigRulesFuture) Get(ctx workflow.Context) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error) {
	var output configservice.DescribeAggregateComplianceByConfigRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeAggregationAuthorizationsFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeAggregationAuthorizationsFuture) Get(ctx workflow.Context) (*configservice.DescribeAggregationAuthorizationsOutput, error) {
	var output configservice.DescribeAggregationAuthorizationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeComplianceByConfigRuleFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeComplianceByConfigRuleFuture) Get(ctx workflow.Context) (*configservice.DescribeComplianceByConfigRuleOutput, error) {
	var output configservice.DescribeComplianceByConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeComplianceByResourceFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeComplianceByResourceFuture) Get(ctx workflow.Context) (*configservice.DescribeComplianceByResourceOutput, error) {
	var output configservice.DescribeComplianceByResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeConfigRuleEvaluationStatusFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeConfigRuleEvaluationStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error) {
	var output configservice.DescribeConfigRuleEvaluationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeConfigRulesFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeConfigRulesFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigRulesOutput, error) {
	var output configservice.DescribeConfigRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeConfigurationAggregatorSourcesStatusFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeConfigurationAggregatorSourcesStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error) {
	var output configservice.DescribeConfigurationAggregatorSourcesStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeConfigurationAggregatorsFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeConfigurationAggregatorsFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigurationAggregatorsOutput, error) {
	var output configservice.DescribeConfigurationAggregatorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeConfigurationRecorderStatusFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeConfigurationRecorderStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {
	var output configservice.DescribeConfigurationRecorderStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeConfigurationRecordersFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeConfigurationRecordersFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigurationRecordersOutput, error) {
	var output configservice.DescribeConfigurationRecordersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeConformancePackComplianceFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeConformancePackComplianceFuture) Get(ctx workflow.Context) (*configservice.DescribeConformancePackComplianceOutput, error) {
	var output configservice.DescribeConformancePackComplianceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeConformancePackStatusFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeConformancePackStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeConformancePackStatusOutput, error) {
	var output configservice.DescribeConformancePackStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeConformancePacksFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeConformancePacksFuture) Get(ctx workflow.Context) (*configservice.DescribeConformancePacksOutput, error) {
	var output configservice.DescribeConformancePacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeDeliveryChannelStatusFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeDeliveryChannelStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeDeliveryChannelStatusOutput, error) {
	var output configservice.DescribeDeliveryChannelStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeDeliveryChannelsFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeDeliveryChannelsFuture) Get(ctx workflow.Context) (*configservice.DescribeDeliveryChannelsOutput, error) {
	var output configservice.DescribeDeliveryChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeOrganizationConfigRuleStatusesFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeOrganizationConfigRuleStatusesFuture) Get(ctx workflow.Context) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error) {
	var output configservice.DescribeOrganizationConfigRuleStatusesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeOrganizationConfigRulesFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeOrganizationConfigRulesFuture) Get(ctx workflow.Context) (*configservice.DescribeOrganizationConfigRulesOutput, error) {
	var output configservice.DescribeOrganizationConfigRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeOrganizationConformancePackStatusesFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeOrganizationConformancePackStatusesFuture) Get(ctx workflow.Context) (*configservice.DescribeOrganizationConformancePackStatusesOutput, error) {
	var output configservice.DescribeOrganizationConformancePackStatusesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeOrganizationConformancePacksFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeOrganizationConformancePacksFuture) Get(ctx workflow.Context) (*configservice.DescribeOrganizationConformancePacksOutput, error) {
	var output configservice.DescribeOrganizationConformancePacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribePendingAggregationRequestsFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribePendingAggregationRequestsFuture) Get(ctx workflow.Context) (*configservice.DescribePendingAggregationRequestsOutput, error) {
	var output configservice.DescribePendingAggregationRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeRemediationConfigurationsFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeRemediationConfigurationsFuture) Get(ctx workflow.Context) (*configservice.DescribeRemediationConfigurationsOutput, error) {
	var output configservice.DescribeRemediationConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeRemediationExceptionsFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeRemediationExceptionsFuture) Get(ctx workflow.Context) (*configservice.DescribeRemediationExceptionsOutput, error) {
	var output configservice.DescribeRemediationExceptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeRemediationExecutionStatusFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeRemediationExecutionStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeRemediationExecutionStatusOutput, error) {
	var output configservice.DescribeRemediationExecutionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceDescribeRetentionConfigurationsFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceDescribeRetentionConfigurationsFuture) Get(ctx workflow.Context) (*configservice.DescribeRetentionConfigurationsOutput, error) {
	var output configservice.DescribeRetentionConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetAggregateComplianceDetailsByConfigRuleFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetAggregateComplianceDetailsByConfigRuleFuture) Get(ctx workflow.Context) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error) {
	var output configservice.GetAggregateComplianceDetailsByConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetAggregateConfigRuleComplianceSummaryFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetAggregateConfigRuleComplianceSummaryFuture) Get(ctx workflow.Context) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error) {
	var output configservice.GetAggregateConfigRuleComplianceSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetAggregateDiscoveredResourceCountsFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetAggregateDiscoveredResourceCountsFuture) Get(ctx workflow.Context) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error) {
	var output configservice.GetAggregateDiscoveredResourceCountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetAggregateResourceConfigFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetAggregateResourceConfigFuture) Get(ctx workflow.Context) (*configservice.GetAggregateResourceConfigOutput, error) {
	var output configservice.GetAggregateResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetComplianceDetailsByConfigRuleFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetComplianceDetailsByConfigRuleFuture) Get(ctx workflow.Context) (*configservice.GetComplianceDetailsByConfigRuleOutput, error) {
	var output configservice.GetComplianceDetailsByConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetComplianceDetailsByResourceFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetComplianceDetailsByResourceFuture) Get(ctx workflow.Context) (*configservice.GetComplianceDetailsByResourceOutput, error) {
	var output configservice.GetComplianceDetailsByResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetComplianceSummaryByConfigRuleFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetComplianceSummaryByConfigRuleFuture) Get(ctx workflow.Context) (*configservice.GetComplianceSummaryByConfigRuleOutput, error) {
	var output configservice.GetComplianceSummaryByConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetComplianceSummaryByResourceTypeFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetComplianceSummaryByResourceTypeFuture) Get(ctx workflow.Context) (*configservice.GetComplianceSummaryByResourceTypeOutput, error) {
	var output configservice.GetComplianceSummaryByResourceTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetConformancePackComplianceDetailsFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetConformancePackComplianceDetailsFuture) Get(ctx workflow.Context) (*configservice.GetConformancePackComplianceDetailsOutput, error) {
	var output configservice.GetConformancePackComplianceDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetConformancePackComplianceSummaryFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetConformancePackComplianceSummaryFuture) Get(ctx workflow.Context) (*configservice.GetConformancePackComplianceSummaryOutput, error) {
	var output configservice.GetConformancePackComplianceSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetDiscoveredResourceCountsFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetDiscoveredResourceCountsFuture) Get(ctx workflow.Context) (*configservice.GetDiscoveredResourceCountsOutput, error) {
	var output configservice.GetDiscoveredResourceCountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetOrganizationConfigRuleDetailedStatusFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetOrganizationConfigRuleDetailedStatusFuture) Get(ctx workflow.Context) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error) {
	var output configservice.GetOrganizationConfigRuleDetailedStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetOrganizationConformancePackDetailedStatusFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetOrganizationConformancePackDetailedStatusFuture) Get(ctx workflow.Context) (*configservice.GetOrganizationConformancePackDetailedStatusOutput, error) {
	var output configservice.GetOrganizationConformancePackDetailedStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceGetResourceConfigHistoryFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceGetResourceConfigHistoryFuture) Get(ctx workflow.Context) (*configservice.GetResourceConfigHistoryOutput, error) {
	var output configservice.GetResourceConfigHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceListAggregateDiscoveredResourcesFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceListAggregateDiscoveredResourcesFuture) Get(ctx workflow.Context) (*configservice.ListAggregateDiscoveredResourcesOutput, error) {
	var output configservice.ListAggregateDiscoveredResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceListDiscoveredResourcesFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceListDiscoveredResourcesFuture) Get(ctx workflow.Context) (*configservice.ListDiscoveredResourcesOutput, error) {
	var output configservice.ListDiscoveredResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceListTagsForResourceFuture) Get(ctx workflow.Context) (*configservice.ListTagsForResourceOutput, error) {
	var output configservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutAggregationAuthorizationFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutAggregationAuthorizationFuture) Get(ctx workflow.Context) (*configservice.PutAggregationAuthorizationOutput, error) {
	var output configservice.PutAggregationAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutConfigRuleFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutConfigRuleFuture) Get(ctx workflow.Context) (*configservice.PutConfigRuleOutput, error) {
	var output configservice.PutConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutConfigurationAggregatorFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutConfigurationAggregatorFuture) Get(ctx workflow.Context) (*configservice.PutConfigurationAggregatorOutput, error) {
	var output configservice.PutConfigurationAggregatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutConfigurationRecorderFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutConfigurationRecorderFuture) Get(ctx workflow.Context) (*configservice.PutConfigurationRecorderOutput, error) {
	var output configservice.PutConfigurationRecorderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutConformancePackFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutConformancePackFuture) Get(ctx workflow.Context) (*configservice.PutConformancePackOutput, error) {
	var output configservice.PutConformancePackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutDeliveryChannelFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutDeliveryChannelFuture) Get(ctx workflow.Context) (*configservice.PutDeliveryChannelOutput, error) {
	var output configservice.PutDeliveryChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutEvaluationsFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutEvaluationsFuture) Get(ctx workflow.Context) (*configservice.PutEvaluationsOutput, error) {
	var output configservice.PutEvaluationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutOrganizationConfigRuleFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutOrganizationConfigRuleFuture) Get(ctx workflow.Context) (*configservice.PutOrganizationConfigRuleOutput, error) {
	var output configservice.PutOrganizationConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutOrganizationConformancePackFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutOrganizationConformancePackFuture) Get(ctx workflow.Context) (*configservice.PutOrganizationConformancePackOutput, error) {
	var output configservice.PutOrganizationConformancePackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutRemediationConfigurationsFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutRemediationConfigurationsFuture) Get(ctx workflow.Context) (*configservice.PutRemediationConfigurationsOutput, error) {
	var output configservice.PutRemediationConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutRemediationExceptionsFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutRemediationExceptionsFuture) Get(ctx workflow.Context) (*configservice.PutRemediationExceptionsOutput, error) {
	var output configservice.PutRemediationExceptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutResourceConfigFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutResourceConfigFuture) Get(ctx workflow.Context) (*configservice.PutResourceConfigOutput, error) {
	var output configservice.PutResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigservicePutRetentionConfigurationFuture struct {
	Future workflow.Future
}

func (r *ConfigservicePutRetentionConfigurationFuture) Get(ctx workflow.Context) (*configservice.PutRetentionConfigurationOutput, error) {
	var output configservice.PutRetentionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceSelectAggregateResourceConfigFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceSelectAggregateResourceConfigFuture) Get(ctx workflow.Context) (*configservice.SelectAggregateResourceConfigOutput, error) {
	var output configservice.SelectAggregateResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceSelectResourceConfigFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceSelectResourceConfigFuture) Get(ctx workflow.Context) (*configservice.SelectResourceConfigOutput, error) {
	var output configservice.SelectResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceStartConfigRulesEvaluationFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceStartConfigRulesEvaluationFuture) Get(ctx workflow.Context) (*configservice.StartConfigRulesEvaluationOutput, error) {
	var output configservice.StartConfigRulesEvaluationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceStartConfigurationRecorderFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceStartConfigurationRecorderFuture) Get(ctx workflow.Context) (*configservice.StartConfigurationRecorderOutput, error) {
	var output configservice.StartConfigurationRecorderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceStartRemediationExecutionFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceStartRemediationExecutionFuture) Get(ctx workflow.Context) (*configservice.StartRemediationExecutionOutput, error) {
	var output configservice.StartRemediationExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceStopConfigurationRecorderFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceStopConfigurationRecorderFuture) Get(ctx workflow.Context) (*configservice.StopConfigurationRecorderOutput, error) {
	var output configservice.StopConfigurationRecorderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceTagResourceFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceTagResourceFuture) Get(ctx workflow.Context) (*configservice.TagResourceOutput, error) {
	var output configservice.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigserviceUntagResourceFuture struct {
	Future workflow.Future
}

func (r *ConfigserviceUntagResourceFuture) Get(ctx workflow.Context) (*configservice.UntagResourceOutput, error) {
	var output configservice.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) BatchGetAggregateResourceConfig(ctx workflow.Context, input *configservice.BatchGetAggregateResourceConfigInput) (*configservice.BatchGetAggregateResourceConfigOutput, error) {
	var output configservice.BatchGetAggregateResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.BatchGetAggregateResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) BatchGetAggregateResourceConfigAsync(ctx workflow.Context, input *configservice.BatchGetAggregateResourceConfigInput) *ConfigserviceBatchGetAggregateResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.BatchGetAggregateResourceConfig", input)
	return &ConfigserviceBatchGetAggregateResourceConfigFuture{Future: future}
}

func (a *ConfigServiceStub) BatchGetResourceConfig(ctx workflow.Context, input *configservice.BatchGetResourceConfigInput) (*configservice.BatchGetResourceConfigOutput, error) {
	var output configservice.BatchGetResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.BatchGetResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) BatchGetResourceConfigAsync(ctx workflow.Context, input *configservice.BatchGetResourceConfigInput) *ConfigserviceBatchGetResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.BatchGetResourceConfig", input)
	return &ConfigserviceBatchGetResourceConfigFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteAggregationAuthorization(ctx workflow.Context, input *configservice.DeleteAggregationAuthorizationInput) (*configservice.DeleteAggregationAuthorizationOutput, error) {
	var output configservice.DeleteAggregationAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteAggregationAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteAggregationAuthorizationAsync(ctx workflow.Context, input *configservice.DeleteAggregationAuthorizationInput) *ConfigserviceDeleteAggregationAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteAggregationAuthorization", input)
	return &ConfigserviceDeleteAggregationAuthorizationFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteConfigRule(ctx workflow.Context, input *configservice.DeleteConfigRuleInput) (*configservice.DeleteConfigRuleOutput, error) {
	var output configservice.DeleteConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteConfigRuleAsync(ctx workflow.Context, input *configservice.DeleteConfigRuleInput) *ConfigserviceDeleteConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteConfigRule", input)
	return &ConfigserviceDeleteConfigRuleFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteConfigurationAggregator(ctx workflow.Context, input *configservice.DeleteConfigurationAggregatorInput) (*configservice.DeleteConfigurationAggregatorOutput, error) {
	var output configservice.DeleteConfigurationAggregatorOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteConfigurationAggregator", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteConfigurationAggregatorAsync(ctx workflow.Context, input *configservice.DeleteConfigurationAggregatorInput) *ConfigserviceDeleteConfigurationAggregatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteConfigurationAggregator", input)
	return &ConfigserviceDeleteConfigurationAggregatorFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteConfigurationRecorder(ctx workflow.Context, input *configservice.DeleteConfigurationRecorderInput) (*configservice.DeleteConfigurationRecorderOutput, error) {
	var output configservice.DeleteConfigurationRecorderOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteConfigurationRecorder", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteConfigurationRecorderAsync(ctx workflow.Context, input *configservice.DeleteConfigurationRecorderInput) *ConfigserviceDeleteConfigurationRecorderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteConfigurationRecorder", input)
	return &ConfigserviceDeleteConfigurationRecorderFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteConformancePack(ctx workflow.Context, input *configservice.DeleteConformancePackInput) (*configservice.DeleteConformancePackOutput, error) {
	var output configservice.DeleteConformancePackOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteConformancePack", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteConformancePackAsync(ctx workflow.Context, input *configservice.DeleteConformancePackInput) *ConfigserviceDeleteConformancePackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteConformancePack", input)
	return &ConfigserviceDeleteConformancePackFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteDeliveryChannel(ctx workflow.Context, input *configservice.DeleteDeliveryChannelInput) (*configservice.DeleteDeliveryChannelOutput, error) {
	var output configservice.DeleteDeliveryChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteDeliveryChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteDeliveryChannelAsync(ctx workflow.Context, input *configservice.DeleteDeliveryChannelInput) *ConfigserviceDeleteDeliveryChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteDeliveryChannel", input)
	return &ConfigserviceDeleteDeliveryChannelFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteEvaluationResults(ctx workflow.Context, input *configservice.DeleteEvaluationResultsInput) (*configservice.DeleteEvaluationResultsOutput, error) {
	var output configservice.DeleteEvaluationResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteEvaluationResults", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteEvaluationResultsAsync(ctx workflow.Context, input *configservice.DeleteEvaluationResultsInput) *ConfigserviceDeleteEvaluationResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteEvaluationResults", input)
	return &ConfigserviceDeleteEvaluationResultsFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteOrganizationConfigRule(ctx workflow.Context, input *configservice.DeleteOrganizationConfigRuleInput) (*configservice.DeleteOrganizationConfigRuleOutput, error) {
	var output configservice.DeleteOrganizationConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteOrganizationConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteOrganizationConfigRuleAsync(ctx workflow.Context, input *configservice.DeleteOrganizationConfigRuleInput) *ConfigserviceDeleteOrganizationConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteOrganizationConfigRule", input)
	return &ConfigserviceDeleteOrganizationConfigRuleFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteOrganizationConformancePack(ctx workflow.Context, input *configservice.DeleteOrganizationConformancePackInput) (*configservice.DeleteOrganizationConformancePackOutput, error) {
	var output configservice.DeleteOrganizationConformancePackOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteOrganizationConformancePack", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteOrganizationConformancePackAsync(ctx workflow.Context, input *configservice.DeleteOrganizationConformancePackInput) *ConfigserviceDeleteOrganizationConformancePackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteOrganizationConformancePack", input)
	return &ConfigserviceDeleteOrganizationConformancePackFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteRemediationConfiguration(ctx workflow.Context, input *configservice.DeleteRemediationConfigurationInput) (*configservice.DeleteRemediationConfigurationOutput, error) {
	var output configservice.DeleteRemediationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteRemediationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteRemediationConfigurationAsync(ctx workflow.Context, input *configservice.DeleteRemediationConfigurationInput) *ConfigserviceDeleteRemediationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteRemediationConfiguration", input)
	return &ConfigserviceDeleteRemediationConfigurationFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteRemediationExceptions(ctx workflow.Context, input *configservice.DeleteRemediationExceptionsInput) (*configservice.DeleteRemediationExceptionsOutput, error) {
	var output configservice.DeleteRemediationExceptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteRemediationExceptions", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteRemediationExceptionsAsync(ctx workflow.Context, input *configservice.DeleteRemediationExceptionsInput) *ConfigserviceDeleteRemediationExceptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteRemediationExceptions", input)
	return &ConfigserviceDeleteRemediationExceptionsFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteResourceConfig(ctx workflow.Context, input *configservice.DeleteResourceConfigInput) (*configservice.DeleteResourceConfigOutput, error) {
	var output configservice.DeleteResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteResourceConfigAsync(ctx workflow.Context, input *configservice.DeleteResourceConfigInput) *ConfigserviceDeleteResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteResourceConfig", input)
	return &ConfigserviceDeleteResourceConfigFuture{Future: future}
}

func (a *ConfigServiceStub) DeleteRetentionConfiguration(ctx workflow.Context, input *configservice.DeleteRetentionConfigurationInput) (*configservice.DeleteRetentionConfigurationOutput, error) {
	var output configservice.DeleteRetentionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteRetentionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeleteRetentionConfigurationAsync(ctx workflow.Context, input *configservice.DeleteRetentionConfigurationInput) *ConfigserviceDeleteRetentionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeleteRetentionConfiguration", input)
	return &ConfigserviceDeleteRetentionConfigurationFuture{Future: future}
}

func (a *ConfigServiceStub) DeliverConfigSnapshot(ctx workflow.Context, input *configservice.DeliverConfigSnapshotInput) (*configservice.DeliverConfigSnapshotOutput, error) {
	var output configservice.DeliverConfigSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DeliverConfigSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DeliverConfigSnapshotAsync(ctx workflow.Context, input *configservice.DeliverConfigSnapshotInput) *ConfigserviceDeliverConfigSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DeliverConfigSnapshot", input)
	return &ConfigserviceDeliverConfigSnapshotFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeAggregateComplianceByConfigRules(ctx workflow.Context, input *configservice.DescribeAggregateComplianceByConfigRulesInput) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error) {
	var output configservice.DescribeAggregateComplianceByConfigRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeAggregateComplianceByConfigRules", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeAggregateComplianceByConfigRulesAsync(ctx workflow.Context, input *configservice.DescribeAggregateComplianceByConfigRulesInput) *ConfigserviceDescribeAggregateComplianceByConfigRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeAggregateComplianceByConfigRules", input)
	return &ConfigserviceDescribeAggregateComplianceByConfigRulesFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeAggregationAuthorizations(ctx workflow.Context, input *configservice.DescribeAggregationAuthorizationsInput) (*configservice.DescribeAggregationAuthorizationsOutput, error) {
	var output configservice.DescribeAggregationAuthorizationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeAggregationAuthorizations", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeAggregationAuthorizationsAsync(ctx workflow.Context, input *configservice.DescribeAggregationAuthorizationsInput) *ConfigserviceDescribeAggregationAuthorizationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeAggregationAuthorizations", input)
	return &ConfigserviceDescribeAggregationAuthorizationsFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeComplianceByConfigRule(ctx workflow.Context, input *configservice.DescribeComplianceByConfigRuleInput) (*configservice.DescribeComplianceByConfigRuleOutput, error) {
	var output configservice.DescribeComplianceByConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeComplianceByConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeComplianceByConfigRuleAsync(ctx workflow.Context, input *configservice.DescribeComplianceByConfigRuleInput) *ConfigserviceDescribeComplianceByConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeComplianceByConfigRule", input)
	return &ConfigserviceDescribeComplianceByConfigRuleFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeComplianceByResource(ctx workflow.Context, input *configservice.DescribeComplianceByResourceInput) (*configservice.DescribeComplianceByResourceOutput, error) {
	var output configservice.DescribeComplianceByResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeComplianceByResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeComplianceByResourceAsync(ctx workflow.Context, input *configservice.DescribeComplianceByResourceInput) *ConfigserviceDescribeComplianceByResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeComplianceByResource", input)
	return &ConfigserviceDescribeComplianceByResourceFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeConfigRuleEvaluationStatus(ctx workflow.Context, input *configservice.DescribeConfigRuleEvaluationStatusInput) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error) {
	var output configservice.DescribeConfigRuleEvaluationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConfigRuleEvaluationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeConfigRuleEvaluationStatusAsync(ctx workflow.Context, input *configservice.DescribeConfigRuleEvaluationStatusInput) *ConfigserviceDescribeConfigRuleEvaluationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConfigRuleEvaluationStatus", input)
	return &ConfigserviceDescribeConfigRuleEvaluationStatusFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeConfigRules(ctx workflow.Context, input *configservice.DescribeConfigRulesInput) (*configservice.DescribeConfigRulesOutput, error) {
	var output configservice.DescribeConfigRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConfigRules", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeConfigRulesAsync(ctx workflow.Context, input *configservice.DescribeConfigRulesInput) *ConfigserviceDescribeConfigRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConfigRules", input)
	return &ConfigserviceDescribeConfigRulesFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeConfigurationAggregatorSourcesStatus(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorSourcesStatusInput) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error) {
	var output configservice.DescribeConfigurationAggregatorSourcesStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConfigurationAggregatorSourcesStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeConfigurationAggregatorSourcesStatusAsync(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorSourcesStatusInput) *ConfigserviceDescribeConfigurationAggregatorSourcesStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConfigurationAggregatorSourcesStatus", input)
	return &ConfigserviceDescribeConfigurationAggregatorSourcesStatusFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeConfigurationAggregators(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorsInput) (*configservice.DescribeConfigurationAggregatorsOutput, error) {
	var output configservice.DescribeConfigurationAggregatorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConfigurationAggregators", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeConfigurationAggregatorsAsync(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorsInput) *ConfigserviceDescribeConfigurationAggregatorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConfigurationAggregators", input)
	return &ConfigserviceDescribeConfigurationAggregatorsFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeConfigurationRecorderStatus(ctx workflow.Context, input *configservice.DescribeConfigurationRecorderStatusInput) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {
	var output configservice.DescribeConfigurationRecorderStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConfigurationRecorderStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeConfigurationRecorderStatusAsync(ctx workflow.Context, input *configservice.DescribeConfigurationRecorderStatusInput) *ConfigserviceDescribeConfigurationRecorderStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConfigurationRecorderStatus", input)
	return &ConfigserviceDescribeConfigurationRecorderStatusFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeConfigurationRecorders(ctx workflow.Context, input *configservice.DescribeConfigurationRecordersInput) (*configservice.DescribeConfigurationRecordersOutput, error) {
	var output configservice.DescribeConfigurationRecordersOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConfigurationRecorders", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeConfigurationRecordersAsync(ctx workflow.Context, input *configservice.DescribeConfigurationRecordersInput) *ConfigserviceDescribeConfigurationRecordersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConfigurationRecorders", input)
	return &ConfigserviceDescribeConfigurationRecordersFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeConformancePackCompliance(ctx workflow.Context, input *configservice.DescribeConformancePackComplianceInput) (*configservice.DescribeConformancePackComplianceOutput, error) {
	var output configservice.DescribeConformancePackComplianceOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConformancePackCompliance", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeConformancePackComplianceAsync(ctx workflow.Context, input *configservice.DescribeConformancePackComplianceInput) *ConfigserviceDescribeConformancePackComplianceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConformancePackCompliance", input)
	return &ConfigserviceDescribeConformancePackComplianceFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeConformancePackStatus(ctx workflow.Context, input *configservice.DescribeConformancePackStatusInput) (*configservice.DescribeConformancePackStatusOutput, error) {
	var output configservice.DescribeConformancePackStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConformancePackStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeConformancePackStatusAsync(ctx workflow.Context, input *configservice.DescribeConformancePackStatusInput) *ConfigserviceDescribeConformancePackStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConformancePackStatus", input)
	return &ConfigserviceDescribeConformancePackStatusFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeConformancePacks(ctx workflow.Context, input *configservice.DescribeConformancePacksInput) (*configservice.DescribeConformancePacksOutput, error) {
	var output configservice.DescribeConformancePacksOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConformancePacks", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeConformancePacksAsync(ctx workflow.Context, input *configservice.DescribeConformancePacksInput) *ConfigserviceDescribeConformancePacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeConformancePacks", input)
	return &ConfigserviceDescribeConformancePacksFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeDeliveryChannelStatus(ctx workflow.Context, input *configservice.DescribeDeliveryChannelStatusInput) (*configservice.DescribeDeliveryChannelStatusOutput, error) {
	var output configservice.DescribeDeliveryChannelStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeDeliveryChannelStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeDeliveryChannelStatusAsync(ctx workflow.Context, input *configservice.DescribeDeliveryChannelStatusInput) *ConfigserviceDescribeDeliveryChannelStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeDeliveryChannelStatus", input)
	return &ConfigserviceDescribeDeliveryChannelStatusFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeDeliveryChannels(ctx workflow.Context, input *configservice.DescribeDeliveryChannelsInput) (*configservice.DescribeDeliveryChannelsOutput, error) {
	var output configservice.DescribeDeliveryChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeDeliveryChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeDeliveryChannelsAsync(ctx workflow.Context, input *configservice.DescribeDeliveryChannelsInput) *ConfigserviceDescribeDeliveryChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeDeliveryChannels", input)
	return &ConfigserviceDescribeDeliveryChannelsFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeOrganizationConfigRuleStatuses(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRuleStatusesInput) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error) {
	var output configservice.DescribeOrganizationConfigRuleStatusesOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeOrganizationConfigRuleStatuses", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeOrganizationConfigRuleStatusesAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRuleStatusesInput) *ConfigserviceDescribeOrganizationConfigRuleStatusesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeOrganizationConfigRuleStatuses", input)
	return &ConfigserviceDescribeOrganizationConfigRuleStatusesFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeOrganizationConfigRules(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRulesInput) (*configservice.DescribeOrganizationConfigRulesOutput, error) {
	var output configservice.DescribeOrganizationConfigRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeOrganizationConfigRules", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeOrganizationConfigRulesAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRulesInput) *ConfigserviceDescribeOrganizationConfigRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeOrganizationConfigRules", input)
	return &ConfigserviceDescribeOrganizationConfigRulesFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeOrganizationConformancePackStatuses(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePackStatusesInput) (*configservice.DescribeOrganizationConformancePackStatusesOutput, error) {
	var output configservice.DescribeOrganizationConformancePackStatusesOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeOrganizationConformancePackStatuses", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeOrganizationConformancePackStatusesAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePackStatusesInput) *ConfigserviceDescribeOrganizationConformancePackStatusesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeOrganizationConformancePackStatuses", input)
	return &ConfigserviceDescribeOrganizationConformancePackStatusesFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeOrganizationConformancePacks(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePacksInput) (*configservice.DescribeOrganizationConformancePacksOutput, error) {
	var output configservice.DescribeOrganizationConformancePacksOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeOrganizationConformancePacks", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeOrganizationConformancePacksAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePacksInput) *ConfigserviceDescribeOrganizationConformancePacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeOrganizationConformancePacks", input)
	return &ConfigserviceDescribeOrganizationConformancePacksFuture{Future: future}
}

func (a *ConfigServiceStub) DescribePendingAggregationRequests(ctx workflow.Context, input *configservice.DescribePendingAggregationRequestsInput) (*configservice.DescribePendingAggregationRequestsOutput, error) {
	var output configservice.DescribePendingAggregationRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribePendingAggregationRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribePendingAggregationRequestsAsync(ctx workflow.Context, input *configservice.DescribePendingAggregationRequestsInput) *ConfigserviceDescribePendingAggregationRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribePendingAggregationRequests", input)
	return &ConfigserviceDescribePendingAggregationRequestsFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeRemediationConfigurations(ctx workflow.Context, input *configservice.DescribeRemediationConfigurationsInput) (*configservice.DescribeRemediationConfigurationsOutput, error) {
	var output configservice.DescribeRemediationConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeRemediationConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeRemediationConfigurationsAsync(ctx workflow.Context, input *configservice.DescribeRemediationConfigurationsInput) *ConfigserviceDescribeRemediationConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeRemediationConfigurations", input)
	return &ConfigserviceDescribeRemediationConfigurationsFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeRemediationExceptions(ctx workflow.Context, input *configservice.DescribeRemediationExceptionsInput) (*configservice.DescribeRemediationExceptionsOutput, error) {
	var output configservice.DescribeRemediationExceptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeRemediationExceptions", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeRemediationExceptionsAsync(ctx workflow.Context, input *configservice.DescribeRemediationExceptionsInput) *ConfigserviceDescribeRemediationExceptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeRemediationExceptions", input)
	return &ConfigserviceDescribeRemediationExceptionsFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeRemediationExecutionStatus(ctx workflow.Context, input *configservice.DescribeRemediationExecutionStatusInput) (*configservice.DescribeRemediationExecutionStatusOutput, error) {
	var output configservice.DescribeRemediationExecutionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeRemediationExecutionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeRemediationExecutionStatusAsync(ctx workflow.Context, input *configservice.DescribeRemediationExecutionStatusInput) *ConfigserviceDescribeRemediationExecutionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeRemediationExecutionStatus", input)
	return &ConfigserviceDescribeRemediationExecutionStatusFuture{Future: future}
}

func (a *ConfigServiceStub) DescribeRetentionConfigurations(ctx workflow.Context, input *configservice.DescribeRetentionConfigurationsInput) (*configservice.DescribeRetentionConfigurationsOutput, error) {
	var output configservice.DescribeRetentionConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeRetentionConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) DescribeRetentionConfigurationsAsync(ctx workflow.Context, input *configservice.DescribeRetentionConfigurationsInput) *ConfigserviceDescribeRetentionConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.DescribeRetentionConfigurations", input)
	return &ConfigserviceDescribeRetentionConfigurationsFuture{Future: future}
}

func (a *ConfigServiceStub) GetAggregateComplianceDetailsByConfigRule(ctx workflow.Context, input *configservice.GetAggregateComplianceDetailsByConfigRuleInput) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error) {
	var output configservice.GetAggregateComplianceDetailsByConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetAggregateComplianceDetailsByConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetAggregateComplianceDetailsByConfigRuleAsync(ctx workflow.Context, input *configservice.GetAggregateComplianceDetailsByConfigRuleInput) *ConfigserviceGetAggregateComplianceDetailsByConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetAggregateComplianceDetailsByConfigRule", input)
	return &ConfigserviceGetAggregateComplianceDetailsByConfigRuleFuture{Future: future}
}

func (a *ConfigServiceStub) GetAggregateConfigRuleComplianceSummary(ctx workflow.Context, input *configservice.GetAggregateConfigRuleComplianceSummaryInput) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error) {
	var output configservice.GetAggregateConfigRuleComplianceSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetAggregateConfigRuleComplianceSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetAggregateConfigRuleComplianceSummaryAsync(ctx workflow.Context, input *configservice.GetAggregateConfigRuleComplianceSummaryInput) *ConfigserviceGetAggregateConfigRuleComplianceSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetAggregateConfigRuleComplianceSummary", input)
	return &ConfigserviceGetAggregateConfigRuleComplianceSummaryFuture{Future: future}
}

func (a *ConfigServiceStub) GetAggregateDiscoveredResourceCounts(ctx workflow.Context, input *configservice.GetAggregateDiscoveredResourceCountsInput) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error) {
	var output configservice.GetAggregateDiscoveredResourceCountsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetAggregateDiscoveredResourceCounts", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetAggregateDiscoveredResourceCountsAsync(ctx workflow.Context, input *configservice.GetAggregateDiscoveredResourceCountsInput) *ConfigserviceGetAggregateDiscoveredResourceCountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetAggregateDiscoveredResourceCounts", input)
	return &ConfigserviceGetAggregateDiscoveredResourceCountsFuture{Future: future}
}

func (a *ConfigServiceStub) GetAggregateResourceConfig(ctx workflow.Context, input *configservice.GetAggregateResourceConfigInput) (*configservice.GetAggregateResourceConfigOutput, error) {
	var output configservice.GetAggregateResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetAggregateResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetAggregateResourceConfigAsync(ctx workflow.Context, input *configservice.GetAggregateResourceConfigInput) *ConfigserviceGetAggregateResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetAggregateResourceConfig", input)
	return &ConfigserviceGetAggregateResourceConfigFuture{Future: future}
}

func (a *ConfigServiceStub) GetComplianceDetailsByConfigRule(ctx workflow.Context, input *configservice.GetComplianceDetailsByConfigRuleInput) (*configservice.GetComplianceDetailsByConfigRuleOutput, error) {
	var output configservice.GetComplianceDetailsByConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetComplianceDetailsByConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetComplianceDetailsByConfigRuleAsync(ctx workflow.Context, input *configservice.GetComplianceDetailsByConfigRuleInput) *ConfigserviceGetComplianceDetailsByConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetComplianceDetailsByConfigRule", input)
	return &ConfigserviceGetComplianceDetailsByConfigRuleFuture{Future: future}
}

func (a *ConfigServiceStub) GetComplianceDetailsByResource(ctx workflow.Context, input *configservice.GetComplianceDetailsByResourceInput) (*configservice.GetComplianceDetailsByResourceOutput, error) {
	var output configservice.GetComplianceDetailsByResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetComplianceDetailsByResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetComplianceDetailsByResourceAsync(ctx workflow.Context, input *configservice.GetComplianceDetailsByResourceInput) *ConfigserviceGetComplianceDetailsByResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetComplianceDetailsByResource", input)
	return &ConfigserviceGetComplianceDetailsByResourceFuture{Future: future}
}

func (a *ConfigServiceStub) GetComplianceSummaryByConfigRule(ctx workflow.Context, input *configservice.GetComplianceSummaryByConfigRuleInput) (*configservice.GetComplianceSummaryByConfigRuleOutput, error) {
	var output configservice.GetComplianceSummaryByConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetComplianceSummaryByConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetComplianceSummaryByConfigRuleAsync(ctx workflow.Context, input *configservice.GetComplianceSummaryByConfigRuleInput) *ConfigserviceGetComplianceSummaryByConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetComplianceSummaryByConfigRule", input)
	return &ConfigserviceGetComplianceSummaryByConfigRuleFuture{Future: future}
}

func (a *ConfigServiceStub) GetComplianceSummaryByResourceType(ctx workflow.Context, input *configservice.GetComplianceSummaryByResourceTypeInput) (*configservice.GetComplianceSummaryByResourceTypeOutput, error) {
	var output configservice.GetComplianceSummaryByResourceTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetComplianceSummaryByResourceType", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetComplianceSummaryByResourceTypeAsync(ctx workflow.Context, input *configservice.GetComplianceSummaryByResourceTypeInput) *ConfigserviceGetComplianceSummaryByResourceTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetComplianceSummaryByResourceType", input)
	return &ConfigserviceGetComplianceSummaryByResourceTypeFuture{Future: future}
}

func (a *ConfigServiceStub) GetConformancePackComplianceDetails(ctx workflow.Context, input *configservice.GetConformancePackComplianceDetailsInput) (*configservice.GetConformancePackComplianceDetailsOutput, error) {
	var output configservice.GetConformancePackComplianceDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetConformancePackComplianceDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetConformancePackComplianceDetailsAsync(ctx workflow.Context, input *configservice.GetConformancePackComplianceDetailsInput) *ConfigserviceGetConformancePackComplianceDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetConformancePackComplianceDetails", input)
	return &ConfigserviceGetConformancePackComplianceDetailsFuture{Future: future}
}

func (a *ConfigServiceStub) GetConformancePackComplianceSummary(ctx workflow.Context, input *configservice.GetConformancePackComplianceSummaryInput) (*configservice.GetConformancePackComplianceSummaryOutput, error) {
	var output configservice.GetConformancePackComplianceSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetConformancePackComplianceSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetConformancePackComplianceSummaryAsync(ctx workflow.Context, input *configservice.GetConformancePackComplianceSummaryInput) *ConfigserviceGetConformancePackComplianceSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetConformancePackComplianceSummary", input)
	return &ConfigserviceGetConformancePackComplianceSummaryFuture{Future: future}
}

func (a *ConfigServiceStub) GetDiscoveredResourceCounts(ctx workflow.Context, input *configservice.GetDiscoveredResourceCountsInput) (*configservice.GetDiscoveredResourceCountsOutput, error) {
	var output configservice.GetDiscoveredResourceCountsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetDiscoveredResourceCounts", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetDiscoveredResourceCountsAsync(ctx workflow.Context, input *configservice.GetDiscoveredResourceCountsInput) *ConfigserviceGetDiscoveredResourceCountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetDiscoveredResourceCounts", input)
	return &ConfigserviceGetDiscoveredResourceCountsFuture{Future: future}
}

func (a *ConfigServiceStub) GetOrganizationConfigRuleDetailedStatus(ctx workflow.Context, input *configservice.GetOrganizationConfigRuleDetailedStatusInput) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error) {
	var output configservice.GetOrganizationConfigRuleDetailedStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetOrganizationConfigRuleDetailedStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetOrganizationConfigRuleDetailedStatusAsync(ctx workflow.Context, input *configservice.GetOrganizationConfigRuleDetailedStatusInput) *ConfigserviceGetOrganizationConfigRuleDetailedStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetOrganizationConfigRuleDetailedStatus", input)
	return &ConfigserviceGetOrganizationConfigRuleDetailedStatusFuture{Future: future}
}

func (a *ConfigServiceStub) GetOrganizationConformancePackDetailedStatus(ctx workflow.Context, input *configservice.GetOrganizationConformancePackDetailedStatusInput) (*configservice.GetOrganizationConformancePackDetailedStatusOutput, error) {
	var output configservice.GetOrganizationConformancePackDetailedStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetOrganizationConformancePackDetailedStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetOrganizationConformancePackDetailedStatusAsync(ctx workflow.Context, input *configservice.GetOrganizationConformancePackDetailedStatusInput) *ConfigserviceGetOrganizationConformancePackDetailedStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetOrganizationConformancePackDetailedStatus", input)
	return &ConfigserviceGetOrganizationConformancePackDetailedStatusFuture{Future: future}
}

func (a *ConfigServiceStub) GetResourceConfigHistory(ctx workflow.Context, input *configservice.GetResourceConfigHistoryInput) (*configservice.GetResourceConfigHistoryOutput, error) {
	var output configservice.GetResourceConfigHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.GetResourceConfigHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) GetResourceConfigHistoryAsync(ctx workflow.Context, input *configservice.GetResourceConfigHistoryInput) *ConfigserviceGetResourceConfigHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.GetResourceConfigHistory", input)
	return &ConfigserviceGetResourceConfigHistoryFuture{Future: future}
}

func (a *ConfigServiceStub) ListAggregateDiscoveredResources(ctx workflow.Context, input *configservice.ListAggregateDiscoveredResourcesInput) (*configservice.ListAggregateDiscoveredResourcesOutput, error) {
	var output configservice.ListAggregateDiscoveredResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.ListAggregateDiscoveredResources", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) ListAggregateDiscoveredResourcesAsync(ctx workflow.Context, input *configservice.ListAggregateDiscoveredResourcesInput) *ConfigserviceListAggregateDiscoveredResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.ListAggregateDiscoveredResources", input)
	return &ConfigserviceListAggregateDiscoveredResourcesFuture{Future: future}
}

func (a *ConfigServiceStub) ListDiscoveredResources(ctx workflow.Context, input *configservice.ListDiscoveredResourcesInput) (*configservice.ListDiscoveredResourcesOutput, error) {
	var output configservice.ListDiscoveredResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.ListDiscoveredResources", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) ListDiscoveredResourcesAsync(ctx workflow.Context, input *configservice.ListDiscoveredResourcesInput) *ConfigserviceListDiscoveredResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.ListDiscoveredResources", input)
	return &ConfigserviceListDiscoveredResourcesFuture{Future: future}
}

func (a *ConfigServiceStub) ListTagsForResource(ctx workflow.Context, input *configservice.ListTagsForResourceInput) (*configservice.ListTagsForResourceOutput, error) {
	var output configservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) ListTagsForResourceAsync(ctx workflow.Context, input *configservice.ListTagsForResourceInput) *ConfigserviceListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.ListTagsForResource", input)
	return &ConfigserviceListTagsForResourceFuture{Future: future}
}

func (a *ConfigServiceStub) PutAggregationAuthorization(ctx workflow.Context, input *configservice.PutAggregationAuthorizationInput) (*configservice.PutAggregationAuthorizationOutput, error) {
	var output configservice.PutAggregationAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutAggregationAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutAggregationAuthorizationAsync(ctx workflow.Context, input *configservice.PutAggregationAuthorizationInput) *ConfigservicePutAggregationAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutAggregationAuthorization", input)
	return &ConfigservicePutAggregationAuthorizationFuture{Future: future}
}

func (a *ConfigServiceStub) PutConfigRule(ctx workflow.Context, input *configservice.PutConfigRuleInput) (*configservice.PutConfigRuleOutput, error) {
	var output configservice.PutConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutConfigRuleAsync(ctx workflow.Context, input *configservice.PutConfigRuleInput) *ConfigservicePutConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutConfigRule", input)
	return &ConfigservicePutConfigRuleFuture{Future: future}
}

func (a *ConfigServiceStub) PutConfigurationAggregator(ctx workflow.Context, input *configservice.PutConfigurationAggregatorInput) (*configservice.PutConfigurationAggregatorOutput, error) {
	var output configservice.PutConfigurationAggregatorOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutConfigurationAggregator", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutConfigurationAggregatorAsync(ctx workflow.Context, input *configservice.PutConfigurationAggregatorInput) *ConfigservicePutConfigurationAggregatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutConfigurationAggregator", input)
	return &ConfigservicePutConfigurationAggregatorFuture{Future: future}
}

func (a *ConfigServiceStub) PutConfigurationRecorder(ctx workflow.Context, input *configservice.PutConfigurationRecorderInput) (*configservice.PutConfigurationRecorderOutput, error) {
	var output configservice.PutConfigurationRecorderOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutConfigurationRecorder", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutConfigurationRecorderAsync(ctx workflow.Context, input *configservice.PutConfigurationRecorderInput) *ConfigservicePutConfigurationRecorderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutConfigurationRecorder", input)
	return &ConfigservicePutConfigurationRecorderFuture{Future: future}
}

func (a *ConfigServiceStub) PutConformancePack(ctx workflow.Context, input *configservice.PutConformancePackInput) (*configservice.PutConformancePackOutput, error) {
	var output configservice.PutConformancePackOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutConformancePack", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutConformancePackAsync(ctx workflow.Context, input *configservice.PutConformancePackInput) *ConfigservicePutConformancePackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutConformancePack", input)
	return &ConfigservicePutConformancePackFuture{Future: future}
}

func (a *ConfigServiceStub) PutDeliveryChannel(ctx workflow.Context, input *configservice.PutDeliveryChannelInput) (*configservice.PutDeliveryChannelOutput, error) {
	var output configservice.PutDeliveryChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutDeliveryChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutDeliveryChannelAsync(ctx workflow.Context, input *configservice.PutDeliveryChannelInput) *ConfigservicePutDeliveryChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutDeliveryChannel", input)
	return &ConfigservicePutDeliveryChannelFuture{Future: future}
}

func (a *ConfigServiceStub) PutEvaluations(ctx workflow.Context, input *configservice.PutEvaluationsInput) (*configservice.PutEvaluationsOutput, error) {
	var output configservice.PutEvaluationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutEvaluations", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutEvaluationsAsync(ctx workflow.Context, input *configservice.PutEvaluationsInput) *ConfigservicePutEvaluationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutEvaluations", input)
	return &ConfigservicePutEvaluationsFuture{Future: future}
}

func (a *ConfigServiceStub) PutOrganizationConfigRule(ctx workflow.Context, input *configservice.PutOrganizationConfigRuleInput) (*configservice.PutOrganizationConfigRuleOutput, error) {
	var output configservice.PutOrganizationConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutOrganizationConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutOrganizationConfigRuleAsync(ctx workflow.Context, input *configservice.PutOrganizationConfigRuleInput) *ConfigservicePutOrganizationConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutOrganizationConfigRule", input)
	return &ConfigservicePutOrganizationConfigRuleFuture{Future: future}
}

func (a *ConfigServiceStub) PutOrganizationConformancePack(ctx workflow.Context, input *configservice.PutOrganizationConformancePackInput) (*configservice.PutOrganizationConformancePackOutput, error) {
	var output configservice.PutOrganizationConformancePackOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutOrganizationConformancePack", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutOrganizationConformancePackAsync(ctx workflow.Context, input *configservice.PutOrganizationConformancePackInput) *ConfigservicePutOrganizationConformancePackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutOrganizationConformancePack", input)
	return &ConfigservicePutOrganizationConformancePackFuture{Future: future}
}

func (a *ConfigServiceStub) PutRemediationConfigurations(ctx workflow.Context, input *configservice.PutRemediationConfigurationsInput) (*configservice.PutRemediationConfigurationsOutput, error) {
	var output configservice.PutRemediationConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutRemediationConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutRemediationConfigurationsAsync(ctx workflow.Context, input *configservice.PutRemediationConfigurationsInput) *ConfigservicePutRemediationConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutRemediationConfigurations", input)
	return &ConfigservicePutRemediationConfigurationsFuture{Future: future}
}

func (a *ConfigServiceStub) PutRemediationExceptions(ctx workflow.Context, input *configservice.PutRemediationExceptionsInput) (*configservice.PutRemediationExceptionsOutput, error) {
	var output configservice.PutRemediationExceptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutRemediationExceptions", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutRemediationExceptionsAsync(ctx workflow.Context, input *configservice.PutRemediationExceptionsInput) *ConfigservicePutRemediationExceptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutRemediationExceptions", input)
	return &ConfigservicePutRemediationExceptionsFuture{Future: future}
}

func (a *ConfigServiceStub) PutResourceConfig(ctx workflow.Context, input *configservice.PutResourceConfigInput) (*configservice.PutResourceConfigOutput, error) {
	var output configservice.PutResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutResourceConfigAsync(ctx workflow.Context, input *configservice.PutResourceConfigInput) *ConfigservicePutResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutResourceConfig", input)
	return &ConfigservicePutResourceConfigFuture{Future: future}
}

func (a *ConfigServiceStub) PutRetentionConfiguration(ctx workflow.Context, input *configservice.PutRetentionConfigurationInput) (*configservice.PutRetentionConfigurationOutput, error) {
	var output configservice.PutRetentionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.PutRetentionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) PutRetentionConfigurationAsync(ctx workflow.Context, input *configservice.PutRetentionConfigurationInput) *ConfigservicePutRetentionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.PutRetentionConfiguration", input)
	return &ConfigservicePutRetentionConfigurationFuture{Future: future}
}

func (a *ConfigServiceStub) SelectAggregateResourceConfig(ctx workflow.Context, input *configservice.SelectAggregateResourceConfigInput) (*configservice.SelectAggregateResourceConfigOutput, error) {
	var output configservice.SelectAggregateResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.SelectAggregateResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) SelectAggregateResourceConfigAsync(ctx workflow.Context, input *configservice.SelectAggregateResourceConfigInput) *ConfigserviceSelectAggregateResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.SelectAggregateResourceConfig", input)
	return &ConfigserviceSelectAggregateResourceConfigFuture{Future: future}
}

func (a *ConfigServiceStub) SelectResourceConfig(ctx workflow.Context, input *configservice.SelectResourceConfigInput) (*configservice.SelectResourceConfigOutput, error) {
	var output configservice.SelectResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.SelectResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) SelectResourceConfigAsync(ctx workflow.Context, input *configservice.SelectResourceConfigInput) *ConfigserviceSelectResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.SelectResourceConfig", input)
	return &ConfigserviceSelectResourceConfigFuture{Future: future}
}

func (a *ConfigServiceStub) StartConfigRulesEvaluation(ctx workflow.Context, input *configservice.StartConfigRulesEvaluationInput) (*configservice.StartConfigRulesEvaluationOutput, error) {
	var output configservice.StartConfigRulesEvaluationOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.StartConfigRulesEvaluation", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) StartConfigRulesEvaluationAsync(ctx workflow.Context, input *configservice.StartConfigRulesEvaluationInput) *ConfigserviceStartConfigRulesEvaluationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.StartConfigRulesEvaluation", input)
	return &ConfigserviceStartConfigRulesEvaluationFuture{Future: future}
}

func (a *ConfigServiceStub) StartConfigurationRecorder(ctx workflow.Context, input *configservice.StartConfigurationRecorderInput) (*configservice.StartConfigurationRecorderOutput, error) {
	var output configservice.StartConfigurationRecorderOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.StartConfigurationRecorder", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) StartConfigurationRecorderAsync(ctx workflow.Context, input *configservice.StartConfigurationRecorderInput) *ConfigserviceStartConfigurationRecorderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.StartConfigurationRecorder", input)
	return &ConfigserviceStartConfigurationRecorderFuture{Future: future}
}

func (a *ConfigServiceStub) StartRemediationExecution(ctx workflow.Context, input *configservice.StartRemediationExecutionInput) (*configservice.StartRemediationExecutionOutput, error) {
	var output configservice.StartRemediationExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.StartRemediationExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) StartRemediationExecutionAsync(ctx workflow.Context, input *configservice.StartRemediationExecutionInput) *ConfigserviceStartRemediationExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.StartRemediationExecution", input)
	return &ConfigserviceStartRemediationExecutionFuture{Future: future}
}

func (a *ConfigServiceStub) StopConfigurationRecorder(ctx workflow.Context, input *configservice.StopConfigurationRecorderInput) (*configservice.StopConfigurationRecorderOutput, error) {
	var output configservice.StopConfigurationRecorderOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.StopConfigurationRecorder", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) StopConfigurationRecorderAsync(ctx workflow.Context, input *configservice.StopConfigurationRecorderInput) *ConfigserviceStopConfigurationRecorderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.StopConfigurationRecorder", input)
	return &ConfigserviceStopConfigurationRecorderFuture{Future: future}
}

func (a *ConfigServiceStub) TagResource(ctx workflow.Context, input *configservice.TagResourceInput) (*configservice.TagResourceOutput, error) {
	var output configservice.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) TagResourceAsync(ctx workflow.Context, input *configservice.TagResourceInput) *ConfigserviceTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.TagResource", input)
	return &ConfigserviceTagResourceFuture{Future: future}
}

func (a *ConfigServiceStub) UntagResource(ctx workflow.Context, input *configservice.UntagResourceInput) (*configservice.UntagResourceOutput, error) {
	var output configservice.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.configservice.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ConfigServiceStub) UntagResourceAsync(ctx workflow.Context, input *configservice.UntagResourceInput) *ConfigserviceUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.configservice.UntagResource", input)
	return &ConfigserviceUntagResourceFuture{Future: future}
}
