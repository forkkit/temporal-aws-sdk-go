// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/detective"
	"go.temporal.io/sdk/workflow"
)

type DetectiveClient interface {
	AcceptInvitation(ctx workflow.Context, input *detective.AcceptInvitationInput) (*detective.AcceptInvitationOutput, error)
	AcceptInvitationAsync(ctx workflow.Context, input *detective.AcceptInvitationInput) *DetectiveAcceptInvitationFuture

	CreateGraph(ctx workflow.Context, input *detective.CreateGraphInput) (*detective.CreateGraphOutput, error)
	CreateGraphAsync(ctx workflow.Context, input *detective.CreateGraphInput) *DetectiveCreateGraphFuture

	CreateMembers(ctx workflow.Context, input *detective.CreateMembersInput) (*detective.CreateMembersOutput, error)
	CreateMembersAsync(ctx workflow.Context, input *detective.CreateMembersInput) *DetectiveCreateMembersFuture

	DeleteGraph(ctx workflow.Context, input *detective.DeleteGraphInput) (*detective.DeleteGraphOutput, error)
	DeleteGraphAsync(ctx workflow.Context, input *detective.DeleteGraphInput) *DetectiveDeleteGraphFuture

	DeleteMembers(ctx workflow.Context, input *detective.DeleteMembersInput) (*detective.DeleteMembersOutput, error)
	DeleteMembersAsync(ctx workflow.Context, input *detective.DeleteMembersInput) *DetectiveDeleteMembersFuture

	DisassociateMembership(ctx workflow.Context, input *detective.DisassociateMembershipInput) (*detective.DisassociateMembershipOutput, error)
	DisassociateMembershipAsync(ctx workflow.Context, input *detective.DisassociateMembershipInput) *DetectiveDisassociateMembershipFuture

	GetMembers(ctx workflow.Context, input *detective.GetMembersInput) (*detective.GetMembersOutput, error)
	GetMembersAsync(ctx workflow.Context, input *detective.GetMembersInput) *DetectiveGetMembersFuture

	ListGraphs(ctx workflow.Context, input *detective.ListGraphsInput) (*detective.ListGraphsOutput, error)
	ListGraphsAsync(ctx workflow.Context, input *detective.ListGraphsInput) *DetectiveListGraphsFuture

	ListInvitations(ctx workflow.Context, input *detective.ListInvitationsInput) (*detective.ListInvitationsOutput, error)
	ListInvitationsAsync(ctx workflow.Context, input *detective.ListInvitationsInput) *DetectiveListInvitationsFuture

	ListMembers(ctx workflow.Context, input *detective.ListMembersInput) (*detective.ListMembersOutput, error)
	ListMembersAsync(ctx workflow.Context, input *detective.ListMembersInput) *DetectiveListMembersFuture

	RejectInvitation(ctx workflow.Context, input *detective.RejectInvitationInput) (*detective.RejectInvitationOutput, error)
	RejectInvitationAsync(ctx workflow.Context, input *detective.RejectInvitationInput) *DetectiveRejectInvitationFuture

	StartMonitoringMember(ctx workflow.Context, input *detective.StartMonitoringMemberInput) (*detective.StartMonitoringMemberOutput, error)
	StartMonitoringMemberAsync(ctx workflow.Context, input *detective.StartMonitoringMemberInput) *DetectiveStartMonitoringMemberFuture
}

type DetectiveStub struct{}

func NewDetectiveStub() DetectiveClient {
	return &DetectiveStub{}
}

type DetectiveAcceptInvitationFuture struct {
	Future workflow.Future
}

func (r *DetectiveAcceptInvitationFuture) Get(ctx workflow.Context) (*detective.AcceptInvitationOutput, error) {
	var output detective.AcceptInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectiveCreateGraphFuture struct {
	Future workflow.Future
}

func (r *DetectiveCreateGraphFuture) Get(ctx workflow.Context) (*detective.CreateGraphOutput, error) {
	var output detective.CreateGraphOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectiveCreateMembersFuture struct {
	Future workflow.Future
}

func (r *DetectiveCreateMembersFuture) Get(ctx workflow.Context) (*detective.CreateMembersOutput, error) {
	var output detective.CreateMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectiveDeleteGraphFuture struct {
	Future workflow.Future
}

func (r *DetectiveDeleteGraphFuture) Get(ctx workflow.Context) (*detective.DeleteGraphOutput, error) {
	var output detective.DeleteGraphOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectiveDeleteMembersFuture struct {
	Future workflow.Future
}

func (r *DetectiveDeleteMembersFuture) Get(ctx workflow.Context) (*detective.DeleteMembersOutput, error) {
	var output detective.DeleteMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectiveDisassociateMembershipFuture struct {
	Future workflow.Future
}

func (r *DetectiveDisassociateMembershipFuture) Get(ctx workflow.Context) (*detective.DisassociateMembershipOutput, error) {
	var output detective.DisassociateMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectiveGetMembersFuture struct {
	Future workflow.Future
}

func (r *DetectiveGetMembersFuture) Get(ctx workflow.Context) (*detective.GetMembersOutput, error) {
	var output detective.GetMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectiveListGraphsFuture struct {
	Future workflow.Future
}

func (r *DetectiveListGraphsFuture) Get(ctx workflow.Context) (*detective.ListGraphsOutput, error) {
	var output detective.ListGraphsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectiveListInvitationsFuture struct {
	Future workflow.Future
}

func (r *DetectiveListInvitationsFuture) Get(ctx workflow.Context) (*detective.ListInvitationsOutput, error) {
	var output detective.ListInvitationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectiveListMembersFuture struct {
	Future workflow.Future
}

func (r *DetectiveListMembersFuture) Get(ctx workflow.Context) (*detective.ListMembersOutput, error) {
	var output detective.ListMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectiveRejectInvitationFuture struct {
	Future workflow.Future
}

func (r *DetectiveRejectInvitationFuture) Get(ctx workflow.Context) (*detective.RejectInvitationOutput, error) {
	var output detective.RejectInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectiveStartMonitoringMemberFuture struct {
	Future workflow.Future
}

func (r *DetectiveStartMonitoringMemberFuture) Get(ctx workflow.Context) (*detective.StartMonitoringMemberOutput, error) {
	var output detective.StartMonitoringMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) AcceptInvitation(ctx workflow.Context, input *detective.AcceptInvitationInput) (*detective.AcceptInvitationOutput, error) {
	var output detective.AcceptInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws.detective.AcceptInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) AcceptInvitationAsync(ctx workflow.Context, input *detective.AcceptInvitationInput) *DetectiveAcceptInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.detective.AcceptInvitation", input)
	return &DetectiveAcceptInvitationFuture{Future: future}
}

func (a *DetectiveStub) CreateGraph(ctx workflow.Context, input *detective.CreateGraphInput) (*detective.CreateGraphOutput, error) {
	var output detective.CreateGraphOutput
	err := workflow.ExecuteActivity(ctx, "aws.detective.CreateGraph", input).Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) CreateGraphAsync(ctx workflow.Context, input *detective.CreateGraphInput) *DetectiveCreateGraphFuture {
	future := workflow.ExecuteActivity(ctx, "aws.detective.CreateGraph", input)
	return &DetectiveCreateGraphFuture{Future: future}
}

func (a *DetectiveStub) CreateMembers(ctx workflow.Context, input *detective.CreateMembersInput) (*detective.CreateMembersOutput, error) {
	var output detective.CreateMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws.detective.CreateMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) CreateMembersAsync(ctx workflow.Context, input *detective.CreateMembersInput) *DetectiveCreateMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.detective.CreateMembers", input)
	return &DetectiveCreateMembersFuture{Future: future}
}

func (a *DetectiveStub) DeleteGraph(ctx workflow.Context, input *detective.DeleteGraphInput) (*detective.DeleteGraphOutput, error) {
	var output detective.DeleteGraphOutput
	err := workflow.ExecuteActivity(ctx, "aws.detective.DeleteGraph", input).Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) DeleteGraphAsync(ctx workflow.Context, input *detective.DeleteGraphInput) *DetectiveDeleteGraphFuture {
	future := workflow.ExecuteActivity(ctx, "aws.detective.DeleteGraph", input)
	return &DetectiveDeleteGraphFuture{Future: future}
}

func (a *DetectiveStub) DeleteMembers(ctx workflow.Context, input *detective.DeleteMembersInput) (*detective.DeleteMembersOutput, error) {
	var output detective.DeleteMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws.detective.DeleteMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) DeleteMembersAsync(ctx workflow.Context, input *detective.DeleteMembersInput) *DetectiveDeleteMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.detective.DeleteMembers", input)
	return &DetectiveDeleteMembersFuture{Future: future}
}

func (a *DetectiveStub) DisassociateMembership(ctx workflow.Context, input *detective.DisassociateMembershipInput) (*detective.DisassociateMembershipOutput, error) {
	var output detective.DisassociateMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws.detective.DisassociateMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) DisassociateMembershipAsync(ctx workflow.Context, input *detective.DisassociateMembershipInput) *DetectiveDisassociateMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws.detective.DisassociateMembership", input)
	return &DetectiveDisassociateMembershipFuture{Future: future}
}

func (a *DetectiveStub) GetMembers(ctx workflow.Context, input *detective.GetMembersInput) (*detective.GetMembersOutput, error) {
	var output detective.GetMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws.detective.GetMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) GetMembersAsync(ctx workflow.Context, input *detective.GetMembersInput) *DetectiveGetMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.detective.GetMembers", input)
	return &DetectiveGetMembersFuture{Future: future}
}

func (a *DetectiveStub) ListGraphs(ctx workflow.Context, input *detective.ListGraphsInput) (*detective.ListGraphsOutput, error) {
	var output detective.ListGraphsOutput
	err := workflow.ExecuteActivity(ctx, "aws.detective.ListGraphs", input).Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) ListGraphsAsync(ctx workflow.Context, input *detective.ListGraphsInput) *DetectiveListGraphsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.detective.ListGraphs", input)
	return &DetectiveListGraphsFuture{Future: future}
}

func (a *DetectiveStub) ListInvitations(ctx workflow.Context, input *detective.ListInvitationsInput) (*detective.ListInvitationsOutput, error) {
	var output detective.ListInvitationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.detective.ListInvitations", input).Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) ListInvitationsAsync(ctx workflow.Context, input *detective.ListInvitationsInput) *DetectiveListInvitationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.detective.ListInvitations", input)
	return &DetectiveListInvitationsFuture{Future: future}
}

func (a *DetectiveStub) ListMembers(ctx workflow.Context, input *detective.ListMembersInput) (*detective.ListMembersOutput, error) {
	var output detective.ListMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws.detective.ListMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) ListMembersAsync(ctx workflow.Context, input *detective.ListMembersInput) *DetectiveListMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.detective.ListMembers", input)
	return &DetectiveListMembersFuture{Future: future}
}

func (a *DetectiveStub) RejectInvitation(ctx workflow.Context, input *detective.RejectInvitationInput) (*detective.RejectInvitationOutput, error) {
	var output detective.RejectInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws.detective.RejectInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) RejectInvitationAsync(ctx workflow.Context, input *detective.RejectInvitationInput) *DetectiveRejectInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.detective.RejectInvitation", input)
	return &DetectiveRejectInvitationFuture{Future: future}
}

func (a *DetectiveStub) StartMonitoringMember(ctx workflow.Context, input *detective.StartMonitoringMemberInput) (*detective.StartMonitoringMemberOutput, error) {
	var output detective.StartMonitoringMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws.detective.StartMonitoringMember", input).Get(ctx, &output)
	return &output, err
}

func (a *DetectiveStub) StartMonitoringMemberAsync(ctx workflow.Context, input *detective.StartMonitoringMemberInput) *DetectiveStartMonitoringMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.detective.StartMonitoringMember", input)
	return &DetectiveStartMonitoringMemberFuture{Future: future}
}
