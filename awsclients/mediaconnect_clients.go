// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/mediaconnect"
	"go.temporal.io/sdk/workflow"
)

type MediaConnectClient interface {
	AddFlowOutputs(ctx workflow.Context, input *mediaconnect.AddFlowOutputsInput) (*mediaconnect.AddFlowOutputsOutput, error)
	AddFlowOutputsAsync(ctx workflow.Context, input *mediaconnect.AddFlowOutputsInput) *MediaconnectAddFlowOutputsFuture

	AddFlowSources(ctx workflow.Context, input *mediaconnect.AddFlowSourcesInput) (*mediaconnect.AddFlowSourcesOutput, error)
	AddFlowSourcesAsync(ctx workflow.Context, input *mediaconnect.AddFlowSourcesInput) *MediaconnectAddFlowSourcesFuture

	AddFlowVpcInterfaces(ctx workflow.Context, input *mediaconnect.AddFlowVpcInterfacesInput) (*mediaconnect.AddFlowVpcInterfacesOutput, error)
	AddFlowVpcInterfacesAsync(ctx workflow.Context, input *mediaconnect.AddFlowVpcInterfacesInput) *MediaconnectAddFlowVpcInterfacesFuture

	CreateFlow(ctx workflow.Context, input *mediaconnect.CreateFlowInput) (*mediaconnect.CreateFlowOutput, error)
	CreateFlowAsync(ctx workflow.Context, input *mediaconnect.CreateFlowInput) *MediaconnectCreateFlowFuture

	DeleteFlow(ctx workflow.Context, input *mediaconnect.DeleteFlowInput) (*mediaconnect.DeleteFlowOutput, error)
	DeleteFlowAsync(ctx workflow.Context, input *mediaconnect.DeleteFlowInput) *MediaconnectDeleteFlowFuture

	DescribeFlow(ctx workflow.Context, input *mediaconnect.DescribeFlowInput) (*mediaconnect.DescribeFlowOutput, error)
	DescribeFlowAsync(ctx workflow.Context, input *mediaconnect.DescribeFlowInput) *MediaconnectDescribeFlowFuture

	DescribeOffering(ctx workflow.Context, input *mediaconnect.DescribeOfferingInput) (*mediaconnect.DescribeOfferingOutput, error)
	DescribeOfferingAsync(ctx workflow.Context, input *mediaconnect.DescribeOfferingInput) *MediaconnectDescribeOfferingFuture

	DescribeReservation(ctx workflow.Context, input *mediaconnect.DescribeReservationInput) (*mediaconnect.DescribeReservationOutput, error)
	DescribeReservationAsync(ctx workflow.Context, input *mediaconnect.DescribeReservationInput) *MediaconnectDescribeReservationFuture

	GrantFlowEntitlements(ctx workflow.Context, input *mediaconnect.GrantFlowEntitlementsInput) (*mediaconnect.GrantFlowEntitlementsOutput, error)
	GrantFlowEntitlementsAsync(ctx workflow.Context, input *mediaconnect.GrantFlowEntitlementsInput) *MediaconnectGrantFlowEntitlementsFuture

	ListEntitlements(ctx workflow.Context, input *mediaconnect.ListEntitlementsInput) (*mediaconnect.ListEntitlementsOutput, error)
	ListEntitlementsAsync(ctx workflow.Context, input *mediaconnect.ListEntitlementsInput) *MediaconnectListEntitlementsFuture

	ListFlows(ctx workflow.Context, input *mediaconnect.ListFlowsInput) (*mediaconnect.ListFlowsOutput, error)
	ListFlowsAsync(ctx workflow.Context, input *mediaconnect.ListFlowsInput) *MediaconnectListFlowsFuture

	ListOfferings(ctx workflow.Context, input *mediaconnect.ListOfferingsInput) (*mediaconnect.ListOfferingsOutput, error)
	ListOfferingsAsync(ctx workflow.Context, input *mediaconnect.ListOfferingsInput) *MediaconnectListOfferingsFuture

	ListReservations(ctx workflow.Context, input *mediaconnect.ListReservationsInput) (*mediaconnect.ListReservationsOutput, error)
	ListReservationsAsync(ctx workflow.Context, input *mediaconnect.ListReservationsInput) *MediaconnectListReservationsFuture

	ListTagsForResource(ctx workflow.Context, input *mediaconnect.ListTagsForResourceInput) (*mediaconnect.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *mediaconnect.ListTagsForResourceInput) *MediaconnectListTagsForResourceFuture

	PurchaseOffering(ctx workflow.Context, input *mediaconnect.PurchaseOfferingInput) (*mediaconnect.PurchaseOfferingOutput, error)
	PurchaseOfferingAsync(ctx workflow.Context, input *mediaconnect.PurchaseOfferingInput) *MediaconnectPurchaseOfferingFuture

	RemoveFlowOutput(ctx workflow.Context, input *mediaconnect.RemoveFlowOutputInput) (*mediaconnect.RemoveFlowOutputOutput, error)
	RemoveFlowOutputAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowOutputInput) *MediaconnectRemoveFlowOutputFuture

	RemoveFlowSource(ctx workflow.Context, input *mediaconnect.RemoveFlowSourceInput) (*mediaconnect.RemoveFlowSourceOutput, error)
	RemoveFlowSourceAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowSourceInput) *MediaconnectRemoveFlowSourceFuture

	RemoveFlowVpcInterface(ctx workflow.Context, input *mediaconnect.RemoveFlowVpcInterfaceInput) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error)
	RemoveFlowVpcInterfaceAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowVpcInterfaceInput) *MediaconnectRemoveFlowVpcInterfaceFuture

	RevokeFlowEntitlement(ctx workflow.Context, input *mediaconnect.RevokeFlowEntitlementInput) (*mediaconnect.RevokeFlowEntitlementOutput, error)
	RevokeFlowEntitlementAsync(ctx workflow.Context, input *mediaconnect.RevokeFlowEntitlementInput) *MediaconnectRevokeFlowEntitlementFuture

	StartFlow(ctx workflow.Context, input *mediaconnect.StartFlowInput) (*mediaconnect.StartFlowOutput, error)
	StartFlowAsync(ctx workflow.Context, input *mediaconnect.StartFlowInput) *MediaconnectStartFlowFuture

	StopFlow(ctx workflow.Context, input *mediaconnect.StopFlowInput) (*mediaconnect.StopFlowOutput, error)
	StopFlowAsync(ctx workflow.Context, input *mediaconnect.StopFlowInput) *MediaconnectStopFlowFuture

	TagResource(ctx workflow.Context, input *mediaconnect.TagResourceInput) (*mediaconnect.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *mediaconnect.TagResourceInput) *MediaconnectTagResourceFuture

	UntagResource(ctx workflow.Context, input *mediaconnect.UntagResourceInput) (*mediaconnect.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *mediaconnect.UntagResourceInput) *MediaconnectUntagResourceFuture

	UpdateFlow(ctx workflow.Context, input *mediaconnect.UpdateFlowInput) (*mediaconnect.UpdateFlowOutput, error)
	UpdateFlowAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowInput) *MediaconnectUpdateFlowFuture

	UpdateFlowEntitlement(ctx workflow.Context, input *mediaconnect.UpdateFlowEntitlementInput) (*mediaconnect.UpdateFlowEntitlementOutput, error)
	UpdateFlowEntitlementAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowEntitlementInput) *MediaconnectUpdateFlowEntitlementFuture

	UpdateFlowOutput(ctx workflow.Context, input *mediaconnect.UpdateFlowOutputInput) (*mediaconnect.UpdateFlowOutputOutput, error)
	UpdateFlowOutputAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowOutputInput) *MediaconnectUpdateFlowOutputFuture

	UpdateFlowSource(ctx workflow.Context, input *mediaconnect.UpdateFlowSourceInput) (*mediaconnect.UpdateFlowSourceOutput, error)
	UpdateFlowSourceAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowSourceInput) *MediaconnectUpdateFlowSourceFuture
}

type MediaConnectStub struct{}

func NewMediaConnectStub() MediaConnectClient {
	return &MediaConnectStub{}
}

type MediaconnectAddFlowOutputsFuture struct {
	Future workflow.Future
}

func (r *MediaconnectAddFlowOutputsFuture) Get(ctx workflow.Context) (*mediaconnect.AddFlowOutputsOutput, error) {
	var output mediaconnect.AddFlowOutputsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectAddFlowSourcesFuture struct {
	Future workflow.Future
}

func (r *MediaconnectAddFlowSourcesFuture) Get(ctx workflow.Context) (*mediaconnect.AddFlowSourcesOutput, error) {
	var output mediaconnect.AddFlowSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectAddFlowVpcInterfacesFuture struct {
	Future workflow.Future
}

func (r *MediaconnectAddFlowVpcInterfacesFuture) Get(ctx workflow.Context) (*mediaconnect.AddFlowVpcInterfacesOutput, error) {
	var output mediaconnect.AddFlowVpcInterfacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectCreateFlowFuture struct {
	Future workflow.Future
}

func (r *MediaconnectCreateFlowFuture) Get(ctx workflow.Context) (*mediaconnect.CreateFlowOutput, error) {
	var output mediaconnect.CreateFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectDeleteFlowFuture struct {
	Future workflow.Future
}

func (r *MediaconnectDeleteFlowFuture) Get(ctx workflow.Context) (*mediaconnect.DeleteFlowOutput, error) {
	var output mediaconnect.DeleteFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectDescribeFlowFuture struct {
	Future workflow.Future
}

func (r *MediaconnectDescribeFlowFuture) Get(ctx workflow.Context) (*mediaconnect.DescribeFlowOutput, error) {
	var output mediaconnect.DescribeFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectDescribeOfferingFuture struct {
	Future workflow.Future
}

func (r *MediaconnectDescribeOfferingFuture) Get(ctx workflow.Context) (*mediaconnect.DescribeOfferingOutput, error) {
	var output mediaconnect.DescribeOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectDescribeReservationFuture struct {
	Future workflow.Future
}

func (r *MediaconnectDescribeReservationFuture) Get(ctx workflow.Context) (*mediaconnect.DescribeReservationOutput, error) {
	var output mediaconnect.DescribeReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectGrantFlowEntitlementsFuture struct {
	Future workflow.Future
}

func (r *MediaconnectGrantFlowEntitlementsFuture) Get(ctx workflow.Context) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	var output mediaconnect.GrantFlowEntitlementsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectListEntitlementsFuture struct {
	Future workflow.Future
}

func (r *MediaconnectListEntitlementsFuture) Get(ctx workflow.Context) (*mediaconnect.ListEntitlementsOutput, error) {
	var output mediaconnect.ListEntitlementsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectListFlowsFuture struct {
	Future workflow.Future
}

func (r *MediaconnectListFlowsFuture) Get(ctx workflow.Context) (*mediaconnect.ListFlowsOutput, error) {
	var output mediaconnect.ListFlowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectListOfferingsFuture struct {
	Future workflow.Future
}

func (r *MediaconnectListOfferingsFuture) Get(ctx workflow.Context) (*mediaconnect.ListOfferingsOutput, error) {
	var output mediaconnect.ListOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectListReservationsFuture struct {
	Future workflow.Future
}

func (r *MediaconnectListReservationsFuture) Get(ctx workflow.Context) (*mediaconnect.ListReservationsOutput, error) {
	var output mediaconnect.ListReservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *MediaconnectListTagsForResourceFuture) Get(ctx workflow.Context) (*mediaconnect.ListTagsForResourceOutput, error) {
	var output mediaconnect.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectPurchaseOfferingFuture struct {
	Future workflow.Future
}

func (r *MediaconnectPurchaseOfferingFuture) Get(ctx workflow.Context) (*mediaconnect.PurchaseOfferingOutput, error) {
	var output mediaconnect.PurchaseOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectRemoveFlowOutputFuture struct {
	Future workflow.Future
}

func (r *MediaconnectRemoveFlowOutputFuture) Get(ctx workflow.Context) (*mediaconnect.RemoveFlowOutputOutput, error) {
	var output mediaconnect.RemoveFlowOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectRemoveFlowSourceFuture struct {
	Future workflow.Future
}

func (r *MediaconnectRemoveFlowSourceFuture) Get(ctx workflow.Context) (*mediaconnect.RemoveFlowSourceOutput, error) {
	var output mediaconnect.RemoveFlowSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectRemoveFlowVpcInterfaceFuture struct {
	Future workflow.Future
}

func (r *MediaconnectRemoveFlowVpcInterfaceFuture) Get(ctx workflow.Context) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error) {
	var output mediaconnect.RemoveFlowVpcInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectRevokeFlowEntitlementFuture struct {
	Future workflow.Future
}

func (r *MediaconnectRevokeFlowEntitlementFuture) Get(ctx workflow.Context) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	var output mediaconnect.RevokeFlowEntitlementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectStartFlowFuture struct {
	Future workflow.Future
}

func (r *MediaconnectStartFlowFuture) Get(ctx workflow.Context) (*mediaconnect.StartFlowOutput, error) {
	var output mediaconnect.StartFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectStopFlowFuture struct {
	Future workflow.Future
}

func (r *MediaconnectStopFlowFuture) Get(ctx workflow.Context) (*mediaconnect.StopFlowOutput, error) {
	var output mediaconnect.StopFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectTagResourceFuture struct {
	Future workflow.Future
}

func (r *MediaconnectTagResourceFuture) Get(ctx workflow.Context) (*mediaconnect.TagResourceOutput, error) {
	var output mediaconnect.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectUntagResourceFuture struct {
	Future workflow.Future
}

func (r *MediaconnectUntagResourceFuture) Get(ctx workflow.Context) (*mediaconnect.UntagResourceOutput, error) {
	var output mediaconnect.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectUpdateFlowFuture struct {
	Future workflow.Future
}

func (r *MediaconnectUpdateFlowFuture) Get(ctx workflow.Context) (*mediaconnect.UpdateFlowOutput, error) {
	var output mediaconnect.UpdateFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectUpdateFlowEntitlementFuture struct {
	Future workflow.Future
}

func (r *MediaconnectUpdateFlowEntitlementFuture) Get(ctx workflow.Context) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	var output mediaconnect.UpdateFlowEntitlementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectUpdateFlowOutputFuture struct {
	Future workflow.Future
}

func (r *MediaconnectUpdateFlowOutputFuture) Get(ctx workflow.Context) (*mediaconnect.UpdateFlowOutputOutput, error) {
	var output mediaconnect.UpdateFlowOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconnectUpdateFlowSourceFuture struct {
	Future workflow.Future
}

func (r *MediaconnectUpdateFlowSourceFuture) Get(ctx workflow.Context) (*mediaconnect.UpdateFlowSourceOutput, error) {
	var output mediaconnect.UpdateFlowSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) AddFlowOutputs(ctx workflow.Context, input *mediaconnect.AddFlowOutputsInput) (*mediaconnect.AddFlowOutputsOutput, error) {
	var output mediaconnect.AddFlowOutputsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.AddFlowOutputs", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) AddFlowOutputsAsync(ctx workflow.Context, input *mediaconnect.AddFlowOutputsInput) *MediaconnectAddFlowOutputsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.AddFlowOutputs", input)
	return &MediaconnectAddFlowOutputsFuture{Future: future}
}

func (a *MediaConnectStub) AddFlowSources(ctx workflow.Context, input *mediaconnect.AddFlowSourcesInput) (*mediaconnect.AddFlowSourcesOutput, error) {
	var output mediaconnect.AddFlowSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.AddFlowSources", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) AddFlowSourcesAsync(ctx workflow.Context, input *mediaconnect.AddFlowSourcesInput) *MediaconnectAddFlowSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.AddFlowSources", input)
	return &MediaconnectAddFlowSourcesFuture{Future: future}
}

func (a *MediaConnectStub) AddFlowVpcInterfaces(ctx workflow.Context, input *mediaconnect.AddFlowVpcInterfacesInput) (*mediaconnect.AddFlowVpcInterfacesOutput, error) {
	var output mediaconnect.AddFlowVpcInterfacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.AddFlowVpcInterfaces", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) AddFlowVpcInterfacesAsync(ctx workflow.Context, input *mediaconnect.AddFlowVpcInterfacesInput) *MediaconnectAddFlowVpcInterfacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.AddFlowVpcInterfaces", input)
	return &MediaconnectAddFlowVpcInterfacesFuture{Future: future}
}

func (a *MediaConnectStub) CreateFlow(ctx workflow.Context, input *mediaconnect.CreateFlowInput) (*mediaconnect.CreateFlowOutput, error) {
	var output mediaconnect.CreateFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.CreateFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) CreateFlowAsync(ctx workflow.Context, input *mediaconnect.CreateFlowInput) *MediaconnectCreateFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.CreateFlow", input)
	return &MediaconnectCreateFlowFuture{Future: future}
}

func (a *MediaConnectStub) DeleteFlow(ctx workflow.Context, input *mediaconnect.DeleteFlowInput) (*mediaconnect.DeleteFlowOutput, error) {
	var output mediaconnect.DeleteFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DeleteFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) DeleteFlowAsync(ctx workflow.Context, input *mediaconnect.DeleteFlowInput) *MediaconnectDeleteFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DeleteFlow", input)
	return &MediaconnectDeleteFlowFuture{Future: future}
}

func (a *MediaConnectStub) DescribeFlow(ctx workflow.Context, input *mediaconnect.DescribeFlowInput) (*mediaconnect.DescribeFlowOutput, error) {
	var output mediaconnect.DescribeFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DescribeFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) DescribeFlowAsync(ctx workflow.Context, input *mediaconnect.DescribeFlowInput) *MediaconnectDescribeFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DescribeFlow", input)
	return &MediaconnectDescribeFlowFuture{Future: future}
}

func (a *MediaConnectStub) DescribeOffering(ctx workflow.Context, input *mediaconnect.DescribeOfferingInput) (*mediaconnect.DescribeOfferingOutput, error) {
	var output mediaconnect.DescribeOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DescribeOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) DescribeOfferingAsync(ctx workflow.Context, input *mediaconnect.DescribeOfferingInput) *MediaconnectDescribeOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DescribeOffering", input)
	return &MediaconnectDescribeOfferingFuture{Future: future}
}

func (a *MediaConnectStub) DescribeReservation(ctx workflow.Context, input *mediaconnect.DescribeReservationInput) (*mediaconnect.DescribeReservationOutput, error) {
	var output mediaconnect.DescribeReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DescribeReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) DescribeReservationAsync(ctx workflow.Context, input *mediaconnect.DescribeReservationInput) *MediaconnectDescribeReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DescribeReservation", input)
	return &MediaconnectDescribeReservationFuture{Future: future}
}

func (a *MediaConnectStub) GrantFlowEntitlements(ctx workflow.Context, input *mediaconnect.GrantFlowEntitlementsInput) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	var output mediaconnect.GrantFlowEntitlementsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.GrantFlowEntitlements", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) GrantFlowEntitlementsAsync(ctx workflow.Context, input *mediaconnect.GrantFlowEntitlementsInput) *MediaconnectGrantFlowEntitlementsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.GrantFlowEntitlements", input)
	return &MediaconnectGrantFlowEntitlementsFuture{Future: future}
}

func (a *MediaConnectStub) ListEntitlements(ctx workflow.Context, input *mediaconnect.ListEntitlementsInput) (*mediaconnect.ListEntitlementsOutput, error) {
	var output mediaconnect.ListEntitlementsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListEntitlements", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) ListEntitlementsAsync(ctx workflow.Context, input *mediaconnect.ListEntitlementsInput) *MediaconnectListEntitlementsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListEntitlements", input)
	return &MediaconnectListEntitlementsFuture{Future: future}
}

func (a *MediaConnectStub) ListFlows(ctx workflow.Context, input *mediaconnect.ListFlowsInput) (*mediaconnect.ListFlowsOutput, error) {
	var output mediaconnect.ListFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) ListFlowsAsync(ctx workflow.Context, input *mediaconnect.ListFlowsInput) *MediaconnectListFlowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListFlows", input)
	return &MediaconnectListFlowsFuture{Future: future}
}

func (a *MediaConnectStub) ListOfferings(ctx workflow.Context, input *mediaconnect.ListOfferingsInput) (*mediaconnect.ListOfferingsOutput, error) {
	var output mediaconnect.ListOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) ListOfferingsAsync(ctx workflow.Context, input *mediaconnect.ListOfferingsInput) *MediaconnectListOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListOfferings", input)
	return &MediaconnectListOfferingsFuture{Future: future}
}

func (a *MediaConnectStub) ListReservations(ctx workflow.Context, input *mediaconnect.ListReservationsInput) (*mediaconnect.ListReservationsOutput, error) {
	var output mediaconnect.ListReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) ListReservationsAsync(ctx workflow.Context, input *mediaconnect.ListReservationsInput) *MediaconnectListReservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListReservations", input)
	return &MediaconnectListReservationsFuture{Future: future}
}

func (a *MediaConnectStub) ListTagsForResource(ctx workflow.Context, input *mediaconnect.ListTagsForResourceInput) (*mediaconnect.ListTagsForResourceOutput, error) {
	var output mediaconnect.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) ListTagsForResourceAsync(ctx workflow.Context, input *mediaconnect.ListTagsForResourceInput) *MediaconnectListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListTagsForResource", input)
	return &MediaconnectListTagsForResourceFuture{Future: future}
}

func (a *MediaConnectStub) PurchaseOffering(ctx workflow.Context, input *mediaconnect.PurchaseOfferingInput) (*mediaconnect.PurchaseOfferingOutput, error) {
	var output mediaconnect.PurchaseOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.PurchaseOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) PurchaseOfferingAsync(ctx workflow.Context, input *mediaconnect.PurchaseOfferingInput) *MediaconnectPurchaseOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.PurchaseOffering", input)
	return &MediaconnectPurchaseOfferingFuture{Future: future}
}

func (a *MediaConnectStub) RemoveFlowOutput(ctx workflow.Context, input *mediaconnect.RemoveFlowOutputInput) (*mediaconnect.RemoveFlowOutputOutput, error) {
	var output mediaconnect.RemoveFlowOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RemoveFlowOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) RemoveFlowOutputAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowOutputInput) *MediaconnectRemoveFlowOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RemoveFlowOutput", input)
	return &MediaconnectRemoveFlowOutputFuture{Future: future}
}

func (a *MediaConnectStub) RemoveFlowSource(ctx workflow.Context, input *mediaconnect.RemoveFlowSourceInput) (*mediaconnect.RemoveFlowSourceOutput, error) {
	var output mediaconnect.RemoveFlowSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RemoveFlowSource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) RemoveFlowSourceAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowSourceInput) *MediaconnectRemoveFlowSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RemoveFlowSource", input)
	return &MediaconnectRemoveFlowSourceFuture{Future: future}
}

func (a *MediaConnectStub) RemoveFlowVpcInterface(ctx workflow.Context, input *mediaconnect.RemoveFlowVpcInterfaceInput) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error) {
	var output mediaconnect.RemoveFlowVpcInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RemoveFlowVpcInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) RemoveFlowVpcInterfaceAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowVpcInterfaceInput) *MediaconnectRemoveFlowVpcInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RemoveFlowVpcInterface", input)
	return &MediaconnectRemoveFlowVpcInterfaceFuture{Future: future}
}

func (a *MediaConnectStub) RevokeFlowEntitlement(ctx workflow.Context, input *mediaconnect.RevokeFlowEntitlementInput) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	var output mediaconnect.RevokeFlowEntitlementOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RevokeFlowEntitlement", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) RevokeFlowEntitlementAsync(ctx workflow.Context, input *mediaconnect.RevokeFlowEntitlementInput) *MediaconnectRevokeFlowEntitlementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RevokeFlowEntitlement", input)
	return &MediaconnectRevokeFlowEntitlementFuture{Future: future}
}

func (a *MediaConnectStub) StartFlow(ctx workflow.Context, input *mediaconnect.StartFlowInput) (*mediaconnect.StartFlowOutput, error) {
	var output mediaconnect.StartFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.StartFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) StartFlowAsync(ctx workflow.Context, input *mediaconnect.StartFlowInput) *MediaconnectStartFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.StartFlow", input)
	return &MediaconnectStartFlowFuture{Future: future}
}

func (a *MediaConnectStub) StopFlow(ctx workflow.Context, input *mediaconnect.StopFlowInput) (*mediaconnect.StopFlowOutput, error) {
	var output mediaconnect.StopFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.StopFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) StopFlowAsync(ctx workflow.Context, input *mediaconnect.StopFlowInput) *MediaconnectStopFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.StopFlow", input)
	return &MediaconnectStopFlowFuture{Future: future}
}

func (a *MediaConnectStub) TagResource(ctx workflow.Context, input *mediaconnect.TagResourceInput) (*mediaconnect.TagResourceOutput, error) {
	var output mediaconnect.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) TagResourceAsync(ctx workflow.Context, input *mediaconnect.TagResourceInput) *MediaconnectTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.TagResource", input)
	return &MediaconnectTagResourceFuture{Future: future}
}

func (a *MediaConnectStub) UntagResource(ctx workflow.Context, input *mediaconnect.UntagResourceInput) (*mediaconnect.UntagResourceOutput, error) {
	var output mediaconnect.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) UntagResourceAsync(ctx workflow.Context, input *mediaconnect.UntagResourceInput) *MediaconnectUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UntagResource", input)
	return &MediaconnectUntagResourceFuture{Future: future}
}

func (a *MediaConnectStub) UpdateFlow(ctx workflow.Context, input *mediaconnect.UpdateFlowInput) (*mediaconnect.UpdateFlowOutput, error) {
	var output mediaconnect.UpdateFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) UpdateFlowAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowInput) *MediaconnectUpdateFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlow", input)
	return &MediaconnectUpdateFlowFuture{Future: future}
}

func (a *MediaConnectStub) UpdateFlowEntitlement(ctx workflow.Context, input *mediaconnect.UpdateFlowEntitlementInput) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	var output mediaconnect.UpdateFlowEntitlementOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlowEntitlement", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) UpdateFlowEntitlementAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowEntitlementInput) *MediaconnectUpdateFlowEntitlementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlowEntitlement", input)
	return &MediaconnectUpdateFlowEntitlementFuture{Future: future}
}

func (a *MediaConnectStub) UpdateFlowOutput(ctx workflow.Context, input *mediaconnect.UpdateFlowOutputInput) (*mediaconnect.UpdateFlowOutputOutput, error) {
	var output mediaconnect.UpdateFlowOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlowOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) UpdateFlowOutputAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowOutputInput) *MediaconnectUpdateFlowOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlowOutput", input)
	return &MediaconnectUpdateFlowOutputFuture{Future: future}
}

func (a *MediaConnectStub) UpdateFlowSource(ctx workflow.Context, input *mediaconnect.UpdateFlowSourceInput) (*mediaconnect.UpdateFlowSourceOutput, error) {
	var output mediaconnect.UpdateFlowSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlowSource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) UpdateFlowSourceAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowSourceInput) *MediaconnectUpdateFlowSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlowSource", input)
	return &MediaconnectUpdateFlowSourceFuture{Future: future}
}
