// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/mediaconnect"
	"go.temporal.io/sdk/workflow"
)

type MediaConnectClient interface {
	AddFlowOutputs(ctx workflow.Context, input *mediaconnect.AddFlowOutputsInput) (*mediaconnect.AddFlowOutputsOutput, error)
	AddFlowOutputsAsync(ctx workflow.Context, input *mediaconnect.AddFlowOutputsInput) *MediaconnectAddFlowOutputsResult

	AddFlowSources(ctx workflow.Context, input *mediaconnect.AddFlowSourcesInput) (*mediaconnect.AddFlowSourcesOutput, error)
	AddFlowSourcesAsync(ctx workflow.Context, input *mediaconnect.AddFlowSourcesInput) *MediaconnectAddFlowSourcesResult

	AddFlowVpcInterfaces(ctx workflow.Context, input *mediaconnect.AddFlowVpcInterfacesInput) (*mediaconnect.AddFlowVpcInterfacesOutput, error)
	AddFlowVpcInterfacesAsync(ctx workflow.Context, input *mediaconnect.AddFlowVpcInterfacesInput) *MediaconnectAddFlowVpcInterfacesResult

	CreateFlow(ctx workflow.Context, input *mediaconnect.CreateFlowInput) (*mediaconnect.CreateFlowOutput, error)
	CreateFlowAsync(ctx workflow.Context, input *mediaconnect.CreateFlowInput) *MediaconnectCreateFlowResult

	DeleteFlow(ctx workflow.Context, input *mediaconnect.DeleteFlowInput) (*mediaconnect.DeleteFlowOutput, error)
	DeleteFlowAsync(ctx workflow.Context, input *mediaconnect.DeleteFlowInput) *MediaconnectDeleteFlowResult

	DescribeFlow(ctx workflow.Context, input *mediaconnect.DescribeFlowInput) (*mediaconnect.DescribeFlowOutput, error)
	DescribeFlowAsync(ctx workflow.Context, input *mediaconnect.DescribeFlowInput) *MediaconnectDescribeFlowResult

	DescribeOffering(ctx workflow.Context, input *mediaconnect.DescribeOfferingInput) (*mediaconnect.DescribeOfferingOutput, error)
	DescribeOfferingAsync(ctx workflow.Context, input *mediaconnect.DescribeOfferingInput) *MediaconnectDescribeOfferingResult

	DescribeReservation(ctx workflow.Context, input *mediaconnect.DescribeReservationInput) (*mediaconnect.DescribeReservationOutput, error)
	DescribeReservationAsync(ctx workflow.Context, input *mediaconnect.DescribeReservationInput) *MediaconnectDescribeReservationResult

	GrantFlowEntitlements(ctx workflow.Context, input *mediaconnect.GrantFlowEntitlementsInput) (*mediaconnect.GrantFlowEntitlementsOutput, error)
	GrantFlowEntitlementsAsync(ctx workflow.Context, input *mediaconnect.GrantFlowEntitlementsInput) *MediaconnectGrantFlowEntitlementsResult

	ListEntitlements(ctx workflow.Context, input *mediaconnect.ListEntitlementsInput) (*mediaconnect.ListEntitlementsOutput, error)
	ListEntitlementsAsync(ctx workflow.Context, input *mediaconnect.ListEntitlementsInput) *MediaconnectListEntitlementsResult

	ListFlows(ctx workflow.Context, input *mediaconnect.ListFlowsInput) (*mediaconnect.ListFlowsOutput, error)
	ListFlowsAsync(ctx workflow.Context, input *mediaconnect.ListFlowsInput) *MediaconnectListFlowsResult

	ListOfferings(ctx workflow.Context, input *mediaconnect.ListOfferingsInput) (*mediaconnect.ListOfferingsOutput, error)
	ListOfferingsAsync(ctx workflow.Context, input *mediaconnect.ListOfferingsInput) *MediaconnectListOfferingsResult

	ListReservations(ctx workflow.Context, input *mediaconnect.ListReservationsInput) (*mediaconnect.ListReservationsOutput, error)
	ListReservationsAsync(ctx workflow.Context, input *mediaconnect.ListReservationsInput) *MediaconnectListReservationsResult

	ListTagsForResource(ctx workflow.Context, input *mediaconnect.ListTagsForResourceInput) (*mediaconnect.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *mediaconnect.ListTagsForResourceInput) *MediaconnectListTagsForResourceResult

	PurchaseOffering(ctx workflow.Context, input *mediaconnect.PurchaseOfferingInput) (*mediaconnect.PurchaseOfferingOutput, error)
	PurchaseOfferingAsync(ctx workflow.Context, input *mediaconnect.PurchaseOfferingInput) *MediaconnectPurchaseOfferingResult

	RemoveFlowOutput(ctx workflow.Context, input *mediaconnect.RemoveFlowOutputInput) (*mediaconnect.RemoveFlowOutputOutput, error)
	RemoveFlowOutputAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowOutputInput) *MediaconnectRemoveFlowOutputResult

	RemoveFlowSource(ctx workflow.Context, input *mediaconnect.RemoveFlowSourceInput) (*mediaconnect.RemoveFlowSourceOutput, error)
	RemoveFlowSourceAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowSourceInput) *MediaconnectRemoveFlowSourceResult

	RemoveFlowVpcInterface(ctx workflow.Context, input *mediaconnect.RemoveFlowVpcInterfaceInput) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error)
	RemoveFlowVpcInterfaceAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowVpcInterfaceInput) *MediaconnectRemoveFlowVpcInterfaceResult

	RevokeFlowEntitlement(ctx workflow.Context, input *mediaconnect.RevokeFlowEntitlementInput) (*mediaconnect.RevokeFlowEntitlementOutput, error)
	RevokeFlowEntitlementAsync(ctx workflow.Context, input *mediaconnect.RevokeFlowEntitlementInput) *MediaconnectRevokeFlowEntitlementResult

	StartFlow(ctx workflow.Context, input *mediaconnect.StartFlowInput) (*mediaconnect.StartFlowOutput, error)
	StartFlowAsync(ctx workflow.Context, input *mediaconnect.StartFlowInput) *MediaconnectStartFlowResult

	StopFlow(ctx workflow.Context, input *mediaconnect.StopFlowInput) (*mediaconnect.StopFlowOutput, error)
	StopFlowAsync(ctx workflow.Context, input *mediaconnect.StopFlowInput) *MediaconnectStopFlowResult

	TagResource(ctx workflow.Context, input *mediaconnect.TagResourceInput) (*mediaconnect.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *mediaconnect.TagResourceInput) *MediaconnectTagResourceResult

	UntagResource(ctx workflow.Context, input *mediaconnect.UntagResourceInput) (*mediaconnect.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *mediaconnect.UntagResourceInput) *MediaconnectUntagResourceResult

	UpdateFlow(ctx workflow.Context, input *mediaconnect.UpdateFlowInput) (*mediaconnect.UpdateFlowOutput, error)
	UpdateFlowAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowInput) *MediaconnectUpdateFlowResult

	UpdateFlowEntitlement(ctx workflow.Context, input *mediaconnect.UpdateFlowEntitlementInput) (*mediaconnect.UpdateFlowEntitlementOutput, error)
	UpdateFlowEntitlementAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowEntitlementInput) *MediaconnectUpdateFlowEntitlementResult

	UpdateFlowOutput(ctx workflow.Context, input *mediaconnect.UpdateFlowOutputInput) (*mediaconnect.UpdateFlowOutputOutput, error)
	UpdateFlowOutputAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowOutputInput) *MediaconnectUpdateFlowOutputResult

	UpdateFlowSource(ctx workflow.Context, input *mediaconnect.UpdateFlowSourceInput) (*mediaconnect.UpdateFlowSourceOutput, error)
	UpdateFlowSourceAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowSourceInput) *MediaconnectUpdateFlowSourceResult
}

type MediaConnectStub struct{}

func NewMediaConnectStub() MediaConnectClient {
	return &MediaConnectStub{}
}


type MediaconnectAddFlowOutputsResult struct {
	Result workflow.Future
}

func (r *MediaconnectAddFlowOutputsResult) Get(ctx workflow.Context) (*mediaconnect.AddFlowOutputsOutput, error) {
	var output mediaconnect.AddFlowOutputsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectAddFlowSourcesResult struct {
	Result workflow.Future
}

func (r *MediaconnectAddFlowSourcesResult) Get(ctx workflow.Context) (*mediaconnect.AddFlowSourcesOutput, error) {
	var output mediaconnect.AddFlowSourcesOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectAddFlowVpcInterfacesResult struct {
	Result workflow.Future
}

func (r *MediaconnectAddFlowVpcInterfacesResult) Get(ctx workflow.Context) (*mediaconnect.AddFlowVpcInterfacesOutput, error) {
	var output mediaconnect.AddFlowVpcInterfacesOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectCreateFlowResult struct {
	Result workflow.Future
}

func (r *MediaconnectCreateFlowResult) Get(ctx workflow.Context) (*mediaconnect.CreateFlowOutput, error) {
	var output mediaconnect.CreateFlowOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectDeleteFlowResult struct {
	Result workflow.Future
}

func (r *MediaconnectDeleteFlowResult) Get(ctx workflow.Context) (*mediaconnect.DeleteFlowOutput, error) {
	var output mediaconnect.DeleteFlowOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectDescribeFlowResult struct {
	Result workflow.Future
}

func (r *MediaconnectDescribeFlowResult) Get(ctx workflow.Context) (*mediaconnect.DescribeFlowOutput, error) {
	var output mediaconnect.DescribeFlowOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectDescribeOfferingResult struct {
	Result workflow.Future
}

func (r *MediaconnectDescribeOfferingResult) Get(ctx workflow.Context) (*mediaconnect.DescribeOfferingOutput, error) {
	var output mediaconnect.DescribeOfferingOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectDescribeReservationResult struct {
	Result workflow.Future
}

func (r *MediaconnectDescribeReservationResult) Get(ctx workflow.Context) (*mediaconnect.DescribeReservationOutput, error) {
	var output mediaconnect.DescribeReservationOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectGrantFlowEntitlementsResult struct {
	Result workflow.Future
}

func (r *MediaconnectGrantFlowEntitlementsResult) Get(ctx workflow.Context) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	var output mediaconnect.GrantFlowEntitlementsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectListEntitlementsResult struct {
	Result workflow.Future
}

func (r *MediaconnectListEntitlementsResult) Get(ctx workflow.Context) (*mediaconnect.ListEntitlementsOutput, error) {
	var output mediaconnect.ListEntitlementsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectListFlowsResult struct {
	Result workflow.Future
}

func (r *MediaconnectListFlowsResult) Get(ctx workflow.Context) (*mediaconnect.ListFlowsOutput, error) {
	var output mediaconnect.ListFlowsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectListOfferingsResult struct {
	Result workflow.Future
}

func (r *MediaconnectListOfferingsResult) Get(ctx workflow.Context) (*mediaconnect.ListOfferingsOutput, error) {
	var output mediaconnect.ListOfferingsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectListReservationsResult struct {
	Result workflow.Future
}

func (r *MediaconnectListReservationsResult) Get(ctx workflow.Context) (*mediaconnect.ListReservationsOutput, error) {
	var output mediaconnect.ListReservationsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectListTagsForResourceResult struct {
	Result workflow.Future
}

func (r *MediaconnectListTagsForResourceResult) Get(ctx workflow.Context) (*mediaconnect.ListTagsForResourceOutput, error) {
	var output mediaconnect.ListTagsForResourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectPurchaseOfferingResult struct {
	Result workflow.Future
}

func (r *MediaconnectPurchaseOfferingResult) Get(ctx workflow.Context) (*mediaconnect.PurchaseOfferingOutput, error) {
	var output mediaconnect.PurchaseOfferingOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectRemoveFlowOutputResult struct {
	Result workflow.Future
}

func (r *MediaconnectRemoveFlowOutputResult) Get(ctx workflow.Context) (*mediaconnect.RemoveFlowOutputOutput, error) {
	var output mediaconnect.RemoveFlowOutputOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectRemoveFlowSourceResult struct {
	Result workflow.Future
}

func (r *MediaconnectRemoveFlowSourceResult) Get(ctx workflow.Context) (*mediaconnect.RemoveFlowSourceOutput, error) {
	var output mediaconnect.RemoveFlowSourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectRemoveFlowVpcInterfaceResult struct {
	Result workflow.Future
}

func (r *MediaconnectRemoveFlowVpcInterfaceResult) Get(ctx workflow.Context) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error) {
	var output mediaconnect.RemoveFlowVpcInterfaceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectRevokeFlowEntitlementResult struct {
	Result workflow.Future
}

func (r *MediaconnectRevokeFlowEntitlementResult) Get(ctx workflow.Context) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	var output mediaconnect.RevokeFlowEntitlementOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectStartFlowResult struct {
	Result workflow.Future
}

func (r *MediaconnectStartFlowResult) Get(ctx workflow.Context) (*mediaconnect.StartFlowOutput, error) {
	var output mediaconnect.StartFlowOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectStopFlowResult struct {
	Result workflow.Future
}

func (r *MediaconnectStopFlowResult) Get(ctx workflow.Context) (*mediaconnect.StopFlowOutput, error) {
	var output mediaconnect.StopFlowOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectTagResourceResult struct {
	Result workflow.Future
}

func (r *MediaconnectTagResourceResult) Get(ctx workflow.Context) (*mediaconnect.TagResourceOutput, error) {
	var output mediaconnect.TagResourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectUntagResourceResult struct {
	Result workflow.Future
}

func (r *MediaconnectUntagResourceResult) Get(ctx workflow.Context) (*mediaconnect.UntagResourceOutput, error) {
	var output mediaconnect.UntagResourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectUpdateFlowResult struct {
	Result workflow.Future
}

func (r *MediaconnectUpdateFlowResult) Get(ctx workflow.Context) (*mediaconnect.UpdateFlowOutput, error) {
	var output mediaconnect.UpdateFlowOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectUpdateFlowEntitlementResult struct {
	Result workflow.Future
}

func (r *MediaconnectUpdateFlowEntitlementResult) Get(ctx workflow.Context) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	var output mediaconnect.UpdateFlowEntitlementOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectUpdateFlowOutputResult struct {
	Result workflow.Future
}

func (r *MediaconnectUpdateFlowOutputResult) Get(ctx workflow.Context) (*mediaconnect.UpdateFlowOutputOutput, error) {
	var output mediaconnect.UpdateFlowOutputOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type MediaconnectUpdateFlowSourceResult struct {
	Result workflow.Future
}

func (r *MediaconnectUpdateFlowSourceResult) Get(ctx workflow.Context) (*mediaconnect.UpdateFlowSourceOutput, error) {
	var output mediaconnect.UpdateFlowSourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) AddFlowOutputs(ctx workflow.Context, input *mediaconnect.AddFlowOutputsInput) (*mediaconnect.AddFlowOutputsOutput, error) {
	var output mediaconnect.AddFlowOutputsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.AddFlowOutputs", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) AddFlowOutputsAsync(ctx workflow.Context, input *mediaconnect.AddFlowOutputsInput) *MediaconnectAddFlowOutputsResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.AddFlowOutputs", input)
	return &MediaconnectAddFlowOutputsResult{Result: future}
}

func (a *MediaConnectStub) AddFlowSources(ctx workflow.Context, input *mediaconnect.AddFlowSourcesInput) (*mediaconnect.AddFlowSourcesOutput, error) {
	var output mediaconnect.AddFlowSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.AddFlowSources", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) AddFlowSourcesAsync(ctx workflow.Context, input *mediaconnect.AddFlowSourcesInput) *MediaconnectAddFlowSourcesResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.AddFlowSources", input)
	return &MediaconnectAddFlowSourcesResult{Result: future}
}

func (a *MediaConnectStub) AddFlowVpcInterfaces(ctx workflow.Context, input *mediaconnect.AddFlowVpcInterfacesInput) (*mediaconnect.AddFlowVpcInterfacesOutput, error) {
	var output mediaconnect.AddFlowVpcInterfacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.AddFlowVpcInterfaces", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) AddFlowVpcInterfacesAsync(ctx workflow.Context, input *mediaconnect.AddFlowVpcInterfacesInput) *MediaconnectAddFlowVpcInterfacesResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.AddFlowVpcInterfaces", input)
	return &MediaconnectAddFlowVpcInterfacesResult{Result: future}
}

func (a *MediaConnectStub) CreateFlow(ctx workflow.Context, input *mediaconnect.CreateFlowInput) (*mediaconnect.CreateFlowOutput, error) {
	var output mediaconnect.CreateFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.CreateFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) CreateFlowAsync(ctx workflow.Context, input *mediaconnect.CreateFlowInput) *MediaconnectCreateFlowResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.CreateFlow", input)
	return &MediaconnectCreateFlowResult{Result: future}
}

func (a *MediaConnectStub) DeleteFlow(ctx workflow.Context, input *mediaconnect.DeleteFlowInput) (*mediaconnect.DeleteFlowOutput, error) {
	var output mediaconnect.DeleteFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DeleteFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) DeleteFlowAsync(ctx workflow.Context, input *mediaconnect.DeleteFlowInput) *MediaconnectDeleteFlowResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DeleteFlow", input)
	return &MediaconnectDeleteFlowResult{Result: future}
}

func (a *MediaConnectStub) DescribeFlow(ctx workflow.Context, input *mediaconnect.DescribeFlowInput) (*mediaconnect.DescribeFlowOutput, error) {
	var output mediaconnect.DescribeFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DescribeFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) DescribeFlowAsync(ctx workflow.Context, input *mediaconnect.DescribeFlowInput) *MediaconnectDescribeFlowResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DescribeFlow", input)
	return &MediaconnectDescribeFlowResult{Result: future}
}

func (a *MediaConnectStub) DescribeOffering(ctx workflow.Context, input *mediaconnect.DescribeOfferingInput) (*mediaconnect.DescribeOfferingOutput, error) {
	var output mediaconnect.DescribeOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DescribeOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) DescribeOfferingAsync(ctx workflow.Context, input *mediaconnect.DescribeOfferingInput) *MediaconnectDescribeOfferingResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DescribeOffering", input)
	return &MediaconnectDescribeOfferingResult{Result: future}
}

func (a *MediaConnectStub) DescribeReservation(ctx workflow.Context, input *mediaconnect.DescribeReservationInput) (*mediaconnect.DescribeReservationOutput, error) {
	var output mediaconnect.DescribeReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DescribeReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) DescribeReservationAsync(ctx workflow.Context, input *mediaconnect.DescribeReservationInput) *MediaconnectDescribeReservationResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.DescribeReservation", input)
	return &MediaconnectDescribeReservationResult{Result: future}
}

func (a *MediaConnectStub) GrantFlowEntitlements(ctx workflow.Context, input *mediaconnect.GrantFlowEntitlementsInput) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	var output mediaconnect.GrantFlowEntitlementsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.GrantFlowEntitlements", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) GrantFlowEntitlementsAsync(ctx workflow.Context, input *mediaconnect.GrantFlowEntitlementsInput) *MediaconnectGrantFlowEntitlementsResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.GrantFlowEntitlements", input)
	return &MediaconnectGrantFlowEntitlementsResult{Result: future}
}

func (a *MediaConnectStub) ListEntitlements(ctx workflow.Context, input *mediaconnect.ListEntitlementsInput) (*mediaconnect.ListEntitlementsOutput, error) {
	var output mediaconnect.ListEntitlementsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListEntitlements", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) ListEntitlementsAsync(ctx workflow.Context, input *mediaconnect.ListEntitlementsInput) *MediaconnectListEntitlementsResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListEntitlements", input)
	return &MediaconnectListEntitlementsResult{Result: future}
}

func (a *MediaConnectStub) ListFlows(ctx workflow.Context, input *mediaconnect.ListFlowsInput) (*mediaconnect.ListFlowsOutput, error) {
	var output mediaconnect.ListFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) ListFlowsAsync(ctx workflow.Context, input *mediaconnect.ListFlowsInput) *MediaconnectListFlowsResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListFlows", input)
	return &MediaconnectListFlowsResult{Result: future}
}

func (a *MediaConnectStub) ListOfferings(ctx workflow.Context, input *mediaconnect.ListOfferingsInput) (*mediaconnect.ListOfferingsOutput, error) {
	var output mediaconnect.ListOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) ListOfferingsAsync(ctx workflow.Context, input *mediaconnect.ListOfferingsInput) *MediaconnectListOfferingsResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListOfferings", input)
	return &MediaconnectListOfferingsResult{Result: future}
}

func (a *MediaConnectStub) ListReservations(ctx workflow.Context, input *mediaconnect.ListReservationsInput) (*mediaconnect.ListReservationsOutput, error) {
	var output mediaconnect.ListReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) ListReservationsAsync(ctx workflow.Context, input *mediaconnect.ListReservationsInput) *MediaconnectListReservationsResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListReservations", input)
	return &MediaconnectListReservationsResult{Result: future}
}

func (a *MediaConnectStub) ListTagsForResource(ctx workflow.Context, input *mediaconnect.ListTagsForResourceInput) (*mediaconnect.ListTagsForResourceOutput, error) {
	var output mediaconnect.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) ListTagsForResourceAsync(ctx workflow.Context, input *mediaconnect.ListTagsForResourceInput) *MediaconnectListTagsForResourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.ListTagsForResource", input)
	return &MediaconnectListTagsForResourceResult{Result: future}
}

func (a *MediaConnectStub) PurchaseOffering(ctx workflow.Context, input *mediaconnect.PurchaseOfferingInput) (*mediaconnect.PurchaseOfferingOutput, error) {
	var output mediaconnect.PurchaseOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.PurchaseOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) PurchaseOfferingAsync(ctx workflow.Context, input *mediaconnect.PurchaseOfferingInput) *MediaconnectPurchaseOfferingResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.PurchaseOffering", input)
	return &MediaconnectPurchaseOfferingResult{Result: future}
}

func (a *MediaConnectStub) RemoveFlowOutput(ctx workflow.Context, input *mediaconnect.RemoveFlowOutputInput) (*mediaconnect.RemoveFlowOutputOutput, error) {
	var output mediaconnect.RemoveFlowOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RemoveFlowOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) RemoveFlowOutputAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowOutputInput) *MediaconnectRemoveFlowOutputResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RemoveFlowOutput", input)
	return &MediaconnectRemoveFlowOutputResult{Result: future}
}

func (a *MediaConnectStub) RemoveFlowSource(ctx workflow.Context, input *mediaconnect.RemoveFlowSourceInput) (*mediaconnect.RemoveFlowSourceOutput, error) {
	var output mediaconnect.RemoveFlowSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RemoveFlowSource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) RemoveFlowSourceAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowSourceInput) *MediaconnectRemoveFlowSourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RemoveFlowSource", input)
	return &MediaconnectRemoveFlowSourceResult{Result: future}
}

func (a *MediaConnectStub) RemoveFlowVpcInterface(ctx workflow.Context, input *mediaconnect.RemoveFlowVpcInterfaceInput) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error) {
	var output mediaconnect.RemoveFlowVpcInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RemoveFlowVpcInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) RemoveFlowVpcInterfaceAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowVpcInterfaceInput) *MediaconnectRemoveFlowVpcInterfaceResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RemoveFlowVpcInterface", input)
	return &MediaconnectRemoveFlowVpcInterfaceResult{Result: future}
}

func (a *MediaConnectStub) RevokeFlowEntitlement(ctx workflow.Context, input *mediaconnect.RevokeFlowEntitlementInput) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	var output mediaconnect.RevokeFlowEntitlementOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RevokeFlowEntitlement", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) RevokeFlowEntitlementAsync(ctx workflow.Context, input *mediaconnect.RevokeFlowEntitlementInput) *MediaconnectRevokeFlowEntitlementResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.RevokeFlowEntitlement", input)
	return &MediaconnectRevokeFlowEntitlementResult{Result: future}
}

func (a *MediaConnectStub) StartFlow(ctx workflow.Context, input *mediaconnect.StartFlowInput) (*mediaconnect.StartFlowOutput, error) {
	var output mediaconnect.StartFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.StartFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) StartFlowAsync(ctx workflow.Context, input *mediaconnect.StartFlowInput) *MediaconnectStartFlowResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.StartFlow", input)
	return &MediaconnectStartFlowResult{Result: future}
}

func (a *MediaConnectStub) StopFlow(ctx workflow.Context, input *mediaconnect.StopFlowInput) (*mediaconnect.StopFlowOutput, error) {
	var output mediaconnect.StopFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.StopFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) StopFlowAsync(ctx workflow.Context, input *mediaconnect.StopFlowInput) *MediaconnectStopFlowResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.StopFlow", input)
	return &MediaconnectStopFlowResult{Result: future}
}

func (a *MediaConnectStub) TagResource(ctx workflow.Context, input *mediaconnect.TagResourceInput) (*mediaconnect.TagResourceOutput, error) {
	var output mediaconnect.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) TagResourceAsync(ctx workflow.Context, input *mediaconnect.TagResourceInput) *MediaconnectTagResourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.TagResource", input)
	return &MediaconnectTagResourceResult{Result: future}
}

func (a *MediaConnectStub) UntagResource(ctx workflow.Context, input *mediaconnect.UntagResourceInput) (*mediaconnect.UntagResourceOutput, error) {
	var output mediaconnect.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) UntagResourceAsync(ctx workflow.Context, input *mediaconnect.UntagResourceInput) *MediaconnectUntagResourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UntagResource", input)
	return &MediaconnectUntagResourceResult{Result: future}
}

func (a *MediaConnectStub) UpdateFlow(ctx workflow.Context, input *mediaconnect.UpdateFlowInput) (*mediaconnect.UpdateFlowOutput, error) {
	var output mediaconnect.UpdateFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) UpdateFlowAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowInput) *MediaconnectUpdateFlowResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlow", input)
	return &MediaconnectUpdateFlowResult{Result: future}
}

func (a *MediaConnectStub) UpdateFlowEntitlement(ctx workflow.Context, input *mediaconnect.UpdateFlowEntitlementInput) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	var output mediaconnect.UpdateFlowEntitlementOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlowEntitlement", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) UpdateFlowEntitlementAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowEntitlementInput) *MediaconnectUpdateFlowEntitlementResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlowEntitlement", input)
	return &MediaconnectUpdateFlowEntitlementResult{Result: future}
}

func (a *MediaConnectStub) UpdateFlowOutput(ctx workflow.Context, input *mediaconnect.UpdateFlowOutputInput) (*mediaconnect.UpdateFlowOutputOutput, error) {
	var output mediaconnect.UpdateFlowOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlowOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) UpdateFlowOutputAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowOutputInput) *MediaconnectUpdateFlowOutputResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlowOutput", input)
	return &MediaconnectUpdateFlowOutputResult{Result: future}
}

func (a *MediaConnectStub) UpdateFlowSource(ctx workflow.Context, input *mediaconnect.UpdateFlowSourceInput) (*mediaconnect.UpdateFlowSourceOutput, error) {
	var output mediaconnect.UpdateFlowSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlowSource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConnectStub) UpdateFlowSourceAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowSourceInput) *MediaconnectUpdateFlowSourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconnect.UpdateFlowSource", input)
	return &MediaconnectUpdateFlowSourceResult{Result: future}
}
