// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/mq"
	"go.temporal.io/sdk/workflow"
)

type MQClient interface {
	CreateBroker(ctx workflow.Context, input *mq.CreateBrokerRequest) (*mq.CreateBrokerResponse, error)
	CreateBrokerAsync(ctx workflow.Context, input *mq.CreateBrokerRequest) *MQCreateBrokerFuture

	CreateConfiguration(ctx workflow.Context, input *mq.CreateConfigurationRequest) (*mq.CreateConfigurationResponse, error)
	CreateConfigurationAsync(ctx workflow.Context, input *mq.CreateConfigurationRequest) *MQCreateConfigurationFuture

	CreateTags(ctx workflow.Context, input *mq.CreateTagsInput) (*mq.CreateTagsOutput, error)
	CreateTagsAsync(ctx workflow.Context, input *mq.CreateTagsInput) *MQCreateTagsFuture

	CreateUser(ctx workflow.Context, input *mq.CreateUserRequest) (*mq.CreateUserOutput, error)
	CreateUserAsync(ctx workflow.Context, input *mq.CreateUserRequest) *MQCreateUserFuture

	DeleteBroker(ctx workflow.Context, input *mq.DeleteBrokerInput) (*mq.DeleteBrokerResponse, error)
	DeleteBrokerAsync(ctx workflow.Context, input *mq.DeleteBrokerInput) *MQDeleteBrokerFuture

	DeleteTags(ctx workflow.Context, input *mq.DeleteTagsInput) (*mq.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *mq.DeleteTagsInput) *MQDeleteTagsFuture

	DeleteUser(ctx workflow.Context, input *mq.DeleteUserInput) (*mq.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *mq.DeleteUserInput) *MQDeleteUserFuture

	DescribeBroker(ctx workflow.Context, input *mq.DescribeBrokerInput) (*mq.DescribeBrokerResponse, error)
	DescribeBrokerAsync(ctx workflow.Context, input *mq.DescribeBrokerInput) *MQDescribeBrokerFuture

	DescribeBrokerEngineTypes(ctx workflow.Context, input *mq.DescribeBrokerEngineTypesInput) (*mq.DescribeBrokerEngineTypesOutput, error)
	DescribeBrokerEngineTypesAsync(ctx workflow.Context, input *mq.DescribeBrokerEngineTypesInput) *MQDescribeBrokerEngineTypesFuture

	DescribeBrokerInstanceOptions(ctx workflow.Context, input *mq.DescribeBrokerInstanceOptionsInput) (*mq.DescribeBrokerInstanceOptionsOutput, error)
	DescribeBrokerInstanceOptionsAsync(ctx workflow.Context, input *mq.DescribeBrokerInstanceOptionsInput) *MQDescribeBrokerInstanceOptionsFuture

	DescribeConfiguration(ctx workflow.Context, input *mq.DescribeConfigurationInput) (*mq.DescribeConfigurationOutput, error)
	DescribeConfigurationAsync(ctx workflow.Context, input *mq.DescribeConfigurationInput) *MQDescribeConfigurationFuture

	DescribeConfigurationRevision(ctx workflow.Context, input *mq.DescribeConfigurationRevisionInput) (*mq.DescribeConfigurationRevisionResponse, error)
	DescribeConfigurationRevisionAsync(ctx workflow.Context, input *mq.DescribeConfigurationRevisionInput) *MQDescribeConfigurationRevisionFuture

	DescribeUser(ctx workflow.Context, input *mq.DescribeUserInput) (*mq.DescribeUserResponse, error)
	DescribeUserAsync(ctx workflow.Context, input *mq.DescribeUserInput) *MQDescribeUserFuture

	ListBrokers(ctx workflow.Context, input *mq.ListBrokersInput) (*mq.ListBrokersResponse, error)
	ListBrokersAsync(ctx workflow.Context, input *mq.ListBrokersInput) *MQListBrokersFuture

	ListConfigurationRevisions(ctx workflow.Context, input *mq.ListConfigurationRevisionsInput) (*mq.ListConfigurationRevisionsResponse, error)
	ListConfigurationRevisionsAsync(ctx workflow.Context, input *mq.ListConfigurationRevisionsInput) *MQListConfigurationRevisionsFuture

	ListConfigurations(ctx workflow.Context, input *mq.ListConfigurationsInput) (*mq.ListConfigurationsResponse, error)
	ListConfigurationsAsync(ctx workflow.Context, input *mq.ListConfigurationsInput) *MQListConfigurationsFuture

	ListTags(ctx workflow.Context, input *mq.ListTagsInput) (*mq.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *mq.ListTagsInput) *MQListTagsFuture

	ListUsers(ctx workflow.Context, input *mq.ListUsersInput) (*mq.ListUsersResponse, error)
	ListUsersAsync(ctx workflow.Context, input *mq.ListUsersInput) *MQListUsersFuture

	RebootBroker(ctx workflow.Context, input *mq.RebootBrokerInput) (*mq.RebootBrokerOutput, error)
	RebootBrokerAsync(ctx workflow.Context, input *mq.RebootBrokerInput) *MQRebootBrokerFuture

	UpdateBroker(ctx workflow.Context, input *mq.UpdateBrokerRequest) (*mq.UpdateBrokerResponse, error)
	UpdateBrokerAsync(ctx workflow.Context, input *mq.UpdateBrokerRequest) *MQUpdateBrokerFuture

	UpdateConfiguration(ctx workflow.Context, input *mq.UpdateConfigurationRequest) (*mq.UpdateConfigurationResponse, error)
	UpdateConfigurationAsync(ctx workflow.Context, input *mq.UpdateConfigurationRequest) *MQUpdateConfigurationFuture

	UpdateUser(ctx workflow.Context, input *mq.UpdateUserRequest) (*mq.UpdateUserOutput, error)
	UpdateUserAsync(ctx workflow.Context, input *mq.UpdateUserRequest) *MQUpdateUserFuture
}

type MQStub struct{}

func NewMQStub() MQClient {
	return &MQStub{}
}

type MQCreateBrokerFuture struct {
	Future workflow.Future
}

func (r *MQCreateBrokerFuture) Get(ctx workflow.Context) (*mq.CreateBrokerResponse, error) {
	var output mq.CreateBrokerResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQCreateConfigurationFuture struct {
	Future workflow.Future
}

func (r *MQCreateConfigurationFuture) Get(ctx workflow.Context) (*mq.CreateConfigurationResponse, error) {
	var output mq.CreateConfigurationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQCreateTagsFuture struct {
	Future workflow.Future
}

func (r *MQCreateTagsFuture) Get(ctx workflow.Context) (*mq.CreateTagsOutput, error) {
	var output mq.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQCreateUserFuture struct {
	Future workflow.Future
}

func (r *MQCreateUserFuture) Get(ctx workflow.Context) (*mq.CreateUserOutput, error) {
	var output mq.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQDeleteBrokerFuture struct {
	Future workflow.Future
}

func (r *MQDeleteBrokerFuture) Get(ctx workflow.Context) (*mq.DeleteBrokerResponse, error) {
	var output mq.DeleteBrokerResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQDeleteTagsFuture struct {
	Future workflow.Future
}

func (r *MQDeleteTagsFuture) Get(ctx workflow.Context) (*mq.DeleteTagsOutput, error) {
	var output mq.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQDeleteUserFuture struct {
	Future workflow.Future
}

func (r *MQDeleteUserFuture) Get(ctx workflow.Context) (*mq.DeleteUserOutput, error) {
	var output mq.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQDescribeBrokerFuture struct {
	Future workflow.Future
}

func (r *MQDescribeBrokerFuture) Get(ctx workflow.Context) (*mq.DescribeBrokerResponse, error) {
	var output mq.DescribeBrokerResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQDescribeBrokerEngineTypesFuture struct {
	Future workflow.Future
}

func (r *MQDescribeBrokerEngineTypesFuture) Get(ctx workflow.Context) (*mq.DescribeBrokerEngineTypesOutput, error) {
	var output mq.DescribeBrokerEngineTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQDescribeBrokerInstanceOptionsFuture struct {
	Future workflow.Future
}

func (r *MQDescribeBrokerInstanceOptionsFuture) Get(ctx workflow.Context) (*mq.DescribeBrokerInstanceOptionsOutput, error) {
	var output mq.DescribeBrokerInstanceOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQDescribeConfigurationFuture struct {
	Future workflow.Future
}

func (r *MQDescribeConfigurationFuture) Get(ctx workflow.Context) (*mq.DescribeConfigurationOutput, error) {
	var output mq.DescribeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQDescribeConfigurationRevisionFuture struct {
	Future workflow.Future
}

func (r *MQDescribeConfigurationRevisionFuture) Get(ctx workflow.Context) (*mq.DescribeConfigurationRevisionResponse, error) {
	var output mq.DescribeConfigurationRevisionResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQDescribeUserFuture struct {
	Future workflow.Future
}

func (r *MQDescribeUserFuture) Get(ctx workflow.Context) (*mq.DescribeUserResponse, error) {
	var output mq.DescribeUserResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQListBrokersFuture struct {
	Future workflow.Future
}

func (r *MQListBrokersFuture) Get(ctx workflow.Context) (*mq.ListBrokersResponse, error) {
	var output mq.ListBrokersResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQListConfigurationRevisionsFuture struct {
	Future workflow.Future
}

func (r *MQListConfigurationRevisionsFuture) Get(ctx workflow.Context) (*mq.ListConfigurationRevisionsResponse, error) {
	var output mq.ListConfigurationRevisionsResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQListConfigurationsFuture struct {
	Future workflow.Future
}

func (r *MQListConfigurationsFuture) Get(ctx workflow.Context) (*mq.ListConfigurationsResponse, error) {
	var output mq.ListConfigurationsResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQListTagsFuture struct {
	Future workflow.Future
}

func (r *MQListTagsFuture) Get(ctx workflow.Context) (*mq.ListTagsOutput, error) {
	var output mq.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQListUsersFuture struct {
	Future workflow.Future
}

func (r *MQListUsersFuture) Get(ctx workflow.Context) (*mq.ListUsersResponse, error) {
	var output mq.ListUsersResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQRebootBrokerFuture struct {
	Future workflow.Future
}

func (r *MQRebootBrokerFuture) Get(ctx workflow.Context) (*mq.RebootBrokerOutput, error) {
	var output mq.RebootBrokerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQUpdateBrokerFuture struct {
	Future workflow.Future
}

func (r *MQUpdateBrokerFuture) Get(ctx workflow.Context) (*mq.UpdateBrokerResponse, error) {
	var output mq.UpdateBrokerResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQUpdateConfigurationFuture struct {
	Future workflow.Future
}

func (r *MQUpdateConfigurationFuture) Get(ctx workflow.Context) (*mq.UpdateConfigurationResponse, error) {
	var output mq.UpdateConfigurationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MQUpdateUserFuture struct {
	Future workflow.Future
}

func (r *MQUpdateUserFuture) Get(ctx workflow.Context) (*mq.UpdateUserOutput, error) {
	var output mq.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MQStub) CreateBroker(ctx workflow.Context, input *mq.CreateBrokerRequest) (*mq.CreateBrokerResponse, error) {
	var output mq.CreateBrokerResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.CreateBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) CreateBrokerAsync(ctx workflow.Context, input *mq.CreateBrokerRequest) *MQCreateBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.CreateBroker", input)
	return &MQCreateBrokerFuture{Future: future}
}

func (a *MQStub) CreateConfiguration(ctx workflow.Context, input *mq.CreateConfigurationRequest) (*mq.CreateConfigurationResponse, error) {
	var output mq.CreateConfigurationResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.CreateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) CreateConfigurationAsync(ctx workflow.Context, input *mq.CreateConfigurationRequest) *MQCreateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.CreateConfiguration", input)
	return &MQCreateConfigurationFuture{Future: future}
}

func (a *MQStub) CreateTags(ctx workflow.Context, input *mq.CreateTagsInput) (*mq.CreateTagsOutput, error) {
	var output mq.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) CreateTagsAsync(ctx workflow.Context, input *mq.CreateTagsInput) *MQCreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.CreateTags", input)
	return &MQCreateTagsFuture{Future: future}
}

func (a *MQStub) CreateUser(ctx workflow.Context, input *mq.CreateUserRequest) (*mq.CreateUserOutput, error) {
	var output mq.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) CreateUserAsync(ctx workflow.Context, input *mq.CreateUserRequest) *MQCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.CreateUser", input)
	return &MQCreateUserFuture{Future: future}
}

func (a *MQStub) DeleteBroker(ctx workflow.Context, input *mq.DeleteBrokerInput) (*mq.DeleteBrokerResponse, error) {
	var output mq.DeleteBrokerResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.DeleteBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DeleteBrokerAsync(ctx workflow.Context, input *mq.DeleteBrokerInput) *MQDeleteBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DeleteBroker", input)
	return &MQDeleteBrokerFuture{Future: future}
}

func (a *MQStub) DeleteTags(ctx workflow.Context, input *mq.DeleteTagsInput) (*mq.DeleteTagsOutput, error) {
	var output mq.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DeleteTagsAsync(ctx workflow.Context, input *mq.DeleteTagsInput) *MQDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DeleteTags", input)
	return &MQDeleteTagsFuture{Future: future}
}

func (a *MQStub) DeleteUser(ctx workflow.Context, input *mq.DeleteUserInput) (*mq.DeleteUserOutput, error) {
	var output mq.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DeleteUserAsync(ctx workflow.Context, input *mq.DeleteUserInput) *MQDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DeleteUser", input)
	return &MQDeleteUserFuture{Future: future}
}

func (a *MQStub) DescribeBroker(ctx workflow.Context, input *mq.DescribeBrokerInput) (*mq.DescribeBrokerResponse, error) {
	var output mq.DescribeBrokerResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.DescribeBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DescribeBrokerAsync(ctx workflow.Context, input *mq.DescribeBrokerInput) *MQDescribeBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DescribeBroker", input)
	return &MQDescribeBrokerFuture{Future: future}
}

func (a *MQStub) DescribeBrokerEngineTypes(ctx workflow.Context, input *mq.DescribeBrokerEngineTypesInput) (*mq.DescribeBrokerEngineTypesOutput, error) {
	var output mq.DescribeBrokerEngineTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.DescribeBrokerEngineTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DescribeBrokerEngineTypesAsync(ctx workflow.Context, input *mq.DescribeBrokerEngineTypesInput) *MQDescribeBrokerEngineTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DescribeBrokerEngineTypes", input)
	return &MQDescribeBrokerEngineTypesFuture{Future: future}
}

func (a *MQStub) DescribeBrokerInstanceOptions(ctx workflow.Context, input *mq.DescribeBrokerInstanceOptionsInput) (*mq.DescribeBrokerInstanceOptionsOutput, error) {
	var output mq.DescribeBrokerInstanceOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.DescribeBrokerInstanceOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DescribeBrokerInstanceOptionsAsync(ctx workflow.Context, input *mq.DescribeBrokerInstanceOptionsInput) *MQDescribeBrokerInstanceOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DescribeBrokerInstanceOptions", input)
	return &MQDescribeBrokerInstanceOptionsFuture{Future: future}
}

func (a *MQStub) DescribeConfiguration(ctx workflow.Context, input *mq.DescribeConfigurationInput) (*mq.DescribeConfigurationOutput, error) {
	var output mq.DescribeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.DescribeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DescribeConfigurationAsync(ctx workflow.Context, input *mq.DescribeConfigurationInput) *MQDescribeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DescribeConfiguration", input)
	return &MQDescribeConfigurationFuture{Future: future}
}

func (a *MQStub) DescribeConfigurationRevision(ctx workflow.Context, input *mq.DescribeConfigurationRevisionInput) (*mq.DescribeConfigurationRevisionResponse, error) {
	var output mq.DescribeConfigurationRevisionResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.DescribeConfigurationRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DescribeConfigurationRevisionAsync(ctx workflow.Context, input *mq.DescribeConfigurationRevisionInput) *MQDescribeConfigurationRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DescribeConfigurationRevision", input)
	return &MQDescribeConfigurationRevisionFuture{Future: future}
}

func (a *MQStub) DescribeUser(ctx workflow.Context, input *mq.DescribeUserInput) (*mq.DescribeUserResponse, error) {
	var output mq.DescribeUserResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.DescribeUser", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DescribeUserAsync(ctx workflow.Context, input *mq.DescribeUserInput) *MQDescribeUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DescribeUser", input)
	return &MQDescribeUserFuture{Future: future}
}

func (a *MQStub) ListBrokers(ctx workflow.Context, input *mq.ListBrokersInput) (*mq.ListBrokersResponse, error) {
	var output mq.ListBrokersResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.ListBrokers", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) ListBrokersAsync(ctx workflow.Context, input *mq.ListBrokersInput) *MQListBrokersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.ListBrokers", input)
	return &MQListBrokersFuture{Future: future}
}

func (a *MQStub) ListConfigurationRevisions(ctx workflow.Context, input *mq.ListConfigurationRevisionsInput) (*mq.ListConfigurationRevisionsResponse, error) {
	var output mq.ListConfigurationRevisionsResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.ListConfigurationRevisions", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) ListConfigurationRevisionsAsync(ctx workflow.Context, input *mq.ListConfigurationRevisionsInput) *MQListConfigurationRevisionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.ListConfigurationRevisions", input)
	return &MQListConfigurationRevisionsFuture{Future: future}
}

func (a *MQStub) ListConfigurations(ctx workflow.Context, input *mq.ListConfigurationsInput) (*mq.ListConfigurationsResponse, error) {
	var output mq.ListConfigurationsResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.ListConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) ListConfigurationsAsync(ctx workflow.Context, input *mq.ListConfigurationsInput) *MQListConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.ListConfigurations", input)
	return &MQListConfigurationsFuture{Future: future}
}

func (a *MQStub) ListTags(ctx workflow.Context, input *mq.ListTagsInput) (*mq.ListTagsOutput, error) {
	var output mq.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) ListTagsAsync(ctx workflow.Context, input *mq.ListTagsInput) *MQListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.ListTags", input)
	return &MQListTagsFuture{Future: future}
}

func (a *MQStub) ListUsers(ctx workflow.Context, input *mq.ListUsersInput) (*mq.ListUsersResponse, error) {
	var output mq.ListUsersResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) ListUsersAsync(ctx workflow.Context, input *mq.ListUsersInput) *MQListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.ListUsers", input)
	return &MQListUsersFuture{Future: future}
}

func (a *MQStub) RebootBroker(ctx workflow.Context, input *mq.RebootBrokerInput) (*mq.RebootBrokerOutput, error) {
	var output mq.RebootBrokerOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.RebootBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) RebootBrokerAsync(ctx workflow.Context, input *mq.RebootBrokerInput) *MQRebootBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.RebootBroker", input)
	return &MQRebootBrokerFuture{Future: future}
}

func (a *MQStub) UpdateBroker(ctx workflow.Context, input *mq.UpdateBrokerRequest) (*mq.UpdateBrokerResponse, error) {
	var output mq.UpdateBrokerResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.UpdateBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) UpdateBrokerAsync(ctx workflow.Context, input *mq.UpdateBrokerRequest) *MQUpdateBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.UpdateBroker", input)
	return &MQUpdateBrokerFuture{Future: future}
}

func (a *MQStub) UpdateConfiguration(ctx workflow.Context, input *mq.UpdateConfigurationRequest) (*mq.UpdateConfigurationResponse, error) {
	var output mq.UpdateConfigurationResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.UpdateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) UpdateConfigurationAsync(ctx workflow.Context, input *mq.UpdateConfigurationRequest) *MQUpdateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.UpdateConfiguration", input)
	return &MQUpdateConfigurationFuture{Future: future}
}

func (a *MQStub) UpdateUser(ctx workflow.Context, input *mq.UpdateUserRequest) (*mq.UpdateUserOutput, error) {
	var output mq.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) UpdateUserAsync(ctx workflow.Context, input *mq.UpdateUserRequest) *MQUpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.UpdateUser", input)
	return &MQUpdateUserFuture{Future: future}
}
