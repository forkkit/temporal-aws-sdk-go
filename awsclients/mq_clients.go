// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/mq"
	"go.temporal.io/sdk/workflow"
)

type MQClient interface {
	CreateBroker(ctx workflow.Context, input *mq.CreateBrokerRequest) (*mq.CreateBrokerResponse, error)
	CreateBrokerAsync(ctx workflow.Context, input *mq.CreateBrokerRequest) *MqCreateBrokerFuture

	CreateConfiguration(ctx workflow.Context, input *mq.CreateConfigurationRequest) (*mq.CreateConfigurationResponse, error)
	CreateConfigurationAsync(ctx workflow.Context, input *mq.CreateConfigurationRequest) *MqCreateConfigurationFuture

	CreateTags(ctx workflow.Context, input *mq.CreateTagsInput) (*mq.CreateTagsOutput, error)
	CreateTagsAsync(ctx workflow.Context, input *mq.CreateTagsInput) *MqCreateTagsFuture

	CreateUser(ctx workflow.Context, input *mq.CreateUserRequest) (*mq.CreateUserOutput, error)
	CreateUserAsync(ctx workflow.Context, input *mq.CreateUserRequest) *MqCreateUserFuture

	DeleteBroker(ctx workflow.Context, input *mq.DeleteBrokerInput) (*mq.DeleteBrokerResponse, error)
	DeleteBrokerAsync(ctx workflow.Context, input *mq.DeleteBrokerInput) *MqDeleteBrokerFuture

	DeleteTags(ctx workflow.Context, input *mq.DeleteTagsInput) (*mq.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *mq.DeleteTagsInput) *MqDeleteTagsFuture

	DeleteUser(ctx workflow.Context, input *mq.DeleteUserInput) (*mq.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *mq.DeleteUserInput) *MqDeleteUserFuture

	DescribeBroker(ctx workflow.Context, input *mq.DescribeBrokerInput) (*mq.DescribeBrokerResponse, error)
	DescribeBrokerAsync(ctx workflow.Context, input *mq.DescribeBrokerInput) *MqDescribeBrokerFuture

	DescribeBrokerEngineTypes(ctx workflow.Context, input *mq.DescribeBrokerEngineTypesInput) (*mq.DescribeBrokerEngineTypesOutput, error)
	DescribeBrokerEngineTypesAsync(ctx workflow.Context, input *mq.DescribeBrokerEngineTypesInput) *MqDescribeBrokerEngineTypesFuture

	DescribeBrokerInstanceOptions(ctx workflow.Context, input *mq.DescribeBrokerInstanceOptionsInput) (*mq.DescribeBrokerInstanceOptionsOutput, error)
	DescribeBrokerInstanceOptionsAsync(ctx workflow.Context, input *mq.DescribeBrokerInstanceOptionsInput) *MqDescribeBrokerInstanceOptionsFuture

	DescribeConfiguration(ctx workflow.Context, input *mq.DescribeConfigurationInput) (*mq.DescribeConfigurationOutput, error)
	DescribeConfigurationAsync(ctx workflow.Context, input *mq.DescribeConfigurationInput) *MqDescribeConfigurationFuture

	DescribeConfigurationRevision(ctx workflow.Context, input *mq.DescribeConfigurationRevisionInput) (*mq.DescribeConfigurationRevisionResponse, error)
	DescribeConfigurationRevisionAsync(ctx workflow.Context, input *mq.DescribeConfigurationRevisionInput) *MqDescribeConfigurationRevisionFuture

	DescribeUser(ctx workflow.Context, input *mq.DescribeUserInput) (*mq.DescribeUserResponse, error)
	DescribeUserAsync(ctx workflow.Context, input *mq.DescribeUserInput) *MqDescribeUserFuture

	ListBrokers(ctx workflow.Context, input *mq.ListBrokersInput) (*mq.ListBrokersResponse, error)
	ListBrokersAsync(ctx workflow.Context, input *mq.ListBrokersInput) *MqListBrokersFuture

	ListConfigurationRevisions(ctx workflow.Context, input *mq.ListConfigurationRevisionsInput) (*mq.ListConfigurationRevisionsResponse, error)
	ListConfigurationRevisionsAsync(ctx workflow.Context, input *mq.ListConfigurationRevisionsInput) *MqListConfigurationRevisionsFuture

	ListConfigurations(ctx workflow.Context, input *mq.ListConfigurationsInput) (*mq.ListConfigurationsResponse, error)
	ListConfigurationsAsync(ctx workflow.Context, input *mq.ListConfigurationsInput) *MqListConfigurationsFuture

	ListTags(ctx workflow.Context, input *mq.ListTagsInput) (*mq.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *mq.ListTagsInput) *MqListTagsFuture

	ListUsers(ctx workflow.Context, input *mq.ListUsersInput) (*mq.ListUsersResponse, error)
	ListUsersAsync(ctx workflow.Context, input *mq.ListUsersInput) *MqListUsersFuture

	RebootBroker(ctx workflow.Context, input *mq.RebootBrokerInput) (*mq.RebootBrokerOutput, error)
	RebootBrokerAsync(ctx workflow.Context, input *mq.RebootBrokerInput) *MqRebootBrokerFuture

	UpdateBroker(ctx workflow.Context, input *mq.UpdateBrokerRequest) (*mq.UpdateBrokerResponse, error)
	UpdateBrokerAsync(ctx workflow.Context, input *mq.UpdateBrokerRequest) *MqUpdateBrokerFuture

	UpdateConfiguration(ctx workflow.Context, input *mq.UpdateConfigurationRequest) (*mq.UpdateConfigurationResponse, error)
	UpdateConfigurationAsync(ctx workflow.Context, input *mq.UpdateConfigurationRequest) *MqUpdateConfigurationFuture

	UpdateUser(ctx workflow.Context, input *mq.UpdateUserRequest) (*mq.UpdateUserOutput, error)
	UpdateUserAsync(ctx workflow.Context, input *mq.UpdateUserRequest) *MqUpdateUserFuture
}

type MQStub struct{}

func NewMQStub() MQClient {
	return &MQStub{}
}

type MqCreateBrokerFuture struct {
	Future workflow.Future
}

func (r *MqCreateBrokerFuture) Get(ctx workflow.Context) (*mq.CreateBrokerResponse, error) {
	var output mq.CreateBrokerResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqCreateConfigurationFuture struct {
	Future workflow.Future
}

func (r *MqCreateConfigurationFuture) Get(ctx workflow.Context) (*mq.CreateConfigurationResponse, error) {
	var output mq.CreateConfigurationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqCreateTagsFuture struct {
	Future workflow.Future
}

func (r *MqCreateTagsFuture) Get(ctx workflow.Context) (*mq.CreateTagsOutput, error) {
	var output mq.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqCreateUserFuture struct {
	Future workflow.Future
}

func (r *MqCreateUserFuture) Get(ctx workflow.Context) (*mq.CreateUserOutput, error) {
	var output mq.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqDeleteBrokerFuture struct {
	Future workflow.Future
}

func (r *MqDeleteBrokerFuture) Get(ctx workflow.Context) (*mq.DeleteBrokerResponse, error) {
	var output mq.DeleteBrokerResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqDeleteTagsFuture struct {
	Future workflow.Future
}

func (r *MqDeleteTagsFuture) Get(ctx workflow.Context) (*mq.DeleteTagsOutput, error) {
	var output mq.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqDeleteUserFuture struct {
	Future workflow.Future
}

func (r *MqDeleteUserFuture) Get(ctx workflow.Context) (*mq.DeleteUserOutput, error) {
	var output mq.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqDescribeBrokerFuture struct {
	Future workflow.Future
}

func (r *MqDescribeBrokerFuture) Get(ctx workflow.Context) (*mq.DescribeBrokerResponse, error) {
	var output mq.DescribeBrokerResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqDescribeBrokerEngineTypesFuture struct {
	Future workflow.Future
}

func (r *MqDescribeBrokerEngineTypesFuture) Get(ctx workflow.Context) (*mq.DescribeBrokerEngineTypesOutput, error) {
	var output mq.DescribeBrokerEngineTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqDescribeBrokerInstanceOptionsFuture struct {
	Future workflow.Future
}

func (r *MqDescribeBrokerInstanceOptionsFuture) Get(ctx workflow.Context) (*mq.DescribeBrokerInstanceOptionsOutput, error) {
	var output mq.DescribeBrokerInstanceOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqDescribeConfigurationFuture struct {
	Future workflow.Future
}

func (r *MqDescribeConfigurationFuture) Get(ctx workflow.Context) (*mq.DescribeConfigurationOutput, error) {
	var output mq.DescribeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqDescribeConfigurationRevisionFuture struct {
	Future workflow.Future
}

func (r *MqDescribeConfigurationRevisionFuture) Get(ctx workflow.Context) (*mq.DescribeConfigurationRevisionResponse, error) {
	var output mq.DescribeConfigurationRevisionResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqDescribeUserFuture struct {
	Future workflow.Future
}

func (r *MqDescribeUserFuture) Get(ctx workflow.Context) (*mq.DescribeUserResponse, error) {
	var output mq.DescribeUserResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqListBrokersFuture struct {
	Future workflow.Future
}

func (r *MqListBrokersFuture) Get(ctx workflow.Context) (*mq.ListBrokersResponse, error) {
	var output mq.ListBrokersResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqListConfigurationRevisionsFuture struct {
	Future workflow.Future
}

func (r *MqListConfigurationRevisionsFuture) Get(ctx workflow.Context) (*mq.ListConfigurationRevisionsResponse, error) {
	var output mq.ListConfigurationRevisionsResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqListConfigurationsFuture struct {
	Future workflow.Future
}

func (r *MqListConfigurationsFuture) Get(ctx workflow.Context) (*mq.ListConfigurationsResponse, error) {
	var output mq.ListConfigurationsResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqListTagsFuture struct {
	Future workflow.Future
}

func (r *MqListTagsFuture) Get(ctx workflow.Context) (*mq.ListTagsOutput, error) {
	var output mq.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqListUsersFuture struct {
	Future workflow.Future
}

func (r *MqListUsersFuture) Get(ctx workflow.Context) (*mq.ListUsersResponse, error) {
	var output mq.ListUsersResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqRebootBrokerFuture struct {
	Future workflow.Future
}

func (r *MqRebootBrokerFuture) Get(ctx workflow.Context) (*mq.RebootBrokerOutput, error) {
	var output mq.RebootBrokerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqUpdateBrokerFuture struct {
	Future workflow.Future
}

func (r *MqUpdateBrokerFuture) Get(ctx workflow.Context) (*mq.UpdateBrokerResponse, error) {
	var output mq.UpdateBrokerResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqUpdateConfigurationFuture struct {
	Future workflow.Future
}

func (r *MqUpdateConfigurationFuture) Get(ctx workflow.Context) (*mq.UpdateConfigurationResponse, error) {
	var output mq.UpdateConfigurationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MqUpdateUserFuture struct {
	Future workflow.Future
}

func (r *MqUpdateUserFuture) Get(ctx workflow.Context) (*mq.UpdateUserOutput, error) {
	var output mq.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MQStub) CreateBroker(ctx workflow.Context, input *mq.CreateBrokerRequest) (*mq.CreateBrokerResponse, error) {
	var output mq.CreateBrokerResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.CreateBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) CreateBrokerAsync(ctx workflow.Context, input *mq.CreateBrokerRequest) *MqCreateBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.CreateBroker", input)
	return &MqCreateBrokerFuture{Future: future}
}

func (a *MQStub) CreateConfiguration(ctx workflow.Context, input *mq.CreateConfigurationRequest) (*mq.CreateConfigurationResponse, error) {
	var output mq.CreateConfigurationResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.CreateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) CreateConfigurationAsync(ctx workflow.Context, input *mq.CreateConfigurationRequest) *MqCreateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.CreateConfiguration", input)
	return &MqCreateConfigurationFuture{Future: future}
}

func (a *MQStub) CreateTags(ctx workflow.Context, input *mq.CreateTagsInput) (*mq.CreateTagsOutput, error) {
	var output mq.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) CreateTagsAsync(ctx workflow.Context, input *mq.CreateTagsInput) *MqCreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.CreateTags", input)
	return &MqCreateTagsFuture{Future: future}
}

func (a *MQStub) CreateUser(ctx workflow.Context, input *mq.CreateUserRequest) (*mq.CreateUserOutput, error) {
	var output mq.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) CreateUserAsync(ctx workflow.Context, input *mq.CreateUserRequest) *MqCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.CreateUser", input)
	return &MqCreateUserFuture{Future: future}
}

func (a *MQStub) DeleteBroker(ctx workflow.Context, input *mq.DeleteBrokerInput) (*mq.DeleteBrokerResponse, error) {
	var output mq.DeleteBrokerResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.DeleteBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DeleteBrokerAsync(ctx workflow.Context, input *mq.DeleteBrokerInput) *MqDeleteBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DeleteBroker", input)
	return &MqDeleteBrokerFuture{Future: future}
}

func (a *MQStub) DeleteTags(ctx workflow.Context, input *mq.DeleteTagsInput) (*mq.DeleteTagsOutput, error) {
	var output mq.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DeleteTagsAsync(ctx workflow.Context, input *mq.DeleteTagsInput) *MqDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DeleteTags", input)
	return &MqDeleteTagsFuture{Future: future}
}

func (a *MQStub) DeleteUser(ctx workflow.Context, input *mq.DeleteUserInput) (*mq.DeleteUserOutput, error) {
	var output mq.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DeleteUserAsync(ctx workflow.Context, input *mq.DeleteUserInput) *MqDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DeleteUser", input)
	return &MqDeleteUserFuture{Future: future}
}

func (a *MQStub) DescribeBroker(ctx workflow.Context, input *mq.DescribeBrokerInput) (*mq.DescribeBrokerResponse, error) {
	var output mq.DescribeBrokerResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.DescribeBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DescribeBrokerAsync(ctx workflow.Context, input *mq.DescribeBrokerInput) *MqDescribeBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DescribeBroker", input)
	return &MqDescribeBrokerFuture{Future: future}
}

func (a *MQStub) DescribeBrokerEngineTypes(ctx workflow.Context, input *mq.DescribeBrokerEngineTypesInput) (*mq.DescribeBrokerEngineTypesOutput, error) {
	var output mq.DescribeBrokerEngineTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.DescribeBrokerEngineTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DescribeBrokerEngineTypesAsync(ctx workflow.Context, input *mq.DescribeBrokerEngineTypesInput) *MqDescribeBrokerEngineTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DescribeBrokerEngineTypes", input)
	return &MqDescribeBrokerEngineTypesFuture{Future: future}
}

func (a *MQStub) DescribeBrokerInstanceOptions(ctx workflow.Context, input *mq.DescribeBrokerInstanceOptionsInput) (*mq.DescribeBrokerInstanceOptionsOutput, error) {
	var output mq.DescribeBrokerInstanceOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.DescribeBrokerInstanceOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DescribeBrokerInstanceOptionsAsync(ctx workflow.Context, input *mq.DescribeBrokerInstanceOptionsInput) *MqDescribeBrokerInstanceOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DescribeBrokerInstanceOptions", input)
	return &MqDescribeBrokerInstanceOptionsFuture{Future: future}
}

func (a *MQStub) DescribeConfiguration(ctx workflow.Context, input *mq.DescribeConfigurationInput) (*mq.DescribeConfigurationOutput, error) {
	var output mq.DescribeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.DescribeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DescribeConfigurationAsync(ctx workflow.Context, input *mq.DescribeConfigurationInput) *MqDescribeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DescribeConfiguration", input)
	return &MqDescribeConfigurationFuture{Future: future}
}

func (a *MQStub) DescribeConfigurationRevision(ctx workflow.Context, input *mq.DescribeConfigurationRevisionInput) (*mq.DescribeConfigurationRevisionResponse, error) {
	var output mq.DescribeConfigurationRevisionResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.DescribeConfigurationRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DescribeConfigurationRevisionAsync(ctx workflow.Context, input *mq.DescribeConfigurationRevisionInput) *MqDescribeConfigurationRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DescribeConfigurationRevision", input)
	return &MqDescribeConfigurationRevisionFuture{Future: future}
}

func (a *MQStub) DescribeUser(ctx workflow.Context, input *mq.DescribeUserInput) (*mq.DescribeUserResponse, error) {
	var output mq.DescribeUserResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.DescribeUser", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) DescribeUserAsync(ctx workflow.Context, input *mq.DescribeUserInput) *MqDescribeUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.DescribeUser", input)
	return &MqDescribeUserFuture{Future: future}
}

func (a *MQStub) ListBrokers(ctx workflow.Context, input *mq.ListBrokersInput) (*mq.ListBrokersResponse, error) {
	var output mq.ListBrokersResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.ListBrokers", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) ListBrokersAsync(ctx workflow.Context, input *mq.ListBrokersInput) *MqListBrokersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.ListBrokers", input)
	return &MqListBrokersFuture{Future: future}
}

func (a *MQStub) ListConfigurationRevisions(ctx workflow.Context, input *mq.ListConfigurationRevisionsInput) (*mq.ListConfigurationRevisionsResponse, error) {
	var output mq.ListConfigurationRevisionsResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.ListConfigurationRevisions", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) ListConfigurationRevisionsAsync(ctx workflow.Context, input *mq.ListConfigurationRevisionsInput) *MqListConfigurationRevisionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.ListConfigurationRevisions", input)
	return &MqListConfigurationRevisionsFuture{Future: future}
}

func (a *MQStub) ListConfigurations(ctx workflow.Context, input *mq.ListConfigurationsInput) (*mq.ListConfigurationsResponse, error) {
	var output mq.ListConfigurationsResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.ListConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) ListConfigurationsAsync(ctx workflow.Context, input *mq.ListConfigurationsInput) *MqListConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.ListConfigurations", input)
	return &MqListConfigurationsFuture{Future: future}
}

func (a *MQStub) ListTags(ctx workflow.Context, input *mq.ListTagsInput) (*mq.ListTagsOutput, error) {
	var output mq.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) ListTagsAsync(ctx workflow.Context, input *mq.ListTagsInput) *MqListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.ListTags", input)
	return &MqListTagsFuture{Future: future}
}

func (a *MQStub) ListUsers(ctx workflow.Context, input *mq.ListUsersInput) (*mq.ListUsersResponse, error) {
	var output mq.ListUsersResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) ListUsersAsync(ctx workflow.Context, input *mq.ListUsersInput) *MqListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.ListUsers", input)
	return &MqListUsersFuture{Future: future}
}

func (a *MQStub) RebootBroker(ctx workflow.Context, input *mq.RebootBrokerInput) (*mq.RebootBrokerOutput, error) {
	var output mq.RebootBrokerOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.RebootBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) RebootBrokerAsync(ctx workflow.Context, input *mq.RebootBrokerInput) *MqRebootBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.RebootBroker", input)
	return &MqRebootBrokerFuture{Future: future}
}

func (a *MQStub) UpdateBroker(ctx workflow.Context, input *mq.UpdateBrokerRequest) (*mq.UpdateBrokerResponse, error) {
	var output mq.UpdateBrokerResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.UpdateBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) UpdateBrokerAsync(ctx workflow.Context, input *mq.UpdateBrokerRequest) *MqUpdateBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.UpdateBroker", input)
	return &MqUpdateBrokerFuture{Future: future}
}

func (a *MQStub) UpdateConfiguration(ctx workflow.Context, input *mq.UpdateConfigurationRequest) (*mq.UpdateConfigurationResponse, error) {
	var output mq.UpdateConfigurationResponse
	err := workflow.ExecuteActivity(ctx, "aws.mq.UpdateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) UpdateConfigurationAsync(ctx workflow.Context, input *mq.UpdateConfigurationRequest) *MqUpdateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.UpdateConfiguration", input)
	return &MqUpdateConfigurationFuture{Future: future}
}

func (a *MQStub) UpdateUser(ctx workflow.Context, input *mq.UpdateUserRequest) (*mq.UpdateUserOutput, error) {
	var output mq.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.mq.UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *MQStub) UpdateUserAsync(ctx workflow.Context, input *mq.UpdateUserRequest) *MqUpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mq.UpdateUser", input)
	return &MqUpdateUserFuture{Future: future}
}
