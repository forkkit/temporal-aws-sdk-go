// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/sfn"
	"go.temporal.io/sdk/workflow"
)

type SFNClient interface {
	CreateActivity(ctx workflow.Context, input *sfn.CreateActivityInput) (*sfn.CreateActivityOutput, error)
	CreateActivityAsync(ctx workflow.Context, input *sfn.CreateActivityInput) *SfnCreateActivityFuture

	CreateStateMachine(ctx workflow.Context, input *sfn.CreateStateMachineInput) (*sfn.CreateStateMachineOutput, error)
	CreateStateMachineAsync(ctx workflow.Context, input *sfn.CreateStateMachineInput) *SfnCreateStateMachineFuture

	DeleteActivity(ctx workflow.Context, input *sfn.DeleteActivityInput) (*sfn.DeleteActivityOutput, error)
	DeleteActivityAsync(ctx workflow.Context, input *sfn.DeleteActivityInput) *SfnDeleteActivityFuture

	DeleteStateMachine(ctx workflow.Context, input *sfn.DeleteStateMachineInput) (*sfn.DeleteStateMachineOutput, error)
	DeleteStateMachineAsync(ctx workflow.Context, input *sfn.DeleteStateMachineInput) *SfnDeleteStateMachineFuture

	DescribeActivity(ctx workflow.Context, input *sfn.DescribeActivityInput) (*sfn.DescribeActivityOutput, error)
	DescribeActivityAsync(ctx workflow.Context, input *sfn.DescribeActivityInput) *SfnDescribeActivityFuture

	DescribeExecution(ctx workflow.Context, input *sfn.DescribeExecutionInput) (*sfn.DescribeExecutionOutput, error)
	DescribeExecutionAsync(ctx workflow.Context, input *sfn.DescribeExecutionInput) *SfnDescribeExecutionFuture

	DescribeStateMachine(ctx workflow.Context, input *sfn.DescribeStateMachineInput) (*sfn.DescribeStateMachineOutput, error)
	DescribeStateMachineAsync(ctx workflow.Context, input *sfn.DescribeStateMachineInput) *SfnDescribeStateMachineFuture

	DescribeStateMachineForExecution(ctx workflow.Context, input *sfn.DescribeStateMachineForExecutionInput) (*sfn.DescribeStateMachineForExecutionOutput, error)
	DescribeStateMachineForExecutionAsync(ctx workflow.Context, input *sfn.DescribeStateMachineForExecutionInput) *SfnDescribeStateMachineForExecutionFuture

	GetActivityTask(ctx workflow.Context, input *sfn.GetActivityTaskInput) (*sfn.GetActivityTaskOutput, error)
	GetActivityTaskAsync(ctx workflow.Context, input *sfn.GetActivityTaskInput) *SfnGetActivityTaskFuture

	GetExecutionHistory(ctx workflow.Context, input *sfn.GetExecutionHistoryInput) (*sfn.GetExecutionHistoryOutput, error)
	GetExecutionHistoryAsync(ctx workflow.Context, input *sfn.GetExecutionHistoryInput) *SfnGetExecutionHistoryFuture

	ListActivities(ctx workflow.Context, input *sfn.ListActivitiesInput) (*sfn.ListActivitiesOutput, error)
	ListActivitiesAsync(ctx workflow.Context, input *sfn.ListActivitiesInput) *SfnListActivitiesFuture

	ListExecutions(ctx workflow.Context, input *sfn.ListExecutionsInput) (*sfn.ListExecutionsOutput, error)
	ListExecutionsAsync(ctx workflow.Context, input *sfn.ListExecutionsInput) *SfnListExecutionsFuture

	ListStateMachines(ctx workflow.Context, input *sfn.ListStateMachinesInput) (*sfn.ListStateMachinesOutput, error)
	ListStateMachinesAsync(ctx workflow.Context, input *sfn.ListStateMachinesInput) *SfnListStateMachinesFuture

	ListTagsForResource(ctx workflow.Context, input *sfn.ListTagsForResourceInput) (*sfn.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *sfn.ListTagsForResourceInput) *SfnListTagsForResourceFuture

	SendTaskFailure(ctx workflow.Context, input *sfn.SendTaskFailureInput) (*sfn.SendTaskFailureOutput, error)
	SendTaskFailureAsync(ctx workflow.Context, input *sfn.SendTaskFailureInput) *SfnSendTaskFailureFuture

	SendTaskHeartbeat(ctx workflow.Context, input *sfn.SendTaskHeartbeatInput) (*sfn.SendTaskHeartbeatOutput, error)
	SendTaskHeartbeatAsync(ctx workflow.Context, input *sfn.SendTaskHeartbeatInput) *SfnSendTaskHeartbeatFuture

	SendTaskSuccess(ctx workflow.Context, input *sfn.SendTaskSuccessInput) (*sfn.SendTaskSuccessOutput, error)
	SendTaskSuccessAsync(ctx workflow.Context, input *sfn.SendTaskSuccessInput) *SfnSendTaskSuccessFuture

	StartExecution(ctx workflow.Context, input *sfn.StartExecutionInput) (*sfn.StartExecutionOutput, error)
	StartExecutionAsync(ctx workflow.Context, input *sfn.StartExecutionInput) *SfnStartExecutionFuture

	StopExecution(ctx workflow.Context, input *sfn.StopExecutionInput) (*sfn.StopExecutionOutput, error)
	StopExecutionAsync(ctx workflow.Context, input *sfn.StopExecutionInput) *SfnStopExecutionFuture

	TagResource(ctx workflow.Context, input *sfn.TagResourceInput) (*sfn.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *sfn.TagResourceInput) *SfnTagResourceFuture

	UntagResource(ctx workflow.Context, input *sfn.UntagResourceInput) (*sfn.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *sfn.UntagResourceInput) *SfnUntagResourceFuture

	UpdateStateMachine(ctx workflow.Context, input *sfn.UpdateStateMachineInput) (*sfn.UpdateStateMachineOutput, error)
	UpdateStateMachineAsync(ctx workflow.Context, input *sfn.UpdateStateMachineInput) *SfnUpdateStateMachineFuture
}

type SFNStub struct{}

func NewSFNStub() SFNClient {
	return &SFNStub{}
}

type SfnCreateActivityFuture struct {
	Future workflow.Future
}

func (r *SfnCreateActivityFuture) Get(ctx workflow.Context) (*sfn.CreateActivityOutput, error) {
	var output sfn.CreateActivityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnCreateStateMachineFuture struct {
	Future workflow.Future
}

func (r *SfnCreateStateMachineFuture) Get(ctx workflow.Context) (*sfn.CreateStateMachineOutput, error) {
	var output sfn.CreateStateMachineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnDeleteActivityFuture struct {
	Future workflow.Future
}

func (r *SfnDeleteActivityFuture) Get(ctx workflow.Context) (*sfn.DeleteActivityOutput, error) {
	var output sfn.DeleteActivityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnDeleteStateMachineFuture struct {
	Future workflow.Future
}

func (r *SfnDeleteStateMachineFuture) Get(ctx workflow.Context) (*sfn.DeleteStateMachineOutput, error) {
	var output sfn.DeleteStateMachineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnDescribeActivityFuture struct {
	Future workflow.Future
}

func (r *SfnDescribeActivityFuture) Get(ctx workflow.Context) (*sfn.DescribeActivityOutput, error) {
	var output sfn.DescribeActivityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnDescribeExecutionFuture struct {
	Future workflow.Future
}

func (r *SfnDescribeExecutionFuture) Get(ctx workflow.Context) (*sfn.DescribeExecutionOutput, error) {
	var output sfn.DescribeExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnDescribeStateMachineFuture struct {
	Future workflow.Future
}

func (r *SfnDescribeStateMachineFuture) Get(ctx workflow.Context) (*sfn.DescribeStateMachineOutput, error) {
	var output sfn.DescribeStateMachineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnDescribeStateMachineForExecutionFuture struct {
	Future workflow.Future
}

func (r *SfnDescribeStateMachineForExecutionFuture) Get(ctx workflow.Context) (*sfn.DescribeStateMachineForExecutionOutput, error) {
	var output sfn.DescribeStateMachineForExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnGetActivityTaskFuture struct {
	Future workflow.Future
}

func (r *SfnGetActivityTaskFuture) Get(ctx workflow.Context) (*sfn.GetActivityTaskOutput, error) {
	var output sfn.GetActivityTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnGetExecutionHistoryFuture struct {
	Future workflow.Future
}

func (r *SfnGetExecutionHistoryFuture) Get(ctx workflow.Context) (*sfn.GetExecutionHistoryOutput, error) {
	var output sfn.GetExecutionHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnListActivitiesFuture struct {
	Future workflow.Future
}

func (r *SfnListActivitiesFuture) Get(ctx workflow.Context) (*sfn.ListActivitiesOutput, error) {
	var output sfn.ListActivitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnListExecutionsFuture struct {
	Future workflow.Future
}

func (r *SfnListExecutionsFuture) Get(ctx workflow.Context) (*sfn.ListExecutionsOutput, error) {
	var output sfn.ListExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnListStateMachinesFuture struct {
	Future workflow.Future
}

func (r *SfnListStateMachinesFuture) Get(ctx workflow.Context) (*sfn.ListStateMachinesOutput, error) {
	var output sfn.ListStateMachinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *SfnListTagsForResourceFuture) Get(ctx workflow.Context) (*sfn.ListTagsForResourceOutput, error) {
	var output sfn.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnSendTaskFailureFuture struct {
	Future workflow.Future
}

func (r *SfnSendTaskFailureFuture) Get(ctx workflow.Context) (*sfn.SendTaskFailureOutput, error) {
	var output sfn.SendTaskFailureOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnSendTaskHeartbeatFuture struct {
	Future workflow.Future
}

func (r *SfnSendTaskHeartbeatFuture) Get(ctx workflow.Context) (*sfn.SendTaskHeartbeatOutput, error) {
	var output sfn.SendTaskHeartbeatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnSendTaskSuccessFuture struct {
	Future workflow.Future
}

func (r *SfnSendTaskSuccessFuture) Get(ctx workflow.Context) (*sfn.SendTaskSuccessOutput, error) {
	var output sfn.SendTaskSuccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnStartExecutionFuture struct {
	Future workflow.Future
}

func (r *SfnStartExecutionFuture) Get(ctx workflow.Context) (*sfn.StartExecutionOutput, error) {
	var output sfn.StartExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnStopExecutionFuture struct {
	Future workflow.Future
}

func (r *SfnStopExecutionFuture) Get(ctx workflow.Context) (*sfn.StopExecutionOutput, error) {
	var output sfn.StopExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnTagResourceFuture struct {
	Future workflow.Future
}

func (r *SfnTagResourceFuture) Get(ctx workflow.Context) (*sfn.TagResourceOutput, error) {
	var output sfn.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnUntagResourceFuture struct {
	Future workflow.Future
}

func (r *SfnUntagResourceFuture) Get(ctx workflow.Context) (*sfn.UntagResourceOutput, error) {
	var output sfn.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SfnUpdateStateMachineFuture struct {
	Future workflow.Future
}

func (r *SfnUpdateStateMachineFuture) Get(ctx workflow.Context) (*sfn.UpdateStateMachineOutput, error) {
	var output sfn.UpdateStateMachineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) CreateActivity(ctx workflow.Context, input *sfn.CreateActivityInput) (*sfn.CreateActivityOutput, error) {
	var output sfn.CreateActivityOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.CreateActivity", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) CreateActivityAsync(ctx workflow.Context, input *sfn.CreateActivityInput) *SfnCreateActivityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.CreateActivity", input)
	return &SfnCreateActivityFuture{Future: future}
}

func (a *SFNStub) CreateStateMachine(ctx workflow.Context, input *sfn.CreateStateMachineInput) (*sfn.CreateStateMachineOutput, error) {
	var output sfn.CreateStateMachineOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.CreateStateMachine", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) CreateStateMachineAsync(ctx workflow.Context, input *sfn.CreateStateMachineInput) *SfnCreateStateMachineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.CreateStateMachine", input)
	return &SfnCreateStateMachineFuture{Future: future}
}

func (a *SFNStub) DeleteActivity(ctx workflow.Context, input *sfn.DeleteActivityInput) (*sfn.DeleteActivityOutput, error) {
	var output sfn.DeleteActivityOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.DeleteActivity", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) DeleteActivityAsync(ctx workflow.Context, input *sfn.DeleteActivityInput) *SfnDeleteActivityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.DeleteActivity", input)
	return &SfnDeleteActivityFuture{Future: future}
}

func (a *SFNStub) DeleteStateMachine(ctx workflow.Context, input *sfn.DeleteStateMachineInput) (*sfn.DeleteStateMachineOutput, error) {
	var output sfn.DeleteStateMachineOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.DeleteStateMachine", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) DeleteStateMachineAsync(ctx workflow.Context, input *sfn.DeleteStateMachineInput) *SfnDeleteStateMachineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.DeleteStateMachine", input)
	return &SfnDeleteStateMachineFuture{Future: future}
}

func (a *SFNStub) DescribeActivity(ctx workflow.Context, input *sfn.DescribeActivityInput) (*sfn.DescribeActivityOutput, error) {
	var output sfn.DescribeActivityOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.DescribeActivity", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) DescribeActivityAsync(ctx workflow.Context, input *sfn.DescribeActivityInput) *SfnDescribeActivityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.DescribeActivity", input)
	return &SfnDescribeActivityFuture{Future: future}
}

func (a *SFNStub) DescribeExecution(ctx workflow.Context, input *sfn.DescribeExecutionInput) (*sfn.DescribeExecutionOutput, error) {
	var output sfn.DescribeExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.DescribeExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) DescribeExecutionAsync(ctx workflow.Context, input *sfn.DescribeExecutionInput) *SfnDescribeExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.DescribeExecution", input)
	return &SfnDescribeExecutionFuture{Future: future}
}

func (a *SFNStub) DescribeStateMachine(ctx workflow.Context, input *sfn.DescribeStateMachineInput) (*sfn.DescribeStateMachineOutput, error) {
	var output sfn.DescribeStateMachineOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.DescribeStateMachine", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) DescribeStateMachineAsync(ctx workflow.Context, input *sfn.DescribeStateMachineInput) *SfnDescribeStateMachineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.DescribeStateMachine", input)
	return &SfnDescribeStateMachineFuture{Future: future}
}

func (a *SFNStub) DescribeStateMachineForExecution(ctx workflow.Context, input *sfn.DescribeStateMachineForExecutionInput) (*sfn.DescribeStateMachineForExecutionOutput, error) {
	var output sfn.DescribeStateMachineForExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.DescribeStateMachineForExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) DescribeStateMachineForExecutionAsync(ctx workflow.Context, input *sfn.DescribeStateMachineForExecutionInput) *SfnDescribeStateMachineForExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.DescribeStateMachineForExecution", input)
	return &SfnDescribeStateMachineForExecutionFuture{Future: future}
}

func (a *SFNStub) GetActivityTask(ctx workflow.Context, input *sfn.GetActivityTaskInput) (*sfn.GetActivityTaskOutput, error) {
	var output sfn.GetActivityTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.GetActivityTask", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) GetActivityTaskAsync(ctx workflow.Context, input *sfn.GetActivityTaskInput) *SfnGetActivityTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.GetActivityTask", input)
	return &SfnGetActivityTaskFuture{Future: future}
}

func (a *SFNStub) GetExecutionHistory(ctx workflow.Context, input *sfn.GetExecutionHistoryInput) (*sfn.GetExecutionHistoryOutput, error) {
	var output sfn.GetExecutionHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.GetExecutionHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) GetExecutionHistoryAsync(ctx workflow.Context, input *sfn.GetExecutionHistoryInput) *SfnGetExecutionHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.GetExecutionHistory", input)
	return &SfnGetExecutionHistoryFuture{Future: future}
}

func (a *SFNStub) ListActivities(ctx workflow.Context, input *sfn.ListActivitiesInput) (*sfn.ListActivitiesOutput, error) {
	var output sfn.ListActivitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.ListActivities", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) ListActivitiesAsync(ctx workflow.Context, input *sfn.ListActivitiesInput) *SfnListActivitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.ListActivities", input)
	return &SfnListActivitiesFuture{Future: future}
}

func (a *SFNStub) ListExecutions(ctx workflow.Context, input *sfn.ListExecutionsInput) (*sfn.ListExecutionsOutput, error) {
	var output sfn.ListExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.ListExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) ListExecutionsAsync(ctx workflow.Context, input *sfn.ListExecutionsInput) *SfnListExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.ListExecutions", input)
	return &SfnListExecutionsFuture{Future: future}
}

func (a *SFNStub) ListStateMachines(ctx workflow.Context, input *sfn.ListStateMachinesInput) (*sfn.ListStateMachinesOutput, error) {
	var output sfn.ListStateMachinesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.ListStateMachines", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) ListStateMachinesAsync(ctx workflow.Context, input *sfn.ListStateMachinesInput) *SfnListStateMachinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.ListStateMachines", input)
	return &SfnListStateMachinesFuture{Future: future}
}

func (a *SFNStub) ListTagsForResource(ctx workflow.Context, input *sfn.ListTagsForResourceInput) (*sfn.ListTagsForResourceOutput, error) {
	var output sfn.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) ListTagsForResourceAsync(ctx workflow.Context, input *sfn.ListTagsForResourceInput) *SfnListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.ListTagsForResource", input)
	return &SfnListTagsForResourceFuture{Future: future}
}

func (a *SFNStub) SendTaskFailure(ctx workflow.Context, input *sfn.SendTaskFailureInput) (*sfn.SendTaskFailureOutput, error) {
	var output sfn.SendTaskFailureOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.SendTaskFailure", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) SendTaskFailureAsync(ctx workflow.Context, input *sfn.SendTaskFailureInput) *SfnSendTaskFailureFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.SendTaskFailure", input)
	return &SfnSendTaskFailureFuture{Future: future}
}

func (a *SFNStub) SendTaskHeartbeat(ctx workflow.Context, input *sfn.SendTaskHeartbeatInput) (*sfn.SendTaskHeartbeatOutput, error) {
	var output sfn.SendTaskHeartbeatOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.SendTaskHeartbeat", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) SendTaskHeartbeatAsync(ctx workflow.Context, input *sfn.SendTaskHeartbeatInput) *SfnSendTaskHeartbeatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.SendTaskHeartbeat", input)
	return &SfnSendTaskHeartbeatFuture{Future: future}
}

func (a *SFNStub) SendTaskSuccess(ctx workflow.Context, input *sfn.SendTaskSuccessInput) (*sfn.SendTaskSuccessOutput, error) {
	var output sfn.SendTaskSuccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.SendTaskSuccess", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) SendTaskSuccessAsync(ctx workflow.Context, input *sfn.SendTaskSuccessInput) *SfnSendTaskSuccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.SendTaskSuccess", input)
	return &SfnSendTaskSuccessFuture{Future: future}
}

func (a *SFNStub) StartExecution(ctx workflow.Context, input *sfn.StartExecutionInput) (*sfn.StartExecutionOutput, error) {
	var output sfn.StartExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.StartExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) StartExecutionAsync(ctx workflow.Context, input *sfn.StartExecutionInput) *SfnStartExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.StartExecution", input)
	return &SfnStartExecutionFuture{Future: future}
}

func (a *SFNStub) StopExecution(ctx workflow.Context, input *sfn.StopExecutionInput) (*sfn.StopExecutionOutput, error) {
	var output sfn.StopExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.StopExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) StopExecutionAsync(ctx workflow.Context, input *sfn.StopExecutionInput) *SfnStopExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.StopExecution", input)
	return &SfnStopExecutionFuture{Future: future}
}

func (a *SFNStub) TagResource(ctx workflow.Context, input *sfn.TagResourceInput) (*sfn.TagResourceOutput, error) {
	var output sfn.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) TagResourceAsync(ctx workflow.Context, input *sfn.TagResourceInput) *SfnTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.TagResource", input)
	return &SfnTagResourceFuture{Future: future}
}

func (a *SFNStub) UntagResource(ctx workflow.Context, input *sfn.UntagResourceInput) (*sfn.UntagResourceOutput, error) {
	var output sfn.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) UntagResourceAsync(ctx workflow.Context, input *sfn.UntagResourceInput) *SfnUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.UntagResource", input)
	return &SfnUntagResourceFuture{Future: future}
}

func (a *SFNStub) UpdateStateMachine(ctx workflow.Context, input *sfn.UpdateStateMachineInput) (*sfn.UpdateStateMachineOutput, error) {
	var output sfn.UpdateStateMachineOutput
	err := workflow.ExecuteActivity(ctx, "aws.sfn.UpdateStateMachine", input).Get(ctx, &output)
	return &output, err
}

func (a *SFNStub) UpdateStateMachineAsync(ctx workflow.Context, input *sfn.UpdateStateMachineInput) *SfnUpdateStateMachineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sfn.UpdateStateMachine", input)
	return &SfnUpdateStateMachineFuture{Future: future}
}
