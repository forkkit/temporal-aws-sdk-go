// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/opsworks"
	"go.temporal.io/sdk/workflow"
)

type OpsWorksClient interface {
	AssignInstance(ctx workflow.Context, input *opsworks.AssignInstanceInput) (*opsworks.AssignInstanceOutput, error)
	AssignInstanceAsync(ctx workflow.Context, input *opsworks.AssignInstanceInput) *OpsworksAssignInstanceFuture

	AssignVolume(ctx workflow.Context, input *opsworks.AssignVolumeInput) (*opsworks.AssignVolumeOutput, error)
	AssignVolumeAsync(ctx workflow.Context, input *opsworks.AssignVolumeInput) *OpsworksAssignVolumeFuture

	AssociateElasticIp(ctx workflow.Context, input *opsworks.AssociateElasticIpInput) (*opsworks.AssociateElasticIpOutput, error)
	AssociateElasticIpAsync(ctx workflow.Context, input *opsworks.AssociateElasticIpInput) *OpsworksAssociateElasticIpFuture

	AttachElasticLoadBalancer(ctx workflow.Context, input *opsworks.AttachElasticLoadBalancerInput) (*opsworks.AttachElasticLoadBalancerOutput, error)
	AttachElasticLoadBalancerAsync(ctx workflow.Context, input *opsworks.AttachElasticLoadBalancerInput) *OpsworksAttachElasticLoadBalancerFuture

	CloneStack(ctx workflow.Context, input *opsworks.CloneStackInput) (*opsworks.CloneStackOutput, error)
	CloneStackAsync(ctx workflow.Context, input *opsworks.CloneStackInput) *OpsworksCloneStackFuture

	CreateApp(ctx workflow.Context, input *opsworks.CreateAppInput) (*opsworks.CreateAppOutput, error)
	CreateAppAsync(ctx workflow.Context, input *opsworks.CreateAppInput) *OpsworksCreateAppFuture

	CreateDeployment(ctx workflow.Context, input *opsworks.CreateDeploymentInput) (*opsworks.CreateDeploymentOutput, error)
	CreateDeploymentAsync(ctx workflow.Context, input *opsworks.CreateDeploymentInput) *OpsworksCreateDeploymentFuture

	CreateInstance(ctx workflow.Context, input *opsworks.CreateInstanceInput) (*opsworks.CreateInstanceOutput, error)
	CreateInstanceAsync(ctx workflow.Context, input *opsworks.CreateInstanceInput) *OpsworksCreateInstanceFuture

	CreateLayer(ctx workflow.Context, input *opsworks.CreateLayerInput) (*opsworks.CreateLayerOutput, error)
	CreateLayerAsync(ctx workflow.Context, input *opsworks.CreateLayerInput) *OpsworksCreateLayerFuture

	CreateStack(ctx workflow.Context, input *opsworks.CreateStackInput) (*opsworks.CreateStackOutput, error)
	CreateStackAsync(ctx workflow.Context, input *opsworks.CreateStackInput) *OpsworksCreateStackFuture

	CreateUserProfile(ctx workflow.Context, input *opsworks.CreateUserProfileInput) (*opsworks.CreateUserProfileOutput, error)
	CreateUserProfileAsync(ctx workflow.Context, input *opsworks.CreateUserProfileInput) *OpsworksCreateUserProfileFuture

	DeleteApp(ctx workflow.Context, input *opsworks.DeleteAppInput) (*opsworks.DeleteAppOutput, error)
	DeleteAppAsync(ctx workflow.Context, input *opsworks.DeleteAppInput) *OpsworksDeleteAppFuture

	DeleteInstance(ctx workflow.Context, input *opsworks.DeleteInstanceInput) (*opsworks.DeleteInstanceOutput, error)
	DeleteInstanceAsync(ctx workflow.Context, input *opsworks.DeleteInstanceInput) *OpsworksDeleteInstanceFuture

	DeleteLayer(ctx workflow.Context, input *opsworks.DeleteLayerInput) (*opsworks.DeleteLayerOutput, error)
	DeleteLayerAsync(ctx workflow.Context, input *opsworks.DeleteLayerInput) *OpsworksDeleteLayerFuture

	DeleteStack(ctx workflow.Context, input *opsworks.DeleteStackInput) (*opsworks.DeleteStackOutput, error)
	DeleteStackAsync(ctx workflow.Context, input *opsworks.DeleteStackInput) *OpsworksDeleteStackFuture

	DeleteUserProfile(ctx workflow.Context, input *opsworks.DeleteUserProfileInput) (*opsworks.DeleteUserProfileOutput, error)
	DeleteUserProfileAsync(ctx workflow.Context, input *opsworks.DeleteUserProfileInput) *OpsworksDeleteUserProfileFuture

	DeregisterEcsCluster(ctx workflow.Context, input *opsworks.DeregisterEcsClusterInput) (*opsworks.DeregisterEcsClusterOutput, error)
	DeregisterEcsClusterAsync(ctx workflow.Context, input *opsworks.DeregisterEcsClusterInput) *OpsworksDeregisterEcsClusterFuture

	DeregisterElasticIp(ctx workflow.Context, input *opsworks.DeregisterElasticIpInput) (*opsworks.DeregisterElasticIpOutput, error)
	DeregisterElasticIpAsync(ctx workflow.Context, input *opsworks.DeregisterElasticIpInput) *OpsworksDeregisterElasticIpFuture

	DeregisterInstance(ctx workflow.Context, input *opsworks.DeregisterInstanceInput) (*opsworks.DeregisterInstanceOutput, error)
	DeregisterInstanceAsync(ctx workflow.Context, input *opsworks.DeregisterInstanceInput) *OpsworksDeregisterInstanceFuture

	DeregisterRdsDbInstance(ctx workflow.Context, input *opsworks.DeregisterRdsDbInstanceInput) (*opsworks.DeregisterRdsDbInstanceOutput, error)
	DeregisterRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.DeregisterRdsDbInstanceInput) *OpsworksDeregisterRdsDbInstanceFuture

	DeregisterVolume(ctx workflow.Context, input *opsworks.DeregisterVolumeInput) (*opsworks.DeregisterVolumeOutput, error)
	DeregisterVolumeAsync(ctx workflow.Context, input *opsworks.DeregisterVolumeInput) *OpsworksDeregisterVolumeFuture

	DescribeAgentVersions(ctx workflow.Context, input *opsworks.DescribeAgentVersionsInput) (*opsworks.DescribeAgentVersionsOutput, error)
	DescribeAgentVersionsAsync(ctx workflow.Context, input *opsworks.DescribeAgentVersionsInput) *OpsworksDescribeAgentVersionsFuture

	DescribeApps(ctx workflow.Context, input *opsworks.DescribeAppsInput) (*opsworks.DescribeAppsOutput, error)
	DescribeAppsAsync(ctx workflow.Context, input *opsworks.DescribeAppsInput) *OpsworksDescribeAppsFuture

	DescribeCommands(ctx workflow.Context, input *opsworks.DescribeCommandsInput) (*opsworks.DescribeCommandsOutput, error)
	DescribeCommandsAsync(ctx workflow.Context, input *opsworks.DescribeCommandsInput) *OpsworksDescribeCommandsFuture

	DescribeDeployments(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) (*opsworks.DescribeDeploymentsOutput, error)
	DescribeDeploymentsAsync(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) *OpsworksDescribeDeploymentsFuture

	DescribeEcsClusters(ctx workflow.Context, input *opsworks.DescribeEcsClustersInput) (*opsworks.DescribeEcsClustersOutput, error)
	DescribeEcsClustersAsync(ctx workflow.Context, input *opsworks.DescribeEcsClustersInput) *OpsworksDescribeEcsClustersFuture

	DescribeElasticIps(ctx workflow.Context, input *opsworks.DescribeElasticIpsInput) (*opsworks.DescribeElasticIpsOutput, error)
	DescribeElasticIpsAsync(ctx workflow.Context, input *opsworks.DescribeElasticIpsInput) *OpsworksDescribeElasticIpsFuture

	DescribeElasticLoadBalancers(ctx workflow.Context, input *opsworks.DescribeElasticLoadBalancersInput) (*opsworks.DescribeElasticLoadBalancersOutput, error)
	DescribeElasticLoadBalancersAsync(ctx workflow.Context, input *opsworks.DescribeElasticLoadBalancersInput) *OpsworksDescribeElasticLoadBalancersFuture

	DescribeInstances(ctx workflow.Context, input *opsworks.DescribeInstancesInput) (*opsworks.DescribeInstancesOutput, error)
	DescribeInstancesAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *OpsworksDescribeInstancesFuture

	DescribeLayers(ctx workflow.Context, input *opsworks.DescribeLayersInput) (*opsworks.DescribeLayersOutput, error)
	DescribeLayersAsync(ctx workflow.Context, input *opsworks.DescribeLayersInput) *OpsworksDescribeLayersFuture

	DescribeLoadBasedAutoScaling(ctx workflow.Context, input *opsworks.DescribeLoadBasedAutoScalingInput) (*opsworks.DescribeLoadBasedAutoScalingOutput, error)
	DescribeLoadBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.DescribeLoadBasedAutoScalingInput) *OpsworksDescribeLoadBasedAutoScalingFuture

	DescribeMyUserProfile(ctx workflow.Context, input *opsworks.DescribeMyUserProfileInput) (*opsworks.DescribeMyUserProfileOutput, error)
	DescribeMyUserProfileAsync(ctx workflow.Context, input *opsworks.DescribeMyUserProfileInput) *OpsworksDescribeMyUserProfileFuture

	DescribeOperatingSystems(ctx workflow.Context, input *opsworks.DescribeOperatingSystemsInput) (*opsworks.DescribeOperatingSystemsOutput, error)
	DescribeOperatingSystemsAsync(ctx workflow.Context, input *opsworks.DescribeOperatingSystemsInput) *OpsworksDescribeOperatingSystemsFuture

	DescribePermissions(ctx workflow.Context, input *opsworks.DescribePermissionsInput) (*opsworks.DescribePermissionsOutput, error)
	DescribePermissionsAsync(ctx workflow.Context, input *opsworks.DescribePermissionsInput) *OpsworksDescribePermissionsFuture

	DescribeRaidArrays(ctx workflow.Context, input *opsworks.DescribeRaidArraysInput) (*opsworks.DescribeRaidArraysOutput, error)
	DescribeRaidArraysAsync(ctx workflow.Context, input *opsworks.DescribeRaidArraysInput) *OpsworksDescribeRaidArraysFuture

	DescribeRdsDbInstances(ctx workflow.Context, input *opsworks.DescribeRdsDbInstancesInput) (*opsworks.DescribeRdsDbInstancesOutput, error)
	DescribeRdsDbInstancesAsync(ctx workflow.Context, input *opsworks.DescribeRdsDbInstancesInput) *OpsworksDescribeRdsDbInstancesFuture

	DescribeServiceErrors(ctx workflow.Context, input *opsworks.DescribeServiceErrorsInput) (*opsworks.DescribeServiceErrorsOutput, error)
	DescribeServiceErrorsAsync(ctx workflow.Context, input *opsworks.DescribeServiceErrorsInput) *OpsworksDescribeServiceErrorsFuture

	DescribeStackProvisioningParameters(ctx workflow.Context, input *opsworks.DescribeStackProvisioningParametersInput) (*opsworks.DescribeStackProvisioningParametersOutput, error)
	DescribeStackProvisioningParametersAsync(ctx workflow.Context, input *opsworks.DescribeStackProvisioningParametersInput) *OpsworksDescribeStackProvisioningParametersFuture

	DescribeStackSummary(ctx workflow.Context, input *opsworks.DescribeStackSummaryInput) (*opsworks.DescribeStackSummaryOutput, error)
	DescribeStackSummaryAsync(ctx workflow.Context, input *opsworks.DescribeStackSummaryInput) *OpsworksDescribeStackSummaryFuture

	DescribeStacks(ctx workflow.Context, input *opsworks.DescribeStacksInput) (*opsworks.DescribeStacksOutput, error)
	DescribeStacksAsync(ctx workflow.Context, input *opsworks.DescribeStacksInput) *OpsworksDescribeStacksFuture

	DescribeTimeBasedAutoScaling(ctx workflow.Context, input *opsworks.DescribeTimeBasedAutoScalingInput) (*opsworks.DescribeTimeBasedAutoScalingOutput, error)
	DescribeTimeBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.DescribeTimeBasedAutoScalingInput) *OpsworksDescribeTimeBasedAutoScalingFuture

	DescribeUserProfiles(ctx workflow.Context, input *opsworks.DescribeUserProfilesInput) (*opsworks.DescribeUserProfilesOutput, error)
	DescribeUserProfilesAsync(ctx workflow.Context, input *opsworks.DescribeUserProfilesInput) *OpsworksDescribeUserProfilesFuture

	DescribeVolumes(ctx workflow.Context, input *opsworks.DescribeVolumesInput) (*opsworks.DescribeVolumesOutput, error)
	DescribeVolumesAsync(ctx workflow.Context, input *opsworks.DescribeVolumesInput) *OpsworksDescribeVolumesFuture

	DetachElasticLoadBalancer(ctx workflow.Context, input *opsworks.DetachElasticLoadBalancerInput) (*opsworks.DetachElasticLoadBalancerOutput, error)
	DetachElasticLoadBalancerAsync(ctx workflow.Context, input *opsworks.DetachElasticLoadBalancerInput) *OpsworksDetachElasticLoadBalancerFuture

	DisassociateElasticIp(ctx workflow.Context, input *opsworks.DisassociateElasticIpInput) (*opsworks.DisassociateElasticIpOutput, error)
	DisassociateElasticIpAsync(ctx workflow.Context, input *opsworks.DisassociateElasticIpInput) *OpsworksDisassociateElasticIpFuture

	GetHostnameSuggestion(ctx workflow.Context, input *opsworks.GetHostnameSuggestionInput) (*opsworks.GetHostnameSuggestionOutput, error)
	GetHostnameSuggestionAsync(ctx workflow.Context, input *opsworks.GetHostnameSuggestionInput) *OpsworksGetHostnameSuggestionFuture

	GrantAccess(ctx workflow.Context, input *opsworks.GrantAccessInput) (*opsworks.GrantAccessOutput, error)
	GrantAccessAsync(ctx workflow.Context, input *opsworks.GrantAccessInput) *OpsworksGrantAccessFuture

	ListTags(ctx workflow.Context, input *opsworks.ListTagsInput) (*opsworks.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *opsworks.ListTagsInput) *OpsworksListTagsFuture

	RebootInstance(ctx workflow.Context, input *opsworks.RebootInstanceInput) (*opsworks.RebootInstanceOutput, error)
	RebootInstanceAsync(ctx workflow.Context, input *opsworks.RebootInstanceInput) *OpsworksRebootInstanceFuture

	RegisterEcsCluster(ctx workflow.Context, input *opsworks.RegisterEcsClusterInput) (*opsworks.RegisterEcsClusterOutput, error)
	RegisterEcsClusterAsync(ctx workflow.Context, input *opsworks.RegisterEcsClusterInput) *OpsworksRegisterEcsClusterFuture

	RegisterElasticIp(ctx workflow.Context, input *opsworks.RegisterElasticIpInput) (*opsworks.RegisterElasticIpOutput, error)
	RegisterElasticIpAsync(ctx workflow.Context, input *opsworks.RegisterElasticIpInput) *OpsworksRegisterElasticIpFuture

	RegisterInstance(ctx workflow.Context, input *opsworks.RegisterInstanceInput) (*opsworks.RegisterInstanceOutput, error)
	RegisterInstanceAsync(ctx workflow.Context, input *opsworks.RegisterInstanceInput) *OpsworksRegisterInstanceFuture

	RegisterRdsDbInstance(ctx workflow.Context, input *opsworks.RegisterRdsDbInstanceInput) (*opsworks.RegisterRdsDbInstanceOutput, error)
	RegisterRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.RegisterRdsDbInstanceInput) *OpsworksRegisterRdsDbInstanceFuture

	RegisterVolume(ctx workflow.Context, input *opsworks.RegisterVolumeInput) (*opsworks.RegisterVolumeOutput, error)
	RegisterVolumeAsync(ctx workflow.Context, input *opsworks.RegisterVolumeInput) *OpsworksRegisterVolumeFuture

	SetLoadBasedAutoScaling(ctx workflow.Context, input *opsworks.SetLoadBasedAutoScalingInput) (*opsworks.SetLoadBasedAutoScalingOutput, error)
	SetLoadBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.SetLoadBasedAutoScalingInput) *OpsworksSetLoadBasedAutoScalingFuture

	SetPermission(ctx workflow.Context, input *opsworks.SetPermissionInput) (*opsworks.SetPermissionOutput, error)
	SetPermissionAsync(ctx workflow.Context, input *opsworks.SetPermissionInput) *OpsworksSetPermissionFuture

	SetTimeBasedAutoScaling(ctx workflow.Context, input *opsworks.SetTimeBasedAutoScalingInput) (*opsworks.SetTimeBasedAutoScalingOutput, error)
	SetTimeBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.SetTimeBasedAutoScalingInput) *OpsworksSetTimeBasedAutoScalingFuture

	StartInstance(ctx workflow.Context, input *opsworks.StartInstanceInput) (*opsworks.StartInstanceOutput, error)
	StartInstanceAsync(ctx workflow.Context, input *opsworks.StartInstanceInput) *OpsworksStartInstanceFuture

	StartStack(ctx workflow.Context, input *opsworks.StartStackInput) (*opsworks.StartStackOutput, error)
	StartStackAsync(ctx workflow.Context, input *opsworks.StartStackInput) *OpsworksStartStackFuture

	StopInstance(ctx workflow.Context, input *opsworks.StopInstanceInput) (*opsworks.StopInstanceOutput, error)
	StopInstanceAsync(ctx workflow.Context, input *opsworks.StopInstanceInput) *OpsworksStopInstanceFuture

	StopStack(ctx workflow.Context, input *opsworks.StopStackInput) (*opsworks.StopStackOutput, error)
	StopStackAsync(ctx workflow.Context, input *opsworks.StopStackInput) *OpsworksStopStackFuture

	TagResource(ctx workflow.Context, input *opsworks.TagResourceInput) (*opsworks.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *opsworks.TagResourceInput) *OpsworksTagResourceFuture

	UnassignInstance(ctx workflow.Context, input *opsworks.UnassignInstanceInput) (*opsworks.UnassignInstanceOutput, error)
	UnassignInstanceAsync(ctx workflow.Context, input *opsworks.UnassignInstanceInput) *OpsworksUnassignInstanceFuture

	UnassignVolume(ctx workflow.Context, input *opsworks.UnassignVolumeInput) (*opsworks.UnassignVolumeOutput, error)
	UnassignVolumeAsync(ctx workflow.Context, input *opsworks.UnassignVolumeInput) *OpsworksUnassignVolumeFuture

	UntagResource(ctx workflow.Context, input *opsworks.UntagResourceInput) (*opsworks.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *opsworks.UntagResourceInput) *OpsworksUntagResourceFuture

	UpdateApp(ctx workflow.Context, input *opsworks.UpdateAppInput) (*opsworks.UpdateAppOutput, error)
	UpdateAppAsync(ctx workflow.Context, input *opsworks.UpdateAppInput) *OpsworksUpdateAppFuture

	UpdateElasticIp(ctx workflow.Context, input *opsworks.UpdateElasticIpInput) (*opsworks.UpdateElasticIpOutput, error)
	UpdateElasticIpAsync(ctx workflow.Context, input *opsworks.UpdateElasticIpInput) *OpsworksUpdateElasticIpFuture

	UpdateInstance(ctx workflow.Context, input *opsworks.UpdateInstanceInput) (*opsworks.UpdateInstanceOutput, error)
	UpdateInstanceAsync(ctx workflow.Context, input *opsworks.UpdateInstanceInput) *OpsworksUpdateInstanceFuture

	UpdateLayer(ctx workflow.Context, input *opsworks.UpdateLayerInput) (*opsworks.UpdateLayerOutput, error)
	UpdateLayerAsync(ctx workflow.Context, input *opsworks.UpdateLayerInput) *OpsworksUpdateLayerFuture

	UpdateMyUserProfile(ctx workflow.Context, input *opsworks.UpdateMyUserProfileInput) (*opsworks.UpdateMyUserProfileOutput, error)
	UpdateMyUserProfileAsync(ctx workflow.Context, input *opsworks.UpdateMyUserProfileInput) *OpsworksUpdateMyUserProfileFuture

	UpdateRdsDbInstance(ctx workflow.Context, input *opsworks.UpdateRdsDbInstanceInput) (*opsworks.UpdateRdsDbInstanceOutput, error)
	UpdateRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.UpdateRdsDbInstanceInput) *OpsworksUpdateRdsDbInstanceFuture

	UpdateStack(ctx workflow.Context, input *opsworks.UpdateStackInput) (*opsworks.UpdateStackOutput, error)
	UpdateStackAsync(ctx workflow.Context, input *opsworks.UpdateStackInput) *OpsworksUpdateStackFuture

	UpdateUserProfile(ctx workflow.Context, input *opsworks.UpdateUserProfileInput) (*opsworks.UpdateUserProfileOutput, error)
	UpdateUserProfileAsync(ctx workflow.Context, input *opsworks.UpdateUserProfileInput) *OpsworksUpdateUserProfileFuture

	UpdateVolume(ctx workflow.Context, input *opsworks.UpdateVolumeInput) (*opsworks.UpdateVolumeOutput, error)
	UpdateVolumeAsync(ctx workflow.Context, input *opsworks.UpdateVolumeInput) *OpsworksUpdateVolumeFuture

	WaitUntilAppExists(ctx workflow.Context, input *opsworks.DescribeAppsInput) error
	WaitUntilAppExistsAsync(ctx workflow.Context, input *opsworks.DescribeAppsInput) *VoidFuture

	WaitUntilDeploymentSuccessful(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) error
	WaitUntilDeploymentSuccessfulAsync(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) *VoidFuture

	WaitUntilInstanceOnline(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error
	WaitUntilInstanceOnlineAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture

	WaitUntilInstanceRegistered(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error
	WaitUntilInstanceRegisteredAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture

	WaitUntilInstanceStopped(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error
	WaitUntilInstanceStoppedAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture

	WaitUntilInstanceTerminated(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error
	WaitUntilInstanceTerminatedAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture
}

type OpsWorksStub struct{}

func NewOpsWorksStub() OpsWorksClient {
	return &OpsWorksStub{}
}

type OpsworksAssignInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksAssignInstanceFuture) Get(ctx workflow.Context) (*opsworks.AssignInstanceOutput, error) {
	var output opsworks.AssignInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksAssignVolumeFuture struct {
	Future workflow.Future
}

func (r *OpsworksAssignVolumeFuture) Get(ctx workflow.Context) (*opsworks.AssignVolumeOutput, error) {
	var output opsworks.AssignVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksAssociateElasticIpFuture struct {
	Future workflow.Future
}

func (r *OpsworksAssociateElasticIpFuture) Get(ctx workflow.Context) (*opsworks.AssociateElasticIpOutput, error) {
	var output opsworks.AssociateElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksAttachElasticLoadBalancerFuture struct {
	Future workflow.Future
}

func (r *OpsworksAttachElasticLoadBalancerFuture) Get(ctx workflow.Context) (*opsworks.AttachElasticLoadBalancerOutput, error) {
	var output opsworks.AttachElasticLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksCloneStackFuture struct {
	Future workflow.Future
}

func (r *OpsworksCloneStackFuture) Get(ctx workflow.Context) (*opsworks.CloneStackOutput, error) {
	var output opsworks.CloneStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksCreateAppFuture struct {
	Future workflow.Future
}

func (r *OpsworksCreateAppFuture) Get(ctx workflow.Context) (*opsworks.CreateAppOutput, error) {
	var output opsworks.CreateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksCreateDeploymentFuture struct {
	Future workflow.Future
}

func (r *OpsworksCreateDeploymentFuture) Get(ctx workflow.Context) (*opsworks.CreateDeploymentOutput, error) {
	var output opsworks.CreateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksCreateInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksCreateInstanceFuture) Get(ctx workflow.Context) (*opsworks.CreateInstanceOutput, error) {
	var output opsworks.CreateInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksCreateLayerFuture struct {
	Future workflow.Future
}

func (r *OpsworksCreateLayerFuture) Get(ctx workflow.Context) (*opsworks.CreateLayerOutput, error) {
	var output opsworks.CreateLayerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksCreateStackFuture struct {
	Future workflow.Future
}

func (r *OpsworksCreateStackFuture) Get(ctx workflow.Context) (*opsworks.CreateStackOutput, error) {
	var output opsworks.CreateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksCreateUserProfileFuture struct {
	Future workflow.Future
}

func (r *OpsworksCreateUserProfileFuture) Get(ctx workflow.Context) (*opsworks.CreateUserProfileOutput, error) {
	var output opsworks.CreateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDeleteAppFuture struct {
	Future workflow.Future
}

func (r *OpsworksDeleteAppFuture) Get(ctx workflow.Context) (*opsworks.DeleteAppOutput, error) {
	var output opsworks.DeleteAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDeleteInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksDeleteInstanceFuture) Get(ctx workflow.Context) (*opsworks.DeleteInstanceOutput, error) {
	var output opsworks.DeleteInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDeleteLayerFuture struct {
	Future workflow.Future
}

func (r *OpsworksDeleteLayerFuture) Get(ctx workflow.Context) (*opsworks.DeleteLayerOutput, error) {
	var output opsworks.DeleteLayerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDeleteStackFuture struct {
	Future workflow.Future
}

func (r *OpsworksDeleteStackFuture) Get(ctx workflow.Context) (*opsworks.DeleteStackOutput, error) {
	var output opsworks.DeleteStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDeleteUserProfileFuture struct {
	Future workflow.Future
}

func (r *OpsworksDeleteUserProfileFuture) Get(ctx workflow.Context) (*opsworks.DeleteUserProfileOutput, error) {
	var output opsworks.DeleteUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDeregisterEcsClusterFuture struct {
	Future workflow.Future
}

func (r *OpsworksDeregisterEcsClusterFuture) Get(ctx workflow.Context) (*opsworks.DeregisterEcsClusterOutput, error) {
	var output opsworks.DeregisterEcsClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDeregisterElasticIpFuture struct {
	Future workflow.Future
}

func (r *OpsworksDeregisterElasticIpFuture) Get(ctx workflow.Context) (*opsworks.DeregisterElasticIpOutput, error) {
	var output opsworks.DeregisterElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDeregisterInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksDeregisterInstanceFuture) Get(ctx workflow.Context) (*opsworks.DeregisterInstanceOutput, error) {
	var output opsworks.DeregisterInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDeregisterRdsDbInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksDeregisterRdsDbInstanceFuture) Get(ctx workflow.Context) (*opsworks.DeregisterRdsDbInstanceOutput, error) {
	var output opsworks.DeregisterRdsDbInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDeregisterVolumeFuture struct {
	Future workflow.Future
}

func (r *OpsworksDeregisterVolumeFuture) Get(ctx workflow.Context) (*opsworks.DeregisterVolumeOutput, error) {
	var output opsworks.DeregisterVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeAgentVersionsFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeAgentVersionsFuture) Get(ctx workflow.Context) (*opsworks.DescribeAgentVersionsOutput, error) {
	var output opsworks.DescribeAgentVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeAppsFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeAppsFuture) Get(ctx workflow.Context) (*opsworks.DescribeAppsOutput, error) {
	var output opsworks.DescribeAppsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeCommandsFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeCommandsFuture) Get(ctx workflow.Context) (*opsworks.DescribeCommandsOutput, error) {
	var output opsworks.DescribeCommandsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeDeploymentsFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeDeploymentsFuture) Get(ctx workflow.Context) (*opsworks.DescribeDeploymentsOutput, error) {
	var output opsworks.DescribeDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeEcsClustersFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeEcsClustersFuture) Get(ctx workflow.Context) (*opsworks.DescribeEcsClustersOutput, error) {
	var output opsworks.DescribeEcsClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeElasticIpsFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeElasticIpsFuture) Get(ctx workflow.Context) (*opsworks.DescribeElasticIpsOutput, error) {
	var output opsworks.DescribeElasticIpsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeElasticLoadBalancersFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeElasticLoadBalancersFuture) Get(ctx workflow.Context) (*opsworks.DescribeElasticLoadBalancersOutput, error) {
	var output opsworks.DescribeElasticLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeInstancesFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeInstancesFuture) Get(ctx workflow.Context) (*opsworks.DescribeInstancesOutput, error) {
	var output opsworks.DescribeInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeLayersFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeLayersFuture) Get(ctx workflow.Context) (*opsworks.DescribeLayersOutput, error) {
	var output opsworks.DescribeLayersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeLoadBasedAutoScalingFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeLoadBasedAutoScalingFuture) Get(ctx workflow.Context) (*opsworks.DescribeLoadBasedAutoScalingOutput, error) {
	var output opsworks.DescribeLoadBasedAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeMyUserProfileFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeMyUserProfileFuture) Get(ctx workflow.Context) (*opsworks.DescribeMyUserProfileOutput, error) {
	var output opsworks.DescribeMyUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeOperatingSystemsFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeOperatingSystemsFuture) Get(ctx workflow.Context) (*opsworks.DescribeOperatingSystemsOutput, error) {
	var output opsworks.DescribeOperatingSystemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribePermissionsFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribePermissionsFuture) Get(ctx workflow.Context) (*opsworks.DescribePermissionsOutput, error) {
	var output opsworks.DescribePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeRaidArraysFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeRaidArraysFuture) Get(ctx workflow.Context) (*opsworks.DescribeRaidArraysOutput, error) {
	var output opsworks.DescribeRaidArraysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeRdsDbInstancesFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeRdsDbInstancesFuture) Get(ctx workflow.Context) (*opsworks.DescribeRdsDbInstancesOutput, error) {
	var output opsworks.DescribeRdsDbInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeServiceErrorsFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeServiceErrorsFuture) Get(ctx workflow.Context) (*opsworks.DescribeServiceErrorsOutput, error) {
	var output opsworks.DescribeServiceErrorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeStackProvisioningParametersFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeStackProvisioningParametersFuture) Get(ctx workflow.Context) (*opsworks.DescribeStackProvisioningParametersOutput, error) {
	var output opsworks.DescribeStackProvisioningParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeStackSummaryFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeStackSummaryFuture) Get(ctx workflow.Context) (*opsworks.DescribeStackSummaryOutput, error) {
	var output opsworks.DescribeStackSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeStacksFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeStacksFuture) Get(ctx workflow.Context) (*opsworks.DescribeStacksOutput, error) {
	var output opsworks.DescribeStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeTimeBasedAutoScalingFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeTimeBasedAutoScalingFuture) Get(ctx workflow.Context) (*opsworks.DescribeTimeBasedAutoScalingOutput, error) {
	var output opsworks.DescribeTimeBasedAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeUserProfilesFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeUserProfilesFuture) Get(ctx workflow.Context) (*opsworks.DescribeUserProfilesOutput, error) {
	var output opsworks.DescribeUserProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDescribeVolumesFuture struct {
	Future workflow.Future
}

func (r *OpsworksDescribeVolumesFuture) Get(ctx workflow.Context) (*opsworks.DescribeVolumesOutput, error) {
	var output opsworks.DescribeVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDetachElasticLoadBalancerFuture struct {
	Future workflow.Future
}

func (r *OpsworksDetachElasticLoadBalancerFuture) Get(ctx workflow.Context) (*opsworks.DetachElasticLoadBalancerOutput, error) {
	var output opsworks.DetachElasticLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksDisassociateElasticIpFuture struct {
	Future workflow.Future
}

func (r *OpsworksDisassociateElasticIpFuture) Get(ctx workflow.Context) (*opsworks.DisassociateElasticIpOutput, error) {
	var output opsworks.DisassociateElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksGetHostnameSuggestionFuture struct {
	Future workflow.Future
}

func (r *OpsworksGetHostnameSuggestionFuture) Get(ctx workflow.Context) (*opsworks.GetHostnameSuggestionOutput, error) {
	var output opsworks.GetHostnameSuggestionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksGrantAccessFuture struct {
	Future workflow.Future
}

func (r *OpsworksGrantAccessFuture) Get(ctx workflow.Context) (*opsworks.GrantAccessOutput, error) {
	var output opsworks.GrantAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksListTagsFuture struct {
	Future workflow.Future
}

func (r *OpsworksListTagsFuture) Get(ctx workflow.Context) (*opsworks.ListTagsOutput, error) {
	var output opsworks.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksRebootInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksRebootInstanceFuture) Get(ctx workflow.Context) (*opsworks.RebootInstanceOutput, error) {
	var output opsworks.RebootInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksRegisterEcsClusterFuture struct {
	Future workflow.Future
}

func (r *OpsworksRegisterEcsClusterFuture) Get(ctx workflow.Context) (*opsworks.RegisterEcsClusterOutput, error) {
	var output opsworks.RegisterEcsClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksRegisterElasticIpFuture struct {
	Future workflow.Future
}

func (r *OpsworksRegisterElasticIpFuture) Get(ctx workflow.Context) (*opsworks.RegisterElasticIpOutput, error) {
	var output opsworks.RegisterElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksRegisterInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksRegisterInstanceFuture) Get(ctx workflow.Context) (*opsworks.RegisterInstanceOutput, error) {
	var output opsworks.RegisterInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksRegisterRdsDbInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksRegisterRdsDbInstanceFuture) Get(ctx workflow.Context) (*opsworks.RegisterRdsDbInstanceOutput, error) {
	var output opsworks.RegisterRdsDbInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksRegisterVolumeFuture struct {
	Future workflow.Future
}

func (r *OpsworksRegisterVolumeFuture) Get(ctx workflow.Context) (*opsworks.RegisterVolumeOutput, error) {
	var output opsworks.RegisterVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksSetLoadBasedAutoScalingFuture struct {
	Future workflow.Future
}

func (r *OpsworksSetLoadBasedAutoScalingFuture) Get(ctx workflow.Context) (*opsworks.SetLoadBasedAutoScalingOutput, error) {
	var output opsworks.SetLoadBasedAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksSetPermissionFuture struct {
	Future workflow.Future
}

func (r *OpsworksSetPermissionFuture) Get(ctx workflow.Context) (*opsworks.SetPermissionOutput, error) {
	var output opsworks.SetPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksSetTimeBasedAutoScalingFuture struct {
	Future workflow.Future
}

func (r *OpsworksSetTimeBasedAutoScalingFuture) Get(ctx workflow.Context) (*opsworks.SetTimeBasedAutoScalingOutput, error) {
	var output opsworks.SetTimeBasedAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksStartInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksStartInstanceFuture) Get(ctx workflow.Context) (*opsworks.StartInstanceOutput, error) {
	var output opsworks.StartInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksStartStackFuture struct {
	Future workflow.Future
}

func (r *OpsworksStartStackFuture) Get(ctx workflow.Context) (*opsworks.StartStackOutput, error) {
	var output opsworks.StartStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksStopInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksStopInstanceFuture) Get(ctx workflow.Context) (*opsworks.StopInstanceOutput, error) {
	var output opsworks.StopInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksStopStackFuture struct {
	Future workflow.Future
}

func (r *OpsworksStopStackFuture) Get(ctx workflow.Context) (*opsworks.StopStackOutput, error) {
	var output opsworks.StopStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksTagResourceFuture struct {
	Future workflow.Future
}

func (r *OpsworksTagResourceFuture) Get(ctx workflow.Context) (*opsworks.TagResourceOutput, error) {
	var output opsworks.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksUnassignInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksUnassignInstanceFuture) Get(ctx workflow.Context) (*opsworks.UnassignInstanceOutput, error) {
	var output opsworks.UnassignInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksUnassignVolumeFuture struct {
	Future workflow.Future
}

func (r *OpsworksUnassignVolumeFuture) Get(ctx workflow.Context) (*opsworks.UnassignVolumeOutput, error) {
	var output opsworks.UnassignVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksUntagResourceFuture struct {
	Future workflow.Future
}

func (r *OpsworksUntagResourceFuture) Get(ctx workflow.Context) (*opsworks.UntagResourceOutput, error) {
	var output opsworks.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksUpdateAppFuture struct {
	Future workflow.Future
}

func (r *OpsworksUpdateAppFuture) Get(ctx workflow.Context) (*opsworks.UpdateAppOutput, error) {
	var output opsworks.UpdateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksUpdateElasticIpFuture struct {
	Future workflow.Future
}

func (r *OpsworksUpdateElasticIpFuture) Get(ctx workflow.Context) (*opsworks.UpdateElasticIpOutput, error) {
	var output opsworks.UpdateElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksUpdateInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksUpdateInstanceFuture) Get(ctx workflow.Context) (*opsworks.UpdateInstanceOutput, error) {
	var output opsworks.UpdateInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksUpdateLayerFuture struct {
	Future workflow.Future
}

func (r *OpsworksUpdateLayerFuture) Get(ctx workflow.Context) (*opsworks.UpdateLayerOutput, error) {
	var output opsworks.UpdateLayerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksUpdateMyUserProfileFuture struct {
	Future workflow.Future
}

func (r *OpsworksUpdateMyUserProfileFuture) Get(ctx workflow.Context) (*opsworks.UpdateMyUserProfileOutput, error) {
	var output opsworks.UpdateMyUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksUpdateRdsDbInstanceFuture struct {
	Future workflow.Future
}

func (r *OpsworksUpdateRdsDbInstanceFuture) Get(ctx workflow.Context) (*opsworks.UpdateRdsDbInstanceOutput, error) {
	var output opsworks.UpdateRdsDbInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksUpdateStackFuture struct {
	Future workflow.Future
}

func (r *OpsworksUpdateStackFuture) Get(ctx workflow.Context) (*opsworks.UpdateStackOutput, error) {
	var output opsworks.UpdateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksUpdateUserProfileFuture struct {
	Future workflow.Future
}

func (r *OpsworksUpdateUserProfileFuture) Get(ctx workflow.Context) (*opsworks.UpdateUserProfileOutput, error) {
	var output opsworks.UpdateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsworksUpdateVolumeFuture struct {
	Future workflow.Future
}

func (r *OpsworksUpdateVolumeFuture) Get(ctx workflow.Context) (*opsworks.UpdateVolumeOutput, error) {
	var output opsworks.UpdateVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) AssignInstance(ctx workflow.Context, input *opsworks.AssignInstanceInput) (*opsworks.AssignInstanceOutput, error) {
	var output opsworks.AssignInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.AssignInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) AssignInstanceAsync(ctx workflow.Context, input *opsworks.AssignInstanceInput) *OpsworksAssignInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.AssignInstance", input)
	return &OpsworksAssignInstanceFuture{Future: future}
}

func (a *OpsWorksStub) AssignVolume(ctx workflow.Context, input *opsworks.AssignVolumeInput) (*opsworks.AssignVolumeOutput, error) {
	var output opsworks.AssignVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.AssignVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) AssignVolumeAsync(ctx workflow.Context, input *opsworks.AssignVolumeInput) *OpsworksAssignVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.AssignVolume", input)
	return &OpsworksAssignVolumeFuture{Future: future}
}

func (a *OpsWorksStub) AssociateElasticIp(ctx workflow.Context, input *opsworks.AssociateElasticIpInput) (*opsworks.AssociateElasticIpOutput, error) {
	var output opsworks.AssociateElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.AssociateElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) AssociateElasticIpAsync(ctx workflow.Context, input *opsworks.AssociateElasticIpInput) *OpsworksAssociateElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.AssociateElasticIp", input)
	return &OpsworksAssociateElasticIpFuture{Future: future}
}

func (a *OpsWorksStub) AttachElasticLoadBalancer(ctx workflow.Context, input *opsworks.AttachElasticLoadBalancerInput) (*opsworks.AttachElasticLoadBalancerOutput, error) {
	var output opsworks.AttachElasticLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.AttachElasticLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) AttachElasticLoadBalancerAsync(ctx workflow.Context, input *opsworks.AttachElasticLoadBalancerInput) *OpsworksAttachElasticLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.AttachElasticLoadBalancer", input)
	return &OpsworksAttachElasticLoadBalancerFuture{Future: future}
}

func (a *OpsWorksStub) CloneStack(ctx workflow.Context, input *opsworks.CloneStackInput) (*opsworks.CloneStackOutput, error) {
	var output opsworks.CloneStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CloneStack", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CloneStackAsync(ctx workflow.Context, input *opsworks.CloneStackInput) *OpsworksCloneStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CloneStack", input)
	return &OpsworksCloneStackFuture{Future: future}
}

func (a *OpsWorksStub) CreateApp(ctx workflow.Context, input *opsworks.CreateAppInput) (*opsworks.CreateAppOutput, error) {
	var output opsworks.CreateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CreateAppAsync(ctx workflow.Context, input *opsworks.CreateAppInput) *OpsworksCreateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateApp", input)
	return &OpsworksCreateAppFuture{Future: future}
}

func (a *OpsWorksStub) CreateDeployment(ctx workflow.Context, input *opsworks.CreateDeploymentInput) (*opsworks.CreateDeploymentOutput, error) {
	var output opsworks.CreateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CreateDeploymentAsync(ctx workflow.Context, input *opsworks.CreateDeploymentInput) *OpsworksCreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateDeployment", input)
	return &OpsworksCreateDeploymentFuture{Future: future}
}

func (a *OpsWorksStub) CreateInstance(ctx workflow.Context, input *opsworks.CreateInstanceInput) (*opsworks.CreateInstanceOutput, error) {
	var output opsworks.CreateInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CreateInstanceAsync(ctx workflow.Context, input *opsworks.CreateInstanceInput) *OpsworksCreateInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateInstance", input)
	return &OpsworksCreateInstanceFuture{Future: future}
}

func (a *OpsWorksStub) CreateLayer(ctx workflow.Context, input *opsworks.CreateLayerInput) (*opsworks.CreateLayerOutput, error) {
	var output opsworks.CreateLayerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateLayer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CreateLayerAsync(ctx workflow.Context, input *opsworks.CreateLayerInput) *OpsworksCreateLayerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateLayer", input)
	return &OpsworksCreateLayerFuture{Future: future}
}

func (a *OpsWorksStub) CreateStack(ctx workflow.Context, input *opsworks.CreateStackInput) (*opsworks.CreateStackOutput, error) {
	var output opsworks.CreateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CreateStackAsync(ctx workflow.Context, input *opsworks.CreateStackInput) *OpsworksCreateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateStack", input)
	return &OpsworksCreateStackFuture{Future: future}
}

func (a *OpsWorksStub) CreateUserProfile(ctx workflow.Context, input *opsworks.CreateUserProfileInput) (*opsworks.CreateUserProfileOutput, error) {
	var output opsworks.CreateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CreateUserProfileAsync(ctx workflow.Context, input *opsworks.CreateUserProfileInput) *OpsworksCreateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateUserProfile", input)
	return &OpsworksCreateUserProfileFuture{Future: future}
}

func (a *OpsWorksStub) DeleteApp(ctx workflow.Context, input *opsworks.DeleteAppInput) (*opsworks.DeleteAppOutput, error) {
	var output opsworks.DeleteAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteApp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeleteAppAsync(ctx workflow.Context, input *opsworks.DeleteAppInput) *OpsworksDeleteAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteApp", input)
	return &OpsworksDeleteAppFuture{Future: future}
}

func (a *OpsWorksStub) DeleteInstance(ctx workflow.Context, input *opsworks.DeleteInstanceInput) (*opsworks.DeleteInstanceOutput, error) {
	var output opsworks.DeleteInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeleteInstanceAsync(ctx workflow.Context, input *opsworks.DeleteInstanceInput) *OpsworksDeleteInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteInstance", input)
	return &OpsworksDeleteInstanceFuture{Future: future}
}

func (a *OpsWorksStub) DeleteLayer(ctx workflow.Context, input *opsworks.DeleteLayerInput) (*opsworks.DeleteLayerOutput, error) {
	var output opsworks.DeleteLayerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteLayer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeleteLayerAsync(ctx workflow.Context, input *opsworks.DeleteLayerInput) *OpsworksDeleteLayerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteLayer", input)
	return &OpsworksDeleteLayerFuture{Future: future}
}

func (a *OpsWorksStub) DeleteStack(ctx workflow.Context, input *opsworks.DeleteStackInput) (*opsworks.DeleteStackOutput, error) {
	var output opsworks.DeleteStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteStack", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeleteStackAsync(ctx workflow.Context, input *opsworks.DeleteStackInput) *OpsworksDeleteStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteStack", input)
	return &OpsworksDeleteStackFuture{Future: future}
}

func (a *OpsWorksStub) DeleteUserProfile(ctx workflow.Context, input *opsworks.DeleteUserProfileInput) (*opsworks.DeleteUserProfileOutput, error) {
	var output opsworks.DeleteUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeleteUserProfileAsync(ctx workflow.Context, input *opsworks.DeleteUserProfileInput) *OpsworksDeleteUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteUserProfile", input)
	return &OpsworksDeleteUserProfileFuture{Future: future}
}

func (a *OpsWorksStub) DeregisterEcsCluster(ctx workflow.Context, input *opsworks.DeregisterEcsClusterInput) (*opsworks.DeregisterEcsClusterOutput, error) {
	var output opsworks.DeregisterEcsClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterEcsCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeregisterEcsClusterAsync(ctx workflow.Context, input *opsworks.DeregisterEcsClusterInput) *OpsworksDeregisterEcsClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterEcsCluster", input)
	return &OpsworksDeregisterEcsClusterFuture{Future: future}
}

func (a *OpsWorksStub) DeregisterElasticIp(ctx workflow.Context, input *opsworks.DeregisterElasticIpInput) (*opsworks.DeregisterElasticIpOutput, error) {
	var output opsworks.DeregisterElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeregisterElasticIpAsync(ctx workflow.Context, input *opsworks.DeregisterElasticIpInput) *OpsworksDeregisterElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterElasticIp", input)
	return &OpsworksDeregisterElasticIpFuture{Future: future}
}

func (a *OpsWorksStub) DeregisterInstance(ctx workflow.Context, input *opsworks.DeregisterInstanceInput) (*opsworks.DeregisterInstanceOutput, error) {
	var output opsworks.DeregisterInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeregisterInstanceAsync(ctx workflow.Context, input *opsworks.DeregisterInstanceInput) *OpsworksDeregisterInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterInstance", input)
	return &OpsworksDeregisterInstanceFuture{Future: future}
}

func (a *OpsWorksStub) DeregisterRdsDbInstance(ctx workflow.Context, input *opsworks.DeregisterRdsDbInstanceInput) (*opsworks.DeregisterRdsDbInstanceOutput, error) {
	var output opsworks.DeregisterRdsDbInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterRdsDbInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeregisterRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.DeregisterRdsDbInstanceInput) *OpsworksDeregisterRdsDbInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterRdsDbInstance", input)
	return &OpsworksDeregisterRdsDbInstanceFuture{Future: future}
}

func (a *OpsWorksStub) DeregisterVolume(ctx workflow.Context, input *opsworks.DeregisterVolumeInput) (*opsworks.DeregisterVolumeOutput, error) {
	var output opsworks.DeregisterVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeregisterVolumeAsync(ctx workflow.Context, input *opsworks.DeregisterVolumeInput) *OpsworksDeregisterVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterVolume", input)
	return &OpsworksDeregisterVolumeFuture{Future: future}
}

func (a *OpsWorksStub) DescribeAgentVersions(ctx workflow.Context, input *opsworks.DescribeAgentVersionsInput) (*opsworks.DescribeAgentVersionsOutput, error) {
	var output opsworks.DescribeAgentVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeAgentVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeAgentVersionsAsync(ctx workflow.Context, input *opsworks.DescribeAgentVersionsInput) *OpsworksDescribeAgentVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeAgentVersions", input)
	return &OpsworksDescribeAgentVersionsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeApps(ctx workflow.Context, input *opsworks.DescribeAppsInput) (*opsworks.DescribeAppsOutput, error) {
	var output opsworks.DescribeAppsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeApps", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeAppsAsync(ctx workflow.Context, input *opsworks.DescribeAppsInput) *OpsworksDescribeAppsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeApps", input)
	return &OpsworksDescribeAppsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeCommands(ctx workflow.Context, input *opsworks.DescribeCommandsInput) (*opsworks.DescribeCommandsOutput, error) {
	var output opsworks.DescribeCommandsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeCommands", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeCommandsAsync(ctx workflow.Context, input *opsworks.DescribeCommandsInput) *OpsworksDescribeCommandsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeCommands", input)
	return &OpsworksDescribeCommandsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeDeployments(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) (*opsworks.DescribeDeploymentsOutput, error) {
	var output opsworks.DescribeDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeDeploymentsAsync(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) *OpsworksDescribeDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeDeployments", input)
	return &OpsworksDescribeDeploymentsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeEcsClusters(ctx workflow.Context, input *opsworks.DescribeEcsClustersInput) (*opsworks.DescribeEcsClustersOutput, error) {
	var output opsworks.DescribeEcsClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeEcsClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeEcsClustersAsync(ctx workflow.Context, input *opsworks.DescribeEcsClustersInput) *OpsworksDescribeEcsClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeEcsClusters", input)
	return &OpsworksDescribeEcsClustersFuture{Future: future}
}

func (a *OpsWorksStub) DescribeElasticIps(ctx workflow.Context, input *opsworks.DescribeElasticIpsInput) (*opsworks.DescribeElasticIpsOutput, error) {
	var output opsworks.DescribeElasticIpsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeElasticIps", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeElasticIpsAsync(ctx workflow.Context, input *opsworks.DescribeElasticIpsInput) *OpsworksDescribeElasticIpsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeElasticIps", input)
	return &OpsworksDescribeElasticIpsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeElasticLoadBalancers(ctx workflow.Context, input *opsworks.DescribeElasticLoadBalancersInput) (*opsworks.DescribeElasticLoadBalancersOutput, error) {
	var output opsworks.DescribeElasticLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeElasticLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeElasticLoadBalancersAsync(ctx workflow.Context, input *opsworks.DescribeElasticLoadBalancersInput) *OpsworksDescribeElasticLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeElasticLoadBalancers", input)
	return &OpsworksDescribeElasticLoadBalancersFuture{Future: future}
}

func (a *OpsWorksStub) DescribeInstances(ctx workflow.Context, input *opsworks.DescribeInstancesInput) (*opsworks.DescribeInstancesOutput, error) {
	var output opsworks.DescribeInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeInstancesAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *OpsworksDescribeInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeInstances", input)
	return &OpsworksDescribeInstancesFuture{Future: future}
}

func (a *OpsWorksStub) DescribeLayers(ctx workflow.Context, input *opsworks.DescribeLayersInput) (*opsworks.DescribeLayersOutput, error) {
	var output opsworks.DescribeLayersOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeLayers", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeLayersAsync(ctx workflow.Context, input *opsworks.DescribeLayersInput) *OpsworksDescribeLayersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeLayers", input)
	return &OpsworksDescribeLayersFuture{Future: future}
}

func (a *OpsWorksStub) DescribeLoadBasedAutoScaling(ctx workflow.Context, input *opsworks.DescribeLoadBasedAutoScalingInput) (*opsworks.DescribeLoadBasedAutoScalingOutput, error) {
	var output opsworks.DescribeLoadBasedAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeLoadBasedAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeLoadBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.DescribeLoadBasedAutoScalingInput) *OpsworksDescribeLoadBasedAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeLoadBasedAutoScaling", input)
	return &OpsworksDescribeLoadBasedAutoScalingFuture{Future: future}
}

func (a *OpsWorksStub) DescribeMyUserProfile(ctx workflow.Context, input *opsworks.DescribeMyUserProfileInput) (*opsworks.DescribeMyUserProfileOutput, error) {
	var output opsworks.DescribeMyUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeMyUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeMyUserProfileAsync(ctx workflow.Context, input *opsworks.DescribeMyUserProfileInput) *OpsworksDescribeMyUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeMyUserProfile", input)
	return &OpsworksDescribeMyUserProfileFuture{Future: future}
}

func (a *OpsWorksStub) DescribeOperatingSystems(ctx workflow.Context, input *opsworks.DescribeOperatingSystemsInput) (*opsworks.DescribeOperatingSystemsOutput, error) {
	var output opsworks.DescribeOperatingSystemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeOperatingSystems", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeOperatingSystemsAsync(ctx workflow.Context, input *opsworks.DescribeOperatingSystemsInput) *OpsworksDescribeOperatingSystemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeOperatingSystems", input)
	return &OpsworksDescribeOperatingSystemsFuture{Future: future}
}

func (a *OpsWorksStub) DescribePermissions(ctx workflow.Context, input *opsworks.DescribePermissionsInput) (*opsworks.DescribePermissionsOutput, error) {
	var output opsworks.DescribePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribePermissionsAsync(ctx workflow.Context, input *opsworks.DescribePermissionsInput) *OpsworksDescribePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribePermissions", input)
	return &OpsworksDescribePermissionsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeRaidArrays(ctx workflow.Context, input *opsworks.DescribeRaidArraysInput) (*opsworks.DescribeRaidArraysOutput, error) {
	var output opsworks.DescribeRaidArraysOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeRaidArrays", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeRaidArraysAsync(ctx workflow.Context, input *opsworks.DescribeRaidArraysInput) *OpsworksDescribeRaidArraysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeRaidArrays", input)
	return &OpsworksDescribeRaidArraysFuture{Future: future}
}

func (a *OpsWorksStub) DescribeRdsDbInstances(ctx workflow.Context, input *opsworks.DescribeRdsDbInstancesInput) (*opsworks.DescribeRdsDbInstancesOutput, error) {
	var output opsworks.DescribeRdsDbInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeRdsDbInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeRdsDbInstancesAsync(ctx workflow.Context, input *opsworks.DescribeRdsDbInstancesInput) *OpsworksDescribeRdsDbInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeRdsDbInstances", input)
	return &OpsworksDescribeRdsDbInstancesFuture{Future: future}
}

func (a *OpsWorksStub) DescribeServiceErrors(ctx workflow.Context, input *opsworks.DescribeServiceErrorsInput) (*opsworks.DescribeServiceErrorsOutput, error) {
	var output opsworks.DescribeServiceErrorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeServiceErrors", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeServiceErrorsAsync(ctx workflow.Context, input *opsworks.DescribeServiceErrorsInput) *OpsworksDescribeServiceErrorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeServiceErrors", input)
	return &OpsworksDescribeServiceErrorsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeStackProvisioningParameters(ctx workflow.Context, input *opsworks.DescribeStackProvisioningParametersInput) (*opsworks.DescribeStackProvisioningParametersOutput, error) {
	var output opsworks.DescribeStackProvisioningParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeStackProvisioningParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeStackProvisioningParametersAsync(ctx workflow.Context, input *opsworks.DescribeStackProvisioningParametersInput) *OpsworksDescribeStackProvisioningParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeStackProvisioningParameters", input)
	return &OpsworksDescribeStackProvisioningParametersFuture{Future: future}
}

func (a *OpsWorksStub) DescribeStackSummary(ctx workflow.Context, input *opsworks.DescribeStackSummaryInput) (*opsworks.DescribeStackSummaryOutput, error) {
	var output opsworks.DescribeStackSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeStackSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeStackSummaryAsync(ctx workflow.Context, input *opsworks.DescribeStackSummaryInput) *OpsworksDescribeStackSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeStackSummary", input)
	return &OpsworksDescribeStackSummaryFuture{Future: future}
}

func (a *OpsWorksStub) DescribeStacks(ctx workflow.Context, input *opsworks.DescribeStacksInput) (*opsworks.DescribeStacksOutput, error) {
	var output opsworks.DescribeStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeStacksAsync(ctx workflow.Context, input *opsworks.DescribeStacksInput) *OpsworksDescribeStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeStacks", input)
	return &OpsworksDescribeStacksFuture{Future: future}
}

func (a *OpsWorksStub) DescribeTimeBasedAutoScaling(ctx workflow.Context, input *opsworks.DescribeTimeBasedAutoScalingInput) (*opsworks.DescribeTimeBasedAutoScalingOutput, error) {
	var output opsworks.DescribeTimeBasedAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeTimeBasedAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeTimeBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.DescribeTimeBasedAutoScalingInput) *OpsworksDescribeTimeBasedAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeTimeBasedAutoScaling", input)
	return &OpsworksDescribeTimeBasedAutoScalingFuture{Future: future}
}

func (a *OpsWorksStub) DescribeUserProfiles(ctx workflow.Context, input *opsworks.DescribeUserProfilesInput) (*opsworks.DescribeUserProfilesOutput, error) {
	var output opsworks.DescribeUserProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeUserProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeUserProfilesAsync(ctx workflow.Context, input *opsworks.DescribeUserProfilesInput) *OpsworksDescribeUserProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeUserProfiles", input)
	return &OpsworksDescribeUserProfilesFuture{Future: future}
}

func (a *OpsWorksStub) DescribeVolumes(ctx workflow.Context, input *opsworks.DescribeVolumesInput) (*opsworks.DescribeVolumesOutput, error) {
	var output opsworks.DescribeVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeVolumesAsync(ctx workflow.Context, input *opsworks.DescribeVolumesInput) *OpsworksDescribeVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeVolumes", input)
	return &OpsworksDescribeVolumesFuture{Future: future}
}

func (a *OpsWorksStub) DetachElasticLoadBalancer(ctx workflow.Context, input *opsworks.DetachElasticLoadBalancerInput) (*opsworks.DetachElasticLoadBalancerOutput, error) {
	var output opsworks.DetachElasticLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DetachElasticLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DetachElasticLoadBalancerAsync(ctx workflow.Context, input *opsworks.DetachElasticLoadBalancerInput) *OpsworksDetachElasticLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DetachElasticLoadBalancer", input)
	return &OpsworksDetachElasticLoadBalancerFuture{Future: future}
}

func (a *OpsWorksStub) DisassociateElasticIp(ctx workflow.Context, input *opsworks.DisassociateElasticIpInput) (*opsworks.DisassociateElasticIpOutput, error) {
	var output opsworks.DisassociateElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DisassociateElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DisassociateElasticIpAsync(ctx workflow.Context, input *opsworks.DisassociateElasticIpInput) *OpsworksDisassociateElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DisassociateElasticIp", input)
	return &OpsworksDisassociateElasticIpFuture{Future: future}
}

func (a *OpsWorksStub) GetHostnameSuggestion(ctx workflow.Context, input *opsworks.GetHostnameSuggestionInput) (*opsworks.GetHostnameSuggestionOutput, error) {
	var output opsworks.GetHostnameSuggestionOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.GetHostnameSuggestion", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) GetHostnameSuggestionAsync(ctx workflow.Context, input *opsworks.GetHostnameSuggestionInput) *OpsworksGetHostnameSuggestionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.GetHostnameSuggestion", input)
	return &OpsworksGetHostnameSuggestionFuture{Future: future}
}

func (a *OpsWorksStub) GrantAccess(ctx workflow.Context, input *opsworks.GrantAccessInput) (*opsworks.GrantAccessOutput, error) {
	var output opsworks.GrantAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.GrantAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) GrantAccessAsync(ctx workflow.Context, input *opsworks.GrantAccessInput) *OpsworksGrantAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.GrantAccess", input)
	return &OpsworksGrantAccessFuture{Future: future}
}

func (a *OpsWorksStub) ListTags(ctx workflow.Context, input *opsworks.ListTagsInput) (*opsworks.ListTagsOutput, error) {
	var output opsworks.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) ListTagsAsync(ctx workflow.Context, input *opsworks.ListTagsInput) *OpsworksListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.ListTags", input)
	return &OpsworksListTagsFuture{Future: future}
}

func (a *OpsWorksStub) RebootInstance(ctx workflow.Context, input *opsworks.RebootInstanceInput) (*opsworks.RebootInstanceOutput, error) {
	var output opsworks.RebootInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.RebootInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) RebootInstanceAsync(ctx workflow.Context, input *opsworks.RebootInstanceInput) *OpsworksRebootInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.RebootInstance", input)
	return &OpsworksRebootInstanceFuture{Future: future}
}

func (a *OpsWorksStub) RegisterEcsCluster(ctx workflow.Context, input *opsworks.RegisterEcsClusterInput) (*opsworks.RegisterEcsClusterOutput, error) {
	var output opsworks.RegisterEcsClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterEcsCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) RegisterEcsClusterAsync(ctx workflow.Context, input *opsworks.RegisterEcsClusterInput) *OpsworksRegisterEcsClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterEcsCluster", input)
	return &OpsworksRegisterEcsClusterFuture{Future: future}
}

func (a *OpsWorksStub) RegisterElasticIp(ctx workflow.Context, input *opsworks.RegisterElasticIpInput) (*opsworks.RegisterElasticIpOutput, error) {
	var output opsworks.RegisterElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) RegisterElasticIpAsync(ctx workflow.Context, input *opsworks.RegisterElasticIpInput) *OpsworksRegisterElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterElasticIp", input)
	return &OpsworksRegisterElasticIpFuture{Future: future}
}

func (a *OpsWorksStub) RegisterInstance(ctx workflow.Context, input *opsworks.RegisterInstanceInput) (*opsworks.RegisterInstanceOutput, error) {
	var output opsworks.RegisterInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) RegisterInstanceAsync(ctx workflow.Context, input *opsworks.RegisterInstanceInput) *OpsworksRegisterInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterInstance", input)
	return &OpsworksRegisterInstanceFuture{Future: future}
}

func (a *OpsWorksStub) RegisterRdsDbInstance(ctx workflow.Context, input *opsworks.RegisterRdsDbInstanceInput) (*opsworks.RegisterRdsDbInstanceOutput, error) {
	var output opsworks.RegisterRdsDbInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterRdsDbInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) RegisterRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.RegisterRdsDbInstanceInput) *OpsworksRegisterRdsDbInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterRdsDbInstance", input)
	return &OpsworksRegisterRdsDbInstanceFuture{Future: future}
}

func (a *OpsWorksStub) RegisterVolume(ctx workflow.Context, input *opsworks.RegisterVolumeInput) (*opsworks.RegisterVolumeOutput, error) {
	var output opsworks.RegisterVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) RegisterVolumeAsync(ctx workflow.Context, input *opsworks.RegisterVolumeInput) *OpsworksRegisterVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterVolume", input)
	return &OpsworksRegisterVolumeFuture{Future: future}
}

func (a *OpsWorksStub) SetLoadBasedAutoScaling(ctx workflow.Context, input *opsworks.SetLoadBasedAutoScalingInput) (*opsworks.SetLoadBasedAutoScalingOutput, error) {
	var output opsworks.SetLoadBasedAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.SetLoadBasedAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) SetLoadBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.SetLoadBasedAutoScalingInput) *OpsworksSetLoadBasedAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.SetLoadBasedAutoScaling", input)
	return &OpsworksSetLoadBasedAutoScalingFuture{Future: future}
}

func (a *OpsWorksStub) SetPermission(ctx workflow.Context, input *opsworks.SetPermissionInput) (*opsworks.SetPermissionOutput, error) {
	var output opsworks.SetPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.SetPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) SetPermissionAsync(ctx workflow.Context, input *opsworks.SetPermissionInput) *OpsworksSetPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.SetPermission", input)
	return &OpsworksSetPermissionFuture{Future: future}
}

func (a *OpsWorksStub) SetTimeBasedAutoScaling(ctx workflow.Context, input *opsworks.SetTimeBasedAutoScalingInput) (*opsworks.SetTimeBasedAutoScalingOutput, error) {
	var output opsworks.SetTimeBasedAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.SetTimeBasedAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) SetTimeBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.SetTimeBasedAutoScalingInput) *OpsworksSetTimeBasedAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.SetTimeBasedAutoScaling", input)
	return &OpsworksSetTimeBasedAutoScalingFuture{Future: future}
}

func (a *OpsWorksStub) StartInstance(ctx workflow.Context, input *opsworks.StartInstanceInput) (*opsworks.StartInstanceOutput, error) {
	var output opsworks.StartInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.StartInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) StartInstanceAsync(ctx workflow.Context, input *opsworks.StartInstanceInput) *OpsworksStartInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.StartInstance", input)
	return &OpsworksStartInstanceFuture{Future: future}
}

func (a *OpsWorksStub) StartStack(ctx workflow.Context, input *opsworks.StartStackInput) (*opsworks.StartStackOutput, error) {
	var output opsworks.StartStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.StartStack", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) StartStackAsync(ctx workflow.Context, input *opsworks.StartStackInput) *OpsworksStartStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.StartStack", input)
	return &OpsworksStartStackFuture{Future: future}
}

func (a *OpsWorksStub) StopInstance(ctx workflow.Context, input *opsworks.StopInstanceInput) (*opsworks.StopInstanceOutput, error) {
	var output opsworks.StopInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.StopInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) StopInstanceAsync(ctx workflow.Context, input *opsworks.StopInstanceInput) *OpsworksStopInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.StopInstance", input)
	return &OpsworksStopInstanceFuture{Future: future}
}

func (a *OpsWorksStub) StopStack(ctx workflow.Context, input *opsworks.StopStackInput) (*opsworks.StopStackOutput, error) {
	var output opsworks.StopStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.StopStack", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) StopStackAsync(ctx workflow.Context, input *opsworks.StopStackInput) *OpsworksStopStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.StopStack", input)
	return &OpsworksStopStackFuture{Future: future}
}

func (a *OpsWorksStub) TagResource(ctx workflow.Context, input *opsworks.TagResourceInput) (*opsworks.TagResourceOutput, error) {
	var output opsworks.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) TagResourceAsync(ctx workflow.Context, input *opsworks.TagResourceInput) *OpsworksTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.TagResource", input)
	return &OpsworksTagResourceFuture{Future: future}
}

func (a *OpsWorksStub) UnassignInstance(ctx workflow.Context, input *opsworks.UnassignInstanceInput) (*opsworks.UnassignInstanceOutput, error) {
	var output opsworks.UnassignInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UnassignInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UnassignInstanceAsync(ctx workflow.Context, input *opsworks.UnassignInstanceInput) *OpsworksUnassignInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UnassignInstance", input)
	return &OpsworksUnassignInstanceFuture{Future: future}
}

func (a *OpsWorksStub) UnassignVolume(ctx workflow.Context, input *opsworks.UnassignVolumeInput) (*opsworks.UnassignVolumeOutput, error) {
	var output opsworks.UnassignVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UnassignVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UnassignVolumeAsync(ctx workflow.Context, input *opsworks.UnassignVolumeInput) *OpsworksUnassignVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UnassignVolume", input)
	return &OpsworksUnassignVolumeFuture{Future: future}
}

func (a *OpsWorksStub) UntagResource(ctx workflow.Context, input *opsworks.UntagResourceInput) (*opsworks.UntagResourceOutput, error) {
	var output opsworks.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UntagResourceAsync(ctx workflow.Context, input *opsworks.UntagResourceInput) *OpsworksUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UntagResource", input)
	return &OpsworksUntagResourceFuture{Future: future}
}

func (a *OpsWorksStub) UpdateApp(ctx workflow.Context, input *opsworks.UpdateAppInput) (*opsworks.UpdateAppOutput, error) {
	var output opsworks.UpdateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateAppAsync(ctx workflow.Context, input *opsworks.UpdateAppInput) *OpsworksUpdateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateApp", input)
	return &OpsworksUpdateAppFuture{Future: future}
}

func (a *OpsWorksStub) UpdateElasticIp(ctx workflow.Context, input *opsworks.UpdateElasticIpInput) (*opsworks.UpdateElasticIpOutput, error) {
	var output opsworks.UpdateElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateElasticIpAsync(ctx workflow.Context, input *opsworks.UpdateElasticIpInput) *OpsworksUpdateElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateElasticIp", input)
	return &OpsworksUpdateElasticIpFuture{Future: future}
}

func (a *OpsWorksStub) UpdateInstance(ctx workflow.Context, input *opsworks.UpdateInstanceInput) (*opsworks.UpdateInstanceOutput, error) {
	var output opsworks.UpdateInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateInstanceAsync(ctx workflow.Context, input *opsworks.UpdateInstanceInput) *OpsworksUpdateInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateInstance", input)
	return &OpsworksUpdateInstanceFuture{Future: future}
}

func (a *OpsWorksStub) UpdateLayer(ctx workflow.Context, input *opsworks.UpdateLayerInput) (*opsworks.UpdateLayerOutput, error) {
	var output opsworks.UpdateLayerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateLayer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateLayerAsync(ctx workflow.Context, input *opsworks.UpdateLayerInput) *OpsworksUpdateLayerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateLayer", input)
	return &OpsworksUpdateLayerFuture{Future: future}
}

func (a *OpsWorksStub) UpdateMyUserProfile(ctx workflow.Context, input *opsworks.UpdateMyUserProfileInput) (*opsworks.UpdateMyUserProfileOutput, error) {
	var output opsworks.UpdateMyUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateMyUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateMyUserProfileAsync(ctx workflow.Context, input *opsworks.UpdateMyUserProfileInput) *OpsworksUpdateMyUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateMyUserProfile", input)
	return &OpsworksUpdateMyUserProfileFuture{Future: future}
}

func (a *OpsWorksStub) UpdateRdsDbInstance(ctx workflow.Context, input *opsworks.UpdateRdsDbInstanceInput) (*opsworks.UpdateRdsDbInstanceOutput, error) {
	var output opsworks.UpdateRdsDbInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateRdsDbInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.UpdateRdsDbInstanceInput) *OpsworksUpdateRdsDbInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateRdsDbInstance", input)
	return &OpsworksUpdateRdsDbInstanceFuture{Future: future}
}

func (a *OpsWorksStub) UpdateStack(ctx workflow.Context, input *opsworks.UpdateStackInput) (*opsworks.UpdateStackOutput, error) {
	var output opsworks.UpdateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateStackAsync(ctx workflow.Context, input *opsworks.UpdateStackInput) *OpsworksUpdateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateStack", input)
	return &OpsworksUpdateStackFuture{Future: future}
}

func (a *OpsWorksStub) UpdateUserProfile(ctx workflow.Context, input *opsworks.UpdateUserProfileInput) (*opsworks.UpdateUserProfileOutput, error) {
	var output opsworks.UpdateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateUserProfileAsync(ctx workflow.Context, input *opsworks.UpdateUserProfileInput) *OpsworksUpdateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateUserProfile", input)
	return &OpsworksUpdateUserProfileFuture{Future: future}
}

func (a *OpsWorksStub) UpdateVolume(ctx workflow.Context, input *opsworks.UpdateVolumeInput) (*opsworks.UpdateVolumeOutput, error) {
	var output opsworks.UpdateVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateVolumeAsync(ctx workflow.Context, input *opsworks.UpdateVolumeInput) *OpsworksUpdateVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateVolume", input)
	return &OpsworksUpdateVolumeFuture{Future: future}
}

func (a *OpsWorksStub) WaitUntilAppExists(ctx workflow.Context, input *opsworks.DescribeAppsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilAppExists", input).Get(ctx, nil)
}

func (a *OpsWorksStub) WaitUntilAppExistsAsync(ctx workflow.Context, input *opsworks.DescribeAppsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilAppExists", input)
	return NewVoidFuture(future)
}

func (a *OpsWorksStub) WaitUntilDeploymentSuccessful(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilDeploymentSuccessful", input).Get(ctx, nil)
}

func (a *OpsWorksStub) WaitUntilDeploymentSuccessfulAsync(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilDeploymentSuccessful", input)
	return NewVoidFuture(future)
}

func (a *OpsWorksStub) WaitUntilInstanceOnline(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceOnline", input).Get(ctx, nil)
}

func (a *OpsWorksStub) WaitUntilInstanceOnlineAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceOnline", input)
	return NewVoidFuture(future)
}

func (a *OpsWorksStub) WaitUntilInstanceRegistered(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceRegistered", input).Get(ctx, nil)
}

func (a *OpsWorksStub) WaitUntilInstanceRegisteredAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceRegistered", input)
	return NewVoidFuture(future)
}

func (a *OpsWorksStub) WaitUntilInstanceStopped(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceStopped", input).Get(ctx, nil)
}

func (a *OpsWorksStub) WaitUntilInstanceStoppedAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceStopped", input)
	return NewVoidFuture(future)
}

func (a *OpsWorksStub) WaitUntilInstanceTerminated(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceTerminated", input).Get(ctx, nil)
}

func (a *OpsWorksStub) WaitUntilInstanceTerminatedAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceTerminated", input)
	return NewVoidFuture(future)
}
