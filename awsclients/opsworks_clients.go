// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/opsworks"
	"go.temporal.io/sdk/workflow"
)

type OpsWorksClient interface {
	AssignInstance(ctx workflow.Context, input *opsworks.AssignInstanceInput) (*opsworks.AssignInstanceOutput, error)
	AssignInstanceAsync(ctx workflow.Context, input *opsworks.AssignInstanceInput) *OpsWorksAssignInstanceFuture

	AssignVolume(ctx workflow.Context, input *opsworks.AssignVolumeInput) (*opsworks.AssignVolumeOutput, error)
	AssignVolumeAsync(ctx workflow.Context, input *opsworks.AssignVolumeInput) *OpsWorksAssignVolumeFuture

	AssociateElasticIp(ctx workflow.Context, input *opsworks.AssociateElasticIpInput) (*opsworks.AssociateElasticIpOutput, error)
	AssociateElasticIpAsync(ctx workflow.Context, input *opsworks.AssociateElasticIpInput) *OpsWorksAssociateElasticIpFuture

	AttachElasticLoadBalancer(ctx workflow.Context, input *opsworks.AttachElasticLoadBalancerInput) (*opsworks.AttachElasticLoadBalancerOutput, error)
	AttachElasticLoadBalancerAsync(ctx workflow.Context, input *opsworks.AttachElasticLoadBalancerInput) *OpsWorksAttachElasticLoadBalancerFuture

	CloneStack(ctx workflow.Context, input *opsworks.CloneStackInput) (*opsworks.CloneStackOutput, error)
	CloneStackAsync(ctx workflow.Context, input *opsworks.CloneStackInput) *OpsWorksCloneStackFuture

	CreateApp(ctx workflow.Context, input *opsworks.CreateAppInput) (*opsworks.CreateAppOutput, error)
	CreateAppAsync(ctx workflow.Context, input *opsworks.CreateAppInput) *OpsWorksCreateAppFuture

	CreateDeployment(ctx workflow.Context, input *opsworks.CreateDeploymentInput) (*opsworks.CreateDeploymentOutput, error)
	CreateDeploymentAsync(ctx workflow.Context, input *opsworks.CreateDeploymentInput) *OpsWorksCreateDeploymentFuture

	CreateInstance(ctx workflow.Context, input *opsworks.CreateInstanceInput) (*opsworks.CreateInstanceOutput, error)
	CreateInstanceAsync(ctx workflow.Context, input *opsworks.CreateInstanceInput) *OpsWorksCreateInstanceFuture

	CreateLayer(ctx workflow.Context, input *opsworks.CreateLayerInput) (*opsworks.CreateLayerOutput, error)
	CreateLayerAsync(ctx workflow.Context, input *opsworks.CreateLayerInput) *OpsWorksCreateLayerFuture

	CreateStack(ctx workflow.Context, input *opsworks.CreateStackInput) (*opsworks.CreateStackOutput, error)
	CreateStackAsync(ctx workflow.Context, input *opsworks.CreateStackInput) *OpsWorksCreateStackFuture

	CreateUserProfile(ctx workflow.Context, input *opsworks.CreateUserProfileInput) (*opsworks.CreateUserProfileOutput, error)
	CreateUserProfileAsync(ctx workflow.Context, input *opsworks.CreateUserProfileInput) *OpsWorksCreateUserProfileFuture

	DeleteApp(ctx workflow.Context, input *opsworks.DeleteAppInput) (*opsworks.DeleteAppOutput, error)
	DeleteAppAsync(ctx workflow.Context, input *opsworks.DeleteAppInput) *OpsWorksDeleteAppFuture

	DeleteInstance(ctx workflow.Context, input *opsworks.DeleteInstanceInput) (*opsworks.DeleteInstanceOutput, error)
	DeleteInstanceAsync(ctx workflow.Context, input *opsworks.DeleteInstanceInput) *OpsWorksDeleteInstanceFuture

	DeleteLayer(ctx workflow.Context, input *opsworks.DeleteLayerInput) (*opsworks.DeleteLayerOutput, error)
	DeleteLayerAsync(ctx workflow.Context, input *opsworks.DeleteLayerInput) *OpsWorksDeleteLayerFuture

	DeleteStack(ctx workflow.Context, input *opsworks.DeleteStackInput) (*opsworks.DeleteStackOutput, error)
	DeleteStackAsync(ctx workflow.Context, input *opsworks.DeleteStackInput) *OpsWorksDeleteStackFuture

	DeleteUserProfile(ctx workflow.Context, input *opsworks.DeleteUserProfileInput) (*opsworks.DeleteUserProfileOutput, error)
	DeleteUserProfileAsync(ctx workflow.Context, input *opsworks.DeleteUserProfileInput) *OpsWorksDeleteUserProfileFuture

	DeregisterEcsCluster(ctx workflow.Context, input *opsworks.DeregisterEcsClusterInput) (*opsworks.DeregisterEcsClusterOutput, error)
	DeregisterEcsClusterAsync(ctx workflow.Context, input *opsworks.DeregisterEcsClusterInput) *OpsWorksDeregisterEcsClusterFuture

	DeregisterElasticIp(ctx workflow.Context, input *opsworks.DeregisterElasticIpInput) (*opsworks.DeregisterElasticIpOutput, error)
	DeregisterElasticIpAsync(ctx workflow.Context, input *opsworks.DeregisterElasticIpInput) *OpsWorksDeregisterElasticIpFuture

	DeregisterInstance(ctx workflow.Context, input *opsworks.DeregisterInstanceInput) (*opsworks.DeregisterInstanceOutput, error)
	DeregisterInstanceAsync(ctx workflow.Context, input *opsworks.DeregisterInstanceInput) *OpsWorksDeregisterInstanceFuture

	DeregisterRdsDbInstance(ctx workflow.Context, input *opsworks.DeregisterRdsDbInstanceInput) (*opsworks.DeregisterRdsDbInstanceOutput, error)
	DeregisterRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.DeregisterRdsDbInstanceInput) *OpsWorksDeregisterRdsDbInstanceFuture

	DeregisterVolume(ctx workflow.Context, input *opsworks.DeregisterVolumeInput) (*opsworks.DeregisterVolumeOutput, error)
	DeregisterVolumeAsync(ctx workflow.Context, input *opsworks.DeregisterVolumeInput) *OpsWorksDeregisterVolumeFuture

	DescribeAgentVersions(ctx workflow.Context, input *opsworks.DescribeAgentVersionsInput) (*opsworks.DescribeAgentVersionsOutput, error)
	DescribeAgentVersionsAsync(ctx workflow.Context, input *opsworks.DescribeAgentVersionsInput) *OpsWorksDescribeAgentVersionsFuture

	DescribeApps(ctx workflow.Context, input *opsworks.DescribeAppsInput) (*opsworks.DescribeAppsOutput, error)
	DescribeAppsAsync(ctx workflow.Context, input *opsworks.DescribeAppsInput) *OpsWorksDescribeAppsFuture

	DescribeCommands(ctx workflow.Context, input *opsworks.DescribeCommandsInput) (*opsworks.DescribeCommandsOutput, error)
	DescribeCommandsAsync(ctx workflow.Context, input *opsworks.DescribeCommandsInput) *OpsWorksDescribeCommandsFuture

	DescribeDeployments(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) (*opsworks.DescribeDeploymentsOutput, error)
	DescribeDeploymentsAsync(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) *OpsWorksDescribeDeploymentsFuture

	DescribeEcsClusters(ctx workflow.Context, input *opsworks.DescribeEcsClustersInput) (*opsworks.DescribeEcsClustersOutput, error)
	DescribeEcsClustersAsync(ctx workflow.Context, input *opsworks.DescribeEcsClustersInput) *OpsWorksDescribeEcsClustersFuture

	DescribeElasticIps(ctx workflow.Context, input *opsworks.DescribeElasticIpsInput) (*opsworks.DescribeElasticIpsOutput, error)
	DescribeElasticIpsAsync(ctx workflow.Context, input *opsworks.DescribeElasticIpsInput) *OpsWorksDescribeElasticIpsFuture

	DescribeElasticLoadBalancers(ctx workflow.Context, input *opsworks.DescribeElasticLoadBalancersInput) (*opsworks.DescribeElasticLoadBalancersOutput, error)
	DescribeElasticLoadBalancersAsync(ctx workflow.Context, input *opsworks.DescribeElasticLoadBalancersInput) *OpsWorksDescribeElasticLoadBalancersFuture

	DescribeInstances(ctx workflow.Context, input *opsworks.DescribeInstancesInput) (*opsworks.DescribeInstancesOutput, error)
	DescribeInstancesAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *OpsWorksDescribeInstancesFuture

	DescribeLayers(ctx workflow.Context, input *opsworks.DescribeLayersInput) (*opsworks.DescribeLayersOutput, error)
	DescribeLayersAsync(ctx workflow.Context, input *opsworks.DescribeLayersInput) *OpsWorksDescribeLayersFuture

	DescribeLoadBasedAutoScaling(ctx workflow.Context, input *opsworks.DescribeLoadBasedAutoScalingInput) (*opsworks.DescribeLoadBasedAutoScalingOutput, error)
	DescribeLoadBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.DescribeLoadBasedAutoScalingInput) *OpsWorksDescribeLoadBasedAutoScalingFuture

	DescribeMyUserProfile(ctx workflow.Context, input *opsworks.DescribeMyUserProfileInput) (*opsworks.DescribeMyUserProfileOutput, error)
	DescribeMyUserProfileAsync(ctx workflow.Context, input *opsworks.DescribeMyUserProfileInput) *OpsWorksDescribeMyUserProfileFuture

	DescribeOperatingSystems(ctx workflow.Context, input *opsworks.DescribeOperatingSystemsInput) (*opsworks.DescribeOperatingSystemsOutput, error)
	DescribeOperatingSystemsAsync(ctx workflow.Context, input *opsworks.DescribeOperatingSystemsInput) *OpsWorksDescribeOperatingSystemsFuture

	DescribePermissions(ctx workflow.Context, input *opsworks.DescribePermissionsInput) (*opsworks.DescribePermissionsOutput, error)
	DescribePermissionsAsync(ctx workflow.Context, input *opsworks.DescribePermissionsInput) *OpsWorksDescribePermissionsFuture

	DescribeRaidArrays(ctx workflow.Context, input *opsworks.DescribeRaidArraysInput) (*opsworks.DescribeRaidArraysOutput, error)
	DescribeRaidArraysAsync(ctx workflow.Context, input *opsworks.DescribeRaidArraysInput) *OpsWorksDescribeRaidArraysFuture

	DescribeRdsDbInstances(ctx workflow.Context, input *opsworks.DescribeRdsDbInstancesInput) (*opsworks.DescribeRdsDbInstancesOutput, error)
	DescribeRdsDbInstancesAsync(ctx workflow.Context, input *opsworks.DescribeRdsDbInstancesInput) *OpsWorksDescribeRdsDbInstancesFuture

	DescribeServiceErrors(ctx workflow.Context, input *opsworks.DescribeServiceErrorsInput) (*opsworks.DescribeServiceErrorsOutput, error)
	DescribeServiceErrorsAsync(ctx workflow.Context, input *opsworks.DescribeServiceErrorsInput) *OpsWorksDescribeServiceErrorsFuture

	DescribeStackProvisioningParameters(ctx workflow.Context, input *opsworks.DescribeStackProvisioningParametersInput) (*opsworks.DescribeStackProvisioningParametersOutput, error)
	DescribeStackProvisioningParametersAsync(ctx workflow.Context, input *opsworks.DescribeStackProvisioningParametersInput) *OpsWorksDescribeStackProvisioningParametersFuture

	DescribeStackSummary(ctx workflow.Context, input *opsworks.DescribeStackSummaryInput) (*opsworks.DescribeStackSummaryOutput, error)
	DescribeStackSummaryAsync(ctx workflow.Context, input *opsworks.DescribeStackSummaryInput) *OpsWorksDescribeStackSummaryFuture

	DescribeStacks(ctx workflow.Context, input *opsworks.DescribeStacksInput) (*opsworks.DescribeStacksOutput, error)
	DescribeStacksAsync(ctx workflow.Context, input *opsworks.DescribeStacksInput) *OpsWorksDescribeStacksFuture

	DescribeTimeBasedAutoScaling(ctx workflow.Context, input *opsworks.DescribeTimeBasedAutoScalingInput) (*opsworks.DescribeTimeBasedAutoScalingOutput, error)
	DescribeTimeBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.DescribeTimeBasedAutoScalingInput) *OpsWorksDescribeTimeBasedAutoScalingFuture

	DescribeUserProfiles(ctx workflow.Context, input *opsworks.DescribeUserProfilesInput) (*opsworks.DescribeUserProfilesOutput, error)
	DescribeUserProfilesAsync(ctx workflow.Context, input *opsworks.DescribeUserProfilesInput) *OpsWorksDescribeUserProfilesFuture

	DescribeVolumes(ctx workflow.Context, input *opsworks.DescribeVolumesInput) (*opsworks.DescribeVolumesOutput, error)
	DescribeVolumesAsync(ctx workflow.Context, input *opsworks.DescribeVolumesInput) *OpsWorksDescribeVolumesFuture

	DetachElasticLoadBalancer(ctx workflow.Context, input *opsworks.DetachElasticLoadBalancerInput) (*opsworks.DetachElasticLoadBalancerOutput, error)
	DetachElasticLoadBalancerAsync(ctx workflow.Context, input *opsworks.DetachElasticLoadBalancerInput) *OpsWorksDetachElasticLoadBalancerFuture

	DisassociateElasticIp(ctx workflow.Context, input *opsworks.DisassociateElasticIpInput) (*opsworks.DisassociateElasticIpOutput, error)
	DisassociateElasticIpAsync(ctx workflow.Context, input *opsworks.DisassociateElasticIpInput) *OpsWorksDisassociateElasticIpFuture

	GetHostnameSuggestion(ctx workflow.Context, input *opsworks.GetHostnameSuggestionInput) (*opsworks.GetHostnameSuggestionOutput, error)
	GetHostnameSuggestionAsync(ctx workflow.Context, input *opsworks.GetHostnameSuggestionInput) *OpsWorksGetHostnameSuggestionFuture

	GrantAccess(ctx workflow.Context, input *opsworks.GrantAccessInput) (*opsworks.GrantAccessOutput, error)
	GrantAccessAsync(ctx workflow.Context, input *opsworks.GrantAccessInput) *OpsWorksGrantAccessFuture

	ListTags(ctx workflow.Context, input *opsworks.ListTagsInput) (*opsworks.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *opsworks.ListTagsInput) *OpsWorksListTagsFuture

	RebootInstance(ctx workflow.Context, input *opsworks.RebootInstanceInput) (*opsworks.RebootInstanceOutput, error)
	RebootInstanceAsync(ctx workflow.Context, input *opsworks.RebootInstanceInput) *OpsWorksRebootInstanceFuture

	RegisterEcsCluster(ctx workflow.Context, input *opsworks.RegisterEcsClusterInput) (*opsworks.RegisterEcsClusterOutput, error)
	RegisterEcsClusterAsync(ctx workflow.Context, input *opsworks.RegisterEcsClusterInput) *OpsWorksRegisterEcsClusterFuture

	RegisterElasticIp(ctx workflow.Context, input *opsworks.RegisterElasticIpInput) (*opsworks.RegisterElasticIpOutput, error)
	RegisterElasticIpAsync(ctx workflow.Context, input *opsworks.RegisterElasticIpInput) *OpsWorksRegisterElasticIpFuture

	RegisterInstance(ctx workflow.Context, input *opsworks.RegisterInstanceInput) (*opsworks.RegisterInstanceOutput, error)
	RegisterInstanceAsync(ctx workflow.Context, input *opsworks.RegisterInstanceInput) *OpsWorksRegisterInstanceFuture

	RegisterRdsDbInstance(ctx workflow.Context, input *opsworks.RegisterRdsDbInstanceInput) (*opsworks.RegisterRdsDbInstanceOutput, error)
	RegisterRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.RegisterRdsDbInstanceInput) *OpsWorksRegisterRdsDbInstanceFuture

	RegisterVolume(ctx workflow.Context, input *opsworks.RegisterVolumeInput) (*opsworks.RegisterVolumeOutput, error)
	RegisterVolumeAsync(ctx workflow.Context, input *opsworks.RegisterVolumeInput) *OpsWorksRegisterVolumeFuture

	SetLoadBasedAutoScaling(ctx workflow.Context, input *opsworks.SetLoadBasedAutoScalingInput) (*opsworks.SetLoadBasedAutoScalingOutput, error)
	SetLoadBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.SetLoadBasedAutoScalingInput) *OpsWorksSetLoadBasedAutoScalingFuture

	SetPermission(ctx workflow.Context, input *opsworks.SetPermissionInput) (*opsworks.SetPermissionOutput, error)
	SetPermissionAsync(ctx workflow.Context, input *opsworks.SetPermissionInput) *OpsWorksSetPermissionFuture

	SetTimeBasedAutoScaling(ctx workflow.Context, input *opsworks.SetTimeBasedAutoScalingInput) (*opsworks.SetTimeBasedAutoScalingOutput, error)
	SetTimeBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.SetTimeBasedAutoScalingInput) *OpsWorksSetTimeBasedAutoScalingFuture

	StartInstance(ctx workflow.Context, input *opsworks.StartInstanceInput) (*opsworks.StartInstanceOutput, error)
	StartInstanceAsync(ctx workflow.Context, input *opsworks.StartInstanceInput) *OpsWorksStartInstanceFuture

	StartStack(ctx workflow.Context, input *opsworks.StartStackInput) (*opsworks.StartStackOutput, error)
	StartStackAsync(ctx workflow.Context, input *opsworks.StartStackInput) *OpsWorksStartStackFuture

	StopInstance(ctx workflow.Context, input *opsworks.StopInstanceInput) (*opsworks.StopInstanceOutput, error)
	StopInstanceAsync(ctx workflow.Context, input *opsworks.StopInstanceInput) *OpsWorksStopInstanceFuture

	StopStack(ctx workflow.Context, input *opsworks.StopStackInput) (*opsworks.StopStackOutput, error)
	StopStackAsync(ctx workflow.Context, input *opsworks.StopStackInput) *OpsWorksStopStackFuture

	TagResource(ctx workflow.Context, input *opsworks.TagResourceInput) (*opsworks.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *opsworks.TagResourceInput) *OpsWorksTagResourceFuture

	UnassignInstance(ctx workflow.Context, input *opsworks.UnassignInstanceInput) (*opsworks.UnassignInstanceOutput, error)
	UnassignInstanceAsync(ctx workflow.Context, input *opsworks.UnassignInstanceInput) *OpsWorksUnassignInstanceFuture

	UnassignVolume(ctx workflow.Context, input *opsworks.UnassignVolumeInput) (*opsworks.UnassignVolumeOutput, error)
	UnassignVolumeAsync(ctx workflow.Context, input *opsworks.UnassignVolumeInput) *OpsWorksUnassignVolumeFuture

	UntagResource(ctx workflow.Context, input *opsworks.UntagResourceInput) (*opsworks.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *opsworks.UntagResourceInput) *OpsWorksUntagResourceFuture

	UpdateApp(ctx workflow.Context, input *opsworks.UpdateAppInput) (*opsworks.UpdateAppOutput, error)
	UpdateAppAsync(ctx workflow.Context, input *opsworks.UpdateAppInput) *OpsWorksUpdateAppFuture

	UpdateElasticIp(ctx workflow.Context, input *opsworks.UpdateElasticIpInput) (*opsworks.UpdateElasticIpOutput, error)
	UpdateElasticIpAsync(ctx workflow.Context, input *opsworks.UpdateElasticIpInput) *OpsWorksUpdateElasticIpFuture

	UpdateInstance(ctx workflow.Context, input *opsworks.UpdateInstanceInput) (*opsworks.UpdateInstanceOutput, error)
	UpdateInstanceAsync(ctx workflow.Context, input *opsworks.UpdateInstanceInput) *OpsWorksUpdateInstanceFuture

	UpdateLayer(ctx workflow.Context, input *opsworks.UpdateLayerInput) (*opsworks.UpdateLayerOutput, error)
	UpdateLayerAsync(ctx workflow.Context, input *opsworks.UpdateLayerInput) *OpsWorksUpdateLayerFuture

	UpdateMyUserProfile(ctx workflow.Context, input *opsworks.UpdateMyUserProfileInput) (*opsworks.UpdateMyUserProfileOutput, error)
	UpdateMyUserProfileAsync(ctx workflow.Context, input *opsworks.UpdateMyUserProfileInput) *OpsWorksUpdateMyUserProfileFuture

	UpdateRdsDbInstance(ctx workflow.Context, input *opsworks.UpdateRdsDbInstanceInput) (*opsworks.UpdateRdsDbInstanceOutput, error)
	UpdateRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.UpdateRdsDbInstanceInput) *OpsWorksUpdateRdsDbInstanceFuture

	UpdateStack(ctx workflow.Context, input *opsworks.UpdateStackInput) (*opsworks.UpdateStackOutput, error)
	UpdateStackAsync(ctx workflow.Context, input *opsworks.UpdateStackInput) *OpsWorksUpdateStackFuture

	UpdateUserProfile(ctx workflow.Context, input *opsworks.UpdateUserProfileInput) (*opsworks.UpdateUserProfileOutput, error)
	UpdateUserProfileAsync(ctx workflow.Context, input *opsworks.UpdateUserProfileInput) *OpsWorksUpdateUserProfileFuture

	UpdateVolume(ctx workflow.Context, input *opsworks.UpdateVolumeInput) (*opsworks.UpdateVolumeOutput, error)
	UpdateVolumeAsync(ctx workflow.Context, input *opsworks.UpdateVolumeInput) *OpsWorksUpdateVolumeFuture

	WaitUntilAppExists(ctx workflow.Context, input *opsworks.DescribeAppsInput) error
	WaitUntilAppExistsAsync(ctx workflow.Context, input *opsworks.DescribeAppsInput) *VoidFuture

	WaitUntilDeploymentSuccessful(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) error
	WaitUntilDeploymentSuccessfulAsync(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) *VoidFuture

	WaitUntilInstanceOnline(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error
	WaitUntilInstanceOnlineAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture

	WaitUntilInstanceRegistered(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error
	WaitUntilInstanceRegisteredAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture

	WaitUntilInstanceStopped(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error
	WaitUntilInstanceStoppedAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture

	WaitUntilInstanceTerminated(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error
	WaitUntilInstanceTerminatedAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture
}

type OpsWorksStub struct{}

func NewOpsWorksStub() OpsWorksClient {
	return &OpsWorksStub{}
}

type OpsWorksAssignInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksAssignInstanceFuture) Get(ctx workflow.Context) (*opsworks.AssignInstanceOutput, error) {
	var output opsworks.AssignInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksAssignVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksAssignVolumeFuture) Get(ctx workflow.Context) (*opsworks.AssignVolumeOutput, error) {
	var output opsworks.AssignVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksAssociateElasticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksAssociateElasticIpFuture) Get(ctx workflow.Context) (*opsworks.AssociateElasticIpOutput, error) {
	var output opsworks.AssociateElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksAttachElasticLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksAttachElasticLoadBalancerFuture) Get(ctx workflow.Context) (*opsworks.AttachElasticLoadBalancerOutput, error) {
	var output opsworks.AttachElasticLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksCloneStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksCloneStackFuture) Get(ctx workflow.Context) (*opsworks.CloneStackOutput, error) {
	var output opsworks.CloneStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksCreateAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksCreateAppFuture) Get(ctx workflow.Context) (*opsworks.CreateAppOutput, error) {
	var output opsworks.CreateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksCreateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksCreateDeploymentFuture) Get(ctx workflow.Context) (*opsworks.CreateDeploymentOutput, error) {
	var output opsworks.CreateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksCreateInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksCreateInstanceFuture) Get(ctx workflow.Context) (*opsworks.CreateInstanceOutput, error) {
	var output opsworks.CreateInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksCreateLayerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksCreateLayerFuture) Get(ctx workflow.Context) (*opsworks.CreateLayerOutput, error) {
	var output opsworks.CreateLayerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksCreateStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksCreateStackFuture) Get(ctx workflow.Context) (*opsworks.CreateStackOutput, error) {
	var output opsworks.CreateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksCreateUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksCreateUserProfileFuture) Get(ctx workflow.Context) (*opsworks.CreateUserProfileOutput, error) {
	var output opsworks.CreateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDeleteAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDeleteAppFuture) Get(ctx workflow.Context) (*opsworks.DeleteAppOutput, error) {
	var output opsworks.DeleteAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDeleteInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDeleteInstanceFuture) Get(ctx workflow.Context) (*opsworks.DeleteInstanceOutput, error) {
	var output opsworks.DeleteInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDeleteLayerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDeleteLayerFuture) Get(ctx workflow.Context) (*opsworks.DeleteLayerOutput, error) {
	var output opsworks.DeleteLayerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDeleteStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDeleteStackFuture) Get(ctx workflow.Context) (*opsworks.DeleteStackOutput, error) {
	var output opsworks.DeleteStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDeleteUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDeleteUserProfileFuture) Get(ctx workflow.Context) (*opsworks.DeleteUserProfileOutput, error) {
	var output opsworks.DeleteUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDeregisterEcsClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDeregisterEcsClusterFuture) Get(ctx workflow.Context) (*opsworks.DeregisterEcsClusterOutput, error) {
	var output opsworks.DeregisterEcsClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDeregisterElasticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDeregisterElasticIpFuture) Get(ctx workflow.Context) (*opsworks.DeregisterElasticIpOutput, error) {
	var output opsworks.DeregisterElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDeregisterInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDeregisterInstanceFuture) Get(ctx workflow.Context) (*opsworks.DeregisterInstanceOutput, error) {
	var output opsworks.DeregisterInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDeregisterRdsDbInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDeregisterRdsDbInstanceFuture) Get(ctx workflow.Context) (*opsworks.DeregisterRdsDbInstanceOutput, error) {
	var output opsworks.DeregisterRdsDbInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDeregisterVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDeregisterVolumeFuture) Get(ctx workflow.Context) (*opsworks.DeregisterVolumeOutput, error) {
	var output opsworks.DeregisterVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeAgentVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeAgentVersionsFuture) Get(ctx workflow.Context) (*opsworks.DescribeAgentVersionsOutput, error) {
	var output opsworks.DescribeAgentVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeAppsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeAppsFuture) Get(ctx workflow.Context) (*opsworks.DescribeAppsOutput, error) {
	var output opsworks.DescribeAppsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeCommandsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeCommandsFuture) Get(ctx workflow.Context) (*opsworks.DescribeCommandsOutput, error) {
	var output opsworks.DescribeCommandsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeDeploymentsFuture) Get(ctx workflow.Context) (*opsworks.DescribeDeploymentsOutput, error) {
	var output opsworks.DescribeDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeEcsClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeEcsClustersFuture) Get(ctx workflow.Context) (*opsworks.DescribeEcsClustersOutput, error) {
	var output opsworks.DescribeEcsClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeElasticIpsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeElasticIpsFuture) Get(ctx workflow.Context) (*opsworks.DescribeElasticIpsOutput, error) {
	var output opsworks.DescribeElasticIpsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeElasticLoadBalancersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeElasticLoadBalancersFuture) Get(ctx workflow.Context) (*opsworks.DescribeElasticLoadBalancersOutput, error) {
	var output opsworks.DescribeElasticLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeInstancesFuture) Get(ctx workflow.Context) (*opsworks.DescribeInstancesOutput, error) {
	var output opsworks.DescribeInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeLayersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeLayersFuture) Get(ctx workflow.Context) (*opsworks.DescribeLayersOutput, error) {
	var output opsworks.DescribeLayersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeLoadBasedAutoScalingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeLoadBasedAutoScalingFuture) Get(ctx workflow.Context) (*opsworks.DescribeLoadBasedAutoScalingOutput, error) {
	var output opsworks.DescribeLoadBasedAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeMyUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeMyUserProfileFuture) Get(ctx workflow.Context) (*opsworks.DescribeMyUserProfileOutput, error) {
	var output opsworks.DescribeMyUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeOperatingSystemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeOperatingSystemsFuture) Get(ctx workflow.Context) (*opsworks.DescribeOperatingSystemsOutput, error) {
	var output opsworks.DescribeOperatingSystemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribePermissionsFuture) Get(ctx workflow.Context) (*opsworks.DescribePermissionsOutput, error) {
	var output opsworks.DescribePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeRaidArraysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeRaidArraysFuture) Get(ctx workflow.Context) (*opsworks.DescribeRaidArraysOutput, error) {
	var output opsworks.DescribeRaidArraysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeRdsDbInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeRdsDbInstancesFuture) Get(ctx workflow.Context) (*opsworks.DescribeRdsDbInstancesOutput, error) {
	var output opsworks.DescribeRdsDbInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeServiceErrorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeServiceErrorsFuture) Get(ctx workflow.Context) (*opsworks.DescribeServiceErrorsOutput, error) {
	var output opsworks.DescribeServiceErrorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeStackProvisioningParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeStackProvisioningParametersFuture) Get(ctx workflow.Context) (*opsworks.DescribeStackProvisioningParametersOutput, error) {
	var output opsworks.DescribeStackProvisioningParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeStackSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeStackSummaryFuture) Get(ctx workflow.Context) (*opsworks.DescribeStackSummaryOutput, error) {
	var output opsworks.DescribeStackSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeStacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeStacksFuture) Get(ctx workflow.Context) (*opsworks.DescribeStacksOutput, error) {
	var output opsworks.DescribeStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeTimeBasedAutoScalingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeTimeBasedAutoScalingFuture) Get(ctx workflow.Context) (*opsworks.DescribeTimeBasedAutoScalingOutput, error) {
	var output opsworks.DescribeTimeBasedAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeUserProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeUserProfilesFuture) Get(ctx workflow.Context) (*opsworks.DescribeUserProfilesOutput, error) {
	var output opsworks.DescribeUserProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDescribeVolumesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDescribeVolumesFuture) Get(ctx workflow.Context) (*opsworks.DescribeVolumesOutput, error) {
	var output opsworks.DescribeVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDetachElasticLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDetachElasticLoadBalancerFuture) Get(ctx workflow.Context) (*opsworks.DetachElasticLoadBalancerOutput, error) {
	var output opsworks.DetachElasticLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksDisassociateElasticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksDisassociateElasticIpFuture) Get(ctx workflow.Context) (*opsworks.DisassociateElasticIpOutput, error) {
	var output opsworks.DisassociateElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksGetHostnameSuggestionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksGetHostnameSuggestionFuture) Get(ctx workflow.Context) (*opsworks.GetHostnameSuggestionOutput, error) {
	var output opsworks.GetHostnameSuggestionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksGrantAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksGrantAccessFuture) Get(ctx workflow.Context) (*opsworks.GrantAccessOutput, error) {
	var output opsworks.GrantAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksListTagsFuture) Get(ctx workflow.Context) (*opsworks.ListTagsOutput, error) {
	var output opsworks.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksRebootInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksRebootInstanceFuture) Get(ctx workflow.Context) (*opsworks.RebootInstanceOutput, error) {
	var output opsworks.RebootInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksRegisterEcsClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksRegisterEcsClusterFuture) Get(ctx workflow.Context) (*opsworks.RegisterEcsClusterOutput, error) {
	var output opsworks.RegisterEcsClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksRegisterElasticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksRegisterElasticIpFuture) Get(ctx workflow.Context) (*opsworks.RegisterElasticIpOutput, error) {
	var output opsworks.RegisterElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksRegisterInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksRegisterInstanceFuture) Get(ctx workflow.Context) (*opsworks.RegisterInstanceOutput, error) {
	var output opsworks.RegisterInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksRegisterRdsDbInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksRegisterRdsDbInstanceFuture) Get(ctx workflow.Context) (*opsworks.RegisterRdsDbInstanceOutput, error) {
	var output opsworks.RegisterRdsDbInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksRegisterVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksRegisterVolumeFuture) Get(ctx workflow.Context) (*opsworks.RegisterVolumeOutput, error) {
	var output opsworks.RegisterVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksSetLoadBasedAutoScalingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksSetLoadBasedAutoScalingFuture) Get(ctx workflow.Context) (*opsworks.SetLoadBasedAutoScalingOutput, error) {
	var output opsworks.SetLoadBasedAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksSetPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksSetPermissionFuture) Get(ctx workflow.Context) (*opsworks.SetPermissionOutput, error) {
	var output opsworks.SetPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksSetTimeBasedAutoScalingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksSetTimeBasedAutoScalingFuture) Get(ctx workflow.Context) (*opsworks.SetTimeBasedAutoScalingOutput, error) {
	var output opsworks.SetTimeBasedAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksStartInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksStartInstanceFuture) Get(ctx workflow.Context) (*opsworks.StartInstanceOutput, error) {
	var output opsworks.StartInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksStartStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksStartStackFuture) Get(ctx workflow.Context) (*opsworks.StartStackOutput, error) {
	var output opsworks.StartStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksStopInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksStopInstanceFuture) Get(ctx workflow.Context) (*opsworks.StopInstanceOutput, error) {
	var output opsworks.StopInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksStopStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksStopStackFuture) Get(ctx workflow.Context) (*opsworks.StopStackOutput, error) {
	var output opsworks.StopStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksTagResourceFuture) Get(ctx workflow.Context) (*opsworks.TagResourceOutput, error) {
	var output opsworks.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksUnassignInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksUnassignInstanceFuture) Get(ctx workflow.Context) (*opsworks.UnassignInstanceOutput, error) {
	var output opsworks.UnassignInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksUnassignVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksUnassignVolumeFuture) Get(ctx workflow.Context) (*opsworks.UnassignVolumeOutput, error) {
	var output opsworks.UnassignVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksUntagResourceFuture) Get(ctx workflow.Context) (*opsworks.UntagResourceOutput, error) {
	var output opsworks.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksUpdateAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksUpdateAppFuture) Get(ctx workflow.Context) (*opsworks.UpdateAppOutput, error) {
	var output opsworks.UpdateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksUpdateElasticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksUpdateElasticIpFuture) Get(ctx workflow.Context) (*opsworks.UpdateElasticIpOutput, error) {
	var output opsworks.UpdateElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksUpdateInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksUpdateInstanceFuture) Get(ctx workflow.Context) (*opsworks.UpdateInstanceOutput, error) {
	var output opsworks.UpdateInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksUpdateLayerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksUpdateLayerFuture) Get(ctx workflow.Context) (*opsworks.UpdateLayerOutput, error) {
	var output opsworks.UpdateLayerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksUpdateMyUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksUpdateMyUserProfileFuture) Get(ctx workflow.Context) (*opsworks.UpdateMyUserProfileOutput, error) {
	var output opsworks.UpdateMyUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksUpdateRdsDbInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksUpdateRdsDbInstanceFuture) Get(ctx workflow.Context) (*opsworks.UpdateRdsDbInstanceOutput, error) {
	var output opsworks.UpdateRdsDbInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksUpdateStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksUpdateStackFuture) Get(ctx workflow.Context) (*opsworks.UpdateStackOutput, error) {
	var output opsworks.UpdateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksUpdateUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksUpdateUserProfileFuture) Get(ctx workflow.Context) (*opsworks.UpdateUserProfileOutput, error) {
	var output opsworks.UpdateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpsWorksUpdateVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpsWorksUpdateVolumeFuture) Get(ctx workflow.Context) (*opsworks.UpdateVolumeOutput, error) {
	var output opsworks.UpdateVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) AssignInstance(ctx workflow.Context, input *opsworks.AssignInstanceInput) (*opsworks.AssignInstanceOutput, error) {
	var output opsworks.AssignInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.AssignInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) AssignInstanceAsync(ctx workflow.Context, input *opsworks.AssignInstanceInput) *OpsWorksAssignInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.AssignInstance", input)
	return &OpsWorksAssignInstanceFuture{Future: future}
}

func (a *OpsWorksStub) AssignVolume(ctx workflow.Context, input *opsworks.AssignVolumeInput) (*opsworks.AssignVolumeOutput, error) {
	var output opsworks.AssignVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.AssignVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) AssignVolumeAsync(ctx workflow.Context, input *opsworks.AssignVolumeInput) *OpsWorksAssignVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.AssignVolume", input)
	return &OpsWorksAssignVolumeFuture{Future: future}
}

func (a *OpsWorksStub) AssociateElasticIp(ctx workflow.Context, input *opsworks.AssociateElasticIpInput) (*opsworks.AssociateElasticIpOutput, error) {
	var output opsworks.AssociateElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.AssociateElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) AssociateElasticIpAsync(ctx workflow.Context, input *opsworks.AssociateElasticIpInput) *OpsWorksAssociateElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.AssociateElasticIp", input)
	return &OpsWorksAssociateElasticIpFuture{Future: future}
}

func (a *OpsWorksStub) AttachElasticLoadBalancer(ctx workflow.Context, input *opsworks.AttachElasticLoadBalancerInput) (*opsworks.AttachElasticLoadBalancerOutput, error) {
	var output opsworks.AttachElasticLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.AttachElasticLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) AttachElasticLoadBalancerAsync(ctx workflow.Context, input *opsworks.AttachElasticLoadBalancerInput) *OpsWorksAttachElasticLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.AttachElasticLoadBalancer", input)
	return &OpsWorksAttachElasticLoadBalancerFuture{Future: future}
}

func (a *OpsWorksStub) CloneStack(ctx workflow.Context, input *opsworks.CloneStackInput) (*opsworks.CloneStackOutput, error) {
	var output opsworks.CloneStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CloneStack", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CloneStackAsync(ctx workflow.Context, input *opsworks.CloneStackInput) *OpsWorksCloneStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CloneStack", input)
	return &OpsWorksCloneStackFuture{Future: future}
}

func (a *OpsWorksStub) CreateApp(ctx workflow.Context, input *opsworks.CreateAppInput) (*opsworks.CreateAppOutput, error) {
	var output opsworks.CreateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CreateAppAsync(ctx workflow.Context, input *opsworks.CreateAppInput) *OpsWorksCreateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateApp", input)
	return &OpsWorksCreateAppFuture{Future: future}
}

func (a *OpsWorksStub) CreateDeployment(ctx workflow.Context, input *opsworks.CreateDeploymentInput) (*opsworks.CreateDeploymentOutput, error) {
	var output opsworks.CreateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CreateDeploymentAsync(ctx workflow.Context, input *opsworks.CreateDeploymentInput) *OpsWorksCreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateDeployment", input)
	return &OpsWorksCreateDeploymentFuture{Future: future}
}

func (a *OpsWorksStub) CreateInstance(ctx workflow.Context, input *opsworks.CreateInstanceInput) (*opsworks.CreateInstanceOutput, error) {
	var output opsworks.CreateInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CreateInstanceAsync(ctx workflow.Context, input *opsworks.CreateInstanceInput) *OpsWorksCreateInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateInstance", input)
	return &OpsWorksCreateInstanceFuture{Future: future}
}

func (a *OpsWorksStub) CreateLayer(ctx workflow.Context, input *opsworks.CreateLayerInput) (*opsworks.CreateLayerOutput, error) {
	var output opsworks.CreateLayerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateLayer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CreateLayerAsync(ctx workflow.Context, input *opsworks.CreateLayerInput) *OpsWorksCreateLayerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateLayer", input)
	return &OpsWorksCreateLayerFuture{Future: future}
}

func (a *OpsWorksStub) CreateStack(ctx workflow.Context, input *opsworks.CreateStackInput) (*opsworks.CreateStackOutput, error) {
	var output opsworks.CreateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CreateStackAsync(ctx workflow.Context, input *opsworks.CreateStackInput) *OpsWorksCreateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateStack", input)
	return &OpsWorksCreateStackFuture{Future: future}
}

func (a *OpsWorksStub) CreateUserProfile(ctx workflow.Context, input *opsworks.CreateUserProfileInput) (*opsworks.CreateUserProfileOutput, error) {
	var output opsworks.CreateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) CreateUserProfileAsync(ctx workflow.Context, input *opsworks.CreateUserProfileInput) *OpsWorksCreateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.CreateUserProfile", input)
	return &OpsWorksCreateUserProfileFuture{Future: future}
}

func (a *OpsWorksStub) DeleteApp(ctx workflow.Context, input *opsworks.DeleteAppInput) (*opsworks.DeleteAppOutput, error) {
	var output opsworks.DeleteAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteApp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeleteAppAsync(ctx workflow.Context, input *opsworks.DeleteAppInput) *OpsWorksDeleteAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteApp", input)
	return &OpsWorksDeleteAppFuture{Future: future}
}

func (a *OpsWorksStub) DeleteInstance(ctx workflow.Context, input *opsworks.DeleteInstanceInput) (*opsworks.DeleteInstanceOutput, error) {
	var output opsworks.DeleteInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeleteInstanceAsync(ctx workflow.Context, input *opsworks.DeleteInstanceInput) *OpsWorksDeleteInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteInstance", input)
	return &OpsWorksDeleteInstanceFuture{Future: future}
}

func (a *OpsWorksStub) DeleteLayer(ctx workflow.Context, input *opsworks.DeleteLayerInput) (*opsworks.DeleteLayerOutput, error) {
	var output opsworks.DeleteLayerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteLayer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeleteLayerAsync(ctx workflow.Context, input *opsworks.DeleteLayerInput) *OpsWorksDeleteLayerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteLayer", input)
	return &OpsWorksDeleteLayerFuture{Future: future}
}

func (a *OpsWorksStub) DeleteStack(ctx workflow.Context, input *opsworks.DeleteStackInput) (*opsworks.DeleteStackOutput, error) {
	var output opsworks.DeleteStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteStack", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeleteStackAsync(ctx workflow.Context, input *opsworks.DeleteStackInput) *OpsWorksDeleteStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteStack", input)
	return &OpsWorksDeleteStackFuture{Future: future}
}

func (a *OpsWorksStub) DeleteUserProfile(ctx workflow.Context, input *opsworks.DeleteUserProfileInput) (*opsworks.DeleteUserProfileOutput, error) {
	var output opsworks.DeleteUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeleteUserProfileAsync(ctx workflow.Context, input *opsworks.DeleteUserProfileInput) *OpsWorksDeleteUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeleteUserProfile", input)
	return &OpsWorksDeleteUserProfileFuture{Future: future}
}

func (a *OpsWorksStub) DeregisterEcsCluster(ctx workflow.Context, input *opsworks.DeregisterEcsClusterInput) (*opsworks.DeregisterEcsClusterOutput, error) {
	var output opsworks.DeregisterEcsClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterEcsCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeregisterEcsClusterAsync(ctx workflow.Context, input *opsworks.DeregisterEcsClusterInput) *OpsWorksDeregisterEcsClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterEcsCluster", input)
	return &OpsWorksDeregisterEcsClusterFuture{Future: future}
}

func (a *OpsWorksStub) DeregisterElasticIp(ctx workflow.Context, input *opsworks.DeregisterElasticIpInput) (*opsworks.DeregisterElasticIpOutput, error) {
	var output opsworks.DeregisterElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeregisterElasticIpAsync(ctx workflow.Context, input *opsworks.DeregisterElasticIpInput) *OpsWorksDeregisterElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterElasticIp", input)
	return &OpsWorksDeregisterElasticIpFuture{Future: future}
}

func (a *OpsWorksStub) DeregisterInstance(ctx workflow.Context, input *opsworks.DeregisterInstanceInput) (*opsworks.DeregisterInstanceOutput, error) {
	var output opsworks.DeregisterInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeregisterInstanceAsync(ctx workflow.Context, input *opsworks.DeregisterInstanceInput) *OpsWorksDeregisterInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterInstance", input)
	return &OpsWorksDeregisterInstanceFuture{Future: future}
}

func (a *OpsWorksStub) DeregisterRdsDbInstance(ctx workflow.Context, input *opsworks.DeregisterRdsDbInstanceInput) (*opsworks.DeregisterRdsDbInstanceOutput, error) {
	var output opsworks.DeregisterRdsDbInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterRdsDbInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeregisterRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.DeregisterRdsDbInstanceInput) *OpsWorksDeregisterRdsDbInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterRdsDbInstance", input)
	return &OpsWorksDeregisterRdsDbInstanceFuture{Future: future}
}

func (a *OpsWorksStub) DeregisterVolume(ctx workflow.Context, input *opsworks.DeregisterVolumeInput) (*opsworks.DeregisterVolumeOutput, error) {
	var output opsworks.DeregisterVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DeregisterVolumeAsync(ctx workflow.Context, input *opsworks.DeregisterVolumeInput) *OpsWorksDeregisterVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DeregisterVolume", input)
	return &OpsWorksDeregisterVolumeFuture{Future: future}
}

func (a *OpsWorksStub) DescribeAgentVersions(ctx workflow.Context, input *opsworks.DescribeAgentVersionsInput) (*opsworks.DescribeAgentVersionsOutput, error) {
	var output opsworks.DescribeAgentVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeAgentVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeAgentVersionsAsync(ctx workflow.Context, input *opsworks.DescribeAgentVersionsInput) *OpsWorksDescribeAgentVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeAgentVersions", input)
	return &OpsWorksDescribeAgentVersionsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeApps(ctx workflow.Context, input *opsworks.DescribeAppsInput) (*opsworks.DescribeAppsOutput, error) {
	var output opsworks.DescribeAppsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeApps", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeAppsAsync(ctx workflow.Context, input *opsworks.DescribeAppsInput) *OpsWorksDescribeAppsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeApps", input)
	return &OpsWorksDescribeAppsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeCommands(ctx workflow.Context, input *opsworks.DescribeCommandsInput) (*opsworks.DescribeCommandsOutput, error) {
	var output opsworks.DescribeCommandsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeCommands", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeCommandsAsync(ctx workflow.Context, input *opsworks.DescribeCommandsInput) *OpsWorksDescribeCommandsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeCommands", input)
	return &OpsWorksDescribeCommandsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeDeployments(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) (*opsworks.DescribeDeploymentsOutput, error) {
	var output opsworks.DescribeDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeDeploymentsAsync(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) *OpsWorksDescribeDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeDeployments", input)
	return &OpsWorksDescribeDeploymentsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeEcsClusters(ctx workflow.Context, input *opsworks.DescribeEcsClustersInput) (*opsworks.DescribeEcsClustersOutput, error) {
	var output opsworks.DescribeEcsClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeEcsClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeEcsClustersAsync(ctx workflow.Context, input *opsworks.DescribeEcsClustersInput) *OpsWorksDescribeEcsClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeEcsClusters", input)
	return &OpsWorksDescribeEcsClustersFuture{Future: future}
}

func (a *OpsWorksStub) DescribeElasticIps(ctx workflow.Context, input *opsworks.DescribeElasticIpsInput) (*opsworks.DescribeElasticIpsOutput, error) {
	var output opsworks.DescribeElasticIpsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeElasticIps", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeElasticIpsAsync(ctx workflow.Context, input *opsworks.DescribeElasticIpsInput) *OpsWorksDescribeElasticIpsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeElasticIps", input)
	return &OpsWorksDescribeElasticIpsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeElasticLoadBalancers(ctx workflow.Context, input *opsworks.DescribeElasticLoadBalancersInput) (*opsworks.DescribeElasticLoadBalancersOutput, error) {
	var output opsworks.DescribeElasticLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeElasticLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeElasticLoadBalancersAsync(ctx workflow.Context, input *opsworks.DescribeElasticLoadBalancersInput) *OpsWorksDescribeElasticLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeElasticLoadBalancers", input)
	return &OpsWorksDescribeElasticLoadBalancersFuture{Future: future}
}

func (a *OpsWorksStub) DescribeInstances(ctx workflow.Context, input *opsworks.DescribeInstancesInput) (*opsworks.DescribeInstancesOutput, error) {
	var output opsworks.DescribeInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeInstancesAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *OpsWorksDescribeInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeInstances", input)
	return &OpsWorksDescribeInstancesFuture{Future: future}
}

func (a *OpsWorksStub) DescribeLayers(ctx workflow.Context, input *opsworks.DescribeLayersInput) (*opsworks.DescribeLayersOutput, error) {
	var output opsworks.DescribeLayersOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeLayers", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeLayersAsync(ctx workflow.Context, input *opsworks.DescribeLayersInput) *OpsWorksDescribeLayersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeLayers", input)
	return &OpsWorksDescribeLayersFuture{Future: future}
}

func (a *OpsWorksStub) DescribeLoadBasedAutoScaling(ctx workflow.Context, input *opsworks.DescribeLoadBasedAutoScalingInput) (*opsworks.DescribeLoadBasedAutoScalingOutput, error) {
	var output opsworks.DescribeLoadBasedAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeLoadBasedAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeLoadBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.DescribeLoadBasedAutoScalingInput) *OpsWorksDescribeLoadBasedAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeLoadBasedAutoScaling", input)
	return &OpsWorksDescribeLoadBasedAutoScalingFuture{Future: future}
}

func (a *OpsWorksStub) DescribeMyUserProfile(ctx workflow.Context, input *opsworks.DescribeMyUserProfileInput) (*opsworks.DescribeMyUserProfileOutput, error) {
	var output opsworks.DescribeMyUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeMyUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeMyUserProfileAsync(ctx workflow.Context, input *opsworks.DescribeMyUserProfileInput) *OpsWorksDescribeMyUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeMyUserProfile", input)
	return &OpsWorksDescribeMyUserProfileFuture{Future: future}
}

func (a *OpsWorksStub) DescribeOperatingSystems(ctx workflow.Context, input *opsworks.DescribeOperatingSystemsInput) (*opsworks.DescribeOperatingSystemsOutput, error) {
	var output opsworks.DescribeOperatingSystemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeOperatingSystems", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeOperatingSystemsAsync(ctx workflow.Context, input *opsworks.DescribeOperatingSystemsInput) *OpsWorksDescribeOperatingSystemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeOperatingSystems", input)
	return &OpsWorksDescribeOperatingSystemsFuture{Future: future}
}

func (a *OpsWorksStub) DescribePermissions(ctx workflow.Context, input *opsworks.DescribePermissionsInput) (*opsworks.DescribePermissionsOutput, error) {
	var output opsworks.DescribePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribePermissionsAsync(ctx workflow.Context, input *opsworks.DescribePermissionsInput) *OpsWorksDescribePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribePermissions", input)
	return &OpsWorksDescribePermissionsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeRaidArrays(ctx workflow.Context, input *opsworks.DescribeRaidArraysInput) (*opsworks.DescribeRaidArraysOutput, error) {
	var output opsworks.DescribeRaidArraysOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeRaidArrays", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeRaidArraysAsync(ctx workflow.Context, input *opsworks.DescribeRaidArraysInput) *OpsWorksDescribeRaidArraysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeRaidArrays", input)
	return &OpsWorksDescribeRaidArraysFuture{Future: future}
}

func (a *OpsWorksStub) DescribeRdsDbInstances(ctx workflow.Context, input *opsworks.DescribeRdsDbInstancesInput) (*opsworks.DescribeRdsDbInstancesOutput, error) {
	var output opsworks.DescribeRdsDbInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeRdsDbInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeRdsDbInstancesAsync(ctx workflow.Context, input *opsworks.DescribeRdsDbInstancesInput) *OpsWorksDescribeRdsDbInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeRdsDbInstances", input)
	return &OpsWorksDescribeRdsDbInstancesFuture{Future: future}
}

func (a *OpsWorksStub) DescribeServiceErrors(ctx workflow.Context, input *opsworks.DescribeServiceErrorsInput) (*opsworks.DescribeServiceErrorsOutput, error) {
	var output opsworks.DescribeServiceErrorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeServiceErrors", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeServiceErrorsAsync(ctx workflow.Context, input *opsworks.DescribeServiceErrorsInput) *OpsWorksDescribeServiceErrorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeServiceErrors", input)
	return &OpsWorksDescribeServiceErrorsFuture{Future: future}
}

func (a *OpsWorksStub) DescribeStackProvisioningParameters(ctx workflow.Context, input *opsworks.DescribeStackProvisioningParametersInput) (*opsworks.DescribeStackProvisioningParametersOutput, error) {
	var output opsworks.DescribeStackProvisioningParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeStackProvisioningParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeStackProvisioningParametersAsync(ctx workflow.Context, input *opsworks.DescribeStackProvisioningParametersInput) *OpsWorksDescribeStackProvisioningParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeStackProvisioningParameters", input)
	return &OpsWorksDescribeStackProvisioningParametersFuture{Future: future}
}

func (a *OpsWorksStub) DescribeStackSummary(ctx workflow.Context, input *opsworks.DescribeStackSummaryInput) (*opsworks.DescribeStackSummaryOutput, error) {
	var output opsworks.DescribeStackSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeStackSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeStackSummaryAsync(ctx workflow.Context, input *opsworks.DescribeStackSummaryInput) *OpsWorksDescribeStackSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeStackSummary", input)
	return &OpsWorksDescribeStackSummaryFuture{Future: future}
}

func (a *OpsWorksStub) DescribeStacks(ctx workflow.Context, input *opsworks.DescribeStacksInput) (*opsworks.DescribeStacksOutput, error) {
	var output opsworks.DescribeStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeStacksAsync(ctx workflow.Context, input *opsworks.DescribeStacksInput) *OpsWorksDescribeStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeStacks", input)
	return &OpsWorksDescribeStacksFuture{Future: future}
}

func (a *OpsWorksStub) DescribeTimeBasedAutoScaling(ctx workflow.Context, input *opsworks.DescribeTimeBasedAutoScalingInput) (*opsworks.DescribeTimeBasedAutoScalingOutput, error) {
	var output opsworks.DescribeTimeBasedAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeTimeBasedAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeTimeBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.DescribeTimeBasedAutoScalingInput) *OpsWorksDescribeTimeBasedAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeTimeBasedAutoScaling", input)
	return &OpsWorksDescribeTimeBasedAutoScalingFuture{Future: future}
}

func (a *OpsWorksStub) DescribeUserProfiles(ctx workflow.Context, input *opsworks.DescribeUserProfilesInput) (*opsworks.DescribeUserProfilesOutput, error) {
	var output opsworks.DescribeUserProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeUserProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeUserProfilesAsync(ctx workflow.Context, input *opsworks.DescribeUserProfilesInput) *OpsWorksDescribeUserProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeUserProfiles", input)
	return &OpsWorksDescribeUserProfilesFuture{Future: future}
}

func (a *OpsWorksStub) DescribeVolumes(ctx workflow.Context, input *opsworks.DescribeVolumesInput) (*opsworks.DescribeVolumesOutput, error) {
	var output opsworks.DescribeVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DescribeVolumesAsync(ctx workflow.Context, input *opsworks.DescribeVolumesInput) *OpsWorksDescribeVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DescribeVolumes", input)
	return &OpsWorksDescribeVolumesFuture{Future: future}
}

func (a *OpsWorksStub) DetachElasticLoadBalancer(ctx workflow.Context, input *opsworks.DetachElasticLoadBalancerInput) (*opsworks.DetachElasticLoadBalancerOutput, error) {
	var output opsworks.DetachElasticLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DetachElasticLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DetachElasticLoadBalancerAsync(ctx workflow.Context, input *opsworks.DetachElasticLoadBalancerInput) *OpsWorksDetachElasticLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DetachElasticLoadBalancer", input)
	return &OpsWorksDetachElasticLoadBalancerFuture{Future: future}
}

func (a *OpsWorksStub) DisassociateElasticIp(ctx workflow.Context, input *opsworks.DisassociateElasticIpInput) (*opsworks.DisassociateElasticIpOutput, error) {
	var output opsworks.DisassociateElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.DisassociateElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) DisassociateElasticIpAsync(ctx workflow.Context, input *opsworks.DisassociateElasticIpInput) *OpsWorksDisassociateElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.DisassociateElasticIp", input)
	return &OpsWorksDisassociateElasticIpFuture{Future: future}
}

func (a *OpsWorksStub) GetHostnameSuggestion(ctx workflow.Context, input *opsworks.GetHostnameSuggestionInput) (*opsworks.GetHostnameSuggestionOutput, error) {
	var output opsworks.GetHostnameSuggestionOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.GetHostnameSuggestion", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) GetHostnameSuggestionAsync(ctx workflow.Context, input *opsworks.GetHostnameSuggestionInput) *OpsWorksGetHostnameSuggestionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.GetHostnameSuggestion", input)
	return &OpsWorksGetHostnameSuggestionFuture{Future: future}
}

func (a *OpsWorksStub) GrantAccess(ctx workflow.Context, input *opsworks.GrantAccessInput) (*opsworks.GrantAccessOutput, error) {
	var output opsworks.GrantAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.GrantAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) GrantAccessAsync(ctx workflow.Context, input *opsworks.GrantAccessInput) *OpsWorksGrantAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.GrantAccess", input)
	return &OpsWorksGrantAccessFuture{Future: future}
}

func (a *OpsWorksStub) ListTags(ctx workflow.Context, input *opsworks.ListTagsInput) (*opsworks.ListTagsOutput, error) {
	var output opsworks.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) ListTagsAsync(ctx workflow.Context, input *opsworks.ListTagsInput) *OpsWorksListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.ListTags", input)
	return &OpsWorksListTagsFuture{Future: future}
}

func (a *OpsWorksStub) RebootInstance(ctx workflow.Context, input *opsworks.RebootInstanceInput) (*opsworks.RebootInstanceOutput, error) {
	var output opsworks.RebootInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.RebootInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) RebootInstanceAsync(ctx workflow.Context, input *opsworks.RebootInstanceInput) *OpsWorksRebootInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.RebootInstance", input)
	return &OpsWorksRebootInstanceFuture{Future: future}
}

func (a *OpsWorksStub) RegisterEcsCluster(ctx workflow.Context, input *opsworks.RegisterEcsClusterInput) (*opsworks.RegisterEcsClusterOutput, error) {
	var output opsworks.RegisterEcsClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterEcsCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) RegisterEcsClusterAsync(ctx workflow.Context, input *opsworks.RegisterEcsClusterInput) *OpsWorksRegisterEcsClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterEcsCluster", input)
	return &OpsWorksRegisterEcsClusterFuture{Future: future}
}

func (a *OpsWorksStub) RegisterElasticIp(ctx workflow.Context, input *opsworks.RegisterElasticIpInput) (*opsworks.RegisterElasticIpOutput, error) {
	var output opsworks.RegisterElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) RegisterElasticIpAsync(ctx workflow.Context, input *opsworks.RegisterElasticIpInput) *OpsWorksRegisterElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterElasticIp", input)
	return &OpsWorksRegisterElasticIpFuture{Future: future}
}

func (a *OpsWorksStub) RegisterInstance(ctx workflow.Context, input *opsworks.RegisterInstanceInput) (*opsworks.RegisterInstanceOutput, error) {
	var output opsworks.RegisterInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) RegisterInstanceAsync(ctx workflow.Context, input *opsworks.RegisterInstanceInput) *OpsWorksRegisterInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterInstance", input)
	return &OpsWorksRegisterInstanceFuture{Future: future}
}

func (a *OpsWorksStub) RegisterRdsDbInstance(ctx workflow.Context, input *opsworks.RegisterRdsDbInstanceInput) (*opsworks.RegisterRdsDbInstanceOutput, error) {
	var output opsworks.RegisterRdsDbInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterRdsDbInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) RegisterRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.RegisterRdsDbInstanceInput) *OpsWorksRegisterRdsDbInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterRdsDbInstance", input)
	return &OpsWorksRegisterRdsDbInstanceFuture{Future: future}
}

func (a *OpsWorksStub) RegisterVolume(ctx workflow.Context, input *opsworks.RegisterVolumeInput) (*opsworks.RegisterVolumeOutput, error) {
	var output opsworks.RegisterVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) RegisterVolumeAsync(ctx workflow.Context, input *opsworks.RegisterVolumeInput) *OpsWorksRegisterVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.RegisterVolume", input)
	return &OpsWorksRegisterVolumeFuture{Future: future}
}

func (a *OpsWorksStub) SetLoadBasedAutoScaling(ctx workflow.Context, input *opsworks.SetLoadBasedAutoScalingInput) (*opsworks.SetLoadBasedAutoScalingOutput, error) {
	var output opsworks.SetLoadBasedAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.SetLoadBasedAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) SetLoadBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.SetLoadBasedAutoScalingInput) *OpsWorksSetLoadBasedAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.SetLoadBasedAutoScaling", input)
	return &OpsWorksSetLoadBasedAutoScalingFuture{Future: future}
}

func (a *OpsWorksStub) SetPermission(ctx workflow.Context, input *opsworks.SetPermissionInput) (*opsworks.SetPermissionOutput, error) {
	var output opsworks.SetPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.SetPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) SetPermissionAsync(ctx workflow.Context, input *opsworks.SetPermissionInput) *OpsWorksSetPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.SetPermission", input)
	return &OpsWorksSetPermissionFuture{Future: future}
}

func (a *OpsWorksStub) SetTimeBasedAutoScaling(ctx workflow.Context, input *opsworks.SetTimeBasedAutoScalingInput) (*opsworks.SetTimeBasedAutoScalingOutput, error) {
	var output opsworks.SetTimeBasedAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.SetTimeBasedAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) SetTimeBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.SetTimeBasedAutoScalingInput) *OpsWorksSetTimeBasedAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.SetTimeBasedAutoScaling", input)
	return &OpsWorksSetTimeBasedAutoScalingFuture{Future: future}
}

func (a *OpsWorksStub) StartInstance(ctx workflow.Context, input *opsworks.StartInstanceInput) (*opsworks.StartInstanceOutput, error) {
	var output opsworks.StartInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.StartInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) StartInstanceAsync(ctx workflow.Context, input *opsworks.StartInstanceInput) *OpsWorksStartInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.StartInstance", input)
	return &OpsWorksStartInstanceFuture{Future: future}
}

func (a *OpsWorksStub) StartStack(ctx workflow.Context, input *opsworks.StartStackInput) (*opsworks.StartStackOutput, error) {
	var output opsworks.StartStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.StartStack", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) StartStackAsync(ctx workflow.Context, input *opsworks.StartStackInput) *OpsWorksStartStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.StartStack", input)
	return &OpsWorksStartStackFuture{Future: future}
}

func (a *OpsWorksStub) StopInstance(ctx workflow.Context, input *opsworks.StopInstanceInput) (*opsworks.StopInstanceOutput, error) {
	var output opsworks.StopInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.StopInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) StopInstanceAsync(ctx workflow.Context, input *opsworks.StopInstanceInput) *OpsWorksStopInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.StopInstance", input)
	return &OpsWorksStopInstanceFuture{Future: future}
}

func (a *OpsWorksStub) StopStack(ctx workflow.Context, input *opsworks.StopStackInput) (*opsworks.StopStackOutput, error) {
	var output opsworks.StopStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.StopStack", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) StopStackAsync(ctx workflow.Context, input *opsworks.StopStackInput) *OpsWorksStopStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.StopStack", input)
	return &OpsWorksStopStackFuture{Future: future}
}

func (a *OpsWorksStub) TagResource(ctx workflow.Context, input *opsworks.TagResourceInput) (*opsworks.TagResourceOutput, error) {
	var output opsworks.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) TagResourceAsync(ctx workflow.Context, input *opsworks.TagResourceInput) *OpsWorksTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.TagResource", input)
	return &OpsWorksTagResourceFuture{Future: future}
}

func (a *OpsWorksStub) UnassignInstance(ctx workflow.Context, input *opsworks.UnassignInstanceInput) (*opsworks.UnassignInstanceOutput, error) {
	var output opsworks.UnassignInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UnassignInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UnassignInstanceAsync(ctx workflow.Context, input *opsworks.UnassignInstanceInput) *OpsWorksUnassignInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UnassignInstance", input)
	return &OpsWorksUnassignInstanceFuture{Future: future}
}

func (a *OpsWorksStub) UnassignVolume(ctx workflow.Context, input *opsworks.UnassignVolumeInput) (*opsworks.UnassignVolumeOutput, error) {
	var output opsworks.UnassignVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UnassignVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UnassignVolumeAsync(ctx workflow.Context, input *opsworks.UnassignVolumeInput) *OpsWorksUnassignVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UnassignVolume", input)
	return &OpsWorksUnassignVolumeFuture{Future: future}
}

func (a *OpsWorksStub) UntagResource(ctx workflow.Context, input *opsworks.UntagResourceInput) (*opsworks.UntagResourceOutput, error) {
	var output opsworks.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UntagResourceAsync(ctx workflow.Context, input *opsworks.UntagResourceInput) *OpsWorksUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UntagResource", input)
	return &OpsWorksUntagResourceFuture{Future: future}
}

func (a *OpsWorksStub) UpdateApp(ctx workflow.Context, input *opsworks.UpdateAppInput) (*opsworks.UpdateAppOutput, error) {
	var output opsworks.UpdateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateAppAsync(ctx workflow.Context, input *opsworks.UpdateAppInput) *OpsWorksUpdateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateApp", input)
	return &OpsWorksUpdateAppFuture{Future: future}
}

func (a *OpsWorksStub) UpdateElasticIp(ctx workflow.Context, input *opsworks.UpdateElasticIpInput) (*opsworks.UpdateElasticIpOutput, error) {
	var output opsworks.UpdateElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateElasticIpAsync(ctx workflow.Context, input *opsworks.UpdateElasticIpInput) *OpsWorksUpdateElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateElasticIp", input)
	return &OpsWorksUpdateElasticIpFuture{Future: future}
}

func (a *OpsWorksStub) UpdateInstance(ctx workflow.Context, input *opsworks.UpdateInstanceInput) (*opsworks.UpdateInstanceOutput, error) {
	var output opsworks.UpdateInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateInstanceAsync(ctx workflow.Context, input *opsworks.UpdateInstanceInput) *OpsWorksUpdateInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateInstance", input)
	return &OpsWorksUpdateInstanceFuture{Future: future}
}

func (a *OpsWorksStub) UpdateLayer(ctx workflow.Context, input *opsworks.UpdateLayerInput) (*opsworks.UpdateLayerOutput, error) {
	var output opsworks.UpdateLayerOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateLayer", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateLayerAsync(ctx workflow.Context, input *opsworks.UpdateLayerInput) *OpsWorksUpdateLayerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateLayer", input)
	return &OpsWorksUpdateLayerFuture{Future: future}
}

func (a *OpsWorksStub) UpdateMyUserProfile(ctx workflow.Context, input *opsworks.UpdateMyUserProfileInput) (*opsworks.UpdateMyUserProfileOutput, error) {
	var output opsworks.UpdateMyUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateMyUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateMyUserProfileAsync(ctx workflow.Context, input *opsworks.UpdateMyUserProfileInput) *OpsWorksUpdateMyUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateMyUserProfile", input)
	return &OpsWorksUpdateMyUserProfileFuture{Future: future}
}

func (a *OpsWorksStub) UpdateRdsDbInstance(ctx workflow.Context, input *opsworks.UpdateRdsDbInstanceInput) (*opsworks.UpdateRdsDbInstanceOutput, error) {
	var output opsworks.UpdateRdsDbInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateRdsDbInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.UpdateRdsDbInstanceInput) *OpsWorksUpdateRdsDbInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateRdsDbInstance", input)
	return &OpsWorksUpdateRdsDbInstanceFuture{Future: future}
}

func (a *OpsWorksStub) UpdateStack(ctx workflow.Context, input *opsworks.UpdateStackInput) (*opsworks.UpdateStackOutput, error) {
	var output opsworks.UpdateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateStackAsync(ctx workflow.Context, input *opsworks.UpdateStackInput) *OpsWorksUpdateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateStack", input)
	return &OpsWorksUpdateStackFuture{Future: future}
}

func (a *OpsWorksStub) UpdateUserProfile(ctx workflow.Context, input *opsworks.UpdateUserProfileInput) (*opsworks.UpdateUserProfileOutput, error) {
	var output opsworks.UpdateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateUserProfileAsync(ctx workflow.Context, input *opsworks.UpdateUserProfileInput) *OpsWorksUpdateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateUserProfile", input)
	return &OpsWorksUpdateUserProfileFuture{Future: future}
}

func (a *OpsWorksStub) UpdateVolume(ctx workflow.Context, input *opsworks.UpdateVolumeInput) (*opsworks.UpdateVolumeOutput, error) {
	var output opsworks.UpdateVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *OpsWorksStub) UpdateVolumeAsync(ctx workflow.Context, input *opsworks.UpdateVolumeInput) *OpsWorksUpdateVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.UpdateVolume", input)
	return &OpsWorksUpdateVolumeFuture{Future: future}
}

func (a *OpsWorksStub) WaitUntilAppExists(ctx workflow.Context, input *opsworks.DescribeAppsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilAppExists", input).Get(ctx, nil)
}

func (a *OpsWorksStub) WaitUntilAppExistsAsync(ctx workflow.Context, input *opsworks.DescribeAppsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilAppExists", input)
	return NewVoidFuture(future)
}

func (a *OpsWorksStub) WaitUntilDeploymentSuccessful(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilDeploymentSuccessful", input).Get(ctx, nil)
}

func (a *OpsWorksStub) WaitUntilDeploymentSuccessfulAsync(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilDeploymentSuccessful", input)
	return NewVoidFuture(future)
}

func (a *OpsWorksStub) WaitUntilInstanceOnline(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceOnline", input).Get(ctx, nil)
}

func (a *OpsWorksStub) WaitUntilInstanceOnlineAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceOnline", input)
	return NewVoidFuture(future)
}

func (a *OpsWorksStub) WaitUntilInstanceRegistered(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceRegistered", input).Get(ctx, nil)
}

func (a *OpsWorksStub) WaitUntilInstanceRegisteredAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceRegistered", input)
	return NewVoidFuture(future)
}

func (a *OpsWorksStub) WaitUntilInstanceStopped(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceStopped", input).Get(ctx, nil)
}

func (a *OpsWorksStub) WaitUntilInstanceStoppedAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceStopped", input)
	return NewVoidFuture(future)
}

func (a *OpsWorksStub) WaitUntilInstanceTerminated(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceTerminated", input).Get(ctx, nil)
}

func (a *OpsWorksStub) WaitUntilInstanceTerminatedAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.opsworks.WaitUntilInstanceTerminated", input)
	return NewVoidFuture(future)
}
