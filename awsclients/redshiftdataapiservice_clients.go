// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/redshiftdataapiservice"
	"go.temporal.io/sdk/workflow"
)

type RedshiftDataAPIServiceClient interface {
	CancelStatement(ctx workflow.Context, input *redshiftdataapiservice.CancelStatementInput) (*redshiftdataapiservice.CancelStatementOutput, error)
	CancelStatementAsync(ctx workflow.Context, input *redshiftdataapiservice.CancelStatementInput) *RedshiftdataapiserviceCancelStatementFuture

	DescribeStatement(ctx workflow.Context, input *redshiftdataapiservice.DescribeStatementInput) (*redshiftdataapiservice.DescribeStatementOutput, error)
	DescribeStatementAsync(ctx workflow.Context, input *redshiftdataapiservice.DescribeStatementInput) *RedshiftdataapiserviceDescribeStatementFuture

	DescribeTable(ctx workflow.Context, input *redshiftdataapiservice.DescribeTableInput) (*redshiftdataapiservice.DescribeTableOutput, error)
	DescribeTableAsync(ctx workflow.Context, input *redshiftdataapiservice.DescribeTableInput) *RedshiftdataapiserviceDescribeTableFuture

	ExecuteStatement(ctx workflow.Context, input *redshiftdataapiservice.ExecuteStatementInput) (*redshiftdataapiservice.ExecuteStatementOutput, error)
	ExecuteStatementAsync(ctx workflow.Context, input *redshiftdataapiservice.ExecuteStatementInput) *RedshiftdataapiserviceExecuteStatementFuture

	GetStatementResult(ctx workflow.Context, input *redshiftdataapiservice.GetStatementResultInput) (*redshiftdataapiservice.GetStatementResultOutput, error)
	GetStatementResultAsync(ctx workflow.Context, input *redshiftdataapiservice.GetStatementResultInput) *RedshiftdataapiserviceGetStatementResultFuture

	ListDatabases(ctx workflow.Context, input *redshiftdataapiservice.ListDatabasesInput) (*redshiftdataapiservice.ListDatabasesOutput, error)
	ListDatabasesAsync(ctx workflow.Context, input *redshiftdataapiservice.ListDatabasesInput) *RedshiftdataapiserviceListDatabasesFuture

	ListSchemas(ctx workflow.Context, input *redshiftdataapiservice.ListSchemasInput) (*redshiftdataapiservice.ListSchemasOutput, error)
	ListSchemasAsync(ctx workflow.Context, input *redshiftdataapiservice.ListSchemasInput) *RedshiftdataapiserviceListSchemasFuture

	ListStatements(ctx workflow.Context, input *redshiftdataapiservice.ListStatementsInput) (*redshiftdataapiservice.ListStatementsOutput, error)
	ListStatementsAsync(ctx workflow.Context, input *redshiftdataapiservice.ListStatementsInput) *RedshiftdataapiserviceListStatementsFuture

	ListTables(ctx workflow.Context, input *redshiftdataapiservice.ListTablesInput) (*redshiftdataapiservice.ListTablesOutput, error)
	ListTablesAsync(ctx workflow.Context, input *redshiftdataapiservice.ListTablesInput) *RedshiftdataapiserviceListTablesFuture
}

type RedshiftDataAPIServiceStub struct{}

func NewRedshiftDataAPIServiceStub() RedshiftDataAPIServiceClient {
	return &RedshiftDataAPIServiceStub{}
}

type RedshiftdataapiserviceCancelStatementFuture struct {
	Future workflow.Future
}

func (r *RedshiftdataapiserviceCancelStatementFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.CancelStatementOutput, error) {
	var output redshiftdataapiservice.CancelStatementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftdataapiserviceDescribeStatementFuture struct {
	Future workflow.Future
}

func (r *RedshiftdataapiserviceDescribeStatementFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.DescribeStatementOutput, error) {
	var output redshiftdataapiservice.DescribeStatementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftdataapiserviceDescribeTableFuture struct {
	Future workflow.Future
}

func (r *RedshiftdataapiserviceDescribeTableFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.DescribeTableOutput, error) {
	var output redshiftdataapiservice.DescribeTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftdataapiserviceExecuteStatementFuture struct {
	Future workflow.Future
}

func (r *RedshiftdataapiserviceExecuteStatementFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.ExecuteStatementOutput, error) {
	var output redshiftdataapiservice.ExecuteStatementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftdataapiserviceGetStatementResultFuture struct {
	Future workflow.Future
}

func (r *RedshiftdataapiserviceGetStatementResultFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.GetStatementResultOutput, error) {
	var output redshiftdataapiservice.GetStatementResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftdataapiserviceListDatabasesFuture struct {
	Future workflow.Future
}

func (r *RedshiftdataapiserviceListDatabasesFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.ListDatabasesOutput, error) {
	var output redshiftdataapiservice.ListDatabasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftdataapiserviceListSchemasFuture struct {
	Future workflow.Future
}

func (r *RedshiftdataapiserviceListSchemasFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.ListSchemasOutput, error) {
	var output redshiftdataapiservice.ListSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftdataapiserviceListStatementsFuture struct {
	Future workflow.Future
}

func (r *RedshiftdataapiserviceListStatementsFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.ListStatementsOutput, error) {
	var output redshiftdataapiservice.ListStatementsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftdataapiserviceListTablesFuture struct {
	Future workflow.Future
}

func (r *RedshiftdataapiserviceListTablesFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.ListTablesOutput, error) {
	var output redshiftdataapiservice.ListTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *RedshiftDataAPIServiceStub) CancelStatement(ctx workflow.Context, input *redshiftdataapiservice.CancelStatementInput) (*redshiftdataapiservice.CancelStatementOutput, error) {
	var output redshiftdataapiservice.CancelStatementOutput
	err := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.CancelStatement", input).Get(ctx, &output)
	return &output, err
}

func (a *RedshiftDataAPIServiceStub) CancelStatementAsync(ctx workflow.Context, input *redshiftdataapiservice.CancelStatementInput) *RedshiftdataapiserviceCancelStatementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.CancelStatement", input)
	return &RedshiftdataapiserviceCancelStatementFuture{Future: future}
}

func (a *RedshiftDataAPIServiceStub) DescribeStatement(ctx workflow.Context, input *redshiftdataapiservice.DescribeStatementInput) (*redshiftdataapiservice.DescribeStatementOutput, error) {
	var output redshiftdataapiservice.DescribeStatementOutput
	err := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.DescribeStatement", input).Get(ctx, &output)
	return &output, err
}

func (a *RedshiftDataAPIServiceStub) DescribeStatementAsync(ctx workflow.Context, input *redshiftdataapiservice.DescribeStatementInput) *RedshiftdataapiserviceDescribeStatementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.DescribeStatement", input)
	return &RedshiftdataapiserviceDescribeStatementFuture{Future: future}
}

func (a *RedshiftDataAPIServiceStub) DescribeTable(ctx workflow.Context, input *redshiftdataapiservice.DescribeTableInput) (*redshiftdataapiservice.DescribeTableOutput, error) {
	var output redshiftdataapiservice.DescribeTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.DescribeTable", input).Get(ctx, &output)
	return &output, err
}

func (a *RedshiftDataAPIServiceStub) DescribeTableAsync(ctx workflow.Context, input *redshiftdataapiservice.DescribeTableInput) *RedshiftdataapiserviceDescribeTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.DescribeTable", input)
	return &RedshiftdataapiserviceDescribeTableFuture{Future: future}
}

func (a *RedshiftDataAPIServiceStub) ExecuteStatement(ctx workflow.Context, input *redshiftdataapiservice.ExecuteStatementInput) (*redshiftdataapiservice.ExecuteStatementOutput, error) {
	var output redshiftdataapiservice.ExecuteStatementOutput
	err := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.ExecuteStatement", input).Get(ctx, &output)
	return &output, err
}

func (a *RedshiftDataAPIServiceStub) ExecuteStatementAsync(ctx workflow.Context, input *redshiftdataapiservice.ExecuteStatementInput) *RedshiftdataapiserviceExecuteStatementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.ExecuteStatement", input)
	return &RedshiftdataapiserviceExecuteStatementFuture{Future: future}
}

func (a *RedshiftDataAPIServiceStub) GetStatementResult(ctx workflow.Context, input *redshiftdataapiservice.GetStatementResultInput) (*redshiftdataapiservice.GetStatementResultOutput, error) {
	var output redshiftdataapiservice.GetStatementResultOutput
	err := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.GetStatementResult", input).Get(ctx, &output)
	return &output, err
}

func (a *RedshiftDataAPIServiceStub) GetStatementResultAsync(ctx workflow.Context, input *redshiftdataapiservice.GetStatementResultInput) *RedshiftdataapiserviceGetStatementResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.GetStatementResult", input)
	return &RedshiftdataapiserviceGetStatementResultFuture{Future: future}
}

func (a *RedshiftDataAPIServiceStub) ListDatabases(ctx workflow.Context, input *redshiftdataapiservice.ListDatabasesInput) (*redshiftdataapiservice.ListDatabasesOutput, error) {
	var output redshiftdataapiservice.ListDatabasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.ListDatabases", input).Get(ctx, &output)
	return &output, err
}

func (a *RedshiftDataAPIServiceStub) ListDatabasesAsync(ctx workflow.Context, input *redshiftdataapiservice.ListDatabasesInput) *RedshiftdataapiserviceListDatabasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.ListDatabases", input)
	return &RedshiftdataapiserviceListDatabasesFuture{Future: future}
}

func (a *RedshiftDataAPIServiceStub) ListSchemas(ctx workflow.Context, input *redshiftdataapiservice.ListSchemasInput) (*redshiftdataapiservice.ListSchemasOutput, error) {
	var output redshiftdataapiservice.ListSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.ListSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *RedshiftDataAPIServiceStub) ListSchemasAsync(ctx workflow.Context, input *redshiftdataapiservice.ListSchemasInput) *RedshiftdataapiserviceListSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.ListSchemas", input)
	return &RedshiftdataapiserviceListSchemasFuture{Future: future}
}

func (a *RedshiftDataAPIServiceStub) ListStatements(ctx workflow.Context, input *redshiftdataapiservice.ListStatementsInput) (*redshiftdataapiservice.ListStatementsOutput, error) {
	var output redshiftdataapiservice.ListStatementsOutput
	err := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.ListStatements", input).Get(ctx, &output)
	return &output, err
}

func (a *RedshiftDataAPIServiceStub) ListStatementsAsync(ctx workflow.Context, input *redshiftdataapiservice.ListStatementsInput) *RedshiftdataapiserviceListStatementsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.ListStatements", input)
	return &RedshiftdataapiserviceListStatementsFuture{Future: future}
}

func (a *RedshiftDataAPIServiceStub) ListTables(ctx workflow.Context, input *redshiftdataapiservice.ListTablesInput) (*redshiftdataapiservice.ListTablesOutput, error) {
	var output redshiftdataapiservice.ListTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.ListTables", input).Get(ctx, &output)
	return &output, err
}

func (a *RedshiftDataAPIServiceStub) ListTablesAsync(ctx workflow.Context, input *redshiftdataapiservice.ListTablesInput) *RedshiftdataapiserviceListTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.redshiftdataapiservice.ListTables", input)
	return &RedshiftdataapiserviceListTablesFuture{Future: future}
}
