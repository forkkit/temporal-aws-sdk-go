// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/braket"
	"go.temporal.io/sdk/workflow"
)

type BraketClient interface {
	CancelQuantumTask(ctx workflow.Context, input *braket.CancelQuantumTaskInput) (*braket.CancelQuantumTaskOutput, error)
	CancelQuantumTaskAsync(ctx workflow.Context, input *braket.CancelQuantumTaskInput) *BraketCancelQuantumTaskFuture

	CreateQuantumTask(ctx workflow.Context, input *braket.CreateQuantumTaskInput) (*braket.CreateQuantumTaskOutput, error)
	CreateQuantumTaskAsync(ctx workflow.Context, input *braket.CreateQuantumTaskInput) *BraketCreateQuantumTaskFuture

	GetDevice(ctx workflow.Context, input *braket.GetDeviceInput) (*braket.GetDeviceOutput, error)
	GetDeviceAsync(ctx workflow.Context, input *braket.GetDeviceInput) *BraketGetDeviceFuture

	GetQuantumTask(ctx workflow.Context, input *braket.GetQuantumTaskInput) (*braket.GetQuantumTaskOutput, error)
	GetQuantumTaskAsync(ctx workflow.Context, input *braket.GetQuantumTaskInput) *BraketGetQuantumTaskFuture

	SearchDevices(ctx workflow.Context, input *braket.SearchDevicesInput) (*braket.SearchDevicesOutput, error)
	SearchDevicesAsync(ctx workflow.Context, input *braket.SearchDevicesInput) *BraketSearchDevicesFuture

	SearchQuantumTasks(ctx workflow.Context, input *braket.SearchQuantumTasksInput) (*braket.SearchQuantumTasksOutput, error)
	SearchQuantumTasksAsync(ctx workflow.Context, input *braket.SearchQuantumTasksInput) *BraketSearchQuantumTasksFuture
}

type BraketStub struct{}

func NewBraketStub() BraketClient {
	return &BraketStub{}
}

type BraketCancelQuantumTaskFuture struct {
	Future workflow.Future
}

func (r *BraketCancelQuantumTaskFuture) Get(ctx workflow.Context) (*braket.CancelQuantumTaskOutput, error) {
	var output braket.CancelQuantumTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BraketCreateQuantumTaskFuture struct {
	Future workflow.Future
}

func (r *BraketCreateQuantumTaskFuture) Get(ctx workflow.Context) (*braket.CreateQuantumTaskOutput, error) {
	var output braket.CreateQuantumTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BraketGetDeviceFuture struct {
	Future workflow.Future
}

func (r *BraketGetDeviceFuture) Get(ctx workflow.Context) (*braket.GetDeviceOutput, error) {
	var output braket.GetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BraketGetQuantumTaskFuture struct {
	Future workflow.Future
}

func (r *BraketGetQuantumTaskFuture) Get(ctx workflow.Context) (*braket.GetQuantumTaskOutput, error) {
	var output braket.GetQuantumTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BraketSearchDevicesFuture struct {
	Future workflow.Future
}

func (r *BraketSearchDevicesFuture) Get(ctx workflow.Context) (*braket.SearchDevicesOutput, error) {
	var output braket.SearchDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BraketSearchQuantumTasksFuture struct {
	Future workflow.Future
}

func (r *BraketSearchQuantumTasksFuture) Get(ctx workflow.Context) (*braket.SearchQuantumTasksOutput, error) {
	var output braket.SearchQuantumTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *BraketStub) CancelQuantumTask(ctx workflow.Context, input *braket.CancelQuantumTaskInput) (*braket.CancelQuantumTaskOutput, error) {
	var output braket.CancelQuantumTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.braket.CancelQuantumTask", input).Get(ctx, &output)
	return &output, err
}

func (a *BraketStub) CancelQuantumTaskAsync(ctx workflow.Context, input *braket.CancelQuantumTaskInput) *BraketCancelQuantumTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.braket.CancelQuantumTask", input)
	return &BraketCancelQuantumTaskFuture{Future: future}
}

func (a *BraketStub) CreateQuantumTask(ctx workflow.Context, input *braket.CreateQuantumTaskInput) (*braket.CreateQuantumTaskOutput, error) {
	var output braket.CreateQuantumTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.braket.CreateQuantumTask", input).Get(ctx, &output)
	return &output, err
}

func (a *BraketStub) CreateQuantumTaskAsync(ctx workflow.Context, input *braket.CreateQuantumTaskInput) *BraketCreateQuantumTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.braket.CreateQuantumTask", input)
	return &BraketCreateQuantumTaskFuture{Future: future}
}

func (a *BraketStub) GetDevice(ctx workflow.Context, input *braket.GetDeviceInput) (*braket.GetDeviceOutput, error) {
	var output braket.GetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.braket.GetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *BraketStub) GetDeviceAsync(ctx workflow.Context, input *braket.GetDeviceInput) *BraketGetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.braket.GetDevice", input)
	return &BraketGetDeviceFuture{Future: future}
}

func (a *BraketStub) GetQuantumTask(ctx workflow.Context, input *braket.GetQuantumTaskInput) (*braket.GetQuantumTaskOutput, error) {
	var output braket.GetQuantumTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.braket.GetQuantumTask", input).Get(ctx, &output)
	return &output, err
}

func (a *BraketStub) GetQuantumTaskAsync(ctx workflow.Context, input *braket.GetQuantumTaskInput) *BraketGetQuantumTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.braket.GetQuantumTask", input)
	return &BraketGetQuantumTaskFuture{Future: future}
}

func (a *BraketStub) SearchDevices(ctx workflow.Context, input *braket.SearchDevicesInput) (*braket.SearchDevicesOutput, error) {
	var output braket.SearchDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.braket.SearchDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *BraketStub) SearchDevicesAsync(ctx workflow.Context, input *braket.SearchDevicesInput) *BraketSearchDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.braket.SearchDevices", input)
	return &BraketSearchDevicesFuture{Future: future}
}

func (a *BraketStub) SearchQuantumTasks(ctx workflow.Context, input *braket.SearchQuantumTasksInput) (*braket.SearchQuantumTasksOutput, error) {
	var output braket.SearchQuantumTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.braket.SearchQuantumTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *BraketStub) SearchQuantumTasksAsync(ctx workflow.Context, input *braket.SearchQuantumTasksInput) *BraketSearchQuantumTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.braket.SearchQuantumTasks", input)
	return &BraketSearchQuantumTasksFuture{Future: future}
}
