// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/identitystore"
	"go.temporal.io/sdk/workflow"
)

type IdentityStoreClient interface {
	DescribeGroup(ctx workflow.Context, input *identitystore.DescribeGroupInput) (*identitystore.DescribeGroupOutput, error)
	DescribeGroupAsync(ctx workflow.Context, input *identitystore.DescribeGroupInput) *IdentityStoreDescribeGroupFuture

	DescribeUser(ctx workflow.Context, input *identitystore.DescribeUserInput) (*identitystore.DescribeUserOutput, error)
	DescribeUserAsync(ctx workflow.Context, input *identitystore.DescribeUserInput) *IdentityStoreDescribeUserFuture

	ListGroups(ctx workflow.Context, input *identitystore.ListGroupsInput) (*identitystore.ListGroupsOutput, error)
	ListGroupsAsync(ctx workflow.Context, input *identitystore.ListGroupsInput) *IdentityStoreListGroupsFuture

	ListUsers(ctx workflow.Context, input *identitystore.ListUsersInput) (*identitystore.ListUsersOutput, error)
	ListUsersAsync(ctx workflow.Context, input *identitystore.ListUsersInput) *IdentityStoreListUsersFuture
}

type IdentityStoreStub struct{}

func NewIdentityStoreStub() IdentityStoreClient {
	return &IdentityStoreStub{}
}

type IdentityStoreDescribeGroupFuture struct {
	Future workflow.Future
}

func (r *IdentityStoreDescribeGroupFuture) Get(ctx workflow.Context) (*identitystore.DescribeGroupOutput, error) {
	var output identitystore.DescribeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IdentityStoreDescribeUserFuture struct {
	Future workflow.Future
}

func (r *IdentityStoreDescribeUserFuture) Get(ctx workflow.Context) (*identitystore.DescribeUserOutput, error) {
	var output identitystore.DescribeUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IdentityStoreListGroupsFuture struct {
	Future workflow.Future
}

func (r *IdentityStoreListGroupsFuture) Get(ctx workflow.Context) (*identitystore.ListGroupsOutput, error) {
	var output identitystore.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IdentityStoreListUsersFuture struct {
	Future workflow.Future
}

func (r *IdentityStoreListUsersFuture) Get(ctx workflow.Context) (*identitystore.ListUsersOutput, error) {
	var output identitystore.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *IdentityStoreStub) DescribeGroup(ctx workflow.Context, input *identitystore.DescribeGroupInput) (*identitystore.DescribeGroupOutput, error) {
	var output identitystore.DescribeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.identitystore.DescribeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IdentityStoreStub) DescribeGroupAsync(ctx workflow.Context, input *identitystore.DescribeGroupInput) *IdentityStoreDescribeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.identitystore.DescribeGroup", input)
	return &IdentityStoreDescribeGroupFuture{Future: future}
}

func (a *IdentityStoreStub) DescribeUser(ctx workflow.Context, input *identitystore.DescribeUserInput) (*identitystore.DescribeUserOutput, error) {
	var output identitystore.DescribeUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.identitystore.DescribeUser", input).Get(ctx, &output)
	return &output, err
}

func (a *IdentityStoreStub) DescribeUserAsync(ctx workflow.Context, input *identitystore.DescribeUserInput) *IdentityStoreDescribeUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.identitystore.DescribeUser", input)
	return &IdentityStoreDescribeUserFuture{Future: future}
}

func (a *IdentityStoreStub) ListGroups(ctx workflow.Context, input *identitystore.ListGroupsInput) (*identitystore.ListGroupsOutput, error) {
	var output identitystore.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.identitystore.ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *IdentityStoreStub) ListGroupsAsync(ctx workflow.Context, input *identitystore.ListGroupsInput) *IdentityStoreListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.identitystore.ListGroups", input)
	return &IdentityStoreListGroupsFuture{Future: future}
}

func (a *IdentityStoreStub) ListUsers(ctx workflow.Context, input *identitystore.ListUsersInput) (*identitystore.ListUsersOutput, error) {
	var output identitystore.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.identitystore.ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *IdentityStoreStub) ListUsersAsync(ctx workflow.Context, input *identitystore.ListUsersInput) *IdentityStoreListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.identitystore.ListUsers", input)
	return &IdentityStoreListUsersFuture{Future: future}
}
