// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/ecs"
	"go.temporal.io/sdk/workflow"
)

type ECSClient interface {
	CreateCapacityProvider(ctx workflow.Context, input *ecs.CreateCapacityProviderInput) (*ecs.CreateCapacityProviderOutput, error)
	CreateCapacityProviderAsync(ctx workflow.Context, input *ecs.CreateCapacityProviderInput) *EcsCreateCapacityProviderFuture

	CreateCluster(ctx workflow.Context, input *ecs.CreateClusterInput) (*ecs.CreateClusterOutput, error)
	CreateClusterAsync(ctx workflow.Context, input *ecs.CreateClusterInput) *EcsCreateClusterFuture

	CreateService(ctx workflow.Context, input *ecs.CreateServiceInput) (*ecs.CreateServiceOutput, error)
	CreateServiceAsync(ctx workflow.Context, input *ecs.CreateServiceInput) *EcsCreateServiceFuture

	CreateTaskSet(ctx workflow.Context, input *ecs.CreateTaskSetInput) (*ecs.CreateTaskSetOutput, error)
	CreateTaskSetAsync(ctx workflow.Context, input *ecs.CreateTaskSetInput) *EcsCreateTaskSetFuture

	DeleteAccountSetting(ctx workflow.Context, input *ecs.DeleteAccountSettingInput) (*ecs.DeleteAccountSettingOutput, error)
	DeleteAccountSettingAsync(ctx workflow.Context, input *ecs.DeleteAccountSettingInput) *EcsDeleteAccountSettingFuture

	DeleteAttributes(ctx workflow.Context, input *ecs.DeleteAttributesInput) (*ecs.DeleteAttributesOutput, error)
	DeleteAttributesAsync(ctx workflow.Context, input *ecs.DeleteAttributesInput) *EcsDeleteAttributesFuture

	DeleteCapacityProvider(ctx workflow.Context, input *ecs.DeleteCapacityProviderInput) (*ecs.DeleteCapacityProviderOutput, error)
	DeleteCapacityProviderAsync(ctx workflow.Context, input *ecs.DeleteCapacityProviderInput) *EcsDeleteCapacityProviderFuture

	DeleteCluster(ctx workflow.Context, input *ecs.DeleteClusterInput) (*ecs.DeleteClusterOutput, error)
	DeleteClusterAsync(ctx workflow.Context, input *ecs.DeleteClusterInput) *EcsDeleteClusterFuture

	DeleteService(ctx workflow.Context, input *ecs.DeleteServiceInput) (*ecs.DeleteServiceOutput, error)
	DeleteServiceAsync(ctx workflow.Context, input *ecs.DeleteServiceInput) *EcsDeleteServiceFuture

	DeleteTaskSet(ctx workflow.Context, input *ecs.DeleteTaskSetInput) (*ecs.DeleteTaskSetOutput, error)
	DeleteTaskSetAsync(ctx workflow.Context, input *ecs.DeleteTaskSetInput) *EcsDeleteTaskSetFuture

	DeregisterContainerInstance(ctx workflow.Context, input *ecs.DeregisterContainerInstanceInput) (*ecs.DeregisterContainerInstanceOutput, error)
	DeregisterContainerInstanceAsync(ctx workflow.Context, input *ecs.DeregisterContainerInstanceInput) *EcsDeregisterContainerInstanceFuture

	DeregisterTaskDefinition(ctx workflow.Context, input *ecs.DeregisterTaskDefinitionInput) (*ecs.DeregisterTaskDefinitionOutput, error)
	DeregisterTaskDefinitionAsync(ctx workflow.Context, input *ecs.DeregisterTaskDefinitionInput) *EcsDeregisterTaskDefinitionFuture

	DescribeCapacityProviders(ctx workflow.Context, input *ecs.DescribeCapacityProvidersInput) (*ecs.DescribeCapacityProvidersOutput, error)
	DescribeCapacityProvidersAsync(ctx workflow.Context, input *ecs.DescribeCapacityProvidersInput) *EcsDescribeCapacityProvidersFuture

	DescribeClusters(ctx workflow.Context, input *ecs.DescribeClustersInput) (*ecs.DescribeClustersOutput, error)
	DescribeClustersAsync(ctx workflow.Context, input *ecs.DescribeClustersInput) *EcsDescribeClustersFuture

	DescribeContainerInstances(ctx workflow.Context, input *ecs.DescribeContainerInstancesInput) (*ecs.DescribeContainerInstancesOutput, error)
	DescribeContainerInstancesAsync(ctx workflow.Context, input *ecs.DescribeContainerInstancesInput) *EcsDescribeContainerInstancesFuture

	DescribeServices(ctx workflow.Context, input *ecs.DescribeServicesInput) (*ecs.DescribeServicesOutput, error)
	DescribeServicesAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *EcsDescribeServicesFuture

	DescribeTaskDefinition(ctx workflow.Context, input *ecs.DescribeTaskDefinitionInput) (*ecs.DescribeTaskDefinitionOutput, error)
	DescribeTaskDefinitionAsync(ctx workflow.Context, input *ecs.DescribeTaskDefinitionInput) *EcsDescribeTaskDefinitionFuture

	DescribeTaskSets(ctx workflow.Context, input *ecs.DescribeTaskSetsInput) (*ecs.DescribeTaskSetsOutput, error)
	DescribeTaskSetsAsync(ctx workflow.Context, input *ecs.DescribeTaskSetsInput) *EcsDescribeTaskSetsFuture

	DescribeTasks(ctx workflow.Context, input *ecs.DescribeTasksInput) (*ecs.DescribeTasksOutput, error)
	DescribeTasksAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *EcsDescribeTasksFuture

	DiscoverPollEndpoint(ctx workflow.Context, input *ecs.DiscoverPollEndpointInput) (*ecs.DiscoverPollEndpointOutput, error)
	DiscoverPollEndpointAsync(ctx workflow.Context, input *ecs.DiscoverPollEndpointInput) *EcsDiscoverPollEndpointFuture

	ListAccountSettings(ctx workflow.Context, input *ecs.ListAccountSettingsInput) (*ecs.ListAccountSettingsOutput, error)
	ListAccountSettingsAsync(ctx workflow.Context, input *ecs.ListAccountSettingsInput) *EcsListAccountSettingsFuture

	ListAttributes(ctx workflow.Context, input *ecs.ListAttributesInput) (*ecs.ListAttributesOutput, error)
	ListAttributesAsync(ctx workflow.Context, input *ecs.ListAttributesInput) *EcsListAttributesFuture

	ListClusters(ctx workflow.Context, input *ecs.ListClustersInput) (*ecs.ListClustersOutput, error)
	ListClustersAsync(ctx workflow.Context, input *ecs.ListClustersInput) *EcsListClustersFuture

	ListContainerInstances(ctx workflow.Context, input *ecs.ListContainerInstancesInput) (*ecs.ListContainerInstancesOutput, error)
	ListContainerInstancesAsync(ctx workflow.Context, input *ecs.ListContainerInstancesInput) *EcsListContainerInstancesFuture

	ListServices(ctx workflow.Context, input *ecs.ListServicesInput) (*ecs.ListServicesOutput, error)
	ListServicesAsync(ctx workflow.Context, input *ecs.ListServicesInput) *EcsListServicesFuture

	ListTagsForResource(ctx workflow.Context, input *ecs.ListTagsForResourceInput) (*ecs.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *ecs.ListTagsForResourceInput) *EcsListTagsForResourceFuture

	ListTaskDefinitionFamilies(ctx workflow.Context, input *ecs.ListTaskDefinitionFamiliesInput) (*ecs.ListTaskDefinitionFamiliesOutput, error)
	ListTaskDefinitionFamiliesAsync(ctx workflow.Context, input *ecs.ListTaskDefinitionFamiliesInput) *EcsListTaskDefinitionFamiliesFuture

	ListTaskDefinitions(ctx workflow.Context, input *ecs.ListTaskDefinitionsInput) (*ecs.ListTaskDefinitionsOutput, error)
	ListTaskDefinitionsAsync(ctx workflow.Context, input *ecs.ListTaskDefinitionsInput) *EcsListTaskDefinitionsFuture

	ListTasks(ctx workflow.Context, input *ecs.ListTasksInput) (*ecs.ListTasksOutput, error)
	ListTasksAsync(ctx workflow.Context, input *ecs.ListTasksInput) *EcsListTasksFuture

	PutAccountSetting(ctx workflow.Context, input *ecs.PutAccountSettingInput) (*ecs.PutAccountSettingOutput, error)
	PutAccountSettingAsync(ctx workflow.Context, input *ecs.PutAccountSettingInput) *EcsPutAccountSettingFuture

	PutAccountSettingDefault(ctx workflow.Context, input *ecs.PutAccountSettingDefaultInput) (*ecs.PutAccountSettingDefaultOutput, error)
	PutAccountSettingDefaultAsync(ctx workflow.Context, input *ecs.PutAccountSettingDefaultInput) *EcsPutAccountSettingDefaultFuture

	PutAttributes(ctx workflow.Context, input *ecs.PutAttributesInput) (*ecs.PutAttributesOutput, error)
	PutAttributesAsync(ctx workflow.Context, input *ecs.PutAttributesInput) *EcsPutAttributesFuture

	PutClusterCapacityProviders(ctx workflow.Context, input *ecs.PutClusterCapacityProvidersInput) (*ecs.PutClusterCapacityProvidersOutput, error)
	PutClusterCapacityProvidersAsync(ctx workflow.Context, input *ecs.PutClusterCapacityProvidersInput) *EcsPutClusterCapacityProvidersFuture

	RegisterContainerInstance(ctx workflow.Context, input *ecs.RegisterContainerInstanceInput) (*ecs.RegisterContainerInstanceOutput, error)
	RegisterContainerInstanceAsync(ctx workflow.Context, input *ecs.RegisterContainerInstanceInput) *EcsRegisterContainerInstanceFuture

	RegisterTaskDefinition(ctx workflow.Context, input *ecs.RegisterTaskDefinitionInput) (*ecs.RegisterTaskDefinitionOutput, error)
	RegisterTaskDefinitionAsync(ctx workflow.Context, input *ecs.RegisterTaskDefinitionInput) *EcsRegisterTaskDefinitionFuture

	RunTask(ctx workflow.Context, input *ecs.RunTaskInput) (*ecs.RunTaskOutput, error)
	RunTaskAsync(ctx workflow.Context, input *ecs.RunTaskInput) *EcsRunTaskFuture

	StartTask(ctx workflow.Context, input *ecs.StartTaskInput) (*ecs.StartTaskOutput, error)
	StartTaskAsync(ctx workflow.Context, input *ecs.StartTaskInput) *EcsStartTaskFuture

	StopTask(ctx workflow.Context, input *ecs.StopTaskInput) (*ecs.StopTaskOutput, error)
	StopTaskAsync(ctx workflow.Context, input *ecs.StopTaskInput) *EcsStopTaskFuture

	SubmitAttachmentStateChanges(ctx workflow.Context, input *ecs.SubmitAttachmentStateChangesInput) (*ecs.SubmitAttachmentStateChangesOutput, error)
	SubmitAttachmentStateChangesAsync(ctx workflow.Context, input *ecs.SubmitAttachmentStateChangesInput) *EcsSubmitAttachmentStateChangesFuture

	SubmitContainerStateChange(ctx workflow.Context, input *ecs.SubmitContainerStateChangeInput) (*ecs.SubmitContainerStateChangeOutput, error)
	SubmitContainerStateChangeAsync(ctx workflow.Context, input *ecs.SubmitContainerStateChangeInput) *EcsSubmitContainerStateChangeFuture

	SubmitTaskStateChange(ctx workflow.Context, input *ecs.SubmitTaskStateChangeInput) (*ecs.SubmitTaskStateChangeOutput, error)
	SubmitTaskStateChangeAsync(ctx workflow.Context, input *ecs.SubmitTaskStateChangeInput) *EcsSubmitTaskStateChangeFuture

	TagResource(ctx workflow.Context, input *ecs.TagResourceInput) (*ecs.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *ecs.TagResourceInput) *EcsTagResourceFuture

	UntagResource(ctx workflow.Context, input *ecs.UntagResourceInput) (*ecs.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *ecs.UntagResourceInput) *EcsUntagResourceFuture

	UpdateClusterSettings(ctx workflow.Context, input *ecs.UpdateClusterSettingsInput) (*ecs.UpdateClusterSettingsOutput, error)
	UpdateClusterSettingsAsync(ctx workflow.Context, input *ecs.UpdateClusterSettingsInput) *EcsUpdateClusterSettingsFuture

	UpdateContainerAgent(ctx workflow.Context, input *ecs.UpdateContainerAgentInput) (*ecs.UpdateContainerAgentOutput, error)
	UpdateContainerAgentAsync(ctx workflow.Context, input *ecs.UpdateContainerAgentInput) *EcsUpdateContainerAgentFuture

	UpdateContainerInstancesState(ctx workflow.Context, input *ecs.UpdateContainerInstancesStateInput) (*ecs.UpdateContainerInstancesStateOutput, error)
	UpdateContainerInstancesStateAsync(ctx workflow.Context, input *ecs.UpdateContainerInstancesStateInput) *EcsUpdateContainerInstancesStateFuture

	UpdateService(ctx workflow.Context, input *ecs.UpdateServiceInput) (*ecs.UpdateServiceOutput, error)
	UpdateServiceAsync(ctx workflow.Context, input *ecs.UpdateServiceInput) *EcsUpdateServiceFuture

	UpdateServicePrimaryTaskSet(ctx workflow.Context, input *ecs.UpdateServicePrimaryTaskSetInput) (*ecs.UpdateServicePrimaryTaskSetOutput, error)
	UpdateServicePrimaryTaskSetAsync(ctx workflow.Context, input *ecs.UpdateServicePrimaryTaskSetInput) *EcsUpdateServicePrimaryTaskSetFuture

	UpdateTaskSet(ctx workflow.Context, input *ecs.UpdateTaskSetInput) (*ecs.UpdateTaskSetOutput, error)
	UpdateTaskSetAsync(ctx workflow.Context, input *ecs.UpdateTaskSetInput) *EcsUpdateTaskSetFuture

	WaitUntilServicesInactive(ctx workflow.Context, input *ecs.DescribeServicesInput) error
	WaitUntilServicesInactiveAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *VoidFuture

	WaitUntilServicesStable(ctx workflow.Context, input *ecs.DescribeServicesInput) error
	WaitUntilServicesStableAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *VoidFuture

	WaitUntilTasksRunning(ctx workflow.Context, input *ecs.DescribeTasksInput) error
	WaitUntilTasksRunningAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *VoidFuture

	WaitUntilTasksStopped(ctx workflow.Context, input *ecs.DescribeTasksInput) error
	WaitUntilTasksStoppedAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *VoidFuture
}

type ECSStub struct{}

func NewECSStub() ECSClient {
	return &ECSStub{}
}

type EcsCreateCapacityProviderFuture struct {
	Future workflow.Future
}

func (r *EcsCreateCapacityProviderFuture) Get(ctx workflow.Context) (*ecs.CreateCapacityProviderOutput, error) {
	var output ecs.CreateCapacityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsCreateClusterFuture struct {
	Future workflow.Future
}

func (r *EcsCreateClusterFuture) Get(ctx workflow.Context) (*ecs.CreateClusterOutput, error) {
	var output ecs.CreateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsCreateServiceFuture struct {
	Future workflow.Future
}

func (r *EcsCreateServiceFuture) Get(ctx workflow.Context) (*ecs.CreateServiceOutput, error) {
	var output ecs.CreateServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsCreateTaskSetFuture struct {
	Future workflow.Future
}

func (r *EcsCreateTaskSetFuture) Get(ctx workflow.Context) (*ecs.CreateTaskSetOutput, error) {
	var output ecs.CreateTaskSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDeleteAccountSettingFuture struct {
	Future workflow.Future
}

func (r *EcsDeleteAccountSettingFuture) Get(ctx workflow.Context) (*ecs.DeleteAccountSettingOutput, error) {
	var output ecs.DeleteAccountSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDeleteAttributesFuture struct {
	Future workflow.Future
}

func (r *EcsDeleteAttributesFuture) Get(ctx workflow.Context) (*ecs.DeleteAttributesOutput, error) {
	var output ecs.DeleteAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDeleteCapacityProviderFuture struct {
	Future workflow.Future
}

func (r *EcsDeleteCapacityProviderFuture) Get(ctx workflow.Context) (*ecs.DeleteCapacityProviderOutput, error) {
	var output ecs.DeleteCapacityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDeleteClusterFuture struct {
	Future workflow.Future
}

func (r *EcsDeleteClusterFuture) Get(ctx workflow.Context) (*ecs.DeleteClusterOutput, error) {
	var output ecs.DeleteClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDeleteServiceFuture struct {
	Future workflow.Future
}

func (r *EcsDeleteServiceFuture) Get(ctx workflow.Context) (*ecs.DeleteServiceOutput, error) {
	var output ecs.DeleteServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDeleteTaskSetFuture struct {
	Future workflow.Future
}

func (r *EcsDeleteTaskSetFuture) Get(ctx workflow.Context) (*ecs.DeleteTaskSetOutput, error) {
	var output ecs.DeleteTaskSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDeregisterContainerInstanceFuture struct {
	Future workflow.Future
}

func (r *EcsDeregisterContainerInstanceFuture) Get(ctx workflow.Context) (*ecs.DeregisterContainerInstanceOutput, error) {
	var output ecs.DeregisterContainerInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDeregisterTaskDefinitionFuture struct {
	Future workflow.Future
}

func (r *EcsDeregisterTaskDefinitionFuture) Get(ctx workflow.Context) (*ecs.DeregisterTaskDefinitionOutput, error) {
	var output ecs.DeregisterTaskDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDescribeCapacityProvidersFuture struct {
	Future workflow.Future
}

func (r *EcsDescribeCapacityProvidersFuture) Get(ctx workflow.Context) (*ecs.DescribeCapacityProvidersOutput, error) {
	var output ecs.DescribeCapacityProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDescribeClustersFuture struct {
	Future workflow.Future
}

func (r *EcsDescribeClustersFuture) Get(ctx workflow.Context) (*ecs.DescribeClustersOutput, error) {
	var output ecs.DescribeClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDescribeContainerInstancesFuture struct {
	Future workflow.Future
}

func (r *EcsDescribeContainerInstancesFuture) Get(ctx workflow.Context) (*ecs.DescribeContainerInstancesOutput, error) {
	var output ecs.DescribeContainerInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDescribeServicesFuture struct {
	Future workflow.Future
}

func (r *EcsDescribeServicesFuture) Get(ctx workflow.Context) (*ecs.DescribeServicesOutput, error) {
	var output ecs.DescribeServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDescribeTaskDefinitionFuture struct {
	Future workflow.Future
}

func (r *EcsDescribeTaskDefinitionFuture) Get(ctx workflow.Context) (*ecs.DescribeTaskDefinitionOutput, error) {
	var output ecs.DescribeTaskDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDescribeTaskSetsFuture struct {
	Future workflow.Future
}

func (r *EcsDescribeTaskSetsFuture) Get(ctx workflow.Context) (*ecs.DescribeTaskSetsOutput, error) {
	var output ecs.DescribeTaskSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDescribeTasksFuture struct {
	Future workflow.Future
}

func (r *EcsDescribeTasksFuture) Get(ctx workflow.Context) (*ecs.DescribeTasksOutput, error) {
	var output ecs.DescribeTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsDiscoverPollEndpointFuture struct {
	Future workflow.Future
}

func (r *EcsDiscoverPollEndpointFuture) Get(ctx workflow.Context) (*ecs.DiscoverPollEndpointOutput, error) {
	var output ecs.DiscoverPollEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsListAccountSettingsFuture struct {
	Future workflow.Future
}

func (r *EcsListAccountSettingsFuture) Get(ctx workflow.Context) (*ecs.ListAccountSettingsOutput, error) {
	var output ecs.ListAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsListAttributesFuture struct {
	Future workflow.Future
}

func (r *EcsListAttributesFuture) Get(ctx workflow.Context) (*ecs.ListAttributesOutput, error) {
	var output ecs.ListAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsListClustersFuture struct {
	Future workflow.Future
}

func (r *EcsListClustersFuture) Get(ctx workflow.Context) (*ecs.ListClustersOutput, error) {
	var output ecs.ListClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsListContainerInstancesFuture struct {
	Future workflow.Future
}

func (r *EcsListContainerInstancesFuture) Get(ctx workflow.Context) (*ecs.ListContainerInstancesOutput, error) {
	var output ecs.ListContainerInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsListServicesFuture struct {
	Future workflow.Future
}

func (r *EcsListServicesFuture) Get(ctx workflow.Context) (*ecs.ListServicesOutput, error) {
	var output ecs.ListServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *EcsListTagsForResourceFuture) Get(ctx workflow.Context) (*ecs.ListTagsForResourceOutput, error) {
	var output ecs.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsListTaskDefinitionFamiliesFuture struct {
	Future workflow.Future
}

func (r *EcsListTaskDefinitionFamiliesFuture) Get(ctx workflow.Context) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	var output ecs.ListTaskDefinitionFamiliesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsListTaskDefinitionsFuture struct {
	Future workflow.Future
}

func (r *EcsListTaskDefinitionsFuture) Get(ctx workflow.Context) (*ecs.ListTaskDefinitionsOutput, error) {
	var output ecs.ListTaskDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsListTasksFuture struct {
	Future workflow.Future
}

func (r *EcsListTasksFuture) Get(ctx workflow.Context) (*ecs.ListTasksOutput, error) {
	var output ecs.ListTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsPutAccountSettingFuture struct {
	Future workflow.Future
}

func (r *EcsPutAccountSettingFuture) Get(ctx workflow.Context) (*ecs.PutAccountSettingOutput, error) {
	var output ecs.PutAccountSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsPutAccountSettingDefaultFuture struct {
	Future workflow.Future
}

func (r *EcsPutAccountSettingDefaultFuture) Get(ctx workflow.Context) (*ecs.PutAccountSettingDefaultOutput, error) {
	var output ecs.PutAccountSettingDefaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsPutAttributesFuture struct {
	Future workflow.Future
}

func (r *EcsPutAttributesFuture) Get(ctx workflow.Context) (*ecs.PutAttributesOutput, error) {
	var output ecs.PutAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsPutClusterCapacityProvidersFuture struct {
	Future workflow.Future
}

func (r *EcsPutClusterCapacityProvidersFuture) Get(ctx workflow.Context) (*ecs.PutClusterCapacityProvidersOutput, error) {
	var output ecs.PutClusterCapacityProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsRegisterContainerInstanceFuture struct {
	Future workflow.Future
}

func (r *EcsRegisterContainerInstanceFuture) Get(ctx workflow.Context) (*ecs.RegisterContainerInstanceOutput, error) {
	var output ecs.RegisterContainerInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsRegisterTaskDefinitionFuture struct {
	Future workflow.Future
}

func (r *EcsRegisterTaskDefinitionFuture) Get(ctx workflow.Context) (*ecs.RegisterTaskDefinitionOutput, error) {
	var output ecs.RegisterTaskDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsRunTaskFuture struct {
	Future workflow.Future
}

func (r *EcsRunTaskFuture) Get(ctx workflow.Context) (*ecs.RunTaskOutput, error) {
	var output ecs.RunTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsStartTaskFuture struct {
	Future workflow.Future
}

func (r *EcsStartTaskFuture) Get(ctx workflow.Context) (*ecs.StartTaskOutput, error) {
	var output ecs.StartTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsStopTaskFuture struct {
	Future workflow.Future
}

func (r *EcsStopTaskFuture) Get(ctx workflow.Context) (*ecs.StopTaskOutput, error) {
	var output ecs.StopTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsSubmitAttachmentStateChangesFuture struct {
	Future workflow.Future
}

func (r *EcsSubmitAttachmentStateChangesFuture) Get(ctx workflow.Context) (*ecs.SubmitAttachmentStateChangesOutput, error) {
	var output ecs.SubmitAttachmentStateChangesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsSubmitContainerStateChangeFuture struct {
	Future workflow.Future
}

func (r *EcsSubmitContainerStateChangeFuture) Get(ctx workflow.Context) (*ecs.SubmitContainerStateChangeOutput, error) {
	var output ecs.SubmitContainerStateChangeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsSubmitTaskStateChangeFuture struct {
	Future workflow.Future
}

func (r *EcsSubmitTaskStateChangeFuture) Get(ctx workflow.Context) (*ecs.SubmitTaskStateChangeOutput, error) {
	var output ecs.SubmitTaskStateChangeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsTagResourceFuture struct {
	Future workflow.Future
}

func (r *EcsTagResourceFuture) Get(ctx workflow.Context) (*ecs.TagResourceOutput, error) {
	var output ecs.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsUntagResourceFuture struct {
	Future workflow.Future
}

func (r *EcsUntagResourceFuture) Get(ctx workflow.Context) (*ecs.UntagResourceOutput, error) {
	var output ecs.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsUpdateClusterSettingsFuture struct {
	Future workflow.Future
}

func (r *EcsUpdateClusterSettingsFuture) Get(ctx workflow.Context) (*ecs.UpdateClusterSettingsOutput, error) {
	var output ecs.UpdateClusterSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsUpdateContainerAgentFuture struct {
	Future workflow.Future
}

func (r *EcsUpdateContainerAgentFuture) Get(ctx workflow.Context) (*ecs.UpdateContainerAgentOutput, error) {
	var output ecs.UpdateContainerAgentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsUpdateContainerInstancesStateFuture struct {
	Future workflow.Future
}

func (r *EcsUpdateContainerInstancesStateFuture) Get(ctx workflow.Context) (*ecs.UpdateContainerInstancesStateOutput, error) {
	var output ecs.UpdateContainerInstancesStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsUpdateServiceFuture struct {
	Future workflow.Future
}

func (r *EcsUpdateServiceFuture) Get(ctx workflow.Context) (*ecs.UpdateServiceOutput, error) {
	var output ecs.UpdateServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsUpdateServicePrimaryTaskSetFuture struct {
	Future workflow.Future
}

func (r *EcsUpdateServicePrimaryTaskSetFuture) Get(ctx workflow.Context) (*ecs.UpdateServicePrimaryTaskSetOutput, error) {
	var output ecs.UpdateServicePrimaryTaskSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EcsUpdateTaskSetFuture struct {
	Future workflow.Future
}

func (r *EcsUpdateTaskSetFuture) Get(ctx workflow.Context) (*ecs.UpdateTaskSetOutput, error) {
	var output ecs.UpdateTaskSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) CreateCapacityProvider(ctx workflow.Context, input *ecs.CreateCapacityProviderInput) (*ecs.CreateCapacityProviderOutput, error) {
	var output ecs.CreateCapacityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.CreateCapacityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) CreateCapacityProviderAsync(ctx workflow.Context, input *ecs.CreateCapacityProviderInput) *EcsCreateCapacityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.CreateCapacityProvider", input)
	return &EcsCreateCapacityProviderFuture{Future: future}
}

func (a *ECSStub) CreateCluster(ctx workflow.Context, input *ecs.CreateClusterInput) (*ecs.CreateClusterOutput, error) {
	var output ecs.CreateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.CreateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) CreateClusterAsync(ctx workflow.Context, input *ecs.CreateClusterInput) *EcsCreateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.CreateCluster", input)
	return &EcsCreateClusterFuture{Future: future}
}

func (a *ECSStub) CreateService(ctx workflow.Context, input *ecs.CreateServiceInput) (*ecs.CreateServiceOutput, error) {
	var output ecs.CreateServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.CreateService", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) CreateServiceAsync(ctx workflow.Context, input *ecs.CreateServiceInput) *EcsCreateServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.CreateService", input)
	return &EcsCreateServiceFuture{Future: future}
}

func (a *ECSStub) CreateTaskSet(ctx workflow.Context, input *ecs.CreateTaskSetInput) (*ecs.CreateTaskSetOutput, error) {
	var output ecs.CreateTaskSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.CreateTaskSet", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) CreateTaskSetAsync(ctx workflow.Context, input *ecs.CreateTaskSetInput) *EcsCreateTaskSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.CreateTaskSet", input)
	return &EcsCreateTaskSetFuture{Future: future}
}

func (a *ECSStub) DeleteAccountSetting(ctx workflow.Context, input *ecs.DeleteAccountSettingInput) (*ecs.DeleteAccountSettingOutput, error) {
	var output ecs.DeleteAccountSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteAccountSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeleteAccountSettingAsync(ctx workflow.Context, input *ecs.DeleteAccountSettingInput) *EcsDeleteAccountSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteAccountSetting", input)
	return &EcsDeleteAccountSettingFuture{Future: future}
}

func (a *ECSStub) DeleteAttributes(ctx workflow.Context, input *ecs.DeleteAttributesInput) (*ecs.DeleteAttributesOutput, error) {
	var output ecs.DeleteAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeleteAttributesAsync(ctx workflow.Context, input *ecs.DeleteAttributesInput) *EcsDeleteAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteAttributes", input)
	return &EcsDeleteAttributesFuture{Future: future}
}

func (a *ECSStub) DeleteCapacityProvider(ctx workflow.Context, input *ecs.DeleteCapacityProviderInput) (*ecs.DeleteCapacityProviderOutput, error) {
	var output ecs.DeleteCapacityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteCapacityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeleteCapacityProviderAsync(ctx workflow.Context, input *ecs.DeleteCapacityProviderInput) *EcsDeleteCapacityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteCapacityProvider", input)
	return &EcsDeleteCapacityProviderFuture{Future: future}
}

func (a *ECSStub) DeleteCluster(ctx workflow.Context, input *ecs.DeleteClusterInput) (*ecs.DeleteClusterOutput, error) {
	var output ecs.DeleteClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeleteClusterAsync(ctx workflow.Context, input *ecs.DeleteClusterInput) *EcsDeleteClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteCluster", input)
	return &EcsDeleteClusterFuture{Future: future}
}

func (a *ECSStub) DeleteService(ctx workflow.Context, input *ecs.DeleteServiceInput) (*ecs.DeleteServiceOutput, error) {
	var output ecs.DeleteServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteService", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeleteServiceAsync(ctx workflow.Context, input *ecs.DeleteServiceInput) *EcsDeleteServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteService", input)
	return &EcsDeleteServiceFuture{Future: future}
}

func (a *ECSStub) DeleteTaskSet(ctx workflow.Context, input *ecs.DeleteTaskSetInput) (*ecs.DeleteTaskSetOutput, error) {
	var output ecs.DeleteTaskSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteTaskSet", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeleteTaskSetAsync(ctx workflow.Context, input *ecs.DeleteTaskSetInput) *EcsDeleteTaskSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteTaskSet", input)
	return &EcsDeleteTaskSetFuture{Future: future}
}

func (a *ECSStub) DeregisterContainerInstance(ctx workflow.Context, input *ecs.DeregisterContainerInstanceInput) (*ecs.DeregisterContainerInstanceOutput, error) {
	var output ecs.DeregisterContainerInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeregisterContainerInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeregisterContainerInstanceAsync(ctx workflow.Context, input *ecs.DeregisterContainerInstanceInput) *EcsDeregisterContainerInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeregisterContainerInstance", input)
	return &EcsDeregisterContainerInstanceFuture{Future: future}
}

func (a *ECSStub) DeregisterTaskDefinition(ctx workflow.Context, input *ecs.DeregisterTaskDefinitionInput) (*ecs.DeregisterTaskDefinitionOutput, error) {
	var output ecs.DeregisterTaskDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeregisterTaskDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeregisterTaskDefinitionAsync(ctx workflow.Context, input *ecs.DeregisterTaskDefinitionInput) *EcsDeregisterTaskDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeregisterTaskDefinition", input)
	return &EcsDeregisterTaskDefinitionFuture{Future: future}
}

func (a *ECSStub) DescribeCapacityProviders(ctx workflow.Context, input *ecs.DescribeCapacityProvidersInput) (*ecs.DescribeCapacityProvidersOutput, error) {
	var output ecs.DescribeCapacityProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeCapacityProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeCapacityProvidersAsync(ctx workflow.Context, input *ecs.DescribeCapacityProvidersInput) *EcsDescribeCapacityProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeCapacityProviders", input)
	return &EcsDescribeCapacityProvidersFuture{Future: future}
}

func (a *ECSStub) DescribeClusters(ctx workflow.Context, input *ecs.DescribeClustersInput) (*ecs.DescribeClustersOutput, error) {
	var output ecs.DescribeClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeClustersAsync(ctx workflow.Context, input *ecs.DescribeClustersInput) *EcsDescribeClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeClusters", input)
	return &EcsDescribeClustersFuture{Future: future}
}

func (a *ECSStub) DescribeContainerInstances(ctx workflow.Context, input *ecs.DescribeContainerInstancesInput) (*ecs.DescribeContainerInstancesOutput, error) {
	var output ecs.DescribeContainerInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeContainerInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeContainerInstancesAsync(ctx workflow.Context, input *ecs.DescribeContainerInstancesInput) *EcsDescribeContainerInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeContainerInstances", input)
	return &EcsDescribeContainerInstancesFuture{Future: future}
}

func (a *ECSStub) DescribeServices(ctx workflow.Context, input *ecs.DescribeServicesInput) (*ecs.DescribeServicesOutput, error) {
	var output ecs.DescribeServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeServices", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeServicesAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *EcsDescribeServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeServices", input)
	return &EcsDescribeServicesFuture{Future: future}
}

func (a *ECSStub) DescribeTaskDefinition(ctx workflow.Context, input *ecs.DescribeTaskDefinitionInput) (*ecs.DescribeTaskDefinitionOutput, error) {
	var output ecs.DescribeTaskDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeTaskDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeTaskDefinitionAsync(ctx workflow.Context, input *ecs.DescribeTaskDefinitionInput) *EcsDescribeTaskDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeTaskDefinition", input)
	return &EcsDescribeTaskDefinitionFuture{Future: future}
}

func (a *ECSStub) DescribeTaskSets(ctx workflow.Context, input *ecs.DescribeTaskSetsInput) (*ecs.DescribeTaskSetsOutput, error) {
	var output ecs.DescribeTaskSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeTaskSets", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeTaskSetsAsync(ctx workflow.Context, input *ecs.DescribeTaskSetsInput) *EcsDescribeTaskSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeTaskSets", input)
	return &EcsDescribeTaskSetsFuture{Future: future}
}

func (a *ECSStub) DescribeTasks(ctx workflow.Context, input *ecs.DescribeTasksInput) (*ecs.DescribeTasksOutput, error) {
	var output ecs.DescribeTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeTasksAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *EcsDescribeTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeTasks", input)
	return &EcsDescribeTasksFuture{Future: future}
}

func (a *ECSStub) DiscoverPollEndpoint(ctx workflow.Context, input *ecs.DiscoverPollEndpointInput) (*ecs.DiscoverPollEndpointOutput, error) {
	var output ecs.DiscoverPollEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DiscoverPollEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DiscoverPollEndpointAsync(ctx workflow.Context, input *ecs.DiscoverPollEndpointInput) *EcsDiscoverPollEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DiscoverPollEndpoint", input)
	return &EcsDiscoverPollEndpointFuture{Future: future}
}

func (a *ECSStub) ListAccountSettings(ctx workflow.Context, input *ecs.ListAccountSettingsInput) (*ecs.ListAccountSettingsOutput, error) {
	var output ecs.ListAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListAccountSettingsAsync(ctx workflow.Context, input *ecs.ListAccountSettingsInput) *EcsListAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListAccountSettings", input)
	return &EcsListAccountSettingsFuture{Future: future}
}

func (a *ECSStub) ListAttributes(ctx workflow.Context, input *ecs.ListAttributesInput) (*ecs.ListAttributesOutput, error) {
	var output ecs.ListAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListAttributesAsync(ctx workflow.Context, input *ecs.ListAttributesInput) *EcsListAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListAttributes", input)
	return &EcsListAttributesFuture{Future: future}
}

func (a *ECSStub) ListClusters(ctx workflow.Context, input *ecs.ListClustersInput) (*ecs.ListClustersOutput, error) {
	var output ecs.ListClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListClustersAsync(ctx workflow.Context, input *ecs.ListClustersInput) *EcsListClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListClusters", input)
	return &EcsListClustersFuture{Future: future}
}

func (a *ECSStub) ListContainerInstances(ctx workflow.Context, input *ecs.ListContainerInstancesInput) (*ecs.ListContainerInstancesOutput, error) {
	var output ecs.ListContainerInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListContainerInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListContainerInstancesAsync(ctx workflow.Context, input *ecs.ListContainerInstancesInput) *EcsListContainerInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListContainerInstances", input)
	return &EcsListContainerInstancesFuture{Future: future}
}

func (a *ECSStub) ListServices(ctx workflow.Context, input *ecs.ListServicesInput) (*ecs.ListServicesOutput, error) {
	var output ecs.ListServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListServices", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListServicesAsync(ctx workflow.Context, input *ecs.ListServicesInput) *EcsListServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListServices", input)
	return &EcsListServicesFuture{Future: future}
}

func (a *ECSStub) ListTagsForResource(ctx workflow.Context, input *ecs.ListTagsForResourceInput) (*ecs.ListTagsForResourceOutput, error) {
	var output ecs.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListTagsForResourceAsync(ctx workflow.Context, input *ecs.ListTagsForResourceInput) *EcsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListTagsForResource", input)
	return &EcsListTagsForResourceFuture{Future: future}
}

func (a *ECSStub) ListTaskDefinitionFamilies(ctx workflow.Context, input *ecs.ListTaskDefinitionFamiliesInput) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	var output ecs.ListTaskDefinitionFamiliesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListTaskDefinitionFamilies", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListTaskDefinitionFamiliesAsync(ctx workflow.Context, input *ecs.ListTaskDefinitionFamiliesInput) *EcsListTaskDefinitionFamiliesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListTaskDefinitionFamilies", input)
	return &EcsListTaskDefinitionFamiliesFuture{Future: future}
}

func (a *ECSStub) ListTaskDefinitions(ctx workflow.Context, input *ecs.ListTaskDefinitionsInput) (*ecs.ListTaskDefinitionsOutput, error) {
	var output ecs.ListTaskDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListTaskDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListTaskDefinitionsAsync(ctx workflow.Context, input *ecs.ListTaskDefinitionsInput) *EcsListTaskDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListTaskDefinitions", input)
	return &EcsListTaskDefinitionsFuture{Future: future}
}

func (a *ECSStub) ListTasks(ctx workflow.Context, input *ecs.ListTasksInput) (*ecs.ListTasksOutput, error) {
	var output ecs.ListTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListTasksAsync(ctx workflow.Context, input *ecs.ListTasksInput) *EcsListTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListTasks", input)
	return &EcsListTasksFuture{Future: future}
}

func (a *ECSStub) PutAccountSetting(ctx workflow.Context, input *ecs.PutAccountSettingInput) (*ecs.PutAccountSettingOutput, error) {
	var output ecs.PutAccountSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.PutAccountSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) PutAccountSettingAsync(ctx workflow.Context, input *ecs.PutAccountSettingInput) *EcsPutAccountSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.PutAccountSetting", input)
	return &EcsPutAccountSettingFuture{Future: future}
}

func (a *ECSStub) PutAccountSettingDefault(ctx workflow.Context, input *ecs.PutAccountSettingDefaultInput) (*ecs.PutAccountSettingDefaultOutput, error) {
	var output ecs.PutAccountSettingDefaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.PutAccountSettingDefault", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) PutAccountSettingDefaultAsync(ctx workflow.Context, input *ecs.PutAccountSettingDefaultInput) *EcsPutAccountSettingDefaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.PutAccountSettingDefault", input)
	return &EcsPutAccountSettingDefaultFuture{Future: future}
}

func (a *ECSStub) PutAttributes(ctx workflow.Context, input *ecs.PutAttributesInput) (*ecs.PutAttributesOutput, error) {
	var output ecs.PutAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.PutAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) PutAttributesAsync(ctx workflow.Context, input *ecs.PutAttributesInput) *EcsPutAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.PutAttributes", input)
	return &EcsPutAttributesFuture{Future: future}
}

func (a *ECSStub) PutClusterCapacityProviders(ctx workflow.Context, input *ecs.PutClusterCapacityProvidersInput) (*ecs.PutClusterCapacityProvidersOutput, error) {
	var output ecs.PutClusterCapacityProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.PutClusterCapacityProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) PutClusterCapacityProvidersAsync(ctx workflow.Context, input *ecs.PutClusterCapacityProvidersInput) *EcsPutClusterCapacityProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.PutClusterCapacityProviders", input)
	return &EcsPutClusterCapacityProvidersFuture{Future: future}
}

func (a *ECSStub) RegisterContainerInstance(ctx workflow.Context, input *ecs.RegisterContainerInstanceInput) (*ecs.RegisterContainerInstanceOutput, error) {
	var output ecs.RegisterContainerInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.RegisterContainerInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) RegisterContainerInstanceAsync(ctx workflow.Context, input *ecs.RegisterContainerInstanceInput) *EcsRegisterContainerInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.RegisterContainerInstance", input)
	return &EcsRegisterContainerInstanceFuture{Future: future}
}

func (a *ECSStub) RegisterTaskDefinition(ctx workflow.Context, input *ecs.RegisterTaskDefinitionInput) (*ecs.RegisterTaskDefinitionOutput, error) {
	var output ecs.RegisterTaskDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.RegisterTaskDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) RegisterTaskDefinitionAsync(ctx workflow.Context, input *ecs.RegisterTaskDefinitionInput) *EcsRegisterTaskDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.RegisterTaskDefinition", input)
	return &EcsRegisterTaskDefinitionFuture{Future: future}
}

func (a *ECSStub) RunTask(ctx workflow.Context, input *ecs.RunTaskInput) (*ecs.RunTaskOutput, error) {
	var output ecs.RunTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.RunTask", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) RunTaskAsync(ctx workflow.Context, input *ecs.RunTaskInput) *EcsRunTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.RunTask", input)
	return &EcsRunTaskFuture{Future: future}
}

func (a *ECSStub) StartTask(ctx workflow.Context, input *ecs.StartTaskInput) (*ecs.StartTaskOutput, error) {
	var output ecs.StartTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.StartTask", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) StartTaskAsync(ctx workflow.Context, input *ecs.StartTaskInput) *EcsStartTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.StartTask", input)
	return &EcsStartTaskFuture{Future: future}
}

func (a *ECSStub) StopTask(ctx workflow.Context, input *ecs.StopTaskInput) (*ecs.StopTaskOutput, error) {
	var output ecs.StopTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.StopTask", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) StopTaskAsync(ctx workflow.Context, input *ecs.StopTaskInput) *EcsStopTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.StopTask", input)
	return &EcsStopTaskFuture{Future: future}
}

func (a *ECSStub) SubmitAttachmentStateChanges(ctx workflow.Context, input *ecs.SubmitAttachmentStateChangesInput) (*ecs.SubmitAttachmentStateChangesOutput, error) {
	var output ecs.SubmitAttachmentStateChangesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.SubmitAttachmentStateChanges", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) SubmitAttachmentStateChangesAsync(ctx workflow.Context, input *ecs.SubmitAttachmentStateChangesInput) *EcsSubmitAttachmentStateChangesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.SubmitAttachmentStateChanges", input)
	return &EcsSubmitAttachmentStateChangesFuture{Future: future}
}

func (a *ECSStub) SubmitContainerStateChange(ctx workflow.Context, input *ecs.SubmitContainerStateChangeInput) (*ecs.SubmitContainerStateChangeOutput, error) {
	var output ecs.SubmitContainerStateChangeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.SubmitContainerStateChange", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) SubmitContainerStateChangeAsync(ctx workflow.Context, input *ecs.SubmitContainerStateChangeInput) *EcsSubmitContainerStateChangeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.SubmitContainerStateChange", input)
	return &EcsSubmitContainerStateChangeFuture{Future: future}
}

func (a *ECSStub) SubmitTaskStateChange(ctx workflow.Context, input *ecs.SubmitTaskStateChangeInput) (*ecs.SubmitTaskStateChangeOutput, error) {
	var output ecs.SubmitTaskStateChangeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.SubmitTaskStateChange", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) SubmitTaskStateChangeAsync(ctx workflow.Context, input *ecs.SubmitTaskStateChangeInput) *EcsSubmitTaskStateChangeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.SubmitTaskStateChange", input)
	return &EcsSubmitTaskStateChangeFuture{Future: future}
}

func (a *ECSStub) TagResource(ctx workflow.Context, input *ecs.TagResourceInput) (*ecs.TagResourceOutput, error) {
	var output ecs.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) TagResourceAsync(ctx workflow.Context, input *ecs.TagResourceInput) *EcsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.TagResource", input)
	return &EcsTagResourceFuture{Future: future}
}

func (a *ECSStub) UntagResource(ctx workflow.Context, input *ecs.UntagResourceInput) (*ecs.UntagResourceOutput, error) {
	var output ecs.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UntagResourceAsync(ctx workflow.Context, input *ecs.UntagResourceInput) *EcsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UntagResource", input)
	return &EcsUntagResourceFuture{Future: future}
}

func (a *ECSStub) UpdateClusterSettings(ctx workflow.Context, input *ecs.UpdateClusterSettingsInput) (*ecs.UpdateClusterSettingsOutput, error) {
	var output ecs.UpdateClusterSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateClusterSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UpdateClusterSettingsAsync(ctx workflow.Context, input *ecs.UpdateClusterSettingsInput) *EcsUpdateClusterSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateClusterSettings", input)
	return &EcsUpdateClusterSettingsFuture{Future: future}
}

func (a *ECSStub) UpdateContainerAgent(ctx workflow.Context, input *ecs.UpdateContainerAgentInput) (*ecs.UpdateContainerAgentOutput, error) {
	var output ecs.UpdateContainerAgentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateContainerAgent", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UpdateContainerAgentAsync(ctx workflow.Context, input *ecs.UpdateContainerAgentInput) *EcsUpdateContainerAgentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateContainerAgent", input)
	return &EcsUpdateContainerAgentFuture{Future: future}
}

func (a *ECSStub) UpdateContainerInstancesState(ctx workflow.Context, input *ecs.UpdateContainerInstancesStateInput) (*ecs.UpdateContainerInstancesStateOutput, error) {
	var output ecs.UpdateContainerInstancesStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateContainerInstancesState", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UpdateContainerInstancesStateAsync(ctx workflow.Context, input *ecs.UpdateContainerInstancesStateInput) *EcsUpdateContainerInstancesStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateContainerInstancesState", input)
	return &EcsUpdateContainerInstancesStateFuture{Future: future}
}

func (a *ECSStub) UpdateService(ctx workflow.Context, input *ecs.UpdateServiceInput) (*ecs.UpdateServiceOutput, error) {
	var output ecs.UpdateServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateService", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UpdateServiceAsync(ctx workflow.Context, input *ecs.UpdateServiceInput) *EcsUpdateServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateService", input)
	return &EcsUpdateServiceFuture{Future: future}
}

func (a *ECSStub) UpdateServicePrimaryTaskSet(ctx workflow.Context, input *ecs.UpdateServicePrimaryTaskSetInput) (*ecs.UpdateServicePrimaryTaskSetOutput, error) {
	var output ecs.UpdateServicePrimaryTaskSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateServicePrimaryTaskSet", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UpdateServicePrimaryTaskSetAsync(ctx workflow.Context, input *ecs.UpdateServicePrimaryTaskSetInput) *EcsUpdateServicePrimaryTaskSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateServicePrimaryTaskSet", input)
	return &EcsUpdateServicePrimaryTaskSetFuture{Future: future}
}

func (a *ECSStub) UpdateTaskSet(ctx workflow.Context, input *ecs.UpdateTaskSetInput) (*ecs.UpdateTaskSetOutput, error) {
	var output ecs.UpdateTaskSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateTaskSet", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UpdateTaskSetAsync(ctx workflow.Context, input *ecs.UpdateTaskSetInput) *EcsUpdateTaskSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateTaskSet", input)
	return &EcsUpdateTaskSetFuture{Future: future}
}

func (a *ECSStub) WaitUntilServicesInactive(ctx workflow.Context, input *ecs.DescribeServicesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilServicesInactive", input).Get(ctx, nil)
}

func (a *ECSStub) WaitUntilServicesInactiveAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilServicesInactive", input)
	return NewVoidFuture(future)
}

func (a *ECSStub) WaitUntilServicesStable(ctx workflow.Context, input *ecs.DescribeServicesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilServicesStable", input).Get(ctx, nil)
}

func (a *ECSStub) WaitUntilServicesStableAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilServicesStable", input)
	return NewVoidFuture(future)
}

func (a *ECSStub) WaitUntilTasksRunning(ctx workflow.Context, input *ecs.DescribeTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilTasksRunning", input).Get(ctx, nil)
}

func (a *ECSStub) WaitUntilTasksRunningAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilTasksRunning", input)
	return NewVoidFuture(future)
}

func (a *ECSStub) WaitUntilTasksStopped(ctx workflow.Context, input *ecs.DescribeTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilTasksStopped", input).Get(ctx, nil)
}

func (a *ECSStub) WaitUntilTasksStoppedAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilTasksStopped", input)
	return NewVoidFuture(future)
}
