// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/ecs"
	"go.temporal.io/sdk/workflow"
)

type ECSClient interface {
	CreateCapacityProvider(ctx workflow.Context, input *ecs.CreateCapacityProviderInput) (*ecs.CreateCapacityProviderOutput, error)
	CreateCapacityProviderAsync(ctx workflow.Context, input *ecs.CreateCapacityProviderInput) *ECSCreateCapacityProviderFuture

	CreateCluster(ctx workflow.Context, input *ecs.CreateClusterInput) (*ecs.CreateClusterOutput, error)
	CreateClusterAsync(ctx workflow.Context, input *ecs.CreateClusterInput) *ECSCreateClusterFuture

	CreateService(ctx workflow.Context, input *ecs.CreateServiceInput) (*ecs.CreateServiceOutput, error)
	CreateServiceAsync(ctx workflow.Context, input *ecs.CreateServiceInput) *ECSCreateServiceFuture

	CreateTaskSet(ctx workflow.Context, input *ecs.CreateTaskSetInput) (*ecs.CreateTaskSetOutput, error)
	CreateTaskSetAsync(ctx workflow.Context, input *ecs.CreateTaskSetInput) *ECSCreateTaskSetFuture

	DeleteAccountSetting(ctx workflow.Context, input *ecs.DeleteAccountSettingInput) (*ecs.DeleteAccountSettingOutput, error)
	DeleteAccountSettingAsync(ctx workflow.Context, input *ecs.DeleteAccountSettingInput) *ECSDeleteAccountSettingFuture

	DeleteAttributes(ctx workflow.Context, input *ecs.DeleteAttributesInput) (*ecs.DeleteAttributesOutput, error)
	DeleteAttributesAsync(ctx workflow.Context, input *ecs.DeleteAttributesInput) *ECSDeleteAttributesFuture

	DeleteCapacityProvider(ctx workflow.Context, input *ecs.DeleteCapacityProviderInput) (*ecs.DeleteCapacityProviderOutput, error)
	DeleteCapacityProviderAsync(ctx workflow.Context, input *ecs.DeleteCapacityProviderInput) *ECSDeleteCapacityProviderFuture

	DeleteCluster(ctx workflow.Context, input *ecs.DeleteClusterInput) (*ecs.DeleteClusterOutput, error)
	DeleteClusterAsync(ctx workflow.Context, input *ecs.DeleteClusterInput) *ECSDeleteClusterFuture

	DeleteService(ctx workflow.Context, input *ecs.DeleteServiceInput) (*ecs.DeleteServiceOutput, error)
	DeleteServiceAsync(ctx workflow.Context, input *ecs.DeleteServiceInput) *ECSDeleteServiceFuture

	DeleteTaskSet(ctx workflow.Context, input *ecs.DeleteTaskSetInput) (*ecs.DeleteTaskSetOutput, error)
	DeleteTaskSetAsync(ctx workflow.Context, input *ecs.DeleteTaskSetInput) *ECSDeleteTaskSetFuture

	DeregisterContainerInstance(ctx workflow.Context, input *ecs.DeregisterContainerInstanceInput) (*ecs.DeregisterContainerInstanceOutput, error)
	DeregisterContainerInstanceAsync(ctx workflow.Context, input *ecs.DeregisterContainerInstanceInput) *ECSDeregisterContainerInstanceFuture

	DeregisterTaskDefinition(ctx workflow.Context, input *ecs.DeregisterTaskDefinitionInput) (*ecs.DeregisterTaskDefinitionOutput, error)
	DeregisterTaskDefinitionAsync(ctx workflow.Context, input *ecs.DeregisterTaskDefinitionInput) *ECSDeregisterTaskDefinitionFuture

	DescribeCapacityProviders(ctx workflow.Context, input *ecs.DescribeCapacityProvidersInput) (*ecs.DescribeCapacityProvidersOutput, error)
	DescribeCapacityProvidersAsync(ctx workflow.Context, input *ecs.DescribeCapacityProvidersInput) *ECSDescribeCapacityProvidersFuture

	DescribeClusters(ctx workflow.Context, input *ecs.DescribeClustersInput) (*ecs.DescribeClustersOutput, error)
	DescribeClustersAsync(ctx workflow.Context, input *ecs.DescribeClustersInput) *ECSDescribeClustersFuture

	DescribeContainerInstances(ctx workflow.Context, input *ecs.DescribeContainerInstancesInput) (*ecs.DescribeContainerInstancesOutput, error)
	DescribeContainerInstancesAsync(ctx workflow.Context, input *ecs.DescribeContainerInstancesInput) *ECSDescribeContainerInstancesFuture

	DescribeServices(ctx workflow.Context, input *ecs.DescribeServicesInput) (*ecs.DescribeServicesOutput, error)
	DescribeServicesAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *ECSDescribeServicesFuture

	DescribeTaskDefinition(ctx workflow.Context, input *ecs.DescribeTaskDefinitionInput) (*ecs.DescribeTaskDefinitionOutput, error)
	DescribeTaskDefinitionAsync(ctx workflow.Context, input *ecs.DescribeTaskDefinitionInput) *ECSDescribeTaskDefinitionFuture

	DescribeTaskSets(ctx workflow.Context, input *ecs.DescribeTaskSetsInput) (*ecs.DescribeTaskSetsOutput, error)
	DescribeTaskSetsAsync(ctx workflow.Context, input *ecs.DescribeTaskSetsInput) *ECSDescribeTaskSetsFuture

	DescribeTasks(ctx workflow.Context, input *ecs.DescribeTasksInput) (*ecs.DescribeTasksOutput, error)
	DescribeTasksAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *ECSDescribeTasksFuture

	DiscoverPollEndpoint(ctx workflow.Context, input *ecs.DiscoverPollEndpointInput) (*ecs.DiscoverPollEndpointOutput, error)
	DiscoverPollEndpointAsync(ctx workflow.Context, input *ecs.DiscoverPollEndpointInput) *ECSDiscoverPollEndpointFuture

	ListAccountSettings(ctx workflow.Context, input *ecs.ListAccountSettingsInput) (*ecs.ListAccountSettingsOutput, error)
	ListAccountSettingsAsync(ctx workflow.Context, input *ecs.ListAccountSettingsInput) *ECSListAccountSettingsFuture

	ListAttributes(ctx workflow.Context, input *ecs.ListAttributesInput) (*ecs.ListAttributesOutput, error)
	ListAttributesAsync(ctx workflow.Context, input *ecs.ListAttributesInput) *ECSListAttributesFuture

	ListClusters(ctx workflow.Context, input *ecs.ListClustersInput) (*ecs.ListClustersOutput, error)
	ListClustersAsync(ctx workflow.Context, input *ecs.ListClustersInput) *ECSListClustersFuture

	ListContainerInstances(ctx workflow.Context, input *ecs.ListContainerInstancesInput) (*ecs.ListContainerInstancesOutput, error)
	ListContainerInstancesAsync(ctx workflow.Context, input *ecs.ListContainerInstancesInput) *ECSListContainerInstancesFuture

	ListServices(ctx workflow.Context, input *ecs.ListServicesInput) (*ecs.ListServicesOutput, error)
	ListServicesAsync(ctx workflow.Context, input *ecs.ListServicesInput) *ECSListServicesFuture

	ListTagsForResource(ctx workflow.Context, input *ecs.ListTagsForResourceInput) (*ecs.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *ecs.ListTagsForResourceInput) *ECSListTagsForResourceFuture

	ListTaskDefinitionFamilies(ctx workflow.Context, input *ecs.ListTaskDefinitionFamiliesInput) (*ecs.ListTaskDefinitionFamiliesOutput, error)
	ListTaskDefinitionFamiliesAsync(ctx workflow.Context, input *ecs.ListTaskDefinitionFamiliesInput) *ECSListTaskDefinitionFamiliesFuture

	ListTaskDefinitions(ctx workflow.Context, input *ecs.ListTaskDefinitionsInput) (*ecs.ListTaskDefinitionsOutput, error)
	ListTaskDefinitionsAsync(ctx workflow.Context, input *ecs.ListTaskDefinitionsInput) *ECSListTaskDefinitionsFuture

	ListTasks(ctx workflow.Context, input *ecs.ListTasksInput) (*ecs.ListTasksOutput, error)
	ListTasksAsync(ctx workflow.Context, input *ecs.ListTasksInput) *ECSListTasksFuture

	PutAccountSetting(ctx workflow.Context, input *ecs.PutAccountSettingInput) (*ecs.PutAccountSettingOutput, error)
	PutAccountSettingAsync(ctx workflow.Context, input *ecs.PutAccountSettingInput) *ECSPutAccountSettingFuture

	PutAccountSettingDefault(ctx workflow.Context, input *ecs.PutAccountSettingDefaultInput) (*ecs.PutAccountSettingDefaultOutput, error)
	PutAccountSettingDefaultAsync(ctx workflow.Context, input *ecs.PutAccountSettingDefaultInput) *ECSPutAccountSettingDefaultFuture

	PutAttributes(ctx workflow.Context, input *ecs.PutAttributesInput) (*ecs.PutAttributesOutput, error)
	PutAttributesAsync(ctx workflow.Context, input *ecs.PutAttributesInput) *ECSPutAttributesFuture

	PutClusterCapacityProviders(ctx workflow.Context, input *ecs.PutClusterCapacityProvidersInput) (*ecs.PutClusterCapacityProvidersOutput, error)
	PutClusterCapacityProvidersAsync(ctx workflow.Context, input *ecs.PutClusterCapacityProvidersInput) *ECSPutClusterCapacityProvidersFuture

	RegisterContainerInstance(ctx workflow.Context, input *ecs.RegisterContainerInstanceInput) (*ecs.RegisterContainerInstanceOutput, error)
	RegisterContainerInstanceAsync(ctx workflow.Context, input *ecs.RegisterContainerInstanceInput) *ECSRegisterContainerInstanceFuture

	RegisterTaskDefinition(ctx workflow.Context, input *ecs.RegisterTaskDefinitionInput) (*ecs.RegisterTaskDefinitionOutput, error)
	RegisterTaskDefinitionAsync(ctx workflow.Context, input *ecs.RegisterTaskDefinitionInput) *ECSRegisterTaskDefinitionFuture

	RunTask(ctx workflow.Context, input *ecs.RunTaskInput) (*ecs.RunTaskOutput, error)
	RunTaskAsync(ctx workflow.Context, input *ecs.RunTaskInput) *ECSRunTaskFuture

	StartTask(ctx workflow.Context, input *ecs.StartTaskInput) (*ecs.StartTaskOutput, error)
	StartTaskAsync(ctx workflow.Context, input *ecs.StartTaskInput) *ECSStartTaskFuture

	StopTask(ctx workflow.Context, input *ecs.StopTaskInput) (*ecs.StopTaskOutput, error)
	StopTaskAsync(ctx workflow.Context, input *ecs.StopTaskInput) *ECSStopTaskFuture

	SubmitAttachmentStateChanges(ctx workflow.Context, input *ecs.SubmitAttachmentStateChangesInput) (*ecs.SubmitAttachmentStateChangesOutput, error)
	SubmitAttachmentStateChangesAsync(ctx workflow.Context, input *ecs.SubmitAttachmentStateChangesInput) *ECSSubmitAttachmentStateChangesFuture

	SubmitContainerStateChange(ctx workflow.Context, input *ecs.SubmitContainerStateChangeInput) (*ecs.SubmitContainerStateChangeOutput, error)
	SubmitContainerStateChangeAsync(ctx workflow.Context, input *ecs.SubmitContainerStateChangeInput) *ECSSubmitContainerStateChangeFuture

	SubmitTaskStateChange(ctx workflow.Context, input *ecs.SubmitTaskStateChangeInput) (*ecs.SubmitTaskStateChangeOutput, error)
	SubmitTaskStateChangeAsync(ctx workflow.Context, input *ecs.SubmitTaskStateChangeInput) *ECSSubmitTaskStateChangeFuture

	TagResource(ctx workflow.Context, input *ecs.TagResourceInput) (*ecs.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *ecs.TagResourceInput) *ECSTagResourceFuture

	UntagResource(ctx workflow.Context, input *ecs.UntagResourceInput) (*ecs.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *ecs.UntagResourceInput) *ECSUntagResourceFuture

	UpdateClusterSettings(ctx workflow.Context, input *ecs.UpdateClusterSettingsInput) (*ecs.UpdateClusterSettingsOutput, error)
	UpdateClusterSettingsAsync(ctx workflow.Context, input *ecs.UpdateClusterSettingsInput) *ECSUpdateClusterSettingsFuture

	UpdateContainerAgent(ctx workflow.Context, input *ecs.UpdateContainerAgentInput) (*ecs.UpdateContainerAgentOutput, error)
	UpdateContainerAgentAsync(ctx workflow.Context, input *ecs.UpdateContainerAgentInput) *ECSUpdateContainerAgentFuture

	UpdateContainerInstancesState(ctx workflow.Context, input *ecs.UpdateContainerInstancesStateInput) (*ecs.UpdateContainerInstancesStateOutput, error)
	UpdateContainerInstancesStateAsync(ctx workflow.Context, input *ecs.UpdateContainerInstancesStateInput) *ECSUpdateContainerInstancesStateFuture

	UpdateService(ctx workflow.Context, input *ecs.UpdateServiceInput) (*ecs.UpdateServiceOutput, error)
	UpdateServiceAsync(ctx workflow.Context, input *ecs.UpdateServiceInput) *ECSUpdateServiceFuture

	UpdateServicePrimaryTaskSet(ctx workflow.Context, input *ecs.UpdateServicePrimaryTaskSetInput) (*ecs.UpdateServicePrimaryTaskSetOutput, error)
	UpdateServicePrimaryTaskSetAsync(ctx workflow.Context, input *ecs.UpdateServicePrimaryTaskSetInput) *ECSUpdateServicePrimaryTaskSetFuture

	UpdateTaskSet(ctx workflow.Context, input *ecs.UpdateTaskSetInput) (*ecs.UpdateTaskSetOutput, error)
	UpdateTaskSetAsync(ctx workflow.Context, input *ecs.UpdateTaskSetInput) *ECSUpdateTaskSetFuture

	WaitUntilServicesInactive(ctx workflow.Context, input *ecs.DescribeServicesInput) error
	WaitUntilServicesInactiveAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *VoidFuture

	WaitUntilServicesStable(ctx workflow.Context, input *ecs.DescribeServicesInput) error
	WaitUntilServicesStableAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *VoidFuture

	WaitUntilTasksRunning(ctx workflow.Context, input *ecs.DescribeTasksInput) error
	WaitUntilTasksRunningAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *VoidFuture

	WaitUntilTasksStopped(ctx workflow.Context, input *ecs.DescribeTasksInput) error
	WaitUntilTasksStoppedAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *VoidFuture
}

type ECSStub struct{}

func NewECSStub() ECSClient {
	return &ECSStub{}
}

type ECSCreateCapacityProviderFuture struct {
	Future workflow.Future
}

func (r *ECSCreateCapacityProviderFuture) Get(ctx workflow.Context) (*ecs.CreateCapacityProviderOutput, error) {
	var output ecs.CreateCapacityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSCreateClusterFuture struct {
	Future workflow.Future
}

func (r *ECSCreateClusterFuture) Get(ctx workflow.Context) (*ecs.CreateClusterOutput, error) {
	var output ecs.CreateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSCreateServiceFuture struct {
	Future workflow.Future
}

func (r *ECSCreateServiceFuture) Get(ctx workflow.Context) (*ecs.CreateServiceOutput, error) {
	var output ecs.CreateServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSCreateTaskSetFuture struct {
	Future workflow.Future
}

func (r *ECSCreateTaskSetFuture) Get(ctx workflow.Context) (*ecs.CreateTaskSetOutput, error) {
	var output ecs.CreateTaskSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDeleteAccountSettingFuture struct {
	Future workflow.Future
}

func (r *ECSDeleteAccountSettingFuture) Get(ctx workflow.Context) (*ecs.DeleteAccountSettingOutput, error) {
	var output ecs.DeleteAccountSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDeleteAttributesFuture struct {
	Future workflow.Future
}

func (r *ECSDeleteAttributesFuture) Get(ctx workflow.Context) (*ecs.DeleteAttributesOutput, error) {
	var output ecs.DeleteAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDeleteCapacityProviderFuture struct {
	Future workflow.Future
}

func (r *ECSDeleteCapacityProviderFuture) Get(ctx workflow.Context) (*ecs.DeleteCapacityProviderOutput, error) {
	var output ecs.DeleteCapacityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDeleteClusterFuture struct {
	Future workflow.Future
}

func (r *ECSDeleteClusterFuture) Get(ctx workflow.Context) (*ecs.DeleteClusterOutput, error) {
	var output ecs.DeleteClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDeleteServiceFuture struct {
	Future workflow.Future
}

func (r *ECSDeleteServiceFuture) Get(ctx workflow.Context) (*ecs.DeleteServiceOutput, error) {
	var output ecs.DeleteServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDeleteTaskSetFuture struct {
	Future workflow.Future
}

func (r *ECSDeleteTaskSetFuture) Get(ctx workflow.Context) (*ecs.DeleteTaskSetOutput, error) {
	var output ecs.DeleteTaskSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDeregisterContainerInstanceFuture struct {
	Future workflow.Future
}

func (r *ECSDeregisterContainerInstanceFuture) Get(ctx workflow.Context) (*ecs.DeregisterContainerInstanceOutput, error) {
	var output ecs.DeregisterContainerInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDeregisterTaskDefinitionFuture struct {
	Future workflow.Future
}

func (r *ECSDeregisterTaskDefinitionFuture) Get(ctx workflow.Context) (*ecs.DeregisterTaskDefinitionOutput, error) {
	var output ecs.DeregisterTaskDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDescribeCapacityProvidersFuture struct {
	Future workflow.Future
}

func (r *ECSDescribeCapacityProvidersFuture) Get(ctx workflow.Context) (*ecs.DescribeCapacityProvidersOutput, error) {
	var output ecs.DescribeCapacityProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDescribeClustersFuture struct {
	Future workflow.Future
}

func (r *ECSDescribeClustersFuture) Get(ctx workflow.Context) (*ecs.DescribeClustersOutput, error) {
	var output ecs.DescribeClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDescribeContainerInstancesFuture struct {
	Future workflow.Future
}

func (r *ECSDescribeContainerInstancesFuture) Get(ctx workflow.Context) (*ecs.DescribeContainerInstancesOutput, error) {
	var output ecs.DescribeContainerInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDescribeServicesFuture struct {
	Future workflow.Future
}

func (r *ECSDescribeServicesFuture) Get(ctx workflow.Context) (*ecs.DescribeServicesOutput, error) {
	var output ecs.DescribeServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDescribeTaskDefinitionFuture struct {
	Future workflow.Future
}

func (r *ECSDescribeTaskDefinitionFuture) Get(ctx workflow.Context) (*ecs.DescribeTaskDefinitionOutput, error) {
	var output ecs.DescribeTaskDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDescribeTaskSetsFuture struct {
	Future workflow.Future
}

func (r *ECSDescribeTaskSetsFuture) Get(ctx workflow.Context) (*ecs.DescribeTaskSetsOutput, error) {
	var output ecs.DescribeTaskSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDescribeTasksFuture struct {
	Future workflow.Future
}

func (r *ECSDescribeTasksFuture) Get(ctx workflow.Context) (*ecs.DescribeTasksOutput, error) {
	var output ecs.DescribeTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSDiscoverPollEndpointFuture struct {
	Future workflow.Future
}

func (r *ECSDiscoverPollEndpointFuture) Get(ctx workflow.Context) (*ecs.DiscoverPollEndpointOutput, error) {
	var output ecs.DiscoverPollEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSListAccountSettingsFuture struct {
	Future workflow.Future
}

func (r *ECSListAccountSettingsFuture) Get(ctx workflow.Context) (*ecs.ListAccountSettingsOutput, error) {
	var output ecs.ListAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSListAttributesFuture struct {
	Future workflow.Future
}

func (r *ECSListAttributesFuture) Get(ctx workflow.Context) (*ecs.ListAttributesOutput, error) {
	var output ecs.ListAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSListClustersFuture struct {
	Future workflow.Future
}

func (r *ECSListClustersFuture) Get(ctx workflow.Context) (*ecs.ListClustersOutput, error) {
	var output ecs.ListClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSListContainerInstancesFuture struct {
	Future workflow.Future
}

func (r *ECSListContainerInstancesFuture) Get(ctx workflow.Context) (*ecs.ListContainerInstancesOutput, error) {
	var output ecs.ListContainerInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSListServicesFuture struct {
	Future workflow.Future
}

func (r *ECSListServicesFuture) Get(ctx workflow.Context) (*ecs.ListServicesOutput, error) {
	var output ecs.ListServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ECSListTagsForResourceFuture) Get(ctx workflow.Context) (*ecs.ListTagsForResourceOutput, error) {
	var output ecs.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSListTaskDefinitionFamiliesFuture struct {
	Future workflow.Future
}

func (r *ECSListTaskDefinitionFamiliesFuture) Get(ctx workflow.Context) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	var output ecs.ListTaskDefinitionFamiliesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSListTaskDefinitionsFuture struct {
	Future workflow.Future
}

func (r *ECSListTaskDefinitionsFuture) Get(ctx workflow.Context) (*ecs.ListTaskDefinitionsOutput, error) {
	var output ecs.ListTaskDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSListTasksFuture struct {
	Future workflow.Future
}

func (r *ECSListTasksFuture) Get(ctx workflow.Context) (*ecs.ListTasksOutput, error) {
	var output ecs.ListTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSPutAccountSettingFuture struct {
	Future workflow.Future
}

func (r *ECSPutAccountSettingFuture) Get(ctx workflow.Context) (*ecs.PutAccountSettingOutput, error) {
	var output ecs.PutAccountSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSPutAccountSettingDefaultFuture struct {
	Future workflow.Future
}

func (r *ECSPutAccountSettingDefaultFuture) Get(ctx workflow.Context) (*ecs.PutAccountSettingDefaultOutput, error) {
	var output ecs.PutAccountSettingDefaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSPutAttributesFuture struct {
	Future workflow.Future
}

func (r *ECSPutAttributesFuture) Get(ctx workflow.Context) (*ecs.PutAttributesOutput, error) {
	var output ecs.PutAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSPutClusterCapacityProvidersFuture struct {
	Future workflow.Future
}

func (r *ECSPutClusterCapacityProvidersFuture) Get(ctx workflow.Context) (*ecs.PutClusterCapacityProvidersOutput, error) {
	var output ecs.PutClusterCapacityProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSRegisterContainerInstanceFuture struct {
	Future workflow.Future
}

func (r *ECSRegisterContainerInstanceFuture) Get(ctx workflow.Context) (*ecs.RegisterContainerInstanceOutput, error) {
	var output ecs.RegisterContainerInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSRegisterTaskDefinitionFuture struct {
	Future workflow.Future
}

func (r *ECSRegisterTaskDefinitionFuture) Get(ctx workflow.Context) (*ecs.RegisterTaskDefinitionOutput, error) {
	var output ecs.RegisterTaskDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSRunTaskFuture struct {
	Future workflow.Future
}

func (r *ECSRunTaskFuture) Get(ctx workflow.Context) (*ecs.RunTaskOutput, error) {
	var output ecs.RunTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSStartTaskFuture struct {
	Future workflow.Future
}

func (r *ECSStartTaskFuture) Get(ctx workflow.Context) (*ecs.StartTaskOutput, error) {
	var output ecs.StartTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSStopTaskFuture struct {
	Future workflow.Future
}

func (r *ECSStopTaskFuture) Get(ctx workflow.Context) (*ecs.StopTaskOutput, error) {
	var output ecs.StopTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSSubmitAttachmentStateChangesFuture struct {
	Future workflow.Future
}

func (r *ECSSubmitAttachmentStateChangesFuture) Get(ctx workflow.Context) (*ecs.SubmitAttachmentStateChangesOutput, error) {
	var output ecs.SubmitAttachmentStateChangesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSSubmitContainerStateChangeFuture struct {
	Future workflow.Future
}

func (r *ECSSubmitContainerStateChangeFuture) Get(ctx workflow.Context) (*ecs.SubmitContainerStateChangeOutput, error) {
	var output ecs.SubmitContainerStateChangeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSSubmitTaskStateChangeFuture struct {
	Future workflow.Future
}

func (r *ECSSubmitTaskStateChangeFuture) Get(ctx workflow.Context) (*ecs.SubmitTaskStateChangeOutput, error) {
	var output ecs.SubmitTaskStateChangeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSTagResourceFuture struct {
	Future workflow.Future
}

func (r *ECSTagResourceFuture) Get(ctx workflow.Context) (*ecs.TagResourceOutput, error) {
	var output ecs.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSUntagResourceFuture struct {
	Future workflow.Future
}

func (r *ECSUntagResourceFuture) Get(ctx workflow.Context) (*ecs.UntagResourceOutput, error) {
	var output ecs.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSUpdateClusterSettingsFuture struct {
	Future workflow.Future
}

func (r *ECSUpdateClusterSettingsFuture) Get(ctx workflow.Context) (*ecs.UpdateClusterSettingsOutput, error) {
	var output ecs.UpdateClusterSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSUpdateContainerAgentFuture struct {
	Future workflow.Future
}

func (r *ECSUpdateContainerAgentFuture) Get(ctx workflow.Context) (*ecs.UpdateContainerAgentOutput, error) {
	var output ecs.UpdateContainerAgentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSUpdateContainerInstancesStateFuture struct {
	Future workflow.Future
}

func (r *ECSUpdateContainerInstancesStateFuture) Get(ctx workflow.Context) (*ecs.UpdateContainerInstancesStateOutput, error) {
	var output ecs.UpdateContainerInstancesStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSUpdateServiceFuture struct {
	Future workflow.Future
}

func (r *ECSUpdateServiceFuture) Get(ctx workflow.Context) (*ecs.UpdateServiceOutput, error) {
	var output ecs.UpdateServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSUpdateServicePrimaryTaskSetFuture struct {
	Future workflow.Future
}

func (r *ECSUpdateServicePrimaryTaskSetFuture) Get(ctx workflow.Context) (*ecs.UpdateServicePrimaryTaskSetOutput, error) {
	var output ecs.UpdateServicePrimaryTaskSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECSUpdateTaskSetFuture struct {
	Future workflow.Future
}

func (r *ECSUpdateTaskSetFuture) Get(ctx workflow.Context) (*ecs.UpdateTaskSetOutput, error) {
	var output ecs.UpdateTaskSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) CreateCapacityProvider(ctx workflow.Context, input *ecs.CreateCapacityProviderInput) (*ecs.CreateCapacityProviderOutput, error) {
	var output ecs.CreateCapacityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.CreateCapacityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) CreateCapacityProviderAsync(ctx workflow.Context, input *ecs.CreateCapacityProviderInput) *ECSCreateCapacityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.CreateCapacityProvider", input)
	return &ECSCreateCapacityProviderFuture{Future: future}
}

func (a *ECSStub) CreateCluster(ctx workflow.Context, input *ecs.CreateClusterInput) (*ecs.CreateClusterOutput, error) {
	var output ecs.CreateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.CreateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) CreateClusterAsync(ctx workflow.Context, input *ecs.CreateClusterInput) *ECSCreateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.CreateCluster", input)
	return &ECSCreateClusterFuture{Future: future}
}

func (a *ECSStub) CreateService(ctx workflow.Context, input *ecs.CreateServiceInput) (*ecs.CreateServiceOutput, error) {
	var output ecs.CreateServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.CreateService", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) CreateServiceAsync(ctx workflow.Context, input *ecs.CreateServiceInput) *ECSCreateServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.CreateService", input)
	return &ECSCreateServiceFuture{Future: future}
}

func (a *ECSStub) CreateTaskSet(ctx workflow.Context, input *ecs.CreateTaskSetInput) (*ecs.CreateTaskSetOutput, error) {
	var output ecs.CreateTaskSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.CreateTaskSet", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) CreateTaskSetAsync(ctx workflow.Context, input *ecs.CreateTaskSetInput) *ECSCreateTaskSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.CreateTaskSet", input)
	return &ECSCreateTaskSetFuture{Future: future}
}

func (a *ECSStub) DeleteAccountSetting(ctx workflow.Context, input *ecs.DeleteAccountSettingInput) (*ecs.DeleteAccountSettingOutput, error) {
	var output ecs.DeleteAccountSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteAccountSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeleteAccountSettingAsync(ctx workflow.Context, input *ecs.DeleteAccountSettingInput) *ECSDeleteAccountSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteAccountSetting", input)
	return &ECSDeleteAccountSettingFuture{Future: future}
}

func (a *ECSStub) DeleteAttributes(ctx workflow.Context, input *ecs.DeleteAttributesInput) (*ecs.DeleteAttributesOutput, error) {
	var output ecs.DeleteAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeleteAttributesAsync(ctx workflow.Context, input *ecs.DeleteAttributesInput) *ECSDeleteAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteAttributes", input)
	return &ECSDeleteAttributesFuture{Future: future}
}

func (a *ECSStub) DeleteCapacityProvider(ctx workflow.Context, input *ecs.DeleteCapacityProviderInput) (*ecs.DeleteCapacityProviderOutput, error) {
	var output ecs.DeleteCapacityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteCapacityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeleteCapacityProviderAsync(ctx workflow.Context, input *ecs.DeleteCapacityProviderInput) *ECSDeleteCapacityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteCapacityProvider", input)
	return &ECSDeleteCapacityProviderFuture{Future: future}
}

func (a *ECSStub) DeleteCluster(ctx workflow.Context, input *ecs.DeleteClusterInput) (*ecs.DeleteClusterOutput, error) {
	var output ecs.DeleteClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeleteClusterAsync(ctx workflow.Context, input *ecs.DeleteClusterInput) *ECSDeleteClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteCluster", input)
	return &ECSDeleteClusterFuture{Future: future}
}

func (a *ECSStub) DeleteService(ctx workflow.Context, input *ecs.DeleteServiceInput) (*ecs.DeleteServiceOutput, error) {
	var output ecs.DeleteServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteService", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeleteServiceAsync(ctx workflow.Context, input *ecs.DeleteServiceInput) *ECSDeleteServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteService", input)
	return &ECSDeleteServiceFuture{Future: future}
}

func (a *ECSStub) DeleteTaskSet(ctx workflow.Context, input *ecs.DeleteTaskSetInput) (*ecs.DeleteTaskSetOutput, error) {
	var output ecs.DeleteTaskSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteTaskSet", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeleteTaskSetAsync(ctx workflow.Context, input *ecs.DeleteTaskSetInput) *ECSDeleteTaskSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeleteTaskSet", input)
	return &ECSDeleteTaskSetFuture{Future: future}
}

func (a *ECSStub) DeregisterContainerInstance(ctx workflow.Context, input *ecs.DeregisterContainerInstanceInput) (*ecs.DeregisterContainerInstanceOutput, error) {
	var output ecs.DeregisterContainerInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeregisterContainerInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeregisterContainerInstanceAsync(ctx workflow.Context, input *ecs.DeregisterContainerInstanceInput) *ECSDeregisterContainerInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeregisterContainerInstance", input)
	return &ECSDeregisterContainerInstanceFuture{Future: future}
}

func (a *ECSStub) DeregisterTaskDefinition(ctx workflow.Context, input *ecs.DeregisterTaskDefinitionInput) (*ecs.DeregisterTaskDefinitionOutput, error) {
	var output ecs.DeregisterTaskDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DeregisterTaskDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DeregisterTaskDefinitionAsync(ctx workflow.Context, input *ecs.DeregisterTaskDefinitionInput) *ECSDeregisterTaskDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DeregisterTaskDefinition", input)
	return &ECSDeregisterTaskDefinitionFuture{Future: future}
}

func (a *ECSStub) DescribeCapacityProviders(ctx workflow.Context, input *ecs.DescribeCapacityProvidersInput) (*ecs.DescribeCapacityProvidersOutput, error) {
	var output ecs.DescribeCapacityProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeCapacityProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeCapacityProvidersAsync(ctx workflow.Context, input *ecs.DescribeCapacityProvidersInput) *ECSDescribeCapacityProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeCapacityProviders", input)
	return &ECSDescribeCapacityProvidersFuture{Future: future}
}

func (a *ECSStub) DescribeClusters(ctx workflow.Context, input *ecs.DescribeClustersInput) (*ecs.DescribeClustersOutput, error) {
	var output ecs.DescribeClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeClustersAsync(ctx workflow.Context, input *ecs.DescribeClustersInput) *ECSDescribeClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeClusters", input)
	return &ECSDescribeClustersFuture{Future: future}
}

func (a *ECSStub) DescribeContainerInstances(ctx workflow.Context, input *ecs.DescribeContainerInstancesInput) (*ecs.DescribeContainerInstancesOutput, error) {
	var output ecs.DescribeContainerInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeContainerInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeContainerInstancesAsync(ctx workflow.Context, input *ecs.DescribeContainerInstancesInput) *ECSDescribeContainerInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeContainerInstances", input)
	return &ECSDescribeContainerInstancesFuture{Future: future}
}

func (a *ECSStub) DescribeServices(ctx workflow.Context, input *ecs.DescribeServicesInput) (*ecs.DescribeServicesOutput, error) {
	var output ecs.DescribeServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeServices", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeServicesAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *ECSDescribeServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeServices", input)
	return &ECSDescribeServicesFuture{Future: future}
}

func (a *ECSStub) DescribeTaskDefinition(ctx workflow.Context, input *ecs.DescribeTaskDefinitionInput) (*ecs.DescribeTaskDefinitionOutput, error) {
	var output ecs.DescribeTaskDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeTaskDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeTaskDefinitionAsync(ctx workflow.Context, input *ecs.DescribeTaskDefinitionInput) *ECSDescribeTaskDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeTaskDefinition", input)
	return &ECSDescribeTaskDefinitionFuture{Future: future}
}

func (a *ECSStub) DescribeTaskSets(ctx workflow.Context, input *ecs.DescribeTaskSetsInput) (*ecs.DescribeTaskSetsOutput, error) {
	var output ecs.DescribeTaskSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeTaskSets", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeTaskSetsAsync(ctx workflow.Context, input *ecs.DescribeTaskSetsInput) *ECSDescribeTaskSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeTaskSets", input)
	return &ECSDescribeTaskSetsFuture{Future: future}
}

func (a *ECSStub) DescribeTasks(ctx workflow.Context, input *ecs.DescribeTasksInput) (*ecs.DescribeTasksOutput, error) {
	var output ecs.DescribeTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DescribeTasksAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *ECSDescribeTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DescribeTasks", input)
	return &ECSDescribeTasksFuture{Future: future}
}

func (a *ECSStub) DiscoverPollEndpoint(ctx workflow.Context, input *ecs.DiscoverPollEndpointInput) (*ecs.DiscoverPollEndpointOutput, error) {
	var output ecs.DiscoverPollEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.DiscoverPollEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) DiscoverPollEndpointAsync(ctx workflow.Context, input *ecs.DiscoverPollEndpointInput) *ECSDiscoverPollEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.DiscoverPollEndpoint", input)
	return &ECSDiscoverPollEndpointFuture{Future: future}
}

func (a *ECSStub) ListAccountSettings(ctx workflow.Context, input *ecs.ListAccountSettingsInput) (*ecs.ListAccountSettingsOutput, error) {
	var output ecs.ListAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListAccountSettingsAsync(ctx workflow.Context, input *ecs.ListAccountSettingsInput) *ECSListAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListAccountSettings", input)
	return &ECSListAccountSettingsFuture{Future: future}
}

func (a *ECSStub) ListAttributes(ctx workflow.Context, input *ecs.ListAttributesInput) (*ecs.ListAttributesOutput, error) {
	var output ecs.ListAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListAttributesAsync(ctx workflow.Context, input *ecs.ListAttributesInput) *ECSListAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListAttributes", input)
	return &ECSListAttributesFuture{Future: future}
}

func (a *ECSStub) ListClusters(ctx workflow.Context, input *ecs.ListClustersInput) (*ecs.ListClustersOutput, error) {
	var output ecs.ListClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListClustersAsync(ctx workflow.Context, input *ecs.ListClustersInput) *ECSListClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListClusters", input)
	return &ECSListClustersFuture{Future: future}
}

func (a *ECSStub) ListContainerInstances(ctx workflow.Context, input *ecs.ListContainerInstancesInput) (*ecs.ListContainerInstancesOutput, error) {
	var output ecs.ListContainerInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListContainerInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListContainerInstancesAsync(ctx workflow.Context, input *ecs.ListContainerInstancesInput) *ECSListContainerInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListContainerInstances", input)
	return &ECSListContainerInstancesFuture{Future: future}
}

func (a *ECSStub) ListServices(ctx workflow.Context, input *ecs.ListServicesInput) (*ecs.ListServicesOutput, error) {
	var output ecs.ListServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListServices", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListServicesAsync(ctx workflow.Context, input *ecs.ListServicesInput) *ECSListServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListServices", input)
	return &ECSListServicesFuture{Future: future}
}

func (a *ECSStub) ListTagsForResource(ctx workflow.Context, input *ecs.ListTagsForResourceInput) (*ecs.ListTagsForResourceOutput, error) {
	var output ecs.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListTagsForResourceAsync(ctx workflow.Context, input *ecs.ListTagsForResourceInput) *ECSListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListTagsForResource", input)
	return &ECSListTagsForResourceFuture{Future: future}
}

func (a *ECSStub) ListTaskDefinitionFamilies(ctx workflow.Context, input *ecs.ListTaskDefinitionFamiliesInput) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	var output ecs.ListTaskDefinitionFamiliesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListTaskDefinitionFamilies", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListTaskDefinitionFamiliesAsync(ctx workflow.Context, input *ecs.ListTaskDefinitionFamiliesInput) *ECSListTaskDefinitionFamiliesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListTaskDefinitionFamilies", input)
	return &ECSListTaskDefinitionFamiliesFuture{Future: future}
}

func (a *ECSStub) ListTaskDefinitions(ctx workflow.Context, input *ecs.ListTaskDefinitionsInput) (*ecs.ListTaskDefinitionsOutput, error) {
	var output ecs.ListTaskDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListTaskDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListTaskDefinitionsAsync(ctx workflow.Context, input *ecs.ListTaskDefinitionsInput) *ECSListTaskDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListTaskDefinitions", input)
	return &ECSListTaskDefinitionsFuture{Future: future}
}

func (a *ECSStub) ListTasks(ctx workflow.Context, input *ecs.ListTasksInput) (*ecs.ListTasksOutput, error) {
	var output ecs.ListTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.ListTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) ListTasksAsync(ctx workflow.Context, input *ecs.ListTasksInput) *ECSListTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.ListTasks", input)
	return &ECSListTasksFuture{Future: future}
}

func (a *ECSStub) PutAccountSetting(ctx workflow.Context, input *ecs.PutAccountSettingInput) (*ecs.PutAccountSettingOutput, error) {
	var output ecs.PutAccountSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.PutAccountSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) PutAccountSettingAsync(ctx workflow.Context, input *ecs.PutAccountSettingInput) *ECSPutAccountSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.PutAccountSetting", input)
	return &ECSPutAccountSettingFuture{Future: future}
}

func (a *ECSStub) PutAccountSettingDefault(ctx workflow.Context, input *ecs.PutAccountSettingDefaultInput) (*ecs.PutAccountSettingDefaultOutput, error) {
	var output ecs.PutAccountSettingDefaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.PutAccountSettingDefault", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) PutAccountSettingDefaultAsync(ctx workflow.Context, input *ecs.PutAccountSettingDefaultInput) *ECSPutAccountSettingDefaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.PutAccountSettingDefault", input)
	return &ECSPutAccountSettingDefaultFuture{Future: future}
}

func (a *ECSStub) PutAttributes(ctx workflow.Context, input *ecs.PutAttributesInput) (*ecs.PutAttributesOutput, error) {
	var output ecs.PutAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.PutAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) PutAttributesAsync(ctx workflow.Context, input *ecs.PutAttributesInput) *ECSPutAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.PutAttributes", input)
	return &ECSPutAttributesFuture{Future: future}
}

func (a *ECSStub) PutClusterCapacityProviders(ctx workflow.Context, input *ecs.PutClusterCapacityProvidersInput) (*ecs.PutClusterCapacityProvidersOutput, error) {
	var output ecs.PutClusterCapacityProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.PutClusterCapacityProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) PutClusterCapacityProvidersAsync(ctx workflow.Context, input *ecs.PutClusterCapacityProvidersInput) *ECSPutClusterCapacityProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.PutClusterCapacityProviders", input)
	return &ECSPutClusterCapacityProvidersFuture{Future: future}
}

func (a *ECSStub) RegisterContainerInstance(ctx workflow.Context, input *ecs.RegisterContainerInstanceInput) (*ecs.RegisterContainerInstanceOutput, error) {
	var output ecs.RegisterContainerInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.RegisterContainerInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) RegisterContainerInstanceAsync(ctx workflow.Context, input *ecs.RegisterContainerInstanceInput) *ECSRegisterContainerInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.RegisterContainerInstance", input)
	return &ECSRegisterContainerInstanceFuture{Future: future}
}

func (a *ECSStub) RegisterTaskDefinition(ctx workflow.Context, input *ecs.RegisterTaskDefinitionInput) (*ecs.RegisterTaskDefinitionOutput, error) {
	var output ecs.RegisterTaskDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.RegisterTaskDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) RegisterTaskDefinitionAsync(ctx workflow.Context, input *ecs.RegisterTaskDefinitionInput) *ECSRegisterTaskDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.RegisterTaskDefinition", input)
	return &ECSRegisterTaskDefinitionFuture{Future: future}
}

func (a *ECSStub) RunTask(ctx workflow.Context, input *ecs.RunTaskInput) (*ecs.RunTaskOutput, error) {
	var output ecs.RunTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.RunTask", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) RunTaskAsync(ctx workflow.Context, input *ecs.RunTaskInput) *ECSRunTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.RunTask", input)
	return &ECSRunTaskFuture{Future: future}
}

func (a *ECSStub) StartTask(ctx workflow.Context, input *ecs.StartTaskInput) (*ecs.StartTaskOutput, error) {
	var output ecs.StartTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.StartTask", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) StartTaskAsync(ctx workflow.Context, input *ecs.StartTaskInput) *ECSStartTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.StartTask", input)
	return &ECSStartTaskFuture{Future: future}
}

func (a *ECSStub) StopTask(ctx workflow.Context, input *ecs.StopTaskInput) (*ecs.StopTaskOutput, error) {
	var output ecs.StopTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.StopTask", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) StopTaskAsync(ctx workflow.Context, input *ecs.StopTaskInput) *ECSStopTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.StopTask", input)
	return &ECSStopTaskFuture{Future: future}
}

func (a *ECSStub) SubmitAttachmentStateChanges(ctx workflow.Context, input *ecs.SubmitAttachmentStateChangesInput) (*ecs.SubmitAttachmentStateChangesOutput, error) {
	var output ecs.SubmitAttachmentStateChangesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.SubmitAttachmentStateChanges", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) SubmitAttachmentStateChangesAsync(ctx workflow.Context, input *ecs.SubmitAttachmentStateChangesInput) *ECSSubmitAttachmentStateChangesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.SubmitAttachmentStateChanges", input)
	return &ECSSubmitAttachmentStateChangesFuture{Future: future}
}

func (a *ECSStub) SubmitContainerStateChange(ctx workflow.Context, input *ecs.SubmitContainerStateChangeInput) (*ecs.SubmitContainerStateChangeOutput, error) {
	var output ecs.SubmitContainerStateChangeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.SubmitContainerStateChange", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) SubmitContainerStateChangeAsync(ctx workflow.Context, input *ecs.SubmitContainerStateChangeInput) *ECSSubmitContainerStateChangeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.SubmitContainerStateChange", input)
	return &ECSSubmitContainerStateChangeFuture{Future: future}
}

func (a *ECSStub) SubmitTaskStateChange(ctx workflow.Context, input *ecs.SubmitTaskStateChangeInput) (*ecs.SubmitTaskStateChangeOutput, error) {
	var output ecs.SubmitTaskStateChangeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.SubmitTaskStateChange", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) SubmitTaskStateChangeAsync(ctx workflow.Context, input *ecs.SubmitTaskStateChangeInput) *ECSSubmitTaskStateChangeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.SubmitTaskStateChange", input)
	return &ECSSubmitTaskStateChangeFuture{Future: future}
}

func (a *ECSStub) TagResource(ctx workflow.Context, input *ecs.TagResourceInput) (*ecs.TagResourceOutput, error) {
	var output ecs.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) TagResourceAsync(ctx workflow.Context, input *ecs.TagResourceInput) *ECSTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.TagResource", input)
	return &ECSTagResourceFuture{Future: future}
}

func (a *ECSStub) UntagResource(ctx workflow.Context, input *ecs.UntagResourceInput) (*ecs.UntagResourceOutput, error) {
	var output ecs.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UntagResourceAsync(ctx workflow.Context, input *ecs.UntagResourceInput) *ECSUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UntagResource", input)
	return &ECSUntagResourceFuture{Future: future}
}

func (a *ECSStub) UpdateClusterSettings(ctx workflow.Context, input *ecs.UpdateClusterSettingsInput) (*ecs.UpdateClusterSettingsOutput, error) {
	var output ecs.UpdateClusterSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateClusterSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UpdateClusterSettingsAsync(ctx workflow.Context, input *ecs.UpdateClusterSettingsInput) *ECSUpdateClusterSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateClusterSettings", input)
	return &ECSUpdateClusterSettingsFuture{Future: future}
}

func (a *ECSStub) UpdateContainerAgent(ctx workflow.Context, input *ecs.UpdateContainerAgentInput) (*ecs.UpdateContainerAgentOutput, error) {
	var output ecs.UpdateContainerAgentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateContainerAgent", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UpdateContainerAgentAsync(ctx workflow.Context, input *ecs.UpdateContainerAgentInput) *ECSUpdateContainerAgentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateContainerAgent", input)
	return &ECSUpdateContainerAgentFuture{Future: future}
}

func (a *ECSStub) UpdateContainerInstancesState(ctx workflow.Context, input *ecs.UpdateContainerInstancesStateInput) (*ecs.UpdateContainerInstancesStateOutput, error) {
	var output ecs.UpdateContainerInstancesStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateContainerInstancesState", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UpdateContainerInstancesStateAsync(ctx workflow.Context, input *ecs.UpdateContainerInstancesStateInput) *ECSUpdateContainerInstancesStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateContainerInstancesState", input)
	return &ECSUpdateContainerInstancesStateFuture{Future: future}
}

func (a *ECSStub) UpdateService(ctx workflow.Context, input *ecs.UpdateServiceInput) (*ecs.UpdateServiceOutput, error) {
	var output ecs.UpdateServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateService", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UpdateServiceAsync(ctx workflow.Context, input *ecs.UpdateServiceInput) *ECSUpdateServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateService", input)
	return &ECSUpdateServiceFuture{Future: future}
}

func (a *ECSStub) UpdateServicePrimaryTaskSet(ctx workflow.Context, input *ecs.UpdateServicePrimaryTaskSetInput) (*ecs.UpdateServicePrimaryTaskSetOutput, error) {
	var output ecs.UpdateServicePrimaryTaskSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateServicePrimaryTaskSet", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UpdateServicePrimaryTaskSetAsync(ctx workflow.Context, input *ecs.UpdateServicePrimaryTaskSetInput) *ECSUpdateServicePrimaryTaskSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateServicePrimaryTaskSet", input)
	return &ECSUpdateServicePrimaryTaskSetFuture{Future: future}
}

func (a *ECSStub) UpdateTaskSet(ctx workflow.Context, input *ecs.UpdateTaskSetInput) (*ecs.UpdateTaskSetOutput, error) {
	var output ecs.UpdateTaskSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateTaskSet", input).Get(ctx, &output)
	return &output, err
}

func (a *ECSStub) UpdateTaskSetAsync(ctx workflow.Context, input *ecs.UpdateTaskSetInput) *ECSUpdateTaskSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.UpdateTaskSet", input)
	return &ECSUpdateTaskSetFuture{Future: future}
}

func (a *ECSStub) WaitUntilServicesInactive(ctx workflow.Context, input *ecs.DescribeServicesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilServicesInactive", input).Get(ctx, nil)
}

func (a *ECSStub) WaitUntilServicesInactiveAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilServicesInactive", input)
	return NewVoidFuture(future)
}

func (a *ECSStub) WaitUntilServicesStable(ctx workflow.Context, input *ecs.DescribeServicesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilServicesStable", input).Get(ctx, nil)
}

func (a *ECSStub) WaitUntilServicesStableAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilServicesStable", input)
	return NewVoidFuture(future)
}

func (a *ECSStub) WaitUntilTasksRunning(ctx workflow.Context, input *ecs.DescribeTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilTasksRunning", input).Get(ctx, nil)
}

func (a *ECSStub) WaitUntilTasksRunningAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilTasksRunning", input)
	return NewVoidFuture(future)
}

func (a *ECSStub) WaitUntilTasksStopped(ctx workflow.Context, input *ecs.DescribeTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilTasksStopped", input).Get(ctx, nil)
}

func (a *ECSStub) WaitUntilTasksStoppedAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecs.WaitUntilTasksStopped", input)
	return NewVoidFuture(future)
}
