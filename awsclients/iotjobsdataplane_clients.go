// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/iotjobsdataplane"
	"go.temporal.io/sdk/workflow"
)

type IoTJobsDataPlaneClient interface {
	DescribeJobExecution(ctx workflow.Context, input *iotjobsdataplane.DescribeJobExecutionInput) (*iotjobsdataplane.DescribeJobExecutionOutput, error)
	DescribeJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.DescribeJobExecutionInput) *IoTJobsDataPlaneDescribeJobExecutionFuture

	GetPendingJobExecutions(ctx workflow.Context, input *iotjobsdataplane.GetPendingJobExecutionsInput) (*iotjobsdataplane.GetPendingJobExecutionsOutput, error)
	GetPendingJobExecutionsAsync(ctx workflow.Context, input *iotjobsdataplane.GetPendingJobExecutionsInput) *IoTJobsDataPlaneGetPendingJobExecutionsFuture

	StartNextPendingJobExecution(ctx workflow.Context, input *iotjobsdataplane.StartNextPendingJobExecutionInput) (*iotjobsdataplane.StartNextPendingJobExecutionOutput, error)
	StartNextPendingJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.StartNextPendingJobExecutionInput) *IoTJobsDataPlaneStartNextPendingJobExecutionFuture

	UpdateJobExecution(ctx workflow.Context, input *iotjobsdataplane.UpdateJobExecutionInput) (*iotjobsdataplane.UpdateJobExecutionOutput, error)
	UpdateJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.UpdateJobExecutionInput) *IoTJobsDataPlaneUpdateJobExecutionFuture
}

type IoTJobsDataPlaneStub struct{}

func NewIoTJobsDataPlaneStub() IoTJobsDataPlaneClient {
	return &IoTJobsDataPlaneStub{}
}

type IoTJobsDataPlaneDescribeJobExecutionFuture struct {
	Future workflow.Future
}

func (r *IoTJobsDataPlaneDescribeJobExecutionFuture) Get(ctx workflow.Context) (*iotjobsdataplane.DescribeJobExecutionOutput, error) {
	var output iotjobsdataplane.DescribeJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTJobsDataPlaneGetPendingJobExecutionsFuture struct {
	Future workflow.Future
}

func (r *IoTJobsDataPlaneGetPendingJobExecutionsFuture) Get(ctx workflow.Context) (*iotjobsdataplane.GetPendingJobExecutionsOutput, error) {
	var output iotjobsdataplane.GetPendingJobExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTJobsDataPlaneStartNextPendingJobExecutionFuture struct {
	Future workflow.Future
}

func (r *IoTJobsDataPlaneStartNextPendingJobExecutionFuture) Get(ctx workflow.Context) (*iotjobsdataplane.StartNextPendingJobExecutionOutput, error) {
	var output iotjobsdataplane.StartNextPendingJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTJobsDataPlaneUpdateJobExecutionFuture struct {
	Future workflow.Future
}

func (r *IoTJobsDataPlaneUpdateJobExecutionFuture) Get(ctx workflow.Context) (*iotjobsdataplane.UpdateJobExecutionOutput, error) {
	var output iotjobsdataplane.UpdateJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *IoTJobsDataPlaneStub) DescribeJobExecution(ctx workflow.Context, input *iotjobsdataplane.DescribeJobExecutionInput) (*iotjobsdataplane.DescribeJobExecutionOutput, error) {
	var output iotjobsdataplane.DescribeJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.DescribeJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTJobsDataPlaneStub) DescribeJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.DescribeJobExecutionInput) *IoTJobsDataPlaneDescribeJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.DescribeJobExecution", input)
	return &IoTJobsDataPlaneDescribeJobExecutionFuture{Future: future}
}

func (a *IoTJobsDataPlaneStub) GetPendingJobExecutions(ctx workflow.Context, input *iotjobsdataplane.GetPendingJobExecutionsInput) (*iotjobsdataplane.GetPendingJobExecutionsOutput, error) {
	var output iotjobsdataplane.GetPendingJobExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.GetPendingJobExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTJobsDataPlaneStub) GetPendingJobExecutionsAsync(ctx workflow.Context, input *iotjobsdataplane.GetPendingJobExecutionsInput) *IoTJobsDataPlaneGetPendingJobExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.GetPendingJobExecutions", input)
	return &IoTJobsDataPlaneGetPendingJobExecutionsFuture{Future: future}
}

func (a *IoTJobsDataPlaneStub) StartNextPendingJobExecution(ctx workflow.Context, input *iotjobsdataplane.StartNextPendingJobExecutionInput) (*iotjobsdataplane.StartNextPendingJobExecutionOutput, error) {
	var output iotjobsdataplane.StartNextPendingJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.StartNextPendingJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTJobsDataPlaneStub) StartNextPendingJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.StartNextPendingJobExecutionInput) *IoTJobsDataPlaneStartNextPendingJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.StartNextPendingJobExecution", input)
	return &IoTJobsDataPlaneStartNextPendingJobExecutionFuture{Future: future}
}

func (a *IoTJobsDataPlaneStub) UpdateJobExecution(ctx workflow.Context, input *iotjobsdataplane.UpdateJobExecutionInput) (*iotjobsdataplane.UpdateJobExecutionOutput, error) {
	var output iotjobsdataplane.UpdateJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.UpdateJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTJobsDataPlaneStub) UpdateJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.UpdateJobExecutionInput) *IoTJobsDataPlaneUpdateJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.UpdateJobExecution", input)
	return &IoTJobsDataPlaneUpdateJobExecutionFuture{Future: future}
}
