// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/iotjobsdataplane"
	"go.temporal.io/sdk/workflow"
)

type IoTJobsDataPlaneClient interface {
	DescribeJobExecution(ctx workflow.Context, input *iotjobsdataplane.DescribeJobExecutionInput) (*iotjobsdataplane.DescribeJobExecutionOutput, error)
	DescribeJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.DescribeJobExecutionInput) *IotjobsdataplaneDescribeJobExecutionFuture

	GetPendingJobExecutions(ctx workflow.Context, input *iotjobsdataplane.GetPendingJobExecutionsInput) (*iotjobsdataplane.GetPendingJobExecutionsOutput, error)
	GetPendingJobExecutionsAsync(ctx workflow.Context, input *iotjobsdataplane.GetPendingJobExecutionsInput) *IotjobsdataplaneGetPendingJobExecutionsFuture

	StartNextPendingJobExecution(ctx workflow.Context, input *iotjobsdataplane.StartNextPendingJobExecutionInput) (*iotjobsdataplane.StartNextPendingJobExecutionOutput, error)
	StartNextPendingJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.StartNextPendingJobExecutionInput) *IotjobsdataplaneStartNextPendingJobExecutionFuture

	UpdateJobExecution(ctx workflow.Context, input *iotjobsdataplane.UpdateJobExecutionInput) (*iotjobsdataplane.UpdateJobExecutionOutput, error)
	UpdateJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.UpdateJobExecutionInput) *IotjobsdataplaneUpdateJobExecutionFuture
}

type IoTJobsDataPlaneStub struct{}

func NewIoTJobsDataPlaneStub() IoTJobsDataPlaneClient {
	return &IoTJobsDataPlaneStub{}
}

type IotjobsdataplaneDescribeJobExecutionFuture struct {
	Future workflow.Future
}

func (r *IotjobsdataplaneDescribeJobExecutionFuture) Get(ctx workflow.Context) (*iotjobsdataplane.DescribeJobExecutionOutput, error) {
	var output iotjobsdataplane.DescribeJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotjobsdataplaneGetPendingJobExecutionsFuture struct {
	Future workflow.Future
}

func (r *IotjobsdataplaneGetPendingJobExecutionsFuture) Get(ctx workflow.Context) (*iotjobsdataplane.GetPendingJobExecutionsOutput, error) {
	var output iotjobsdataplane.GetPendingJobExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotjobsdataplaneStartNextPendingJobExecutionFuture struct {
	Future workflow.Future
}

func (r *IotjobsdataplaneStartNextPendingJobExecutionFuture) Get(ctx workflow.Context) (*iotjobsdataplane.StartNextPendingJobExecutionOutput, error) {
	var output iotjobsdataplane.StartNextPendingJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotjobsdataplaneUpdateJobExecutionFuture struct {
	Future workflow.Future
}

func (r *IotjobsdataplaneUpdateJobExecutionFuture) Get(ctx workflow.Context) (*iotjobsdataplane.UpdateJobExecutionOutput, error) {
	var output iotjobsdataplane.UpdateJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *IoTJobsDataPlaneStub) DescribeJobExecution(ctx workflow.Context, input *iotjobsdataplane.DescribeJobExecutionInput) (*iotjobsdataplane.DescribeJobExecutionOutput, error) {
	var output iotjobsdataplane.DescribeJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.DescribeJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTJobsDataPlaneStub) DescribeJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.DescribeJobExecutionInput) *IotjobsdataplaneDescribeJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.DescribeJobExecution", input)
	return &IotjobsdataplaneDescribeJobExecutionFuture{Future: future}
}

func (a *IoTJobsDataPlaneStub) GetPendingJobExecutions(ctx workflow.Context, input *iotjobsdataplane.GetPendingJobExecutionsInput) (*iotjobsdataplane.GetPendingJobExecutionsOutput, error) {
	var output iotjobsdataplane.GetPendingJobExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.GetPendingJobExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTJobsDataPlaneStub) GetPendingJobExecutionsAsync(ctx workflow.Context, input *iotjobsdataplane.GetPendingJobExecutionsInput) *IotjobsdataplaneGetPendingJobExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.GetPendingJobExecutions", input)
	return &IotjobsdataplaneGetPendingJobExecutionsFuture{Future: future}
}

func (a *IoTJobsDataPlaneStub) StartNextPendingJobExecution(ctx workflow.Context, input *iotjobsdataplane.StartNextPendingJobExecutionInput) (*iotjobsdataplane.StartNextPendingJobExecutionOutput, error) {
	var output iotjobsdataplane.StartNextPendingJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.StartNextPendingJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTJobsDataPlaneStub) StartNextPendingJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.StartNextPendingJobExecutionInput) *IotjobsdataplaneStartNextPendingJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.StartNextPendingJobExecution", input)
	return &IotjobsdataplaneStartNextPendingJobExecutionFuture{Future: future}
}

func (a *IoTJobsDataPlaneStub) UpdateJobExecution(ctx workflow.Context, input *iotjobsdataplane.UpdateJobExecutionInput) (*iotjobsdataplane.UpdateJobExecutionOutput, error) {
	var output iotjobsdataplane.UpdateJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.UpdateJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTJobsDataPlaneStub) UpdateJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.UpdateJobExecutionInput) *IotjobsdataplaneUpdateJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotjobsdataplane.UpdateJobExecution", input)
	return &IotjobsdataplaneUpdateJobExecutionFuture{Future: future}
}
