// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/kms"
	"go.temporal.io/sdk/workflow"
)

type KMSClient interface {
	CancelKeyDeletion(ctx workflow.Context, input *kms.CancelKeyDeletionInput) (*kms.CancelKeyDeletionOutput, error)
	CancelKeyDeletionAsync(ctx workflow.Context, input *kms.CancelKeyDeletionInput) *KmsCancelKeyDeletionFuture

	ConnectCustomKeyStore(ctx workflow.Context, input *kms.ConnectCustomKeyStoreInput) (*kms.ConnectCustomKeyStoreOutput, error)
	ConnectCustomKeyStoreAsync(ctx workflow.Context, input *kms.ConnectCustomKeyStoreInput) *KmsConnectCustomKeyStoreFuture

	CreateAlias(ctx workflow.Context, input *kms.CreateAliasInput) (*kms.CreateAliasOutput, error)
	CreateAliasAsync(ctx workflow.Context, input *kms.CreateAliasInput) *KmsCreateAliasFuture

	CreateCustomKeyStore(ctx workflow.Context, input *kms.CreateCustomKeyStoreInput) (*kms.CreateCustomKeyStoreOutput, error)
	CreateCustomKeyStoreAsync(ctx workflow.Context, input *kms.CreateCustomKeyStoreInput) *KmsCreateCustomKeyStoreFuture

	CreateGrant(ctx workflow.Context, input *kms.CreateGrantInput) (*kms.CreateGrantOutput, error)
	CreateGrantAsync(ctx workflow.Context, input *kms.CreateGrantInput) *KmsCreateGrantFuture

	CreateKey(ctx workflow.Context, input *kms.CreateKeyInput) (*kms.CreateKeyOutput, error)
	CreateKeyAsync(ctx workflow.Context, input *kms.CreateKeyInput) *KmsCreateKeyFuture

	Decrypt(ctx workflow.Context, input *kms.DecryptInput) (*kms.DecryptOutput, error)
	DecryptAsync(ctx workflow.Context, input *kms.DecryptInput) *KmsDecryptFuture

	DeleteAlias(ctx workflow.Context, input *kms.DeleteAliasInput) (*kms.DeleteAliasOutput, error)
	DeleteAliasAsync(ctx workflow.Context, input *kms.DeleteAliasInput) *KmsDeleteAliasFuture

	DeleteCustomKeyStore(ctx workflow.Context, input *kms.DeleteCustomKeyStoreInput) (*kms.DeleteCustomKeyStoreOutput, error)
	DeleteCustomKeyStoreAsync(ctx workflow.Context, input *kms.DeleteCustomKeyStoreInput) *KmsDeleteCustomKeyStoreFuture

	DeleteImportedKeyMaterial(ctx workflow.Context, input *kms.DeleteImportedKeyMaterialInput) (*kms.DeleteImportedKeyMaterialOutput, error)
	DeleteImportedKeyMaterialAsync(ctx workflow.Context, input *kms.DeleteImportedKeyMaterialInput) *KmsDeleteImportedKeyMaterialFuture

	DescribeCustomKeyStores(ctx workflow.Context, input *kms.DescribeCustomKeyStoresInput) (*kms.DescribeCustomKeyStoresOutput, error)
	DescribeCustomKeyStoresAsync(ctx workflow.Context, input *kms.DescribeCustomKeyStoresInput) *KmsDescribeCustomKeyStoresFuture

	DescribeKey(ctx workflow.Context, input *kms.DescribeKeyInput) (*kms.DescribeKeyOutput, error)
	DescribeKeyAsync(ctx workflow.Context, input *kms.DescribeKeyInput) *KmsDescribeKeyFuture

	DisableKey(ctx workflow.Context, input *kms.DisableKeyInput) (*kms.DisableKeyOutput, error)
	DisableKeyAsync(ctx workflow.Context, input *kms.DisableKeyInput) *KmsDisableKeyFuture

	DisableKeyRotation(ctx workflow.Context, input *kms.DisableKeyRotationInput) (*kms.DisableKeyRotationOutput, error)
	DisableKeyRotationAsync(ctx workflow.Context, input *kms.DisableKeyRotationInput) *KmsDisableKeyRotationFuture

	DisconnectCustomKeyStore(ctx workflow.Context, input *kms.DisconnectCustomKeyStoreInput) (*kms.DisconnectCustomKeyStoreOutput, error)
	DisconnectCustomKeyStoreAsync(ctx workflow.Context, input *kms.DisconnectCustomKeyStoreInput) *KmsDisconnectCustomKeyStoreFuture

	EnableKey(ctx workflow.Context, input *kms.EnableKeyInput) (*kms.EnableKeyOutput, error)
	EnableKeyAsync(ctx workflow.Context, input *kms.EnableKeyInput) *KmsEnableKeyFuture

	EnableKeyRotation(ctx workflow.Context, input *kms.EnableKeyRotationInput) (*kms.EnableKeyRotationOutput, error)
	EnableKeyRotationAsync(ctx workflow.Context, input *kms.EnableKeyRotationInput) *KmsEnableKeyRotationFuture

	Encrypt(ctx workflow.Context, input *kms.EncryptInput) (*kms.EncryptOutput, error)
	EncryptAsync(ctx workflow.Context, input *kms.EncryptInput) *KmsEncryptFuture

	GenerateDataKey(ctx workflow.Context, input *kms.GenerateDataKeyInput) (*kms.GenerateDataKeyOutput, error)
	GenerateDataKeyAsync(ctx workflow.Context, input *kms.GenerateDataKeyInput) *KmsGenerateDataKeyFuture

	GenerateDataKeyPair(ctx workflow.Context, input *kms.GenerateDataKeyPairInput) (*kms.GenerateDataKeyPairOutput, error)
	GenerateDataKeyPairAsync(ctx workflow.Context, input *kms.GenerateDataKeyPairInput) *KmsGenerateDataKeyPairFuture

	GenerateDataKeyPairWithoutPlaintext(ctx workflow.Context, input *kms.GenerateDataKeyPairWithoutPlaintextInput) (*kms.GenerateDataKeyPairWithoutPlaintextOutput, error)
	GenerateDataKeyPairWithoutPlaintextAsync(ctx workflow.Context, input *kms.GenerateDataKeyPairWithoutPlaintextInput) *KmsGenerateDataKeyPairWithoutPlaintextFuture

	GenerateDataKeyWithoutPlaintext(ctx workflow.Context, input *kms.GenerateDataKeyWithoutPlaintextInput) (*kms.GenerateDataKeyWithoutPlaintextOutput, error)
	GenerateDataKeyWithoutPlaintextAsync(ctx workflow.Context, input *kms.GenerateDataKeyWithoutPlaintextInput) *KmsGenerateDataKeyWithoutPlaintextFuture

	GenerateRandom(ctx workflow.Context, input *kms.GenerateRandomInput) (*kms.GenerateRandomOutput, error)
	GenerateRandomAsync(ctx workflow.Context, input *kms.GenerateRandomInput) *KmsGenerateRandomFuture

	GetKeyPolicy(ctx workflow.Context, input *kms.GetKeyPolicyInput) (*kms.GetKeyPolicyOutput, error)
	GetKeyPolicyAsync(ctx workflow.Context, input *kms.GetKeyPolicyInput) *KmsGetKeyPolicyFuture

	GetKeyRotationStatus(ctx workflow.Context, input *kms.GetKeyRotationStatusInput) (*kms.GetKeyRotationStatusOutput, error)
	GetKeyRotationStatusAsync(ctx workflow.Context, input *kms.GetKeyRotationStatusInput) *KmsGetKeyRotationStatusFuture

	GetParametersForImport(ctx workflow.Context, input *kms.GetParametersForImportInput) (*kms.GetParametersForImportOutput, error)
	GetParametersForImportAsync(ctx workflow.Context, input *kms.GetParametersForImportInput) *KmsGetParametersForImportFuture

	GetPublicKey(ctx workflow.Context, input *kms.GetPublicKeyInput) (*kms.GetPublicKeyOutput, error)
	GetPublicKeyAsync(ctx workflow.Context, input *kms.GetPublicKeyInput) *KmsGetPublicKeyFuture

	ImportKeyMaterial(ctx workflow.Context, input *kms.ImportKeyMaterialInput) (*kms.ImportKeyMaterialOutput, error)
	ImportKeyMaterialAsync(ctx workflow.Context, input *kms.ImportKeyMaterialInput) *KmsImportKeyMaterialFuture

	ListAliases(ctx workflow.Context, input *kms.ListAliasesInput) (*kms.ListAliasesOutput, error)
	ListAliasesAsync(ctx workflow.Context, input *kms.ListAliasesInput) *KmsListAliasesFuture

	ListGrants(ctx workflow.Context, input *kms.ListGrantsInput) (*kms.ListGrantsResponse, error)
	ListGrantsAsync(ctx workflow.Context, input *kms.ListGrantsInput) *KmsListGrantsFuture

	ListKeyPolicies(ctx workflow.Context, input *kms.ListKeyPoliciesInput) (*kms.ListKeyPoliciesOutput, error)
	ListKeyPoliciesAsync(ctx workflow.Context, input *kms.ListKeyPoliciesInput) *KmsListKeyPoliciesFuture

	ListKeys(ctx workflow.Context, input *kms.ListKeysInput) (*kms.ListKeysOutput, error)
	ListKeysAsync(ctx workflow.Context, input *kms.ListKeysInput) *KmsListKeysFuture

	ListResourceTags(ctx workflow.Context, input *kms.ListResourceTagsInput) (*kms.ListResourceTagsOutput, error)
	ListResourceTagsAsync(ctx workflow.Context, input *kms.ListResourceTagsInput) *KmsListResourceTagsFuture

	ListRetirableGrants(ctx workflow.Context, input *kms.ListRetirableGrantsInput) (*kms.ListGrantsResponse, error)
	ListRetirableGrantsAsync(ctx workflow.Context, input *kms.ListRetirableGrantsInput) *KmsListRetirableGrantsFuture

	PutKeyPolicy(ctx workflow.Context, input *kms.PutKeyPolicyInput) (*kms.PutKeyPolicyOutput, error)
	PutKeyPolicyAsync(ctx workflow.Context, input *kms.PutKeyPolicyInput) *KmsPutKeyPolicyFuture

	ReEncrypt(ctx workflow.Context, input *kms.ReEncryptInput) (*kms.ReEncryptOutput, error)
	ReEncryptAsync(ctx workflow.Context, input *kms.ReEncryptInput) *KmsReEncryptFuture

	RetireGrant(ctx workflow.Context, input *kms.RetireGrantInput) (*kms.RetireGrantOutput, error)
	RetireGrantAsync(ctx workflow.Context, input *kms.RetireGrantInput) *KmsRetireGrantFuture

	RevokeGrant(ctx workflow.Context, input *kms.RevokeGrantInput) (*kms.RevokeGrantOutput, error)
	RevokeGrantAsync(ctx workflow.Context, input *kms.RevokeGrantInput) *KmsRevokeGrantFuture

	ScheduleKeyDeletion(ctx workflow.Context, input *kms.ScheduleKeyDeletionInput) (*kms.ScheduleKeyDeletionOutput, error)
	ScheduleKeyDeletionAsync(ctx workflow.Context, input *kms.ScheduleKeyDeletionInput) *KmsScheduleKeyDeletionFuture

	Sign(ctx workflow.Context, input *kms.SignInput) (*kms.SignOutput, error)
	SignAsync(ctx workflow.Context, input *kms.SignInput) *KmsSignFuture

	TagResource(ctx workflow.Context, input *kms.TagResourceInput) (*kms.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *kms.TagResourceInput) *KmsTagResourceFuture

	UntagResource(ctx workflow.Context, input *kms.UntagResourceInput) (*kms.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *kms.UntagResourceInput) *KmsUntagResourceFuture

	UpdateAlias(ctx workflow.Context, input *kms.UpdateAliasInput) (*kms.UpdateAliasOutput, error)
	UpdateAliasAsync(ctx workflow.Context, input *kms.UpdateAliasInput) *KmsUpdateAliasFuture

	UpdateCustomKeyStore(ctx workflow.Context, input *kms.UpdateCustomKeyStoreInput) (*kms.UpdateCustomKeyStoreOutput, error)
	UpdateCustomKeyStoreAsync(ctx workflow.Context, input *kms.UpdateCustomKeyStoreInput) *KmsUpdateCustomKeyStoreFuture

	UpdateKeyDescription(ctx workflow.Context, input *kms.UpdateKeyDescriptionInput) (*kms.UpdateKeyDescriptionOutput, error)
	UpdateKeyDescriptionAsync(ctx workflow.Context, input *kms.UpdateKeyDescriptionInput) *KmsUpdateKeyDescriptionFuture

	Verify(ctx workflow.Context, input *kms.VerifyInput) (*kms.VerifyOutput, error)
	VerifyAsync(ctx workflow.Context, input *kms.VerifyInput) *KmsVerifyFuture
}

type KMSStub struct{}

func NewKMSStub() KMSClient {
	return &KMSStub{}
}

type KmsCancelKeyDeletionFuture struct {
	Future workflow.Future
}

func (r *KmsCancelKeyDeletionFuture) Get(ctx workflow.Context) (*kms.CancelKeyDeletionOutput, error) {
	var output kms.CancelKeyDeletionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsConnectCustomKeyStoreFuture struct {
	Future workflow.Future
}

func (r *KmsConnectCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.ConnectCustomKeyStoreOutput, error) {
	var output kms.ConnectCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsCreateAliasFuture struct {
	Future workflow.Future
}

func (r *KmsCreateAliasFuture) Get(ctx workflow.Context) (*kms.CreateAliasOutput, error) {
	var output kms.CreateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsCreateCustomKeyStoreFuture struct {
	Future workflow.Future
}

func (r *KmsCreateCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.CreateCustomKeyStoreOutput, error) {
	var output kms.CreateCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsCreateGrantFuture struct {
	Future workflow.Future
}

func (r *KmsCreateGrantFuture) Get(ctx workflow.Context) (*kms.CreateGrantOutput, error) {
	var output kms.CreateGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsCreateKeyFuture struct {
	Future workflow.Future
}

func (r *KmsCreateKeyFuture) Get(ctx workflow.Context) (*kms.CreateKeyOutput, error) {
	var output kms.CreateKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsDecryptFuture struct {
	Future workflow.Future
}

func (r *KmsDecryptFuture) Get(ctx workflow.Context) (*kms.DecryptOutput, error) {
	var output kms.DecryptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsDeleteAliasFuture struct {
	Future workflow.Future
}

func (r *KmsDeleteAliasFuture) Get(ctx workflow.Context) (*kms.DeleteAliasOutput, error) {
	var output kms.DeleteAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsDeleteCustomKeyStoreFuture struct {
	Future workflow.Future
}

func (r *KmsDeleteCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.DeleteCustomKeyStoreOutput, error) {
	var output kms.DeleteCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsDeleteImportedKeyMaterialFuture struct {
	Future workflow.Future
}

func (r *KmsDeleteImportedKeyMaterialFuture) Get(ctx workflow.Context) (*kms.DeleteImportedKeyMaterialOutput, error) {
	var output kms.DeleteImportedKeyMaterialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsDescribeCustomKeyStoresFuture struct {
	Future workflow.Future
}

func (r *KmsDescribeCustomKeyStoresFuture) Get(ctx workflow.Context) (*kms.DescribeCustomKeyStoresOutput, error) {
	var output kms.DescribeCustomKeyStoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsDescribeKeyFuture struct {
	Future workflow.Future
}

func (r *KmsDescribeKeyFuture) Get(ctx workflow.Context) (*kms.DescribeKeyOutput, error) {
	var output kms.DescribeKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsDisableKeyFuture struct {
	Future workflow.Future
}

func (r *KmsDisableKeyFuture) Get(ctx workflow.Context) (*kms.DisableKeyOutput, error) {
	var output kms.DisableKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsDisableKeyRotationFuture struct {
	Future workflow.Future
}

func (r *KmsDisableKeyRotationFuture) Get(ctx workflow.Context) (*kms.DisableKeyRotationOutput, error) {
	var output kms.DisableKeyRotationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsDisconnectCustomKeyStoreFuture struct {
	Future workflow.Future
}

func (r *KmsDisconnectCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.DisconnectCustomKeyStoreOutput, error) {
	var output kms.DisconnectCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsEnableKeyFuture struct {
	Future workflow.Future
}

func (r *KmsEnableKeyFuture) Get(ctx workflow.Context) (*kms.EnableKeyOutput, error) {
	var output kms.EnableKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsEnableKeyRotationFuture struct {
	Future workflow.Future
}

func (r *KmsEnableKeyRotationFuture) Get(ctx workflow.Context) (*kms.EnableKeyRotationOutput, error) {
	var output kms.EnableKeyRotationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsEncryptFuture struct {
	Future workflow.Future
}

func (r *KmsEncryptFuture) Get(ctx workflow.Context) (*kms.EncryptOutput, error) {
	var output kms.EncryptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsGenerateDataKeyFuture struct {
	Future workflow.Future
}

func (r *KmsGenerateDataKeyFuture) Get(ctx workflow.Context) (*kms.GenerateDataKeyOutput, error) {
	var output kms.GenerateDataKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsGenerateDataKeyPairFuture struct {
	Future workflow.Future
}

func (r *KmsGenerateDataKeyPairFuture) Get(ctx workflow.Context) (*kms.GenerateDataKeyPairOutput, error) {
	var output kms.GenerateDataKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsGenerateDataKeyPairWithoutPlaintextFuture struct {
	Future workflow.Future
}

func (r *KmsGenerateDataKeyPairWithoutPlaintextFuture) Get(ctx workflow.Context) (*kms.GenerateDataKeyPairWithoutPlaintextOutput, error) {
	var output kms.GenerateDataKeyPairWithoutPlaintextOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsGenerateDataKeyWithoutPlaintextFuture struct {
	Future workflow.Future
}

func (r *KmsGenerateDataKeyWithoutPlaintextFuture) Get(ctx workflow.Context) (*kms.GenerateDataKeyWithoutPlaintextOutput, error) {
	var output kms.GenerateDataKeyWithoutPlaintextOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsGenerateRandomFuture struct {
	Future workflow.Future
}

func (r *KmsGenerateRandomFuture) Get(ctx workflow.Context) (*kms.GenerateRandomOutput, error) {
	var output kms.GenerateRandomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsGetKeyPolicyFuture struct {
	Future workflow.Future
}

func (r *KmsGetKeyPolicyFuture) Get(ctx workflow.Context) (*kms.GetKeyPolicyOutput, error) {
	var output kms.GetKeyPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsGetKeyRotationStatusFuture struct {
	Future workflow.Future
}

func (r *KmsGetKeyRotationStatusFuture) Get(ctx workflow.Context) (*kms.GetKeyRotationStatusOutput, error) {
	var output kms.GetKeyRotationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsGetParametersForImportFuture struct {
	Future workflow.Future
}

func (r *KmsGetParametersForImportFuture) Get(ctx workflow.Context) (*kms.GetParametersForImportOutput, error) {
	var output kms.GetParametersForImportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsGetPublicKeyFuture struct {
	Future workflow.Future
}

func (r *KmsGetPublicKeyFuture) Get(ctx workflow.Context) (*kms.GetPublicKeyOutput, error) {
	var output kms.GetPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsImportKeyMaterialFuture struct {
	Future workflow.Future
}

func (r *KmsImportKeyMaterialFuture) Get(ctx workflow.Context) (*kms.ImportKeyMaterialOutput, error) {
	var output kms.ImportKeyMaterialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsListAliasesFuture struct {
	Future workflow.Future
}

func (r *KmsListAliasesFuture) Get(ctx workflow.Context) (*kms.ListAliasesOutput, error) {
	var output kms.ListAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsListGrantsFuture struct {
	Future workflow.Future
}

func (r *KmsListGrantsFuture) Get(ctx workflow.Context) (*kms.ListGrantsResponse, error) {
	var output kms.ListGrantsResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsListKeyPoliciesFuture struct {
	Future workflow.Future
}

func (r *KmsListKeyPoliciesFuture) Get(ctx workflow.Context) (*kms.ListKeyPoliciesOutput, error) {
	var output kms.ListKeyPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsListKeysFuture struct {
	Future workflow.Future
}

func (r *KmsListKeysFuture) Get(ctx workflow.Context) (*kms.ListKeysOutput, error) {
	var output kms.ListKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsListResourceTagsFuture struct {
	Future workflow.Future
}

func (r *KmsListResourceTagsFuture) Get(ctx workflow.Context) (*kms.ListResourceTagsOutput, error) {
	var output kms.ListResourceTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsListRetirableGrantsFuture struct {
	Future workflow.Future
}

func (r *KmsListRetirableGrantsFuture) Get(ctx workflow.Context) (*kms.ListGrantsResponse, error) {
	var output kms.ListGrantsResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsPutKeyPolicyFuture struct {
	Future workflow.Future
}

func (r *KmsPutKeyPolicyFuture) Get(ctx workflow.Context) (*kms.PutKeyPolicyOutput, error) {
	var output kms.PutKeyPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsReEncryptFuture struct {
	Future workflow.Future
}

func (r *KmsReEncryptFuture) Get(ctx workflow.Context) (*kms.ReEncryptOutput, error) {
	var output kms.ReEncryptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsRetireGrantFuture struct {
	Future workflow.Future
}

func (r *KmsRetireGrantFuture) Get(ctx workflow.Context) (*kms.RetireGrantOutput, error) {
	var output kms.RetireGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsRevokeGrantFuture struct {
	Future workflow.Future
}

func (r *KmsRevokeGrantFuture) Get(ctx workflow.Context) (*kms.RevokeGrantOutput, error) {
	var output kms.RevokeGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsScheduleKeyDeletionFuture struct {
	Future workflow.Future
}

func (r *KmsScheduleKeyDeletionFuture) Get(ctx workflow.Context) (*kms.ScheduleKeyDeletionOutput, error) {
	var output kms.ScheduleKeyDeletionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsSignFuture struct {
	Future workflow.Future
}

func (r *KmsSignFuture) Get(ctx workflow.Context) (*kms.SignOutput, error) {
	var output kms.SignOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsTagResourceFuture struct {
	Future workflow.Future
}

func (r *KmsTagResourceFuture) Get(ctx workflow.Context) (*kms.TagResourceOutput, error) {
	var output kms.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsUntagResourceFuture struct {
	Future workflow.Future
}

func (r *KmsUntagResourceFuture) Get(ctx workflow.Context) (*kms.UntagResourceOutput, error) {
	var output kms.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsUpdateAliasFuture struct {
	Future workflow.Future
}

func (r *KmsUpdateAliasFuture) Get(ctx workflow.Context) (*kms.UpdateAliasOutput, error) {
	var output kms.UpdateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsUpdateCustomKeyStoreFuture struct {
	Future workflow.Future
}

func (r *KmsUpdateCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.UpdateCustomKeyStoreOutput, error) {
	var output kms.UpdateCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsUpdateKeyDescriptionFuture struct {
	Future workflow.Future
}

func (r *KmsUpdateKeyDescriptionFuture) Get(ctx workflow.Context) (*kms.UpdateKeyDescriptionOutput, error) {
	var output kms.UpdateKeyDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KmsVerifyFuture struct {
	Future workflow.Future
}

func (r *KmsVerifyFuture) Get(ctx workflow.Context) (*kms.VerifyOutput, error) {
	var output kms.VerifyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) CancelKeyDeletion(ctx workflow.Context, input *kms.CancelKeyDeletionInput) (*kms.CancelKeyDeletionOutput, error) {
	var output kms.CancelKeyDeletionOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.CancelKeyDeletion", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) CancelKeyDeletionAsync(ctx workflow.Context, input *kms.CancelKeyDeletionInput) *KmsCancelKeyDeletionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.CancelKeyDeletion", input)
	return &KmsCancelKeyDeletionFuture{Future: future}
}

func (a *KMSStub) ConnectCustomKeyStore(ctx workflow.Context, input *kms.ConnectCustomKeyStoreInput) (*kms.ConnectCustomKeyStoreOutput, error) {
	var output kms.ConnectCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ConnectCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ConnectCustomKeyStoreAsync(ctx workflow.Context, input *kms.ConnectCustomKeyStoreInput) *KmsConnectCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ConnectCustomKeyStore", input)
	return &KmsConnectCustomKeyStoreFuture{Future: future}
}

func (a *KMSStub) CreateAlias(ctx workflow.Context, input *kms.CreateAliasInput) (*kms.CreateAliasOutput, error) {
	var output kms.CreateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) CreateAliasAsync(ctx workflow.Context, input *kms.CreateAliasInput) *KmsCreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.CreateAlias", input)
	return &KmsCreateAliasFuture{Future: future}
}

func (a *KMSStub) CreateCustomKeyStore(ctx workflow.Context, input *kms.CreateCustomKeyStoreInput) (*kms.CreateCustomKeyStoreOutput, error) {
	var output kms.CreateCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.CreateCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) CreateCustomKeyStoreAsync(ctx workflow.Context, input *kms.CreateCustomKeyStoreInput) *KmsCreateCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.CreateCustomKeyStore", input)
	return &KmsCreateCustomKeyStoreFuture{Future: future}
}

func (a *KMSStub) CreateGrant(ctx workflow.Context, input *kms.CreateGrantInput) (*kms.CreateGrantOutput, error) {
	var output kms.CreateGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.CreateGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) CreateGrantAsync(ctx workflow.Context, input *kms.CreateGrantInput) *KmsCreateGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.CreateGrant", input)
	return &KmsCreateGrantFuture{Future: future}
}

func (a *KMSStub) CreateKey(ctx workflow.Context, input *kms.CreateKeyInput) (*kms.CreateKeyOutput, error) {
	var output kms.CreateKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.CreateKey", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) CreateKeyAsync(ctx workflow.Context, input *kms.CreateKeyInput) *KmsCreateKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.CreateKey", input)
	return &KmsCreateKeyFuture{Future: future}
}

func (a *KMSStub) Decrypt(ctx workflow.Context, input *kms.DecryptInput) (*kms.DecryptOutput, error) {
	var output kms.DecryptOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.Decrypt", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DecryptAsync(ctx workflow.Context, input *kms.DecryptInput) *KmsDecryptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.Decrypt", input)
	return &KmsDecryptFuture{Future: future}
}

func (a *KMSStub) DeleteAlias(ctx workflow.Context, input *kms.DeleteAliasInput) (*kms.DeleteAliasOutput, error) {
	var output kms.DeleteAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DeleteAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DeleteAliasAsync(ctx workflow.Context, input *kms.DeleteAliasInput) *KmsDeleteAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DeleteAlias", input)
	return &KmsDeleteAliasFuture{Future: future}
}

func (a *KMSStub) DeleteCustomKeyStore(ctx workflow.Context, input *kms.DeleteCustomKeyStoreInput) (*kms.DeleteCustomKeyStoreOutput, error) {
	var output kms.DeleteCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DeleteCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DeleteCustomKeyStoreAsync(ctx workflow.Context, input *kms.DeleteCustomKeyStoreInput) *KmsDeleteCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DeleteCustomKeyStore", input)
	return &KmsDeleteCustomKeyStoreFuture{Future: future}
}

func (a *KMSStub) DeleteImportedKeyMaterial(ctx workflow.Context, input *kms.DeleteImportedKeyMaterialInput) (*kms.DeleteImportedKeyMaterialOutput, error) {
	var output kms.DeleteImportedKeyMaterialOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DeleteImportedKeyMaterial", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DeleteImportedKeyMaterialAsync(ctx workflow.Context, input *kms.DeleteImportedKeyMaterialInput) *KmsDeleteImportedKeyMaterialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DeleteImportedKeyMaterial", input)
	return &KmsDeleteImportedKeyMaterialFuture{Future: future}
}

func (a *KMSStub) DescribeCustomKeyStores(ctx workflow.Context, input *kms.DescribeCustomKeyStoresInput) (*kms.DescribeCustomKeyStoresOutput, error) {
	var output kms.DescribeCustomKeyStoresOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DescribeCustomKeyStores", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DescribeCustomKeyStoresAsync(ctx workflow.Context, input *kms.DescribeCustomKeyStoresInput) *KmsDescribeCustomKeyStoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DescribeCustomKeyStores", input)
	return &KmsDescribeCustomKeyStoresFuture{Future: future}
}

func (a *KMSStub) DescribeKey(ctx workflow.Context, input *kms.DescribeKeyInput) (*kms.DescribeKeyOutput, error) {
	var output kms.DescribeKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DescribeKey", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DescribeKeyAsync(ctx workflow.Context, input *kms.DescribeKeyInput) *KmsDescribeKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DescribeKey", input)
	return &KmsDescribeKeyFuture{Future: future}
}

func (a *KMSStub) DisableKey(ctx workflow.Context, input *kms.DisableKeyInput) (*kms.DisableKeyOutput, error) {
	var output kms.DisableKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DisableKey", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DisableKeyAsync(ctx workflow.Context, input *kms.DisableKeyInput) *KmsDisableKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DisableKey", input)
	return &KmsDisableKeyFuture{Future: future}
}

func (a *KMSStub) DisableKeyRotation(ctx workflow.Context, input *kms.DisableKeyRotationInput) (*kms.DisableKeyRotationOutput, error) {
	var output kms.DisableKeyRotationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DisableKeyRotation", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DisableKeyRotationAsync(ctx workflow.Context, input *kms.DisableKeyRotationInput) *KmsDisableKeyRotationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DisableKeyRotation", input)
	return &KmsDisableKeyRotationFuture{Future: future}
}

func (a *KMSStub) DisconnectCustomKeyStore(ctx workflow.Context, input *kms.DisconnectCustomKeyStoreInput) (*kms.DisconnectCustomKeyStoreOutput, error) {
	var output kms.DisconnectCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DisconnectCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DisconnectCustomKeyStoreAsync(ctx workflow.Context, input *kms.DisconnectCustomKeyStoreInput) *KmsDisconnectCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DisconnectCustomKeyStore", input)
	return &KmsDisconnectCustomKeyStoreFuture{Future: future}
}

func (a *KMSStub) EnableKey(ctx workflow.Context, input *kms.EnableKeyInput) (*kms.EnableKeyOutput, error) {
	var output kms.EnableKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.EnableKey", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) EnableKeyAsync(ctx workflow.Context, input *kms.EnableKeyInput) *KmsEnableKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.EnableKey", input)
	return &KmsEnableKeyFuture{Future: future}
}

func (a *KMSStub) EnableKeyRotation(ctx workflow.Context, input *kms.EnableKeyRotationInput) (*kms.EnableKeyRotationOutput, error) {
	var output kms.EnableKeyRotationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.EnableKeyRotation", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) EnableKeyRotationAsync(ctx workflow.Context, input *kms.EnableKeyRotationInput) *KmsEnableKeyRotationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.EnableKeyRotation", input)
	return &KmsEnableKeyRotationFuture{Future: future}
}

func (a *KMSStub) Encrypt(ctx workflow.Context, input *kms.EncryptInput) (*kms.EncryptOutput, error) {
	var output kms.EncryptOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.Encrypt", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) EncryptAsync(ctx workflow.Context, input *kms.EncryptInput) *KmsEncryptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.Encrypt", input)
	return &KmsEncryptFuture{Future: future}
}

func (a *KMSStub) GenerateDataKey(ctx workflow.Context, input *kms.GenerateDataKeyInput) (*kms.GenerateDataKeyOutput, error) {
	var output kms.GenerateDataKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKey", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GenerateDataKeyAsync(ctx workflow.Context, input *kms.GenerateDataKeyInput) *KmsGenerateDataKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKey", input)
	return &KmsGenerateDataKeyFuture{Future: future}
}

func (a *KMSStub) GenerateDataKeyPair(ctx workflow.Context, input *kms.GenerateDataKeyPairInput) (*kms.GenerateDataKeyPairOutput, error) {
	var output kms.GenerateDataKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GenerateDataKeyPairAsync(ctx workflow.Context, input *kms.GenerateDataKeyPairInput) *KmsGenerateDataKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKeyPair", input)
	return &KmsGenerateDataKeyPairFuture{Future: future}
}

func (a *KMSStub) GenerateDataKeyPairWithoutPlaintext(ctx workflow.Context, input *kms.GenerateDataKeyPairWithoutPlaintextInput) (*kms.GenerateDataKeyPairWithoutPlaintextOutput, error) {
	var output kms.GenerateDataKeyPairWithoutPlaintextOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKeyPairWithoutPlaintext", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GenerateDataKeyPairWithoutPlaintextAsync(ctx workflow.Context, input *kms.GenerateDataKeyPairWithoutPlaintextInput) *KmsGenerateDataKeyPairWithoutPlaintextFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKeyPairWithoutPlaintext", input)
	return &KmsGenerateDataKeyPairWithoutPlaintextFuture{Future: future}
}

func (a *KMSStub) GenerateDataKeyWithoutPlaintext(ctx workflow.Context, input *kms.GenerateDataKeyWithoutPlaintextInput) (*kms.GenerateDataKeyWithoutPlaintextOutput, error) {
	var output kms.GenerateDataKeyWithoutPlaintextOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKeyWithoutPlaintext", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GenerateDataKeyWithoutPlaintextAsync(ctx workflow.Context, input *kms.GenerateDataKeyWithoutPlaintextInput) *KmsGenerateDataKeyWithoutPlaintextFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKeyWithoutPlaintext", input)
	return &KmsGenerateDataKeyWithoutPlaintextFuture{Future: future}
}

func (a *KMSStub) GenerateRandom(ctx workflow.Context, input *kms.GenerateRandomInput) (*kms.GenerateRandomOutput, error) {
	var output kms.GenerateRandomOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GenerateRandom", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GenerateRandomAsync(ctx workflow.Context, input *kms.GenerateRandomInput) *KmsGenerateRandomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GenerateRandom", input)
	return &KmsGenerateRandomFuture{Future: future}
}

func (a *KMSStub) GetKeyPolicy(ctx workflow.Context, input *kms.GetKeyPolicyInput) (*kms.GetKeyPolicyOutput, error) {
	var output kms.GetKeyPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GetKeyPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GetKeyPolicyAsync(ctx workflow.Context, input *kms.GetKeyPolicyInput) *KmsGetKeyPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GetKeyPolicy", input)
	return &KmsGetKeyPolicyFuture{Future: future}
}

func (a *KMSStub) GetKeyRotationStatus(ctx workflow.Context, input *kms.GetKeyRotationStatusInput) (*kms.GetKeyRotationStatusOutput, error) {
	var output kms.GetKeyRotationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GetKeyRotationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GetKeyRotationStatusAsync(ctx workflow.Context, input *kms.GetKeyRotationStatusInput) *KmsGetKeyRotationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GetKeyRotationStatus", input)
	return &KmsGetKeyRotationStatusFuture{Future: future}
}

func (a *KMSStub) GetParametersForImport(ctx workflow.Context, input *kms.GetParametersForImportInput) (*kms.GetParametersForImportOutput, error) {
	var output kms.GetParametersForImportOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GetParametersForImport", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GetParametersForImportAsync(ctx workflow.Context, input *kms.GetParametersForImportInput) *KmsGetParametersForImportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GetParametersForImport", input)
	return &KmsGetParametersForImportFuture{Future: future}
}

func (a *KMSStub) GetPublicKey(ctx workflow.Context, input *kms.GetPublicKeyInput) (*kms.GetPublicKeyOutput, error) {
	var output kms.GetPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GetPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GetPublicKeyAsync(ctx workflow.Context, input *kms.GetPublicKeyInput) *KmsGetPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GetPublicKey", input)
	return &KmsGetPublicKeyFuture{Future: future}
}

func (a *KMSStub) ImportKeyMaterial(ctx workflow.Context, input *kms.ImportKeyMaterialInput) (*kms.ImportKeyMaterialOutput, error) {
	var output kms.ImportKeyMaterialOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ImportKeyMaterial", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ImportKeyMaterialAsync(ctx workflow.Context, input *kms.ImportKeyMaterialInput) *KmsImportKeyMaterialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ImportKeyMaterial", input)
	return &KmsImportKeyMaterialFuture{Future: future}
}

func (a *KMSStub) ListAliases(ctx workflow.Context, input *kms.ListAliasesInput) (*kms.ListAliasesOutput, error) {
	var output kms.ListAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ListAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ListAliasesAsync(ctx workflow.Context, input *kms.ListAliasesInput) *KmsListAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ListAliases", input)
	return &KmsListAliasesFuture{Future: future}
}

func (a *KMSStub) ListGrants(ctx workflow.Context, input *kms.ListGrantsInput) (*kms.ListGrantsResponse, error) {
	var output kms.ListGrantsResponse
	err := workflow.ExecuteActivity(ctx, "aws.kms.ListGrants", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ListGrantsAsync(ctx workflow.Context, input *kms.ListGrantsInput) *KmsListGrantsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ListGrants", input)
	return &KmsListGrantsFuture{Future: future}
}

func (a *KMSStub) ListKeyPolicies(ctx workflow.Context, input *kms.ListKeyPoliciesInput) (*kms.ListKeyPoliciesOutput, error) {
	var output kms.ListKeyPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ListKeyPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ListKeyPoliciesAsync(ctx workflow.Context, input *kms.ListKeyPoliciesInput) *KmsListKeyPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ListKeyPolicies", input)
	return &KmsListKeyPoliciesFuture{Future: future}
}

func (a *KMSStub) ListKeys(ctx workflow.Context, input *kms.ListKeysInput) (*kms.ListKeysOutput, error) {
	var output kms.ListKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ListKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ListKeysAsync(ctx workflow.Context, input *kms.ListKeysInput) *KmsListKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ListKeys", input)
	return &KmsListKeysFuture{Future: future}
}

func (a *KMSStub) ListResourceTags(ctx workflow.Context, input *kms.ListResourceTagsInput) (*kms.ListResourceTagsOutput, error) {
	var output kms.ListResourceTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ListResourceTags", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ListResourceTagsAsync(ctx workflow.Context, input *kms.ListResourceTagsInput) *KmsListResourceTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ListResourceTags", input)
	return &KmsListResourceTagsFuture{Future: future}
}

func (a *KMSStub) ListRetirableGrants(ctx workflow.Context, input *kms.ListRetirableGrantsInput) (*kms.ListGrantsResponse, error) {
	var output kms.ListGrantsResponse
	err := workflow.ExecuteActivity(ctx, "aws.kms.ListRetirableGrants", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ListRetirableGrantsAsync(ctx workflow.Context, input *kms.ListRetirableGrantsInput) *KmsListRetirableGrantsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ListRetirableGrants", input)
	return &KmsListRetirableGrantsFuture{Future: future}
}

func (a *KMSStub) PutKeyPolicy(ctx workflow.Context, input *kms.PutKeyPolicyInput) (*kms.PutKeyPolicyOutput, error) {
	var output kms.PutKeyPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.PutKeyPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) PutKeyPolicyAsync(ctx workflow.Context, input *kms.PutKeyPolicyInput) *KmsPutKeyPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.PutKeyPolicy", input)
	return &KmsPutKeyPolicyFuture{Future: future}
}

func (a *KMSStub) ReEncrypt(ctx workflow.Context, input *kms.ReEncryptInput) (*kms.ReEncryptOutput, error) {
	var output kms.ReEncryptOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ReEncrypt", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ReEncryptAsync(ctx workflow.Context, input *kms.ReEncryptInput) *KmsReEncryptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ReEncrypt", input)
	return &KmsReEncryptFuture{Future: future}
}

func (a *KMSStub) RetireGrant(ctx workflow.Context, input *kms.RetireGrantInput) (*kms.RetireGrantOutput, error) {
	var output kms.RetireGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.RetireGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) RetireGrantAsync(ctx workflow.Context, input *kms.RetireGrantInput) *KmsRetireGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.RetireGrant", input)
	return &KmsRetireGrantFuture{Future: future}
}

func (a *KMSStub) RevokeGrant(ctx workflow.Context, input *kms.RevokeGrantInput) (*kms.RevokeGrantOutput, error) {
	var output kms.RevokeGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.RevokeGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) RevokeGrantAsync(ctx workflow.Context, input *kms.RevokeGrantInput) *KmsRevokeGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.RevokeGrant", input)
	return &KmsRevokeGrantFuture{Future: future}
}

func (a *KMSStub) ScheduleKeyDeletion(ctx workflow.Context, input *kms.ScheduleKeyDeletionInput) (*kms.ScheduleKeyDeletionOutput, error) {
	var output kms.ScheduleKeyDeletionOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ScheduleKeyDeletion", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ScheduleKeyDeletionAsync(ctx workflow.Context, input *kms.ScheduleKeyDeletionInput) *KmsScheduleKeyDeletionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ScheduleKeyDeletion", input)
	return &KmsScheduleKeyDeletionFuture{Future: future}
}

func (a *KMSStub) Sign(ctx workflow.Context, input *kms.SignInput) (*kms.SignOutput, error) {
	var output kms.SignOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.Sign", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) SignAsync(ctx workflow.Context, input *kms.SignInput) *KmsSignFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.Sign", input)
	return &KmsSignFuture{Future: future}
}

func (a *KMSStub) TagResource(ctx workflow.Context, input *kms.TagResourceInput) (*kms.TagResourceOutput, error) {
	var output kms.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) TagResourceAsync(ctx workflow.Context, input *kms.TagResourceInput) *KmsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.TagResource", input)
	return &KmsTagResourceFuture{Future: future}
}

func (a *KMSStub) UntagResource(ctx workflow.Context, input *kms.UntagResourceInput) (*kms.UntagResourceOutput, error) {
	var output kms.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) UntagResourceAsync(ctx workflow.Context, input *kms.UntagResourceInput) *KmsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.UntagResource", input)
	return &KmsUntagResourceFuture{Future: future}
}

func (a *KMSStub) UpdateAlias(ctx workflow.Context, input *kms.UpdateAliasInput) (*kms.UpdateAliasOutput, error) {
	var output kms.UpdateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.UpdateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) UpdateAliasAsync(ctx workflow.Context, input *kms.UpdateAliasInput) *KmsUpdateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.UpdateAlias", input)
	return &KmsUpdateAliasFuture{Future: future}
}

func (a *KMSStub) UpdateCustomKeyStore(ctx workflow.Context, input *kms.UpdateCustomKeyStoreInput) (*kms.UpdateCustomKeyStoreOutput, error) {
	var output kms.UpdateCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.UpdateCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) UpdateCustomKeyStoreAsync(ctx workflow.Context, input *kms.UpdateCustomKeyStoreInput) *KmsUpdateCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.UpdateCustomKeyStore", input)
	return &KmsUpdateCustomKeyStoreFuture{Future: future}
}

func (a *KMSStub) UpdateKeyDescription(ctx workflow.Context, input *kms.UpdateKeyDescriptionInput) (*kms.UpdateKeyDescriptionOutput, error) {
	var output kms.UpdateKeyDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.UpdateKeyDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) UpdateKeyDescriptionAsync(ctx workflow.Context, input *kms.UpdateKeyDescriptionInput) *KmsUpdateKeyDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.UpdateKeyDescription", input)
	return &KmsUpdateKeyDescriptionFuture{Future: future}
}

func (a *KMSStub) Verify(ctx workflow.Context, input *kms.VerifyInput) (*kms.VerifyOutput, error) {
	var output kms.VerifyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.Verify", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) VerifyAsync(ctx workflow.Context, input *kms.VerifyInput) *KmsVerifyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.Verify", input)
	return &KmsVerifyFuture{Future: future}
}
