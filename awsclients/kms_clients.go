// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/kms"
	"go.temporal.io/sdk/workflow"
)

type KMSClient interface {
	CancelKeyDeletion(ctx workflow.Context, input *kms.CancelKeyDeletionInput) (*kms.CancelKeyDeletionOutput, error)
	CancelKeyDeletionAsync(ctx workflow.Context, input *kms.CancelKeyDeletionInput) *KMSCancelKeyDeletionFuture

	ConnectCustomKeyStore(ctx workflow.Context, input *kms.ConnectCustomKeyStoreInput) (*kms.ConnectCustomKeyStoreOutput, error)
	ConnectCustomKeyStoreAsync(ctx workflow.Context, input *kms.ConnectCustomKeyStoreInput) *KMSConnectCustomKeyStoreFuture

	CreateAlias(ctx workflow.Context, input *kms.CreateAliasInput) (*kms.CreateAliasOutput, error)
	CreateAliasAsync(ctx workflow.Context, input *kms.CreateAliasInput) *KMSCreateAliasFuture

	CreateCustomKeyStore(ctx workflow.Context, input *kms.CreateCustomKeyStoreInput) (*kms.CreateCustomKeyStoreOutput, error)
	CreateCustomKeyStoreAsync(ctx workflow.Context, input *kms.CreateCustomKeyStoreInput) *KMSCreateCustomKeyStoreFuture

	CreateGrant(ctx workflow.Context, input *kms.CreateGrantInput) (*kms.CreateGrantOutput, error)
	CreateGrantAsync(ctx workflow.Context, input *kms.CreateGrantInput) *KMSCreateGrantFuture

	CreateKey(ctx workflow.Context, input *kms.CreateKeyInput) (*kms.CreateKeyOutput, error)
	CreateKeyAsync(ctx workflow.Context, input *kms.CreateKeyInput) *KMSCreateKeyFuture

	Decrypt(ctx workflow.Context, input *kms.DecryptInput) (*kms.DecryptOutput, error)
	DecryptAsync(ctx workflow.Context, input *kms.DecryptInput) *KMSDecryptFuture

	DeleteAlias(ctx workflow.Context, input *kms.DeleteAliasInput) (*kms.DeleteAliasOutput, error)
	DeleteAliasAsync(ctx workflow.Context, input *kms.DeleteAliasInput) *KMSDeleteAliasFuture

	DeleteCustomKeyStore(ctx workflow.Context, input *kms.DeleteCustomKeyStoreInput) (*kms.DeleteCustomKeyStoreOutput, error)
	DeleteCustomKeyStoreAsync(ctx workflow.Context, input *kms.DeleteCustomKeyStoreInput) *KMSDeleteCustomKeyStoreFuture

	DeleteImportedKeyMaterial(ctx workflow.Context, input *kms.DeleteImportedKeyMaterialInput) (*kms.DeleteImportedKeyMaterialOutput, error)
	DeleteImportedKeyMaterialAsync(ctx workflow.Context, input *kms.DeleteImportedKeyMaterialInput) *KMSDeleteImportedKeyMaterialFuture

	DescribeCustomKeyStores(ctx workflow.Context, input *kms.DescribeCustomKeyStoresInput) (*kms.DescribeCustomKeyStoresOutput, error)
	DescribeCustomKeyStoresAsync(ctx workflow.Context, input *kms.DescribeCustomKeyStoresInput) *KMSDescribeCustomKeyStoresFuture

	DescribeKey(ctx workflow.Context, input *kms.DescribeKeyInput) (*kms.DescribeKeyOutput, error)
	DescribeKeyAsync(ctx workflow.Context, input *kms.DescribeKeyInput) *KMSDescribeKeyFuture

	DisableKey(ctx workflow.Context, input *kms.DisableKeyInput) (*kms.DisableKeyOutput, error)
	DisableKeyAsync(ctx workflow.Context, input *kms.DisableKeyInput) *KMSDisableKeyFuture

	DisableKeyRotation(ctx workflow.Context, input *kms.DisableKeyRotationInput) (*kms.DisableKeyRotationOutput, error)
	DisableKeyRotationAsync(ctx workflow.Context, input *kms.DisableKeyRotationInput) *KMSDisableKeyRotationFuture

	DisconnectCustomKeyStore(ctx workflow.Context, input *kms.DisconnectCustomKeyStoreInput) (*kms.DisconnectCustomKeyStoreOutput, error)
	DisconnectCustomKeyStoreAsync(ctx workflow.Context, input *kms.DisconnectCustomKeyStoreInput) *KMSDisconnectCustomKeyStoreFuture

	EnableKey(ctx workflow.Context, input *kms.EnableKeyInput) (*kms.EnableKeyOutput, error)
	EnableKeyAsync(ctx workflow.Context, input *kms.EnableKeyInput) *KMSEnableKeyFuture

	EnableKeyRotation(ctx workflow.Context, input *kms.EnableKeyRotationInput) (*kms.EnableKeyRotationOutput, error)
	EnableKeyRotationAsync(ctx workflow.Context, input *kms.EnableKeyRotationInput) *KMSEnableKeyRotationFuture

	Encrypt(ctx workflow.Context, input *kms.EncryptInput) (*kms.EncryptOutput, error)
	EncryptAsync(ctx workflow.Context, input *kms.EncryptInput) *KMSEncryptFuture

	GenerateDataKey(ctx workflow.Context, input *kms.GenerateDataKeyInput) (*kms.GenerateDataKeyOutput, error)
	GenerateDataKeyAsync(ctx workflow.Context, input *kms.GenerateDataKeyInput) *KMSGenerateDataKeyFuture

	GenerateDataKeyPair(ctx workflow.Context, input *kms.GenerateDataKeyPairInput) (*kms.GenerateDataKeyPairOutput, error)
	GenerateDataKeyPairAsync(ctx workflow.Context, input *kms.GenerateDataKeyPairInput) *KMSGenerateDataKeyPairFuture

	GenerateDataKeyPairWithoutPlaintext(ctx workflow.Context, input *kms.GenerateDataKeyPairWithoutPlaintextInput) (*kms.GenerateDataKeyPairWithoutPlaintextOutput, error)
	GenerateDataKeyPairWithoutPlaintextAsync(ctx workflow.Context, input *kms.GenerateDataKeyPairWithoutPlaintextInput) *KMSGenerateDataKeyPairWithoutPlaintextFuture

	GenerateDataKeyWithoutPlaintext(ctx workflow.Context, input *kms.GenerateDataKeyWithoutPlaintextInput) (*kms.GenerateDataKeyWithoutPlaintextOutput, error)
	GenerateDataKeyWithoutPlaintextAsync(ctx workflow.Context, input *kms.GenerateDataKeyWithoutPlaintextInput) *KMSGenerateDataKeyWithoutPlaintextFuture

	GenerateRandom(ctx workflow.Context, input *kms.GenerateRandomInput) (*kms.GenerateRandomOutput, error)
	GenerateRandomAsync(ctx workflow.Context, input *kms.GenerateRandomInput) *KMSGenerateRandomFuture

	GetKeyPolicy(ctx workflow.Context, input *kms.GetKeyPolicyInput) (*kms.GetKeyPolicyOutput, error)
	GetKeyPolicyAsync(ctx workflow.Context, input *kms.GetKeyPolicyInput) *KMSGetKeyPolicyFuture

	GetKeyRotationStatus(ctx workflow.Context, input *kms.GetKeyRotationStatusInput) (*kms.GetKeyRotationStatusOutput, error)
	GetKeyRotationStatusAsync(ctx workflow.Context, input *kms.GetKeyRotationStatusInput) *KMSGetKeyRotationStatusFuture

	GetParametersForImport(ctx workflow.Context, input *kms.GetParametersForImportInput) (*kms.GetParametersForImportOutput, error)
	GetParametersForImportAsync(ctx workflow.Context, input *kms.GetParametersForImportInput) *KMSGetParametersForImportFuture

	GetPublicKey(ctx workflow.Context, input *kms.GetPublicKeyInput) (*kms.GetPublicKeyOutput, error)
	GetPublicKeyAsync(ctx workflow.Context, input *kms.GetPublicKeyInput) *KMSGetPublicKeyFuture

	ImportKeyMaterial(ctx workflow.Context, input *kms.ImportKeyMaterialInput) (*kms.ImportKeyMaterialOutput, error)
	ImportKeyMaterialAsync(ctx workflow.Context, input *kms.ImportKeyMaterialInput) *KMSImportKeyMaterialFuture

	ListAliases(ctx workflow.Context, input *kms.ListAliasesInput) (*kms.ListAliasesOutput, error)
	ListAliasesAsync(ctx workflow.Context, input *kms.ListAliasesInput) *KMSListAliasesFuture

	ListGrants(ctx workflow.Context, input *kms.ListGrantsInput) (*kms.ListGrantsResponse, error)
	ListGrantsAsync(ctx workflow.Context, input *kms.ListGrantsInput) *KMSListGrantsFuture

	ListKeyPolicies(ctx workflow.Context, input *kms.ListKeyPoliciesInput) (*kms.ListKeyPoliciesOutput, error)
	ListKeyPoliciesAsync(ctx workflow.Context, input *kms.ListKeyPoliciesInput) *KMSListKeyPoliciesFuture

	ListKeys(ctx workflow.Context, input *kms.ListKeysInput) (*kms.ListKeysOutput, error)
	ListKeysAsync(ctx workflow.Context, input *kms.ListKeysInput) *KMSListKeysFuture

	ListResourceTags(ctx workflow.Context, input *kms.ListResourceTagsInput) (*kms.ListResourceTagsOutput, error)
	ListResourceTagsAsync(ctx workflow.Context, input *kms.ListResourceTagsInput) *KMSListResourceTagsFuture

	ListRetirableGrants(ctx workflow.Context, input *kms.ListRetirableGrantsInput) (*kms.ListGrantsResponse, error)
	ListRetirableGrantsAsync(ctx workflow.Context, input *kms.ListRetirableGrantsInput) *KMSListRetirableGrantsFuture

	PutKeyPolicy(ctx workflow.Context, input *kms.PutKeyPolicyInput) (*kms.PutKeyPolicyOutput, error)
	PutKeyPolicyAsync(ctx workflow.Context, input *kms.PutKeyPolicyInput) *KMSPutKeyPolicyFuture

	ReEncrypt(ctx workflow.Context, input *kms.ReEncryptInput) (*kms.ReEncryptOutput, error)
	ReEncryptAsync(ctx workflow.Context, input *kms.ReEncryptInput) *KMSReEncryptFuture

	RetireGrant(ctx workflow.Context, input *kms.RetireGrantInput) (*kms.RetireGrantOutput, error)
	RetireGrantAsync(ctx workflow.Context, input *kms.RetireGrantInput) *KMSRetireGrantFuture

	RevokeGrant(ctx workflow.Context, input *kms.RevokeGrantInput) (*kms.RevokeGrantOutput, error)
	RevokeGrantAsync(ctx workflow.Context, input *kms.RevokeGrantInput) *KMSRevokeGrantFuture

	ScheduleKeyDeletion(ctx workflow.Context, input *kms.ScheduleKeyDeletionInput) (*kms.ScheduleKeyDeletionOutput, error)
	ScheduleKeyDeletionAsync(ctx workflow.Context, input *kms.ScheduleKeyDeletionInput) *KMSScheduleKeyDeletionFuture

	Sign(ctx workflow.Context, input *kms.SignInput) (*kms.SignOutput, error)
	SignAsync(ctx workflow.Context, input *kms.SignInput) *KMSSignFuture

	TagResource(ctx workflow.Context, input *kms.TagResourceInput) (*kms.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *kms.TagResourceInput) *KMSTagResourceFuture

	UntagResource(ctx workflow.Context, input *kms.UntagResourceInput) (*kms.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *kms.UntagResourceInput) *KMSUntagResourceFuture

	UpdateAlias(ctx workflow.Context, input *kms.UpdateAliasInput) (*kms.UpdateAliasOutput, error)
	UpdateAliasAsync(ctx workflow.Context, input *kms.UpdateAliasInput) *KMSUpdateAliasFuture

	UpdateCustomKeyStore(ctx workflow.Context, input *kms.UpdateCustomKeyStoreInput) (*kms.UpdateCustomKeyStoreOutput, error)
	UpdateCustomKeyStoreAsync(ctx workflow.Context, input *kms.UpdateCustomKeyStoreInput) *KMSUpdateCustomKeyStoreFuture

	UpdateKeyDescription(ctx workflow.Context, input *kms.UpdateKeyDescriptionInput) (*kms.UpdateKeyDescriptionOutput, error)
	UpdateKeyDescriptionAsync(ctx workflow.Context, input *kms.UpdateKeyDescriptionInput) *KMSUpdateKeyDescriptionFuture

	Verify(ctx workflow.Context, input *kms.VerifyInput) (*kms.VerifyOutput, error)
	VerifyAsync(ctx workflow.Context, input *kms.VerifyInput) *KMSVerifyFuture
}

type KMSStub struct{}

func NewKMSStub() KMSClient {
	return &KMSStub{}
}

type KMSCancelKeyDeletionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSCancelKeyDeletionFuture) Get(ctx workflow.Context) (*kms.CancelKeyDeletionOutput, error) {
	var output kms.CancelKeyDeletionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSConnectCustomKeyStoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSConnectCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.ConnectCustomKeyStoreOutput, error) {
	var output kms.ConnectCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSCreateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSCreateAliasFuture) Get(ctx workflow.Context) (*kms.CreateAliasOutput, error) {
	var output kms.CreateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSCreateCustomKeyStoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSCreateCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.CreateCustomKeyStoreOutput, error) {
	var output kms.CreateCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSCreateGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSCreateGrantFuture) Get(ctx workflow.Context) (*kms.CreateGrantOutput, error) {
	var output kms.CreateGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSCreateKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSCreateKeyFuture) Get(ctx workflow.Context) (*kms.CreateKeyOutput, error) {
	var output kms.CreateKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSDecryptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSDecryptFuture) Get(ctx workflow.Context) (*kms.DecryptOutput, error) {
	var output kms.DecryptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSDeleteAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSDeleteAliasFuture) Get(ctx workflow.Context) (*kms.DeleteAliasOutput, error) {
	var output kms.DeleteAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSDeleteCustomKeyStoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSDeleteCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.DeleteCustomKeyStoreOutput, error) {
	var output kms.DeleteCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSDeleteImportedKeyMaterialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSDeleteImportedKeyMaterialFuture) Get(ctx workflow.Context) (*kms.DeleteImportedKeyMaterialOutput, error) {
	var output kms.DeleteImportedKeyMaterialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSDescribeCustomKeyStoresFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSDescribeCustomKeyStoresFuture) Get(ctx workflow.Context) (*kms.DescribeCustomKeyStoresOutput, error) {
	var output kms.DescribeCustomKeyStoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSDescribeKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSDescribeKeyFuture) Get(ctx workflow.Context) (*kms.DescribeKeyOutput, error) {
	var output kms.DescribeKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSDisableKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSDisableKeyFuture) Get(ctx workflow.Context) (*kms.DisableKeyOutput, error) {
	var output kms.DisableKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSDisableKeyRotationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSDisableKeyRotationFuture) Get(ctx workflow.Context) (*kms.DisableKeyRotationOutput, error) {
	var output kms.DisableKeyRotationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSDisconnectCustomKeyStoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSDisconnectCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.DisconnectCustomKeyStoreOutput, error) {
	var output kms.DisconnectCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSEnableKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSEnableKeyFuture) Get(ctx workflow.Context) (*kms.EnableKeyOutput, error) {
	var output kms.EnableKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSEnableKeyRotationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSEnableKeyRotationFuture) Get(ctx workflow.Context) (*kms.EnableKeyRotationOutput, error) {
	var output kms.EnableKeyRotationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSEncryptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSEncryptFuture) Get(ctx workflow.Context) (*kms.EncryptOutput, error) {
	var output kms.EncryptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSGenerateDataKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSGenerateDataKeyFuture) Get(ctx workflow.Context) (*kms.GenerateDataKeyOutput, error) {
	var output kms.GenerateDataKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSGenerateDataKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSGenerateDataKeyPairFuture) Get(ctx workflow.Context) (*kms.GenerateDataKeyPairOutput, error) {
	var output kms.GenerateDataKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSGenerateDataKeyPairWithoutPlaintextFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSGenerateDataKeyPairWithoutPlaintextFuture) Get(ctx workflow.Context) (*kms.GenerateDataKeyPairWithoutPlaintextOutput, error) {
	var output kms.GenerateDataKeyPairWithoutPlaintextOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSGenerateDataKeyWithoutPlaintextFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSGenerateDataKeyWithoutPlaintextFuture) Get(ctx workflow.Context) (*kms.GenerateDataKeyWithoutPlaintextOutput, error) {
	var output kms.GenerateDataKeyWithoutPlaintextOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSGenerateRandomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSGenerateRandomFuture) Get(ctx workflow.Context) (*kms.GenerateRandomOutput, error) {
	var output kms.GenerateRandomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSGetKeyPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSGetKeyPolicyFuture) Get(ctx workflow.Context) (*kms.GetKeyPolicyOutput, error) {
	var output kms.GetKeyPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSGetKeyRotationStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSGetKeyRotationStatusFuture) Get(ctx workflow.Context) (*kms.GetKeyRotationStatusOutput, error) {
	var output kms.GetKeyRotationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSGetParametersForImportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSGetParametersForImportFuture) Get(ctx workflow.Context) (*kms.GetParametersForImportOutput, error) {
	var output kms.GetParametersForImportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSGetPublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSGetPublicKeyFuture) Get(ctx workflow.Context) (*kms.GetPublicKeyOutput, error) {
	var output kms.GetPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSImportKeyMaterialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSImportKeyMaterialFuture) Get(ctx workflow.Context) (*kms.ImportKeyMaterialOutput, error) {
	var output kms.ImportKeyMaterialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSListAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSListAliasesFuture) Get(ctx workflow.Context) (*kms.ListAliasesOutput, error) {
	var output kms.ListAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSListGrantsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSListGrantsFuture) Get(ctx workflow.Context) (*kms.ListGrantsResponse, error) {
	var output kms.ListGrantsResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSListKeyPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSListKeyPoliciesFuture) Get(ctx workflow.Context) (*kms.ListKeyPoliciesOutput, error) {
	var output kms.ListKeyPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSListKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSListKeysFuture) Get(ctx workflow.Context) (*kms.ListKeysOutput, error) {
	var output kms.ListKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSListResourceTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSListResourceTagsFuture) Get(ctx workflow.Context) (*kms.ListResourceTagsOutput, error) {
	var output kms.ListResourceTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSListRetirableGrantsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSListRetirableGrantsFuture) Get(ctx workflow.Context) (*kms.ListGrantsResponse, error) {
	var output kms.ListGrantsResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSPutKeyPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSPutKeyPolicyFuture) Get(ctx workflow.Context) (*kms.PutKeyPolicyOutput, error) {
	var output kms.PutKeyPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSReEncryptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSReEncryptFuture) Get(ctx workflow.Context) (*kms.ReEncryptOutput, error) {
	var output kms.ReEncryptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSRetireGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSRetireGrantFuture) Get(ctx workflow.Context) (*kms.RetireGrantOutput, error) {
	var output kms.RetireGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSRevokeGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSRevokeGrantFuture) Get(ctx workflow.Context) (*kms.RevokeGrantOutput, error) {
	var output kms.RevokeGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSScheduleKeyDeletionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSScheduleKeyDeletionFuture) Get(ctx workflow.Context) (*kms.ScheduleKeyDeletionOutput, error) {
	var output kms.ScheduleKeyDeletionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSSignFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSSignFuture) Get(ctx workflow.Context) (*kms.SignOutput, error) {
	var output kms.SignOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSTagResourceFuture) Get(ctx workflow.Context) (*kms.TagResourceOutput, error) {
	var output kms.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSUntagResourceFuture) Get(ctx workflow.Context) (*kms.UntagResourceOutput, error) {
	var output kms.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSUpdateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSUpdateAliasFuture) Get(ctx workflow.Context) (*kms.UpdateAliasOutput, error) {
	var output kms.UpdateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSUpdateCustomKeyStoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSUpdateCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.UpdateCustomKeyStoreOutput, error) {
	var output kms.UpdateCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSUpdateKeyDescriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSUpdateKeyDescriptionFuture) Get(ctx workflow.Context) (*kms.UpdateKeyDescriptionOutput, error) {
	var output kms.UpdateKeyDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KMSVerifyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KMSVerifyFuture) Get(ctx workflow.Context) (*kms.VerifyOutput, error) {
	var output kms.VerifyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) CancelKeyDeletion(ctx workflow.Context, input *kms.CancelKeyDeletionInput) (*kms.CancelKeyDeletionOutput, error) {
	var output kms.CancelKeyDeletionOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.CancelKeyDeletion", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) CancelKeyDeletionAsync(ctx workflow.Context, input *kms.CancelKeyDeletionInput) *KMSCancelKeyDeletionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.CancelKeyDeletion", input)
	return &KMSCancelKeyDeletionFuture{Future: future}
}

func (a *KMSStub) ConnectCustomKeyStore(ctx workflow.Context, input *kms.ConnectCustomKeyStoreInput) (*kms.ConnectCustomKeyStoreOutput, error) {
	var output kms.ConnectCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ConnectCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ConnectCustomKeyStoreAsync(ctx workflow.Context, input *kms.ConnectCustomKeyStoreInput) *KMSConnectCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ConnectCustomKeyStore", input)
	return &KMSConnectCustomKeyStoreFuture{Future: future}
}

func (a *KMSStub) CreateAlias(ctx workflow.Context, input *kms.CreateAliasInput) (*kms.CreateAliasOutput, error) {
	var output kms.CreateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) CreateAliasAsync(ctx workflow.Context, input *kms.CreateAliasInput) *KMSCreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.CreateAlias", input)
	return &KMSCreateAliasFuture{Future: future}
}

func (a *KMSStub) CreateCustomKeyStore(ctx workflow.Context, input *kms.CreateCustomKeyStoreInput) (*kms.CreateCustomKeyStoreOutput, error) {
	var output kms.CreateCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.CreateCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) CreateCustomKeyStoreAsync(ctx workflow.Context, input *kms.CreateCustomKeyStoreInput) *KMSCreateCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.CreateCustomKeyStore", input)
	return &KMSCreateCustomKeyStoreFuture{Future: future}
}

func (a *KMSStub) CreateGrant(ctx workflow.Context, input *kms.CreateGrantInput) (*kms.CreateGrantOutput, error) {
	var output kms.CreateGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.CreateGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) CreateGrantAsync(ctx workflow.Context, input *kms.CreateGrantInput) *KMSCreateGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.CreateGrant", input)
	return &KMSCreateGrantFuture{Future: future}
}

func (a *KMSStub) CreateKey(ctx workflow.Context, input *kms.CreateKeyInput) (*kms.CreateKeyOutput, error) {
	var output kms.CreateKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.CreateKey", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) CreateKeyAsync(ctx workflow.Context, input *kms.CreateKeyInput) *KMSCreateKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.CreateKey", input)
	return &KMSCreateKeyFuture{Future: future}
}

func (a *KMSStub) Decrypt(ctx workflow.Context, input *kms.DecryptInput) (*kms.DecryptOutput, error) {
	var output kms.DecryptOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.Decrypt", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DecryptAsync(ctx workflow.Context, input *kms.DecryptInput) *KMSDecryptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.Decrypt", input)
	return &KMSDecryptFuture{Future: future}
}

func (a *KMSStub) DeleteAlias(ctx workflow.Context, input *kms.DeleteAliasInput) (*kms.DeleteAliasOutput, error) {
	var output kms.DeleteAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DeleteAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DeleteAliasAsync(ctx workflow.Context, input *kms.DeleteAliasInput) *KMSDeleteAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DeleteAlias", input)
	return &KMSDeleteAliasFuture{Future: future}
}

func (a *KMSStub) DeleteCustomKeyStore(ctx workflow.Context, input *kms.DeleteCustomKeyStoreInput) (*kms.DeleteCustomKeyStoreOutput, error) {
	var output kms.DeleteCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DeleteCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DeleteCustomKeyStoreAsync(ctx workflow.Context, input *kms.DeleteCustomKeyStoreInput) *KMSDeleteCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DeleteCustomKeyStore", input)
	return &KMSDeleteCustomKeyStoreFuture{Future: future}
}

func (a *KMSStub) DeleteImportedKeyMaterial(ctx workflow.Context, input *kms.DeleteImportedKeyMaterialInput) (*kms.DeleteImportedKeyMaterialOutput, error) {
	var output kms.DeleteImportedKeyMaterialOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DeleteImportedKeyMaterial", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DeleteImportedKeyMaterialAsync(ctx workflow.Context, input *kms.DeleteImportedKeyMaterialInput) *KMSDeleteImportedKeyMaterialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DeleteImportedKeyMaterial", input)
	return &KMSDeleteImportedKeyMaterialFuture{Future: future}
}

func (a *KMSStub) DescribeCustomKeyStores(ctx workflow.Context, input *kms.DescribeCustomKeyStoresInput) (*kms.DescribeCustomKeyStoresOutput, error) {
	var output kms.DescribeCustomKeyStoresOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DescribeCustomKeyStores", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DescribeCustomKeyStoresAsync(ctx workflow.Context, input *kms.DescribeCustomKeyStoresInput) *KMSDescribeCustomKeyStoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DescribeCustomKeyStores", input)
	return &KMSDescribeCustomKeyStoresFuture{Future: future}
}

func (a *KMSStub) DescribeKey(ctx workflow.Context, input *kms.DescribeKeyInput) (*kms.DescribeKeyOutput, error) {
	var output kms.DescribeKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DescribeKey", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DescribeKeyAsync(ctx workflow.Context, input *kms.DescribeKeyInput) *KMSDescribeKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DescribeKey", input)
	return &KMSDescribeKeyFuture{Future: future}
}

func (a *KMSStub) DisableKey(ctx workflow.Context, input *kms.DisableKeyInput) (*kms.DisableKeyOutput, error) {
	var output kms.DisableKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DisableKey", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DisableKeyAsync(ctx workflow.Context, input *kms.DisableKeyInput) *KMSDisableKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DisableKey", input)
	return &KMSDisableKeyFuture{Future: future}
}

func (a *KMSStub) DisableKeyRotation(ctx workflow.Context, input *kms.DisableKeyRotationInput) (*kms.DisableKeyRotationOutput, error) {
	var output kms.DisableKeyRotationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DisableKeyRotation", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DisableKeyRotationAsync(ctx workflow.Context, input *kms.DisableKeyRotationInput) *KMSDisableKeyRotationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DisableKeyRotation", input)
	return &KMSDisableKeyRotationFuture{Future: future}
}

func (a *KMSStub) DisconnectCustomKeyStore(ctx workflow.Context, input *kms.DisconnectCustomKeyStoreInput) (*kms.DisconnectCustomKeyStoreOutput, error) {
	var output kms.DisconnectCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.DisconnectCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) DisconnectCustomKeyStoreAsync(ctx workflow.Context, input *kms.DisconnectCustomKeyStoreInput) *KMSDisconnectCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.DisconnectCustomKeyStore", input)
	return &KMSDisconnectCustomKeyStoreFuture{Future: future}
}

func (a *KMSStub) EnableKey(ctx workflow.Context, input *kms.EnableKeyInput) (*kms.EnableKeyOutput, error) {
	var output kms.EnableKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.EnableKey", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) EnableKeyAsync(ctx workflow.Context, input *kms.EnableKeyInput) *KMSEnableKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.EnableKey", input)
	return &KMSEnableKeyFuture{Future: future}
}

func (a *KMSStub) EnableKeyRotation(ctx workflow.Context, input *kms.EnableKeyRotationInput) (*kms.EnableKeyRotationOutput, error) {
	var output kms.EnableKeyRotationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.EnableKeyRotation", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) EnableKeyRotationAsync(ctx workflow.Context, input *kms.EnableKeyRotationInput) *KMSEnableKeyRotationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.EnableKeyRotation", input)
	return &KMSEnableKeyRotationFuture{Future: future}
}

func (a *KMSStub) Encrypt(ctx workflow.Context, input *kms.EncryptInput) (*kms.EncryptOutput, error) {
	var output kms.EncryptOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.Encrypt", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) EncryptAsync(ctx workflow.Context, input *kms.EncryptInput) *KMSEncryptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.Encrypt", input)
	return &KMSEncryptFuture{Future: future}
}

func (a *KMSStub) GenerateDataKey(ctx workflow.Context, input *kms.GenerateDataKeyInput) (*kms.GenerateDataKeyOutput, error) {
	var output kms.GenerateDataKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKey", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GenerateDataKeyAsync(ctx workflow.Context, input *kms.GenerateDataKeyInput) *KMSGenerateDataKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKey", input)
	return &KMSGenerateDataKeyFuture{Future: future}
}

func (a *KMSStub) GenerateDataKeyPair(ctx workflow.Context, input *kms.GenerateDataKeyPairInput) (*kms.GenerateDataKeyPairOutput, error) {
	var output kms.GenerateDataKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GenerateDataKeyPairAsync(ctx workflow.Context, input *kms.GenerateDataKeyPairInput) *KMSGenerateDataKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKeyPair", input)
	return &KMSGenerateDataKeyPairFuture{Future: future}
}

func (a *KMSStub) GenerateDataKeyPairWithoutPlaintext(ctx workflow.Context, input *kms.GenerateDataKeyPairWithoutPlaintextInput) (*kms.GenerateDataKeyPairWithoutPlaintextOutput, error) {
	var output kms.GenerateDataKeyPairWithoutPlaintextOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKeyPairWithoutPlaintext", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GenerateDataKeyPairWithoutPlaintextAsync(ctx workflow.Context, input *kms.GenerateDataKeyPairWithoutPlaintextInput) *KMSGenerateDataKeyPairWithoutPlaintextFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKeyPairWithoutPlaintext", input)
	return &KMSGenerateDataKeyPairWithoutPlaintextFuture{Future: future}
}

func (a *KMSStub) GenerateDataKeyWithoutPlaintext(ctx workflow.Context, input *kms.GenerateDataKeyWithoutPlaintextInput) (*kms.GenerateDataKeyWithoutPlaintextOutput, error) {
	var output kms.GenerateDataKeyWithoutPlaintextOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKeyWithoutPlaintext", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GenerateDataKeyWithoutPlaintextAsync(ctx workflow.Context, input *kms.GenerateDataKeyWithoutPlaintextInput) *KMSGenerateDataKeyWithoutPlaintextFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GenerateDataKeyWithoutPlaintext", input)
	return &KMSGenerateDataKeyWithoutPlaintextFuture{Future: future}
}

func (a *KMSStub) GenerateRandom(ctx workflow.Context, input *kms.GenerateRandomInput) (*kms.GenerateRandomOutput, error) {
	var output kms.GenerateRandomOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GenerateRandom", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GenerateRandomAsync(ctx workflow.Context, input *kms.GenerateRandomInput) *KMSGenerateRandomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GenerateRandom", input)
	return &KMSGenerateRandomFuture{Future: future}
}

func (a *KMSStub) GetKeyPolicy(ctx workflow.Context, input *kms.GetKeyPolicyInput) (*kms.GetKeyPolicyOutput, error) {
	var output kms.GetKeyPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GetKeyPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GetKeyPolicyAsync(ctx workflow.Context, input *kms.GetKeyPolicyInput) *KMSGetKeyPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GetKeyPolicy", input)
	return &KMSGetKeyPolicyFuture{Future: future}
}

func (a *KMSStub) GetKeyRotationStatus(ctx workflow.Context, input *kms.GetKeyRotationStatusInput) (*kms.GetKeyRotationStatusOutput, error) {
	var output kms.GetKeyRotationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GetKeyRotationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GetKeyRotationStatusAsync(ctx workflow.Context, input *kms.GetKeyRotationStatusInput) *KMSGetKeyRotationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GetKeyRotationStatus", input)
	return &KMSGetKeyRotationStatusFuture{Future: future}
}

func (a *KMSStub) GetParametersForImport(ctx workflow.Context, input *kms.GetParametersForImportInput) (*kms.GetParametersForImportOutput, error) {
	var output kms.GetParametersForImportOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GetParametersForImport", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GetParametersForImportAsync(ctx workflow.Context, input *kms.GetParametersForImportInput) *KMSGetParametersForImportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GetParametersForImport", input)
	return &KMSGetParametersForImportFuture{Future: future}
}

func (a *KMSStub) GetPublicKey(ctx workflow.Context, input *kms.GetPublicKeyInput) (*kms.GetPublicKeyOutput, error) {
	var output kms.GetPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.GetPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) GetPublicKeyAsync(ctx workflow.Context, input *kms.GetPublicKeyInput) *KMSGetPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.GetPublicKey", input)
	return &KMSGetPublicKeyFuture{Future: future}
}

func (a *KMSStub) ImportKeyMaterial(ctx workflow.Context, input *kms.ImportKeyMaterialInput) (*kms.ImportKeyMaterialOutput, error) {
	var output kms.ImportKeyMaterialOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ImportKeyMaterial", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ImportKeyMaterialAsync(ctx workflow.Context, input *kms.ImportKeyMaterialInput) *KMSImportKeyMaterialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ImportKeyMaterial", input)
	return &KMSImportKeyMaterialFuture{Future: future}
}

func (a *KMSStub) ListAliases(ctx workflow.Context, input *kms.ListAliasesInput) (*kms.ListAliasesOutput, error) {
	var output kms.ListAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ListAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ListAliasesAsync(ctx workflow.Context, input *kms.ListAliasesInput) *KMSListAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ListAliases", input)
	return &KMSListAliasesFuture{Future: future}
}

func (a *KMSStub) ListGrants(ctx workflow.Context, input *kms.ListGrantsInput) (*kms.ListGrantsResponse, error) {
	var output kms.ListGrantsResponse
	err := workflow.ExecuteActivity(ctx, "aws.kms.ListGrants", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ListGrantsAsync(ctx workflow.Context, input *kms.ListGrantsInput) *KMSListGrantsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ListGrants", input)
	return &KMSListGrantsFuture{Future: future}
}

func (a *KMSStub) ListKeyPolicies(ctx workflow.Context, input *kms.ListKeyPoliciesInput) (*kms.ListKeyPoliciesOutput, error) {
	var output kms.ListKeyPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ListKeyPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ListKeyPoliciesAsync(ctx workflow.Context, input *kms.ListKeyPoliciesInput) *KMSListKeyPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ListKeyPolicies", input)
	return &KMSListKeyPoliciesFuture{Future: future}
}

func (a *KMSStub) ListKeys(ctx workflow.Context, input *kms.ListKeysInput) (*kms.ListKeysOutput, error) {
	var output kms.ListKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ListKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ListKeysAsync(ctx workflow.Context, input *kms.ListKeysInput) *KMSListKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ListKeys", input)
	return &KMSListKeysFuture{Future: future}
}

func (a *KMSStub) ListResourceTags(ctx workflow.Context, input *kms.ListResourceTagsInput) (*kms.ListResourceTagsOutput, error) {
	var output kms.ListResourceTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ListResourceTags", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ListResourceTagsAsync(ctx workflow.Context, input *kms.ListResourceTagsInput) *KMSListResourceTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ListResourceTags", input)
	return &KMSListResourceTagsFuture{Future: future}
}

func (a *KMSStub) ListRetirableGrants(ctx workflow.Context, input *kms.ListRetirableGrantsInput) (*kms.ListGrantsResponse, error) {
	var output kms.ListGrantsResponse
	err := workflow.ExecuteActivity(ctx, "aws.kms.ListRetirableGrants", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ListRetirableGrantsAsync(ctx workflow.Context, input *kms.ListRetirableGrantsInput) *KMSListRetirableGrantsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ListRetirableGrants", input)
	return &KMSListRetirableGrantsFuture{Future: future}
}

func (a *KMSStub) PutKeyPolicy(ctx workflow.Context, input *kms.PutKeyPolicyInput) (*kms.PutKeyPolicyOutput, error) {
	var output kms.PutKeyPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.PutKeyPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) PutKeyPolicyAsync(ctx workflow.Context, input *kms.PutKeyPolicyInput) *KMSPutKeyPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.PutKeyPolicy", input)
	return &KMSPutKeyPolicyFuture{Future: future}
}

func (a *KMSStub) ReEncrypt(ctx workflow.Context, input *kms.ReEncryptInput) (*kms.ReEncryptOutput, error) {
	var output kms.ReEncryptOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ReEncrypt", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ReEncryptAsync(ctx workflow.Context, input *kms.ReEncryptInput) *KMSReEncryptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ReEncrypt", input)
	return &KMSReEncryptFuture{Future: future}
}

func (a *KMSStub) RetireGrant(ctx workflow.Context, input *kms.RetireGrantInput) (*kms.RetireGrantOutput, error) {
	var output kms.RetireGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.RetireGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) RetireGrantAsync(ctx workflow.Context, input *kms.RetireGrantInput) *KMSRetireGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.RetireGrant", input)
	return &KMSRetireGrantFuture{Future: future}
}

func (a *KMSStub) RevokeGrant(ctx workflow.Context, input *kms.RevokeGrantInput) (*kms.RevokeGrantOutput, error) {
	var output kms.RevokeGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.RevokeGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) RevokeGrantAsync(ctx workflow.Context, input *kms.RevokeGrantInput) *KMSRevokeGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.RevokeGrant", input)
	return &KMSRevokeGrantFuture{Future: future}
}

func (a *KMSStub) ScheduleKeyDeletion(ctx workflow.Context, input *kms.ScheduleKeyDeletionInput) (*kms.ScheduleKeyDeletionOutput, error) {
	var output kms.ScheduleKeyDeletionOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.ScheduleKeyDeletion", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) ScheduleKeyDeletionAsync(ctx workflow.Context, input *kms.ScheduleKeyDeletionInput) *KMSScheduleKeyDeletionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.ScheduleKeyDeletion", input)
	return &KMSScheduleKeyDeletionFuture{Future: future}
}

func (a *KMSStub) Sign(ctx workflow.Context, input *kms.SignInput) (*kms.SignOutput, error) {
	var output kms.SignOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.Sign", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) SignAsync(ctx workflow.Context, input *kms.SignInput) *KMSSignFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.Sign", input)
	return &KMSSignFuture{Future: future}
}

func (a *KMSStub) TagResource(ctx workflow.Context, input *kms.TagResourceInput) (*kms.TagResourceOutput, error) {
	var output kms.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) TagResourceAsync(ctx workflow.Context, input *kms.TagResourceInput) *KMSTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.TagResource", input)
	return &KMSTagResourceFuture{Future: future}
}

func (a *KMSStub) UntagResource(ctx workflow.Context, input *kms.UntagResourceInput) (*kms.UntagResourceOutput, error) {
	var output kms.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) UntagResourceAsync(ctx workflow.Context, input *kms.UntagResourceInput) *KMSUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.UntagResource", input)
	return &KMSUntagResourceFuture{Future: future}
}

func (a *KMSStub) UpdateAlias(ctx workflow.Context, input *kms.UpdateAliasInput) (*kms.UpdateAliasOutput, error) {
	var output kms.UpdateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.UpdateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) UpdateAliasAsync(ctx workflow.Context, input *kms.UpdateAliasInput) *KMSUpdateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.UpdateAlias", input)
	return &KMSUpdateAliasFuture{Future: future}
}

func (a *KMSStub) UpdateCustomKeyStore(ctx workflow.Context, input *kms.UpdateCustomKeyStoreInput) (*kms.UpdateCustomKeyStoreOutput, error) {
	var output kms.UpdateCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.UpdateCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) UpdateCustomKeyStoreAsync(ctx workflow.Context, input *kms.UpdateCustomKeyStoreInput) *KMSUpdateCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.UpdateCustomKeyStore", input)
	return &KMSUpdateCustomKeyStoreFuture{Future: future}
}

func (a *KMSStub) UpdateKeyDescription(ctx workflow.Context, input *kms.UpdateKeyDescriptionInput) (*kms.UpdateKeyDescriptionOutput, error) {
	var output kms.UpdateKeyDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.UpdateKeyDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) UpdateKeyDescriptionAsync(ctx workflow.Context, input *kms.UpdateKeyDescriptionInput) *KMSUpdateKeyDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.UpdateKeyDescription", input)
	return &KMSUpdateKeyDescriptionFuture{Future: future}
}

func (a *KMSStub) Verify(ctx workflow.Context, input *kms.VerifyInput) (*kms.VerifyOutput, error) {
	var output kms.VerifyOutput
	err := workflow.ExecuteActivity(ctx, "aws.kms.Verify", input).Get(ctx, &output)
	return &output, err
}

func (a *KMSStub) VerifyAsync(ctx workflow.Context, input *kms.VerifyInput) *KMSVerifyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kms.Verify", input)
	return &KMSVerifyFuture{Future: future}
}
