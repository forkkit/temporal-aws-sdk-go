// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/groundstation"
	"go.temporal.io/sdk/workflow"
)

type GroundStationClient interface {
	CancelContact(ctx workflow.Context, input *groundstation.CancelContactInput) (*groundstation.CancelContactOutput, error)
	CancelContactAsync(ctx workflow.Context, input *groundstation.CancelContactInput) *GroundstationCancelContactFuture

	CreateConfig(ctx workflow.Context, input *groundstation.CreateConfigInput) (*groundstation.CreateConfigOutput, error)
	CreateConfigAsync(ctx workflow.Context, input *groundstation.CreateConfigInput) *GroundstationCreateConfigFuture

	CreateDataflowEndpointGroup(ctx workflow.Context, input *groundstation.CreateDataflowEndpointGroupInput) (*groundstation.CreateDataflowEndpointGroupOutput, error)
	CreateDataflowEndpointGroupAsync(ctx workflow.Context, input *groundstation.CreateDataflowEndpointGroupInput) *GroundstationCreateDataflowEndpointGroupFuture

	CreateMissionProfile(ctx workflow.Context, input *groundstation.CreateMissionProfileInput) (*groundstation.CreateMissionProfileOutput, error)
	CreateMissionProfileAsync(ctx workflow.Context, input *groundstation.CreateMissionProfileInput) *GroundstationCreateMissionProfileFuture

	DeleteConfig(ctx workflow.Context, input *groundstation.DeleteConfigInput) (*groundstation.DeleteConfigOutput, error)
	DeleteConfigAsync(ctx workflow.Context, input *groundstation.DeleteConfigInput) *GroundstationDeleteConfigFuture

	DeleteDataflowEndpointGroup(ctx workflow.Context, input *groundstation.DeleteDataflowEndpointGroupInput) (*groundstation.DeleteDataflowEndpointGroupOutput, error)
	DeleteDataflowEndpointGroupAsync(ctx workflow.Context, input *groundstation.DeleteDataflowEndpointGroupInput) *GroundstationDeleteDataflowEndpointGroupFuture

	DeleteMissionProfile(ctx workflow.Context, input *groundstation.DeleteMissionProfileInput) (*groundstation.DeleteMissionProfileOutput, error)
	DeleteMissionProfileAsync(ctx workflow.Context, input *groundstation.DeleteMissionProfileInput) *GroundstationDeleteMissionProfileFuture

	DescribeContact(ctx workflow.Context, input *groundstation.DescribeContactInput) (*groundstation.DescribeContactOutput, error)
	DescribeContactAsync(ctx workflow.Context, input *groundstation.DescribeContactInput) *GroundstationDescribeContactFuture

	GetConfig(ctx workflow.Context, input *groundstation.GetConfigInput) (*groundstation.GetConfigOutput, error)
	GetConfigAsync(ctx workflow.Context, input *groundstation.GetConfigInput) *GroundstationGetConfigFuture

	GetDataflowEndpointGroup(ctx workflow.Context, input *groundstation.GetDataflowEndpointGroupInput) (*groundstation.GetDataflowEndpointGroupOutput, error)
	GetDataflowEndpointGroupAsync(ctx workflow.Context, input *groundstation.GetDataflowEndpointGroupInput) *GroundstationGetDataflowEndpointGroupFuture

	GetMinuteUsage(ctx workflow.Context, input *groundstation.GetMinuteUsageInput) (*groundstation.GetMinuteUsageOutput, error)
	GetMinuteUsageAsync(ctx workflow.Context, input *groundstation.GetMinuteUsageInput) *GroundstationGetMinuteUsageFuture

	GetMissionProfile(ctx workflow.Context, input *groundstation.GetMissionProfileInput) (*groundstation.GetMissionProfileOutput, error)
	GetMissionProfileAsync(ctx workflow.Context, input *groundstation.GetMissionProfileInput) *GroundstationGetMissionProfileFuture

	GetSatellite(ctx workflow.Context, input *groundstation.GetSatelliteInput) (*groundstation.GetSatelliteOutput, error)
	GetSatelliteAsync(ctx workflow.Context, input *groundstation.GetSatelliteInput) *GroundstationGetSatelliteFuture

	ListConfigs(ctx workflow.Context, input *groundstation.ListConfigsInput) (*groundstation.ListConfigsOutput, error)
	ListConfigsAsync(ctx workflow.Context, input *groundstation.ListConfigsInput) *GroundstationListConfigsFuture

	ListContacts(ctx workflow.Context, input *groundstation.ListContactsInput) (*groundstation.ListContactsOutput, error)
	ListContactsAsync(ctx workflow.Context, input *groundstation.ListContactsInput) *GroundstationListContactsFuture

	ListDataflowEndpointGroups(ctx workflow.Context, input *groundstation.ListDataflowEndpointGroupsInput) (*groundstation.ListDataflowEndpointGroupsOutput, error)
	ListDataflowEndpointGroupsAsync(ctx workflow.Context, input *groundstation.ListDataflowEndpointGroupsInput) *GroundstationListDataflowEndpointGroupsFuture

	ListGroundStations(ctx workflow.Context, input *groundstation.ListGroundStationsInput) (*groundstation.ListGroundStationsOutput, error)
	ListGroundStationsAsync(ctx workflow.Context, input *groundstation.ListGroundStationsInput) *GroundstationListGroundStationsFuture

	ListMissionProfiles(ctx workflow.Context, input *groundstation.ListMissionProfilesInput) (*groundstation.ListMissionProfilesOutput, error)
	ListMissionProfilesAsync(ctx workflow.Context, input *groundstation.ListMissionProfilesInput) *GroundstationListMissionProfilesFuture

	ListSatellites(ctx workflow.Context, input *groundstation.ListSatellitesInput) (*groundstation.ListSatellitesOutput, error)
	ListSatellitesAsync(ctx workflow.Context, input *groundstation.ListSatellitesInput) *GroundstationListSatellitesFuture

	ListTagsForResource(ctx workflow.Context, input *groundstation.ListTagsForResourceInput) (*groundstation.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *groundstation.ListTagsForResourceInput) *GroundstationListTagsForResourceFuture

	ReserveContact(ctx workflow.Context, input *groundstation.ReserveContactInput) (*groundstation.ReserveContactOutput, error)
	ReserveContactAsync(ctx workflow.Context, input *groundstation.ReserveContactInput) *GroundstationReserveContactFuture

	TagResource(ctx workflow.Context, input *groundstation.TagResourceInput) (*groundstation.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *groundstation.TagResourceInput) *GroundstationTagResourceFuture

	UntagResource(ctx workflow.Context, input *groundstation.UntagResourceInput) (*groundstation.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *groundstation.UntagResourceInput) *GroundstationUntagResourceFuture

	UpdateConfig(ctx workflow.Context, input *groundstation.UpdateConfigInput) (*groundstation.UpdateConfigOutput, error)
	UpdateConfigAsync(ctx workflow.Context, input *groundstation.UpdateConfigInput) *GroundstationUpdateConfigFuture

	UpdateMissionProfile(ctx workflow.Context, input *groundstation.UpdateMissionProfileInput) (*groundstation.UpdateMissionProfileOutput, error)
	UpdateMissionProfileAsync(ctx workflow.Context, input *groundstation.UpdateMissionProfileInput) *GroundstationUpdateMissionProfileFuture
}

type GroundStationStub struct{}

func NewGroundStationStub() GroundStationClient {
	return &GroundStationStub{}
}

type GroundstationCancelContactFuture struct {
	Future workflow.Future
}

func (r *GroundstationCancelContactFuture) Get(ctx workflow.Context) (*groundstation.CancelContactOutput, error) {
	var output groundstation.CancelContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationCreateConfigFuture struct {
	Future workflow.Future
}

func (r *GroundstationCreateConfigFuture) Get(ctx workflow.Context) (*groundstation.CreateConfigOutput, error) {
	var output groundstation.CreateConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationCreateDataflowEndpointGroupFuture struct {
	Future workflow.Future
}

func (r *GroundstationCreateDataflowEndpointGroupFuture) Get(ctx workflow.Context) (*groundstation.CreateDataflowEndpointGroupOutput, error) {
	var output groundstation.CreateDataflowEndpointGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationCreateMissionProfileFuture struct {
	Future workflow.Future
}

func (r *GroundstationCreateMissionProfileFuture) Get(ctx workflow.Context) (*groundstation.CreateMissionProfileOutput, error) {
	var output groundstation.CreateMissionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationDeleteConfigFuture struct {
	Future workflow.Future
}

func (r *GroundstationDeleteConfigFuture) Get(ctx workflow.Context) (*groundstation.DeleteConfigOutput, error) {
	var output groundstation.DeleteConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationDeleteDataflowEndpointGroupFuture struct {
	Future workflow.Future
}

func (r *GroundstationDeleteDataflowEndpointGroupFuture) Get(ctx workflow.Context) (*groundstation.DeleteDataflowEndpointGroupOutput, error) {
	var output groundstation.DeleteDataflowEndpointGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationDeleteMissionProfileFuture struct {
	Future workflow.Future
}

func (r *GroundstationDeleteMissionProfileFuture) Get(ctx workflow.Context) (*groundstation.DeleteMissionProfileOutput, error) {
	var output groundstation.DeleteMissionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationDescribeContactFuture struct {
	Future workflow.Future
}

func (r *GroundstationDescribeContactFuture) Get(ctx workflow.Context) (*groundstation.DescribeContactOutput, error) {
	var output groundstation.DescribeContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationGetConfigFuture struct {
	Future workflow.Future
}

func (r *GroundstationGetConfigFuture) Get(ctx workflow.Context) (*groundstation.GetConfigOutput, error) {
	var output groundstation.GetConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationGetDataflowEndpointGroupFuture struct {
	Future workflow.Future
}

func (r *GroundstationGetDataflowEndpointGroupFuture) Get(ctx workflow.Context) (*groundstation.GetDataflowEndpointGroupOutput, error) {
	var output groundstation.GetDataflowEndpointGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationGetMinuteUsageFuture struct {
	Future workflow.Future
}

func (r *GroundstationGetMinuteUsageFuture) Get(ctx workflow.Context) (*groundstation.GetMinuteUsageOutput, error) {
	var output groundstation.GetMinuteUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationGetMissionProfileFuture struct {
	Future workflow.Future
}

func (r *GroundstationGetMissionProfileFuture) Get(ctx workflow.Context) (*groundstation.GetMissionProfileOutput, error) {
	var output groundstation.GetMissionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationGetSatelliteFuture struct {
	Future workflow.Future
}

func (r *GroundstationGetSatelliteFuture) Get(ctx workflow.Context) (*groundstation.GetSatelliteOutput, error) {
	var output groundstation.GetSatelliteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationListConfigsFuture struct {
	Future workflow.Future
}

func (r *GroundstationListConfigsFuture) Get(ctx workflow.Context) (*groundstation.ListConfigsOutput, error) {
	var output groundstation.ListConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationListContactsFuture struct {
	Future workflow.Future
}

func (r *GroundstationListContactsFuture) Get(ctx workflow.Context) (*groundstation.ListContactsOutput, error) {
	var output groundstation.ListContactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationListDataflowEndpointGroupsFuture struct {
	Future workflow.Future
}

func (r *GroundstationListDataflowEndpointGroupsFuture) Get(ctx workflow.Context) (*groundstation.ListDataflowEndpointGroupsOutput, error) {
	var output groundstation.ListDataflowEndpointGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationListGroundStationsFuture struct {
	Future workflow.Future
}

func (r *GroundstationListGroundStationsFuture) Get(ctx workflow.Context) (*groundstation.ListGroundStationsOutput, error) {
	var output groundstation.ListGroundStationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationListMissionProfilesFuture struct {
	Future workflow.Future
}

func (r *GroundstationListMissionProfilesFuture) Get(ctx workflow.Context) (*groundstation.ListMissionProfilesOutput, error) {
	var output groundstation.ListMissionProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationListSatellitesFuture struct {
	Future workflow.Future
}

func (r *GroundstationListSatellitesFuture) Get(ctx workflow.Context) (*groundstation.ListSatellitesOutput, error) {
	var output groundstation.ListSatellitesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *GroundstationListTagsForResourceFuture) Get(ctx workflow.Context) (*groundstation.ListTagsForResourceOutput, error) {
	var output groundstation.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationReserveContactFuture struct {
	Future workflow.Future
}

func (r *GroundstationReserveContactFuture) Get(ctx workflow.Context) (*groundstation.ReserveContactOutput, error) {
	var output groundstation.ReserveContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationTagResourceFuture struct {
	Future workflow.Future
}

func (r *GroundstationTagResourceFuture) Get(ctx workflow.Context) (*groundstation.TagResourceOutput, error) {
	var output groundstation.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationUntagResourceFuture struct {
	Future workflow.Future
}

func (r *GroundstationUntagResourceFuture) Get(ctx workflow.Context) (*groundstation.UntagResourceOutput, error) {
	var output groundstation.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationUpdateConfigFuture struct {
	Future workflow.Future
}

func (r *GroundstationUpdateConfigFuture) Get(ctx workflow.Context) (*groundstation.UpdateConfigOutput, error) {
	var output groundstation.UpdateConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GroundstationUpdateMissionProfileFuture struct {
	Future workflow.Future
}

func (r *GroundstationUpdateMissionProfileFuture) Get(ctx workflow.Context) (*groundstation.UpdateMissionProfileOutput, error) {
	var output groundstation.UpdateMissionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) CancelContact(ctx workflow.Context, input *groundstation.CancelContactInput) (*groundstation.CancelContactOutput, error) {
	var output groundstation.CancelContactOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.CancelContact", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) CancelContactAsync(ctx workflow.Context, input *groundstation.CancelContactInput) *GroundstationCancelContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.CancelContact", input)
	return &GroundstationCancelContactFuture{Future: future}
}

func (a *GroundStationStub) CreateConfig(ctx workflow.Context, input *groundstation.CreateConfigInput) (*groundstation.CreateConfigOutput, error) {
	var output groundstation.CreateConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.CreateConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) CreateConfigAsync(ctx workflow.Context, input *groundstation.CreateConfigInput) *GroundstationCreateConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.CreateConfig", input)
	return &GroundstationCreateConfigFuture{Future: future}
}

func (a *GroundStationStub) CreateDataflowEndpointGroup(ctx workflow.Context, input *groundstation.CreateDataflowEndpointGroupInput) (*groundstation.CreateDataflowEndpointGroupOutput, error) {
	var output groundstation.CreateDataflowEndpointGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.CreateDataflowEndpointGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) CreateDataflowEndpointGroupAsync(ctx workflow.Context, input *groundstation.CreateDataflowEndpointGroupInput) *GroundstationCreateDataflowEndpointGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.CreateDataflowEndpointGroup", input)
	return &GroundstationCreateDataflowEndpointGroupFuture{Future: future}
}

func (a *GroundStationStub) CreateMissionProfile(ctx workflow.Context, input *groundstation.CreateMissionProfileInput) (*groundstation.CreateMissionProfileOutput, error) {
	var output groundstation.CreateMissionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.CreateMissionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) CreateMissionProfileAsync(ctx workflow.Context, input *groundstation.CreateMissionProfileInput) *GroundstationCreateMissionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.CreateMissionProfile", input)
	return &GroundstationCreateMissionProfileFuture{Future: future}
}

func (a *GroundStationStub) DeleteConfig(ctx workflow.Context, input *groundstation.DeleteConfigInput) (*groundstation.DeleteConfigOutput, error) {
	var output groundstation.DeleteConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.DeleteConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) DeleteConfigAsync(ctx workflow.Context, input *groundstation.DeleteConfigInput) *GroundstationDeleteConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.DeleteConfig", input)
	return &GroundstationDeleteConfigFuture{Future: future}
}

func (a *GroundStationStub) DeleteDataflowEndpointGroup(ctx workflow.Context, input *groundstation.DeleteDataflowEndpointGroupInput) (*groundstation.DeleteDataflowEndpointGroupOutput, error) {
	var output groundstation.DeleteDataflowEndpointGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.DeleteDataflowEndpointGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) DeleteDataflowEndpointGroupAsync(ctx workflow.Context, input *groundstation.DeleteDataflowEndpointGroupInput) *GroundstationDeleteDataflowEndpointGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.DeleteDataflowEndpointGroup", input)
	return &GroundstationDeleteDataflowEndpointGroupFuture{Future: future}
}

func (a *GroundStationStub) DeleteMissionProfile(ctx workflow.Context, input *groundstation.DeleteMissionProfileInput) (*groundstation.DeleteMissionProfileOutput, error) {
	var output groundstation.DeleteMissionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.DeleteMissionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) DeleteMissionProfileAsync(ctx workflow.Context, input *groundstation.DeleteMissionProfileInput) *GroundstationDeleteMissionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.DeleteMissionProfile", input)
	return &GroundstationDeleteMissionProfileFuture{Future: future}
}

func (a *GroundStationStub) DescribeContact(ctx workflow.Context, input *groundstation.DescribeContactInput) (*groundstation.DescribeContactOutput, error) {
	var output groundstation.DescribeContactOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.DescribeContact", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) DescribeContactAsync(ctx workflow.Context, input *groundstation.DescribeContactInput) *GroundstationDescribeContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.DescribeContact", input)
	return &GroundstationDescribeContactFuture{Future: future}
}

func (a *GroundStationStub) GetConfig(ctx workflow.Context, input *groundstation.GetConfigInput) (*groundstation.GetConfigOutput, error) {
	var output groundstation.GetConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.GetConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) GetConfigAsync(ctx workflow.Context, input *groundstation.GetConfigInput) *GroundstationGetConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.GetConfig", input)
	return &GroundstationGetConfigFuture{Future: future}
}

func (a *GroundStationStub) GetDataflowEndpointGroup(ctx workflow.Context, input *groundstation.GetDataflowEndpointGroupInput) (*groundstation.GetDataflowEndpointGroupOutput, error) {
	var output groundstation.GetDataflowEndpointGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.GetDataflowEndpointGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) GetDataflowEndpointGroupAsync(ctx workflow.Context, input *groundstation.GetDataflowEndpointGroupInput) *GroundstationGetDataflowEndpointGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.GetDataflowEndpointGroup", input)
	return &GroundstationGetDataflowEndpointGroupFuture{Future: future}
}

func (a *GroundStationStub) GetMinuteUsage(ctx workflow.Context, input *groundstation.GetMinuteUsageInput) (*groundstation.GetMinuteUsageOutput, error) {
	var output groundstation.GetMinuteUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.GetMinuteUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) GetMinuteUsageAsync(ctx workflow.Context, input *groundstation.GetMinuteUsageInput) *GroundstationGetMinuteUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.GetMinuteUsage", input)
	return &GroundstationGetMinuteUsageFuture{Future: future}
}

func (a *GroundStationStub) GetMissionProfile(ctx workflow.Context, input *groundstation.GetMissionProfileInput) (*groundstation.GetMissionProfileOutput, error) {
	var output groundstation.GetMissionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.GetMissionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) GetMissionProfileAsync(ctx workflow.Context, input *groundstation.GetMissionProfileInput) *GroundstationGetMissionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.GetMissionProfile", input)
	return &GroundstationGetMissionProfileFuture{Future: future}
}

func (a *GroundStationStub) GetSatellite(ctx workflow.Context, input *groundstation.GetSatelliteInput) (*groundstation.GetSatelliteOutput, error) {
	var output groundstation.GetSatelliteOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.GetSatellite", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) GetSatelliteAsync(ctx workflow.Context, input *groundstation.GetSatelliteInput) *GroundstationGetSatelliteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.GetSatellite", input)
	return &GroundstationGetSatelliteFuture{Future: future}
}

func (a *GroundStationStub) ListConfigs(ctx workflow.Context, input *groundstation.ListConfigsInput) (*groundstation.ListConfigsOutput, error) {
	var output groundstation.ListConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.ListConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) ListConfigsAsync(ctx workflow.Context, input *groundstation.ListConfigsInput) *GroundstationListConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.ListConfigs", input)
	return &GroundstationListConfigsFuture{Future: future}
}

func (a *GroundStationStub) ListContacts(ctx workflow.Context, input *groundstation.ListContactsInput) (*groundstation.ListContactsOutput, error) {
	var output groundstation.ListContactsOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.ListContacts", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) ListContactsAsync(ctx workflow.Context, input *groundstation.ListContactsInput) *GroundstationListContactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.ListContacts", input)
	return &GroundstationListContactsFuture{Future: future}
}

func (a *GroundStationStub) ListDataflowEndpointGroups(ctx workflow.Context, input *groundstation.ListDataflowEndpointGroupsInput) (*groundstation.ListDataflowEndpointGroupsOutput, error) {
	var output groundstation.ListDataflowEndpointGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.ListDataflowEndpointGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) ListDataflowEndpointGroupsAsync(ctx workflow.Context, input *groundstation.ListDataflowEndpointGroupsInput) *GroundstationListDataflowEndpointGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.ListDataflowEndpointGroups", input)
	return &GroundstationListDataflowEndpointGroupsFuture{Future: future}
}

func (a *GroundStationStub) ListGroundStations(ctx workflow.Context, input *groundstation.ListGroundStationsInput) (*groundstation.ListGroundStationsOutput, error) {
	var output groundstation.ListGroundStationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.ListGroundStations", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) ListGroundStationsAsync(ctx workflow.Context, input *groundstation.ListGroundStationsInput) *GroundstationListGroundStationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.ListGroundStations", input)
	return &GroundstationListGroundStationsFuture{Future: future}
}

func (a *GroundStationStub) ListMissionProfiles(ctx workflow.Context, input *groundstation.ListMissionProfilesInput) (*groundstation.ListMissionProfilesOutput, error) {
	var output groundstation.ListMissionProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.ListMissionProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) ListMissionProfilesAsync(ctx workflow.Context, input *groundstation.ListMissionProfilesInput) *GroundstationListMissionProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.ListMissionProfiles", input)
	return &GroundstationListMissionProfilesFuture{Future: future}
}

func (a *GroundStationStub) ListSatellites(ctx workflow.Context, input *groundstation.ListSatellitesInput) (*groundstation.ListSatellitesOutput, error) {
	var output groundstation.ListSatellitesOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.ListSatellites", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) ListSatellitesAsync(ctx workflow.Context, input *groundstation.ListSatellitesInput) *GroundstationListSatellitesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.ListSatellites", input)
	return &GroundstationListSatellitesFuture{Future: future}
}

func (a *GroundStationStub) ListTagsForResource(ctx workflow.Context, input *groundstation.ListTagsForResourceInput) (*groundstation.ListTagsForResourceOutput, error) {
	var output groundstation.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) ListTagsForResourceAsync(ctx workflow.Context, input *groundstation.ListTagsForResourceInput) *GroundstationListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.ListTagsForResource", input)
	return &GroundstationListTagsForResourceFuture{Future: future}
}

func (a *GroundStationStub) ReserveContact(ctx workflow.Context, input *groundstation.ReserveContactInput) (*groundstation.ReserveContactOutput, error) {
	var output groundstation.ReserveContactOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.ReserveContact", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) ReserveContactAsync(ctx workflow.Context, input *groundstation.ReserveContactInput) *GroundstationReserveContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.ReserveContact", input)
	return &GroundstationReserveContactFuture{Future: future}
}

func (a *GroundStationStub) TagResource(ctx workflow.Context, input *groundstation.TagResourceInput) (*groundstation.TagResourceOutput, error) {
	var output groundstation.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) TagResourceAsync(ctx workflow.Context, input *groundstation.TagResourceInput) *GroundstationTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.TagResource", input)
	return &GroundstationTagResourceFuture{Future: future}
}

func (a *GroundStationStub) UntagResource(ctx workflow.Context, input *groundstation.UntagResourceInput) (*groundstation.UntagResourceOutput, error) {
	var output groundstation.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) UntagResourceAsync(ctx workflow.Context, input *groundstation.UntagResourceInput) *GroundstationUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.UntagResource", input)
	return &GroundstationUntagResourceFuture{Future: future}
}

func (a *GroundStationStub) UpdateConfig(ctx workflow.Context, input *groundstation.UpdateConfigInput) (*groundstation.UpdateConfigOutput, error) {
	var output groundstation.UpdateConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.UpdateConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) UpdateConfigAsync(ctx workflow.Context, input *groundstation.UpdateConfigInput) *GroundstationUpdateConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.UpdateConfig", input)
	return &GroundstationUpdateConfigFuture{Future: future}
}

func (a *GroundStationStub) UpdateMissionProfile(ctx workflow.Context, input *groundstation.UpdateMissionProfileInput) (*groundstation.UpdateMissionProfileOutput, error) {
	var output groundstation.UpdateMissionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.groundstation.UpdateMissionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *GroundStationStub) UpdateMissionProfileAsync(ctx workflow.Context, input *groundstation.UpdateMissionProfileInput) *GroundstationUpdateMissionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.groundstation.UpdateMissionProfile", input)
	return &GroundstationUpdateMissionProfileFuture{Future: future}
}
