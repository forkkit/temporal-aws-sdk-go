// Generated by https://github.com/temporalio/temporal-aws-sdk/cmd/temporal-aws-sdk-gen/main.go
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/datasync"
	"go.temporal.io/sdk/workflow"
)

type DataSyncClient interface {
	CancelTaskExecution(ctx workflow.Context, input *datasync.CancelTaskExecutionInput) (*datasync.CancelTaskExecutionOutput, error)
	CancelTaskExecutionAsync(ctx workflow.Context, input *datasync.CancelTaskExecutionInput) *DatasyncCancelTaskExecutionResult

	CreateAgent(ctx workflow.Context, input *datasync.CreateAgentInput) (*datasync.CreateAgentOutput, error)
	CreateAgentAsync(ctx workflow.Context, input *datasync.CreateAgentInput) *DatasyncCreateAgentResult

	CreateLocationEfs(ctx workflow.Context, input *datasync.CreateLocationEfsInput) (*datasync.CreateLocationEfsOutput, error)
	CreateLocationEfsAsync(ctx workflow.Context, input *datasync.CreateLocationEfsInput) *DatasyncCreateLocationEfsResult

	CreateLocationFsxWindows(ctx workflow.Context, input *datasync.CreateLocationFsxWindowsInput) (*datasync.CreateLocationFsxWindowsOutput, error)
	CreateLocationFsxWindowsAsync(ctx workflow.Context, input *datasync.CreateLocationFsxWindowsInput) *DatasyncCreateLocationFsxWindowsResult

	CreateLocationNfs(ctx workflow.Context, input *datasync.CreateLocationNfsInput) (*datasync.CreateLocationNfsOutput, error)
	CreateLocationNfsAsync(ctx workflow.Context, input *datasync.CreateLocationNfsInput) *DatasyncCreateLocationNfsResult

	CreateLocationObjectStorage(ctx workflow.Context, input *datasync.CreateLocationObjectStorageInput) (*datasync.CreateLocationObjectStorageOutput, error)
	CreateLocationObjectStorageAsync(ctx workflow.Context, input *datasync.CreateLocationObjectStorageInput) *DatasyncCreateLocationObjectStorageResult

	CreateLocationS3(ctx workflow.Context, input *datasync.CreateLocationS3Input) (*datasync.CreateLocationS3Output, error)
	CreateLocationS3Async(ctx workflow.Context, input *datasync.CreateLocationS3Input) *DatasyncCreateLocationS3Result

	CreateLocationSmb(ctx workflow.Context, input *datasync.CreateLocationSmbInput) (*datasync.CreateLocationSmbOutput, error)
	CreateLocationSmbAsync(ctx workflow.Context, input *datasync.CreateLocationSmbInput) *DatasyncCreateLocationSmbResult

	CreateTask(ctx workflow.Context, input *datasync.CreateTaskInput) (*datasync.CreateTaskOutput, error)
	CreateTaskAsync(ctx workflow.Context, input *datasync.CreateTaskInput) *DatasyncCreateTaskResult

	DeleteAgent(ctx workflow.Context, input *datasync.DeleteAgentInput) (*datasync.DeleteAgentOutput, error)
	DeleteAgentAsync(ctx workflow.Context, input *datasync.DeleteAgentInput) *DatasyncDeleteAgentResult

	DeleteLocation(ctx workflow.Context, input *datasync.DeleteLocationInput) (*datasync.DeleteLocationOutput, error)
	DeleteLocationAsync(ctx workflow.Context, input *datasync.DeleteLocationInput) *DatasyncDeleteLocationResult

	DeleteTask(ctx workflow.Context, input *datasync.DeleteTaskInput) (*datasync.DeleteTaskOutput, error)
	DeleteTaskAsync(ctx workflow.Context, input *datasync.DeleteTaskInput) *DatasyncDeleteTaskResult

	DescribeAgent(ctx workflow.Context, input *datasync.DescribeAgentInput) (*datasync.DescribeAgentOutput, error)
	DescribeAgentAsync(ctx workflow.Context, input *datasync.DescribeAgentInput) *DatasyncDescribeAgentResult

	DescribeLocationEfs(ctx workflow.Context, input *datasync.DescribeLocationEfsInput) (*datasync.DescribeLocationEfsOutput, error)
	DescribeLocationEfsAsync(ctx workflow.Context, input *datasync.DescribeLocationEfsInput) *DatasyncDescribeLocationEfsResult

	DescribeLocationFsxWindows(ctx workflow.Context, input *datasync.DescribeLocationFsxWindowsInput) (*datasync.DescribeLocationFsxWindowsOutput, error)
	DescribeLocationFsxWindowsAsync(ctx workflow.Context, input *datasync.DescribeLocationFsxWindowsInput) *DatasyncDescribeLocationFsxWindowsResult

	DescribeLocationNfs(ctx workflow.Context, input *datasync.DescribeLocationNfsInput) (*datasync.DescribeLocationNfsOutput, error)
	DescribeLocationNfsAsync(ctx workflow.Context, input *datasync.DescribeLocationNfsInput) *DatasyncDescribeLocationNfsResult

	DescribeLocationObjectStorage(ctx workflow.Context, input *datasync.DescribeLocationObjectStorageInput) (*datasync.DescribeLocationObjectStorageOutput, error)
	DescribeLocationObjectStorageAsync(ctx workflow.Context, input *datasync.DescribeLocationObjectStorageInput) *DatasyncDescribeLocationObjectStorageResult

	DescribeLocationS3(ctx workflow.Context, input *datasync.DescribeLocationS3Input) (*datasync.DescribeLocationS3Output, error)
	DescribeLocationS3Async(ctx workflow.Context, input *datasync.DescribeLocationS3Input) *DatasyncDescribeLocationS3Result

	DescribeLocationSmb(ctx workflow.Context, input *datasync.DescribeLocationSmbInput) (*datasync.DescribeLocationSmbOutput, error)
	DescribeLocationSmbAsync(ctx workflow.Context, input *datasync.DescribeLocationSmbInput) *DatasyncDescribeLocationSmbResult

	DescribeTask(ctx workflow.Context, input *datasync.DescribeTaskInput) (*datasync.DescribeTaskOutput, error)
	DescribeTaskAsync(ctx workflow.Context, input *datasync.DescribeTaskInput) *DatasyncDescribeTaskResult

	DescribeTaskExecution(ctx workflow.Context, input *datasync.DescribeTaskExecutionInput) (*datasync.DescribeTaskExecutionOutput, error)
	DescribeTaskExecutionAsync(ctx workflow.Context, input *datasync.DescribeTaskExecutionInput) *DatasyncDescribeTaskExecutionResult

	ListAgents(ctx workflow.Context, input *datasync.ListAgentsInput) (*datasync.ListAgentsOutput, error)
	ListAgentsAsync(ctx workflow.Context, input *datasync.ListAgentsInput) *DatasyncListAgentsResult

	ListLocations(ctx workflow.Context, input *datasync.ListLocationsInput) (*datasync.ListLocationsOutput, error)
	ListLocationsAsync(ctx workflow.Context, input *datasync.ListLocationsInput) *DatasyncListLocationsResult

	ListTagsForResource(ctx workflow.Context, input *datasync.ListTagsForResourceInput) (*datasync.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *datasync.ListTagsForResourceInput) *DatasyncListTagsForResourceResult

	ListTaskExecutions(ctx workflow.Context, input *datasync.ListTaskExecutionsInput) (*datasync.ListTaskExecutionsOutput, error)
	ListTaskExecutionsAsync(ctx workflow.Context, input *datasync.ListTaskExecutionsInput) *DatasyncListTaskExecutionsResult

	ListTasks(ctx workflow.Context, input *datasync.ListTasksInput) (*datasync.ListTasksOutput, error)
	ListTasksAsync(ctx workflow.Context, input *datasync.ListTasksInput) *DatasyncListTasksResult

	StartTaskExecution(ctx workflow.Context, input *datasync.StartTaskExecutionInput) (*datasync.StartTaskExecutionOutput, error)
	StartTaskExecutionAsync(ctx workflow.Context, input *datasync.StartTaskExecutionInput) *DatasyncStartTaskExecutionResult

	TagResource(ctx workflow.Context, input *datasync.TagResourceInput) (*datasync.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *datasync.TagResourceInput) *DatasyncTagResourceResult

	UntagResource(ctx workflow.Context, input *datasync.UntagResourceInput) (*datasync.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *datasync.UntagResourceInput) *DatasyncUntagResourceResult

	UpdateAgent(ctx workflow.Context, input *datasync.UpdateAgentInput) (*datasync.UpdateAgentOutput, error)
	UpdateAgentAsync(ctx workflow.Context, input *datasync.UpdateAgentInput) *DatasyncUpdateAgentResult

	UpdateTask(ctx workflow.Context, input *datasync.UpdateTaskInput) (*datasync.UpdateTaskOutput, error)
	UpdateTaskAsync(ctx workflow.Context, input *datasync.UpdateTaskInput) *DatasyncUpdateTaskResult
}

type DataSyncStub struct{}

func NewDataSyncStub() DataSyncClient {
	return &DataSyncStub{}
}

type DatasyncCancelTaskExecutionResult struct {
	Result workflow.Future
}

func (r *DatasyncCancelTaskExecutionResult) Get(ctx workflow.Context) (*datasync.CancelTaskExecutionOutput, error) {
	var output datasync.CancelTaskExecutionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncCreateAgentResult struct {
	Result workflow.Future
}

func (r *DatasyncCreateAgentResult) Get(ctx workflow.Context) (*datasync.CreateAgentOutput, error) {
	var output datasync.CreateAgentOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncCreateLocationEfsResult struct {
	Result workflow.Future
}

func (r *DatasyncCreateLocationEfsResult) Get(ctx workflow.Context) (*datasync.CreateLocationEfsOutput, error) {
	var output datasync.CreateLocationEfsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncCreateLocationFsxWindowsResult struct {
	Result workflow.Future
}

func (r *DatasyncCreateLocationFsxWindowsResult) Get(ctx workflow.Context) (*datasync.CreateLocationFsxWindowsOutput, error) {
	var output datasync.CreateLocationFsxWindowsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncCreateLocationNfsResult struct {
	Result workflow.Future
}

func (r *DatasyncCreateLocationNfsResult) Get(ctx workflow.Context) (*datasync.CreateLocationNfsOutput, error) {
	var output datasync.CreateLocationNfsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncCreateLocationObjectStorageResult struct {
	Result workflow.Future
}

func (r *DatasyncCreateLocationObjectStorageResult) Get(ctx workflow.Context) (*datasync.CreateLocationObjectStorageOutput, error) {
	var output datasync.CreateLocationObjectStorageOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncCreateLocationS3Result struct {
	Result workflow.Future
}

func (r *DatasyncCreateLocationS3Result) Get(ctx workflow.Context) (*datasync.CreateLocationS3Output, error) {
	var output datasync.CreateLocationS3Output
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncCreateLocationSmbResult struct {
	Result workflow.Future
}

func (r *DatasyncCreateLocationSmbResult) Get(ctx workflow.Context) (*datasync.CreateLocationSmbOutput, error) {
	var output datasync.CreateLocationSmbOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncCreateTaskResult struct {
	Result workflow.Future
}

func (r *DatasyncCreateTaskResult) Get(ctx workflow.Context) (*datasync.CreateTaskOutput, error) {
	var output datasync.CreateTaskOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncDeleteAgentResult struct {
	Result workflow.Future
}

func (r *DatasyncDeleteAgentResult) Get(ctx workflow.Context) (*datasync.DeleteAgentOutput, error) {
	var output datasync.DeleteAgentOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncDeleteLocationResult struct {
	Result workflow.Future
}

func (r *DatasyncDeleteLocationResult) Get(ctx workflow.Context) (*datasync.DeleteLocationOutput, error) {
	var output datasync.DeleteLocationOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncDeleteTaskResult struct {
	Result workflow.Future
}

func (r *DatasyncDeleteTaskResult) Get(ctx workflow.Context) (*datasync.DeleteTaskOutput, error) {
	var output datasync.DeleteTaskOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncDescribeAgentResult struct {
	Result workflow.Future
}

func (r *DatasyncDescribeAgentResult) Get(ctx workflow.Context) (*datasync.DescribeAgentOutput, error) {
	var output datasync.DescribeAgentOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncDescribeLocationEfsResult struct {
	Result workflow.Future
}

func (r *DatasyncDescribeLocationEfsResult) Get(ctx workflow.Context) (*datasync.DescribeLocationEfsOutput, error) {
	var output datasync.DescribeLocationEfsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncDescribeLocationFsxWindowsResult struct {
	Result workflow.Future
}

func (r *DatasyncDescribeLocationFsxWindowsResult) Get(ctx workflow.Context) (*datasync.DescribeLocationFsxWindowsOutput, error) {
	var output datasync.DescribeLocationFsxWindowsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncDescribeLocationNfsResult struct {
	Result workflow.Future
}

func (r *DatasyncDescribeLocationNfsResult) Get(ctx workflow.Context) (*datasync.DescribeLocationNfsOutput, error) {
	var output datasync.DescribeLocationNfsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncDescribeLocationObjectStorageResult struct {
	Result workflow.Future
}

func (r *DatasyncDescribeLocationObjectStorageResult) Get(ctx workflow.Context) (*datasync.DescribeLocationObjectStorageOutput, error) {
	var output datasync.DescribeLocationObjectStorageOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncDescribeLocationS3Result struct {
	Result workflow.Future
}

func (r *DatasyncDescribeLocationS3Result) Get(ctx workflow.Context) (*datasync.DescribeLocationS3Output, error) {
	var output datasync.DescribeLocationS3Output
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncDescribeLocationSmbResult struct {
	Result workflow.Future
}

func (r *DatasyncDescribeLocationSmbResult) Get(ctx workflow.Context) (*datasync.DescribeLocationSmbOutput, error) {
	var output datasync.DescribeLocationSmbOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncDescribeTaskResult struct {
	Result workflow.Future
}

func (r *DatasyncDescribeTaskResult) Get(ctx workflow.Context) (*datasync.DescribeTaskOutput, error) {
	var output datasync.DescribeTaskOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncDescribeTaskExecutionResult struct {
	Result workflow.Future
}

func (r *DatasyncDescribeTaskExecutionResult) Get(ctx workflow.Context) (*datasync.DescribeTaskExecutionOutput, error) {
	var output datasync.DescribeTaskExecutionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncListAgentsResult struct {
	Result workflow.Future
}

func (r *DatasyncListAgentsResult) Get(ctx workflow.Context) (*datasync.ListAgentsOutput, error) {
	var output datasync.ListAgentsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncListLocationsResult struct {
	Result workflow.Future
}

func (r *DatasyncListLocationsResult) Get(ctx workflow.Context) (*datasync.ListLocationsOutput, error) {
	var output datasync.ListLocationsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncListTagsForResourceResult struct {
	Result workflow.Future
}

func (r *DatasyncListTagsForResourceResult) Get(ctx workflow.Context) (*datasync.ListTagsForResourceOutput, error) {
	var output datasync.ListTagsForResourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncListTaskExecutionsResult struct {
	Result workflow.Future
}

func (r *DatasyncListTaskExecutionsResult) Get(ctx workflow.Context) (*datasync.ListTaskExecutionsOutput, error) {
	var output datasync.ListTaskExecutionsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncListTasksResult struct {
	Result workflow.Future
}

func (r *DatasyncListTasksResult) Get(ctx workflow.Context) (*datasync.ListTasksOutput, error) {
	var output datasync.ListTasksOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncStartTaskExecutionResult struct {
	Result workflow.Future
}

func (r *DatasyncStartTaskExecutionResult) Get(ctx workflow.Context) (*datasync.StartTaskExecutionOutput, error) {
	var output datasync.StartTaskExecutionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncTagResourceResult struct {
	Result workflow.Future
}

func (r *DatasyncTagResourceResult) Get(ctx workflow.Context) (*datasync.TagResourceOutput, error) {
	var output datasync.TagResourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncUntagResourceResult struct {
	Result workflow.Future
}

func (r *DatasyncUntagResourceResult) Get(ctx workflow.Context) (*datasync.UntagResourceOutput, error) {
	var output datasync.UntagResourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncUpdateAgentResult struct {
	Result workflow.Future
}

func (r *DatasyncUpdateAgentResult) Get(ctx workflow.Context) (*datasync.UpdateAgentOutput, error) {
	var output datasync.UpdateAgentOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type DatasyncUpdateTaskResult struct {
	Result workflow.Future
}

func (r *DatasyncUpdateTaskResult) Get(ctx workflow.Context) (*datasync.UpdateTaskOutput, error) {
	var output datasync.UpdateTaskOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) CancelTaskExecution(ctx workflow.Context, input *datasync.CancelTaskExecutionInput) (*datasync.CancelTaskExecutionOutput, error) {
	var output datasync.CancelTaskExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.CancelTaskExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) CancelTaskExecutionAsync(ctx workflow.Context, input *datasync.CancelTaskExecutionInput) *DatasyncCancelTaskExecutionResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.CancelTaskExecution", input)
	return &DatasyncCancelTaskExecutionResult{Result: future}
}

func (a *DataSyncStub) CreateAgent(ctx workflow.Context, input *datasync.CreateAgentInput) (*datasync.CreateAgentOutput, error) {
	var output datasync.CreateAgentOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.CreateAgent", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) CreateAgentAsync(ctx workflow.Context, input *datasync.CreateAgentInput) *DatasyncCreateAgentResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.CreateAgent", input)
	return &DatasyncCreateAgentResult{Result: future}
}

func (a *DataSyncStub) CreateLocationEfs(ctx workflow.Context, input *datasync.CreateLocationEfsInput) (*datasync.CreateLocationEfsOutput, error) {
	var output datasync.CreateLocationEfsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.CreateLocationEfs", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) CreateLocationEfsAsync(ctx workflow.Context, input *datasync.CreateLocationEfsInput) *DatasyncCreateLocationEfsResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.CreateLocationEfs", input)
	return &DatasyncCreateLocationEfsResult{Result: future}
}

func (a *DataSyncStub) CreateLocationFsxWindows(ctx workflow.Context, input *datasync.CreateLocationFsxWindowsInput) (*datasync.CreateLocationFsxWindowsOutput, error) {
	var output datasync.CreateLocationFsxWindowsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.CreateLocationFsxWindows", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) CreateLocationFsxWindowsAsync(ctx workflow.Context, input *datasync.CreateLocationFsxWindowsInput) *DatasyncCreateLocationFsxWindowsResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.CreateLocationFsxWindows", input)
	return &DatasyncCreateLocationFsxWindowsResult{Result: future}
}

func (a *DataSyncStub) CreateLocationNfs(ctx workflow.Context, input *datasync.CreateLocationNfsInput) (*datasync.CreateLocationNfsOutput, error) {
	var output datasync.CreateLocationNfsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.CreateLocationNfs", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) CreateLocationNfsAsync(ctx workflow.Context, input *datasync.CreateLocationNfsInput) *DatasyncCreateLocationNfsResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.CreateLocationNfs", input)
	return &DatasyncCreateLocationNfsResult{Result: future}
}

func (a *DataSyncStub) CreateLocationObjectStorage(ctx workflow.Context, input *datasync.CreateLocationObjectStorageInput) (*datasync.CreateLocationObjectStorageOutput, error) {
	var output datasync.CreateLocationObjectStorageOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.CreateLocationObjectStorage", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) CreateLocationObjectStorageAsync(ctx workflow.Context, input *datasync.CreateLocationObjectStorageInput) *DatasyncCreateLocationObjectStorageResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.CreateLocationObjectStorage", input)
	return &DatasyncCreateLocationObjectStorageResult{Result: future}
}

func (a *DataSyncStub) CreateLocationS3(ctx workflow.Context, input *datasync.CreateLocationS3Input) (*datasync.CreateLocationS3Output, error) {
	var output datasync.CreateLocationS3Output
	err := workflow.ExecuteActivity(ctx, "aws.datasync.CreateLocationS3", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) CreateLocationS3Async(ctx workflow.Context, input *datasync.CreateLocationS3Input) *DatasyncCreateLocationS3Result {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.CreateLocationS3", input)
	return &DatasyncCreateLocationS3Result{Result: future}
}

func (a *DataSyncStub) CreateLocationSmb(ctx workflow.Context, input *datasync.CreateLocationSmbInput) (*datasync.CreateLocationSmbOutput, error) {
	var output datasync.CreateLocationSmbOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.CreateLocationSmb", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) CreateLocationSmbAsync(ctx workflow.Context, input *datasync.CreateLocationSmbInput) *DatasyncCreateLocationSmbResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.CreateLocationSmb", input)
	return &DatasyncCreateLocationSmbResult{Result: future}
}

func (a *DataSyncStub) CreateTask(ctx workflow.Context, input *datasync.CreateTaskInput) (*datasync.CreateTaskOutput, error) {
	var output datasync.CreateTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.CreateTask", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) CreateTaskAsync(ctx workflow.Context, input *datasync.CreateTaskInput) *DatasyncCreateTaskResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.CreateTask", input)
	return &DatasyncCreateTaskResult{Result: future}
}

func (a *DataSyncStub) DeleteAgent(ctx workflow.Context, input *datasync.DeleteAgentInput) (*datasync.DeleteAgentOutput, error) {
	var output datasync.DeleteAgentOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.DeleteAgent", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) DeleteAgentAsync(ctx workflow.Context, input *datasync.DeleteAgentInput) *DatasyncDeleteAgentResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.DeleteAgent", input)
	return &DatasyncDeleteAgentResult{Result: future}
}

func (a *DataSyncStub) DeleteLocation(ctx workflow.Context, input *datasync.DeleteLocationInput) (*datasync.DeleteLocationOutput, error) {
	var output datasync.DeleteLocationOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.DeleteLocation", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) DeleteLocationAsync(ctx workflow.Context, input *datasync.DeleteLocationInput) *DatasyncDeleteLocationResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.DeleteLocation", input)
	return &DatasyncDeleteLocationResult{Result: future}
}

func (a *DataSyncStub) DeleteTask(ctx workflow.Context, input *datasync.DeleteTaskInput) (*datasync.DeleteTaskOutput, error) {
	var output datasync.DeleteTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.DeleteTask", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) DeleteTaskAsync(ctx workflow.Context, input *datasync.DeleteTaskInput) *DatasyncDeleteTaskResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.DeleteTask", input)
	return &DatasyncDeleteTaskResult{Result: future}
}

func (a *DataSyncStub) DescribeAgent(ctx workflow.Context, input *datasync.DescribeAgentInput) (*datasync.DescribeAgentOutput, error) {
	var output datasync.DescribeAgentOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeAgent", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) DescribeAgentAsync(ctx workflow.Context, input *datasync.DescribeAgentInput) *DatasyncDescribeAgentResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeAgent", input)
	return &DatasyncDescribeAgentResult{Result: future}
}

func (a *DataSyncStub) DescribeLocationEfs(ctx workflow.Context, input *datasync.DescribeLocationEfsInput) (*datasync.DescribeLocationEfsOutput, error) {
	var output datasync.DescribeLocationEfsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeLocationEfs", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) DescribeLocationEfsAsync(ctx workflow.Context, input *datasync.DescribeLocationEfsInput) *DatasyncDescribeLocationEfsResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeLocationEfs", input)
	return &DatasyncDescribeLocationEfsResult{Result: future}
}

func (a *DataSyncStub) DescribeLocationFsxWindows(ctx workflow.Context, input *datasync.DescribeLocationFsxWindowsInput) (*datasync.DescribeLocationFsxWindowsOutput, error) {
	var output datasync.DescribeLocationFsxWindowsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeLocationFsxWindows", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) DescribeLocationFsxWindowsAsync(ctx workflow.Context, input *datasync.DescribeLocationFsxWindowsInput) *DatasyncDescribeLocationFsxWindowsResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeLocationFsxWindows", input)
	return &DatasyncDescribeLocationFsxWindowsResult{Result: future}
}

func (a *DataSyncStub) DescribeLocationNfs(ctx workflow.Context, input *datasync.DescribeLocationNfsInput) (*datasync.DescribeLocationNfsOutput, error) {
	var output datasync.DescribeLocationNfsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeLocationNfs", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) DescribeLocationNfsAsync(ctx workflow.Context, input *datasync.DescribeLocationNfsInput) *DatasyncDescribeLocationNfsResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeLocationNfs", input)
	return &DatasyncDescribeLocationNfsResult{Result: future}
}

func (a *DataSyncStub) DescribeLocationObjectStorage(ctx workflow.Context, input *datasync.DescribeLocationObjectStorageInput) (*datasync.DescribeLocationObjectStorageOutput, error) {
	var output datasync.DescribeLocationObjectStorageOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeLocationObjectStorage", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) DescribeLocationObjectStorageAsync(ctx workflow.Context, input *datasync.DescribeLocationObjectStorageInput) *DatasyncDescribeLocationObjectStorageResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeLocationObjectStorage", input)
	return &DatasyncDescribeLocationObjectStorageResult{Result: future}
}

func (a *DataSyncStub) DescribeLocationS3(ctx workflow.Context, input *datasync.DescribeLocationS3Input) (*datasync.DescribeLocationS3Output, error) {
	var output datasync.DescribeLocationS3Output
	err := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeLocationS3", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) DescribeLocationS3Async(ctx workflow.Context, input *datasync.DescribeLocationS3Input) *DatasyncDescribeLocationS3Result {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeLocationS3", input)
	return &DatasyncDescribeLocationS3Result{Result: future}
}

func (a *DataSyncStub) DescribeLocationSmb(ctx workflow.Context, input *datasync.DescribeLocationSmbInput) (*datasync.DescribeLocationSmbOutput, error) {
	var output datasync.DescribeLocationSmbOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeLocationSmb", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) DescribeLocationSmbAsync(ctx workflow.Context, input *datasync.DescribeLocationSmbInput) *DatasyncDescribeLocationSmbResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeLocationSmb", input)
	return &DatasyncDescribeLocationSmbResult{Result: future}
}

func (a *DataSyncStub) DescribeTask(ctx workflow.Context, input *datasync.DescribeTaskInput) (*datasync.DescribeTaskOutput, error) {
	var output datasync.DescribeTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeTask", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) DescribeTaskAsync(ctx workflow.Context, input *datasync.DescribeTaskInput) *DatasyncDescribeTaskResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeTask", input)
	return &DatasyncDescribeTaskResult{Result: future}
}

func (a *DataSyncStub) DescribeTaskExecution(ctx workflow.Context, input *datasync.DescribeTaskExecutionInput) (*datasync.DescribeTaskExecutionOutput, error) {
	var output datasync.DescribeTaskExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeTaskExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) DescribeTaskExecutionAsync(ctx workflow.Context, input *datasync.DescribeTaskExecutionInput) *DatasyncDescribeTaskExecutionResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.DescribeTaskExecution", input)
	return &DatasyncDescribeTaskExecutionResult{Result: future}
}

func (a *DataSyncStub) ListAgents(ctx workflow.Context, input *datasync.ListAgentsInput) (*datasync.ListAgentsOutput, error) {
	var output datasync.ListAgentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.ListAgents", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) ListAgentsAsync(ctx workflow.Context, input *datasync.ListAgentsInput) *DatasyncListAgentsResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.ListAgents", input)
	return &DatasyncListAgentsResult{Result: future}
}

func (a *DataSyncStub) ListLocations(ctx workflow.Context, input *datasync.ListLocationsInput) (*datasync.ListLocationsOutput, error) {
	var output datasync.ListLocationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.ListLocations", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) ListLocationsAsync(ctx workflow.Context, input *datasync.ListLocationsInput) *DatasyncListLocationsResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.ListLocations", input)
	return &DatasyncListLocationsResult{Result: future}
}

func (a *DataSyncStub) ListTagsForResource(ctx workflow.Context, input *datasync.ListTagsForResourceInput) (*datasync.ListTagsForResourceOutput, error) {
	var output datasync.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) ListTagsForResourceAsync(ctx workflow.Context, input *datasync.ListTagsForResourceInput) *DatasyncListTagsForResourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.ListTagsForResource", input)
	return &DatasyncListTagsForResourceResult{Result: future}
}

func (a *DataSyncStub) ListTaskExecutions(ctx workflow.Context, input *datasync.ListTaskExecutionsInput) (*datasync.ListTaskExecutionsOutput, error) {
	var output datasync.ListTaskExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.ListTaskExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) ListTaskExecutionsAsync(ctx workflow.Context, input *datasync.ListTaskExecutionsInput) *DatasyncListTaskExecutionsResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.ListTaskExecutions", input)
	return &DatasyncListTaskExecutionsResult{Result: future}
}

func (a *DataSyncStub) ListTasks(ctx workflow.Context, input *datasync.ListTasksInput) (*datasync.ListTasksOutput, error) {
	var output datasync.ListTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.ListTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) ListTasksAsync(ctx workflow.Context, input *datasync.ListTasksInput) *DatasyncListTasksResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.ListTasks", input)
	return &DatasyncListTasksResult{Result: future}
}

func (a *DataSyncStub) StartTaskExecution(ctx workflow.Context, input *datasync.StartTaskExecutionInput) (*datasync.StartTaskExecutionOutput, error) {
	var output datasync.StartTaskExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.StartTaskExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) StartTaskExecutionAsync(ctx workflow.Context, input *datasync.StartTaskExecutionInput) *DatasyncStartTaskExecutionResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.StartTaskExecution", input)
	return &DatasyncStartTaskExecutionResult{Result: future}
}

func (a *DataSyncStub) TagResource(ctx workflow.Context, input *datasync.TagResourceInput) (*datasync.TagResourceOutput, error) {
	var output datasync.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) TagResourceAsync(ctx workflow.Context, input *datasync.TagResourceInput) *DatasyncTagResourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.TagResource", input)
	return &DatasyncTagResourceResult{Result: future}
}

func (a *DataSyncStub) UntagResource(ctx workflow.Context, input *datasync.UntagResourceInput) (*datasync.UntagResourceOutput, error) {
	var output datasync.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) UntagResourceAsync(ctx workflow.Context, input *datasync.UntagResourceInput) *DatasyncUntagResourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.UntagResource", input)
	return &DatasyncUntagResourceResult{Result: future}
}

func (a *DataSyncStub) UpdateAgent(ctx workflow.Context, input *datasync.UpdateAgentInput) (*datasync.UpdateAgentOutput, error) {
	var output datasync.UpdateAgentOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.UpdateAgent", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) UpdateAgentAsync(ctx workflow.Context, input *datasync.UpdateAgentInput) *DatasyncUpdateAgentResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.UpdateAgent", input)
	return &DatasyncUpdateAgentResult{Result: future}
}

func (a *DataSyncStub) UpdateTask(ctx workflow.Context, input *datasync.UpdateTaskInput) (*datasync.UpdateTaskOutput, error) {
	var output datasync.UpdateTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.datasync.UpdateTask", input).Get(ctx, &output)
	return &output, err
}

func (a *DataSyncStub) UpdateTaskAsync(ctx workflow.Context, input *datasync.UpdateTaskInput) *DatasyncUpdateTaskResult {
	future := workflow.ExecuteActivity(ctx, "aws.datasync.UpdateTask", input)
	return &DatasyncUpdateTaskResult{Result: future}
}
