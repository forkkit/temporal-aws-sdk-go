// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/lakeformation"
	"go.temporal.io/sdk/workflow"
)

type LakeFormationClient interface {
	BatchGrantPermissions(ctx workflow.Context, input *lakeformation.BatchGrantPermissionsInput) (*lakeformation.BatchGrantPermissionsOutput, error)
	BatchGrantPermissionsAsync(ctx workflow.Context, input *lakeformation.BatchGrantPermissionsInput) *LakeformationBatchGrantPermissionsFuture

	BatchRevokePermissions(ctx workflow.Context, input *lakeformation.BatchRevokePermissionsInput) (*lakeformation.BatchRevokePermissionsOutput, error)
	BatchRevokePermissionsAsync(ctx workflow.Context, input *lakeformation.BatchRevokePermissionsInput) *LakeformationBatchRevokePermissionsFuture

	DeregisterResource(ctx workflow.Context, input *lakeformation.DeregisterResourceInput) (*lakeformation.DeregisterResourceOutput, error)
	DeregisterResourceAsync(ctx workflow.Context, input *lakeformation.DeregisterResourceInput) *LakeformationDeregisterResourceFuture

	DescribeResource(ctx workflow.Context, input *lakeformation.DescribeResourceInput) (*lakeformation.DescribeResourceOutput, error)
	DescribeResourceAsync(ctx workflow.Context, input *lakeformation.DescribeResourceInput) *LakeformationDescribeResourceFuture

	GetDataLakeSettings(ctx workflow.Context, input *lakeformation.GetDataLakeSettingsInput) (*lakeformation.GetDataLakeSettingsOutput, error)
	GetDataLakeSettingsAsync(ctx workflow.Context, input *lakeformation.GetDataLakeSettingsInput) *LakeformationGetDataLakeSettingsFuture

	GetEffectivePermissionsForPath(ctx workflow.Context, input *lakeformation.GetEffectivePermissionsForPathInput) (*lakeformation.GetEffectivePermissionsForPathOutput, error)
	GetEffectivePermissionsForPathAsync(ctx workflow.Context, input *lakeformation.GetEffectivePermissionsForPathInput) *LakeformationGetEffectivePermissionsForPathFuture

	GrantPermissions(ctx workflow.Context, input *lakeformation.GrantPermissionsInput) (*lakeformation.GrantPermissionsOutput, error)
	GrantPermissionsAsync(ctx workflow.Context, input *lakeformation.GrantPermissionsInput) *LakeformationGrantPermissionsFuture

	ListPermissions(ctx workflow.Context, input *lakeformation.ListPermissionsInput) (*lakeformation.ListPermissionsOutput, error)
	ListPermissionsAsync(ctx workflow.Context, input *lakeformation.ListPermissionsInput) *LakeformationListPermissionsFuture

	ListResources(ctx workflow.Context, input *lakeformation.ListResourcesInput) (*lakeformation.ListResourcesOutput, error)
	ListResourcesAsync(ctx workflow.Context, input *lakeformation.ListResourcesInput) *LakeformationListResourcesFuture

	PutDataLakeSettings(ctx workflow.Context, input *lakeformation.PutDataLakeSettingsInput) (*lakeformation.PutDataLakeSettingsOutput, error)
	PutDataLakeSettingsAsync(ctx workflow.Context, input *lakeformation.PutDataLakeSettingsInput) *LakeformationPutDataLakeSettingsFuture

	RegisterResource(ctx workflow.Context, input *lakeformation.RegisterResourceInput) (*lakeformation.RegisterResourceOutput, error)
	RegisterResourceAsync(ctx workflow.Context, input *lakeformation.RegisterResourceInput) *LakeformationRegisterResourceFuture

	RevokePermissions(ctx workflow.Context, input *lakeformation.RevokePermissionsInput) (*lakeformation.RevokePermissionsOutput, error)
	RevokePermissionsAsync(ctx workflow.Context, input *lakeformation.RevokePermissionsInput) *LakeformationRevokePermissionsFuture

	UpdateResource(ctx workflow.Context, input *lakeformation.UpdateResourceInput) (*lakeformation.UpdateResourceOutput, error)
	UpdateResourceAsync(ctx workflow.Context, input *lakeformation.UpdateResourceInput) *LakeformationUpdateResourceFuture
}

type LakeFormationStub struct{}

func NewLakeFormationStub() LakeFormationClient {
	return &LakeFormationStub{}
}

type LakeformationBatchGrantPermissionsFuture struct {
	Future workflow.Future
}

func (r *LakeformationBatchGrantPermissionsFuture) Get(ctx workflow.Context) (*lakeformation.BatchGrantPermissionsOutput, error) {
	var output lakeformation.BatchGrantPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeformationBatchRevokePermissionsFuture struct {
	Future workflow.Future
}

func (r *LakeformationBatchRevokePermissionsFuture) Get(ctx workflow.Context) (*lakeformation.BatchRevokePermissionsOutput, error) {
	var output lakeformation.BatchRevokePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeformationDeregisterResourceFuture struct {
	Future workflow.Future
}

func (r *LakeformationDeregisterResourceFuture) Get(ctx workflow.Context) (*lakeformation.DeregisterResourceOutput, error) {
	var output lakeformation.DeregisterResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeformationDescribeResourceFuture struct {
	Future workflow.Future
}

func (r *LakeformationDescribeResourceFuture) Get(ctx workflow.Context) (*lakeformation.DescribeResourceOutput, error) {
	var output lakeformation.DescribeResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeformationGetDataLakeSettingsFuture struct {
	Future workflow.Future
}

func (r *LakeformationGetDataLakeSettingsFuture) Get(ctx workflow.Context) (*lakeformation.GetDataLakeSettingsOutput, error) {
	var output lakeformation.GetDataLakeSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeformationGetEffectivePermissionsForPathFuture struct {
	Future workflow.Future
}

func (r *LakeformationGetEffectivePermissionsForPathFuture) Get(ctx workflow.Context) (*lakeformation.GetEffectivePermissionsForPathOutput, error) {
	var output lakeformation.GetEffectivePermissionsForPathOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeformationGrantPermissionsFuture struct {
	Future workflow.Future
}

func (r *LakeformationGrantPermissionsFuture) Get(ctx workflow.Context) (*lakeformation.GrantPermissionsOutput, error) {
	var output lakeformation.GrantPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeformationListPermissionsFuture struct {
	Future workflow.Future
}

func (r *LakeformationListPermissionsFuture) Get(ctx workflow.Context) (*lakeformation.ListPermissionsOutput, error) {
	var output lakeformation.ListPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeformationListResourcesFuture struct {
	Future workflow.Future
}

func (r *LakeformationListResourcesFuture) Get(ctx workflow.Context) (*lakeformation.ListResourcesOutput, error) {
	var output lakeformation.ListResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeformationPutDataLakeSettingsFuture struct {
	Future workflow.Future
}

func (r *LakeformationPutDataLakeSettingsFuture) Get(ctx workflow.Context) (*lakeformation.PutDataLakeSettingsOutput, error) {
	var output lakeformation.PutDataLakeSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeformationRegisterResourceFuture struct {
	Future workflow.Future
}

func (r *LakeformationRegisterResourceFuture) Get(ctx workflow.Context) (*lakeformation.RegisterResourceOutput, error) {
	var output lakeformation.RegisterResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeformationRevokePermissionsFuture struct {
	Future workflow.Future
}

func (r *LakeformationRevokePermissionsFuture) Get(ctx workflow.Context) (*lakeformation.RevokePermissionsOutput, error) {
	var output lakeformation.RevokePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeformationUpdateResourceFuture struct {
	Future workflow.Future
}

func (r *LakeformationUpdateResourceFuture) Get(ctx workflow.Context) (*lakeformation.UpdateResourceOutput, error) {
	var output lakeformation.UpdateResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) BatchGrantPermissions(ctx workflow.Context, input *lakeformation.BatchGrantPermissionsInput) (*lakeformation.BatchGrantPermissionsOutput, error) {
	var output lakeformation.BatchGrantPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.BatchGrantPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) BatchGrantPermissionsAsync(ctx workflow.Context, input *lakeformation.BatchGrantPermissionsInput) *LakeformationBatchGrantPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.BatchGrantPermissions", input)
	return &LakeformationBatchGrantPermissionsFuture{Future: future}
}

func (a *LakeFormationStub) BatchRevokePermissions(ctx workflow.Context, input *lakeformation.BatchRevokePermissionsInput) (*lakeformation.BatchRevokePermissionsOutput, error) {
	var output lakeformation.BatchRevokePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.BatchRevokePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) BatchRevokePermissionsAsync(ctx workflow.Context, input *lakeformation.BatchRevokePermissionsInput) *LakeformationBatchRevokePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.BatchRevokePermissions", input)
	return &LakeformationBatchRevokePermissionsFuture{Future: future}
}

func (a *LakeFormationStub) DeregisterResource(ctx workflow.Context, input *lakeformation.DeregisterResourceInput) (*lakeformation.DeregisterResourceOutput, error) {
	var output lakeformation.DeregisterResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.DeregisterResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) DeregisterResourceAsync(ctx workflow.Context, input *lakeformation.DeregisterResourceInput) *LakeformationDeregisterResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.DeregisterResource", input)
	return &LakeformationDeregisterResourceFuture{Future: future}
}

func (a *LakeFormationStub) DescribeResource(ctx workflow.Context, input *lakeformation.DescribeResourceInput) (*lakeformation.DescribeResourceOutput, error) {
	var output lakeformation.DescribeResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.DescribeResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) DescribeResourceAsync(ctx workflow.Context, input *lakeformation.DescribeResourceInput) *LakeformationDescribeResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.DescribeResource", input)
	return &LakeformationDescribeResourceFuture{Future: future}
}

func (a *LakeFormationStub) GetDataLakeSettings(ctx workflow.Context, input *lakeformation.GetDataLakeSettingsInput) (*lakeformation.GetDataLakeSettingsOutput, error) {
	var output lakeformation.GetDataLakeSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.GetDataLakeSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) GetDataLakeSettingsAsync(ctx workflow.Context, input *lakeformation.GetDataLakeSettingsInput) *LakeformationGetDataLakeSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.GetDataLakeSettings", input)
	return &LakeformationGetDataLakeSettingsFuture{Future: future}
}

func (a *LakeFormationStub) GetEffectivePermissionsForPath(ctx workflow.Context, input *lakeformation.GetEffectivePermissionsForPathInput) (*lakeformation.GetEffectivePermissionsForPathOutput, error) {
	var output lakeformation.GetEffectivePermissionsForPathOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.GetEffectivePermissionsForPath", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) GetEffectivePermissionsForPathAsync(ctx workflow.Context, input *lakeformation.GetEffectivePermissionsForPathInput) *LakeformationGetEffectivePermissionsForPathFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.GetEffectivePermissionsForPath", input)
	return &LakeformationGetEffectivePermissionsForPathFuture{Future: future}
}

func (a *LakeFormationStub) GrantPermissions(ctx workflow.Context, input *lakeformation.GrantPermissionsInput) (*lakeformation.GrantPermissionsOutput, error) {
	var output lakeformation.GrantPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.GrantPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) GrantPermissionsAsync(ctx workflow.Context, input *lakeformation.GrantPermissionsInput) *LakeformationGrantPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.GrantPermissions", input)
	return &LakeformationGrantPermissionsFuture{Future: future}
}

func (a *LakeFormationStub) ListPermissions(ctx workflow.Context, input *lakeformation.ListPermissionsInput) (*lakeformation.ListPermissionsOutput, error) {
	var output lakeformation.ListPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.ListPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) ListPermissionsAsync(ctx workflow.Context, input *lakeformation.ListPermissionsInput) *LakeformationListPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.ListPermissions", input)
	return &LakeformationListPermissionsFuture{Future: future}
}

func (a *LakeFormationStub) ListResources(ctx workflow.Context, input *lakeformation.ListResourcesInput) (*lakeformation.ListResourcesOutput, error) {
	var output lakeformation.ListResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.ListResources", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) ListResourcesAsync(ctx workflow.Context, input *lakeformation.ListResourcesInput) *LakeformationListResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.ListResources", input)
	return &LakeformationListResourcesFuture{Future: future}
}

func (a *LakeFormationStub) PutDataLakeSettings(ctx workflow.Context, input *lakeformation.PutDataLakeSettingsInput) (*lakeformation.PutDataLakeSettingsOutput, error) {
	var output lakeformation.PutDataLakeSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.PutDataLakeSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) PutDataLakeSettingsAsync(ctx workflow.Context, input *lakeformation.PutDataLakeSettingsInput) *LakeformationPutDataLakeSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.PutDataLakeSettings", input)
	return &LakeformationPutDataLakeSettingsFuture{Future: future}
}

func (a *LakeFormationStub) RegisterResource(ctx workflow.Context, input *lakeformation.RegisterResourceInput) (*lakeformation.RegisterResourceOutput, error) {
	var output lakeformation.RegisterResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.RegisterResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) RegisterResourceAsync(ctx workflow.Context, input *lakeformation.RegisterResourceInput) *LakeformationRegisterResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.RegisterResource", input)
	return &LakeformationRegisterResourceFuture{Future: future}
}

func (a *LakeFormationStub) RevokePermissions(ctx workflow.Context, input *lakeformation.RevokePermissionsInput) (*lakeformation.RevokePermissionsOutput, error) {
	var output lakeformation.RevokePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.RevokePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) RevokePermissionsAsync(ctx workflow.Context, input *lakeformation.RevokePermissionsInput) *LakeformationRevokePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.RevokePermissions", input)
	return &LakeformationRevokePermissionsFuture{Future: future}
}

func (a *LakeFormationStub) UpdateResource(ctx workflow.Context, input *lakeformation.UpdateResourceInput) (*lakeformation.UpdateResourceOutput, error) {
	var output lakeformation.UpdateResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.UpdateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) UpdateResourceAsync(ctx workflow.Context, input *lakeformation.UpdateResourceInput) *LakeformationUpdateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.UpdateResource", input)
	return &LakeformationUpdateResourceFuture{Future: future}
}
