// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/lakeformation"
	"go.temporal.io/sdk/workflow"
)

type LakeFormationClient interface {
	BatchGrantPermissions(ctx workflow.Context, input *lakeformation.BatchGrantPermissionsInput) (*lakeformation.BatchGrantPermissionsOutput, error)
	BatchGrantPermissionsAsync(ctx workflow.Context, input *lakeformation.BatchGrantPermissionsInput) *LakeFormationBatchGrantPermissionsFuture

	BatchRevokePermissions(ctx workflow.Context, input *lakeformation.BatchRevokePermissionsInput) (*lakeformation.BatchRevokePermissionsOutput, error)
	BatchRevokePermissionsAsync(ctx workflow.Context, input *lakeformation.BatchRevokePermissionsInput) *LakeFormationBatchRevokePermissionsFuture

	DeregisterResource(ctx workflow.Context, input *lakeformation.DeregisterResourceInput) (*lakeformation.DeregisterResourceOutput, error)
	DeregisterResourceAsync(ctx workflow.Context, input *lakeformation.DeregisterResourceInput) *LakeFormationDeregisterResourceFuture

	DescribeResource(ctx workflow.Context, input *lakeformation.DescribeResourceInput) (*lakeformation.DescribeResourceOutput, error)
	DescribeResourceAsync(ctx workflow.Context, input *lakeformation.DescribeResourceInput) *LakeFormationDescribeResourceFuture

	GetDataLakeSettings(ctx workflow.Context, input *lakeformation.GetDataLakeSettingsInput) (*lakeformation.GetDataLakeSettingsOutput, error)
	GetDataLakeSettingsAsync(ctx workflow.Context, input *lakeformation.GetDataLakeSettingsInput) *LakeFormationGetDataLakeSettingsFuture

	GetEffectivePermissionsForPath(ctx workflow.Context, input *lakeformation.GetEffectivePermissionsForPathInput) (*lakeformation.GetEffectivePermissionsForPathOutput, error)
	GetEffectivePermissionsForPathAsync(ctx workflow.Context, input *lakeformation.GetEffectivePermissionsForPathInput) *LakeFormationGetEffectivePermissionsForPathFuture

	GrantPermissions(ctx workflow.Context, input *lakeformation.GrantPermissionsInput) (*lakeformation.GrantPermissionsOutput, error)
	GrantPermissionsAsync(ctx workflow.Context, input *lakeformation.GrantPermissionsInput) *LakeFormationGrantPermissionsFuture

	ListPermissions(ctx workflow.Context, input *lakeformation.ListPermissionsInput) (*lakeformation.ListPermissionsOutput, error)
	ListPermissionsAsync(ctx workflow.Context, input *lakeformation.ListPermissionsInput) *LakeFormationListPermissionsFuture

	ListResources(ctx workflow.Context, input *lakeformation.ListResourcesInput) (*lakeformation.ListResourcesOutput, error)
	ListResourcesAsync(ctx workflow.Context, input *lakeformation.ListResourcesInput) *LakeFormationListResourcesFuture

	PutDataLakeSettings(ctx workflow.Context, input *lakeformation.PutDataLakeSettingsInput) (*lakeformation.PutDataLakeSettingsOutput, error)
	PutDataLakeSettingsAsync(ctx workflow.Context, input *lakeformation.PutDataLakeSettingsInput) *LakeFormationPutDataLakeSettingsFuture

	RegisterResource(ctx workflow.Context, input *lakeformation.RegisterResourceInput) (*lakeformation.RegisterResourceOutput, error)
	RegisterResourceAsync(ctx workflow.Context, input *lakeformation.RegisterResourceInput) *LakeFormationRegisterResourceFuture

	RevokePermissions(ctx workflow.Context, input *lakeformation.RevokePermissionsInput) (*lakeformation.RevokePermissionsOutput, error)
	RevokePermissionsAsync(ctx workflow.Context, input *lakeformation.RevokePermissionsInput) *LakeFormationRevokePermissionsFuture

	UpdateResource(ctx workflow.Context, input *lakeformation.UpdateResourceInput) (*lakeformation.UpdateResourceOutput, error)
	UpdateResourceAsync(ctx workflow.Context, input *lakeformation.UpdateResourceInput) *LakeFormationUpdateResourceFuture
}

type LakeFormationStub struct{}

func NewLakeFormationStub() LakeFormationClient {
	return &LakeFormationStub{}
}

type LakeFormationBatchGrantPermissionsFuture struct {
	Future workflow.Future
}

func (r *LakeFormationBatchGrantPermissionsFuture) Get(ctx workflow.Context) (*lakeformation.BatchGrantPermissionsOutput, error) {
	var output lakeformation.BatchGrantPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeFormationBatchRevokePermissionsFuture struct {
	Future workflow.Future
}

func (r *LakeFormationBatchRevokePermissionsFuture) Get(ctx workflow.Context) (*lakeformation.BatchRevokePermissionsOutput, error) {
	var output lakeformation.BatchRevokePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeFormationDeregisterResourceFuture struct {
	Future workflow.Future
}

func (r *LakeFormationDeregisterResourceFuture) Get(ctx workflow.Context) (*lakeformation.DeregisterResourceOutput, error) {
	var output lakeformation.DeregisterResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeFormationDescribeResourceFuture struct {
	Future workflow.Future
}

func (r *LakeFormationDescribeResourceFuture) Get(ctx workflow.Context) (*lakeformation.DescribeResourceOutput, error) {
	var output lakeformation.DescribeResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeFormationGetDataLakeSettingsFuture struct {
	Future workflow.Future
}

func (r *LakeFormationGetDataLakeSettingsFuture) Get(ctx workflow.Context) (*lakeformation.GetDataLakeSettingsOutput, error) {
	var output lakeformation.GetDataLakeSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeFormationGetEffectivePermissionsForPathFuture struct {
	Future workflow.Future
}

func (r *LakeFormationGetEffectivePermissionsForPathFuture) Get(ctx workflow.Context) (*lakeformation.GetEffectivePermissionsForPathOutput, error) {
	var output lakeformation.GetEffectivePermissionsForPathOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeFormationGrantPermissionsFuture struct {
	Future workflow.Future
}

func (r *LakeFormationGrantPermissionsFuture) Get(ctx workflow.Context) (*lakeformation.GrantPermissionsOutput, error) {
	var output lakeformation.GrantPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeFormationListPermissionsFuture struct {
	Future workflow.Future
}

func (r *LakeFormationListPermissionsFuture) Get(ctx workflow.Context) (*lakeformation.ListPermissionsOutput, error) {
	var output lakeformation.ListPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeFormationListResourcesFuture struct {
	Future workflow.Future
}

func (r *LakeFormationListResourcesFuture) Get(ctx workflow.Context) (*lakeformation.ListResourcesOutput, error) {
	var output lakeformation.ListResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeFormationPutDataLakeSettingsFuture struct {
	Future workflow.Future
}

func (r *LakeFormationPutDataLakeSettingsFuture) Get(ctx workflow.Context) (*lakeformation.PutDataLakeSettingsOutput, error) {
	var output lakeformation.PutDataLakeSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeFormationRegisterResourceFuture struct {
	Future workflow.Future
}

func (r *LakeFormationRegisterResourceFuture) Get(ctx workflow.Context) (*lakeformation.RegisterResourceOutput, error) {
	var output lakeformation.RegisterResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeFormationRevokePermissionsFuture struct {
	Future workflow.Future
}

func (r *LakeFormationRevokePermissionsFuture) Get(ctx workflow.Context) (*lakeformation.RevokePermissionsOutput, error) {
	var output lakeformation.RevokePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LakeFormationUpdateResourceFuture struct {
	Future workflow.Future
}

func (r *LakeFormationUpdateResourceFuture) Get(ctx workflow.Context) (*lakeformation.UpdateResourceOutput, error) {
	var output lakeformation.UpdateResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) BatchGrantPermissions(ctx workflow.Context, input *lakeformation.BatchGrantPermissionsInput) (*lakeformation.BatchGrantPermissionsOutput, error) {
	var output lakeformation.BatchGrantPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.BatchGrantPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) BatchGrantPermissionsAsync(ctx workflow.Context, input *lakeformation.BatchGrantPermissionsInput) *LakeFormationBatchGrantPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.BatchGrantPermissions", input)
	return &LakeFormationBatchGrantPermissionsFuture{Future: future}
}

func (a *LakeFormationStub) BatchRevokePermissions(ctx workflow.Context, input *lakeformation.BatchRevokePermissionsInput) (*lakeformation.BatchRevokePermissionsOutput, error) {
	var output lakeformation.BatchRevokePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.BatchRevokePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) BatchRevokePermissionsAsync(ctx workflow.Context, input *lakeformation.BatchRevokePermissionsInput) *LakeFormationBatchRevokePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.BatchRevokePermissions", input)
	return &LakeFormationBatchRevokePermissionsFuture{Future: future}
}

func (a *LakeFormationStub) DeregisterResource(ctx workflow.Context, input *lakeformation.DeregisterResourceInput) (*lakeformation.DeregisterResourceOutput, error) {
	var output lakeformation.DeregisterResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.DeregisterResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) DeregisterResourceAsync(ctx workflow.Context, input *lakeformation.DeregisterResourceInput) *LakeFormationDeregisterResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.DeregisterResource", input)
	return &LakeFormationDeregisterResourceFuture{Future: future}
}

func (a *LakeFormationStub) DescribeResource(ctx workflow.Context, input *lakeformation.DescribeResourceInput) (*lakeformation.DescribeResourceOutput, error) {
	var output lakeformation.DescribeResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.DescribeResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) DescribeResourceAsync(ctx workflow.Context, input *lakeformation.DescribeResourceInput) *LakeFormationDescribeResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.DescribeResource", input)
	return &LakeFormationDescribeResourceFuture{Future: future}
}

func (a *LakeFormationStub) GetDataLakeSettings(ctx workflow.Context, input *lakeformation.GetDataLakeSettingsInput) (*lakeformation.GetDataLakeSettingsOutput, error) {
	var output lakeformation.GetDataLakeSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.GetDataLakeSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) GetDataLakeSettingsAsync(ctx workflow.Context, input *lakeformation.GetDataLakeSettingsInput) *LakeFormationGetDataLakeSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.GetDataLakeSettings", input)
	return &LakeFormationGetDataLakeSettingsFuture{Future: future}
}

func (a *LakeFormationStub) GetEffectivePermissionsForPath(ctx workflow.Context, input *lakeformation.GetEffectivePermissionsForPathInput) (*lakeformation.GetEffectivePermissionsForPathOutput, error) {
	var output lakeformation.GetEffectivePermissionsForPathOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.GetEffectivePermissionsForPath", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) GetEffectivePermissionsForPathAsync(ctx workflow.Context, input *lakeformation.GetEffectivePermissionsForPathInput) *LakeFormationGetEffectivePermissionsForPathFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.GetEffectivePermissionsForPath", input)
	return &LakeFormationGetEffectivePermissionsForPathFuture{Future: future}
}

func (a *LakeFormationStub) GrantPermissions(ctx workflow.Context, input *lakeformation.GrantPermissionsInput) (*lakeformation.GrantPermissionsOutput, error) {
	var output lakeformation.GrantPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.GrantPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) GrantPermissionsAsync(ctx workflow.Context, input *lakeformation.GrantPermissionsInput) *LakeFormationGrantPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.GrantPermissions", input)
	return &LakeFormationGrantPermissionsFuture{Future: future}
}

func (a *LakeFormationStub) ListPermissions(ctx workflow.Context, input *lakeformation.ListPermissionsInput) (*lakeformation.ListPermissionsOutput, error) {
	var output lakeformation.ListPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.ListPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) ListPermissionsAsync(ctx workflow.Context, input *lakeformation.ListPermissionsInput) *LakeFormationListPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.ListPermissions", input)
	return &LakeFormationListPermissionsFuture{Future: future}
}

func (a *LakeFormationStub) ListResources(ctx workflow.Context, input *lakeformation.ListResourcesInput) (*lakeformation.ListResourcesOutput, error) {
	var output lakeformation.ListResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.ListResources", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) ListResourcesAsync(ctx workflow.Context, input *lakeformation.ListResourcesInput) *LakeFormationListResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.ListResources", input)
	return &LakeFormationListResourcesFuture{Future: future}
}

func (a *LakeFormationStub) PutDataLakeSettings(ctx workflow.Context, input *lakeformation.PutDataLakeSettingsInput) (*lakeformation.PutDataLakeSettingsOutput, error) {
	var output lakeformation.PutDataLakeSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.PutDataLakeSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) PutDataLakeSettingsAsync(ctx workflow.Context, input *lakeformation.PutDataLakeSettingsInput) *LakeFormationPutDataLakeSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.PutDataLakeSettings", input)
	return &LakeFormationPutDataLakeSettingsFuture{Future: future}
}

func (a *LakeFormationStub) RegisterResource(ctx workflow.Context, input *lakeformation.RegisterResourceInput) (*lakeformation.RegisterResourceOutput, error) {
	var output lakeformation.RegisterResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.RegisterResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) RegisterResourceAsync(ctx workflow.Context, input *lakeformation.RegisterResourceInput) *LakeFormationRegisterResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.RegisterResource", input)
	return &LakeFormationRegisterResourceFuture{Future: future}
}

func (a *LakeFormationStub) RevokePermissions(ctx workflow.Context, input *lakeformation.RevokePermissionsInput) (*lakeformation.RevokePermissionsOutput, error) {
	var output lakeformation.RevokePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.RevokePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) RevokePermissionsAsync(ctx workflow.Context, input *lakeformation.RevokePermissionsInput) *LakeFormationRevokePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.RevokePermissions", input)
	return &LakeFormationRevokePermissionsFuture{Future: future}
}

func (a *LakeFormationStub) UpdateResource(ctx workflow.Context, input *lakeformation.UpdateResourceInput) (*lakeformation.UpdateResourceOutput, error) {
	var output lakeformation.UpdateResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lakeformation.UpdateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LakeFormationStub) UpdateResourceAsync(ctx workflow.Context, input *lakeformation.UpdateResourceInput) *LakeFormationUpdateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lakeformation.UpdateResource", input)
	return &LakeFormationUpdateResourceFuture{Future: future}
}
