// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/acm"
	"go.temporal.io/sdk/workflow"
)

type ACMClient interface {
	AddTagsToCertificate(ctx workflow.Context, input *acm.AddTagsToCertificateInput) (*acm.AddTagsToCertificateOutput, error)
	AddTagsToCertificateAsync(ctx workflow.Context, input *acm.AddTagsToCertificateInput) *AcmAddTagsToCertificateFuture

	DeleteCertificate(ctx workflow.Context, input *acm.DeleteCertificateInput) (*acm.DeleteCertificateOutput, error)
	DeleteCertificateAsync(ctx workflow.Context, input *acm.DeleteCertificateInput) *AcmDeleteCertificateFuture

	DescribeCertificate(ctx workflow.Context, input *acm.DescribeCertificateInput) (*acm.DescribeCertificateOutput, error)
	DescribeCertificateAsync(ctx workflow.Context, input *acm.DescribeCertificateInput) *AcmDescribeCertificateFuture

	ExportCertificate(ctx workflow.Context, input *acm.ExportCertificateInput) (*acm.ExportCertificateOutput, error)
	ExportCertificateAsync(ctx workflow.Context, input *acm.ExportCertificateInput) *AcmExportCertificateFuture

	GetCertificate(ctx workflow.Context, input *acm.GetCertificateInput) (*acm.GetCertificateOutput, error)
	GetCertificateAsync(ctx workflow.Context, input *acm.GetCertificateInput) *AcmGetCertificateFuture

	ImportCertificate(ctx workflow.Context, input *acm.ImportCertificateInput) (*acm.ImportCertificateOutput, error)
	ImportCertificateAsync(ctx workflow.Context, input *acm.ImportCertificateInput) *AcmImportCertificateFuture

	ListCertificates(ctx workflow.Context, input *acm.ListCertificatesInput) (*acm.ListCertificatesOutput, error)
	ListCertificatesAsync(ctx workflow.Context, input *acm.ListCertificatesInput) *AcmListCertificatesFuture

	ListTagsForCertificate(ctx workflow.Context, input *acm.ListTagsForCertificateInput) (*acm.ListTagsForCertificateOutput, error)
	ListTagsForCertificateAsync(ctx workflow.Context, input *acm.ListTagsForCertificateInput) *AcmListTagsForCertificateFuture

	RemoveTagsFromCertificate(ctx workflow.Context, input *acm.RemoveTagsFromCertificateInput) (*acm.RemoveTagsFromCertificateOutput, error)
	RemoveTagsFromCertificateAsync(ctx workflow.Context, input *acm.RemoveTagsFromCertificateInput) *AcmRemoveTagsFromCertificateFuture

	RenewCertificate(ctx workflow.Context, input *acm.RenewCertificateInput) (*acm.RenewCertificateOutput, error)
	RenewCertificateAsync(ctx workflow.Context, input *acm.RenewCertificateInput) *AcmRenewCertificateFuture

	RequestCertificate(ctx workflow.Context, input *acm.RequestCertificateInput) (*acm.RequestCertificateOutput, error)
	RequestCertificateAsync(ctx workflow.Context, input *acm.RequestCertificateInput) *AcmRequestCertificateFuture

	ResendValidationEmail(ctx workflow.Context, input *acm.ResendValidationEmailInput) (*acm.ResendValidationEmailOutput, error)
	ResendValidationEmailAsync(ctx workflow.Context, input *acm.ResendValidationEmailInput) *AcmResendValidationEmailFuture

	UpdateCertificateOptions(ctx workflow.Context, input *acm.UpdateCertificateOptionsInput) (*acm.UpdateCertificateOptionsOutput, error)
	UpdateCertificateOptionsAsync(ctx workflow.Context, input *acm.UpdateCertificateOptionsInput) *AcmUpdateCertificateOptionsFuture

	WaitUntilCertificateValidated(ctx workflow.Context, input *acm.DescribeCertificateInput) error
	WaitUntilCertificateValidatedAsync(ctx workflow.Context, input *acm.DescribeCertificateInput) workflow.Future
}

type ACMStub struct{}

func NewACMStub() ACMClient {
	return &ACMStub{}
}

type AcmAddTagsToCertificateFuture struct {
	Future workflow.Future
}

func (r *AcmAddTagsToCertificateFuture) Get(ctx workflow.Context) (*acm.AddTagsToCertificateOutput, error) {
	var output acm.AddTagsToCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcmDeleteCertificateFuture struct {
	Future workflow.Future
}

func (r *AcmDeleteCertificateFuture) Get(ctx workflow.Context) (*acm.DeleteCertificateOutput, error) {
	var output acm.DeleteCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcmDescribeCertificateFuture struct {
	Future workflow.Future
}

func (r *AcmDescribeCertificateFuture) Get(ctx workflow.Context) (*acm.DescribeCertificateOutput, error) {
	var output acm.DescribeCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcmExportCertificateFuture struct {
	Future workflow.Future
}

func (r *AcmExportCertificateFuture) Get(ctx workflow.Context) (*acm.ExportCertificateOutput, error) {
	var output acm.ExportCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcmGetCertificateFuture struct {
	Future workflow.Future
}

func (r *AcmGetCertificateFuture) Get(ctx workflow.Context) (*acm.GetCertificateOutput, error) {
	var output acm.GetCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcmImportCertificateFuture struct {
	Future workflow.Future
}

func (r *AcmImportCertificateFuture) Get(ctx workflow.Context) (*acm.ImportCertificateOutput, error) {
	var output acm.ImportCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcmListCertificatesFuture struct {
	Future workflow.Future
}

func (r *AcmListCertificatesFuture) Get(ctx workflow.Context) (*acm.ListCertificatesOutput, error) {
	var output acm.ListCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcmListTagsForCertificateFuture struct {
	Future workflow.Future
}

func (r *AcmListTagsForCertificateFuture) Get(ctx workflow.Context) (*acm.ListTagsForCertificateOutput, error) {
	var output acm.ListTagsForCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcmRemoveTagsFromCertificateFuture struct {
	Future workflow.Future
}

func (r *AcmRemoveTagsFromCertificateFuture) Get(ctx workflow.Context) (*acm.RemoveTagsFromCertificateOutput, error) {
	var output acm.RemoveTagsFromCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcmRenewCertificateFuture struct {
	Future workflow.Future
}

func (r *AcmRenewCertificateFuture) Get(ctx workflow.Context) (*acm.RenewCertificateOutput, error) {
	var output acm.RenewCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcmRequestCertificateFuture struct {
	Future workflow.Future
}

func (r *AcmRequestCertificateFuture) Get(ctx workflow.Context) (*acm.RequestCertificateOutput, error) {
	var output acm.RequestCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcmResendValidationEmailFuture struct {
	Future workflow.Future
}

func (r *AcmResendValidationEmailFuture) Get(ctx workflow.Context) (*acm.ResendValidationEmailOutput, error) {
	var output acm.ResendValidationEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcmUpdateCertificateOptionsFuture struct {
	Future workflow.Future
}

func (r *AcmUpdateCertificateOptionsFuture) Get(ctx workflow.Context) (*acm.UpdateCertificateOptionsOutput, error) {
	var output acm.UpdateCertificateOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) AddTagsToCertificate(ctx workflow.Context, input *acm.AddTagsToCertificateInput) (*acm.AddTagsToCertificateOutput, error) {
	var output acm.AddTagsToCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.AddTagsToCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) AddTagsToCertificateAsync(ctx workflow.Context, input *acm.AddTagsToCertificateInput) *AcmAddTagsToCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.AddTagsToCertificate", input)
	return &AcmAddTagsToCertificateFuture{Future: future}
}

func (a *ACMStub) DeleteCertificate(ctx workflow.Context, input *acm.DeleteCertificateInput) (*acm.DeleteCertificateOutput, error) {
	var output acm.DeleteCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.DeleteCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) DeleteCertificateAsync(ctx workflow.Context, input *acm.DeleteCertificateInput) *AcmDeleteCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.DeleteCertificate", input)
	return &AcmDeleteCertificateFuture{Future: future}
}

func (a *ACMStub) DescribeCertificate(ctx workflow.Context, input *acm.DescribeCertificateInput) (*acm.DescribeCertificateOutput, error) {
	var output acm.DescribeCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.DescribeCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) DescribeCertificateAsync(ctx workflow.Context, input *acm.DescribeCertificateInput) *AcmDescribeCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.DescribeCertificate", input)
	return &AcmDescribeCertificateFuture{Future: future}
}

func (a *ACMStub) ExportCertificate(ctx workflow.Context, input *acm.ExportCertificateInput) (*acm.ExportCertificateOutput, error) {
	var output acm.ExportCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.ExportCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) ExportCertificateAsync(ctx workflow.Context, input *acm.ExportCertificateInput) *AcmExportCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.ExportCertificate", input)
	return &AcmExportCertificateFuture{Future: future}
}

func (a *ACMStub) GetCertificate(ctx workflow.Context, input *acm.GetCertificateInput) (*acm.GetCertificateOutput, error) {
	var output acm.GetCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.GetCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) GetCertificateAsync(ctx workflow.Context, input *acm.GetCertificateInput) *AcmGetCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.GetCertificate", input)
	return &AcmGetCertificateFuture{Future: future}
}

func (a *ACMStub) ImportCertificate(ctx workflow.Context, input *acm.ImportCertificateInput) (*acm.ImportCertificateOutput, error) {
	var output acm.ImportCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.ImportCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) ImportCertificateAsync(ctx workflow.Context, input *acm.ImportCertificateInput) *AcmImportCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.ImportCertificate", input)
	return &AcmImportCertificateFuture{Future: future}
}

func (a *ACMStub) ListCertificates(ctx workflow.Context, input *acm.ListCertificatesInput) (*acm.ListCertificatesOutput, error) {
	var output acm.ListCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.ListCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) ListCertificatesAsync(ctx workflow.Context, input *acm.ListCertificatesInput) *AcmListCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.ListCertificates", input)
	return &AcmListCertificatesFuture{Future: future}
}

func (a *ACMStub) ListTagsForCertificate(ctx workflow.Context, input *acm.ListTagsForCertificateInput) (*acm.ListTagsForCertificateOutput, error) {
	var output acm.ListTagsForCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.ListTagsForCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) ListTagsForCertificateAsync(ctx workflow.Context, input *acm.ListTagsForCertificateInput) *AcmListTagsForCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.ListTagsForCertificate", input)
	return &AcmListTagsForCertificateFuture{Future: future}
}

func (a *ACMStub) RemoveTagsFromCertificate(ctx workflow.Context, input *acm.RemoveTagsFromCertificateInput) (*acm.RemoveTagsFromCertificateOutput, error) {
	var output acm.RemoveTagsFromCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.RemoveTagsFromCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) RemoveTagsFromCertificateAsync(ctx workflow.Context, input *acm.RemoveTagsFromCertificateInput) *AcmRemoveTagsFromCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.RemoveTagsFromCertificate", input)
	return &AcmRemoveTagsFromCertificateFuture{Future: future}
}

func (a *ACMStub) RenewCertificate(ctx workflow.Context, input *acm.RenewCertificateInput) (*acm.RenewCertificateOutput, error) {
	var output acm.RenewCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.RenewCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) RenewCertificateAsync(ctx workflow.Context, input *acm.RenewCertificateInput) *AcmRenewCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.RenewCertificate", input)
	return &AcmRenewCertificateFuture{Future: future}
}

func (a *ACMStub) RequestCertificate(ctx workflow.Context, input *acm.RequestCertificateInput) (*acm.RequestCertificateOutput, error) {
	var output acm.RequestCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.RequestCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) RequestCertificateAsync(ctx workflow.Context, input *acm.RequestCertificateInput) *AcmRequestCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.RequestCertificate", input)
	return &AcmRequestCertificateFuture{Future: future}
}

func (a *ACMStub) ResendValidationEmail(ctx workflow.Context, input *acm.ResendValidationEmailInput) (*acm.ResendValidationEmailOutput, error) {
	var output acm.ResendValidationEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.ResendValidationEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) ResendValidationEmailAsync(ctx workflow.Context, input *acm.ResendValidationEmailInput) *AcmResendValidationEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.ResendValidationEmail", input)
	return &AcmResendValidationEmailFuture{Future: future}
}

func (a *ACMStub) UpdateCertificateOptions(ctx workflow.Context, input *acm.UpdateCertificateOptionsInput) (*acm.UpdateCertificateOptionsOutput, error) {
	var output acm.UpdateCertificateOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.acm.UpdateCertificateOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *ACMStub) UpdateCertificateOptionsAsync(ctx workflow.Context, input *acm.UpdateCertificateOptionsInput) *AcmUpdateCertificateOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.acm.UpdateCertificateOptions", input)
	return &AcmUpdateCertificateOptionsFuture{Future: future}
}

func (a *ACMStub) WaitUntilCertificateValidated(ctx workflow.Context, input *acm.DescribeCertificateInput) error {
	return workflow.ExecuteActivity(ctx, "aws.acm.WaitUntilCertificateValidated", input).Get(ctx, nil)
}

func (a *ACMStub) WaitUntilCertificateValidatedAsync(ctx workflow.Context, input *acm.DescribeCertificateInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.acm.WaitUntilCertificateValidated", input)
}
