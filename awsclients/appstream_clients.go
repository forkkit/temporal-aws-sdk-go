// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/appstream"
	"go.temporal.io/sdk/workflow"
)

type AppStreamClient interface {
	AssociateFleet(ctx workflow.Context, input *appstream.AssociateFleetInput) (*appstream.AssociateFleetOutput, error)
	AssociateFleetAsync(ctx workflow.Context, input *appstream.AssociateFleetInput) *AppStreamAssociateFleetFuture

	BatchAssociateUserStack(ctx workflow.Context, input *appstream.BatchAssociateUserStackInput) (*appstream.BatchAssociateUserStackOutput, error)
	BatchAssociateUserStackAsync(ctx workflow.Context, input *appstream.BatchAssociateUserStackInput) *AppStreamBatchAssociateUserStackFuture

	BatchDisassociateUserStack(ctx workflow.Context, input *appstream.BatchDisassociateUserStackInput) (*appstream.BatchDisassociateUserStackOutput, error)
	BatchDisassociateUserStackAsync(ctx workflow.Context, input *appstream.BatchDisassociateUserStackInput) *AppStreamBatchDisassociateUserStackFuture

	CopyImage(ctx workflow.Context, input *appstream.CopyImageInput) (*appstream.CopyImageOutput, error)
	CopyImageAsync(ctx workflow.Context, input *appstream.CopyImageInput) *AppStreamCopyImageFuture

	CreateDirectoryConfig(ctx workflow.Context, input *appstream.CreateDirectoryConfigInput) (*appstream.CreateDirectoryConfigOutput, error)
	CreateDirectoryConfigAsync(ctx workflow.Context, input *appstream.CreateDirectoryConfigInput) *AppStreamCreateDirectoryConfigFuture

	CreateFleet(ctx workflow.Context, input *appstream.CreateFleetInput) (*appstream.CreateFleetOutput, error)
	CreateFleetAsync(ctx workflow.Context, input *appstream.CreateFleetInput) *AppStreamCreateFleetFuture

	CreateImageBuilder(ctx workflow.Context, input *appstream.CreateImageBuilderInput) (*appstream.CreateImageBuilderOutput, error)
	CreateImageBuilderAsync(ctx workflow.Context, input *appstream.CreateImageBuilderInput) *AppStreamCreateImageBuilderFuture

	CreateImageBuilderStreamingURL(ctx workflow.Context, input *appstream.CreateImageBuilderStreamingURLInput) (*appstream.CreateImageBuilderStreamingURLOutput, error)
	CreateImageBuilderStreamingURLAsync(ctx workflow.Context, input *appstream.CreateImageBuilderStreamingURLInput) *AppStreamCreateImageBuilderStreamingURLFuture

	CreateStack(ctx workflow.Context, input *appstream.CreateStackInput) (*appstream.CreateStackOutput, error)
	CreateStackAsync(ctx workflow.Context, input *appstream.CreateStackInput) *AppStreamCreateStackFuture

	CreateStreamingURL(ctx workflow.Context, input *appstream.CreateStreamingURLInput) (*appstream.CreateStreamingURLOutput, error)
	CreateStreamingURLAsync(ctx workflow.Context, input *appstream.CreateStreamingURLInput) *AppStreamCreateStreamingURLFuture

	CreateUsageReportSubscription(ctx workflow.Context, input *appstream.CreateUsageReportSubscriptionInput) (*appstream.CreateUsageReportSubscriptionOutput, error)
	CreateUsageReportSubscriptionAsync(ctx workflow.Context, input *appstream.CreateUsageReportSubscriptionInput) *AppStreamCreateUsageReportSubscriptionFuture

	CreateUser(ctx workflow.Context, input *appstream.CreateUserInput) (*appstream.CreateUserOutput, error)
	CreateUserAsync(ctx workflow.Context, input *appstream.CreateUserInput) *AppStreamCreateUserFuture

	DeleteDirectoryConfig(ctx workflow.Context, input *appstream.DeleteDirectoryConfigInput) (*appstream.DeleteDirectoryConfigOutput, error)
	DeleteDirectoryConfigAsync(ctx workflow.Context, input *appstream.DeleteDirectoryConfigInput) *AppStreamDeleteDirectoryConfigFuture

	DeleteFleet(ctx workflow.Context, input *appstream.DeleteFleetInput) (*appstream.DeleteFleetOutput, error)
	DeleteFleetAsync(ctx workflow.Context, input *appstream.DeleteFleetInput) *AppStreamDeleteFleetFuture

	DeleteImage(ctx workflow.Context, input *appstream.DeleteImageInput) (*appstream.DeleteImageOutput, error)
	DeleteImageAsync(ctx workflow.Context, input *appstream.DeleteImageInput) *AppStreamDeleteImageFuture

	DeleteImageBuilder(ctx workflow.Context, input *appstream.DeleteImageBuilderInput) (*appstream.DeleteImageBuilderOutput, error)
	DeleteImageBuilderAsync(ctx workflow.Context, input *appstream.DeleteImageBuilderInput) *AppStreamDeleteImageBuilderFuture

	DeleteImagePermissions(ctx workflow.Context, input *appstream.DeleteImagePermissionsInput) (*appstream.DeleteImagePermissionsOutput, error)
	DeleteImagePermissionsAsync(ctx workflow.Context, input *appstream.DeleteImagePermissionsInput) *AppStreamDeleteImagePermissionsFuture

	DeleteStack(ctx workflow.Context, input *appstream.DeleteStackInput) (*appstream.DeleteStackOutput, error)
	DeleteStackAsync(ctx workflow.Context, input *appstream.DeleteStackInput) *AppStreamDeleteStackFuture

	DeleteUsageReportSubscription(ctx workflow.Context, input *appstream.DeleteUsageReportSubscriptionInput) (*appstream.DeleteUsageReportSubscriptionOutput, error)
	DeleteUsageReportSubscriptionAsync(ctx workflow.Context, input *appstream.DeleteUsageReportSubscriptionInput) *AppStreamDeleteUsageReportSubscriptionFuture

	DeleteUser(ctx workflow.Context, input *appstream.DeleteUserInput) (*appstream.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *appstream.DeleteUserInput) *AppStreamDeleteUserFuture

	DescribeDirectoryConfigs(ctx workflow.Context, input *appstream.DescribeDirectoryConfigsInput) (*appstream.DescribeDirectoryConfigsOutput, error)
	DescribeDirectoryConfigsAsync(ctx workflow.Context, input *appstream.DescribeDirectoryConfigsInput) *AppStreamDescribeDirectoryConfigsFuture

	DescribeFleets(ctx workflow.Context, input *appstream.DescribeFleetsInput) (*appstream.DescribeFleetsOutput, error)
	DescribeFleetsAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) *AppStreamDescribeFleetsFuture

	DescribeImageBuilders(ctx workflow.Context, input *appstream.DescribeImageBuildersInput) (*appstream.DescribeImageBuildersOutput, error)
	DescribeImageBuildersAsync(ctx workflow.Context, input *appstream.DescribeImageBuildersInput) *AppStreamDescribeImageBuildersFuture

	DescribeImagePermissions(ctx workflow.Context, input *appstream.DescribeImagePermissionsInput) (*appstream.DescribeImagePermissionsOutput, error)
	DescribeImagePermissionsAsync(ctx workflow.Context, input *appstream.DescribeImagePermissionsInput) *AppStreamDescribeImagePermissionsFuture

	DescribeImages(ctx workflow.Context, input *appstream.DescribeImagesInput) (*appstream.DescribeImagesOutput, error)
	DescribeImagesAsync(ctx workflow.Context, input *appstream.DescribeImagesInput) *AppStreamDescribeImagesFuture

	DescribeSessions(ctx workflow.Context, input *appstream.DescribeSessionsInput) (*appstream.DescribeSessionsOutput, error)
	DescribeSessionsAsync(ctx workflow.Context, input *appstream.DescribeSessionsInput) *AppStreamDescribeSessionsFuture

	DescribeStacks(ctx workflow.Context, input *appstream.DescribeStacksInput) (*appstream.DescribeStacksOutput, error)
	DescribeStacksAsync(ctx workflow.Context, input *appstream.DescribeStacksInput) *AppStreamDescribeStacksFuture

	DescribeUsageReportSubscriptions(ctx workflow.Context, input *appstream.DescribeUsageReportSubscriptionsInput) (*appstream.DescribeUsageReportSubscriptionsOutput, error)
	DescribeUsageReportSubscriptionsAsync(ctx workflow.Context, input *appstream.DescribeUsageReportSubscriptionsInput) *AppStreamDescribeUsageReportSubscriptionsFuture

	DescribeUserStackAssociations(ctx workflow.Context, input *appstream.DescribeUserStackAssociationsInput) (*appstream.DescribeUserStackAssociationsOutput, error)
	DescribeUserStackAssociationsAsync(ctx workflow.Context, input *appstream.DescribeUserStackAssociationsInput) *AppStreamDescribeUserStackAssociationsFuture

	DescribeUsers(ctx workflow.Context, input *appstream.DescribeUsersInput) (*appstream.DescribeUsersOutput, error)
	DescribeUsersAsync(ctx workflow.Context, input *appstream.DescribeUsersInput) *AppStreamDescribeUsersFuture

	DisableUser(ctx workflow.Context, input *appstream.DisableUserInput) (*appstream.DisableUserOutput, error)
	DisableUserAsync(ctx workflow.Context, input *appstream.DisableUserInput) *AppStreamDisableUserFuture

	DisassociateFleet(ctx workflow.Context, input *appstream.DisassociateFleetInput) (*appstream.DisassociateFleetOutput, error)
	DisassociateFleetAsync(ctx workflow.Context, input *appstream.DisassociateFleetInput) *AppStreamDisassociateFleetFuture

	EnableUser(ctx workflow.Context, input *appstream.EnableUserInput) (*appstream.EnableUserOutput, error)
	EnableUserAsync(ctx workflow.Context, input *appstream.EnableUserInput) *AppStreamEnableUserFuture

	ExpireSession(ctx workflow.Context, input *appstream.ExpireSessionInput) (*appstream.ExpireSessionOutput, error)
	ExpireSessionAsync(ctx workflow.Context, input *appstream.ExpireSessionInput) *AppStreamExpireSessionFuture

	ListAssociatedFleets(ctx workflow.Context, input *appstream.ListAssociatedFleetsInput) (*appstream.ListAssociatedFleetsOutput, error)
	ListAssociatedFleetsAsync(ctx workflow.Context, input *appstream.ListAssociatedFleetsInput) *AppStreamListAssociatedFleetsFuture

	ListAssociatedStacks(ctx workflow.Context, input *appstream.ListAssociatedStacksInput) (*appstream.ListAssociatedStacksOutput, error)
	ListAssociatedStacksAsync(ctx workflow.Context, input *appstream.ListAssociatedStacksInput) *AppStreamListAssociatedStacksFuture

	ListTagsForResource(ctx workflow.Context, input *appstream.ListTagsForResourceInput) (*appstream.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *appstream.ListTagsForResourceInput) *AppStreamListTagsForResourceFuture

	StartFleet(ctx workflow.Context, input *appstream.StartFleetInput) (*appstream.StartFleetOutput, error)
	StartFleetAsync(ctx workflow.Context, input *appstream.StartFleetInput) *AppStreamStartFleetFuture

	StartImageBuilder(ctx workflow.Context, input *appstream.StartImageBuilderInput) (*appstream.StartImageBuilderOutput, error)
	StartImageBuilderAsync(ctx workflow.Context, input *appstream.StartImageBuilderInput) *AppStreamStartImageBuilderFuture

	StopFleet(ctx workflow.Context, input *appstream.StopFleetInput) (*appstream.StopFleetOutput, error)
	StopFleetAsync(ctx workflow.Context, input *appstream.StopFleetInput) *AppStreamStopFleetFuture

	StopImageBuilder(ctx workflow.Context, input *appstream.StopImageBuilderInput) (*appstream.StopImageBuilderOutput, error)
	StopImageBuilderAsync(ctx workflow.Context, input *appstream.StopImageBuilderInput) *AppStreamStopImageBuilderFuture

	TagResource(ctx workflow.Context, input *appstream.TagResourceInput) (*appstream.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *appstream.TagResourceInput) *AppStreamTagResourceFuture

	UntagResource(ctx workflow.Context, input *appstream.UntagResourceInput) (*appstream.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *appstream.UntagResourceInput) *AppStreamUntagResourceFuture

	UpdateDirectoryConfig(ctx workflow.Context, input *appstream.UpdateDirectoryConfigInput) (*appstream.UpdateDirectoryConfigOutput, error)
	UpdateDirectoryConfigAsync(ctx workflow.Context, input *appstream.UpdateDirectoryConfigInput) *AppStreamUpdateDirectoryConfigFuture

	UpdateFleet(ctx workflow.Context, input *appstream.UpdateFleetInput) (*appstream.UpdateFleetOutput, error)
	UpdateFleetAsync(ctx workflow.Context, input *appstream.UpdateFleetInput) *AppStreamUpdateFleetFuture

	UpdateImagePermissions(ctx workflow.Context, input *appstream.UpdateImagePermissionsInput) (*appstream.UpdateImagePermissionsOutput, error)
	UpdateImagePermissionsAsync(ctx workflow.Context, input *appstream.UpdateImagePermissionsInput) *AppStreamUpdateImagePermissionsFuture

	UpdateStack(ctx workflow.Context, input *appstream.UpdateStackInput) (*appstream.UpdateStackOutput, error)
	UpdateStackAsync(ctx workflow.Context, input *appstream.UpdateStackInput) *AppStreamUpdateStackFuture

	WaitUntilFleetStarted(ctx workflow.Context, input *appstream.DescribeFleetsInput) error
	WaitUntilFleetStartedAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) *VoidFuture

	WaitUntilFleetStopped(ctx workflow.Context, input *appstream.DescribeFleetsInput) error
	WaitUntilFleetStoppedAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) *VoidFuture
}

type AppStreamStub struct{}

func NewAppStreamStub() AppStreamClient {
	return &AppStreamStub{}
}

type AppStreamAssociateFleetFuture struct {
	Future workflow.Future
}

func (r *AppStreamAssociateFleetFuture) Get(ctx workflow.Context) (*appstream.AssociateFleetOutput, error) {
	var output appstream.AssociateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamBatchAssociateUserStackFuture struct {
	Future workflow.Future
}

func (r *AppStreamBatchAssociateUserStackFuture) Get(ctx workflow.Context) (*appstream.BatchAssociateUserStackOutput, error) {
	var output appstream.BatchAssociateUserStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamBatchDisassociateUserStackFuture struct {
	Future workflow.Future
}

func (r *AppStreamBatchDisassociateUserStackFuture) Get(ctx workflow.Context) (*appstream.BatchDisassociateUserStackOutput, error) {
	var output appstream.BatchDisassociateUserStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamCopyImageFuture struct {
	Future workflow.Future
}

func (r *AppStreamCopyImageFuture) Get(ctx workflow.Context) (*appstream.CopyImageOutput, error) {
	var output appstream.CopyImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamCreateDirectoryConfigFuture struct {
	Future workflow.Future
}

func (r *AppStreamCreateDirectoryConfigFuture) Get(ctx workflow.Context) (*appstream.CreateDirectoryConfigOutput, error) {
	var output appstream.CreateDirectoryConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamCreateFleetFuture struct {
	Future workflow.Future
}

func (r *AppStreamCreateFleetFuture) Get(ctx workflow.Context) (*appstream.CreateFleetOutput, error) {
	var output appstream.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamCreateImageBuilderFuture struct {
	Future workflow.Future
}

func (r *AppStreamCreateImageBuilderFuture) Get(ctx workflow.Context) (*appstream.CreateImageBuilderOutput, error) {
	var output appstream.CreateImageBuilderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamCreateImageBuilderStreamingURLFuture struct {
	Future workflow.Future
}

func (r *AppStreamCreateImageBuilderStreamingURLFuture) Get(ctx workflow.Context) (*appstream.CreateImageBuilderStreamingURLOutput, error) {
	var output appstream.CreateImageBuilderStreamingURLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamCreateStackFuture struct {
	Future workflow.Future
}

func (r *AppStreamCreateStackFuture) Get(ctx workflow.Context) (*appstream.CreateStackOutput, error) {
	var output appstream.CreateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamCreateStreamingURLFuture struct {
	Future workflow.Future
}

func (r *AppStreamCreateStreamingURLFuture) Get(ctx workflow.Context) (*appstream.CreateStreamingURLOutput, error) {
	var output appstream.CreateStreamingURLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamCreateUsageReportSubscriptionFuture struct {
	Future workflow.Future
}

func (r *AppStreamCreateUsageReportSubscriptionFuture) Get(ctx workflow.Context) (*appstream.CreateUsageReportSubscriptionOutput, error) {
	var output appstream.CreateUsageReportSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamCreateUserFuture struct {
	Future workflow.Future
}

func (r *AppStreamCreateUserFuture) Get(ctx workflow.Context) (*appstream.CreateUserOutput, error) {
	var output appstream.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDeleteDirectoryConfigFuture struct {
	Future workflow.Future
}

func (r *AppStreamDeleteDirectoryConfigFuture) Get(ctx workflow.Context) (*appstream.DeleteDirectoryConfigOutput, error) {
	var output appstream.DeleteDirectoryConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDeleteFleetFuture struct {
	Future workflow.Future
}

func (r *AppStreamDeleteFleetFuture) Get(ctx workflow.Context) (*appstream.DeleteFleetOutput, error) {
	var output appstream.DeleteFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDeleteImageFuture struct {
	Future workflow.Future
}

func (r *AppStreamDeleteImageFuture) Get(ctx workflow.Context) (*appstream.DeleteImageOutput, error) {
	var output appstream.DeleteImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDeleteImageBuilderFuture struct {
	Future workflow.Future
}

func (r *AppStreamDeleteImageBuilderFuture) Get(ctx workflow.Context) (*appstream.DeleteImageBuilderOutput, error) {
	var output appstream.DeleteImageBuilderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDeleteImagePermissionsFuture struct {
	Future workflow.Future
}

func (r *AppStreamDeleteImagePermissionsFuture) Get(ctx workflow.Context) (*appstream.DeleteImagePermissionsOutput, error) {
	var output appstream.DeleteImagePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDeleteStackFuture struct {
	Future workflow.Future
}

func (r *AppStreamDeleteStackFuture) Get(ctx workflow.Context) (*appstream.DeleteStackOutput, error) {
	var output appstream.DeleteStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDeleteUsageReportSubscriptionFuture struct {
	Future workflow.Future
}

func (r *AppStreamDeleteUsageReportSubscriptionFuture) Get(ctx workflow.Context) (*appstream.DeleteUsageReportSubscriptionOutput, error) {
	var output appstream.DeleteUsageReportSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDeleteUserFuture struct {
	Future workflow.Future
}

func (r *AppStreamDeleteUserFuture) Get(ctx workflow.Context) (*appstream.DeleteUserOutput, error) {
	var output appstream.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDescribeDirectoryConfigsFuture struct {
	Future workflow.Future
}

func (r *AppStreamDescribeDirectoryConfigsFuture) Get(ctx workflow.Context) (*appstream.DescribeDirectoryConfigsOutput, error) {
	var output appstream.DescribeDirectoryConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDescribeFleetsFuture struct {
	Future workflow.Future
}

func (r *AppStreamDescribeFleetsFuture) Get(ctx workflow.Context) (*appstream.DescribeFleetsOutput, error) {
	var output appstream.DescribeFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDescribeImageBuildersFuture struct {
	Future workflow.Future
}

func (r *AppStreamDescribeImageBuildersFuture) Get(ctx workflow.Context) (*appstream.DescribeImageBuildersOutput, error) {
	var output appstream.DescribeImageBuildersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDescribeImagePermissionsFuture struct {
	Future workflow.Future
}

func (r *AppStreamDescribeImagePermissionsFuture) Get(ctx workflow.Context) (*appstream.DescribeImagePermissionsOutput, error) {
	var output appstream.DescribeImagePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDescribeImagesFuture struct {
	Future workflow.Future
}

func (r *AppStreamDescribeImagesFuture) Get(ctx workflow.Context) (*appstream.DescribeImagesOutput, error) {
	var output appstream.DescribeImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDescribeSessionsFuture struct {
	Future workflow.Future
}

func (r *AppStreamDescribeSessionsFuture) Get(ctx workflow.Context) (*appstream.DescribeSessionsOutput, error) {
	var output appstream.DescribeSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDescribeStacksFuture struct {
	Future workflow.Future
}

func (r *AppStreamDescribeStacksFuture) Get(ctx workflow.Context) (*appstream.DescribeStacksOutput, error) {
	var output appstream.DescribeStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDescribeUsageReportSubscriptionsFuture struct {
	Future workflow.Future
}

func (r *AppStreamDescribeUsageReportSubscriptionsFuture) Get(ctx workflow.Context) (*appstream.DescribeUsageReportSubscriptionsOutput, error) {
	var output appstream.DescribeUsageReportSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDescribeUserStackAssociationsFuture struct {
	Future workflow.Future
}

func (r *AppStreamDescribeUserStackAssociationsFuture) Get(ctx workflow.Context) (*appstream.DescribeUserStackAssociationsOutput, error) {
	var output appstream.DescribeUserStackAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDescribeUsersFuture struct {
	Future workflow.Future
}

func (r *AppStreamDescribeUsersFuture) Get(ctx workflow.Context) (*appstream.DescribeUsersOutput, error) {
	var output appstream.DescribeUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDisableUserFuture struct {
	Future workflow.Future
}

func (r *AppStreamDisableUserFuture) Get(ctx workflow.Context) (*appstream.DisableUserOutput, error) {
	var output appstream.DisableUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamDisassociateFleetFuture struct {
	Future workflow.Future
}

func (r *AppStreamDisassociateFleetFuture) Get(ctx workflow.Context) (*appstream.DisassociateFleetOutput, error) {
	var output appstream.DisassociateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamEnableUserFuture struct {
	Future workflow.Future
}

func (r *AppStreamEnableUserFuture) Get(ctx workflow.Context) (*appstream.EnableUserOutput, error) {
	var output appstream.EnableUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamExpireSessionFuture struct {
	Future workflow.Future
}

func (r *AppStreamExpireSessionFuture) Get(ctx workflow.Context) (*appstream.ExpireSessionOutput, error) {
	var output appstream.ExpireSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamListAssociatedFleetsFuture struct {
	Future workflow.Future
}

func (r *AppStreamListAssociatedFleetsFuture) Get(ctx workflow.Context) (*appstream.ListAssociatedFleetsOutput, error) {
	var output appstream.ListAssociatedFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamListAssociatedStacksFuture struct {
	Future workflow.Future
}

func (r *AppStreamListAssociatedStacksFuture) Get(ctx workflow.Context) (*appstream.ListAssociatedStacksOutput, error) {
	var output appstream.ListAssociatedStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *AppStreamListTagsForResourceFuture) Get(ctx workflow.Context) (*appstream.ListTagsForResourceOutput, error) {
	var output appstream.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamStartFleetFuture struct {
	Future workflow.Future
}

func (r *AppStreamStartFleetFuture) Get(ctx workflow.Context) (*appstream.StartFleetOutput, error) {
	var output appstream.StartFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamStartImageBuilderFuture struct {
	Future workflow.Future
}

func (r *AppStreamStartImageBuilderFuture) Get(ctx workflow.Context) (*appstream.StartImageBuilderOutput, error) {
	var output appstream.StartImageBuilderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamStopFleetFuture struct {
	Future workflow.Future
}

func (r *AppStreamStopFleetFuture) Get(ctx workflow.Context) (*appstream.StopFleetOutput, error) {
	var output appstream.StopFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamStopImageBuilderFuture struct {
	Future workflow.Future
}

func (r *AppStreamStopImageBuilderFuture) Get(ctx workflow.Context) (*appstream.StopImageBuilderOutput, error) {
	var output appstream.StopImageBuilderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamTagResourceFuture struct {
	Future workflow.Future
}

func (r *AppStreamTagResourceFuture) Get(ctx workflow.Context) (*appstream.TagResourceOutput, error) {
	var output appstream.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamUntagResourceFuture struct {
	Future workflow.Future
}

func (r *AppStreamUntagResourceFuture) Get(ctx workflow.Context) (*appstream.UntagResourceOutput, error) {
	var output appstream.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamUpdateDirectoryConfigFuture struct {
	Future workflow.Future
}

func (r *AppStreamUpdateDirectoryConfigFuture) Get(ctx workflow.Context) (*appstream.UpdateDirectoryConfigOutput, error) {
	var output appstream.UpdateDirectoryConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamUpdateFleetFuture struct {
	Future workflow.Future
}

func (r *AppStreamUpdateFleetFuture) Get(ctx workflow.Context) (*appstream.UpdateFleetOutput, error) {
	var output appstream.UpdateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamUpdateImagePermissionsFuture struct {
	Future workflow.Future
}

func (r *AppStreamUpdateImagePermissionsFuture) Get(ctx workflow.Context) (*appstream.UpdateImagePermissionsOutput, error) {
	var output appstream.UpdateImagePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppStreamUpdateStackFuture struct {
	Future workflow.Future
}

func (r *AppStreamUpdateStackFuture) Get(ctx workflow.Context) (*appstream.UpdateStackOutput, error) {
	var output appstream.UpdateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) AssociateFleet(ctx workflow.Context, input *appstream.AssociateFleetInput) (*appstream.AssociateFleetOutput, error) {
	var output appstream.AssociateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.AssociateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) AssociateFleetAsync(ctx workflow.Context, input *appstream.AssociateFleetInput) *AppStreamAssociateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.AssociateFleet", input)
	return &AppStreamAssociateFleetFuture{Future: future}
}

func (a *AppStreamStub) BatchAssociateUserStack(ctx workflow.Context, input *appstream.BatchAssociateUserStackInput) (*appstream.BatchAssociateUserStackOutput, error) {
	var output appstream.BatchAssociateUserStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.BatchAssociateUserStack", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) BatchAssociateUserStackAsync(ctx workflow.Context, input *appstream.BatchAssociateUserStackInput) *AppStreamBatchAssociateUserStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.BatchAssociateUserStack", input)
	return &AppStreamBatchAssociateUserStackFuture{Future: future}
}

func (a *AppStreamStub) BatchDisassociateUserStack(ctx workflow.Context, input *appstream.BatchDisassociateUserStackInput) (*appstream.BatchDisassociateUserStackOutput, error) {
	var output appstream.BatchDisassociateUserStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.BatchDisassociateUserStack", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) BatchDisassociateUserStackAsync(ctx workflow.Context, input *appstream.BatchDisassociateUserStackInput) *AppStreamBatchDisassociateUserStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.BatchDisassociateUserStack", input)
	return &AppStreamBatchDisassociateUserStackFuture{Future: future}
}

func (a *AppStreamStub) CopyImage(ctx workflow.Context, input *appstream.CopyImageInput) (*appstream.CopyImageOutput, error) {
	var output appstream.CopyImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CopyImage", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CopyImageAsync(ctx workflow.Context, input *appstream.CopyImageInput) *AppStreamCopyImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CopyImage", input)
	return &AppStreamCopyImageFuture{Future: future}
}

func (a *AppStreamStub) CreateDirectoryConfig(ctx workflow.Context, input *appstream.CreateDirectoryConfigInput) (*appstream.CreateDirectoryConfigOutput, error) {
	var output appstream.CreateDirectoryConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateDirectoryConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateDirectoryConfigAsync(ctx workflow.Context, input *appstream.CreateDirectoryConfigInput) *AppStreamCreateDirectoryConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateDirectoryConfig", input)
	return &AppStreamCreateDirectoryConfigFuture{Future: future}
}

func (a *AppStreamStub) CreateFleet(ctx workflow.Context, input *appstream.CreateFleetInput) (*appstream.CreateFleetOutput, error) {
	var output appstream.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateFleetAsync(ctx workflow.Context, input *appstream.CreateFleetInput) *AppStreamCreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateFleet", input)
	return &AppStreamCreateFleetFuture{Future: future}
}

func (a *AppStreamStub) CreateImageBuilder(ctx workflow.Context, input *appstream.CreateImageBuilderInput) (*appstream.CreateImageBuilderOutput, error) {
	var output appstream.CreateImageBuilderOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateImageBuilder", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateImageBuilderAsync(ctx workflow.Context, input *appstream.CreateImageBuilderInput) *AppStreamCreateImageBuilderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateImageBuilder", input)
	return &AppStreamCreateImageBuilderFuture{Future: future}
}

func (a *AppStreamStub) CreateImageBuilderStreamingURL(ctx workflow.Context, input *appstream.CreateImageBuilderStreamingURLInput) (*appstream.CreateImageBuilderStreamingURLOutput, error) {
	var output appstream.CreateImageBuilderStreamingURLOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateImageBuilderStreamingURL", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateImageBuilderStreamingURLAsync(ctx workflow.Context, input *appstream.CreateImageBuilderStreamingURLInput) *AppStreamCreateImageBuilderStreamingURLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateImageBuilderStreamingURL", input)
	return &AppStreamCreateImageBuilderStreamingURLFuture{Future: future}
}

func (a *AppStreamStub) CreateStack(ctx workflow.Context, input *appstream.CreateStackInput) (*appstream.CreateStackOutput, error) {
	var output appstream.CreateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateStackAsync(ctx workflow.Context, input *appstream.CreateStackInput) *AppStreamCreateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateStack", input)
	return &AppStreamCreateStackFuture{Future: future}
}

func (a *AppStreamStub) CreateStreamingURL(ctx workflow.Context, input *appstream.CreateStreamingURLInput) (*appstream.CreateStreamingURLOutput, error) {
	var output appstream.CreateStreamingURLOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateStreamingURL", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateStreamingURLAsync(ctx workflow.Context, input *appstream.CreateStreamingURLInput) *AppStreamCreateStreamingURLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateStreamingURL", input)
	return &AppStreamCreateStreamingURLFuture{Future: future}
}

func (a *AppStreamStub) CreateUsageReportSubscription(ctx workflow.Context, input *appstream.CreateUsageReportSubscriptionInput) (*appstream.CreateUsageReportSubscriptionOutput, error) {
	var output appstream.CreateUsageReportSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateUsageReportSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateUsageReportSubscriptionAsync(ctx workflow.Context, input *appstream.CreateUsageReportSubscriptionInput) *AppStreamCreateUsageReportSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateUsageReportSubscription", input)
	return &AppStreamCreateUsageReportSubscriptionFuture{Future: future}
}

func (a *AppStreamStub) CreateUser(ctx workflow.Context, input *appstream.CreateUserInput) (*appstream.CreateUserOutput, error) {
	var output appstream.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateUserAsync(ctx workflow.Context, input *appstream.CreateUserInput) *AppStreamCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateUser", input)
	return &AppStreamCreateUserFuture{Future: future}
}

func (a *AppStreamStub) DeleteDirectoryConfig(ctx workflow.Context, input *appstream.DeleteDirectoryConfigInput) (*appstream.DeleteDirectoryConfigOutput, error) {
	var output appstream.DeleteDirectoryConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteDirectoryConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteDirectoryConfigAsync(ctx workflow.Context, input *appstream.DeleteDirectoryConfigInput) *AppStreamDeleteDirectoryConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteDirectoryConfig", input)
	return &AppStreamDeleteDirectoryConfigFuture{Future: future}
}

func (a *AppStreamStub) DeleteFleet(ctx workflow.Context, input *appstream.DeleteFleetInput) (*appstream.DeleteFleetOutput, error) {
	var output appstream.DeleteFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteFleetAsync(ctx workflow.Context, input *appstream.DeleteFleetInput) *AppStreamDeleteFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteFleet", input)
	return &AppStreamDeleteFleetFuture{Future: future}
}

func (a *AppStreamStub) DeleteImage(ctx workflow.Context, input *appstream.DeleteImageInput) (*appstream.DeleteImageOutput, error) {
	var output appstream.DeleteImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteImage", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteImageAsync(ctx workflow.Context, input *appstream.DeleteImageInput) *AppStreamDeleteImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteImage", input)
	return &AppStreamDeleteImageFuture{Future: future}
}

func (a *AppStreamStub) DeleteImageBuilder(ctx workflow.Context, input *appstream.DeleteImageBuilderInput) (*appstream.DeleteImageBuilderOutput, error) {
	var output appstream.DeleteImageBuilderOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteImageBuilder", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteImageBuilderAsync(ctx workflow.Context, input *appstream.DeleteImageBuilderInput) *AppStreamDeleteImageBuilderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteImageBuilder", input)
	return &AppStreamDeleteImageBuilderFuture{Future: future}
}

func (a *AppStreamStub) DeleteImagePermissions(ctx workflow.Context, input *appstream.DeleteImagePermissionsInput) (*appstream.DeleteImagePermissionsOutput, error) {
	var output appstream.DeleteImagePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteImagePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteImagePermissionsAsync(ctx workflow.Context, input *appstream.DeleteImagePermissionsInput) *AppStreamDeleteImagePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteImagePermissions", input)
	return &AppStreamDeleteImagePermissionsFuture{Future: future}
}

func (a *AppStreamStub) DeleteStack(ctx workflow.Context, input *appstream.DeleteStackInput) (*appstream.DeleteStackOutput, error) {
	var output appstream.DeleteStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteStack", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteStackAsync(ctx workflow.Context, input *appstream.DeleteStackInput) *AppStreamDeleteStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteStack", input)
	return &AppStreamDeleteStackFuture{Future: future}
}

func (a *AppStreamStub) DeleteUsageReportSubscription(ctx workflow.Context, input *appstream.DeleteUsageReportSubscriptionInput) (*appstream.DeleteUsageReportSubscriptionOutput, error) {
	var output appstream.DeleteUsageReportSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteUsageReportSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteUsageReportSubscriptionAsync(ctx workflow.Context, input *appstream.DeleteUsageReportSubscriptionInput) *AppStreamDeleteUsageReportSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteUsageReportSubscription", input)
	return &AppStreamDeleteUsageReportSubscriptionFuture{Future: future}
}

func (a *AppStreamStub) DeleteUser(ctx workflow.Context, input *appstream.DeleteUserInput) (*appstream.DeleteUserOutput, error) {
	var output appstream.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteUserAsync(ctx workflow.Context, input *appstream.DeleteUserInput) *AppStreamDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteUser", input)
	return &AppStreamDeleteUserFuture{Future: future}
}

func (a *AppStreamStub) DescribeDirectoryConfigs(ctx workflow.Context, input *appstream.DescribeDirectoryConfigsInput) (*appstream.DescribeDirectoryConfigsOutput, error) {
	var output appstream.DescribeDirectoryConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeDirectoryConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeDirectoryConfigsAsync(ctx workflow.Context, input *appstream.DescribeDirectoryConfigsInput) *AppStreamDescribeDirectoryConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeDirectoryConfigs", input)
	return &AppStreamDescribeDirectoryConfigsFuture{Future: future}
}

func (a *AppStreamStub) DescribeFleets(ctx workflow.Context, input *appstream.DescribeFleetsInput) (*appstream.DescribeFleetsOutput, error) {
	var output appstream.DescribeFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeFleetsAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) *AppStreamDescribeFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeFleets", input)
	return &AppStreamDescribeFleetsFuture{Future: future}
}

func (a *AppStreamStub) DescribeImageBuilders(ctx workflow.Context, input *appstream.DescribeImageBuildersInput) (*appstream.DescribeImageBuildersOutput, error) {
	var output appstream.DescribeImageBuildersOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeImageBuilders", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeImageBuildersAsync(ctx workflow.Context, input *appstream.DescribeImageBuildersInput) *AppStreamDescribeImageBuildersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeImageBuilders", input)
	return &AppStreamDescribeImageBuildersFuture{Future: future}
}

func (a *AppStreamStub) DescribeImagePermissions(ctx workflow.Context, input *appstream.DescribeImagePermissionsInput) (*appstream.DescribeImagePermissionsOutput, error) {
	var output appstream.DescribeImagePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeImagePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeImagePermissionsAsync(ctx workflow.Context, input *appstream.DescribeImagePermissionsInput) *AppStreamDescribeImagePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeImagePermissions", input)
	return &AppStreamDescribeImagePermissionsFuture{Future: future}
}

func (a *AppStreamStub) DescribeImages(ctx workflow.Context, input *appstream.DescribeImagesInput) (*appstream.DescribeImagesOutput, error) {
	var output appstream.DescribeImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeImages", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeImagesAsync(ctx workflow.Context, input *appstream.DescribeImagesInput) *AppStreamDescribeImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeImages", input)
	return &AppStreamDescribeImagesFuture{Future: future}
}

func (a *AppStreamStub) DescribeSessions(ctx workflow.Context, input *appstream.DescribeSessionsInput) (*appstream.DescribeSessionsOutput, error) {
	var output appstream.DescribeSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeSessionsAsync(ctx workflow.Context, input *appstream.DescribeSessionsInput) *AppStreamDescribeSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeSessions", input)
	return &AppStreamDescribeSessionsFuture{Future: future}
}

func (a *AppStreamStub) DescribeStacks(ctx workflow.Context, input *appstream.DescribeStacksInput) (*appstream.DescribeStacksOutput, error) {
	var output appstream.DescribeStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeStacksAsync(ctx workflow.Context, input *appstream.DescribeStacksInput) *AppStreamDescribeStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeStacks", input)
	return &AppStreamDescribeStacksFuture{Future: future}
}

func (a *AppStreamStub) DescribeUsageReportSubscriptions(ctx workflow.Context, input *appstream.DescribeUsageReportSubscriptionsInput) (*appstream.DescribeUsageReportSubscriptionsOutput, error) {
	var output appstream.DescribeUsageReportSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeUsageReportSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeUsageReportSubscriptionsAsync(ctx workflow.Context, input *appstream.DescribeUsageReportSubscriptionsInput) *AppStreamDescribeUsageReportSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeUsageReportSubscriptions", input)
	return &AppStreamDescribeUsageReportSubscriptionsFuture{Future: future}
}

func (a *AppStreamStub) DescribeUserStackAssociations(ctx workflow.Context, input *appstream.DescribeUserStackAssociationsInput) (*appstream.DescribeUserStackAssociationsOutput, error) {
	var output appstream.DescribeUserStackAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeUserStackAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeUserStackAssociationsAsync(ctx workflow.Context, input *appstream.DescribeUserStackAssociationsInput) *AppStreamDescribeUserStackAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeUserStackAssociations", input)
	return &AppStreamDescribeUserStackAssociationsFuture{Future: future}
}

func (a *AppStreamStub) DescribeUsers(ctx workflow.Context, input *appstream.DescribeUsersInput) (*appstream.DescribeUsersOutput, error) {
	var output appstream.DescribeUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeUsersAsync(ctx workflow.Context, input *appstream.DescribeUsersInput) *AppStreamDescribeUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeUsers", input)
	return &AppStreamDescribeUsersFuture{Future: future}
}

func (a *AppStreamStub) DisableUser(ctx workflow.Context, input *appstream.DisableUserInput) (*appstream.DisableUserOutput, error) {
	var output appstream.DisableUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DisableUser", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DisableUserAsync(ctx workflow.Context, input *appstream.DisableUserInput) *AppStreamDisableUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DisableUser", input)
	return &AppStreamDisableUserFuture{Future: future}
}

func (a *AppStreamStub) DisassociateFleet(ctx workflow.Context, input *appstream.DisassociateFleetInput) (*appstream.DisassociateFleetOutput, error) {
	var output appstream.DisassociateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DisassociateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DisassociateFleetAsync(ctx workflow.Context, input *appstream.DisassociateFleetInput) *AppStreamDisassociateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DisassociateFleet", input)
	return &AppStreamDisassociateFleetFuture{Future: future}
}

func (a *AppStreamStub) EnableUser(ctx workflow.Context, input *appstream.EnableUserInput) (*appstream.EnableUserOutput, error) {
	var output appstream.EnableUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.EnableUser", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) EnableUserAsync(ctx workflow.Context, input *appstream.EnableUserInput) *AppStreamEnableUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.EnableUser", input)
	return &AppStreamEnableUserFuture{Future: future}
}

func (a *AppStreamStub) ExpireSession(ctx workflow.Context, input *appstream.ExpireSessionInput) (*appstream.ExpireSessionOutput, error) {
	var output appstream.ExpireSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.ExpireSession", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) ExpireSessionAsync(ctx workflow.Context, input *appstream.ExpireSessionInput) *AppStreamExpireSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.ExpireSession", input)
	return &AppStreamExpireSessionFuture{Future: future}
}

func (a *AppStreamStub) ListAssociatedFleets(ctx workflow.Context, input *appstream.ListAssociatedFleetsInput) (*appstream.ListAssociatedFleetsOutput, error) {
	var output appstream.ListAssociatedFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.ListAssociatedFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) ListAssociatedFleetsAsync(ctx workflow.Context, input *appstream.ListAssociatedFleetsInput) *AppStreamListAssociatedFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.ListAssociatedFleets", input)
	return &AppStreamListAssociatedFleetsFuture{Future: future}
}

func (a *AppStreamStub) ListAssociatedStacks(ctx workflow.Context, input *appstream.ListAssociatedStacksInput) (*appstream.ListAssociatedStacksOutput, error) {
	var output appstream.ListAssociatedStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.ListAssociatedStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) ListAssociatedStacksAsync(ctx workflow.Context, input *appstream.ListAssociatedStacksInput) *AppStreamListAssociatedStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.ListAssociatedStacks", input)
	return &AppStreamListAssociatedStacksFuture{Future: future}
}

func (a *AppStreamStub) ListTagsForResource(ctx workflow.Context, input *appstream.ListTagsForResourceInput) (*appstream.ListTagsForResourceOutput, error) {
	var output appstream.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) ListTagsForResourceAsync(ctx workflow.Context, input *appstream.ListTagsForResourceInput) *AppStreamListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.ListTagsForResource", input)
	return &AppStreamListTagsForResourceFuture{Future: future}
}

func (a *AppStreamStub) StartFleet(ctx workflow.Context, input *appstream.StartFleetInput) (*appstream.StartFleetOutput, error) {
	var output appstream.StartFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.StartFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) StartFleetAsync(ctx workflow.Context, input *appstream.StartFleetInput) *AppStreamStartFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.StartFleet", input)
	return &AppStreamStartFleetFuture{Future: future}
}

func (a *AppStreamStub) StartImageBuilder(ctx workflow.Context, input *appstream.StartImageBuilderInput) (*appstream.StartImageBuilderOutput, error) {
	var output appstream.StartImageBuilderOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.StartImageBuilder", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) StartImageBuilderAsync(ctx workflow.Context, input *appstream.StartImageBuilderInput) *AppStreamStartImageBuilderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.StartImageBuilder", input)
	return &AppStreamStartImageBuilderFuture{Future: future}
}

func (a *AppStreamStub) StopFleet(ctx workflow.Context, input *appstream.StopFleetInput) (*appstream.StopFleetOutput, error) {
	var output appstream.StopFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.StopFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) StopFleetAsync(ctx workflow.Context, input *appstream.StopFleetInput) *AppStreamStopFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.StopFleet", input)
	return &AppStreamStopFleetFuture{Future: future}
}

func (a *AppStreamStub) StopImageBuilder(ctx workflow.Context, input *appstream.StopImageBuilderInput) (*appstream.StopImageBuilderOutput, error) {
	var output appstream.StopImageBuilderOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.StopImageBuilder", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) StopImageBuilderAsync(ctx workflow.Context, input *appstream.StopImageBuilderInput) *AppStreamStopImageBuilderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.StopImageBuilder", input)
	return &AppStreamStopImageBuilderFuture{Future: future}
}

func (a *AppStreamStub) TagResource(ctx workflow.Context, input *appstream.TagResourceInput) (*appstream.TagResourceOutput, error) {
	var output appstream.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) TagResourceAsync(ctx workflow.Context, input *appstream.TagResourceInput) *AppStreamTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.TagResource", input)
	return &AppStreamTagResourceFuture{Future: future}
}

func (a *AppStreamStub) UntagResource(ctx workflow.Context, input *appstream.UntagResourceInput) (*appstream.UntagResourceOutput, error) {
	var output appstream.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) UntagResourceAsync(ctx workflow.Context, input *appstream.UntagResourceInput) *AppStreamUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.UntagResource", input)
	return &AppStreamUntagResourceFuture{Future: future}
}

func (a *AppStreamStub) UpdateDirectoryConfig(ctx workflow.Context, input *appstream.UpdateDirectoryConfigInput) (*appstream.UpdateDirectoryConfigOutput, error) {
	var output appstream.UpdateDirectoryConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateDirectoryConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) UpdateDirectoryConfigAsync(ctx workflow.Context, input *appstream.UpdateDirectoryConfigInput) *AppStreamUpdateDirectoryConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateDirectoryConfig", input)
	return &AppStreamUpdateDirectoryConfigFuture{Future: future}
}

func (a *AppStreamStub) UpdateFleet(ctx workflow.Context, input *appstream.UpdateFleetInput) (*appstream.UpdateFleetOutput, error) {
	var output appstream.UpdateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) UpdateFleetAsync(ctx workflow.Context, input *appstream.UpdateFleetInput) *AppStreamUpdateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateFleet", input)
	return &AppStreamUpdateFleetFuture{Future: future}
}

func (a *AppStreamStub) UpdateImagePermissions(ctx workflow.Context, input *appstream.UpdateImagePermissionsInput) (*appstream.UpdateImagePermissionsOutput, error) {
	var output appstream.UpdateImagePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateImagePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) UpdateImagePermissionsAsync(ctx workflow.Context, input *appstream.UpdateImagePermissionsInput) *AppStreamUpdateImagePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateImagePermissions", input)
	return &AppStreamUpdateImagePermissionsFuture{Future: future}
}

func (a *AppStreamStub) UpdateStack(ctx workflow.Context, input *appstream.UpdateStackInput) (*appstream.UpdateStackOutput, error) {
	var output appstream.UpdateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) UpdateStackAsync(ctx workflow.Context, input *appstream.UpdateStackInput) *AppStreamUpdateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateStack", input)
	return &AppStreamUpdateStackFuture{Future: future}
}

func (a *AppStreamStub) WaitUntilFleetStarted(ctx workflow.Context, input *appstream.DescribeFleetsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.appstream.WaitUntilFleetStarted", input).Get(ctx, nil)
}

func (a *AppStreamStub) WaitUntilFleetStartedAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.WaitUntilFleetStarted", input)
	return NewVoidFuture(future)
}

func (a *AppStreamStub) WaitUntilFleetStopped(ctx workflow.Context, input *appstream.DescribeFleetsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.appstream.WaitUntilFleetStopped", input).Get(ctx, nil)
}

func (a *AppStreamStub) WaitUntilFleetStoppedAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.WaitUntilFleetStopped", input)
	return NewVoidFuture(future)
}
