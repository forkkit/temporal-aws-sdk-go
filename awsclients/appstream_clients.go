// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/appstream"
	"go.temporal.io/sdk/workflow"
)

type AppStreamClient interface {
	AssociateFleet(ctx workflow.Context, input *appstream.AssociateFleetInput) (*appstream.AssociateFleetOutput, error)
	AssociateFleetAsync(ctx workflow.Context, input *appstream.AssociateFleetInput) *AppstreamAssociateFleetFuture

	BatchAssociateUserStack(ctx workflow.Context, input *appstream.BatchAssociateUserStackInput) (*appstream.BatchAssociateUserStackOutput, error)
	BatchAssociateUserStackAsync(ctx workflow.Context, input *appstream.BatchAssociateUserStackInput) *AppstreamBatchAssociateUserStackFuture

	BatchDisassociateUserStack(ctx workflow.Context, input *appstream.BatchDisassociateUserStackInput) (*appstream.BatchDisassociateUserStackOutput, error)
	BatchDisassociateUserStackAsync(ctx workflow.Context, input *appstream.BatchDisassociateUserStackInput) *AppstreamBatchDisassociateUserStackFuture

	CopyImage(ctx workflow.Context, input *appstream.CopyImageInput) (*appstream.CopyImageOutput, error)
	CopyImageAsync(ctx workflow.Context, input *appstream.CopyImageInput) *AppstreamCopyImageFuture

	CreateDirectoryConfig(ctx workflow.Context, input *appstream.CreateDirectoryConfigInput) (*appstream.CreateDirectoryConfigOutput, error)
	CreateDirectoryConfigAsync(ctx workflow.Context, input *appstream.CreateDirectoryConfigInput) *AppstreamCreateDirectoryConfigFuture

	CreateFleet(ctx workflow.Context, input *appstream.CreateFleetInput) (*appstream.CreateFleetOutput, error)
	CreateFleetAsync(ctx workflow.Context, input *appstream.CreateFleetInput) *AppstreamCreateFleetFuture

	CreateImageBuilder(ctx workflow.Context, input *appstream.CreateImageBuilderInput) (*appstream.CreateImageBuilderOutput, error)
	CreateImageBuilderAsync(ctx workflow.Context, input *appstream.CreateImageBuilderInput) *AppstreamCreateImageBuilderFuture

	CreateImageBuilderStreamingURL(ctx workflow.Context, input *appstream.CreateImageBuilderStreamingURLInput) (*appstream.CreateImageBuilderStreamingURLOutput, error)
	CreateImageBuilderStreamingURLAsync(ctx workflow.Context, input *appstream.CreateImageBuilderStreamingURLInput) *AppstreamCreateImageBuilderStreamingURLFuture

	CreateStack(ctx workflow.Context, input *appstream.CreateStackInput) (*appstream.CreateStackOutput, error)
	CreateStackAsync(ctx workflow.Context, input *appstream.CreateStackInput) *AppstreamCreateStackFuture

	CreateStreamingURL(ctx workflow.Context, input *appstream.CreateStreamingURLInput) (*appstream.CreateStreamingURLOutput, error)
	CreateStreamingURLAsync(ctx workflow.Context, input *appstream.CreateStreamingURLInput) *AppstreamCreateStreamingURLFuture

	CreateUsageReportSubscription(ctx workflow.Context, input *appstream.CreateUsageReportSubscriptionInput) (*appstream.CreateUsageReportSubscriptionOutput, error)
	CreateUsageReportSubscriptionAsync(ctx workflow.Context, input *appstream.CreateUsageReportSubscriptionInput) *AppstreamCreateUsageReportSubscriptionFuture

	CreateUser(ctx workflow.Context, input *appstream.CreateUserInput) (*appstream.CreateUserOutput, error)
	CreateUserAsync(ctx workflow.Context, input *appstream.CreateUserInput) *AppstreamCreateUserFuture

	DeleteDirectoryConfig(ctx workflow.Context, input *appstream.DeleteDirectoryConfigInput) (*appstream.DeleteDirectoryConfigOutput, error)
	DeleteDirectoryConfigAsync(ctx workflow.Context, input *appstream.DeleteDirectoryConfigInput) *AppstreamDeleteDirectoryConfigFuture

	DeleteFleet(ctx workflow.Context, input *appstream.DeleteFleetInput) (*appstream.DeleteFleetOutput, error)
	DeleteFleetAsync(ctx workflow.Context, input *appstream.DeleteFleetInput) *AppstreamDeleteFleetFuture

	DeleteImage(ctx workflow.Context, input *appstream.DeleteImageInput) (*appstream.DeleteImageOutput, error)
	DeleteImageAsync(ctx workflow.Context, input *appstream.DeleteImageInput) *AppstreamDeleteImageFuture

	DeleteImageBuilder(ctx workflow.Context, input *appstream.DeleteImageBuilderInput) (*appstream.DeleteImageBuilderOutput, error)
	DeleteImageBuilderAsync(ctx workflow.Context, input *appstream.DeleteImageBuilderInput) *AppstreamDeleteImageBuilderFuture

	DeleteImagePermissions(ctx workflow.Context, input *appstream.DeleteImagePermissionsInput) (*appstream.DeleteImagePermissionsOutput, error)
	DeleteImagePermissionsAsync(ctx workflow.Context, input *appstream.DeleteImagePermissionsInput) *AppstreamDeleteImagePermissionsFuture

	DeleteStack(ctx workflow.Context, input *appstream.DeleteStackInput) (*appstream.DeleteStackOutput, error)
	DeleteStackAsync(ctx workflow.Context, input *appstream.DeleteStackInput) *AppstreamDeleteStackFuture

	DeleteUsageReportSubscription(ctx workflow.Context, input *appstream.DeleteUsageReportSubscriptionInput) (*appstream.DeleteUsageReportSubscriptionOutput, error)
	DeleteUsageReportSubscriptionAsync(ctx workflow.Context, input *appstream.DeleteUsageReportSubscriptionInput) *AppstreamDeleteUsageReportSubscriptionFuture

	DeleteUser(ctx workflow.Context, input *appstream.DeleteUserInput) (*appstream.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *appstream.DeleteUserInput) *AppstreamDeleteUserFuture

	DescribeDirectoryConfigs(ctx workflow.Context, input *appstream.DescribeDirectoryConfigsInput) (*appstream.DescribeDirectoryConfigsOutput, error)
	DescribeDirectoryConfigsAsync(ctx workflow.Context, input *appstream.DescribeDirectoryConfigsInput) *AppstreamDescribeDirectoryConfigsFuture

	DescribeFleets(ctx workflow.Context, input *appstream.DescribeFleetsInput) (*appstream.DescribeFleetsOutput, error)
	DescribeFleetsAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) *AppstreamDescribeFleetsFuture

	DescribeImageBuilders(ctx workflow.Context, input *appstream.DescribeImageBuildersInput) (*appstream.DescribeImageBuildersOutput, error)
	DescribeImageBuildersAsync(ctx workflow.Context, input *appstream.DescribeImageBuildersInput) *AppstreamDescribeImageBuildersFuture

	DescribeImagePermissions(ctx workflow.Context, input *appstream.DescribeImagePermissionsInput) (*appstream.DescribeImagePermissionsOutput, error)
	DescribeImagePermissionsAsync(ctx workflow.Context, input *appstream.DescribeImagePermissionsInput) *AppstreamDescribeImagePermissionsFuture

	DescribeImages(ctx workflow.Context, input *appstream.DescribeImagesInput) (*appstream.DescribeImagesOutput, error)
	DescribeImagesAsync(ctx workflow.Context, input *appstream.DescribeImagesInput) *AppstreamDescribeImagesFuture

	DescribeSessions(ctx workflow.Context, input *appstream.DescribeSessionsInput) (*appstream.DescribeSessionsOutput, error)
	DescribeSessionsAsync(ctx workflow.Context, input *appstream.DescribeSessionsInput) *AppstreamDescribeSessionsFuture

	DescribeStacks(ctx workflow.Context, input *appstream.DescribeStacksInput) (*appstream.DescribeStacksOutput, error)
	DescribeStacksAsync(ctx workflow.Context, input *appstream.DescribeStacksInput) *AppstreamDescribeStacksFuture

	DescribeUsageReportSubscriptions(ctx workflow.Context, input *appstream.DescribeUsageReportSubscriptionsInput) (*appstream.DescribeUsageReportSubscriptionsOutput, error)
	DescribeUsageReportSubscriptionsAsync(ctx workflow.Context, input *appstream.DescribeUsageReportSubscriptionsInput) *AppstreamDescribeUsageReportSubscriptionsFuture

	DescribeUserStackAssociations(ctx workflow.Context, input *appstream.DescribeUserStackAssociationsInput) (*appstream.DescribeUserStackAssociationsOutput, error)
	DescribeUserStackAssociationsAsync(ctx workflow.Context, input *appstream.DescribeUserStackAssociationsInput) *AppstreamDescribeUserStackAssociationsFuture

	DescribeUsers(ctx workflow.Context, input *appstream.DescribeUsersInput) (*appstream.DescribeUsersOutput, error)
	DescribeUsersAsync(ctx workflow.Context, input *appstream.DescribeUsersInput) *AppstreamDescribeUsersFuture

	DisableUser(ctx workflow.Context, input *appstream.DisableUserInput) (*appstream.DisableUserOutput, error)
	DisableUserAsync(ctx workflow.Context, input *appstream.DisableUserInput) *AppstreamDisableUserFuture

	DisassociateFleet(ctx workflow.Context, input *appstream.DisassociateFleetInput) (*appstream.DisassociateFleetOutput, error)
	DisassociateFleetAsync(ctx workflow.Context, input *appstream.DisassociateFleetInput) *AppstreamDisassociateFleetFuture

	EnableUser(ctx workflow.Context, input *appstream.EnableUserInput) (*appstream.EnableUserOutput, error)
	EnableUserAsync(ctx workflow.Context, input *appstream.EnableUserInput) *AppstreamEnableUserFuture

	ExpireSession(ctx workflow.Context, input *appstream.ExpireSessionInput) (*appstream.ExpireSessionOutput, error)
	ExpireSessionAsync(ctx workflow.Context, input *appstream.ExpireSessionInput) *AppstreamExpireSessionFuture

	ListAssociatedFleets(ctx workflow.Context, input *appstream.ListAssociatedFleetsInput) (*appstream.ListAssociatedFleetsOutput, error)
	ListAssociatedFleetsAsync(ctx workflow.Context, input *appstream.ListAssociatedFleetsInput) *AppstreamListAssociatedFleetsFuture

	ListAssociatedStacks(ctx workflow.Context, input *appstream.ListAssociatedStacksInput) (*appstream.ListAssociatedStacksOutput, error)
	ListAssociatedStacksAsync(ctx workflow.Context, input *appstream.ListAssociatedStacksInput) *AppstreamListAssociatedStacksFuture

	ListTagsForResource(ctx workflow.Context, input *appstream.ListTagsForResourceInput) (*appstream.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *appstream.ListTagsForResourceInput) *AppstreamListTagsForResourceFuture

	StartFleet(ctx workflow.Context, input *appstream.StartFleetInput) (*appstream.StartFleetOutput, error)
	StartFleetAsync(ctx workflow.Context, input *appstream.StartFleetInput) *AppstreamStartFleetFuture

	StartImageBuilder(ctx workflow.Context, input *appstream.StartImageBuilderInput) (*appstream.StartImageBuilderOutput, error)
	StartImageBuilderAsync(ctx workflow.Context, input *appstream.StartImageBuilderInput) *AppstreamStartImageBuilderFuture

	StopFleet(ctx workflow.Context, input *appstream.StopFleetInput) (*appstream.StopFleetOutput, error)
	StopFleetAsync(ctx workflow.Context, input *appstream.StopFleetInput) *AppstreamStopFleetFuture

	StopImageBuilder(ctx workflow.Context, input *appstream.StopImageBuilderInput) (*appstream.StopImageBuilderOutput, error)
	StopImageBuilderAsync(ctx workflow.Context, input *appstream.StopImageBuilderInput) *AppstreamStopImageBuilderFuture

	TagResource(ctx workflow.Context, input *appstream.TagResourceInput) (*appstream.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *appstream.TagResourceInput) *AppstreamTagResourceFuture

	UntagResource(ctx workflow.Context, input *appstream.UntagResourceInput) (*appstream.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *appstream.UntagResourceInput) *AppstreamUntagResourceFuture

	UpdateDirectoryConfig(ctx workflow.Context, input *appstream.UpdateDirectoryConfigInput) (*appstream.UpdateDirectoryConfigOutput, error)
	UpdateDirectoryConfigAsync(ctx workflow.Context, input *appstream.UpdateDirectoryConfigInput) *AppstreamUpdateDirectoryConfigFuture

	UpdateFleet(ctx workflow.Context, input *appstream.UpdateFleetInput) (*appstream.UpdateFleetOutput, error)
	UpdateFleetAsync(ctx workflow.Context, input *appstream.UpdateFleetInput) *AppstreamUpdateFleetFuture

	UpdateImagePermissions(ctx workflow.Context, input *appstream.UpdateImagePermissionsInput) (*appstream.UpdateImagePermissionsOutput, error)
	UpdateImagePermissionsAsync(ctx workflow.Context, input *appstream.UpdateImagePermissionsInput) *AppstreamUpdateImagePermissionsFuture

	UpdateStack(ctx workflow.Context, input *appstream.UpdateStackInput) (*appstream.UpdateStackOutput, error)
	UpdateStackAsync(ctx workflow.Context, input *appstream.UpdateStackInput) *AppstreamUpdateStackFuture

	WaitUntilFleetStarted(ctx workflow.Context, input *appstream.DescribeFleetsInput) error
	WaitUntilFleetStartedAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) workflow.Future

	WaitUntilFleetStopped(ctx workflow.Context, input *appstream.DescribeFleetsInput) error
	WaitUntilFleetStoppedAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) workflow.Future
}

type AppStreamStub struct{}

func NewAppStreamStub() AppStreamClient {
	return &AppStreamStub{}
}

type AppstreamAssociateFleetFuture struct {
	Future workflow.Future
}

func (r *AppstreamAssociateFleetFuture) Get(ctx workflow.Context) (*appstream.AssociateFleetOutput, error) {
	var output appstream.AssociateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamBatchAssociateUserStackFuture struct {
	Future workflow.Future
}

func (r *AppstreamBatchAssociateUserStackFuture) Get(ctx workflow.Context) (*appstream.BatchAssociateUserStackOutput, error) {
	var output appstream.BatchAssociateUserStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamBatchDisassociateUserStackFuture struct {
	Future workflow.Future
}

func (r *AppstreamBatchDisassociateUserStackFuture) Get(ctx workflow.Context) (*appstream.BatchDisassociateUserStackOutput, error) {
	var output appstream.BatchDisassociateUserStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamCopyImageFuture struct {
	Future workflow.Future
}

func (r *AppstreamCopyImageFuture) Get(ctx workflow.Context) (*appstream.CopyImageOutput, error) {
	var output appstream.CopyImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamCreateDirectoryConfigFuture struct {
	Future workflow.Future
}

func (r *AppstreamCreateDirectoryConfigFuture) Get(ctx workflow.Context) (*appstream.CreateDirectoryConfigOutput, error) {
	var output appstream.CreateDirectoryConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamCreateFleetFuture struct {
	Future workflow.Future
}

func (r *AppstreamCreateFleetFuture) Get(ctx workflow.Context) (*appstream.CreateFleetOutput, error) {
	var output appstream.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamCreateImageBuilderFuture struct {
	Future workflow.Future
}

func (r *AppstreamCreateImageBuilderFuture) Get(ctx workflow.Context) (*appstream.CreateImageBuilderOutput, error) {
	var output appstream.CreateImageBuilderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamCreateImageBuilderStreamingURLFuture struct {
	Future workflow.Future
}

func (r *AppstreamCreateImageBuilderStreamingURLFuture) Get(ctx workflow.Context) (*appstream.CreateImageBuilderStreamingURLOutput, error) {
	var output appstream.CreateImageBuilderStreamingURLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamCreateStackFuture struct {
	Future workflow.Future
}

func (r *AppstreamCreateStackFuture) Get(ctx workflow.Context) (*appstream.CreateStackOutput, error) {
	var output appstream.CreateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamCreateStreamingURLFuture struct {
	Future workflow.Future
}

func (r *AppstreamCreateStreamingURLFuture) Get(ctx workflow.Context) (*appstream.CreateStreamingURLOutput, error) {
	var output appstream.CreateStreamingURLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamCreateUsageReportSubscriptionFuture struct {
	Future workflow.Future
}

func (r *AppstreamCreateUsageReportSubscriptionFuture) Get(ctx workflow.Context) (*appstream.CreateUsageReportSubscriptionOutput, error) {
	var output appstream.CreateUsageReportSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamCreateUserFuture struct {
	Future workflow.Future
}

func (r *AppstreamCreateUserFuture) Get(ctx workflow.Context) (*appstream.CreateUserOutput, error) {
	var output appstream.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDeleteDirectoryConfigFuture struct {
	Future workflow.Future
}

func (r *AppstreamDeleteDirectoryConfigFuture) Get(ctx workflow.Context) (*appstream.DeleteDirectoryConfigOutput, error) {
	var output appstream.DeleteDirectoryConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDeleteFleetFuture struct {
	Future workflow.Future
}

func (r *AppstreamDeleteFleetFuture) Get(ctx workflow.Context) (*appstream.DeleteFleetOutput, error) {
	var output appstream.DeleteFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDeleteImageFuture struct {
	Future workflow.Future
}

func (r *AppstreamDeleteImageFuture) Get(ctx workflow.Context) (*appstream.DeleteImageOutput, error) {
	var output appstream.DeleteImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDeleteImageBuilderFuture struct {
	Future workflow.Future
}

func (r *AppstreamDeleteImageBuilderFuture) Get(ctx workflow.Context) (*appstream.DeleteImageBuilderOutput, error) {
	var output appstream.DeleteImageBuilderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDeleteImagePermissionsFuture struct {
	Future workflow.Future
}

func (r *AppstreamDeleteImagePermissionsFuture) Get(ctx workflow.Context) (*appstream.DeleteImagePermissionsOutput, error) {
	var output appstream.DeleteImagePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDeleteStackFuture struct {
	Future workflow.Future
}

func (r *AppstreamDeleteStackFuture) Get(ctx workflow.Context) (*appstream.DeleteStackOutput, error) {
	var output appstream.DeleteStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDeleteUsageReportSubscriptionFuture struct {
	Future workflow.Future
}

func (r *AppstreamDeleteUsageReportSubscriptionFuture) Get(ctx workflow.Context) (*appstream.DeleteUsageReportSubscriptionOutput, error) {
	var output appstream.DeleteUsageReportSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDeleteUserFuture struct {
	Future workflow.Future
}

func (r *AppstreamDeleteUserFuture) Get(ctx workflow.Context) (*appstream.DeleteUserOutput, error) {
	var output appstream.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDescribeDirectoryConfigsFuture struct {
	Future workflow.Future
}

func (r *AppstreamDescribeDirectoryConfigsFuture) Get(ctx workflow.Context) (*appstream.DescribeDirectoryConfigsOutput, error) {
	var output appstream.DescribeDirectoryConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDescribeFleetsFuture struct {
	Future workflow.Future
}

func (r *AppstreamDescribeFleetsFuture) Get(ctx workflow.Context) (*appstream.DescribeFleetsOutput, error) {
	var output appstream.DescribeFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDescribeImageBuildersFuture struct {
	Future workflow.Future
}

func (r *AppstreamDescribeImageBuildersFuture) Get(ctx workflow.Context) (*appstream.DescribeImageBuildersOutput, error) {
	var output appstream.DescribeImageBuildersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDescribeImagePermissionsFuture struct {
	Future workflow.Future
}

func (r *AppstreamDescribeImagePermissionsFuture) Get(ctx workflow.Context) (*appstream.DescribeImagePermissionsOutput, error) {
	var output appstream.DescribeImagePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDescribeImagesFuture struct {
	Future workflow.Future
}

func (r *AppstreamDescribeImagesFuture) Get(ctx workflow.Context) (*appstream.DescribeImagesOutput, error) {
	var output appstream.DescribeImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDescribeSessionsFuture struct {
	Future workflow.Future
}

func (r *AppstreamDescribeSessionsFuture) Get(ctx workflow.Context) (*appstream.DescribeSessionsOutput, error) {
	var output appstream.DescribeSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDescribeStacksFuture struct {
	Future workflow.Future
}

func (r *AppstreamDescribeStacksFuture) Get(ctx workflow.Context) (*appstream.DescribeStacksOutput, error) {
	var output appstream.DescribeStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDescribeUsageReportSubscriptionsFuture struct {
	Future workflow.Future
}

func (r *AppstreamDescribeUsageReportSubscriptionsFuture) Get(ctx workflow.Context) (*appstream.DescribeUsageReportSubscriptionsOutput, error) {
	var output appstream.DescribeUsageReportSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDescribeUserStackAssociationsFuture struct {
	Future workflow.Future
}

func (r *AppstreamDescribeUserStackAssociationsFuture) Get(ctx workflow.Context) (*appstream.DescribeUserStackAssociationsOutput, error) {
	var output appstream.DescribeUserStackAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDescribeUsersFuture struct {
	Future workflow.Future
}

func (r *AppstreamDescribeUsersFuture) Get(ctx workflow.Context) (*appstream.DescribeUsersOutput, error) {
	var output appstream.DescribeUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDisableUserFuture struct {
	Future workflow.Future
}

func (r *AppstreamDisableUserFuture) Get(ctx workflow.Context) (*appstream.DisableUserOutput, error) {
	var output appstream.DisableUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamDisassociateFleetFuture struct {
	Future workflow.Future
}

func (r *AppstreamDisassociateFleetFuture) Get(ctx workflow.Context) (*appstream.DisassociateFleetOutput, error) {
	var output appstream.DisassociateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamEnableUserFuture struct {
	Future workflow.Future
}

func (r *AppstreamEnableUserFuture) Get(ctx workflow.Context) (*appstream.EnableUserOutput, error) {
	var output appstream.EnableUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamExpireSessionFuture struct {
	Future workflow.Future
}

func (r *AppstreamExpireSessionFuture) Get(ctx workflow.Context) (*appstream.ExpireSessionOutput, error) {
	var output appstream.ExpireSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamListAssociatedFleetsFuture struct {
	Future workflow.Future
}

func (r *AppstreamListAssociatedFleetsFuture) Get(ctx workflow.Context) (*appstream.ListAssociatedFleetsOutput, error) {
	var output appstream.ListAssociatedFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamListAssociatedStacksFuture struct {
	Future workflow.Future
}

func (r *AppstreamListAssociatedStacksFuture) Get(ctx workflow.Context) (*appstream.ListAssociatedStacksOutput, error) {
	var output appstream.ListAssociatedStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *AppstreamListTagsForResourceFuture) Get(ctx workflow.Context) (*appstream.ListTagsForResourceOutput, error) {
	var output appstream.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamStartFleetFuture struct {
	Future workflow.Future
}

func (r *AppstreamStartFleetFuture) Get(ctx workflow.Context) (*appstream.StartFleetOutput, error) {
	var output appstream.StartFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamStartImageBuilderFuture struct {
	Future workflow.Future
}

func (r *AppstreamStartImageBuilderFuture) Get(ctx workflow.Context) (*appstream.StartImageBuilderOutput, error) {
	var output appstream.StartImageBuilderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamStopFleetFuture struct {
	Future workflow.Future
}

func (r *AppstreamStopFleetFuture) Get(ctx workflow.Context) (*appstream.StopFleetOutput, error) {
	var output appstream.StopFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamStopImageBuilderFuture struct {
	Future workflow.Future
}

func (r *AppstreamStopImageBuilderFuture) Get(ctx workflow.Context) (*appstream.StopImageBuilderOutput, error) {
	var output appstream.StopImageBuilderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamTagResourceFuture struct {
	Future workflow.Future
}

func (r *AppstreamTagResourceFuture) Get(ctx workflow.Context) (*appstream.TagResourceOutput, error) {
	var output appstream.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamUntagResourceFuture struct {
	Future workflow.Future
}

func (r *AppstreamUntagResourceFuture) Get(ctx workflow.Context) (*appstream.UntagResourceOutput, error) {
	var output appstream.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamUpdateDirectoryConfigFuture struct {
	Future workflow.Future
}

func (r *AppstreamUpdateDirectoryConfigFuture) Get(ctx workflow.Context) (*appstream.UpdateDirectoryConfigOutput, error) {
	var output appstream.UpdateDirectoryConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamUpdateFleetFuture struct {
	Future workflow.Future
}

func (r *AppstreamUpdateFleetFuture) Get(ctx workflow.Context) (*appstream.UpdateFleetOutput, error) {
	var output appstream.UpdateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamUpdateImagePermissionsFuture struct {
	Future workflow.Future
}

func (r *AppstreamUpdateImagePermissionsFuture) Get(ctx workflow.Context) (*appstream.UpdateImagePermissionsOutput, error) {
	var output appstream.UpdateImagePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppstreamUpdateStackFuture struct {
	Future workflow.Future
}

func (r *AppstreamUpdateStackFuture) Get(ctx workflow.Context) (*appstream.UpdateStackOutput, error) {
	var output appstream.UpdateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) AssociateFleet(ctx workflow.Context, input *appstream.AssociateFleetInput) (*appstream.AssociateFleetOutput, error) {
	var output appstream.AssociateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.AssociateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) AssociateFleetAsync(ctx workflow.Context, input *appstream.AssociateFleetInput) *AppstreamAssociateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.AssociateFleet", input)
	return &AppstreamAssociateFleetFuture{Future: future}
}

func (a *AppStreamStub) BatchAssociateUserStack(ctx workflow.Context, input *appstream.BatchAssociateUserStackInput) (*appstream.BatchAssociateUserStackOutput, error) {
	var output appstream.BatchAssociateUserStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.BatchAssociateUserStack", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) BatchAssociateUserStackAsync(ctx workflow.Context, input *appstream.BatchAssociateUserStackInput) *AppstreamBatchAssociateUserStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.BatchAssociateUserStack", input)
	return &AppstreamBatchAssociateUserStackFuture{Future: future}
}

func (a *AppStreamStub) BatchDisassociateUserStack(ctx workflow.Context, input *appstream.BatchDisassociateUserStackInput) (*appstream.BatchDisassociateUserStackOutput, error) {
	var output appstream.BatchDisassociateUserStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.BatchDisassociateUserStack", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) BatchDisassociateUserStackAsync(ctx workflow.Context, input *appstream.BatchDisassociateUserStackInput) *AppstreamBatchDisassociateUserStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.BatchDisassociateUserStack", input)
	return &AppstreamBatchDisassociateUserStackFuture{Future: future}
}

func (a *AppStreamStub) CopyImage(ctx workflow.Context, input *appstream.CopyImageInput) (*appstream.CopyImageOutput, error) {
	var output appstream.CopyImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CopyImage", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CopyImageAsync(ctx workflow.Context, input *appstream.CopyImageInput) *AppstreamCopyImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CopyImage", input)
	return &AppstreamCopyImageFuture{Future: future}
}

func (a *AppStreamStub) CreateDirectoryConfig(ctx workflow.Context, input *appstream.CreateDirectoryConfigInput) (*appstream.CreateDirectoryConfigOutput, error) {
	var output appstream.CreateDirectoryConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateDirectoryConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateDirectoryConfigAsync(ctx workflow.Context, input *appstream.CreateDirectoryConfigInput) *AppstreamCreateDirectoryConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateDirectoryConfig", input)
	return &AppstreamCreateDirectoryConfigFuture{Future: future}
}

func (a *AppStreamStub) CreateFleet(ctx workflow.Context, input *appstream.CreateFleetInput) (*appstream.CreateFleetOutput, error) {
	var output appstream.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateFleetAsync(ctx workflow.Context, input *appstream.CreateFleetInput) *AppstreamCreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateFleet", input)
	return &AppstreamCreateFleetFuture{Future: future}
}

func (a *AppStreamStub) CreateImageBuilder(ctx workflow.Context, input *appstream.CreateImageBuilderInput) (*appstream.CreateImageBuilderOutput, error) {
	var output appstream.CreateImageBuilderOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateImageBuilder", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateImageBuilderAsync(ctx workflow.Context, input *appstream.CreateImageBuilderInput) *AppstreamCreateImageBuilderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateImageBuilder", input)
	return &AppstreamCreateImageBuilderFuture{Future: future}
}

func (a *AppStreamStub) CreateImageBuilderStreamingURL(ctx workflow.Context, input *appstream.CreateImageBuilderStreamingURLInput) (*appstream.CreateImageBuilderStreamingURLOutput, error) {
	var output appstream.CreateImageBuilderStreamingURLOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateImageBuilderStreamingURL", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateImageBuilderStreamingURLAsync(ctx workflow.Context, input *appstream.CreateImageBuilderStreamingURLInput) *AppstreamCreateImageBuilderStreamingURLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateImageBuilderStreamingURL", input)
	return &AppstreamCreateImageBuilderStreamingURLFuture{Future: future}
}

func (a *AppStreamStub) CreateStack(ctx workflow.Context, input *appstream.CreateStackInput) (*appstream.CreateStackOutput, error) {
	var output appstream.CreateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateStackAsync(ctx workflow.Context, input *appstream.CreateStackInput) *AppstreamCreateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateStack", input)
	return &AppstreamCreateStackFuture{Future: future}
}

func (a *AppStreamStub) CreateStreamingURL(ctx workflow.Context, input *appstream.CreateStreamingURLInput) (*appstream.CreateStreamingURLOutput, error) {
	var output appstream.CreateStreamingURLOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateStreamingURL", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateStreamingURLAsync(ctx workflow.Context, input *appstream.CreateStreamingURLInput) *AppstreamCreateStreamingURLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateStreamingURL", input)
	return &AppstreamCreateStreamingURLFuture{Future: future}
}

func (a *AppStreamStub) CreateUsageReportSubscription(ctx workflow.Context, input *appstream.CreateUsageReportSubscriptionInput) (*appstream.CreateUsageReportSubscriptionOutput, error) {
	var output appstream.CreateUsageReportSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateUsageReportSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateUsageReportSubscriptionAsync(ctx workflow.Context, input *appstream.CreateUsageReportSubscriptionInput) *AppstreamCreateUsageReportSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateUsageReportSubscription", input)
	return &AppstreamCreateUsageReportSubscriptionFuture{Future: future}
}

func (a *AppStreamStub) CreateUser(ctx workflow.Context, input *appstream.CreateUserInput) (*appstream.CreateUserOutput, error) {
	var output appstream.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) CreateUserAsync(ctx workflow.Context, input *appstream.CreateUserInput) *AppstreamCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.CreateUser", input)
	return &AppstreamCreateUserFuture{Future: future}
}

func (a *AppStreamStub) DeleteDirectoryConfig(ctx workflow.Context, input *appstream.DeleteDirectoryConfigInput) (*appstream.DeleteDirectoryConfigOutput, error) {
	var output appstream.DeleteDirectoryConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteDirectoryConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteDirectoryConfigAsync(ctx workflow.Context, input *appstream.DeleteDirectoryConfigInput) *AppstreamDeleteDirectoryConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteDirectoryConfig", input)
	return &AppstreamDeleteDirectoryConfigFuture{Future: future}
}

func (a *AppStreamStub) DeleteFleet(ctx workflow.Context, input *appstream.DeleteFleetInput) (*appstream.DeleteFleetOutput, error) {
	var output appstream.DeleteFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteFleetAsync(ctx workflow.Context, input *appstream.DeleteFleetInput) *AppstreamDeleteFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteFleet", input)
	return &AppstreamDeleteFleetFuture{Future: future}
}

func (a *AppStreamStub) DeleteImage(ctx workflow.Context, input *appstream.DeleteImageInput) (*appstream.DeleteImageOutput, error) {
	var output appstream.DeleteImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteImage", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteImageAsync(ctx workflow.Context, input *appstream.DeleteImageInput) *AppstreamDeleteImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteImage", input)
	return &AppstreamDeleteImageFuture{Future: future}
}

func (a *AppStreamStub) DeleteImageBuilder(ctx workflow.Context, input *appstream.DeleteImageBuilderInput) (*appstream.DeleteImageBuilderOutput, error) {
	var output appstream.DeleteImageBuilderOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteImageBuilder", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteImageBuilderAsync(ctx workflow.Context, input *appstream.DeleteImageBuilderInput) *AppstreamDeleteImageBuilderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteImageBuilder", input)
	return &AppstreamDeleteImageBuilderFuture{Future: future}
}

func (a *AppStreamStub) DeleteImagePermissions(ctx workflow.Context, input *appstream.DeleteImagePermissionsInput) (*appstream.DeleteImagePermissionsOutput, error) {
	var output appstream.DeleteImagePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteImagePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteImagePermissionsAsync(ctx workflow.Context, input *appstream.DeleteImagePermissionsInput) *AppstreamDeleteImagePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteImagePermissions", input)
	return &AppstreamDeleteImagePermissionsFuture{Future: future}
}

func (a *AppStreamStub) DeleteStack(ctx workflow.Context, input *appstream.DeleteStackInput) (*appstream.DeleteStackOutput, error) {
	var output appstream.DeleteStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteStack", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteStackAsync(ctx workflow.Context, input *appstream.DeleteStackInput) *AppstreamDeleteStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteStack", input)
	return &AppstreamDeleteStackFuture{Future: future}
}

func (a *AppStreamStub) DeleteUsageReportSubscription(ctx workflow.Context, input *appstream.DeleteUsageReportSubscriptionInput) (*appstream.DeleteUsageReportSubscriptionOutput, error) {
	var output appstream.DeleteUsageReportSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteUsageReportSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteUsageReportSubscriptionAsync(ctx workflow.Context, input *appstream.DeleteUsageReportSubscriptionInput) *AppstreamDeleteUsageReportSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteUsageReportSubscription", input)
	return &AppstreamDeleteUsageReportSubscriptionFuture{Future: future}
}

func (a *AppStreamStub) DeleteUser(ctx workflow.Context, input *appstream.DeleteUserInput) (*appstream.DeleteUserOutput, error) {
	var output appstream.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DeleteUserAsync(ctx workflow.Context, input *appstream.DeleteUserInput) *AppstreamDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DeleteUser", input)
	return &AppstreamDeleteUserFuture{Future: future}
}

func (a *AppStreamStub) DescribeDirectoryConfigs(ctx workflow.Context, input *appstream.DescribeDirectoryConfigsInput) (*appstream.DescribeDirectoryConfigsOutput, error) {
	var output appstream.DescribeDirectoryConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeDirectoryConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeDirectoryConfigsAsync(ctx workflow.Context, input *appstream.DescribeDirectoryConfigsInput) *AppstreamDescribeDirectoryConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeDirectoryConfigs", input)
	return &AppstreamDescribeDirectoryConfigsFuture{Future: future}
}

func (a *AppStreamStub) DescribeFleets(ctx workflow.Context, input *appstream.DescribeFleetsInput) (*appstream.DescribeFleetsOutput, error) {
	var output appstream.DescribeFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeFleetsAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) *AppstreamDescribeFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeFleets", input)
	return &AppstreamDescribeFleetsFuture{Future: future}
}

func (a *AppStreamStub) DescribeImageBuilders(ctx workflow.Context, input *appstream.DescribeImageBuildersInput) (*appstream.DescribeImageBuildersOutput, error) {
	var output appstream.DescribeImageBuildersOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeImageBuilders", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeImageBuildersAsync(ctx workflow.Context, input *appstream.DescribeImageBuildersInput) *AppstreamDescribeImageBuildersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeImageBuilders", input)
	return &AppstreamDescribeImageBuildersFuture{Future: future}
}

func (a *AppStreamStub) DescribeImagePermissions(ctx workflow.Context, input *appstream.DescribeImagePermissionsInput) (*appstream.DescribeImagePermissionsOutput, error) {
	var output appstream.DescribeImagePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeImagePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeImagePermissionsAsync(ctx workflow.Context, input *appstream.DescribeImagePermissionsInput) *AppstreamDescribeImagePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeImagePermissions", input)
	return &AppstreamDescribeImagePermissionsFuture{Future: future}
}

func (a *AppStreamStub) DescribeImages(ctx workflow.Context, input *appstream.DescribeImagesInput) (*appstream.DescribeImagesOutput, error) {
	var output appstream.DescribeImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeImages", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeImagesAsync(ctx workflow.Context, input *appstream.DescribeImagesInput) *AppstreamDescribeImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeImages", input)
	return &AppstreamDescribeImagesFuture{Future: future}
}

func (a *AppStreamStub) DescribeSessions(ctx workflow.Context, input *appstream.DescribeSessionsInput) (*appstream.DescribeSessionsOutput, error) {
	var output appstream.DescribeSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeSessionsAsync(ctx workflow.Context, input *appstream.DescribeSessionsInput) *AppstreamDescribeSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeSessions", input)
	return &AppstreamDescribeSessionsFuture{Future: future}
}

func (a *AppStreamStub) DescribeStacks(ctx workflow.Context, input *appstream.DescribeStacksInput) (*appstream.DescribeStacksOutput, error) {
	var output appstream.DescribeStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeStacksAsync(ctx workflow.Context, input *appstream.DescribeStacksInput) *AppstreamDescribeStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeStacks", input)
	return &AppstreamDescribeStacksFuture{Future: future}
}

func (a *AppStreamStub) DescribeUsageReportSubscriptions(ctx workflow.Context, input *appstream.DescribeUsageReportSubscriptionsInput) (*appstream.DescribeUsageReportSubscriptionsOutput, error) {
	var output appstream.DescribeUsageReportSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeUsageReportSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeUsageReportSubscriptionsAsync(ctx workflow.Context, input *appstream.DescribeUsageReportSubscriptionsInput) *AppstreamDescribeUsageReportSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeUsageReportSubscriptions", input)
	return &AppstreamDescribeUsageReportSubscriptionsFuture{Future: future}
}

func (a *AppStreamStub) DescribeUserStackAssociations(ctx workflow.Context, input *appstream.DescribeUserStackAssociationsInput) (*appstream.DescribeUserStackAssociationsOutput, error) {
	var output appstream.DescribeUserStackAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeUserStackAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeUserStackAssociationsAsync(ctx workflow.Context, input *appstream.DescribeUserStackAssociationsInput) *AppstreamDescribeUserStackAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeUserStackAssociations", input)
	return &AppstreamDescribeUserStackAssociationsFuture{Future: future}
}

func (a *AppStreamStub) DescribeUsers(ctx workflow.Context, input *appstream.DescribeUsersInput) (*appstream.DescribeUsersOutput, error) {
	var output appstream.DescribeUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DescribeUsersAsync(ctx workflow.Context, input *appstream.DescribeUsersInput) *AppstreamDescribeUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DescribeUsers", input)
	return &AppstreamDescribeUsersFuture{Future: future}
}

func (a *AppStreamStub) DisableUser(ctx workflow.Context, input *appstream.DisableUserInput) (*appstream.DisableUserOutput, error) {
	var output appstream.DisableUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DisableUser", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DisableUserAsync(ctx workflow.Context, input *appstream.DisableUserInput) *AppstreamDisableUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DisableUser", input)
	return &AppstreamDisableUserFuture{Future: future}
}

func (a *AppStreamStub) DisassociateFleet(ctx workflow.Context, input *appstream.DisassociateFleetInput) (*appstream.DisassociateFleetOutput, error) {
	var output appstream.DisassociateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.DisassociateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) DisassociateFleetAsync(ctx workflow.Context, input *appstream.DisassociateFleetInput) *AppstreamDisassociateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.DisassociateFleet", input)
	return &AppstreamDisassociateFleetFuture{Future: future}
}

func (a *AppStreamStub) EnableUser(ctx workflow.Context, input *appstream.EnableUserInput) (*appstream.EnableUserOutput, error) {
	var output appstream.EnableUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.EnableUser", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) EnableUserAsync(ctx workflow.Context, input *appstream.EnableUserInput) *AppstreamEnableUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.EnableUser", input)
	return &AppstreamEnableUserFuture{Future: future}
}

func (a *AppStreamStub) ExpireSession(ctx workflow.Context, input *appstream.ExpireSessionInput) (*appstream.ExpireSessionOutput, error) {
	var output appstream.ExpireSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.ExpireSession", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) ExpireSessionAsync(ctx workflow.Context, input *appstream.ExpireSessionInput) *AppstreamExpireSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.ExpireSession", input)
	return &AppstreamExpireSessionFuture{Future: future}
}

func (a *AppStreamStub) ListAssociatedFleets(ctx workflow.Context, input *appstream.ListAssociatedFleetsInput) (*appstream.ListAssociatedFleetsOutput, error) {
	var output appstream.ListAssociatedFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.ListAssociatedFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) ListAssociatedFleetsAsync(ctx workflow.Context, input *appstream.ListAssociatedFleetsInput) *AppstreamListAssociatedFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.ListAssociatedFleets", input)
	return &AppstreamListAssociatedFleetsFuture{Future: future}
}

func (a *AppStreamStub) ListAssociatedStacks(ctx workflow.Context, input *appstream.ListAssociatedStacksInput) (*appstream.ListAssociatedStacksOutput, error) {
	var output appstream.ListAssociatedStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.ListAssociatedStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) ListAssociatedStacksAsync(ctx workflow.Context, input *appstream.ListAssociatedStacksInput) *AppstreamListAssociatedStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.ListAssociatedStacks", input)
	return &AppstreamListAssociatedStacksFuture{Future: future}
}

func (a *AppStreamStub) ListTagsForResource(ctx workflow.Context, input *appstream.ListTagsForResourceInput) (*appstream.ListTagsForResourceOutput, error) {
	var output appstream.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) ListTagsForResourceAsync(ctx workflow.Context, input *appstream.ListTagsForResourceInput) *AppstreamListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.ListTagsForResource", input)
	return &AppstreamListTagsForResourceFuture{Future: future}
}

func (a *AppStreamStub) StartFleet(ctx workflow.Context, input *appstream.StartFleetInput) (*appstream.StartFleetOutput, error) {
	var output appstream.StartFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.StartFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) StartFleetAsync(ctx workflow.Context, input *appstream.StartFleetInput) *AppstreamStartFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.StartFleet", input)
	return &AppstreamStartFleetFuture{Future: future}
}

func (a *AppStreamStub) StartImageBuilder(ctx workflow.Context, input *appstream.StartImageBuilderInput) (*appstream.StartImageBuilderOutput, error) {
	var output appstream.StartImageBuilderOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.StartImageBuilder", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) StartImageBuilderAsync(ctx workflow.Context, input *appstream.StartImageBuilderInput) *AppstreamStartImageBuilderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.StartImageBuilder", input)
	return &AppstreamStartImageBuilderFuture{Future: future}
}

func (a *AppStreamStub) StopFleet(ctx workflow.Context, input *appstream.StopFleetInput) (*appstream.StopFleetOutput, error) {
	var output appstream.StopFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.StopFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) StopFleetAsync(ctx workflow.Context, input *appstream.StopFleetInput) *AppstreamStopFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.StopFleet", input)
	return &AppstreamStopFleetFuture{Future: future}
}

func (a *AppStreamStub) StopImageBuilder(ctx workflow.Context, input *appstream.StopImageBuilderInput) (*appstream.StopImageBuilderOutput, error) {
	var output appstream.StopImageBuilderOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.StopImageBuilder", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) StopImageBuilderAsync(ctx workflow.Context, input *appstream.StopImageBuilderInput) *AppstreamStopImageBuilderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.StopImageBuilder", input)
	return &AppstreamStopImageBuilderFuture{Future: future}
}

func (a *AppStreamStub) TagResource(ctx workflow.Context, input *appstream.TagResourceInput) (*appstream.TagResourceOutput, error) {
	var output appstream.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) TagResourceAsync(ctx workflow.Context, input *appstream.TagResourceInput) *AppstreamTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.TagResource", input)
	return &AppstreamTagResourceFuture{Future: future}
}

func (a *AppStreamStub) UntagResource(ctx workflow.Context, input *appstream.UntagResourceInput) (*appstream.UntagResourceOutput, error) {
	var output appstream.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) UntagResourceAsync(ctx workflow.Context, input *appstream.UntagResourceInput) *AppstreamUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.UntagResource", input)
	return &AppstreamUntagResourceFuture{Future: future}
}

func (a *AppStreamStub) UpdateDirectoryConfig(ctx workflow.Context, input *appstream.UpdateDirectoryConfigInput) (*appstream.UpdateDirectoryConfigOutput, error) {
	var output appstream.UpdateDirectoryConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateDirectoryConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) UpdateDirectoryConfigAsync(ctx workflow.Context, input *appstream.UpdateDirectoryConfigInput) *AppstreamUpdateDirectoryConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateDirectoryConfig", input)
	return &AppstreamUpdateDirectoryConfigFuture{Future: future}
}

func (a *AppStreamStub) UpdateFleet(ctx workflow.Context, input *appstream.UpdateFleetInput) (*appstream.UpdateFleetOutput, error) {
	var output appstream.UpdateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) UpdateFleetAsync(ctx workflow.Context, input *appstream.UpdateFleetInput) *AppstreamUpdateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateFleet", input)
	return &AppstreamUpdateFleetFuture{Future: future}
}

func (a *AppStreamStub) UpdateImagePermissions(ctx workflow.Context, input *appstream.UpdateImagePermissionsInput) (*appstream.UpdateImagePermissionsOutput, error) {
	var output appstream.UpdateImagePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateImagePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) UpdateImagePermissionsAsync(ctx workflow.Context, input *appstream.UpdateImagePermissionsInput) *AppstreamUpdateImagePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateImagePermissions", input)
	return &AppstreamUpdateImagePermissionsFuture{Future: future}
}

func (a *AppStreamStub) UpdateStack(ctx workflow.Context, input *appstream.UpdateStackInput) (*appstream.UpdateStackOutput, error) {
	var output appstream.UpdateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *AppStreamStub) UpdateStackAsync(ctx workflow.Context, input *appstream.UpdateStackInput) *AppstreamUpdateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appstream.UpdateStack", input)
	return &AppstreamUpdateStackFuture{Future: future}
}

func (a *AppStreamStub) WaitUntilFleetStarted(ctx workflow.Context, input *appstream.DescribeFleetsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.appstream.WaitUntilFleetStarted", input).Get(ctx, nil)
}

func (a *AppStreamStub) WaitUntilFleetStartedAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.appstream.WaitUntilFleetStarted", input)
}

func (a *AppStreamStub) WaitUntilFleetStopped(ctx workflow.Context, input *appstream.DescribeFleetsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.appstream.WaitUntilFleetStopped", input).Get(ctx, nil)
}

func (a *AppStreamStub) WaitUntilFleetStoppedAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.appstream.WaitUntilFleetStopped", input)
}
