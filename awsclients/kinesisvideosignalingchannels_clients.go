// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/kinesisvideosignalingchannels"
	"go.temporal.io/sdk/workflow"
)

type KinesisVideoSignalingChannelsClient interface {
	GetIceServerConfig(ctx workflow.Context, input *kinesisvideosignalingchannels.GetIceServerConfigInput) (*kinesisvideosignalingchannels.GetIceServerConfigOutput, error)
	GetIceServerConfigAsync(ctx workflow.Context, input *kinesisvideosignalingchannels.GetIceServerConfigInput) *KinesisVideoSignalingChannelsGetIceServerConfigFuture

	SendAlexaOfferToMaster(ctx workflow.Context, input *kinesisvideosignalingchannels.SendAlexaOfferToMasterInput) (*kinesisvideosignalingchannels.SendAlexaOfferToMasterOutput, error)
	SendAlexaOfferToMasterAsync(ctx workflow.Context, input *kinesisvideosignalingchannels.SendAlexaOfferToMasterInput) *KinesisVideoSignalingChannelsSendAlexaOfferToMasterFuture
}

type KinesisVideoSignalingChannelsStub struct{}

func NewKinesisVideoSignalingChannelsStub() KinesisVideoSignalingChannelsClient {
	return &KinesisVideoSignalingChannelsStub{}
}

type KinesisVideoSignalingChannelsGetIceServerConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoSignalingChannelsGetIceServerConfigFuture) Get(ctx workflow.Context) (*kinesisvideosignalingchannels.GetIceServerConfigOutput, error) {
	var output kinesisvideosignalingchannels.GetIceServerConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoSignalingChannelsSendAlexaOfferToMasterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoSignalingChannelsSendAlexaOfferToMasterFuture) Get(ctx workflow.Context) (*kinesisvideosignalingchannels.SendAlexaOfferToMasterOutput, error) {
	var output kinesisvideosignalingchannels.SendAlexaOfferToMasterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *KinesisVideoSignalingChannelsStub) GetIceServerConfig(ctx workflow.Context, input *kinesisvideosignalingchannels.GetIceServerConfigInput) (*kinesisvideosignalingchannels.GetIceServerConfigOutput, error) {
	var output kinesisvideosignalingchannels.GetIceServerConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisvideosignalingchannels.GetIceServerConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisVideoSignalingChannelsStub) GetIceServerConfigAsync(ctx workflow.Context, input *kinesisvideosignalingchannels.GetIceServerConfigInput) *KinesisVideoSignalingChannelsGetIceServerConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisvideosignalingchannels.GetIceServerConfig", input)
	return &KinesisVideoSignalingChannelsGetIceServerConfigFuture{Future: future}
}

func (a *KinesisVideoSignalingChannelsStub) SendAlexaOfferToMaster(ctx workflow.Context, input *kinesisvideosignalingchannels.SendAlexaOfferToMasterInput) (*kinesisvideosignalingchannels.SendAlexaOfferToMasterOutput, error) {
	var output kinesisvideosignalingchannels.SendAlexaOfferToMasterOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisvideosignalingchannels.SendAlexaOfferToMaster", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisVideoSignalingChannelsStub) SendAlexaOfferToMasterAsync(ctx workflow.Context, input *kinesisvideosignalingchannels.SendAlexaOfferToMasterInput) *KinesisVideoSignalingChannelsSendAlexaOfferToMasterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisvideosignalingchannels.SendAlexaOfferToMaster", input)
	return &KinesisVideoSignalingChannelsSendAlexaOfferToMasterFuture{Future: future}
}
