// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/ses"
	"go.temporal.io/sdk/workflow"
)

type SESClient interface {
	CloneReceiptRuleSet(ctx workflow.Context, input *ses.CloneReceiptRuleSetInput) (*ses.CloneReceiptRuleSetOutput, error)
	CloneReceiptRuleSetAsync(ctx workflow.Context, input *ses.CloneReceiptRuleSetInput) *SesCloneReceiptRuleSetFuture

	CreateConfigurationSet(ctx workflow.Context, input *ses.CreateConfigurationSetInput) (*ses.CreateConfigurationSetOutput, error)
	CreateConfigurationSetAsync(ctx workflow.Context, input *ses.CreateConfigurationSetInput) *SesCreateConfigurationSetFuture

	CreateConfigurationSetEventDestination(ctx workflow.Context, input *ses.CreateConfigurationSetEventDestinationInput) (*ses.CreateConfigurationSetEventDestinationOutput, error)
	CreateConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.CreateConfigurationSetEventDestinationInput) *SesCreateConfigurationSetEventDestinationFuture

	CreateConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.CreateConfigurationSetTrackingOptionsInput) (*ses.CreateConfigurationSetTrackingOptionsOutput, error)
	CreateConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.CreateConfigurationSetTrackingOptionsInput) *SesCreateConfigurationSetTrackingOptionsFuture

	CreateCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.CreateCustomVerificationEmailTemplateInput) (*ses.CreateCustomVerificationEmailTemplateOutput, error)
	CreateCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.CreateCustomVerificationEmailTemplateInput) *SesCreateCustomVerificationEmailTemplateFuture

	CreateReceiptFilter(ctx workflow.Context, input *ses.CreateReceiptFilterInput) (*ses.CreateReceiptFilterOutput, error)
	CreateReceiptFilterAsync(ctx workflow.Context, input *ses.CreateReceiptFilterInput) *SesCreateReceiptFilterFuture

	CreateReceiptRule(ctx workflow.Context, input *ses.CreateReceiptRuleInput) (*ses.CreateReceiptRuleOutput, error)
	CreateReceiptRuleAsync(ctx workflow.Context, input *ses.CreateReceiptRuleInput) *SesCreateReceiptRuleFuture

	CreateReceiptRuleSet(ctx workflow.Context, input *ses.CreateReceiptRuleSetInput) (*ses.CreateReceiptRuleSetOutput, error)
	CreateReceiptRuleSetAsync(ctx workflow.Context, input *ses.CreateReceiptRuleSetInput) *SesCreateReceiptRuleSetFuture

	CreateTemplate(ctx workflow.Context, input *ses.CreateTemplateInput) (*ses.CreateTemplateOutput, error)
	CreateTemplateAsync(ctx workflow.Context, input *ses.CreateTemplateInput) *SesCreateTemplateFuture

	DeleteConfigurationSet(ctx workflow.Context, input *ses.DeleteConfigurationSetInput) (*ses.DeleteConfigurationSetOutput, error)
	DeleteConfigurationSetAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetInput) *SesDeleteConfigurationSetFuture

	DeleteConfigurationSetEventDestination(ctx workflow.Context, input *ses.DeleteConfigurationSetEventDestinationInput) (*ses.DeleteConfigurationSetEventDestinationOutput, error)
	DeleteConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetEventDestinationInput) *SesDeleteConfigurationSetEventDestinationFuture

	DeleteConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error)
	DeleteConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput) *SesDeleteConfigurationSetTrackingOptionsFuture

	DeleteCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.DeleteCustomVerificationEmailTemplateInput) (*ses.DeleteCustomVerificationEmailTemplateOutput, error)
	DeleteCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.DeleteCustomVerificationEmailTemplateInput) *SesDeleteCustomVerificationEmailTemplateFuture

	DeleteIdentity(ctx workflow.Context, input *ses.DeleteIdentityInput) (*ses.DeleteIdentityOutput, error)
	DeleteIdentityAsync(ctx workflow.Context, input *ses.DeleteIdentityInput) *SesDeleteIdentityFuture

	DeleteIdentityPolicy(ctx workflow.Context, input *ses.DeleteIdentityPolicyInput) (*ses.DeleteIdentityPolicyOutput, error)
	DeleteIdentityPolicyAsync(ctx workflow.Context, input *ses.DeleteIdentityPolicyInput) *SesDeleteIdentityPolicyFuture

	DeleteReceiptFilter(ctx workflow.Context, input *ses.DeleteReceiptFilterInput) (*ses.DeleteReceiptFilterOutput, error)
	DeleteReceiptFilterAsync(ctx workflow.Context, input *ses.DeleteReceiptFilterInput) *SesDeleteReceiptFilterFuture

	DeleteReceiptRule(ctx workflow.Context, input *ses.DeleteReceiptRuleInput) (*ses.DeleteReceiptRuleOutput, error)
	DeleteReceiptRuleAsync(ctx workflow.Context, input *ses.DeleteReceiptRuleInput) *SesDeleteReceiptRuleFuture

	DeleteReceiptRuleSet(ctx workflow.Context, input *ses.DeleteReceiptRuleSetInput) (*ses.DeleteReceiptRuleSetOutput, error)
	DeleteReceiptRuleSetAsync(ctx workflow.Context, input *ses.DeleteReceiptRuleSetInput) *SesDeleteReceiptRuleSetFuture

	DeleteTemplate(ctx workflow.Context, input *ses.DeleteTemplateInput) (*ses.DeleteTemplateOutput, error)
	DeleteTemplateAsync(ctx workflow.Context, input *ses.DeleteTemplateInput) *SesDeleteTemplateFuture

	DeleteVerifiedEmailAddress(ctx workflow.Context, input *ses.DeleteVerifiedEmailAddressInput) (*ses.DeleteVerifiedEmailAddressOutput, error)
	DeleteVerifiedEmailAddressAsync(ctx workflow.Context, input *ses.DeleteVerifiedEmailAddressInput) *SesDeleteVerifiedEmailAddressFuture

	DescribeActiveReceiptRuleSet(ctx workflow.Context, input *ses.DescribeActiveReceiptRuleSetInput) (*ses.DescribeActiveReceiptRuleSetOutput, error)
	DescribeActiveReceiptRuleSetAsync(ctx workflow.Context, input *ses.DescribeActiveReceiptRuleSetInput) *SesDescribeActiveReceiptRuleSetFuture

	DescribeConfigurationSet(ctx workflow.Context, input *ses.DescribeConfigurationSetInput) (*ses.DescribeConfigurationSetOutput, error)
	DescribeConfigurationSetAsync(ctx workflow.Context, input *ses.DescribeConfigurationSetInput) *SesDescribeConfigurationSetFuture

	DescribeReceiptRule(ctx workflow.Context, input *ses.DescribeReceiptRuleInput) (*ses.DescribeReceiptRuleOutput, error)
	DescribeReceiptRuleAsync(ctx workflow.Context, input *ses.DescribeReceiptRuleInput) *SesDescribeReceiptRuleFuture

	DescribeReceiptRuleSet(ctx workflow.Context, input *ses.DescribeReceiptRuleSetInput) (*ses.DescribeReceiptRuleSetOutput, error)
	DescribeReceiptRuleSetAsync(ctx workflow.Context, input *ses.DescribeReceiptRuleSetInput) *SesDescribeReceiptRuleSetFuture

	GetAccountSendingEnabled(ctx workflow.Context, input *ses.GetAccountSendingEnabledInput) (*ses.GetAccountSendingEnabledOutput, error)
	GetAccountSendingEnabledAsync(ctx workflow.Context, input *ses.GetAccountSendingEnabledInput) *SesGetAccountSendingEnabledFuture

	GetCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.GetCustomVerificationEmailTemplateInput) (*ses.GetCustomVerificationEmailTemplateOutput, error)
	GetCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.GetCustomVerificationEmailTemplateInput) *SesGetCustomVerificationEmailTemplateFuture

	GetIdentityDkimAttributes(ctx workflow.Context, input *ses.GetIdentityDkimAttributesInput) (*ses.GetIdentityDkimAttributesOutput, error)
	GetIdentityDkimAttributesAsync(ctx workflow.Context, input *ses.GetIdentityDkimAttributesInput) *SesGetIdentityDkimAttributesFuture

	GetIdentityMailFromDomainAttributes(ctx workflow.Context, input *ses.GetIdentityMailFromDomainAttributesInput) (*ses.GetIdentityMailFromDomainAttributesOutput, error)
	GetIdentityMailFromDomainAttributesAsync(ctx workflow.Context, input *ses.GetIdentityMailFromDomainAttributesInput) *SesGetIdentityMailFromDomainAttributesFuture

	GetIdentityNotificationAttributes(ctx workflow.Context, input *ses.GetIdentityNotificationAttributesInput) (*ses.GetIdentityNotificationAttributesOutput, error)
	GetIdentityNotificationAttributesAsync(ctx workflow.Context, input *ses.GetIdentityNotificationAttributesInput) *SesGetIdentityNotificationAttributesFuture

	GetIdentityPolicies(ctx workflow.Context, input *ses.GetIdentityPoliciesInput) (*ses.GetIdentityPoliciesOutput, error)
	GetIdentityPoliciesAsync(ctx workflow.Context, input *ses.GetIdentityPoliciesInput) *SesGetIdentityPoliciesFuture

	GetIdentityVerificationAttributes(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) (*ses.GetIdentityVerificationAttributesOutput, error)
	GetIdentityVerificationAttributesAsync(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) *SesGetIdentityVerificationAttributesFuture

	GetSendQuota(ctx workflow.Context, input *ses.GetSendQuotaInput) (*ses.GetSendQuotaOutput, error)
	GetSendQuotaAsync(ctx workflow.Context, input *ses.GetSendQuotaInput) *SesGetSendQuotaFuture

	GetSendStatistics(ctx workflow.Context, input *ses.GetSendStatisticsInput) (*ses.GetSendStatisticsOutput, error)
	GetSendStatisticsAsync(ctx workflow.Context, input *ses.GetSendStatisticsInput) *SesGetSendStatisticsFuture

	GetTemplate(ctx workflow.Context, input *ses.GetTemplateInput) (*ses.GetTemplateOutput, error)
	GetTemplateAsync(ctx workflow.Context, input *ses.GetTemplateInput) *SesGetTemplateFuture

	ListConfigurationSets(ctx workflow.Context, input *ses.ListConfigurationSetsInput) (*ses.ListConfigurationSetsOutput, error)
	ListConfigurationSetsAsync(ctx workflow.Context, input *ses.ListConfigurationSetsInput) *SesListConfigurationSetsFuture

	ListCustomVerificationEmailTemplates(ctx workflow.Context, input *ses.ListCustomVerificationEmailTemplatesInput) (*ses.ListCustomVerificationEmailTemplatesOutput, error)
	ListCustomVerificationEmailTemplatesAsync(ctx workflow.Context, input *ses.ListCustomVerificationEmailTemplatesInput) *SesListCustomVerificationEmailTemplatesFuture

	ListIdentities(ctx workflow.Context, input *ses.ListIdentitiesInput) (*ses.ListIdentitiesOutput, error)
	ListIdentitiesAsync(ctx workflow.Context, input *ses.ListIdentitiesInput) *SesListIdentitiesFuture

	ListIdentityPolicies(ctx workflow.Context, input *ses.ListIdentityPoliciesInput) (*ses.ListIdentityPoliciesOutput, error)
	ListIdentityPoliciesAsync(ctx workflow.Context, input *ses.ListIdentityPoliciesInput) *SesListIdentityPoliciesFuture

	ListReceiptFilters(ctx workflow.Context, input *ses.ListReceiptFiltersInput) (*ses.ListReceiptFiltersOutput, error)
	ListReceiptFiltersAsync(ctx workflow.Context, input *ses.ListReceiptFiltersInput) *SesListReceiptFiltersFuture

	ListReceiptRuleSets(ctx workflow.Context, input *ses.ListReceiptRuleSetsInput) (*ses.ListReceiptRuleSetsOutput, error)
	ListReceiptRuleSetsAsync(ctx workflow.Context, input *ses.ListReceiptRuleSetsInput) *SesListReceiptRuleSetsFuture

	ListTemplates(ctx workflow.Context, input *ses.ListTemplatesInput) (*ses.ListTemplatesOutput, error)
	ListTemplatesAsync(ctx workflow.Context, input *ses.ListTemplatesInput) *SesListTemplatesFuture

	ListVerifiedEmailAddresses(ctx workflow.Context, input *ses.ListVerifiedEmailAddressesInput) (*ses.ListVerifiedEmailAddressesOutput, error)
	ListVerifiedEmailAddressesAsync(ctx workflow.Context, input *ses.ListVerifiedEmailAddressesInput) *SesListVerifiedEmailAddressesFuture

	PutConfigurationSetDeliveryOptions(ctx workflow.Context, input *ses.PutConfigurationSetDeliveryOptionsInput) (*ses.PutConfigurationSetDeliveryOptionsOutput, error)
	PutConfigurationSetDeliveryOptionsAsync(ctx workflow.Context, input *ses.PutConfigurationSetDeliveryOptionsInput) *SesPutConfigurationSetDeliveryOptionsFuture

	PutIdentityPolicy(ctx workflow.Context, input *ses.PutIdentityPolicyInput) (*ses.PutIdentityPolicyOutput, error)
	PutIdentityPolicyAsync(ctx workflow.Context, input *ses.PutIdentityPolicyInput) *SesPutIdentityPolicyFuture

	ReorderReceiptRuleSet(ctx workflow.Context, input *ses.ReorderReceiptRuleSetInput) (*ses.ReorderReceiptRuleSetOutput, error)
	ReorderReceiptRuleSetAsync(ctx workflow.Context, input *ses.ReorderReceiptRuleSetInput) *SesReorderReceiptRuleSetFuture

	SendBounce(ctx workflow.Context, input *ses.SendBounceInput) (*ses.SendBounceOutput, error)
	SendBounceAsync(ctx workflow.Context, input *ses.SendBounceInput) *SesSendBounceFuture

	SendBulkTemplatedEmail(ctx workflow.Context, input *ses.SendBulkTemplatedEmailInput) (*ses.SendBulkTemplatedEmailOutput, error)
	SendBulkTemplatedEmailAsync(ctx workflow.Context, input *ses.SendBulkTemplatedEmailInput) *SesSendBulkTemplatedEmailFuture

	SendCustomVerificationEmail(ctx workflow.Context, input *ses.SendCustomVerificationEmailInput) (*ses.SendCustomVerificationEmailOutput, error)
	SendCustomVerificationEmailAsync(ctx workflow.Context, input *ses.SendCustomVerificationEmailInput) *SesSendCustomVerificationEmailFuture

	SendEmail(ctx workflow.Context, input *ses.SendEmailInput) (*ses.SendEmailOutput, error)
	SendEmailAsync(ctx workflow.Context, input *ses.SendEmailInput) *SesSendEmailFuture

	SendRawEmail(ctx workflow.Context, input *ses.SendRawEmailInput) (*ses.SendRawEmailOutput, error)
	SendRawEmailAsync(ctx workflow.Context, input *ses.SendRawEmailInput) *SesSendRawEmailFuture

	SendTemplatedEmail(ctx workflow.Context, input *ses.SendTemplatedEmailInput) (*ses.SendTemplatedEmailOutput, error)
	SendTemplatedEmailAsync(ctx workflow.Context, input *ses.SendTemplatedEmailInput) *SesSendTemplatedEmailFuture

	SetActiveReceiptRuleSet(ctx workflow.Context, input *ses.SetActiveReceiptRuleSetInput) (*ses.SetActiveReceiptRuleSetOutput, error)
	SetActiveReceiptRuleSetAsync(ctx workflow.Context, input *ses.SetActiveReceiptRuleSetInput) *SesSetActiveReceiptRuleSetFuture

	SetIdentityDkimEnabled(ctx workflow.Context, input *ses.SetIdentityDkimEnabledInput) (*ses.SetIdentityDkimEnabledOutput, error)
	SetIdentityDkimEnabledAsync(ctx workflow.Context, input *ses.SetIdentityDkimEnabledInput) *SesSetIdentityDkimEnabledFuture

	SetIdentityFeedbackForwardingEnabled(ctx workflow.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error)
	SetIdentityFeedbackForwardingEnabledAsync(ctx workflow.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput) *SesSetIdentityFeedbackForwardingEnabledFuture

	SetIdentityHeadersInNotificationsEnabled(ctx workflow.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error)
	SetIdentityHeadersInNotificationsEnabledAsync(ctx workflow.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput) *SesSetIdentityHeadersInNotificationsEnabledFuture

	SetIdentityMailFromDomain(ctx workflow.Context, input *ses.SetIdentityMailFromDomainInput) (*ses.SetIdentityMailFromDomainOutput, error)
	SetIdentityMailFromDomainAsync(ctx workflow.Context, input *ses.SetIdentityMailFromDomainInput) *SesSetIdentityMailFromDomainFuture

	SetIdentityNotificationTopic(ctx workflow.Context, input *ses.SetIdentityNotificationTopicInput) (*ses.SetIdentityNotificationTopicOutput, error)
	SetIdentityNotificationTopicAsync(ctx workflow.Context, input *ses.SetIdentityNotificationTopicInput) *SesSetIdentityNotificationTopicFuture

	SetReceiptRulePosition(ctx workflow.Context, input *ses.SetReceiptRulePositionInput) (*ses.SetReceiptRulePositionOutput, error)
	SetReceiptRulePositionAsync(ctx workflow.Context, input *ses.SetReceiptRulePositionInput) *SesSetReceiptRulePositionFuture

	TestRenderTemplate(ctx workflow.Context, input *ses.TestRenderTemplateInput) (*ses.TestRenderTemplateOutput, error)
	TestRenderTemplateAsync(ctx workflow.Context, input *ses.TestRenderTemplateInput) *SesTestRenderTemplateFuture

	UpdateAccountSendingEnabled(ctx workflow.Context, input *ses.UpdateAccountSendingEnabledInput) (*ses.UpdateAccountSendingEnabledOutput, error)
	UpdateAccountSendingEnabledAsync(ctx workflow.Context, input *ses.UpdateAccountSendingEnabledInput) *SesUpdateAccountSendingEnabledFuture

	UpdateConfigurationSetEventDestination(ctx workflow.Context, input *ses.UpdateConfigurationSetEventDestinationInput) (*ses.UpdateConfigurationSetEventDestinationOutput, error)
	UpdateConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetEventDestinationInput) *SesUpdateConfigurationSetEventDestinationFuture

	UpdateConfigurationSetReputationMetricsEnabled(ctx workflow.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error)
	UpdateConfigurationSetReputationMetricsEnabledAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput) *SesUpdateConfigurationSetReputationMetricsEnabledFuture

	UpdateConfigurationSetSendingEnabled(ctx workflow.Context, input *ses.UpdateConfigurationSetSendingEnabledInput) (*ses.UpdateConfigurationSetSendingEnabledOutput, error)
	UpdateConfigurationSetSendingEnabledAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetSendingEnabledInput) *SesUpdateConfigurationSetSendingEnabledFuture

	UpdateConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error)
	UpdateConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput) *SesUpdateConfigurationSetTrackingOptionsFuture

	UpdateCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.UpdateCustomVerificationEmailTemplateInput) (*ses.UpdateCustomVerificationEmailTemplateOutput, error)
	UpdateCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.UpdateCustomVerificationEmailTemplateInput) *SesUpdateCustomVerificationEmailTemplateFuture

	UpdateReceiptRule(ctx workflow.Context, input *ses.UpdateReceiptRuleInput) (*ses.UpdateReceiptRuleOutput, error)
	UpdateReceiptRuleAsync(ctx workflow.Context, input *ses.UpdateReceiptRuleInput) *SesUpdateReceiptRuleFuture

	UpdateTemplate(ctx workflow.Context, input *ses.UpdateTemplateInput) (*ses.UpdateTemplateOutput, error)
	UpdateTemplateAsync(ctx workflow.Context, input *ses.UpdateTemplateInput) *SesUpdateTemplateFuture

	VerifyDomainDkim(ctx workflow.Context, input *ses.VerifyDomainDkimInput) (*ses.VerifyDomainDkimOutput, error)
	VerifyDomainDkimAsync(ctx workflow.Context, input *ses.VerifyDomainDkimInput) *SesVerifyDomainDkimFuture

	VerifyDomainIdentity(ctx workflow.Context, input *ses.VerifyDomainIdentityInput) (*ses.VerifyDomainIdentityOutput, error)
	VerifyDomainIdentityAsync(ctx workflow.Context, input *ses.VerifyDomainIdentityInput) *SesVerifyDomainIdentityFuture

	VerifyEmailAddress(ctx workflow.Context, input *ses.VerifyEmailAddressInput) (*ses.VerifyEmailAddressOutput, error)
	VerifyEmailAddressAsync(ctx workflow.Context, input *ses.VerifyEmailAddressInput) *SesVerifyEmailAddressFuture

	VerifyEmailIdentity(ctx workflow.Context, input *ses.VerifyEmailIdentityInput) (*ses.VerifyEmailIdentityOutput, error)
	VerifyEmailIdentityAsync(ctx workflow.Context, input *ses.VerifyEmailIdentityInput) *SesVerifyEmailIdentityFuture

	WaitUntilIdentityExists(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) error
	WaitUntilIdentityExistsAsync(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) *VoidFuture
}

type SESStub struct{}

func NewSESStub() SESClient {
	return &SESStub{}
}

type SesCloneReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SesCloneReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.CloneReceiptRuleSetOutput, error) {
	var output ses.CloneReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesCreateConfigurationSetFuture struct {
	Future workflow.Future
}

func (r *SesCreateConfigurationSetFuture) Get(ctx workflow.Context) (*ses.CreateConfigurationSetOutput, error) {
	var output ses.CreateConfigurationSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesCreateConfigurationSetEventDestinationFuture struct {
	Future workflow.Future
}

func (r *SesCreateConfigurationSetEventDestinationFuture) Get(ctx workflow.Context) (*ses.CreateConfigurationSetEventDestinationOutput, error) {
	var output ses.CreateConfigurationSetEventDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesCreateConfigurationSetTrackingOptionsFuture struct {
	Future workflow.Future
}

func (r *SesCreateConfigurationSetTrackingOptionsFuture) Get(ctx workflow.Context) (*ses.CreateConfigurationSetTrackingOptionsOutput, error) {
	var output ses.CreateConfigurationSetTrackingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesCreateCustomVerificationEmailTemplateFuture struct {
	Future workflow.Future
}

func (r *SesCreateCustomVerificationEmailTemplateFuture) Get(ctx workflow.Context) (*ses.CreateCustomVerificationEmailTemplateOutput, error) {
	var output ses.CreateCustomVerificationEmailTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesCreateReceiptFilterFuture struct {
	Future workflow.Future
}

func (r *SesCreateReceiptFilterFuture) Get(ctx workflow.Context) (*ses.CreateReceiptFilterOutput, error) {
	var output ses.CreateReceiptFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesCreateReceiptRuleFuture struct {
	Future workflow.Future
}

func (r *SesCreateReceiptRuleFuture) Get(ctx workflow.Context) (*ses.CreateReceiptRuleOutput, error) {
	var output ses.CreateReceiptRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesCreateReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SesCreateReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.CreateReceiptRuleSetOutput, error) {
	var output ses.CreateReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesCreateTemplateFuture struct {
	Future workflow.Future
}

func (r *SesCreateTemplateFuture) Get(ctx workflow.Context) (*ses.CreateTemplateOutput, error) {
	var output ses.CreateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDeleteConfigurationSetFuture struct {
	Future workflow.Future
}

func (r *SesDeleteConfigurationSetFuture) Get(ctx workflow.Context) (*ses.DeleteConfigurationSetOutput, error) {
	var output ses.DeleteConfigurationSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDeleteConfigurationSetEventDestinationFuture struct {
	Future workflow.Future
}

func (r *SesDeleteConfigurationSetEventDestinationFuture) Get(ctx workflow.Context) (*ses.DeleteConfigurationSetEventDestinationOutput, error) {
	var output ses.DeleteConfigurationSetEventDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDeleteConfigurationSetTrackingOptionsFuture struct {
	Future workflow.Future
}

func (r *SesDeleteConfigurationSetTrackingOptionsFuture) Get(ctx workflow.Context) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error) {
	var output ses.DeleteConfigurationSetTrackingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDeleteCustomVerificationEmailTemplateFuture struct {
	Future workflow.Future
}

func (r *SesDeleteCustomVerificationEmailTemplateFuture) Get(ctx workflow.Context) (*ses.DeleteCustomVerificationEmailTemplateOutput, error) {
	var output ses.DeleteCustomVerificationEmailTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDeleteIdentityFuture struct {
	Future workflow.Future
}

func (r *SesDeleteIdentityFuture) Get(ctx workflow.Context) (*ses.DeleteIdentityOutput, error) {
	var output ses.DeleteIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDeleteIdentityPolicyFuture struct {
	Future workflow.Future
}

func (r *SesDeleteIdentityPolicyFuture) Get(ctx workflow.Context) (*ses.DeleteIdentityPolicyOutput, error) {
	var output ses.DeleteIdentityPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDeleteReceiptFilterFuture struct {
	Future workflow.Future
}

func (r *SesDeleteReceiptFilterFuture) Get(ctx workflow.Context) (*ses.DeleteReceiptFilterOutput, error) {
	var output ses.DeleteReceiptFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDeleteReceiptRuleFuture struct {
	Future workflow.Future
}

func (r *SesDeleteReceiptRuleFuture) Get(ctx workflow.Context) (*ses.DeleteReceiptRuleOutput, error) {
	var output ses.DeleteReceiptRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDeleteReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SesDeleteReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.DeleteReceiptRuleSetOutput, error) {
	var output ses.DeleteReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDeleteTemplateFuture struct {
	Future workflow.Future
}

func (r *SesDeleteTemplateFuture) Get(ctx workflow.Context) (*ses.DeleteTemplateOutput, error) {
	var output ses.DeleteTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDeleteVerifiedEmailAddressFuture struct {
	Future workflow.Future
}

func (r *SesDeleteVerifiedEmailAddressFuture) Get(ctx workflow.Context) (*ses.DeleteVerifiedEmailAddressOutput, error) {
	var output ses.DeleteVerifiedEmailAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDescribeActiveReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SesDescribeActiveReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.DescribeActiveReceiptRuleSetOutput, error) {
	var output ses.DescribeActiveReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDescribeConfigurationSetFuture struct {
	Future workflow.Future
}

func (r *SesDescribeConfigurationSetFuture) Get(ctx workflow.Context) (*ses.DescribeConfigurationSetOutput, error) {
	var output ses.DescribeConfigurationSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDescribeReceiptRuleFuture struct {
	Future workflow.Future
}

func (r *SesDescribeReceiptRuleFuture) Get(ctx workflow.Context) (*ses.DescribeReceiptRuleOutput, error) {
	var output ses.DescribeReceiptRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesDescribeReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SesDescribeReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.DescribeReceiptRuleSetOutput, error) {
	var output ses.DescribeReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesGetAccountSendingEnabledFuture struct {
	Future workflow.Future
}

func (r *SesGetAccountSendingEnabledFuture) Get(ctx workflow.Context) (*ses.GetAccountSendingEnabledOutput, error) {
	var output ses.GetAccountSendingEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesGetCustomVerificationEmailTemplateFuture struct {
	Future workflow.Future
}

func (r *SesGetCustomVerificationEmailTemplateFuture) Get(ctx workflow.Context) (*ses.GetCustomVerificationEmailTemplateOutput, error) {
	var output ses.GetCustomVerificationEmailTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesGetIdentityDkimAttributesFuture struct {
	Future workflow.Future
}

func (r *SesGetIdentityDkimAttributesFuture) Get(ctx workflow.Context) (*ses.GetIdentityDkimAttributesOutput, error) {
	var output ses.GetIdentityDkimAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesGetIdentityMailFromDomainAttributesFuture struct {
	Future workflow.Future
}

func (r *SesGetIdentityMailFromDomainAttributesFuture) Get(ctx workflow.Context) (*ses.GetIdentityMailFromDomainAttributesOutput, error) {
	var output ses.GetIdentityMailFromDomainAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesGetIdentityNotificationAttributesFuture struct {
	Future workflow.Future
}

func (r *SesGetIdentityNotificationAttributesFuture) Get(ctx workflow.Context) (*ses.GetIdentityNotificationAttributesOutput, error) {
	var output ses.GetIdentityNotificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesGetIdentityPoliciesFuture struct {
	Future workflow.Future
}

func (r *SesGetIdentityPoliciesFuture) Get(ctx workflow.Context) (*ses.GetIdentityPoliciesOutput, error) {
	var output ses.GetIdentityPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesGetIdentityVerificationAttributesFuture struct {
	Future workflow.Future
}

func (r *SesGetIdentityVerificationAttributesFuture) Get(ctx workflow.Context) (*ses.GetIdentityVerificationAttributesOutput, error) {
	var output ses.GetIdentityVerificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesGetSendQuotaFuture struct {
	Future workflow.Future
}

func (r *SesGetSendQuotaFuture) Get(ctx workflow.Context) (*ses.GetSendQuotaOutput, error) {
	var output ses.GetSendQuotaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesGetSendStatisticsFuture struct {
	Future workflow.Future
}

func (r *SesGetSendStatisticsFuture) Get(ctx workflow.Context) (*ses.GetSendStatisticsOutput, error) {
	var output ses.GetSendStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesGetTemplateFuture struct {
	Future workflow.Future
}

func (r *SesGetTemplateFuture) Get(ctx workflow.Context) (*ses.GetTemplateOutput, error) {
	var output ses.GetTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesListConfigurationSetsFuture struct {
	Future workflow.Future
}

func (r *SesListConfigurationSetsFuture) Get(ctx workflow.Context) (*ses.ListConfigurationSetsOutput, error) {
	var output ses.ListConfigurationSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesListCustomVerificationEmailTemplatesFuture struct {
	Future workflow.Future
}

func (r *SesListCustomVerificationEmailTemplatesFuture) Get(ctx workflow.Context) (*ses.ListCustomVerificationEmailTemplatesOutput, error) {
	var output ses.ListCustomVerificationEmailTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesListIdentitiesFuture struct {
	Future workflow.Future
}

func (r *SesListIdentitiesFuture) Get(ctx workflow.Context) (*ses.ListIdentitiesOutput, error) {
	var output ses.ListIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesListIdentityPoliciesFuture struct {
	Future workflow.Future
}

func (r *SesListIdentityPoliciesFuture) Get(ctx workflow.Context) (*ses.ListIdentityPoliciesOutput, error) {
	var output ses.ListIdentityPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesListReceiptFiltersFuture struct {
	Future workflow.Future
}

func (r *SesListReceiptFiltersFuture) Get(ctx workflow.Context) (*ses.ListReceiptFiltersOutput, error) {
	var output ses.ListReceiptFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesListReceiptRuleSetsFuture struct {
	Future workflow.Future
}

func (r *SesListReceiptRuleSetsFuture) Get(ctx workflow.Context) (*ses.ListReceiptRuleSetsOutput, error) {
	var output ses.ListReceiptRuleSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesListTemplatesFuture struct {
	Future workflow.Future
}

func (r *SesListTemplatesFuture) Get(ctx workflow.Context) (*ses.ListTemplatesOutput, error) {
	var output ses.ListTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesListVerifiedEmailAddressesFuture struct {
	Future workflow.Future
}

func (r *SesListVerifiedEmailAddressesFuture) Get(ctx workflow.Context) (*ses.ListVerifiedEmailAddressesOutput, error) {
	var output ses.ListVerifiedEmailAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesPutConfigurationSetDeliveryOptionsFuture struct {
	Future workflow.Future
}

func (r *SesPutConfigurationSetDeliveryOptionsFuture) Get(ctx workflow.Context) (*ses.PutConfigurationSetDeliveryOptionsOutput, error) {
	var output ses.PutConfigurationSetDeliveryOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesPutIdentityPolicyFuture struct {
	Future workflow.Future
}

func (r *SesPutIdentityPolicyFuture) Get(ctx workflow.Context) (*ses.PutIdentityPolicyOutput, error) {
	var output ses.PutIdentityPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesReorderReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SesReorderReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.ReorderReceiptRuleSetOutput, error) {
	var output ses.ReorderReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSendBounceFuture struct {
	Future workflow.Future
}

func (r *SesSendBounceFuture) Get(ctx workflow.Context) (*ses.SendBounceOutput, error) {
	var output ses.SendBounceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSendBulkTemplatedEmailFuture struct {
	Future workflow.Future
}

func (r *SesSendBulkTemplatedEmailFuture) Get(ctx workflow.Context) (*ses.SendBulkTemplatedEmailOutput, error) {
	var output ses.SendBulkTemplatedEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSendCustomVerificationEmailFuture struct {
	Future workflow.Future
}

func (r *SesSendCustomVerificationEmailFuture) Get(ctx workflow.Context) (*ses.SendCustomVerificationEmailOutput, error) {
	var output ses.SendCustomVerificationEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSendEmailFuture struct {
	Future workflow.Future
}

func (r *SesSendEmailFuture) Get(ctx workflow.Context) (*ses.SendEmailOutput, error) {
	var output ses.SendEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSendRawEmailFuture struct {
	Future workflow.Future
}

func (r *SesSendRawEmailFuture) Get(ctx workflow.Context) (*ses.SendRawEmailOutput, error) {
	var output ses.SendRawEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSendTemplatedEmailFuture struct {
	Future workflow.Future
}

func (r *SesSendTemplatedEmailFuture) Get(ctx workflow.Context) (*ses.SendTemplatedEmailOutput, error) {
	var output ses.SendTemplatedEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSetActiveReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SesSetActiveReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.SetActiveReceiptRuleSetOutput, error) {
	var output ses.SetActiveReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSetIdentityDkimEnabledFuture struct {
	Future workflow.Future
}

func (r *SesSetIdentityDkimEnabledFuture) Get(ctx workflow.Context) (*ses.SetIdentityDkimEnabledOutput, error) {
	var output ses.SetIdentityDkimEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSetIdentityFeedbackForwardingEnabledFuture struct {
	Future workflow.Future
}

func (r *SesSetIdentityFeedbackForwardingEnabledFuture) Get(ctx workflow.Context) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error) {
	var output ses.SetIdentityFeedbackForwardingEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSetIdentityHeadersInNotificationsEnabledFuture struct {
	Future workflow.Future
}

func (r *SesSetIdentityHeadersInNotificationsEnabledFuture) Get(ctx workflow.Context) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error) {
	var output ses.SetIdentityHeadersInNotificationsEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSetIdentityMailFromDomainFuture struct {
	Future workflow.Future
}

func (r *SesSetIdentityMailFromDomainFuture) Get(ctx workflow.Context) (*ses.SetIdentityMailFromDomainOutput, error) {
	var output ses.SetIdentityMailFromDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSetIdentityNotificationTopicFuture struct {
	Future workflow.Future
}

func (r *SesSetIdentityNotificationTopicFuture) Get(ctx workflow.Context) (*ses.SetIdentityNotificationTopicOutput, error) {
	var output ses.SetIdentityNotificationTopicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesSetReceiptRulePositionFuture struct {
	Future workflow.Future
}

func (r *SesSetReceiptRulePositionFuture) Get(ctx workflow.Context) (*ses.SetReceiptRulePositionOutput, error) {
	var output ses.SetReceiptRulePositionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesTestRenderTemplateFuture struct {
	Future workflow.Future
}

func (r *SesTestRenderTemplateFuture) Get(ctx workflow.Context) (*ses.TestRenderTemplateOutput, error) {
	var output ses.TestRenderTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesUpdateAccountSendingEnabledFuture struct {
	Future workflow.Future
}

func (r *SesUpdateAccountSendingEnabledFuture) Get(ctx workflow.Context) (*ses.UpdateAccountSendingEnabledOutput, error) {
	var output ses.UpdateAccountSendingEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesUpdateConfigurationSetEventDestinationFuture struct {
	Future workflow.Future
}

func (r *SesUpdateConfigurationSetEventDestinationFuture) Get(ctx workflow.Context) (*ses.UpdateConfigurationSetEventDestinationOutput, error) {
	var output ses.UpdateConfigurationSetEventDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesUpdateConfigurationSetReputationMetricsEnabledFuture struct {
	Future workflow.Future
}

func (r *SesUpdateConfigurationSetReputationMetricsEnabledFuture) Get(ctx workflow.Context) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error) {
	var output ses.UpdateConfigurationSetReputationMetricsEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesUpdateConfigurationSetSendingEnabledFuture struct {
	Future workflow.Future
}

func (r *SesUpdateConfigurationSetSendingEnabledFuture) Get(ctx workflow.Context) (*ses.UpdateConfigurationSetSendingEnabledOutput, error) {
	var output ses.UpdateConfigurationSetSendingEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesUpdateConfigurationSetTrackingOptionsFuture struct {
	Future workflow.Future
}

func (r *SesUpdateConfigurationSetTrackingOptionsFuture) Get(ctx workflow.Context) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error) {
	var output ses.UpdateConfigurationSetTrackingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesUpdateCustomVerificationEmailTemplateFuture struct {
	Future workflow.Future
}

func (r *SesUpdateCustomVerificationEmailTemplateFuture) Get(ctx workflow.Context) (*ses.UpdateCustomVerificationEmailTemplateOutput, error) {
	var output ses.UpdateCustomVerificationEmailTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesUpdateReceiptRuleFuture struct {
	Future workflow.Future
}

func (r *SesUpdateReceiptRuleFuture) Get(ctx workflow.Context) (*ses.UpdateReceiptRuleOutput, error) {
	var output ses.UpdateReceiptRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesUpdateTemplateFuture struct {
	Future workflow.Future
}

func (r *SesUpdateTemplateFuture) Get(ctx workflow.Context) (*ses.UpdateTemplateOutput, error) {
	var output ses.UpdateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesVerifyDomainDkimFuture struct {
	Future workflow.Future
}

func (r *SesVerifyDomainDkimFuture) Get(ctx workflow.Context) (*ses.VerifyDomainDkimOutput, error) {
	var output ses.VerifyDomainDkimOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesVerifyDomainIdentityFuture struct {
	Future workflow.Future
}

func (r *SesVerifyDomainIdentityFuture) Get(ctx workflow.Context) (*ses.VerifyDomainIdentityOutput, error) {
	var output ses.VerifyDomainIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesVerifyEmailAddressFuture struct {
	Future workflow.Future
}

func (r *SesVerifyEmailAddressFuture) Get(ctx workflow.Context) (*ses.VerifyEmailAddressOutput, error) {
	var output ses.VerifyEmailAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SesVerifyEmailIdentityFuture struct {
	Future workflow.Future
}

func (r *SesVerifyEmailIdentityFuture) Get(ctx workflow.Context) (*ses.VerifyEmailIdentityOutput, error) {
	var output ses.VerifyEmailIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CloneReceiptRuleSet(ctx workflow.Context, input *ses.CloneReceiptRuleSetInput) (*ses.CloneReceiptRuleSetOutput, error) {
	var output ses.CloneReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CloneReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CloneReceiptRuleSetAsync(ctx workflow.Context, input *ses.CloneReceiptRuleSetInput) *SesCloneReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CloneReceiptRuleSet", input)
	return &SesCloneReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) CreateConfigurationSet(ctx workflow.Context, input *ses.CreateConfigurationSetInput) (*ses.CreateConfigurationSetOutput, error) {
	var output ses.CreateConfigurationSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateConfigurationSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateConfigurationSetAsync(ctx workflow.Context, input *ses.CreateConfigurationSetInput) *SesCreateConfigurationSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateConfigurationSet", input)
	return &SesCreateConfigurationSetFuture{Future: future}
}

func (a *SESStub) CreateConfigurationSetEventDestination(ctx workflow.Context, input *ses.CreateConfigurationSetEventDestinationInput) (*ses.CreateConfigurationSetEventDestinationOutput, error) {
	var output ses.CreateConfigurationSetEventDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateConfigurationSetEventDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.CreateConfigurationSetEventDestinationInput) *SesCreateConfigurationSetEventDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateConfigurationSetEventDestination", input)
	return &SesCreateConfigurationSetEventDestinationFuture{Future: future}
}

func (a *SESStub) CreateConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.CreateConfigurationSetTrackingOptionsInput) (*ses.CreateConfigurationSetTrackingOptionsOutput, error) {
	var output ses.CreateConfigurationSetTrackingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateConfigurationSetTrackingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.CreateConfigurationSetTrackingOptionsInput) *SesCreateConfigurationSetTrackingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateConfigurationSetTrackingOptions", input)
	return &SesCreateConfigurationSetTrackingOptionsFuture{Future: future}
}

func (a *SESStub) CreateCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.CreateCustomVerificationEmailTemplateInput) (*ses.CreateCustomVerificationEmailTemplateOutput, error) {
	var output ses.CreateCustomVerificationEmailTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateCustomVerificationEmailTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.CreateCustomVerificationEmailTemplateInput) *SesCreateCustomVerificationEmailTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateCustomVerificationEmailTemplate", input)
	return &SesCreateCustomVerificationEmailTemplateFuture{Future: future}
}

func (a *SESStub) CreateReceiptFilter(ctx workflow.Context, input *ses.CreateReceiptFilterInput) (*ses.CreateReceiptFilterOutput, error) {
	var output ses.CreateReceiptFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateReceiptFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateReceiptFilterAsync(ctx workflow.Context, input *ses.CreateReceiptFilterInput) *SesCreateReceiptFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateReceiptFilter", input)
	return &SesCreateReceiptFilterFuture{Future: future}
}

func (a *SESStub) CreateReceiptRule(ctx workflow.Context, input *ses.CreateReceiptRuleInput) (*ses.CreateReceiptRuleOutput, error) {
	var output ses.CreateReceiptRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateReceiptRule", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateReceiptRuleAsync(ctx workflow.Context, input *ses.CreateReceiptRuleInput) *SesCreateReceiptRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateReceiptRule", input)
	return &SesCreateReceiptRuleFuture{Future: future}
}

func (a *SESStub) CreateReceiptRuleSet(ctx workflow.Context, input *ses.CreateReceiptRuleSetInput) (*ses.CreateReceiptRuleSetOutput, error) {
	var output ses.CreateReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateReceiptRuleSetAsync(ctx workflow.Context, input *ses.CreateReceiptRuleSetInput) *SesCreateReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateReceiptRuleSet", input)
	return &SesCreateReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) CreateTemplate(ctx workflow.Context, input *ses.CreateTemplateInput) (*ses.CreateTemplateOutput, error) {
	var output ses.CreateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateTemplateAsync(ctx workflow.Context, input *ses.CreateTemplateInput) *SesCreateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateTemplate", input)
	return &SesCreateTemplateFuture{Future: future}
}

func (a *SESStub) DeleteConfigurationSet(ctx workflow.Context, input *ses.DeleteConfigurationSetInput) (*ses.DeleteConfigurationSetOutput, error) {
	var output ses.DeleteConfigurationSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteConfigurationSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteConfigurationSetAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetInput) *SesDeleteConfigurationSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteConfigurationSet", input)
	return &SesDeleteConfigurationSetFuture{Future: future}
}

func (a *SESStub) DeleteConfigurationSetEventDestination(ctx workflow.Context, input *ses.DeleteConfigurationSetEventDestinationInput) (*ses.DeleteConfigurationSetEventDestinationOutput, error) {
	var output ses.DeleteConfigurationSetEventDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteConfigurationSetEventDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetEventDestinationInput) *SesDeleteConfigurationSetEventDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteConfigurationSetEventDestination", input)
	return &SesDeleteConfigurationSetEventDestinationFuture{Future: future}
}

func (a *SESStub) DeleteConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error) {
	var output ses.DeleteConfigurationSetTrackingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteConfigurationSetTrackingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput) *SesDeleteConfigurationSetTrackingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteConfigurationSetTrackingOptions", input)
	return &SesDeleteConfigurationSetTrackingOptionsFuture{Future: future}
}

func (a *SESStub) DeleteCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.DeleteCustomVerificationEmailTemplateInput) (*ses.DeleteCustomVerificationEmailTemplateOutput, error) {
	var output ses.DeleteCustomVerificationEmailTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteCustomVerificationEmailTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.DeleteCustomVerificationEmailTemplateInput) *SesDeleteCustomVerificationEmailTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteCustomVerificationEmailTemplate", input)
	return &SesDeleteCustomVerificationEmailTemplateFuture{Future: future}
}

func (a *SESStub) DeleteIdentity(ctx workflow.Context, input *ses.DeleteIdentityInput) (*ses.DeleteIdentityOutput, error) {
	var output ses.DeleteIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteIdentityAsync(ctx workflow.Context, input *ses.DeleteIdentityInput) *SesDeleteIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteIdentity", input)
	return &SesDeleteIdentityFuture{Future: future}
}

func (a *SESStub) DeleteIdentityPolicy(ctx workflow.Context, input *ses.DeleteIdentityPolicyInput) (*ses.DeleteIdentityPolicyOutput, error) {
	var output ses.DeleteIdentityPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteIdentityPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteIdentityPolicyAsync(ctx workflow.Context, input *ses.DeleteIdentityPolicyInput) *SesDeleteIdentityPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteIdentityPolicy", input)
	return &SesDeleteIdentityPolicyFuture{Future: future}
}

func (a *SESStub) DeleteReceiptFilter(ctx workflow.Context, input *ses.DeleteReceiptFilterInput) (*ses.DeleteReceiptFilterOutput, error) {
	var output ses.DeleteReceiptFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteReceiptFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteReceiptFilterAsync(ctx workflow.Context, input *ses.DeleteReceiptFilterInput) *SesDeleteReceiptFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteReceiptFilter", input)
	return &SesDeleteReceiptFilterFuture{Future: future}
}

func (a *SESStub) DeleteReceiptRule(ctx workflow.Context, input *ses.DeleteReceiptRuleInput) (*ses.DeleteReceiptRuleOutput, error) {
	var output ses.DeleteReceiptRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteReceiptRule", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteReceiptRuleAsync(ctx workflow.Context, input *ses.DeleteReceiptRuleInput) *SesDeleteReceiptRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteReceiptRule", input)
	return &SesDeleteReceiptRuleFuture{Future: future}
}

func (a *SESStub) DeleteReceiptRuleSet(ctx workflow.Context, input *ses.DeleteReceiptRuleSetInput) (*ses.DeleteReceiptRuleSetOutput, error) {
	var output ses.DeleteReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteReceiptRuleSetAsync(ctx workflow.Context, input *ses.DeleteReceiptRuleSetInput) *SesDeleteReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteReceiptRuleSet", input)
	return &SesDeleteReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) DeleteTemplate(ctx workflow.Context, input *ses.DeleteTemplateInput) (*ses.DeleteTemplateOutput, error) {
	var output ses.DeleteTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteTemplateAsync(ctx workflow.Context, input *ses.DeleteTemplateInput) *SesDeleteTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteTemplate", input)
	return &SesDeleteTemplateFuture{Future: future}
}

func (a *SESStub) DeleteVerifiedEmailAddress(ctx workflow.Context, input *ses.DeleteVerifiedEmailAddressInput) (*ses.DeleteVerifiedEmailAddressOutput, error) {
	var output ses.DeleteVerifiedEmailAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteVerifiedEmailAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteVerifiedEmailAddressAsync(ctx workflow.Context, input *ses.DeleteVerifiedEmailAddressInput) *SesDeleteVerifiedEmailAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteVerifiedEmailAddress", input)
	return &SesDeleteVerifiedEmailAddressFuture{Future: future}
}

func (a *SESStub) DescribeActiveReceiptRuleSet(ctx workflow.Context, input *ses.DescribeActiveReceiptRuleSetInput) (*ses.DescribeActiveReceiptRuleSetOutput, error) {
	var output ses.DescribeActiveReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DescribeActiveReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DescribeActiveReceiptRuleSetAsync(ctx workflow.Context, input *ses.DescribeActiveReceiptRuleSetInput) *SesDescribeActiveReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DescribeActiveReceiptRuleSet", input)
	return &SesDescribeActiveReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) DescribeConfigurationSet(ctx workflow.Context, input *ses.DescribeConfigurationSetInput) (*ses.DescribeConfigurationSetOutput, error) {
	var output ses.DescribeConfigurationSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DescribeConfigurationSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DescribeConfigurationSetAsync(ctx workflow.Context, input *ses.DescribeConfigurationSetInput) *SesDescribeConfigurationSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DescribeConfigurationSet", input)
	return &SesDescribeConfigurationSetFuture{Future: future}
}

func (a *SESStub) DescribeReceiptRule(ctx workflow.Context, input *ses.DescribeReceiptRuleInput) (*ses.DescribeReceiptRuleOutput, error) {
	var output ses.DescribeReceiptRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DescribeReceiptRule", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DescribeReceiptRuleAsync(ctx workflow.Context, input *ses.DescribeReceiptRuleInput) *SesDescribeReceiptRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DescribeReceiptRule", input)
	return &SesDescribeReceiptRuleFuture{Future: future}
}

func (a *SESStub) DescribeReceiptRuleSet(ctx workflow.Context, input *ses.DescribeReceiptRuleSetInput) (*ses.DescribeReceiptRuleSetOutput, error) {
	var output ses.DescribeReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DescribeReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DescribeReceiptRuleSetAsync(ctx workflow.Context, input *ses.DescribeReceiptRuleSetInput) *SesDescribeReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DescribeReceiptRuleSet", input)
	return &SesDescribeReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) GetAccountSendingEnabled(ctx workflow.Context, input *ses.GetAccountSendingEnabledInput) (*ses.GetAccountSendingEnabledOutput, error) {
	var output ses.GetAccountSendingEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetAccountSendingEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetAccountSendingEnabledAsync(ctx workflow.Context, input *ses.GetAccountSendingEnabledInput) *SesGetAccountSendingEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetAccountSendingEnabled", input)
	return &SesGetAccountSendingEnabledFuture{Future: future}
}

func (a *SESStub) GetCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.GetCustomVerificationEmailTemplateInput) (*ses.GetCustomVerificationEmailTemplateOutput, error) {
	var output ses.GetCustomVerificationEmailTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetCustomVerificationEmailTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.GetCustomVerificationEmailTemplateInput) *SesGetCustomVerificationEmailTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetCustomVerificationEmailTemplate", input)
	return &SesGetCustomVerificationEmailTemplateFuture{Future: future}
}

func (a *SESStub) GetIdentityDkimAttributes(ctx workflow.Context, input *ses.GetIdentityDkimAttributesInput) (*ses.GetIdentityDkimAttributesOutput, error) {
	var output ses.GetIdentityDkimAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityDkimAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetIdentityDkimAttributesAsync(ctx workflow.Context, input *ses.GetIdentityDkimAttributesInput) *SesGetIdentityDkimAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityDkimAttributes", input)
	return &SesGetIdentityDkimAttributesFuture{Future: future}
}

func (a *SESStub) GetIdentityMailFromDomainAttributes(ctx workflow.Context, input *ses.GetIdentityMailFromDomainAttributesInput) (*ses.GetIdentityMailFromDomainAttributesOutput, error) {
	var output ses.GetIdentityMailFromDomainAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityMailFromDomainAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetIdentityMailFromDomainAttributesAsync(ctx workflow.Context, input *ses.GetIdentityMailFromDomainAttributesInput) *SesGetIdentityMailFromDomainAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityMailFromDomainAttributes", input)
	return &SesGetIdentityMailFromDomainAttributesFuture{Future: future}
}

func (a *SESStub) GetIdentityNotificationAttributes(ctx workflow.Context, input *ses.GetIdentityNotificationAttributesInput) (*ses.GetIdentityNotificationAttributesOutput, error) {
	var output ses.GetIdentityNotificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityNotificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetIdentityNotificationAttributesAsync(ctx workflow.Context, input *ses.GetIdentityNotificationAttributesInput) *SesGetIdentityNotificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityNotificationAttributes", input)
	return &SesGetIdentityNotificationAttributesFuture{Future: future}
}

func (a *SESStub) GetIdentityPolicies(ctx workflow.Context, input *ses.GetIdentityPoliciesInput) (*ses.GetIdentityPoliciesOutput, error) {
	var output ses.GetIdentityPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetIdentityPoliciesAsync(ctx workflow.Context, input *ses.GetIdentityPoliciesInput) *SesGetIdentityPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityPolicies", input)
	return &SesGetIdentityPoliciesFuture{Future: future}
}

func (a *SESStub) GetIdentityVerificationAttributes(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) (*ses.GetIdentityVerificationAttributesOutput, error) {
	var output ses.GetIdentityVerificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityVerificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetIdentityVerificationAttributesAsync(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) *SesGetIdentityVerificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityVerificationAttributes", input)
	return &SesGetIdentityVerificationAttributesFuture{Future: future}
}

func (a *SESStub) GetSendQuota(ctx workflow.Context, input *ses.GetSendQuotaInput) (*ses.GetSendQuotaOutput, error) {
	var output ses.GetSendQuotaOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetSendQuota", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetSendQuotaAsync(ctx workflow.Context, input *ses.GetSendQuotaInput) *SesGetSendQuotaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetSendQuota", input)
	return &SesGetSendQuotaFuture{Future: future}
}

func (a *SESStub) GetSendStatistics(ctx workflow.Context, input *ses.GetSendStatisticsInput) (*ses.GetSendStatisticsOutput, error) {
	var output ses.GetSendStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetSendStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetSendStatisticsAsync(ctx workflow.Context, input *ses.GetSendStatisticsInput) *SesGetSendStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetSendStatistics", input)
	return &SesGetSendStatisticsFuture{Future: future}
}

func (a *SESStub) GetTemplate(ctx workflow.Context, input *ses.GetTemplateInput) (*ses.GetTemplateOutput, error) {
	var output ses.GetTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetTemplateAsync(ctx workflow.Context, input *ses.GetTemplateInput) *SesGetTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetTemplate", input)
	return &SesGetTemplateFuture{Future: future}
}

func (a *SESStub) ListConfigurationSets(ctx workflow.Context, input *ses.ListConfigurationSetsInput) (*ses.ListConfigurationSetsOutput, error) {
	var output ses.ListConfigurationSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListConfigurationSets", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListConfigurationSetsAsync(ctx workflow.Context, input *ses.ListConfigurationSetsInput) *SesListConfigurationSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListConfigurationSets", input)
	return &SesListConfigurationSetsFuture{Future: future}
}

func (a *SESStub) ListCustomVerificationEmailTemplates(ctx workflow.Context, input *ses.ListCustomVerificationEmailTemplatesInput) (*ses.ListCustomVerificationEmailTemplatesOutput, error) {
	var output ses.ListCustomVerificationEmailTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListCustomVerificationEmailTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListCustomVerificationEmailTemplatesAsync(ctx workflow.Context, input *ses.ListCustomVerificationEmailTemplatesInput) *SesListCustomVerificationEmailTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListCustomVerificationEmailTemplates", input)
	return &SesListCustomVerificationEmailTemplatesFuture{Future: future}
}

func (a *SESStub) ListIdentities(ctx workflow.Context, input *ses.ListIdentitiesInput) (*ses.ListIdentitiesOutput, error) {
	var output ses.ListIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListIdentitiesAsync(ctx workflow.Context, input *ses.ListIdentitiesInput) *SesListIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListIdentities", input)
	return &SesListIdentitiesFuture{Future: future}
}

func (a *SESStub) ListIdentityPolicies(ctx workflow.Context, input *ses.ListIdentityPoliciesInput) (*ses.ListIdentityPoliciesOutput, error) {
	var output ses.ListIdentityPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListIdentityPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListIdentityPoliciesAsync(ctx workflow.Context, input *ses.ListIdentityPoliciesInput) *SesListIdentityPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListIdentityPolicies", input)
	return &SesListIdentityPoliciesFuture{Future: future}
}

func (a *SESStub) ListReceiptFilters(ctx workflow.Context, input *ses.ListReceiptFiltersInput) (*ses.ListReceiptFiltersOutput, error) {
	var output ses.ListReceiptFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListReceiptFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListReceiptFiltersAsync(ctx workflow.Context, input *ses.ListReceiptFiltersInput) *SesListReceiptFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListReceiptFilters", input)
	return &SesListReceiptFiltersFuture{Future: future}
}

func (a *SESStub) ListReceiptRuleSets(ctx workflow.Context, input *ses.ListReceiptRuleSetsInput) (*ses.ListReceiptRuleSetsOutput, error) {
	var output ses.ListReceiptRuleSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListReceiptRuleSets", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListReceiptRuleSetsAsync(ctx workflow.Context, input *ses.ListReceiptRuleSetsInput) *SesListReceiptRuleSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListReceiptRuleSets", input)
	return &SesListReceiptRuleSetsFuture{Future: future}
}

func (a *SESStub) ListTemplates(ctx workflow.Context, input *ses.ListTemplatesInput) (*ses.ListTemplatesOutput, error) {
	var output ses.ListTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListTemplatesAsync(ctx workflow.Context, input *ses.ListTemplatesInput) *SesListTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListTemplates", input)
	return &SesListTemplatesFuture{Future: future}
}

func (a *SESStub) ListVerifiedEmailAddresses(ctx workflow.Context, input *ses.ListVerifiedEmailAddressesInput) (*ses.ListVerifiedEmailAddressesOutput, error) {
	var output ses.ListVerifiedEmailAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListVerifiedEmailAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListVerifiedEmailAddressesAsync(ctx workflow.Context, input *ses.ListVerifiedEmailAddressesInput) *SesListVerifiedEmailAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListVerifiedEmailAddresses", input)
	return &SesListVerifiedEmailAddressesFuture{Future: future}
}

func (a *SESStub) PutConfigurationSetDeliveryOptions(ctx workflow.Context, input *ses.PutConfigurationSetDeliveryOptionsInput) (*ses.PutConfigurationSetDeliveryOptionsOutput, error) {
	var output ses.PutConfigurationSetDeliveryOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.PutConfigurationSetDeliveryOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) PutConfigurationSetDeliveryOptionsAsync(ctx workflow.Context, input *ses.PutConfigurationSetDeliveryOptionsInput) *SesPutConfigurationSetDeliveryOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.PutConfigurationSetDeliveryOptions", input)
	return &SesPutConfigurationSetDeliveryOptionsFuture{Future: future}
}

func (a *SESStub) PutIdentityPolicy(ctx workflow.Context, input *ses.PutIdentityPolicyInput) (*ses.PutIdentityPolicyOutput, error) {
	var output ses.PutIdentityPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.PutIdentityPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) PutIdentityPolicyAsync(ctx workflow.Context, input *ses.PutIdentityPolicyInput) *SesPutIdentityPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.PutIdentityPolicy", input)
	return &SesPutIdentityPolicyFuture{Future: future}
}

func (a *SESStub) ReorderReceiptRuleSet(ctx workflow.Context, input *ses.ReorderReceiptRuleSetInput) (*ses.ReorderReceiptRuleSetOutput, error) {
	var output ses.ReorderReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ReorderReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ReorderReceiptRuleSetAsync(ctx workflow.Context, input *ses.ReorderReceiptRuleSetInput) *SesReorderReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ReorderReceiptRuleSet", input)
	return &SesReorderReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) SendBounce(ctx workflow.Context, input *ses.SendBounceInput) (*ses.SendBounceOutput, error) {
	var output ses.SendBounceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SendBounce", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SendBounceAsync(ctx workflow.Context, input *ses.SendBounceInput) *SesSendBounceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SendBounce", input)
	return &SesSendBounceFuture{Future: future}
}

func (a *SESStub) SendBulkTemplatedEmail(ctx workflow.Context, input *ses.SendBulkTemplatedEmailInput) (*ses.SendBulkTemplatedEmailOutput, error) {
	var output ses.SendBulkTemplatedEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SendBulkTemplatedEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SendBulkTemplatedEmailAsync(ctx workflow.Context, input *ses.SendBulkTemplatedEmailInput) *SesSendBulkTemplatedEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SendBulkTemplatedEmail", input)
	return &SesSendBulkTemplatedEmailFuture{Future: future}
}

func (a *SESStub) SendCustomVerificationEmail(ctx workflow.Context, input *ses.SendCustomVerificationEmailInput) (*ses.SendCustomVerificationEmailOutput, error) {
	var output ses.SendCustomVerificationEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SendCustomVerificationEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SendCustomVerificationEmailAsync(ctx workflow.Context, input *ses.SendCustomVerificationEmailInput) *SesSendCustomVerificationEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SendCustomVerificationEmail", input)
	return &SesSendCustomVerificationEmailFuture{Future: future}
}

func (a *SESStub) SendEmail(ctx workflow.Context, input *ses.SendEmailInput) (*ses.SendEmailOutput, error) {
	var output ses.SendEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SendEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SendEmailAsync(ctx workflow.Context, input *ses.SendEmailInput) *SesSendEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SendEmail", input)
	return &SesSendEmailFuture{Future: future}
}

func (a *SESStub) SendRawEmail(ctx workflow.Context, input *ses.SendRawEmailInput) (*ses.SendRawEmailOutput, error) {
	var output ses.SendRawEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SendRawEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SendRawEmailAsync(ctx workflow.Context, input *ses.SendRawEmailInput) *SesSendRawEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SendRawEmail", input)
	return &SesSendRawEmailFuture{Future: future}
}

func (a *SESStub) SendTemplatedEmail(ctx workflow.Context, input *ses.SendTemplatedEmailInput) (*ses.SendTemplatedEmailOutput, error) {
	var output ses.SendTemplatedEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SendTemplatedEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SendTemplatedEmailAsync(ctx workflow.Context, input *ses.SendTemplatedEmailInput) *SesSendTemplatedEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SendTemplatedEmail", input)
	return &SesSendTemplatedEmailFuture{Future: future}
}

func (a *SESStub) SetActiveReceiptRuleSet(ctx workflow.Context, input *ses.SetActiveReceiptRuleSetInput) (*ses.SetActiveReceiptRuleSetOutput, error) {
	var output ses.SetActiveReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetActiveReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetActiveReceiptRuleSetAsync(ctx workflow.Context, input *ses.SetActiveReceiptRuleSetInput) *SesSetActiveReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetActiveReceiptRuleSet", input)
	return &SesSetActiveReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) SetIdentityDkimEnabled(ctx workflow.Context, input *ses.SetIdentityDkimEnabledInput) (*ses.SetIdentityDkimEnabledOutput, error) {
	var output ses.SetIdentityDkimEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityDkimEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetIdentityDkimEnabledAsync(ctx workflow.Context, input *ses.SetIdentityDkimEnabledInput) *SesSetIdentityDkimEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityDkimEnabled", input)
	return &SesSetIdentityDkimEnabledFuture{Future: future}
}

func (a *SESStub) SetIdentityFeedbackForwardingEnabled(ctx workflow.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error) {
	var output ses.SetIdentityFeedbackForwardingEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityFeedbackForwardingEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetIdentityFeedbackForwardingEnabledAsync(ctx workflow.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput) *SesSetIdentityFeedbackForwardingEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityFeedbackForwardingEnabled", input)
	return &SesSetIdentityFeedbackForwardingEnabledFuture{Future: future}
}

func (a *SESStub) SetIdentityHeadersInNotificationsEnabled(ctx workflow.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error) {
	var output ses.SetIdentityHeadersInNotificationsEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityHeadersInNotificationsEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetIdentityHeadersInNotificationsEnabledAsync(ctx workflow.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput) *SesSetIdentityHeadersInNotificationsEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityHeadersInNotificationsEnabled", input)
	return &SesSetIdentityHeadersInNotificationsEnabledFuture{Future: future}
}

func (a *SESStub) SetIdentityMailFromDomain(ctx workflow.Context, input *ses.SetIdentityMailFromDomainInput) (*ses.SetIdentityMailFromDomainOutput, error) {
	var output ses.SetIdentityMailFromDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityMailFromDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetIdentityMailFromDomainAsync(ctx workflow.Context, input *ses.SetIdentityMailFromDomainInput) *SesSetIdentityMailFromDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityMailFromDomain", input)
	return &SesSetIdentityMailFromDomainFuture{Future: future}
}

func (a *SESStub) SetIdentityNotificationTopic(ctx workflow.Context, input *ses.SetIdentityNotificationTopicInput) (*ses.SetIdentityNotificationTopicOutput, error) {
	var output ses.SetIdentityNotificationTopicOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityNotificationTopic", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetIdentityNotificationTopicAsync(ctx workflow.Context, input *ses.SetIdentityNotificationTopicInput) *SesSetIdentityNotificationTopicFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityNotificationTopic", input)
	return &SesSetIdentityNotificationTopicFuture{Future: future}
}

func (a *SESStub) SetReceiptRulePosition(ctx workflow.Context, input *ses.SetReceiptRulePositionInput) (*ses.SetReceiptRulePositionOutput, error) {
	var output ses.SetReceiptRulePositionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetReceiptRulePosition", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetReceiptRulePositionAsync(ctx workflow.Context, input *ses.SetReceiptRulePositionInput) *SesSetReceiptRulePositionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetReceiptRulePosition", input)
	return &SesSetReceiptRulePositionFuture{Future: future}
}

func (a *SESStub) TestRenderTemplate(ctx workflow.Context, input *ses.TestRenderTemplateInput) (*ses.TestRenderTemplateOutput, error) {
	var output ses.TestRenderTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.TestRenderTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) TestRenderTemplateAsync(ctx workflow.Context, input *ses.TestRenderTemplateInput) *SesTestRenderTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.TestRenderTemplate", input)
	return &SesTestRenderTemplateFuture{Future: future}
}

func (a *SESStub) UpdateAccountSendingEnabled(ctx workflow.Context, input *ses.UpdateAccountSendingEnabledInput) (*ses.UpdateAccountSendingEnabledOutput, error) {
	var output ses.UpdateAccountSendingEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateAccountSendingEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateAccountSendingEnabledAsync(ctx workflow.Context, input *ses.UpdateAccountSendingEnabledInput) *SesUpdateAccountSendingEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateAccountSendingEnabled", input)
	return &SesUpdateAccountSendingEnabledFuture{Future: future}
}

func (a *SESStub) UpdateConfigurationSetEventDestination(ctx workflow.Context, input *ses.UpdateConfigurationSetEventDestinationInput) (*ses.UpdateConfigurationSetEventDestinationOutput, error) {
	var output ses.UpdateConfigurationSetEventDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetEventDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetEventDestinationInput) *SesUpdateConfigurationSetEventDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetEventDestination", input)
	return &SesUpdateConfigurationSetEventDestinationFuture{Future: future}
}

func (a *SESStub) UpdateConfigurationSetReputationMetricsEnabled(ctx workflow.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error) {
	var output ses.UpdateConfigurationSetReputationMetricsEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetReputationMetricsEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateConfigurationSetReputationMetricsEnabledAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput) *SesUpdateConfigurationSetReputationMetricsEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetReputationMetricsEnabled", input)
	return &SesUpdateConfigurationSetReputationMetricsEnabledFuture{Future: future}
}

func (a *SESStub) UpdateConfigurationSetSendingEnabled(ctx workflow.Context, input *ses.UpdateConfigurationSetSendingEnabledInput) (*ses.UpdateConfigurationSetSendingEnabledOutput, error) {
	var output ses.UpdateConfigurationSetSendingEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetSendingEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateConfigurationSetSendingEnabledAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetSendingEnabledInput) *SesUpdateConfigurationSetSendingEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetSendingEnabled", input)
	return &SesUpdateConfigurationSetSendingEnabledFuture{Future: future}
}

func (a *SESStub) UpdateConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error) {
	var output ses.UpdateConfigurationSetTrackingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetTrackingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput) *SesUpdateConfigurationSetTrackingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetTrackingOptions", input)
	return &SesUpdateConfigurationSetTrackingOptionsFuture{Future: future}
}

func (a *SESStub) UpdateCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.UpdateCustomVerificationEmailTemplateInput) (*ses.UpdateCustomVerificationEmailTemplateOutput, error) {
	var output ses.UpdateCustomVerificationEmailTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateCustomVerificationEmailTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.UpdateCustomVerificationEmailTemplateInput) *SesUpdateCustomVerificationEmailTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateCustomVerificationEmailTemplate", input)
	return &SesUpdateCustomVerificationEmailTemplateFuture{Future: future}
}

func (a *SESStub) UpdateReceiptRule(ctx workflow.Context, input *ses.UpdateReceiptRuleInput) (*ses.UpdateReceiptRuleOutput, error) {
	var output ses.UpdateReceiptRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateReceiptRule", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateReceiptRuleAsync(ctx workflow.Context, input *ses.UpdateReceiptRuleInput) *SesUpdateReceiptRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateReceiptRule", input)
	return &SesUpdateReceiptRuleFuture{Future: future}
}

func (a *SESStub) UpdateTemplate(ctx workflow.Context, input *ses.UpdateTemplateInput) (*ses.UpdateTemplateOutput, error) {
	var output ses.UpdateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateTemplateAsync(ctx workflow.Context, input *ses.UpdateTemplateInput) *SesUpdateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateTemplate", input)
	return &SesUpdateTemplateFuture{Future: future}
}

func (a *SESStub) VerifyDomainDkim(ctx workflow.Context, input *ses.VerifyDomainDkimInput) (*ses.VerifyDomainDkimOutput, error) {
	var output ses.VerifyDomainDkimOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.VerifyDomainDkim", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) VerifyDomainDkimAsync(ctx workflow.Context, input *ses.VerifyDomainDkimInput) *SesVerifyDomainDkimFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.VerifyDomainDkim", input)
	return &SesVerifyDomainDkimFuture{Future: future}
}

func (a *SESStub) VerifyDomainIdentity(ctx workflow.Context, input *ses.VerifyDomainIdentityInput) (*ses.VerifyDomainIdentityOutput, error) {
	var output ses.VerifyDomainIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.VerifyDomainIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) VerifyDomainIdentityAsync(ctx workflow.Context, input *ses.VerifyDomainIdentityInput) *SesVerifyDomainIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.VerifyDomainIdentity", input)
	return &SesVerifyDomainIdentityFuture{Future: future}
}

func (a *SESStub) VerifyEmailAddress(ctx workflow.Context, input *ses.VerifyEmailAddressInput) (*ses.VerifyEmailAddressOutput, error) {
	var output ses.VerifyEmailAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.VerifyEmailAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) VerifyEmailAddressAsync(ctx workflow.Context, input *ses.VerifyEmailAddressInput) *SesVerifyEmailAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.VerifyEmailAddress", input)
	return &SesVerifyEmailAddressFuture{Future: future}
}

func (a *SESStub) VerifyEmailIdentity(ctx workflow.Context, input *ses.VerifyEmailIdentityInput) (*ses.VerifyEmailIdentityOutput, error) {
	var output ses.VerifyEmailIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.VerifyEmailIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) VerifyEmailIdentityAsync(ctx workflow.Context, input *ses.VerifyEmailIdentityInput) *SesVerifyEmailIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.VerifyEmailIdentity", input)
	return &SesVerifyEmailIdentityFuture{Future: future}
}

func (a *SESStub) WaitUntilIdentityExists(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ses.WaitUntilIdentityExists", input).Get(ctx, nil)
}

func (a *SESStub) WaitUntilIdentityExistsAsync(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.WaitUntilIdentityExists", input)
	return NewVoidFuture(future)
}
