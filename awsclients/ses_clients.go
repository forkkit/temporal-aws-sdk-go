// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/ses"
	"go.temporal.io/sdk/workflow"
)

type SESClient interface {
	CloneReceiptRuleSet(ctx workflow.Context, input *ses.CloneReceiptRuleSetInput) (*ses.CloneReceiptRuleSetOutput, error)
	CloneReceiptRuleSetAsync(ctx workflow.Context, input *ses.CloneReceiptRuleSetInput) *SESCloneReceiptRuleSetFuture

	CreateConfigurationSet(ctx workflow.Context, input *ses.CreateConfigurationSetInput) (*ses.CreateConfigurationSetOutput, error)
	CreateConfigurationSetAsync(ctx workflow.Context, input *ses.CreateConfigurationSetInput) *SESCreateConfigurationSetFuture

	CreateConfigurationSetEventDestination(ctx workflow.Context, input *ses.CreateConfigurationSetEventDestinationInput) (*ses.CreateConfigurationSetEventDestinationOutput, error)
	CreateConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.CreateConfigurationSetEventDestinationInput) *SESCreateConfigurationSetEventDestinationFuture

	CreateConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.CreateConfigurationSetTrackingOptionsInput) (*ses.CreateConfigurationSetTrackingOptionsOutput, error)
	CreateConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.CreateConfigurationSetTrackingOptionsInput) *SESCreateConfigurationSetTrackingOptionsFuture

	CreateCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.CreateCustomVerificationEmailTemplateInput) (*ses.CreateCustomVerificationEmailTemplateOutput, error)
	CreateCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.CreateCustomVerificationEmailTemplateInput) *SESCreateCustomVerificationEmailTemplateFuture

	CreateReceiptFilter(ctx workflow.Context, input *ses.CreateReceiptFilterInput) (*ses.CreateReceiptFilterOutput, error)
	CreateReceiptFilterAsync(ctx workflow.Context, input *ses.CreateReceiptFilterInput) *SESCreateReceiptFilterFuture

	CreateReceiptRule(ctx workflow.Context, input *ses.CreateReceiptRuleInput) (*ses.CreateReceiptRuleOutput, error)
	CreateReceiptRuleAsync(ctx workflow.Context, input *ses.CreateReceiptRuleInput) *SESCreateReceiptRuleFuture

	CreateReceiptRuleSet(ctx workflow.Context, input *ses.CreateReceiptRuleSetInput) (*ses.CreateReceiptRuleSetOutput, error)
	CreateReceiptRuleSetAsync(ctx workflow.Context, input *ses.CreateReceiptRuleSetInput) *SESCreateReceiptRuleSetFuture

	CreateTemplate(ctx workflow.Context, input *ses.CreateTemplateInput) (*ses.CreateTemplateOutput, error)
	CreateTemplateAsync(ctx workflow.Context, input *ses.CreateTemplateInput) *SESCreateTemplateFuture

	DeleteConfigurationSet(ctx workflow.Context, input *ses.DeleteConfigurationSetInput) (*ses.DeleteConfigurationSetOutput, error)
	DeleteConfigurationSetAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetInput) *SESDeleteConfigurationSetFuture

	DeleteConfigurationSetEventDestination(ctx workflow.Context, input *ses.DeleteConfigurationSetEventDestinationInput) (*ses.DeleteConfigurationSetEventDestinationOutput, error)
	DeleteConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetEventDestinationInput) *SESDeleteConfigurationSetEventDestinationFuture

	DeleteConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error)
	DeleteConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput) *SESDeleteConfigurationSetTrackingOptionsFuture

	DeleteCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.DeleteCustomVerificationEmailTemplateInput) (*ses.DeleteCustomVerificationEmailTemplateOutput, error)
	DeleteCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.DeleteCustomVerificationEmailTemplateInput) *SESDeleteCustomVerificationEmailTemplateFuture

	DeleteIdentity(ctx workflow.Context, input *ses.DeleteIdentityInput) (*ses.DeleteIdentityOutput, error)
	DeleteIdentityAsync(ctx workflow.Context, input *ses.DeleteIdentityInput) *SESDeleteIdentityFuture

	DeleteIdentityPolicy(ctx workflow.Context, input *ses.DeleteIdentityPolicyInput) (*ses.DeleteIdentityPolicyOutput, error)
	DeleteIdentityPolicyAsync(ctx workflow.Context, input *ses.DeleteIdentityPolicyInput) *SESDeleteIdentityPolicyFuture

	DeleteReceiptFilter(ctx workflow.Context, input *ses.DeleteReceiptFilterInput) (*ses.DeleteReceiptFilterOutput, error)
	DeleteReceiptFilterAsync(ctx workflow.Context, input *ses.DeleteReceiptFilterInput) *SESDeleteReceiptFilterFuture

	DeleteReceiptRule(ctx workflow.Context, input *ses.DeleteReceiptRuleInput) (*ses.DeleteReceiptRuleOutput, error)
	DeleteReceiptRuleAsync(ctx workflow.Context, input *ses.DeleteReceiptRuleInput) *SESDeleteReceiptRuleFuture

	DeleteReceiptRuleSet(ctx workflow.Context, input *ses.DeleteReceiptRuleSetInput) (*ses.DeleteReceiptRuleSetOutput, error)
	DeleteReceiptRuleSetAsync(ctx workflow.Context, input *ses.DeleteReceiptRuleSetInput) *SESDeleteReceiptRuleSetFuture

	DeleteTemplate(ctx workflow.Context, input *ses.DeleteTemplateInput) (*ses.DeleteTemplateOutput, error)
	DeleteTemplateAsync(ctx workflow.Context, input *ses.DeleteTemplateInput) *SESDeleteTemplateFuture

	DeleteVerifiedEmailAddress(ctx workflow.Context, input *ses.DeleteVerifiedEmailAddressInput) (*ses.DeleteVerifiedEmailAddressOutput, error)
	DeleteVerifiedEmailAddressAsync(ctx workflow.Context, input *ses.DeleteVerifiedEmailAddressInput) *SESDeleteVerifiedEmailAddressFuture

	DescribeActiveReceiptRuleSet(ctx workflow.Context, input *ses.DescribeActiveReceiptRuleSetInput) (*ses.DescribeActiveReceiptRuleSetOutput, error)
	DescribeActiveReceiptRuleSetAsync(ctx workflow.Context, input *ses.DescribeActiveReceiptRuleSetInput) *SESDescribeActiveReceiptRuleSetFuture

	DescribeConfigurationSet(ctx workflow.Context, input *ses.DescribeConfigurationSetInput) (*ses.DescribeConfigurationSetOutput, error)
	DescribeConfigurationSetAsync(ctx workflow.Context, input *ses.DescribeConfigurationSetInput) *SESDescribeConfigurationSetFuture

	DescribeReceiptRule(ctx workflow.Context, input *ses.DescribeReceiptRuleInput) (*ses.DescribeReceiptRuleOutput, error)
	DescribeReceiptRuleAsync(ctx workflow.Context, input *ses.DescribeReceiptRuleInput) *SESDescribeReceiptRuleFuture

	DescribeReceiptRuleSet(ctx workflow.Context, input *ses.DescribeReceiptRuleSetInput) (*ses.DescribeReceiptRuleSetOutput, error)
	DescribeReceiptRuleSetAsync(ctx workflow.Context, input *ses.DescribeReceiptRuleSetInput) *SESDescribeReceiptRuleSetFuture

	GetAccountSendingEnabled(ctx workflow.Context, input *ses.GetAccountSendingEnabledInput) (*ses.GetAccountSendingEnabledOutput, error)
	GetAccountSendingEnabledAsync(ctx workflow.Context, input *ses.GetAccountSendingEnabledInput) *SESGetAccountSendingEnabledFuture

	GetCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.GetCustomVerificationEmailTemplateInput) (*ses.GetCustomVerificationEmailTemplateOutput, error)
	GetCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.GetCustomVerificationEmailTemplateInput) *SESGetCustomVerificationEmailTemplateFuture

	GetIdentityDkimAttributes(ctx workflow.Context, input *ses.GetIdentityDkimAttributesInput) (*ses.GetIdentityDkimAttributesOutput, error)
	GetIdentityDkimAttributesAsync(ctx workflow.Context, input *ses.GetIdentityDkimAttributesInput) *SESGetIdentityDkimAttributesFuture

	GetIdentityMailFromDomainAttributes(ctx workflow.Context, input *ses.GetIdentityMailFromDomainAttributesInput) (*ses.GetIdentityMailFromDomainAttributesOutput, error)
	GetIdentityMailFromDomainAttributesAsync(ctx workflow.Context, input *ses.GetIdentityMailFromDomainAttributesInput) *SESGetIdentityMailFromDomainAttributesFuture

	GetIdentityNotificationAttributes(ctx workflow.Context, input *ses.GetIdentityNotificationAttributesInput) (*ses.GetIdentityNotificationAttributesOutput, error)
	GetIdentityNotificationAttributesAsync(ctx workflow.Context, input *ses.GetIdentityNotificationAttributesInput) *SESGetIdentityNotificationAttributesFuture

	GetIdentityPolicies(ctx workflow.Context, input *ses.GetIdentityPoliciesInput) (*ses.GetIdentityPoliciesOutput, error)
	GetIdentityPoliciesAsync(ctx workflow.Context, input *ses.GetIdentityPoliciesInput) *SESGetIdentityPoliciesFuture

	GetIdentityVerificationAttributes(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) (*ses.GetIdentityVerificationAttributesOutput, error)
	GetIdentityVerificationAttributesAsync(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) *SESGetIdentityVerificationAttributesFuture

	GetSendQuota(ctx workflow.Context, input *ses.GetSendQuotaInput) (*ses.GetSendQuotaOutput, error)
	GetSendQuotaAsync(ctx workflow.Context, input *ses.GetSendQuotaInput) *SESGetSendQuotaFuture

	GetSendStatistics(ctx workflow.Context, input *ses.GetSendStatisticsInput) (*ses.GetSendStatisticsOutput, error)
	GetSendStatisticsAsync(ctx workflow.Context, input *ses.GetSendStatisticsInput) *SESGetSendStatisticsFuture

	GetTemplate(ctx workflow.Context, input *ses.GetTemplateInput) (*ses.GetTemplateOutput, error)
	GetTemplateAsync(ctx workflow.Context, input *ses.GetTemplateInput) *SESGetTemplateFuture

	ListConfigurationSets(ctx workflow.Context, input *ses.ListConfigurationSetsInput) (*ses.ListConfigurationSetsOutput, error)
	ListConfigurationSetsAsync(ctx workflow.Context, input *ses.ListConfigurationSetsInput) *SESListConfigurationSetsFuture

	ListCustomVerificationEmailTemplates(ctx workflow.Context, input *ses.ListCustomVerificationEmailTemplatesInput) (*ses.ListCustomVerificationEmailTemplatesOutput, error)
	ListCustomVerificationEmailTemplatesAsync(ctx workflow.Context, input *ses.ListCustomVerificationEmailTemplatesInput) *SESListCustomVerificationEmailTemplatesFuture

	ListIdentities(ctx workflow.Context, input *ses.ListIdentitiesInput) (*ses.ListIdentitiesOutput, error)
	ListIdentitiesAsync(ctx workflow.Context, input *ses.ListIdentitiesInput) *SESListIdentitiesFuture

	ListIdentityPolicies(ctx workflow.Context, input *ses.ListIdentityPoliciesInput) (*ses.ListIdentityPoliciesOutput, error)
	ListIdentityPoliciesAsync(ctx workflow.Context, input *ses.ListIdentityPoliciesInput) *SESListIdentityPoliciesFuture

	ListReceiptFilters(ctx workflow.Context, input *ses.ListReceiptFiltersInput) (*ses.ListReceiptFiltersOutput, error)
	ListReceiptFiltersAsync(ctx workflow.Context, input *ses.ListReceiptFiltersInput) *SESListReceiptFiltersFuture

	ListReceiptRuleSets(ctx workflow.Context, input *ses.ListReceiptRuleSetsInput) (*ses.ListReceiptRuleSetsOutput, error)
	ListReceiptRuleSetsAsync(ctx workflow.Context, input *ses.ListReceiptRuleSetsInput) *SESListReceiptRuleSetsFuture

	ListTemplates(ctx workflow.Context, input *ses.ListTemplatesInput) (*ses.ListTemplatesOutput, error)
	ListTemplatesAsync(ctx workflow.Context, input *ses.ListTemplatesInput) *SESListTemplatesFuture

	ListVerifiedEmailAddresses(ctx workflow.Context, input *ses.ListVerifiedEmailAddressesInput) (*ses.ListVerifiedEmailAddressesOutput, error)
	ListVerifiedEmailAddressesAsync(ctx workflow.Context, input *ses.ListVerifiedEmailAddressesInput) *SESListVerifiedEmailAddressesFuture

	PutConfigurationSetDeliveryOptions(ctx workflow.Context, input *ses.PutConfigurationSetDeliveryOptionsInput) (*ses.PutConfigurationSetDeliveryOptionsOutput, error)
	PutConfigurationSetDeliveryOptionsAsync(ctx workflow.Context, input *ses.PutConfigurationSetDeliveryOptionsInput) *SESPutConfigurationSetDeliveryOptionsFuture

	PutIdentityPolicy(ctx workflow.Context, input *ses.PutIdentityPolicyInput) (*ses.PutIdentityPolicyOutput, error)
	PutIdentityPolicyAsync(ctx workflow.Context, input *ses.PutIdentityPolicyInput) *SESPutIdentityPolicyFuture

	ReorderReceiptRuleSet(ctx workflow.Context, input *ses.ReorderReceiptRuleSetInput) (*ses.ReorderReceiptRuleSetOutput, error)
	ReorderReceiptRuleSetAsync(ctx workflow.Context, input *ses.ReorderReceiptRuleSetInput) *SESReorderReceiptRuleSetFuture

	SendBounce(ctx workflow.Context, input *ses.SendBounceInput) (*ses.SendBounceOutput, error)
	SendBounceAsync(ctx workflow.Context, input *ses.SendBounceInput) *SESSendBounceFuture

	SendBulkTemplatedEmail(ctx workflow.Context, input *ses.SendBulkTemplatedEmailInput) (*ses.SendBulkTemplatedEmailOutput, error)
	SendBulkTemplatedEmailAsync(ctx workflow.Context, input *ses.SendBulkTemplatedEmailInput) *SESSendBulkTemplatedEmailFuture

	SendCustomVerificationEmail(ctx workflow.Context, input *ses.SendCustomVerificationEmailInput) (*ses.SendCustomVerificationEmailOutput, error)
	SendCustomVerificationEmailAsync(ctx workflow.Context, input *ses.SendCustomVerificationEmailInput) *SESSendCustomVerificationEmailFuture

	SendEmail(ctx workflow.Context, input *ses.SendEmailInput) (*ses.SendEmailOutput, error)
	SendEmailAsync(ctx workflow.Context, input *ses.SendEmailInput) *SESSendEmailFuture

	SendRawEmail(ctx workflow.Context, input *ses.SendRawEmailInput) (*ses.SendRawEmailOutput, error)
	SendRawEmailAsync(ctx workflow.Context, input *ses.SendRawEmailInput) *SESSendRawEmailFuture

	SendTemplatedEmail(ctx workflow.Context, input *ses.SendTemplatedEmailInput) (*ses.SendTemplatedEmailOutput, error)
	SendTemplatedEmailAsync(ctx workflow.Context, input *ses.SendTemplatedEmailInput) *SESSendTemplatedEmailFuture

	SetActiveReceiptRuleSet(ctx workflow.Context, input *ses.SetActiveReceiptRuleSetInput) (*ses.SetActiveReceiptRuleSetOutput, error)
	SetActiveReceiptRuleSetAsync(ctx workflow.Context, input *ses.SetActiveReceiptRuleSetInput) *SESSetActiveReceiptRuleSetFuture

	SetIdentityDkimEnabled(ctx workflow.Context, input *ses.SetIdentityDkimEnabledInput) (*ses.SetIdentityDkimEnabledOutput, error)
	SetIdentityDkimEnabledAsync(ctx workflow.Context, input *ses.SetIdentityDkimEnabledInput) *SESSetIdentityDkimEnabledFuture

	SetIdentityFeedbackForwardingEnabled(ctx workflow.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error)
	SetIdentityFeedbackForwardingEnabledAsync(ctx workflow.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput) *SESSetIdentityFeedbackForwardingEnabledFuture

	SetIdentityHeadersInNotificationsEnabled(ctx workflow.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error)
	SetIdentityHeadersInNotificationsEnabledAsync(ctx workflow.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput) *SESSetIdentityHeadersInNotificationsEnabledFuture

	SetIdentityMailFromDomain(ctx workflow.Context, input *ses.SetIdentityMailFromDomainInput) (*ses.SetIdentityMailFromDomainOutput, error)
	SetIdentityMailFromDomainAsync(ctx workflow.Context, input *ses.SetIdentityMailFromDomainInput) *SESSetIdentityMailFromDomainFuture

	SetIdentityNotificationTopic(ctx workflow.Context, input *ses.SetIdentityNotificationTopicInput) (*ses.SetIdentityNotificationTopicOutput, error)
	SetIdentityNotificationTopicAsync(ctx workflow.Context, input *ses.SetIdentityNotificationTopicInput) *SESSetIdentityNotificationTopicFuture

	SetReceiptRulePosition(ctx workflow.Context, input *ses.SetReceiptRulePositionInput) (*ses.SetReceiptRulePositionOutput, error)
	SetReceiptRulePositionAsync(ctx workflow.Context, input *ses.SetReceiptRulePositionInput) *SESSetReceiptRulePositionFuture

	TestRenderTemplate(ctx workflow.Context, input *ses.TestRenderTemplateInput) (*ses.TestRenderTemplateOutput, error)
	TestRenderTemplateAsync(ctx workflow.Context, input *ses.TestRenderTemplateInput) *SESTestRenderTemplateFuture

	UpdateAccountSendingEnabled(ctx workflow.Context, input *ses.UpdateAccountSendingEnabledInput) (*ses.UpdateAccountSendingEnabledOutput, error)
	UpdateAccountSendingEnabledAsync(ctx workflow.Context, input *ses.UpdateAccountSendingEnabledInput) *SESUpdateAccountSendingEnabledFuture

	UpdateConfigurationSetEventDestination(ctx workflow.Context, input *ses.UpdateConfigurationSetEventDestinationInput) (*ses.UpdateConfigurationSetEventDestinationOutput, error)
	UpdateConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetEventDestinationInput) *SESUpdateConfigurationSetEventDestinationFuture

	UpdateConfigurationSetReputationMetricsEnabled(ctx workflow.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error)
	UpdateConfigurationSetReputationMetricsEnabledAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput) *SESUpdateConfigurationSetReputationMetricsEnabledFuture

	UpdateConfigurationSetSendingEnabled(ctx workflow.Context, input *ses.UpdateConfigurationSetSendingEnabledInput) (*ses.UpdateConfigurationSetSendingEnabledOutput, error)
	UpdateConfigurationSetSendingEnabledAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetSendingEnabledInput) *SESUpdateConfigurationSetSendingEnabledFuture

	UpdateConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error)
	UpdateConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput) *SESUpdateConfigurationSetTrackingOptionsFuture

	UpdateCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.UpdateCustomVerificationEmailTemplateInput) (*ses.UpdateCustomVerificationEmailTemplateOutput, error)
	UpdateCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.UpdateCustomVerificationEmailTemplateInput) *SESUpdateCustomVerificationEmailTemplateFuture

	UpdateReceiptRule(ctx workflow.Context, input *ses.UpdateReceiptRuleInput) (*ses.UpdateReceiptRuleOutput, error)
	UpdateReceiptRuleAsync(ctx workflow.Context, input *ses.UpdateReceiptRuleInput) *SESUpdateReceiptRuleFuture

	UpdateTemplate(ctx workflow.Context, input *ses.UpdateTemplateInput) (*ses.UpdateTemplateOutput, error)
	UpdateTemplateAsync(ctx workflow.Context, input *ses.UpdateTemplateInput) *SESUpdateTemplateFuture

	VerifyDomainDkim(ctx workflow.Context, input *ses.VerifyDomainDkimInput) (*ses.VerifyDomainDkimOutput, error)
	VerifyDomainDkimAsync(ctx workflow.Context, input *ses.VerifyDomainDkimInput) *SESVerifyDomainDkimFuture

	VerifyDomainIdentity(ctx workflow.Context, input *ses.VerifyDomainIdentityInput) (*ses.VerifyDomainIdentityOutput, error)
	VerifyDomainIdentityAsync(ctx workflow.Context, input *ses.VerifyDomainIdentityInput) *SESVerifyDomainIdentityFuture

	VerifyEmailAddress(ctx workflow.Context, input *ses.VerifyEmailAddressInput) (*ses.VerifyEmailAddressOutput, error)
	VerifyEmailAddressAsync(ctx workflow.Context, input *ses.VerifyEmailAddressInput) *SESVerifyEmailAddressFuture

	VerifyEmailIdentity(ctx workflow.Context, input *ses.VerifyEmailIdentityInput) (*ses.VerifyEmailIdentityOutput, error)
	VerifyEmailIdentityAsync(ctx workflow.Context, input *ses.VerifyEmailIdentityInput) *SESVerifyEmailIdentityFuture

	WaitUntilIdentityExists(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) error
	WaitUntilIdentityExistsAsync(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) *VoidFuture
}

type SESStub struct{}

func NewSESStub() SESClient {
	return &SESStub{}
}

type SESCloneReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SESCloneReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.CloneReceiptRuleSetOutput, error) {
	var output ses.CloneReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESCreateConfigurationSetFuture struct {
	Future workflow.Future
}

func (r *SESCreateConfigurationSetFuture) Get(ctx workflow.Context) (*ses.CreateConfigurationSetOutput, error) {
	var output ses.CreateConfigurationSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESCreateConfigurationSetEventDestinationFuture struct {
	Future workflow.Future
}

func (r *SESCreateConfigurationSetEventDestinationFuture) Get(ctx workflow.Context) (*ses.CreateConfigurationSetEventDestinationOutput, error) {
	var output ses.CreateConfigurationSetEventDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESCreateConfigurationSetTrackingOptionsFuture struct {
	Future workflow.Future
}

func (r *SESCreateConfigurationSetTrackingOptionsFuture) Get(ctx workflow.Context) (*ses.CreateConfigurationSetTrackingOptionsOutput, error) {
	var output ses.CreateConfigurationSetTrackingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESCreateCustomVerificationEmailTemplateFuture struct {
	Future workflow.Future
}

func (r *SESCreateCustomVerificationEmailTemplateFuture) Get(ctx workflow.Context) (*ses.CreateCustomVerificationEmailTemplateOutput, error) {
	var output ses.CreateCustomVerificationEmailTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESCreateReceiptFilterFuture struct {
	Future workflow.Future
}

func (r *SESCreateReceiptFilterFuture) Get(ctx workflow.Context) (*ses.CreateReceiptFilterOutput, error) {
	var output ses.CreateReceiptFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESCreateReceiptRuleFuture struct {
	Future workflow.Future
}

func (r *SESCreateReceiptRuleFuture) Get(ctx workflow.Context) (*ses.CreateReceiptRuleOutput, error) {
	var output ses.CreateReceiptRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESCreateReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SESCreateReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.CreateReceiptRuleSetOutput, error) {
	var output ses.CreateReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESCreateTemplateFuture struct {
	Future workflow.Future
}

func (r *SESCreateTemplateFuture) Get(ctx workflow.Context) (*ses.CreateTemplateOutput, error) {
	var output ses.CreateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDeleteConfigurationSetFuture struct {
	Future workflow.Future
}

func (r *SESDeleteConfigurationSetFuture) Get(ctx workflow.Context) (*ses.DeleteConfigurationSetOutput, error) {
	var output ses.DeleteConfigurationSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDeleteConfigurationSetEventDestinationFuture struct {
	Future workflow.Future
}

func (r *SESDeleteConfigurationSetEventDestinationFuture) Get(ctx workflow.Context) (*ses.DeleteConfigurationSetEventDestinationOutput, error) {
	var output ses.DeleteConfigurationSetEventDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDeleteConfigurationSetTrackingOptionsFuture struct {
	Future workflow.Future
}

func (r *SESDeleteConfigurationSetTrackingOptionsFuture) Get(ctx workflow.Context) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error) {
	var output ses.DeleteConfigurationSetTrackingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDeleteCustomVerificationEmailTemplateFuture struct {
	Future workflow.Future
}

func (r *SESDeleteCustomVerificationEmailTemplateFuture) Get(ctx workflow.Context) (*ses.DeleteCustomVerificationEmailTemplateOutput, error) {
	var output ses.DeleteCustomVerificationEmailTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDeleteIdentityFuture struct {
	Future workflow.Future
}

func (r *SESDeleteIdentityFuture) Get(ctx workflow.Context) (*ses.DeleteIdentityOutput, error) {
	var output ses.DeleteIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDeleteIdentityPolicyFuture struct {
	Future workflow.Future
}

func (r *SESDeleteIdentityPolicyFuture) Get(ctx workflow.Context) (*ses.DeleteIdentityPolicyOutput, error) {
	var output ses.DeleteIdentityPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDeleteReceiptFilterFuture struct {
	Future workflow.Future
}

func (r *SESDeleteReceiptFilterFuture) Get(ctx workflow.Context) (*ses.DeleteReceiptFilterOutput, error) {
	var output ses.DeleteReceiptFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDeleteReceiptRuleFuture struct {
	Future workflow.Future
}

func (r *SESDeleteReceiptRuleFuture) Get(ctx workflow.Context) (*ses.DeleteReceiptRuleOutput, error) {
	var output ses.DeleteReceiptRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDeleteReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SESDeleteReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.DeleteReceiptRuleSetOutput, error) {
	var output ses.DeleteReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDeleteTemplateFuture struct {
	Future workflow.Future
}

func (r *SESDeleteTemplateFuture) Get(ctx workflow.Context) (*ses.DeleteTemplateOutput, error) {
	var output ses.DeleteTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDeleteVerifiedEmailAddressFuture struct {
	Future workflow.Future
}

func (r *SESDeleteVerifiedEmailAddressFuture) Get(ctx workflow.Context) (*ses.DeleteVerifiedEmailAddressOutput, error) {
	var output ses.DeleteVerifiedEmailAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDescribeActiveReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SESDescribeActiveReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.DescribeActiveReceiptRuleSetOutput, error) {
	var output ses.DescribeActiveReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDescribeConfigurationSetFuture struct {
	Future workflow.Future
}

func (r *SESDescribeConfigurationSetFuture) Get(ctx workflow.Context) (*ses.DescribeConfigurationSetOutput, error) {
	var output ses.DescribeConfigurationSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDescribeReceiptRuleFuture struct {
	Future workflow.Future
}

func (r *SESDescribeReceiptRuleFuture) Get(ctx workflow.Context) (*ses.DescribeReceiptRuleOutput, error) {
	var output ses.DescribeReceiptRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESDescribeReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SESDescribeReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.DescribeReceiptRuleSetOutput, error) {
	var output ses.DescribeReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESGetAccountSendingEnabledFuture struct {
	Future workflow.Future
}

func (r *SESGetAccountSendingEnabledFuture) Get(ctx workflow.Context) (*ses.GetAccountSendingEnabledOutput, error) {
	var output ses.GetAccountSendingEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESGetCustomVerificationEmailTemplateFuture struct {
	Future workflow.Future
}

func (r *SESGetCustomVerificationEmailTemplateFuture) Get(ctx workflow.Context) (*ses.GetCustomVerificationEmailTemplateOutput, error) {
	var output ses.GetCustomVerificationEmailTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESGetIdentityDkimAttributesFuture struct {
	Future workflow.Future
}

func (r *SESGetIdentityDkimAttributesFuture) Get(ctx workflow.Context) (*ses.GetIdentityDkimAttributesOutput, error) {
	var output ses.GetIdentityDkimAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESGetIdentityMailFromDomainAttributesFuture struct {
	Future workflow.Future
}

func (r *SESGetIdentityMailFromDomainAttributesFuture) Get(ctx workflow.Context) (*ses.GetIdentityMailFromDomainAttributesOutput, error) {
	var output ses.GetIdentityMailFromDomainAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESGetIdentityNotificationAttributesFuture struct {
	Future workflow.Future
}

func (r *SESGetIdentityNotificationAttributesFuture) Get(ctx workflow.Context) (*ses.GetIdentityNotificationAttributesOutput, error) {
	var output ses.GetIdentityNotificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESGetIdentityPoliciesFuture struct {
	Future workflow.Future
}

func (r *SESGetIdentityPoliciesFuture) Get(ctx workflow.Context) (*ses.GetIdentityPoliciesOutput, error) {
	var output ses.GetIdentityPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESGetIdentityVerificationAttributesFuture struct {
	Future workflow.Future
}

func (r *SESGetIdentityVerificationAttributesFuture) Get(ctx workflow.Context) (*ses.GetIdentityVerificationAttributesOutput, error) {
	var output ses.GetIdentityVerificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESGetSendQuotaFuture struct {
	Future workflow.Future
}

func (r *SESGetSendQuotaFuture) Get(ctx workflow.Context) (*ses.GetSendQuotaOutput, error) {
	var output ses.GetSendQuotaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESGetSendStatisticsFuture struct {
	Future workflow.Future
}

func (r *SESGetSendStatisticsFuture) Get(ctx workflow.Context) (*ses.GetSendStatisticsOutput, error) {
	var output ses.GetSendStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESGetTemplateFuture struct {
	Future workflow.Future
}

func (r *SESGetTemplateFuture) Get(ctx workflow.Context) (*ses.GetTemplateOutput, error) {
	var output ses.GetTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESListConfigurationSetsFuture struct {
	Future workflow.Future
}

func (r *SESListConfigurationSetsFuture) Get(ctx workflow.Context) (*ses.ListConfigurationSetsOutput, error) {
	var output ses.ListConfigurationSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESListCustomVerificationEmailTemplatesFuture struct {
	Future workflow.Future
}

func (r *SESListCustomVerificationEmailTemplatesFuture) Get(ctx workflow.Context) (*ses.ListCustomVerificationEmailTemplatesOutput, error) {
	var output ses.ListCustomVerificationEmailTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESListIdentitiesFuture struct {
	Future workflow.Future
}

func (r *SESListIdentitiesFuture) Get(ctx workflow.Context) (*ses.ListIdentitiesOutput, error) {
	var output ses.ListIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESListIdentityPoliciesFuture struct {
	Future workflow.Future
}

func (r *SESListIdentityPoliciesFuture) Get(ctx workflow.Context) (*ses.ListIdentityPoliciesOutput, error) {
	var output ses.ListIdentityPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESListReceiptFiltersFuture struct {
	Future workflow.Future
}

func (r *SESListReceiptFiltersFuture) Get(ctx workflow.Context) (*ses.ListReceiptFiltersOutput, error) {
	var output ses.ListReceiptFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESListReceiptRuleSetsFuture struct {
	Future workflow.Future
}

func (r *SESListReceiptRuleSetsFuture) Get(ctx workflow.Context) (*ses.ListReceiptRuleSetsOutput, error) {
	var output ses.ListReceiptRuleSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESListTemplatesFuture struct {
	Future workflow.Future
}

func (r *SESListTemplatesFuture) Get(ctx workflow.Context) (*ses.ListTemplatesOutput, error) {
	var output ses.ListTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESListVerifiedEmailAddressesFuture struct {
	Future workflow.Future
}

func (r *SESListVerifiedEmailAddressesFuture) Get(ctx workflow.Context) (*ses.ListVerifiedEmailAddressesOutput, error) {
	var output ses.ListVerifiedEmailAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESPutConfigurationSetDeliveryOptionsFuture struct {
	Future workflow.Future
}

func (r *SESPutConfigurationSetDeliveryOptionsFuture) Get(ctx workflow.Context) (*ses.PutConfigurationSetDeliveryOptionsOutput, error) {
	var output ses.PutConfigurationSetDeliveryOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESPutIdentityPolicyFuture struct {
	Future workflow.Future
}

func (r *SESPutIdentityPolicyFuture) Get(ctx workflow.Context) (*ses.PutIdentityPolicyOutput, error) {
	var output ses.PutIdentityPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESReorderReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SESReorderReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.ReorderReceiptRuleSetOutput, error) {
	var output ses.ReorderReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSendBounceFuture struct {
	Future workflow.Future
}

func (r *SESSendBounceFuture) Get(ctx workflow.Context) (*ses.SendBounceOutput, error) {
	var output ses.SendBounceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSendBulkTemplatedEmailFuture struct {
	Future workflow.Future
}

func (r *SESSendBulkTemplatedEmailFuture) Get(ctx workflow.Context) (*ses.SendBulkTemplatedEmailOutput, error) {
	var output ses.SendBulkTemplatedEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSendCustomVerificationEmailFuture struct {
	Future workflow.Future
}

func (r *SESSendCustomVerificationEmailFuture) Get(ctx workflow.Context) (*ses.SendCustomVerificationEmailOutput, error) {
	var output ses.SendCustomVerificationEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSendEmailFuture struct {
	Future workflow.Future
}

func (r *SESSendEmailFuture) Get(ctx workflow.Context) (*ses.SendEmailOutput, error) {
	var output ses.SendEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSendRawEmailFuture struct {
	Future workflow.Future
}

func (r *SESSendRawEmailFuture) Get(ctx workflow.Context) (*ses.SendRawEmailOutput, error) {
	var output ses.SendRawEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSendTemplatedEmailFuture struct {
	Future workflow.Future
}

func (r *SESSendTemplatedEmailFuture) Get(ctx workflow.Context) (*ses.SendTemplatedEmailOutput, error) {
	var output ses.SendTemplatedEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSetActiveReceiptRuleSetFuture struct {
	Future workflow.Future
}

func (r *SESSetActiveReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.SetActiveReceiptRuleSetOutput, error) {
	var output ses.SetActiveReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSetIdentityDkimEnabledFuture struct {
	Future workflow.Future
}

func (r *SESSetIdentityDkimEnabledFuture) Get(ctx workflow.Context) (*ses.SetIdentityDkimEnabledOutput, error) {
	var output ses.SetIdentityDkimEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSetIdentityFeedbackForwardingEnabledFuture struct {
	Future workflow.Future
}

func (r *SESSetIdentityFeedbackForwardingEnabledFuture) Get(ctx workflow.Context) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error) {
	var output ses.SetIdentityFeedbackForwardingEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSetIdentityHeadersInNotificationsEnabledFuture struct {
	Future workflow.Future
}

func (r *SESSetIdentityHeadersInNotificationsEnabledFuture) Get(ctx workflow.Context) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error) {
	var output ses.SetIdentityHeadersInNotificationsEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSetIdentityMailFromDomainFuture struct {
	Future workflow.Future
}

func (r *SESSetIdentityMailFromDomainFuture) Get(ctx workflow.Context) (*ses.SetIdentityMailFromDomainOutput, error) {
	var output ses.SetIdentityMailFromDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSetIdentityNotificationTopicFuture struct {
	Future workflow.Future
}

func (r *SESSetIdentityNotificationTopicFuture) Get(ctx workflow.Context) (*ses.SetIdentityNotificationTopicOutput, error) {
	var output ses.SetIdentityNotificationTopicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESSetReceiptRulePositionFuture struct {
	Future workflow.Future
}

func (r *SESSetReceiptRulePositionFuture) Get(ctx workflow.Context) (*ses.SetReceiptRulePositionOutput, error) {
	var output ses.SetReceiptRulePositionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESTestRenderTemplateFuture struct {
	Future workflow.Future
}

func (r *SESTestRenderTemplateFuture) Get(ctx workflow.Context) (*ses.TestRenderTemplateOutput, error) {
	var output ses.TestRenderTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESUpdateAccountSendingEnabledFuture struct {
	Future workflow.Future
}

func (r *SESUpdateAccountSendingEnabledFuture) Get(ctx workflow.Context) (*ses.UpdateAccountSendingEnabledOutput, error) {
	var output ses.UpdateAccountSendingEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESUpdateConfigurationSetEventDestinationFuture struct {
	Future workflow.Future
}

func (r *SESUpdateConfigurationSetEventDestinationFuture) Get(ctx workflow.Context) (*ses.UpdateConfigurationSetEventDestinationOutput, error) {
	var output ses.UpdateConfigurationSetEventDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESUpdateConfigurationSetReputationMetricsEnabledFuture struct {
	Future workflow.Future
}

func (r *SESUpdateConfigurationSetReputationMetricsEnabledFuture) Get(ctx workflow.Context) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error) {
	var output ses.UpdateConfigurationSetReputationMetricsEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESUpdateConfigurationSetSendingEnabledFuture struct {
	Future workflow.Future
}

func (r *SESUpdateConfigurationSetSendingEnabledFuture) Get(ctx workflow.Context) (*ses.UpdateConfigurationSetSendingEnabledOutput, error) {
	var output ses.UpdateConfigurationSetSendingEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESUpdateConfigurationSetTrackingOptionsFuture struct {
	Future workflow.Future
}

func (r *SESUpdateConfigurationSetTrackingOptionsFuture) Get(ctx workflow.Context) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error) {
	var output ses.UpdateConfigurationSetTrackingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESUpdateCustomVerificationEmailTemplateFuture struct {
	Future workflow.Future
}

func (r *SESUpdateCustomVerificationEmailTemplateFuture) Get(ctx workflow.Context) (*ses.UpdateCustomVerificationEmailTemplateOutput, error) {
	var output ses.UpdateCustomVerificationEmailTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESUpdateReceiptRuleFuture struct {
	Future workflow.Future
}

func (r *SESUpdateReceiptRuleFuture) Get(ctx workflow.Context) (*ses.UpdateReceiptRuleOutput, error) {
	var output ses.UpdateReceiptRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESUpdateTemplateFuture struct {
	Future workflow.Future
}

func (r *SESUpdateTemplateFuture) Get(ctx workflow.Context) (*ses.UpdateTemplateOutput, error) {
	var output ses.UpdateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESVerifyDomainDkimFuture struct {
	Future workflow.Future
}

func (r *SESVerifyDomainDkimFuture) Get(ctx workflow.Context) (*ses.VerifyDomainDkimOutput, error) {
	var output ses.VerifyDomainDkimOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESVerifyDomainIdentityFuture struct {
	Future workflow.Future
}

func (r *SESVerifyDomainIdentityFuture) Get(ctx workflow.Context) (*ses.VerifyDomainIdentityOutput, error) {
	var output ses.VerifyDomainIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESVerifyEmailAddressFuture struct {
	Future workflow.Future
}

func (r *SESVerifyEmailAddressFuture) Get(ctx workflow.Context) (*ses.VerifyEmailAddressOutput, error) {
	var output ses.VerifyEmailAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SESVerifyEmailIdentityFuture struct {
	Future workflow.Future
}

func (r *SESVerifyEmailIdentityFuture) Get(ctx workflow.Context) (*ses.VerifyEmailIdentityOutput, error) {
	var output ses.VerifyEmailIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CloneReceiptRuleSet(ctx workflow.Context, input *ses.CloneReceiptRuleSetInput) (*ses.CloneReceiptRuleSetOutput, error) {
	var output ses.CloneReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CloneReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CloneReceiptRuleSetAsync(ctx workflow.Context, input *ses.CloneReceiptRuleSetInput) *SESCloneReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CloneReceiptRuleSet", input)
	return &SESCloneReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) CreateConfigurationSet(ctx workflow.Context, input *ses.CreateConfigurationSetInput) (*ses.CreateConfigurationSetOutput, error) {
	var output ses.CreateConfigurationSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateConfigurationSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateConfigurationSetAsync(ctx workflow.Context, input *ses.CreateConfigurationSetInput) *SESCreateConfigurationSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateConfigurationSet", input)
	return &SESCreateConfigurationSetFuture{Future: future}
}

func (a *SESStub) CreateConfigurationSetEventDestination(ctx workflow.Context, input *ses.CreateConfigurationSetEventDestinationInput) (*ses.CreateConfigurationSetEventDestinationOutput, error) {
	var output ses.CreateConfigurationSetEventDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateConfigurationSetEventDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.CreateConfigurationSetEventDestinationInput) *SESCreateConfigurationSetEventDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateConfigurationSetEventDestination", input)
	return &SESCreateConfigurationSetEventDestinationFuture{Future: future}
}

func (a *SESStub) CreateConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.CreateConfigurationSetTrackingOptionsInput) (*ses.CreateConfigurationSetTrackingOptionsOutput, error) {
	var output ses.CreateConfigurationSetTrackingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateConfigurationSetTrackingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.CreateConfigurationSetTrackingOptionsInput) *SESCreateConfigurationSetTrackingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateConfigurationSetTrackingOptions", input)
	return &SESCreateConfigurationSetTrackingOptionsFuture{Future: future}
}

func (a *SESStub) CreateCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.CreateCustomVerificationEmailTemplateInput) (*ses.CreateCustomVerificationEmailTemplateOutput, error) {
	var output ses.CreateCustomVerificationEmailTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateCustomVerificationEmailTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.CreateCustomVerificationEmailTemplateInput) *SESCreateCustomVerificationEmailTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateCustomVerificationEmailTemplate", input)
	return &SESCreateCustomVerificationEmailTemplateFuture{Future: future}
}

func (a *SESStub) CreateReceiptFilter(ctx workflow.Context, input *ses.CreateReceiptFilterInput) (*ses.CreateReceiptFilterOutput, error) {
	var output ses.CreateReceiptFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateReceiptFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateReceiptFilterAsync(ctx workflow.Context, input *ses.CreateReceiptFilterInput) *SESCreateReceiptFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateReceiptFilter", input)
	return &SESCreateReceiptFilterFuture{Future: future}
}

func (a *SESStub) CreateReceiptRule(ctx workflow.Context, input *ses.CreateReceiptRuleInput) (*ses.CreateReceiptRuleOutput, error) {
	var output ses.CreateReceiptRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateReceiptRule", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateReceiptRuleAsync(ctx workflow.Context, input *ses.CreateReceiptRuleInput) *SESCreateReceiptRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateReceiptRule", input)
	return &SESCreateReceiptRuleFuture{Future: future}
}

func (a *SESStub) CreateReceiptRuleSet(ctx workflow.Context, input *ses.CreateReceiptRuleSetInput) (*ses.CreateReceiptRuleSetOutput, error) {
	var output ses.CreateReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateReceiptRuleSetAsync(ctx workflow.Context, input *ses.CreateReceiptRuleSetInput) *SESCreateReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateReceiptRuleSet", input)
	return &SESCreateReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) CreateTemplate(ctx workflow.Context, input *ses.CreateTemplateInput) (*ses.CreateTemplateOutput, error) {
	var output ses.CreateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.CreateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) CreateTemplateAsync(ctx workflow.Context, input *ses.CreateTemplateInput) *SESCreateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.CreateTemplate", input)
	return &SESCreateTemplateFuture{Future: future}
}

func (a *SESStub) DeleteConfigurationSet(ctx workflow.Context, input *ses.DeleteConfigurationSetInput) (*ses.DeleteConfigurationSetOutput, error) {
	var output ses.DeleteConfigurationSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteConfigurationSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteConfigurationSetAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetInput) *SESDeleteConfigurationSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteConfigurationSet", input)
	return &SESDeleteConfigurationSetFuture{Future: future}
}

func (a *SESStub) DeleteConfigurationSetEventDestination(ctx workflow.Context, input *ses.DeleteConfigurationSetEventDestinationInput) (*ses.DeleteConfigurationSetEventDestinationOutput, error) {
	var output ses.DeleteConfigurationSetEventDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteConfigurationSetEventDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetEventDestinationInput) *SESDeleteConfigurationSetEventDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteConfigurationSetEventDestination", input)
	return &SESDeleteConfigurationSetEventDestinationFuture{Future: future}
}

func (a *SESStub) DeleteConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error) {
	var output ses.DeleteConfigurationSetTrackingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteConfigurationSetTrackingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput) *SESDeleteConfigurationSetTrackingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteConfigurationSetTrackingOptions", input)
	return &SESDeleteConfigurationSetTrackingOptionsFuture{Future: future}
}

func (a *SESStub) DeleteCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.DeleteCustomVerificationEmailTemplateInput) (*ses.DeleteCustomVerificationEmailTemplateOutput, error) {
	var output ses.DeleteCustomVerificationEmailTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteCustomVerificationEmailTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.DeleteCustomVerificationEmailTemplateInput) *SESDeleteCustomVerificationEmailTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteCustomVerificationEmailTemplate", input)
	return &SESDeleteCustomVerificationEmailTemplateFuture{Future: future}
}

func (a *SESStub) DeleteIdentity(ctx workflow.Context, input *ses.DeleteIdentityInput) (*ses.DeleteIdentityOutput, error) {
	var output ses.DeleteIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteIdentityAsync(ctx workflow.Context, input *ses.DeleteIdentityInput) *SESDeleteIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteIdentity", input)
	return &SESDeleteIdentityFuture{Future: future}
}

func (a *SESStub) DeleteIdentityPolicy(ctx workflow.Context, input *ses.DeleteIdentityPolicyInput) (*ses.DeleteIdentityPolicyOutput, error) {
	var output ses.DeleteIdentityPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteIdentityPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteIdentityPolicyAsync(ctx workflow.Context, input *ses.DeleteIdentityPolicyInput) *SESDeleteIdentityPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteIdentityPolicy", input)
	return &SESDeleteIdentityPolicyFuture{Future: future}
}

func (a *SESStub) DeleteReceiptFilter(ctx workflow.Context, input *ses.DeleteReceiptFilterInput) (*ses.DeleteReceiptFilterOutput, error) {
	var output ses.DeleteReceiptFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteReceiptFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteReceiptFilterAsync(ctx workflow.Context, input *ses.DeleteReceiptFilterInput) *SESDeleteReceiptFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteReceiptFilter", input)
	return &SESDeleteReceiptFilterFuture{Future: future}
}

func (a *SESStub) DeleteReceiptRule(ctx workflow.Context, input *ses.DeleteReceiptRuleInput) (*ses.DeleteReceiptRuleOutput, error) {
	var output ses.DeleteReceiptRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteReceiptRule", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteReceiptRuleAsync(ctx workflow.Context, input *ses.DeleteReceiptRuleInput) *SESDeleteReceiptRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteReceiptRule", input)
	return &SESDeleteReceiptRuleFuture{Future: future}
}

func (a *SESStub) DeleteReceiptRuleSet(ctx workflow.Context, input *ses.DeleteReceiptRuleSetInput) (*ses.DeleteReceiptRuleSetOutput, error) {
	var output ses.DeleteReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteReceiptRuleSetAsync(ctx workflow.Context, input *ses.DeleteReceiptRuleSetInput) *SESDeleteReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteReceiptRuleSet", input)
	return &SESDeleteReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) DeleteTemplate(ctx workflow.Context, input *ses.DeleteTemplateInput) (*ses.DeleteTemplateOutput, error) {
	var output ses.DeleteTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteTemplateAsync(ctx workflow.Context, input *ses.DeleteTemplateInput) *SESDeleteTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteTemplate", input)
	return &SESDeleteTemplateFuture{Future: future}
}

func (a *SESStub) DeleteVerifiedEmailAddress(ctx workflow.Context, input *ses.DeleteVerifiedEmailAddressInput) (*ses.DeleteVerifiedEmailAddressOutput, error) {
	var output ses.DeleteVerifiedEmailAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DeleteVerifiedEmailAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DeleteVerifiedEmailAddressAsync(ctx workflow.Context, input *ses.DeleteVerifiedEmailAddressInput) *SESDeleteVerifiedEmailAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DeleteVerifiedEmailAddress", input)
	return &SESDeleteVerifiedEmailAddressFuture{Future: future}
}

func (a *SESStub) DescribeActiveReceiptRuleSet(ctx workflow.Context, input *ses.DescribeActiveReceiptRuleSetInput) (*ses.DescribeActiveReceiptRuleSetOutput, error) {
	var output ses.DescribeActiveReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DescribeActiveReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DescribeActiveReceiptRuleSetAsync(ctx workflow.Context, input *ses.DescribeActiveReceiptRuleSetInput) *SESDescribeActiveReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DescribeActiveReceiptRuleSet", input)
	return &SESDescribeActiveReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) DescribeConfigurationSet(ctx workflow.Context, input *ses.DescribeConfigurationSetInput) (*ses.DescribeConfigurationSetOutput, error) {
	var output ses.DescribeConfigurationSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DescribeConfigurationSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DescribeConfigurationSetAsync(ctx workflow.Context, input *ses.DescribeConfigurationSetInput) *SESDescribeConfigurationSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DescribeConfigurationSet", input)
	return &SESDescribeConfigurationSetFuture{Future: future}
}

func (a *SESStub) DescribeReceiptRule(ctx workflow.Context, input *ses.DescribeReceiptRuleInput) (*ses.DescribeReceiptRuleOutput, error) {
	var output ses.DescribeReceiptRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DescribeReceiptRule", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DescribeReceiptRuleAsync(ctx workflow.Context, input *ses.DescribeReceiptRuleInput) *SESDescribeReceiptRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DescribeReceiptRule", input)
	return &SESDescribeReceiptRuleFuture{Future: future}
}

func (a *SESStub) DescribeReceiptRuleSet(ctx workflow.Context, input *ses.DescribeReceiptRuleSetInput) (*ses.DescribeReceiptRuleSetOutput, error) {
	var output ses.DescribeReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.DescribeReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) DescribeReceiptRuleSetAsync(ctx workflow.Context, input *ses.DescribeReceiptRuleSetInput) *SESDescribeReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.DescribeReceiptRuleSet", input)
	return &SESDescribeReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) GetAccountSendingEnabled(ctx workflow.Context, input *ses.GetAccountSendingEnabledInput) (*ses.GetAccountSendingEnabledOutput, error) {
	var output ses.GetAccountSendingEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetAccountSendingEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetAccountSendingEnabledAsync(ctx workflow.Context, input *ses.GetAccountSendingEnabledInput) *SESGetAccountSendingEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetAccountSendingEnabled", input)
	return &SESGetAccountSendingEnabledFuture{Future: future}
}

func (a *SESStub) GetCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.GetCustomVerificationEmailTemplateInput) (*ses.GetCustomVerificationEmailTemplateOutput, error) {
	var output ses.GetCustomVerificationEmailTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetCustomVerificationEmailTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.GetCustomVerificationEmailTemplateInput) *SESGetCustomVerificationEmailTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetCustomVerificationEmailTemplate", input)
	return &SESGetCustomVerificationEmailTemplateFuture{Future: future}
}

func (a *SESStub) GetIdentityDkimAttributes(ctx workflow.Context, input *ses.GetIdentityDkimAttributesInput) (*ses.GetIdentityDkimAttributesOutput, error) {
	var output ses.GetIdentityDkimAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityDkimAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetIdentityDkimAttributesAsync(ctx workflow.Context, input *ses.GetIdentityDkimAttributesInput) *SESGetIdentityDkimAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityDkimAttributes", input)
	return &SESGetIdentityDkimAttributesFuture{Future: future}
}

func (a *SESStub) GetIdentityMailFromDomainAttributes(ctx workflow.Context, input *ses.GetIdentityMailFromDomainAttributesInput) (*ses.GetIdentityMailFromDomainAttributesOutput, error) {
	var output ses.GetIdentityMailFromDomainAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityMailFromDomainAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetIdentityMailFromDomainAttributesAsync(ctx workflow.Context, input *ses.GetIdentityMailFromDomainAttributesInput) *SESGetIdentityMailFromDomainAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityMailFromDomainAttributes", input)
	return &SESGetIdentityMailFromDomainAttributesFuture{Future: future}
}

func (a *SESStub) GetIdentityNotificationAttributes(ctx workflow.Context, input *ses.GetIdentityNotificationAttributesInput) (*ses.GetIdentityNotificationAttributesOutput, error) {
	var output ses.GetIdentityNotificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityNotificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetIdentityNotificationAttributesAsync(ctx workflow.Context, input *ses.GetIdentityNotificationAttributesInput) *SESGetIdentityNotificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityNotificationAttributes", input)
	return &SESGetIdentityNotificationAttributesFuture{Future: future}
}

func (a *SESStub) GetIdentityPolicies(ctx workflow.Context, input *ses.GetIdentityPoliciesInput) (*ses.GetIdentityPoliciesOutput, error) {
	var output ses.GetIdentityPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetIdentityPoliciesAsync(ctx workflow.Context, input *ses.GetIdentityPoliciesInput) *SESGetIdentityPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityPolicies", input)
	return &SESGetIdentityPoliciesFuture{Future: future}
}

func (a *SESStub) GetIdentityVerificationAttributes(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) (*ses.GetIdentityVerificationAttributesOutput, error) {
	var output ses.GetIdentityVerificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityVerificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetIdentityVerificationAttributesAsync(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) *SESGetIdentityVerificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetIdentityVerificationAttributes", input)
	return &SESGetIdentityVerificationAttributesFuture{Future: future}
}

func (a *SESStub) GetSendQuota(ctx workflow.Context, input *ses.GetSendQuotaInput) (*ses.GetSendQuotaOutput, error) {
	var output ses.GetSendQuotaOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetSendQuota", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetSendQuotaAsync(ctx workflow.Context, input *ses.GetSendQuotaInput) *SESGetSendQuotaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetSendQuota", input)
	return &SESGetSendQuotaFuture{Future: future}
}

func (a *SESStub) GetSendStatistics(ctx workflow.Context, input *ses.GetSendStatisticsInput) (*ses.GetSendStatisticsOutput, error) {
	var output ses.GetSendStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetSendStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetSendStatisticsAsync(ctx workflow.Context, input *ses.GetSendStatisticsInput) *SESGetSendStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetSendStatistics", input)
	return &SESGetSendStatisticsFuture{Future: future}
}

func (a *SESStub) GetTemplate(ctx workflow.Context, input *ses.GetTemplateInput) (*ses.GetTemplateOutput, error) {
	var output ses.GetTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.GetTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) GetTemplateAsync(ctx workflow.Context, input *ses.GetTemplateInput) *SESGetTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.GetTemplate", input)
	return &SESGetTemplateFuture{Future: future}
}

func (a *SESStub) ListConfigurationSets(ctx workflow.Context, input *ses.ListConfigurationSetsInput) (*ses.ListConfigurationSetsOutput, error) {
	var output ses.ListConfigurationSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListConfigurationSets", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListConfigurationSetsAsync(ctx workflow.Context, input *ses.ListConfigurationSetsInput) *SESListConfigurationSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListConfigurationSets", input)
	return &SESListConfigurationSetsFuture{Future: future}
}

func (a *SESStub) ListCustomVerificationEmailTemplates(ctx workflow.Context, input *ses.ListCustomVerificationEmailTemplatesInput) (*ses.ListCustomVerificationEmailTemplatesOutput, error) {
	var output ses.ListCustomVerificationEmailTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListCustomVerificationEmailTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListCustomVerificationEmailTemplatesAsync(ctx workflow.Context, input *ses.ListCustomVerificationEmailTemplatesInput) *SESListCustomVerificationEmailTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListCustomVerificationEmailTemplates", input)
	return &SESListCustomVerificationEmailTemplatesFuture{Future: future}
}

func (a *SESStub) ListIdentities(ctx workflow.Context, input *ses.ListIdentitiesInput) (*ses.ListIdentitiesOutput, error) {
	var output ses.ListIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListIdentitiesAsync(ctx workflow.Context, input *ses.ListIdentitiesInput) *SESListIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListIdentities", input)
	return &SESListIdentitiesFuture{Future: future}
}

func (a *SESStub) ListIdentityPolicies(ctx workflow.Context, input *ses.ListIdentityPoliciesInput) (*ses.ListIdentityPoliciesOutput, error) {
	var output ses.ListIdentityPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListIdentityPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListIdentityPoliciesAsync(ctx workflow.Context, input *ses.ListIdentityPoliciesInput) *SESListIdentityPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListIdentityPolicies", input)
	return &SESListIdentityPoliciesFuture{Future: future}
}

func (a *SESStub) ListReceiptFilters(ctx workflow.Context, input *ses.ListReceiptFiltersInput) (*ses.ListReceiptFiltersOutput, error) {
	var output ses.ListReceiptFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListReceiptFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListReceiptFiltersAsync(ctx workflow.Context, input *ses.ListReceiptFiltersInput) *SESListReceiptFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListReceiptFilters", input)
	return &SESListReceiptFiltersFuture{Future: future}
}

func (a *SESStub) ListReceiptRuleSets(ctx workflow.Context, input *ses.ListReceiptRuleSetsInput) (*ses.ListReceiptRuleSetsOutput, error) {
	var output ses.ListReceiptRuleSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListReceiptRuleSets", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListReceiptRuleSetsAsync(ctx workflow.Context, input *ses.ListReceiptRuleSetsInput) *SESListReceiptRuleSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListReceiptRuleSets", input)
	return &SESListReceiptRuleSetsFuture{Future: future}
}

func (a *SESStub) ListTemplates(ctx workflow.Context, input *ses.ListTemplatesInput) (*ses.ListTemplatesOutput, error) {
	var output ses.ListTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListTemplatesAsync(ctx workflow.Context, input *ses.ListTemplatesInput) *SESListTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListTemplates", input)
	return &SESListTemplatesFuture{Future: future}
}

func (a *SESStub) ListVerifiedEmailAddresses(ctx workflow.Context, input *ses.ListVerifiedEmailAddressesInput) (*ses.ListVerifiedEmailAddressesOutput, error) {
	var output ses.ListVerifiedEmailAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ListVerifiedEmailAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ListVerifiedEmailAddressesAsync(ctx workflow.Context, input *ses.ListVerifiedEmailAddressesInput) *SESListVerifiedEmailAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ListVerifiedEmailAddresses", input)
	return &SESListVerifiedEmailAddressesFuture{Future: future}
}

func (a *SESStub) PutConfigurationSetDeliveryOptions(ctx workflow.Context, input *ses.PutConfigurationSetDeliveryOptionsInput) (*ses.PutConfigurationSetDeliveryOptionsOutput, error) {
	var output ses.PutConfigurationSetDeliveryOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.PutConfigurationSetDeliveryOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) PutConfigurationSetDeliveryOptionsAsync(ctx workflow.Context, input *ses.PutConfigurationSetDeliveryOptionsInput) *SESPutConfigurationSetDeliveryOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.PutConfigurationSetDeliveryOptions", input)
	return &SESPutConfigurationSetDeliveryOptionsFuture{Future: future}
}

func (a *SESStub) PutIdentityPolicy(ctx workflow.Context, input *ses.PutIdentityPolicyInput) (*ses.PutIdentityPolicyOutput, error) {
	var output ses.PutIdentityPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.PutIdentityPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) PutIdentityPolicyAsync(ctx workflow.Context, input *ses.PutIdentityPolicyInput) *SESPutIdentityPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.PutIdentityPolicy", input)
	return &SESPutIdentityPolicyFuture{Future: future}
}

func (a *SESStub) ReorderReceiptRuleSet(ctx workflow.Context, input *ses.ReorderReceiptRuleSetInput) (*ses.ReorderReceiptRuleSetOutput, error) {
	var output ses.ReorderReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.ReorderReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) ReorderReceiptRuleSetAsync(ctx workflow.Context, input *ses.ReorderReceiptRuleSetInput) *SESReorderReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.ReorderReceiptRuleSet", input)
	return &SESReorderReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) SendBounce(ctx workflow.Context, input *ses.SendBounceInput) (*ses.SendBounceOutput, error) {
	var output ses.SendBounceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SendBounce", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SendBounceAsync(ctx workflow.Context, input *ses.SendBounceInput) *SESSendBounceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SendBounce", input)
	return &SESSendBounceFuture{Future: future}
}

func (a *SESStub) SendBulkTemplatedEmail(ctx workflow.Context, input *ses.SendBulkTemplatedEmailInput) (*ses.SendBulkTemplatedEmailOutput, error) {
	var output ses.SendBulkTemplatedEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SendBulkTemplatedEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SendBulkTemplatedEmailAsync(ctx workflow.Context, input *ses.SendBulkTemplatedEmailInput) *SESSendBulkTemplatedEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SendBulkTemplatedEmail", input)
	return &SESSendBulkTemplatedEmailFuture{Future: future}
}

func (a *SESStub) SendCustomVerificationEmail(ctx workflow.Context, input *ses.SendCustomVerificationEmailInput) (*ses.SendCustomVerificationEmailOutput, error) {
	var output ses.SendCustomVerificationEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SendCustomVerificationEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SendCustomVerificationEmailAsync(ctx workflow.Context, input *ses.SendCustomVerificationEmailInput) *SESSendCustomVerificationEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SendCustomVerificationEmail", input)
	return &SESSendCustomVerificationEmailFuture{Future: future}
}

func (a *SESStub) SendEmail(ctx workflow.Context, input *ses.SendEmailInput) (*ses.SendEmailOutput, error) {
	var output ses.SendEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SendEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SendEmailAsync(ctx workflow.Context, input *ses.SendEmailInput) *SESSendEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SendEmail", input)
	return &SESSendEmailFuture{Future: future}
}

func (a *SESStub) SendRawEmail(ctx workflow.Context, input *ses.SendRawEmailInput) (*ses.SendRawEmailOutput, error) {
	var output ses.SendRawEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SendRawEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SendRawEmailAsync(ctx workflow.Context, input *ses.SendRawEmailInput) *SESSendRawEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SendRawEmail", input)
	return &SESSendRawEmailFuture{Future: future}
}

func (a *SESStub) SendTemplatedEmail(ctx workflow.Context, input *ses.SendTemplatedEmailInput) (*ses.SendTemplatedEmailOutput, error) {
	var output ses.SendTemplatedEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SendTemplatedEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SendTemplatedEmailAsync(ctx workflow.Context, input *ses.SendTemplatedEmailInput) *SESSendTemplatedEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SendTemplatedEmail", input)
	return &SESSendTemplatedEmailFuture{Future: future}
}

func (a *SESStub) SetActiveReceiptRuleSet(ctx workflow.Context, input *ses.SetActiveReceiptRuleSetInput) (*ses.SetActiveReceiptRuleSetOutput, error) {
	var output ses.SetActiveReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetActiveReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetActiveReceiptRuleSetAsync(ctx workflow.Context, input *ses.SetActiveReceiptRuleSetInput) *SESSetActiveReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetActiveReceiptRuleSet", input)
	return &SESSetActiveReceiptRuleSetFuture{Future: future}
}

func (a *SESStub) SetIdentityDkimEnabled(ctx workflow.Context, input *ses.SetIdentityDkimEnabledInput) (*ses.SetIdentityDkimEnabledOutput, error) {
	var output ses.SetIdentityDkimEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityDkimEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetIdentityDkimEnabledAsync(ctx workflow.Context, input *ses.SetIdentityDkimEnabledInput) *SESSetIdentityDkimEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityDkimEnabled", input)
	return &SESSetIdentityDkimEnabledFuture{Future: future}
}

func (a *SESStub) SetIdentityFeedbackForwardingEnabled(ctx workflow.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error) {
	var output ses.SetIdentityFeedbackForwardingEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityFeedbackForwardingEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetIdentityFeedbackForwardingEnabledAsync(ctx workflow.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput) *SESSetIdentityFeedbackForwardingEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityFeedbackForwardingEnabled", input)
	return &SESSetIdentityFeedbackForwardingEnabledFuture{Future: future}
}

func (a *SESStub) SetIdentityHeadersInNotificationsEnabled(ctx workflow.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error) {
	var output ses.SetIdentityHeadersInNotificationsEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityHeadersInNotificationsEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetIdentityHeadersInNotificationsEnabledAsync(ctx workflow.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput) *SESSetIdentityHeadersInNotificationsEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityHeadersInNotificationsEnabled", input)
	return &SESSetIdentityHeadersInNotificationsEnabledFuture{Future: future}
}

func (a *SESStub) SetIdentityMailFromDomain(ctx workflow.Context, input *ses.SetIdentityMailFromDomainInput) (*ses.SetIdentityMailFromDomainOutput, error) {
	var output ses.SetIdentityMailFromDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityMailFromDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetIdentityMailFromDomainAsync(ctx workflow.Context, input *ses.SetIdentityMailFromDomainInput) *SESSetIdentityMailFromDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityMailFromDomain", input)
	return &SESSetIdentityMailFromDomainFuture{Future: future}
}

func (a *SESStub) SetIdentityNotificationTopic(ctx workflow.Context, input *ses.SetIdentityNotificationTopicInput) (*ses.SetIdentityNotificationTopicOutput, error) {
	var output ses.SetIdentityNotificationTopicOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityNotificationTopic", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetIdentityNotificationTopicAsync(ctx workflow.Context, input *ses.SetIdentityNotificationTopicInput) *SESSetIdentityNotificationTopicFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetIdentityNotificationTopic", input)
	return &SESSetIdentityNotificationTopicFuture{Future: future}
}

func (a *SESStub) SetReceiptRulePosition(ctx workflow.Context, input *ses.SetReceiptRulePositionInput) (*ses.SetReceiptRulePositionOutput, error) {
	var output ses.SetReceiptRulePositionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.SetReceiptRulePosition", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) SetReceiptRulePositionAsync(ctx workflow.Context, input *ses.SetReceiptRulePositionInput) *SESSetReceiptRulePositionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.SetReceiptRulePosition", input)
	return &SESSetReceiptRulePositionFuture{Future: future}
}

func (a *SESStub) TestRenderTemplate(ctx workflow.Context, input *ses.TestRenderTemplateInput) (*ses.TestRenderTemplateOutput, error) {
	var output ses.TestRenderTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.TestRenderTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) TestRenderTemplateAsync(ctx workflow.Context, input *ses.TestRenderTemplateInput) *SESTestRenderTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.TestRenderTemplate", input)
	return &SESTestRenderTemplateFuture{Future: future}
}

func (a *SESStub) UpdateAccountSendingEnabled(ctx workflow.Context, input *ses.UpdateAccountSendingEnabledInput) (*ses.UpdateAccountSendingEnabledOutput, error) {
	var output ses.UpdateAccountSendingEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateAccountSendingEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateAccountSendingEnabledAsync(ctx workflow.Context, input *ses.UpdateAccountSendingEnabledInput) *SESUpdateAccountSendingEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateAccountSendingEnabled", input)
	return &SESUpdateAccountSendingEnabledFuture{Future: future}
}

func (a *SESStub) UpdateConfigurationSetEventDestination(ctx workflow.Context, input *ses.UpdateConfigurationSetEventDestinationInput) (*ses.UpdateConfigurationSetEventDestinationOutput, error) {
	var output ses.UpdateConfigurationSetEventDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetEventDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetEventDestinationInput) *SESUpdateConfigurationSetEventDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetEventDestination", input)
	return &SESUpdateConfigurationSetEventDestinationFuture{Future: future}
}

func (a *SESStub) UpdateConfigurationSetReputationMetricsEnabled(ctx workflow.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error) {
	var output ses.UpdateConfigurationSetReputationMetricsEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetReputationMetricsEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateConfigurationSetReputationMetricsEnabledAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput) *SESUpdateConfigurationSetReputationMetricsEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetReputationMetricsEnabled", input)
	return &SESUpdateConfigurationSetReputationMetricsEnabledFuture{Future: future}
}

func (a *SESStub) UpdateConfigurationSetSendingEnabled(ctx workflow.Context, input *ses.UpdateConfigurationSetSendingEnabledInput) (*ses.UpdateConfigurationSetSendingEnabledOutput, error) {
	var output ses.UpdateConfigurationSetSendingEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetSendingEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateConfigurationSetSendingEnabledAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetSendingEnabledInput) *SESUpdateConfigurationSetSendingEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetSendingEnabled", input)
	return &SESUpdateConfigurationSetSendingEnabledFuture{Future: future}
}

func (a *SESStub) UpdateConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error) {
	var output ses.UpdateConfigurationSetTrackingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetTrackingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput) *SESUpdateConfigurationSetTrackingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateConfigurationSetTrackingOptions", input)
	return &SESUpdateConfigurationSetTrackingOptionsFuture{Future: future}
}

func (a *SESStub) UpdateCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.UpdateCustomVerificationEmailTemplateInput) (*ses.UpdateCustomVerificationEmailTemplateOutput, error) {
	var output ses.UpdateCustomVerificationEmailTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateCustomVerificationEmailTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.UpdateCustomVerificationEmailTemplateInput) *SESUpdateCustomVerificationEmailTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateCustomVerificationEmailTemplate", input)
	return &SESUpdateCustomVerificationEmailTemplateFuture{Future: future}
}

func (a *SESStub) UpdateReceiptRule(ctx workflow.Context, input *ses.UpdateReceiptRuleInput) (*ses.UpdateReceiptRuleOutput, error) {
	var output ses.UpdateReceiptRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateReceiptRule", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateReceiptRuleAsync(ctx workflow.Context, input *ses.UpdateReceiptRuleInput) *SESUpdateReceiptRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateReceiptRule", input)
	return &SESUpdateReceiptRuleFuture{Future: future}
}

func (a *SESStub) UpdateTemplate(ctx workflow.Context, input *ses.UpdateTemplateInput) (*ses.UpdateTemplateOutput, error) {
	var output ses.UpdateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.UpdateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) UpdateTemplateAsync(ctx workflow.Context, input *ses.UpdateTemplateInput) *SESUpdateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.UpdateTemplate", input)
	return &SESUpdateTemplateFuture{Future: future}
}

func (a *SESStub) VerifyDomainDkim(ctx workflow.Context, input *ses.VerifyDomainDkimInput) (*ses.VerifyDomainDkimOutput, error) {
	var output ses.VerifyDomainDkimOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.VerifyDomainDkim", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) VerifyDomainDkimAsync(ctx workflow.Context, input *ses.VerifyDomainDkimInput) *SESVerifyDomainDkimFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.VerifyDomainDkim", input)
	return &SESVerifyDomainDkimFuture{Future: future}
}

func (a *SESStub) VerifyDomainIdentity(ctx workflow.Context, input *ses.VerifyDomainIdentityInput) (*ses.VerifyDomainIdentityOutput, error) {
	var output ses.VerifyDomainIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.VerifyDomainIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) VerifyDomainIdentityAsync(ctx workflow.Context, input *ses.VerifyDomainIdentityInput) *SESVerifyDomainIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.VerifyDomainIdentity", input)
	return &SESVerifyDomainIdentityFuture{Future: future}
}

func (a *SESStub) VerifyEmailAddress(ctx workflow.Context, input *ses.VerifyEmailAddressInput) (*ses.VerifyEmailAddressOutput, error) {
	var output ses.VerifyEmailAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.VerifyEmailAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) VerifyEmailAddressAsync(ctx workflow.Context, input *ses.VerifyEmailAddressInput) *SESVerifyEmailAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.VerifyEmailAddress", input)
	return &SESVerifyEmailAddressFuture{Future: future}
}

func (a *SESStub) VerifyEmailIdentity(ctx workflow.Context, input *ses.VerifyEmailIdentityInput) (*ses.VerifyEmailIdentityOutput, error) {
	var output ses.VerifyEmailIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.ses.VerifyEmailIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *SESStub) VerifyEmailIdentityAsync(ctx workflow.Context, input *ses.VerifyEmailIdentityInput) *SESVerifyEmailIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.VerifyEmailIdentity", input)
	return &SESVerifyEmailIdentityFuture{Future: future}
}

func (a *SESStub) WaitUntilIdentityExists(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ses.WaitUntilIdentityExists", input).Get(ctx, nil)
}

func (a *SESStub) WaitUntilIdentityExistsAsync(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ses.WaitUntilIdentityExists", input)
	return NewVoidFuture(future)
}
