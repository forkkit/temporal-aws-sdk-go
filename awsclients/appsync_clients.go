// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/appsync"
	"go.temporal.io/sdk/workflow"
)

type AppSyncClient interface {
	CreateApiCache(ctx workflow.Context, input *appsync.CreateApiCacheInput) (*appsync.CreateApiCacheOutput, error)
	CreateApiCacheAsync(ctx workflow.Context, input *appsync.CreateApiCacheInput) *AppsyncCreateApiCacheFuture

	CreateApiKey(ctx workflow.Context, input *appsync.CreateApiKeyInput) (*appsync.CreateApiKeyOutput, error)
	CreateApiKeyAsync(ctx workflow.Context, input *appsync.CreateApiKeyInput) *AppsyncCreateApiKeyFuture

	CreateDataSource(ctx workflow.Context, input *appsync.CreateDataSourceInput) (*appsync.CreateDataSourceOutput, error)
	CreateDataSourceAsync(ctx workflow.Context, input *appsync.CreateDataSourceInput) *AppsyncCreateDataSourceFuture

	CreateFunction(ctx workflow.Context, input *appsync.CreateFunctionInput) (*appsync.CreateFunctionOutput, error)
	CreateFunctionAsync(ctx workflow.Context, input *appsync.CreateFunctionInput) *AppsyncCreateFunctionFuture

	CreateGraphqlApi(ctx workflow.Context, input *appsync.CreateGraphqlApiInput) (*appsync.CreateGraphqlApiOutput, error)
	CreateGraphqlApiAsync(ctx workflow.Context, input *appsync.CreateGraphqlApiInput) *AppsyncCreateGraphqlApiFuture

	CreateResolver(ctx workflow.Context, input *appsync.CreateResolverInput) (*appsync.CreateResolverOutput, error)
	CreateResolverAsync(ctx workflow.Context, input *appsync.CreateResolverInput) *AppsyncCreateResolverFuture

	CreateType(ctx workflow.Context, input *appsync.CreateTypeInput) (*appsync.CreateTypeOutput, error)
	CreateTypeAsync(ctx workflow.Context, input *appsync.CreateTypeInput) *AppsyncCreateTypeFuture

	DeleteApiCache(ctx workflow.Context, input *appsync.DeleteApiCacheInput) (*appsync.DeleteApiCacheOutput, error)
	DeleteApiCacheAsync(ctx workflow.Context, input *appsync.DeleteApiCacheInput) *AppsyncDeleteApiCacheFuture

	DeleteApiKey(ctx workflow.Context, input *appsync.DeleteApiKeyInput) (*appsync.DeleteApiKeyOutput, error)
	DeleteApiKeyAsync(ctx workflow.Context, input *appsync.DeleteApiKeyInput) *AppsyncDeleteApiKeyFuture

	DeleteDataSource(ctx workflow.Context, input *appsync.DeleteDataSourceInput) (*appsync.DeleteDataSourceOutput, error)
	DeleteDataSourceAsync(ctx workflow.Context, input *appsync.DeleteDataSourceInput) *AppsyncDeleteDataSourceFuture

	DeleteFunction(ctx workflow.Context, input *appsync.DeleteFunctionInput) (*appsync.DeleteFunctionOutput, error)
	DeleteFunctionAsync(ctx workflow.Context, input *appsync.DeleteFunctionInput) *AppsyncDeleteFunctionFuture

	DeleteGraphqlApi(ctx workflow.Context, input *appsync.DeleteGraphqlApiInput) (*appsync.DeleteGraphqlApiOutput, error)
	DeleteGraphqlApiAsync(ctx workflow.Context, input *appsync.DeleteGraphqlApiInput) *AppsyncDeleteGraphqlApiFuture

	DeleteResolver(ctx workflow.Context, input *appsync.DeleteResolverInput) (*appsync.DeleteResolverOutput, error)
	DeleteResolverAsync(ctx workflow.Context, input *appsync.DeleteResolverInput) *AppsyncDeleteResolverFuture

	DeleteType(ctx workflow.Context, input *appsync.DeleteTypeInput) (*appsync.DeleteTypeOutput, error)
	DeleteTypeAsync(ctx workflow.Context, input *appsync.DeleteTypeInput) *AppsyncDeleteTypeFuture

	FlushApiCache(ctx workflow.Context, input *appsync.FlushApiCacheInput) (*appsync.FlushApiCacheOutput, error)
	FlushApiCacheAsync(ctx workflow.Context, input *appsync.FlushApiCacheInput) *AppsyncFlushApiCacheFuture

	GetApiCache(ctx workflow.Context, input *appsync.GetApiCacheInput) (*appsync.GetApiCacheOutput, error)
	GetApiCacheAsync(ctx workflow.Context, input *appsync.GetApiCacheInput) *AppsyncGetApiCacheFuture

	GetDataSource(ctx workflow.Context, input *appsync.GetDataSourceInput) (*appsync.GetDataSourceOutput, error)
	GetDataSourceAsync(ctx workflow.Context, input *appsync.GetDataSourceInput) *AppsyncGetDataSourceFuture

	GetFunction(ctx workflow.Context, input *appsync.GetFunctionInput) (*appsync.GetFunctionOutput, error)
	GetFunctionAsync(ctx workflow.Context, input *appsync.GetFunctionInput) *AppsyncGetFunctionFuture

	GetGraphqlApi(ctx workflow.Context, input *appsync.GetGraphqlApiInput) (*appsync.GetGraphqlApiOutput, error)
	GetGraphqlApiAsync(ctx workflow.Context, input *appsync.GetGraphqlApiInput) *AppsyncGetGraphqlApiFuture

	GetIntrospectionSchema(ctx workflow.Context, input *appsync.GetIntrospectionSchemaInput) (*appsync.GetIntrospectionSchemaOutput, error)
	GetIntrospectionSchemaAsync(ctx workflow.Context, input *appsync.GetIntrospectionSchemaInput) *AppsyncGetIntrospectionSchemaFuture

	GetResolver(ctx workflow.Context, input *appsync.GetResolverInput) (*appsync.GetResolverOutput, error)
	GetResolverAsync(ctx workflow.Context, input *appsync.GetResolverInput) *AppsyncGetResolverFuture

	GetSchemaCreationStatus(ctx workflow.Context, input *appsync.GetSchemaCreationStatusInput) (*appsync.GetSchemaCreationStatusOutput, error)
	GetSchemaCreationStatusAsync(ctx workflow.Context, input *appsync.GetSchemaCreationStatusInput) *AppsyncGetSchemaCreationStatusFuture

	GetType(ctx workflow.Context, input *appsync.GetTypeInput) (*appsync.GetTypeOutput, error)
	GetTypeAsync(ctx workflow.Context, input *appsync.GetTypeInput) *AppsyncGetTypeFuture

	ListApiKeys(ctx workflow.Context, input *appsync.ListApiKeysInput) (*appsync.ListApiKeysOutput, error)
	ListApiKeysAsync(ctx workflow.Context, input *appsync.ListApiKeysInput) *AppsyncListApiKeysFuture

	ListDataSources(ctx workflow.Context, input *appsync.ListDataSourcesInput) (*appsync.ListDataSourcesOutput, error)
	ListDataSourcesAsync(ctx workflow.Context, input *appsync.ListDataSourcesInput) *AppsyncListDataSourcesFuture

	ListFunctions(ctx workflow.Context, input *appsync.ListFunctionsInput) (*appsync.ListFunctionsOutput, error)
	ListFunctionsAsync(ctx workflow.Context, input *appsync.ListFunctionsInput) *AppsyncListFunctionsFuture

	ListGraphqlApis(ctx workflow.Context, input *appsync.ListGraphqlApisInput) (*appsync.ListGraphqlApisOutput, error)
	ListGraphqlApisAsync(ctx workflow.Context, input *appsync.ListGraphqlApisInput) *AppsyncListGraphqlApisFuture

	ListResolvers(ctx workflow.Context, input *appsync.ListResolversInput) (*appsync.ListResolversOutput, error)
	ListResolversAsync(ctx workflow.Context, input *appsync.ListResolversInput) *AppsyncListResolversFuture

	ListResolversByFunction(ctx workflow.Context, input *appsync.ListResolversByFunctionInput) (*appsync.ListResolversByFunctionOutput, error)
	ListResolversByFunctionAsync(ctx workflow.Context, input *appsync.ListResolversByFunctionInput) *AppsyncListResolversByFunctionFuture

	ListTagsForResource(ctx workflow.Context, input *appsync.ListTagsForResourceInput) (*appsync.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *appsync.ListTagsForResourceInput) *AppsyncListTagsForResourceFuture

	ListTypes(ctx workflow.Context, input *appsync.ListTypesInput) (*appsync.ListTypesOutput, error)
	ListTypesAsync(ctx workflow.Context, input *appsync.ListTypesInput) *AppsyncListTypesFuture

	StartSchemaCreation(ctx workflow.Context, input *appsync.StartSchemaCreationInput) (*appsync.StartSchemaCreationOutput, error)
	StartSchemaCreationAsync(ctx workflow.Context, input *appsync.StartSchemaCreationInput) *AppsyncStartSchemaCreationFuture

	TagResource(ctx workflow.Context, input *appsync.TagResourceInput) (*appsync.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *appsync.TagResourceInput) *AppsyncTagResourceFuture

	UntagResource(ctx workflow.Context, input *appsync.UntagResourceInput) (*appsync.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *appsync.UntagResourceInput) *AppsyncUntagResourceFuture

	UpdateApiCache(ctx workflow.Context, input *appsync.UpdateApiCacheInput) (*appsync.UpdateApiCacheOutput, error)
	UpdateApiCacheAsync(ctx workflow.Context, input *appsync.UpdateApiCacheInput) *AppsyncUpdateApiCacheFuture

	UpdateApiKey(ctx workflow.Context, input *appsync.UpdateApiKeyInput) (*appsync.UpdateApiKeyOutput, error)
	UpdateApiKeyAsync(ctx workflow.Context, input *appsync.UpdateApiKeyInput) *AppsyncUpdateApiKeyFuture

	UpdateDataSource(ctx workflow.Context, input *appsync.UpdateDataSourceInput) (*appsync.UpdateDataSourceOutput, error)
	UpdateDataSourceAsync(ctx workflow.Context, input *appsync.UpdateDataSourceInput) *AppsyncUpdateDataSourceFuture

	UpdateFunction(ctx workflow.Context, input *appsync.UpdateFunctionInput) (*appsync.UpdateFunctionOutput, error)
	UpdateFunctionAsync(ctx workflow.Context, input *appsync.UpdateFunctionInput) *AppsyncUpdateFunctionFuture

	UpdateGraphqlApi(ctx workflow.Context, input *appsync.UpdateGraphqlApiInput) (*appsync.UpdateGraphqlApiOutput, error)
	UpdateGraphqlApiAsync(ctx workflow.Context, input *appsync.UpdateGraphqlApiInput) *AppsyncUpdateGraphqlApiFuture

	UpdateResolver(ctx workflow.Context, input *appsync.UpdateResolverInput) (*appsync.UpdateResolverOutput, error)
	UpdateResolverAsync(ctx workflow.Context, input *appsync.UpdateResolverInput) *AppsyncUpdateResolverFuture

	UpdateType(ctx workflow.Context, input *appsync.UpdateTypeInput) (*appsync.UpdateTypeOutput, error)
	UpdateTypeAsync(ctx workflow.Context, input *appsync.UpdateTypeInput) *AppsyncUpdateTypeFuture
}

type AppSyncStub struct{}

func NewAppSyncStub() AppSyncClient {
	return &AppSyncStub{}
}

type AppsyncCreateApiCacheFuture struct {
	Future workflow.Future
}

func (r *AppsyncCreateApiCacheFuture) Get(ctx workflow.Context) (*appsync.CreateApiCacheOutput, error) {
	var output appsync.CreateApiCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncCreateApiKeyFuture struct {
	Future workflow.Future
}

func (r *AppsyncCreateApiKeyFuture) Get(ctx workflow.Context) (*appsync.CreateApiKeyOutput, error) {
	var output appsync.CreateApiKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncCreateDataSourceFuture struct {
	Future workflow.Future
}

func (r *AppsyncCreateDataSourceFuture) Get(ctx workflow.Context) (*appsync.CreateDataSourceOutput, error) {
	var output appsync.CreateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncCreateFunctionFuture struct {
	Future workflow.Future
}

func (r *AppsyncCreateFunctionFuture) Get(ctx workflow.Context) (*appsync.CreateFunctionOutput, error) {
	var output appsync.CreateFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncCreateGraphqlApiFuture struct {
	Future workflow.Future
}

func (r *AppsyncCreateGraphqlApiFuture) Get(ctx workflow.Context) (*appsync.CreateGraphqlApiOutput, error) {
	var output appsync.CreateGraphqlApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncCreateResolverFuture struct {
	Future workflow.Future
}

func (r *AppsyncCreateResolverFuture) Get(ctx workflow.Context) (*appsync.CreateResolverOutput, error) {
	var output appsync.CreateResolverOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncCreateTypeFuture struct {
	Future workflow.Future
}

func (r *AppsyncCreateTypeFuture) Get(ctx workflow.Context) (*appsync.CreateTypeOutput, error) {
	var output appsync.CreateTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncDeleteApiCacheFuture struct {
	Future workflow.Future
}

func (r *AppsyncDeleteApiCacheFuture) Get(ctx workflow.Context) (*appsync.DeleteApiCacheOutput, error) {
	var output appsync.DeleteApiCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncDeleteApiKeyFuture struct {
	Future workflow.Future
}

func (r *AppsyncDeleteApiKeyFuture) Get(ctx workflow.Context) (*appsync.DeleteApiKeyOutput, error) {
	var output appsync.DeleteApiKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncDeleteDataSourceFuture struct {
	Future workflow.Future
}

func (r *AppsyncDeleteDataSourceFuture) Get(ctx workflow.Context) (*appsync.DeleteDataSourceOutput, error) {
	var output appsync.DeleteDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncDeleteFunctionFuture struct {
	Future workflow.Future
}

func (r *AppsyncDeleteFunctionFuture) Get(ctx workflow.Context) (*appsync.DeleteFunctionOutput, error) {
	var output appsync.DeleteFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncDeleteGraphqlApiFuture struct {
	Future workflow.Future
}

func (r *AppsyncDeleteGraphqlApiFuture) Get(ctx workflow.Context) (*appsync.DeleteGraphqlApiOutput, error) {
	var output appsync.DeleteGraphqlApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncDeleteResolverFuture struct {
	Future workflow.Future
}

func (r *AppsyncDeleteResolverFuture) Get(ctx workflow.Context) (*appsync.DeleteResolverOutput, error) {
	var output appsync.DeleteResolverOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncDeleteTypeFuture struct {
	Future workflow.Future
}

func (r *AppsyncDeleteTypeFuture) Get(ctx workflow.Context) (*appsync.DeleteTypeOutput, error) {
	var output appsync.DeleteTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncFlushApiCacheFuture struct {
	Future workflow.Future
}

func (r *AppsyncFlushApiCacheFuture) Get(ctx workflow.Context) (*appsync.FlushApiCacheOutput, error) {
	var output appsync.FlushApiCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncGetApiCacheFuture struct {
	Future workflow.Future
}

func (r *AppsyncGetApiCacheFuture) Get(ctx workflow.Context) (*appsync.GetApiCacheOutput, error) {
	var output appsync.GetApiCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncGetDataSourceFuture struct {
	Future workflow.Future
}

func (r *AppsyncGetDataSourceFuture) Get(ctx workflow.Context) (*appsync.GetDataSourceOutput, error) {
	var output appsync.GetDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncGetFunctionFuture struct {
	Future workflow.Future
}

func (r *AppsyncGetFunctionFuture) Get(ctx workflow.Context) (*appsync.GetFunctionOutput, error) {
	var output appsync.GetFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncGetGraphqlApiFuture struct {
	Future workflow.Future
}

func (r *AppsyncGetGraphqlApiFuture) Get(ctx workflow.Context) (*appsync.GetGraphqlApiOutput, error) {
	var output appsync.GetGraphqlApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncGetIntrospectionSchemaFuture struct {
	Future workflow.Future
}

func (r *AppsyncGetIntrospectionSchemaFuture) Get(ctx workflow.Context) (*appsync.GetIntrospectionSchemaOutput, error) {
	var output appsync.GetIntrospectionSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncGetResolverFuture struct {
	Future workflow.Future
}

func (r *AppsyncGetResolverFuture) Get(ctx workflow.Context) (*appsync.GetResolverOutput, error) {
	var output appsync.GetResolverOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncGetSchemaCreationStatusFuture struct {
	Future workflow.Future
}

func (r *AppsyncGetSchemaCreationStatusFuture) Get(ctx workflow.Context) (*appsync.GetSchemaCreationStatusOutput, error) {
	var output appsync.GetSchemaCreationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncGetTypeFuture struct {
	Future workflow.Future
}

func (r *AppsyncGetTypeFuture) Get(ctx workflow.Context) (*appsync.GetTypeOutput, error) {
	var output appsync.GetTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncListApiKeysFuture struct {
	Future workflow.Future
}

func (r *AppsyncListApiKeysFuture) Get(ctx workflow.Context) (*appsync.ListApiKeysOutput, error) {
	var output appsync.ListApiKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncListDataSourcesFuture struct {
	Future workflow.Future
}

func (r *AppsyncListDataSourcesFuture) Get(ctx workflow.Context) (*appsync.ListDataSourcesOutput, error) {
	var output appsync.ListDataSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncListFunctionsFuture struct {
	Future workflow.Future
}

func (r *AppsyncListFunctionsFuture) Get(ctx workflow.Context) (*appsync.ListFunctionsOutput, error) {
	var output appsync.ListFunctionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncListGraphqlApisFuture struct {
	Future workflow.Future
}

func (r *AppsyncListGraphqlApisFuture) Get(ctx workflow.Context) (*appsync.ListGraphqlApisOutput, error) {
	var output appsync.ListGraphqlApisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncListResolversFuture struct {
	Future workflow.Future
}

func (r *AppsyncListResolversFuture) Get(ctx workflow.Context) (*appsync.ListResolversOutput, error) {
	var output appsync.ListResolversOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncListResolversByFunctionFuture struct {
	Future workflow.Future
}

func (r *AppsyncListResolversByFunctionFuture) Get(ctx workflow.Context) (*appsync.ListResolversByFunctionOutput, error) {
	var output appsync.ListResolversByFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *AppsyncListTagsForResourceFuture) Get(ctx workflow.Context) (*appsync.ListTagsForResourceOutput, error) {
	var output appsync.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncListTypesFuture struct {
	Future workflow.Future
}

func (r *AppsyncListTypesFuture) Get(ctx workflow.Context) (*appsync.ListTypesOutput, error) {
	var output appsync.ListTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncStartSchemaCreationFuture struct {
	Future workflow.Future
}

func (r *AppsyncStartSchemaCreationFuture) Get(ctx workflow.Context) (*appsync.StartSchemaCreationOutput, error) {
	var output appsync.StartSchemaCreationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncTagResourceFuture struct {
	Future workflow.Future
}

func (r *AppsyncTagResourceFuture) Get(ctx workflow.Context) (*appsync.TagResourceOutput, error) {
	var output appsync.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncUntagResourceFuture struct {
	Future workflow.Future
}

func (r *AppsyncUntagResourceFuture) Get(ctx workflow.Context) (*appsync.UntagResourceOutput, error) {
	var output appsync.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncUpdateApiCacheFuture struct {
	Future workflow.Future
}

func (r *AppsyncUpdateApiCacheFuture) Get(ctx workflow.Context) (*appsync.UpdateApiCacheOutput, error) {
	var output appsync.UpdateApiCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncUpdateApiKeyFuture struct {
	Future workflow.Future
}

func (r *AppsyncUpdateApiKeyFuture) Get(ctx workflow.Context) (*appsync.UpdateApiKeyOutput, error) {
	var output appsync.UpdateApiKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncUpdateDataSourceFuture struct {
	Future workflow.Future
}

func (r *AppsyncUpdateDataSourceFuture) Get(ctx workflow.Context) (*appsync.UpdateDataSourceOutput, error) {
	var output appsync.UpdateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncUpdateFunctionFuture struct {
	Future workflow.Future
}

func (r *AppsyncUpdateFunctionFuture) Get(ctx workflow.Context) (*appsync.UpdateFunctionOutput, error) {
	var output appsync.UpdateFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncUpdateGraphqlApiFuture struct {
	Future workflow.Future
}

func (r *AppsyncUpdateGraphqlApiFuture) Get(ctx workflow.Context) (*appsync.UpdateGraphqlApiOutput, error) {
	var output appsync.UpdateGraphqlApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncUpdateResolverFuture struct {
	Future workflow.Future
}

func (r *AppsyncUpdateResolverFuture) Get(ctx workflow.Context) (*appsync.UpdateResolverOutput, error) {
	var output appsync.UpdateResolverOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppsyncUpdateTypeFuture struct {
	Future workflow.Future
}

func (r *AppsyncUpdateTypeFuture) Get(ctx workflow.Context) (*appsync.UpdateTypeOutput, error) {
	var output appsync.UpdateTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) CreateApiCache(ctx workflow.Context, input *appsync.CreateApiCacheInput) (*appsync.CreateApiCacheOutput, error) {
	var output appsync.CreateApiCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.CreateApiCache", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) CreateApiCacheAsync(ctx workflow.Context, input *appsync.CreateApiCacheInput) *AppsyncCreateApiCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.CreateApiCache", input)
	return &AppsyncCreateApiCacheFuture{Future: future}
}

func (a *AppSyncStub) CreateApiKey(ctx workflow.Context, input *appsync.CreateApiKeyInput) (*appsync.CreateApiKeyOutput, error) {
	var output appsync.CreateApiKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.CreateApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) CreateApiKeyAsync(ctx workflow.Context, input *appsync.CreateApiKeyInput) *AppsyncCreateApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.CreateApiKey", input)
	return &AppsyncCreateApiKeyFuture{Future: future}
}

func (a *AppSyncStub) CreateDataSource(ctx workflow.Context, input *appsync.CreateDataSourceInput) (*appsync.CreateDataSourceOutput, error) {
	var output appsync.CreateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.CreateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) CreateDataSourceAsync(ctx workflow.Context, input *appsync.CreateDataSourceInput) *AppsyncCreateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.CreateDataSource", input)
	return &AppsyncCreateDataSourceFuture{Future: future}
}

func (a *AppSyncStub) CreateFunction(ctx workflow.Context, input *appsync.CreateFunctionInput) (*appsync.CreateFunctionOutput, error) {
	var output appsync.CreateFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.CreateFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) CreateFunctionAsync(ctx workflow.Context, input *appsync.CreateFunctionInput) *AppsyncCreateFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.CreateFunction", input)
	return &AppsyncCreateFunctionFuture{Future: future}
}

func (a *AppSyncStub) CreateGraphqlApi(ctx workflow.Context, input *appsync.CreateGraphqlApiInput) (*appsync.CreateGraphqlApiOutput, error) {
	var output appsync.CreateGraphqlApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.CreateGraphqlApi", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) CreateGraphqlApiAsync(ctx workflow.Context, input *appsync.CreateGraphqlApiInput) *AppsyncCreateGraphqlApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.CreateGraphqlApi", input)
	return &AppsyncCreateGraphqlApiFuture{Future: future}
}

func (a *AppSyncStub) CreateResolver(ctx workflow.Context, input *appsync.CreateResolverInput) (*appsync.CreateResolverOutput, error) {
	var output appsync.CreateResolverOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.CreateResolver", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) CreateResolverAsync(ctx workflow.Context, input *appsync.CreateResolverInput) *AppsyncCreateResolverFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.CreateResolver", input)
	return &AppsyncCreateResolverFuture{Future: future}
}

func (a *AppSyncStub) CreateType(ctx workflow.Context, input *appsync.CreateTypeInput) (*appsync.CreateTypeOutput, error) {
	var output appsync.CreateTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.CreateType", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) CreateTypeAsync(ctx workflow.Context, input *appsync.CreateTypeInput) *AppsyncCreateTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.CreateType", input)
	return &AppsyncCreateTypeFuture{Future: future}
}

func (a *AppSyncStub) DeleteApiCache(ctx workflow.Context, input *appsync.DeleteApiCacheInput) (*appsync.DeleteApiCacheOutput, error) {
	var output appsync.DeleteApiCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteApiCache", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) DeleteApiCacheAsync(ctx workflow.Context, input *appsync.DeleteApiCacheInput) *AppsyncDeleteApiCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteApiCache", input)
	return &AppsyncDeleteApiCacheFuture{Future: future}
}

func (a *AppSyncStub) DeleteApiKey(ctx workflow.Context, input *appsync.DeleteApiKeyInput) (*appsync.DeleteApiKeyOutput, error) {
	var output appsync.DeleteApiKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) DeleteApiKeyAsync(ctx workflow.Context, input *appsync.DeleteApiKeyInput) *AppsyncDeleteApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteApiKey", input)
	return &AppsyncDeleteApiKeyFuture{Future: future}
}

func (a *AppSyncStub) DeleteDataSource(ctx workflow.Context, input *appsync.DeleteDataSourceInput) (*appsync.DeleteDataSourceOutput, error) {
	var output appsync.DeleteDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) DeleteDataSourceAsync(ctx workflow.Context, input *appsync.DeleteDataSourceInput) *AppsyncDeleteDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteDataSource", input)
	return &AppsyncDeleteDataSourceFuture{Future: future}
}

func (a *AppSyncStub) DeleteFunction(ctx workflow.Context, input *appsync.DeleteFunctionInput) (*appsync.DeleteFunctionOutput, error) {
	var output appsync.DeleteFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) DeleteFunctionAsync(ctx workflow.Context, input *appsync.DeleteFunctionInput) *AppsyncDeleteFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteFunction", input)
	return &AppsyncDeleteFunctionFuture{Future: future}
}

func (a *AppSyncStub) DeleteGraphqlApi(ctx workflow.Context, input *appsync.DeleteGraphqlApiInput) (*appsync.DeleteGraphqlApiOutput, error) {
	var output appsync.DeleteGraphqlApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteGraphqlApi", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) DeleteGraphqlApiAsync(ctx workflow.Context, input *appsync.DeleteGraphqlApiInput) *AppsyncDeleteGraphqlApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteGraphqlApi", input)
	return &AppsyncDeleteGraphqlApiFuture{Future: future}
}

func (a *AppSyncStub) DeleteResolver(ctx workflow.Context, input *appsync.DeleteResolverInput) (*appsync.DeleteResolverOutput, error) {
	var output appsync.DeleteResolverOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteResolver", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) DeleteResolverAsync(ctx workflow.Context, input *appsync.DeleteResolverInput) *AppsyncDeleteResolverFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteResolver", input)
	return &AppsyncDeleteResolverFuture{Future: future}
}

func (a *AppSyncStub) DeleteType(ctx workflow.Context, input *appsync.DeleteTypeInput) (*appsync.DeleteTypeOutput, error) {
	var output appsync.DeleteTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteType", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) DeleteTypeAsync(ctx workflow.Context, input *appsync.DeleteTypeInput) *AppsyncDeleteTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.DeleteType", input)
	return &AppsyncDeleteTypeFuture{Future: future}
}

func (a *AppSyncStub) FlushApiCache(ctx workflow.Context, input *appsync.FlushApiCacheInput) (*appsync.FlushApiCacheOutput, error) {
	var output appsync.FlushApiCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.FlushApiCache", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) FlushApiCacheAsync(ctx workflow.Context, input *appsync.FlushApiCacheInput) *AppsyncFlushApiCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.FlushApiCache", input)
	return &AppsyncFlushApiCacheFuture{Future: future}
}

func (a *AppSyncStub) GetApiCache(ctx workflow.Context, input *appsync.GetApiCacheInput) (*appsync.GetApiCacheOutput, error) {
	var output appsync.GetApiCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.GetApiCache", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) GetApiCacheAsync(ctx workflow.Context, input *appsync.GetApiCacheInput) *AppsyncGetApiCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.GetApiCache", input)
	return &AppsyncGetApiCacheFuture{Future: future}
}

func (a *AppSyncStub) GetDataSource(ctx workflow.Context, input *appsync.GetDataSourceInput) (*appsync.GetDataSourceOutput, error) {
	var output appsync.GetDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.GetDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) GetDataSourceAsync(ctx workflow.Context, input *appsync.GetDataSourceInput) *AppsyncGetDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.GetDataSource", input)
	return &AppsyncGetDataSourceFuture{Future: future}
}

func (a *AppSyncStub) GetFunction(ctx workflow.Context, input *appsync.GetFunctionInput) (*appsync.GetFunctionOutput, error) {
	var output appsync.GetFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.GetFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) GetFunctionAsync(ctx workflow.Context, input *appsync.GetFunctionInput) *AppsyncGetFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.GetFunction", input)
	return &AppsyncGetFunctionFuture{Future: future}
}

func (a *AppSyncStub) GetGraphqlApi(ctx workflow.Context, input *appsync.GetGraphqlApiInput) (*appsync.GetGraphqlApiOutput, error) {
	var output appsync.GetGraphqlApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.GetGraphqlApi", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) GetGraphqlApiAsync(ctx workflow.Context, input *appsync.GetGraphqlApiInput) *AppsyncGetGraphqlApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.GetGraphqlApi", input)
	return &AppsyncGetGraphqlApiFuture{Future: future}
}

func (a *AppSyncStub) GetIntrospectionSchema(ctx workflow.Context, input *appsync.GetIntrospectionSchemaInput) (*appsync.GetIntrospectionSchemaOutput, error) {
	var output appsync.GetIntrospectionSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.GetIntrospectionSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) GetIntrospectionSchemaAsync(ctx workflow.Context, input *appsync.GetIntrospectionSchemaInput) *AppsyncGetIntrospectionSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.GetIntrospectionSchema", input)
	return &AppsyncGetIntrospectionSchemaFuture{Future: future}
}

func (a *AppSyncStub) GetResolver(ctx workflow.Context, input *appsync.GetResolverInput) (*appsync.GetResolverOutput, error) {
	var output appsync.GetResolverOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.GetResolver", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) GetResolverAsync(ctx workflow.Context, input *appsync.GetResolverInput) *AppsyncGetResolverFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.GetResolver", input)
	return &AppsyncGetResolverFuture{Future: future}
}

func (a *AppSyncStub) GetSchemaCreationStatus(ctx workflow.Context, input *appsync.GetSchemaCreationStatusInput) (*appsync.GetSchemaCreationStatusOutput, error) {
	var output appsync.GetSchemaCreationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.GetSchemaCreationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) GetSchemaCreationStatusAsync(ctx workflow.Context, input *appsync.GetSchemaCreationStatusInput) *AppsyncGetSchemaCreationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.GetSchemaCreationStatus", input)
	return &AppsyncGetSchemaCreationStatusFuture{Future: future}
}

func (a *AppSyncStub) GetType(ctx workflow.Context, input *appsync.GetTypeInput) (*appsync.GetTypeOutput, error) {
	var output appsync.GetTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.GetType", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) GetTypeAsync(ctx workflow.Context, input *appsync.GetTypeInput) *AppsyncGetTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.GetType", input)
	return &AppsyncGetTypeFuture{Future: future}
}

func (a *AppSyncStub) ListApiKeys(ctx workflow.Context, input *appsync.ListApiKeysInput) (*appsync.ListApiKeysOutput, error) {
	var output appsync.ListApiKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.ListApiKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) ListApiKeysAsync(ctx workflow.Context, input *appsync.ListApiKeysInput) *AppsyncListApiKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.ListApiKeys", input)
	return &AppsyncListApiKeysFuture{Future: future}
}

func (a *AppSyncStub) ListDataSources(ctx workflow.Context, input *appsync.ListDataSourcesInput) (*appsync.ListDataSourcesOutput, error) {
	var output appsync.ListDataSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.ListDataSources", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) ListDataSourcesAsync(ctx workflow.Context, input *appsync.ListDataSourcesInput) *AppsyncListDataSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.ListDataSources", input)
	return &AppsyncListDataSourcesFuture{Future: future}
}

func (a *AppSyncStub) ListFunctions(ctx workflow.Context, input *appsync.ListFunctionsInput) (*appsync.ListFunctionsOutput, error) {
	var output appsync.ListFunctionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.ListFunctions", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) ListFunctionsAsync(ctx workflow.Context, input *appsync.ListFunctionsInput) *AppsyncListFunctionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.ListFunctions", input)
	return &AppsyncListFunctionsFuture{Future: future}
}

func (a *AppSyncStub) ListGraphqlApis(ctx workflow.Context, input *appsync.ListGraphqlApisInput) (*appsync.ListGraphqlApisOutput, error) {
	var output appsync.ListGraphqlApisOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.ListGraphqlApis", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) ListGraphqlApisAsync(ctx workflow.Context, input *appsync.ListGraphqlApisInput) *AppsyncListGraphqlApisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.ListGraphqlApis", input)
	return &AppsyncListGraphqlApisFuture{Future: future}
}

func (a *AppSyncStub) ListResolvers(ctx workflow.Context, input *appsync.ListResolversInput) (*appsync.ListResolversOutput, error) {
	var output appsync.ListResolversOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.ListResolvers", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) ListResolversAsync(ctx workflow.Context, input *appsync.ListResolversInput) *AppsyncListResolversFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.ListResolvers", input)
	return &AppsyncListResolversFuture{Future: future}
}

func (a *AppSyncStub) ListResolversByFunction(ctx workflow.Context, input *appsync.ListResolversByFunctionInput) (*appsync.ListResolversByFunctionOutput, error) {
	var output appsync.ListResolversByFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.ListResolversByFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) ListResolversByFunctionAsync(ctx workflow.Context, input *appsync.ListResolversByFunctionInput) *AppsyncListResolversByFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.ListResolversByFunction", input)
	return &AppsyncListResolversByFunctionFuture{Future: future}
}

func (a *AppSyncStub) ListTagsForResource(ctx workflow.Context, input *appsync.ListTagsForResourceInput) (*appsync.ListTagsForResourceOutput, error) {
	var output appsync.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) ListTagsForResourceAsync(ctx workflow.Context, input *appsync.ListTagsForResourceInput) *AppsyncListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.ListTagsForResource", input)
	return &AppsyncListTagsForResourceFuture{Future: future}
}

func (a *AppSyncStub) ListTypes(ctx workflow.Context, input *appsync.ListTypesInput) (*appsync.ListTypesOutput, error) {
	var output appsync.ListTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.ListTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) ListTypesAsync(ctx workflow.Context, input *appsync.ListTypesInput) *AppsyncListTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.ListTypes", input)
	return &AppsyncListTypesFuture{Future: future}
}

func (a *AppSyncStub) StartSchemaCreation(ctx workflow.Context, input *appsync.StartSchemaCreationInput) (*appsync.StartSchemaCreationOutput, error) {
	var output appsync.StartSchemaCreationOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.StartSchemaCreation", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) StartSchemaCreationAsync(ctx workflow.Context, input *appsync.StartSchemaCreationInput) *AppsyncStartSchemaCreationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.StartSchemaCreation", input)
	return &AppsyncStartSchemaCreationFuture{Future: future}
}

func (a *AppSyncStub) TagResource(ctx workflow.Context, input *appsync.TagResourceInput) (*appsync.TagResourceOutput, error) {
	var output appsync.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) TagResourceAsync(ctx workflow.Context, input *appsync.TagResourceInput) *AppsyncTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.TagResource", input)
	return &AppsyncTagResourceFuture{Future: future}
}

func (a *AppSyncStub) UntagResource(ctx workflow.Context, input *appsync.UntagResourceInput) (*appsync.UntagResourceOutput, error) {
	var output appsync.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) UntagResourceAsync(ctx workflow.Context, input *appsync.UntagResourceInput) *AppsyncUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.UntagResource", input)
	return &AppsyncUntagResourceFuture{Future: future}
}

func (a *AppSyncStub) UpdateApiCache(ctx workflow.Context, input *appsync.UpdateApiCacheInput) (*appsync.UpdateApiCacheOutput, error) {
	var output appsync.UpdateApiCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateApiCache", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) UpdateApiCacheAsync(ctx workflow.Context, input *appsync.UpdateApiCacheInput) *AppsyncUpdateApiCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateApiCache", input)
	return &AppsyncUpdateApiCacheFuture{Future: future}
}

func (a *AppSyncStub) UpdateApiKey(ctx workflow.Context, input *appsync.UpdateApiKeyInput) (*appsync.UpdateApiKeyOutput, error) {
	var output appsync.UpdateApiKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) UpdateApiKeyAsync(ctx workflow.Context, input *appsync.UpdateApiKeyInput) *AppsyncUpdateApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateApiKey", input)
	return &AppsyncUpdateApiKeyFuture{Future: future}
}

func (a *AppSyncStub) UpdateDataSource(ctx workflow.Context, input *appsync.UpdateDataSourceInput) (*appsync.UpdateDataSourceOutput, error) {
	var output appsync.UpdateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) UpdateDataSourceAsync(ctx workflow.Context, input *appsync.UpdateDataSourceInput) *AppsyncUpdateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateDataSource", input)
	return &AppsyncUpdateDataSourceFuture{Future: future}
}

func (a *AppSyncStub) UpdateFunction(ctx workflow.Context, input *appsync.UpdateFunctionInput) (*appsync.UpdateFunctionOutput, error) {
	var output appsync.UpdateFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) UpdateFunctionAsync(ctx workflow.Context, input *appsync.UpdateFunctionInput) *AppsyncUpdateFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateFunction", input)
	return &AppsyncUpdateFunctionFuture{Future: future}
}

func (a *AppSyncStub) UpdateGraphqlApi(ctx workflow.Context, input *appsync.UpdateGraphqlApiInput) (*appsync.UpdateGraphqlApiOutput, error) {
	var output appsync.UpdateGraphqlApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateGraphqlApi", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) UpdateGraphqlApiAsync(ctx workflow.Context, input *appsync.UpdateGraphqlApiInput) *AppsyncUpdateGraphqlApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateGraphqlApi", input)
	return &AppsyncUpdateGraphqlApiFuture{Future: future}
}

func (a *AppSyncStub) UpdateResolver(ctx workflow.Context, input *appsync.UpdateResolverInput) (*appsync.UpdateResolverOutput, error) {
	var output appsync.UpdateResolverOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateResolver", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) UpdateResolverAsync(ctx workflow.Context, input *appsync.UpdateResolverInput) *AppsyncUpdateResolverFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateResolver", input)
	return &AppsyncUpdateResolverFuture{Future: future}
}

func (a *AppSyncStub) UpdateType(ctx workflow.Context, input *appsync.UpdateTypeInput) (*appsync.UpdateTypeOutput, error) {
	var output appsync.UpdateTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateType", input).Get(ctx, &output)
	return &output, err
}

func (a *AppSyncStub) UpdateTypeAsync(ctx workflow.Context, input *appsync.UpdateTypeInput) *AppsyncUpdateTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appsync.UpdateType", input)
	return &AppsyncUpdateTypeFuture{Future: future}
}
