// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/elasticinference"
	"go.temporal.io/sdk/workflow"
)

type ElasticInferenceClient interface {
	DescribeAcceleratorOfferings(ctx workflow.Context, input *elasticinference.DescribeAcceleratorOfferingsInput) (*elasticinference.DescribeAcceleratorOfferingsOutput, error)
	DescribeAcceleratorOfferingsAsync(ctx workflow.Context, input *elasticinference.DescribeAcceleratorOfferingsInput) *ElasticinferenceDescribeAcceleratorOfferingsFuture

	DescribeAcceleratorTypes(ctx workflow.Context, input *elasticinference.DescribeAcceleratorTypesInput) (*elasticinference.DescribeAcceleratorTypesOutput, error)
	DescribeAcceleratorTypesAsync(ctx workflow.Context, input *elasticinference.DescribeAcceleratorTypesInput) *ElasticinferenceDescribeAcceleratorTypesFuture

	DescribeAccelerators(ctx workflow.Context, input *elasticinference.DescribeAcceleratorsInput) (*elasticinference.DescribeAcceleratorsOutput, error)
	DescribeAcceleratorsAsync(ctx workflow.Context, input *elasticinference.DescribeAcceleratorsInput) *ElasticinferenceDescribeAcceleratorsFuture

	ListTagsForResource(ctx workflow.Context, input *elasticinference.ListTagsForResourceInput) (*elasticinference.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *elasticinference.ListTagsForResourceInput) *ElasticinferenceListTagsForResourceFuture

	TagResource(ctx workflow.Context, input *elasticinference.TagResourceInput) (*elasticinference.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *elasticinference.TagResourceInput) *ElasticinferenceTagResourceFuture

	UntagResource(ctx workflow.Context, input *elasticinference.UntagResourceInput) (*elasticinference.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *elasticinference.UntagResourceInput) *ElasticinferenceUntagResourceFuture
}

type ElasticInferenceStub struct{}

func NewElasticInferenceStub() ElasticInferenceClient {
	return &ElasticInferenceStub{}
}

type ElasticinferenceDescribeAcceleratorOfferingsFuture struct {
	Future workflow.Future
}

func (r *ElasticinferenceDescribeAcceleratorOfferingsFuture) Get(ctx workflow.Context) (*elasticinference.DescribeAcceleratorOfferingsOutput, error) {
	var output elasticinference.DescribeAcceleratorOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticinferenceDescribeAcceleratorTypesFuture struct {
	Future workflow.Future
}

func (r *ElasticinferenceDescribeAcceleratorTypesFuture) Get(ctx workflow.Context) (*elasticinference.DescribeAcceleratorTypesOutput, error) {
	var output elasticinference.DescribeAcceleratorTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticinferenceDescribeAcceleratorsFuture struct {
	Future workflow.Future
}

func (r *ElasticinferenceDescribeAcceleratorsFuture) Get(ctx workflow.Context) (*elasticinference.DescribeAcceleratorsOutput, error) {
	var output elasticinference.DescribeAcceleratorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticinferenceListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ElasticinferenceListTagsForResourceFuture) Get(ctx workflow.Context) (*elasticinference.ListTagsForResourceOutput, error) {
	var output elasticinference.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticinferenceTagResourceFuture struct {
	Future workflow.Future
}

func (r *ElasticinferenceTagResourceFuture) Get(ctx workflow.Context) (*elasticinference.TagResourceOutput, error) {
	var output elasticinference.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticinferenceUntagResourceFuture struct {
	Future workflow.Future
}

func (r *ElasticinferenceUntagResourceFuture) Get(ctx workflow.Context) (*elasticinference.UntagResourceOutput, error) {
	var output elasticinference.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ElasticInferenceStub) DescribeAcceleratorOfferings(ctx workflow.Context, input *elasticinference.DescribeAcceleratorOfferingsInput) (*elasticinference.DescribeAcceleratorOfferingsOutput, error) {
	var output elasticinference.DescribeAcceleratorOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticinference.DescribeAcceleratorOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticInferenceStub) DescribeAcceleratorOfferingsAsync(ctx workflow.Context, input *elasticinference.DescribeAcceleratorOfferingsInput) *ElasticinferenceDescribeAcceleratorOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticinference.DescribeAcceleratorOfferings", input)
	return &ElasticinferenceDescribeAcceleratorOfferingsFuture{Future: future}
}

func (a *ElasticInferenceStub) DescribeAcceleratorTypes(ctx workflow.Context, input *elasticinference.DescribeAcceleratorTypesInput) (*elasticinference.DescribeAcceleratorTypesOutput, error) {
	var output elasticinference.DescribeAcceleratorTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticinference.DescribeAcceleratorTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticInferenceStub) DescribeAcceleratorTypesAsync(ctx workflow.Context, input *elasticinference.DescribeAcceleratorTypesInput) *ElasticinferenceDescribeAcceleratorTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticinference.DescribeAcceleratorTypes", input)
	return &ElasticinferenceDescribeAcceleratorTypesFuture{Future: future}
}

func (a *ElasticInferenceStub) DescribeAccelerators(ctx workflow.Context, input *elasticinference.DescribeAcceleratorsInput) (*elasticinference.DescribeAcceleratorsOutput, error) {
	var output elasticinference.DescribeAcceleratorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticinference.DescribeAccelerators", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticInferenceStub) DescribeAcceleratorsAsync(ctx workflow.Context, input *elasticinference.DescribeAcceleratorsInput) *ElasticinferenceDescribeAcceleratorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticinference.DescribeAccelerators", input)
	return &ElasticinferenceDescribeAcceleratorsFuture{Future: future}
}

func (a *ElasticInferenceStub) ListTagsForResource(ctx workflow.Context, input *elasticinference.ListTagsForResourceInput) (*elasticinference.ListTagsForResourceOutput, error) {
	var output elasticinference.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticinference.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticInferenceStub) ListTagsForResourceAsync(ctx workflow.Context, input *elasticinference.ListTagsForResourceInput) *ElasticinferenceListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticinference.ListTagsForResource", input)
	return &ElasticinferenceListTagsForResourceFuture{Future: future}
}

func (a *ElasticInferenceStub) TagResource(ctx workflow.Context, input *elasticinference.TagResourceInput) (*elasticinference.TagResourceOutput, error) {
	var output elasticinference.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticinference.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticInferenceStub) TagResourceAsync(ctx workflow.Context, input *elasticinference.TagResourceInput) *ElasticinferenceTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticinference.TagResource", input)
	return &ElasticinferenceTagResourceFuture{Future: future}
}

func (a *ElasticInferenceStub) UntagResource(ctx workflow.Context, input *elasticinference.UntagResourceInput) (*elasticinference.UntagResourceOutput, error) {
	var output elasticinference.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticinference.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticInferenceStub) UntagResourceAsync(ctx workflow.Context, input *elasticinference.UntagResourceInput) *ElasticinferenceUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticinference.UntagResource", input)
	return &ElasticinferenceUntagResourceFuture{Future: future}
}
