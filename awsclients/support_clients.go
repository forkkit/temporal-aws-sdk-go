// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/support"
	"go.temporal.io/sdk/workflow"
)

type SupportClient interface {
	AddAttachmentsToSet(ctx workflow.Context, input *support.AddAttachmentsToSetInput) (*support.AddAttachmentsToSetOutput, error)
	AddAttachmentsToSetAsync(ctx workflow.Context, input *support.AddAttachmentsToSetInput) *SupportAddAttachmentsToSetFuture

	AddCommunicationToCase(ctx workflow.Context, input *support.AddCommunicationToCaseInput) (*support.AddCommunicationToCaseOutput, error)
	AddCommunicationToCaseAsync(ctx workflow.Context, input *support.AddCommunicationToCaseInput) *SupportAddCommunicationToCaseFuture

	CreateCase(ctx workflow.Context, input *support.CreateCaseInput) (*support.CreateCaseOutput, error)
	CreateCaseAsync(ctx workflow.Context, input *support.CreateCaseInput) *SupportCreateCaseFuture

	DescribeAttachment(ctx workflow.Context, input *support.DescribeAttachmentInput) (*support.DescribeAttachmentOutput, error)
	DescribeAttachmentAsync(ctx workflow.Context, input *support.DescribeAttachmentInput) *SupportDescribeAttachmentFuture

	DescribeCases(ctx workflow.Context, input *support.DescribeCasesInput) (*support.DescribeCasesOutput, error)
	DescribeCasesAsync(ctx workflow.Context, input *support.DescribeCasesInput) *SupportDescribeCasesFuture

	DescribeCommunications(ctx workflow.Context, input *support.DescribeCommunicationsInput) (*support.DescribeCommunicationsOutput, error)
	DescribeCommunicationsAsync(ctx workflow.Context, input *support.DescribeCommunicationsInput) *SupportDescribeCommunicationsFuture

	DescribeServices(ctx workflow.Context, input *support.DescribeServicesInput) (*support.DescribeServicesOutput, error)
	DescribeServicesAsync(ctx workflow.Context, input *support.DescribeServicesInput) *SupportDescribeServicesFuture

	DescribeSeverityLevels(ctx workflow.Context, input *support.DescribeSeverityLevelsInput) (*support.DescribeSeverityLevelsOutput, error)
	DescribeSeverityLevelsAsync(ctx workflow.Context, input *support.DescribeSeverityLevelsInput) *SupportDescribeSeverityLevelsFuture

	DescribeTrustedAdvisorCheckRefreshStatuses(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckRefreshStatusesInput) (*support.DescribeTrustedAdvisorCheckRefreshStatusesOutput, error)
	DescribeTrustedAdvisorCheckRefreshStatusesAsync(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckRefreshStatusesInput) *SupportDescribeTrustedAdvisorCheckRefreshStatusesFuture

	DescribeTrustedAdvisorCheckResult(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckResultInput) (*support.DescribeTrustedAdvisorCheckResultOutput, error)
	DescribeTrustedAdvisorCheckResultAsync(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckResultInput) *SupportDescribeTrustedAdvisorCheckResultFuture

	DescribeTrustedAdvisorCheckSummaries(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckSummariesInput) (*support.DescribeTrustedAdvisorCheckSummariesOutput, error)
	DescribeTrustedAdvisorCheckSummariesAsync(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckSummariesInput) *SupportDescribeTrustedAdvisorCheckSummariesFuture

	DescribeTrustedAdvisorChecks(ctx workflow.Context, input *support.DescribeTrustedAdvisorChecksInput) (*support.DescribeTrustedAdvisorChecksOutput, error)
	DescribeTrustedAdvisorChecksAsync(ctx workflow.Context, input *support.DescribeTrustedAdvisorChecksInput) *SupportDescribeTrustedAdvisorChecksFuture

	RefreshTrustedAdvisorCheck(ctx workflow.Context, input *support.RefreshTrustedAdvisorCheckInput) (*support.RefreshTrustedAdvisorCheckOutput, error)
	RefreshTrustedAdvisorCheckAsync(ctx workflow.Context, input *support.RefreshTrustedAdvisorCheckInput) *SupportRefreshTrustedAdvisorCheckFuture

	ResolveCase(ctx workflow.Context, input *support.ResolveCaseInput) (*support.ResolveCaseOutput, error)
	ResolveCaseAsync(ctx workflow.Context, input *support.ResolveCaseInput) *SupportResolveCaseFuture
}

type SupportStub struct{}

func NewSupportStub() SupportClient {
	return &SupportStub{}
}

type SupportAddAttachmentsToSetFuture struct {
	Future workflow.Future
}

func (r *SupportAddAttachmentsToSetFuture) Get(ctx workflow.Context) (*support.AddAttachmentsToSetOutput, error) {
	var output support.AddAttachmentsToSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportAddCommunicationToCaseFuture struct {
	Future workflow.Future
}

func (r *SupportAddCommunicationToCaseFuture) Get(ctx workflow.Context) (*support.AddCommunicationToCaseOutput, error) {
	var output support.AddCommunicationToCaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportCreateCaseFuture struct {
	Future workflow.Future
}

func (r *SupportCreateCaseFuture) Get(ctx workflow.Context) (*support.CreateCaseOutput, error) {
	var output support.CreateCaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportDescribeAttachmentFuture struct {
	Future workflow.Future
}

func (r *SupportDescribeAttachmentFuture) Get(ctx workflow.Context) (*support.DescribeAttachmentOutput, error) {
	var output support.DescribeAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportDescribeCasesFuture struct {
	Future workflow.Future
}

func (r *SupportDescribeCasesFuture) Get(ctx workflow.Context) (*support.DescribeCasesOutput, error) {
	var output support.DescribeCasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportDescribeCommunicationsFuture struct {
	Future workflow.Future
}

func (r *SupportDescribeCommunicationsFuture) Get(ctx workflow.Context) (*support.DescribeCommunicationsOutput, error) {
	var output support.DescribeCommunicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportDescribeServicesFuture struct {
	Future workflow.Future
}

func (r *SupportDescribeServicesFuture) Get(ctx workflow.Context) (*support.DescribeServicesOutput, error) {
	var output support.DescribeServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportDescribeSeverityLevelsFuture struct {
	Future workflow.Future
}

func (r *SupportDescribeSeverityLevelsFuture) Get(ctx workflow.Context) (*support.DescribeSeverityLevelsOutput, error) {
	var output support.DescribeSeverityLevelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportDescribeTrustedAdvisorCheckRefreshStatusesFuture struct {
	Future workflow.Future
}

func (r *SupportDescribeTrustedAdvisorCheckRefreshStatusesFuture) Get(ctx workflow.Context) (*support.DescribeTrustedAdvisorCheckRefreshStatusesOutput, error) {
	var output support.DescribeTrustedAdvisorCheckRefreshStatusesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportDescribeTrustedAdvisorCheckResultFuture struct {
	Future workflow.Future
}

func (r *SupportDescribeTrustedAdvisorCheckResultFuture) Get(ctx workflow.Context) (*support.DescribeTrustedAdvisorCheckResultOutput, error) {
	var output support.DescribeTrustedAdvisorCheckResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportDescribeTrustedAdvisorCheckSummariesFuture struct {
	Future workflow.Future
}

func (r *SupportDescribeTrustedAdvisorCheckSummariesFuture) Get(ctx workflow.Context) (*support.DescribeTrustedAdvisorCheckSummariesOutput, error) {
	var output support.DescribeTrustedAdvisorCheckSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportDescribeTrustedAdvisorChecksFuture struct {
	Future workflow.Future
}

func (r *SupportDescribeTrustedAdvisorChecksFuture) Get(ctx workflow.Context) (*support.DescribeTrustedAdvisorChecksOutput, error) {
	var output support.DescribeTrustedAdvisorChecksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportRefreshTrustedAdvisorCheckFuture struct {
	Future workflow.Future
}

func (r *SupportRefreshTrustedAdvisorCheckFuture) Get(ctx workflow.Context) (*support.RefreshTrustedAdvisorCheckOutput, error) {
	var output support.RefreshTrustedAdvisorCheckOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SupportResolveCaseFuture struct {
	Future workflow.Future
}

func (r *SupportResolveCaseFuture) Get(ctx workflow.Context) (*support.ResolveCaseOutput, error) {
	var output support.ResolveCaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) AddAttachmentsToSet(ctx workflow.Context, input *support.AddAttachmentsToSetInput) (*support.AddAttachmentsToSetOutput, error) {
	var output support.AddAttachmentsToSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.AddAttachmentsToSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) AddAttachmentsToSetAsync(ctx workflow.Context, input *support.AddAttachmentsToSetInput) *SupportAddAttachmentsToSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.AddAttachmentsToSet", input)
	return &SupportAddAttachmentsToSetFuture{Future: future}
}

func (a *SupportStub) AddCommunicationToCase(ctx workflow.Context, input *support.AddCommunicationToCaseInput) (*support.AddCommunicationToCaseOutput, error) {
	var output support.AddCommunicationToCaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.AddCommunicationToCase", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) AddCommunicationToCaseAsync(ctx workflow.Context, input *support.AddCommunicationToCaseInput) *SupportAddCommunicationToCaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.AddCommunicationToCase", input)
	return &SupportAddCommunicationToCaseFuture{Future: future}
}

func (a *SupportStub) CreateCase(ctx workflow.Context, input *support.CreateCaseInput) (*support.CreateCaseOutput, error) {
	var output support.CreateCaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.CreateCase", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) CreateCaseAsync(ctx workflow.Context, input *support.CreateCaseInput) *SupportCreateCaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.CreateCase", input)
	return &SupportCreateCaseFuture{Future: future}
}

func (a *SupportStub) DescribeAttachment(ctx workflow.Context, input *support.DescribeAttachmentInput) (*support.DescribeAttachmentOutput, error) {
	var output support.DescribeAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.DescribeAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) DescribeAttachmentAsync(ctx workflow.Context, input *support.DescribeAttachmentInput) *SupportDescribeAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.DescribeAttachment", input)
	return &SupportDescribeAttachmentFuture{Future: future}
}

func (a *SupportStub) DescribeCases(ctx workflow.Context, input *support.DescribeCasesInput) (*support.DescribeCasesOutput, error) {
	var output support.DescribeCasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.DescribeCases", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) DescribeCasesAsync(ctx workflow.Context, input *support.DescribeCasesInput) *SupportDescribeCasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.DescribeCases", input)
	return &SupportDescribeCasesFuture{Future: future}
}

func (a *SupportStub) DescribeCommunications(ctx workflow.Context, input *support.DescribeCommunicationsInput) (*support.DescribeCommunicationsOutput, error) {
	var output support.DescribeCommunicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.DescribeCommunications", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) DescribeCommunicationsAsync(ctx workflow.Context, input *support.DescribeCommunicationsInput) *SupportDescribeCommunicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.DescribeCommunications", input)
	return &SupportDescribeCommunicationsFuture{Future: future}
}

func (a *SupportStub) DescribeServices(ctx workflow.Context, input *support.DescribeServicesInput) (*support.DescribeServicesOutput, error) {
	var output support.DescribeServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.DescribeServices", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) DescribeServicesAsync(ctx workflow.Context, input *support.DescribeServicesInput) *SupportDescribeServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.DescribeServices", input)
	return &SupportDescribeServicesFuture{Future: future}
}

func (a *SupportStub) DescribeSeverityLevels(ctx workflow.Context, input *support.DescribeSeverityLevelsInput) (*support.DescribeSeverityLevelsOutput, error) {
	var output support.DescribeSeverityLevelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.DescribeSeverityLevels", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) DescribeSeverityLevelsAsync(ctx workflow.Context, input *support.DescribeSeverityLevelsInput) *SupportDescribeSeverityLevelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.DescribeSeverityLevels", input)
	return &SupportDescribeSeverityLevelsFuture{Future: future}
}

func (a *SupportStub) DescribeTrustedAdvisorCheckRefreshStatuses(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckRefreshStatusesInput) (*support.DescribeTrustedAdvisorCheckRefreshStatusesOutput, error) {
	var output support.DescribeTrustedAdvisorCheckRefreshStatusesOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.DescribeTrustedAdvisorCheckRefreshStatuses", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) DescribeTrustedAdvisorCheckRefreshStatusesAsync(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckRefreshStatusesInput) *SupportDescribeTrustedAdvisorCheckRefreshStatusesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.DescribeTrustedAdvisorCheckRefreshStatuses", input)
	return &SupportDescribeTrustedAdvisorCheckRefreshStatusesFuture{Future: future}
}

func (a *SupportStub) DescribeTrustedAdvisorCheckResult(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckResultInput) (*support.DescribeTrustedAdvisorCheckResultOutput, error) {
	var output support.DescribeTrustedAdvisorCheckResultOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.DescribeTrustedAdvisorCheckResult", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) DescribeTrustedAdvisorCheckResultAsync(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckResultInput) *SupportDescribeTrustedAdvisorCheckResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.DescribeTrustedAdvisorCheckResult", input)
	return &SupportDescribeTrustedAdvisorCheckResultFuture{Future: future}
}

func (a *SupportStub) DescribeTrustedAdvisorCheckSummaries(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckSummariesInput) (*support.DescribeTrustedAdvisorCheckSummariesOutput, error) {
	var output support.DescribeTrustedAdvisorCheckSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.DescribeTrustedAdvisorCheckSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) DescribeTrustedAdvisorCheckSummariesAsync(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckSummariesInput) *SupportDescribeTrustedAdvisorCheckSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.DescribeTrustedAdvisorCheckSummaries", input)
	return &SupportDescribeTrustedAdvisorCheckSummariesFuture{Future: future}
}

func (a *SupportStub) DescribeTrustedAdvisorChecks(ctx workflow.Context, input *support.DescribeTrustedAdvisorChecksInput) (*support.DescribeTrustedAdvisorChecksOutput, error) {
	var output support.DescribeTrustedAdvisorChecksOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.DescribeTrustedAdvisorChecks", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) DescribeTrustedAdvisorChecksAsync(ctx workflow.Context, input *support.DescribeTrustedAdvisorChecksInput) *SupportDescribeTrustedAdvisorChecksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.DescribeTrustedAdvisorChecks", input)
	return &SupportDescribeTrustedAdvisorChecksFuture{Future: future}
}

func (a *SupportStub) RefreshTrustedAdvisorCheck(ctx workflow.Context, input *support.RefreshTrustedAdvisorCheckInput) (*support.RefreshTrustedAdvisorCheckOutput, error) {
	var output support.RefreshTrustedAdvisorCheckOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.RefreshTrustedAdvisorCheck", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) RefreshTrustedAdvisorCheckAsync(ctx workflow.Context, input *support.RefreshTrustedAdvisorCheckInput) *SupportRefreshTrustedAdvisorCheckFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.RefreshTrustedAdvisorCheck", input)
	return &SupportRefreshTrustedAdvisorCheckFuture{Future: future}
}

func (a *SupportStub) ResolveCase(ctx workflow.Context, input *support.ResolveCaseInput) (*support.ResolveCaseOutput, error) {
	var output support.ResolveCaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.support.ResolveCase", input).Get(ctx, &output)
	return &output, err
}

func (a *SupportStub) ResolveCaseAsync(ctx workflow.Context, input *support.ResolveCaseInput) *SupportResolveCaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.support.ResolveCase", input)
	return &SupportResolveCaseFuture{Future: future}
}
