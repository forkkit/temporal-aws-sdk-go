// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/swf"
	"go.temporal.io/sdk/workflow"
)

type SWFClient interface {
	CountClosedWorkflowExecutions(ctx workflow.Context, input *swf.CountClosedWorkflowExecutionsInput) (*swf.WorkflowExecutionCount, error)
	CountClosedWorkflowExecutionsAsync(ctx workflow.Context, input *swf.CountClosedWorkflowExecutionsInput) *SwfCountClosedWorkflowExecutionsFuture

	CountOpenWorkflowExecutions(ctx workflow.Context, input *swf.CountOpenWorkflowExecutionsInput) (*swf.WorkflowExecutionCount, error)
	CountOpenWorkflowExecutionsAsync(ctx workflow.Context, input *swf.CountOpenWorkflowExecutionsInput) *SwfCountOpenWorkflowExecutionsFuture

	CountPendingActivityTasks(ctx workflow.Context, input *swf.CountPendingActivityTasksInput) (*swf.PendingTaskCount, error)
	CountPendingActivityTasksAsync(ctx workflow.Context, input *swf.CountPendingActivityTasksInput) *SwfCountPendingActivityTasksFuture

	CountPendingDecisionTasks(ctx workflow.Context, input *swf.CountPendingDecisionTasksInput) (*swf.PendingTaskCount, error)
	CountPendingDecisionTasksAsync(ctx workflow.Context, input *swf.CountPendingDecisionTasksInput) *SwfCountPendingDecisionTasksFuture

	DeprecateActivityType(ctx workflow.Context, input *swf.DeprecateActivityTypeInput) (*swf.DeprecateActivityTypeOutput, error)
	DeprecateActivityTypeAsync(ctx workflow.Context, input *swf.DeprecateActivityTypeInput) *SwfDeprecateActivityTypeFuture

	DeprecateDomain(ctx workflow.Context, input *swf.DeprecateDomainInput) (*swf.DeprecateDomainOutput, error)
	DeprecateDomainAsync(ctx workflow.Context, input *swf.DeprecateDomainInput) *SwfDeprecateDomainFuture

	DeprecateWorkflowType(ctx workflow.Context, input *swf.DeprecateWorkflowTypeInput) (*swf.DeprecateWorkflowTypeOutput, error)
	DeprecateWorkflowTypeAsync(ctx workflow.Context, input *swf.DeprecateWorkflowTypeInput) *SwfDeprecateWorkflowTypeFuture

	DescribeActivityType(ctx workflow.Context, input *swf.DescribeActivityTypeInput) (*swf.DescribeActivityTypeOutput, error)
	DescribeActivityTypeAsync(ctx workflow.Context, input *swf.DescribeActivityTypeInput) *SwfDescribeActivityTypeFuture

	DescribeDomain(ctx workflow.Context, input *swf.DescribeDomainInput) (*swf.DescribeDomainOutput, error)
	DescribeDomainAsync(ctx workflow.Context, input *swf.DescribeDomainInput) *SwfDescribeDomainFuture

	DescribeWorkflowExecution(ctx workflow.Context, input *swf.DescribeWorkflowExecutionInput) (*swf.DescribeWorkflowExecutionOutput, error)
	DescribeWorkflowExecutionAsync(ctx workflow.Context, input *swf.DescribeWorkflowExecutionInput) *SwfDescribeWorkflowExecutionFuture

	DescribeWorkflowType(ctx workflow.Context, input *swf.DescribeWorkflowTypeInput) (*swf.DescribeWorkflowTypeOutput, error)
	DescribeWorkflowTypeAsync(ctx workflow.Context, input *swf.DescribeWorkflowTypeInput) *SwfDescribeWorkflowTypeFuture

	GetWorkflowExecutionHistory(ctx workflow.Context, input *swf.GetWorkflowExecutionHistoryInput) (*swf.GetWorkflowExecutionHistoryOutput, error)
	GetWorkflowExecutionHistoryAsync(ctx workflow.Context, input *swf.GetWorkflowExecutionHistoryInput) *SwfGetWorkflowExecutionHistoryFuture

	ListActivityTypes(ctx workflow.Context, input *swf.ListActivityTypesInput) (*swf.ListActivityTypesOutput, error)
	ListActivityTypesAsync(ctx workflow.Context, input *swf.ListActivityTypesInput) *SwfListActivityTypesFuture

	ListClosedWorkflowExecutions(ctx workflow.Context, input *swf.ListClosedWorkflowExecutionsInput) (*swf.WorkflowExecutionInfos, error)
	ListClosedWorkflowExecutionsAsync(ctx workflow.Context, input *swf.ListClosedWorkflowExecutionsInput) *SwfListClosedWorkflowExecutionsFuture

	ListDomains(ctx workflow.Context, input *swf.ListDomainsInput) (*swf.ListDomainsOutput, error)
	ListDomainsAsync(ctx workflow.Context, input *swf.ListDomainsInput) *SwfListDomainsFuture

	ListOpenWorkflowExecutions(ctx workflow.Context, input *swf.ListOpenWorkflowExecutionsInput) (*swf.WorkflowExecutionInfos, error)
	ListOpenWorkflowExecutionsAsync(ctx workflow.Context, input *swf.ListOpenWorkflowExecutionsInput) *SwfListOpenWorkflowExecutionsFuture

	ListTagsForResource(ctx workflow.Context, input *swf.ListTagsForResourceInput) (*swf.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *swf.ListTagsForResourceInput) *SwfListTagsForResourceFuture

	ListWorkflowTypes(ctx workflow.Context, input *swf.ListWorkflowTypesInput) (*swf.ListWorkflowTypesOutput, error)
	ListWorkflowTypesAsync(ctx workflow.Context, input *swf.ListWorkflowTypesInput) *SwfListWorkflowTypesFuture

	PollForActivityTask(ctx workflow.Context, input *swf.PollForActivityTaskInput) (*swf.PollForActivityTaskOutput, error)
	PollForActivityTaskAsync(ctx workflow.Context, input *swf.PollForActivityTaskInput) *SwfPollForActivityTaskFuture

	PollForDecisionTask(ctx workflow.Context, input *swf.PollForDecisionTaskInput) (*swf.PollForDecisionTaskOutput, error)
	PollForDecisionTaskAsync(ctx workflow.Context, input *swf.PollForDecisionTaskInput) *SwfPollForDecisionTaskFuture

	RecordActivityTaskHeartbeat(ctx workflow.Context, input *swf.RecordActivityTaskHeartbeatInput) (*swf.RecordActivityTaskHeartbeatOutput, error)
	RecordActivityTaskHeartbeatAsync(ctx workflow.Context, input *swf.RecordActivityTaskHeartbeatInput) *SwfRecordActivityTaskHeartbeatFuture

	RegisterActivityType(ctx workflow.Context, input *swf.RegisterActivityTypeInput) (*swf.RegisterActivityTypeOutput, error)
	RegisterActivityTypeAsync(ctx workflow.Context, input *swf.RegisterActivityTypeInput) *SwfRegisterActivityTypeFuture

	RegisterDomain(ctx workflow.Context, input *swf.RegisterDomainInput) (*swf.RegisterDomainOutput, error)
	RegisterDomainAsync(ctx workflow.Context, input *swf.RegisterDomainInput) *SwfRegisterDomainFuture

	RegisterWorkflowType(ctx workflow.Context, input *swf.RegisterWorkflowTypeInput) (*swf.RegisterWorkflowTypeOutput, error)
	RegisterWorkflowTypeAsync(ctx workflow.Context, input *swf.RegisterWorkflowTypeInput) *SwfRegisterWorkflowTypeFuture

	RequestCancelWorkflowExecution(ctx workflow.Context, input *swf.RequestCancelWorkflowExecutionInput) (*swf.RequestCancelWorkflowExecutionOutput, error)
	RequestCancelWorkflowExecutionAsync(ctx workflow.Context, input *swf.RequestCancelWorkflowExecutionInput) *SwfRequestCancelWorkflowExecutionFuture

	RespondActivityTaskCanceled(ctx workflow.Context, input *swf.RespondActivityTaskCanceledInput) (*swf.RespondActivityTaskCanceledOutput, error)
	RespondActivityTaskCanceledAsync(ctx workflow.Context, input *swf.RespondActivityTaskCanceledInput) *SwfRespondActivityTaskCanceledFuture

	RespondActivityTaskCompleted(ctx workflow.Context, input *swf.RespondActivityTaskCompletedInput) (*swf.RespondActivityTaskCompletedOutput, error)
	RespondActivityTaskCompletedAsync(ctx workflow.Context, input *swf.RespondActivityTaskCompletedInput) *SwfRespondActivityTaskCompletedFuture

	RespondActivityTaskFailed(ctx workflow.Context, input *swf.RespondActivityTaskFailedInput) (*swf.RespondActivityTaskFailedOutput, error)
	RespondActivityTaskFailedAsync(ctx workflow.Context, input *swf.RespondActivityTaskFailedInput) *SwfRespondActivityTaskFailedFuture

	RespondDecisionTaskCompleted(ctx workflow.Context, input *swf.RespondDecisionTaskCompletedInput) (*swf.RespondDecisionTaskCompletedOutput, error)
	RespondDecisionTaskCompletedAsync(ctx workflow.Context, input *swf.RespondDecisionTaskCompletedInput) *SwfRespondDecisionTaskCompletedFuture

	SignalWorkflowExecution(ctx workflow.Context, input *swf.SignalWorkflowExecutionInput) (*swf.SignalWorkflowExecutionOutput, error)
	SignalWorkflowExecutionAsync(ctx workflow.Context, input *swf.SignalWorkflowExecutionInput) *SwfSignalWorkflowExecutionFuture

	StartWorkflowExecution(ctx workflow.Context, input *swf.StartWorkflowExecutionInput) (*swf.StartWorkflowExecutionOutput, error)
	StartWorkflowExecutionAsync(ctx workflow.Context, input *swf.StartWorkflowExecutionInput) *SwfStartWorkflowExecutionFuture

	TagResource(ctx workflow.Context, input *swf.TagResourceInput) (*swf.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *swf.TagResourceInput) *SwfTagResourceFuture

	TerminateWorkflowExecution(ctx workflow.Context, input *swf.TerminateWorkflowExecutionInput) (*swf.TerminateWorkflowExecutionOutput, error)
	TerminateWorkflowExecutionAsync(ctx workflow.Context, input *swf.TerminateWorkflowExecutionInput) *SwfTerminateWorkflowExecutionFuture

	UndeprecateActivityType(ctx workflow.Context, input *swf.UndeprecateActivityTypeInput) (*swf.UndeprecateActivityTypeOutput, error)
	UndeprecateActivityTypeAsync(ctx workflow.Context, input *swf.UndeprecateActivityTypeInput) *SwfUndeprecateActivityTypeFuture

	UndeprecateDomain(ctx workflow.Context, input *swf.UndeprecateDomainInput) (*swf.UndeprecateDomainOutput, error)
	UndeprecateDomainAsync(ctx workflow.Context, input *swf.UndeprecateDomainInput) *SwfUndeprecateDomainFuture

	UndeprecateWorkflowType(ctx workflow.Context, input *swf.UndeprecateWorkflowTypeInput) (*swf.UndeprecateWorkflowTypeOutput, error)
	UndeprecateWorkflowTypeAsync(ctx workflow.Context, input *swf.UndeprecateWorkflowTypeInput) *SwfUndeprecateWorkflowTypeFuture

	UntagResource(ctx workflow.Context, input *swf.UntagResourceInput) (*swf.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *swf.UntagResourceInput) *SwfUntagResourceFuture
}

type SWFStub struct{}

func NewSWFStub() SWFClient {
	return &SWFStub{}
}

type SwfCountClosedWorkflowExecutionsFuture struct {
	Future workflow.Future
}

func (r *SwfCountClosedWorkflowExecutionsFuture) Get(ctx workflow.Context) (*swf.WorkflowExecutionCount, error) {
	var output swf.WorkflowExecutionCount
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfCountOpenWorkflowExecutionsFuture struct {
	Future workflow.Future
}

func (r *SwfCountOpenWorkflowExecutionsFuture) Get(ctx workflow.Context) (*swf.WorkflowExecutionCount, error) {
	var output swf.WorkflowExecutionCount
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfCountPendingActivityTasksFuture struct {
	Future workflow.Future
}

func (r *SwfCountPendingActivityTasksFuture) Get(ctx workflow.Context) (*swf.PendingTaskCount, error) {
	var output swf.PendingTaskCount
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfCountPendingDecisionTasksFuture struct {
	Future workflow.Future
}

func (r *SwfCountPendingDecisionTasksFuture) Get(ctx workflow.Context) (*swf.PendingTaskCount, error) {
	var output swf.PendingTaskCount
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfDeprecateActivityTypeFuture struct {
	Future workflow.Future
}

func (r *SwfDeprecateActivityTypeFuture) Get(ctx workflow.Context) (*swf.DeprecateActivityTypeOutput, error) {
	var output swf.DeprecateActivityTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfDeprecateDomainFuture struct {
	Future workflow.Future
}

func (r *SwfDeprecateDomainFuture) Get(ctx workflow.Context) (*swf.DeprecateDomainOutput, error) {
	var output swf.DeprecateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfDeprecateWorkflowTypeFuture struct {
	Future workflow.Future
}

func (r *SwfDeprecateWorkflowTypeFuture) Get(ctx workflow.Context) (*swf.DeprecateWorkflowTypeOutput, error) {
	var output swf.DeprecateWorkflowTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfDescribeActivityTypeFuture struct {
	Future workflow.Future
}

func (r *SwfDescribeActivityTypeFuture) Get(ctx workflow.Context) (*swf.DescribeActivityTypeOutput, error) {
	var output swf.DescribeActivityTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfDescribeDomainFuture struct {
	Future workflow.Future
}

func (r *SwfDescribeDomainFuture) Get(ctx workflow.Context) (*swf.DescribeDomainOutput, error) {
	var output swf.DescribeDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfDescribeWorkflowExecutionFuture struct {
	Future workflow.Future
}

func (r *SwfDescribeWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.DescribeWorkflowExecutionOutput, error) {
	var output swf.DescribeWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfDescribeWorkflowTypeFuture struct {
	Future workflow.Future
}

func (r *SwfDescribeWorkflowTypeFuture) Get(ctx workflow.Context) (*swf.DescribeWorkflowTypeOutput, error) {
	var output swf.DescribeWorkflowTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfGetWorkflowExecutionHistoryFuture struct {
	Future workflow.Future
}

func (r *SwfGetWorkflowExecutionHistoryFuture) Get(ctx workflow.Context) (*swf.GetWorkflowExecutionHistoryOutput, error) {
	var output swf.GetWorkflowExecutionHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfListActivityTypesFuture struct {
	Future workflow.Future
}

func (r *SwfListActivityTypesFuture) Get(ctx workflow.Context) (*swf.ListActivityTypesOutput, error) {
	var output swf.ListActivityTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfListClosedWorkflowExecutionsFuture struct {
	Future workflow.Future
}

func (r *SwfListClosedWorkflowExecutionsFuture) Get(ctx workflow.Context) (*swf.WorkflowExecutionInfos, error) {
	var output swf.WorkflowExecutionInfos
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfListDomainsFuture struct {
	Future workflow.Future
}

func (r *SwfListDomainsFuture) Get(ctx workflow.Context) (*swf.ListDomainsOutput, error) {
	var output swf.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfListOpenWorkflowExecutionsFuture struct {
	Future workflow.Future
}

func (r *SwfListOpenWorkflowExecutionsFuture) Get(ctx workflow.Context) (*swf.WorkflowExecutionInfos, error) {
	var output swf.WorkflowExecutionInfos
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *SwfListTagsForResourceFuture) Get(ctx workflow.Context) (*swf.ListTagsForResourceOutput, error) {
	var output swf.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfListWorkflowTypesFuture struct {
	Future workflow.Future
}

func (r *SwfListWorkflowTypesFuture) Get(ctx workflow.Context) (*swf.ListWorkflowTypesOutput, error) {
	var output swf.ListWorkflowTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfPollForActivityTaskFuture struct {
	Future workflow.Future
}

func (r *SwfPollForActivityTaskFuture) Get(ctx workflow.Context) (*swf.PollForActivityTaskOutput, error) {
	var output swf.PollForActivityTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfPollForDecisionTaskFuture struct {
	Future workflow.Future
}

func (r *SwfPollForDecisionTaskFuture) Get(ctx workflow.Context) (*swf.PollForDecisionTaskOutput, error) {
	var output swf.PollForDecisionTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfRecordActivityTaskHeartbeatFuture struct {
	Future workflow.Future
}

func (r *SwfRecordActivityTaskHeartbeatFuture) Get(ctx workflow.Context) (*swf.RecordActivityTaskHeartbeatOutput, error) {
	var output swf.RecordActivityTaskHeartbeatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfRegisterActivityTypeFuture struct {
	Future workflow.Future
}

func (r *SwfRegisterActivityTypeFuture) Get(ctx workflow.Context) (*swf.RegisterActivityTypeOutput, error) {
	var output swf.RegisterActivityTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfRegisterDomainFuture struct {
	Future workflow.Future
}

func (r *SwfRegisterDomainFuture) Get(ctx workflow.Context) (*swf.RegisterDomainOutput, error) {
	var output swf.RegisterDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfRegisterWorkflowTypeFuture struct {
	Future workflow.Future
}

func (r *SwfRegisterWorkflowTypeFuture) Get(ctx workflow.Context) (*swf.RegisterWorkflowTypeOutput, error) {
	var output swf.RegisterWorkflowTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfRequestCancelWorkflowExecutionFuture struct {
	Future workflow.Future
}

func (r *SwfRequestCancelWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.RequestCancelWorkflowExecutionOutput, error) {
	var output swf.RequestCancelWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfRespondActivityTaskCanceledFuture struct {
	Future workflow.Future
}

func (r *SwfRespondActivityTaskCanceledFuture) Get(ctx workflow.Context) (*swf.RespondActivityTaskCanceledOutput, error) {
	var output swf.RespondActivityTaskCanceledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfRespondActivityTaskCompletedFuture struct {
	Future workflow.Future
}

func (r *SwfRespondActivityTaskCompletedFuture) Get(ctx workflow.Context) (*swf.RespondActivityTaskCompletedOutput, error) {
	var output swf.RespondActivityTaskCompletedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfRespondActivityTaskFailedFuture struct {
	Future workflow.Future
}

func (r *SwfRespondActivityTaskFailedFuture) Get(ctx workflow.Context) (*swf.RespondActivityTaskFailedOutput, error) {
	var output swf.RespondActivityTaskFailedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfRespondDecisionTaskCompletedFuture struct {
	Future workflow.Future
}

func (r *SwfRespondDecisionTaskCompletedFuture) Get(ctx workflow.Context) (*swf.RespondDecisionTaskCompletedOutput, error) {
	var output swf.RespondDecisionTaskCompletedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfSignalWorkflowExecutionFuture struct {
	Future workflow.Future
}

func (r *SwfSignalWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.SignalWorkflowExecutionOutput, error) {
	var output swf.SignalWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfStartWorkflowExecutionFuture struct {
	Future workflow.Future
}

func (r *SwfStartWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.StartWorkflowExecutionOutput, error) {
	var output swf.StartWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfTagResourceFuture struct {
	Future workflow.Future
}

func (r *SwfTagResourceFuture) Get(ctx workflow.Context) (*swf.TagResourceOutput, error) {
	var output swf.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfTerminateWorkflowExecutionFuture struct {
	Future workflow.Future
}

func (r *SwfTerminateWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.TerminateWorkflowExecutionOutput, error) {
	var output swf.TerminateWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfUndeprecateActivityTypeFuture struct {
	Future workflow.Future
}

func (r *SwfUndeprecateActivityTypeFuture) Get(ctx workflow.Context) (*swf.UndeprecateActivityTypeOutput, error) {
	var output swf.UndeprecateActivityTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfUndeprecateDomainFuture struct {
	Future workflow.Future
}

func (r *SwfUndeprecateDomainFuture) Get(ctx workflow.Context) (*swf.UndeprecateDomainOutput, error) {
	var output swf.UndeprecateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfUndeprecateWorkflowTypeFuture struct {
	Future workflow.Future
}

func (r *SwfUndeprecateWorkflowTypeFuture) Get(ctx workflow.Context) (*swf.UndeprecateWorkflowTypeOutput, error) {
	var output swf.UndeprecateWorkflowTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwfUntagResourceFuture struct {
	Future workflow.Future
}

func (r *SwfUntagResourceFuture) Get(ctx workflow.Context) (*swf.UntagResourceOutput, error) {
	var output swf.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) CountClosedWorkflowExecutions(ctx workflow.Context, input *swf.CountClosedWorkflowExecutionsInput) (*swf.WorkflowExecutionCount, error) {
	var output swf.WorkflowExecutionCount
	err := workflow.ExecuteActivity(ctx, "aws.swf.CountClosedWorkflowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) CountClosedWorkflowExecutionsAsync(ctx workflow.Context, input *swf.CountClosedWorkflowExecutionsInput) *SwfCountClosedWorkflowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.CountClosedWorkflowExecutions", input)
	return &SwfCountClosedWorkflowExecutionsFuture{Future: future}
}

func (a *SWFStub) CountOpenWorkflowExecutions(ctx workflow.Context, input *swf.CountOpenWorkflowExecutionsInput) (*swf.WorkflowExecutionCount, error) {
	var output swf.WorkflowExecutionCount
	err := workflow.ExecuteActivity(ctx, "aws.swf.CountOpenWorkflowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) CountOpenWorkflowExecutionsAsync(ctx workflow.Context, input *swf.CountOpenWorkflowExecutionsInput) *SwfCountOpenWorkflowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.CountOpenWorkflowExecutions", input)
	return &SwfCountOpenWorkflowExecutionsFuture{Future: future}
}

func (a *SWFStub) CountPendingActivityTasks(ctx workflow.Context, input *swf.CountPendingActivityTasksInput) (*swf.PendingTaskCount, error) {
	var output swf.PendingTaskCount
	err := workflow.ExecuteActivity(ctx, "aws.swf.CountPendingActivityTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) CountPendingActivityTasksAsync(ctx workflow.Context, input *swf.CountPendingActivityTasksInput) *SwfCountPendingActivityTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.CountPendingActivityTasks", input)
	return &SwfCountPendingActivityTasksFuture{Future: future}
}

func (a *SWFStub) CountPendingDecisionTasks(ctx workflow.Context, input *swf.CountPendingDecisionTasksInput) (*swf.PendingTaskCount, error) {
	var output swf.PendingTaskCount
	err := workflow.ExecuteActivity(ctx, "aws.swf.CountPendingDecisionTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) CountPendingDecisionTasksAsync(ctx workflow.Context, input *swf.CountPendingDecisionTasksInput) *SwfCountPendingDecisionTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.CountPendingDecisionTasks", input)
	return &SwfCountPendingDecisionTasksFuture{Future: future}
}

func (a *SWFStub) DeprecateActivityType(ctx workflow.Context, input *swf.DeprecateActivityTypeInput) (*swf.DeprecateActivityTypeOutput, error) {
	var output swf.DeprecateActivityTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DeprecateActivityType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DeprecateActivityTypeAsync(ctx workflow.Context, input *swf.DeprecateActivityTypeInput) *SwfDeprecateActivityTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DeprecateActivityType", input)
	return &SwfDeprecateActivityTypeFuture{Future: future}
}

func (a *SWFStub) DeprecateDomain(ctx workflow.Context, input *swf.DeprecateDomainInput) (*swf.DeprecateDomainOutput, error) {
	var output swf.DeprecateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DeprecateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DeprecateDomainAsync(ctx workflow.Context, input *swf.DeprecateDomainInput) *SwfDeprecateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DeprecateDomain", input)
	return &SwfDeprecateDomainFuture{Future: future}
}

func (a *SWFStub) DeprecateWorkflowType(ctx workflow.Context, input *swf.DeprecateWorkflowTypeInput) (*swf.DeprecateWorkflowTypeOutput, error) {
	var output swf.DeprecateWorkflowTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DeprecateWorkflowType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DeprecateWorkflowTypeAsync(ctx workflow.Context, input *swf.DeprecateWorkflowTypeInput) *SwfDeprecateWorkflowTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DeprecateWorkflowType", input)
	return &SwfDeprecateWorkflowTypeFuture{Future: future}
}

func (a *SWFStub) DescribeActivityType(ctx workflow.Context, input *swf.DescribeActivityTypeInput) (*swf.DescribeActivityTypeOutput, error) {
	var output swf.DescribeActivityTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DescribeActivityType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DescribeActivityTypeAsync(ctx workflow.Context, input *swf.DescribeActivityTypeInput) *SwfDescribeActivityTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DescribeActivityType", input)
	return &SwfDescribeActivityTypeFuture{Future: future}
}

func (a *SWFStub) DescribeDomain(ctx workflow.Context, input *swf.DescribeDomainInput) (*swf.DescribeDomainOutput, error) {
	var output swf.DescribeDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DescribeDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DescribeDomainAsync(ctx workflow.Context, input *swf.DescribeDomainInput) *SwfDescribeDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DescribeDomain", input)
	return &SwfDescribeDomainFuture{Future: future}
}

func (a *SWFStub) DescribeWorkflowExecution(ctx workflow.Context, input *swf.DescribeWorkflowExecutionInput) (*swf.DescribeWorkflowExecutionOutput, error) {
	var output swf.DescribeWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DescribeWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DescribeWorkflowExecutionAsync(ctx workflow.Context, input *swf.DescribeWorkflowExecutionInput) *SwfDescribeWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DescribeWorkflowExecution", input)
	return &SwfDescribeWorkflowExecutionFuture{Future: future}
}

func (a *SWFStub) DescribeWorkflowType(ctx workflow.Context, input *swf.DescribeWorkflowTypeInput) (*swf.DescribeWorkflowTypeOutput, error) {
	var output swf.DescribeWorkflowTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DescribeWorkflowType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DescribeWorkflowTypeAsync(ctx workflow.Context, input *swf.DescribeWorkflowTypeInput) *SwfDescribeWorkflowTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DescribeWorkflowType", input)
	return &SwfDescribeWorkflowTypeFuture{Future: future}
}

func (a *SWFStub) GetWorkflowExecutionHistory(ctx workflow.Context, input *swf.GetWorkflowExecutionHistoryInput) (*swf.GetWorkflowExecutionHistoryOutput, error) {
	var output swf.GetWorkflowExecutionHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.GetWorkflowExecutionHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) GetWorkflowExecutionHistoryAsync(ctx workflow.Context, input *swf.GetWorkflowExecutionHistoryInput) *SwfGetWorkflowExecutionHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.GetWorkflowExecutionHistory", input)
	return &SwfGetWorkflowExecutionHistoryFuture{Future: future}
}

func (a *SWFStub) ListActivityTypes(ctx workflow.Context, input *swf.ListActivityTypesInput) (*swf.ListActivityTypesOutput, error) {
	var output swf.ListActivityTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.ListActivityTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) ListActivityTypesAsync(ctx workflow.Context, input *swf.ListActivityTypesInput) *SwfListActivityTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.ListActivityTypes", input)
	return &SwfListActivityTypesFuture{Future: future}
}

func (a *SWFStub) ListClosedWorkflowExecutions(ctx workflow.Context, input *swf.ListClosedWorkflowExecutionsInput) (*swf.WorkflowExecutionInfos, error) {
	var output swf.WorkflowExecutionInfos
	err := workflow.ExecuteActivity(ctx, "aws.swf.ListClosedWorkflowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) ListClosedWorkflowExecutionsAsync(ctx workflow.Context, input *swf.ListClosedWorkflowExecutionsInput) *SwfListClosedWorkflowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.ListClosedWorkflowExecutions", input)
	return &SwfListClosedWorkflowExecutionsFuture{Future: future}
}

func (a *SWFStub) ListDomains(ctx workflow.Context, input *swf.ListDomainsInput) (*swf.ListDomainsOutput, error) {
	var output swf.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) ListDomainsAsync(ctx workflow.Context, input *swf.ListDomainsInput) *SwfListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.ListDomains", input)
	return &SwfListDomainsFuture{Future: future}
}

func (a *SWFStub) ListOpenWorkflowExecutions(ctx workflow.Context, input *swf.ListOpenWorkflowExecutionsInput) (*swf.WorkflowExecutionInfos, error) {
	var output swf.WorkflowExecutionInfos
	err := workflow.ExecuteActivity(ctx, "aws.swf.ListOpenWorkflowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) ListOpenWorkflowExecutionsAsync(ctx workflow.Context, input *swf.ListOpenWorkflowExecutionsInput) *SwfListOpenWorkflowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.ListOpenWorkflowExecutions", input)
	return &SwfListOpenWorkflowExecutionsFuture{Future: future}
}

func (a *SWFStub) ListTagsForResource(ctx workflow.Context, input *swf.ListTagsForResourceInput) (*swf.ListTagsForResourceOutput, error) {
	var output swf.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) ListTagsForResourceAsync(ctx workflow.Context, input *swf.ListTagsForResourceInput) *SwfListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.ListTagsForResource", input)
	return &SwfListTagsForResourceFuture{Future: future}
}

func (a *SWFStub) ListWorkflowTypes(ctx workflow.Context, input *swf.ListWorkflowTypesInput) (*swf.ListWorkflowTypesOutput, error) {
	var output swf.ListWorkflowTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.ListWorkflowTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) ListWorkflowTypesAsync(ctx workflow.Context, input *swf.ListWorkflowTypesInput) *SwfListWorkflowTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.ListWorkflowTypes", input)
	return &SwfListWorkflowTypesFuture{Future: future}
}

func (a *SWFStub) PollForActivityTask(ctx workflow.Context, input *swf.PollForActivityTaskInput) (*swf.PollForActivityTaskOutput, error) {
	var output swf.PollForActivityTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.PollForActivityTask", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) PollForActivityTaskAsync(ctx workflow.Context, input *swf.PollForActivityTaskInput) *SwfPollForActivityTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.PollForActivityTask", input)
	return &SwfPollForActivityTaskFuture{Future: future}
}

func (a *SWFStub) PollForDecisionTask(ctx workflow.Context, input *swf.PollForDecisionTaskInput) (*swf.PollForDecisionTaskOutput, error) {
	var output swf.PollForDecisionTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.PollForDecisionTask", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) PollForDecisionTaskAsync(ctx workflow.Context, input *swf.PollForDecisionTaskInput) *SwfPollForDecisionTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.PollForDecisionTask", input)
	return &SwfPollForDecisionTaskFuture{Future: future}
}

func (a *SWFStub) RecordActivityTaskHeartbeat(ctx workflow.Context, input *swf.RecordActivityTaskHeartbeatInput) (*swf.RecordActivityTaskHeartbeatOutput, error) {
	var output swf.RecordActivityTaskHeartbeatOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RecordActivityTaskHeartbeat", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RecordActivityTaskHeartbeatAsync(ctx workflow.Context, input *swf.RecordActivityTaskHeartbeatInput) *SwfRecordActivityTaskHeartbeatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RecordActivityTaskHeartbeat", input)
	return &SwfRecordActivityTaskHeartbeatFuture{Future: future}
}

func (a *SWFStub) RegisterActivityType(ctx workflow.Context, input *swf.RegisterActivityTypeInput) (*swf.RegisterActivityTypeOutput, error) {
	var output swf.RegisterActivityTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RegisterActivityType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RegisterActivityTypeAsync(ctx workflow.Context, input *swf.RegisterActivityTypeInput) *SwfRegisterActivityTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RegisterActivityType", input)
	return &SwfRegisterActivityTypeFuture{Future: future}
}

func (a *SWFStub) RegisterDomain(ctx workflow.Context, input *swf.RegisterDomainInput) (*swf.RegisterDomainOutput, error) {
	var output swf.RegisterDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RegisterDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RegisterDomainAsync(ctx workflow.Context, input *swf.RegisterDomainInput) *SwfRegisterDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RegisterDomain", input)
	return &SwfRegisterDomainFuture{Future: future}
}

func (a *SWFStub) RegisterWorkflowType(ctx workflow.Context, input *swf.RegisterWorkflowTypeInput) (*swf.RegisterWorkflowTypeOutput, error) {
	var output swf.RegisterWorkflowTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RegisterWorkflowType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RegisterWorkflowTypeAsync(ctx workflow.Context, input *swf.RegisterWorkflowTypeInput) *SwfRegisterWorkflowTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RegisterWorkflowType", input)
	return &SwfRegisterWorkflowTypeFuture{Future: future}
}

func (a *SWFStub) RequestCancelWorkflowExecution(ctx workflow.Context, input *swf.RequestCancelWorkflowExecutionInput) (*swf.RequestCancelWorkflowExecutionOutput, error) {
	var output swf.RequestCancelWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RequestCancelWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RequestCancelWorkflowExecutionAsync(ctx workflow.Context, input *swf.RequestCancelWorkflowExecutionInput) *SwfRequestCancelWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RequestCancelWorkflowExecution", input)
	return &SwfRequestCancelWorkflowExecutionFuture{Future: future}
}

func (a *SWFStub) RespondActivityTaskCanceled(ctx workflow.Context, input *swf.RespondActivityTaskCanceledInput) (*swf.RespondActivityTaskCanceledOutput, error) {
	var output swf.RespondActivityTaskCanceledOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RespondActivityTaskCanceled", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RespondActivityTaskCanceledAsync(ctx workflow.Context, input *swf.RespondActivityTaskCanceledInput) *SwfRespondActivityTaskCanceledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RespondActivityTaskCanceled", input)
	return &SwfRespondActivityTaskCanceledFuture{Future: future}
}

func (a *SWFStub) RespondActivityTaskCompleted(ctx workflow.Context, input *swf.RespondActivityTaskCompletedInput) (*swf.RespondActivityTaskCompletedOutput, error) {
	var output swf.RespondActivityTaskCompletedOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RespondActivityTaskCompleted", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RespondActivityTaskCompletedAsync(ctx workflow.Context, input *swf.RespondActivityTaskCompletedInput) *SwfRespondActivityTaskCompletedFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RespondActivityTaskCompleted", input)
	return &SwfRespondActivityTaskCompletedFuture{Future: future}
}

func (a *SWFStub) RespondActivityTaskFailed(ctx workflow.Context, input *swf.RespondActivityTaskFailedInput) (*swf.RespondActivityTaskFailedOutput, error) {
	var output swf.RespondActivityTaskFailedOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RespondActivityTaskFailed", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RespondActivityTaskFailedAsync(ctx workflow.Context, input *swf.RespondActivityTaskFailedInput) *SwfRespondActivityTaskFailedFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RespondActivityTaskFailed", input)
	return &SwfRespondActivityTaskFailedFuture{Future: future}
}

func (a *SWFStub) RespondDecisionTaskCompleted(ctx workflow.Context, input *swf.RespondDecisionTaskCompletedInput) (*swf.RespondDecisionTaskCompletedOutput, error) {
	var output swf.RespondDecisionTaskCompletedOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RespondDecisionTaskCompleted", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RespondDecisionTaskCompletedAsync(ctx workflow.Context, input *swf.RespondDecisionTaskCompletedInput) *SwfRespondDecisionTaskCompletedFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RespondDecisionTaskCompleted", input)
	return &SwfRespondDecisionTaskCompletedFuture{Future: future}
}

func (a *SWFStub) SignalWorkflowExecution(ctx workflow.Context, input *swf.SignalWorkflowExecutionInput) (*swf.SignalWorkflowExecutionOutput, error) {
	var output swf.SignalWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.SignalWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) SignalWorkflowExecutionAsync(ctx workflow.Context, input *swf.SignalWorkflowExecutionInput) *SwfSignalWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.SignalWorkflowExecution", input)
	return &SwfSignalWorkflowExecutionFuture{Future: future}
}

func (a *SWFStub) StartWorkflowExecution(ctx workflow.Context, input *swf.StartWorkflowExecutionInput) (*swf.StartWorkflowExecutionOutput, error) {
	var output swf.StartWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.StartWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) StartWorkflowExecutionAsync(ctx workflow.Context, input *swf.StartWorkflowExecutionInput) *SwfStartWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.StartWorkflowExecution", input)
	return &SwfStartWorkflowExecutionFuture{Future: future}
}

func (a *SWFStub) TagResource(ctx workflow.Context, input *swf.TagResourceInput) (*swf.TagResourceOutput, error) {
	var output swf.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) TagResourceAsync(ctx workflow.Context, input *swf.TagResourceInput) *SwfTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.TagResource", input)
	return &SwfTagResourceFuture{Future: future}
}

func (a *SWFStub) TerminateWorkflowExecution(ctx workflow.Context, input *swf.TerminateWorkflowExecutionInput) (*swf.TerminateWorkflowExecutionOutput, error) {
	var output swf.TerminateWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.TerminateWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) TerminateWorkflowExecutionAsync(ctx workflow.Context, input *swf.TerminateWorkflowExecutionInput) *SwfTerminateWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.TerminateWorkflowExecution", input)
	return &SwfTerminateWorkflowExecutionFuture{Future: future}
}

func (a *SWFStub) UndeprecateActivityType(ctx workflow.Context, input *swf.UndeprecateActivityTypeInput) (*swf.UndeprecateActivityTypeOutput, error) {
	var output swf.UndeprecateActivityTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.UndeprecateActivityType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) UndeprecateActivityTypeAsync(ctx workflow.Context, input *swf.UndeprecateActivityTypeInput) *SwfUndeprecateActivityTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.UndeprecateActivityType", input)
	return &SwfUndeprecateActivityTypeFuture{Future: future}
}

func (a *SWFStub) UndeprecateDomain(ctx workflow.Context, input *swf.UndeprecateDomainInput) (*swf.UndeprecateDomainOutput, error) {
	var output swf.UndeprecateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.UndeprecateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) UndeprecateDomainAsync(ctx workflow.Context, input *swf.UndeprecateDomainInput) *SwfUndeprecateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.UndeprecateDomain", input)
	return &SwfUndeprecateDomainFuture{Future: future}
}

func (a *SWFStub) UndeprecateWorkflowType(ctx workflow.Context, input *swf.UndeprecateWorkflowTypeInput) (*swf.UndeprecateWorkflowTypeOutput, error) {
	var output swf.UndeprecateWorkflowTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.UndeprecateWorkflowType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) UndeprecateWorkflowTypeAsync(ctx workflow.Context, input *swf.UndeprecateWorkflowTypeInput) *SwfUndeprecateWorkflowTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.UndeprecateWorkflowType", input)
	return &SwfUndeprecateWorkflowTypeFuture{Future: future}
}

func (a *SWFStub) UntagResource(ctx workflow.Context, input *swf.UntagResourceInput) (*swf.UntagResourceOutput, error) {
	var output swf.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) UntagResourceAsync(ctx workflow.Context, input *swf.UntagResourceInput) *SwfUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.UntagResource", input)
	return &SwfUntagResourceFuture{Future: future}
}
