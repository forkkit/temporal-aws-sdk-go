// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/swf"
	"go.temporal.io/sdk/workflow"
)

type SWFClient interface {
	CountClosedWorkflowExecutions(ctx workflow.Context, input *swf.CountClosedWorkflowExecutionsInput) (*swf.WorkflowExecutionCount, error)
	CountClosedWorkflowExecutionsAsync(ctx workflow.Context, input *swf.CountClosedWorkflowExecutionsInput) *SWFCountClosedWorkflowExecutionsFuture

	CountOpenWorkflowExecutions(ctx workflow.Context, input *swf.CountOpenWorkflowExecutionsInput) (*swf.WorkflowExecutionCount, error)
	CountOpenWorkflowExecutionsAsync(ctx workflow.Context, input *swf.CountOpenWorkflowExecutionsInput) *SWFCountOpenWorkflowExecutionsFuture

	CountPendingActivityTasks(ctx workflow.Context, input *swf.CountPendingActivityTasksInput) (*swf.PendingTaskCount, error)
	CountPendingActivityTasksAsync(ctx workflow.Context, input *swf.CountPendingActivityTasksInput) *SWFCountPendingActivityTasksFuture

	CountPendingDecisionTasks(ctx workflow.Context, input *swf.CountPendingDecisionTasksInput) (*swf.PendingTaskCount, error)
	CountPendingDecisionTasksAsync(ctx workflow.Context, input *swf.CountPendingDecisionTasksInput) *SWFCountPendingDecisionTasksFuture

	DeprecateActivityType(ctx workflow.Context, input *swf.DeprecateActivityTypeInput) (*swf.DeprecateActivityTypeOutput, error)
	DeprecateActivityTypeAsync(ctx workflow.Context, input *swf.DeprecateActivityTypeInput) *SWFDeprecateActivityTypeFuture

	DeprecateDomain(ctx workflow.Context, input *swf.DeprecateDomainInput) (*swf.DeprecateDomainOutput, error)
	DeprecateDomainAsync(ctx workflow.Context, input *swf.DeprecateDomainInput) *SWFDeprecateDomainFuture

	DeprecateWorkflowType(ctx workflow.Context, input *swf.DeprecateWorkflowTypeInput) (*swf.DeprecateWorkflowTypeOutput, error)
	DeprecateWorkflowTypeAsync(ctx workflow.Context, input *swf.DeprecateWorkflowTypeInput) *SWFDeprecateWorkflowTypeFuture

	DescribeActivityType(ctx workflow.Context, input *swf.DescribeActivityTypeInput) (*swf.DescribeActivityTypeOutput, error)
	DescribeActivityTypeAsync(ctx workflow.Context, input *swf.DescribeActivityTypeInput) *SWFDescribeActivityTypeFuture

	DescribeDomain(ctx workflow.Context, input *swf.DescribeDomainInput) (*swf.DescribeDomainOutput, error)
	DescribeDomainAsync(ctx workflow.Context, input *swf.DescribeDomainInput) *SWFDescribeDomainFuture

	DescribeWorkflowExecution(ctx workflow.Context, input *swf.DescribeWorkflowExecutionInput) (*swf.DescribeWorkflowExecutionOutput, error)
	DescribeWorkflowExecutionAsync(ctx workflow.Context, input *swf.DescribeWorkflowExecutionInput) *SWFDescribeWorkflowExecutionFuture

	DescribeWorkflowType(ctx workflow.Context, input *swf.DescribeWorkflowTypeInput) (*swf.DescribeWorkflowTypeOutput, error)
	DescribeWorkflowTypeAsync(ctx workflow.Context, input *swf.DescribeWorkflowTypeInput) *SWFDescribeWorkflowTypeFuture

	GetWorkflowExecutionHistory(ctx workflow.Context, input *swf.GetWorkflowExecutionHistoryInput) (*swf.GetWorkflowExecutionHistoryOutput, error)
	GetWorkflowExecutionHistoryAsync(ctx workflow.Context, input *swf.GetWorkflowExecutionHistoryInput) *SWFGetWorkflowExecutionHistoryFuture

	ListActivityTypes(ctx workflow.Context, input *swf.ListActivityTypesInput) (*swf.ListActivityTypesOutput, error)
	ListActivityTypesAsync(ctx workflow.Context, input *swf.ListActivityTypesInput) *SWFListActivityTypesFuture

	ListClosedWorkflowExecutions(ctx workflow.Context, input *swf.ListClosedWorkflowExecutionsInput) (*swf.WorkflowExecutionInfos, error)
	ListClosedWorkflowExecutionsAsync(ctx workflow.Context, input *swf.ListClosedWorkflowExecutionsInput) *SWFListClosedWorkflowExecutionsFuture

	ListDomains(ctx workflow.Context, input *swf.ListDomainsInput) (*swf.ListDomainsOutput, error)
	ListDomainsAsync(ctx workflow.Context, input *swf.ListDomainsInput) *SWFListDomainsFuture

	ListOpenWorkflowExecutions(ctx workflow.Context, input *swf.ListOpenWorkflowExecutionsInput) (*swf.WorkflowExecutionInfos, error)
	ListOpenWorkflowExecutionsAsync(ctx workflow.Context, input *swf.ListOpenWorkflowExecutionsInput) *SWFListOpenWorkflowExecutionsFuture

	ListTagsForResource(ctx workflow.Context, input *swf.ListTagsForResourceInput) (*swf.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *swf.ListTagsForResourceInput) *SWFListTagsForResourceFuture

	ListWorkflowTypes(ctx workflow.Context, input *swf.ListWorkflowTypesInput) (*swf.ListWorkflowTypesOutput, error)
	ListWorkflowTypesAsync(ctx workflow.Context, input *swf.ListWorkflowTypesInput) *SWFListWorkflowTypesFuture

	PollForActivityTask(ctx workflow.Context, input *swf.PollForActivityTaskInput) (*swf.PollForActivityTaskOutput, error)
	PollForActivityTaskAsync(ctx workflow.Context, input *swf.PollForActivityTaskInput) *SWFPollForActivityTaskFuture

	PollForDecisionTask(ctx workflow.Context, input *swf.PollForDecisionTaskInput) (*swf.PollForDecisionTaskOutput, error)
	PollForDecisionTaskAsync(ctx workflow.Context, input *swf.PollForDecisionTaskInput) *SWFPollForDecisionTaskFuture

	RecordActivityTaskHeartbeat(ctx workflow.Context, input *swf.RecordActivityTaskHeartbeatInput) (*swf.RecordActivityTaskHeartbeatOutput, error)
	RecordActivityTaskHeartbeatAsync(ctx workflow.Context, input *swf.RecordActivityTaskHeartbeatInput) *SWFRecordActivityTaskHeartbeatFuture

	RegisterActivityType(ctx workflow.Context, input *swf.RegisterActivityTypeInput) (*swf.RegisterActivityTypeOutput, error)
	RegisterActivityTypeAsync(ctx workflow.Context, input *swf.RegisterActivityTypeInput) *SWFRegisterActivityTypeFuture

	RegisterDomain(ctx workflow.Context, input *swf.RegisterDomainInput) (*swf.RegisterDomainOutput, error)
	RegisterDomainAsync(ctx workflow.Context, input *swf.RegisterDomainInput) *SWFRegisterDomainFuture

	RegisterWorkflowType(ctx workflow.Context, input *swf.RegisterWorkflowTypeInput) (*swf.RegisterWorkflowTypeOutput, error)
	RegisterWorkflowTypeAsync(ctx workflow.Context, input *swf.RegisterWorkflowTypeInput) *SWFRegisterWorkflowTypeFuture

	RequestCancelWorkflowExecution(ctx workflow.Context, input *swf.RequestCancelWorkflowExecutionInput) (*swf.RequestCancelWorkflowExecutionOutput, error)
	RequestCancelWorkflowExecutionAsync(ctx workflow.Context, input *swf.RequestCancelWorkflowExecutionInput) *SWFRequestCancelWorkflowExecutionFuture

	RespondActivityTaskCanceled(ctx workflow.Context, input *swf.RespondActivityTaskCanceledInput) (*swf.RespondActivityTaskCanceledOutput, error)
	RespondActivityTaskCanceledAsync(ctx workflow.Context, input *swf.RespondActivityTaskCanceledInput) *SWFRespondActivityTaskCanceledFuture

	RespondActivityTaskCompleted(ctx workflow.Context, input *swf.RespondActivityTaskCompletedInput) (*swf.RespondActivityTaskCompletedOutput, error)
	RespondActivityTaskCompletedAsync(ctx workflow.Context, input *swf.RespondActivityTaskCompletedInput) *SWFRespondActivityTaskCompletedFuture

	RespondActivityTaskFailed(ctx workflow.Context, input *swf.RespondActivityTaskFailedInput) (*swf.RespondActivityTaskFailedOutput, error)
	RespondActivityTaskFailedAsync(ctx workflow.Context, input *swf.RespondActivityTaskFailedInput) *SWFRespondActivityTaskFailedFuture

	RespondDecisionTaskCompleted(ctx workflow.Context, input *swf.RespondDecisionTaskCompletedInput) (*swf.RespondDecisionTaskCompletedOutput, error)
	RespondDecisionTaskCompletedAsync(ctx workflow.Context, input *swf.RespondDecisionTaskCompletedInput) *SWFRespondDecisionTaskCompletedFuture

	SignalWorkflowExecution(ctx workflow.Context, input *swf.SignalWorkflowExecutionInput) (*swf.SignalWorkflowExecutionOutput, error)
	SignalWorkflowExecutionAsync(ctx workflow.Context, input *swf.SignalWorkflowExecutionInput) *SWFSignalWorkflowExecutionFuture

	StartWorkflowExecution(ctx workflow.Context, input *swf.StartWorkflowExecutionInput) (*swf.StartWorkflowExecutionOutput, error)
	StartWorkflowExecutionAsync(ctx workflow.Context, input *swf.StartWorkflowExecutionInput) *SWFStartWorkflowExecutionFuture

	TagResource(ctx workflow.Context, input *swf.TagResourceInput) (*swf.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *swf.TagResourceInput) *SWFTagResourceFuture

	TerminateWorkflowExecution(ctx workflow.Context, input *swf.TerminateWorkflowExecutionInput) (*swf.TerminateWorkflowExecutionOutput, error)
	TerminateWorkflowExecutionAsync(ctx workflow.Context, input *swf.TerminateWorkflowExecutionInput) *SWFTerminateWorkflowExecutionFuture

	UndeprecateActivityType(ctx workflow.Context, input *swf.UndeprecateActivityTypeInput) (*swf.UndeprecateActivityTypeOutput, error)
	UndeprecateActivityTypeAsync(ctx workflow.Context, input *swf.UndeprecateActivityTypeInput) *SWFUndeprecateActivityTypeFuture

	UndeprecateDomain(ctx workflow.Context, input *swf.UndeprecateDomainInput) (*swf.UndeprecateDomainOutput, error)
	UndeprecateDomainAsync(ctx workflow.Context, input *swf.UndeprecateDomainInput) *SWFUndeprecateDomainFuture

	UndeprecateWorkflowType(ctx workflow.Context, input *swf.UndeprecateWorkflowTypeInput) (*swf.UndeprecateWorkflowTypeOutput, error)
	UndeprecateWorkflowTypeAsync(ctx workflow.Context, input *swf.UndeprecateWorkflowTypeInput) *SWFUndeprecateWorkflowTypeFuture

	UntagResource(ctx workflow.Context, input *swf.UntagResourceInput) (*swf.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *swf.UntagResourceInput) *SWFUntagResourceFuture
}

type SWFStub struct{}

func NewSWFStub() SWFClient {
	return &SWFStub{}
}

type SWFCountClosedWorkflowExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFCountClosedWorkflowExecutionsFuture) Get(ctx workflow.Context) (*swf.WorkflowExecutionCount, error) {
	var output swf.WorkflowExecutionCount
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFCountOpenWorkflowExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFCountOpenWorkflowExecutionsFuture) Get(ctx workflow.Context) (*swf.WorkflowExecutionCount, error) {
	var output swf.WorkflowExecutionCount
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFCountPendingActivityTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFCountPendingActivityTasksFuture) Get(ctx workflow.Context) (*swf.PendingTaskCount, error) {
	var output swf.PendingTaskCount
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFCountPendingDecisionTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFCountPendingDecisionTasksFuture) Get(ctx workflow.Context) (*swf.PendingTaskCount, error) {
	var output swf.PendingTaskCount
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFDeprecateActivityTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFDeprecateActivityTypeFuture) Get(ctx workflow.Context) (*swf.DeprecateActivityTypeOutput, error) {
	var output swf.DeprecateActivityTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFDeprecateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFDeprecateDomainFuture) Get(ctx workflow.Context) (*swf.DeprecateDomainOutput, error) {
	var output swf.DeprecateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFDeprecateWorkflowTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFDeprecateWorkflowTypeFuture) Get(ctx workflow.Context) (*swf.DeprecateWorkflowTypeOutput, error) {
	var output swf.DeprecateWorkflowTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFDescribeActivityTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFDescribeActivityTypeFuture) Get(ctx workflow.Context) (*swf.DescribeActivityTypeOutput, error) {
	var output swf.DescribeActivityTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFDescribeDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFDescribeDomainFuture) Get(ctx workflow.Context) (*swf.DescribeDomainOutput, error) {
	var output swf.DescribeDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFDescribeWorkflowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFDescribeWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.DescribeWorkflowExecutionOutput, error) {
	var output swf.DescribeWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFDescribeWorkflowTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFDescribeWorkflowTypeFuture) Get(ctx workflow.Context) (*swf.DescribeWorkflowTypeOutput, error) {
	var output swf.DescribeWorkflowTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFGetWorkflowExecutionHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFGetWorkflowExecutionHistoryFuture) Get(ctx workflow.Context) (*swf.GetWorkflowExecutionHistoryOutput, error) {
	var output swf.GetWorkflowExecutionHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFListActivityTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFListActivityTypesFuture) Get(ctx workflow.Context) (*swf.ListActivityTypesOutput, error) {
	var output swf.ListActivityTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFListClosedWorkflowExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFListClosedWorkflowExecutionsFuture) Get(ctx workflow.Context) (*swf.WorkflowExecutionInfos, error) {
	var output swf.WorkflowExecutionInfos
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFListDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFListDomainsFuture) Get(ctx workflow.Context) (*swf.ListDomainsOutput, error) {
	var output swf.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFListOpenWorkflowExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFListOpenWorkflowExecutionsFuture) Get(ctx workflow.Context) (*swf.WorkflowExecutionInfos, error) {
	var output swf.WorkflowExecutionInfos
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFListTagsForResourceFuture) Get(ctx workflow.Context) (*swf.ListTagsForResourceOutput, error) {
	var output swf.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFListWorkflowTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFListWorkflowTypesFuture) Get(ctx workflow.Context) (*swf.ListWorkflowTypesOutput, error) {
	var output swf.ListWorkflowTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFPollForActivityTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFPollForActivityTaskFuture) Get(ctx workflow.Context) (*swf.PollForActivityTaskOutput, error) {
	var output swf.PollForActivityTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFPollForDecisionTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFPollForDecisionTaskFuture) Get(ctx workflow.Context) (*swf.PollForDecisionTaskOutput, error) {
	var output swf.PollForDecisionTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFRecordActivityTaskHeartbeatFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFRecordActivityTaskHeartbeatFuture) Get(ctx workflow.Context) (*swf.RecordActivityTaskHeartbeatOutput, error) {
	var output swf.RecordActivityTaskHeartbeatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFRegisterActivityTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFRegisterActivityTypeFuture) Get(ctx workflow.Context) (*swf.RegisterActivityTypeOutput, error) {
	var output swf.RegisterActivityTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFRegisterDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFRegisterDomainFuture) Get(ctx workflow.Context) (*swf.RegisterDomainOutput, error) {
	var output swf.RegisterDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFRegisterWorkflowTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFRegisterWorkflowTypeFuture) Get(ctx workflow.Context) (*swf.RegisterWorkflowTypeOutput, error) {
	var output swf.RegisterWorkflowTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFRequestCancelWorkflowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFRequestCancelWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.RequestCancelWorkflowExecutionOutput, error) {
	var output swf.RequestCancelWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFRespondActivityTaskCanceledFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFRespondActivityTaskCanceledFuture) Get(ctx workflow.Context) (*swf.RespondActivityTaskCanceledOutput, error) {
	var output swf.RespondActivityTaskCanceledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFRespondActivityTaskCompletedFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFRespondActivityTaskCompletedFuture) Get(ctx workflow.Context) (*swf.RespondActivityTaskCompletedOutput, error) {
	var output swf.RespondActivityTaskCompletedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFRespondActivityTaskFailedFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFRespondActivityTaskFailedFuture) Get(ctx workflow.Context) (*swf.RespondActivityTaskFailedOutput, error) {
	var output swf.RespondActivityTaskFailedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFRespondDecisionTaskCompletedFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFRespondDecisionTaskCompletedFuture) Get(ctx workflow.Context) (*swf.RespondDecisionTaskCompletedOutput, error) {
	var output swf.RespondDecisionTaskCompletedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFSignalWorkflowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFSignalWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.SignalWorkflowExecutionOutput, error) {
	var output swf.SignalWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFStartWorkflowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFStartWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.StartWorkflowExecutionOutput, error) {
	var output swf.StartWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFTagResourceFuture) Get(ctx workflow.Context) (*swf.TagResourceOutput, error) {
	var output swf.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFTerminateWorkflowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFTerminateWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.TerminateWorkflowExecutionOutput, error) {
	var output swf.TerminateWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFUndeprecateActivityTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFUndeprecateActivityTypeFuture) Get(ctx workflow.Context) (*swf.UndeprecateActivityTypeOutput, error) {
	var output swf.UndeprecateActivityTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFUndeprecateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFUndeprecateDomainFuture) Get(ctx workflow.Context) (*swf.UndeprecateDomainOutput, error) {
	var output swf.UndeprecateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFUndeprecateWorkflowTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFUndeprecateWorkflowTypeFuture) Get(ctx workflow.Context) (*swf.UndeprecateWorkflowTypeOutput, error) {
	var output swf.UndeprecateWorkflowTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SWFUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SWFUntagResourceFuture) Get(ctx workflow.Context) (*swf.UntagResourceOutput, error) {
	var output swf.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) CountClosedWorkflowExecutions(ctx workflow.Context, input *swf.CountClosedWorkflowExecutionsInput) (*swf.WorkflowExecutionCount, error) {
	var output swf.WorkflowExecutionCount
	err := workflow.ExecuteActivity(ctx, "aws.swf.CountClosedWorkflowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) CountClosedWorkflowExecutionsAsync(ctx workflow.Context, input *swf.CountClosedWorkflowExecutionsInput) *SWFCountClosedWorkflowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.CountClosedWorkflowExecutions", input)
	return &SWFCountClosedWorkflowExecutionsFuture{Future: future}
}

func (a *SWFStub) CountOpenWorkflowExecutions(ctx workflow.Context, input *swf.CountOpenWorkflowExecutionsInput) (*swf.WorkflowExecutionCount, error) {
	var output swf.WorkflowExecutionCount
	err := workflow.ExecuteActivity(ctx, "aws.swf.CountOpenWorkflowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) CountOpenWorkflowExecutionsAsync(ctx workflow.Context, input *swf.CountOpenWorkflowExecutionsInput) *SWFCountOpenWorkflowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.CountOpenWorkflowExecutions", input)
	return &SWFCountOpenWorkflowExecutionsFuture{Future: future}
}

func (a *SWFStub) CountPendingActivityTasks(ctx workflow.Context, input *swf.CountPendingActivityTasksInput) (*swf.PendingTaskCount, error) {
	var output swf.PendingTaskCount
	err := workflow.ExecuteActivity(ctx, "aws.swf.CountPendingActivityTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) CountPendingActivityTasksAsync(ctx workflow.Context, input *swf.CountPendingActivityTasksInput) *SWFCountPendingActivityTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.CountPendingActivityTasks", input)
	return &SWFCountPendingActivityTasksFuture{Future: future}
}

func (a *SWFStub) CountPendingDecisionTasks(ctx workflow.Context, input *swf.CountPendingDecisionTasksInput) (*swf.PendingTaskCount, error) {
	var output swf.PendingTaskCount
	err := workflow.ExecuteActivity(ctx, "aws.swf.CountPendingDecisionTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) CountPendingDecisionTasksAsync(ctx workflow.Context, input *swf.CountPendingDecisionTasksInput) *SWFCountPendingDecisionTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.CountPendingDecisionTasks", input)
	return &SWFCountPendingDecisionTasksFuture{Future: future}
}

func (a *SWFStub) DeprecateActivityType(ctx workflow.Context, input *swf.DeprecateActivityTypeInput) (*swf.DeprecateActivityTypeOutput, error) {
	var output swf.DeprecateActivityTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DeprecateActivityType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DeprecateActivityTypeAsync(ctx workflow.Context, input *swf.DeprecateActivityTypeInput) *SWFDeprecateActivityTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DeprecateActivityType", input)
	return &SWFDeprecateActivityTypeFuture{Future: future}
}

func (a *SWFStub) DeprecateDomain(ctx workflow.Context, input *swf.DeprecateDomainInput) (*swf.DeprecateDomainOutput, error) {
	var output swf.DeprecateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DeprecateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DeprecateDomainAsync(ctx workflow.Context, input *swf.DeprecateDomainInput) *SWFDeprecateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DeprecateDomain", input)
	return &SWFDeprecateDomainFuture{Future: future}
}

func (a *SWFStub) DeprecateWorkflowType(ctx workflow.Context, input *swf.DeprecateWorkflowTypeInput) (*swf.DeprecateWorkflowTypeOutput, error) {
	var output swf.DeprecateWorkflowTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DeprecateWorkflowType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DeprecateWorkflowTypeAsync(ctx workflow.Context, input *swf.DeprecateWorkflowTypeInput) *SWFDeprecateWorkflowTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DeprecateWorkflowType", input)
	return &SWFDeprecateWorkflowTypeFuture{Future: future}
}

func (a *SWFStub) DescribeActivityType(ctx workflow.Context, input *swf.DescribeActivityTypeInput) (*swf.DescribeActivityTypeOutput, error) {
	var output swf.DescribeActivityTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DescribeActivityType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DescribeActivityTypeAsync(ctx workflow.Context, input *swf.DescribeActivityTypeInput) *SWFDescribeActivityTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DescribeActivityType", input)
	return &SWFDescribeActivityTypeFuture{Future: future}
}

func (a *SWFStub) DescribeDomain(ctx workflow.Context, input *swf.DescribeDomainInput) (*swf.DescribeDomainOutput, error) {
	var output swf.DescribeDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DescribeDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DescribeDomainAsync(ctx workflow.Context, input *swf.DescribeDomainInput) *SWFDescribeDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DescribeDomain", input)
	return &SWFDescribeDomainFuture{Future: future}
}

func (a *SWFStub) DescribeWorkflowExecution(ctx workflow.Context, input *swf.DescribeWorkflowExecutionInput) (*swf.DescribeWorkflowExecutionOutput, error) {
	var output swf.DescribeWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DescribeWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DescribeWorkflowExecutionAsync(ctx workflow.Context, input *swf.DescribeWorkflowExecutionInput) *SWFDescribeWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DescribeWorkflowExecution", input)
	return &SWFDescribeWorkflowExecutionFuture{Future: future}
}

func (a *SWFStub) DescribeWorkflowType(ctx workflow.Context, input *swf.DescribeWorkflowTypeInput) (*swf.DescribeWorkflowTypeOutput, error) {
	var output swf.DescribeWorkflowTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.DescribeWorkflowType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) DescribeWorkflowTypeAsync(ctx workflow.Context, input *swf.DescribeWorkflowTypeInput) *SWFDescribeWorkflowTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.DescribeWorkflowType", input)
	return &SWFDescribeWorkflowTypeFuture{Future: future}
}

func (a *SWFStub) GetWorkflowExecutionHistory(ctx workflow.Context, input *swf.GetWorkflowExecutionHistoryInput) (*swf.GetWorkflowExecutionHistoryOutput, error) {
	var output swf.GetWorkflowExecutionHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.GetWorkflowExecutionHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) GetWorkflowExecutionHistoryAsync(ctx workflow.Context, input *swf.GetWorkflowExecutionHistoryInput) *SWFGetWorkflowExecutionHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.GetWorkflowExecutionHistory", input)
	return &SWFGetWorkflowExecutionHistoryFuture{Future: future}
}

func (a *SWFStub) ListActivityTypes(ctx workflow.Context, input *swf.ListActivityTypesInput) (*swf.ListActivityTypesOutput, error) {
	var output swf.ListActivityTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.ListActivityTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) ListActivityTypesAsync(ctx workflow.Context, input *swf.ListActivityTypesInput) *SWFListActivityTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.ListActivityTypes", input)
	return &SWFListActivityTypesFuture{Future: future}
}

func (a *SWFStub) ListClosedWorkflowExecutions(ctx workflow.Context, input *swf.ListClosedWorkflowExecutionsInput) (*swf.WorkflowExecutionInfos, error) {
	var output swf.WorkflowExecutionInfos
	err := workflow.ExecuteActivity(ctx, "aws.swf.ListClosedWorkflowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) ListClosedWorkflowExecutionsAsync(ctx workflow.Context, input *swf.ListClosedWorkflowExecutionsInput) *SWFListClosedWorkflowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.ListClosedWorkflowExecutions", input)
	return &SWFListClosedWorkflowExecutionsFuture{Future: future}
}

func (a *SWFStub) ListDomains(ctx workflow.Context, input *swf.ListDomainsInput) (*swf.ListDomainsOutput, error) {
	var output swf.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) ListDomainsAsync(ctx workflow.Context, input *swf.ListDomainsInput) *SWFListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.ListDomains", input)
	return &SWFListDomainsFuture{Future: future}
}

func (a *SWFStub) ListOpenWorkflowExecutions(ctx workflow.Context, input *swf.ListOpenWorkflowExecutionsInput) (*swf.WorkflowExecutionInfos, error) {
	var output swf.WorkflowExecutionInfos
	err := workflow.ExecuteActivity(ctx, "aws.swf.ListOpenWorkflowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) ListOpenWorkflowExecutionsAsync(ctx workflow.Context, input *swf.ListOpenWorkflowExecutionsInput) *SWFListOpenWorkflowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.ListOpenWorkflowExecutions", input)
	return &SWFListOpenWorkflowExecutionsFuture{Future: future}
}

func (a *SWFStub) ListTagsForResource(ctx workflow.Context, input *swf.ListTagsForResourceInput) (*swf.ListTagsForResourceOutput, error) {
	var output swf.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) ListTagsForResourceAsync(ctx workflow.Context, input *swf.ListTagsForResourceInput) *SWFListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.ListTagsForResource", input)
	return &SWFListTagsForResourceFuture{Future: future}
}

func (a *SWFStub) ListWorkflowTypes(ctx workflow.Context, input *swf.ListWorkflowTypesInput) (*swf.ListWorkflowTypesOutput, error) {
	var output swf.ListWorkflowTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.ListWorkflowTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) ListWorkflowTypesAsync(ctx workflow.Context, input *swf.ListWorkflowTypesInput) *SWFListWorkflowTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.ListWorkflowTypes", input)
	return &SWFListWorkflowTypesFuture{Future: future}
}

func (a *SWFStub) PollForActivityTask(ctx workflow.Context, input *swf.PollForActivityTaskInput) (*swf.PollForActivityTaskOutput, error) {
	var output swf.PollForActivityTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.PollForActivityTask", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) PollForActivityTaskAsync(ctx workflow.Context, input *swf.PollForActivityTaskInput) *SWFPollForActivityTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.PollForActivityTask", input)
	return &SWFPollForActivityTaskFuture{Future: future}
}

func (a *SWFStub) PollForDecisionTask(ctx workflow.Context, input *swf.PollForDecisionTaskInput) (*swf.PollForDecisionTaskOutput, error) {
	var output swf.PollForDecisionTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.PollForDecisionTask", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) PollForDecisionTaskAsync(ctx workflow.Context, input *swf.PollForDecisionTaskInput) *SWFPollForDecisionTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.PollForDecisionTask", input)
	return &SWFPollForDecisionTaskFuture{Future: future}
}

func (a *SWFStub) RecordActivityTaskHeartbeat(ctx workflow.Context, input *swf.RecordActivityTaskHeartbeatInput) (*swf.RecordActivityTaskHeartbeatOutput, error) {
	var output swf.RecordActivityTaskHeartbeatOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RecordActivityTaskHeartbeat", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RecordActivityTaskHeartbeatAsync(ctx workflow.Context, input *swf.RecordActivityTaskHeartbeatInput) *SWFRecordActivityTaskHeartbeatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RecordActivityTaskHeartbeat", input)
	return &SWFRecordActivityTaskHeartbeatFuture{Future: future}
}

func (a *SWFStub) RegisterActivityType(ctx workflow.Context, input *swf.RegisterActivityTypeInput) (*swf.RegisterActivityTypeOutput, error) {
	var output swf.RegisterActivityTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RegisterActivityType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RegisterActivityTypeAsync(ctx workflow.Context, input *swf.RegisterActivityTypeInput) *SWFRegisterActivityTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RegisterActivityType", input)
	return &SWFRegisterActivityTypeFuture{Future: future}
}

func (a *SWFStub) RegisterDomain(ctx workflow.Context, input *swf.RegisterDomainInput) (*swf.RegisterDomainOutput, error) {
	var output swf.RegisterDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RegisterDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RegisterDomainAsync(ctx workflow.Context, input *swf.RegisterDomainInput) *SWFRegisterDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RegisterDomain", input)
	return &SWFRegisterDomainFuture{Future: future}
}

func (a *SWFStub) RegisterWorkflowType(ctx workflow.Context, input *swf.RegisterWorkflowTypeInput) (*swf.RegisterWorkflowTypeOutput, error) {
	var output swf.RegisterWorkflowTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RegisterWorkflowType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RegisterWorkflowTypeAsync(ctx workflow.Context, input *swf.RegisterWorkflowTypeInput) *SWFRegisterWorkflowTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RegisterWorkflowType", input)
	return &SWFRegisterWorkflowTypeFuture{Future: future}
}

func (a *SWFStub) RequestCancelWorkflowExecution(ctx workflow.Context, input *swf.RequestCancelWorkflowExecutionInput) (*swf.RequestCancelWorkflowExecutionOutput, error) {
	var output swf.RequestCancelWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RequestCancelWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RequestCancelWorkflowExecutionAsync(ctx workflow.Context, input *swf.RequestCancelWorkflowExecutionInput) *SWFRequestCancelWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RequestCancelWorkflowExecution", input)
	return &SWFRequestCancelWorkflowExecutionFuture{Future: future}
}

func (a *SWFStub) RespondActivityTaskCanceled(ctx workflow.Context, input *swf.RespondActivityTaskCanceledInput) (*swf.RespondActivityTaskCanceledOutput, error) {
	var output swf.RespondActivityTaskCanceledOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RespondActivityTaskCanceled", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RespondActivityTaskCanceledAsync(ctx workflow.Context, input *swf.RespondActivityTaskCanceledInput) *SWFRespondActivityTaskCanceledFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RespondActivityTaskCanceled", input)
	return &SWFRespondActivityTaskCanceledFuture{Future: future}
}

func (a *SWFStub) RespondActivityTaskCompleted(ctx workflow.Context, input *swf.RespondActivityTaskCompletedInput) (*swf.RespondActivityTaskCompletedOutput, error) {
	var output swf.RespondActivityTaskCompletedOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RespondActivityTaskCompleted", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RespondActivityTaskCompletedAsync(ctx workflow.Context, input *swf.RespondActivityTaskCompletedInput) *SWFRespondActivityTaskCompletedFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RespondActivityTaskCompleted", input)
	return &SWFRespondActivityTaskCompletedFuture{Future: future}
}

func (a *SWFStub) RespondActivityTaskFailed(ctx workflow.Context, input *swf.RespondActivityTaskFailedInput) (*swf.RespondActivityTaskFailedOutput, error) {
	var output swf.RespondActivityTaskFailedOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RespondActivityTaskFailed", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RespondActivityTaskFailedAsync(ctx workflow.Context, input *swf.RespondActivityTaskFailedInput) *SWFRespondActivityTaskFailedFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RespondActivityTaskFailed", input)
	return &SWFRespondActivityTaskFailedFuture{Future: future}
}

func (a *SWFStub) RespondDecisionTaskCompleted(ctx workflow.Context, input *swf.RespondDecisionTaskCompletedInput) (*swf.RespondDecisionTaskCompletedOutput, error) {
	var output swf.RespondDecisionTaskCompletedOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.RespondDecisionTaskCompleted", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) RespondDecisionTaskCompletedAsync(ctx workflow.Context, input *swf.RespondDecisionTaskCompletedInput) *SWFRespondDecisionTaskCompletedFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.RespondDecisionTaskCompleted", input)
	return &SWFRespondDecisionTaskCompletedFuture{Future: future}
}

func (a *SWFStub) SignalWorkflowExecution(ctx workflow.Context, input *swf.SignalWorkflowExecutionInput) (*swf.SignalWorkflowExecutionOutput, error) {
	var output swf.SignalWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.SignalWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) SignalWorkflowExecutionAsync(ctx workflow.Context, input *swf.SignalWorkflowExecutionInput) *SWFSignalWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.SignalWorkflowExecution", input)
	return &SWFSignalWorkflowExecutionFuture{Future: future}
}

func (a *SWFStub) StartWorkflowExecution(ctx workflow.Context, input *swf.StartWorkflowExecutionInput) (*swf.StartWorkflowExecutionOutput, error) {
	var output swf.StartWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.StartWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) StartWorkflowExecutionAsync(ctx workflow.Context, input *swf.StartWorkflowExecutionInput) *SWFStartWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.StartWorkflowExecution", input)
	return &SWFStartWorkflowExecutionFuture{Future: future}
}

func (a *SWFStub) TagResource(ctx workflow.Context, input *swf.TagResourceInput) (*swf.TagResourceOutput, error) {
	var output swf.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) TagResourceAsync(ctx workflow.Context, input *swf.TagResourceInput) *SWFTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.TagResource", input)
	return &SWFTagResourceFuture{Future: future}
}

func (a *SWFStub) TerminateWorkflowExecution(ctx workflow.Context, input *swf.TerminateWorkflowExecutionInput) (*swf.TerminateWorkflowExecutionOutput, error) {
	var output swf.TerminateWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.TerminateWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) TerminateWorkflowExecutionAsync(ctx workflow.Context, input *swf.TerminateWorkflowExecutionInput) *SWFTerminateWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.TerminateWorkflowExecution", input)
	return &SWFTerminateWorkflowExecutionFuture{Future: future}
}

func (a *SWFStub) UndeprecateActivityType(ctx workflow.Context, input *swf.UndeprecateActivityTypeInput) (*swf.UndeprecateActivityTypeOutput, error) {
	var output swf.UndeprecateActivityTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.UndeprecateActivityType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) UndeprecateActivityTypeAsync(ctx workflow.Context, input *swf.UndeprecateActivityTypeInput) *SWFUndeprecateActivityTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.UndeprecateActivityType", input)
	return &SWFUndeprecateActivityTypeFuture{Future: future}
}

func (a *SWFStub) UndeprecateDomain(ctx workflow.Context, input *swf.UndeprecateDomainInput) (*swf.UndeprecateDomainOutput, error) {
	var output swf.UndeprecateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.UndeprecateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) UndeprecateDomainAsync(ctx workflow.Context, input *swf.UndeprecateDomainInput) *SWFUndeprecateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.UndeprecateDomain", input)
	return &SWFUndeprecateDomainFuture{Future: future}
}

func (a *SWFStub) UndeprecateWorkflowType(ctx workflow.Context, input *swf.UndeprecateWorkflowTypeInput) (*swf.UndeprecateWorkflowTypeOutput, error) {
	var output swf.UndeprecateWorkflowTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.UndeprecateWorkflowType", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) UndeprecateWorkflowTypeAsync(ctx workflow.Context, input *swf.UndeprecateWorkflowTypeInput) *SWFUndeprecateWorkflowTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.UndeprecateWorkflowType", input)
	return &SWFUndeprecateWorkflowTypeFuture{Future: future}
}

func (a *SWFStub) UntagResource(ctx workflow.Context, input *swf.UntagResourceInput) (*swf.UntagResourceOutput, error) {
	var output swf.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.swf.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *SWFStub) UntagResourceAsync(ctx workflow.Context, input *swf.UntagResourceInput) *SWFUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.swf.UntagResource", input)
	return &SWFUntagResourceFuture{Future: future}
}
