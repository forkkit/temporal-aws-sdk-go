// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/elasticbeanstalk"
	"go.temporal.io/sdk/workflow"
)

type ElasticBeanstalkClient interface {
	AbortEnvironmentUpdate(ctx workflow.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error)
	AbortEnvironmentUpdateAsync(ctx workflow.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput) *ElasticBeanstalkAbortEnvironmentUpdateFuture

	ApplyEnvironmentManagedAction(ctx workflow.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error)
	ApplyEnvironmentManagedActionAsync(ctx workflow.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput) *ElasticBeanstalkApplyEnvironmentManagedActionFuture

	AssociateEnvironmentOperationsRole(ctx workflow.Context, input *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput) (*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput, error)
	AssociateEnvironmentOperationsRoleAsync(ctx workflow.Context, input *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput) *ElasticBeanstalkAssociateEnvironmentOperationsRoleFuture

	CheckDNSAvailability(ctx workflow.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error)
	CheckDNSAvailabilityAsync(ctx workflow.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput) *ElasticBeanstalkCheckDNSAvailabilityFuture

	ComposeEnvironments(ctx workflow.Context, input *elasticbeanstalk.ComposeEnvironmentsInput) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error)
	ComposeEnvironmentsAsync(ctx workflow.Context, input *elasticbeanstalk.ComposeEnvironmentsInput) *ElasticBeanstalkComposeEnvironmentsFuture

	CreateApplication(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationInput) (*elasticbeanstalk.ApplicationDescriptionMessage, error)
	CreateApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationInput) *ElasticBeanstalkCreateApplicationFuture

	CreateApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationVersionInput) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error)
	CreateApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationVersionInput) *ElasticBeanstalkCreateApplicationVersionFuture

	CreateConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput) (*elasticbeanstalk.ConfigurationSettingsDescription, error)
	CreateConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput) *ElasticBeanstalkCreateConfigurationTemplateFuture

	CreateEnvironment(ctx workflow.Context, input *elasticbeanstalk.CreateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error)
	CreateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.CreateEnvironmentInput) *ElasticBeanstalkCreateEnvironmentFuture

	CreatePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.CreatePlatformVersionInput) (*elasticbeanstalk.CreatePlatformVersionOutput, error)
	CreatePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.CreatePlatformVersionInput) *ElasticBeanstalkCreatePlatformVersionFuture

	CreateStorageLocation(ctx workflow.Context, input *elasticbeanstalk.CreateStorageLocationInput) (*elasticbeanstalk.CreateStorageLocationOutput, error)
	CreateStorageLocationAsync(ctx workflow.Context, input *elasticbeanstalk.CreateStorageLocationInput) *ElasticBeanstalkCreateStorageLocationFuture

	DeleteApplication(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationInput) (*elasticbeanstalk.DeleteApplicationOutput, error)
	DeleteApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationInput) *ElasticBeanstalkDeleteApplicationFuture

	DeleteApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationVersionInput) (*elasticbeanstalk.DeleteApplicationVersionOutput, error)
	DeleteApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationVersionInput) *ElasticBeanstalkDeleteApplicationVersionFuture

	DeleteConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error)
	DeleteConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput) *ElasticBeanstalkDeleteConfigurationTemplateFuture

	DeleteEnvironmentConfiguration(ctx workflow.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error)
	DeleteEnvironmentConfigurationAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput) *ElasticBeanstalkDeleteEnvironmentConfigurationFuture

	DeletePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.DeletePlatformVersionInput) (*elasticbeanstalk.DeletePlatformVersionOutput, error)
	DeletePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DeletePlatformVersionInput) *ElasticBeanstalkDeletePlatformVersionFuture

	DescribeAccountAttributes(ctx workflow.Context, input *elasticbeanstalk.DescribeAccountAttributesInput) (*elasticbeanstalk.DescribeAccountAttributesOutput, error)
	DescribeAccountAttributesAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeAccountAttributesInput) *ElasticBeanstalkDescribeAccountAttributesFuture

	DescribeApplicationVersions(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error)
	DescribeApplicationVersionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput) *ElasticBeanstalkDescribeApplicationVersionsFuture

	DescribeApplications(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationsInput) (*elasticbeanstalk.DescribeApplicationsOutput, error)
	DescribeApplicationsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationsInput) *ElasticBeanstalkDescribeApplicationsFuture

	DescribeConfigurationOptions(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error)
	DescribeConfigurationOptionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput) *ElasticBeanstalkDescribeConfigurationOptionsFuture

	DescribeConfigurationSettings(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error)
	DescribeConfigurationSettingsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput) *ElasticBeanstalkDescribeConfigurationSettingsFuture

	DescribeEnvironmentHealth(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error)
	DescribeEnvironmentHealthAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput) *ElasticBeanstalkDescribeEnvironmentHealthFuture

	DescribeEnvironmentManagedActionHistory(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error)
	DescribeEnvironmentManagedActionHistoryAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput) *ElasticBeanstalkDescribeEnvironmentManagedActionHistoryFuture

	DescribeEnvironmentManagedActions(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error)
	DescribeEnvironmentManagedActionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput) *ElasticBeanstalkDescribeEnvironmentManagedActionsFuture

	DescribeEnvironmentResources(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error)
	DescribeEnvironmentResourcesAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput) *ElasticBeanstalkDescribeEnvironmentResourcesFuture

	DescribeEnvironments(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error)
	DescribeEnvironmentsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *ElasticBeanstalkDescribeEnvironmentsFuture

	DescribeEvents(ctx workflow.Context, input *elasticbeanstalk.DescribeEventsInput) (*elasticbeanstalk.DescribeEventsOutput, error)
	DescribeEventsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEventsInput) *ElasticBeanstalkDescribeEventsFuture

	DescribeInstancesHealth(ctx workflow.Context, input *elasticbeanstalk.DescribeInstancesHealthInput) (*elasticbeanstalk.DescribeInstancesHealthOutput, error)
	DescribeInstancesHealthAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeInstancesHealthInput) *ElasticBeanstalkDescribeInstancesHealthFuture

	DescribePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.DescribePlatformVersionInput) (*elasticbeanstalk.DescribePlatformVersionOutput, error)
	DescribePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DescribePlatformVersionInput) *ElasticBeanstalkDescribePlatformVersionFuture

	DisassociateEnvironmentOperationsRole(ctx workflow.Context, input *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput) (*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput, error)
	DisassociateEnvironmentOperationsRoleAsync(ctx workflow.Context, input *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput) *ElasticBeanstalkDisassociateEnvironmentOperationsRoleFuture

	ListAvailableSolutionStacks(ctx workflow.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error)
	ListAvailableSolutionStacksAsync(ctx workflow.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput) *ElasticBeanstalkListAvailableSolutionStacksFuture

	ListPlatformBranches(ctx workflow.Context, input *elasticbeanstalk.ListPlatformBranchesInput) (*elasticbeanstalk.ListPlatformBranchesOutput, error)
	ListPlatformBranchesAsync(ctx workflow.Context, input *elasticbeanstalk.ListPlatformBranchesInput) *ElasticBeanstalkListPlatformBranchesFuture

	ListPlatformVersions(ctx workflow.Context, input *elasticbeanstalk.ListPlatformVersionsInput) (*elasticbeanstalk.ListPlatformVersionsOutput, error)
	ListPlatformVersionsAsync(ctx workflow.Context, input *elasticbeanstalk.ListPlatformVersionsInput) *ElasticBeanstalkListPlatformVersionsFuture

	ListTagsForResource(ctx workflow.Context, input *elasticbeanstalk.ListTagsForResourceInput) (*elasticbeanstalk.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *elasticbeanstalk.ListTagsForResourceInput) *ElasticBeanstalkListTagsForResourceFuture

	RebuildEnvironment(ctx workflow.Context, input *elasticbeanstalk.RebuildEnvironmentInput) (*elasticbeanstalk.RebuildEnvironmentOutput, error)
	RebuildEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.RebuildEnvironmentInput) *ElasticBeanstalkRebuildEnvironmentFuture

	RequestEnvironmentInfo(ctx workflow.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error)
	RequestEnvironmentInfoAsync(ctx workflow.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput) *ElasticBeanstalkRequestEnvironmentInfoFuture

	RestartAppServer(ctx workflow.Context, input *elasticbeanstalk.RestartAppServerInput) (*elasticbeanstalk.RestartAppServerOutput, error)
	RestartAppServerAsync(ctx workflow.Context, input *elasticbeanstalk.RestartAppServerInput) *ElasticBeanstalkRestartAppServerFuture

	RetrieveEnvironmentInfo(ctx workflow.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error)
	RetrieveEnvironmentInfoAsync(ctx workflow.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput) *ElasticBeanstalkRetrieveEnvironmentInfoFuture

	SwapEnvironmentCNAMEs(ctx workflow.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error)
	SwapEnvironmentCNAMEsAsync(ctx workflow.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput) *ElasticBeanstalkSwapEnvironmentCNAMEsFuture

	TerminateEnvironment(ctx workflow.Context, input *elasticbeanstalk.TerminateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error)
	TerminateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.TerminateEnvironmentInput) *ElasticBeanstalkTerminateEnvironmentFuture

	UpdateApplication(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationInput) (*elasticbeanstalk.ApplicationDescriptionMessage, error)
	UpdateApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationInput) *ElasticBeanstalkUpdateApplicationFuture

	UpdateApplicationResourceLifecycle(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error)
	UpdateApplicationResourceLifecycleAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput) *ElasticBeanstalkUpdateApplicationResourceLifecycleFuture

	UpdateApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationVersionInput) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error)
	UpdateApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationVersionInput) *ElasticBeanstalkUpdateApplicationVersionFuture

	UpdateConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput) (*elasticbeanstalk.ConfigurationSettingsDescription, error)
	UpdateConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput) *ElasticBeanstalkUpdateConfigurationTemplateFuture

	UpdateEnvironment(ctx workflow.Context, input *elasticbeanstalk.UpdateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error)
	UpdateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateEnvironmentInput) *ElasticBeanstalkUpdateEnvironmentFuture

	UpdateTagsForResource(ctx workflow.Context, input *elasticbeanstalk.UpdateTagsForResourceInput) (*elasticbeanstalk.UpdateTagsForResourceOutput, error)
	UpdateTagsForResourceAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateTagsForResourceInput) *ElasticBeanstalkUpdateTagsForResourceFuture

	ValidateConfigurationSettings(ctx workflow.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error)
	ValidateConfigurationSettingsAsync(ctx workflow.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput) *ElasticBeanstalkValidateConfigurationSettingsFuture

	WaitUntilEnvironmentExists(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error
	WaitUntilEnvironmentExistsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *VoidFuture

	WaitUntilEnvironmentTerminated(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error
	WaitUntilEnvironmentTerminatedAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *VoidFuture

	WaitUntilEnvironmentUpdated(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error
	WaitUntilEnvironmentUpdatedAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *VoidFuture
}

type ElasticBeanstalkStub struct{}

func NewElasticBeanstalkStub() ElasticBeanstalkClient {
	return &ElasticBeanstalkStub{}
}

type ElasticBeanstalkAbortEnvironmentUpdateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkAbortEnvironmentUpdateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error) {
	var output elasticbeanstalk.AbortEnvironmentUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkApplyEnvironmentManagedActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkApplyEnvironmentManagedActionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error) {
	var output elasticbeanstalk.ApplyEnvironmentManagedActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkAssociateEnvironmentOperationsRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkAssociateEnvironmentOperationsRoleFuture) Get(ctx workflow.Context) (*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCheckDNSAvailabilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCheckDNSAvailabilityFuture) Get(ctx workflow.Context) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error) {
	var output elasticbeanstalk.CheckDNSAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkComposeEnvironmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkComposeEnvironmentsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCreateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCreateApplicationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCreateApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCreateApplicationVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCreateConfigurationTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCreateConfigurationTemplateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCreateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCreateEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCreatePlatformVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCreatePlatformVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.CreatePlatformVersionOutput, error) {
	var output elasticbeanstalk.CreatePlatformVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCreateStorageLocationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCreateStorageLocationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.CreateStorageLocationOutput, error) {
	var output elasticbeanstalk.CreateStorageLocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDeleteApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDeleteApplicationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteApplicationOutput, error) {
	var output elasticbeanstalk.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDeleteApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDeleteApplicationVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteApplicationVersionOutput, error) {
	var output elasticbeanstalk.DeleteApplicationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDeleteConfigurationTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDeleteConfigurationTemplateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error) {
	var output elasticbeanstalk.DeleteConfigurationTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDeleteEnvironmentConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDeleteEnvironmentConfigurationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error) {
	var output elasticbeanstalk.DeleteEnvironmentConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDeletePlatformVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDeletePlatformVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeletePlatformVersionOutput, error) {
	var output elasticbeanstalk.DeletePlatformVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeAccountAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeAccountAttributesFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeAccountAttributesOutput, error) {
	var output elasticbeanstalk.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeApplicationVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeApplicationVersionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeApplicationsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeApplicationsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeConfigurationOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeConfigurationOptionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeConfigurationSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeConfigurationSettingsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeEnvironmentHealthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeEnvironmentHealthFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeEnvironmentManagedActionHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeEnvironmentManagedActionHistoryFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeEnvironmentManagedActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeEnvironmentManagedActionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeEnvironmentResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeEnvironmentResourcesFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeEnvironmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeEnvironmentsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeEventsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEventsOutput, error) {
	var output elasticbeanstalk.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeInstancesHealthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeInstancesHealthFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeInstancesHealthOutput, error) {
	var output elasticbeanstalk.DescribeInstancesHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribePlatformVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribePlatformVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribePlatformVersionOutput, error) {
	var output elasticbeanstalk.DescribePlatformVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDisassociateEnvironmentOperationsRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDisassociateEnvironmentOperationsRoleFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkListAvailableSolutionStacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkListAvailableSolutionStacksFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error) {
	var output elasticbeanstalk.ListAvailableSolutionStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkListPlatformBranchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkListPlatformBranchesFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListPlatformBranchesOutput, error) {
	var output elasticbeanstalk.ListPlatformBranchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkListPlatformVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkListPlatformVersionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListPlatformVersionsOutput, error) {
	var output elasticbeanstalk.ListPlatformVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkListTagsForResourceFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListTagsForResourceOutput, error) {
	var output elasticbeanstalk.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkRebuildEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkRebuildEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RebuildEnvironmentOutput, error) {
	var output elasticbeanstalk.RebuildEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkRequestEnvironmentInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkRequestEnvironmentInfoFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RequestEnvironmentInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkRestartAppServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkRestartAppServerFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RestartAppServerOutput, error) {
	var output elasticbeanstalk.RestartAppServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkRetrieveEnvironmentInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkRetrieveEnvironmentInfoFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RetrieveEnvironmentInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkSwapEnvironmentCNAMEsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkSwapEnvironmentCNAMEsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error) {
	var output elasticbeanstalk.SwapEnvironmentCNAMEsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkTerminateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkTerminateEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkUpdateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkUpdateApplicationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkUpdateApplicationResourceLifecycleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkUpdateApplicationResourceLifecycleFuture) Get(ctx workflow.Context) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error) {
	var output elasticbeanstalk.UpdateApplicationResourceLifecycleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkUpdateApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkUpdateApplicationVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkUpdateConfigurationTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkUpdateConfigurationTemplateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkUpdateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkUpdateEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkUpdateTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkUpdateTagsForResourceFuture) Get(ctx workflow.Context) (*elasticbeanstalk.UpdateTagsForResourceOutput, error) {
	var output elasticbeanstalk.UpdateTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkValidateConfigurationSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkValidateConfigurationSettingsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.ValidateConfigurationSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) AbortEnvironmentUpdate(ctx workflow.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error) {
	var output elasticbeanstalk.AbortEnvironmentUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.AbortEnvironmentUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) AbortEnvironmentUpdateAsync(ctx workflow.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput) *ElasticBeanstalkAbortEnvironmentUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.AbortEnvironmentUpdate", input)
	return &ElasticBeanstalkAbortEnvironmentUpdateFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ApplyEnvironmentManagedAction(ctx workflow.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error) {
	var output elasticbeanstalk.ApplyEnvironmentManagedActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ApplyEnvironmentManagedAction", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ApplyEnvironmentManagedActionAsync(ctx workflow.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput) *ElasticBeanstalkApplyEnvironmentManagedActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ApplyEnvironmentManagedAction", input)
	return &ElasticBeanstalkApplyEnvironmentManagedActionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) AssociateEnvironmentOperationsRole(ctx workflow.Context, input *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput) (*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.AssociateEnvironmentOperationsRole", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) AssociateEnvironmentOperationsRoleAsync(ctx workflow.Context, input *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput) *ElasticBeanstalkAssociateEnvironmentOperationsRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.AssociateEnvironmentOperationsRole", input)
	return &ElasticBeanstalkAssociateEnvironmentOperationsRoleFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CheckDNSAvailability(ctx workflow.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error) {
	var output elasticbeanstalk.CheckDNSAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CheckDNSAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CheckDNSAvailabilityAsync(ctx workflow.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput) *ElasticBeanstalkCheckDNSAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CheckDNSAvailability", input)
	return &ElasticBeanstalkCheckDNSAvailabilityFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ComposeEnvironments(ctx workflow.Context, input *elasticbeanstalk.ComposeEnvironmentsInput) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ComposeEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ComposeEnvironmentsAsync(ctx workflow.Context, input *elasticbeanstalk.ComposeEnvironmentsInput) *ElasticBeanstalkComposeEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ComposeEnvironments", input)
	return &ElasticBeanstalkComposeEnvironmentsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CreateApplication(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationInput) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CreateApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationInput) *ElasticBeanstalkCreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateApplication", input)
	return &ElasticBeanstalkCreateApplicationFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CreateApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationVersionInput) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CreateApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationVersionInput) *ElasticBeanstalkCreateApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateApplicationVersion", input)
	return &ElasticBeanstalkCreateApplicationVersionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CreateConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateConfigurationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CreateConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput) *ElasticBeanstalkCreateConfigurationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateConfigurationTemplate", input)
	return &ElasticBeanstalkCreateConfigurationTemplateFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CreateEnvironment(ctx workflow.Context, input *elasticbeanstalk.CreateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CreateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.CreateEnvironmentInput) *ElasticBeanstalkCreateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateEnvironment", input)
	return &ElasticBeanstalkCreateEnvironmentFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CreatePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.CreatePlatformVersionInput) (*elasticbeanstalk.CreatePlatformVersionOutput, error) {
	var output elasticbeanstalk.CreatePlatformVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreatePlatformVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CreatePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.CreatePlatformVersionInput) *ElasticBeanstalkCreatePlatformVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreatePlatformVersion", input)
	return &ElasticBeanstalkCreatePlatformVersionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CreateStorageLocation(ctx workflow.Context, input *elasticbeanstalk.CreateStorageLocationInput) (*elasticbeanstalk.CreateStorageLocationOutput, error) {
	var output elasticbeanstalk.CreateStorageLocationOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateStorageLocation", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CreateStorageLocationAsync(ctx workflow.Context, input *elasticbeanstalk.CreateStorageLocationInput) *ElasticBeanstalkCreateStorageLocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateStorageLocation", input)
	return &ElasticBeanstalkCreateStorageLocationFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DeleteApplication(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationInput) (*elasticbeanstalk.DeleteApplicationOutput, error) {
	var output elasticbeanstalk.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DeleteApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationInput) *ElasticBeanstalkDeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteApplication", input)
	return &ElasticBeanstalkDeleteApplicationFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DeleteApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationVersionInput) (*elasticbeanstalk.DeleteApplicationVersionOutput, error) {
	var output elasticbeanstalk.DeleteApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DeleteApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationVersionInput) *ElasticBeanstalkDeleteApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteApplicationVersion", input)
	return &ElasticBeanstalkDeleteApplicationVersionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DeleteConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error) {
	var output elasticbeanstalk.DeleteConfigurationTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteConfigurationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DeleteConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput) *ElasticBeanstalkDeleteConfigurationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteConfigurationTemplate", input)
	return &ElasticBeanstalkDeleteConfigurationTemplateFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DeleteEnvironmentConfiguration(ctx workflow.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error) {
	var output elasticbeanstalk.DeleteEnvironmentConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteEnvironmentConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DeleteEnvironmentConfigurationAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput) *ElasticBeanstalkDeleteEnvironmentConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteEnvironmentConfiguration", input)
	return &ElasticBeanstalkDeleteEnvironmentConfigurationFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DeletePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.DeletePlatformVersionInput) (*elasticbeanstalk.DeletePlatformVersionOutput, error) {
	var output elasticbeanstalk.DeletePlatformVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeletePlatformVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DeletePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DeletePlatformVersionInput) *ElasticBeanstalkDeletePlatformVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeletePlatformVersion", input)
	return &ElasticBeanstalkDeletePlatformVersionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeAccountAttributes(ctx workflow.Context, input *elasticbeanstalk.DescribeAccountAttributesInput) (*elasticbeanstalk.DescribeAccountAttributesOutput, error) {
	var output elasticbeanstalk.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeAccountAttributesAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeAccountAttributesInput) *ElasticBeanstalkDescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeAccountAttributes", input)
	return &ElasticBeanstalkDescribeAccountAttributesFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeApplicationVersions(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeApplicationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeApplicationVersionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput) *ElasticBeanstalkDescribeApplicationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeApplicationVersions", input)
	return &ElasticBeanstalkDescribeApplicationVersionsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeApplications(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationsInput) (*elasticbeanstalk.DescribeApplicationsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeApplicationsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationsInput) *ElasticBeanstalkDescribeApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeApplications", input)
	return &ElasticBeanstalkDescribeApplicationsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeConfigurationOptions(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeConfigurationOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeConfigurationOptionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput) *ElasticBeanstalkDescribeConfigurationOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeConfigurationOptions", input)
	return &ElasticBeanstalkDescribeConfigurationOptionsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeConfigurationSettings(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeConfigurationSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeConfigurationSettingsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput) *ElasticBeanstalkDescribeConfigurationSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeConfigurationSettings", input)
	return &ElasticBeanstalkDescribeConfigurationSettingsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentHealth(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentHealthAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput) *ElasticBeanstalkDescribeEnvironmentHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentHealth", input)
	return &ElasticBeanstalkDescribeEnvironmentHealthFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentManagedActionHistory(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentManagedActionHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentManagedActionHistoryAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput) *ElasticBeanstalkDescribeEnvironmentManagedActionHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentManagedActionHistory", input)
	return &ElasticBeanstalkDescribeEnvironmentManagedActionHistoryFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentManagedActions(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentManagedActions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentManagedActionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput) *ElasticBeanstalkDescribeEnvironmentManagedActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentManagedActions", input)
	return &ElasticBeanstalkDescribeEnvironmentManagedActionsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentResources(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentResources", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentResourcesAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput) *ElasticBeanstalkDescribeEnvironmentResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentResources", input)
	return &ElasticBeanstalkDescribeEnvironmentResourcesFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeEnvironments(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *ElasticBeanstalkDescribeEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironments", input)
	return &ElasticBeanstalkDescribeEnvironmentsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeEvents(ctx workflow.Context, input *elasticbeanstalk.DescribeEventsInput) (*elasticbeanstalk.DescribeEventsOutput, error) {
	var output elasticbeanstalk.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeEventsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEventsInput) *ElasticBeanstalkDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEvents", input)
	return &ElasticBeanstalkDescribeEventsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeInstancesHealth(ctx workflow.Context, input *elasticbeanstalk.DescribeInstancesHealthInput) (*elasticbeanstalk.DescribeInstancesHealthOutput, error) {
	var output elasticbeanstalk.DescribeInstancesHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeInstancesHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeInstancesHealthAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeInstancesHealthInput) *ElasticBeanstalkDescribeInstancesHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeInstancesHealth", input)
	return &ElasticBeanstalkDescribeInstancesHealthFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.DescribePlatformVersionInput) (*elasticbeanstalk.DescribePlatformVersionOutput, error) {
	var output elasticbeanstalk.DescribePlatformVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribePlatformVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DescribePlatformVersionInput) *ElasticBeanstalkDescribePlatformVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribePlatformVersion", input)
	return &ElasticBeanstalkDescribePlatformVersionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DisassociateEnvironmentOperationsRole(ctx workflow.Context, input *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput) (*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DisassociateEnvironmentOperationsRole", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DisassociateEnvironmentOperationsRoleAsync(ctx workflow.Context, input *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput) *ElasticBeanstalkDisassociateEnvironmentOperationsRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DisassociateEnvironmentOperationsRole", input)
	return &ElasticBeanstalkDisassociateEnvironmentOperationsRoleFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ListAvailableSolutionStacks(ctx workflow.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error) {
	var output elasticbeanstalk.ListAvailableSolutionStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListAvailableSolutionStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ListAvailableSolutionStacksAsync(ctx workflow.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput) *ElasticBeanstalkListAvailableSolutionStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListAvailableSolutionStacks", input)
	return &ElasticBeanstalkListAvailableSolutionStacksFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ListPlatformBranches(ctx workflow.Context, input *elasticbeanstalk.ListPlatformBranchesInput) (*elasticbeanstalk.ListPlatformBranchesOutput, error) {
	var output elasticbeanstalk.ListPlatformBranchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListPlatformBranches", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ListPlatformBranchesAsync(ctx workflow.Context, input *elasticbeanstalk.ListPlatformBranchesInput) *ElasticBeanstalkListPlatformBranchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListPlatformBranches", input)
	return &ElasticBeanstalkListPlatformBranchesFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ListPlatformVersions(ctx workflow.Context, input *elasticbeanstalk.ListPlatformVersionsInput) (*elasticbeanstalk.ListPlatformVersionsOutput, error) {
	var output elasticbeanstalk.ListPlatformVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListPlatformVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ListPlatformVersionsAsync(ctx workflow.Context, input *elasticbeanstalk.ListPlatformVersionsInput) *ElasticBeanstalkListPlatformVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListPlatformVersions", input)
	return &ElasticBeanstalkListPlatformVersionsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ListTagsForResource(ctx workflow.Context, input *elasticbeanstalk.ListTagsForResourceInput) (*elasticbeanstalk.ListTagsForResourceOutput, error) {
	var output elasticbeanstalk.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ListTagsForResourceAsync(ctx workflow.Context, input *elasticbeanstalk.ListTagsForResourceInput) *ElasticBeanstalkListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListTagsForResource", input)
	return &ElasticBeanstalkListTagsForResourceFuture{Future: future}
}

func (a *ElasticBeanstalkStub) RebuildEnvironment(ctx workflow.Context, input *elasticbeanstalk.RebuildEnvironmentInput) (*elasticbeanstalk.RebuildEnvironmentOutput, error) {
	var output elasticbeanstalk.RebuildEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RebuildEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) RebuildEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.RebuildEnvironmentInput) *ElasticBeanstalkRebuildEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RebuildEnvironment", input)
	return &ElasticBeanstalkRebuildEnvironmentFuture{Future: future}
}

func (a *ElasticBeanstalkStub) RequestEnvironmentInfo(ctx workflow.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RequestEnvironmentInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RequestEnvironmentInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) RequestEnvironmentInfoAsync(ctx workflow.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput) *ElasticBeanstalkRequestEnvironmentInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RequestEnvironmentInfo", input)
	return &ElasticBeanstalkRequestEnvironmentInfoFuture{Future: future}
}

func (a *ElasticBeanstalkStub) RestartAppServer(ctx workflow.Context, input *elasticbeanstalk.RestartAppServerInput) (*elasticbeanstalk.RestartAppServerOutput, error) {
	var output elasticbeanstalk.RestartAppServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RestartAppServer", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) RestartAppServerAsync(ctx workflow.Context, input *elasticbeanstalk.RestartAppServerInput) *ElasticBeanstalkRestartAppServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RestartAppServer", input)
	return &ElasticBeanstalkRestartAppServerFuture{Future: future}
}

func (a *ElasticBeanstalkStub) RetrieveEnvironmentInfo(ctx workflow.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RetrieveEnvironmentInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RetrieveEnvironmentInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) RetrieveEnvironmentInfoAsync(ctx workflow.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput) *ElasticBeanstalkRetrieveEnvironmentInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RetrieveEnvironmentInfo", input)
	return &ElasticBeanstalkRetrieveEnvironmentInfoFuture{Future: future}
}

func (a *ElasticBeanstalkStub) SwapEnvironmentCNAMEs(ctx workflow.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error) {
	var output elasticbeanstalk.SwapEnvironmentCNAMEsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.SwapEnvironmentCNAMEs", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) SwapEnvironmentCNAMEsAsync(ctx workflow.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput) *ElasticBeanstalkSwapEnvironmentCNAMEsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.SwapEnvironmentCNAMEs", input)
	return &ElasticBeanstalkSwapEnvironmentCNAMEsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) TerminateEnvironment(ctx workflow.Context, input *elasticbeanstalk.TerminateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.TerminateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) TerminateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.TerminateEnvironmentInput) *ElasticBeanstalkTerminateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.TerminateEnvironment", input)
	return &ElasticBeanstalkTerminateEnvironmentFuture{Future: future}
}

func (a *ElasticBeanstalkStub) UpdateApplication(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationInput) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) UpdateApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationInput) *ElasticBeanstalkUpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateApplication", input)
	return &ElasticBeanstalkUpdateApplicationFuture{Future: future}
}

func (a *ElasticBeanstalkStub) UpdateApplicationResourceLifecycle(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error) {
	var output elasticbeanstalk.UpdateApplicationResourceLifecycleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateApplicationResourceLifecycle", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) UpdateApplicationResourceLifecycleAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput) *ElasticBeanstalkUpdateApplicationResourceLifecycleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateApplicationResourceLifecycle", input)
	return &ElasticBeanstalkUpdateApplicationResourceLifecycleFuture{Future: future}
}

func (a *ElasticBeanstalkStub) UpdateApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationVersionInput) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) UpdateApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationVersionInput) *ElasticBeanstalkUpdateApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateApplicationVersion", input)
	return &ElasticBeanstalkUpdateApplicationVersionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) UpdateConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateConfigurationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) UpdateConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput) *ElasticBeanstalkUpdateConfigurationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateConfigurationTemplate", input)
	return &ElasticBeanstalkUpdateConfigurationTemplateFuture{Future: future}
}

func (a *ElasticBeanstalkStub) UpdateEnvironment(ctx workflow.Context, input *elasticbeanstalk.UpdateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) UpdateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateEnvironmentInput) *ElasticBeanstalkUpdateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateEnvironment", input)
	return &ElasticBeanstalkUpdateEnvironmentFuture{Future: future}
}

func (a *ElasticBeanstalkStub) UpdateTagsForResource(ctx workflow.Context, input *elasticbeanstalk.UpdateTagsForResourceInput) (*elasticbeanstalk.UpdateTagsForResourceOutput, error) {
	var output elasticbeanstalk.UpdateTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) UpdateTagsForResourceAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateTagsForResourceInput) *ElasticBeanstalkUpdateTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateTagsForResource", input)
	return &ElasticBeanstalkUpdateTagsForResourceFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ValidateConfigurationSettings(ctx workflow.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.ValidateConfigurationSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ValidateConfigurationSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ValidateConfigurationSettingsAsync(ctx workflow.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput) *ElasticBeanstalkValidateConfigurationSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ValidateConfigurationSettings", input)
	return &ElasticBeanstalkValidateConfigurationSettingsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) WaitUntilEnvironmentExists(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.WaitUntilEnvironmentExists", input).Get(ctx, nil)
}

func (a *ElasticBeanstalkStub) WaitUntilEnvironmentExistsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.WaitUntilEnvironmentExists", input)
	return NewVoidFuture(future)
}

func (a *ElasticBeanstalkStub) WaitUntilEnvironmentTerminated(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.WaitUntilEnvironmentTerminated", input).Get(ctx, nil)
}

func (a *ElasticBeanstalkStub) WaitUntilEnvironmentTerminatedAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.WaitUntilEnvironmentTerminated", input)
	return NewVoidFuture(future)
}

func (a *ElasticBeanstalkStub) WaitUntilEnvironmentUpdated(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.WaitUntilEnvironmentUpdated", input).Get(ctx, nil)
}

func (a *ElasticBeanstalkStub) WaitUntilEnvironmentUpdatedAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.WaitUntilEnvironmentUpdated", input)
	return NewVoidFuture(future)
}
