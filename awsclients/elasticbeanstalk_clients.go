// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/elasticbeanstalk"
	"go.temporal.io/sdk/workflow"
)

type ElasticBeanstalkClient interface {
	AbortEnvironmentUpdate(ctx workflow.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error)
	AbortEnvironmentUpdateAsync(ctx workflow.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput) *ElasticbeanstalkAbortEnvironmentUpdateFuture

	ApplyEnvironmentManagedAction(ctx workflow.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error)
	ApplyEnvironmentManagedActionAsync(ctx workflow.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput) *ElasticbeanstalkApplyEnvironmentManagedActionFuture

	AssociateEnvironmentOperationsRole(ctx workflow.Context, input *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput) (*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput, error)
	AssociateEnvironmentOperationsRoleAsync(ctx workflow.Context, input *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput) *ElasticbeanstalkAssociateEnvironmentOperationsRoleFuture

	CheckDNSAvailability(ctx workflow.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error)
	CheckDNSAvailabilityAsync(ctx workflow.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput) *ElasticbeanstalkCheckDNSAvailabilityFuture

	ComposeEnvironments(ctx workflow.Context, input *elasticbeanstalk.ComposeEnvironmentsInput) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error)
	ComposeEnvironmentsAsync(ctx workflow.Context, input *elasticbeanstalk.ComposeEnvironmentsInput) *ElasticbeanstalkComposeEnvironmentsFuture

	CreateApplication(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationInput) (*elasticbeanstalk.ApplicationDescriptionMessage, error)
	CreateApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationInput) *ElasticbeanstalkCreateApplicationFuture

	CreateApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationVersionInput) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error)
	CreateApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationVersionInput) *ElasticbeanstalkCreateApplicationVersionFuture

	CreateConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput) (*elasticbeanstalk.ConfigurationSettingsDescription, error)
	CreateConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput) *ElasticbeanstalkCreateConfigurationTemplateFuture

	CreateEnvironment(ctx workflow.Context, input *elasticbeanstalk.CreateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error)
	CreateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.CreateEnvironmentInput) *ElasticbeanstalkCreateEnvironmentFuture

	CreatePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.CreatePlatformVersionInput) (*elasticbeanstalk.CreatePlatformVersionOutput, error)
	CreatePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.CreatePlatformVersionInput) *ElasticbeanstalkCreatePlatformVersionFuture

	CreateStorageLocation(ctx workflow.Context, input *elasticbeanstalk.CreateStorageLocationInput) (*elasticbeanstalk.CreateStorageLocationOutput, error)
	CreateStorageLocationAsync(ctx workflow.Context, input *elasticbeanstalk.CreateStorageLocationInput) *ElasticbeanstalkCreateStorageLocationFuture

	DeleteApplication(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationInput) (*elasticbeanstalk.DeleteApplicationOutput, error)
	DeleteApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationInput) *ElasticbeanstalkDeleteApplicationFuture

	DeleteApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationVersionInput) (*elasticbeanstalk.DeleteApplicationVersionOutput, error)
	DeleteApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationVersionInput) *ElasticbeanstalkDeleteApplicationVersionFuture

	DeleteConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error)
	DeleteConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput) *ElasticbeanstalkDeleteConfigurationTemplateFuture

	DeleteEnvironmentConfiguration(ctx workflow.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error)
	DeleteEnvironmentConfigurationAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput) *ElasticbeanstalkDeleteEnvironmentConfigurationFuture

	DeletePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.DeletePlatformVersionInput) (*elasticbeanstalk.DeletePlatformVersionOutput, error)
	DeletePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DeletePlatformVersionInput) *ElasticbeanstalkDeletePlatformVersionFuture

	DescribeAccountAttributes(ctx workflow.Context, input *elasticbeanstalk.DescribeAccountAttributesInput) (*elasticbeanstalk.DescribeAccountAttributesOutput, error)
	DescribeAccountAttributesAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeAccountAttributesInput) *ElasticbeanstalkDescribeAccountAttributesFuture

	DescribeApplicationVersions(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error)
	DescribeApplicationVersionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput) *ElasticbeanstalkDescribeApplicationVersionsFuture

	DescribeApplications(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationsInput) (*elasticbeanstalk.DescribeApplicationsOutput, error)
	DescribeApplicationsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationsInput) *ElasticbeanstalkDescribeApplicationsFuture

	DescribeConfigurationOptions(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error)
	DescribeConfigurationOptionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput) *ElasticbeanstalkDescribeConfigurationOptionsFuture

	DescribeConfigurationSettings(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error)
	DescribeConfigurationSettingsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput) *ElasticbeanstalkDescribeConfigurationSettingsFuture

	DescribeEnvironmentHealth(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error)
	DescribeEnvironmentHealthAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput) *ElasticbeanstalkDescribeEnvironmentHealthFuture

	DescribeEnvironmentManagedActionHistory(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error)
	DescribeEnvironmentManagedActionHistoryAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput) *ElasticbeanstalkDescribeEnvironmentManagedActionHistoryFuture

	DescribeEnvironmentManagedActions(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error)
	DescribeEnvironmentManagedActionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput) *ElasticbeanstalkDescribeEnvironmentManagedActionsFuture

	DescribeEnvironmentResources(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error)
	DescribeEnvironmentResourcesAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput) *ElasticbeanstalkDescribeEnvironmentResourcesFuture

	DescribeEnvironments(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error)
	DescribeEnvironmentsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *ElasticbeanstalkDescribeEnvironmentsFuture

	DescribeEvents(ctx workflow.Context, input *elasticbeanstalk.DescribeEventsInput) (*elasticbeanstalk.DescribeEventsOutput, error)
	DescribeEventsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEventsInput) *ElasticbeanstalkDescribeEventsFuture

	DescribeInstancesHealth(ctx workflow.Context, input *elasticbeanstalk.DescribeInstancesHealthInput) (*elasticbeanstalk.DescribeInstancesHealthOutput, error)
	DescribeInstancesHealthAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeInstancesHealthInput) *ElasticbeanstalkDescribeInstancesHealthFuture

	DescribePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.DescribePlatformVersionInput) (*elasticbeanstalk.DescribePlatformVersionOutput, error)
	DescribePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DescribePlatformVersionInput) *ElasticbeanstalkDescribePlatformVersionFuture

	DisassociateEnvironmentOperationsRole(ctx workflow.Context, input *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput) (*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput, error)
	DisassociateEnvironmentOperationsRoleAsync(ctx workflow.Context, input *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput) *ElasticbeanstalkDisassociateEnvironmentOperationsRoleFuture

	ListAvailableSolutionStacks(ctx workflow.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error)
	ListAvailableSolutionStacksAsync(ctx workflow.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput) *ElasticbeanstalkListAvailableSolutionStacksFuture

	ListPlatformBranches(ctx workflow.Context, input *elasticbeanstalk.ListPlatformBranchesInput) (*elasticbeanstalk.ListPlatformBranchesOutput, error)
	ListPlatformBranchesAsync(ctx workflow.Context, input *elasticbeanstalk.ListPlatformBranchesInput) *ElasticbeanstalkListPlatformBranchesFuture

	ListPlatformVersions(ctx workflow.Context, input *elasticbeanstalk.ListPlatformVersionsInput) (*elasticbeanstalk.ListPlatformVersionsOutput, error)
	ListPlatformVersionsAsync(ctx workflow.Context, input *elasticbeanstalk.ListPlatformVersionsInput) *ElasticbeanstalkListPlatformVersionsFuture

	ListTagsForResource(ctx workflow.Context, input *elasticbeanstalk.ListTagsForResourceInput) (*elasticbeanstalk.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *elasticbeanstalk.ListTagsForResourceInput) *ElasticbeanstalkListTagsForResourceFuture

	RebuildEnvironment(ctx workflow.Context, input *elasticbeanstalk.RebuildEnvironmentInput) (*elasticbeanstalk.RebuildEnvironmentOutput, error)
	RebuildEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.RebuildEnvironmentInput) *ElasticbeanstalkRebuildEnvironmentFuture

	RequestEnvironmentInfo(ctx workflow.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error)
	RequestEnvironmentInfoAsync(ctx workflow.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput) *ElasticbeanstalkRequestEnvironmentInfoFuture

	RestartAppServer(ctx workflow.Context, input *elasticbeanstalk.RestartAppServerInput) (*elasticbeanstalk.RestartAppServerOutput, error)
	RestartAppServerAsync(ctx workflow.Context, input *elasticbeanstalk.RestartAppServerInput) *ElasticbeanstalkRestartAppServerFuture

	RetrieveEnvironmentInfo(ctx workflow.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error)
	RetrieveEnvironmentInfoAsync(ctx workflow.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput) *ElasticbeanstalkRetrieveEnvironmentInfoFuture

	SwapEnvironmentCNAMEs(ctx workflow.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error)
	SwapEnvironmentCNAMEsAsync(ctx workflow.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput) *ElasticbeanstalkSwapEnvironmentCNAMEsFuture

	TerminateEnvironment(ctx workflow.Context, input *elasticbeanstalk.TerminateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error)
	TerminateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.TerminateEnvironmentInput) *ElasticbeanstalkTerminateEnvironmentFuture

	UpdateApplication(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationInput) (*elasticbeanstalk.ApplicationDescriptionMessage, error)
	UpdateApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationInput) *ElasticbeanstalkUpdateApplicationFuture

	UpdateApplicationResourceLifecycle(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error)
	UpdateApplicationResourceLifecycleAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput) *ElasticbeanstalkUpdateApplicationResourceLifecycleFuture

	UpdateApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationVersionInput) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error)
	UpdateApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationVersionInput) *ElasticbeanstalkUpdateApplicationVersionFuture

	UpdateConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput) (*elasticbeanstalk.ConfigurationSettingsDescription, error)
	UpdateConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput) *ElasticbeanstalkUpdateConfigurationTemplateFuture

	UpdateEnvironment(ctx workflow.Context, input *elasticbeanstalk.UpdateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error)
	UpdateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateEnvironmentInput) *ElasticbeanstalkUpdateEnvironmentFuture

	UpdateTagsForResource(ctx workflow.Context, input *elasticbeanstalk.UpdateTagsForResourceInput) (*elasticbeanstalk.UpdateTagsForResourceOutput, error)
	UpdateTagsForResourceAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateTagsForResourceInput) *ElasticbeanstalkUpdateTagsForResourceFuture

	ValidateConfigurationSettings(ctx workflow.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error)
	ValidateConfigurationSettingsAsync(ctx workflow.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput) *ElasticbeanstalkValidateConfigurationSettingsFuture

	WaitUntilEnvironmentExists(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error
	WaitUntilEnvironmentExistsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) workflow.Future

	WaitUntilEnvironmentTerminated(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error
	WaitUntilEnvironmentTerminatedAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) workflow.Future

	WaitUntilEnvironmentUpdated(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error
	WaitUntilEnvironmentUpdatedAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) workflow.Future
}

type ElasticBeanstalkStub struct{}

func NewElasticBeanstalkStub() ElasticBeanstalkClient {
	return &ElasticBeanstalkStub{}
}

type ElasticbeanstalkAbortEnvironmentUpdateFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkAbortEnvironmentUpdateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error) {
	var output elasticbeanstalk.AbortEnvironmentUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkApplyEnvironmentManagedActionFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkApplyEnvironmentManagedActionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error) {
	var output elasticbeanstalk.ApplyEnvironmentManagedActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkAssociateEnvironmentOperationsRoleFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkAssociateEnvironmentOperationsRoleFuture) Get(ctx workflow.Context) (*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkCheckDNSAvailabilityFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkCheckDNSAvailabilityFuture) Get(ctx workflow.Context) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error) {
	var output elasticbeanstalk.CheckDNSAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkComposeEnvironmentsFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkComposeEnvironmentsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkCreateApplicationFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkCreateApplicationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkCreateApplicationVersionFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkCreateApplicationVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkCreateConfigurationTemplateFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkCreateConfigurationTemplateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkCreateEnvironmentFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkCreateEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkCreatePlatformVersionFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkCreatePlatformVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.CreatePlatformVersionOutput, error) {
	var output elasticbeanstalk.CreatePlatformVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkCreateStorageLocationFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkCreateStorageLocationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.CreateStorageLocationOutput, error) {
	var output elasticbeanstalk.CreateStorageLocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDeleteApplicationFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDeleteApplicationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteApplicationOutput, error) {
	var output elasticbeanstalk.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDeleteApplicationVersionFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDeleteApplicationVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteApplicationVersionOutput, error) {
	var output elasticbeanstalk.DeleteApplicationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDeleteConfigurationTemplateFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDeleteConfigurationTemplateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error) {
	var output elasticbeanstalk.DeleteConfigurationTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDeleteEnvironmentConfigurationFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDeleteEnvironmentConfigurationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error) {
	var output elasticbeanstalk.DeleteEnvironmentConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDeletePlatformVersionFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDeletePlatformVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeletePlatformVersionOutput, error) {
	var output elasticbeanstalk.DeletePlatformVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribeAccountAttributesFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribeAccountAttributesFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeAccountAttributesOutput, error) {
	var output elasticbeanstalk.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribeApplicationVersionsFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribeApplicationVersionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribeApplicationsFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribeApplicationsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeApplicationsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribeConfigurationOptionsFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribeConfigurationOptionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribeConfigurationSettingsFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribeConfigurationSettingsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribeEnvironmentHealthFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribeEnvironmentHealthFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribeEnvironmentManagedActionHistoryFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribeEnvironmentManagedActionHistoryFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribeEnvironmentManagedActionsFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribeEnvironmentManagedActionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribeEnvironmentResourcesFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribeEnvironmentResourcesFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribeEnvironmentsFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribeEnvironmentsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribeEventsFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribeEventsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEventsOutput, error) {
	var output elasticbeanstalk.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribeInstancesHealthFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribeInstancesHealthFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeInstancesHealthOutput, error) {
	var output elasticbeanstalk.DescribeInstancesHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDescribePlatformVersionFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDescribePlatformVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribePlatformVersionOutput, error) {
	var output elasticbeanstalk.DescribePlatformVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkDisassociateEnvironmentOperationsRoleFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkDisassociateEnvironmentOperationsRoleFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkListAvailableSolutionStacksFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkListAvailableSolutionStacksFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error) {
	var output elasticbeanstalk.ListAvailableSolutionStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkListPlatformBranchesFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkListPlatformBranchesFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListPlatformBranchesOutput, error) {
	var output elasticbeanstalk.ListPlatformBranchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkListPlatformVersionsFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkListPlatformVersionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListPlatformVersionsOutput, error) {
	var output elasticbeanstalk.ListPlatformVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkListTagsForResourceFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListTagsForResourceOutput, error) {
	var output elasticbeanstalk.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkRebuildEnvironmentFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkRebuildEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RebuildEnvironmentOutput, error) {
	var output elasticbeanstalk.RebuildEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkRequestEnvironmentInfoFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkRequestEnvironmentInfoFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RequestEnvironmentInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkRestartAppServerFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkRestartAppServerFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RestartAppServerOutput, error) {
	var output elasticbeanstalk.RestartAppServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkRetrieveEnvironmentInfoFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkRetrieveEnvironmentInfoFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RetrieveEnvironmentInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkSwapEnvironmentCNAMEsFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkSwapEnvironmentCNAMEsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error) {
	var output elasticbeanstalk.SwapEnvironmentCNAMEsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkTerminateEnvironmentFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkTerminateEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkUpdateApplicationFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkUpdateApplicationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkUpdateApplicationResourceLifecycleFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkUpdateApplicationResourceLifecycleFuture) Get(ctx workflow.Context) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error) {
	var output elasticbeanstalk.UpdateApplicationResourceLifecycleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkUpdateApplicationVersionFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkUpdateApplicationVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkUpdateConfigurationTemplateFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkUpdateConfigurationTemplateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkUpdateEnvironmentFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkUpdateEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkUpdateTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkUpdateTagsForResourceFuture) Get(ctx workflow.Context) (*elasticbeanstalk.UpdateTagsForResourceOutput, error) {
	var output elasticbeanstalk.UpdateTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticbeanstalkValidateConfigurationSettingsFuture struct {
	Future workflow.Future
}

func (r *ElasticbeanstalkValidateConfigurationSettingsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.ValidateConfigurationSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) AbortEnvironmentUpdate(ctx workflow.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error) {
	var output elasticbeanstalk.AbortEnvironmentUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.AbortEnvironmentUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) AbortEnvironmentUpdateAsync(ctx workflow.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput) *ElasticbeanstalkAbortEnvironmentUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.AbortEnvironmentUpdate", input)
	return &ElasticbeanstalkAbortEnvironmentUpdateFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ApplyEnvironmentManagedAction(ctx workflow.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error) {
	var output elasticbeanstalk.ApplyEnvironmentManagedActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ApplyEnvironmentManagedAction", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ApplyEnvironmentManagedActionAsync(ctx workflow.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput) *ElasticbeanstalkApplyEnvironmentManagedActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ApplyEnvironmentManagedAction", input)
	return &ElasticbeanstalkApplyEnvironmentManagedActionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) AssociateEnvironmentOperationsRole(ctx workflow.Context, input *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput) (*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.AssociateEnvironmentOperationsRole", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) AssociateEnvironmentOperationsRoleAsync(ctx workflow.Context, input *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput) *ElasticbeanstalkAssociateEnvironmentOperationsRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.AssociateEnvironmentOperationsRole", input)
	return &ElasticbeanstalkAssociateEnvironmentOperationsRoleFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CheckDNSAvailability(ctx workflow.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error) {
	var output elasticbeanstalk.CheckDNSAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CheckDNSAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CheckDNSAvailabilityAsync(ctx workflow.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput) *ElasticbeanstalkCheckDNSAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CheckDNSAvailability", input)
	return &ElasticbeanstalkCheckDNSAvailabilityFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ComposeEnvironments(ctx workflow.Context, input *elasticbeanstalk.ComposeEnvironmentsInput) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ComposeEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ComposeEnvironmentsAsync(ctx workflow.Context, input *elasticbeanstalk.ComposeEnvironmentsInput) *ElasticbeanstalkComposeEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ComposeEnvironments", input)
	return &ElasticbeanstalkComposeEnvironmentsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CreateApplication(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationInput) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CreateApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationInput) *ElasticbeanstalkCreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateApplication", input)
	return &ElasticbeanstalkCreateApplicationFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CreateApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationVersionInput) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CreateApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationVersionInput) *ElasticbeanstalkCreateApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateApplicationVersion", input)
	return &ElasticbeanstalkCreateApplicationVersionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CreateConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateConfigurationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CreateConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput) *ElasticbeanstalkCreateConfigurationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateConfigurationTemplate", input)
	return &ElasticbeanstalkCreateConfigurationTemplateFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CreateEnvironment(ctx workflow.Context, input *elasticbeanstalk.CreateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CreateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.CreateEnvironmentInput) *ElasticbeanstalkCreateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateEnvironment", input)
	return &ElasticbeanstalkCreateEnvironmentFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CreatePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.CreatePlatformVersionInput) (*elasticbeanstalk.CreatePlatformVersionOutput, error) {
	var output elasticbeanstalk.CreatePlatformVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreatePlatformVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CreatePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.CreatePlatformVersionInput) *ElasticbeanstalkCreatePlatformVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreatePlatformVersion", input)
	return &ElasticbeanstalkCreatePlatformVersionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) CreateStorageLocation(ctx workflow.Context, input *elasticbeanstalk.CreateStorageLocationInput) (*elasticbeanstalk.CreateStorageLocationOutput, error) {
	var output elasticbeanstalk.CreateStorageLocationOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateStorageLocation", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) CreateStorageLocationAsync(ctx workflow.Context, input *elasticbeanstalk.CreateStorageLocationInput) *ElasticbeanstalkCreateStorageLocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.CreateStorageLocation", input)
	return &ElasticbeanstalkCreateStorageLocationFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DeleteApplication(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationInput) (*elasticbeanstalk.DeleteApplicationOutput, error) {
	var output elasticbeanstalk.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DeleteApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationInput) *ElasticbeanstalkDeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteApplication", input)
	return &ElasticbeanstalkDeleteApplicationFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DeleteApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationVersionInput) (*elasticbeanstalk.DeleteApplicationVersionOutput, error) {
	var output elasticbeanstalk.DeleteApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DeleteApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationVersionInput) *ElasticbeanstalkDeleteApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteApplicationVersion", input)
	return &ElasticbeanstalkDeleteApplicationVersionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DeleteConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error) {
	var output elasticbeanstalk.DeleteConfigurationTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteConfigurationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DeleteConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput) *ElasticbeanstalkDeleteConfigurationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteConfigurationTemplate", input)
	return &ElasticbeanstalkDeleteConfigurationTemplateFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DeleteEnvironmentConfiguration(ctx workflow.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error) {
	var output elasticbeanstalk.DeleteEnvironmentConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteEnvironmentConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DeleteEnvironmentConfigurationAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput) *ElasticbeanstalkDeleteEnvironmentConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeleteEnvironmentConfiguration", input)
	return &ElasticbeanstalkDeleteEnvironmentConfigurationFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DeletePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.DeletePlatformVersionInput) (*elasticbeanstalk.DeletePlatformVersionOutput, error) {
	var output elasticbeanstalk.DeletePlatformVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeletePlatformVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DeletePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DeletePlatformVersionInput) *ElasticbeanstalkDeletePlatformVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DeletePlatformVersion", input)
	return &ElasticbeanstalkDeletePlatformVersionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeAccountAttributes(ctx workflow.Context, input *elasticbeanstalk.DescribeAccountAttributesInput) (*elasticbeanstalk.DescribeAccountAttributesOutput, error) {
	var output elasticbeanstalk.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeAccountAttributesAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeAccountAttributesInput) *ElasticbeanstalkDescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeAccountAttributes", input)
	return &ElasticbeanstalkDescribeAccountAttributesFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeApplicationVersions(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeApplicationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeApplicationVersionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput) *ElasticbeanstalkDescribeApplicationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeApplicationVersions", input)
	return &ElasticbeanstalkDescribeApplicationVersionsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeApplications(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationsInput) (*elasticbeanstalk.DescribeApplicationsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeApplicationsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationsInput) *ElasticbeanstalkDescribeApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeApplications", input)
	return &ElasticbeanstalkDescribeApplicationsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeConfigurationOptions(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeConfigurationOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeConfigurationOptionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput) *ElasticbeanstalkDescribeConfigurationOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeConfigurationOptions", input)
	return &ElasticbeanstalkDescribeConfigurationOptionsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeConfigurationSettings(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeConfigurationSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeConfigurationSettingsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput) *ElasticbeanstalkDescribeConfigurationSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeConfigurationSettings", input)
	return &ElasticbeanstalkDescribeConfigurationSettingsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentHealth(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentHealthAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput) *ElasticbeanstalkDescribeEnvironmentHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentHealth", input)
	return &ElasticbeanstalkDescribeEnvironmentHealthFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentManagedActionHistory(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentManagedActionHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentManagedActionHistoryAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput) *ElasticbeanstalkDescribeEnvironmentManagedActionHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentManagedActionHistory", input)
	return &ElasticbeanstalkDescribeEnvironmentManagedActionHistoryFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentManagedActions(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentManagedActions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentManagedActionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput) *ElasticbeanstalkDescribeEnvironmentManagedActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentManagedActions", input)
	return &ElasticbeanstalkDescribeEnvironmentManagedActionsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentResources(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentResources", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentResourcesAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput) *ElasticbeanstalkDescribeEnvironmentResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironmentResources", input)
	return &ElasticbeanstalkDescribeEnvironmentResourcesFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeEnvironments(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeEnvironmentsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *ElasticbeanstalkDescribeEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEnvironments", input)
	return &ElasticbeanstalkDescribeEnvironmentsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeEvents(ctx workflow.Context, input *elasticbeanstalk.DescribeEventsInput) (*elasticbeanstalk.DescribeEventsOutput, error) {
	var output elasticbeanstalk.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeEventsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEventsInput) *ElasticbeanstalkDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeEvents", input)
	return &ElasticbeanstalkDescribeEventsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribeInstancesHealth(ctx workflow.Context, input *elasticbeanstalk.DescribeInstancesHealthInput) (*elasticbeanstalk.DescribeInstancesHealthOutput, error) {
	var output elasticbeanstalk.DescribeInstancesHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeInstancesHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribeInstancesHealthAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeInstancesHealthInput) *ElasticbeanstalkDescribeInstancesHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribeInstancesHealth", input)
	return &ElasticbeanstalkDescribeInstancesHealthFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DescribePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.DescribePlatformVersionInput) (*elasticbeanstalk.DescribePlatformVersionOutput, error) {
	var output elasticbeanstalk.DescribePlatformVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribePlatformVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DescribePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DescribePlatformVersionInput) *ElasticbeanstalkDescribePlatformVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DescribePlatformVersion", input)
	return &ElasticbeanstalkDescribePlatformVersionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) DisassociateEnvironmentOperationsRole(ctx workflow.Context, input *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput) (*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DisassociateEnvironmentOperationsRole", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) DisassociateEnvironmentOperationsRoleAsync(ctx workflow.Context, input *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput) *ElasticbeanstalkDisassociateEnvironmentOperationsRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.DisassociateEnvironmentOperationsRole", input)
	return &ElasticbeanstalkDisassociateEnvironmentOperationsRoleFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ListAvailableSolutionStacks(ctx workflow.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error) {
	var output elasticbeanstalk.ListAvailableSolutionStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListAvailableSolutionStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ListAvailableSolutionStacksAsync(ctx workflow.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput) *ElasticbeanstalkListAvailableSolutionStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListAvailableSolutionStacks", input)
	return &ElasticbeanstalkListAvailableSolutionStacksFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ListPlatformBranches(ctx workflow.Context, input *elasticbeanstalk.ListPlatformBranchesInput) (*elasticbeanstalk.ListPlatformBranchesOutput, error) {
	var output elasticbeanstalk.ListPlatformBranchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListPlatformBranches", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ListPlatformBranchesAsync(ctx workflow.Context, input *elasticbeanstalk.ListPlatformBranchesInput) *ElasticbeanstalkListPlatformBranchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListPlatformBranches", input)
	return &ElasticbeanstalkListPlatformBranchesFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ListPlatformVersions(ctx workflow.Context, input *elasticbeanstalk.ListPlatformVersionsInput) (*elasticbeanstalk.ListPlatformVersionsOutput, error) {
	var output elasticbeanstalk.ListPlatformVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListPlatformVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ListPlatformVersionsAsync(ctx workflow.Context, input *elasticbeanstalk.ListPlatformVersionsInput) *ElasticbeanstalkListPlatformVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListPlatformVersions", input)
	return &ElasticbeanstalkListPlatformVersionsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ListTagsForResource(ctx workflow.Context, input *elasticbeanstalk.ListTagsForResourceInput) (*elasticbeanstalk.ListTagsForResourceOutput, error) {
	var output elasticbeanstalk.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ListTagsForResourceAsync(ctx workflow.Context, input *elasticbeanstalk.ListTagsForResourceInput) *ElasticbeanstalkListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ListTagsForResource", input)
	return &ElasticbeanstalkListTagsForResourceFuture{Future: future}
}

func (a *ElasticBeanstalkStub) RebuildEnvironment(ctx workflow.Context, input *elasticbeanstalk.RebuildEnvironmentInput) (*elasticbeanstalk.RebuildEnvironmentOutput, error) {
	var output elasticbeanstalk.RebuildEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RebuildEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) RebuildEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.RebuildEnvironmentInput) *ElasticbeanstalkRebuildEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RebuildEnvironment", input)
	return &ElasticbeanstalkRebuildEnvironmentFuture{Future: future}
}

func (a *ElasticBeanstalkStub) RequestEnvironmentInfo(ctx workflow.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RequestEnvironmentInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RequestEnvironmentInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) RequestEnvironmentInfoAsync(ctx workflow.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput) *ElasticbeanstalkRequestEnvironmentInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RequestEnvironmentInfo", input)
	return &ElasticbeanstalkRequestEnvironmentInfoFuture{Future: future}
}

func (a *ElasticBeanstalkStub) RestartAppServer(ctx workflow.Context, input *elasticbeanstalk.RestartAppServerInput) (*elasticbeanstalk.RestartAppServerOutput, error) {
	var output elasticbeanstalk.RestartAppServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RestartAppServer", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) RestartAppServerAsync(ctx workflow.Context, input *elasticbeanstalk.RestartAppServerInput) *ElasticbeanstalkRestartAppServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RestartAppServer", input)
	return &ElasticbeanstalkRestartAppServerFuture{Future: future}
}

func (a *ElasticBeanstalkStub) RetrieveEnvironmentInfo(ctx workflow.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RetrieveEnvironmentInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RetrieveEnvironmentInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) RetrieveEnvironmentInfoAsync(ctx workflow.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput) *ElasticbeanstalkRetrieveEnvironmentInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.RetrieveEnvironmentInfo", input)
	return &ElasticbeanstalkRetrieveEnvironmentInfoFuture{Future: future}
}

func (a *ElasticBeanstalkStub) SwapEnvironmentCNAMEs(ctx workflow.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error) {
	var output elasticbeanstalk.SwapEnvironmentCNAMEsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.SwapEnvironmentCNAMEs", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) SwapEnvironmentCNAMEsAsync(ctx workflow.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput) *ElasticbeanstalkSwapEnvironmentCNAMEsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.SwapEnvironmentCNAMEs", input)
	return &ElasticbeanstalkSwapEnvironmentCNAMEsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) TerminateEnvironment(ctx workflow.Context, input *elasticbeanstalk.TerminateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.TerminateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) TerminateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.TerminateEnvironmentInput) *ElasticbeanstalkTerminateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.TerminateEnvironment", input)
	return &ElasticbeanstalkTerminateEnvironmentFuture{Future: future}
}

func (a *ElasticBeanstalkStub) UpdateApplication(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationInput) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) UpdateApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationInput) *ElasticbeanstalkUpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateApplication", input)
	return &ElasticbeanstalkUpdateApplicationFuture{Future: future}
}

func (a *ElasticBeanstalkStub) UpdateApplicationResourceLifecycle(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error) {
	var output elasticbeanstalk.UpdateApplicationResourceLifecycleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateApplicationResourceLifecycle", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) UpdateApplicationResourceLifecycleAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput) *ElasticbeanstalkUpdateApplicationResourceLifecycleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateApplicationResourceLifecycle", input)
	return &ElasticbeanstalkUpdateApplicationResourceLifecycleFuture{Future: future}
}

func (a *ElasticBeanstalkStub) UpdateApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationVersionInput) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) UpdateApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationVersionInput) *ElasticbeanstalkUpdateApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateApplicationVersion", input)
	return &ElasticbeanstalkUpdateApplicationVersionFuture{Future: future}
}

func (a *ElasticBeanstalkStub) UpdateConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateConfigurationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) UpdateConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput) *ElasticbeanstalkUpdateConfigurationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateConfigurationTemplate", input)
	return &ElasticbeanstalkUpdateConfigurationTemplateFuture{Future: future}
}

func (a *ElasticBeanstalkStub) UpdateEnvironment(ctx workflow.Context, input *elasticbeanstalk.UpdateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) UpdateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateEnvironmentInput) *ElasticbeanstalkUpdateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateEnvironment", input)
	return &ElasticbeanstalkUpdateEnvironmentFuture{Future: future}
}

func (a *ElasticBeanstalkStub) UpdateTagsForResource(ctx workflow.Context, input *elasticbeanstalk.UpdateTagsForResourceInput) (*elasticbeanstalk.UpdateTagsForResourceOutput, error) {
	var output elasticbeanstalk.UpdateTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) UpdateTagsForResourceAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateTagsForResourceInput) *ElasticbeanstalkUpdateTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.UpdateTagsForResource", input)
	return &ElasticbeanstalkUpdateTagsForResourceFuture{Future: future}
}

func (a *ElasticBeanstalkStub) ValidateConfigurationSettings(ctx workflow.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.ValidateConfigurationSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ValidateConfigurationSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ElasticBeanstalkStub) ValidateConfigurationSettingsAsync(ctx workflow.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput) *ElasticbeanstalkValidateConfigurationSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.ValidateConfigurationSettings", input)
	return &ElasticbeanstalkValidateConfigurationSettingsFuture{Future: future}
}

func (a *ElasticBeanstalkStub) WaitUntilEnvironmentExists(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.WaitUntilEnvironmentExists", input).Get(ctx, nil)
}

func (a *ElasticBeanstalkStub) WaitUntilEnvironmentExistsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.WaitUntilEnvironmentExists", input)
}

func (a *ElasticBeanstalkStub) WaitUntilEnvironmentTerminated(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.WaitUntilEnvironmentTerminated", input).Get(ctx, nil)
}

func (a *ElasticBeanstalkStub) WaitUntilEnvironmentTerminatedAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.WaitUntilEnvironmentTerminated", input)
}

func (a *ElasticBeanstalkStub) WaitUntilEnvironmentUpdated(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.WaitUntilEnvironmentUpdated", input).Get(ctx, nil)
}

func (a *ElasticBeanstalkStub) WaitUntilEnvironmentUpdatedAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.elasticbeanstalk.WaitUntilEnvironmentUpdated", input)
}
