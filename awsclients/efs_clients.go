// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/efs"
	"go.temporal.io/sdk/workflow"
)

type EFSClient interface {
	CreateAccessPoint(ctx workflow.Context, input *efs.CreateAccessPointInput) (*efs.CreateAccessPointOutput, error)
	CreateAccessPointAsync(ctx workflow.Context, input *efs.CreateAccessPointInput) *EfsCreateAccessPointFuture

	CreateFileSystem(ctx workflow.Context, input *efs.CreateFileSystemInput) (*efs.FileSystemDescription, error)
	CreateFileSystemAsync(ctx workflow.Context, input *efs.CreateFileSystemInput) *EfsCreateFileSystemFuture

	CreateMountTarget(ctx workflow.Context, input *efs.CreateMountTargetInput) (*efs.MountTargetDescription, error)
	CreateMountTargetAsync(ctx workflow.Context, input *efs.CreateMountTargetInput) *EfsCreateMountTargetFuture

	CreateTags(ctx workflow.Context, input *efs.CreateTagsInput) (*efs.CreateTagsOutput, error)
	CreateTagsAsync(ctx workflow.Context, input *efs.CreateTagsInput) *EfsCreateTagsFuture

	DeleteAccessPoint(ctx workflow.Context, input *efs.DeleteAccessPointInput) (*efs.DeleteAccessPointOutput, error)
	DeleteAccessPointAsync(ctx workflow.Context, input *efs.DeleteAccessPointInput) *EfsDeleteAccessPointFuture

	DeleteFileSystem(ctx workflow.Context, input *efs.DeleteFileSystemInput) (*efs.DeleteFileSystemOutput, error)
	DeleteFileSystemAsync(ctx workflow.Context, input *efs.DeleteFileSystemInput) *EfsDeleteFileSystemFuture

	DeleteFileSystemPolicy(ctx workflow.Context, input *efs.DeleteFileSystemPolicyInput) (*efs.DeleteFileSystemPolicyOutput, error)
	DeleteFileSystemPolicyAsync(ctx workflow.Context, input *efs.DeleteFileSystemPolicyInput) *EfsDeleteFileSystemPolicyFuture

	DeleteMountTarget(ctx workflow.Context, input *efs.DeleteMountTargetInput) (*efs.DeleteMountTargetOutput, error)
	DeleteMountTargetAsync(ctx workflow.Context, input *efs.DeleteMountTargetInput) *EfsDeleteMountTargetFuture

	DeleteTags(ctx workflow.Context, input *efs.DeleteTagsInput) (*efs.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *efs.DeleteTagsInput) *EfsDeleteTagsFuture

	DescribeAccessPoints(ctx workflow.Context, input *efs.DescribeAccessPointsInput) (*efs.DescribeAccessPointsOutput, error)
	DescribeAccessPointsAsync(ctx workflow.Context, input *efs.DescribeAccessPointsInput) *EfsDescribeAccessPointsFuture

	DescribeBackupPolicy(ctx workflow.Context, input *efs.DescribeBackupPolicyInput) (*efs.DescribeBackupPolicyOutput, error)
	DescribeBackupPolicyAsync(ctx workflow.Context, input *efs.DescribeBackupPolicyInput) *EfsDescribeBackupPolicyFuture

	DescribeFileSystemPolicy(ctx workflow.Context, input *efs.DescribeFileSystemPolicyInput) (*efs.DescribeFileSystemPolicyOutput, error)
	DescribeFileSystemPolicyAsync(ctx workflow.Context, input *efs.DescribeFileSystemPolicyInput) *EfsDescribeFileSystemPolicyFuture

	DescribeFileSystems(ctx workflow.Context, input *efs.DescribeFileSystemsInput) (*efs.DescribeFileSystemsOutput, error)
	DescribeFileSystemsAsync(ctx workflow.Context, input *efs.DescribeFileSystemsInput) *EfsDescribeFileSystemsFuture

	DescribeLifecycleConfiguration(ctx workflow.Context, input *efs.DescribeLifecycleConfigurationInput) (*efs.DescribeLifecycleConfigurationOutput, error)
	DescribeLifecycleConfigurationAsync(ctx workflow.Context, input *efs.DescribeLifecycleConfigurationInput) *EfsDescribeLifecycleConfigurationFuture

	DescribeMountTargetSecurityGroups(ctx workflow.Context, input *efs.DescribeMountTargetSecurityGroupsInput) (*efs.DescribeMountTargetSecurityGroupsOutput, error)
	DescribeMountTargetSecurityGroupsAsync(ctx workflow.Context, input *efs.DescribeMountTargetSecurityGroupsInput) *EfsDescribeMountTargetSecurityGroupsFuture

	DescribeMountTargets(ctx workflow.Context, input *efs.DescribeMountTargetsInput) (*efs.DescribeMountTargetsOutput, error)
	DescribeMountTargetsAsync(ctx workflow.Context, input *efs.DescribeMountTargetsInput) *EfsDescribeMountTargetsFuture

	DescribeTags(ctx workflow.Context, input *efs.DescribeTagsInput) (*efs.DescribeTagsOutput, error)
	DescribeTagsAsync(ctx workflow.Context, input *efs.DescribeTagsInput) *EfsDescribeTagsFuture

	ListTagsForResource(ctx workflow.Context, input *efs.ListTagsForResourceInput) (*efs.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *efs.ListTagsForResourceInput) *EfsListTagsForResourceFuture

	ModifyMountTargetSecurityGroups(ctx workflow.Context, input *efs.ModifyMountTargetSecurityGroupsInput) (*efs.ModifyMountTargetSecurityGroupsOutput, error)
	ModifyMountTargetSecurityGroupsAsync(ctx workflow.Context, input *efs.ModifyMountTargetSecurityGroupsInput) *EfsModifyMountTargetSecurityGroupsFuture

	PutBackupPolicy(ctx workflow.Context, input *efs.PutBackupPolicyInput) (*efs.PutBackupPolicyOutput, error)
	PutBackupPolicyAsync(ctx workflow.Context, input *efs.PutBackupPolicyInput) *EfsPutBackupPolicyFuture

	PutFileSystemPolicy(ctx workflow.Context, input *efs.PutFileSystemPolicyInput) (*efs.PutFileSystemPolicyOutput, error)
	PutFileSystemPolicyAsync(ctx workflow.Context, input *efs.PutFileSystemPolicyInput) *EfsPutFileSystemPolicyFuture

	PutLifecycleConfiguration(ctx workflow.Context, input *efs.PutLifecycleConfigurationInput) (*efs.PutLifecycleConfigurationOutput, error)
	PutLifecycleConfigurationAsync(ctx workflow.Context, input *efs.PutLifecycleConfigurationInput) *EfsPutLifecycleConfigurationFuture

	TagResource(ctx workflow.Context, input *efs.TagResourceInput) (*efs.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *efs.TagResourceInput) *EfsTagResourceFuture

	UntagResource(ctx workflow.Context, input *efs.UntagResourceInput) (*efs.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *efs.UntagResourceInput) *EfsUntagResourceFuture

	UpdateFileSystem(ctx workflow.Context, input *efs.UpdateFileSystemInput) (*efs.UpdateFileSystemOutput, error)
	UpdateFileSystemAsync(ctx workflow.Context, input *efs.UpdateFileSystemInput) *EfsUpdateFileSystemFuture
}

type EFSStub struct{}

func NewEFSStub() EFSClient {
	return &EFSStub{}
}

type EfsCreateAccessPointFuture struct {
	Future workflow.Future
}

func (r *EfsCreateAccessPointFuture) Get(ctx workflow.Context) (*efs.CreateAccessPointOutput, error) {
	var output efs.CreateAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsCreateFileSystemFuture struct {
	Future workflow.Future
}

func (r *EfsCreateFileSystemFuture) Get(ctx workflow.Context) (*efs.FileSystemDescription, error) {
	var output efs.FileSystemDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsCreateMountTargetFuture struct {
	Future workflow.Future
}

func (r *EfsCreateMountTargetFuture) Get(ctx workflow.Context) (*efs.MountTargetDescription, error) {
	var output efs.MountTargetDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsCreateTagsFuture struct {
	Future workflow.Future
}

func (r *EfsCreateTagsFuture) Get(ctx workflow.Context) (*efs.CreateTagsOutput, error) {
	var output efs.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDeleteAccessPointFuture struct {
	Future workflow.Future
}

func (r *EfsDeleteAccessPointFuture) Get(ctx workflow.Context) (*efs.DeleteAccessPointOutput, error) {
	var output efs.DeleteAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDeleteFileSystemFuture struct {
	Future workflow.Future
}

func (r *EfsDeleteFileSystemFuture) Get(ctx workflow.Context) (*efs.DeleteFileSystemOutput, error) {
	var output efs.DeleteFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDeleteFileSystemPolicyFuture struct {
	Future workflow.Future
}

func (r *EfsDeleteFileSystemPolicyFuture) Get(ctx workflow.Context) (*efs.DeleteFileSystemPolicyOutput, error) {
	var output efs.DeleteFileSystemPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDeleteMountTargetFuture struct {
	Future workflow.Future
}

func (r *EfsDeleteMountTargetFuture) Get(ctx workflow.Context) (*efs.DeleteMountTargetOutput, error) {
	var output efs.DeleteMountTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDeleteTagsFuture struct {
	Future workflow.Future
}

func (r *EfsDeleteTagsFuture) Get(ctx workflow.Context) (*efs.DeleteTagsOutput, error) {
	var output efs.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDescribeAccessPointsFuture struct {
	Future workflow.Future
}

func (r *EfsDescribeAccessPointsFuture) Get(ctx workflow.Context) (*efs.DescribeAccessPointsOutput, error) {
	var output efs.DescribeAccessPointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDescribeBackupPolicyFuture struct {
	Future workflow.Future
}

func (r *EfsDescribeBackupPolicyFuture) Get(ctx workflow.Context) (*efs.DescribeBackupPolicyOutput, error) {
	var output efs.DescribeBackupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDescribeFileSystemPolicyFuture struct {
	Future workflow.Future
}

func (r *EfsDescribeFileSystemPolicyFuture) Get(ctx workflow.Context) (*efs.DescribeFileSystemPolicyOutput, error) {
	var output efs.DescribeFileSystemPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDescribeFileSystemsFuture struct {
	Future workflow.Future
}

func (r *EfsDescribeFileSystemsFuture) Get(ctx workflow.Context) (*efs.DescribeFileSystemsOutput, error) {
	var output efs.DescribeFileSystemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDescribeLifecycleConfigurationFuture struct {
	Future workflow.Future
}

func (r *EfsDescribeLifecycleConfigurationFuture) Get(ctx workflow.Context) (*efs.DescribeLifecycleConfigurationOutput, error) {
	var output efs.DescribeLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDescribeMountTargetSecurityGroupsFuture struct {
	Future workflow.Future
}

func (r *EfsDescribeMountTargetSecurityGroupsFuture) Get(ctx workflow.Context) (*efs.DescribeMountTargetSecurityGroupsOutput, error) {
	var output efs.DescribeMountTargetSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDescribeMountTargetsFuture struct {
	Future workflow.Future
}

func (r *EfsDescribeMountTargetsFuture) Get(ctx workflow.Context) (*efs.DescribeMountTargetsOutput, error) {
	var output efs.DescribeMountTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsDescribeTagsFuture struct {
	Future workflow.Future
}

func (r *EfsDescribeTagsFuture) Get(ctx workflow.Context) (*efs.DescribeTagsOutput, error) {
	var output efs.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *EfsListTagsForResourceFuture) Get(ctx workflow.Context) (*efs.ListTagsForResourceOutput, error) {
	var output efs.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsModifyMountTargetSecurityGroupsFuture struct {
	Future workflow.Future
}

func (r *EfsModifyMountTargetSecurityGroupsFuture) Get(ctx workflow.Context) (*efs.ModifyMountTargetSecurityGroupsOutput, error) {
	var output efs.ModifyMountTargetSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsPutBackupPolicyFuture struct {
	Future workflow.Future
}

func (r *EfsPutBackupPolicyFuture) Get(ctx workflow.Context) (*efs.PutBackupPolicyOutput, error) {
	var output efs.PutBackupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsPutFileSystemPolicyFuture struct {
	Future workflow.Future
}

func (r *EfsPutFileSystemPolicyFuture) Get(ctx workflow.Context) (*efs.PutFileSystemPolicyOutput, error) {
	var output efs.PutFileSystemPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsPutLifecycleConfigurationFuture struct {
	Future workflow.Future
}

func (r *EfsPutLifecycleConfigurationFuture) Get(ctx workflow.Context) (*efs.PutLifecycleConfigurationOutput, error) {
	var output efs.PutLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsTagResourceFuture struct {
	Future workflow.Future
}

func (r *EfsTagResourceFuture) Get(ctx workflow.Context) (*efs.TagResourceOutput, error) {
	var output efs.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsUntagResourceFuture struct {
	Future workflow.Future
}

func (r *EfsUntagResourceFuture) Get(ctx workflow.Context) (*efs.UntagResourceOutput, error) {
	var output efs.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EfsUpdateFileSystemFuture struct {
	Future workflow.Future
}

func (r *EfsUpdateFileSystemFuture) Get(ctx workflow.Context) (*efs.UpdateFileSystemOutput, error) {
	var output efs.UpdateFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) CreateAccessPoint(ctx workflow.Context, input *efs.CreateAccessPointInput) (*efs.CreateAccessPointOutput, error) {
	var output efs.CreateAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.CreateAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) CreateAccessPointAsync(ctx workflow.Context, input *efs.CreateAccessPointInput) *EfsCreateAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.CreateAccessPoint", input)
	return &EfsCreateAccessPointFuture{Future: future}
}

func (a *EFSStub) CreateFileSystem(ctx workflow.Context, input *efs.CreateFileSystemInput) (*efs.FileSystemDescription, error) {
	var output efs.FileSystemDescription
	err := workflow.ExecuteActivity(ctx, "aws.efs.CreateFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) CreateFileSystemAsync(ctx workflow.Context, input *efs.CreateFileSystemInput) *EfsCreateFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.CreateFileSystem", input)
	return &EfsCreateFileSystemFuture{Future: future}
}

func (a *EFSStub) CreateMountTarget(ctx workflow.Context, input *efs.CreateMountTargetInput) (*efs.MountTargetDescription, error) {
	var output efs.MountTargetDescription
	err := workflow.ExecuteActivity(ctx, "aws.efs.CreateMountTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) CreateMountTargetAsync(ctx workflow.Context, input *efs.CreateMountTargetInput) *EfsCreateMountTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.CreateMountTarget", input)
	return &EfsCreateMountTargetFuture{Future: future}
}

func (a *EFSStub) CreateTags(ctx workflow.Context, input *efs.CreateTagsInput) (*efs.CreateTagsOutput, error) {
	var output efs.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) CreateTagsAsync(ctx workflow.Context, input *efs.CreateTagsInput) *EfsCreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.CreateTags", input)
	return &EfsCreateTagsFuture{Future: future}
}

func (a *EFSStub) DeleteAccessPoint(ctx workflow.Context, input *efs.DeleteAccessPointInput) (*efs.DeleteAccessPointOutput, error) {
	var output efs.DeleteAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DeleteAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DeleteAccessPointAsync(ctx workflow.Context, input *efs.DeleteAccessPointInput) *EfsDeleteAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DeleteAccessPoint", input)
	return &EfsDeleteAccessPointFuture{Future: future}
}

func (a *EFSStub) DeleteFileSystem(ctx workflow.Context, input *efs.DeleteFileSystemInput) (*efs.DeleteFileSystemOutput, error) {
	var output efs.DeleteFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DeleteFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DeleteFileSystemAsync(ctx workflow.Context, input *efs.DeleteFileSystemInput) *EfsDeleteFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DeleteFileSystem", input)
	return &EfsDeleteFileSystemFuture{Future: future}
}

func (a *EFSStub) DeleteFileSystemPolicy(ctx workflow.Context, input *efs.DeleteFileSystemPolicyInput) (*efs.DeleteFileSystemPolicyOutput, error) {
	var output efs.DeleteFileSystemPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DeleteFileSystemPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DeleteFileSystemPolicyAsync(ctx workflow.Context, input *efs.DeleteFileSystemPolicyInput) *EfsDeleteFileSystemPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DeleteFileSystemPolicy", input)
	return &EfsDeleteFileSystemPolicyFuture{Future: future}
}

func (a *EFSStub) DeleteMountTarget(ctx workflow.Context, input *efs.DeleteMountTargetInput) (*efs.DeleteMountTargetOutput, error) {
	var output efs.DeleteMountTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DeleteMountTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DeleteMountTargetAsync(ctx workflow.Context, input *efs.DeleteMountTargetInput) *EfsDeleteMountTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DeleteMountTarget", input)
	return &EfsDeleteMountTargetFuture{Future: future}
}

func (a *EFSStub) DeleteTags(ctx workflow.Context, input *efs.DeleteTagsInput) (*efs.DeleteTagsOutput, error) {
	var output efs.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DeleteTagsAsync(ctx workflow.Context, input *efs.DeleteTagsInput) *EfsDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DeleteTags", input)
	return &EfsDeleteTagsFuture{Future: future}
}

func (a *EFSStub) DescribeAccessPoints(ctx workflow.Context, input *efs.DescribeAccessPointsInput) (*efs.DescribeAccessPointsOutput, error) {
	var output efs.DescribeAccessPointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeAccessPoints", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeAccessPointsAsync(ctx workflow.Context, input *efs.DescribeAccessPointsInput) *EfsDescribeAccessPointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeAccessPoints", input)
	return &EfsDescribeAccessPointsFuture{Future: future}
}

func (a *EFSStub) DescribeBackupPolicy(ctx workflow.Context, input *efs.DescribeBackupPolicyInput) (*efs.DescribeBackupPolicyOutput, error) {
	var output efs.DescribeBackupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeBackupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeBackupPolicyAsync(ctx workflow.Context, input *efs.DescribeBackupPolicyInput) *EfsDescribeBackupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeBackupPolicy", input)
	return &EfsDescribeBackupPolicyFuture{Future: future}
}

func (a *EFSStub) DescribeFileSystemPolicy(ctx workflow.Context, input *efs.DescribeFileSystemPolicyInput) (*efs.DescribeFileSystemPolicyOutput, error) {
	var output efs.DescribeFileSystemPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeFileSystemPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeFileSystemPolicyAsync(ctx workflow.Context, input *efs.DescribeFileSystemPolicyInput) *EfsDescribeFileSystemPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeFileSystemPolicy", input)
	return &EfsDescribeFileSystemPolicyFuture{Future: future}
}

func (a *EFSStub) DescribeFileSystems(ctx workflow.Context, input *efs.DescribeFileSystemsInput) (*efs.DescribeFileSystemsOutput, error) {
	var output efs.DescribeFileSystemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeFileSystems", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeFileSystemsAsync(ctx workflow.Context, input *efs.DescribeFileSystemsInput) *EfsDescribeFileSystemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeFileSystems", input)
	return &EfsDescribeFileSystemsFuture{Future: future}
}

func (a *EFSStub) DescribeLifecycleConfiguration(ctx workflow.Context, input *efs.DescribeLifecycleConfigurationInput) (*efs.DescribeLifecycleConfigurationOutput, error) {
	var output efs.DescribeLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeLifecycleConfigurationAsync(ctx workflow.Context, input *efs.DescribeLifecycleConfigurationInput) *EfsDescribeLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeLifecycleConfiguration", input)
	return &EfsDescribeLifecycleConfigurationFuture{Future: future}
}

func (a *EFSStub) DescribeMountTargetSecurityGroups(ctx workflow.Context, input *efs.DescribeMountTargetSecurityGroupsInput) (*efs.DescribeMountTargetSecurityGroupsOutput, error) {
	var output efs.DescribeMountTargetSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeMountTargetSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeMountTargetSecurityGroupsAsync(ctx workflow.Context, input *efs.DescribeMountTargetSecurityGroupsInput) *EfsDescribeMountTargetSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeMountTargetSecurityGroups", input)
	return &EfsDescribeMountTargetSecurityGroupsFuture{Future: future}
}

func (a *EFSStub) DescribeMountTargets(ctx workflow.Context, input *efs.DescribeMountTargetsInput) (*efs.DescribeMountTargetsOutput, error) {
	var output efs.DescribeMountTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeMountTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeMountTargetsAsync(ctx workflow.Context, input *efs.DescribeMountTargetsInput) *EfsDescribeMountTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeMountTargets", input)
	return &EfsDescribeMountTargetsFuture{Future: future}
}

func (a *EFSStub) DescribeTags(ctx workflow.Context, input *efs.DescribeTagsInput) (*efs.DescribeTagsOutput, error) {
	var output efs.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeTagsAsync(ctx workflow.Context, input *efs.DescribeTagsInput) *EfsDescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeTags", input)
	return &EfsDescribeTagsFuture{Future: future}
}

func (a *EFSStub) ListTagsForResource(ctx workflow.Context, input *efs.ListTagsForResourceInput) (*efs.ListTagsForResourceOutput, error) {
	var output efs.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) ListTagsForResourceAsync(ctx workflow.Context, input *efs.ListTagsForResourceInput) *EfsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.ListTagsForResource", input)
	return &EfsListTagsForResourceFuture{Future: future}
}

func (a *EFSStub) ModifyMountTargetSecurityGroups(ctx workflow.Context, input *efs.ModifyMountTargetSecurityGroupsInput) (*efs.ModifyMountTargetSecurityGroupsOutput, error) {
	var output efs.ModifyMountTargetSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.ModifyMountTargetSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) ModifyMountTargetSecurityGroupsAsync(ctx workflow.Context, input *efs.ModifyMountTargetSecurityGroupsInput) *EfsModifyMountTargetSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.ModifyMountTargetSecurityGroups", input)
	return &EfsModifyMountTargetSecurityGroupsFuture{Future: future}
}

func (a *EFSStub) PutBackupPolicy(ctx workflow.Context, input *efs.PutBackupPolicyInput) (*efs.PutBackupPolicyOutput, error) {
	var output efs.PutBackupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.PutBackupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) PutBackupPolicyAsync(ctx workflow.Context, input *efs.PutBackupPolicyInput) *EfsPutBackupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.PutBackupPolicy", input)
	return &EfsPutBackupPolicyFuture{Future: future}
}

func (a *EFSStub) PutFileSystemPolicy(ctx workflow.Context, input *efs.PutFileSystemPolicyInput) (*efs.PutFileSystemPolicyOutput, error) {
	var output efs.PutFileSystemPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.PutFileSystemPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) PutFileSystemPolicyAsync(ctx workflow.Context, input *efs.PutFileSystemPolicyInput) *EfsPutFileSystemPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.PutFileSystemPolicy", input)
	return &EfsPutFileSystemPolicyFuture{Future: future}
}

func (a *EFSStub) PutLifecycleConfiguration(ctx workflow.Context, input *efs.PutLifecycleConfigurationInput) (*efs.PutLifecycleConfigurationOutput, error) {
	var output efs.PutLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.PutLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) PutLifecycleConfigurationAsync(ctx workflow.Context, input *efs.PutLifecycleConfigurationInput) *EfsPutLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.PutLifecycleConfiguration", input)
	return &EfsPutLifecycleConfigurationFuture{Future: future}
}

func (a *EFSStub) TagResource(ctx workflow.Context, input *efs.TagResourceInput) (*efs.TagResourceOutput, error) {
	var output efs.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) TagResourceAsync(ctx workflow.Context, input *efs.TagResourceInput) *EfsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.TagResource", input)
	return &EfsTagResourceFuture{Future: future}
}

func (a *EFSStub) UntagResource(ctx workflow.Context, input *efs.UntagResourceInput) (*efs.UntagResourceOutput, error) {
	var output efs.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) UntagResourceAsync(ctx workflow.Context, input *efs.UntagResourceInput) *EfsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.UntagResource", input)
	return &EfsUntagResourceFuture{Future: future}
}

func (a *EFSStub) UpdateFileSystem(ctx workflow.Context, input *efs.UpdateFileSystemInput) (*efs.UpdateFileSystemOutput, error) {
	var output efs.UpdateFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.UpdateFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) UpdateFileSystemAsync(ctx workflow.Context, input *efs.UpdateFileSystemInput) *EfsUpdateFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.UpdateFileSystem", input)
	return &EfsUpdateFileSystemFuture{Future: future}
}
