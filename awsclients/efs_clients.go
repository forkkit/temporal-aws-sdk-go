// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/efs"
	"go.temporal.io/sdk/workflow"
)

type EFSClient interface {
	CreateAccessPoint(ctx workflow.Context, input *efs.CreateAccessPointInput) (*efs.CreateAccessPointOutput, error)
	CreateAccessPointAsync(ctx workflow.Context, input *efs.CreateAccessPointInput) *EFSCreateAccessPointFuture

	CreateFileSystem(ctx workflow.Context, input *efs.CreateFileSystemInput) (*efs.FileSystemDescription, error)
	CreateFileSystemAsync(ctx workflow.Context, input *efs.CreateFileSystemInput) *EFSCreateFileSystemFuture

	CreateMountTarget(ctx workflow.Context, input *efs.CreateMountTargetInput) (*efs.MountTargetDescription, error)
	CreateMountTargetAsync(ctx workflow.Context, input *efs.CreateMountTargetInput) *EFSCreateMountTargetFuture

	CreateTags(ctx workflow.Context, input *efs.CreateTagsInput) (*efs.CreateTagsOutput, error)
	CreateTagsAsync(ctx workflow.Context, input *efs.CreateTagsInput) *EFSCreateTagsFuture

	DeleteAccessPoint(ctx workflow.Context, input *efs.DeleteAccessPointInput) (*efs.DeleteAccessPointOutput, error)
	DeleteAccessPointAsync(ctx workflow.Context, input *efs.DeleteAccessPointInput) *EFSDeleteAccessPointFuture

	DeleteFileSystem(ctx workflow.Context, input *efs.DeleteFileSystemInput) (*efs.DeleteFileSystemOutput, error)
	DeleteFileSystemAsync(ctx workflow.Context, input *efs.DeleteFileSystemInput) *EFSDeleteFileSystemFuture

	DeleteFileSystemPolicy(ctx workflow.Context, input *efs.DeleteFileSystemPolicyInput) (*efs.DeleteFileSystemPolicyOutput, error)
	DeleteFileSystemPolicyAsync(ctx workflow.Context, input *efs.DeleteFileSystemPolicyInput) *EFSDeleteFileSystemPolicyFuture

	DeleteMountTarget(ctx workflow.Context, input *efs.DeleteMountTargetInput) (*efs.DeleteMountTargetOutput, error)
	DeleteMountTargetAsync(ctx workflow.Context, input *efs.DeleteMountTargetInput) *EFSDeleteMountTargetFuture

	DeleteTags(ctx workflow.Context, input *efs.DeleteTagsInput) (*efs.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *efs.DeleteTagsInput) *EFSDeleteTagsFuture

	DescribeAccessPoints(ctx workflow.Context, input *efs.DescribeAccessPointsInput) (*efs.DescribeAccessPointsOutput, error)
	DescribeAccessPointsAsync(ctx workflow.Context, input *efs.DescribeAccessPointsInput) *EFSDescribeAccessPointsFuture

	DescribeBackupPolicy(ctx workflow.Context, input *efs.DescribeBackupPolicyInput) (*efs.DescribeBackupPolicyOutput, error)
	DescribeBackupPolicyAsync(ctx workflow.Context, input *efs.DescribeBackupPolicyInput) *EFSDescribeBackupPolicyFuture

	DescribeFileSystemPolicy(ctx workflow.Context, input *efs.DescribeFileSystemPolicyInput) (*efs.DescribeFileSystemPolicyOutput, error)
	DescribeFileSystemPolicyAsync(ctx workflow.Context, input *efs.DescribeFileSystemPolicyInput) *EFSDescribeFileSystemPolicyFuture

	DescribeFileSystems(ctx workflow.Context, input *efs.DescribeFileSystemsInput) (*efs.DescribeFileSystemsOutput, error)
	DescribeFileSystemsAsync(ctx workflow.Context, input *efs.DescribeFileSystemsInput) *EFSDescribeFileSystemsFuture

	DescribeLifecycleConfiguration(ctx workflow.Context, input *efs.DescribeLifecycleConfigurationInput) (*efs.DescribeLifecycleConfigurationOutput, error)
	DescribeLifecycleConfigurationAsync(ctx workflow.Context, input *efs.DescribeLifecycleConfigurationInput) *EFSDescribeLifecycleConfigurationFuture

	DescribeMountTargetSecurityGroups(ctx workflow.Context, input *efs.DescribeMountTargetSecurityGroupsInput) (*efs.DescribeMountTargetSecurityGroupsOutput, error)
	DescribeMountTargetSecurityGroupsAsync(ctx workflow.Context, input *efs.DescribeMountTargetSecurityGroupsInput) *EFSDescribeMountTargetSecurityGroupsFuture

	DescribeMountTargets(ctx workflow.Context, input *efs.DescribeMountTargetsInput) (*efs.DescribeMountTargetsOutput, error)
	DescribeMountTargetsAsync(ctx workflow.Context, input *efs.DescribeMountTargetsInput) *EFSDescribeMountTargetsFuture

	DescribeTags(ctx workflow.Context, input *efs.DescribeTagsInput) (*efs.DescribeTagsOutput, error)
	DescribeTagsAsync(ctx workflow.Context, input *efs.DescribeTagsInput) *EFSDescribeTagsFuture

	ListTagsForResource(ctx workflow.Context, input *efs.ListTagsForResourceInput) (*efs.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *efs.ListTagsForResourceInput) *EFSListTagsForResourceFuture

	ModifyMountTargetSecurityGroups(ctx workflow.Context, input *efs.ModifyMountTargetSecurityGroupsInput) (*efs.ModifyMountTargetSecurityGroupsOutput, error)
	ModifyMountTargetSecurityGroupsAsync(ctx workflow.Context, input *efs.ModifyMountTargetSecurityGroupsInput) *EFSModifyMountTargetSecurityGroupsFuture

	PutBackupPolicy(ctx workflow.Context, input *efs.PutBackupPolicyInput) (*efs.PutBackupPolicyOutput, error)
	PutBackupPolicyAsync(ctx workflow.Context, input *efs.PutBackupPolicyInput) *EFSPutBackupPolicyFuture

	PutFileSystemPolicy(ctx workflow.Context, input *efs.PutFileSystemPolicyInput) (*efs.PutFileSystemPolicyOutput, error)
	PutFileSystemPolicyAsync(ctx workflow.Context, input *efs.PutFileSystemPolicyInput) *EFSPutFileSystemPolicyFuture

	PutLifecycleConfiguration(ctx workflow.Context, input *efs.PutLifecycleConfigurationInput) (*efs.PutLifecycleConfigurationOutput, error)
	PutLifecycleConfigurationAsync(ctx workflow.Context, input *efs.PutLifecycleConfigurationInput) *EFSPutLifecycleConfigurationFuture

	TagResource(ctx workflow.Context, input *efs.TagResourceInput) (*efs.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *efs.TagResourceInput) *EFSTagResourceFuture

	UntagResource(ctx workflow.Context, input *efs.UntagResourceInput) (*efs.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *efs.UntagResourceInput) *EFSUntagResourceFuture

	UpdateFileSystem(ctx workflow.Context, input *efs.UpdateFileSystemInput) (*efs.UpdateFileSystemOutput, error)
	UpdateFileSystemAsync(ctx workflow.Context, input *efs.UpdateFileSystemInput) *EFSUpdateFileSystemFuture
}

type EFSStub struct{}

func NewEFSStub() EFSClient {
	return &EFSStub{}
}

type EFSCreateAccessPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSCreateAccessPointFuture) Get(ctx workflow.Context) (*efs.CreateAccessPointOutput, error) {
	var output efs.CreateAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSCreateFileSystemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSCreateFileSystemFuture) Get(ctx workflow.Context) (*efs.FileSystemDescription, error) {
	var output efs.FileSystemDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSCreateMountTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSCreateMountTargetFuture) Get(ctx workflow.Context) (*efs.MountTargetDescription, error) {
	var output efs.MountTargetDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSCreateTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSCreateTagsFuture) Get(ctx workflow.Context) (*efs.CreateTagsOutput, error) {
	var output efs.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDeleteAccessPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDeleteAccessPointFuture) Get(ctx workflow.Context) (*efs.DeleteAccessPointOutput, error) {
	var output efs.DeleteAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDeleteFileSystemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDeleteFileSystemFuture) Get(ctx workflow.Context) (*efs.DeleteFileSystemOutput, error) {
	var output efs.DeleteFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDeleteFileSystemPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDeleteFileSystemPolicyFuture) Get(ctx workflow.Context) (*efs.DeleteFileSystemPolicyOutput, error) {
	var output efs.DeleteFileSystemPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDeleteMountTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDeleteMountTargetFuture) Get(ctx workflow.Context) (*efs.DeleteMountTargetOutput, error) {
	var output efs.DeleteMountTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDeleteTagsFuture) Get(ctx workflow.Context) (*efs.DeleteTagsOutput, error) {
	var output efs.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDescribeAccessPointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDescribeAccessPointsFuture) Get(ctx workflow.Context) (*efs.DescribeAccessPointsOutput, error) {
	var output efs.DescribeAccessPointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDescribeBackupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDescribeBackupPolicyFuture) Get(ctx workflow.Context) (*efs.DescribeBackupPolicyOutput, error) {
	var output efs.DescribeBackupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDescribeFileSystemPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDescribeFileSystemPolicyFuture) Get(ctx workflow.Context) (*efs.DescribeFileSystemPolicyOutput, error) {
	var output efs.DescribeFileSystemPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDescribeFileSystemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDescribeFileSystemsFuture) Get(ctx workflow.Context) (*efs.DescribeFileSystemsOutput, error) {
	var output efs.DescribeFileSystemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDescribeLifecycleConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDescribeLifecycleConfigurationFuture) Get(ctx workflow.Context) (*efs.DescribeLifecycleConfigurationOutput, error) {
	var output efs.DescribeLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDescribeMountTargetSecurityGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDescribeMountTargetSecurityGroupsFuture) Get(ctx workflow.Context) (*efs.DescribeMountTargetSecurityGroupsOutput, error) {
	var output efs.DescribeMountTargetSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDescribeMountTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDescribeMountTargetsFuture) Get(ctx workflow.Context) (*efs.DescribeMountTargetsOutput, error) {
	var output efs.DescribeMountTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSDescribeTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSDescribeTagsFuture) Get(ctx workflow.Context) (*efs.DescribeTagsOutput, error) {
	var output efs.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSListTagsForResourceFuture) Get(ctx workflow.Context) (*efs.ListTagsForResourceOutput, error) {
	var output efs.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSModifyMountTargetSecurityGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSModifyMountTargetSecurityGroupsFuture) Get(ctx workflow.Context) (*efs.ModifyMountTargetSecurityGroupsOutput, error) {
	var output efs.ModifyMountTargetSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSPutBackupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSPutBackupPolicyFuture) Get(ctx workflow.Context) (*efs.PutBackupPolicyOutput, error) {
	var output efs.PutBackupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSPutFileSystemPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSPutFileSystemPolicyFuture) Get(ctx workflow.Context) (*efs.PutFileSystemPolicyOutput, error) {
	var output efs.PutFileSystemPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSPutLifecycleConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSPutLifecycleConfigurationFuture) Get(ctx workflow.Context) (*efs.PutLifecycleConfigurationOutput, error) {
	var output efs.PutLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSTagResourceFuture) Get(ctx workflow.Context) (*efs.TagResourceOutput, error) {
	var output efs.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSUntagResourceFuture) Get(ctx workflow.Context) (*efs.UntagResourceOutput, error) {
	var output efs.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EFSUpdateFileSystemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EFSUpdateFileSystemFuture) Get(ctx workflow.Context) (*efs.UpdateFileSystemOutput, error) {
	var output efs.UpdateFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) CreateAccessPoint(ctx workflow.Context, input *efs.CreateAccessPointInput) (*efs.CreateAccessPointOutput, error) {
	var output efs.CreateAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.CreateAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) CreateAccessPointAsync(ctx workflow.Context, input *efs.CreateAccessPointInput) *EFSCreateAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.CreateAccessPoint", input)
	return &EFSCreateAccessPointFuture{Future: future}
}

func (a *EFSStub) CreateFileSystem(ctx workflow.Context, input *efs.CreateFileSystemInput) (*efs.FileSystemDescription, error) {
	var output efs.FileSystemDescription
	err := workflow.ExecuteActivity(ctx, "aws.efs.CreateFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) CreateFileSystemAsync(ctx workflow.Context, input *efs.CreateFileSystemInput) *EFSCreateFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.CreateFileSystem", input)
	return &EFSCreateFileSystemFuture{Future: future}
}

func (a *EFSStub) CreateMountTarget(ctx workflow.Context, input *efs.CreateMountTargetInput) (*efs.MountTargetDescription, error) {
	var output efs.MountTargetDescription
	err := workflow.ExecuteActivity(ctx, "aws.efs.CreateMountTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) CreateMountTargetAsync(ctx workflow.Context, input *efs.CreateMountTargetInput) *EFSCreateMountTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.CreateMountTarget", input)
	return &EFSCreateMountTargetFuture{Future: future}
}

func (a *EFSStub) CreateTags(ctx workflow.Context, input *efs.CreateTagsInput) (*efs.CreateTagsOutput, error) {
	var output efs.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) CreateTagsAsync(ctx workflow.Context, input *efs.CreateTagsInput) *EFSCreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.CreateTags", input)
	return &EFSCreateTagsFuture{Future: future}
}

func (a *EFSStub) DeleteAccessPoint(ctx workflow.Context, input *efs.DeleteAccessPointInput) (*efs.DeleteAccessPointOutput, error) {
	var output efs.DeleteAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DeleteAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DeleteAccessPointAsync(ctx workflow.Context, input *efs.DeleteAccessPointInput) *EFSDeleteAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DeleteAccessPoint", input)
	return &EFSDeleteAccessPointFuture{Future: future}
}

func (a *EFSStub) DeleteFileSystem(ctx workflow.Context, input *efs.DeleteFileSystemInput) (*efs.DeleteFileSystemOutput, error) {
	var output efs.DeleteFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DeleteFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DeleteFileSystemAsync(ctx workflow.Context, input *efs.DeleteFileSystemInput) *EFSDeleteFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DeleteFileSystem", input)
	return &EFSDeleteFileSystemFuture{Future: future}
}

func (a *EFSStub) DeleteFileSystemPolicy(ctx workflow.Context, input *efs.DeleteFileSystemPolicyInput) (*efs.DeleteFileSystemPolicyOutput, error) {
	var output efs.DeleteFileSystemPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DeleteFileSystemPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DeleteFileSystemPolicyAsync(ctx workflow.Context, input *efs.DeleteFileSystemPolicyInput) *EFSDeleteFileSystemPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DeleteFileSystemPolicy", input)
	return &EFSDeleteFileSystemPolicyFuture{Future: future}
}

func (a *EFSStub) DeleteMountTarget(ctx workflow.Context, input *efs.DeleteMountTargetInput) (*efs.DeleteMountTargetOutput, error) {
	var output efs.DeleteMountTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DeleteMountTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DeleteMountTargetAsync(ctx workflow.Context, input *efs.DeleteMountTargetInput) *EFSDeleteMountTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DeleteMountTarget", input)
	return &EFSDeleteMountTargetFuture{Future: future}
}

func (a *EFSStub) DeleteTags(ctx workflow.Context, input *efs.DeleteTagsInput) (*efs.DeleteTagsOutput, error) {
	var output efs.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DeleteTagsAsync(ctx workflow.Context, input *efs.DeleteTagsInput) *EFSDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DeleteTags", input)
	return &EFSDeleteTagsFuture{Future: future}
}

func (a *EFSStub) DescribeAccessPoints(ctx workflow.Context, input *efs.DescribeAccessPointsInput) (*efs.DescribeAccessPointsOutput, error) {
	var output efs.DescribeAccessPointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeAccessPoints", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeAccessPointsAsync(ctx workflow.Context, input *efs.DescribeAccessPointsInput) *EFSDescribeAccessPointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeAccessPoints", input)
	return &EFSDescribeAccessPointsFuture{Future: future}
}

func (a *EFSStub) DescribeBackupPolicy(ctx workflow.Context, input *efs.DescribeBackupPolicyInput) (*efs.DescribeBackupPolicyOutput, error) {
	var output efs.DescribeBackupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeBackupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeBackupPolicyAsync(ctx workflow.Context, input *efs.DescribeBackupPolicyInput) *EFSDescribeBackupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeBackupPolicy", input)
	return &EFSDescribeBackupPolicyFuture{Future: future}
}

func (a *EFSStub) DescribeFileSystemPolicy(ctx workflow.Context, input *efs.DescribeFileSystemPolicyInput) (*efs.DescribeFileSystemPolicyOutput, error) {
	var output efs.DescribeFileSystemPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeFileSystemPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeFileSystemPolicyAsync(ctx workflow.Context, input *efs.DescribeFileSystemPolicyInput) *EFSDescribeFileSystemPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeFileSystemPolicy", input)
	return &EFSDescribeFileSystemPolicyFuture{Future: future}
}

func (a *EFSStub) DescribeFileSystems(ctx workflow.Context, input *efs.DescribeFileSystemsInput) (*efs.DescribeFileSystemsOutput, error) {
	var output efs.DescribeFileSystemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeFileSystems", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeFileSystemsAsync(ctx workflow.Context, input *efs.DescribeFileSystemsInput) *EFSDescribeFileSystemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeFileSystems", input)
	return &EFSDescribeFileSystemsFuture{Future: future}
}

func (a *EFSStub) DescribeLifecycleConfiguration(ctx workflow.Context, input *efs.DescribeLifecycleConfigurationInput) (*efs.DescribeLifecycleConfigurationOutput, error) {
	var output efs.DescribeLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeLifecycleConfigurationAsync(ctx workflow.Context, input *efs.DescribeLifecycleConfigurationInput) *EFSDescribeLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeLifecycleConfiguration", input)
	return &EFSDescribeLifecycleConfigurationFuture{Future: future}
}

func (a *EFSStub) DescribeMountTargetSecurityGroups(ctx workflow.Context, input *efs.DescribeMountTargetSecurityGroupsInput) (*efs.DescribeMountTargetSecurityGroupsOutput, error) {
	var output efs.DescribeMountTargetSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeMountTargetSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeMountTargetSecurityGroupsAsync(ctx workflow.Context, input *efs.DescribeMountTargetSecurityGroupsInput) *EFSDescribeMountTargetSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeMountTargetSecurityGroups", input)
	return &EFSDescribeMountTargetSecurityGroupsFuture{Future: future}
}

func (a *EFSStub) DescribeMountTargets(ctx workflow.Context, input *efs.DescribeMountTargetsInput) (*efs.DescribeMountTargetsOutput, error) {
	var output efs.DescribeMountTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeMountTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeMountTargetsAsync(ctx workflow.Context, input *efs.DescribeMountTargetsInput) *EFSDescribeMountTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeMountTargets", input)
	return &EFSDescribeMountTargetsFuture{Future: future}
}

func (a *EFSStub) DescribeTags(ctx workflow.Context, input *efs.DescribeTagsInput) (*efs.DescribeTagsOutput, error) {
	var output efs.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) DescribeTagsAsync(ctx workflow.Context, input *efs.DescribeTagsInput) *EFSDescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.DescribeTags", input)
	return &EFSDescribeTagsFuture{Future: future}
}

func (a *EFSStub) ListTagsForResource(ctx workflow.Context, input *efs.ListTagsForResourceInput) (*efs.ListTagsForResourceOutput, error) {
	var output efs.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) ListTagsForResourceAsync(ctx workflow.Context, input *efs.ListTagsForResourceInput) *EFSListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.ListTagsForResource", input)
	return &EFSListTagsForResourceFuture{Future: future}
}

func (a *EFSStub) ModifyMountTargetSecurityGroups(ctx workflow.Context, input *efs.ModifyMountTargetSecurityGroupsInput) (*efs.ModifyMountTargetSecurityGroupsOutput, error) {
	var output efs.ModifyMountTargetSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.ModifyMountTargetSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) ModifyMountTargetSecurityGroupsAsync(ctx workflow.Context, input *efs.ModifyMountTargetSecurityGroupsInput) *EFSModifyMountTargetSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.ModifyMountTargetSecurityGroups", input)
	return &EFSModifyMountTargetSecurityGroupsFuture{Future: future}
}

func (a *EFSStub) PutBackupPolicy(ctx workflow.Context, input *efs.PutBackupPolicyInput) (*efs.PutBackupPolicyOutput, error) {
	var output efs.PutBackupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.PutBackupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) PutBackupPolicyAsync(ctx workflow.Context, input *efs.PutBackupPolicyInput) *EFSPutBackupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.PutBackupPolicy", input)
	return &EFSPutBackupPolicyFuture{Future: future}
}

func (a *EFSStub) PutFileSystemPolicy(ctx workflow.Context, input *efs.PutFileSystemPolicyInput) (*efs.PutFileSystemPolicyOutput, error) {
	var output efs.PutFileSystemPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.PutFileSystemPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) PutFileSystemPolicyAsync(ctx workflow.Context, input *efs.PutFileSystemPolicyInput) *EFSPutFileSystemPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.PutFileSystemPolicy", input)
	return &EFSPutFileSystemPolicyFuture{Future: future}
}

func (a *EFSStub) PutLifecycleConfiguration(ctx workflow.Context, input *efs.PutLifecycleConfigurationInput) (*efs.PutLifecycleConfigurationOutput, error) {
	var output efs.PutLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.PutLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) PutLifecycleConfigurationAsync(ctx workflow.Context, input *efs.PutLifecycleConfigurationInput) *EFSPutLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.PutLifecycleConfiguration", input)
	return &EFSPutLifecycleConfigurationFuture{Future: future}
}

func (a *EFSStub) TagResource(ctx workflow.Context, input *efs.TagResourceInput) (*efs.TagResourceOutput, error) {
	var output efs.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) TagResourceAsync(ctx workflow.Context, input *efs.TagResourceInput) *EFSTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.TagResource", input)
	return &EFSTagResourceFuture{Future: future}
}

func (a *EFSStub) UntagResource(ctx workflow.Context, input *efs.UntagResourceInput) (*efs.UntagResourceOutput, error) {
	var output efs.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) UntagResourceAsync(ctx workflow.Context, input *efs.UntagResourceInput) *EFSUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.UntagResource", input)
	return &EFSUntagResourceFuture{Future: future}
}

func (a *EFSStub) UpdateFileSystem(ctx workflow.Context, input *efs.UpdateFileSystemInput) (*efs.UpdateFileSystemOutput, error) {
	var output efs.UpdateFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws.efs.UpdateFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *EFSStub) UpdateFileSystemAsync(ctx workflow.Context, input *efs.UpdateFileSystemInput) *EFSUpdateFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.efs.UpdateFileSystem", input)
	return &EFSUpdateFileSystemFuture{Future: future}
}
