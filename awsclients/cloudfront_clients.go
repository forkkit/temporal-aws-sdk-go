// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cloudfront"
	"go.temporal.io/sdk/workflow"
)

type CloudFrontClient interface {
	CreateCachePolicy(ctx workflow.Context, input *cloudfront.CreateCachePolicyInput) (*cloudfront.CreateCachePolicyOutput, error)
	CreateCachePolicyAsync(ctx workflow.Context, input *cloudfront.CreateCachePolicyInput) *CloudfrontCreateCachePolicyResult

	CreateCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error)
	CreateCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput) *CloudfrontCreateCloudFrontOriginAccessIdentityResult

	CreateDistribution(ctx workflow.Context, input *cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error)
	CreateDistributionAsync(ctx workflow.Context, input *cloudfront.CreateDistributionInput) *CloudfrontCreateDistributionResult

	CreateDistributionWithTags(ctx workflow.Context, input *cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error)
	CreateDistributionWithTagsAsync(ctx workflow.Context, input *cloudfront.CreateDistributionWithTagsInput) *CloudfrontCreateDistributionWithTagsResult

	CreateFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error)
	CreateFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput) *CloudfrontCreateFieldLevelEncryptionConfigResult

	CreateFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error)
	CreateFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput) *CloudfrontCreateFieldLevelEncryptionProfileResult

	CreateInvalidation(ctx workflow.Context, input *cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error)
	CreateInvalidationAsync(ctx workflow.Context, input *cloudfront.CreateInvalidationInput) *CloudfrontCreateInvalidationResult

	CreateMonitoringSubscription(ctx workflow.Context, input *cloudfront.CreateMonitoringSubscriptionInput) (*cloudfront.CreateMonitoringSubscriptionOutput, error)
	CreateMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.CreateMonitoringSubscriptionInput) *CloudfrontCreateMonitoringSubscriptionResult

	CreateOriginRequestPolicy(ctx workflow.Context, input *cloudfront.CreateOriginRequestPolicyInput) (*cloudfront.CreateOriginRequestPolicyOutput, error)
	CreateOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.CreateOriginRequestPolicyInput) *CloudfrontCreateOriginRequestPolicyResult

	CreatePublicKey(ctx workflow.Context, input *cloudfront.CreatePublicKeyInput) (*cloudfront.CreatePublicKeyOutput, error)
	CreatePublicKeyAsync(ctx workflow.Context, input *cloudfront.CreatePublicKeyInput) *CloudfrontCreatePublicKeyResult

	CreateRealtimeLogConfig(ctx workflow.Context, input *cloudfront.CreateRealtimeLogConfigInput) (*cloudfront.CreateRealtimeLogConfigOutput, error)
	CreateRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.CreateRealtimeLogConfigInput) *CloudfrontCreateRealtimeLogConfigResult

	CreateStreamingDistribution(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error)
	CreateStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionInput) *CloudfrontCreateStreamingDistributionResult

	CreateStreamingDistributionWithTags(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error)
	CreateStreamingDistributionWithTagsAsync(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput) *CloudfrontCreateStreamingDistributionWithTagsResult

	DeleteCachePolicy(ctx workflow.Context, input *cloudfront.DeleteCachePolicyInput) (*cloudfront.DeleteCachePolicyOutput, error)
	DeleteCachePolicyAsync(ctx workflow.Context, input *cloudfront.DeleteCachePolicyInput) *CloudfrontDeleteCachePolicyResult

	DeleteCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error)
	DeleteCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) *CloudfrontDeleteCloudFrontOriginAccessIdentityResult

	DeleteDistribution(ctx workflow.Context, input *cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error)
	DeleteDistributionAsync(ctx workflow.Context, input *cloudfront.DeleteDistributionInput) *CloudfrontDeleteDistributionResult

	DeleteFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error)
	DeleteFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput) *CloudfrontDeleteFieldLevelEncryptionConfigResult

	DeleteFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error)
	DeleteFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput) *CloudfrontDeleteFieldLevelEncryptionProfileResult

	DeleteMonitoringSubscription(ctx workflow.Context, input *cloudfront.DeleteMonitoringSubscriptionInput) (*cloudfront.DeleteMonitoringSubscriptionOutput, error)
	DeleteMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.DeleteMonitoringSubscriptionInput) *CloudfrontDeleteMonitoringSubscriptionResult

	DeleteOriginRequestPolicy(ctx workflow.Context, input *cloudfront.DeleteOriginRequestPolicyInput) (*cloudfront.DeleteOriginRequestPolicyOutput, error)
	DeleteOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.DeleteOriginRequestPolicyInput) *CloudfrontDeleteOriginRequestPolicyResult

	DeletePublicKey(ctx workflow.Context, input *cloudfront.DeletePublicKeyInput) (*cloudfront.DeletePublicKeyOutput, error)
	DeletePublicKeyAsync(ctx workflow.Context, input *cloudfront.DeletePublicKeyInput) *CloudfrontDeletePublicKeyResult

	DeleteRealtimeLogConfig(ctx workflow.Context, input *cloudfront.DeleteRealtimeLogConfigInput) (*cloudfront.DeleteRealtimeLogConfigOutput, error)
	DeleteRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.DeleteRealtimeLogConfigInput) *CloudfrontDeleteRealtimeLogConfigResult

	DeleteStreamingDistribution(ctx workflow.Context, input *cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error)
	DeleteStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.DeleteStreamingDistributionInput) *CloudfrontDeleteStreamingDistributionResult

	GetCachePolicy(ctx workflow.Context, input *cloudfront.GetCachePolicyInput) (*cloudfront.GetCachePolicyOutput, error)
	GetCachePolicyAsync(ctx workflow.Context, input *cloudfront.GetCachePolicyInput) *CloudfrontGetCachePolicyResult

	GetCachePolicyConfig(ctx workflow.Context, input *cloudfront.GetCachePolicyConfigInput) (*cloudfront.GetCachePolicyConfigOutput, error)
	GetCachePolicyConfigAsync(ctx workflow.Context, input *cloudfront.GetCachePolicyConfigInput) *CloudfrontGetCachePolicyConfigResult

	GetCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error)
	GetCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput) *CloudfrontGetCloudFrontOriginAccessIdentityResult

	GetCloudFrontOriginAccessIdentityConfig(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error)
	GetCloudFrontOriginAccessIdentityConfigAsync(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) *CloudfrontGetCloudFrontOriginAccessIdentityConfigResult

	GetDistribution(ctx workflow.Context, input *cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error)
	GetDistributionAsync(ctx workflow.Context, input *cloudfront.GetDistributionInput) *CloudfrontGetDistributionResult

	GetDistributionConfig(ctx workflow.Context, input *cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error)
	GetDistributionConfigAsync(ctx workflow.Context, input *cloudfront.GetDistributionConfigInput) *CloudfrontGetDistributionConfigResult

	GetFieldLevelEncryption(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionInput) (*cloudfront.GetFieldLevelEncryptionOutput, error)
	GetFieldLevelEncryptionAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionInput) *CloudfrontGetFieldLevelEncryptionResult

	GetFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error)
	GetFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput) *CloudfrontGetFieldLevelEncryptionConfigResult

	GetFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error)
	GetFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput) *CloudfrontGetFieldLevelEncryptionProfileResult

	GetFieldLevelEncryptionProfileConfig(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error)
	GetFieldLevelEncryptionProfileConfigAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput) *CloudfrontGetFieldLevelEncryptionProfileConfigResult

	GetInvalidation(ctx workflow.Context, input *cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error)
	GetInvalidationAsync(ctx workflow.Context, input *cloudfront.GetInvalidationInput) *CloudfrontGetInvalidationResult

	GetMonitoringSubscription(ctx workflow.Context, input *cloudfront.GetMonitoringSubscriptionInput) (*cloudfront.GetMonitoringSubscriptionOutput, error)
	GetMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.GetMonitoringSubscriptionInput) *CloudfrontGetMonitoringSubscriptionResult

	GetOriginRequestPolicy(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyInput) (*cloudfront.GetOriginRequestPolicyOutput, error)
	GetOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyInput) *CloudfrontGetOriginRequestPolicyResult

	GetOriginRequestPolicyConfig(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyConfigInput) (*cloudfront.GetOriginRequestPolicyConfigOutput, error)
	GetOriginRequestPolicyConfigAsync(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyConfigInput) *CloudfrontGetOriginRequestPolicyConfigResult

	GetPublicKey(ctx workflow.Context, input *cloudfront.GetPublicKeyInput) (*cloudfront.GetPublicKeyOutput, error)
	GetPublicKeyAsync(ctx workflow.Context, input *cloudfront.GetPublicKeyInput) *CloudfrontGetPublicKeyResult

	GetPublicKeyConfig(ctx workflow.Context, input *cloudfront.GetPublicKeyConfigInput) (*cloudfront.GetPublicKeyConfigOutput, error)
	GetPublicKeyConfigAsync(ctx workflow.Context, input *cloudfront.GetPublicKeyConfigInput) *CloudfrontGetPublicKeyConfigResult

	GetRealtimeLogConfig(ctx workflow.Context, input *cloudfront.GetRealtimeLogConfigInput) (*cloudfront.GetRealtimeLogConfigOutput, error)
	GetRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.GetRealtimeLogConfigInput) *CloudfrontGetRealtimeLogConfigResult

	GetStreamingDistribution(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error)
	GetStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) *CloudfrontGetStreamingDistributionResult

	GetStreamingDistributionConfig(ctx workflow.Context, input *cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error)
	GetStreamingDistributionConfigAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionConfigInput) *CloudfrontGetStreamingDistributionConfigResult

	ListCachePolicies(ctx workflow.Context, input *cloudfront.ListCachePoliciesInput) (*cloudfront.ListCachePoliciesOutput, error)
	ListCachePoliciesAsync(ctx workflow.Context, input *cloudfront.ListCachePoliciesInput) *CloudfrontListCachePoliciesResult

	ListCloudFrontOriginAccessIdentities(ctx workflow.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error)
	ListCloudFrontOriginAccessIdentitiesAsync(ctx workflow.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) *CloudfrontListCloudFrontOriginAccessIdentitiesResult

	ListDistributions(ctx workflow.Context, input *cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error)
	ListDistributionsAsync(ctx workflow.Context, input *cloudfront.ListDistributionsInput) *CloudfrontListDistributionsResult

	ListDistributionsByCachePolicyId(ctx workflow.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error)
	ListDistributionsByCachePolicyIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput) *CloudfrontListDistributionsByCachePolicyIdResult

	ListDistributionsByOriginRequestPolicyId(ctx workflow.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error)
	ListDistributionsByOriginRequestPolicyIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) *CloudfrontListDistributionsByOriginRequestPolicyIdResult

	ListDistributionsByRealtimeLogConfig(ctx workflow.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error)
	ListDistributionsByRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput) *CloudfrontListDistributionsByRealtimeLogConfigResult

	ListDistributionsByWebACLId(ctx workflow.Context, input *cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error)
	ListDistributionsByWebACLIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByWebACLIdInput) *CloudfrontListDistributionsByWebACLIdResult

	ListFieldLevelEncryptionConfigs(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error)
	ListFieldLevelEncryptionConfigsAsync(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput) *CloudfrontListFieldLevelEncryptionConfigsResult

	ListFieldLevelEncryptionProfiles(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error)
	ListFieldLevelEncryptionProfilesAsync(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput) *CloudfrontListFieldLevelEncryptionProfilesResult

	ListInvalidations(ctx workflow.Context, input *cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error)
	ListInvalidationsAsync(ctx workflow.Context, input *cloudfront.ListInvalidationsInput) *CloudfrontListInvalidationsResult

	ListOriginRequestPolicies(ctx workflow.Context, input *cloudfront.ListOriginRequestPoliciesInput) (*cloudfront.ListOriginRequestPoliciesOutput, error)
	ListOriginRequestPoliciesAsync(ctx workflow.Context, input *cloudfront.ListOriginRequestPoliciesInput) *CloudfrontListOriginRequestPoliciesResult

	ListPublicKeys(ctx workflow.Context, input *cloudfront.ListPublicKeysInput) (*cloudfront.ListPublicKeysOutput, error)
	ListPublicKeysAsync(ctx workflow.Context, input *cloudfront.ListPublicKeysInput) *CloudfrontListPublicKeysResult

	ListRealtimeLogConfigs(ctx workflow.Context, input *cloudfront.ListRealtimeLogConfigsInput) (*cloudfront.ListRealtimeLogConfigsOutput, error)
	ListRealtimeLogConfigsAsync(ctx workflow.Context, input *cloudfront.ListRealtimeLogConfigsInput) *CloudfrontListRealtimeLogConfigsResult

	ListStreamingDistributions(ctx workflow.Context, input *cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error)
	ListStreamingDistributionsAsync(ctx workflow.Context, input *cloudfront.ListStreamingDistributionsInput) *CloudfrontListStreamingDistributionsResult

	ListTagsForResource(ctx workflow.Context, input *cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *cloudfront.ListTagsForResourceInput) *CloudfrontListTagsForResourceResult

	TagResource(ctx workflow.Context, input *cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *cloudfront.TagResourceInput) *CloudfrontTagResourceResult

	UntagResource(ctx workflow.Context, input *cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *cloudfront.UntagResourceInput) *CloudfrontUntagResourceResult

	UpdateCachePolicy(ctx workflow.Context, input *cloudfront.UpdateCachePolicyInput) (*cloudfront.UpdateCachePolicyOutput, error)
	UpdateCachePolicyAsync(ctx workflow.Context, input *cloudfront.UpdateCachePolicyInput) *CloudfrontUpdateCachePolicyResult

	UpdateCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error)
	UpdateCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) *CloudfrontUpdateCloudFrontOriginAccessIdentityResult

	UpdateDistribution(ctx workflow.Context, input *cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error)
	UpdateDistributionAsync(ctx workflow.Context, input *cloudfront.UpdateDistributionInput) *CloudfrontUpdateDistributionResult

	UpdateFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error)
	UpdateFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput) *CloudfrontUpdateFieldLevelEncryptionConfigResult

	UpdateFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error)
	UpdateFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput) *CloudfrontUpdateFieldLevelEncryptionProfileResult

	UpdateOriginRequestPolicy(ctx workflow.Context, input *cloudfront.UpdateOriginRequestPolicyInput) (*cloudfront.UpdateOriginRequestPolicyOutput, error)
	UpdateOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.UpdateOriginRequestPolicyInput) *CloudfrontUpdateOriginRequestPolicyResult

	UpdatePublicKey(ctx workflow.Context, input *cloudfront.UpdatePublicKeyInput) (*cloudfront.UpdatePublicKeyOutput, error)
	UpdatePublicKeyAsync(ctx workflow.Context, input *cloudfront.UpdatePublicKeyInput) *CloudfrontUpdatePublicKeyResult

	UpdateRealtimeLogConfig(ctx workflow.Context, input *cloudfront.UpdateRealtimeLogConfigInput) (*cloudfront.UpdateRealtimeLogConfigOutput, error)
	UpdateRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.UpdateRealtimeLogConfigInput) *CloudfrontUpdateRealtimeLogConfigResult

	UpdateStreamingDistribution(ctx workflow.Context, input *cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error)
	UpdateStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.UpdateStreamingDistributionInput) *CloudfrontUpdateStreamingDistributionResult

	WaitUntilDistributionDeployed(ctx workflow.Context, input *cloudfront.GetDistributionInput) error

	WaitUntilInvalidationCompleted(ctx workflow.Context, input *cloudfront.GetInvalidationInput) error

	WaitUntilStreamingDistributionDeployed(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) error
}

type CloudFrontStub struct{}

func NewCloudFrontStub() CloudFrontClient {
	return &CloudFrontStub{}
}


type CloudfrontCreateCachePolicyResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreateCachePolicyResult) Get(ctx workflow.Context) (*cloudfront.CreateCachePolicyOutput, error) {
	var output cloudfront.CreateCachePolicyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateCloudFrontOriginAccessIdentityResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreateCloudFrontOriginAccessIdentityResult) Get(ctx workflow.Context) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateDistributionResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreateDistributionResult) Get(ctx workflow.Context) (*cloudfront.CreateDistributionOutput, error) {
	var output cloudfront.CreateDistributionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateDistributionWithTagsResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreateDistributionWithTagsResult) Get(ctx workflow.Context) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	var output cloudfront.CreateDistributionWithTagsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateFieldLevelEncryptionConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreateFieldLevelEncryptionConfigResult) Get(ctx workflow.Context) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateFieldLevelEncryptionProfileResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreateFieldLevelEncryptionProfileResult) Get(ctx workflow.Context) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionProfileOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateInvalidationResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreateInvalidationResult) Get(ctx workflow.Context) (*cloudfront.CreateInvalidationOutput, error) {
	var output cloudfront.CreateInvalidationOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateMonitoringSubscriptionResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreateMonitoringSubscriptionResult) Get(ctx workflow.Context) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	var output cloudfront.CreateMonitoringSubscriptionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateOriginRequestPolicyResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreateOriginRequestPolicyResult) Get(ctx workflow.Context) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	var output cloudfront.CreateOriginRequestPolicyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreatePublicKeyResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreatePublicKeyResult) Get(ctx workflow.Context) (*cloudfront.CreatePublicKeyOutput, error) {
	var output cloudfront.CreatePublicKeyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateRealtimeLogConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreateRealtimeLogConfigResult) Get(ctx workflow.Context) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	var output cloudfront.CreateRealtimeLogConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateStreamingDistributionResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreateStreamingDistributionResult) Get(ctx workflow.Context) (*cloudfront.CreateStreamingDistributionOutput, error) {
	var output cloudfront.CreateStreamingDistributionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateStreamingDistributionWithTagsResult struct {
	Result workflow.Future
}

func (r *CloudfrontCreateStreamingDistributionWithTagsResult) Get(ctx workflow.Context) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	var output cloudfront.CreateStreamingDistributionWithTagsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteCachePolicyResult struct {
	Result workflow.Future
}

func (r *CloudfrontDeleteCachePolicyResult) Get(ctx workflow.Context) (*cloudfront.DeleteCachePolicyOutput, error) {
	var output cloudfront.DeleteCachePolicyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteCloudFrontOriginAccessIdentityResult struct {
	Result workflow.Future
}

func (r *CloudfrontDeleteCloudFrontOriginAccessIdentityResult) Get(ctx workflow.Context) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteDistributionResult struct {
	Result workflow.Future
}

func (r *CloudfrontDeleteDistributionResult) Get(ctx workflow.Context) (*cloudfront.DeleteDistributionOutput, error) {
	var output cloudfront.DeleteDistributionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteFieldLevelEncryptionConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontDeleteFieldLevelEncryptionConfigResult) Get(ctx workflow.Context) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteFieldLevelEncryptionProfileResult struct {
	Result workflow.Future
}

func (r *CloudfrontDeleteFieldLevelEncryptionProfileResult) Get(ctx workflow.Context) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionProfileOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteMonitoringSubscriptionResult struct {
	Result workflow.Future
}

func (r *CloudfrontDeleteMonitoringSubscriptionResult) Get(ctx workflow.Context) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	var output cloudfront.DeleteMonitoringSubscriptionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteOriginRequestPolicyResult struct {
	Result workflow.Future
}

func (r *CloudfrontDeleteOriginRequestPolicyResult) Get(ctx workflow.Context) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	var output cloudfront.DeleteOriginRequestPolicyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeletePublicKeyResult struct {
	Result workflow.Future
}

func (r *CloudfrontDeletePublicKeyResult) Get(ctx workflow.Context) (*cloudfront.DeletePublicKeyOutput, error) {
	var output cloudfront.DeletePublicKeyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteRealtimeLogConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontDeleteRealtimeLogConfigResult) Get(ctx workflow.Context) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	var output cloudfront.DeleteRealtimeLogConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteStreamingDistributionResult struct {
	Result workflow.Future
}

func (r *CloudfrontDeleteStreamingDistributionResult) Get(ctx workflow.Context) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	var output cloudfront.DeleteStreamingDistributionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetCachePolicyResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetCachePolicyResult) Get(ctx workflow.Context) (*cloudfront.GetCachePolicyOutput, error) {
	var output cloudfront.GetCachePolicyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetCachePolicyConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetCachePolicyConfigResult) Get(ctx workflow.Context) (*cloudfront.GetCachePolicyConfigOutput, error) {
	var output cloudfront.GetCachePolicyConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetCloudFrontOriginAccessIdentityResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetCloudFrontOriginAccessIdentityResult) Get(ctx workflow.Context) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetCloudFrontOriginAccessIdentityConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetCloudFrontOriginAccessIdentityConfigResult) Get(ctx workflow.Context) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetDistributionResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetDistributionResult) Get(ctx workflow.Context) (*cloudfront.GetDistributionOutput, error) {
	var output cloudfront.GetDistributionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetDistributionConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetDistributionConfigResult) Get(ctx workflow.Context) (*cloudfront.GetDistributionConfigOutput, error) {
	var output cloudfront.GetDistributionConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetFieldLevelEncryptionResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetFieldLevelEncryptionResult) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetFieldLevelEncryptionConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetFieldLevelEncryptionConfigResult) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetFieldLevelEncryptionProfileResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetFieldLevelEncryptionProfileResult) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetFieldLevelEncryptionProfileConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetFieldLevelEncryptionProfileConfigResult) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetInvalidationResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetInvalidationResult) Get(ctx workflow.Context) (*cloudfront.GetInvalidationOutput, error) {
	var output cloudfront.GetInvalidationOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetMonitoringSubscriptionResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetMonitoringSubscriptionResult) Get(ctx workflow.Context) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	var output cloudfront.GetMonitoringSubscriptionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetOriginRequestPolicyResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetOriginRequestPolicyResult) Get(ctx workflow.Context) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	var output cloudfront.GetOriginRequestPolicyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetOriginRequestPolicyConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetOriginRequestPolicyConfigResult) Get(ctx workflow.Context) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	var output cloudfront.GetOriginRequestPolicyConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetPublicKeyResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetPublicKeyResult) Get(ctx workflow.Context) (*cloudfront.GetPublicKeyOutput, error) {
	var output cloudfront.GetPublicKeyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetPublicKeyConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetPublicKeyConfigResult) Get(ctx workflow.Context) (*cloudfront.GetPublicKeyConfigOutput, error) {
	var output cloudfront.GetPublicKeyConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetRealtimeLogConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetRealtimeLogConfigResult) Get(ctx workflow.Context) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	var output cloudfront.GetRealtimeLogConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetStreamingDistributionResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetStreamingDistributionResult) Get(ctx workflow.Context) (*cloudfront.GetStreamingDistributionOutput, error) {
	var output cloudfront.GetStreamingDistributionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetStreamingDistributionConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontGetStreamingDistributionConfigResult) Get(ctx workflow.Context) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	var output cloudfront.GetStreamingDistributionConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListCachePoliciesResult struct {
	Result workflow.Future
}

func (r *CloudfrontListCachePoliciesResult) Get(ctx workflow.Context) (*cloudfront.ListCachePoliciesOutput, error) {
	var output cloudfront.ListCachePoliciesOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListCloudFrontOriginAccessIdentitiesResult struct {
	Result workflow.Future
}

func (r *CloudfrontListCloudFrontOriginAccessIdentitiesResult) Get(ctx workflow.Context) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	var output cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListDistributionsResult struct {
	Result workflow.Future
}

func (r *CloudfrontListDistributionsResult) Get(ctx workflow.Context) (*cloudfront.ListDistributionsOutput, error) {
	var output cloudfront.ListDistributionsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListDistributionsByCachePolicyIdResult struct {
	Result workflow.Future
}

func (r *CloudfrontListDistributionsByCachePolicyIdResult) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByCachePolicyIdOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListDistributionsByOriginRequestPolicyIdResult struct {
	Result workflow.Future
}

func (r *CloudfrontListDistributionsByOriginRequestPolicyIdResult) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListDistributionsByRealtimeLogConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontListDistributionsByRealtimeLogConfigResult) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	var output cloudfront.ListDistributionsByRealtimeLogConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListDistributionsByWebACLIdResult struct {
	Result workflow.Future
}

func (r *CloudfrontListDistributionsByWebACLIdResult) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	var output cloudfront.ListDistributionsByWebACLIdOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListFieldLevelEncryptionConfigsResult struct {
	Result workflow.Future
}

func (r *CloudfrontListFieldLevelEncryptionConfigsResult) Get(ctx workflow.Context) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionConfigsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListFieldLevelEncryptionProfilesResult struct {
	Result workflow.Future
}

func (r *CloudfrontListFieldLevelEncryptionProfilesResult) Get(ctx workflow.Context) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionProfilesOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListInvalidationsResult struct {
	Result workflow.Future
}

func (r *CloudfrontListInvalidationsResult) Get(ctx workflow.Context) (*cloudfront.ListInvalidationsOutput, error) {
	var output cloudfront.ListInvalidationsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListOriginRequestPoliciesResult struct {
	Result workflow.Future
}

func (r *CloudfrontListOriginRequestPoliciesResult) Get(ctx workflow.Context) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	var output cloudfront.ListOriginRequestPoliciesOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListPublicKeysResult struct {
	Result workflow.Future
}

func (r *CloudfrontListPublicKeysResult) Get(ctx workflow.Context) (*cloudfront.ListPublicKeysOutput, error) {
	var output cloudfront.ListPublicKeysOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListRealtimeLogConfigsResult struct {
	Result workflow.Future
}

func (r *CloudfrontListRealtimeLogConfigsResult) Get(ctx workflow.Context) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	var output cloudfront.ListRealtimeLogConfigsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListStreamingDistributionsResult struct {
	Result workflow.Future
}

func (r *CloudfrontListStreamingDistributionsResult) Get(ctx workflow.Context) (*cloudfront.ListStreamingDistributionsOutput, error) {
	var output cloudfront.ListStreamingDistributionsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontListTagsForResourceResult struct {
	Result workflow.Future
}

func (r *CloudfrontListTagsForResourceResult) Get(ctx workflow.Context) (*cloudfront.ListTagsForResourceOutput, error) {
	var output cloudfront.ListTagsForResourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontTagResourceResult struct {
	Result workflow.Future
}

func (r *CloudfrontTagResourceResult) Get(ctx workflow.Context) (*cloudfront.TagResourceOutput, error) {
	var output cloudfront.TagResourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontUntagResourceResult struct {
	Result workflow.Future
}

func (r *CloudfrontUntagResourceResult) Get(ctx workflow.Context) (*cloudfront.UntagResourceOutput, error) {
	var output cloudfront.UntagResourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateCachePolicyResult struct {
	Result workflow.Future
}

func (r *CloudfrontUpdateCachePolicyResult) Get(ctx workflow.Context) (*cloudfront.UpdateCachePolicyOutput, error) {
	var output cloudfront.UpdateCachePolicyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateCloudFrontOriginAccessIdentityResult struct {
	Result workflow.Future
}

func (r *CloudfrontUpdateCloudFrontOriginAccessIdentityResult) Get(ctx workflow.Context) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateDistributionResult struct {
	Result workflow.Future
}

func (r *CloudfrontUpdateDistributionResult) Get(ctx workflow.Context) (*cloudfront.UpdateDistributionOutput, error) {
	var output cloudfront.UpdateDistributionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateFieldLevelEncryptionConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontUpdateFieldLevelEncryptionConfigResult) Get(ctx workflow.Context) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateFieldLevelEncryptionProfileResult struct {
	Result workflow.Future
}

func (r *CloudfrontUpdateFieldLevelEncryptionProfileResult) Get(ctx workflow.Context) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionProfileOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateOriginRequestPolicyResult struct {
	Result workflow.Future
}

func (r *CloudfrontUpdateOriginRequestPolicyResult) Get(ctx workflow.Context) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	var output cloudfront.UpdateOriginRequestPolicyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdatePublicKeyResult struct {
	Result workflow.Future
}

func (r *CloudfrontUpdatePublicKeyResult) Get(ctx workflow.Context) (*cloudfront.UpdatePublicKeyOutput, error) {
	var output cloudfront.UpdatePublicKeyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateRealtimeLogConfigResult struct {
	Result workflow.Future
}

func (r *CloudfrontUpdateRealtimeLogConfigResult) Get(ctx workflow.Context) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	var output cloudfront.UpdateRealtimeLogConfigOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateStreamingDistributionResult struct {
	Result workflow.Future
}

func (r *CloudfrontUpdateStreamingDistributionResult) Get(ctx workflow.Context) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	var output cloudfront.UpdateStreamingDistributionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateCachePolicy(ctx workflow.Context, input *cloudfront.CreateCachePolicyInput) (*cloudfront.CreateCachePolicyOutput, error) {
	var output cloudfront.CreateCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateCachePolicyAsync(ctx workflow.Context, input *cloudfront.CreateCachePolicyInput) *CloudfrontCreateCachePolicyResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateCachePolicy", input)
	return &CloudfrontCreateCachePolicyResult{Result: future}
}

func (a *CloudFrontStub) CreateCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput) *CloudfrontCreateCloudFrontOriginAccessIdentityResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateCloudFrontOriginAccessIdentity", input)
	return &CloudfrontCreateCloudFrontOriginAccessIdentityResult{Result: future}
}

func (a *CloudFrontStub) CreateDistribution(ctx workflow.Context, input *cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error) {
	var output cloudfront.CreateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateDistributionAsync(ctx workflow.Context, input *cloudfront.CreateDistributionInput) *CloudfrontCreateDistributionResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateDistribution", input)
	return &CloudfrontCreateDistributionResult{Result: future}
}

func (a *CloudFrontStub) CreateDistributionWithTags(ctx workflow.Context, input *cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	var output cloudfront.CreateDistributionWithTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateDistributionWithTags", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateDistributionWithTagsAsync(ctx workflow.Context, input *cloudfront.CreateDistributionWithTagsInput) *CloudfrontCreateDistributionWithTagsResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateDistributionWithTags", input)
	return &CloudfrontCreateDistributionWithTagsResult{Result: future}
}

func (a *CloudFrontStub) CreateFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput) *CloudfrontCreateFieldLevelEncryptionConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateFieldLevelEncryptionConfig", input)
	return &CloudfrontCreateFieldLevelEncryptionConfigResult{Result: future}
}

func (a *CloudFrontStub) CreateFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput) *CloudfrontCreateFieldLevelEncryptionProfileResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateFieldLevelEncryptionProfile", input)
	return &CloudfrontCreateFieldLevelEncryptionProfileResult{Result: future}
}

func (a *CloudFrontStub) CreateInvalidation(ctx workflow.Context, input *cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error) {
	var output cloudfront.CreateInvalidationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateInvalidation", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateInvalidationAsync(ctx workflow.Context, input *cloudfront.CreateInvalidationInput) *CloudfrontCreateInvalidationResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateInvalidation", input)
	return &CloudfrontCreateInvalidationResult{Result: future}
}

func (a *CloudFrontStub) CreateMonitoringSubscription(ctx workflow.Context, input *cloudfront.CreateMonitoringSubscriptionInput) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	var output cloudfront.CreateMonitoringSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateMonitoringSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.CreateMonitoringSubscriptionInput) *CloudfrontCreateMonitoringSubscriptionResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateMonitoringSubscription", input)
	return &CloudfrontCreateMonitoringSubscriptionResult{Result: future}
}

func (a *CloudFrontStub) CreateOriginRequestPolicy(ctx workflow.Context, input *cloudfront.CreateOriginRequestPolicyInput) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	var output cloudfront.CreateOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.CreateOriginRequestPolicyInput) *CloudfrontCreateOriginRequestPolicyResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateOriginRequestPolicy", input)
	return &CloudfrontCreateOriginRequestPolicyResult{Result: future}
}

func (a *CloudFrontStub) CreatePublicKey(ctx workflow.Context, input *cloudfront.CreatePublicKeyInput) (*cloudfront.CreatePublicKeyOutput, error) {
	var output cloudfront.CreatePublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreatePublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreatePublicKeyAsync(ctx workflow.Context, input *cloudfront.CreatePublicKeyInput) *CloudfrontCreatePublicKeyResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreatePublicKey", input)
	return &CloudfrontCreatePublicKeyResult{Result: future}
}

func (a *CloudFrontStub) CreateRealtimeLogConfig(ctx workflow.Context, input *cloudfront.CreateRealtimeLogConfigInput) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	var output cloudfront.CreateRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.CreateRealtimeLogConfigInput) *CloudfrontCreateRealtimeLogConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateRealtimeLogConfig", input)
	return &CloudfrontCreateRealtimeLogConfigResult{Result: future}
}

func (a *CloudFrontStub) CreateStreamingDistribution(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error) {
	var output cloudfront.CreateStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionInput) *CloudfrontCreateStreamingDistributionResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateStreamingDistribution", input)
	return &CloudfrontCreateStreamingDistributionResult{Result: future}
}

func (a *CloudFrontStub) CreateStreamingDistributionWithTags(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	var output cloudfront.CreateStreamingDistributionWithTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateStreamingDistributionWithTags", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateStreamingDistributionWithTagsAsync(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput) *CloudfrontCreateStreamingDistributionWithTagsResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateStreamingDistributionWithTags", input)
	return &CloudfrontCreateStreamingDistributionWithTagsResult{Result: future}
}

func (a *CloudFrontStub) DeleteCachePolicy(ctx workflow.Context, input *cloudfront.DeleteCachePolicyInput) (*cloudfront.DeleteCachePolicyOutput, error) {
	var output cloudfront.DeleteCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteCachePolicyAsync(ctx workflow.Context, input *cloudfront.DeleteCachePolicyInput) *CloudfrontDeleteCachePolicyResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteCachePolicy", input)
	return &CloudfrontDeleteCachePolicyResult{Result: future}
}

func (a *CloudFrontStub) DeleteCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) *CloudfrontDeleteCloudFrontOriginAccessIdentityResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteCloudFrontOriginAccessIdentity", input)
	return &CloudfrontDeleteCloudFrontOriginAccessIdentityResult{Result: future}
}

func (a *CloudFrontStub) DeleteDistribution(ctx workflow.Context, input *cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error) {
	var output cloudfront.DeleteDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteDistributionAsync(ctx workflow.Context, input *cloudfront.DeleteDistributionInput) *CloudfrontDeleteDistributionResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteDistribution", input)
	return &CloudfrontDeleteDistributionResult{Result: future}
}

func (a *CloudFrontStub) DeleteFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput) *CloudfrontDeleteFieldLevelEncryptionConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteFieldLevelEncryptionConfig", input)
	return &CloudfrontDeleteFieldLevelEncryptionConfigResult{Result: future}
}

func (a *CloudFrontStub) DeleteFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput) *CloudfrontDeleteFieldLevelEncryptionProfileResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteFieldLevelEncryptionProfile", input)
	return &CloudfrontDeleteFieldLevelEncryptionProfileResult{Result: future}
}

func (a *CloudFrontStub) DeleteMonitoringSubscription(ctx workflow.Context, input *cloudfront.DeleteMonitoringSubscriptionInput) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	var output cloudfront.DeleteMonitoringSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteMonitoringSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.DeleteMonitoringSubscriptionInput) *CloudfrontDeleteMonitoringSubscriptionResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteMonitoringSubscription", input)
	return &CloudfrontDeleteMonitoringSubscriptionResult{Result: future}
}

func (a *CloudFrontStub) DeleteOriginRequestPolicy(ctx workflow.Context, input *cloudfront.DeleteOriginRequestPolicyInput) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	var output cloudfront.DeleteOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.DeleteOriginRequestPolicyInput) *CloudfrontDeleteOriginRequestPolicyResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteOriginRequestPolicy", input)
	return &CloudfrontDeleteOriginRequestPolicyResult{Result: future}
}

func (a *CloudFrontStub) DeletePublicKey(ctx workflow.Context, input *cloudfront.DeletePublicKeyInput) (*cloudfront.DeletePublicKeyOutput, error) {
	var output cloudfront.DeletePublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeletePublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeletePublicKeyAsync(ctx workflow.Context, input *cloudfront.DeletePublicKeyInput) *CloudfrontDeletePublicKeyResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeletePublicKey", input)
	return &CloudfrontDeletePublicKeyResult{Result: future}
}

func (a *CloudFrontStub) DeleteRealtimeLogConfig(ctx workflow.Context, input *cloudfront.DeleteRealtimeLogConfigInput) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	var output cloudfront.DeleteRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.DeleteRealtimeLogConfigInput) *CloudfrontDeleteRealtimeLogConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteRealtimeLogConfig", input)
	return &CloudfrontDeleteRealtimeLogConfigResult{Result: future}
}

func (a *CloudFrontStub) DeleteStreamingDistribution(ctx workflow.Context, input *cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	var output cloudfront.DeleteStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.DeleteStreamingDistributionInput) *CloudfrontDeleteStreamingDistributionResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteStreamingDistribution", input)
	return &CloudfrontDeleteStreamingDistributionResult{Result: future}
}

func (a *CloudFrontStub) GetCachePolicy(ctx workflow.Context, input *cloudfront.GetCachePolicyInput) (*cloudfront.GetCachePolicyOutput, error) {
	var output cloudfront.GetCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetCachePolicyAsync(ctx workflow.Context, input *cloudfront.GetCachePolicyInput) *CloudfrontGetCachePolicyResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCachePolicy", input)
	return &CloudfrontGetCachePolicyResult{Result: future}
}

func (a *CloudFrontStub) GetCachePolicyConfig(ctx workflow.Context, input *cloudfront.GetCachePolicyConfigInput) (*cloudfront.GetCachePolicyConfigOutput, error) {
	var output cloudfront.GetCachePolicyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCachePolicyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetCachePolicyConfigAsync(ctx workflow.Context, input *cloudfront.GetCachePolicyConfigInput) *CloudfrontGetCachePolicyConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCachePolicyConfig", input)
	return &CloudfrontGetCachePolicyConfigResult{Result: future}
}

func (a *CloudFrontStub) GetCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput) *CloudfrontGetCloudFrontOriginAccessIdentityResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCloudFrontOriginAccessIdentity", input)
	return &CloudfrontGetCloudFrontOriginAccessIdentityResult{Result: future}
}

func (a *CloudFrontStub) GetCloudFrontOriginAccessIdentityConfig(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCloudFrontOriginAccessIdentityConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetCloudFrontOriginAccessIdentityConfigAsync(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) *CloudfrontGetCloudFrontOriginAccessIdentityConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCloudFrontOriginAccessIdentityConfig", input)
	return &CloudfrontGetCloudFrontOriginAccessIdentityConfigResult{Result: future}
}

func (a *CloudFrontStub) GetDistribution(ctx workflow.Context, input *cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error) {
	var output cloudfront.GetDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetDistributionAsync(ctx workflow.Context, input *cloudfront.GetDistributionInput) *CloudfrontGetDistributionResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetDistribution", input)
	return &CloudfrontGetDistributionResult{Result: future}
}

func (a *CloudFrontStub) GetDistributionConfig(ctx workflow.Context, input *cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error) {
	var output cloudfront.GetDistributionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetDistributionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetDistributionConfigAsync(ctx workflow.Context, input *cloudfront.GetDistributionConfigInput) *CloudfrontGetDistributionConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetDistributionConfig", input)
	return &CloudfrontGetDistributionConfigResult{Result: future}
}

func (a *CloudFrontStub) GetFieldLevelEncryption(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionInput) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetFieldLevelEncryptionAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionInput) *CloudfrontGetFieldLevelEncryptionResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryption", input)
	return &CloudfrontGetFieldLevelEncryptionResult{Result: future}
}

func (a *CloudFrontStub) GetFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput) *CloudfrontGetFieldLevelEncryptionConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryptionConfig", input)
	return &CloudfrontGetFieldLevelEncryptionConfigResult{Result: future}
}

func (a *CloudFrontStub) GetFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput) *CloudfrontGetFieldLevelEncryptionProfileResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryptionProfile", input)
	return &CloudfrontGetFieldLevelEncryptionProfileResult{Result: future}
}

func (a *CloudFrontStub) GetFieldLevelEncryptionProfileConfig(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryptionProfileConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetFieldLevelEncryptionProfileConfigAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput) *CloudfrontGetFieldLevelEncryptionProfileConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryptionProfileConfig", input)
	return &CloudfrontGetFieldLevelEncryptionProfileConfigResult{Result: future}
}

func (a *CloudFrontStub) GetInvalidation(ctx workflow.Context, input *cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error) {
	var output cloudfront.GetInvalidationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetInvalidation", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetInvalidationAsync(ctx workflow.Context, input *cloudfront.GetInvalidationInput) *CloudfrontGetInvalidationResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetInvalidation", input)
	return &CloudfrontGetInvalidationResult{Result: future}
}

func (a *CloudFrontStub) GetMonitoringSubscription(ctx workflow.Context, input *cloudfront.GetMonitoringSubscriptionInput) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	var output cloudfront.GetMonitoringSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetMonitoringSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.GetMonitoringSubscriptionInput) *CloudfrontGetMonitoringSubscriptionResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetMonitoringSubscription", input)
	return &CloudfrontGetMonitoringSubscriptionResult{Result: future}
}

func (a *CloudFrontStub) GetOriginRequestPolicy(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyInput) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	var output cloudfront.GetOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyInput) *CloudfrontGetOriginRequestPolicyResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetOriginRequestPolicy", input)
	return &CloudfrontGetOriginRequestPolicyResult{Result: future}
}

func (a *CloudFrontStub) GetOriginRequestPolicyConfig(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyConfigInput) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	var output cloudfront.GetOriginRequestPolicyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetOriginRequestPolicyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetOriginRequestPolicyConfigAsync(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyConfigInput) *CloudfrontGetOriginRequestPolicyConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetOriginRequestPolicyConfig", input)
	return &CloudfrontGetOriginRequestPolicyConfigResult{Result: future}
}

func (a *CloudFrontStub) GetPublicKey(ctx workflow.Context, input *cloudfront.GetPublicKeyInput) (*cloudfront.GetPublicKeyOutput, error) {
	var output cloudfront.GetPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetPublicKeyAsync(ctx workflow.Context, input *cloudfront.GetPublicKeyInput) *CloudfrontGetPublicKeyResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetPublicKey", input)
	return &CloudfrontGetPublicKeyResult{Result: future}
}

func (a *CloudFrontStub) GetPublicKeyConfig(ctx workflow.Context, input *cloudfront.GetPublicKeyConfigInput) (*cloudfront.GetPublicKeyConfigOutput, error) {
	var output cloudfront.GetPublicKeyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetPublicKeyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetPublicKeyConfigAsync(ctx workflow.Context, input *cloudfront.GetPublicKeyConfigInput) *CloudfrontGetPublicKeyConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetPublicKeyConfig", input)
	return &CloudfrontGetPublicKeyConfigResult{Result: future}
}

func (a *CloudFrontStub) GetRealtimeLogConfig(ctx workflow.Context, input *cloudfront.GetRealtimeLogConfigInput) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	var output cloudfront.GetRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.GetRealtimeLogConfigInput) *CloudfrontGetRealtimeLogConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetRealtimeLogConfig", input)
	return &CloudfrontGetRealtimeLogConfigResult{Result: future}
}

func (a *CloudFrontStub) GetStreamingDistribution(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error) {
	var output cloudfront.GetStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) *CloudfrontGetStreamingDistributionResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetStreamingDistribution", input)
	return &CloudfrontGetStreamingDistributionResult{Result: future}
}

func (a *CloudFrontStub) GetStreamingDistributionConfig(ctx workflow.Context, input *cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	var output cloudfront.GetStreamingDistributionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetStreamingDistributionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetStreamingDistributionConfigAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionConfigInput) *CloudfrontGetStreamingDistributionConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetStreamingDistributionConfig", input)
	return &CloudfrontGetStreamingDistributionConfigResult{Result: future}
}

func (a *CloudFrontStub) ListCachePolicies(ctx workflow.Context, input *cloudfront.ListCachePoliciesInput) (*cloudfront.ListCachePoliciesOutput, error) {
	var output cloudfront.ListCachePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListCachePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListCachePoliciesAsync(ctx workflow.Context, input *cloudfront.ListCachePoliciesInput) *CloudfrontListCachePoliciesResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListCachePolicies", input)
	return &CloudfrontListCachePoliciesResult{Result: future}
}

func (a *CloudFrontStub) ListCloudFrontOriginAccessIdentities(ctx workflow.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	var output cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListCloudFrontOriginAccessIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListCloudFrontOriginAccessIdentitiesAsync(ctx workflow.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) *CloudfrontListCloudFrontOriginAccessIdentitiesResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListCloudFrontOriginAccessIdentities", input)
	return &CloudfrontListCloudFrontOriginAccessIdentitiesResult{Result: future}
}

func (a *CloudFrontStub) ListDistributions(ctx workflow.Context, input *cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error) {
	var output cloudfront.ListDistributionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributions", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListDistributionsAsync(ctx workflow.Context, input *cloudfront.ListDistributionsInput) *CloudfrontListDistributionsResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributions", input)
	return &CloudfrontListDistributionsResult{Result: future}
}

func (a *CloudFrontStub) ListDistributionsByCachePolicyId(ctx workflow.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByCachePolicyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByCachePolicyId", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListDistributionsByCachePolicyIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput) *CloudfrontListDistributionsByCachePolicyIdResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByCachePolicyId", input)
	return &CloudfrontListDistributionsByCachePolicyIdResult{Result: future}
}

func (a *CloudFrontStub) ListDistributionsByOriginRequestPolicyId(ctx workflow.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByOriginRequestPolicyId", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListDistributionsByOriginRequestPolicyIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) *CloudfrontListDistributionsByOriginRequestPolicyIdResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByOriginRequestPolicyId", input)
	return &CloudfrontListDistributionsByOriginRequestPolicyIdResult{Result: future}
}

func (a *CloudFrontStub) ListDistributionsByRealtimeLogConfig(ctx workflow.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	var output cloudfront.ListDistributionsByRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListDistributionsByRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput) *CloudfrontListDistributionsByRealtimeLogConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByRealtimeLogConfig", input)
	return &CloudfrontListDistributionsByRealtimeLogConfigResult{Result: future}
}

func (a *CloudFrontStub) ListDistributionsByWebACLId(ctx workflow.Context, input *cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	var output cloudfront.ListDistributionsByWebACLIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByWebACLId", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListDistributionsByWebACLIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByWebACLIdInput) *CloudfrontListDistributionsByWebACLIdResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByWebACLId", input)
	return &CloudfrontListDistributionsByWebACLIdResult{Result: future}
}

func (a *CloudFrontStub) ListFieldLevelEncryptionConfigs(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListFieldLevelEncryptionConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListFieldLevelEncryptionConfigsAsync(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput) *CloudfrontListFieldLevelEncryptionConfigsResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListFieldLevelEncryptionConfigs", input)
	return &CloudfrontListFieldLevelEncryptionConfigsResult{Result: future}
}

func (a *CloudFrontStub) ListFieldLevelEncryptionProfiles(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListFieldLevelEncryptionProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListFieldLevelEncryptionProfilesAsync(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput) *CloudfrontListFieldLevelEncryptionProfilesResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListFieldLevelEncryptionProfiles", input)
	return &CloudfrontListFieldLevelEncryptionProfilesResult{Result: future}
}

func (a *CloudFrontStub) ListInvalidations(ctx workflow.Context, input *cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error) {
	var output cloudfront.ListInvalidationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListInvalidations", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListInvalidationsAsync(ctx workflow.Context, input *cloudfront.ListInvalidationsInput) *CloudfrontListInvalidationsResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListInvalidations", input)
	return &CloudfrontListInvalidationsResult{Result: future}
}

func (a *CloudFrontStub) ListOriginRequestPolicies(ctx workflow.Context, input *cloudfront.ListOriginRequestPoliciesInput) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	var output cloudfront.ListOriginRequestPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListOriginRequestPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListOriginRequestPoliciesAsync(ctx workflow.Context, input *cloudfront.ListOriginRequestPoliciesInput) *CloudfrontListOriginRequestPoliciesResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListOriginRequestPolicies", input)
	return &CloudfrontListOriginRequestPoliciesResult{Result: future}
}

func (a *CloudFrontStub) ListPublicKeys(ctx workflow.Context, input *cloudfront.ListPublicKeysInput) (*cloudfront.ListPublicKeysOutput, error) {
	var output cloudfront.ListPublicKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListPublicKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListPublicKeysAsync(ctx workflow.Context, input *cloudfront.ListPublicKeysInput) *CloudfrontListPublicKeysResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListPublicKeys", input)
	return &CloudfrontListPublicKeysResult{Result: future}
}

func (a *CloudFrontStub) ListRealtimeLogConfigs(ctx workflow.Context, input *cloudfront.ListRealtimeLogConfigsInput) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	var output cloudfront.ListRealtimeLogConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListRealtimeLogConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListRealtimeLogConfigsAsync(ctx workflow.Context, input *cloudfront.ListRealtimeLogConfigsInput) *CloudfrontListRealtimeLogConfigsResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListRealtimeLogConfigs", input)
	return &CloudfrontListRealtimeLogConfigsResult{Result: future}
}

func (a *CloudFrontStub) ListStreamingDistributions(ctx workflow.Context, input *cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error) {
	var output cloudfront.ListStreamingDistributionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListStreamingDistributions", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListStreamingDistributionsAsync(ctx workflow.Context, input *cloudfront.ListStreamingDistributionsInput) *CloudfrontListStreamingDistributionsResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListStreamingDistributions", input)
	return &CloudfrontListStreamingDistributionsResult{Result: future}
}

func (a *CloudFrontStub) ListTagsForResource(ctx workflow.Context, input *cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error) {
	var output cloudfront.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListTagsForResourceAsync(ctx workflow.Context, input *cloudfront.ListTagsForResourceInput) *CloudfrontListTagsForResourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListTagsForResource", input)
	return &CloudfrontListTagsForResourceResult{Result: future}
}

func (a *CloudFrontStub) TagResource(ctx workflow.Context, input *cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error) {
	var output cloudfront.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) TagResourceAsync(ctx workflow.Context, input *cloudfront.TagResourceInput) *CloudfrontTagResourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.TagResource", input)
	return &CloudfrontTagResourceResult{Result: future}
}

func (a *CloudFrontStub) UntagResource(ctx workflow.Context, input *cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error) {
	var output cloudfront.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UntagResourceAsync(ctx workflow.Context, input *cloudfront.UntagResourceInput) *CloudfrontUntagResourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UntagResource", input)
	return &CloudfrontUntagResourceResult{Result: future}
}

func (a *CloudFrontStub) UpdateCachePolicy(ctx workflow.Context, input *cloudfront.UpdateCachePolicyInput) (*cloudfront.UpdateCachePolicyOutput, error) {
	var output cloudfront.UpdateCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateCachePolicyAsync(ctx workflow.Context, input *cloudfront.UpdateCachePolicyInput) *CloudfrontUpdateCachePolicyResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateCachePolicy", input)
	return &CloudfrontUpdateCachePolicyResult{Result: future}
}

func (a *CloudFrontStub) UpdateCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) *CloudfrontUpdateCloudFrontOriginAccessIdentityResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateCloudFrontOriginAccessIdentity", input)
	return &CloudfrontUpdateCloudFrontOriginAccessIdentityResult{Result: future}
}

func (a *CloudFrontStub) UpdateDistribution(ctx workflow.Context, input *cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error) {
	var output cloudfront.UpdateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateDistributionAsync(ctx workflow.Context, input *cloudfront.UpdateDistributionInput) *CloudfrontUpdateDistributionResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateDistribution", input)
	return &CloudfrontUpdateDistributionResult{Result: future}
}

func (a *CloudFrontStub) UpdateFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput) *CloudfrontUpdateFieldLevelEncryptionConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateFieldLevelEncryptionConfig", input)
	return &CloudfrontUpdateFieldLevelEncryptionConfigResult{Result: future}
}

func (a *CloudFrontStub) UpdateFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput) *CloudfrontUpdateFieldLevelEncryptionProfileResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateFieldLevelEncryptionProfile", input)
	return &CloudfrontUpdateFieldLevelEncryptionProfileResult{Result: future}
}

func (a *CloudFrontStub) UpdateOriginRequestPolicy(ctx workflow.Context, input *cloudfront.UpdateOriginRequestPolicyInput) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	var output cloudfront.UpdateOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.UpdateOriginRequestPolicyInput) *CloudfrontUpdateOriginRequestPolicyResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateOriginRequestPolicy", input)
	return &CloudfrontUpdateOriginRequestPolicyResult{Result: future}
}

func (a *CloudFrontStub) UpdatePublicKey(ctx workflow.Context, input *cloudfront.UpdatePublicKeyInput) (*cloudfront.UpdatePublicKeyOutput, error) {
	var output cloudfront.UpdatePublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdatePublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdatePublicKeyAsync(ctx workflow.Context, input *cloudfront.UpdatePublicKeyInput) *CloudfrontUpdatePublicKeyResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdatePublicKey", input)
	return &CloudfrontUpdatePublicKeyResult{Result: future}
}

func (a *CloudFrontStub) UpdateRealtimeLogConfig(ctx workflow.Context, input *cloudfront.UpdateRealtimeLogConfigInput) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	var output cloudfront.UpdateRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.UpdateRealtimeLogConfigInput) *CloudfrontUpdateRealtimeLogConfigResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateRealtimeLogConfig", input)
	return &CloudfrontUpdateRealtimeLogConfigResult{Result: future}
}

func (a *CloudFrontStub) UpdateStreamingDistribution(ctx workflow.Context, input *cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	var output cloudfront.UpdateStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.UpdateStreamingDistributionInput) *CloudfrontUpdateStreamingDistributionResult {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateStreamingDistribution", input)
	return &CloudfrontUpdateStreamingDistributionResult{Result: future}
}

func (a *CloudFrontStub) WaitUntilDistributionDeployed(ctx workflow.Context, input *cloudfront.GetDistributionInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudfront.WaitUntilDistributionDeployed", input).Get(ctx, nil)
}

func (a *CloudFrontStub) WaitUntilDistributionDeployedAsync(ctx workflow.Context, input *cloudfront.GetDistributionInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudfront.WaitUntilDistributionDeployed", input)
}

func (a *CloudFrontStub) WaitUntilInvalidationCompleted(ctx workflow.Context, input *cloudfront.GetInvalidationInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudfront.WaitUntilInvalidationCompleted", input).Get(ctx, nil)
}

func (a *CloudFrontStub) WaitUntilInvalidationCompletedAsync(ctx workflow.Context, input *cloudfront.GetInvalidationInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudfront.WaitUntilInvalidationCompleted", input)
}

func (a *CloudFrontStub) WaitUntilStreamingDistributionDeployed(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudfront.WaitUntilStreamingDistributionDeployed", input).Get(ctx, nil)
}

func (a *CloudFrontStub) WaitUntilStreamingDistributionDeployedAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudfront.WaitUntilStreamingDistributionDeployed", input)
}
