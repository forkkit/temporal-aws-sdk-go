// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cloudfront"
	"go.temporal.io/sdk/workflow"
)

type CloudFrontClient interface {
	CreateCachePolicy(ctx workflow.Context, input *cloudfront.CreateCachePolicyInput) (*cloudfront.CreateCachePolicyOutput, error)
	CreateCachePolicyAsync(ctx workflow.Context, input *cloudfront.CreateCachePolicyInput) *CloudfrontCreateCachePolicyFuture

	CreateCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error)
	CreateCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput) *CloudfrontCreateCloudFrontOriginAccessIdentityFuture

	CreateDistribution(ctx workflow.Context, input *cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error)
	CreateDistributionAsync(ctx workflow.Context, input *cloudfront.CreateDistributionInput) *CloudfrontCreateDistributionFuture

	CreateDistributionWithTags(ctx workflow.Context, input *cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error)
	CreateDistributionWithTagsAsync(ctx workflow.Context, input *cloudfront.CreateDistributionWithTagsInput) *CloudfrontCreateDistributionWithTagsFuture

	CreateFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error)
	CreateFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput) *CloudfrontCreateFieldLevelEncryptionConfigFuture

	CreateFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error)
	CreateFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput) *CloudfrontCreateFieldLevelEncryptionProfileFuture

	CreateInvalidation(ctx workflow.Context, input *cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error)
	CreateInvalidationAsync(ctx workflow.Context, input *cloudfront.CreateInvalidationInput) *CloudfrontCreateInvalidationFuture

	CreateMonitoringSubscription(ctx workflow.Context, input *cloudfront.CreateMonitoringSubscriptionInput) (*cloudfront.CreateMonitoringSubscriptionOutput, error)
	CreateMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.CreateMonitoringSubscriptionInput) *CloudfrontCreateMonitoringSubscriptionFuture

	CreateOriginRequestPolicy(ctx workflow.Context, input *cloudfront.CreateOriginRequestPolicyInput) (*cloudfront.CreateOriginRequestPolicyOutput, error)
	CreateOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.CreateOriginRequestPolicyInput) *CloudfrontCreateOriginRequestPolicyFuture

	CreatePublicKey(ctx workflow.Context, input *cloudfront.CreatePublicKeyInput) (*cloudfront.CreatePublicKeyOutput, error)
	CreatePublicKeyAsync(ctx workflow.Context, input *cloudfront.CreatePublicKeyInput) *CloudfrontCreatePublicKeyFuture

	CreateRealtimeLogConfig(ctx workflow.Context, input *cloudfront.CreateRealtimeLogConfigInput) (*cloudfront.CreateRealtimeLogConfigOutput, error)
	CreateRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.CreateRealtimeLogConfigInput) *CloudfrontCreateRealtimeLogConfigFuture

	CreateStreamingDistribution(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error)
	CreateStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionInput) *CloudfrontCreateStreamingDistributionFuture

	CreateStreamingDistributionWithTags(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error)
	CreateStreamingDistributionWithTagsAsync(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput) *CloudfrontCreateStreamingDistributionWithTagsFuture

	DeleteCachePolicy(ctx workflow.Context, input *cloudfront.DeleteCachePolicyInput) (*cloudfront.DeleteCachePolicyOutput, error)
	DeleteCachePolicyAsync(ctx workflow.Context, input *cloudfront.DeleteCachePolicyInput) *CloudfrontDeleteCachePolicyFuture

	DeleteCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error)
	DeleteCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) *CloudfrontDeleteCloudFrontOriginAccessIdentityFuture

	DeleteDistribution(ctx workflow.Context, input *cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error)
	DeleteDistributionAsync(ctx workflow.Context, input *cloudfront.DeleteDistributionInput) *CloudfrontDeleteDistributionFuture

	DeleteFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error)
	DeleteFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput) *CloudfrontDeleteFieldLevelEncryptionConfigFuture

	DeleteFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error)
	DeleteFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput) *CloudfrontDeleteFieldLevelEncryptionProfileFuture

	DeleteMonitoringSubscription(ctx workflow.Context, input *cloudfront.DeleteMonitoringSubscriptionInput) (*cloudfront.DeleteMonitoringSubscriptionOutput, error)
	DeleteMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.DeleteMonitoringSubscriptionInput) *CloudfrontDeleteMonitoringSubscriptionFuture

	DeleteOriginRequestPolicy(ctx workflow.Context, input *cloudfront.DeleteOriginRequestPolicyInput) (*cloudfront.DeleteOriginRequestPolicyOutput, error)
	DeleteOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.DeleteOriginRequestPolicyInput) *CloudfrontDeleteOriginRequestPolicyFuture

	DeletePublicKey(ctx workflow.Context, input *cloudfront.DeletePublicKeyInput) (*cloudfront.DeletePublicKeyOutput, error)
	DeletePublicKeyAsync(ctx workflow.Context, input *cloudfront.DeletePublicKeyInput) *CloudfrontDeletePublicKeyFuture

	DeleteRealtimeLogConfig(ctx workflow.Context, input *cloudfront.DeleteRealtimeLogConfigInput) (*cloudfront.DeleteRealtimeLogConfigOutput, error)
	DeleteRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.DeleteRealtimeLogConfigInput) *CloudfrontDeleteRealtimeLogConfigFuture

	DeleteStreamingDistribution(ctx workflow.Context, input *cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error)
	DeleteStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.DeleteStreamingDistributionInput) *CloudfrontDeleteStreamingDistributionFuture

	GetCachePolicy(ctx workflow.Context, input *cloudfront.GetCachePolicyInput) (*cloudfront.GetCachePolicyOutput, error)
	GetCachePolicyAsync(ctx workflow.Context, input *cloudfront.GetCachePolicyInput) *CloudfrontGetCachePolicyFuture

	GetCachePolicyConfig(ctx workflow.Context, input *cloudfront.GetCachePolicyConfigInput) (*cloudfront.GetCachePolicyConfigOutput, error)
	GetCachePolicyConfigAsync(ctx workflow.Context, input *cloudfront.GetCachePolicyConfigInput) *CloudfrontGetCachePolicyConfigFuture

	GetCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error)
	GetCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput) *CloudfrontGetCloudFrontOriginAccessIdentityFuture

	GetCloudFrontOriginAccessIdentityConfig(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error)
	GetCloudFrontOriginAccessIdentityConfigAsync(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) *CloudfrontGetCloudFrontOriginAccessIdentityConfigFuture

	GetDistribution(ctx workflow.Context, input *cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error)
	GetDistributionAsync(ctx workflow.Context, input *cloudfront.GetDistributionInput) *CloudfrontGetDistributionFuture

	GetDistributionConfig(ctx workflow.Context, input *cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error)
	GetDistributionConfigAsync(ctx workflow.Context, input *cloudfront.GetDistributionConfigInput) *CloudfrontGetDistributionConfigFuture

	GetFieldLevelEncryption(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionInput) (*cloudfront.GetFieldLevelEncryptionOutput, error)
	GetFieldLevelEncryptionAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionInput) *CloudfrontGetFieldLevelEncryptionFuture

	GetFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error)
	GetFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput) *CloudfrontGetFieldLevelEncryptionConfigFuture

	GetFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error)
	GetFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput) *CloudfrontGetFieldLevelEncryptionProfileFuture

	GetFieldLevelEncryptionProfileConfig(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error)
	GetFieldLevelEncryptionProfileConfigAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput) *CloudfrontGetFieldLevelEncryptionProfileConfigFuture

	GetInvalidation(ctx workflow.Context, input *cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error)
	GetInvalidationAsync(ctx workflow.Context, input *cloudfront.GetInvalidationInput) *CloudfrontGetInvalidationFuture

	GetMonitoringSubscription(ctx workflow.Context, input *cloudfront.GetMonitoringSubscriptionInput) (*cloudfront.GetMonitoringSubscriptionOutput, error)
	GetMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.GetMonitoringSubscriptionInput) *CloudfrontGetMonitoringSubscriptionFuture

	GetOriginRequestPolicy(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyInput) (*cloudfront.GetOriginRequestPolicyOutput, error)
	GetOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyInput) *CloudfrontGetOriginRequestPolicyFuture

	GetOriginRequestPolicyConfig(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyConfigInput) (*cloudfront.GetOriginRequestPolicyConfigOutput, error)
	GetOriginRequestPolicyConfigAsync(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyConfigInput) *CloudfrontGetOriginRequestPolicyConfigFuture

	GetPublicKey(ctx workflow.Context, input *cloudfront.GetPublicKeyInput) (*cloudfront.GetPublicKeyOutput, error)
	GetPublicKeyAsync(ctx workflow.Context, input *cloudfront.GetPublicKeyInput) *CloudfrontGetPublicKeyFuture

	GetPublicKeyConfig(ctx workflow.Context, input *cloudfront.GetPublicKeyConfigInput) (*cloudfront.GetPublicKeyConfigOutput, error)
	GetPublicKeyConfigAsync(ctx workflow.Context, input *cloudfront.GetPublicKeyConfigInput) *CloudfrontGetPublicKeyConfigFuture

	GetRealtimeLogConfig(ctx workflow.Context, input *cloudfront.GetRealtimeLogConfigInput) (*cloudfront.GetRealtimeLogConfigOutput, error)
	GetRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.GetRealtimeLogConfigInput) *CloudfrontGetRealtimeLogConfigFuture

	GetStreamingDistribution(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error)
	GetStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) *CloudfrontGetStreamingDistributionFuture

	GetStreamingDistributionConfig(ctx workflow.Context, input *cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error)
	GetStreamingDistributionConfigAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionConfigInput) *CloudfrontGetStreamingDistributionConfigFuture

	ListCachePolicies(ctx workflow.Context, input *cloudfront.ListCachePoliciesInput) (*cloudfront.ListCachePoliciesOutput, error)
	ListCachePoliciesAsync(ctx workflow.Context, input *cloudfront.ListCachePoliciesInput) *CloudfrontListCachePoliciesFuture

	ListCloudFrontOriginAccessIdentities(ctx workflow.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error)
	ListCloudFrontOriginAccessIdentitiesAsync(ctx workflow.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) *CloudfrontListCloudFrontOriginAccessIdentitiesFuture

	ListDistributions(ctx workflow.Context, input *cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error)
	ListDistributionsAsync(ctx workflow.Context, input *cloudfront.ListDistributionsInput) *CloudfrontListDistributionsFuture

	ListDistributionsByCachePolicyId(ctx workflow.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error)
	ListDistributionsByCachePolicyIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput) *CloudfrontListDistributionsByCachePolicyIdFuture

	ListDistributionsByOriginRequestPolicyId(ctx workflow.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error)
	ListDistributionsByOriginRequestPolicyIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) *CloudfrontListDistributionsByOriginRequestPolicyIdFuture

	ListDistributionsByRealtimeLogConfig(ctx workflow.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error)
	ListDistributionsByRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput) *CloudfrontListDistributionsByRealtimeLogConfigFuture

	ListDistributionsByWebACLId(ctx workflow.Context, input *cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error)
	ListDistributionsByWebACLIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByWebACLIdInput) *CloudfrontListDistributionsByWebACLIdFuture

	ListFieldLevelEncryptionConfigs(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error)
	ListFieldLevelEncryptionConfigsAsync(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput) *CloudfrontListFieldLevelEncryptionConfigsFuture

	ListFieldLevelEncryptionProfiles(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error)
	ListFieldLevelEncryptionProfilesAsync(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput) *CloudfrontListFieldLevelEncryptionProfilesFuture

	ListInvalidations(ctx workflow.Context, input *cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error)
	ListInvalidationsAsync(ctx workflow.Context, input *cloudfront.ListInvalidationsInput) *CloudfrontListInvalidationsFuture

	ListOriginRequestPolicies(ctx workflow.Context, input *cloudfront.ListOriginRequestPoliciesInput) (*cloudfront.ListOriginRequestPoliciesOutput, error)
	ListOriginRequestPoliciesAsync(ctx workflow.Context, input *cloudfront.ListOriginRequestPoliciesInput) *CloudfrontListOriginRequestPoliciesFuture

	ListPublicKeys(ctx workflow.Context, input *cloudfront.ListPublicKeysInput) (*cloudfront.ListPublicKeysOutput, error)
	ListPublicKeysAsync(ctx workflow.Context, input *cloudfront.ListPublicKeysInput) *CloudfrontListPublicKeysFuture

	ListRealtimeLogConfigs(ctx workflow.Context, input *cloudfront.ListRealtimeLogConfigsInput) (*cloudfront.ListRealtimeLogConfigsOutput, error)
	ListRealtimeLogConfigsAsync(ctx workflow.Context, input *cloudfront.ListRealtimeLogConfigsInput) *CloudfrontListRealtimeLogConfigsFuture

	ListStreamingDistributions(ctx workflow.Context, input *cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error)
	ListStreamingDistributionsAsync(ctx workflow.Context, input *cloudfront.ListStreamingDistributionsInput) *CloudfrontListStreamingDistributionsFuture

	ListTagsForResource(ctx workflow.Context, input *cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *cloudfront.ListTagsForResourceInput) *CloudfrontListTagsForResourceFuture

	TagResource(ctx workflow.Context, input *cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *cloudfront.TagResourceInput) *CloudfrontTagResourceFuture

	UntagResource(ctx workflow.Context, input *cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *cloudfront.UntagResourceInput) *CloudfrontUntagResourceFuture

	UpdateCachePolicy(ctx workflow.Context, input *cloudfront.UpdateCachePolicyInput) (*cloudfront.UpdateCachePolicyOutput, error)
	UpdateCachePolicyAsync(ctx workflow.Context, input *cloudfront.UpdateCachePolicyInput) *CloudfrontUpdateCachePolicyFuture

	UpdateCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error)
	UpdateCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) *CloudfrontUpdateCloudFrontOriginAccessIdentityFuture

	UpdateDistribution(ctx workflow.Context, input *cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error)
	UpdateDistributionAsync(ctx workflow.Context, input *cloudfront.UpdateDistributionInput) *CloudfrontUpdateDistributionFuture

	UpdateFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error)
	UpdateFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput) *CloudfrontUpdateFieldLevelEncryptionConfigFuture

	UpdateFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error)
	UpdateFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput) *CloudfrontUpdateFieldLevelEncryptionProfileFuture

	UpdateOriginRequestPolicy(ctx workflow.Context, input *cloudfront.UpdateOriginRequestPolicyInput) (*cloudfront.UpdateOriginRequestPolicyOutput, error)
	UpdateOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.UpdateOriginRequestPolicyInput) *CloudfrontUpdateOriginRequestPolicyFuture

	UpdatePublicKey(ctx workflow.Context, input *cloudfront.UpdatePublicKeyInput) (*cloudfront.UpdatePublicKeyOutput, error)
	UpdatePublicKeyAsync(ctx workflow.Context, input *cloudfront.UpdatePublicKeyInput) *CloudfrontUpdatePublicKeyFuture

	UpdateRealtimeLogConfig(ctx workflow.Context, input *cloudfront.UpdateRealtimeLogConfigInput) (*cloudfront.UpdateRealtimeLogConfigOutput, error)
	UpdateRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.UpdateRealtimeLogConfigInput) *CloudfrontUpdateRealtimeLogConfigFuture

	UpdateStreamingDistribution(ctx workflow.Context, input *cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error)
	UpdateStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.UpdateStreamingDistributionInput) *CloudfrontUpdateStreamingDistributionFuture

	WaitUntilDistributionDeployed(ctx workflow.Context, input *cloudfront.GetDistributionInput) error
	WaitUntilDistributionDeployedAsync(ctx workflow.Context, input *cloudfront.GetDistributionInput) workflow.Future

	WaitUntilInvalidationCompleted(ctx workflow.Context, input *cloudfront.GetInvalidationInput) error
	WaitUntilInvalidationCompletedAsync(ctx workflow.Context, input *cloudfront.GetInvalidationInput) workflow.Future

	WaitUntilStreamingDistributionDeployed(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) error
	WaitUntilStreamingDistributionDeployedAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) workflow.Future
}

type CloudFrontStub struct{}

func NewCloudFrontStub() CloudFrontClient {
	return &CloudFrontStub{}
}

type CloudfrontCreateCachePolicyFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreateCachePolicyFuture) Get(ctx workflow.Context) (*cloudfront.CreateCachePolicyOutput, error) {
	var output cloudfront.CreateCachePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateCloudFrontOriginAccessIdentityFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreateCloudFrontOriginAccessIdentityFuture) Get(ctx workflow.Context) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateDistributionFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreateDistributionFuture) Get(ctx workflow.Context) (*cloudfront.CreateDistributionOutput, error) {
	var output cloudfront.CreateDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateDistributionWithTagsFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreateDistributionWithTagsFuture) Get(ctx workflow.Context) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	var output cloudfront.CreateDistributionWithTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateFieldLevelEncryptionConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreateFieldLevelEncryptionConfigFuture) Get(ctx workflow.Context) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateFieldLevelEncryptionProfileFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreateFieldLevelEncryptionProfileFuture) Get(ctx workflow.Context) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateInvalidationFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreateInvalidationFuture) Get(ctx workflow.Context) (*cloudfront.CreateInvalidationOutput, error) {
	var output cloudfront.CreateInvalidationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateMonitoringSubscriptionFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreateMonitoringSubscriptionFuture) Get(ctx workflow.Context) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	var output cloudfront.CreateMonitoringSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateOriginRequestPolicyFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreateOriginRequestPolicyFuture) Get(ctx workflow.Context) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	var output cloudfront.CreateOriginRequestPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreatePublicKeyFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreatePublicKeyFuture) Get(ctx workflow.Context) (*cloudfront.CreatePublicKeyOutput, error) {
	var output cloudfront.CreatePublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateRealtimeLogConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreateRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	var output cloudfront.CreateRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateStreamingDistributionFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreateStreamingDistributionFuture) Get(ctx workflow.Context) (*cloudfront.CreateStreamingDistributionOutput, error) {
	var output cloudfront.CreateStreamingDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontCreateStreamingDistributionWithTagsFuture struct {
	Future workflow.Future
}

func (r *CloudfrontCreateStreamingDistributionWithTagsFuture) Get(ctx workflow.Context) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	var output cloudfront.CreateStreamingDistributionWithTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteCachePolicyFuture struct {
	Future workflow.Future
}

func (r *CloudfrontDeleteCachePolicyFuture) Get(ctx workflow.Context) (*cloudfront.DeleteCachePolicyOutput, error) {
	var output cloudfront.DeleteCachePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteCloudFrontOriginAccessIdentityFuture struct {
	Future workflow.Future
}

func (r *CloudfrontDeleteCloudFrontOriginAccessIdentityFuture) Get(ctx workflow.Context) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteDistributionFuture struct {
	Future workflow.Future
}

func (r *CloudfrontDeleteDistributionFuture) Get(ctx workflow.Context) (*cloudfront.DeleteDistributionOutput, error) {
	var output cloudfront.DeleteDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteFieldLevelEncryptionConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontDeleteFieldLevelEncryptionConfigFuture) Get(ctx workflow.Context) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteFieldLevelEncryptionProfileFuture struct {
	Future workflow.Future
}

func (r *CloudfrontDeleteFieldLevelEncryptionProfileFuture) Get(ctx workflow.Context) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteMonitoringSubscriptionFuture struct {
	Future workflow.Future
}

func (r *CloudfrontDeleteMonitoringSubscriptionFuture) Get(ctx workflow.Context) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	var output cloudfront.DeleteMonitoringSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteOriginRequestPolicyFuture struct {
	Future workflow.Future
}

func (r *CloudfrontDeleteOriginRequestPolicyFuture) Get(ctx workflow.Context) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	var output cloudfront.DeleteOriginRequestPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeletePublicKeyFuture struct {
	Future workflow.Future
}

func (r *CloudfrontDeletePublicKeyFuture) Get(ctx workflow.Context) (*cloudfront.DeletePublicKeyOutput, error) {
	var output cloudfront.DeletePublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteRealtimeLogConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontDeleteRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	var output cloudfront.DeleteRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontDeleteStreamingDistributionFuture struct {
	Future workflow.Future
}

func (r *CloudfrontDeleteStreamingDistributionFuture) Get(ctx workflow.Context) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	var output cloudfront.DeleteStreamingDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetCachePolicyFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetCachePolicyFuture) Get(ctx workflow.Context) (*cloudfront.GetCachePolicyOutput, error) {
	var output cloudfront.GetCachePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetCachePolicyConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetCachePolicyConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetCachePolicyConfigOutput, error) {
	var output cloudfront.GetCachePolicyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetCloudFrontOriginAccessIdentityFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetCloudFrontOriginAccessIdentityFuture) Get(ctx workflow.Context) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetCloudFrontOriginAccessIdentityConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetCloudFrontOriginAccessIdentityConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetDistributionFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetDistributionFuture) Get(ctx workflow.Context) (*cloudfront.GetDistributionOutput, error) {
	var output cloudfront.GetDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetDistributionConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetDistributionConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetDistributionConfigOutput, error) {
	var output cloudfront.GetDistributionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetFieldLevelEncryptionFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetFieldLevelEncryptionFuture) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetFieldLevelEncryptionConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetFieldLevelEncryptionConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetFieldLevelEncryptionProfileFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetFieldLevelEncryptionProfileFuture) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetFieldLevelEncryptionProfileConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetFieldLevelEncryptionProfileConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetInvalidationFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetInvalidationFuture) Get(ctx workflow.Context) (*cloudfront.GetInvalidationOutput, error) {
	var output cloudfront.GetInvalidationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetMonitoringSubscriptionFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetMonitoringSubscriptionFuture) Get(ctx workflow.Context) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	var output cloudfront.GetMonitoringSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetOriginRequestPolicyFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetOriginRequestPolicyFuture) Get(ctx workflow.Context) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	var output cloudfront.GetOriginRequestPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetOriginRequestPolicyConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetOriginRequestPolicyConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	var output cloudfront.GetOriginRequestPolicyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetPublicKeyFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetPublicKeyFuture) Get(ctx workflow.Context) (*cloudfront.GetPublicKeyOutput, error) {
	var output cloudfront.GetPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetPublicKeyConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetPublicKeyConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetPublicKeyConfigOutput, error) {
	var output cloudfront.GetPublicKeyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetRealtimeLogConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	var output cloudfront.GetRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetStreamingDistributionFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetStreamingDistributionFuture) Get(ctx workflow.Context) (*cloudfront.GetStreamingDistributionOutput, error) {
	var output cloudfront.GetStreamingDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontGetStreamingDistributionConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontGetStreamingDistributionConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	var output cloudfront.GetStreamingDistributionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListCachePoliciesFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListCachePoliciesFuture) Get(ctx workflow.Context) (*cloudfront.ListCachePoliciesOutput, error) {
	var output cloudfront.ListCachePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListCloudFrontOriginAccessIdentitiesFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListCloudFrontOriginAccessIdentitiesFuture) Get(ctx workflow.Context) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	var output cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListDistributionsFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListDistributionsFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsOutput, error) {
	var output cloudfront.ListDistributionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListDistributionsByCachePolicyIdFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListDistributionsByCachePolicyIdFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByCachePolicyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListDistributionsByOriginRequestPolicyIdFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListDistributionsByOriginRequestPolicyIdFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListDistributionsByRealtimeLogConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListDistributionsByRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	var output cloudfront.ListDistributionsByRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListDistributionsByWebACLIdFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListDistributionsByWebACLIdFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	var output cloudfront.ListDistributionsByWebACLIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListFieldLevelEncryptionConfigsFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListFieldLevelEncryptionConfigsFuture) Get(ctx workflow.Context) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListFieldLevelEncryptionProfilesFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListFieldLevelEncryptionProfilesFuture) Get(ctx workflow.Context) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListInvalidationsFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListInvalidationsFuture) Get(ctx workflow.Context) (*cloudfront.ListInvalidationsOutput, error) {
	var output cloudfront.ListInvalidationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListOriginRequestPoliciesFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListOriginRequestPoliciesFuture) Get(ctx workflow.Context) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	var output cloudfront.ListOriginRequestPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListPublicKeysFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListPublicKeysFuture) Get(ctx workflow.Context) (*cloudfront.ListPublicKeysOutput, error) {
	var output cloudfront.ListPublicKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListRealtimeLogConfigsFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListRealtimeLogConfigsFuture) Get(ctx workflow.Context) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	var output cloudfront.ListRealtimeLogConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListStreamingDistributionsFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListStreamingDistributionsFuture) Get(ctx workflow.Context) (*cloudfront.ListStreamingDistributionsOutput, error) {
	var output cloudfront.ListStreamingDistributionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *CloudfrontListTagsForResourceFuture) Get(ctx workflow.Context) (*cloudfront.ListTagsForResourceOutput, error) {
	var output cloudfront.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontTagResourceFuture struct {
	Future workflow.Future
}

func (r *CloudfrontTagResourceFuture) Get(ctx workflow.Context) (*cloudfront.TagResourceOutput, error) {
	var output cloudfront.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontUntagResourceFuture struct {
	Future workflow.Future
}

func (r *CloudfrontUntagResourceFuture) Get(ctx workflow.Context) (*cloudfront.UntagResourceOutput, error) {
	var output cloudfront.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateCachePolicyFuture struct {
	Future workflow.Future
}

func (r *CloudfrontUpdateCachePolicyFuture) Get(ctx workflow.Context) (*cloudfront.UpdateCachePolicyOutput, error) {
	var output cloudfront.UpdateCachePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateCloudFrontOriginAccessIdentityFuture struct {
	Future workflow.Future
}

func (r *CloudfrontUpdateCloudFrontOriginAccessIdentityFuture) Get(ctx workflow.Context) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateDistributionFuture struct {
	Future workflow.Future
}

func (r *CloudfrontUpdateDistributionFuture) Get(ctx workflow.Context) (*cloudfront.UpdateDistributionOutput, error) {
	var output cloudfront.UpdateDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateFieldLevelEncryptionConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontUpdateFieldLevelEncryptionConfigFuture) Get(ctx workflow.Context) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateFieldLevelEncryptionProfileFuture struct {
	Future workflow.Future
}

func (r *CloudfrontUpdateFieldLevelEncryptionProfileFuture) Get(ctx workflow.Context) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateOriginRequestPolicyFuture struct {
	Future workflow.Future
}

func (r *CloudfrontUpdateOriginRequestPolicyFuture) Get(ctx workflow.Context) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	var output cloudfront.UpdateOriginRequestPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdatePublicKeyFuture struct {
	Future workflow.Future
}

func (r *CloudfrontUpdatePublicKeyFuture) Get(ctx workflow.Context) (*cloudfront.UpdatePublicKeyOutput, error) {
	var output cloudfront.UpdatePublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateRealtimeLogConfigFuture struct {
	Future workflow.Future
}

func (r *CloudfrontUpdateRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	var output cloudfront.UpdateRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudfrontUpdateStreamingDistributionFuture struct {
	Future workflow.Future
}

func (r *CloudfrontUpdateStreamingDistributionFuture) Get(ctx workflow.Context) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	var output cloudfront.UpdateStreamingDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateCachePolicy(ctx workflow.Context, input *cloudfront.CreateCachePolicyInput) (*cloudfront.CreateCachePolicyOutput, error) {
	var output cloudfront.CreateCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateCachePolicyAsync(ctx workflow.Context, input *cloudfront.CreateCachePolicyInput) *CloudfrontCreateCachePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateCachePolicy", input)
	return &CloudfrontCreateCachePolicyFuture{Future: future}
}

func (a *CloudFrontStub) CreateCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput) *CloudfrontCreateCloudFrontOriginAccessIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateCloudFrontOriginAccessIdentity", input)
	return &CloudfrontCreateCloudFrontOriginAccessIdentityFuture{Future: future}
}

func (a *CloudFrontStub) CreateDistribution(ctx workflow.Context, input *cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error) {
	var output cloudfront.CreateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateDistributionAsync(ctx workflow.Context, input *cloudfront.CreateDistributionInput) *CloudfrontCreateDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateDistribution", input)
	return &CloudfrontCreateDistributionFuture{Future: future}
}

func (a *CloudFrontStub) CreateDistributionWithTags(ctx workflow.Context, input *cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	var output cloudfront.CreateDistributionWithTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateDistributionWithTags", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateDistributionWithTagsAsync(ctx workflow.Context, input *cloudfront.CreateDistributionWithTagsInput) *CloudfrontCreateDistributionWithTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateDistributionWithTags", input)
	return &CloudfrontCreateDistributionWithTagsFuture{Future: future}
}

func (a *CloudFrontStub) CreateFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput) *CloudfrontCreateFieldLevelEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateFieldLevelEncryptionConfig", input)
	return &CloudfrontCreateFieldLevelEncryptionConfigFuture{Future: future}
}

func (a *CloudFrontStub) CreateFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput) *CloudfrontCreateFieldLevelEncryptionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateFieldLevelEncryptionProfile", input)
	return &CloudfrontCreateFieldLevelEncryptionProfileFuture{Future: future}
}

func (a *CloudFrontStub) CreateInvalidation(ctx workflow.Context, input *cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error) {
	var output cloudfront.CreateInvalidationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateInvalidation", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateInvalidationAsync(ctx workflow.Context, input *cloudfront.CreateInvalidationInput) *CloudfrontCreateInvalidationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateInvalidation", input)
	return &CloudfrontCreateInvalidationFuture{Future: future}
}

func (a *CloudFrontStub) CreateMonitoringSubscription(ctx workflow.Context, input *cloudfront.CreateMonitoringSubscriptionInput) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	var output cloudfront.CreateMonitoringSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateMonitoringSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.CreateMonitoringSubscriptionInput) *CloudfrontCreateMonitoringSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateMonitoringSubscription", input)
	return &CloudfrontCreateMonitoringSubscriptionFuture{Future: future}
}

func (a *CloudFrontStub) CreateOriginRequestPolicy(ctx workflow.Context, input *cloudfront.CreateOriginRequestPolicyInput) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	var output cloudfront.CreateOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.CreateOriginRequestPolicyInput) *CloudfrontCreateOriginRequestPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateOriginRequestPolicy", input)
	return &CloudfrontCreateOriginRequestPolicyFuture{Future: future}
}

func (a *CloudFrontStub) CreatePublicKey(ctx workflow.Context, input *cloudfront.CreatePublicKeyInput) (*cloudfront.CreatePublicKeyOutput, error) {
	var output cloudfront.CreatePublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreatePublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreatePublicKeyAsync(ctx workflow.Context, input *cloudfront.CreatePublicKeyInput) *CloudfrontCreatePublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreatePublicKey", input)
	return &CloudfrontCreatePublicKeyFuture{Future: future}
}

func (a *CloudFrontStub) CreateRealtimeLogConfig(ctx workflow.Context, input *cloudfront.CreateRealtimeLogConfigInput) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	var output cloudfront.CreateRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.CreateRealtimeLogConfigInput) *CloudfrontCreateRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateRealtimeLogConfig", input)
	return &CloudfrontCreateRealtimeLogConfigFuture{Future: future}
}

func (a *CloudFrontStub) CreateStreamingDistribution(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error) {
	var output cloudfront.CreateStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionInput) *CloudfrontCreateStreamingDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateStreamingDistribution", input)
	return &CloudfrontCreateStreamingDistributionFuture{Future: future}
}

func (a *CloudFrontStub) CreateStreamingDistributionWithTags(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	var output cloudfront.CreateStreamingDistributionWithTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateStreamingDistributionWithTags", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) CreateStreamingDistributionWithTagsAsync(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput) *CloudfrontCreateStreamingDistributionWithTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.CreateStreamingDistributionWithTags", input)
	return &CloudfrontCreateStreamingDistributionWithTagsFuture{Future: future}
}

func (a *CloudFrontStub) DeleteCachePolicy(ctx workflow.Context, input *cloudfront.DeleteCachePolicyInput) (*cloudfront.DeleteCachePolicyOutput, error) {
	var output cloudfront.DeleteCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteCachePolicyAsync(ctx workflow.Context, input *cloudfront.DeleteCachePolicyInput) *CloudfrontDeleteCachePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteCachePolicy", input)
	return &CloudfrontDeleteCachePolicyFuture{Future: future}
}

func (a *CloudFrontStub) DeleteCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) *CloudfrontDeleteCloudFrontOriginAccessIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteCloudFrontOriginAccessIdentity", input)
	return &CloudfrontDeleteCloudFrontOriginAccessIdentityFuture{Future: future}
}

func (a *CloudFrontStub) DeleteDistribution(ctx workflow.Context, input *cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error) {
	var output cloudfront.DeleteDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteDistributionAsync(ctx workflow.Context, input *cloudfront.DeleteDistributionInput) *CloudfrontDeleteDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteDistribution", input)
	return &CloudfrontDeleteDistributionFuture{Future: future}
}

func (a *CloudFrontStub) DeleteFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput) *CloudfrontDeleteFieldLevelEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteFieldLevelEncryptionConfig", input)
	return &CloudfrontDeleteFieldLevelEncryptionConfigFuture{Future: future}
}

func (a *CloudFrontStub) DeleteFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput) *CloudfrontDeleteFieldLevelEncryptionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteFieldLevelEncryptionProfile", input)
	return &CloudfrontDeleteFieldLevelEncryptionProfileFuture{Future: future}
}

func (a *CloudFrontStub) DeleteMonitoringSubscription(ctx workflow.Context, input *cloudfront.DeleteMonitoringSubscriptionInput) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	var output cloudfront.DeleteMonitoringSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteMonitoringSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.DeleteMonitoringSubscriptionInput) *CloudfrontDeleteMonitoringSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteMonitoringSubscription", input)
	return &CloudfrontDeleteMonitoringSubscriptionFuture{Future: future}
}

func (a *CloudFrontStub) DeleteOriginRequestPolicy(ctx workflow.Context, input *cloudfront.DeleteOriginRequestPolicyInput) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	var output cloudfront.DeleteOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.DeleteOriginRequestPolicyInput) *CloudfrontDeleteOriginRequestPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteOriginRequestPolicy", input)
	return &CloudfrontDeleteOriginRequestPolicyFuture{Future: future}
}

func (a *CloudFrontStub) DeletePublicKey(ctx workflow.Context, input *cloudfront.DeletePublicKeyInput) (*cloudfront.DeletePublicKeyOutput, error) {
	var output cloudfront.DeletePublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeletePublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeletePublicKeyAsync(ctx workflow.Context, input *cloudfront.DeletePublicKeyInput) *CloudfrontDeletePublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeletePublicKey", input)
	return &CloudfrontDeletePublicKeyFuture{Future: future}
}

func (a *CloudFrontStub) DeleteRealtimeLogConfig(ctx workflow.Context, input *cloudfront.DeleteRealtimeLogConfigInput) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	var output cloudfront.DeleteRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.DeleteRealtimeLogConfigInput) *CloudfrontDeleteRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteRealtimeLogConfig", input)
	return &CloudfrontDeleteRealtimeLogConfigFuture{Future: future}
}

func (a *CloudFrontStub) DeleteStreamingDistribution(ctx workflow.Context, input *cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	var output cloudfront.DeleteStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) DeleteStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.DeleteStreamingDistributionInput) *CloudfrontDeleteStreamingDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.DeleteStreamingDistribution", input)
	return &CloudfrontDeleteStreamingDistributionFuture{Future: future}
}

func (a *CloudFrontStub) GetCachePolicy(ctx workflow.Context, input *cloudfront.GetCachePolicyInput) (*cloudfront.GetCachePolicyOutput, error) {
	var output cloudfront.GetCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetCachePolicyAsync(ctx workflow.Context, input *cloudfront.GetCachePolicyInput) *CloudfrontGetCachePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCachePolicy", input)
	return &CloudfrontGetCachePolicyFuture{Future: future}
}

func (a *CloudFrontStub) GetCachePolicyConfig(ctx workflow.Context, input *cloudfront.GetCachePolicyConfigInput) (*cloudfront.GetCachePolicyConfigOutput, error) {
	var output cloudfront.GetCachePolicyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCachePolicyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetCachePolicyConfigAsync(ctx workflow.Context, input *cloudfront.GetCachePolicyConfigInput) *CloudfrontGetCachePolicyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCachePolicyConfig", input)
	return &CloudfrontGetCachePolicyConfigFuture{Future: future}
}

func (a *CloudFrontStub) GetCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput) *CloudfrontGetCloudFrontOriginAccessIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCloudFrontOriginAccessIdentity", input)
	return &CloudfrontGetCloudFrontOriginAccessIdentityFuture{Future: future}
}

func (a *CloudFrontStub) GetCloudFrontOriginAccessIdentityConfig(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCloudFrontOriginAccessIdentityConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetCloudFrontOriginAccessIdentityConfigAsync(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) *CloudfrontGetCloudFrontOriginAccessIdentityConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetCloudFrontOriginAccessIdentityConfig", input)
	return &CloudfrontGetCloudFrontOriginAccessIdentityConfigFuture{Future: future}
}

func (a *CloudFrontStub) GetDistribution(ctx workflow.Context, input *cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error) {
	var output cloudfront.GetDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetDistributionAsync(ctx workflow.Context, input *cloudfront.GetDistributionInput) *CloudfrontGetDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetDistribution", input)
	return &CloudfrontGetDistributionFuture{Future: future}
}

func (a *CloudFrontStub) GetDistributionConfig(ctx workflow.Context, input *cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error) {
	var output cloudfront.GetDistributionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetDistributionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetDistributionConfigAsync(ctx workflow.Context, input *cloudfront.GetDistributionConfigInput) *CloudfrontGetDistributionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetDistributionConfig", input)
	return &CloudfrontGetDistributionConfigFuture{Future: future}
}

func (a *CloudFrontStub) GetFieldLevelEncryption(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionInput) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetFieldLevelEncryptionAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionInput) *CloudfrontGetFieldLevelEncryptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryption", input)
	return &CloudfrontGetFieldLevelEncryptionFuture{Future: future}
}

func (a *CloudFrontStub) GetFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput) *CloudfrontGetFieldLevelEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryptionConfig", input)
	return &CloudfrontGetFieldLevelEncryptionConfigFuture{Future: future}
}

func (a *CloudFrontStub) GetFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput) *CloudfrontGetFieldLevelEncryptionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryptionProfile", input)
	return &CloudfrontGetFieldLevelEncryptionProfileFuture{Future: future}
}

func (a *CloudFrontStub) GetFieldLevelEncryptionProfileConfig(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryptionProfileConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetFieldLevelEncryptionProfileConfigAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput) *CloudfrontGetFieldLevelEncryptionProfileConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetFieldLevelEncryptionProfileConfig", input)
	return &CloudfrontGetFieldLevelEncryptionProfileConfigFuture{Future: future}
}

func (a *CloudFrontStub) GetInvalidation(ctx workflow.Context, input *cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error) {
	var output cloudfront.GetInvalidationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetInvalidation", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetInvalidationAsync(ctx workflow.Context, input *cloudfront.GetInvalidationInput) *CloudfrontGetInvalidationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetInvalidation", input)
	return &CloudfrontGetInvalidationFuture{Future: future}
}

func (a *CloudFrontStub) GetMonitoringSubscription(ctx workflow.Context, input *cloudfront.GetMonitoringSubscriptionInput) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	var output cloudfront.GetMonitoringSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetMonitoringSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.GetMonitoringSubscriptionInput) *CloudfrontGetMonitoringSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetMonitoringSubscription", input)
	return &CloudfrontGetMonitoringSubscriptionFuture{Future: future}
}

func (a *CloudFrontStub) GetOriginRequestPolicy(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyInput) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	var output cloudfront.GetOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyInput) *CloudfrontGetOriginRequestPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetOriginRequestPolicy", input)
	return &CloudfrontGetOriginRequestPolicyFuture{Future: future}
}

func (a *CloudFrontStub) GetOriginRequestPolicyConfig(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyConfigInput) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	var output cloudfront.GetOriginRequestPolicyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetOriginRequestPolicyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetOriginRequestPolicyConfigAsync(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyConfigInput) *CloudfrontGetOriginRequestPolicyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetOriginRequestPolicyConfig", input)
	return &CloudfrontGetOriginRequestPolicyConfigFuture{Future: future}
}

func (a *CloudFrontStub) GetPublicKey(ctx workflow.Context, input *cloudfront.GetPublicKeyInput) (*cloudfront.GetPublicKeyOutput, error) {
	var output cloudfront.GetPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetPublicKeyAsync(ctx workflow.Context, input *cloudfront.GetPublicKeyInput) *CloudfrontGetPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetPublicKey", input)
	return &CloudfrontGetPublicKeyFuture{Future: future}
}

func (a *CloudFrontStub) GetPublicKeyConfig(ctx workflow.Context, input *cloudfront.GetPublicKeyConfigInput) (*cloudfront.GetPublicKeyConfigOutput, error) {
	var output cloudfront.GetPublicKeyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetPublicKeyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetPublicKeyConfigAsync(ctx workflow.Context, input *cloudfront.GetPublicKeyConfigInput) *CloudfrontGetPublicKeyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetPublicKeyConfig", input)
	return &CloudfrontGetPublicKeyConfigFuture{Future: future}
}

func (a *CloudFrontStub) GetRealtimeLogConfig(ctx workflow.Context, input *cloudfront.GetRealtimeLogConfigInput) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	var output cloudfront.GetRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.GetRealtimeLogConfigInput) *CloudfrontGetRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetRealtimeLogConfig", input)
	return &CloudfrontGetRealtimeLogConfigFuture{Future: future}
}

func (a *CloudFrontStub) GetStreamingDistribution(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error) {
	var output cloudfront.GetStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) *CloudfrontGetStreamingDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetStreamingDistribution", input)
	return &CloudfrontGetStreamingDistributionFuture{Future: future}
}

func (a *CloudFrontStub) GetStreamingDistributionConfig(ctx workflow.Context, input *cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	var output cloudfront.GetStreamingDistributionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetStreamingDistributionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) GetStreamingDistributionConfigAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionConfigInput) *CloudfrontGetStreamingDistributionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.GetStreamingDistributionConfig", input)
	return &CloudfrontGetStreamingDistributionConfigFuture{Future: future}
}

func (a *CloudFrontStub) ListCachePolicies(ctx workflow.Context, input *cloudfront.ListCachePoliciesInput) (*cloudfront.ListCachePoliciesOutput, error) {
	var output cloudfront.ListCachePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListCachePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListCachePoliciesAsync(ctx workflow.Context, input *cloudfront.ListCachePoliciesInput) *CloudfrontListCachePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListCachePolicies", input)
	return &CloudfrontListCachePoliciesFuture{Future: future}
}

func (a *CloudFrontStub) ListCloudFrontOriginAccessIdentities(ctx workflow.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	var output cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListCloudFrontOriginAccessIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListCloudFrontOriginAccessIdentitiesAsync(ctx workflow.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) *CloudfrontListCloudFrontOriginAccessIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListCloudFrontOriginAccessIdentities", input)
	return &CloudfrontListCloudFrontOriginAccessIdentitiesFuture{Future: future}
}

func (a *CloudFrontStub) ListDistributions(ctx workflow.Context, input *cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error) {
	var output cloudfront.ListDistributionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributions", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListDistributionsAsync(ctx workflow.Context, input *cloudfront.ListDistributionsInput) *CloudfrontListDistributionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributions", input)
	return &CloudfrontListDistributionsFuture{Future: future}
}

func (a *CloudFrontStub) ListDistributionsByCachePolicyId(ctx workflow.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByCachePolicyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByCachePolicyId", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListDistributionsByCachePolicyIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput) *CloudfrontListDistributionsByCachePolicyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByCachePolicyId", input)
	return &CloudfrontListDistributionsByCachePolicyIdFuture{Future: future}
}

func (a *CloudFrontStub) ListDistributionsByOriginRequestPolicyId(ctx workflow.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByOriginRequestPolicyId", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListDistributionsByOriginRequestPolicyIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) *CloudfrontListDistributionsByOriginRequestPolicyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByOriginRequestPolicyId", input)
	return &CloudfrontListDistributionsByOriginRequestPolicyIdFuture{Future: future}
}

func (a *CloudFrontStub) ListDistributionsByRealtimeLogConfig(ctx workflow.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	var output cloudfront.ListDistributionsByRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListDistributionsByRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput) *CloudfrontListDistributionsByRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByRealtimeLogConfig", input)
	return &CloudfrontListDistributionsByRealtimeLogConfigFuture{Future: future}
}

func (a *CloudFrontStub) ListDistributionsByWebACLId(ctx workflow.Context, input *cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	var output cloudfront.ListDistributionsByWebACLIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByWebACLId", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListDistributionsByWebACLIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByWebACLIdInput) *CloudfrontListDistributionsByWebACLIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListDistributionsByWebACLId", input)
	return &CloudfrontListDistributionsByWebACLIdFuture{Future: future}
}

func (a *CloudFrontStub) ListFieldLevelEncryptionConfigs(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListFieldLevelEncryptionConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListFieldLevelEncryptionConfigsAsync(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput) *CloudfrontListFieldLevelEncryptionConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListFieldLevelEncryptionConfigs", input)
	return &CloudfrontListFieldLevelEncryptionConfigsFuture{Future: future}
}

func (a *CloudFrontStub) ListFieldLevelEncryptionProfiles(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListFieldLevelEncryptionProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListFieldLevelEncryptionProfilesAsync(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput) *CloudfrontListFieldLevelEncryptionProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListFieldLevelEncryptionProfiles", input)
	return &CloudfrontListFieldLevelEncryptionProfilesFuture{Future: future}
}

func (a *CloudFrontStub) ListInvalidations(ctx workflow.Context, input *cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error) {
	var output cloudfront.ListInvalidationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListInvalidations", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListInvalidationsAsync(ctx workflow.Context, input *cloudfront.ListInvalidationsInput) *CloudfrontListInvalidationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListInvalidations", input)
	return &CloudfrontListInvalidationsFuture{Future: future}
}

func (a *CloudFrontStub) ListOriginRequestPolicies(ctx workflow.Context, input *cloudfront.ListOriginRequestPoliciesInput) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	var output cloudfront.ListOriginRequestPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListOriginRequestPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListOriginRequestPoliciesAsync(ctx workflow.Context, input *cloudfront.ListOriginRequestPoliciesInput) *CloudfrontListOriginRequestPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListOriginRequestPolicies", input)
	return &CloudfrontListOriginRequestPoliciesFuture{Future: future}
}

func (a *CloudFrontStub) ListPublicKeys(ctx workflow.Context, input *cloudfront.ListPublicKeysInput) (*cloudfront.ListPublicKeysOutput, error) {
	var output cloudfront.ListPublicKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListPublicKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListPublicKeysAsync(ctx workflow.Context, input *cloudfront.ListPublicKeysInput) *CloudfrontListPublicKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListPublicKeys", input)
	return &CloudfrontListPublicKeysFuture{Future: future}
}

func (a *CloudFrontStub) ListRealtimeLogConfigs(ctx workflow.Context, input *cloudfront.ListRealtimeLogConfigsInput) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	var output cloudfront.ListRealtimeLogConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListRealtimeLogConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListRealtimeLogConfigsAsync(ctx workflow.Context, input *cloudfront.ListRealtimeLogConfigsInput) *CloudfrontListRealtimeLogConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListRealtimeLogConfigs", input)
	return &CloudfrontListRealtimeLogConfigsFuture{Future: future}
}

func (a *CloudFrontStub) ListStreamingDistributions(ctx workflow.Context, input *cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error) {
	var output cloudfront.ListStreamingDistributionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListStreamingDistributions", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListStreamingDistributionsAsync(ctx workflow.Context, input *cloudfront.ListStreamingDistributionsInput) *CloudfrontListStreamingDistributionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListStreamingDistributions", input)
	return &CloudfrontListStreamingDistributionsFuture{Future: future}
}

func (a *CloudFrontStub) ListTagsForResource(ctx workflow.Context, input *cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error) {
	var output cloudfront.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) ListTagsForResourceAsync(ctx workflow.Context, input *cloudfront.ListTagsForResourceInput) *CloudfrontListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.ListTagsForResource", input)
	return &CloudfrontListTagsForResourceFuture{Future: future}
}

func (a *CloudFrontStub) TagResource(ctx workflow.Context, input *cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error) {
	var output cloudfront.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) TagResourceAsync(ctx workflow.Context, input *cloudfront.TagResourceInput) *CloudfrontTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.TagResource", input)
	return &CloudfrontTagResourceFuture{Future: future}
}

func (a *CloudFrontStub) UntagResource(ctx workflow.Context, input *cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error) {
	var output cloudfront.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UntagResourceAsync(ctx workflow.Context, input *cloudfront.UntagResourceInput) *CloudfrontUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UntagResource", input)
	return &CloudfrontUntagResourceFuture{Future: future}
}

func (a *CloudFrontStub) UpdateCachePolicy(ctx workflow.Context, input *cloudfront.UpdateCachePolicyInput) (*cloudfront.UpdateCachePolicyOutput, error) {
	var output cloudfront.UpdateCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateCachePolicyAsync(ctx workflow.Context, input *cloudfront.UpdateCachePolicyInput) *CloudfrontUpdateCachePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateCachePolicy", input)
	return &CloudfrontUpdateCachePolicyFuture{Future: future}
}

func (a *CloudFrontStub) UpdateCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) *CloudfrontUpdateCloudFrontOriginAccessIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateCloudFrontOriginAccessIdentity", input)
	return &CloudfrontUpdateCloudFrontOriginAccessIdentityFuture{Future: future}
}

func (a *CloudFrontStub) UpdateDistribution(ctx workflow.Context, input *cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error) {
	var output cloudfront.UpdateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateDistributionAsync(ctx workflow.Context, input *cloudfront.UpdateDistributionInput) *CloudfrontUpdateDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateDistribution", input)
	return &CloudfrontUpdateDistributionFuture{Future: future}
}

func (a *CloudFrontStub) UpdateFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput) *CloudfrontUpdateFieldLevelEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateFieldLevelEncryptionConfig", input)
	return &CloudfrontUpdateFieldLevelEncryptionConfigFuture{Future: future}
}

func (a *CloudFrontStub) UpdateFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput) *CloudfrontUpdateFieldLevelEncryptionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateFieldLevelEncryptionProfile", input)
	return &CloudfrontUpdateFieldLevelEncryptionProfileFuture{Future: future}
}

func (a *CloudFrontStub) UpdateOriginRequestPolicy(ctx workflow.Context, input *cloudfront.UpdateOriginRequestPolicyInput) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	var output cloudfront.UpdateOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.UpdateOriginRequestPolicyInput) *CloudfrontUpdateOriginRequestPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateOriginRequestPolicy", input)
	return &CloudfrontUpdateOriginRequestPolicyFuture{Future: future}
}

func (a *CloudFrontStub) UpdatePublicKey(ctx workflow.Context, input *cloudfront.UpdatePublicKeyInput) (*cloudfront.UpdatePublicKeyOutput, error) {
	var output cloudfront.UpdatePublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdatePublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdatePublicKeyAsync(ctx workflow.Context, input *cloudfront.UpdatePublicKeyInput) *CloudfrontUpdatePublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdatePublicKey", input)
	return &CloudfrontUpdatePublicKeyFuture{Future: future}
}

func (a *CloudFrontStub) UpdateRealtimeLogConfig(ctx workflow.Context, input *cloudfront.UpdateRealtimeLogConfigInput) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	var output cloudfront.UpdateRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.UpdateRealtimeLogConfigInput) *CloudfrontUpdateRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateRealtimeLogConfig", input)
	return &CloudfrontUpdateRealtimeLogConfigFuture{Future: future}
}

func (a *CloudFrontStub) UpdateStreamingDistribution(ctx workflow.Context, input *cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	var output cloudfront.UpdateStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFrontStub) UpdateStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.UpdateStreamingDistributionInput) *CloudfrontUpdateStreamingDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudfront.UpdateStreamingDistribution", input)
	return &CloudfrontUpdateStreamingDistributionFuture{Future: future}
}

func (a *CloudFrontStub) WaitUntilDistributionDeployed(ctx workflow.Context, input *cloudfront.GetDistributionInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudfront.WaitUntilDistributionDeployed", input).Get(ctx, nil)
}

func (a *CloudFrontStub) WaitUntilDistributionDeployedAsync(ctx workflow.Context, input *cloudfront.GetDistributionInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudfront.WaitUntilDistributionDeployed", input)
}

func (a *CloudFrontStub) WaitUntilInvalidationCompleted(ctx workflow.Context, input *cloudfront.GetInvalidationInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudfront.WaitUntilInvalidationCompleted", input).Get(ctx, nil)
}

func (a *CloudFrontStub) WaitUntilInvalidationCompletedAsync(ctx workflow.Context, input *cloudfront.GetInvalidationInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudfront.WaitUntilInvalidationCompleted", input)
}

func (a *CloudFrontStub) WaitUntilStreamingDistributionDeployed(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudfront.WaitUntilStreamingDistributionDeployed", input).Get(ctx, nil)
}

func (a *CloudFrontStub) WaitUntilStreamingDistributionDeployedAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudfront.WaitUntilStreamingDistributionDeployed", input)
}
