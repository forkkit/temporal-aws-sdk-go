// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/qldb"
	"go.temporal.io/sdk/workflow"
)

type QLDBClient interface {
	CancelJournalKinesisStream(ctx workflow.Context, input *qldb.CancelJournalKinesisStreamInput) (*qldb.CancelJournalKinesisStreamOutput, error)
	CancelJournalKinesisStreamAsync(ctx workflow.Context, input *qldb.CancelJournalKinesisStreamInput) *QLDBCancelJournalKinesisStreamFuture

	CreateLedger(ctx workflow.Context, input *qldb.CreateLedgerInput) (*qldb.CreateLedgerOutput, error)
	CreateLedgerAsync(ctx workflow.Context, input *qldb.CreateLedgerInput) *QLDBCreateLedgerFuture

	DeleteLedger(ctx workflow.Context, input *qldb.DeleteLedgerInput) (*qldb.DeleteLedgerOutput, error)
	DeleteLedgerAsync(ctx workflow.Context, input *qldb.DeleteLedgerInput) *QLDBDeleteLedgerFuture

	DescribeJournalKinesisStream(ctx workflow.Context, input *qldb.DescribeJournalKinesisStreamInput) (*qldb.DescribeJournalKinesisStreamOutput, error)
	DescribeJournalKinesisStreamAsync(ctx workflow.Context, input *qldb.DescribeJournalKinesisStreamInput) *QLDBDescribeJournalKinesisStreamFuture

	DescribeJournalS3Export(ctx workflow.Context, input *qldb.DescribeJournalS3ExportInput) (*qldb.DescribeJournalS3ExportOutput, error)
	DescribeJournalS3ExportAsync(ctx workflow.Context, input *qldb.DescribeJournalS3ExportInput) *QLDBDescribeJournalS3ExportFuture

	DescribeLedger(ctx workflow.Context, input *qldb.DescribeLedgerInput) (*qldb.DescribeLedgerOutput, error)
	DescribeLedgerAsync(ctx workflow.Context, input *qldb.DescribeLedgerInput) *QLDBDescribeLedgerFuture

	ExportJournalToS3(ctx workflow.Context, input *qldb.ExportJournalToS3Input) (*qldb.ExportJournalToS3Output, error)
	ExportJournalToS3Async(ctx workflow.Context, input *qldb.ExportJournalToS3Input) *QLDBExportJournalToS3Future

	GetBlock(ctx workflow.Context, input *qldb.GetBlockInput) (*qldb.GetBlockOutput, error)
	GetBlockAsync(ctx workflow.Context, input *qldb.GetBlockInput) *QLDBGetBlockFuture

	GetDigest(ctx workflow.Context, input *qldb.GetDigestInput) (*qldb.GetDigestOutput, error)
	GetDigestAsync(ctx workflow.Context, input *qldb.GetDigestInput) *QLDBGetDigestFuture

	GetRevision(ctx workflow.Context, input *qldb.GetRevisionInput) (*qldb.GetRevisionOutput, error)
	GetRevisionAsync(ctx workflow.Context, input *qldb.GetRevisionInput) *QLDBGetRevisionFuture

	ListJournalKinesisStreamsForLedger(ctx workflow.Context, input *qldb.ListJournalKinesisStreamsForLedgerInput) (*qldb.ListJournalKinesisStreamsForLedgerOutput, error)
	ListJournalKinesisStreamsForLedgerAsync(ctx workflow.Context, input *qldb.ListJournalKinesisStreamsForLedgerInput) *QLDBListJournalKinesisStreamsForLedgerFuture

	ListJournalS3Exports(ctx workflow.Context, input *qldb.ListJournalS3ExportsInput) (*qldb.ListJournalS3ExportsOutput, error)
	ListJournalS3ExportsAsync(ctx workflow.Context, input *qldb.ListJournalS3ExportsInput) *QLDBListJournalS3ExportsFuture

	ListJournalS3ExportsForLedger(ctx workflow.Context, input *qldb.ListJournalS3ExportsForLedgerInput) (*qldb.ListJournalS3ExportsForLedgerOutput, error)
	ListJournalS3ExportsForLedgerAsync(ctx workflow.Context, input *qldb.ListJournalS3ExportsForLedgerInput) *QLDBListJournalS3ExportsForLedgerFuture

	ListLedgers(ctx workflow.Context, input *qldb.ListLedgersInput) (*qldb.ListLedgersOutput, error)
	ListLedgersAsync(ctx workflow.Context, input *qldb.ListLedgersInput) *QLDBListLedgersFuture

	ListTagsForResource(ctx workflow.Context, input *qldb.ListTagsForResourceInput) (*qldb.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *qldb.ListTagsForResourceInput) *QLDBListTagsForResourceFuture

	StreamJournalToKinesis(ctx workflow.Context, input *qldb.StreamJournalToKinesisInput) (*qldb.StreamJournalToKinesisOutput, error)
	StreamJournalToKinesisAsync(ctx workflow.Context, input *qldb.StreamJournalToKinesisInput) *QLDBStreamJournalToKinesisFuture

	TagResource(ctx workflow.Context, input *qldb.TagResourceInput) (*qldb.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *qldb.TagResourceInput) *QLDBTagResourceFuture

	UntagResource(ctx workflow.Context, input *qldb.UntagResourceInput) (*qldb.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *qldb.UntagResourceInput) *QLDBUntagResourceFuture

	UpdateLedger(ctx workflow.Context, input *qldb.UpdateLedgerInput) (*qldb.UpdateLedgerOutput, error)
	UpdateLedgerAsync(ctx workflow.Context, input *qldb.UpdateLedgerInput) *QLDBUpdateLedgerFuture
}

type QLDBStub struct{}

func NewQLDBStub() QLDBClient {
	return &QLDBStub{}
}

type QLDBCancelJournalKinesisStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBCancelJournalKinesisStreamFuture) Get(ctx workflow.Context) (*qldb.CancelJournalKinesisStreamOutput, error) {
	var output qldb.CancelJournalKinesisStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBCreateLedgerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBCreateLedgerFuture) Get(ctx workflow.Context) (*qldb.CreateLedgerOutput, error) {
	var output qldb.CreateLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBDeleteLedgerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBDeleteLedgerFuture) Get(ctx workflow.Context) (*qldb.DeleteLedgerOutput, error) {
	var output qldb.DeleteLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBDescribeJournalKinesisStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBDescribeJournalKinesisStreamFuture) Get(ctx workflow.Context) (*qldb.DescribeJournalKinesisStreamOutput, error) {
	var output qldb.DescribeJournalKinesisStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBDescribeJournalS3ExportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBDescribeJournalS3ExportFuture) Get(ctx workflow.Context) (*qldb.DescribeJournalS3ExportOutput, error) {
	var output qldb.DescribeJournalS3ExportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBDescribeLedgerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBDescribeLedgerFuture) Get(ctx workflow.Context) (*qldb.DescribeLedgerOutput, error) {
	var output qldb.DescribeLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBExportJournalToS3Future struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBExportJournalToS3Future) Get(ctx workflow.Context) (*qldb.ExportJournalToS3Output, error) {
	var output qldb.ExportJournalToS3Output
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBGetBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBGetBlockFuture) Get(ctx workflow.Context) (*qldb.GetBlockOutput, error) {
	var output qldb.GetBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBGetDigestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBGetDigestFuture) Get(ctx workflow.Context) (*qldb.GetDigestOutput, error) {
	var output qldb.GetDigestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBGetRevisionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBGetRevisionFuture) Get(ctx workflow.Context) (*qldb.GetRevisionOutput, error) {
	var output qldb.GetRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBListJournalKinesisStreamsForLedgerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBListJournalKinesisStreamsForLedgerFuture) Get(ctx workflow.Context) (*qldb.ListJournalKinesisStreamsForLedgerOutput, error) {
	var output qldb.ListJournalKinesisStreamsForLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBListJournalS3ExportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBListJournalS3ExportsFuture) Get(ctx workflow.Context) (*qldb.ListJournalS3ExportsOutput, error) {
	var output qldb.ListJournalS3ExportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBListJournalS3ExportsForLedgerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBListJournalS3ExportsForLedgerFuture) Get(ctx workflow.Context) (*qldb.ListJournalS3ExportsForLedgerOutput, error) {
	var output qldb.ListJournalS3ExportsForLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBListLedgersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBListLedgersFuture) Get(ctx workflow.Context) (*qldb.ListLedgersOutput, error) {
	var output qldb.ListLedgersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBListTagsForResourceFuture) Get(ctx workflow.Context) (*qldb.ListTagsForResourceOutput, error) {
	var output qldb.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBStreamJournalToKinesisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBStreamJournalToKinesisFuture) Get(ctx workflow.Context) (*qldb.StreamJournalToKinesisOutput, error) {
	var output qldb.StreamJournalToKinesisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBTagResourceFuture) Get(ctx workflow.Context) (*qldb.TagResourceOutput, error) {
	var output qldb.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBUntagResourceFuture) Get(ctx workflow.Context) (*qldb.UntagResourceOutput, error) {
	var output qldb.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QLDBUpdateLedgerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QLDBUpdateLedgerFuture) Get(ctx workflow.Context) (*qldb.UpdateLedgerOutput, error) {
	var output qldb.UpdateLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) CancelJournalKinesisStream(ctx workflow.Context, input *qldb.CancelJournalKinesisStreamInput) (*qldb.CancelJournalKinesisStreamOutput, error) {
	var output qldb.CancelJournalKinesisStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.CancelJournalKinesisStream", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) CancelJournalKinesisStreamAsync(ctx workflow.Context, input *qldb.CancelJournalKinesisStreamInput) *QLDBCancelJournalKinesisStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.CancelJournalKinesisStream", input)
	return &QLDBCancelJournalKinesisStreamFuture{Future: future}
}

func (a *QLDBStub) CreateLedger(ctx workflow.Context, input *qldb.CreateLedgerInput) (*qldb.CreateLedgerOutput, error) {
	var output qldb.CreateLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.CreateLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) CreateLedgerAsync(ctx workflow.Context, input *qldb.CreateLedgerInput) *QLDBCreateLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.CreateLedger", input)
	return &QLDBCreateLedgerFuture{Future: future}
}

func (a *QLDBStub) DeleteLedger(ctx workflow.Context, input *qldb.DeleteLedgerInput) (*qldb.DeleteLedgerOutput, error) {
	var output qldb.DeleteLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.DeleteLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) DeleteLedgerAsync(ctx workflow.Context, input *qldb.DeleteLedgerInput) *QLDBDeleteLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.DeleteLedger", input)
	return &QLDBDeleteLedgerFuture{Future: future}
}

func (a *QLDBStub) DescribeJournalKinesisStream(ctx workflow.Context, input *qldb.DescribeJournalKinesisStreamInput) (*qldb.DescribeJournalKinesisStreamOutput, error) {
	var output qldb.DescribeJournalKinesisStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.DescribeJournalKinesisStream", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) DescribeJournalKinesisStreamAsync(ctx workflow.Context, input *qldb.DescribeJournalKinesisStreamInput) *QLDBDescribeJournalKinesisStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.DescribeJournalKinesisStream", input)
	return &QLDBDescribeJournalKinesisStreamFuture{Future: future}
}

func (a *QLDBStub) DescribeJournalS3Export(ctx workflow.Context, input *qldb.DescribeJournalS3ExportInput) (*qldb.DescribeJournalS3ExportOutput, error) {
	var output qldb.DescribeJournalS3ExportOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.DescribeJournalS3Export", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) DescribeJournalS3ExportAsync(ctx workflow.Context, input *qldb.DescribeJournalS3ExportInput) *QLDBDescribeJournalS3ExportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.DescribeJournalS3Export", input)
	return &QLDBDescribeJournalS3ExportFuture{Future: future}
}

func (a *QLDBStub) DescribeLedger(ctx workflow.Context, input *qldb.DescribeLedgerInput) (*qldb.DescribeLedgerOutput, error) {
	var output qldb.DescribeLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.DescribeLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) DescribeLedgerAsync(ctx workflow.Context, input *qldb.DescribeLedgerInput) *QLDBDescribeLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.DescribeLedger", input)
	return &QLDBDescribeLedgerFuture{Future: future}
}

func (a *QLDBStub) ExportJournalToS3(ctx workflow.Context, input *qldb.ExportJournalToS3Input) (*qldb.ExportJournalToS3Output, error) {
	var output qldb.ExportJournalToS3Output
	err := workflow.ExecuteActivity(ctx, "aws.qldb.ExportJournalToS3", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) ExportJournalToS3Async(ctx workflow.Context, input *qldb.ExportJournalToS3Input) *QLDBExportJournalToS3Future {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.ExportJournalToS3", input)
	return &QLDBExportJournalToS3Future{Future: future}
}

func (a *QLDBStub) GetBlock(ctx workflow.Context, input *qldb.GetBlockInput) (*qldb.GetBlockOutput, error) {
	var output qldb.GetBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.GetBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) GetBlockAsync(ctx workflow.Context, input *qldb.GetBlockInput) *QLDBGetBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.GetBlock", input)
	return &QLDBGetBlockFuture{Future: future}
}

func (a *QLDBStub) GetDigest(ctx workflow.Context, input *qldb.GetDigestInput) (*qldb.GetDigestOutput, error) {
	var output qldb.GetDigestOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.GetDigest", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) GetDigestAsync(ctx workflow.Context, input *qldb.GetDigestInput) *QLDBGetDigestFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.GetDigest", input)
	return &QLDBGetDigestFuture{Future: future}
}

func (a *QLDBStub) GetRevision(ctx workflow.Context, input *qldb.GetRevisionInput) (*qldb.GetRevisionOutput, error) {
	var output qldb.GetRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.GetRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) GetRevisionAsync(ctx workflow.Context, input *qldb.GetRevisionInput) *QLDBGetRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.GetRevision", input)
	return &QLDBGetRevisionFuture{Future: future}
}

func (a *QLDBStub) ListJournalKinesisStreamsForLedger(ctx workflow.Context, input *qldb.ListJournalKinesisStreamsForLedgerInput) (*qldb.ListJournalKinesisStreamsForLedgerOutput, error) {
	var output qldb.ListJournalKinesisStreamsForLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.ListJournalKinesisStreamsForLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) ListJournalKinesisStreamsForLedgerAsync(ctx workflow.Context, input *qldb.ListJournalKinesisStreamsForLedgerInput) *QLDBListJournalKinesisStreamsForLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.ListJournalKinesisStreamsForLedger", input)
	return &QLDBListJournalKinesisStreamsForLedgerFuture{Future: future}
}

func (a *QLDBStub) ListJournalS3Exports(ctx workflow.Context, input *qldb.ListJournalS3ExportsInput) (*qldb.ListJournalS3ExportsOutput, error) {
	var output qldb.ListJournalS3ExportsOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.ListJournalS3Exports", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) ListJournalS3ExportsAsync(ctx workflow.Context, input *qldb.ListJournalS3ExportsInput) *QLDBListJournalS3ExportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.ListJournalS3Exports", input)
	return &QLDBListJournalS3ExportsFuture{Future: future}
}

func (a *QLDBStub) ListJournalS3ExportsForLedger(ctx workflow.Context, input *qldb.ListJournalS3ExportsForLedgerInput) (*qldb.ListJournalS3ExportsForLedgerOutput, error) {
	var output qldb.ListJournalS3ExportsForLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.ListJournalS3ExportsForLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) ListJournalS3ExportsForLedgerAsync(ctx workflow.Context, input *qldb.ListJournalS3ExportsForLedgerInput) *QLDBListJournalS3ExportsForLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.ListJournalS3ExportsForLedger", input)
	return &QLDBListJournalS3ExportsForLedgerFuture{Future: future}
}

func (a *QLDBStub) ListLedgers(ctx workflow.Context, input *qldb.ListLedgersInput) (*qldb.ListLedgersOutput, error) {
	var output qldb.ListLedgersOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.ListLedgers", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) ListLedgersAsync(ctx workflow.Context, input *qldb.ListLedgersInput) *QLDBListLedgersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.ListLedgers", input)
	return &QLDBListLedgersFuture{Future: future}
}

func (a *QLDBStub) ListTagsForResource(ctx workflow.Context, input *qldb.ListTagsForResourceInput) (*qldb.ListTagsForResourceOutput, error) {
	var output qldb.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) ListTagsForResourceAsync(ctx workflow.Context, input *qldb.ListTagsForResourceInput) *QLDBListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.ListTagsForResource", input)
	return &QLDBListTagsForResourceFuture{Future: future}
}

func (a *QLDBStub) StreamJournalToKinesis(ctx workflow.Context, input *qldb.StreamJournalToKinesisInput) (*qldb.StreamJournalToKinesisOutput, error) {
	var output qldb.StreamJournalToKinesisOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.StreamJournalToKinesis", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) StreamJournalToKinesisAsync(ctx workflow.Context, input *qldb.StreamJournalToKinesisInput) *QLDBStreamJournalToKinesisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.StreamJournalToKinesis", input)
	return &QLDBStreamJournalToKinesisFuture{Future: future}
}

func (a *QLDBStub) TagResource(ctx workflow.Context, input *qldb.TagResourceInput) (*qldb.TagResourceOutput, error) {
	var output qldb.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) TagResourceAsync(ctx workflow.Context, input *qldb.TagResourceInput) *QLDBTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.TagResource", input)
	return &QLDBTagResourceFuture{Future: future}
}

func (a *QLDBStub) UntagResource(ctx workflow.Context, input *qldb.UntagResourceInput) (*qldb.UntagResourceOutput, error) {
	var output qldb.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) UntagResourceAsync(ctx workflow.Context, input *qldb.UntagResourceInput) *QLDBUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.UntagResource", input)
	return &QLDBUntagResourceFuture{Future: future}
}

func (a *QLDBStub) UpdateLedger(ctx workflow.Context, input *qldb.UpdateLedgerInput) (*qldb.UpdateLedgerOutput, error) {
	var output qldb.UpdateLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.UpdateLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) UpdateLedgerAsync(ctx workflow.Context, input *qldb.UpdateLedgerInput) *QLDBUpdateLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.UpdateLedger", input)
	return &QLDBUpdateLedgerFuture{Future: future}
}
