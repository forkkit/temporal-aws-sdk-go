// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/qldb"
	"go.temporal.io/sdk/workflow"
)

type QLDBClient interface {
	CancelJournalKinesisStream(ctx workflow.Context, input *qldb.CancelJournalKinesisStreamInput) (*qldb.CancelJournalKinesisStreamOutput, error)
	CancelJournalKinesisStreamAsync(ctx workflow.Context, input *qldb.CancelJournalKinesisStreamInput) *QldbCancelJournalKinesisStreamFuture

	CreateLedger(ctx workflow.Context, input *qldb.CreateLedgerInput) (*qldb.CreateLedgerOutput, error)
	CreateLedgerAsync(ctx workflow.Context, input *qldb.CreateLedgerInput) *QldbCreateLedgerFuture

	DeleteLedger(ctx workflow.Context, input *qldb.DeleteLedgerInput) (*qldb.DeleteLedgerOutput, error)
	DeleteLedgerAsync(ctx workflow.Context, input *qldb.DeleteLedgerInput) *QldbDeleteLedgerFuture

	DescribeJournalKinesisStream(ctx workflow.Context, input *qldb.DescribeJournalKinesisStreamInput) (*qldb.DescribeJournalKinesisStreamOutput, error)
	DescribeJournalKinesisStreamAsync(ctx workflow.Context, input *qldb.DescribeJournalKinesisStreamInput) *QldbDescribeJournalKinesisStreamFuture

	DescribeJournalS3Export(ctx workflow.Context, input *qldb.DescribeJournalS3ExportInput) (*qldb.DescribeJournalS3ExportOutput, error)
	DescribeJournalS3ExportAsync(ctx workflow.Context, input *qldb.DescribeJournalS3ExportInput) *QldbDescribeJournalS3ExportFuture

	DescribeLedger(ctx workflow.Context, input *qldb.DescribeLedgerInput) (*qldb.DescribeLedgerOutput, error)
	DescribeLedgerAsync(ctx workflow.Context, input *qldb.DescribeLedgerInput) *QldbDescribeLedgerFuture

	ExportJournalToS3(ctx workflow.Context, input *qldb.ExportJournalToS3Input) (*qldb.ExportJournalToS3Output, error)
	ExportJournalToS3Async(ctx workflow.Context, input *qldb.ExportJournalToS3Input) *QldbExportJournalToS3Future

	GetBlock(ctx workflow.Context, input *qldb.GetBlockInput) (*qldb.GetBlockOutput, error)
	GetBlockAsync(ctx workflow.Context, input *qldb.GetBlockInput) *QldbGetBlockFuture

	GetDigest(ctx workflow.Context, input *qldb.GetDigestInput) (*qldb.GetDigestOutput, error)
	GetDigestAsync(ctx workflow.Context, input *qldb.GetDigestInput) *QldbGetDigestFuture

	GetRevision(ctx workflow.Context, input *qldb.GetRevisionInput) (*qldb.GetRevisionOutput, error)
	GetRevisionAsync(ctx workflow.Context, input *qldb.GetRevisionInput) *QldbGetRevisionFuture

	ListJournalKinesisStreamsForLedger(ctx workflow.Context, input *qldb.ListJournalKinesisStreamsForLedgerInput) (*qldb.ListJournalKinesisStreamsForLedgerOutput, error)
	ListJournalKinesisStreamsForLedgerAsync(ctx workflow.Context, input *qldb.ListJournalKinesisStreamsForLedgerInput) *QldbListJournalKinesisStreamsForLedgerFuture

	ListJournalS3Exports(ctx workflow.Context, input *qldb.ListJournalS3ExportsInput) (*qldb.ListJournalS3ExportsOutput, error)
	ListJournalS3ExportsAsync(ctx workflow.Context, input *qldb.ListJournalS3ExportsInput) *QldbListJournalS3ExportsFuture

	ListJournalS3ExportsForLedger(ctx workflow.Context, input *qldb.ListJournalS3ExportsForLedgerInput) (*qldb.ListJournalS3ExportsForLedgerOutput, error)
	ListJournalS3ExportsForLedgerAsync(ctx workflow.Context, input *qldb.ListJournalS3ExportsForLedgerInput) *QldbListJournalS3ExportsForLedgerFuture

	ListLedgers(ctx workflow.Context, input *qldb.ListLedgersInput) (*qldb.ListLedgersOutput, error)
	ListLedgersAsync(ctx workflow.Context, input *qldb.ListLedgersInput) *QldbListLedgersFuture

	ListTagsForResource(ctx workflow.Context, input *qldb.ListTagsForResourceInput) (*qldb.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *qldb.ListTagsForResourceInput) *QldbListTagsForResourceFuture

	StreamJournalToKinesis(ctx workflow.Context, input *qldb.StreamJournalToKinesisInput) (*qldb.StreamJournalToKinesisOutput, error)
	StreamJournalToKinesisAsync(ctx workflow.Context, input *qldb.StreamJournalToKinesisInput) *QldbStreamJournalToKinesisFuture

	TagResource(ctx workflow.Context, input *qldb.TagResourceInput) (*qldb.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *qldb.TagResourceInput) *QldbTagResourceFuture

	UntagResource(ctx workflow.Context, input *qldb.UntagResourceInput) (*qldb.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *qldb.UntagResourceInput) *QldbUntagResourceFuture

	UpdateLedger(ctx workflow.Context, input *qldb.UpdateLedgerInput) (*qldb.UpdateLedgerOutput, error)
	UpdateLedgerAsync(ctx workflow.Context, input *qldb.UpdateLedgerInput) *QldbUpdateLedgerFuture
}

type QLDBStub struct{}

func NewQLDBStub() QLDBClient {
	return &QLDBStub{}
}

type QldbCancelJournalKinesisStreamFuture struct {
	Future workflow.Future
}

func (r *QldbCancelJournalKinesisStreamFuture) Get(ctx workflow.Context) (*qldb.CancelJournalKinesisStreamOutput, error) {
	var output qldb.CancelJournalKinesisStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbCreateLedgerFuture struct {
	Future workflow.Future
}

func (r *QldbCreateLedgerFuture) Get(ctx workflow.Context) (*qldb.CreateLedgerOutput, error) {
	var output qldb.CreateLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbDeleteLedgerFuture struct {
	Future workflow.Future
}

func (r *QldbDeleteLedgerFuture) Get(ctx workflow.Context) (*qldb.DeleteLedgerOutput, error) {
	var output qldb.DeleteLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbDescribeJournalKinesisStreamFuture struct {
	Future workflow.Future
}

func (r *QldbDescribeJournalKinesisStreamFuture) Get(ctx workflow.Context) (*qldb.DescribeJournalKinesisStreamOutput, error) {
	var output qldb.DescribeJournalKinesisStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbDescribeJournalS3ExportFuture struct {
	Future workflow.Future
}

func (r *QldbDescribeJournalS3ExportFuture) Get(ctx workflow.Context) (*qldb.DescribeJournalS3ExportOutput, error) {
	var output qldb.DescribeJournalS3ExportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbDescribeLedgerFuture struct {
	Future workflow.Future
}

func (r *QldbDescribeLedgerFuture) Get(ctx workflow.Context) (*qldb.DescribeLedgerOutput, error) {
	var output qldb.DescribeLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbExportJournalToS3Future struct {
	Future workflow.Future
}

func (r *QldbExportJournalToS3Future) Get(ctx workflow.Context) (*qldb.ExportJournalToS3Output, error) {
	var output qldb.ExportJournalToS3Output
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbGetBlockFuture struct {
	Future workflow.Future
}

func (r *QldbGetBlockFuture) Get(ctx workflow.Context) (*qldb.GetBlockOutput, error) {
	var output qldb.GetBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbGetDigestFuture struct {
	Future workflow.Future
}

func (r *QldbGetDigestFuture) Get(ctx workflow.Context) (*qldb.GetDigestOutput, error) {
	var output qldb.GetDigestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbGetRevisionFuture struct {
	Future workflow.Future
}

func (r *QldbGetRevisionFuture) Get(ctx workflow.Context) (*qldb.GetRevisionOutput, error) {
	var output qldb.GetRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbListJournalKinesisStreamsForLedgerFuture struct {
	Future workflow.Future
}

func (r *QldbListJournalKinesisStreamsForLedgerFuture) Get(ctx workflow.Context) (*qldb.ListJournalKinesisStreamsForLedgerOutput, error) {
	var output qldb.ListJournalKinesisStreamsForLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbListJournalS3ExportsFuture struct {
	Future workflow.Future
}

func (r *QldbListJournalS3ExportsFuture) Get(ctx workflow.Context) (*qldb.ListJournalS3ExportsOutput, error) {
	var output qldb.ListJournalS3ExportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbListJournalS3ExportsForLedgerFuture struct {
	Future workflow.Future
}

func (r *QldbListJournalS3ExportsForLedgerFuture) Get(ctx workflow.Context) (*qldb.ListJournalS3ExportsForLedgerOutput, error) {
	var output qldb.ListJournalS3ExportsForLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbListLedgersFuture struct {
	Future workflow.Future
}

func (r *QldbListLedgersFuture) Get(ctx workflow.Context) (*qldb.ListLedgersOutput, error) {
	var output qldb.ListLedgersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *QldbListTagsForResourceFuture) Get(ctx workflow.Context) (*qldb.ListTagsForResourceOutput, error) {
	var output qldb.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbStreamJournalToKinesisFuture struct {
	Future workflow.Future
}

func (r *QldbStreamJournalToKinesisFuture) Get(ctx workflow.Context) (*qldb.StreamJournalToKinesisOutput, error) {
	var output qldb.StreamJournalToKinesisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbTagResourceFuture struct {
	Future workflow.Future
}

func (r *QldbTagResourceFuture) Get(ctx workflow.Context) (*qldb.TagResourceOutput, error) {
	var output qldb.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbUntagResourceFuture struct {
	Future workflow.Future
}

func (r *QldbUntagResourceFuture) Get(ctx workflow.Context) (*qldb.UntagResourceOutput, error) {
	var output qldb.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QldbUpdateLedgerFuture struct {
	Future workflow.Future
}

func (r *QldbUpdateLedgerFuture) Get(ctx workflow.Context) (*qldb.UpdateLedgerOutput, error) {
	var output qldb.UpdateLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) CancelJournalKinesisStream(ctx workflow.Context, input *qldb.CancelJournalKinesisStreamInput) (*qldb.CancelJournalKinesisStreamOutput, error) {
	var output qldb.CancelJournalKinesisStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.CancelJournalKinesisStream", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) CancelJournalKinesisStreamAsync(ctx workflow.Context, input *qldb.CancelJournalKinesisStreamInput) *QldbCancelJournalKinesisStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.CancelJournalKinesisStream", input)
	return &QldbCancelJournalKinesisStreamFuture{Future: future}
}

func (a *QLDBStub) CreateLedger(ctx workflow.Context, input *qldb.CreateLedgerInput) (*qldb.CreateLedgerOutput, error) {
	var output qldb.CreateLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.CreateLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) CreateLedgerAsync(ctx workflow.Context, input *qldb.CreateLedgerInput) *QldbCreateLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.CreateLedger", input)
	return &QldbCreateLedgerFuture{Future: future}
}

func (a *QLDBStub) DeleteLedger(ctx workflow.Context, input *qldb.DeleteLedgerInput) (*qldb.DeleteLedgerOutput, error) {
	var output qldb.DeleteLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.DeleteLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) DeleteLedgerAsync(ctx workflow.Context, input *qldb.DeleteLedgerInput) *QldbDeleteLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.DeleteLedger", input)
	return &QldbDeleteLedgerFuture{Future: future}
}

func (a *QLDBStub) DescribeJournalKinesisStream(ctx workflow.Context, input *qldb.DescribeJournalKinesisStreamInput) (*qldb.DescribeJournalKinesisStreamOutput, error) {
	var output qldb.DescribeJournalKinesisStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.DescribeJournalKinesisStream", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) DescribeJournalKinesisStreamAsync(ctx workflow.Context, input *qldb.DescribeJournalKinesisStreamInput) *QldbDescribeJournalKinesisStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.DescribeJournalKinesisStream", input)
	return &QldbDescribeJournalKinesisStreamFuture{Future: future}
}

func (a *QLDBStub) DescribeJournalS3Export(ctx workflow.Context, input *qldb.DescribeJournalS3ExportInput) (*qldb.DescribeJournalS3ExportOutput, error) {
	var output qldb.DescribeJournalS3ExportOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.DescribeJournalS3Export", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) DescribeJournalS3ExportAsync(ctx workflow.Context, input *qldb.DescribeJournalS3ExportInput) *QldbDescribeJournalS3ExportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.DescribeJournalS3Export", input)
	return &QldbDescribeJournalS3ExportFuture{Future: future}
}

func (a *QLDBStub) DescribeLedger(ctx workflow.Context, input *qldb.DescribeLedgerInput) (*qldb.DescribeLedgerOutput, error) {
	var output qldb.DescribeLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.DescribeLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) DescribeLedgerAsync(ctx workflow.Context, input *qldb.DescribeLedgerInput) *QldbDescribeLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.DescribeLedger", input)
	return &QldbDescribeLedgerFuture{Future: future}
}

func (a *QLDBStub) ExportJournalToS3(ctx workflow.Context, input *qldb.ExportJournalToS3Input) (*qldb.ExportJournalToS3Output, error) {
	var output qldb.ExportJournalToS3Output
	err := workflow.ExecuteActivity(ctx, "aws.qldb.ExportJournalToS3", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) ExportJournalToS3Async(ctx workflow.Context, input *qldb.ExportJournalToS3Input) *QldbExportJournalToS3Future {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.ExportJournalToS3", input)
	return &QldbExportJournalToS3Future{Future: future}
}

func (a *QLDBStub) GetBlock(ctx workflow.Context, input *qldb.GetBlockInput) (*qldb.GetBlockOutput, error) {
	var output qldb.GetBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.GetBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) GetBlockAsync(ctx workflow.Context, input *qldb.GetBlockInput) *QldbGetBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.GetBlock", input)
	return &QldbGetBlockFuture{Future: future}
}

func (a *QLDBStub) GetDigest(ctx workflow.Context, input *qldb.GetDigestInput) (*qldb.GetDigestOutput, error) {
	var output qldb.GetDigestOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.GetDigest", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) GetDigestAsync(ctx workflow.Context, input *qldb.GetDigestInput) *QldbGetDigestFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.GetDigest", input)
	return &QldbGetDigestFuture{Future: future}
}

func (a *QLDBStub) GetRevision(ctx workflow.Context, input *qldb.GetRevisionInput) (*qldb.GetRevisionOutput, error) {
	var output qldb.GetRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.GetRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) GetRevisionAsync(ctx workflow.Context, input *qldb.GetRevisionInput) *QldbGetRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.GetRevision", input)
	return &QldbGetRevisionFuture{Future: future}
}

func (a *QLDBStub) ListJournalKinesisStreamsForLedger(ctx workflow.Context, input *qldb.ListJournalKinesisStreamsForLedgerInput) (*qldb.ListJournalKinesisStreamsForLedgerOutput, error) {
	var output qldb.ListJournalKinesisStreamsForLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.ListJournalKinesisStreamsForLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) ListJournalKinesisStreamsForLedgerAsync(ctx workflow.Context, input *qldb.ListJournalKinesisStreamsForLedgerInput) *QldbListJournalKinesisStreamsForLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.ListJournalKinesisStreamsForLedger", input)
	return &QldbListJournalKinesisStreamsForLedgerFuture{Future: future}
}

func (a *QLDBStub) ListJournalS3Exports(ctx workflow.Context, input *qldb.ListJournalS3ExportsInput) (*qldb.ListJournalS3ExportsOutput, error) {
	var output qldb.ListJournalS3ExportsOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.ListJournalS3Exports", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) ListJournalS3ExportsAsync(ctx workflow.Context, input *qldb.ListJournalS3ExportsInput) *QldbListJournalS3ExportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.ListJournalS3Exports", input)
	return &QldbListJournalS3ExportsFuture{Future: future}
}

func (a *QLDBStub) ListJournalS3ExportsForLedger(ctx workflow.Context, input *qldb.ListJournalS3ExportsForLedgerInput) (*qldb.ListJournalS3ExportsForLedgerOutput, error) {
	var output qldb.ListJournalS3ExportsForLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.ListJournalS3ExportsForLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) ListJournalS3ExportsForLedgerAsync(ctx workflow.Context, input *qldb.ListJournalS3ExportsForLedgerInput) *QldbListJournalS3ExportsForLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.ListJournalS3ExportsForLedger", input)
	return &QldbListJournalS3ExportsForLedgerFuture{Future: future}
}

func (a *QLDBStub) ListLedgers(ctx workflow.Context, input *qldb.ListLedgersInput) (*qldb.ListLedgersOutput, error) {
	var output qldb.ListLedgersOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.ListLedgers", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) ListLedgersAsync(ctx workflow.Context, input *qldb.ListLedgersInput) *QldbListLedgersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.ListLedgers", input)
	return &QldbListLedgersFuture{Future: future}
}

func (a *QLDBStub) ListTagsForResource(ctx workflow.Context, input *qldb.ListTagsForResourceInput) (*qldb.ListTagsForResourceOutput, error) {
	var output qldb.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) ListTagsForResourceAsync(ctx workflow.Context, input *qldb.ListTagsForResourceInput) *QldbListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.ListTagsForResource", input)
	return &QldbListTagsForResourceFuture{Future: future}
}

func (a *QLDBStub) StreamJournalToKinesis(ctx workflow.Context, input *qldb.StreamJournalToKinesisInput) (*qldb.StreamJournalToKinesisOutput, error) {
	var output qldb.StreamJournalToKinesisOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.StreamJournalToKinesis", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) StreamJournalToKinesisAsync(ctx workflow.Context, input *qldb.StreamJournalToKinesisInput) *QldbStreamJournalToKinesisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.StreamJournalToKinesis", input)
	return &QldbStreamJournalToKinesisFuture{Future: future}
}

func (a *QLDBStub) TagResource(ctx workflow.Context, input *qldb.TagResourceInput) (*qldb.TagResourceOutput, error) {
	var output qldb.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) TagResourceAsync(ctx workflow.Context, input *qldb.TagResourceInput) *QldbTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.TagResource", input)
	return &QldbTagResourceFuture{Future: future}
}

func (a *QLDBStub) UntagResource(ctx workflow.Context, input *qldb.UntagResourceInput) (*qldb.UntagResourceOutput, error) {
	var output qldb.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) UntagResourceAsync(ctx workflow.Context, input *qldb.UntagResourceInput) *QldbUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.UntagResource", input)
	return &QldbUntagResourceFuture{Future: future}
}

func (a *QLDBStub) UpdateLedger(ctx workflow.Context, input *qldb.UpdateLedgerInput) (*qldb.UpdateLedgerOutput, error) {
	var output qldb.UpdateLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws.qldb.UpdateLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *QLDBStub) UpdateLedgerAsync(ctx workflow.Context, input *qldb.UpdateLedgerInput) *QldbUpdateLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.qldb.UpdateLedger", input)
	return &QldbUpdateLedgerFuture{Future: future}
}
