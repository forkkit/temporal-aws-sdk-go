// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/marketplacemetering"
	"go.temporal.io/sdk/workflow"
)

type MarketplaceMeteringClient interface {
	BatchMeterUsage(ctx workflow.Context, input *marketplacemetering.BatchMeterUsageInput) (*marketplacemetering.BatchMeterUsageOutput, error)
	BatchMeterUsageAsync(ctx workflow.Context, input *marketplacemetering.BatchMeterUsageInput) *MarketplacemeteringBatchMeterUsageFuture

	MeterUsage(ctx workflow.Context, input *marketplacemetering.MeterUsageInput) (*marketplacemetering.MeterUsageOutput, error)
	MeterUsageAsync(ctx workflow.Context, input *marketplacemetering.MeterUsageInput) *MarketplacemeteringMeterUsageFuture

	RegisterUsage(ctx workflow.Context, input *marketplacemetering.RegisterUsageInput) (*marketplacemetering.RegisterUsageOutput, error)
	RegisterUsageAsync(ctx workflow.Context, input *marketplacemetering.RegisterUsageInput) *MarketplacemeteringRegisterUsageFuture

	ResolveCustomer(ctx workflow.Context, input *marketplacemetering.ResolveCustomerInput) (*marketplacemetering.ResolveCustomerOutput, error)
	ResolveCustomerAsync(ctx workflow.Context, input *marketplacemetering.ResolveCustomerInput) *MarketplacemeteringResolveCustomerFuture
}

type MarketplaceMeteringStub struct{}

func NewMarketplaceMeteringStub() MarketplaceMeteringClient {
	return &MarketplaceMeteringStub{}
}

type MarketplacemeteringBatchMeterUsageFuture struct {
	Future workflow.Future
}

func (r *MarketplacemeteringBatchMeterUsageFuture) Get(ctx workflow.Context) (*marketplacemetering.BatchMeterUsageOutput, error) {
	var output marketplacemetering.BatchMeterUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MarketplacemeteringMeterUsageFuture struct {
	Future workflow.Future
}

func (r *MarketplacemeteringMeterUsageFuture) Get(ctx workflow.Context) (*marketplacemetering.MeterUsageOutput, error) {
	var output marketplacemetering.MeterUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MarketplacemeteringRegisterUsageFuture struct {
	Future workflow.Future
}

func (r *MarketplacemeteringRegisterUsageFuture) Get(ctx workflow.Context) (*marketplacemetering.RegisterUsageOutput, error) {
	var output marketplacemetering.RegisterUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MarketplacemeteringResolveCustomerFuture struct {
	Future workflow.Future
}

func (r *MarketplacemeteringResolveCustomerFuture) Get(ctx workflow.Context) (*marketplacemetering.ResolveCustomerOutput, error) {
	var output marketplacemetering.ResolveCustomerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MarketplaceMeteringStub) BatchMeterUsage(ctx workflow.Context, input *marketplacemetering.BatchMeterUsageInput) (*marketplacemetering.BatchMeterUsageOutput, error) {
	var output marketplacemetering.BatchMeterUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.marketplacemetering.BatchMeterUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *MarketplaceMeteringStub) BatchMeterUsageAsync(ctx workflow.Context, input *marketplacemetering.BatchMeterUsageInput) *MarketplacemeteringBatchMeterUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.marketplacemetering.BatchMeterUsage", input)
	return &MarketplacemeteringBatchMeterUsageFuture{Future: future}
}

func (a *MarketplaceMeteringStub) MeterUsage(ctx workflow.Context, input *marketplacemetering.MeterUsageInput) (*marketplacemetering.MeterUsageOutput, error) {
	var output marketplacemetering.MeterUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.marketplacemetering.MeterUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *MarketplaceMeteringStub) MeterUsageAsync(ctx workflow.Context, input *marketplacemetering.MeterUsageInput) *MarketplacemeteringMeterUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.marketplacemetering.MeterUsage", input)
	return &MarketplacemeteringMeterUsageFuture{Future: future}
}

func (a *MarketplaceMeteringStub) RegisterUsage(ctx workflow.Context, input *marketplacemetering.RegisterUsageInput) (*marketplacemetering.RegisterUsageOutput, error) {
	var output marketplacemetering.RegisterUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.marketplacemetering.RegisterUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *MarketplaceMeteringStub) RegisterUsageAsync(ctx workflow.Context, input *marketplacemetering.RegisterUsageInput) *MarketplacemeteringRegisterUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.marketplacemetering.RegisterUsage", input)
	return &MarketplacemeteringRegisterUsageFuture{Future: future}
}

func (a *MarketplaceMeteringStub) ResolveCustomer(ctx workflow.Context, input *marketplacemetering.ResolveCustomerInput) (*marketplacemetering.ResolveCustomerOutput, error) {
	var output marketplacemetering.ResolveCustomerOutput
	err := workflow.ExecuteActivity(ctx, "aws.marketplacemetering.ResolveCustomer", input).Get(ctx, &output)
	return &output, err
}

func (a *MarketplaceMeteringStub) ResolveCustomerAsync(ctx workflow.Context, input *marketplacemetering.ResolveCustomerInput) *MarketplacemeteringResolveCustomerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.marketplacemetering.ResolveCustomer", input)
	return &MarketplacemeteringResolveCustomerFuture{Future: future}
}
