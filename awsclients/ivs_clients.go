// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/ivs"
	"go.temporal.io/sdk/workflow"
)

type IVSClient interface {
	BatchGetChannel(ctx workflow.Context, input *ivs.BatchGetChannelInput) (*ivs.BatchGetChannelOutput, error)
	BatchGetChannelAsync(ctx workflow.Context, input *ivs.BatchGetChannelInput) *IvsBatchGetChannelFuture

	BatchGetStreamKey(ctx workflow.Context, input *ivs.BatchGetStreamKeyInput) (*ivs.BatchGetStreamKeyOutput, error)
	BatchGetStreamKeyAsync(ctx workflow.Context, input *ivs.BatchGetStreamKeyInput) *IvsBatchGetStreamKeyFuture

	CreateChannel(ctx workflow.Context, input *ivs.CreateChannelInput) (*ivs.CreateChannelOutput, error)
	CreateChannelAsync(ctx workflow.Context, input *ivs.CreateChannelInput) *IvsCreateChannelFuture

	CreateStreamKey(ctx workflow.Context, input *ivs.CreateStreamKeyInput) (*ivs.CreateStreamKeyOutput, error)
	CreateStreamKeyAsync(ctx workflow.Context, input *ivs.CreateStreamKeyInput) *IvsCreateStreamKeyFuture

	DeleteChannel(ctx workflow.Context, input *ivs.DeleteChannelInput) (*ivs.DeleteChannelOutput, error)
	DeleteChannelAsync(ctx workflow.Context, input *ivs.DeleteChannelInput) *IvsDeleteChannelFuture

	DeletePlaybackKeyPair(ctx workflow.Context, input *ivs.DeletePlaybackKeyPairInput) (*ivs.DeletePlaybackKeyPairOutput, error)
	DeletePlaybackKeyPairAsync(ctx workflow.Context, input *ivs.DeletePlaybackKeyPairInput) *IvsDeletePlaybackKeyPairFuture

	DeleteStreamKey(ctx workflow.Context, input *ivs.DeleteStreamKeyInput) (*ivs.DeleteStreamKeyOutput, error)
	DeleteStreamKeyAsync(ctx workflow.Context, input *ivs.DeleteStreamKeyInput) *IvsDeleteStreamKeyFuture

	GetChannel(ctx workflow.Context, input *ivs.GetChannelInput) (*ivs.GetChannelOutput, error)
	GetChannelAsync(ctx workflow.Context, input *ivs.GetChannelInput) *IvsGetChannelFuture

	GetPlaybackKeyPair(ctx workflow.Context, input *ivs.GetPlaybackKeyPairInput) (*ivs.GetPlaybackKeyPairOutput, error)
	GetPlaybackKeyPairAsync(ctx workflow.Context, input *ivs.GetPlaybackKeyPairInput) *IvsGetPlaybackKeyPairFuture

	GetStream(ctx workflow.Context, input *ivs.GetStreamInput) (*ivs.GetStreamOutput, error)
	GetStreamAsync(ctx workflow.Context, input *ivs.GetStreamInput) *IvsGetStreamFuture

	GetStreamKey(ctx workflow.Context, input *ivs.GetStreamKeyInput) (*ivs.GetStreamKeyOutput, error)
	GetStreamKeyAsync(ctx workflow.Context, input *ivs.GetStreamKeyInput) *IvsGetStreamKeyFuture

	ImportPlaybackKeyPair(ctx workflow.Context, input *ivs.ImportPlaybackKeyPairInput) (*ivs.ImportPlaybackKeyPairOutput, error)
	ImportPlaybackKeyPairAsync(ctx workflow.Context, input *ivs.ImportPlaybackKeyPairInput) *IvsImportPlaybackKeyPairFuture

	ListChannels(ctx workflow.Context, input *ivs.ListChannelsInput) (*ivs.ListChannelsOutput, error)
	ListChannelsAsync(ctx workflow.Context, input *ivs.ListChannelsInput) *IvsListChannelsFuture

	ListPlaybackKeyPairs(ctx workflow.Context, input *ivs.ListPlaybackKeyPairsInput) (*ivs.ListPlaybackKeyPairsOutput, error)
	ListPlaybackKeyPairsAsync(ctx workflow.Context, input *ivs.ListPlaybackKeyPairsInput) *IvsListPlaybackKeyPairsFuture

	ListStreamKeys(ctx workflow.Context, input *ivs.ListStreamKeysInput) (*ivs.ListStreamKeysOutput, error)
	ListStreamKeysAsync(ctx workflow.Context, input *ivs.ListStreamKeysInput) *IvsListStreamKeysFuture

	ListStreams(ctx workflow.Context, input *ivs.ListStreamsInput) (*ivs.ListStreamsOutput, error)
	ListStreamsAsync(ctx workflow.Context, input *ivs.ListStreamsInput) *IvsListStreamsFuture

	ListTagsForResource(ctx workflow.Context, input *ivs.ListTagsForResourceInput) (*ivs.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *ivs.ListTagsForResourceInput) *IvsListTagsForResourceFuture

	PutMetadata(ctx workflow.Context, input *ivs.PutMetadataInput) (*ivs.PutMetadataOutput, error)
	PutMetadataAsync(ctx workflow.Context, input *ivs.PutMetadataInput) *IvsPutMetadataFuture

	StopStream(ctx workflow.Context, input *ivs.StopStreamInput) (*ivs.StopStreamOutput, error)
	StopStreamAsync(ctx workflow.Context, input *ivs.StopStreamInput) *IvsStopStreamFuture

	TagResource(ctx workflow.Context, input *ivs.TagResourceInput) (*ivs.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *ivs.TagResourceInput) *IvsTagResourceFuture

	UntagResource(ctx workflow.Context, input *ivs.UntagResourceInput) (*ivs.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *ivs.UntagResourceInput) *IvsUntagResourceFuture

	UpdateChannel(ctx workflow.Context, input *ivs.UpdateChannelInput) (*ivs.UpdateChannelOutput, error)
	UpdateChannelAsync(ctx workflow.Context, input *ivs.UpdateChannelInput) *IvsUpdateChannelFuture
}

type IVSStub struct{}

func NewIVSStub() IVSClient {
	return &IVSStub{}
}

type IvsBatchGetChannelFuture struct {
	Future workflow.Future
}

func (r *IvsBatchGetChannelFuture) Get(ctx workflow.Context) (*ivs.BatchGetChannelOutput, error) {
	var output ivs.BatchGetChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsBatchGetStreamKeyFuture struct {
	Future workflow.Future
}

func (r *IvsBatchGetStreamKeyFuture) Get(ctx workflow.Context) (*ivs.BatchGetStreamKeyOutput, error) {
	var output ivs.BatchGetStreamKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsCreateChannelFuture struct {
	Future workflow.Future
}

func (r *IvsCreateChannelFuture) Get(ctx workflow.Context) (*ivs.CreateChannelOutput, error) {
	var output ivs.CreateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsCreateStreamKeyFuture struct {
	Future workflow.Future
}

func (r *IvsCreateStreamKeyFuture) Get(ctx workflow.Context) (*ivs.CreateStreamKeyOutput, error) {
	var output ivs.CreateStreamKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsDeleteChannelFuture struct {
	Future workflow.Future
}

func (r *IvsDeleteChannelFuture) Get(ctx workflow.Context) (*ivs.DeleteChannelOutput, error) {
	var output ivs.DeleteChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsDeletePlaybackKeyPairFuture struct {
	Future workflow.Future
}

func (r *IvsDeletePlaybackKeyPairFuture) Get(ctx workflow.Context) (*ivs.DeletePlaybackKeyPairOutput, error) {
	var output ivs.DeletePlaybackKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsDeleteStreamKeyFuture struct {
	Future workflow.Future
}

func (r *IvsDeleteStreamKeyFuture) Get(ctx workflow.Context) (*ivs.DeleteStreamKeyOutput, error) {
	var output ivs.DeleteStreamKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsGetChannelFuture struct {
	Future workflow.Future
}

func (r *IvsGetChannelFuture) Get(ctx workflow.Context) (*ivs.GetChannelOutput, error) {
	var output ivs.GetChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsGetPlaybackKeyPairFuture struct {
	Future workflow.Future
}

func (r *IvsGetPlaybackKeyPairFuture) Get(ctx workflow.Context) (*ivs.GetPlaybackKeyPairOutput, error) {
	var output ivs.GetPlaybackKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsGetStreamFuture struct {
	Future workflow.Future
}

func (r *IvsGetStreamFuture) Get(ctx workflow.Context) (*ivs.GetStreamOutput, error) {
	var output ivs.GetStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsGetStreamKeyFuture struct {
	Future workflow.Future
}

func (r *IvsGetStreamKeyFuture) Get(ctx workflow.Context) (*ivs.GetStreamKeyOutput, error) {
	var output ivs.GetStreamKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsImportPlaybackKeyPairFuture struct {
	Future workflow.Future
}

func (r *IvsImportPlaybackKeyPairFuture) Get(ctx workflow.Context) (*ivs.ImportPlaybackKeyPairOutput, error) {
	var output ivs.ImportPlaybackKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsListChannelsFuture struct {
	Future workflow.Future
}

func (r *IvsListChannelsFuture) Get(ctx workflow.Context) (*ivs.ListChannelsOutput, error) {
	var output ivs.ListChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsListPlaybackKeyPairsFuture struct {
	Future workflow.Future
}

func (r *IvsListPlaybackKeyPairsFuture) Get(ctx workflow.Context) (*ivs.ListPlaybackKeyPairsOutput, error) {
	var output ivs.ListPlaybackKeyPairsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsListStreamKeysFuture struct {
	Future workflow.Future
}

func (r *IvsListStreamKeysFuture) Get(ctx workflow.Context) (*ivs.ListStreamKeysOutput, error) {
	var output ivs.ListStreamKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsListStreamsFuture struct {
	Future workflow.Future
}

func (r *IvsListStreamsFuture) Get(ctx workflow.Context) (*ivs.ListStreamsOutput, error) {
	var output ivs.ListStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *IvsListTagsForResourceFuture) Get(ctx workflow.Context) (*ivs.ListTagsForResourceOutput, error) {
	var output ivs.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsPutMetadataFuture struct {
	Future workflow.Future
}

func (r *IvsPutMetadataFuture) Get(ctx workflow.Context) (*ivs.PutMetadataOutput, error) {
	var output ivs.PutMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsStopStreamFuture struct {
	Future workflow.Future
}

func (r *IvsStopStreamFuture) Get(ctx workflow.Context) (*ivs.StopStreamOutput, error) {
	var output ivs.StopStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsTagResourceFuture struct {
	Future workflow.Future
}

func (r *IvsTagResourceFuture) Get(ctx workflow.Context) (*ivs.TagResourceOutput, error) {
	var output ivs.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsUntagResourceFuture struct {
	Future workflow.Future
}

func (r *IvsUntagResourceFuture) Get(ctx workflow.Context) (*ivs.UntagResourceOutput, error) {
	var output ivs.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IvsUpdateChannelFuture struct {
	Future workflow.Future
}

func (r *IvsUpdateChannelFuture) Get(ctx workflow.Context) (*ivs.UpdateChannelOutput, error) {
	var output ivs.UpdateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) BatchGetChannel(ctx workflow.Context, input *ivs.BatchGetChannelInput) (*ivs.BatchGetChannelOutput, error) {
	var output ivs.BatchGetChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.BatchGetChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) BatchGetChannelAsync(ctx workflow.Context, input *ivs.BatchGetChannelInput) *IvsBatchGetChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.BatchGetChannel", input)
	return &IvsBatchGetChannelFuture{Future: future}
}

func (a *IVSStub) BatchGetStreamKey(ctx workflow.Context, input *ivs.BatchGetStreamKeyInput) (*ivs.BatchGetStreamKeyOutput, error) {
	var output ivs.BatchGetStreamKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.BatchGetStreamKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) BatchGetStreamKeyAsync(ctx workflow.Context, input *ivs.BatchGetStreamKeyInput) *IvsBatchGetStreamKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.BatchGetStreamKey", input)
	return &IvsBatchGetStreamKeyFuture{Future: future}
}

func (a *IVSStub) CreateChannel(ctx workflow.Context, input *ivs.CreateChannelInput) (*ivs.CreateChannelOutput, error) {
	var output ivs.CreateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.CreateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) CreateChannelAsync(ctx workflow.Context, input *ivs.CreateChannelInput) *IvsCreateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.CreateChannel", input)
	return &IvsCreateChannelFuture{Future: future}
}

func (a *IVSStub) CreateStreamKey(ctx workflow.Context, input *ivs.CreateStreamKeyInput) (*ivs.CreateStreamKeyOutput, error) {
	var output ivs.CreateStreamKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.CreateStreamKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) CreateStreamKeyAsync(ctx workflow.Context, input *ivs.CreateStreamKeyInput) *IvsCreateStreamKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.CreateStreamKey", input)
	return &IvsCreateStreamKeyFuture{Future: future}
}

func (a *IVSStub) DeleteChannel(ctx workflow.Context, input *ivs.DeleteChannelInput) (*ivs.DeleteChannelOutput, error) {
	var output ivs.DeleteChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.DeleteChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) DeleteChannelAsync(ctx workflow.Context, input *ivs.DeleteChannelInput) *IvsDeleteChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.DeleteChannel", input)
	return &IvsDeleteChannelFuture{Future: future}
}

func (a *IVSStub) DeletePlaybackKeyPair(ctx workflow.Context, input *ivs.DeletePlaybackKeyPairInput) (*ivs.DeletePlaybackKeyPairOutput, error) {
	var output ivs.DeletePlaybackKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.DeletePlaybackKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) DeletePlaybackKeyPairAsync(ctx workflow.Context, input *ivs.DeletePlaybackKeyPairInput) *IvsDeletePlaybackKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.DeletePlaybackKeyPair", input)
	return &IvsDeletePlaybackKeyPairFuture{Future: future}
}

func (a *IVSStub) DeleteStreamKey(ctx workflow.Context, input *ivs.DeleteStreamKeyInput) (*ivs.DeleteStreamKeyOutput, error) {
	var output ivs.DeleteStreamKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.DeleteStreamKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) DeleteStreamKeyAsync(ctx workflow.Context, input *ivs.DeleteStreamKeyInput) *IvsDeleteStreamKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.DeleteStreamKey", input)
	return &IvsDeleteStreamKeyFuture{Future: future}
}

func (a *IVSStub) GetChannel(ctx workflow.Context, input *ivs.GetChannelInput) (*ivs.GetChannelOutput, error) {
	var output ivs.GetChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.GetChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) GetChannelAsync(ctx workflow.Context, input *ivs.GetChannelInput) *IvsGetChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.GetChannel", input)
	return &IvsGetChannelFuture{Future: future}
}

func (a *IVSStub) GetPlaybackKeyPair(ctx workflow.Context, input *ivs.GetPlaybackKeyPairInput) (*ivs.GetPlaybackKeyPairOutput, error) {
	var output ivs.GetPlaybackKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.GetPlaybackKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) GetPlaybackKeyPairAsync(ctx workflow.Context, input *ivs.GetPlaybackKeyPairInput) *IvsGetPlaybackKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.GetPlaybackKeyPair", input)
	return &IvsGetPlaybackKeyPairFuture{Future: future}
}

func (a *IVSStub) GetStream(ctx workflow.Context, input *ivs.GetStreamInput) (*ivs.GetStreamOutput, error) {
	var output ivs.GetStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.GetStream", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) GetStreamAsync(ctx workflow.Context, input *ivs.GetStreamInput) *IvsGetStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.GetStream", input)
	return &IvsGetStreamFuture{Future: future}
}

func (a *IVSStub) GetStreamKey(ctx workflow.Context, input *ivs.GetStreamKeyInput) (*ivs.GetStreamKeyOutput, error) {
	var output ivs.GetStreamKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.GetStreamKey", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) GetStreamKeyAsync(ctx workflow.Context, input *ivs.GetStreamKeyInput) *IvsGetStreamKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.GetStreamKey", input)
	return &IvsGetStreamKeyFuture{Future: future}
}

func (a *IVSStub) ImportPlaybackKeyPair(ctx workflow.Context, input *ivs.ImportPlaybackKeyPairInput) (*ivs.ImportPlaybackKeyPairOutput, error) {
	var output ivs.ImportPlaybackKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.ImportPlaybackKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) ImportPlaybackKeyPairAsync(ctx workflow.Context, input *ivs.ImportPlaybackKeyPairInput) *IvsImportPlaybackKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.ImportPlaybackKeyPair", input)
	return &IvsImportPlaybackKeyPairFuture{Future: future}
}

func (a *IVSStub) ListChannels(ctx workflow.Context, input *ivs.ListChannelsInput) (*ivs.ListChannelsOutput, error) {
	var output ivs.ListChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.ListChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) ListChannelsAsync(ctx workflow.Context, input *ivs.ListChannelsInput) *IvsListChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.ListChannels", input)
	return &IvsListChannelsFuture{Future: future}
}

func (a *IVSStub) ListPlaybackKeyPairs(ctx workflow.Context, input *ivs.ListPlaybackKeyPairsInput) (*ivs.ListPlaybackKeyPairsOutput, error) {
	var output ivs.ListPlaybackKeyPairsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.ListPlaybackKeyPairs", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) ListPlaybackKeyPairsAsync(ctx workflow.Context, input *ivs.ListPlaybackKeyPairsInput) *IvsListPlaybackKeyPairsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.ListPlaybackKeyPairs", input)
	return &IvsListPlaybackKeyPairsFuture{Future: future}
}

func (a *IVSStub) ListStreamKeys(ctx workflow.Context, input *ivs.ListStreamKeysInput) (*ivs.ListStreamKeysOutput, error) {
	var output ivs.ListStreamKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.ListStreamKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) ListStreamKeysAsync(ctx workflow.Context, input *ivs.ListStreamKeysInput) *IvsListStreamKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.ListStreamKeys", input)
	return &IvsListStreamKeysFuture{Future: future}
}

func (a *IVSStub) ListStreams(ctx workflow.Context, input *ivs.ListStreamsInput) (*ivs.ListStreamsOutput, error) {
	var output ivs.ListStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.ListStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) ListStreamsAsync(ctx workflow.Context, input *ivs.ListStreamsInput) *IvsListStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.ListStreams", input)
	return &IvsListStreamsFuture{Future: future}
}

func (a *IVSStub) ListTagsForResource(ctx workflow.Context, input *ivs.ListTagsForResourceInput) (*ivs.ListTagsForResourceOutput, error) {
	var output ivs.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) ListTagsForResourceAsync(ctx workflow.Context, input *ivs.ListTagsForResourceInput) *IvsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.ListTagsForResource", input)
	return &IvsListTagsForResourceFuture{Future: future}
}

func (a *IVSStub) PutMetadata(ctx workflow.Context, input *ivs.PutMetadataInput) (*ivs.PutMetadataOutput, error) {
	var output ivs.PutMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.PutMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) PutMetadataAsync(ctx workflow.Context, input *ivs.PutMetadataInput) *IvsPutMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.PutMetadata", input)
	return &IvsPutMetadataFuture{Future: future}
}

func (a *IVSStub) StopStream(ctx workflow.Context, input *ivs.StopStreamInput) (*ivs.StopStreamOutput, error) {
	var output ivs.StopStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.StopStream", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) StopStreamAsync(ctx workflow.Context, input *ivs.StopStreamInput) *IvsStopStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.StopStream", input)
	return &IvsStopStreamFuture{Future: future}
}

func (a *IVSStub) TagResource(ctx workflow.Context, input *ivs.TagResourceInput) (*ivs.TagResourceOutput, error) {
	var output ivs.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) TagResourceAsync(ctx workflow.Context, input *ivs.TagResourceInput) *IvsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.TagResource", input)
	return &IvsTagResourceFuture{Future: future}
}

func (a *IVSStub) UntagResource(ctx workflow.Context, input *ivs.UntagResourceInput) (*ivs.UntagResourceOutput, error) {
	var output ivs.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) UntagResourceAsync(ctx workflow.Context, input *ivs.UntagResourceInput) *IvsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.UntagResource", input)
	return &IvsUntagResourceFuture{Future: future}
}

func (a *IVSStub) UpdateChannel(ctx workflow.Context, input *ivs.UpdateChannelInput) (*ivs.UpdateChannelOutput, error) {
	var output ivs.UpdateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.ivs.UpdateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *IVSStub) UpdateChannelAsync(ctx workflow.Context, input *ivs.UpdateChannelInput) *IvsUpdateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ivs.UpdateChannel", input)
	return &IvsUpdateChannelFuture{Future: future}
}
