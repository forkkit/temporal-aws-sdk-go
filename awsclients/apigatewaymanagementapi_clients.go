// Generated by https://github.com/temporalio/temporal-aws-sdk/cmd/temporal-aws-sdk-gen/main.go
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/apigatewaymanagementapi"
	"go.temporal.io/sdk/workflow"
)

type ApiGatewayManagementApiClient interface {
	DeleteConnection(ctx workflow.Context, input *apigatewaymanagementapi.DeleteConnectionInput) (*apigatewaymanagementapi.DeleteConnectionOutput, error)
	DeleteConnectionAsync(ctx workflow.Context, input *apigatewaymanagementapi.DeleteConnectionInput) *ApigatewaymanagementapiDeleteConnectionResult

	GetConnection(ctx workflow.Context, input *apigatewaymanagementapi.GetConnectionInput) (*apigatewaymanagementapi.GetConnectionOutput, error)
	GetConnectionAsync(ctx workflow.Context, input *apigatewaymanagementapi.GetConnectionInput) *ApigatewaymanagementapiGetConnectionResult

	PostToConnection(ctx workflow.Context, input *apigatewaymanagementapi.PostToConnectionInput) (*apigatewaymanagementapi.PostToConnectionOutput, error)
	PostToConnectionAsync(ctx workflow.Context, input *apigatewaymanagementapi.PostToConnectionInput) *ApigatewaymanagementapiPostToConnectionResult
}

type ApiGatewayManagementApiStub struct{}

func NewApiGatewayManagementApiStub() ApiGatewayManagementApiClient {
	return &ApiGatewayManagementApiStub{}
}

type ApigatewaymanagementapiDeleteConnectionResult struct {
	Result workflow.Future
}

func (r *ApigatewaymanagementapiDeleteConnectionResult) Get(ctx workflow.Context) (*apigatewaymanagementapi.DeleteConnectionOutput, error) {
	var output apigatewaymanagementapi.DeleteConnectionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type ApigatewaymanagementapiGetConnectionResult struct {
	Result workflow.Future
}

func (r *ApigatewaymanagementapiGetConnectionResult) Get(ctx workflow.Context) (*apigatewaymanagementapi.GetConnectionOutput, error) {
	var output apigatewaymanagementapi.GetConnectionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type ApigatewaymanagementapiPostToConnectionResult struct {
	Result workflow.Future
}

func (r *ApigatewaymanagementapiPostToConnectionResult) Get(ctx workflow.Context) (*apigatewaymanagementapi.PostToConnectionOutput, error) {
	var output apigatewaymanagementapi.PostToConnectionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayManagementApiStub) DeleteConnection(ctx workflow.Context, input *apigatewaymanagementapi.DeleteConnectionInput) (*apigatewaymanagementapi.DeleteConnectionOutput, error) {
	var output apigatewaymanagementapi.DeleteConnectionOutput
	err := workflow.ExecuteActivity(ctx, "ApiGatewayManagementApi.DeleteConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayManagementApiStub) DeleteConnectionAsync(ctx workflow.Context, input *apigatewaymanagementapi.DeleteConnectionInput) *ApigatewaymanagementapiDeleteConnectionResult {
	future := workflow.ExecuteActivity(ctx, "ApiGatewayManagementApi.DeleteConnection", input)
	return &ApigatewaymanagementapiDeleteConnectionResult{Result: future}
}

func (a *ApiGatewayManagementApiStub) GetConnection(ctx workflow.Context, input *apigatewaymanagementapi.GetConnectionInput) (*apigatewaymanagementapi.GetConnectionOutput, error) {
	var output apigatewaymanagementapi.GetConnectionOutput
	err := workflow.ExecuteActivity(ctx, "ApiGatewayManagementApi.GetConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayManagementApiStub) GetConnectionAsync(ctx workflow.Context, input *apigatewaymanagementapi.GetConnectionInput) *ApigatewaymanagementapiGetConnectionResult {
	future := workflow.ExecuteActivity(ctx, "ApiGatewayManagementApi.GetConnection", input)
	return &ApigatewaymanagementapiGetConnectionResult{Result: future}
}

func (a *ApiGatewayManagementApiStub) PostToConnection(ctx workflow.Context, input *apigatewaymanagementapi.PostToConnectionInput) (*apigatewaymanagementapi.PostToConnectionOutput, error) {
	var output apigatewaymanagementapi.PostToConnectionOutput
	err := workflow.ExecuteActivity(ctx, "ApiGatewayManagementApi.PostToConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayManagementApiStub) PostToConnectionAsync(ctx workflow.Context, input *apigatewaymanagementapi.PostToConnectionInput) *ApigatewaymanagementapiPostToConnectionResult {
	future := workflow.ExecuteActivity(ctx, "ApiGatewayManagementApi.PostToConnection", input)
	return &ApigatewaymanagementapiPostToConnectionResult{Result: future}
}
