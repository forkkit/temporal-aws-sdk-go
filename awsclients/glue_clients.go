// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/glue"
	"go.temporal.io/sdk/workflow"
)

type GlueClient interface {
	BatchCreatePartition(ctx workflow.Context, input *glue.BatchCreatePartitionInput) (*glue.BatchCreatePartitionOutput, error)
	BatchCreatePartitionAsync(ctx workflow.Context, input *glue.BatchCreatePartitionInput) *GlueBatchCreatePartitionFuture

	BatchDeleteConnection(ctx workflow.Context, input *glue.BatchDeleteConnectionInput) (*glue.BatchDeleteConnectionOutput, error)
	BatchDeleteConnectionAsync(ctx workflow.Context, input *glue.BatchDeleteConnectionInput) *GlueBatchDeleteConnectionFuture

	BatchDeletePartition(ctx workflow.Context, input *glue.BatchDeletePartitionInput) (*glue.BatchDeletePartitionOutput, error)
	BatchDeletePartitionAsync(ctx workflow.Context, input *glue.BatchDeletePartitionInput) *GlueBatchDeletePartitionFuture

	BatchDeleteTable(ctx workflow.Context, input *glue.BatchDeleteTableInput) (*glue.BatchDeleteTableOutput, error)
	BatchDeleteTableAsync(ctx workflow.Context, input *glue.BatchDeleteTableInput) *GlueBatchDeleteTableFuture

	BatchDeleteTableVersion(ctx workflow.Context, input *glue.BatchDeleteTableVersionInput) (*glue.BatchDeleteTableVersionOutput, error)
	BatchDeleteTableVersionAsync(ctx workflow.Context, input *glue.BatchDeleteTableVersionInput) *GlueBatchDeleteTableVersionFuture

	BatchGetCrawlers(ctx workflow.Context, input *glue.BatchGetCrawlersInput) (*glue.BatchGetCrawlersOutput, error)
	BatchGetCrawlersAsync(ctx workflow.Context, input *glue.BatchGetCrawlersInput) *GlueBatchGetCrawlersFuture

	BatchGetDevEndpoints(ctx workflow.Context, input *glue.BatchGetDevEndpointsInput) (*glue.BatchGetDevEndpointsOutput, error)
	BatchGetDevEndpointsAsync(ctx workflow.Context, input *glue.BatchGetDevEndpointsInput) *GlueBatchGetDevEndpointsFuture

	BatchGetJobs(ctx workflow.Context, input *glue.BatchGetJobsInput) (*glue.BatchGetJobsOutput, error)
	BatchGetJobsAsync(ctx workflow.Context, input *glue.BatchGetJobsInput) *GlueBatchGetJobsFuture

	BatchGetPartition(ctx workflow.Context, input *glue.BatchGetPartitionInput) (*glue.BatchGetPartitionOutput, error)
	BatchGetPartitionAsync(ctx workflow.Context, input *glue.BatchGetPartitionInput) *GlueBatchGetPartitionFuture

	BatchGetTriggers(ctx workflow.Context, input *glue.BatchGetTriggersInput) (*glue.BatchGetTriggersOutput, error)
	BatchGetTriggersAsync(ctx workflow.Context, input *glue.BatchGetTriggersInput) *GlueBatchGetTriggersFuture

	BatchGetWorkflows(ctx workflow.Context, input *glue.BatchGetWorkflowsInput) (*glue.BatchGetWorkflowsOutput, error)
	BatchGetWorkflowsAsync(ctx workflow.Context, input *glue.BatchGetWorkflowsInput) *GlueBatchGetWorkflowsFuture

	BatchStopJobRun(ctx workflow.Context, input *glue.BatchStopJobRunInput) (*glue.BatchStopJobRunOutput, error)
	BatchStopJobRunAsync(ctx workflow.Context, input *glue.BatchStopJobRunInput) *GlueBatchStopJobRunFuture

	BatchUpdatePartition(ctx workflow.Context, input *glue.BatchUpdatePartitionInput) (*glue.BatchUpdatePartitionOutput, error)
	BatchUpdatePartitionAsync(ctx workflow.Context, input *glue.BatchUpdatePartitionInput) *GlueBatchUpdatePartitionFuture

	CancelMLTaskRun(ctx workflow.Context, input *glue.CancelMLTaskRunInput) (*glue.CancelMLTaskRunOutput, error)
	CancelMLTaskRunAsync(ctx workflow.Context, input *glue.CancelMLTaskRunInput) *GlueCancelMLTaskRunFuture

	CreateClassifier(ctx workflow.Context, input *glue.CreateClassifierInput) (*glue.CreateClassifierOutput, error)
	CreateClassifierAsync(ctx workflow.Context, input *glue.CreateClassifierInput) *GlueCreateClassifierFuture

	CreateConnection(ctx workflow.Context, input *glue.CreateConnectionInput) (*glue.CreateConnectionOutput, error)
	CreateConnectionAsync(ctx workflow.Context, input *glue.CreateConnectionInput) *GlueCreateConnectionFuture

	CreateCrawler(ctx workflow.Context, input *glue.CreateCrawlerInput) (*glue.CreateCrawlerOutput, error)
	CreateCrawlerAsync(ctx workflow.Context, input *glue.CreateCrawlerInput) *GlueCreateCrawlerFuture

	CreateDatabase(ctx workflow.Context, input *glue.CreateDatabaseInput) (*glue.CreateDatabaseOutput, error)
	CreateDatabaseAsync(ctx workflow.Context, input *glue.CreateDatabaseInput) *GlueCreateDatabaseFuture

	CreateDevEndpoint(ctx workflow.Context, input *glue.CreateDevEndpointInput) (*glue.CreateDevEndpointOutput, error)
	CreateDevEndpointAsync(ctx workflow.Context, input *glue.CreateDevEndpointInput) *GlueCreateDevEndpointFuture

	CreateJob(ctx workflow.Context, input *glue.CreateJobInput) (*glue.CreateJobOutput, error)
	CreateJobAsync(ctx workflow.Context, input *glue.CreateJobInput) *GlueCreateJobFuture

	CreateMLTransform(ctx workflow.Context, input *glue.CreateMLTransformInput) (*glue.CreateMLTransformOutput, error)
	CreateMLTransformAsync(ctx workflow.Context, input *glue.CreateMLTransformInput) *GlueCreateMLTransformFuture

	CreatePartition(ctx workflow.Context, input *glue.CreatePartitionInput) (*glue.CreatePartitionOutput, error)
	CreatePartitionAsync(ctx workflow.Context, input *glue.CreatePartitionInput) *GlueCreatePartitionFuture

	CreateScript(ctx workflow.Context, input *glue.CreateScriptInput) (*glue.CreateScriptOutput, error)
	CreateScriptAsync(ctx workflow.Context, input *glue.CreateScriptInput) *GlueCreateScriptFuture

	CreateSecurityConfiguration(ctx workflow.Context, input *glue.CreateSecurityConfigurationInput) (*glue.CreateSecurityConfigurationOutput, error)
	CreateSecurityConfigurationAsync(ctx workflow.Context, input *glue.CreateSecurityConfigurationInput) *GlueCreateSecurityConfigurationFuture

	CreateTable(ctx workflow.Context, input *glue.CreateTableInput) (*glue.CreateTableOutput, error)
	CreateTableAsync(ctx workflow.Context, input *glue.CreateTableInput) *GlueCreateTableFuture

	CreateTrigger(ctx workflow.Context, input *glue.CreateTriggerInput) (*glue.CreateTriggerOutput, error)
	CreateTriggerAsync(ctx workflow.Context, input *glue.CreateTriggerInput) *GlueCreateTriggerFuture

	CreateUserDefinedFunction(ctx workflow.Context, input *glue.CreateUserDefinedFunctionInput) (*glue.CreateUserDefinedFunctionOutput, error)
	CreateUserDefinedFunctionAsync(ctx workflow.Context, input *glue.CreateUserDefinedFunctionInput) *GlueCreateUserDefinedFunctionFuture

	CreateWorkflow(ctx workflow.Context, input *glue.CreateWorkflowInput) (*glue.CreateWorkflowOutput, error)
	CreateWorkflowAsync(ctx workflow.Context, input *glue.CreateWorkflowInput) *GlueCreateWorkflowFuture

	DeleteClassifier(ctx workflow.Context, input *glue.DeleteClassifierInput) (*glue.DeleteClassifierOutput, error)
	DeleteClassifierAsync(ctx workflow.Context, input *glue.DeleteClassifierInput) *GlueDeleteClassifierFuture

	DeleteColumnStatisticsForPartition(ctx workflow.Context, input *glue.DeleteColumnStatisticsForPartitionInput) (*glue.DeleteColumnStatisticsForPartitionOutput, error)
	DeleteColumnStatisticsForPartitionAsync(ctx workflow.Context, input *glue.DeleteColumnStatisticsForPartitionInput) *GlueDeleteColumnStatisticsForPartitionFuture

	DeleteColumnStatisticsForTable(ctx workflow.Context, input *glue.DeleteColumnStatisticsForTableInput) (*glue.DeleteColumnStatisticsForTableOutput, error)
	DeleteColumnStatisticsForTableAsync(ctx workflow.Context, input *glue.DeleteColumnStatisticsForTableInput) *GlueDeleteColumnStatisticsForTableFuture

	DeleteConnection(ctx workflow.Context, input *glue.DeleteConnectionInput) (*glue.DeleteConnectionOutput, error)
	DeleteConnectionAsync(ctx workflow.Context, input *glue.DeleteConnectionInput) *GlueDeleteConnectionFuture

	DeleteCrawler(ctx workflow.Context, input *glue.DeleteCrawlerInput) (*glue.DeleteCrawlerOutput, error)
	DeleteCrawlerAsync(ctx workflow.Context, input *glue.DeleteCrawlerInput) *GlueDeleteCrawlerFuture

	DeleteDatabase(ctx workflow.Context, input *glue.DeleteDatabaseInput) (*glue.DeleteDatabaseOutput, error)
	DeleteDatabaseAsync(ctx workflow.Context, input *glue.DeleteDatabaseInput) *GlueDeleteDatabaseFuture

	DeleteDevEndpoint(ctx workflow.Context, input *glue.DeleteDevEndpointInput) (*glue.DeleteDevEndpointOutput, error)
	DeleteDevEndpointAsync(ctx workflow.Context, input *glue.DeleteDevEndpointInput) *GlueDeleteDevEndpointFuture

	DeleteJob(ctx workflow.Context, input *glue.DeleteJobInput) (*glue.DeleteJobOutput, error)
	DeleteJobAsync(ctx workflow.Context, input *glue.DeleteJobInput) *GlueDeleteJobFuture

	DeleteMLTransform(ctx workflow.Context, input *glue.DeleteMLTransformInput) (*glue.DeleteMLTransformOutput, error)
	DeleteMLTransformAsync(ctx workflow.Context, input *glue.DeleteMLTransformInput) *GlueDeleteMLTransformFuture

	DeletePartition(ctx workflow.Context, input *glue.DeletePartitionInput) (*glue.DeletePartitionOutput, error)
	DeletePartitionAsync(ctx workflow.Context, input *glue.DeletePartitionInput) *GlueDeletePartitionFuture

	DeleteResourcePolicy(ctx workflow.Context, input *glue.DeleteResourcePolicyInput) (*glue.DeleteResourcePolicyOutput, error)
	DeleteResourcePolicyAsync(ctx workflow.Context, input *glue.DeleteResourcePolicyInput) *GlueDeleteResourcePolicyFuture

	DeleteSecurityConfiguration(ctx workflow.Context, input *glue.DeleteSecurityConfigurationInput) (*glue.DeleteSecurityConfigurationOutput, error)
	DeleteSecurityConfigurationAsync(ctx workflow.Context, input *glue.DeleteSecurityConfigurationInput) *GlueDeleteSecurityConfigurationFuture

	DeleteTable(ctx workflow.Context, input *glue.DeleteTableInput) (*glue.DeleteTableOutput, error)
	DeleteTableAsync(ctx workflow.Context, input *glue.DeleteTableInput) *GlueDeleteTableFuture

	DeleteTableVersion(ctx workflow.Context, input *glue.DeleteTableVersionInput) (*glue.DeleteTableVersionOutput, error)
	DeleteTableVersionAsync(ctx workflow.Context, input *glue.DeleteTableVersionInput) *GlueDeleteTableVersionFuture

	DeleteTrigger(ctx workflow.Context, input *glue.DeleteTriggerInput) (*glue.DeleteTriggerOutput, error)
	DeleteTriggerAsync(ctx workflow.Context, input *glue.DeleteTriggerInput) *GlueDeleteTriggerFuture

	DeleteUserDefinedFunction(ctx workflow.Context, input *glue.DeleteUserDefinedFunctionInput) (*glue.DeleteUserDefinedFunctionOutput, error)
	DeleteUserDefinedFunctionAsync(ctx workflow.Context, input *glue.DeleteUserDefinedFunctionInput) *GlueDeleteUserDefinedFunctionFuture

	DeleteWorkflow(ctx workflow.Context, input *glue.DeleteWorkflowInput) (*glue.DeleteWorkflowOutput, error)
	DeleteWorkflowAsync(ctx workflow.Context, input *glue.DeleteWorkflowInput) *GlueDeleteWorkflowFuture

	GetCatalogImportStatus(ctx workflow.Context, input *glue.GetCatalogImportStatusInput) (*glue.GetCatalogImportStatusOutput, error)
	GetCatalogImportStatusAsync(ctx workflow.Context, input *glue.GetCatalogImportStatusInput) *GlueGetCatalogImportStatusFuture

	GetClassifier(ctx workflow.Context, input *glue.GetClassifierInput) (*glue.GetClassifierOutput, error)
	GetClassifierAsync(ctx workflow.Context, input *glue.GetClassifierInput) *GlueGetClassifierFuture

	GetClassifiers(ctx workflow.Context, input *glue.GetClassifiersInput) (*glue.GetClassifiersOutput, error)
	GetClassifiersAsync(ctx workflow.Context, input *glue.GetClassifiersInput) *GlueGetClassifiersFuture

	GetColumnStatisticsForPartition(ctx workflow.Context, input *glue.GetColumnStatisticsForPartitionInput) (*glue.GetColumnStatisticsForPartitionOutput, error)
	GetColumnStatisticsForPartitionAsync(ctx workflow.Context, input *glue.GetColumnStatisticsForPartitionInput) *GlueGetColumnStatisticsForPartitionFuture

	GetColumnStatisticsForTable(ctx workflow.Context, input *glue.GetColumnStatisticsForTableInput) (*glue.GetColumnStatisticsForTableOutput, error)
	GetColumnStatisticsForTableAsync(ctx workflow.Context, input *glue.GetColumnStatisticsForTableInput) *GlueGetColumnStatisticsForTableFuture

	GetConnection(ctx workflow.Context, input *glue.GetConnectionInput) (*glue.GetConnectionOutput, error)
	GetConnectionAsync(ctx workflow.Context, input *glue.GetConnectionInput) *GlueGetConnectionFuture

	GetConnections(ctx workflow.Context, input *glue.GetConnectionsInput) (*glue.GetConnectionsOutput, error)
	GetConnectionsAsync(ctx workflow.Context, input *glue.GetConnectionsInput) *GlueGetConnectionsFuture

	GetCrawler(ctx workflow.Context, input *glue.GetCrawlerInput) (*glue.GetCrawlerOutput, error)
	GetCrawlerAsync(ctx workflow.Context, input *glue.GetCrawlerInput) *GlueGetCrawlerFuture

	GetCrawlerMetrics(ctx workflow.Context, input *glue.GetCrawlerMetricsInput) (*glue.GetCrawlerMetricsOutput, error)
	GetCrawlerMetricsAsync(ctx workflow.Context, input *glue.GetCrawlerMetricsInput) *GlueGetCrawlerMetricsFuture

	GetCrawlers(ctx workflow.Context, input *glue.GetCrawlersInput) (*glue.GetCrawlersOutput, error)
	GetCrawlersAsync(ctx workflow.Context, input *glue.GetCrawlersInput) *GlueGetCrawlersFuture

	GetDataCatalogEncryptionSettings(ctx workflow.Context, input *glue.GetDataCatalogEncryptionSettingsInput) (*glue.GetDataCatalogEncryptionSettingsOutput, error)
	GetDataCatalogEncryptionSettingsAsync(ctx workflow.Context, input *glue.GetDataCatalogEncryptionSettingsInput) *GlueGetDataCatalogEncryptionSettingsFuture

	GetDatabase(ctx workflow.Context, input *glue.GetDatabaseInput) (*glue.GetDatabaseOutput, error)
	GetDatabaseAsync(ctx workflow.Context, input *glue.GetDatabaseInput) *GlueGetDatabaseFuture

	GetDatabases(ctx workflow.Context, input *glue.GetDatabasesInput) (*glue.GetDatabasesOutput, error)
	GetDatabasesAsync(ctx workflow.Context, input *glue.GetDatabasesInput) *GlueGetDatabasesFuture

	GetDataflowGraph(ctx workflow.Context, input *glue.GetDataflowGraphInput) (*glue.GetDataflowGraphOutput, error)
	GetDataflowGraphAsync(ctx workflow.Context, input *glue.GetDataflowGraphInput) *GlueGetDataflowGraphFuture

	GetDevEndpoint(ctx workflow.Context, input *glue.GetDevEndpointInput) (*glue.GetDevEndpointOutput, error)
	GetDevEndpointAsync(ctx workflow.Context, input *glue.GetDevEndpointInput) *GlueGetDevEndpointFuture

	GetDevEndpoints(ctx workflow.Context, input *glue.GetDevEndpointsInput) (*glue.GetDevEndpointsOutput, error)
	GetDevEndpointsAsync(ctx workflow.Context, input *glue.GetDevEndpointsInput) *GlueGetDevEndpointsFuture

	GetJob(ctx workflow.Context, input *glue.GetJobInput) (*glue.GetJobOutput, error)
	GetJobAsync(ctx workflow.Context, input *glue.GetJobInput) *GlueGetJobFuture

	GetJobBookmark(ctx workflow.Context, input *glue.GetJobBookmarkInput) (*glue.GetJobBookmarkOutput, error)
	GetJobBookmarkAsync(ctx workflow.Context, input *glue.GetJobBookmarkInput) *GlueGetJobBookmarkFuture

	GetJobRun(ctx workflow.Context, input *glue.GetJobRunInput) (*glue.GetJobRunOutput, error)
	GetJobRunAsync(ctx workflow.Context, input *glue.GetJobRunInput) *GlueGetJobRunFuture

	GetJobRuns(ctx workflow.Context, input *glue.GetJobRunsInput) (*glue.GetJobRunsOutput, error)
	GetJobRunsAsync(ctx workflow.Context, input *glue.GetJobRunsInput) *GlueGetJobRunsFuture

	GetJobs(ctx workflow.Context, input *glue.GetJobsInput) (*glue.GetJobsOutput, error)
	GetJobsAsync(ctx workflow.Context, input *glue.GetJobsInput) *GlueGetJobsFuture

	GetMLTaskRun(ctx workflow.Context, input *glue.GetMLTaskRunInput) (*glue.GetMLTaskRunOutput, error)
	GetMLTaskRunAsync(ctx workflow.Context, input *glue.GetMLTaskRunInput) *GlueGetMLTaskRunFuture

	GetMLTaskRuns(ctx workflow.Context, input *glue.GetMLTaskRunsInput) (*glue.GetMLTaskRunsOutput, error)
	GetMLTaskRunsAsync(ctx workflow.Context, input *glue.GetMLTaskRunsInput) *GlueGetMLTaskRunsFuture

	GetMLTransform(ctx workflow.Context, input *glue.GetMLTransformInput) (*glue.GetMLTransformOutput, error)
	GetMLTransformAsync(ctx workflow.Context, input *glue.GetMLTransformInput) *GlueGetMLTransformFuture

	GetMLTransforms(ctx workflow.Context, input *glue.GetMLTransformsInput) (*glue.GetMLTransformsOutput, error)
	GetMLTransformsAsync(ctx workflow.Context, input *glue.GetMLTransformsInput) *GlueGetMLTransformsFuture

	GetMapping(ctx workflow.Context, input *glue.GetMappingInput) (*glue.GetMappingOutput, error)
	GetMappingAsync(ctx workflow.Context, input *glue.GetMappingInput) *GlueGetMappingFuture

	GetPartition(ctx workflow.Context, input *glue.GetPartitionInput) (*glue.GetPartitionOutput, error)
	GetPartitionAsync(ctx workflow.Context, input *glue.GetPartitionInput) *GlueGetPartitionFuture

	GetPartitionIndexes(ctx workflow.Context, input *glue.GetPartitionIndexesInput) (*glue.GetPartitionIndexesOutput, error)
	GetPartitionIndexesAsync(ctx workflow.Context, input *glue.GetPartitionIndexesInput) *GlueGetPartitionIndexesFuture

	GetPartitions(ctx workflow.Context, input *glue.GetPartitionsInput) (*glue.GetPartitionsOutput, error)
	GetPartitionsAsync(ctx workflow.Context, input *glue.GetPartitionsInput) *GlueGetPartitionsFuture

	GetPlan(ctx workflow.Context, input *glue.GetPlanInput) (*glue.GetPlanOutput, error)
	GetPlanAsync(ctx workflow.Context, input *glue.GetPlanInput) *GlueGetPlanFuture

	GetResourcePolicies(ctx workflow.Context, input *glue.GetResourcePoliciesInput) (*glue.GetResourcePoliciesOutput, error)
	GetResourcePoliciesAsync(ctx workflow.Context, input *glue.GetResourcePoliciesInput) *GlueGetResourcePoliciesFuture

	GetResourcePolicy(ctx workflow.Context, input *glue.GetResourcePolicyInput) (*glue.GetResourcePolicyOutput, error)
	GetResourcePolicyAsync(ctx workflow.Context, input *glue.GetResourcePolicyInput) *GlueGetResourcePolicyFuture

	GetSecurityConfiguration(ctx workflow.Context, input *glue.GetSecurityConfigurationInput) (*glue.GetSecurityConfigurationOutput, error)
	GetSecurityConfigurationAsync(ctx workflow.Context, input *glue.GetSecurityConfigurationInput) *GlueGetSecurityConfigurationFuture

	GetSecurityConfigurations(ctx workflow.Context, input *glue.GetSecurityConfigurationsInput) (*glue.GetSecurityConfigurationsOutput, error)
	GetSecurityConfigurationsAsync(ctx workflow.Context, input *glue.GetSecurityConfigurationsInput) *GlueGetSecurityConfigurationsFuture

	GetTable(ctx workflow.Context, input *glue.GetTableInput) (*glue.GetTableOutput, error)
	GetTableAsync(ctx workflow.Context, input *glue.GetTableInput) *GlueGetTableFuture

	GetTableVersion(ctx workflow.Context, input *glue.GetTableVersionInput) (*glue.GetTableVersionOutput, error)
	GetTableVersionAsync(ctx workflow.Context, input *glue.GetTableVersionInput) *GlueGetTableVersionFuture

	GetTableVersions(ctx workflow.Context, input *glue.GetTableVersionsInput) (*glue.GetTableVersionsOutput, error)
	GetTableVersionsAsync(ctx workflow.Context, input *glue.GetTableVersionsInput) *GlueGetTableVersionsFuture

	GetTables(ctx workflow.Context, input *glue.GetTablesInput) (*glue.GetTablesOutput, error)
	GetTablesAsync(ctx workflow.Context, input *glue.GetTablesInput) *GlueGetTablesFuture

	GetTags(ctx workflow.Context, input *glue.GetTagsInput) (*glue.GetTagsOutput, error)
	GetTagsAsync(ctx workflow.Context, input *glue.GetTagsInput) *GlueGetTagsFuture

	GetTrigger(ctx workflow.Context, input *glue.GetTriggerInput) (*glue.GetTriggerOutput, error)
	GetTriggerAsync(ctx workflow.Context, input *glue.GetTriggerInput) *GlueGetTriggerFuture

	GetTriggers(ctx workflow.Context, input *glue.GetTriggersInput) (*glue.GetTriggersOutput, error)
	GetTriggersAsync(ctx workflow.Context, input *glue.GetTriggersInput) *GlueGetTriggersFuture

	GetUserDefinedFunction(ctx workflow.Context, input *glue.GetUserDefinedFunctionInput) (*glue.GetUserDefinedFunctionOutput, error)
	GetUserDefinedFunctionAsync(ctx workflow.Context, input *glue.GetUserDefinedFunctionInput) *GlueGetUserDefinedFunctionFuture

	GetUserDefinedFunctions(ctx workflow.Context, input *glue.GetUserDefinedFunctionsInput) (*glue.GetUserDefinedFunctionsOutput, error)
	GetUserDefinedFunctionsAsync(ctx workflow.Context, input *glue.GetUserDefinedFunctionsInput) *GlueGetUserDefinedFunctionsFuture

	GetWorkflow(ctx workflow.Context, input *glue.GetWorkflowInput) (*glue.GetWorkflowOutput, error)
	GetWorkflowAsync(ctx workflow.Context, input *glue.GetWorkflowInput) *GlueGetWorkflowFuture

	GetWorkflowRun(ctx workflow.Context, input *glue.GetWorkflowRunInput) (*glue.GetWorkflowRunOutput, error)
	GetWorkflowRunAsync(ctx workflow.Context, input *glue.GetWorkflowRunInput) *GlueGetWorkflowRunFuture

	GetWorkflowRunProperties(ctx workflow.Context, input *glue.GetWorkflowRunPropertiesInput) (*glue.GetWorkflowRunPropertiesOutput, error)
	GetWorkflowRunPropertiesAsync(ctx workflow.Context, input *glue.GetWorkflowRunPropertiesInput) *GlueGetWorkflowRunPropertiesFuture

	GetWorkflowRuns(ctx workflow.Context, input *glue.GetWorkflowRunsInput) (*glue.GetWorkflowRunsOutput, error)
	GetWorkflowRunsAsync(ctx workflow.Context, input *glue.GetWorkflowRunsInput) *GlueGetWorkflowRunsFuture

	ImportCatalogToGlue(ctx workflow.Context, input *glue.ImportCatalogToGlueInput) (*glue.ImportCatalogToGlueOutput, error)
	ImportCatalogToGlueAsync(ctx workflow.Context, input *glue.ImportCatalogToGlueInput) *GlueImportCatalogToGlueFuture

	ListCrawlers(ctx workflow.Context, input *glue.ListCrawlersInput) (*glue.ListCrawlersOutput, error)
	ListCrawlersAsync(ctx workflow.Context, input *glue.ListCrawlersInput) *GlueListCrawlersFuture

	ListDevEndpoints(ctx workflow.Context, input *glue.ListDevEndpointsInput) (*glue.ListDevEndpointsOutput, error)
	ListDevEndpointsAsync(ctx workflow.Context, input *glue.ListDevEndpointsInput) *GlueListDevEndpointsFuture

	ListJobs(ctx workflow.Context, input *glue.ListJobsInput) (*glue.ListJobsOutput, error)
	ListJobsAsync(ctx workflow.Context, input *glue.ListJobsInput) *GlueListJobsFuture

	ListMLTransforms(ctx workflow.Context, input *glue.ListMLTransformsInput) (*glue.ListMLTransformsOutput, error)
	ListMLTransformsAsync(ctx workflow.Context, input *glue.ListMLTransformsInput) *GlueListMLTransformsFuture

	ListTriggers(ctx workflow.Context, input *glue.ListTriggersInput) (*glue.ListTriggersOutput, error)
	ListTriggersAsync(ctx workflow.Context, input *glue.ListTriggersInput) *GlueListTriggersFuture

	ListWorkflows(ctx workflow.Context, input *glue.ListWorkflowsInput) (*glue.ListWorkflowsOutput, error)
	ListWorkflowsAsync(ctx workflow.Context, input *glue.ListWorkflowsInput) *GlueListWorkflowsFuture

	PutDataCatalogEncryptionSettings(ctx workflow.Context, input *glue.PutDataCatalogEncryptionSettingsInput) (*glue.PutDataCatalogEncryptionSettingsOutput, error)
	PutDataCatalogEncryptionSettingsAsync(ctx workflow.Context, input *glue.PutDataCatalogEncryptionSettingsInput) *GluePutDataCatalogEncryptionSettingsFuture

	PutResourcePolicy(ctx workflow.Context, input *glue.PutResourcePolicyInput) (*glue.PutResourcePolicyOutput, error)
	PutResourcePolicyAsync(ctx workflow.Context, input *glue.PutResourcePolicyInput) *GluePutResourcePolicyFuture

	PutWorkflowRunProperties(ctx workflow.Context, input *glue.PutWorkflowRunPropertiesInput) (*glue.PutWorkflowRunPropertiesOutput, error)
	PutWorkflowRunPropertiesAsync(ctx workflow.Context, input *glue.PutWorkflowRunPropertiesInput) *GluePutWorkflowRunPropertiesFuture

	ResetJobBookmark(ctx workflow.Context, input *glue.ResetJobBookmarkInput) (*glue.ResetJobBookmarkOutput, error)
	ResetJobBookmarkAsync(ctx workflow.Context, input *glue.ResetJobBookmarkInput) *GlueResetJobBookmarkFuture

	ResumeWorkflowRun(ctx workflow.Context, input *glue.ResumeWorkflowRunInput) (*glue.ResumeWorkflowRunOutput, error)
	ResumeWorkflowRunAsync(ctx workflow.Context, input *glue.ResumeWorkflowRunInput) *GlueResumeWorkflowRunFuture

	SearchTables(ctx workflow.Context, input *glue.SearchTablesInput) (*glue.SearchTablesOutput, error)
	SearchTablesAsync(ctx workflow.Context, input *glue.SearchTablesInput) *GlueSearchTablesFuture

	StartCrawler(ctx workflow.Context, input *glue.StartCrawlerInput) (*glue.StartCrawlerOutput, error)
	StartCrawlerAsync(ctx workflow.Context, input *glue.StartCrawlerInput) *GlueStartCrawlerFuture

	StartCrawlerSchedule(ctx workflow.Context, input *glue.StartCrawlerScheduleInput) (*glue.StartCrawlerScheduleOutput, error)
	StartCrawlerScheduleAsync(ctx workflow.Context, input *glue.StartCrawlerScheduleInput) *GlueStartCrawlerScheduleFuture

	StartExportLabelsTaskRun(ctx workflow.Context, input *glue.StartExportLabelsTaskRunInput) (*glue.StartExportLabelsTaskRunOutput, error)
	StartExportLabelsTaskRunAsync(ctx workflow.Context, input *glue.StartExportLabelsTaskRunInput) *GlueStartExportLabelsTaskRunFuture

	StartImportLabelsTaskRun(ctx workflow.Context, input *glue.StartImportLabelsTaskRunInput) (*glue.StartImportLabelsTaskRunOutput, error)
	StartImportLabelsTaskRunAsync(ctx workflow.Context, input *glue.StartImportLabelsTaskRunInput) *GlueStartImportLabelsTaskRunFuture

	StartJobRun(ctx workflow.Context, input *glue.StartJobRunInput) (*glue.StartJobRunOutput, error)
	StartJobRunAsync(ctx workflow.Context, input *glue.StartJobRunInput) *GlueStartJobRunFuture

	StartMLEvaluationTaskRun(ctx workflow.Context, input *glue.StartMLEvaluationTaskRunInput) (*glue.StartMLEvaluationTaskRunOutput, error)
	StartMLEvaluationTaskRunAsync(ctx workflow.Context, input *glue.StartMLEvaluationTaskRunInput) *GlueStartMLEvaluationTaskRunFuture

	StartMLLabelingSetGenerationTaskRun(ctx workflow.Context, input *glue.StartMLLabelingSetGenerationTaskRunInput) (*glue.StartMLLabelingSetGenerationTaskRunOutput, error)
	StartMLLabelingSetGenerationTaskRunAsync(ctx workflow.Context, input *glue.StartMLLabelingSetGenerationTaskRunInput) *GlueStartMLLabelingSetGenerationTaskRunFuture

	StartTrigger(ctx workflow.Context, input *glue.StartTriggerInput) (*glue.StartTriggerOutput, error)
	StartTriggerAsync(ctx workflow.Context, input *glue.StartTriggerInput) *GlueStartTriggerFuture

	StartWorkflowRun(ctx workflow.Context, input *glue.StartWorkflowRunInput) (*glue.StartWorkflowRunOutput, error)
	StartWorkflowRunAsync(ctx workflow.Context, input *glue.StartWorkflowRunInput) *GlueStartWorkflowRunFuture

	StopCrawler(ctx workflow.Context, input *glue.StopCrawlerInput) (*glue.StopCrawlerOutput, error)
	StopCrawlerAsync(ctx workflow.Context, input *glue.StopCrawlerInput) *GlueStopCrawlerFuture

	StopCrawlerSchedule(ctx workflow.Context, input *glue.StopCrawlerScheduleInput) (*glue.StopCrawlerScheduleOutput, error)
	StopCrawlerScheduleAsync(ctx workflow.Context, input *glue.StopCrawlerScheduleInput) *GlueStopCrawlerScheduleFuture

	StopTrigger(ctx workflow.Context, input *glue.StopTriggerInput) (*glue.StopTriggerOutput, error)
	StopTriggerAsync(ctx workflow.Context, input *glue.StopTriggerInput) *GlueStopTriggerFuture

	StopWorkflowRun(ctx workflow.Context, input *glue.StopWorkflowRunInput) (*glue.StopWorkflowRunOutput, error)
	StopWorkflowRunAsync(ctx workflow.Context, input *glue.StopWorkflowRunInput) *GlueStopWorkflowRunFuture

	TagResource(ctx workflow.Context, input *glue.TagResourceInput) (*glue.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *glue.TagResourceInput) *GlueTagResourceFuture

	UntagResource(ctx workflow.Context, input *glue.UntagResourceInput) (*glue.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *glue.UntagResourceInput) *GlueUntagResourceFuture

	UpdateClassifier(ctx workflow.Context, input *glue.UpdateClassifierInput) (*glue.UpdateClassifierOutput, error)
	UpdateClassifierAsync(ctx workflow.Context, input *glue.UpdateClassifierInput) *GlueUpdateClassifierFuture

	UpdateColumnStatisticsForPartition(ctx workflow.Context, input *glue.UpdateColumnStatisticsForPartitionInput) (*glue.UpdateColumnStatisticsForPartitionOutput, error)
	UpdateColumnStatisticsForPartitionAsync(ctx workflow.Context, input *glue.UpdateColumnStatisticsForPartitionInput) *GlueUpdateColumnStatisticsForPartitionFuture

	UpdateColumnStatisticsForTable(ctx workflow.Context, input *glue.UpdateColumnStatisticsForTableInput) (*glue.UpdateColumnStatisticsForTableOutput, error)
	UpdateColumnStatisticsForTableAsync(ctx workflow.Context, input *glue.UpdateColumnStatisticsForTableInput) *GlueUpdateColumnStatisticsForTableFuture

	UpdateConnection(ctx workflow.Context, input *glue.UpdateConnectionInput) (*glue.UpdateConnectionOutput, error)
	UpdateConnectionAsync(ctx workflow.Context, input *glue.UpdateConnectionInput) *GlueUpdateConnectionFuture

	UpdateCrawler(ctx workflow.Context, input *glue.UpdateCrawlerInput) (*glue.UpdateCrawlerOutput, error)
	UpdateCrawlerAsync(ctx workflow.Context, input *glue.UpdateCrawlerInput) *GlueUpdateCrawlerFuture

	UpdateCrawlerSchedule(ctx workflow.Context, input *glue.UpdateCrawlerScheduleInput) (*glue.UpdateCrawlerScheduleOutput, error)
	UpdateCrawlerScheduleAsync(ctx workflow.Context, input *glue.UpdateCrawlerScheduleInput) *GlueUpdateCrawlerScheduleFuture

	UpdateDatabase(ctx workflow.Context, input *glue.UpdateDatabaseInput) (*glue.UpdateDatabaseOutput, error)
	UpdateDatabaseAsync(ctx workflow.Context, input *glue.UpdateDatabaseInput) *GlueUpdateDatabaseFuture

	UpdateDevEndpoint(ctx workflow.Context, input *glue.UpdateDevEndpointInput) (*glue.UpdateDevEndpointOutput, error)
	UpdateDevEndpointAsync(ctx workflow.Context, input *glue.UpdateDevEndpointInput) *GlueUpdateDevEndpointFuture

	UpdateJob(ctx workflow.Context, input *glue.UpdateJobInput) (*glue.UpdateJobOutput, error)
	UpdateJobAsync(ctx workflow.Context, input *glue.UpdateJobInput) *GlueUpdateJobFuture

	UpdateMLTransform(ctx workflow.Context, input *glue.UpdateMLTransformInput) (*glue.UpdateMLTransformOutput, error)
	UpdateMLTransformAsync(ctx workflow.Context, input *glue.UpdateMLTransformInput) *GlueUpdateMLTransformFuture

	UpdatePartition(ctx workflow.Context, input *glue.UpdatePartitionInput) (*glue.UpdatePartitionOutput, error)
	UpdatePartitionAsync(ctx workflow.Context, input *glue.UpdatePartitionInput) *GlueUpdatePartitionFuture

	UpdateTable(ctx workflow.Context, input *glue.UpdateTableInput) (*glue.UpdateTableOutput, error)
	UpdateTableAsync(ctx workflow.Context, input *glue.UpdateTableInput) *GlueUpdateTableFuture

	UpdateTrigger(ctx workflow.Context, input *glue.UpdateTriggerInput) (*glue.UpdateTriggerOutput, error)
	UpdateTriggerAsync(ctx workflow.Context, input *glue.UpdateTriggerInput) *GlueUpdateTriggerFuture

	UpdateUserDefinedFunction(ctx workflow.Context, input *glue.UpdateUserDefinedFunctionInput) (*glue.UpdateUserDefinedFunctionOutput, error)
	UpdateUserDefinedFunctionAsync(ctx workflow.Context, input *glue.UpdateUserDefinedFunctionInput) *GlueUpdateUserDefinedFunctionFuture

	UpdateWorkflow(ctx workflow.Context, input *glue.UpdateWorkflowInput) (*glue.UpdateWorkflowOutput, error)
	UpdateWorkflowAsync(ctx workflow.Context, input *glue.UpdateWorkflowInput) *GlueUpdateWorkflowFuture
}

type GlueStub struct{}

func NewGlueStub() GlueClient {
	return &GlueStub{}
}

type GlueBatchCreatePartitionFuture struct {
	Future workflow.Future
}

func (r *GlueBatchCreatePartitionFuture) Get(ctx workflow.Context) (*glue.BatchCreatePartitionOutput, error) {
	var output glue.BatchCreatePartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueBatchDeleteConnectionFuture struct {
	Future workflow.Future
}

func (r *GlueBatchDeleteConnectionFuture) Get(ctx workflow.Context) (*glue.BatchDeleteConnectionOutput, error) {
	var output glue.BatchDeleteConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueBatchDeletePartitionFuture struct {
	Future workflow.Future
}

func (r *GlueBatchDeletePartitionFuture) Get(ctx workflow.Context) (*glue.BatchDeletePartitionOutput, error) {
	var output glue.BatchDeletePartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueBatchDeleteTableFuture struct {
	Future workflow.Future
}

func (r *GlueBatchDeleteTableFuture) Get(ctx workflow.Context) (*glue.BatchDeleteTableOutput, error) {
	var output glue.BatchDeleteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueBatchDeleteTableVersionFuture struct {
	Future workflow.Future
}

func (r *GlueBatchDeleteTableVersionFuture) Get(ctx workflow.Context) (*glue.BatchDeleteTableVersionOutput, error) {
	var output glue.BatchDeleteTableVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueBatchGetCrawlersFuture struct {
	Future workflow.Future
}

func (r *GlueBatchGetCrawlersFuture) Get(ctx workflow.Context) (*glue.BatchGetCrawlersOutput, error) {
	var output glue.BatchGetCrawlersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueBatchGetDevEndpointsFuture struct {
	Future workflow.Future
}

func (r *GlueBatchGetDevEndpointsFuture) Get(ctx workflow.Context) (*glue.BatchGetDevEndpointsOutput, error) {
	var output glue.BatchGetDevEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueBatchGetJobsFuture struct {
	Future workflow.Future
}

func (r *GlueBatchGetJobsFuture) Get(ctx workflow.Context) (*glue.BatchGetJobsOutput, error) {
	var output glue.BatchGetJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueBatchGetPartitionFuture struct {
	Future workflow.Future
}

func (r *GlueBatchGetPartitionFuture) Get(ctx workflow.Context) (*glue.BatchGetPartitionOutput, error) {
	var output glue.BatchGetPartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueBatchGetTriggersFuture struct {
	Future workflow.Future
}

func (r *GlueBatchGetTriggersFuture) Get(ctx workflow.Context) (*glue.BatchGetTriggersOutput, error) {
	var output glue.BatchGetTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueBatchGetWorkflowsFuture struct {
	Future workflow.Future
}

func (r *GlueBatchGetWorkflowsFuture) Get(ctx workflow.Context) (*glue.BatchGetWorkflowsOutput, error) {
	var output glue.BatchGetWorkflowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueBatchStopJobRunFuture struct {
	Future workflow.Future
}

func (r *GlueBatchStopJobRunFuture) Get(ctx workflow.Context) (*glue.BatchStopJobRunOutput, error) {
	var output glue.BatchStopJobRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueBatchUpdatePartitionFuture struct {
	Future workflow.Future
}

func (r *GlueBatchUpdatePartitionFuture) Get(ctx workflow.Context) (*glue.BatchUpdatePartitionOutput, error) {
	var output glue.BatchUpdatePartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCancelMLTaskRunFuture struct {
	Future workflow.Future
}

func (r *GlueCancelMLTaskRunFuture) Get(ctx workflow.Context) (*glue.CancelMLTaskRunOutput, error) {
	var output glue.CancelMLTaskRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateClassifierFuture struct {
	Future workflow.Future
}

func (r *GlueCreateClassifierFuture) Get(ctx workflow.Context) (*glue.CreateClassifierOutput, error) {
	var output glue.CreateClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateConnectionFuture struct {
	Future workflow.Future
}

func (r *GlueCreateConnectionFuture) Get(ctx workflow.Context) (*glue.CreateConnectionOutput, error) {
	var output glue.CreateConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateCrawlerFuture struct {
	Future workflow.Future
}

func (r *GlueCreateCrawlerFuture) Get(ctx workflow.Context) (*glue.CreateCrawlerOutput, error) {
	var output glue.CreateCrawlerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateDatabaseFuture struct {
	Future workflow.Future
}

func (r *GlueCreateDatabaseFuture) Get(ctx workflow.Context) (*glue.CreateDatabaseOutput, error) {
	var output glue.CreateDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateDevEndpointFuture struct {
	Future workflow.Future
}

func (r *GlueCreateDevEndpointFuture) Get(ctx workflow.Context) (*glue.CreateDevEndpointOutput, error) {
	var output glue.CreateDevEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateJobFuture struct {
	Future workflow.Future
}

func (r *GlueCreateJobFuture) Get(ctx workflow.Context) (*glue.CreateJobOutput, error) {
	var output glue.CreateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateMLTransformFuture struct {
	Future workflow.Future
}

func (r *GlueCreateMLTransformFuture) Get(ctx workflow.Context) (*glue.CreateMLTransformOutput, error) {
	var output glue.CreateMLTransformOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreatePartitionFuture struct {
	Future workflow.Future
}

func (r *GlueCreatePartitionFuture) Get(ctx workflow.Context) (*glue.CreatePartitionOutput, error) {
	var output glue.CreatePartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateScriptFuture struct {
	Future workflow.Future
}

func (r *GlueCreateScriptFuture) Get(ctx workflow.Context) (*glue.CreateScriptOutput, error) {
	var output glue.CreateScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateSecurityConfigurationFuture struct {
	Future workflow.Future
}

func (r *GlueCreateSecurityConfigurationFuture) Get(ctx workflow.Context) (*glue.CreateSecurityConfigurationOutput, error) {
	var output glue.CreateSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateTableFuture struct {
	Future workflow.Future
}

func (r *GlueCreateTableFuture) Get(ctx workflow.Context) (*glue.CreateTableOutput, error) {
	var output glue.CreateTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateTriggerFuture struct {
	Future workflow.Future
}

func (r *GlueCreateTriggerFuture) Get(ctx workflow.Context) (*glue.CreateTriggerOutput, error) {
	var output glue.CreateTriggerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateUserDefinedFunctionFuture struct {
	Future workflow.Future
}

func (r *GlueCreateUserDefinedFunctionFuture) Get(ctx workflow.Context) (*glue.CreateUserDefinedFunctionOutput, error) {
	var output glue.CreateUserDefinedFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueCreateWorkflowFuture struct {
	Future workflow.Future
}

func (r *GlueCreateWorkflowFuture) Get(ctx workflow.Context) (*glue.CreateWorkflowOutput, error) {
	var output glue.CreateWorkflowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteClassifierFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteClassifierFuture) Get(ctx workflow.Context) (*glue.DeleteClassifierOutput, error) {
	var output glue.DeleteClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteColumnStatisticsForPartitionFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteColumnStatisticsForPartitionFuture) Get(ctx workflow.Context) (*glue.DeleteColumnStatisticsForPartitionOutput, error) {
	var output glue.DeleteColumnStatisticsForPartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteColumnStatisticsForTableFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteColumnStatisticsForTableFuture) Get(ctx workflow.Context) (*glue.DeleteColumnStatisticsForTableOutput, error) {
	var output glue.DeleteColumnStatisticsForTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteConnectionFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteConnectionFuture) Get(ctx workflow.Context) (*glue.DeleteConnectionOutput, error) {
	var output glue.DeleteConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteCrawlerFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteCrawlerFuture) Get(ctx workflow.Context) (*glue.DeleteCrawlerOutput, error) {
	var output glue.DeleteCrawlerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteDatabaseFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteDatabaseFuture) Get(ctx workflow.Context) (*glue.DeleteDatabaseOutput, error) {
	var output glue.DeleteDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteDevEndpointFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteDevEndpointFuture) Get(ctx workflow.Context) (*glue.DeleteDevEndpointOutput, error) {
	var output glue.DeleteDevEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteJobFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteJobFuture) Get(ctx workflow.Context) (*glue.DeleteJobOutput, error) {
	var output glue.DeleteJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteMLTransformFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteMLTransformFuture) Get(ctx workflow.Context) (*glue.DeleteMLTransformOutput, error) {
	var output glue.DeleteMLTransformOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeletePartitionFuture struct {
	Future workflow.Future
}

func (r *GlueDeletePartitionFuture) Get(ctx workflow.Context) (*glue.DeletePartitionOutput, error) {
	var output glue.DeletePartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteResourcePolicyFuture) Get(ctx workflow.Context) (*glue.DeleteResourcePolicyOutput, error) {
	var output glue.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteSecurityConfigurationFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteSecurityConfigurationFuture) Get(ctx workflow.Context) (*glue.DeleteSecurityConfigurationOutput, error) {
	var output glue.DeleteSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteTableFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteTableFuture) Get(ctx workflow.Context) (*glue.DeleteTableOutput, error) {
	var output glue.DeleteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteTableVersionFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteTableVersionFuture) Get(ctx workflow.Context) (*glue.DeleteTableVersionOutput, error) {
	var output glue.DeleteTableVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteTriggerFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteTriggerFuture) Get(ctx workflow.Context) (*glue.DeleteTriggerOutput, error) {
	var output glue.DeleteTriggerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteUserDefinedFunctionFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteUserDefinedFunctionFuture) Get(ctx workflow.Context) (*glue.DeleteUserDefinedFunctionOutput, error) {
	var output glue.DeleteUserDefinedFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueDeleteWorkflowFuture struct {
	Future workflow.Future
}

func (r *GlueDeleteWorkflowFuture) Get(ctx workflow.Context) (*glue.DeleteWorkflowOutput, error) {
	var output glue.DeleteWorkflowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetCatalogImportStatusFuture struct {
	Future workflow.Future
}

func (r *GlueGetCatalogImportStatusFuture) Get(ctx workflow.Context) (*glue.GetCatalogImportStatusOutput, error) {
	var output glue.GetCatalogImportStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetClassifierFuture struct {
	Future workflow.Future
}

func (r *GlueGetClassifierFuture) Get(ctx workflow.Context) (*glue.GetClassifierOutput, error) {
	var output glue.GetClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetClassifiersFuture struct {
	Future workflow.Future
}

func (r *GlueGetClassifiersFuture) Get(ctx workflow.Context) (*glue.GetClassifiersOutput, error) {
	var output glue.GetClassifiersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetColumnStatisticsForPartitionFuture struct {
	Future workflow.Future
}

func (r *GlueGetColumnStatisticsForPartitionFuture) Get(ctx workflow.Context) (*glue.GetColumnStatisticsForPartitionOutput, error) {
	var output glue.GetColumnStatisticsForPartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetColumnStatisticsForTableFuture struct {
	Future workflow.Future
}

func (r *GlueGetColumnStatisticsForTableFuture) Get(ctx workflow.Context) (*glue.GetColumnStatisticsForTableOutput, error) {
	var output glue.GetColumnStatisticsForTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetConnectionFuture struct {
	Future workflow.Future
}

func (r *GlueGetConnectionFuture) Get(ctx workflow.Context) (*glue.GetConnectionOutput, error) {
	var output glue.GetConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetConnectionsFuture struct {
	Future workflow.Future
}

func (r *GlueGetConnectionsFuture) Get(ctx workflow.Context) (*glue.GetConnectionsOutput, error) {
	var output glue.GetConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetCrawlerFuture struct {
	Future workflow.Future
}

func (r *GlueGetCrawlerFuture) Get(ctx workflow.Context) (*glue.GetCrawlerOutput, error) {
	var output glue.GetCrawlerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetCrawlerMetricsFuture struct {
	Future workflow.Future
}

func (r *GlueGetCrawlerMetricsFuture) Get(ctx workflow.Context) (*glue.GetCrawlerMetricsOutput, error) {
	var output glue.GetCrawlerMetricsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetCrawlersFuture struct {
	Future workflow.Future
}

func (r *GlueGetCrawlersFuture) Get(ctx workflow.Context) (*glue.GetCrawlersOutput, error) {
	var output glue.GetCrawlersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetDataCatalogEncryptionSettingsFuture struct {
	Future workflow.Future
}

func (r *GlueGetDataCatalogEncryptionSettingsFuture) Get(ctx workflow.Context) (*glue.GetDataCatalogEncryptionSettingsOutput, error) {
	var output glue.GetDataCatalogEncryptionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetDatabaseFuture struct {
	Future workflow.Future
}

func (r *GlueGetDatabaseFuture) Get(ctx workflow.Context) (*glue.GetDatabaseOutput, error) {
	var output glue.GetDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetDatabasesFuture struct {
	Future workflow.Future
}

func (r *GlueGetDatabasesFuture) Get(ctx workflow.Context) (*glue.GetDatabasesOutput, error) {
	var output glue.GetDatabasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetDataflowGraphFuture struct {
	Future workflow.Future
}

func (r *GlueGetDataflowGraphFuture) Get(ctx workflow.Context) (*glue.GetDataflowGraphOutput, error) {
	var output glue.GetDataflowGraphOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetDevEndpointFuture struct {
	Future workflow.Future
}

func (r *GlueGetDevEndpointFuture) Get(ctx workflow.Context) (*glue.GetDevEndpointOutput, error) {
	var output glue.GetDevEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetDevEndpointsFuture struct {
	Future workflow.Future
}

func (r *GlueGetDevEndpointsFuture) Get(ctx workflow.Context) (*glue.GetDevEndpointsOutput, error) {
	var output glue.GetDevEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetJobFuture struct {
	Future workflow.Future
}

func (r *GlueGetJobFuture) Get(ctx workflow.Context) (*glue.GetJobOutput, error) {
	var output glue.GetJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetJobBookmarkFuture struct {
	Future workflow.Future
}

func (r *GlueGetJobBookmarkFuture) Get(ctx workflow.Context) (*glue.GetJobBookmarkOutput, error) {
	var output glue.GetJobBookmarkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetJobRunFuture struct {
	Future workflow.Future
}

func (r *GlueGetJobRunFuture) Get(ctx workflow.Context) (*glue.GetJobRunOutput, error) {
	var output glue.GetJobRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetJobRunsFuture struct {
	Future workflow.Future
}

func (r *GlueGetJobRunsFuture) Get(ctx workflow.Context) (*glue.GetJobRunsOutput, error) {
	var output glue.GetJobRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetJobsFuture struct {
	Future workflow.Future
}

func (r *GlueGetJobsFuture) Get(ctx workflow.Context) (*glue.GetJobsOutput, error) {
	var output glue.GetJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetMLTaskRunFuture struct {
	Future workflow.Future
}

func (r *GlueGetMLTaskRunFuture) Get(ctx workflow.Context) (*glue.GetMLTaskRunOutput, error) {
	var output glue.GetMLTaskRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetMLTaskRunsFuture struct {
	Future workflow.Future
}

func (r *GlueGetMLTaskRunsFuture) Get(ctx workflow.Context) (*glue.GetMLTaskRunsOutput, error) {
	var output glue.GetMLTaskRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetMLTransformFuture struct {
	Future workflow.Future
}

func (r *GlueGetMLTransformFuture) Get(ctx workflow.Context) (*glue.GetMLTransformOutput, error) {
	var output glue.GetMLTransformOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetMLTransformsFuture struct {
	Future workflow.Future
}

func (r *GlueGetMLTransformsFuture) Get(ctx workflow.Context) (*glue.GetMLTransformsOutput, error) {
	var output glue.GetMLTransformsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetMappingFuture struct {
	Future workflow.Future
}

func (r *GlueGetMappingFuture) Get(ctx workflow.Context) (*glue.GetMappingOutput, error) {
	var output glue.GetMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetPartitionFuture struct {
	Future workflow.Future
}

func (r *GlueGetPartitionFuture) Get(ctx workflow.Context) (*glue.GetPartitionOutput, error) {
	var output glue.GetPartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetPartitionIndexesFuture struct {
	Future workflow.Future
}

func (r *GlueGetPartitionIndexesFuture) Get(ctx workflow.Context) (*glue.GetPartitionIndexesOutput, error) {
	var output glue.GetPartitionIndexesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetPartitionsFuture struct {
	Future workflow.Future
}

func (r *GlueGetPartitionsFuture) Get(ctx workflow.Context) (*glue.GetPartitionsOutput, error) {
	var output glue.GetPartitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetPlanFuture struct {
	Future workflow.Future
}

func (r *GlueGetPlanFuture) Get(ctx workflow.Context) (*glue.GetPlanOutput, error) {
	var output glue.GetPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetResourcePoliciesFuture struct {
	Future workflow.Future
}

func (r *GlueGetResourcePoliciesFuture) Get(ctx workflow.Context) (*glue.GetResourcePoliciesOutput, error) {
	var output glue.GetResourcePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *GlueGetResourcePolicyFuture) Get(ctx workflow.Context) (*glue.GetResourcePolicyOutput, error) {
	var output glue.GetResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetSecurityConfigurationFuture struct {
	Future workflow.Future
}

func (r *GlueGetSecurityConfigurationFuture) Get(ctx workflow.Context) (*glue.GetSecurityConfigurationOutput, error) {
	var output glue.GetSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetSecurityConfigurationsFuture struct {
	Future workflow.Future
}

func (r *GlueGetSecurityConfigurationsFuture) Get(ctx workflow.Context) (*glue.GetSecurityConfigurationsOutput, error) {
	var output glue.GetSecurityConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetTableFuture struct {
	Future workflow.Future
}

func (r *GlueGetTableFuture) Get(ctx workflow.Context) (*glue.GetTableOutput, error) {
	var output glue.GetTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetTableVersionFuture struct {
	Future workflow.Future
}

func (r *GlueGetTableVersionFuture) Get(ctx workflow.Context) (*glue.GetTableVersionOutput, error) {
	var output glue.GetTableVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetTableVersionsFuture struct {
	Future workflow.Future
}

func (r *GlueGetTableVersionsFuture) Get(ctx workflow.Context) (*glue.GetTableVersionsOutput, error) {
	var output glue.GetTableVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetTablesFuture struct {
	Future workflow.Future
}

func (r *GlueGetTablesFuture) Get(ctx workflow.Context) (*glue.GetTablesOutput, error) {
	var output glue.GetTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetTagsFuture struct {
	Future workflow.Future
}

func (r *GlueGetTagsFuture) Get(ctx workflow.Context) (*glue.GetTagsOutput, error) {
	var output glue.GetTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetTriggerFuture struct {
	Future workflow.Future
}

func (r *GlueGetTriggerFuture) Get(ctx workflow.Context) (*glue.GetTriggerOutput, error) {
	var output glue.GetTriggerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetTriggersFuture struct {
	Future workflow.Future
}

func (r *GlueGetTriggersFuture) Get(ctx workflow.Context) (*glue.GetTriggersOutput, error) {
	var output glue.GetTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetUserDefinedFunctionFuture struct {
	Future workflow.Future
}

func (r *GlueGetUserDefinedFunctionFuture) Get(ctx workflow.Context) (*glue.GetUserDefinedFunctionOutput, error) {
	var output glue.GetUserDefinedFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetUserDefinedFunctionsFuture struct {
	Future workflow.Future
}

func (r *GlueGetUserDefinedFunctionsFuture) Get(ctx workflow.Context) (*glue.GetUserDefinedFunctionsOutput, error) {
	var output glue.GetUserDefinedFunctionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetWorkflowFuture struct {
	Future workflow.Future
}

func (r *GlueGetWorkflowFuture) Get(ctx workflow.Context) (*glue.GetWorkflowOutput, error) {
	var output glue.GetWorkflowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetWorkflowRunFuture struct {
	Future workflow.Future
}

func (r *GlueGetWorkflowRunFuture) Get(ctx workflow.Context) (*glue.GetWorkflowRunOutput, error) {
	var output glue.GetWorkflowRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetWorkflowRunPropertiesFuture struct {
	Future workflow.Future
}

func (r *GlueGetWorkflowRunPropertiesFuture) Get(ctx workflow.Context) (*glue.GetWorkflowRunPropertiesOutput, error) {
	var output glue.GetWorkflowRunPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueGetWorkflowRunsFuture struct {
	Future workflow.Future
}

func (r *GlueGetWorkflowRunsFuture) Get(ctx workflow.Context) (*glue.GetWorkflowRunsOutput, error) {
	var output glue.GetWorkflowRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueImportCatalogToGlueFuture struct {
	Future workflow.Future
}

func (r *GlueImportCatalogToGlueFuture) Get(ctx workflow.Context) (*glue.ImportCatalogToGlueOutput, error) {
	var output glue.ImportCatalogToGlueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueListCrawlersFuture struct {
	Future workflow.Future
}

func (r *GlueListCrawlersFuture) Get(ctx workflow.Context) (*glue.ListCrawlersOutput, error) {
	var output glue.ListCrawlersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueListDevEndpointsFuture struct {
	Future workflow.Future
}

func (r *GlueListDevEndpointsFuture) Get(ctx workflow.Context) (*glue.ListDevEndpointsOutput, error) {
	var output glue.ListDevEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueListJobsFuture struct {
	Future workflow.Future
}

func (r *GlueListJobsFuture) Get(ctx workflow.Context) (*glue.ListJobsOutput, error) {
	var output glue.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueListMLTransformsFuture struct {
	Future workflow.Future
}

func (r *GlueListMLTransformsFuture) Get(ctx workflow.Context) (*glue.ListMLTransformsOutput, error) {
	var output glue.ListMLTransformsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueListTriggersFuture struct {
	Future workflow.Future
}

func (r *GlueListTriggersFuture) Get(ctx workflow.Context) (*glue.ListTriggersOutput, error) {
	var output glue.ListTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueListWorkflowsFuture struct {
	Future workflow.Future
}

func (r *GlueListWorkflowsFuture) Get(ctx workflow.Context) (*glue.ListWorkflowsOutput, error) {
	var output glue.ListWorkflowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GluePutDataCatalogEncryptionSettingsFuture struct {
	Future workflow.Future
}

func (r *GluePutDataCatalogEncryptionSettingsFuture) Get(ctx workflow.Context) (*glue.PutDataCatalogEncryptionSettingsOutput, error) {
	var output glue.PutDataCatalogEncryptionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GluePutResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *GluePutResourcePolicyFuture) Get(ctx workflow.Context) (*glue.PutResourcePolicyOutput, error) {
	var output glue.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GluePutWorkflowRunPropertiesFuture struct {
	Future workflow.Future
}

func (r *GluePutWorkflowRunPropertiesFuture) Get(ctx workflow.Context) (*glue.PutWorkflowRunPropertiesOutput, error) {
	var output glue.PutWorkflowRunPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueResetJobBookmarkFuture struct {
	Future workflow.Future
}

func (r *GlueResetJobBookmarkFuture) Get(ctx workflow.Context) (*glue.ResetJobBookmarkOutput, error) {
	var output glue.ResetJobBookmarkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueResumeWorkflowRunFuture struct {
	Future workflow.Future
}

func (r *GlueResumeWorkflowRunFuture) Get(ctx workflow.Context) (*glue.ResumeWorkflowRunOutput, error) {
	var output glue.ResumeWorkflowRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueSearchTablesFuture struct {
	Future workflow.Future
}

func (r *GlueSearchTablesFuture) Get(ctx workflow.Context) (*glue.SearchTablesOutput, error) {
	var output glue.SearchTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStartCrawlerFuture struct {
	Future workflow.Future
}

func (r *GlueStartCrawlerFuture) Get(ctx workflow.Context) (*glue.StartCrawlerOutput, error) {
	var output glue.StartCrawlerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStartCrawlerScheduleFuture struct {
	Future workflow.Future
}

func (r *GlueStartCrawlerScheduleFuture) Get(ctx workflow.Context) (*glue.StartCrawlerScheduleOutput, error) {
	var output glue.StartCrawlerScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStartExportLabelsTaskRunFuture struct {
	Future workflow.Future
}

func (r *GlueStartExportLabelsTaskRunFuture) Get(ctx workflow.Context) (*glue.StartExportLabelsTaskRunOutput, error) {
	var output glue.StartExportLabelsTaskRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStartImportLabelsTaskRunFuture struct {
	Future workflow.Future
}

func (r *GlueStartImportLabelsTaskRunFuture) Get(ctx workflow.Context) (*glue.StartImportLabelsTaskRunOutput, error) {
	var output glue.StartImportLabelsTaskRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStartJobRunFuture struct {
	Future workflow.Future
}

func (r *GlueStartJobRunFuture) Get(ctx workflow.Context) (*glue.StartJobRunOutput, error) {
	var output glue.StartJobRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStartMLEvaluationTaskRunFuture struct {
	Future workflow.Future
}

func (r *GlueStartMLEvaluationTaskRunFuture) Get(ctx workflow.Context) (*glue.StartMLEvaluationTaskRunOutput, error) {
	var output glue.StartMLEvaluationTaskRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStartMLLabelingSetGenerationTaskRunFuture struct {
	Future workflow.Future
}

func (r *GlueStartMLLabelingSetGenerationTaskRunFuture) Get(ctx workflow.Context) (*glue.StartMLLabelingSetGenerationTaskRunOutput, error) {
	var output glue.StartMLLabelingSetGenerationTaskRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStartTriggerFuture struct {
	Future workflow.Future
}

func (r *GlueStartTriggerFuture) Get(ctx workflow.Context) (*glue.StartTriggerOutput, error) {
	var output glue.StartTriggerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStartWorkflowRunFuture struct {
	Future workflow.Future
}

func (r *GlueStartWorkflowRunFuture) Get(ctx workflow.Context) (*glue.StartWorkflowRunOutput, error) {
	var output glue.StartWorkflowRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStopCrawlerFuture struct {
	Future workflow.Future
}

func (r *GlueStopCrawlerFuture) Get(ctx workflow.Context) (*glue.StopCrawlerOutput, error) {
	var output glue.StopCrawlerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStopCrawlerScheduleFuture struct {
	Future workflow.Future
}

func (r *GlueStopCrawlerScheduleFuture) Get(ctx workflow.Context) (*glue.StopCrawlerScheduleOutput, error) {
	var output glue.StopCrawlerScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStopTriggerFuture struct {
	Future workflow.Future
}

func (r *GlueStopTriggerFuture) Get(ctx workflow.Context) (*glue.StopTriggerOutput, error) {
	var output glue.StopTriggerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueStopWorkflowRunFuture struct {
	Future workflow.Future
}

func (r *GlueStopWorkflowRunFuture) Get(ctx workflow.Context) (*glue.StopWorkflowRunOutput, error) {
	var output glue.StopWorkflowRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueTagResourceFuture struct {
	Future workflow.Future
}

func (r *GlueTagResourceFuture) Get(ctx workflow.Context) (*glue.TagResourceOutput, error) {
	var output glue.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUntagResourceFuture struct {
	Future workflow.Future
}

func (r *GlueUntagResourceFuture) Get(ctx workflow.Context) (*glue.UntagResourceOutput, error) {
	var output glue.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateClassifierFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateClassifierFuture) Get(ctx workflow.Context) (*glue.UpdateClassifierOutput, error) {
	var output glue.UpdateClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateColumnStatisticsForPartitionFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateColumnStatisticsForPartitionFuture) Get(ctx workflow.Context) (*glue.UpdateColumnStatisticsForPartitionOutput, error) {
	var output glue.UpdateColumnStatisticsForPartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateColumnStatisticsForTableFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateColumnStatisticsForTableFuture) Get(ctx workflow.Context) (*glue.UpdateColumnStatisticsForTableOutput, error) {
	var output glue.UpdateColumnStatisticsForTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateConnectionFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateConnectionFuture) Get(ctx workflow.Context) (*glue.UpdateConnectionOutput, error) {
	var output glue.UpdateConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateCrawlerFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateCrawlerFuture) Get(ctx workflow.Context) (*glue.UpdateCrawlerOutput, error) {
	var output glue.UpdateCrawlerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateCrawlerScheduleFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateCrawlerScheduleFuture) Get(ctx workflow.Context) (*glue.UpdateCrawlerScheduleOutput, error) {
	var output glue.UpdateCrawlerScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateDatabaseFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateDatabaseFuture) Get(ctx workflow.Context) (*glue.UpdateDatabaseOutput, error) {
	var output glue.UpdateDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateDevEndpointFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateDevEndpointFuture) Get(ctx workflow.Context) (*glue.UpdateDevEndpointOutput, error) {
	var output glue.UpdateDevEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateJobFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateJobFuture) Get(ctx workflow.Context) (*glue.UpdateJobOutput, error) {
	var output glue.UpdateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateMLTransformFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateMLTransformFuture) Get(ctx workflow.Context) (*glue.UpdateMLTransformOutput, error) {
	var output glue.UpdateMLTransformOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdatePartitionFuture struct {
	Future workflow.Future
}

func (r *GlueUpdatePartitionFuture) Get(ctx workflow.Context) (*glue.UpdatePartitionOutput, error) {
	var output glue.UpdatePartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateTableFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateTableFuture) Get(ctx workflow.Context) (*glue.UpdateTableOutput, error) {
	var output glue.UpdateTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateTriggerFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateTriggerFuture) Get(ctx workflow.Context) (*glue.UpdateTriggerOutput, error) {
	var output glue.UpdateTriggerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateUserDefinedFunctionFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateUserDefinedFunctionFuture) Get(ctx workflow.Context) (*glue.UpdateUserDefinedFunctionOutput, error) {
	var output glue.UpdateUserDefinedFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlueUpdateWorkflowFuture struct {
	Future workflow.Future
}

func (r *GlueUpdateWorkflowFuture) Get(ctx workflow.Context) (*glue.UpdateWorkflowOutput, error) {
	var output glue.UpdateWorkflowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchCreatePartition(ctx workflow.Context, input *glue.BatchCreatePartitionInput) (*glue.BatchCreatePartitionOutput, error) {
	var output glue.BatchCreatePartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchCreatePartition", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchCreatePartitionAsync(ctx workflow.Context, input *glue.BatchCreatePartitionInput) *GlueBatchCreatePartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchCreatePartition", input)
	return &GlueBatchCreatePartitionFuture{Future: future}
}

func (a *GlueStub) BatchDeleteConnection(ctx workflow.Context, input *glue.BatchDeleteConnectionInput) (*glue.BatchDeleteConnectionOutput, error) {
	var output glue.BatchDeleteConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchDeleteConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchDeleteConnectionAsync(ctx workflow.Context, input *glue.BatchDeleteConnectionInput) *GlueBatchDeleteConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchDeleteConnection", input)
	return &GlueBatchDeleteConnectionFuture{Future: future}
}

func (a *GlueStub) BatchDeletePartition(ctx workflow.Context, input *glue.BatchDeletePartitionInput) (*glue.BatchDeletePartitionOutput, error) {
	var output glue.BatchDeletePartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchDeletePartition", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchDeletePartitionAsync(ctx workflow.Context, input *glue.BatchDeletePartitionInput) *GlueBatchDeletePartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchDeletePartition", input)
	return &GlueBatchDeletePartitionFuture{Future: future}
}

func (a *GlueStub) BatchDeleteTable(ctx workflow.Context, input *glue.BatchDeleteTableInput) (*glue.BatchDeleteTableOutput, error) {
	var output glue.BatchDeleteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchDeleteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchDeleteTableAsync(ctx workflow.Context, input *glue.BatchDeleteTableInput) *GlueBatchDeleteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchDeleteTable", input)
	return &GlueBatchDeleteTableFuture{Future: future}
}

func (a *GlueStub) BatchDeleteTableVersion(ctx workflow.Context, input *glue.BatchDeleteTableVersionInput) (*glue.BatchDeleteTableVersionOutput, error) {
	var output glue.BatchDeleteTableVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchDeleteTableVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchDeleteTableVersionAsync(ctx workflow.Context, input *glue.BatchDeleteTableVersionInput) *GlueBatchDeleteTableVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchDeleteTableVersion", input)
	return &GlueBatchDeleteTableVersionFuture{Future: future}
}

func (a *GlueStub) BatchGetCrawlers(ctx workflow.Context, input *glue.BatchGetCrawlersInput) (*glue.BatchGetCrawlersOutput, error) {
	var output glue.BatchGetCrawlersOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchGetCrawlers", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchGetCrawlersAsync(ctx workflow.Context, input *glue.BatchGetCrawlersInput) *GlueBatchGetCrawlersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchGetCrawlers", input)
	return &GlueBatchGetCrawlersFuture{Future: future}
}

func (a *GlueStub) BatchGetDevEndpoints(ctx workflow.Context, input *glue.BatchGetDevEndpointsInput) (*glue.BatchGetDevEndpointsOutput, error) {
	var output glue.BatchGetDevEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchGetDevEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchGetDevEndpointsAsync(ctx workflow.Context, input *glue.BatchGetDevEndpointsInput) *GlueBatchGetDevEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchGetDevEndpoints", input)
	return &GlueBatchGetDevEndpointsFuture{Future: future}
}

func (a *GlueStub) BatchGetJobs(ctx workflow.Context, input *glue.BatchGetJobsInput) (*glue.BatchGetJobsOutput, error) {
	var output glue.BatchGetJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchGetJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchGetJobsAsync(ctx workflow.Context, input *glue.BatchGetJobsInput) *GlueBatchGetJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchGetJobs", input)
	return &GlueBatchGetJobsFuture{Future: future}
}

func (a *GlueStub) BatchGetPartition(ctx workflow.Context, input *glue.BatchGetPartitionInput) (*glue.BatchGetPartitionOutput, error) {
	var output glue.BatchGetPartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchGetPartition", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchGetPartitionAsync(ctx workflow.Context, input *glue.BatchGetPartitionInput) *GlueBatchGetPartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchGetPartition", input)
	return &GlueBatchGetPartitionFuture{Future: future}
}

func (a *GlueStub) BatchGetTriggers(ctx workflow.Context, input *glue.BatchGetTriggersInput) (*glue.BatchGetTriggersOutput, error) {
	var output glue.BatchGetTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchGetTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchGetTriggersAsync(ctx workflow.Context, input *glue.BatchGetTriggersInput) *GlueBatchGetTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchGetTriggers", input)
	return &GlueBatchGetTriggersFuture{Future: future}
}

func (a *GlueStub) BatchGetWorkflows(ctx workflow.Context, input *glue.BatchGetWorkflowsInput) (*glue.BatchGetWorkflowsOutput, error) {
	var output glue.BatchGetWorkflowsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchGetWorkflows", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchGetWorkflowsAsync(ctx workflow.Context, input *glue.BatchGetWorkflowsInput) *GlueBatchGetWorkflowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchGetWorkflows", input)
	return &GlueBatchGetWorkflowsFuture{Future: future}
}

func (a *GlueStub) BatchStopJobRun(ctx workflow.Context, input *glue.BatchStopJobRunInput) (*glue.BatchStopJobRunOutput, error) {
	var output glue.BatchStopJobRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchStopJobRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchStopJobRunAsync(ctx workflow.Context, input *glue.BatchStopJobRunInput) *GlueBatchStopJobRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchStopJobRun", input)
	return &GlueBatchStopJobRunFuture{Future: future}
}

func (a *GlueStub) BatchUpdatePartition(ctx workflow.Context, input *glue.BatchUpdatePartitionInput) (*glue.BatchUpdatePartitionOutput, error) {
	var output glue.BatchUpdatePartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.BatchUpdatePartition", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) BatchUpdatePartitionAsync(ctx workflow.Context, input *glue.BatchUpdatePartitionInput) *GlueBatchUpdatePartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.BatchUpdatePartition", input)
	return &GlueBatchUpdatePartitionFuture{Future: future}
}

func (a *GlueStub) CancelMLTaskRun(ctx workflow.Context, input *glue.CancelMLTaskRunInput) (*glue.CancelMLTaskRunOutput, error) {
	var output glue.CancelMLTaskRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CancelMLTaskRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CancelMLTaskRunAsync(ctx workflow.Context, input *glue.CancelMLTaskRunInput) *GlueCancelMLTaskRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CancelMLTaskRun", input)
	return &GlueCancelMLTaskRunFuture{Future: future}
}

func (a *GlueStub) CreateClassifier(ctx workflow.Context, input *glue.CreateClassifierInput) (*glue.CreateClassifierOutput, error) {
	var output glue.CreateClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateClassifierAsync(ctx workflow.Context, input *glue.CreateClassifierInput) *GlueCreateClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateClassifier", input)
	return &GlueCreateClassifierFuture{Future: future}
}

func (a *GlueStub) CreateConnection(ctx workflow.Context, input *glue.CreateConnectionInput) (*glue.CreateConnectionOutput, error) {
	var output glue.CreateConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateConnectionAsync(ctx workflow.Context, input *glue.CreateConnectionInput) *GlueCreateConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateConnection", input)
	return &GlueCreateConnectionFuture{Future: future}
}

func (a *GlueStub) CreateCrawler(ctx workflow.Context, input *glue.CreateCrawlerInput) (*glue.CreateCrawlerOutput, error) {
	var output glue.CreateCrawlerOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateCrawler", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateCrawlerAsync(ctx workflow.Context, input *glue.CreateCrawlerInput) *GlueCreateCrawlerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateCrawler", input)
	return &GlueCreateCrawlerFuture{Future: future}
}

func (a *GlueStub) CreateDatabase(ctx workflow.Context, input *glue.CreateDatabaseInput) (*glue.CreateDatabaseOutput, error) {
	var output glue.CreateDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateDatabaseAsync(ctx workflow.Context, input *glue.CreateDatabaseInput) *GlueCreateDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateDatabase", input)
	return &GlueCreateDatabaseFuture{Future: future}
}

func (a *GlueStub) CreateDevEndpoint(ctx workflow.Context, input *glue.CreateDevEndpointInput) (*glue.CreateDevEndpointOutput, error) {
	var output glue.CreateDevEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateDevEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateDevEndpointAsync(ctx workflow.Context, input *glue.CreateDevEndpointInput) *GlueCreateDevEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateDevEndpoint", input)
	return &GlueCreateDevEndpointFuture{Future: future}
}

func (a *GlueStub) CreateJob(ctx workflow.Context, input *glue.CreateJobInput) (*glue.CreateJobOutput, error) {
	var output glue.CreateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateJobAsync(ctx workflow.Context, input *glue.CreateJobInput) *GlueCreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateJob", input)
	return &GlueCreateJobFuture{Future: future}
}

func (a *GlueStub) CreateMLTransform(ctx workflow.Context, input *glue.CreateMLTransformInput) (*glue.CreateMLTransformOutput, error) {
	var output glue.CreateMLTransformOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateMLTransform", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateMLTransformAsync(ctx workflow.Context, input *glue.CreateMLTransformInput) *GlueCreateMLTransformFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateMLTransform", input)
	return &GlueCreateMLTransformFuture{Future: future}
}

func (a *GlueStub) CreatePartition(ctx workflow.Context, input *glue.CreatePartitionInput) (*glue.CreatePartitionOutput, error) {
	var output glue.CreatePartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreatePartition", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreatePartitionAsync(ctx workflow.Context, input *glue.CreatePartitionInput) *GlueCreatePartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreatePartition", input)
	return &GlueCreatePartitionFuture{Future: future}
}

func (a *GlueStub) CreateScript(ctx workflow.Context, input *glue.CreateScriptInput) (*glue.CreateScriptOutput, error) {
	var output glue.CreateScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateScript", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateScriptAsync(ctx workflow.Context, input *glue.CreateScriptInput) *GlueCreateScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateScript", input)
	return &GlueCreateScriptFuture{Future: future}
}

func (a *GlueStub) CreateSecurityConfiguration(ctx workflow.Context, input *glue.CreateSecurityConfigurationInput) (*glue.CreateSecurityConfigurationOutput, error) {
	var output glue.CreateSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateSecurityConfigurationAsync(ctx workflow.Context, input *glue.CreateSecurityConfigurationInput) *GlueCreateSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateSecurityConfiguration", input)
	return &GlueCreateSecurityConfigurationFuture{Future: future}
}

func (a *GlueStub) CreateTable(ctx workflow.Context, input *glue.CreateTableInput) (*glue.CreateTableOutput, error) {
	var output glue.CreateTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateTable", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateTableAsync(ctx workflow.Context, input *glue.CreateTableInput) *GlueCreateTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateTable", input)
	return &GlueCreateTableFuture{Future: future}
}

func (a *GlueStub) CreateTrigger(ctx workflow.Context, input *glue.CreateTriggerInput) (*glue.CreateTriggerOutput, error) {
	var output glue.CreateTriggerOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateTrigger", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateTriggerAsync(ctx workflow.Context, input *glue.CreateTriggerInput) *GlueCreateTriggerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateTrigger", input)
	return &GlueCreateTriggerFuture{Future: future}
}

func (a *GlueStub) CreateUserDefinedFunction(ctx workflow.Context, input *glue.CreateUserDefinedFunctionInput) (*glue.CreateUserDefinedFunctionOutput, error) {
	var output glue.CreateUserDefinedFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateUserDefinedFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateUserDefinedFunctionAsync(ctx workflow.Context, input *glue.CreateUserDefinedFunctionInput) *GlueCreateUserDefinedFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateUserDefinedFunction", input)
	return &GlueCreateUserDefinedFunctionFuture{Future: future}
}

func (a *GlueStub) CreateWorkflow(ctx workflow.Context, input *glue.CreateWorkflowInput) (*glue.CreateWorkflowOutput, error) {
	var output glue.CreateWorkflowOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.CreateWorkflow", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) CreateWorkflowAsync(ctx workflow.Context, input *glue.CreateWorkflowInput) *GlueCreateWorkflowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.CreateWorkflow", input)
	return &GlueCreateWorkflowFuture{Future: future}
}

func (a *GlueStub) DeleteClassifier(ctx workflow.Context, input *glue.DeleteClassifierInput) (*glue.DeleteClassifierOutput, error) {
	var output glue.DeleteClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteClassifierAsync(ctx workflow.Context, input *glue.DeleteClassifierInput) *GlueDeleteClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteClassifier", input)
	return &GlueDeleteClassifierFuture{Future: future}
}

func (a *GlueStub) DeleteColumnStatisticsForPartition(ctx workflow.Context, input *glue.DeleteColumnStatisticsForPartitionInput) (*glue.DeleteColumnStatisticsForPartitionOutput, error) {
	var output glue.DeleteColumnStatisticsForPartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteColumnStatisticsForPartition", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteColumnStatisticsForPartitionAsync(ctx workflow.Context, input *glue.DeleteColumnStatisticsForPartitionInput) *GlueDeleteColumnStatisticsForPartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteColumnStatisticsForPartition", input)
	return &GlueDeleteColumnStatisticsForPartitionFuture{Future: future}
}

func (a *GlueStub) DeleteColumnStatisticsForTable(ctx workflow.Context, input *glue.DeleteColumnStatisticsForTableInput) (*glue.DeleteColumnStatisticsForTableOutput, error) {
	var output glue.DeleteColumnStatisticsForTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteColumnStatisticsForTable", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteColumnStatisticsForTableAsync(ctx workflow.Context, input *glue.DeleteColumnStatisticsForTableInput) *GlueDeleteColumnStatisticsForTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteColumnStatisticsForTable", input)
	return &GlueDeleteColumnStatisticsForTableFuture{Future: future}
}

func (a *GlueStub) DeleteConnection(ctx workflow.Context, input *glue.DeleteConnectionInput) (*glue.DeleteConnectionOutput, error) {
	var output glue.DeleteConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteConnectionAsync(ctx workflow.Context, input *glue.DeleteConnectionInput) *GlueDeleteConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteConnection", input)
	return &GlueDeleteConnectionFuture{Future: future}
}

func (a *GlueStub) DeleteCrawler(ctx workflow.Context, input *glue.DeleteCrawlerInput) (*glue.DeleteCrawlerOutput, error) {
	var output glue.DeleteCrawlerOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteCrawler", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteCrawlerAsync(ctx workflow.Context, input *glue.DeleteCrawlerInput) *GlueDeleteCrawlerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteCrawler", input)
	return &GlueDeleteCrawlerFuture{Future: future}
}

func (a *GlueStub) DeleteDatabase(ctx workflow.Context, input *glue.DeleteDatabaseInput) (*glue.DeleteDatabaseOutput, error) {
	var output glue.DeleteDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteDatabaseAsync(ctx workflow.Context, input *glue.DeleteDatabaseInput) *GlueDeleteDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteDatabase", input)
	return &GlueDeleteDatabaseFuture{Future: future}
}

func (a *GlueStub) DeleteDevEndpoint(ctx workflow.Context, input *glue.DeleteDevEndpointInput) (*glue.DeleteDevEndpointOutput, error) {
	var output glue.DeleteDevEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteDevEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteDevEndpointAsync(ctx workflow.Context, input *glue.DeleteDevEndpointInput) *GlueDeleteDevEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteDevEndpoint", input)
	return &GlueDeleteDevEndpointFuture{Future: future}
}

func (a *GlueStub) DeleteJob(ctx workflow.Context, input *glue.DeleteJobInput) (*glue.DeleteJobOutput, error) {
	var output glue.DeleteJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteJob", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteJobAsync(ctx workflow.Context, input *glue.DeleteJobInput) *GlueDeleteJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteJob", input)
	return &GlueDeleteJobFuture{Future: future}
}

func (a *GlueStub) DeleteMLTransform(ctx workflow.Context, input *glue.DeleteMLTransformInput) (*glue.DeleteMLTransformOutput, error) {
	var output glue.DeleteMLTransformOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteMLTransform", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteMLTransformAsync(ctx workflow.Context, input *glue.DeleteMLTransformInput) *GlueDeleteMLTransformFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteMLTransform", input)
	return &GlueDeleteMLTransformFuture{Future: future}
}

func (a *GlueStub) DeletePartition(ctx workflow.Context, input *glue.DeletePartitionInput) (*glue.DeletePartitionOutput, error) {
	var output glue.DeletePartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeletePartition", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeletePartitionAsync(ctx workflow.Context, input *glue.DeletePartitionInput) *GlueDeletePartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeletePartition", input)
	return &GlueDeletePartitionFuture{Future: future}
}

func (a *GlueStub) DeleteResourcePolicy(ctx workflow.Context, input *glue.DeleteResourcePolicyInput) (*glue.DeleteResourcePolicyOutput, error) {
	var output glue.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteResourcePolicyAsync(ctx workflow.Context, input *glue.DeleteResourcePolicyInput) *GlueDeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteResourcePolicy", input)
	return &GlueDeleteResourcePolicyFuture{Future: future}
}

func (a *GlueStub) DeleteSecurityConfiguration(ctx workflow.Context, input *glue.DeleteSecurityConfigurationInput) (*glue.DeleteSecurityConfigurationOutput, error) {
	var output glue.DeleteSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteSecurityConfigurationAsync(ctx workflow.Context, input *glue.DeleteSecurityConfigurationInput) *GlueDeleteSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteSecurityConfiguration", input)
	return &GlueDeleteSecurityConfigurationFuture{Future: future}
}

func (a *GlueStub) DeleteTable(ctx workflow.Context, input *glue.DeleteTableInput) (*glue.DeleteTableOutput, error) {
	var output glue.DeleteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteTableAsync(ctx workflow.Context, input *glue.DeleteTableInput) *GlueDeleteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteTable", input)
	return &GlueDeleteTableFuture{Future: future}
}

func (a *GlueStub) DeleteTableVersion(ctx workflow.Context, input *glue.DeleteTableVersionInput) (*glue.DeleteTableVersionOutput, error) {
	var output glue.DeleteTableVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteTableVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteTableVersionAsync(ctx workflow.Context, input *glue.DeleteTableVersionInput) *GlueDeleteTableVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteTableVersion", input)
	return &GlueDeleteTableVersionFuture{Future: future}
}

func (a *GlueStub) DeleteTrigger(ctx workflow.Context, input *glue.DeleteTriggerInput) (*glue.DeleteTriggerOutput, error) {
	var output glue.DeleteTriggerOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteTrigger", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteTriggerAsync(ctx workflow.Context, input *glue.DeleteTriggerInput) *GlueDeleteTriggerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteTrigger", input)
	return &GlueDeleteTriggerFuture{Future: future}
}

func (a *GlueStub) DeleteUserDefinedFunction(ctx workflow.Context, input *glue.DeleteUserDefinedFunctionInput) (*glue.DeleteUserDefinedFunctionOutput, error) {
	var output glue.DeleteUserDefinedFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteUserDefinedFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteUserDefinedFunctionAsync(ctx workflow.Context, input *glue.DeleteUserDefinedFunctionInput) *GlueDeleteUserDefinedFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteUserDefinedFunction", input)
	return &GlueDeleteUserDefinedFunctionFuture{Future: future}
}

func (a *GlueStub) DeleteWorkflow(ctx workflow.Context, input *glue.DeleteWorkflowInput) (*glue.DeleteWorkflowOutput, error) {
	var output glue.DeleteWorkflowOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.DeleteWorkflow", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) DeleteWorkflowAsync(ctx workflow.Context, input *glue.DeleteWorkflowInput) *GlueDeleteWorkflowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.DeleteWorkflow", input)
	return &GlueDeleteWorkflowFuture{Future: future}
}

func (a *GlueStub) GetCatalogImportStatus(ctx workflow.Context, input *glue.GetCatalogImportStatusInput) (*glue.GetCatalogImportStatusOutput, error) {
	var output glue.GetCatalogImportStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetCatalogImportStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetCatalogImportStatusAsync(ctx workflow.Context, input *glue.GetCatalogImportStatusInput) *GlueGetCatalogImportStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetCatalogImportStatus", input)
	return &GlueGetCatalogImportStatusFuture{Future: future}
}

func (a *GlueStub) GetClassifier(ctx workflow.Context, input *glue.GetClassifierInput) (*glue.GetClassifierOutput, error) {
	var output glue.GetClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetClassifierAsync(ctx workflow.Context, input *glue.GetClassifierInput) *GlueGetClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetClassifier", input)
	return &GlueGetClassifierFuture{Future: future}
}

func (a *GlueStub) GetClassifiers(ctx workflow.Context, input *glue.GetClassifiersInput) (*glue.GetClassifiersOutput, error) {
	var output glue.GetClassifiersOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetClassifiers", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetClassifiersAsync(ctx workflow.Context, input *glue.GetClassifiersInput) *GlueGetClassifiersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetClassifiers", input)
	return &GlueGetClassifiersFuture{Future: future}
}

func (a *GlueStub) GetColumnStatisticsForPartition(ctx workflow.Context, input *glue.GetColumnStatisticsForPartitionInput) (*glue.GetColumnStatisticsForPartitionOutput, error) {
	var output glue.GetColumnStatisticsForPartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetColumnStatisticsForPartition", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetColumnStatisticsForPartitionAsync(ctx workflow.Context, input *glue.GetColumnStatisticsForPartitionInput) *GlueGetColumnStatisticsForPartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetColumnStatisticsForPartition", input)
	return &GlueGetColumnStatisticsForPartitionFuture{Future: future}
}

func (a *GlueStub) GetColumnStatisticsForTable(ctx workflow.Context, input *glue.GetColumnStatisticsForTableInput) (*glue.GetColumnStatisticsForTableOutput, error) {
	var output glue.GetColumnStatisticsForTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetColumnStatisticsForTable", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetColumnStatisticsForTableAsync(ctx workflow.Context, input *glue.GetColumnStatisticsForTableInput) *GlueGetColumnStatisticsForTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetColumnStatisticsForTable", input)
	return &GlueGetColumnStatisticsForTableFuture{Future: future}
}

func (a *GlueStub) GetConnection(ctx workflow.Context, input *glue.GetConnectionInput) (*glue.GetConnectionOutput, error) {
	var output glue.GetConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetConnectionAsync(ctx workflow.Context, input *glue.GetConnectionInput) *GlueGetConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetConnection", input)
	return &GlueGetConnectionFuture{Future: future}
}

func (a *GlueStub) GetConnections(ctx workflow.Context, input *glue.GetConnectionsInput) (*glue.GetConnectionsOutput, error) {
	var output glue.GetConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetConnectionsAsync(ctx workflow.Context, input *glue.GetConnectionsInput) *GlueGetConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetConnections", input)
	return &GlueGetConnectionsFuture{Future: future}
}

func (a *GlueStub) GetCrawler(ctx workflow.Context, input *glue.GetCrawlerInput) (*glue.GetCrawlerOutput, error) {
	var output glue.GetCrawlerOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetCrawler", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetCrawlerAsync(ctx workflow.Context, input *glue.GetCrawlerInput) *GlueGetCrawlerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetCrawler", input)
	return &GlueGetCrawlerFuture{Future: future}
}

func (a *GlueStub) GetCrawlerMetrics(ctx workflow.Context, input *glue.GetCrawlerMetricsInput) (*glue.GetCrawlerMetricsOutput, error) {
	var output glue.GetCrawlerMetricsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetCrawlerMetrics", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetCrawlerMetricsAsync(ctx workflow.Context, input *glue.GetCrawlerMetricsInput) *GlueGetCrawlerMetricsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetCrawlerMetrics", input)
	return &GlueGetCrawlerMetricsFuture{Future: future}
}

func (a *GlueStub) GetCrawlers(ctx workflow.Context, input *glue.GetCrawlersInput) (*glue.GetCrawlersOutput, error) {
	var output glue.GetCrawlersOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetCrawlers", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetCrawlersAsync(ctx workflow.Context, input *glue.GetCrawlersInput) *GlueGetCrawlersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetCrawlers", input)
	return &GlueGetCrawlersFuture{Future: future}
}

func (a *GlueStub) GetDataCatalogEncryptionSettings(ctx workflow.Context, input *glue.GetDataCatalogEncryptionSettingsInput) (*glue.GetDataCatalogEncryptionSettingsOutput, error) {
	var output glue.GetDataCatalogEncryptionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetDataCatalogEncryptionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetDataCatalogEncryptionSettingsAsync(ctx workflow.Context, input *glue.GetDataCatalogEncryptionSettingsInput) *GlueGetDataCatalogEncryptionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetDataCatalogEncryptionSettings", input)
	return &GlueGetDataCatalogEncryptionSettingsFuture{Future: future}
}

func (a *GlueStub) GetDatabase(ctx workflow.Context, input *glue.GetDatabaseInput) (*glue.GetDatabaseOutput, error) {
	var output glue.GetDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetDatabaseAsync(ctx workflow.Context, input *glue.GetDatabaseInput) *GlueGetDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetDatabase", input)
	return &GlueGetDatabaseFuture{Future: future}
}

func (a *GlueStub) GetDatabases(ctx workflow.Context, input *glue.GetDatabasesInput) (*glue.GetDatabasesOutput, error) {
	var output glue.GetDatabasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetDatabases", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetDatabasesAsync(ctx workflow.Context, input *glue.GetDatabasesInput) *GlueGetDatabasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetDatabases", input)
	return &GlueGetDatabasesFuture{Future: future}
}

func (a *GlueStub) GetDataflowGraph(ctx workflow.Context, input *glue.GetDataflowGraphInput) (*glue.GetDataflowGraphOutput, error) {
	var output glue.GetDataflowGraphOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetDataflowGraph", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetDataflowGraphAsync(ctx workflow.Context, input *glue.GetDataflowGraphInput) *GlueGetDataflowGraphFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetDataflowGraph", input)
	return &GlueGetDataflowGraphFuture{Future: future}
}

func (a *GlueStub) GetDevEndpoint(ctx workflow.Context, input *glue.GetDevEndpointInput) (*glue.GetDevEndpointOutput, error) {
	var output glue.GetDevEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetDevEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetDevEndpointAsync(ctx workflow.Context, input *glue.GetDevEndpointInput) *GlueGetDevEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetDevEndpoint", input)
	return &GlueGetDevEndpointFuture{Future: future}
}

func (a *GlueStub) GetDevEndpoints(ctx workflow.Context, input *glue.GetDevEndpointsInput) (*glue.GetDevEndpointsOutput, error) {
	var output glue.GetDevEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetDevEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetDevEndpointsAsync(ctx workflow.Context, input *glue.GetDevEndpointsInput) *GlueGetDevEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetDevEndpoints", input)
	return &GlueGetDevEndpointsFuture{Future: future}
}

func (a *GlueStub) GetJob(ctx workflow.Context, input *glue.GetJobInput) (*glue.GetJobOutput, error) {
	var output glue.GetJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetJob", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetJobAsync(ctx workflow.Context, input *glue.GetJobInput) *GlueGetJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetJob", input)
	return &GlueGetJobFuture{Future: future}
}

func (a *GlueStub) GetJobBookmark(ctx workflow.Context, input *glue.GetJobBookmarkInput) (*glue.GetJobBookmarkOutput, error) {
	var output glue.GetJobBookmarkOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetJobBookmark", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetJobBookmarkAsync(ctx workflow.Context, input *glue.GetJobBookmarkInput) *GlueGetJobBookmarkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetJobBookmark", input)
	return &GlueGetJobBookmarkFuture{Future: future}
}

func (a *GlueStub) GetJobRun(ctx workflow.Context, input *glue.GetJobRunInput) (*glue.GetJobRunOutput, error) {
	var output glue.GetJobRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetJobRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetJobRunAsync(ctx workflow.Context, input *glue.GetJobRunInput) *GlueGetJobRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetJobRun", input)
	return &GlueGetJobRunFuture{Future: future}
}

func (a *GlueStub) GetJobRuns(ctx workflow.Context, input *glue.GetJobRunsInput) (*glue.GetJobRunsOutput, error) {
	var output glue.GetJobRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetJobRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetJobRunsAsync(ctx workflow.Context, input *glue.GetJobRunsInput) *GlueGetJobRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetJobRuns", input)
	return &GlueGetJobRunsFuture{Future: future}
}

func (a *GlueStub) GetJobs(ctx workflow.Context, input *glue.GetJobsInput) (*glue.GetJobsOutput, error) {
	var output glue.GetJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetJobsAsync(ctx workflow.Context, input *glue.GetJobsInput) *GlueGetJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetJobs", input)
	return &GlueGetJobsFuture{Future: future}
}

func (a *GlueStub) GetMLTaskRun(ctx workflow.Context, input *glue.GetMLTaskRunInput) (*glue.GetMLTaskRunOutput, error) {
	var output glue.GetMLTaskRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetMLTaskRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetMLTaskRunAsync(ctx workflow.Context, input *glue.GetMLTaskRunInput) *GlueGetMLTaskRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetMLTaskRun", input)
	return &GlueGetMLTaskRunFuture{Future: future}
}

func (a *GlueStub) GetMLTaskRuns(ctx workflow.Context, input *glue.GetMLTaskRunsInput) (*glue.GetMLTaskRunsOutput, error) {
	var output glue.GetMLTaskRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetMLTaskRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetMLTaskRunsAsync(ctx workflow.Context, input *glue.GetMLTaskRunsInput) *GlueGetMLTaskRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetMLTaskRuns", input)
	return &GlueGetMLTaskRunsFuture{Future: future}
}

func (a *GlueStub) GetMLTransform(ctx workflow.Context, input *glue.GetMLTransformInput) (*glue.GetMLTransformOutput, error) {
	var output glue.GetMLTransformOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetMLTransform", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetMLTransformAsync(ctx workflow.Context, input *glue.GetMLTransformInput) *GlueGetMLTransformFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetMLTransform", input)
	return &GlueGetMLTransformFuture{Future: future}
}

func (a *GlueStub) GetMLTransforms(ctx workflow.Context, input *glue.GetMLTransformsInput) (*glue.GetMLTransformsOutput, error) {
	var output glue.GetMLTransformsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetMLTransforms", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetMLTransformsAsync(ctx workflow.Context, input *glue.GetMLTransformsInput) *GlueGetMLTransformsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetMLTransforms", input)
	return &GlueGetMLTransformsFuture{Future: future}
}

func (a *GlueStub) GetMapping(ctx workflow.Context, input *glue.GetMappingInput) (*glue.GetMappingOutput, error) {
	var output glue.GetMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetMappingAsync(ctx workflow.Context, input *glue.GetMappingInput) *GlueGetMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetMapping", input)
	return &GlueGetMappingFuture{Future: future}
}

func (a *GlueStub) GetPartition(ctx workflow.Context, input *glue.GetPartitionInput) (*glue.GetPartitionOutput, error) {
	var output glue.GetPartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetPartition", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetPartitionAsync(ctx workflow.Context, input *glue.GetPartitionInput) *GlueGetPartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetPartition", input)
	return &GlueGetPartitionFuture{Future: future}
}

func (a *GlueStub) GetPartitionIndexes(ctx workflow.Context, input *glue.GetPartitionIndexesInput) (*glue.GetPartitionIndexesOutput, error) {
	var output glue.GetPartitionIndexesOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetPartitionIndexes", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetPartitionIndexesAsync(ctx workflow.Context, input *glue.GetPartitionIndexesInput) *GlueGetPartitionIndexesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetPartitionIndexes", input)
	return &GlueGetPartitionIndexesFuture{Future: future}
}

func (a *GlueStub) GetPartitions(ctx workflow.Context, input *glue.GetPartitionsInput) (*glue.GetPartitionsOutput, error) {
	var output glue.GetPartitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetPartitions", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetPartitionsAsync(ctx workflow.Context, input *glue.GetPartitionsInput) *GlueGetPartitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetPartitions", input)
	return &GlueGetPartitionsFuture{Future: future}
}

func (a *GlueStub) GetPlan(ctx workflow.Context, input *glue.GetPlanInput) (*glue.GetPlanOutput, error) {
	var output glue.GetPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetPlanAsync(ctx workflow.Context, input *glue.GetPlanInput) *GlueGetPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetPlan", input)
	return &GlueGetPlanFuture{Future: future}
}

func (a *GlueStub) GetResourcePolicies(ctx workflow.Context, input *glue.GetResourcePoliciesInput) (*glue.GetResourcePoliciesOutput, error) {
	var output glue.GetResourcePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetResourcePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetResourcePoliciesAsync(ctx workflow.Context, input *glue.GetResourcePoliciesInput) *GlueGetResourcePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetResourcePolicies", input)
	return &GlueGetResourcePoliciesFuture{Future: future}
}

func (a *GlueStub) GetResourcePolicy(ctx workflow.Context, input *glue.GetResourcePolicyInput) (*glue.GetResourcePolicyOutput, error) {
	var output glue.GetResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetResourcePolicyAsync(ctx workflow.Context, input *glue.GetResourcePolicyInput) *GlueGetResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetResourcePolicy", input)
	return &GlueGetResourcePolicyFuture{Future: future}
}

func (a *GlueStub) GetSecurityConfiguration(ctx workflow.Context, input *glue.GetSecurityConfigurationInput) (*glue.GetSecurityConfigurationOutput, error) {
	var output glue.GetSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetSecurityConfigurationAsync(ctx workflow.Context, input *glue.GetSecurityConfigurationInput) *GlueGetSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetSecurityConfiguration", input)
	return &GlueGetSecurityConfigurationFuture{Future: future}
}

func (a *GlueStub) GetSecurityConfigurations(ctx workflow.Context, input *glue.GetSecurityConfigurationsInput) (*glue.GetSecurityConfigurationsOutput, error) {
	var output glue.GetSecurityConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetSecurityConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetSecurityConfigurationsAsync(ctx workflow.Context, input *glue.GetSecurityConfigurationsInput) *GlueGetSecurityConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetSecurityConfigurations", input)
	return &GlueGetSecurityConfigurationsFuture{Future: future}
}

func (a *GlueStub) GetTable(ctx workflow.Context, input *glue.GetTableInput) (*glue.GetTableOutput, error) {
	var output glue.GetTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetTable", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetTableAsync(ctx workflow.Context, input *glue.GetTableInput) *GlueGetTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetTable", input)
	return &GlueGetTableFuture{Future: future}
}

func (a *GlueStub) GetTableVersion(ctx workflow.Context, input *glue.GetTableVersionInput) (*glue.GetTableVersionOutput, error) {
	var output glue.GetTableVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetTableVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetTableVersionAsync(ctx workflow.Context, input *glue.GetTableVersionInput) *GlueGetTableVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetTableVersion", input)
	return &GlueGetTableVersionFuture{Future: future}
}

func (a *GlueStub) GetTableVersions(ctx workflow.Context, input *glue.GetTableVersionsInput) (*glue.GetTableVersionsOutput, error) {
	var output glue.GetTableVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetTableVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetTableVersionsAsync(ctx workflow.Context, input *glue.GetTableVersionsInput) *GlueGetTableVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetTableVersions", input)
	return &GlueGetTableVersionsFuture{Future: future}
}

func (a *GlueStub) GetTables(ctx workflow.Context, input *glue.GetTablesInput) (*glue.GetTablesOutput, error) {
	var output glue.GetTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetTables", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetTablesAsync(ctx workflow.Context, input *glue.GetTablesInput) *GlueGetTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetTables", input)
	return &GlueGetTablesFuture{Future: future}
}

func (a *GlueStub) GetTags(ctx workflow.Context, input *glue.GetTagsInput) (*glue.GetTagsOutput, error) {
	var output glue.GetTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetTags", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetTagsAsync(ctx workflow.Context, input *glue.GetTagsInput) *GlueGetTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetTags", input)
	return &GlueGetTagsFuture{Future: future}
}

func (a *GlueStub) GetTrigger(ctx workflow.Context, input *glue.GetTriggerInput) (*glue.GetTriggerOutput, error) {
	var output glue.GetTriggerOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetTrigger", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetTriggerAsync(ctx workflow.Context, input *glue.GetTriggerInput) *GlueGetTriggerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetTrigger", input)
	return &GlueGetTriggerFuture{Future: future}
}

func (a *GlueStub) GetTriggers(ctx workflow.Context, input *glue.GetTriggersInput) (*glue.GetTriggersOutput, error) {
	var output glue.GetTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetTriggersAsync(ctx workflow.Context, input *glue.GetTriggersInput) *GlueGetTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetTriggers", input)
	return &GlueGetTriggersFuture{Future: future}
}

func (a *GlueStub) GetUserDefinedFunction(ctx workflow.Context, input *glue.GetUserDefinedFunctionInput) (*glue.GetUserDefinedFunctionOutput, error) {
	var output glue.GetUserDefinedFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetUserDefinedFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetUserDefinedFunctionAsync(ctx workflow.Context, input *glue.GetUserDefinedFunctionInput) *GlueGetUserDefinedFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetUserDefinedFunction", input)
	return &GlueGetUserDefinedFunctionFuture{Future: future}
}

func (a *GlueStub) GetUserDefinedFunctions(ctx workflow.Context, input *glue.GetUserDefinedFunctionsInput) (*glue.GetUserDefinedFunctionsOutput, error) {
	var output glue.GetUserDefinedFunctionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetUserDefinedFunctions", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetUserDefinedFunctionsAsync(ctx workflow.Context, input *glue.GetUserDefinedFunctionsInput) *GlueGetUserDefinedFunctionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetUserDefinedFunctions", input)
	return &GlueGetUserDefinedFunctionsFuture{Future: future}
}

func (a *GlueStub) GetWorkflow(ctx workflow.Context, input *glue.GetWorkflowInput) (*glue.GetWorkflowOutput, error) {
	var output glue.GetWorkflowOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetWorkflow", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetWorkflowAsync(ctx workflow.Context, input *glue.GetWorkflowInput) *GlueGetWorkflowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetWorkflow", input)
	return &GlueGetWorkflowFuture{Future: future}
}

func (a *GlueStub) GetWorkflowRun(ctx workflow.Context, input *glue.GetWorkflowRunInput) (*glue.GetWorkflowRunOutput, error) {
	var output glue.GetWorkflowRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetWorkflowRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetWorkflowRunAsync(ctx workflow.Context, input *glue.GetWorkflowRunInput) *GlueGetWorkflowRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetWorkflowRun", input)
	return &GlueGetWorkflowRunFuture{Future: future}
}

func (a *GlueStub) GetWorkflowRunProperties(ctx workflow.Context, input *glue.GetWorkflowRunPropertiesInput) (*glue.GetWorkflowRunPropertiesOutput, error) {
	var output glue.GetWorkflowRunPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetWorkflowRunProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetWorkflowRunPropertiesAsync(ctx workflow.Context, input *glue.GetWorkflowRunPropertiesInput) *GlueGetWorkflowRunPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetWorkflowRunProperties", input)
	return &GlueGetWorkflowRunPropertiesFuture{Future: future}
}

func (a *GlueStub) GetWorkflowRuns(ctx workflow.Context, input *glue.GetWorkflowRunsInput) (*glue.GetWorkflowRunsOutput, error) {
	var output glue.GetWorkflowRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.GetWorkflowRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) GetWorkflowRunsAsync(ctx workflow.Context, input *glue.GetWorkflowRunsInput) *GlueGetWorkflowRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.GetWorkflowRuns", input)
	return &GlueGetWorkflowRunsFuture{Future: future}
}

func (a *GlueStub) ImportCatalogToGlue(ctx workflow.Context, input *glue.ImportCatalogToGlueInput) (*glue.ImportCatalogToGlueOutput, error) {
	var output glue.ImportCatalogToGlueOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.ImportCatalogToGlue", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) ImportCatalogToGlueAsync(ctx workflow.Context, input *glue.ImportCatalogToGlueInput) *GlueImportCatalogToGlueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.ImportCatalogToGlue", input)
	return &GlueImportCatalogToGlueFuture{Future: future}
}

func (a *GlueStub) ListCrawlers(ctx workflow.Context, input *glue.ListCrawlersInput) (*glue.ListCrawlersOutput, error) {
	var output glue.ListCrawlersOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.ListCrawlers", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) ListCrawlersAsync(ctx workflow.Context, input *glue.ListCrawlersInput) *GlueListCrawlersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.ListCrawlers", input)
	return &GlueListCrawlersFuture{Future: future}
}

func (a *GlueStub) ListDevEndpoints(ctx workflow.Context, input *glue.ListDevEndpointsInput) (*glue.ListDevEndpointsOutput, error) {
	var output glue.ListDevEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.ListDevEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) ListDevEndpointsAsync(ctx workflow.Context, input *glue.ListDevEndpointsInput) *GlueListDevEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.ListDevEndpoints", input)
	return &GlueListDevEndpointsFuture{Future: future}
}

func (a *GlueStub) ListJobs(ctx workflow.Context, input *glue.ListJobsInput) (*glue.ListJobsOutput, error) {
	var output glue.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) ListJobsAsync(ctx workflow.Context, input *glue.ListJobsInput) *GlueListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.ListJobs", input)
	return &GlueListJobsFuture{Future: future}
}

func (a *GlueStub) ListMLTransforms(ctx workflow.Context, input *glue.ListMLTransformsInput) (*glue.ListMLTransformsOutput, error) {
	var output glue.ListMLTransformsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.ListMLTransforms", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) ListMLTransformsAsync(ctx workflow.Context, input *glue.ListMLTransformsInput) *GlueListMLTransformsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.ListMLTransforms", input)
	return &GlueListMLTransformsFuture{Future: future}
}

func (a *GlueStub) ListTriggers(ctx workflow.Context, input *glue.ListTriggersInput) (*glue.ListTriggersOutput, error) {
	var output glue.ListTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.ListTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) ListTriggersAsync(ctx workflow.Context, input *glue.ListTriggersInput) *GlueListTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.ListTriggers", input)
	return &GlueListTriggersFuture{Future: future}
}

func (a *GlueStub) ListWorkflows(ctx workflow.Context, input *glue.ListWorkflowsInput) (*glue.ListWorkflowsOutput, error) {
	var output glue.ListWorkflowsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.ListWorkflows", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) ListWorkflowsAsync(ctx workflow.Context, input *glue.ListWorkflowsInput) *GlueListWorkflowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.ListWorkflows", input)
	return &GlueListWorkflowsFuture{Future: future}
}

func (a *GlueStub) PutDataCatalogEncryptionSettings(ctx workflow.Context, input *glue.PutDataCatalogEncryptionSettingsInput) (*glue.PutDataCatalogEncryptionSettingsOutput, error) {
	var output glue.PutDataCatalogEncryptionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.PutDataCatalogEncryptionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) PutDataCatalogEncryptionSettingsAsync(ctx workflow.Context, input *glue.PutDataCatalogEncryptionSettingsInput) *GluePutDataCatalogEncryptionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.PutDataCatalogEncryptionSettings", input)
	return &GluePutDataCatalogEncryptionSettingsFuture{Future: future}
}

func (a *GlueStub) PutResourcePolicy(ctx workflow.Context, input *glue.PutResourcePolicyInput) (*glue.PutResourcePolicyOutput, error) {
	var output glue.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) PutResourcePolicyAsync(ctx workflow.Context, input *glue.PutResourcePolicyInput) *GluePutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.PutResourcePolicy", input)
	return &GluePutResourcePolicyFuture{Future: future}
}

func (a *GlueStub) PutWorkflowRunProperties(ctx workflow.Context, input *glue.PutWorkflowRunPropertiesInput) (*glue.PutWorkflowRunPropertiesOutput, error) {
	var output glue.PutWorkflowRunPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.PutWorkflowRunProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) PutWorkflowRunPropertiesAsync(ctx workflow.Context, input *glue.PutWorkflowRunPropertiesInput) *GluePutWorkflowRunPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.PutWorkflowRunProperties", input)
	return &GluePutWorkflowRunPropertiesFuture{Future: future}
}

func (a *GlueStub) ResetJobBookmark(ctx workflow.Context, input *glue.ResetJobBookmarkInput) (*glue.ResetJobBookmarkOutput, error) {
	var output glue.ResetJobBookmarkOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.ResetJobBookmark", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) ResetJobBookmarkAsync(ctx workflow.Context, input *glue.ResetJobBookmarkInput) *GlueResetJobBookmarkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.ResetJobBookmark", input)
	return &GlueResetJobBookmarkFuture{Future: future}
}

func (a *GlueStub) ResumeWorkflowRun(ctx workflow.Context, input *glue.ResumeWorkflowRunInput) (*glue.ResumeWorkflowRunOutput, error) {
	var output glue.ResumeWorkflowRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.ResumeWorkflowRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) ResumeWorkflowRunAsync(ctx workflow.Context, input *glue.ResumeWorkflowRunInput) *GlueResumeWorkflowRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.ResumeWorkflowRun", input)
	return &GlueResumeWorkflowRunFuture{Future: future}
}

func (a *GlueStub) SearchTables(ctx workflow.Context, input *glue.SearchTablesInput) (*glue.SearchTablesOutput, error) {
	var output glue.SearchTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.SearchTables", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) SearchTablesAsync(ctx workflow.Context, input *glue.SearchTablesInput) *GlueSearchTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.SearchTables", input)
	return &GlueSearchTablesFuture{Future: future}
}

func (a *GlueStub) StartCrawler(ctx workflow.Context, input *glue.StartCrawlerInput) (*glue.StartCrawlerOutput, error) {
	var output glue.StartCrawlerOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StartCrawler", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StartCrawlerAsync(ctx workflow.Context, input *glue.StartCrawlerInput) *GlueStartCrawlerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StartCrawler", input)
	return &GlueStartCrawlerFuture{Future: future}
}

func (a *GlueStub) StartCrawlerSchedule(ctx workflow.Context, input *glue.StartCrawlerScheduleInput) (*glue.StartCrawlerScheduleOutput, error) {
	var output glue.StartCrawlerScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StartCrawlerSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StartCrawlerScheduleAsync(ctx workflow.Context, input *glue.StartCrawlerScheduleInput) *GlueStartCrawlerScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StartCrawlerSchedule", input)
	return &GlueStartCrawlerScheduleFuture{Future: future}
}

func (a *GlueStub) StartExportLabelsTaskRun(ctx workflow.Context, input *glue.StartExportLabelsTaskRunInput) (*glue.StartExportLabelsTaskRunOutput, error) {
	var output glue.StartExportLabelsTaskRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StartExportLabelsTaskRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StartExportLabelsTaskRunAsync(ctx workflow.Context, input *glue.StartExportLabelsTaskRunInput) *GlueStartExportLabelsTaskRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StartExportLabelsTaskRun", input)
	return &GlueStartExportLabelsTaskRunFuture{Future: future}
}

func (a *GlueStub) StartImportLabelsTaskRun(ctx workflow.Context, input *glue.StartImportLabelsTaskRunInput) (*glue.StartImportLabelsTaskRunOutput, error) {
	var output glue.StartImportLabelsTaskRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StartImportLabelsTaskRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StartImportLabelsTaskRunAsync(ctx workflow.Context, input *glue.StartImportLabelsTaskRunInput) *GlueStartImportLabelsTaskRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StartImportLabelsTaskRun", input)
	return &GlueStartImportLabelsTaskRunFuture{Future: future}
}

func (a *GlueStub) StartJobRun(ctx workflow.Context, input *glue.StartJobRunInput) (*glue.StartJobRunOutput, error) {
	var output glue.StartJobRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StartJobRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StartJobRunAsync(ctx workflow.Context, input *glue.StartJobRunInput) *GlueStartJobRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StartJobRun", input)
	return &GlueStartJobRunFuture{Future: future}
}

func (a *GlueStub) StartMLEvaluationTaskRun(ctx workflow.Context, input *glue.StartMLEvaluationTaskRunInput) (*glue.StartMLEvaluationTaskRunOutput, error) {
	var output glue.StartMLEvaluationTaskRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StartMLEvaluationTaskRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StartMLEvaluationTaskRunAsync(ctx workflow.Context, input *glue.StartMLEvaluationTaskRunInput) *GlueStartMLEvaluationTaskRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StartMLEvaluationTaskRun", input)
	return &GlueStartMLEvaluationTaskRunFuture{Future: future}
}

func (a *GlueStub) StartMLLabelingSetGenerationTaskRun(ctx workflow.Context, input *glue.StartMLLabelingSetGenerationTaskRunInput) (*glue.StartMLLabelingSetGenerationTaskRunOutput, error) {
	var output glue.StartMLLabelingSetGenerationTaskRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StartMLLabelingSetGenerationTaskRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StartMLLabelingSetGenerationTaskRunAsync(ctx workflow.Context, input *glue.StartMLLabelingSetGenerationTaskRunInput) *GlueStartMLLabelingSetGenerationTaskRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StartMLLabelingSetGenerationTaskRun", input)
	return &GlueStartMLLabelingSetGenerationTaskRunFuture{Future: future}
}

func (a *GlueStub) StartTrigger(ctx workflow.Context, input *glue.StartTriggerInput) (*glue.StartTriggerOutput, error) {
	var output glue.StartTriggerOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StartTrigger", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StartTriggerAsync(ctx workflow.Context, input *glue.StartTriggerInput) *GlueStartTriggerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StartTrigger", input)
	return &GlueStartTriggerFuture{Future: future}
}

func (a *GlueStub) StartWorkflowRun(ctx workflow.Context, input *glue.StartWorkflowRunInput) (*glue.StartWorkflowRunOutput, error) {
	var output glue.StartWorkflowRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StartWorkflowRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StartWorkflowRunAsync(ctx workflow.Context, input *glue.StartWorkflowRunInput) *GlueStartWorkflowRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StartWorkflowRun", input)
	return &GlueStartWorkflowRunFuture{Future: future}
}

func (a *GlueStub) StopCrawler(ctx workflow.Context, input *glue.StopCrawlerInput) (*glue.StopCrawlerOutput, error) {
	var output glue.StopCrawlerOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StopCrawler", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StopCrawlerAsync(ctx workflow.Context, input *glue.StopCrawlerInput) *GlueStopCrawlerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StopCrawler", input)
	return &GlueStopCrawlerFuture{Future: future}
}

func (a *GlueStub) StopCrawlerSchedule(ctx workflow.Context, input *glue.StopCrawlerScheduleInput) (*glue.StopCrawlerScheduleOutput, error) {
	var output glue.StopCrawlerScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StopCrawlerSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StopCrawlerScheduleAsync(ctx workflow.Context, input *glue.StopCrawlerScheduleInput) *GlueStopCrawlerScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StopCrawlerSchedule", input)
	return &GlueStopCrawlerScheduleFuture{Future: future}
}

func (a *GlueStub) StopTrigger(ctx workflow.Context, input *glue.StopTriggerInput) (*glue.StopTriggerOutput, error) {
	var output glue.StopTriggerOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StopTrigger", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StopTriggerAsync(ctx workflow.Context, input *glue.StopTriggerInput) *GlueStopTriggerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StopTrigger", input)
	return &GlueStopTriggerFuture{Future: future}
}

func (a *GlueStub) StopWorkflowRun(ctx workflow.Context, input *glue.StopWorkflowRunInput) (*glue.StopWorkflowRunOutput, error) {
	var output glue.StopWorkflowRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.StopWorkflowRun", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) StopWorkflowRunAsync(ctx workflow.Context, input *glue.StopWorkflowRunInput) *GlueStopWorkflowRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.StopWorkflowRun", input)
	return &GlueStopWorkflowRunFuture{Future: future}
}

func (a *GlueStub) TagResource(ctx workflow.Context, input *glue.TagResourceInput) (*glue.TagResourceOutput, error) {
	var output glue.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) TagResourceAsync(ctx workflow.Context, input *glue.TagResourceInput) *GlueTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.TagResource", input)
	return &GlueTagResourceFuture{Future: future}
}

func (a *GlueStub) UntagResource(ctx workflow.Context, input *glue.UntagResourceInput) (*glue.UntagResourceOutput, error) {
	var output glue.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UntagResourceAsync(ctx workflow.Context, input *glue.UntagResourceInput) *GlueUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UntagResource", input)
	return &GlueUntagResourceFuture{Future: future}
}

func (a *GlueStub) UpdateClassifier(ctx workflow.Context, input *glue.UpdateClassifierInput) (*glue.UpdateClassifierOutput, error) {
	var output glue.UpdateClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateClassifierAsync(ctx workflow.Context, input *glue.UpdateClassifierInput) *GlueUpdateClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateClassifier", input)
	return &GlueUpdateClassifierFuture{Future: future}
}

func (a *GlueStub) UpdateColumnStatisticsForPartition(ctx workflow.Context, input *glue.UpdateColumnStatisticsForPartitionInput) (*glue.UpdateColumnStatisticsForPartitionOutput, error) {
	var output glue.UpdateColumnStatisticsForPartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateColumnStatisticsForPartition", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateColumnStatisticsForPartitionAsync(ctx workflow.Context, input *glue.UpdateColumnStatisticsForPartitionInput) *GlueUpdateColumnStatisticsForPartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateColumnStatisticsForPartition", input)
	return &GlueUpdateColumnStatisticsForPartitionFuture{Future: future}
}

func (a *GlueStub) UpdateColumnStatisticsForTable(ctx workflow.Context, input *glue.UpdateColumnStatisticsForTableInput) (*glue.UpdateColumnStatisticsForTableOutput, error) {
	var output glue.UpdateColumnStatisticsForTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateColumnStatisticsForTable", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateColumnStatisticsForTableAsync(ctx workflow.Context, input *glue.UpdateColumnStatisticsForTableInput) *GlueUpdateColumnStatisticsForTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateColumnStatisticsForTable", input)
	return &GlueUpdateColumnStatisticsForTableFuture{Future: future}
}

func (a *GlueStub) UpdateConnection(ctx workflow.Context, input *glue.UpdateConnectionInput) (*glue.UpdateConnectionOutput, error) {
	var output glue.UpdateConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateConnectionAsync(ctx workflow.Context, input *glue.UpdateConnectionInput) *GlueUpdateConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateConnection", input)
	return &GlueUpdateConnectionFuture{Future: future}
}

func (a *GlueStub) UpdateCrawler(ctx workflow.Context, input *glue.UpdateCrawlerInput) (*glue.UpdateCrawlerOutput, error) {
	var output glue.UpdateCrawlerOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateCrawler", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateCrawlerAsync(ctx workflow.Context, input *glue.UpdateCrawlerInput) *GlueUpdateCrawlerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateCrawler", input)
	return &GlueUpdateCrawlerFuture{Future: future}
}

func (a *GlueStub) UpdateCrawlerSchedule(ctx workflow.Context, input *glue.UpdateCrawlerScheduleInput) (*glue.UpdateCrawlerScheduleOutput, error) {
	var output glue.UpdateCrawlerScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateCrawlerSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateCrawlerScheduleAsync(ctx workflow.Context, input *glue.UpdateCrawlerScheduleInput) *GlueUpdateCrawlerScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateCrawlerSchedule", input)
	return &GlueUpdateCrawlerScheduleFuture{Future: future}
}

func (a *GlueStub) UpdateDatabase(ctx workflow.Context, input *glue.UpdateDatabaseInput) (*glue.UpdateDatabaseOutput, error) {
	var output glue.UpdateDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateDatabaseAsync(ctx workflow.Context, input *glue.UpdateDatabaseInput) *GlueUpdateDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateDatabase", input)
	return &GlueUpdateDatabaseFuture{Future: future}
}

func (a *GlueStub) UpdateDevEndpoint(ctx workflow.Context, input *glue.UpdateDevEndpointInput) (*glue.UpdateDevEndpointOutput, error) {
	var output glue.UpdateDevEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateDevEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateDevEndpointAsync(ctx workflow.Context, input *glue.UpdateDevEndpointInput) *GlueUpdateDevEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateDevEndpoint", input)
	return &GlueUpdateDevEndpointFuture{Future: future}
}

func (a *GlueStub) UpdateJob(ctx workflow.Context, input *glue.UpdateJobInput) (*glue.UpdateJobOutput, error) {
	var output glue.UpdateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateJobAsync(ctx workflow.Context, input *glue.UpdateJobInput) *GlueUpdateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateJob", input)
	return &GlueUpdateJobFuture{Future: future}
}

func (a *GlueStub) UpdateMLTransform(ctx workflow.Context, input *glue.UpdateMLTransformInput) (*glue.UpdateMLTransformOutput, error) {
	var output glue.UpdateMLTransformOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateMLTransform", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateMLTransformAsync(ctx workflow.Context, input *glue.UpdateMLTransformInput) *GlueUpdateMLTransformFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateMLTransform", input)
	return &GlueUpdateMLTransformFuture{Future: future}
}

func (a *GlueStub) UpdatePartition(ctx workflow.Context, input *glue.UpdatePartitionInput) (*glue.UpdatePartitionOutput, error) {
	var output glue.UpdatePartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdatePartition", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdatePartitionAsync(ctx workflow.Context, input *glue.UpdatePartitionInput) *GlueUpdatePartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdatePartition", input)
	return &GlueUpdatePartitionFuture{Future: future}
}

func (a *GlueStub) UpdateTable(ctx workflow.Context, input *glue.UpdateTableInput) (*glue.UpdateTableOutput, error) {
	var output glue.UpdateTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateTable", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateTableAsync(ctx workflow.Context, input *glue.UpdateTableInput) *GlueUpdateTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateTable", input)
	return &GlueUpdateTableFuture{Future: future}
}

func (a *GlueStub) UpdateTrigger(ctx workflow.Context, input *glue.UpdateTriggerInput) (*glue.UpdateTriggerOutput, error) {
	var output glue.UpdateTriggerOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateTrigger", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateTriggerAsync(ctx workflow.Context, input *glue.UpdateTriggerInput) *GlueUpdateTriggerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateTrigger", input)
	return &GlueUpdateTriggerFuture{Future: future}
}

func (a *GlueStub) UpdateUserDefinedFunction(ctx workflow.Context, input *glue.UpdateUserDefinedFunctionInput) (*glue.UpdateUserDefinedFunctionOutput, error) {
	var output glue.UpdateUserDefinedFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateUserDefinedFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateUserDefinedFunctionAsync(ctx workflow.Context, input *glue.UpdateUserDefinedFunctionInput) *GlueUpdateUserDefinedFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateUserDefinedFunction", input)
	return &GlueUpdateUserDefinedFunctionFuture{Future: future}
}

func (a *GlueStub) UpdateWorkflow(ctx workflow.Context, input *glue.UpdateWorkflowInput) (*glue.UpdateWorkflowOutput, error) {
	var output glue.UpdateWorkflowOutput
	err := workflow.ExecuteActivity(ctx, "aws.glue.UpdateWorkflow", input).Get(ctx, &output)
	return &output, err
}

func (a *GlueStub) UpdateWorkflowAsync(ctx workflow.Context, input *glue.UpdateWorkflowInput) *GlueUpdateWorkflowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glue.UpdateWorkflow", input)
	return &GlueUpdateWorkflowFuture{Future: future}
}
