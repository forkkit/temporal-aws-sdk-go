// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/accessanalyzer"
	"go.temporal.io/sdk/workflow"
)

type AccessAnalyzerClient interface {
	CreateAnalyzer(ctx workflow.Context, input *accessanalyzer.CreateAnalyzerInput) (*accessanalyzer.CreateAnalyzerOutput, error)
	CreateAnalyzerAsync(ctx workflow.Context, input *accessanalyzer.CreateAnalyzerInput) *AccessAnalyzerCreateAnalyzerFuture

	CreateArchiveRule(ctx workflow.Context, input *accessanalyzer.CreateArchiveRuleInput) (*accessanalyzer.CreateArchiveRuleOutput, error)
	CreateArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.CreateArchiveRuleInput) *AccessAnalyzerCreateArchiveRuleFuture

	DeleteAnalyzer(ctx workflow.Context, input *accessanalyzer.DeleteAnalyzerInput) (*accessanalyzer.DeleteAnalyzerOutput, error)
	DeleteAnalyzerAsync(ctx workflow.Context, input *accessanalyzer.DeleteAnalyzerInput) *AccessAnalyzerDeleteAnalyzerFuture

	DeleteArchiveRule(ctx workflow.Context, input *accessanalyzer.DeleteArchiveRuleInput) (*accessanalyzer.DeleteArchiveRuleOutput, error)
	DeleteArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.DeleteArchiveRuleInput) *AccessAnalyzerDeleteArchiveRuleFuture

	GetAnalyzedResource(ctx workflow.Context, input *accessanalyzer.GetAnalyzedResourceInput) (*accessanalyzer.GetAnalyzedResourceOutput, error)
	GetAnalyzedResourceAsync(ctx workflow.Context, input *accessanalyzer.GetAnalyzedResourceInput) *AccessAnalyzerGetAnalyzedResourceFuture

	GetAnalyzer(ctx workflow.Context, input *accessanalyzer.GetAnalyzerInput) (*accessanalyzer.GetAnalyzerOutput, error)
	GetAnalyzerAsync(ctx workflow.Context, input *accessanalyzer.GetAnalyzerInput) *AccessAnalyzerGetAnalyzerFuture

	GetArchiveRule(ctx workflow.Context, input *accessanalyzer.GetArchiveRuleInput) (*accessanalyzer.GetArchiveRuleOutput, error)
	GetArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.GetArchiveRuleInput) *AccessAnalyzerGetArchiveRuleFuture

	GetFinding(ctx workflow.Context, input *accessanalyzer.GetFindingInput) (*accessanalyzer.GetFindingOutput, error)
	GetFindingAsync(ctx workflow.Context, input *accessanalyzer.GetFindingInput) *AccessAnalyzerGetFindingFuture

	ListAnalyzedResources(ctx workflow.Context, input *accessanalyzer.ListAnalyzedResourcesInput) (*accessanalyzer.ListAnalyzedResourcesOutput, error)
	ListAnalyzedResourcesAsync(ctx workflow.Context, input *accessanalyzer.ListAnalyzedResourcesInput) *AccessAnalyzerListAnalyzedResourcesFuture

	ListAnalyzers(ctx workflow.Context, input *accessanalyzer.ListAnalyzersInput) (*accessanalyzer.ListAnalyzersOutput, error)
	ListAnalyzersAsync(ctx workflow.Context, input *accessanalyzer.ListAnalyzersInput) *AccessAnalyzerListAnalyzersFuture

	ListArchiveRules(ctx workflow.Context, input *accessanalyzer.ListArchiveRulesInput) (*accessanalyzer.ListArchiveRulesOutput, error)
	ListArchiveRulesAsync(ctx workflow.Context, input *accessanalyzer.ListArchiveRulesInput) *AccessAnalyzerListArchiveRulesFuture

	ListFindings(ctx workflow.Context, input *accessanalyzer.ListFindingsInput) (*accessanalyzer.ListFindingsOutput, error)
	ListFindingsAsync(ctx workflow.Context, input *accessanalyzer.ListFindingsInput) *AccessAnalyzerListFindingsFuture

	ListTagsForResource(ctx workflow.Context, input *accessanalyzer.ListTagsForResourceInput) (*accessanalyzer.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *accessanalyzer.ListTagsForResourceInput) *AccessAnalyzerListTagsForResourceFuture

	StartResourceScan(ctx workflow.Context, input *accessanalyzer.StartResourceScanInput) (*accessanalyzer.StartResourceScanOutput, error)
	StartResourceScanAsync(ctx workflow.Context, input *accessanalyzer.StartResourceScanInput) *AccessAnalyzerStartResourceScanFuture

	TagResource(ctx workflow.Context, input *accessanalyzer.TagResourceInput) (*accessanalyzer.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *accessanalyzer.TagResourceInput) *AccessAnalyzerTagResourceFuture

	UntagResource(ctx workflow.Context, input *accessanalyzer.UntagResourceInput) (*accessanalyzer.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *accessanalyzer.UntagResourceInput) *AccessAnalyzerUntagResourceFuture

	UpdateArchiveRule(ctx workflow.Context, input *accessanalyzer.UpdateArchiveRuleInput) (*accessanalyzer.UpdateArchiveRuleOutput, error)
	UpdateArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.UpdateArchiveRuleInput) *AccessAnalyzerUpdateArchiveRuleFuture

	UpdateFindings(ctx workflow.Context, input *accessanalyzer.UpdateFindingsInput) (*accessanalyzer.UpdateFindingsOutput, error)
	UpdateFindingsAsync(ctx workflow.Context, input *accessanalyzer.UpdateFindingsInput) *AccessAnalyzerUpdateFindingsFuture
}

type AccessAnalyzerStub struct{}

func NewAccessAnalyzerStub() AccessAnalyzerClient {
	return &AccessAnalyzerStub{}
}

type AccessAnalyzerCreateAnalyzerFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerCreateAnalyzerFuture) Get(ctx workflow.Context) (*accessanalyzer.CreateAnalyzerOutput, error) {
	var output accessanalyzer.CreateAnalyzerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerCreateArchiveRuleFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerCreateArchiveRuleFuture) Get(ctx workflow.Context) (*accessanalyzer.CreateArchiveRuleOutput, error) {
	var output accessanalyzer.CreateArchiveRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerDeleteAnalyzerFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerDeleteAnalyzerFuture) Get(ctx workflow.Context) (*accessanalyzer.DeleteAnalyzerOutput, error) {
	var output accessanalyzer.DeleteAnalyzerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerDeleteArchiveRuleFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerDeleteArchiveRuleFuture) Get(ctx workflow.Context) (*accessanalyzer.DeleteArchiveRuleOutput, error) {
	var output accessanalyzer.DeleteArchiveRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerGetAnalyzedResourceFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerGetAnalyzedResourceFuture) Get(ctx workflow.Context) (*accessanalyzer.GetAnalyzedResourceOutput, error) {
	var output accessanalyzer.GetAnalyzedResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerGetAnalyzerFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerGetAnalyzerFuture) Get(ctx workflow.Context) (*accessanalyzer.GetAnalyzerOutput, error) {
	var output accessanalyzer.GetAnalyzerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerGetArchiveRuleFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerGetArchiveRuleFuture) Get(ctx workflow.Context) (*accessanalyzer.GetArchiveRuleOutput, error) {
	var output accessanalyzer.GetArchiveRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerGetFindingFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerGetFindingFuture) Get(ctx workflow.Context) (*accessanalyzer.GetFindingOutput, error) {
	var output accessanalyzer.GetFindingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerListAnalyzedResourcesFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerListAnalyzedResourcesFuture) Get(ctx workflow.Context) (*accessanalyzer.ListAnalyzedResourcesOutput, error) {
	var output accessanalyzer.ListAnalyzedResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerListAnalyzersFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerListAnalyzersFuture) Get(ctx workflow.Context) (*accessanalyzer.ListAnalyzersOutput, error) {
	var output accessanalyzer.ListAnalyzersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerListArchiveRulesFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerListArchiveRulesFuture) Get(ctx workflow.Context) (*accessanalyzer.ListArchiveRulesOutput, error) {
	var output accessanalyzer.ListArchiveRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerListFindingsFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerListFindingsFuture) Get(ctx workflow.Context) (*accessanalyzer.ListFindingsOutput, error) {
	var output accessanalyzer.ListFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerListTagsForResourceFuture) Get(ctx workflow.Context) (*accessanalyzer.ListTagsForResourceOutput, error) {
	var output accessanalyzer.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerStartResourceScanFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerStartResourceScanFuture) Get(ctx workflow.Context) (*accessanalyzer.StartResourceScanOutput, error) {
	var output accessanalyzer.StartResourceScanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerTagResourceFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerTagResourceFuture) Get(ctx workflow.Context) (*accessanalyzer.TagResourceOutput, error) {
	var output accessanalyzer.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerUntagResourceFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerUntagResourceFuture) Get(ctx workflow.Context) (*accessanalyzer.UntagResourceOutput, error) {
	var output accessanalyzer.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerUpdateArchiveRuleFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerUpdateArchiveRuleFuture) Get(ctx workflow.Context) (*accessanalyzer.UpdateArchiveRuleOutput, error) {
	var output accessanalyzer.UpdateArchiveRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AccessAnalyzerUpdateFindingsFuture struct {
	Future workflow.Future
}

func (r *AccessAnalyzerUpdateFindingsFuture) Get(ctx workflow.Context) (*accessanalyzer.UpdateFindingsOutput, error) {
	var output accessanalyzer.UpdateFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) CreateAnalyzer(ctx workflow.Context, input *accessanalyzer.CreateAnalyzerInput) (*accessanalyzer.CreateAnalyzerOutput, error) {
	var output accessanalyzer.CreateAnalyzerOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.CreateAnalyzer", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) CreateAnalyzerAsync(ctx workflow.Context, input *accessanalyzer.CreateAnalyzerInput) *AccessAnalyzerCreateAnalyzerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.CreateAnalyzer", input)
	return &AccessAnalyzerCreateAnalyzerFuture{Future: future}
}

func (a *AccessAnalyzerStub) CreateArchiveRule(ctx workflow.Context, input *accessanalyzer.CreateArchiveRuleInput) (*accessanalyzer.CreateArchiveRuleOutput, error) {
	var output accessanalyzer.CreateArchiveRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.CreateArchiveRule", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) CreateArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.CreateArchiveRuleInput) *AccessAnalyzerCreateArchiveRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.CreateArchiveRule", input)
	return &AccessAnalyzerCreateArchiveRuleFuture{Future: future}
}

func (a *AccessAnalyzerStub) DeleteAnalyzer(ctx workflow.Context, input *accessanalyzer.DeleteAnalyzerInput) (*accessanalyzer.DeleteAnalyzerOutput, error) {
	var output accessanalyzer.DeleteAnalyzerOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.DeleteAnalyzer", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) DeleteAnalyzerAsync(ctx workflow.Context, input *accessanalyzer.DeleteAnalyzerInput) *AccessAnalyzerDeleteAnalyzerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.DeleteAnalyzer", input)
	return &AccessAnalyzerDeleteAnalyzerFuture{Future: future}
}

func (a *AccessAnalyzerStub) DeleteArchiveRule(ctx workflow.Context, input *accessanalyzer.DeleteArchiveRuleInput) (*accessanalyzer.DeleteArchiveRuleOutput, error) {
	var output accessanalyzer.DeleteArchiveRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.DeleteArchiveRule", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) DeleteArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.DeleteArchiveRuleInput) *AccessAnalyzerDeleteArchiveRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.DeleteArchiveRule", input)
	return &AccessAnalyzerDeleteArchiveRuleFuture{Future: future}
}

func (a *AccessAnalyzerStub) GetAnalyzedResource(ctx workflow.Context, input *accessanalyzer.GetAnalyzedResourceInput) (*accessanalyzer.GetAnalyzedResourceOutput, error) {
	var output accessanalyzer.GetAnalyzedResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.GetAnalyzedResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) GetAnalyzedResourceAsync(ctx workflow.Context, input *accessanalyzer.GetAnalyzedResourceInput) *AccessAnalyzerGetAnalyzedResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.GetAnalyzedResource", input)
	return &AccessAnalyzerGetAnalyzedResourceFuture{Future: future}
}

func (a *AccessAnalyzerStub) GetAnalyzer(ctx workflow.Context, input *accessanalyzer.GetAnalyzerInput) (*accessanalyzer.GetAnalyzerOutput, error) {
	var output accessanalyzer.GetAnalyzerOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.GetAnalyzer", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) GetAnalyzerAsync(ctx workflow.Context, input *accessanalyzer.GetAnalyzerInput) *AccessAnalyzerGetAnalyzerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.GetAnalyzer", input)
	return &AccessAnalyzerGetAnalyzerFuture{Future: future}
}

func (a *AccessAnalyzerStub) GetArchiveRule(ctx workflow.Context, input *accessanalyzer.GetArchiveRuleInput) (*accessanalyzer.GetArchiveRuleOutput, error) {
	var output accessanalyzer.GetArchiveRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.GetArchiveRule", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) GetArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.GetArchiveRuleInput) *AccessAnalyzerGetArchiveRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.GetArchiveRule", input)
	return &AccessAnalyzerGetArchiveRuleFuture{Future: future}
}

func (a *AccessAnalyzerStub) GetFinding(ctx workflow.Context, input *accessanalyzer.GetFindingInput) (*accessanalyzer.GetFindingOutput, error) {
	var output accessanalyzer.GetFindingOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.GetFinding", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) GetFindingAsync(ctx workflow.Context, input *accessanalyzer.GetFindingInput) *AccessAnalyzerGetFindingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.GetFinding", input)
	return &AccessAnalyzerGetFindingFuture{Future: future}
}

func (a *AccessAnalyzerStub) ListAnalyzedResources(ctx workflow.Context, input *accessanalyzer.ListAnalyzedResourcesInput) (*accessanalyzer.ListAnalyzedResourcesOutput, error) {
	var output accessanalyzer.ListAnalyzedResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.ListAnalyzedResources", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) ListAnalyzedResourcesAsync(ctx workflow.Context, input *accessanalyzer.ListAnalyzedResourcesInput) *AccessAnalyzerListAnalyzedResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.ListAnalyzedResources", input)
	return &AccessAnalyzerListAnalyzedResourcesFuture{Future: future}
}

func (a *AccessAnalyzerStub) ListAnalyzers(ctx workflow.Context, input *accessanalyzer.ListAnalyzersInput) (*accessanalyzer.ListAnalyzersOutput, error) {
	var output accessanalyzer.ListAnalyzersOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.ListAnalyzers", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) ListAnalyzersAsync(ctx workflow.Context, input *accessanalyzer.ListAnalyzersInput) *AccessAnalyzerListAnalyzersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.ListAnalyzers", input)
	return &AccessAnalyzerListAnalyzersFuture{Future: future}
}

func (a *AccessAnalyzerStub) ListArchiveRules(ctx workflow.Context, input *accessanalyzer.ListArchiveRulesInput) (*accessanalyzer.ListArchiveRulesOutput, error) {
	var output accessanalyzer.ListArchiveRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.ListArchiveRules", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) ListArchiveRulesAsync(ctx workflow.Context, input *accessanalyzer.ListArchiveRulesInput) *AccessAnalyzerListArchiveRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.ListArchiveRules", input)
	return &AccessAnalyzerListArchiveRulesFuture{Future: future}
}

func (a *AccessAnalyzerStub) ListFindings(ctx workflow.Context, input *accessanalyzer.ListFindingsInput) (*accessanalyzer.ListFindingsOutput, error) {
	var output accessanalyzer.ListFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.ListFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) ListFindingsAsync(ctx workflow.Context, input *accessanalyzer.ListFindingsInput) *AccessAnalyzerListFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.ListFindings", input)
	return &AccessAnalyzerListFindingsFuture{Future: future}
}

func (a *AccessAnalyzerStub) ListTagsForResource(ctx workflow.Context, input *accessanalyzer.ListTagsForResourceInput) (*accessanalyzer.ListTagsForResourceOutput, error) {
	var output accessanalyzer.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) ListTagsForResourceAsync(ctx workflow.Context, input *accessanalyzer.ListTagsForResourceInput) *AccessAnalyzerListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.ListTagsForResource", input)
	return &AccessAnalyzerListTagsForResourceFuture{Future: future}
}

func (a *AccessAnalyzerStub) StartResourceScan(ctx workflow.Context, input *accessanalyzer.StartResourceScanInput) (*accessanalyzer.StartResourceScanOutput, error) {
	var output accessanalyzer.StartResourceScanOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.StartResourceScan", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) StartResourceScanAsync(ctx workflow.Context, input *accessanalyzer.StartResourceScanInput) *AccessAnalyzerStartResourceScanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.StartResourceScan", input)
	return &AccessAnalyzerStartResourceScanFuture{Future: future}
}

func (a *AccessAnalyzerStub) TagResource(ctx workflow.Context, input *accessanalyzer.TagResourceInput) (*accessanalyzer.TagResourceOutput, error) {
	var output accessanalyzer.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) TagResourceAsync(ctx workflow.Context, input *accessanalyzer.TagResourceInput) *AccessAnalyzerTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.TagResource", input)
	return &AccessAnalyzerTagResourceFuture{Future: future}
}

func (a *AccessAnalyzerStub) UntagResource(ctx workflow.Context, input *accessanalyzer.UntagResourceInput) (*accessanalyzer.UntagResourceOutput, error) {
	var output accessanalyzer.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) UntagResourceAsync(ctx workflow.Context, input *accessanalyzer.UntagResourceInput) *AccessAnalyzerUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.UntagResource", input)
	return &AccessAnalyzerUntagResourceFuture{Future: future}
}

func (a *AccessAnalyzerStub) UpdateArchiveRule(ctx workflow.Context, input *accessanalyzer.UpdateArchiveRuleInput) (*accessanalyzer.UpdateArchiveRuleOutput, error) {
	var output accessanalyzer.UpdateArchiveRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.UpdateArchiveRule", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) UpdateArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.UpdateArchiveRuleInput) *AccessAnalyzerUpdateArchiveRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.UpdateArchiveRule", input)
	return &AccessAnalyzerUpdateArchiveRuleFuture{Future: future}
}

func (a *AccessAnalyzerStub) UpdateFindings(ctx workflow.Context, input *accessanalyzer.UpdateFindingsInput) (*accessanalyzer.UpdateFindingsOutput, error) {
	var output accessanalyzer.UpdateFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.UpdateFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *AccessAnalyzerStub) UpdateFindingsAsync(ctx workflow.Context, input *accessanalyzer.UpdateFindingsInput) *AccessAnalyzerUpdateFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.accessanalyzer.UpdateFindings", input)
	return &AccessAnalyzerUpdateFindingsFuture{Future: future}
}
