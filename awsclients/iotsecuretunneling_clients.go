// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/iotsecuretunneling"
	"go.temporal.io/sdk/workflow"
)

type IoTSecureTunnelingClient interface {
	CloseTunnel(ctx workflow.Context, input *iotsecuretunneling.CloseTunnelInput) (*iotsecuretunneling.CloseTunnelOutput, error)
	CloseTunnelAsync(ctx workflow.Context, input *iotsecuretunneling.CloseTunnelInput) *IotsecuretunnelingCloseTunnelFuture

	DescribeTunnel(ctx workflow.Context, input *iotsecuretunneling.DescribeTunnelInput) (*iotsecuretunneling.DescribeTunnelOutput, error)
	DescribeTunnelAsync(ctx workflow.Context, input *iotsecuretunneling.DescribeTunnelInput) *IotsecuretunnelingDescribeTunnelFuture

	ListTagsForResource(ctx workflow.Context, input *iotsecuretunneling.ListTagsForResourceInput) (*iotsecuretunneling.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *iotsecuretunneling.ListTagsForResourceInput) *IotsecuretunnelingListTagsForResourceFuture

	ListTunnels(ctx workflow.Context, input *iotsecuretunneling.ListTunnelsInput) (*iotsecuretunneling.ListTunnelsOutput, error)
	ListTunnelsAsync(ctx workflow.Context, input *iotsecuretunneling.ListTunnelsInput) *IotsecuretunnelingListTunnelsFuture

	OpenTunnel(ctx workflow.Context, input *iotsecuretunneling.OpenTunnelInput) (*iotsecuretunneling.OpenTunnelOutput, error)
	OpenTunnelAsync(ctx workflow.Context, input *iotsecuretunneling.OpenTunnelInput) *IotsecuretunnelingOpenTunnelFuture

	TagResource(ctx workflow.Context, input *iotsecuretunneling.TagResourceInput) (*iotsecuretunneling.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *iotsecuretunneling.TagResourceInput) *IotsecuretunnelingTagResourceFuture

	UntagResource(ctx workflow.Context, input *iotsecuretunneling.UntagResourceInput) (*iotsecuretunneling.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *iotsecuretunneling.UntagResourceInput) *IotsecuretunnelingUntagResourceFuture
}

type IoTSecureTunnelingStub struct{}

func NewIoTSecureTunnelingStub() IoTSecureTunnelingClient {
	return &IoTSecureTunnelingStub{}
}

type IotsecuretunnelingCloseTunnelFuture struct {
	Future workflow.Future
}

func (r *IotsecuretunnelingCloseTunnelFuture) Get(ctx workflow.Context) (*iotsecuretunneling.CloseTunnelOutput, error) {
	var output iotsecuretunneling.CloseTunnelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotsecuretunnelingDescribeTunnelFuture struct {
	Future workflow.Future
}

func (r *IotsecuretunnelingDescribeTunnelFuture) Get(ctx workflow.Context) (*iotsecuretunneling.DescribeTunnelOutput, error) {
	var output iotsecuretunneling.DescribeTunnelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotsecuretunnelingListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *IotsecuretunnelingListTagsForResourceFuture) Get(ctx workflow.Context) (*iotsecuretunneling.ListTagsForResourceOutput, error) {
	var output iotsecuretunneling.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotsecuretunnelingListTunnelsFuture struct {
	Future workflow.Future
}

func (r *IotsecuretunnelingListTunnelsFuture) Get(ctx workflow.Context) (*iotsecuretunneling.ListTunnelsOutput, error) {
	var output iotsecuretunneling.ListTunnelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotsecuretunnelingOpenTunnelFuture struct {
	Future workflow.Future
}

func (r *IotsecuretunnelingOpenTunnelFuture) Get(ctx workflow.Context) (*iotsecuretunneling.OpenTunnelOutput, error) {
	var output iotsecuretunneling.OpenTunnelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotsecuretunnelingTagResourceFuture struct {
	Future workflow.Future
}

func (r *IotsecuretunnelingTagResourceFuture) Get(ctx workflow.Context) (*iotsecuretunneling.TagResourceOutput, error) {
	var output iotsecuretunneling.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotsecuretunnelingUntagResourceFuture struct {
	Future workflow.Future
}

func (r *IotsecuretunnelingUntagResourceFuture) Get(ctx workflow.Context) (*iotsecuretunneling.UntagResourceOutput, error) {
	var output iotsecuretunneling.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *IoTSecureTunnelingStub) CloseTunnel(ctx workflow.Context, input *iotsecuretunneling.CloseTunnelInput) (*iotsecuretunneling.CloseTunnelOutput, error) {
	var output iotsecuretunneling.CloseTunnelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.CloseTunnel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTSecureTunnelingStub) CloseTunnelAsync(ctx workflow.Context, input *iotsecuretunneling.CloseTunnelInput) *IotsecuretunnelingCloseTunnelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.CloseTunnel", input)
	return &IotsecuretunnelingCloseTunnelFuture{Future: future}
}

func (a *IoTSecureTunnelingStub) DescribeTunnel(ctx workflow.Context, input *iotsecuretunneling.DescribeTunnelInput) (*iotsecuretunneling.DescribeTunnelOutput, error) {
	var output iotsecuretunneling.DescribeTunnelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.DescribeTunnel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTSecureTunnelingStub) DescribeTunnelAsync(ctx workflow.Context, input *iotsecuretunneling.DescribeTunnelInput) *IotsecuretunnelingDescribeTunnelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.DescribeTunnel", input)
	return &IotsecuretunnelingDescribeTunnelFuture{Future: future}
}

func (a *IoTSecureTunnelingStub) ListTagsForResource(ctx workflow.Context, input *iotsecuretunneling.ListTagsForResourceInput) (*iotsecuretunneling.ListTagsForResourceOutput, error) {
	var output iotsecuretunneling.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTSecureTunnelingStub) ListTagsForResourceAsync(ctx workflow.Context, input *iotsecuretunneling.ListTagsForResourceInput) *IotsecuretunnelingListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.ListTagsForResource", input)
	return &IotsecuretunnelingListTagsForResourceFuture{Future: future}
}

func (a *IoTSecureTunnelingStub) ListTunnels(ctx workflow.Context, input *iotsecuretunneling.ListTunnelsInput) (*iotsecuretunneling.ListTunnelsOutput, error) {
	var output iotsecuretunneling.ListTunnelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.ListTunnels", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTSecureTunnelingStub) ListTunnelsAsync(ctx workflow.Context, input *iotsecuretunneling.ListTunnelsInput) *IotsecuretunnelingListTunnelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.ListTunnels", input)
	return &IotsecuretunnelingListTunnelsFuture{Future: future}
}

func (a *IoTSecureTunnelingStub) OpenTunnel(ctx workflow.Context, input *iotsecuretunneling.OpenTunnelInput) (*iotsecuretunneling.OpenTunnelOutput, error) {
	var output iotsecuretunneling.OpenTunnelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.OpenTunnel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTSecureTunnelingStub) OpenTunnelAsync(ctx workflow.Context, input *iotsecuretunneling.OpenTunnelInput) *IotsecuretunnelingOpenTunnelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.OpenTunnel", input)
	return &IotsecuretunnelingOpenTunnelFuture{Future: future}
}

func (a *IoTSecureTunnelingStub) TagResource(ctx workflow.Context, input *iotsecuretunneling.TagResourceInput) (*iotsecuretunneling.TagResourceOutput, error) {
	var output iotsecuretunneling.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTSecureTunnelingStub) TagResourceAsync(ctx workflow.Context, input *iotsecuretunneling.TagResourceInput) *IotsecuretunnelingTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.TagResource", input)
	return &IotsecuretunnelingTagResourceFuture{Future: future}
}

func (a *IoTSecureTunnelingStub) UntagResource(ctx workflow.Context, input *iotsecuretunneling.UntagResourceInput) (*iotsecuretunneling.UntagResourceOutput, error) {
	var output iotsecuretunneling.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTSecureTunnelingStub) UntagResourceAsync(ctx workflow.Context, input *iotsecuretunneling.UntagResourceInput) *IotsecuretunnelingUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotsecuretunneling.UntagResource", input)
	return &IotsecuretunnelingUntagResourceFuture{Future: future}
}
