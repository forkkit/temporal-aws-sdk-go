// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/eks"
	"go.temporal.io/sdk/workflow"
)

type EKSClient interface {
	CreateCluster(ctx workflow.Context, input *eks.CreateClusterInput) (*eks.CreateClusterOutput, error)
	CreateClusterAsync(ctx workflow.Context, input *eks.CreateClusterInput) *EKSCreateClusterFuture

	CreateFargateProfile(ctx workflow.Context, input *eks.CreateFargateProfileInput) (*eks.CreateFargateProfileOutput, error)
	CreateFargateProfileAsync(ctx workflow.Context, input *eks.CreateFargateProfileInput) *EKSCreateFargateProfileFuture

	CreateNodegroup(ctx workflow.Context, input *eks.CreateNodegroupInput) (*eks.CreateNodegroupOutput, error)
	CreateNodegroupAsync(ctx workflow.Context, input *eks.CreateNodegroupInput) *EKSCreateNodegroupFuture

	DeleteCluster(ctx workflow.Context, input *eks.DeleteClusterInput) (*eks.DeleteClusterOutput, error)
	DeleteClusterAsync(ctx workflow.Context, input *eks.DeleteClusterInput) *EKSDeleteClusterFuture

	DeleteFargateProfile(ctx workflow.Context, input *eks.DeleteFargateProfileInput) (*eks.DeleteFargateProfileOutput, error)
	DeleteFargateProfileAsync(ctx workflow.Context, input *eks.DeleteFargateProfileInput) *EKSDeleteFargateProfileFuture

	DeleteNodegroup(ctx workflow.Context, input *eks.DeleteNodegroupInput) (*eks.DeleteNodegroupOutput, error)
	DeleteNodegroupAsync(ctx workflow.Context, input *eks.DeleteNodegroupInput) *EKSDeleteNodegroupFuture

	DescribeCluster(ctx workflow.Context, input *eks.DescribeClusterInput) (*eks.DescribeClusterOutput, error)
	DescribeClusterAsync(ctx workflow.Context, input *eks.DescribeClusterInput) *EKSDescribeClusterFuture

	DescribeFargateProfile(ctx workflow.Context, input *eks.DescribeFargateProfileInput) (*eks.DescribeFargateProfileOutput, error)
	DescribeFargateProfileAsync(ctx workflow.Context, input *eks.DescribeFargateProfileInput) *EKSDescribeFargateProfileFuture

	DescribeNodegroup(ctx workflow.Context, input *eks.DescribeNodegroupInput) (*eks.DescribeNodegroupOutput, error)
	DescribeNodegroupAsync(ctx workflow.Context, input *eks.DescribeNodegroupInput) *EKSDescribeNodegroupFuture

	DescribeUpdate(ctx workflow.Context, input *eks.DescribeUpdateInput) (*eks.DescribeUpdateOutput, error)
	DescribeUpdateAsync(ctx workflow.Context, input *eks.DescribeUpdateInput) *EKSDescribeUpdateFuture

	ListClusters(ctx workflow.Context, input *eks.ListClustersInput) (*eks.ListClustersOutput, error)
	ListClustersAsync(ctx workflow.Context, input *eks.ListClustersInput) *EKSListClustersFuture

	ListFargateProfiles(ctx workflow.Context, input *eks.ListFargateProfilesInput) (*eks.ListFargateProfilesOutput, error)
	ListFargateProfilesAsync(ctx workflow.Context, input *eks.ListFargateProfilesInput) *EKSListFargateProfilesFuture

	ListNodegroups(ctx workflow.Context, input *eks.ListNodegroupsInput) (*eks.ListNodegroupsOutput, error)
	ListNodegroupsAsync(ctx workflow.Context, input *eks.ListNodegroupsInput) *EKSListNodegroupsFuture

	ListTagsForResource(ctx workflow.Context, input *eks.ListTagsForResourceInput) (*eks.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *eks.ListTagsForResourceInput) *EKSListTagsForResourceFuture

	ListUpdates(ctx workflow.Context, input *eks.ListUpdatesInput) (*eks.ListUpdatesOutput, error)
	ListUpdatesAsync(ctx workflow.Context, input *eks.ListUpdatesInput) *EKSListUpdatesFuture

	TagResource(ctx workflow.Context, input *eks.TagResourceInput) (*eks.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *eks.TagResourceInput) *EKSTagResourceFuture

	UntagResource(ctx workflow.Context, input *eks.UntagResourceInput) (*eks.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *eks.UntagResourceInput) *EKSUntagResourceFuture

	UpdateClusterConfig(ctx workflow.Context, input *eks.UpdateClusterConfigInput) (*eks.UpdateClusterConfigOutput, error)
	UpdateClusterConfigAsync(ctx workflow.Context, input *eks.UpdateClusterConfigInput) *EKSUpdateClusterConfigFuture

	UpdateClusterVersion(ctx workflow.Context, input *eks.UpdateClusterVersionInput) (*eks.UpdateClusterVersionOutput, error)
	UpdateClusterVersionAsync(ctx workflow.Context, input *eks.UpdateClusterVersionInput) *EKSUpdateClusterVersionFuture

	UpdateNodegroupConfig(ctx workflow.Context, input *eks.UpdateNodegroupConfigInput) (*eks.UpdateNodegroupConfigOutput, error)
	UpdateNodegroupConfigAsync(ctx workflow.Context, input *eks.UpdateNodegroupConfigInput) *EKSUpdateNodegroupConfigFuture

	UpdateNodegroupVersion(ctx workflow.Context, input *eks.UpdateNodegroupVersionInput) (*eks.UpdateNodegroupVersionOutput, error)
	UpdateNodegroupVersionAsync(ctx workflow.Context, input *eks.UpdateNodegroupVersionInput) *EKSUpdateNodegroupVersionFuture

	WaitUntilClusterActive(ctx workflow.Context, input *eks.DescribeClusterInput) error
	WaitUntilClusterActiveAsync(ctx workflow.Context, input *eks.DescribeClusterInput) *VoidFuture

	WaitUntilClusterDeleted(ctx workflow.Context, input *eks.DescribeClusterInput) error
	WaitUntilClusterDeletedAsync(ctx workflow.Context, input *eks.DescribeClusterInput) *VoidFuture

	WaitUntilNodegroupActive(ctx workflow.Context, input *eks.DescribeNodegroupInput) error
	WaitUntilNodegroupActiveAsync(ctx workflow.Context, input *eks.DescribeNodegroupInput) *VoidFuture

	WaitUntilNodegroupDeleted(ctx workflow.Context, input *eks.DescribeNodegroupInput) error
	WaitUntilNodegroupDeletedAsync(ctx workflow.Context, input *eks.DescribeNodegroupInput) *VoidFuture
}

type EKSStub struct{}

func NewEKSStub() EKSClient {
	return &EKSStub{}
}

type EKSCreateClusterFuture struct {
	Future workflow.Future
}

func (r *EKSCreateClusterFuture) Get(ctx workflow.Context) (*eks.CreateClusterOutput, error) {
	var output eks.CreateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSCreateFargateProfileFuture struct {
	Future workflow.Future
}

func (r *EKSCreateFargateProfileFuture) Get(ctx workflow.Context) (*eks.CreateFargateProfileOutput, error) {
	var output eks.CreateFargateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSCreateNodegroupFuture struct {
	Future workflow.Future
}

func (r *EKSCreateNodegroupFuture) Get(ctx workflow.Context) (*eks.CreateNodegroupOutput, error) {
	var output eks.CreateNodegroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDeleteClusterFuture struct {
	Future workflow.Future
}

func (r *EKSDeleteClusterFuture) Get(ctx workflow.Context) (*eks.DeleteClusterOutput, error) {
	var output eks.DeleteClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDeleteFargateProfileFuture struct {
	Future workflow.Future
}

func (r *EKSDeleteFargateProfileFuture) Get(ctx workflow.Context) (*eks.DeleteFargateProfileOutput, error) {
	var output eks.DeleteFargateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDeleteNodegroupFuture struct {
	Future workflow.Future
}

func (r *EKSDeleteNodegroupFuture) Get(ctx workflow.Context) (*eks.DeleteNodegroupOutput, error) {
	var output eks.DeleteNodegroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDescribeClusterFuture struct {
	Future workflow.Future
}

func (r *EKSDescribeClusterFuture) Get(ctx workflow.Context) (*eks.DescribeClusterOutput, error) {
	var output eks.DescribeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDescribeFargateProfileFuture struct {
	Future workflow.Future
}

func (r *EKSDescribeFargateProfileFuture) Get(ctx workflow.Context) (*eks.DescribeFargateProfileOutput, error) {
	var output eks.DescribeFargateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDescribeNodegroupFuture struct {
	Future workflow.Future
}

func (r *EKSDescribeNodegroupFuture) Get(ctx workflow.Context) (*eks.DescribeNodegroupOutput, error) {
	var output eks.DescribeNodegroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDescribeUpdateFuture struct {
	Future workflow.Future
}

func (r *EKSDescribeUpdateFuture) Get(ctx workflow.Context) (*eks.DescribeUpdateOutput, error) {
	var output eks.DescribeUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSListClustersFuture struct {
	Future workflow.Future
}

func (r *EKSListClustersFuture) Get(ctx workflow.Context) (*eks.ListClustersOutput, error) {
	var output eks.ListClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSListFargateProfilesFuture struct {
	Future workflow.Future
}

func (r *EKSListFargateProfilesFuture) Get(ctx workflow.Context) (*eks.ListFargateProfilesOutput, error) {
	var output eks.ListFargateProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSListNodegroupsFuture struct {
	Future workflow.Future
}

func (r *EKSListNodegroupsFuture) Get(ctx workflow.Context) (*eks.ListNodegroupsOutput, error) {
	var output eks.ListNodegroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *EKSListTagsForResourceFuture) Get(ctx workflow.Context) (*eks.ListTagsForResourceOutput, error) {
	var output eks.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSListUpdatesFuture struct {
	Future workflow.Future
}

func (r *EKSListUpdatesFuture) Get(ctx workflow.Context) (*eks.ListUpdatesOutput, error) {
	var output eks.ListUpdatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSTagResourceFuture struct {
	Future workflow.Future
}

func (r *EKSTagResourceFuture) Get(ctx workflow.Context) (*eks.TagResourceOutput, error) {
	var output eks.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSUntagResourceFuture struct {
	Future workflow.Future
}

func (r *EKSUntagResourceFuture) Get(ctx workflow.Context) (*eks.UntagResourceOutput, error) {
	var output eks.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSUpdateClusterConfigFuture struct {
	Future workflow.Future
}

func (r *EKSUpdateClusterConfigFuture) Get(ctx workflow.Context) (*eks.UpdateClusterConfigOutput, error) {
	var output eks.UpdateClusterConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSUpdateClusterVersionFuture struct {
	Future workflow.Future
}

func (r *EKSUpdateClusterVersionFuture) Get(ctx workflow.Context) (*eks.UpdateClusterVersionOutput, error) {
	var output eks.UpdateClusterVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSUpdateNodegroupConfigFuture struct {
	Future workflow.Future
}

func (r *EKSUpdateNodegroupConfigFuture) Get(ctx workflow.Context) (*eks.UpdateNodegroupConfigOutput, error) {
	var output eks.UpdateNodegroupConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSUpdateNodegroupVersionFuture struct {
	Future workflow.Future
}

func (r *EKSUpdateNodegroupVersionFuture) Get(ctx workflow.Context) (*eks.UpdateNodegroupVersionOutput, error) {
	var output eks.UpdateNodegroupVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) CreateCluster(ctx workflow.Context, input *eks.CreateClusterInput) (*eks.CreateClusterOutput, error) {
	var output eks.CreateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.CreateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) CreateClusterAsync(ctx workflow.Context, input *eks.CreateClusterInput) *EKSCreateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.CreateCluster", input)
	return &EKSCreateClusterFuture{Future: future}
}

func (a *EKSStub) CreateFargateProfile(ctx workflow.Context, input *eks.CreateFargateProfileInput) (*eks.CreateFargateProfileOutput, error) {
	var output eks.CreateFargateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.CreateFargateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) CreateFargateProfileAsync(ctx workflow.Context, input *eks.CreateFargateProfileInput) *EKSCreateFargateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.CreateFargateProfile", input)
	return &EKSCreateFargateProfileFuture{Future: future}
}

func (a *EKSStub) CreateNodegroup(ctx workflow.Context, input *eks.CreateNodegroupInput) (*eks.CreateNodegroupOutput, error) {
	var output eks.CreateNodegroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.CreateNodegroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) CreateNodegroupAsync(ctx workflow.Context, input *eks.CreateNodegroupInput) *EKSCreateNodegroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.CreateNodegroup", input)
	return &EKSCreateNodegroupFuture{Future: future}
}

func (a *EKSStub) DeleteCluster(ctx workflow.Context, input *eks.DeleteClusterInput) (*eks.DeleteClusterOutput, error) {
	var output eks.DeleteClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.DeleteCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) DeleteClusterAsync(ctx workflow.Context, input *eks.DeleteClusterInput) *EKSDeleteClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.DeleteCluster", input)
	return &EKSDeleteClusterFuture{Future: future}
}

func (a *EKSStub) DeleteFargateProfile(ctx workflow.Context, input *eks.DeleteFargateProfileInput) (*eks.DeleteFargateProfileOutput, error) {
	var output eks.DeleteFargateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.DeleteFargateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) DeleteFargateProfileAsync(ctx workflow.Context, input *eks.DeleteFargateProfileInput) *EKSDeleteFargateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.DeleteFargateProfile", input)
	return &EKSDeleteFargateProfileFuture{Future: future}
}

func (a *EKSStub) DeleteNodegroup(ctx workflow.Context, input *eks.DeleteNodegroupInput) (*eks.DeleteNodegroupOutput, error) {
	var output eks.DeleteNodegroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.DeleteNodegroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) DeleteNodegroupAsync(ctx workflow.Context, input *eks.DeleteNodegroupInput) *EKSDeleteNodegroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.DeleteNodegroup", input)
	return &EKSDeleteNodegroupFuture{Future: future}
}

func (a *EKSStub) DescribeCluster(ctx workflow.Context, input *eks.DescribeClusterInput) (*eks.DescribeClusterOutput, error) {
	var output eks.DescribeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.DescribeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) DescribeClusterAsync(ctx workflow.Context, input *eks.DescribeClusterInput) *EKSDescribeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.DescribeCluster", input)
	return &EKSDescribeClusterFuture{Future: future}
}

func (a *EKSStub) DescribeFargateProfile(ctx workflow.Context, input *eks.DescribeFargateProfileInput) (*eks.DescribeFargateProfileOutput, error) {
	var output eks.DescribeFargateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.DescribeFargateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) DescribeFargateProfileAsync(ctx workflow.Context, input *eks.DescribeFargateProfileInput) *EKSDescribeFargateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.DescribeFargateProfile", input)
	return &EKSDescribeFargateProfileFuture{Future: future}
}

func (a *EKSStub) DescribeNodegroup(ctx workflow.Context, input *eks.DescribeNodegroupInput) (*eks.DescribeNodegroupOutput, error) {
	var output eks.DescribeNodegroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.DescribeNodegroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) DescribeNodegroupAsync(ctx workflow.Context, input *eks.DescribeNodegroupInput) *EKSDescribeNodegroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.DescribeNodegroup", input)
	return &EKSDescribeNodegroupFuture{Future: future}
}

func (a *EKSStub) DescribeUpdate(ctx workflow.Context, input *eks.DescribeUpdateInput) (*eks.DescribeUpdateOutput, error) {
	var output eks.DescribeUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.DescribeUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) DescribeUpdateAsync(ctx workflow.Context, input *eks.DescribeUpdateInput) *EKSDescribeUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.DescribeUpdate", input)
	return &EKSDescribeUpdateFuture{Future: future}
}

func (a *EKSStub) ListClusters(ctx workflow.Context, input *eks.ListClustersInput) (*eks.ListClustersOutput, error) {
	var output eks.ListClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.ListClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) ListClustersAsync(ctx workflow.Context, input *eks.ListClustersInput) *EKSListClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.ListClusters", input)
	return &EKSListClustersFuture{Future: future}
}

func (a *EKSStub) ListFargateProfiles(ctx workflow.Context, input *eks.ListFargateProfilesInput) (*eks.ListFargateProfilesOutput, error) {
	var output eks.ListFargateProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.ListFargateProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) ListFargateProfilesAsync(ctx workflow.Context, input *eks.ListFargateProfilesInput) *EKSListFargateProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.ListFargateProfiles", input)
	return &EKSListFargateProfilesFuture{Future: future}
}

func (a *EKSStub) ListNodegroups(ctx workflow.Context, input *eks.ListNodegroupsInput) (*eks.ListNodegroupsOutput, error) {
	var output eks.ListNodegroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.ListNodegroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) ListNodegroupsAsync(ctx workflow.Context, input *eks.ListNodegroupsInput) *EKSListNodegroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.ListNodegroups", input)
	return &EKSListNodegroupsFuture{Future: future}
}

func (a *EKSStub) ListTagsForResource(ctx workflow.Context, input *eks.ListTagsForResourceInput) (*eks.ListTagsForResourceOutput, error) {
	var output eks.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) ListTagsForResourceAsync(ctx workflow.Context, input *eks.ListTagsForResourceInput) *EKSListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.ListTagsForResource", input)
	return &EKSListTagsForResourceFuture{Future: future}
}

func (a *EKSStub) ListUpdates(ctx workflow.Context, input *eks.ListUpdatesInput) (*eks.ListUpdatesOutput, error) {
	var output eks.ListUpdatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.ListUpdates", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) ListUpdatesAsync(ctx workflow.Context, input *eks.ListUpdatesInput) *EKSListUpdatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.ListUpdates", input)
	return &EKSListUpdatesFuture{Future: future}
}

func (a *EKSStub) TagResource(ctx workflow.Context, input *eks.TagResourceInput) (*eks.TagResourceOutput, error) {
	var output eks.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) TagResourceAsync(ctx workflow.Context, input *eks.TagResourceInput) *EKSTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.TagResource", input)
	return &EKSTagResourceFuture{Future: future}
}

func (a *EKSStub) UntagResource(ctx workflow.Context, input *eks.UntagResourceInput) (*eks.UntagResourceOutput, error) {
	var output eks.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) UntagResourceAsync(ctx workflow.Context, input *eks.UntagResourceInput) *EKSUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.UntagResource", input)
	return &EKSUntagResourceFuture{Future: future}
}

func (a *EKSStub) UpdateClusterConfig(ctx workflow.Context, input *eks.UpdateClusterConfigInput) (*eks.UpdateClusterConfigOutput, error) {
	var output eks.UpdateClusterConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.UpdateClusterConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) UpdateClusterConfigAsync(ctx workflow.Context, input *eks.UpdateClusterConfigInput) *EKSUpdateClusterConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.UpdateClusterConfig", input)
	return &EKSUpdateClusterConfigFuture{Future: future}
}

func (a *EKSStub) UpdateClusterVersion(ctx workflow.Context, input *eks.UpdateClusterVersionInput) (*eks.UpdateClusterVersionOutput, error) {
	var output eks.UpdateClusterVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.UpdateClusterVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) UpdateClusterVersionAsync(ctx workflow.Context, input *eks.UpdateClusterVersionInput) *EKSUpdateClusterVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.UpdateClusterVersion", input)
	return &EKSUpdateClusterVersionFuture{Future: future}
}

func (a *EKSStub) UpdateNodegroupConfig(ctx workflow.Context, input *eks.UpdateNodegroupConfigInput) (*eks.UpdateNodegroupConfigOutput, error) {
	var output eks.UpdateNodegroupConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.UpdateNodegroupConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) UpdateNodegroupConfigAsync(ctx workflow.Context, input *eks.UpdateNodegroupConfigInput) *EKSUpdateNodegroupConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.UpdateNodegroupConfig", input)
	return &EKSUpdateNodegroupConfigFuture{Future: future}
}

func (a *EKSStub) UpdateNodegroupVersion(ctx workflow.Context, input *eks.UpdateNodegroupVersionInput) (*eks.UpdateNodegroupVersionOutput, error) {
	var output eks.UpdateNodegroupVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.eks.UpdateNodegroupVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *EKSStub) UpdateNodegroupVersionAsync(ctx workflow.Context, input *eks.UpdateNodegroupVersionInput) *EKSUpdateNodegroupVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.UpdateNodegroupVersion", input)
	return &EKSUpdateNodegroupVersionFuture{Future: future}
}

func (a *EKSStub) WaitUntilClusterActive(ctx workflow.Context, input *eks.DescribeClusterInput) error {
	return workflow.ExecuteActivity(ctx, "aws.eks.WaitUntilClusterActive", input).Get(ctx, nil)
}

func (a *EKSStub) WaitUntilClusterActiveAsync(ctx workflow.Context, input *eks.DescribeClusterInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.WaitUntilClusterActive", input)
	return NewVoidFuture(future)
}

func (a *EKSStub) WaitUntilClusterDeleted(ctx workflow.Context, input *eks.DescribeClusterInput) error {
	return workflow.ExecuteActivity(ctx, "aws.eks.WaitUntilClusterDeleted", input).Get(ctx, nil)
}

func (a *EKSStub) WaitUntilClusterDeletedAsync(ctx workflow.Context, input *eks.DescribeClusterInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.WaitUntilClusterDeleted", input)
	return NewVoidFuture(future)
}

func (a *EKSStub) WaitUntilNodegroupActive(ctx workflow.Context, input *eks.DescribeNodegroupInput) error {
	return workflow.ExecuteActivity(ctx, "aws.eks.WaitUntilNodegroupActive", input).Get(ctx, nil)
}

func (a *EKSStub) WaitUntilNodegroupActiveAsync(ctx workflow.Context, input *eks.DescribeNodegroupInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.WaitUntilNodegroupActive", input)
	return NewVoidFuture(future)
}

func (a *EKSStub) WaitUntilNodegroupDeleted(ctx workflow.Context, input *eks.DescribeNodegroupInput) error {
	return workflow.ExecuteActivity(ctx, "aws.eks.WaitUntilNodegroupDeleted", input).Get(ctx, nil)
}

func (a *EKSStub) WaitUntilNodegroupDeletedAsync(ctx workflow.Context, input *eks.DescribeNodegroupInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.eks.WaitUntilNodegroupDeleted", input)
	return NewVoidFuture(future)
}
