// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/ecr"
	"go.temporal.io/sdk/workflow"
)

type ECRClient interface {
	BatchCheckLayerAvailability(ctx workflow.Context, input *ecr.BatchCheckLayerAvailabilityInput) (*ecr.BatchCheckLayerAvailabilityOutput, error)
	BatchCheckLayerAvailabilityAsync(ctx workflow.Context, input *ecr.BatchCheckLayerAvailabilityInput) *ECRBatchCheckLayerAvailabilityFuture

	BatchDeleteImage(ctx workflow.Context, input *ecr.BatchDeleteImageInput) (*ecr.BatchDeleteImageOutput, error)
	BatchDeleteImageAsync(ctx workflow.Context, input *ecr.BatchDeleteImageInput) *ECRBatchDeleteImageFuture

	BatchGetImage(ctx workflow.Context, input *ecr.BatchGetImageInput) (*ecr.BatchGetImageOutput, error)
	BatchGetImageAsync(ctx workflow.Context, input *ecr.BatchGetImageInput) *ECRBatchGetImageFuture

	CompleteLayerUpload(ctx workflow.Context, input *ecr.CompleteLayerUploadInput) (*ecr.CompleteLayerUploadOutput, error)
	CompleteLayerUploadAsync(ctx workflow.Context, input *ecr.CompleteLayerUploadInput) *ECRCompleteLayerUploadFuture

	CreateRepository(ctx workflow.Context, input *ecr.CreateRepositoryInput) (*ecr.CreateRepositoryOutput, error)
	CreateRepositoryAsync(ctx workflow.Context, input *ecr.CreateRepositoryInput) *ECRCreateRepositoryFuture

	DeleteLifecyclePolicy(ctx workflow.Context, input *ecr.DeleteLifecyclePolicyInput) (*ecr.DeleteLifecyclePolicyOutput, error)
	DeleteLifecyclePolicyAsync(ctx workflow.Context, input *ecr.DeleteLifecyclePolicyInput) *ECRDeleteLifecyclePolicyFuture

	DeleteRepository(ctx workflow.Context, input *ecr.DeleteRepositoryInput) (*ecr.DeleteRepositoryOutput, error)
	DeleteRepositoryAsync(ctx workflow.Context, input *ecr.DeleteRepositoryInput) *ECRDeleteRepositoryFuture

	DeleteRepositoryPolicy(ctx workflow.Context, input *ecr.DeleteRepositoryPolicyInput) (*ecr.DeleteRepositoryPolicyOutput, error)
	DeleteRepositoryPolicyAsync(ctx workflow.Context, input *ecr.DeleteRepositoryPolicyInput) *ECRDeleteRepositoryPolicyFuture

	DescribeImageScanFindings(ctx workflow.Context, input *ecr.DescribeImageScanFindingsInput) (*ecr.DescribeImageScanFindingsOutput, error)
	DescribeImageScanFindingsAsync(ctx workflow.Context, input *ecr.DescribeImageScanFindingsInput) *ECRDescribeImageScanFindingsFuture

	DescribeImages(ctx workflow.Context, input *ecr.DescribeImagesInput) (*ecr.DescribeImagesOutput, error)
	DescribeImagesAsync(ctx workflow.Context, input *ecr.DescribeImagesInput) *ECRDescribeImagesFuture

	DescribeRepositories(ctx workflow.Context, input *ecr.DescribeRepositoriesInput) (*ecr.DescribeRepositoriesOutput, error)
	DescribeRepositoriesAsync(ctx workflow.Context, input *ecr.DescribeRepositoriesInput) *ECRDescribeRepositoriesFuture

	GetAuthorizationToken(ctx workflow.Context, input *ecr.GetAuthorizationTokenInput) (*ecr.GetAuthorizationTokenOutput, error)
	GetAuthorizationTokenAsync(ctx workflow.Context, input *ecr.GetAuthorizationTokenInput) *ECRGetAuthorizationTokenFuture

	GetDownloadUrlForLayer(ctx workflow.Context, input *ecr.GetDownloadUrlForLayerInput) (*ecr.GetDownloadUrlForLayerOutput, error)
	GetDownloadUrlForLayerAsync(ctx workflow.Context, input *ecr.GetDownloadUrlForLayerInput) *ECRGetDownloadUrlForLayerFuture

	GetLifecyclePolicy(ctx workflow.Context, input *ecr.GetLifecyclePolicyInput) (*ecr.GetLifecyclePolicyOutput, error)
	GetLifecyclePolicyAsync(ctx workflow.Context, input *ecr.GetLifecyclePolicyInput) *ECRGetLifecyclePolicyFuture

	GetLifecyclePolicyPreview(ctx workflow.Context, input *ecr.GetLifecyclePolicyPreviewInput) (*ecr.GetLifecyclePolicyPreviewOutput, error)
	GetLifecyclePolicyPreviewAsync(ctx workflow.Context, input *ecr.GetLifecyclePolicyPreviewInput) *ECRGetLifecyclePolicyPreviewFuture

	GetRepositoryPolicy(ctx workflow.Context, input *ecr.GetRepositoryPolicyInput) (*ecr.GetRepositoryPolicyOutput, error)
	GetRepositoryPolicyAsync(ctx workflow.Context, input *ecr.GetRepositoryPolicyInput) *ECRGetRepositoryPolicyFuture

	InitiateLayerUpload(ctx workflow.Context, input *ecr.InitiateLayerUploadInput) (*ecr.InitiateLayerUploadOutput, error)
	InitiateLayerUploadAsync(ctx workflow.Context, input *ecr.InitiateLayerUploadInput) *ECRInitiateLayerUploadFuture

	ListImages(ctx workflow.Context, input *ecr.ListImagesInput) (*ecr.ListImagesOutput, error)
	ListImagesAsync(ctx workflow.Context, input *ecr.ListImagesInput) *ECRListImagesFuture

	ListTagsForResource(ctx workflow.Context, input *ecr.ListTagsForResourceInput) (*ecr.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *ecr.ListTagsForResourceInput) *ECRListTagsForResourceFuture

	PutImage(ctx workflow.Context, input *ecr.PutImageInput) (*ecr.PutImageOutput, error)
	PutImageAsync(ctx workflow.Context, input *ecr.PutImageInput) *ECRPutImageFuture

	PutImageScanningConfiguration(ctx workflow.Context, input *ecr.PutImageScanningConfigurationInput) (*ecr.PutImageScanningConfigurationOutput, error)
	PutImageScanningConfigurationAsync(ctx workflow.Context, input *ecr.PutImageScanningConfigurationInput) *ECRPutImageScanningConfigurationFuture

	PutImageTagMutability(ctx workflow.Context, input *ecr.PutImageTagMutabilityInput) (*ecr.PutImageTagMutabilityOutput, error)
	PutImageTagMutabilityAsync(ctx workflow.Context, input *ecr.PutImageTagMutabilityInput) *ECRPutImageTagMutabilityFuture

	PutLifecyclePolicy(ctx workflow.Context, input *ecr.PutLifecyclePolicyInput) (*ecr.PutLifecyclePolicyOutput, error)
	PutLifecyclePolicyAsync(ctx workflow.Context, input *ecr.PutLifecyclePolicyInput) *ECRPutLifecyclePolicyFuture

	SetRepositoryPolicy(ctx workflow.Context, input *ecr.SetRepositoryPolicyInput) (*ecr.SetRepositoryPolicyOutput, error)
	SetRepositoryPolicyAsync(ctx workflow.Context, input *ecr.SetRepositoryPolicyInput) *ECRSetRepositoryPolicyFuture

	StartImageScan(ctx workflow.Context, input *ecr.StartImageScanInput) (*ecr.StartImageScanOutput, error)
	StartImageScanAsync(ctx workflow.Context, input *ecr.StartImageScanInput) *ECRStartImageScanFuture

	StartLifecyclePolicyPreview(ctx workflow.Context, input *ecr.StartLifecyclePolicyPreviewInput) (*ecr.StartLifecyclePolicyPreviewOutput, error)
	StartLifecyclePolicyPreviewAsync(ctx workflow.Context, input *ecr.StartLifecyclePolicyPreviewInput) *ECRStartLifecyclePolicyPreviewFuture

	TagResource(ctx workflow.Context, input *ecr.TagResourceInput) (*ecr.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *ecr.TagResourceInput) *ECRTagResourceFuture

	UntagResource(ctx workflow.Context, input *ecr.UntagResourceInput) (*ecr.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *ecr.UntagResourceInput) *ECRUntagResourceFuture

	UploadLayerPart(ctx workflow.Context, input *ecr.UploadLayerPartInput) (*ecr.UploadLayerPartOutput, error)
	UploadLayerPartAsync(ctx workflow.Context, input *ecr.UploadLayerPartInput) *ECRUploadLayerPartFuture

	WaitUntilImageScanComplete(ctx workflow.Context, input *ecr.DescribeImageScanFindingsInput) error
	WaitUntilImageScanCompleteAsync(ctx workflow.Context, input *ecr.DescribeImageScanFindingsInput) *VoidFuture

	WaitUntilLifecyclePolicyPreviewComplete(ctx workflow.Context, input *ecr.GetLifecyclePolicyPreviewInput) error
	WaitUntilLifecyclePolicyPreviewCompleteAsync(ctx workflow.Context, input *ecr.GetLifecyclePolicyPreviewInput) *VoidFuture
}

type ECRStub struct{}

func NewECRStub() ECRClient {
	return &ECRStub{}
}

type ECRBatchCheckLayerAvailabilityFuture struct {
	Future workflow.Future
}

func (r *ECRBatchCheckLayerAvailabilityFuture) Get(ctx workflow.Context) (*ecr.BatchCheckLayerAvailabilityOutput, error) {
	var output ecr.BatchCheckLayerAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRBatchDeleteImageFuture struct {
	Future workflow.Future
}

func (r *ECRBatchDeleteImageFuture) Get(ctx workflow.Context) (*ecr.BatchDeleteImageOutput, error) {
	var output ecr.BatchDeleteImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRBatchGetImageFuture struct {
	Future workflow.Future
}

func (r *ECRBatchGetImageFuture) Get(ctx workflow.Context) (*ecr.BatchGetImageOutput, error) {
	var output ecr.BatchGetImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRCompleteLayerUploadFuture struct {
	Future workflow.Future
}

func (r *ECRCompleteLayerUploadFuture) Get(ctx workflow.Context) (*ecr.CompleteLayerUploadOutput, error) {
	var output ecr.CompleteLayerUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRCreateRepositoryFuture struct {
	Future workflow.Future
}

func (r *ECRCreateRepositoryFuture) Get(ctx workflow.Context) (*ecr.CreateRepositoryOutput, error) {
	var output ecr.CreateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRDeleteLifecyclePolicyFuture struct {
	Future workflow.Future
}

func (r *ECRDeleteLifecyclePolicyFuture) Get(ctx workflow.Context) (*ecr.DeleteLifecyclePolicyOutput, error) {
	var output ecr.DeleteLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRDeleteRepositoryFuture struct {
	Future workflow.Future
}

func (r *ECRDeleteRepositoryFuture) Get(ctx workflow.Context) (*ecr.DeleteRepositoryOutput, error) {
	var output ecr.DeleteRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRDeleteRepositoryPolicyFuture struct {
	Future workflow.Future
}

func (r *ECRDeleteRepositoryPolicyFuture) Get(ctx workflow.Context) (*ecr.DeleteRepositoryPolicyOutput, error) {
	var output ecr.DeleteRepositoryPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRDescribeImageScanFindingsFuture struct {
	Future workflow.Future
}

func (r *ECRDescribeImageScanFindingsFuture) Get(ctx workflow.Context) (*ecr.DescribeImageScanFindingsOutput, error) {
	var output ecr.DescribeImageScanFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRDescribeImagesFuture struct {
	Future workflow.Future
}

func (r *ECRDescribeImagesFuture) Get(ctx workflow.Context) (*ecr.DescribeImagesOutput, error) {
	var output ecr.DescribeImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRDescribeRepositoriesFuture struct {
	Future workflow.Future
}

func (r *ECRDescribeRepositoriesFuture) Get(ctx workflow.Context) (*ecr.DescribeRepositoriesOutput, error) {
	var output ecr.DescribeRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRGetAuthorizationTokenFuture struct {
	Future workflow.Future
}

func (r *ECRGetAuthorizationTokenFuture) Get(ctx workflow.Context) (*ecr.GetAuthorizationTokenOutput, error) {
	var output ecr.GetAuthorizationTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRGetDownloadUrlForLayerFuture struct {
	Future workflow.Future
}

func (r *ECRGetDownloadUrlForLayerFuture) Get(ctx workflow.Context) (*ecr.GetDownloadUrlForLayerOutput, error) {
	var output ecr.GetDownloadUrlForLayerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRGetLifecyclePolicyFuture struct {
	Future workflow.Future
}

func (r *ECRGetLifecyclePolicyFuture) Get(ctx workflow.Context) (*ecr.GetLifecyclePolicyOutput, error) {
	var output ecr.GetLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRGetLifecyclePolicyPreviewFuture struct {
	Future workflow.Future
}

func (r *ECRGetLifecyclePolicyPreviewFuture) Get(ctx workflow.Context) (*ecr.GetLifecyclePolicyPreviewOutput, error) {
	var output ecr.GetLifecyclePolicyPreviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRGetRepositoryPolicyFuture struct {
	Future workflow.Future
}

func (r *ECRGetRepositoryPolicyFuture) Get(ctx workflow.Context) (*ecr.GetRepositoryPolicyOutput, error) {
	var output ecr.GetRepositoryPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRInitiateLayerUploadFuture struct {
	Future workflow.Future
}

func (r *ECRInitiateLayerUploadFuture) Get(ctx workflow.Context) (*ecr.InitiateLayerUploadOutput, error) {
	var output ecr.InitiateLayerUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRListImagesFuture struct {
	Future workflow.Future
}

func (r *ECRListImagesFuture) Get(ctx workflow.Context) (*ecr.ListImagesOutput, error) {
	var output ecr.ListImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ECRListTagsForResourceFuture) Get(ctx workflow.Context) (*ecr.ListTagsForResourceOutput, error) {
	var output ecr.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRPutImageFuture struct {
	Future workflow.Future
}

func (r *ECRPutImageFuture) Get(ctx workflow.Context) (*ecr.PutImageOutput, error) {
	var output ecr.PutImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRPutImageScanningConfigurationFuture struct {
	Future workflow.Future
}

func (r *ECRPutImageScanningConfigurationFuture) Get(ctx workflow.Context) (*ecr.PutImageScanningConfigurationOutput, error) {
	var output ecr.PutImageScanningConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRPutImageTagMutabilityFuture struct {
	Future workflow.Future
}

func (r *ECRPutImageTagMutabilityFuture) Get(ctx workflow.Context) (*ecr.PutImageTagMutabilityOutput, error) {
	var output ecr.PutImageTagMutabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRPutLifecyclePolicyFuture struct {
	Future workflow.Future
}

func (r *ECRPutLifecyclePolicyFuture) Get(ctx workflow.Context) (*ecr.PutLifecyclePolicyOutput, error) {
	var output ecr.PutLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRSetRepositoryPolicyFuture struct {
	Future workflow.Future
}

func (r *ECRSetRepositoryPolicyFuture) Get(ctx workflow.Context) (*ecr.SetRepositoryPolicyOutput, error) {
	var output ecr.SetRepositoryPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRStartImageScanFuture struct {
	Future workflow.Future
}

func (r *ECRStartImageScanFuture) Get(ctx workflow.Context) (*ecr.StartImageScanOutput, error) {
	var output ecr.StartImageScanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRStartLifecyclePolicyPreviewFuture struct {
	Future workflow.Future
}

func (r *ECRStartLifecyclePolicyPreviewFuture) Get(ctx workflow.Context) (*ecr.StartLifecyclePolicyPreviewOutput, error) {
	var output ecr.StartLifecyclePolicyPreviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRTagResourceFuture struct {
	Future workflow.Future
}

func (r *ECRTagResourceFuture) Get(ctx workflow.Context) (*ecr.TagResourceOutput, error) {
	var output ecr.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRUntagResourceFuture struct {
	Future workflow.Future
}

func (r *ECRUntagResourceFuture) Get(ctx workflow.Context) (*ecr.UntagResourceOutput, error) {
	var output ecr.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ECRUploadLayerPartFuture struct {
	Future workflow.Future
}

func (r *ECRUploadLayerPartFuture) Get(ctx workflow.Context) (*ecr.UploadLayerPartOutput, error) {
	var output ecr.UploadLayerPartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) BatchCheckLayerAvailability(ctx workflow.Context, input *ecr.BatchCheckLayerAvailabilityInput) (*ecr.BatchCheckLayerAvailabilityOutput, error) {
	var output ecr.BatchCheckLayerAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.BatchCheckLayerAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) BatchCheckLayerAvailabilityAsync(ctx workflow.Context, input *ecr.BatchCheckLayerAvailabilityInput) *ECRBatchCheckLayerAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.BatchCheckLayerAvailability", input)
	return &ECRBatchCheckLayerAvailabilityFuture{Future: future}
}

func (a *ECRStub) BatchDeleteImage(ctx workflow.Context, input *ecr.BatchDeleteImageInput) (*ecr.BatchDeleteImageOutput, error) {
	var output ecr.BatchDeleteImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.BatchDeleteImage", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) BatchDeleteImageAsync(ctx workflow.Context, input *ecr.BatchDeleteImageInput) *ECRBatchDeleteImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.BatchDeleteImage", input)
	return &ECRBatchDeleteImageFuture{Future: future}
}

func (a *ECRStub) BatchGetImage(ctx workflow.Context, input *ecr.BatchGetImageInput) (*ecr.BatchGetImageOutput, error) {
	var output ecr.BatchGetImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.BatchGetImage", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) BatchGetImageAsync(ctx workflow.Context, input *ecr.BatchGetImageInput) *ECRBatchGetImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.BatchGetImage", input)
	return &ECRBatchGetImageFuture{Future: future}
}

func (a *ECRStub) CompleteLayerUpload(ctx workflow.Context, input *ecr.CompleteLayerUploadInput) (*ecr.CompleteLayerUploadOutput, error) {
	var output ecr.CompleteLayerUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.CompleteLayerUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) CompleteLayerUploadAsync(ctx workflow.Context, input *ecr.CompleteLayerUploadInput) *ECRCompleteLayerUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.CompleteLayerUpload", input)
	return &ECRCompleteLayerUploadFuture{Future: future}
}

func (a *ECRStub) CreateRepository(ctx workflow.Context, input *ecr.CreateRepositoryInput) (*ecr.CreateRepositoryOutput, error) {
	var output ecr.CreateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.CreateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) CreateRepositoryAsync(ctx workflow.Context, input *ecr.CreateRepositoryInput) *ECRCreateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.CreateRepository", input)
	return &ECRCreateRepositoryFuture{Future: future}
}

func (a *ECRStub) DeleteLifecyclePolicy(ctx workflow.Context, input *ecr.DeleteLifecyclePolicyInput) (*ecr.DeleteLifecyclePolicyOutput, error) {
	var output ecr.DeleteLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.DeleteLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) DeleteLifecyclePolicyAsync(ctx workflow.Context, input *ecr.DeleteLifecyclePolicyInput) *ECRDeleteLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.DeleteLifecyclePolicy", input)
	return &ECRDeleteLifecyclePolicyFuture{Future: future}
}

func (a *ECRStub) DeleteRepository(ctx workflow.Context, input *ecr.DeleteRepositoryInput) (*ecr.DeleteRepositoryOutput, error) {
	var output ecr.DeleteRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.DeleteRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) DeleteRepositoryAsync(ctx workflow.Context, input *ecr.DeleteRepositoryInput) *ECRDeleteRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.DeleteRepository", input)
	return &ECRDeleteRepositoryFuture{Future: future}
}

func (a *ECRStub) DeleteRepositoryPolicy(ctx workflow.Context, input *ecr.DeleteRepositoryPolicyInput) (*ecr.DeleteRepositoryPolicyOutput, error) {
	var output ecr.DeleteRepositoryPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.DeleteRepositoryPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) DeleteRepositoryPolicyAsync(ctx workflow.Context, input *ecr.DeleteRepositoryPolicyInput) *ECRDeleteRepositoryPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.DeleteRepositoryPolicy", input)
	return &ECRDeleteRepositoryPolicyFuture{Future: future}
}

func (a *ECRStub) DescribeImageScanFindings(ctx workflow.Context, input *ecr.DescribeImageScanFindingsInput) (*ecr.DescribeImageScanFindingsOutput, error) {
	var output ecr.DescribeImageScanFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.DescribeImageScanFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) DescribeImageScanFindingsAsync(ctx workflow.Context, input *ecr.DescribeImageScanFindingsInput) *ECRDescribeImageScanFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.DescribeImageScanFindings", input)
	return &ECRDescribeImageScanFindingsFuture{Future: future}
}

func (a *ECRStub) DescribeImages(ctx workflow.Context, input *ecr.DescribeImagesInput) (*ecr.DescribeImagesOutput, error) {
	var output ecr.DescribeImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.DescribeImages", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) DescribeImagesAsync(ctx workflow.Context, input *ecr.DescribeImagesInput) *ECRDescribeImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.DescribeImages", input)
	return &ECRDescribeImagesFuture{Future: future}
}

func (a *ECRStub) DescribeRepositories(ctx workflow.Context, input *ecr.DescribeRepositoriesInput) (*ecr.DescribeRepositoriesOutput, error) {
	var output ecr.DescribeRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.DescribeRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) DescribeRepositoriesAsync(ctx workflow.Context, input *ecr.DescribeRepositoriesInput) *ECRDescribeRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.DescribeRepositories", input)
	return &ECRDescribeRepositoriesFuture{Future: future}
}

func (a *ECRStub) GetAuthorizationToken(ctx workflow.Context, input *ecr.GetAuthorizationTokenInput) (*ecr.GetAuthorizationTokenOutput, error) {
	var output ecr.GetAuthorizationTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.GetAuthorizationToken", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) GetAuthorizationTokenAsync(ctx workflow.Context, input *ecr.GetAuthorizationTokenInput) *ECRGetAuthorizationTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.GetAuthorizationToken", input)
	return &ECRGetAuthorizationTokenFuture{Future: future}
}

func (a *ECRStub) GetDownloadUrlForLayer(ctx workflow.Context, input *ecr.GetDownloadUrlForLayerInput) (*ecr.GetDownloadUrlForLayerOutput, error) {
	var output ecr.GetDownloadUrlForLayerOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.GetDownloadUrlForLayer", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) GetDownloadUrlForLayerAsync(ctx workflow.Context, input *ecr.GetDownloadUrlForLayerInput) *ECRGetDownloadUrlForLayerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.GetDownloadUrlForLayer", input)
	return &ECRGetDownloadUrlForLayerFuture{Future: future}
}

func (a *ECRStub) GetLifecyclePolicy(ctx workflow.Context, input *ecr.GetLifecyclePolicyInput) (*ecr.GetLifecyclePolicyOutput, error) {
	var output ecr.GetLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.GetLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) GetLifecyclePolicyAsync(ctx workflow.Context, input *ecr.GetLifecyclePolicyInput) *ECRGetLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.GetLifecyclePolicy", input)
	return &ECRGetLifecyclePolicyFuture{Future: future}
}

func (a *ECRStub) GetLifecyclePolicyPreview(ctx workflow.Context, input *ecr.GetLifecyclePolicyPreviewInput) (*ecr.GetLifecyclePolicyPreviewOutput, error) {
	var output ecr.GetLifecyclePolicyPreviewOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.GetLifecyclePolicyPreview", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) GetLifecyclePolicyPreviewAsync(ctx workflow.Context, input *ecr.GetLifecyclePolicyPreviewInput) *ECRGetLifecyclePolicyPreviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.GetLifecyclePolicyPreview", input)
	return &ECRGetLifecyclePolicyPreviewFuture{Future: future}
}

func (a *ECRStub) GetRepositoryPolicy(ctx workflow.Context, input *ecr.GetRepositoryPolicyInput) (*ecr.GetRepositoryPolicyOutput, error) {
	var output ecr.GetRepositoryPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.GetRepositoryPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) GetRepositoryPolicyAsync(ctx workflow.Context, input *ecr.GetRepositoryPolicyInput) *ECRGetRepositoryPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.GetRepositoryPolicy", input)
	return &ECRGetRepositoryPolicyFuture{Future: future}
}

func (a *ECRStub) InitiateLayerUpload(ctx workflow.Context, input *ecr.InitiateLayerUploadInput) (*ecr.InitiateLayerUploadOutput, error) {
	var output ecr.InitiateLayerUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.InitiateLayerUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) InitiateLayerUploadAsync(ctx workflow.Context, input *ecr.InitiateLayerUploadInput) *ECRInitiateLayerUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.InitiateLayerUpload", input)
	return &ECRInitiateLayerUploadFuture{Future: future}
}

func (a *ECRStub) ListImages(ctx workflow.Context, input *ecr.ListImagesInput) (*ecr.ListImagesOutput, error) {
	var output ecr.ListImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.ListImages", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) ListImagesAsync(ctx workflow.Context, input *ecr.ListImagesInput) *ECRListImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.ListImages", input)
	return &ECRListImagesFuture{Future: future}
}

func (a *ECRStub) ListTagsForResource(ctx workflow.Context, input *ecr.ListTagsForResourceInput) (*ecr.ListTagsForResourceOutput, error) {
	var output ecr.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) ListTagsForResourceAsync(ctx workflow.Context, input *ecr.ListTagsForResourceInput) *ECRListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.ListTagsForResource", input)
	return &ECRListTagsForResourceFuture{Future: future}
}

func (a *ECRStub) PutImage(ctx workflow.Context, input *ecr.PutImageInput) (*ecr.PutImageOutput, error) {
	var output ecr.PutImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.PutImage", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) PutImageAsync(ctx workflow.Context, input *ecr.PutImageInput) *ECRPutImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.PutImage", input)
	return &ECRPutImageFuture{Future: future}
}

func (a *ECRStub) PutImageScanningConfiguration(ctx workflow.Context, input *ecr.PutImageScanningConfigurationInput) (*ecr.PutImageScanningConfigurationOutput, error) {
	var output ecr.PutImageScanningConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.PutImageScanningConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) PutImageScanningConfigurationAsync(ctx workflow.Context, input *ecr.PutImageScanningConfigurationInput) *ECRPutImageScanningConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.PutImageScanningConfiguration", input)
	return &ECRPutImageScanningConfigurationFuture{Future: future}
}

func (a *ECRStub) PutImageTagMutability(ctx workflow.Context, input *ecr.PutImageTagMutabilityInput) (*ecr.PutImageTagMutabilityOutput, error) {
	var output ecr.PutImageTagMutabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.PutImageTagMutability", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) PutImageTagMutabilityAsync(ctx workflow.Context, input *ecr.PutImageTagMutabilityInput) *ECRPutImageTagMutabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.PutImageTagMutability", input)
	return &ECRPutImageTagMutabilityFuture{Future: future}
}

func (a *ECRStub) PutLifecyclePolicy(ctx workflow.Context, input *ecr.PutLifecyclePolicyInput) (*ecr.PutLifecyclePolicyOutput, error) {
	var output ecr.PutLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.PutLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) PutLifecyclePolicyAsync(ctx workflow.Context, input *ecr.PutLifecyclePolicyInput) *ECRPutLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.PutLifecyclePolicy", input)
	return &ECRPutLifecyclePolicyFuture{Future: future}
}

func (a *ECRStub) SetRepositoryPolicy(ctx workflow.Context, input *ecr.SetRepositoryPolicyInput) (*ecr.SetRepositoryPolicyOutput, error) {
	var output ecr.SetRepositoryPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.SetRepositoryPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) SetRepositoryPolicyAsync(ctx workflow.Context, input *ecr.SetRepositoryPolicyInput) *ECRSetRepositoryPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.SetRepositoryPolicy", input)
	return &ECRSetRepositoryPolicyFuture{Future: future}
}

func (a *ECRStub) StartImageScan(ctx workflow.Context, input *ecr.StartImageScanInput) (*ecr.StartImageScanOutput, error) {
	var output ecr.StartImageScanOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.StartImageScan", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) StartImageScanAsync(ctx workflow.Context, input *ecr.StartImageScanInput) *ECRStartImageScanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.StartImageScan", input)
	return &ECRStartImageScanFuture{Future: future}
}

func (a *ECRStub) StartLifecyclePolicyPreview(ctx workflow.Context, input *ecr.StartLifecyclePolicyPreviewInput) (*ecr.StartLifecyclePolicyPreviewOutput, error) {
	var output ecr.StartLifecyclePolicyPreviewOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.StartLifecyclePolicyPreview", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) StartLifecyclePolicyPreviewAsync(ctx workflow.Context, input *ecr.StartLifecyclePolicyPreviewInput) *ECRStartLifecyclePolicyPreviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.StartLifecyclePolicyPreview", input)
	return &ECRStartLifecyclePolicyPreviewFuture{Future: future}
}

func (a *ECRStub) TagResource(ctx workflow.Context, input *ecr.TagResourceInput) (*ecr.TagResourceOutput, error) {
	var output ecr.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) TagResourceAsync(ctx workflow.Context, input *ecr.TagResourceInput) *ECRTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.TagResource", input)
	return &ECRTagResourceFuture{Future: future}
}

func (a *ECRStub) UntagResource(ctx workflow.Context, input *ecr.UntagResourceInput) (*ecr.UntagResourceOutput, error) {
	var output ecr.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) UntagResourceAsync(ctx workflow.Context, input *ecr.UntagResourceInput) *ECRUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.UntagResource", input)
	return &ECRUntagResourceFuture{Future: future}
}

func (a *ECRStub) UploadLayerPart(ctx workflow.Context, input *ecr.UploadLayerPartInput) (*ecr.UploadLayerPartOutput, error) {
	var output ecr.UploadLayerPartOutput
	err := workflow.ExecuteActivity(ctx, "aws.ecr.UploadLayerPart", input).Get(ctx, &output)
	return &output, err
}

func (a *ECRStub) UploadLayerPartAsync(ctx workflow.Context, input *ecr.UploadLayerPartInput) *ECRUploadLayerPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.UploadLayerPart", input)
	return &ECRUploadLayerPartFuture{Future: future}
}

func (a *ECRStub) WaitUntilImageScanComplete(ctx workflow.Context, input *ecr.DescribeImageScanFindingsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ecr.WaitUntilImageScanComplete", input).Get(ctx, nil)
}

func (a *ECRStub) WaitUntilImageScanCompleteAsync(ctx workflow.Context, input *ecr.DescribeImageScanFindingsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.WaitUntilImageScanComplete", input)
	return NewVoidFuture(future)
}

func (a *ECRStub) WaitUntilLifecyclePolicyPreviewComplete(ctx workflow.Context, input *ecr.GetLifecyclePolicyPreviewInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ecr.WaitUntilLifecyclePolicyPreviewComplete", input).Get(ctx, nil)
}

func (a *ECRStub) WaitUntilLifecyclePolicyPreviewCompleteAsync(ctx workflow.Context, input *ecr.GetLifecyclePolicyPreviewInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ecr.WaitUntilLifecyclePolicyPreviewComplete", input)
	return NewVoidFuture(future)
}
