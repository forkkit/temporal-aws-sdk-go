// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/servicecatalog"
	"go.temporal.io/sdk/workflow"
)

type ServiceCatalogClient interface {
	AcceptPortfolioShare(ctx workflow.Context, input *servicecatalog.AcceptPortfolioShareInput) (*servicecatalog.AcceptPortfolioShareOutput, error)
	AcceptPortfolioShareAsync(ctx workflow.Context, input *servicecatalog.AcceptPortfolioShareInput) *ServicecatalogAcceptPortfolioShareFuture

	AssociateBudgetWithResource(ctx workflow.Context, input *servicecatalog.AssociateBudgetWithResourceInput) (*servicecatalog.AssociateBudgetWithResourceOutput, error)
	AssociateBudgetWithResourceAsync(ctx workflow.Context, input *servicecatalog.AssociateBudgetWithResourceInput) *ServicecatalogAssociateBudgetWithResourceFuture

	AssociatePrincipalWithPortfolio(ctx workflow.Context, input *servicecatalog.AssociatePrincipalWithPortfolioInput) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error)
	AssociatePrincipalWithPortfolioAsync(ctx workflow.Context, input *servicecatalog.AssociatePrincipalWithPortfolioInput) *ServicecatalogAssociatePrincipalWithPortfolioFuture

	AssociateProductWithPortfolio(ctx workflow.Context, input *servicecatalog.AssociateProductWithPortfolioInput) (*servicecatalog.AssociateProductWithPortfolioOutput, error)
	AssociateProductWithPortfolioAsync(ctx workflow.Context, input *servicecatalog.AssociateProductWithPortfolioInput) *ServicecatalogAssociateProductWithPortfolioFuture

	AssociateServiceActionWithProvisioningArtifact(ctx workflow.Context, input *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error)
	AssociateServiceActionWithProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) *ServicecatalogAssociateServiceActionWithProvisioningArtifactFuture

	AssociateTagOptionWithResource(ctx workflow.Context, input *servicecatalog.AssociateTagOptionWithResourceInput) (*servicecatalog.AssociateTagOptionWithResourceOutput, error)
	AssociateTagOptionWithResourceAsync(ctx workflow.Context, input *servicecatalog.AssociateTagOptionWithResourceInput) *ServicecatalogAssociateTagOptionWithResourceFuture

	BatchAssociateServiceActionWithProvisioningArtifact(ctx workflow.Context, input *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error)
	BatchAssociateServiceActionWithProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) *ServicecatalogBatchAssociateServiceActionWithProvisioningArtifactFuture

	BatchDisassociateServiceActionFromProvisioningArtifact(ctx workflow.Context, input *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error)
	BatchDisassociateServiceActionFromProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) *ServicecatalogBatchDisassociateServiceActionFromProvisioningArtifactFuture

	CopyProduct(ctx workflow.Context, input *servicecatalog.CopyProductInput) (*servicecatalog.CopyProductOutput, error)
	CopyProductAsync(ctx workflow.Context, input *servicecatalog.CopyProductInput) *ServicecatalogCopyProductFuture

	CreateConstraint(ctx workflow.Context, input *servicecatalog.CreateConstraintInput) (*servicecatalog.CreateConstraintOutput, error)
	CreateConstraintAsync(ctx workflow.Context, input *servicecatalog.CreateConstraintInput) *ServicecatalogCreateConstraintFuture

	CreatePortfolio(ctx workflow.Context, input *servicecatalog.CreatePortfolioInput) (*servicecatalog.CreatePortfolioOutput, error)
	CreatePortfolioAsync(ctx workflow.Context, input *servicecatalog.CreatePortfolioInput) *ServicecatalogCreatePortfolioFuture

	CreatePortfolioShare(ctx workflow.Context, input *servicecatalog.CreatePortfolioShareInput) (*servicecatalog.CreatePortfolioShareOutput, error)
	CreatePortfolioShareAsync(ctx workflow.Context, input *servicecatalog.CreatePortfolioShareInput) *ServicecatalogCreatePortfolioShareFuture

	CreateProduct(ctx workflow.Context, input *servicecatalog.CreateProductInput) (*servicecatalog.CreateProductOutput, error)
	CreateProductAsync(ctx workflow.Context, input *servicecatalog.CreateProductInput) *ServicecatalogCreateProductFuture

	CreateProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.CreateProvisionedProductPlanInput) (*servicecatalog.CreateProvisionedProductPlanOutput, error)
	CreateProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.CreateProvisionedProductPlanInput) *ServicecatalogCreateProvisionedProductPlanFuture

	CreateProvisioningArtifact(ctx workflow.Context, input *servicecatalog.CreateProvisioningArtifactInput) (*servicecatalog.CreateProvisioningArtifactOutput, error)
	CreateProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.CreateProvisioningArtifactInput) *ServicecatalogCreateProvisioningArtifactFuture

	CreateServiceAction(ctx workflow.Context, input *servicecatalog.CreateServiceActionInput) (*servicecatalog.CreateServiceActionOutput, error)
	CreateServiceActionAsync(ctx workflow.Context, input *servicecatalog.CreateServiceActionInput) *ServicecatalogCreateServiceActionFuture

	CreateTagOption(ctx workflow.Context, input *servicecatalog.CreateTagOptionInput) (*servicecatalog.CreateTagOptionOutput, error)
	CreateTagOptionAsync(ctx workflow.Context, input *servicecatalog.CreateTagOptionInput) *ServicecatalogCreateTagOptionFuture

	DeleteConstraint(ctx workflow.Context, input *servicecatalog.DeleteConstraintInput) (*servicecatalog.DeleteConstraintOutput, error)
	DeleteConstraintAsync(ctx workflow.Context, input *servicecatalog.DeleteConstraintInput) *ServicecatalogDeleteConstraintFuture

	DeletePortfolio(ctx workflow.Context, input *servicecatalog.DeletePortfolioInput) (*servicecatalog.DeletePortfolioOutput, error)
	DeletePortfolioAsync(ctx workflow.Context, input *servicecatalog.DeletePortfolioInput) *ServicecatalogDeletePortfolioFuture

	DeletePortfolioShare(ctx workflow.Context, input *servicecatalog.DeletePortfolioShareInput) (*servicecatalog.DeletePortfolioShareOutput, error)
	DeletePortfolioShareAsync(ctx workflow.Context, input *servicecatalog.DeletePortfolioShareInput) *ServicecatalogDeletePortfolioShareFuture

	DeleteProduct(ctx workflow.Context, input *servicecatalog.DeleteProductInput) (*servicecatalog.DeleteProductOutput, error)
	DeleteProductAsync(ctx workflow.Context, input *servicecatalog.DeleteProductInput) *ServicecatalogDeleteProductFuture

	DeleteProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.DeleteProvisionedProductPlanInput) (*servicecatalog.DeleteProvisionedProductPlanOutput, error)
	DeleteProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.DeleteProvisionedProductPlanInput) *ServicecatalogDeleteProvisionedProductPlanFuture

	DeleteProvisioningArtifact(ctx workflow.Context, input *servicecatalog.DeleteProvisioningArtifactInput) (*servicecatalog.DeleteProvisioningArtifactOutput, error)
	DeleteProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.DeleteProvisioningArtifactInput) *ServicecatalogDeleteProvisioningArtifactFuture

	DeleteServiceAction(ctx workflow.Context, input *servicecatalog.DeleteServiceActionInput) (*servicecatalog.DeleteServiceActionOutput, error)
	DeleteServiceActionAsync(ctx workflow.Context, input *servicecatalog.DeleteServiceActionInput) *ServicecatalogDeleteServiceActionFuture

	DeleteTagOption(ctx workflow.Context, input *servicecatalog.DeleteTagOptionInput) (*servicecatalog.DeleteTagOptionOutput, error)
	DeleteTagOptionAsync(ctx workflow.Context, input *servicecatalog.DeleteTagOptionInput) *ServicecatalogDeleteTagOptionFuture

	DescribeConstraint(ctx workflow.Context, input *servicecatalog.DescribeConstraintInput) (*servicecatalog.DescribeConstraintOutput, error)
	DescribeConstraintAsync(ctx workflow.Context, input *servicecatalog.DescribeConstraintInput) *ServicecatalogDescribeConstraintFuture

	DescribeCopyProductStatus(ctx workflow.Context, input *servicecatalog.DescribeCopyProductStatusInput) (*servicecatalog.DescribeCopyProductStatusOutput, error)
	DescribeCopyProductStatusAsync(ctx workflow.Context, input *servicecatalog.DescribeCopyProductStatusInput) *ServicecatalogDescribeCopyProductStatusFuture

	DescribePortfolio(ctx workflow.Context, input *servicecatalog.DescribePortfolioInput) (*servicecatalog.DescribePortfolioOutput, error)
	DescribePortfolioAsync(ctx workflow.Context, input *servicecatalog.DescribePortfolioInput) *ServicecatalogDescribePortfolioFuture

	DescribePortfolioShareStatus(ctx workflow.Context, input *servicecatalog.DescribePortfolioShareStatusInput) (*servicecatalog.DescribePortfolioShareStatusOutput, error)
	DescribePortfolioShareStatusAsync(ctx workflow.Context, input *servicecatalog.DescribePortfolioShareStatusInput) *ServicecatalogDescribePortfolioShareStatusFuture

	DescribeProduct(ctx workflow.Context, input *servicecatalog.DescribeProductInput) (*servicecatalog.DescribeProductOutput, error)
	DescribeProductAsync(ctx workflow.Context, input *servicecatalog.DescribeProductInput) *ServicecatalogDescribeProductFuture

	DescribeProductAsAdmin(ctx workflow.Context, input *servicecatalog.DescribeProductAsAdminInput) (*servicecatalog.DescribeProductAsAdminOutput, error)
	DescribeProductAsAdminAsync(ctx workflow.Context, input *servicecatalog.DescribeProductAsAdminInput) *ServicecatalogDescribeProductAsAdminFuture

	DescribeProductView(ctx workflow.Context, input *servicecatalog.DescribeProductViewInput) (*servicecatalog.DescribeProductViewOutput, error)
	DescribeProductViewAsync(ctx workflow.Context, input *servicecatalog.DescribeProductViewInput) *ServicecatalogDescribeProductViewFuture

	DescribeProvisionedProduct(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductInput) (*servicecatalog.DescribeProvisionedProductOutput, error)
	DescribeProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductInput) *ServicecatalogDescribeProvisionedProductFuture

	DescribeProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductPlanInput) (*servicecatalog.DescribeProvisionedProductPlanOutput, error)
	DescribeProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductPlanInput) *ServicecatalogDescribeProvisionedProductPlanFuture

	DescribeProvisioningArtifact(ctx workflow.Context, input *servicecatalog.DescribeProvisioningArtifactInput) (*servicecatalog.DescribeProvisioningArtifactOutput, error)
	DescribeProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisioningArtifactInput) *ServicecatalogDescribeProvisioningArtifactFuture

	DescribeProvisioningParameters(ctx workflow.Context, input *servicecatalog.DescribeProvisioningParametersInput) (*servicecatalog.DescribeProvisioningParametersOutput, error)
	DescribeProvisioningParametersAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisioningParametersInput) *ServicecatalogDescribeProvisioningParametersFuture

	DescribeRecord(ctx workflow.Context, input *servicecatalog.DescribeRecordInput) (*servicecatalog.DescribeRecordOutput, error)
	DescribeRecordAsync(ctx workflow.Context, input *servicecatalog.DescribeRecordInput) *ServicecatalogDescribeRecordFuture

	DescribeServiceAction(ctx workflow.Context, input *servicecatalog.DescribeServiceActionInput) (*servicecatalog.DescribeServiceActionOutput, error)
	DescribeServiceActionAsync(ctx workflow.Context, input *servicecatalog.DescribeServiceActionInput) *ServicecatalogDescribeServiceActionFuture

	DescribeServiceActionExecutionParameters(ctx workflow.Context, input *servicecatalog.DescribeServiceActionExecutionParametersInput) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error)
	DescribeServiceActionExecutionParametersAsync(ctx workflow.Context, input *servicecatalog.DescribeServiceActionExecutionParametersInput) *ServicecatalogDescribeServiceActionExecutionParametersFuture

	DescribeTagOption(ctx workflow.Context, input *servicecatalog.DescribeTagOptionInput) (*servicecatalog.DescribeTagOptionOutput, error)
	DescribeTagOptionAsync(ctx workflow.Context, input *servicecatalog.DescribeTagOptionInput) *ServicecatalogDescribeTagOptionFuture

	DisableAWSOrganizationsAccess(ctx workflow.Context, input *servicecatalog.DisableAWSOrganizationsAccessInput) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error)
	DisableAWSOrganizationsAccessAsync(ctx workflow.Context, input *servicecatalog.DisableAWSOrganizationsAccessInput) *ServicecatalogDisableAWSOrganizationsAccessFuture

	DisassociateBudgetFromResource(ctx workflow.Context, input *servicecatalog.DisassociateBudgetFromResourceInput) (*servicecatalog.DisassociateBudgetFromResourceOutput, error)
	DisassociateBudgetFromResourceAsync(ctx workflow.Context, input *servicecatalog.DisassociateBudgetFromResourceInput) *ServicecatalogDisassociateBudgetFromResourceFuture

	DisassociatePrincipalFromPortfolio(ctx workflow.Context, input *servicecatalog.DisassociatePrincipalFromPortfolioInput) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error)
	DisassociatePrincipalFromPortfolioAsync(ctx workflow.Context, input *servicecatalog.DisassociatePrincipalFromPortfolioInput) *ServicecatalogDisassociatePrincipalFromPortfolioFuture

	DisassociateProductFromPortfolio(ctx workflow.Context, input *servicecatalog.DisassociateProductFromPortfolioInput) (*servicecatalog.DisassociateProductFromPortfolioOutput, error)
	DisassociateProductFromPortfolioAsync(ctx workflow.Context, input *servicecatalog.DisassociateProductFromPortfolioInput) *ServicecatalogDisassociateProductFromPortfolioFuture

	DisassociateServiceActionFromProvisioningArtifact(ctx workflow.Context, input *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error)
	DisassociateServiceActionFromProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) *ServicecatalogDisassociateServiceActionFromProvisioningArtifactFuture

	DisassociateTagOptionFromResource(ctx workflow.Context, input *servicecatalog.DisassociateTagOptionFromResourceInput) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error)
	DisassociateTagOptionFromResourceAsync(ctx workflow.Context, input *servicecatalog.DisassociateTagOptionFromResourceInput) *ServicecatalogDisassociateTagOptionFromResourceFuture

	EnableAWSOrganizationsAccess(ctx workflow.Context, input *servicecatalog.EnableAWSOrganizationsAccessInput) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error)
	EnableAWSOrganizationsAccessAsync(ctx workflow.Context, input *servicecatalog.EnableAWSOrganizationsAccessInput) *ServicecatalogEnableAWSOrganizationsAccessFuture

	ExecuteProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductPlanInput) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error)
	ExecuteProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductPlanInput) *ServicecatalogExecuteProvisionedProductPlanFuture

	ExecuteProvisionedProductServiceAction(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductServiceActionInput) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error)
	ExecuteProvisionedProductServiceActionAsync(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductServiceActionInput) *ServicecatalogExecuteProvisionedProductServiceActionFuture

	GetAWSOrganizationsAccessStatus(ctx workflow.Context, input *servicecatalog.GetAWSOrganizationsAccessStatusInput) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error)
	GetAWSOrganizationsAccessStatusAsync(ctx workflow.Context, input *servicecatalog.GetAWSOrganizationsAccessStatusInput) *ServicecatalogGetAWSOrganizationsAccessStatusFuture

	GetProvisionedProductOutputs(ctx workflow.Context, input *servicecatalog.GetProvisionedProductOutputsInput) (*servicecatalog.GetProvisionedProductOutputsOutput, error)
	GetProvisionedProductOutputsAsync(ctx workflow.Context, input *servicecatalog.GetProvisionedProductOutputsInput) *ServicecatalogGetProvisionedProductOutputsFuture

	ListAcceptedPortfolioShares(ctx workflow.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error)
	ListAcceptedPortfolioSharesAsync(ctx workflow.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput) *ServicecatalogListAcceptedPortfolioSharesFuture

	ListBudgetsForResource(ctx workflow.Context, input *servicecatalog.ListBudgetsForResourceInput) (*servicecatalog.ListBudgetsForResourceOutput, error)
	ListBudgetsForResourceAsync(ctx workflow.Context, input *servicecatalog.ListBudgetsForResourceInput) *ServicecatalogListBudgetsForResourceFuture

	ListConstraintsForPortfolio(ctx workflow.Context, input *servicecatalog.ListConstraintsForPortfolioInput) (*servicecatalog.ListConstraintsForPortfolioOutput, error)
	ListConstraintsForPortfolioAsync(ctx workflow.Context, input *servicecatalog.ListConstraintsForPortfolioInput) *ServicecatalogListConstraintsForPortfolioFuture

	ListLaunchPaths(ctx workflow.Context, input *servicecatalog.ListLaunchPathsInput) (*servicecatalog.ListLaunchPathsOutput, error)
	ListLaunchPathsAsync(ctx workflow.Context, input *servicecatalog.ListLaunchPathsInput) *ServicecatalogListLaunchPathsFuture

	ListOrganizationPortfolioAccess(ctx workflow.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error)
	ListOrganizationPortfolioAccessAsync(ctx workflow.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput) *ServicecatalogListOrganizationPortfolioAccessFuture

	ListPortfolioAccess(ctx workflow.Context, input *servicecatalog.ListPortfolioAccessInput) (*servicecatalog.ListPortfolioAccessOutput, error)
	ListPortfolioAccessAsync(ctx workflow.Context, input *servicecatalog.ListPortfolioAccessInput) *ServicecatalogListPortfolioAccessFuture

	ListPortfolios(ctx workflow.Context, input *servicecatalog.ListPortfoliosInput) (*servicecatalog.ListPortfoliosOutput, error)
	ListPortfoliosAsync(ctx workflow.Context, input *servicecatalog.ListPortfoliosInput) *ServicecatalogListPortfoliosFuture

	ListPortfoliosForProduct(ctx workflow.Context, input *servicecatalog.ListPortfoliosForProductInput) (*servicecatalog.ListPortfoliosForProductOutput, error)
	ListPortfoliosForProductAsync(ctx workflow.Context, input *servicecatalog.ListPortfoliosForProductInput) *ServicecatalogListPortfoliosForProductFuture

	ListPrincipalsForPortfolio(ctx workflow.Context, input *servicecatalog.ListPrincipalsForPortfolioInput) (*servicecatalog.ListPrincipalsForPortfolioOutput, error)
	ListPrincipalsForPortfolioAsync(ctx workflow.Context, input *servicecatalog.ListPrincipalsForPortfolioInput) *ServicecatalogListPrincipalsForPortfolioFuture

	ListProvisionedProductPlans(ctx workflow.Context, input *servicecatalog.ListProvisionedProductPlansInput) (*servicecatalog.ListProvisionedProductPlansOutput, error)
	ListProvisionedProductPlansAsync(ctx workflow.Context, input *servicecatalog.ListProvisionedProductPlansInput) *ServicecatalogListProvisionedProductPlansFuture

	ListProvisioningArtifacts(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsInput) (*servicecatalog.ListProvisioningArtifactsOutput, error)
	ListProvisioningArtifactsAsync(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsInput) *ServicecatalogListProvisioningArtifactsFuture

	ListProvisioningArtifactsForServiceAction(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error)
	ListProvisioningArtifactsForServiceActionAsync(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput) *ServicecatalogListProvisioningArtifactsForServiceActionFuture

	ListRecordHistory(ctx workflow.Context, input *servicecatalog.ListRecordHistoryInput) (*servicecatalog.ListRecordHistoryOutput, error)
	ListRecordHistoryAsync(ctx workflow.Context, input *servicecatalog.ListRecordHistoryInput) *ServicecatalogListRecordHistoryFuture

	ListResourcesForTagOption(ctx workflow.Context, input *servicecatalog.ListResourcesForTagOptionInput) (*servicecatalog.ListResourcesForTagOptionOutput, error)
	ListResourcesForTagOptionAsync(ctx workflow.Context, input *servicecatalog.ListResourcesForTagOptionInput) *ServicecatalogListResourcesForTagOptionFuture

	ListServiceActions(ctx workflow.Context, input *servicecatalog.ListServiceActionsInput) (*servicecatalog.ListServiceActionsOutput, error)
	ListServiceActionsAsync(ctx workflow.Context, input *servicecatalog.ListServiceActionsInput) *ServicecatalogListServiceActionsFuture

	ListServiceActionsForProvisioningArtifact(ctx workflow.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error)
	ListServiceActionsForProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput) *ServicecatalogListServiceActionsForProvisioningArtifactFuture

	ListStackInstancesForProvisionedProduct(ctx workflow.Context, input *servicecatalog.ListStackInstancesForProvisionedProductInput) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error)
	ListStackInstancesForProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.ListStackInstancesForProvisionedProductInput) *ServicecatalogListStackInstancesForProvisionedProductFuture

	ListTagOptions(ctx workflow.Context, input *servicecatalog.ListTagOptionsInput) (*servicecatalog.ListTagOptionsOutput, error)
	ListTagOptionsAsync(ctx workflow.Context, input *servicecatalog.ListTagOptionsInput) *ServicecatalogListTagOptionsFuture

	ProvisionProduct(ctx workflow.Context, input *servicecatalog.ProvisionProductInput) (*servicecatalog.ProvisionProductOutput, error)
	ProvisionProductAsync(ctx workflow.Context, input *servicecatalog.ProvisionProductInput) *ServicecatalogProvisionProductFuture

	RejectPortfolioShare(ctx workflow.Context, input *servicecatalog.RejectPortfolioShareInput) (*servicecatalog.RejectPortfolioShareOutput, error)
	RejectPortfolioShareAsync(ctx workflow.Context, input *servicecatalog.RejectPortfolioShareInput) *ServicecatalogRejectPortfolioShareFuture

	ScanProvisionedProducts(ctx workflow.Context, input *servicecatalog.ScanProvisionedProductsInput) (*servicecatalog.ScanProvisionedProductsOutput, error)
	ScanProvisionedProductsAsync(ctx workflow.Context, input *servicecatalog.ScanProvisionedProductsInput) *ServicecatalogScanProvisionedProductsFuture

	SearchProducts(ctx workflow.Context, input *servicecatalog.SearchProductsInput) (*servicecatalog.SearchProductsOutput, error)
	SearchProductsAsync(ctx workflow.Context, input *servicecatalog.SearchProductsInput) *ServicecatalogSearchProductsFuture

	SearchProductsAsAdmin(ctx workflow.Context, input *servicecatalog.SearchProductsAsAdminInput) (*servicecatalog.SearchProductsAsAdminOutput, error)
	SearchProductsAsAdminAsync(ctx workflow.Context, input *servicecatalog.SearchProductsAsAdminInput) *ServicecatalogSearchProductsAsAdminFuture

	SearchProvisionedProducts(ctx workflow.Context, input *servicecatalog.SearchProvisionedProductsInput) (*servicecatalog.SearchProvisionedProductsOutput, error)
	SearchProvisionedProductsAsync(ctx workflow.Context, input *servicecatalog.SearchProvisionedProductsInput) *ServicecatalogSearchProvisionedProductsFuture

	TerminateProvisionedProduct(ctx workflow.Context, input *servicecatalog.TerminateProvisionedProductInput) (*servicecatalog.TerminateProvisionedProductOutput, error)
	TerminateProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.TerminateProvisionedProductInput) *ServicecatalogTerminateProvisionedProductFuture

	UpdateConstraint(ctx workflow.Context, input *servicecatalog.UpdateConstraintInput) (*servicecatalog.UpdateConstraintOutput, error)
	UpdateConstraintAsync(ctx workflow.Context, input *servicecatalog.UpdateConstraintInput) *ServicecatalogUpdateConstraintFuture

	UpdatePortfolio(ctx workflow.Context, input *servicecatalog.UpdatePortfolioInput) (*servicecatalog.UpdatePortfolioOutput, error)
	UpdatePortfolioAsync(ctx workflow.Context, input *servicecatalog.UpdatePortfolioInput) *ServicecatalogUpdatePortfolioFuture

	UpdateProduct(ctx workflow.Context, input *servicecatalog.UpdateProductInput) (*servicecatalog.UpdateProductOutput, error)
	UpdateProductAsync(ctx workflow.Context, input *servicecatalog.UpdateProductInput) *ServicecatalogUpdateProductFuture

	UpdateProvisionedProduct(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductInput) (*servicecatalog.UpdateProvisionedProductOutput, error)
	UpdateProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductInput) *ServicecatalogUpdateProvisionedProductFuture

	UpdateProvisionedProductProperties(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductPropertiesInput) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error)
	UpdateProvisionedProductPropertiesAsync(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductPropertiesInput) *ServicecatalogUpdateProvisionedProductPropertiesFuture

	UpdateProvisioningArtifact(ctx workflow.Context, input *servicecatalog.UpdateProvisioningArtifactInput) (*servicecatalog.UpdateProvisioningArtifactOutput, error)
	UpdateProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.UpdateProvisioningArtifactInput) *ServicecatalogUpdateProvisioningArtifactFuture

	UpdateServiceAction(ctx workflow.Context, input *servicecatalog.UpdateServiceActionInput) (*servicecatalog.UpdateServiceActionOutput, error)
	UpdateServiceActionAsync(ctx workflow.Context, input *servicecatalog.UpdateServiceActionInput) *ServicecatalogUpdateServiceActionFuture

	UpdateTagOption(ctx workflow.Context, input *servicecatalog.UpdateTagOptionInput) (*servicecatalog.UpdateTagOptionOutput, error)
	UpdateTagOptionAsync(ctx workflow.Context, input *servicecatalog.UpdateTagOptionInput) *ServicecatalogUpdateTagOptionFuture
}

type ServiceCatalogStub struct{}

func NewServiceCatalogStub() ServiceCatalogClient {
	return &ServiceCatalogStub{}
}

type ServicecatalogAcceptPortfolioShareFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogAcceptPortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.AcceptPortfolioShareOutput, error) {
	var output servicecatalog.AcceptPortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogAssociateBudgetWithResourceFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogAssociateBudgetWithResourceFuture) Get(ctx workflow.Context) (*servicecatalog.AssociateBudgetWithResourceOutput, error) {
	var output servicecatalog.AssociateBudgetWithResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogAssociatePrincipalWithPortfolioFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogAssociatePrincipalWithPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error) {
	var output servicecatalog.AssociatePrincipalWithPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogAssociateProductWithPortfolioFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogAssociateProductWithPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.AssociateProductWithPortfolioOutput, error) {
	var output servicecatalog.AssociateProductWithPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogAssociateServiceActionWithProvisioningArtifactFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogAssociateServiceActionWithProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error) {
	var output servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogAssociateTagOptionWithResourceFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogAssociateTagOptionWithResourceFuture) Get(ctx workflow.Context) (*servicecatalog.AssociateTagOptionWithResourceOutput, error) {
	var output servicecatalog.AssociateTagOptionWithResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogBatchAssociateServiceActionWithProvisioningArtifactFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogBatchAssociateServiceActionWithProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error) {
	var output servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogBatchDisassociateServiceActionFromProvisioningArtifactFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogBatchDisassociateServiceActionFromProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error) {
	var output servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogCopyProductFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogCopyProductFuture) Get(ctx workflow.Context) (*servicecatalog.CopyProductOutput, error) {
	var output servicecatalog.CopyProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogCreateConstraintFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogCreateConstraintFuture) Get(ctx workflow.Context) (*servicecatalog.CreateConstraintOutput, error) {
	var output servicecatalog.CreateConstraintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogCreatePortfolioFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogCreatePortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.CreatePortfolioOutput, error) {
	var output servicecatalog.CreatePortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogCreatePortfolioShareFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogCreatePortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.CreatePortfolioShareOutput, error) {
	var output servicecatalog.CreatePortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogCreateProductFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogCreateProductFuture) Get(ctx workflow.Context) (*servicecatalog.CreateProductOutput, error) {
	var output servicecatalog.CreateProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogCreateProvisionedProductPlanFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogCreateProvisionedProductPlanFuture) Get(ctx workflow.Context) (*servicecatalog.CreateProvisionedProductPlanOutput, error) {
	var output servicecatalog.CreateProvisionedProductPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogCreateProvisioningArtifactFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogCreateProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.CreateProvisioningArtifactOutput, error) {
	var output servicecatalog.CreateProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogCreateServiceActionFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogCreateServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.CreateServiceActionOutput, error) {
	var output servicecatalog.CreateServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogCreateTagOptionFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogCreateTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.CreateTagOptionOutput, error) {
	var output servicecatalog.CreateTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDeleteConstraintFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDeleteConstraintFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteConstraintOutput, error) {
	var output servicecatalog.DeleteConstraintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDeletePortfolioFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDeletePortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.DeletePortfolioOutput, error) {
	var output servicecatalog.DeletePortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDeletePortfolioShareFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDeletePortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.DeletePortfolioShareOutput, error) {
	var output servicecatalog.DeletePortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDeleteProductFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDeleteProductFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteProductOutput, error) {
	var output servicecatalog.DeleteProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDeleteProvisionedProductPlanFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDeleteProvisionedProductPlanFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteProvisionedProductPlanOutput, error) {
	var output servicecatalog.DeleteProvisionedProductPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDeleteProvisioningArtifactFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDeleteProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteProvisioningArtifactOutput, error) {
	var output servicecatalog.DeleteProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDeleteServiceActionFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDeleteServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteServiceActionOutput, error) {
	var output servicecatalog.DeleteServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDeleteTagOptionFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDeleteTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteTagOptionOutput, error) {
	var output servicecatalog.DeleteTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeConstraintFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeConstraintFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeConstraintOutput, error) {
	var output servicecatalog.DescribeConstraintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeCopyProductStatusFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeCopyProductStatusFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeCopyProductStatusOutput, error) {
	var output servicecatalog.DescribeCopyProductStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribePortfolioFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribePortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.DescribePortfolioOutput, error) {
	var output servicecatalog.DescribePortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribePortfolioShareStatusFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribePortfolioShareStatusFuture) Get(ctx workflow.Context) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {
	var output servicecatalog.DescribePortfolioShareStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeProductFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeProductFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProductOutput, error) {
	var output servicecatalog.DescribeProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeProductAsAdminFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeProductAsAdminFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProductAsAdminOutput, error) {
	var output servicecatalog.DescribeProductAsAdminOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeProductViewFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeProductViewFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProductViewOutput, error) {
	var output servicecatalog.DescribeProductViewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeProvisionedProductFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProvisionedProductOutput, error) {
	var output servicecatalog.DescribeProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeProvisionedProductPlanFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeProvisionedProductPlanFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {
	var output servicecatalog.DescribeProvisionedProductPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeProvisioningArtifactFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {
	var output servicecatalog.DescribeProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeProvisioningParametersFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeProvisioningParametersFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProvisioningParametersOutput, error) {
	var output servicecatalog.DescribeProvisioningParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeRecordFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeRecordFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeRecordOutput, error) {
	var output servicecatalog.DescribeRecordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeServiceActionFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeServiceActionOutput, error) {
	var output servicecatalog.DescribeServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeServiceActionExecutionParametersFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeServiceActionExecutionParametersFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {
	var output servicecatalog.DescribeServiceActionExecutionParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDescribeTagOptionFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDescribeTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeTagOptionOutput, error) {
	var output servicecatalog.DescribeTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDisableAWSOrganizationsAccessFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDisableAWSOrganizationsAccessFuture) Get(ctx workflow.Context) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error) {
	var output servicecatalog.DisableAWSOrganizationsAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDisassociateBudgetFromResourceFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDisassociateBudgetFromResourceFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociateBudgetFromResourceOutput, error) {
	var output servicecatalog.DisassociateBudgetFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDisassociatePrincipalFromPortfolioFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDisassociatePrincipalFromPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error) {
	var output servicecatalog.DisassociatePrincipalFromPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDisassociateProductFromPortfolioFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDisassociateProductFromPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociateProductFromPortfolioOutput, error) {
	var output servicecatalog.DisassociateProductFromPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDisassociateServiceActionFromProvisioningArtifactFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDisassociateServiceActionFromProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error) {
	var output servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogDisassociateTagOptionFromResourceFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogDisassociateTagOptionFromResourceFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error) {
	var output servicecatalog.DisassociateTagOptionFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogEnableAWSOrganizationsAccessFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogEnableAWSOrganizationsAccessFuture) Get(ctx workflow.Context) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error) {
	var output servicecatalog.EnableAWSOrganizationsAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogExecuteProvisionedProductPlanFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogExecuteProvisionedProductPlanFuture) Get(ctx workflow.Context) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error) {
	var output servicecatalog.ExecuteProvisionedProductPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogExecuteProvisionedProductServiceActionFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogExecuteProvisionedProductServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error) {
	var output servicecatalog.ExecuteProvisionedProductServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogGetAWSOrganizationsAccessStatusFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogGetAWSOrganizationsAccessStatusFuture) Get(ctx workflow.Context) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {
	var output servicecatalog.GetAWSOrganizationsAccessStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogGetProvisionedProductOutputsFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogGetProvisionedProductOutputsFuture) Get(ctx workflow.Context) (*servicecatalog.GetProvisionedProductOutputsOutput, error) {
	var output servicecatalog.GetProvisionedProductOutputsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListAcceptedPortfolioSharesFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListAcceptedPortfolioSharesFuture) Get(ctx workflow.Context) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {
	var output servicecatalog.ListAcceptedPortfolioSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListBudgetsForResourceFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListBudgetsForResourceFuture) Get(ctx workflow.Context) (*servicecatalog.ListBudgetsForResourceOutput, error) {
	var output servicecatalog.ListBudgetsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListConstraintsForPortfolioFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListConstraintsForPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {
	var output servicecatalog.ListConstraintsForPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListLaunchPathsFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListLaunchPathsFuture) Get(ctx workflow.Context) (*servicecatalog.ListLaunchPathsOutput, error) {
	var output servicecatalog.ListLaunchPathsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListOrganizationPortfolioAccessFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListOrganizationPortfolioAccessFuture) Get(ctx workflow.Context) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {
	var output servicecatalog.ListOrganizationPortfolioAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListPortfolioAccessFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListPortfolioAccessFuture) Get(ctx workflow.Context) (*servicecatalog.ListPortfolioAccessOutput, error) {
	var output servicecatalog.ListPortfolioAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListPortfoliosFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListPortfoliosFuture) Get(ctx workflow.Context) (*servicecatalog.ListPortfoliosOutput, error) {
	var output servicecatalog.ListPortfoliosOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListPortfoliosForProductFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListPortfoliosForProductFuture) Get(ctx workflow.Context) (*servicecatalog.ListPortfoliosForProductOutput, error) {
	var output servicecatalog.ListPortfoliosForProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListPrincipalsForPortfolioFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListPrincipalsForPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {
	var output servicecatalog.ListPrincipalsForPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListProvisionedProductPlansFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListProvisionedProductPlansFuture) Get(ctx workflow.Context) (*servicecatalog.ListProvisionedProductPlansOutput, error) {
	var output servicecatalog.ListProvisionedProductPlansOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListProvisioningArtifactsFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListProvisioningArtifactsFuture) Get(ctx workflow.Context) (*servicecatalog.ListProvisioningArtifactsOutput, error) {
	var output servicecatalog.ListProvisioningArtifactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListProvisioningArtifactsForServiceActionFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListProvisioningArtifactsForServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {
	var output servicecatalog.ListProvisioningArtifactsForServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListRecordHistoryFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListRecordHistoryFuture) Get(ctx workflow.Context) (*servicecatalog.ListRecordHistoryOutput, error) {
	var output servicecatalog.ListRecordHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListResourcesForTagOptionFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListResourcesForTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.ListResourcesForTagOptionOutput, error) {
	var output servicecatalog.ListResourcesForTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListServiceActionsFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListServiceActionsFuture) Get(ctx workflow.Context) (*servicecatalog.ListServiceActionsOutput, error) {
	var output servicecatalog.ListServiceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListServiceActionsForProvisioningArtifactFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListServiceActionsForProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {
	var output servicecatalog.ListServiceActionsForProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListStackInstancesForProvisionedProductFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListStackInstancesForProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {
	var output servicecatalog.ListStackInstancesForProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogListTagOptionsFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogListTagOptionsFuture) Get(ctx workflow.Context) (*servicecatalog.ListTagOptionsOutput, error) {
	var output servicecatalog.ListTagOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogProvisionProductFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogProvisionProductFuture) Get(ctx workflow.Context) (*servicecatalog.ProvisionProductOutput, error) {
	var output servicecatalog.ProvisionProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogRejectPortfolioShareFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogRejectPortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.RejectPortfolioShareOutput, error) {
	var output servicecatalog.RejectPortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogScanProvisionedProductsFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogScanProvisionedProductsFuture) Get(ctx workflow.Context) (*servicecatalog.ScanProvisionedProductsOutput, error) {
	var output servicecatalog.ScanProvisionedProductsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogSearchProductsFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogSearchProductsFuture) Get(ctx workflow.Context) (*servicecatalog.SearchProductsOutput, error) {
	var output servicecatalog.SearchProductsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogSearchProductsAsAdminFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogSearchProductsAsAdminFuture) Get(ctx workflow.Context) (*servicecatalog.SearchProductsAsAdminOutput, error) {
	var output servicecatalog.SearchProductsAsAdminOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogSearchProvisionedProductsFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogSearchProvisionedProductsFuture) Get(ctx workflow.Context) (*servicecatalog.SearchProvisionedProductsOutput, error) {
	var output servicecatalog.SearchProvisionedProductsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogTerminateProvisionedProductFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogTerminateProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.TerminateProvisionedProductOutput, error) {
	var output servicecatalog.TerminateProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogUpdateConstraintFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogUpdateConstraintFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateConstraintOutput, error) {
	var output servicecatalog.UpdateConstraintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogUpdatePortfolioFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogUpdatePortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.UpdatePortfolioOutput, error) {
	var output servicecatalog.UpdatePortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogUpdateProductFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogUpdateProductFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateProductOutput, error) {
	var output servicecatalog.UpdateProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogUpdateProvisionedProductFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogUpdateProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateProvisionedProductOutput, error) {
	var output servicecatalog.UpdateProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogUpdateProvisionedProductPropertiesFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogUpdateProvisionedProductPropertiesFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error) {
	var output servicecatalog.UpdateProvisionedProductPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogUpdateProvisioningArtifactFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogUpdateProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateProvisioningArtifactOutput, error) {
	var output servicecatalog.UpdateProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogUpdateServiceActionFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogUpdateServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateServiceActionOutput, error) {
	var output servicecatalog.UpdateServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicecatalogUpdateTagOptionFuture struct {
	Future workflow.Future
}

func (r *ServicecatalogUpdateTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateTagOptionOutput, error) {
	var output servicecatalog.UpdateTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) AcceptPortfolioShare(ctx workflow.Context, input *servicecatalog.AcceptPortfolioShareInput) (*servicecatalog.AcceptPortfolioShareOutput, error) {
	var output servicecatalog.AcceptPortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.AcceptPortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) AcceptPortfolioShareAsync(ctx workflow.Context, input *servicecatalog.AcceptPortfolioShareInput) *ServicecatalogAcceptPortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.AcceptPortfolioShare", input)
	return &ServicecatalogAcceptPortfolioShareFuture{Future: future}
}

func (a *ServiceCatalogStub) AssociateBudgetWithResource(ctx workflow.Context, input *servicecatalog.AssociateBudgetWithResourceInput) (*servicecatalog.AssociateBudgetWithResourceOutput, error) {
	var output servicecatalog.AssociateBudgetWithResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.AssociateBudgetWithResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) AssociateBudgetWithResourceAsync(ctx workflow.Context, input *servicecatalog.AssociateBudgetWithResourceInput) *ServicecatalogAssociateBudgetWithResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.AssociateBudgetWithResource", input)
	return &ServicecatalogAssociateBudgetWithResourceFuture{Future: future}
}

func (a *ServiceCatalogStub) AssociatePrincipalWithPortfolio(ctx workflow.Context, input *servicecatalog.AssociatePrincipalWithPortfolioInput) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error) {
	var output servicecatalog.AssociatePrincipalWithPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.AssociatePrincipalWithPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) AssociatePrincipalWithPortfolioAsync(ctx workflow.Context, input *servicecatalog.AssociatePrincipalWithPortfolioInput) *ServicecatalogAssociatePrincipalWithPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.AssociatePrincipalWithPortfolio", input)
	return &ServicecatalogAssociatePrincipalWithPortfolioFuture{Future: future}
}

func (a *ServiceCatalogStub) AssociateProductWithPortfolio(ctx workflow.Context, input *servicecatalog.AssociateProductWithPortfolioInput) (*servicecatalog.AssociateProductWithPortfolioOutput, error) {
	var output servicecatalog.AssociateProductWithPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.AssociateProductWithPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) AssociateProductWithPortfolioAsync(ctx workflow.Context, input *servicecatalog.AssociateProductWithPortfolioInput) *ServicecatalogAssociateProductWithPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.AssociateProductWithPortfolio", input)
	return &ServicecatalogAssociateProductWithPortfolioFuture{Future: future}
}

func (a *ServiceCatalogStub) AssociateServiceActionWithProvisioningArtifact(ctx workflow.Context, input *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error) {
	var output servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.AssociateServiceActionWithProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) AssociateServiceActionWithProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) *ServicecatalogAssociateServiceActionWithProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.AssociateServiceActionWithProvisioningArtifact", input)
	return &ServicecatalogAssociateServiceActionWithProvisioningArtifactFuture{Future: future}
}

func (a *ServiceCatalogStub) AssociateTagOptionWithResource(ctx workflow.Context, input *servicecatalog.AssociateTagOptionWithResourceInput) (*servicecatalog.AssociateTagOptionWithResourceOutput, error) {
	var output servicecatalog.AssociateTagOptionWithResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.AssociateTagOptionWithResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) AssociateTagOptionWithResourceAsync(ctx workflow.Context, input *servicecatalog.AssociateTagOptionWithResourceInput) *ServicecatalogAssociateTagOptionWithResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.AssociateTagOptionWithResource", input)
	return &ServicecatalogAssociateTagOptionWithResourceFuture{Future: future}
}

func (a *ServiceCatalogStub) BatchAssociateServiceActionWithProvisioningArtifact(ctx workflow.Context, input *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error) {
	var output servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.BatchAssociateServiceActionWithProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) BatchAssociateServiceActionWithProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) *ServicecatalogBatchAssociateServiceActionWithProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.BatchAssociateServiceActionWithProvisioningArtifact", input)
	return &ServicecatalogBatchAssociateServiceActionWithProvisioningArtifactFuture{Future: future}
}

func (a *ServiceCatalogStub) BatchDisassociateServiceActionFromProvisioningArtifact(ctx workflow.Context, input *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error) {
	var output servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) BatchDisassociateServiceActionFromProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) *ServicecatalogBatchDisassociateServiceActionFromProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifact", input)
	return &ServicecatalogBatchDisassociateServiceActionFromProvisioningArtifactFuture{Future: future}
}

func (a *ServiceCatalogStub) CopyProduct(ctx workflow.Context, input *servicecatalog.CopyProductInput) (*servicecatalog.CopyProductOutput, error) {
	var output servicecatalog.CopyProductOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CopyProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) CopyProductAsync(ctx workflow.Context, input *servicecatalog.CopyProductInput) *ServicecatalogCopyProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CopyProduct", input)
	return &ServicecatalogCopyProductFuture{Future: future}
}

func (a *ServiceCatalogStub) CreateConstraint(ctx workflow.Context, input *servicecatalog.CreateConstraintInput) (*servicecatalog.CreateConstraintOutput, error) {
	var output servicecatalog.CreateConstraintOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreateConstraint", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) CreateConstraintAsync(ctx workflow.Context, input *servicecatalog.CreateConstraintInput) *ServicecatalogCreateConstraintFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreateConstraint", input)
	return &ServicecatalogCreateConstraintFuture{Future: future}
}

func (a *ServiceCatalogStub) CreatePortfolio(ctx workflow.Context, input *servicecatalog.CreatePortfolioInput) (*servicecatalog.CreatePortfolioOutput, error) {
	var output servicecatalog.CreatePortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreatePortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) CreatePortfolioAsync(ctx workflow.Context, input *servicecatalog.CreatePortfolioInput) *ServicecatalogCreatePortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreatePortfolio", input)
	return &ServicecatalogCreatePortfolioFuture{Future: future}
}

func (a *ServiceCatalogStub) CreatePortfolioShare(ctx workflow.Context, input *servicecatalog.CreatePortfolioShareInput) (*servicecatalog.CreatePortfolioShareOutput, error) {
	var output servicecatalog.CreatePortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreatePortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) CreatePortfolioShareAsync(ctx workflow.Context, input *servicecatalog.CreatePortfolioShareInput) *ServicecatalogCreatePortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreatePortfolioShare", input)
	return &ServicecatalogCreatePortfolioShareFuture{Future: future}
}

func (a *ServiceCatalogStub) CreateProduct(ctx workflow.Context, input *servicecatalog.CreateProductInput) (*servicecatalog.CreateProductOutput, error) {
	var output servicecatalog.CreateProductOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreateProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) CreateProductAsync(ctx workflow.Context, input *servicecatalog.CreateProductInput) *ServicecatalogCreateProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreateProduct", input)
	return &ServicecatalogCreateProductFuture{Future: future}
}

func (a *ServiceCatalogStub) CreateProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.CreateProvisionedProductPlanInput) (*servicecatalog.CreateProvisionedProductPlanOutput, error) {
	var output servicecatalog.CreateProvisionedProductPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreateProvisionedProductPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) CreateProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.CreateProvisionedProductPlanInput) *ServicecatalogCreateProvisionedProductPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreateProvisionedProductPlan", input)
	return &ServicecatalogCreateProvisionedProductPlanFuture{Future: future}
}

func (a *ServiceCatalogStub) CreateProvisioningArtifact(ctx workflow.Context, input *servicecatalog.CreateProvisioningArtifactInput) (*servicecatalog.CreateProvisioningArtifactOutput, error) {
	var output servicecatalog.CreateProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreateProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) CreateProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.CreateProvisioningArtifactInput) *ServicecatalogCreateProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreateProvisioningArtifact", input)
	return &ServicecatalogCreateProvisioningArtifactFuture{Future: future}
}

func (a *ServiceCatalogStub) CreateServiceAction(ctx workflow.Context, input *servicecatalog.CreateServiceActionInput) (*servicecatalog.CreateServiceActionOutput, error) {
	var output servicecatalog.CreateServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreateServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) CreateServiceActionAsync(ctx workflow.Context, input *servicecatalog.CreateServiceActionInput) *ServicecatalogCreateServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreateServiceAction", input)
	return &ServicecatalogCreateServiceActionFuture{Future: future}
}

func (a *ServiceCatalogStub) CreateTagOption(ctx workflow.Context, input *servicecatalog.CreateTagOptionInput) (*servicecatalog.CreateTagOptionOutput, error) {
	var output servicecatalog.CreateTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreateTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) CreateTagOptionAsync(ctx workflow.Context, input *servicecatalog.CreateTagOptionInput) *ServicecatalogCreateTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.CreateTagOption", input)
	return &ServicecatalogCreateTagOptionFuture{Future: future}
}

func (a *ServiceCatalogStub) DeleteConstraint(ctx workflow.Context, input *servicecatalog.DeleteConstraintInput) (*servicecatalog.DeleteConstraintOutput, error) {
	var output servicecatalog.DeleteConstraintOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeleteConstraint", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DeleteConstraintAsync(ctx workflow.Context, input *servicecatalog.DeleteConstraintInput) *ServicecatalogDeleteConstraintFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeleteConstraint", input)
	return &ServicecatalogDeleteConstraintFuture{Future: future}
}

func (a *ServiceCatalogStub) DeletePortfolio(ctx workflow.Context, input *servicecatalog.DeletePortfolioInput) (*servicecatalog.DeletePortfolioOutput, error) {
	var output servicecatalog.DeletePortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeletePortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DeletePortfolioAsync(ctx workflow.Context, input *servicecatalog.DeletePortfolioInput) *ServicecatalogDeletePortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeletePortfolio", input)
	return &ServicecatalogDeletePortfolioFuture{Future: future}
}

func (a *ServiceCatalogStub) DeletePortfolioShare(ctx workflow.Context, input *servicecatalog.DeletePortfolioShareInput) (*servicecatalog.DeletePortfolioShareOutput, error) {
	var output servicecatalog.DeletePortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeletePortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DeletePortfolioShareAsync(ctx workflow.Context, input *servicecatalog.DeletePortfolioShareInput) *ServicecatalogDeletePortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeletePortfolioShare", input)
	return &ServicecatalogDeletePortfolioShareFuture{Future: future}
}

func (a *ServiceCatalogStub) DeleteProduct(ctx workflow.Context, input *servicecatalog.DeleteProductInput) (*servicecatalog.DeleteProductOutput, error) {
	var output servicecatalog.DeleteProductOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeleteProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DeleteProductAsync(ctx workflow.Context, input *servicecatalog.DeleteProductInput) *ServicecatalogDeleteProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeleteProduct", input)
	return &ServicecatalogDeleteProductFuture{Future: future}
}

func (a *ServiceCatalogStub) DeleteProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.DeleteProvisionedProductPlanInput) (*servicecatalog.DeleteProvisionedProductPlanOutput, error) {
	var output servicecatalog.DeleteProvisionedProductPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeleteProvisionedProductPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DeleteProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.DeleteProvisionedProductPlanInput) *ServicecatalogDeleteProvisionedProductPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeleteProvisionedProductPlan", input)
	return &ServicecatalogDeleteProvisionedProductPlanFuture{Future: future}
}

func (a *ServiceCatalogStub) DeleteProvisioningArtifact(ctx workflow.Context, input *servicecatalog.DeleteProvisioningArtifactInput) (*servicecatalog.DeleteProvisioningArtifactOutput, error) {
	var output servicecatalog.DeleteProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeleteProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DeleteProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.DeleteProvisioningArtifactInput) *ServicecatalogDeleteProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeleteProvisioningArtifact", input)
	return &ServicecatalogDeleteProvisioningArtifactFuture{Future: future}
}

func (a *ServiceCatalogStub) DeleteServiceAction(ctx workflow.Context, input *servicecatalog.DeleteServiceActionInput) (*servicecatalog.DeleteServiceActionOutput, error) {
	var output servicecatalog.DeleteServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeleteServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DeleteServiceActionAsync(ctx workflow.Context, input *servicecatalog.DeleteServiceActionInput) *ServicecatalogDeleteServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeleteServiceAction", input)
	return &ServicecatalogDeleteServiceActionFuture{Future: future}
}

func (a *ServiceCatalogStub) DeleteTagOption(ctx workflow.Context, input *servicecatalog.DeleteTagOptionInput) (*servicecatalog.DeleteTagOptionOutput, error) {
	var output servicecatalog.DeleteTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeleteTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DeleteTagOptionAsync(ctx workflow.Context, input *servicecatalog.DeleteTagOptionInput) *ServicecatalogDeleteTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DeleteTagOption", input)
	return &ServicecatalogDeleteTagOptionFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeConstraint(ctx workflow.Context, input *servicecatalog.DescribeConstraintInput) (*servicecatalog.DescribeConstraintOutput, error) {
	var output servicecatalog.DescribeConstraintOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeConstraint", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeConstraintAsync(ctx workflow.Context, input *servicecatalog.DescribeConstraintInput) *ServicecatalogDescribeConstraintFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeConstraint", input)
	return &ServicecatalogDescribeConstraintFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeCopyProductStatus(ctx workflow.Context, input *servicecatalog.DescribeCopyProductStatusInput) (*servicecatalog.DescribeCopyProductStatusOutput, error) {
	var output servicecatalog.DescribeCopyProductStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeCopyProductStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeCopyProductStatusAsync(ctx workflow.Context, input *servicecatalog.DescribeCopyProductStatusInput) *ServicecatalogDescribeCopyProductStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeCopyProductStatus", input)
	return &ServicecatalogDescribeCopyProductStatusFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribePortfolio(ctx workflow.Context, input *servicecatalog.DescribePortfolioInput) (*servicecatalog.DescribePortfolioOutput, error) {
	var output servicecatalog.DescribePortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribePortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribePortfolioAsync(ctx workflow.Context, input *servicecatalog.DescribePortfolioInput) *ServicecatalogDescribePortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribePortfolio", input)
	return &ServicecatalogDescribePortfolioFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribePortfolioShareStatus(ctx workflow.Context, input *servicecatalog.DescribePortfolioShareStatusInput) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {
	var output servicecatalog.DescribePortfolioShareStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribePortfolioShareStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribePortfolioShareStatusAsync(ctx workflow.Context, input *servicecatalog.DescribePortfolioShareStatusInput) *ServicecatalogDescribePortfolioShareStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribePortfolioShareStatus", input)
	return &ServicecatalogDescribePortfolioShareStatusFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeProduct(ctx workflow.Context, input *servicecatalog.DescribeProductInput) (*servicecatalog.DescribeProductOutput, error) {
	var output servicecatalog.DescribeProductOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeProductAsync(ctx workflow.Context, input *servicecatalog.DescribeProductInput) *ServicecatalogDescribeProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProduct", input)
	return &ServicecatalogDescribeProductFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeProductAsAdmin(ctx workflow.Context, input *servicecatalog.DescribeProductAsAdminInput) (*servicecatalog.DescribeProductAsAdminOutput, error) {
	var output servicecatalog.DescribeProductAsAdminOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProductAsAdmin", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeProductAsAdminAsync(ctx workflow.Context, input *servicecatalog.DescribeProductAsAdminInput) *ServicecatalogDescribeProductAsAdminFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProductAsAdmin", input)
	return &ServicecatalogDescribeProductAsAdminFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeProductView(ctx workflow.Context, input *servicecatalog.DescribeProductViewInput) (*servicecatalog.DescribeProductViewOutput, error) {
	var output servicecatalog.DescribeProductViewOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProductView", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeProductViewAsync(ctx workflow.Context, input *servicecatalog.DescribeProductViewInput) *ServicecatalogDescribeProductViewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProductView", input)
	return &ServicecatalogDescribeProductViewFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeProvisionedProduct(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductInput) (*servicecatalog.DescribeProvisionedProductOutput, error) {
	var output servicecatalog.DescribeProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductInput) *ServicecatalogDescribeProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProvisionedProduct", input)
	return &ServicecatalogDescribeProvisionedProductFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductPlanInput) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {
	var output servicecatalog.DescribeProvisionedProductPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProvisionedProductPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductPlanInput) *ServicecatalogDescribeProvisionedProductPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProvisionedProductPlan", input)
	return &ServicecatalogDescribeProvisionedProductPlanFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeProvisioningArtifact(ctx workflow.Context, input *servicecatalog.DescribeProvisioningArtifactInput) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {
	var output servicecatalog.DescribeProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisioningArtifactInput) *ServicecatalogDescribeProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProvisioningArtifact", input)
	return &ServicecatalogDescribeProvisioningArtifactFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeProvisioningParameters(ctx workflow.Context, input *servicecatalog.DescribeProvisioningParametersInput) (*servicecatalog.DescribeProvisioningParametersOutput, error) {
	var output servicecatalog.DescribeProvisioningParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProvisioningParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeProvisioningParametersAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisioningParametersInput) *ServicecatalogDescribeProvisioningParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeProvisioningParameters", input)
	return &ServicecatalogDescribeProvisioningParametersFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeRecord(ctx workflow.Context, input *servicecatalog.DescribeRecordInput) (*servicecatalog.DescribeRecordOutput, error) {
	var output servicecatalog.DescribeRecordOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeRecord", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeRecordAsync(ctx workflow.Context, input *servicecatalog.DescribeRecordInput) *ServicecatalogDescribeRecordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeRecord", input)
	return &ServicecatalogDescribeRecordFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeServiceAction(ctx workflow.Context, input *servicecatalog.DescribeServiceActionInput) (*servicecatalog.DescribeServiceActionOutput, error) {
	var output servicecatalog.DescribeServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeServiceActionAsync(ctx workflow.Context, input *servicecatalog.DescribeServiceActionInput) *ServicecatalogDescribeServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeServiceAction", input)
	return &ServicecatalogDescribeServiceActionFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeServiceActionExecutionParameters(ctx workflow.Context, input *servicecatalog.DescribeServiceActionExecutionParametersInput) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {
	var output servicecatalog.DescribeServiceActionExecutionParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeServiceActionExecutionParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeServiceActionExecutionParametersAsync(ctx workflow.Context, input *servicecatalog.DescribeServiceActionExecutionParametersInput) *ServicecatalogDescribeServiceActionExecutionParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeServiceActionExecutionParameters", input)
	return &ServicecatalogDescribeServiceActionExecutionParametersFuture{Future: future}
}

func (a *ServiceCatalogStub) DescribeTagOption(ctx workflow.Context, input *servicecatalog.DescribeTagOptionInput) (*servicecatalog.DescribeTagOptionOutput, error) {
	var output servicecatalog.DescribeTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DescribeTagOptionAsync(ctx workflow.Context, input *servicecatalog.DescribeTagOptionInput) *ServicecatalogDescribeTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DescribeTagOption", input)
	return &ServicecatalogDescribeTagOptionFuture{Future: future}
}

func (a *ServiceCatalogStub) DisableAWSOrganizationsAccess(ctx workflow.Context, input *servicecatalog.DisableAWSOrganizationsAccessInput) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error) {
	var output servicecatalog.DisableAWSOrganizationsAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DisableAWSOrganizationsAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DisableAWSOrganizationsAccessAsync(ctx workflow.Context, input *servicecatalog.DisableAWSOrganizationsAccessInput) *ServicecatalogDisableAWSOrganizationsAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DisableAWSOrganizationsAccess", input)
	return &ServicecatalogDisableAWSOrganizationsAccessFuture{Future: future}
}

func (a *ServiceCatalogStub) DisassociateBudgetFromResource(ctx workflow.Context, input *servicecatalog.DisassociateBudgetFromResourceInput) (*servicecatalog.DisassociateBudgetFromResourceOutput, error) {
	var output servicecatalog.DisassociateBudgetFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DisassociateBudgetFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DisassociateBudgetFromResourceAsync(ctx workflow.Context, input *servicecatalog.DisassociateBudgetFromResourceInput) *ServicecatalogDisassociateBudgetFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DisassociateBudgetFromResource", input)
	return &ServicecatalogDisassociateBudgetFromResourceFuture{Future: future}
}

func (a *ServiceCatalogStub) DisassociatePrincipalFromPortfolio(ctx workflow.Context, input *servicecatalog.DisassociatePrincipalFromPortfolioInput) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error) {
	var output servicecatalog.DisassociatePrincipalFromPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DisassociatePrincipalFromPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DisassociatePrincipalFromPortfolioAsync(ctx workflow.Context, input *servicecatalog.DisassociatePrincipalFromPortfolioInput) *ServicecatalogDisassociatePrincipalFromPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DisassociatePrincipalFromPortfolio", input)
	return &ServicecatalogDisassociatePrincipalFromPortfolioFuture{Future: future}
}

func (a *ServiceCatalogStub) DisassociateProductFromPortfolio(ctx workflow.Context, input *servicecatalog.DisassociateProductFromPortfolioInput) (*servicecatalog.DisassociateProductFromPortfolioOutput, error) {
	var output servicecatalog.DisassociateProductFromPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DisassociateProductFromPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DisassociateProductFromPortfolioAsync(ctx workflow.Context, input *servicecatalog.DisassociateProductFromPortfolioInput) *ServicecatalogDisassociateProductFromPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DisassociateProductFromPortfolio", input)
	return &ServicecatalogDisassociateProductFromPortfolioFuture{Future: future}
}

func (a *ServiceCatalogStub) DisassociateServiceActionFromProvisioningArtifact(ctx workflow.Context, input *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error) {
	var output servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DisassociateServiceActionFromProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DisassociateServiceActionFromProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) *ServicecatalogDisassociateServiceActionFromProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DisassociateServiceActionFromProvisioningArtifact", input)
	return &ServicecatalogDisassociateServiceActionFromProvisioningArtifactFuture{Future: future}
}

func (a *ServiceCatalogStub) DisassociateTagOptionFromResource(ctx workflow.Context, input *servicecatalog.DisassociateTagOptionFromResourceInput) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error) {
	var output servicecatalog.DisassociateTagOptionFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DisassociateTagOptionFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) DisassociateTagOptionFromResourceAsync(ctx workflow.Context, input *servicecatalog.DisassociateTagOptionFromResourceInput) *ServicecatalogDisassociateTagOptionFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.DisassociateTagOptionFromResource", input)
	return &ServicecatalogDisassociateTagOptionFromResourceFuture{Future: future}
}

func (a *ServiceCatalogStub) EnableAWSOrganizationsAccess(ctx workflow.Context, input *servicecatalog.EnableAWSOrganizationsAccessInput) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error) {
	var output servicecatalog.EnableAWSOrganizationsAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.EnableAWSOrganizationsAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) EnableAWSOrganizationsAccessAsync(ctx workflow.Context, input *servicecatalog.EnableAWSOrganizationsAccessInput) *ServicecatalogEnableAWSOrganizationsAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.EnableAWSOrganizationsAccess", input)
	return &ServicecatalogEnableAWSOrganizationsAccessFuture{Future: future}
}

func (a *ServiceCatalogStub) ExecuteProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductPlanInput) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error) {
	var output servicecatalog.ExecuteProvisionedProductPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ExecuteProvisionedProductPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ExecuteProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductPlanInput) *ServicecatalogExecuteProvisionedProductPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ExecuteProvisionedProductPlan", input)
	return &ServicecatalogExecuteProvisionedProductPlanFuture{Future: future}
}

func (a *ServiceCatalogStub) ExecuteProvisionedProductServiceAction(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductServiceActionInput) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error) {
	var output servicecatalog.ExecuteProvisionedProductServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ExecuteProvisionedProductServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ExecuteProvisionedProductServiceActionAsync(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductServiceActionInput) *ServicecatalogExecuteProvisionedProductServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ExecuteProvisionedProductServiceAction", input)
	return &ServicecatalogExecuteProvisionedProductServiceActionFuture{Future: future}
}

func (a *ServiceCatalogStub) GetAWSOrganizationsAccessStatus(ctx workflow.Context, input *servicecatalog.GetAWSOrganizationsAccessStatusInput) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {
	var output servicecatalog.GetAWSOrganizationsAccessStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.GetAWSOrganizationsAccessStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) GetAWSOrganizationsAccessStatusAsync(ctx workflow.Context, input *servicecatalog.GetAWSOrganizationsAccessStatusInput) *ServicecatalogGetAWSOrganizationsAccessStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.GetAWSOrganizationsAccessStatus", input)
	return &ServicecatalogGetAWSOrganizationsAccessStatusFuture{Future: future}
}

func (a *ServiceCatalogStub) GetProvisionedProductOutputs(ctx workflow.Context, input *servicecatalog.GetProvisionedProductOutputsInput) (*servicecatalog.GetProvisionedProductOutputsOutput, error) {
	var output servicecatalog.GetProvisionedProductOutputsOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.GetProvisionedProductOutputs", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) GetProvisionedProductOutputsAsync(ctx workflow.Context, input *servicecatalog.GetProvisionedProductOutputsInput) *ServicecatalogGetProvisionedProductOutputsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.GetProvisionedProductOutputs", input)
	return &ServicecatalogGetProvisionedProductOutputsFuture{Future: future}
}

func (a *ServiceCatalogStub) ListAcceptedPortfolioShares(ctx workflow.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {
	var output servicecatalog.ListAcceptedPortfolioSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListAcceptedPortfolioShares", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListAcceptedPortfolioSharesAsync(ctx workflow.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput) *ServicecatalogListAcceptedPortfolioSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListAcceptedPortfolioShares", input)
	return &ServicecatalogListAcceptedPortfolioSharesFuture{Future: future}
}

func (a *ServiceCatalogStub) ListBudgetsForResource(ctx workflow.Context, input *servicecatalog.ListBudgetsForResourceInput) (*servicecatalog.ListBudgetsForResourceOutput, error) {
	var output servicecatalog.ListBudgetsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListBudgetsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListBudgetsForResourceAsync(ctx workflow.Context, input *servicecatalog.ListBudgetsForResourceInput) *ServicecatalogListBudgetsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListBudgetsForResource", input)
	return &ServicecatalogListBudgetsForResourceFuture{Future: future}
}

func (a *ServiceCatalogStub) ListConstraintsForPortfolio(ctx workflow.Context, input *servicecatalog.ListConstraintsForPortfolioInput) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {
	var output servicecatalog.ListConstraintsForPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListConstraintsForPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListConstraintsForPortfolioAsync(ctx workflow.Context, input *servicecatalog.ListConstraintsForPortfolioInput) *ServicecatalogListConstraintsForPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListConstraintsForPortfolio", input)
	return &ServicecatalogListConstraintsForPortfolioFuture{Future: future}
}

func (a *ServiceCatalogStub) ListLaunchPaths(ctx workflow.Context, input *servicecatalog.ListLaunchPathsInput) (*servicecatalog.ListLaunchPathsOutput, error) {
	var output servicecatalog.ListLaunchPathsOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListLaunchPaths", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListLaunchPathsAsync(ctx workflow.Context, input *servicecatalog.ListLaunchPathsInput) *ServicecatalogListLaunchPathsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListLaunchPaths", input)
	return &ServicecatalogListLaunchPathsFuture{Future: future}
}

func (a *ServiceCatalogStub) ListOrganizationPortfolioAccess(ctx workflow.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {
	var output servicecatalog.ListOrganizationPortfolioAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListOrganizationPortfolioAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListOrganizationPortfolioAccessAsync(ctx workflow.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput) *ServicecatalogListOrganizationPortfolioAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListOrganizationPortfolioAccess", input)
	return &ServicecatalogListOrganizationPortfolioAccessFuture{Future: future}
}

func (a *ServiceCatalogStub) ListPortfolioAccess(ctx workflow.Context, input *servicecatalog.ListPortfolioAccessInput) (*servicecatalog.ListPortfolioAccessOutput, error) {
	var output servicecatalog.ListPortfolioAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListPortfolioAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListPortfolioAccessAsync(ctx workflow.Context, input *servicecatalog.ListPortfolioAccessInput) *ServicecatalogListPortfolioAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListPortfolioAccess", input)
	return &ServicecatalogListPortfolioAccessFuture{Future: future}
}

func (a *ServiceCatalogStub) ListPortfolios(ctx workflow.Context, input *servicecatalog.ListPortfoliosInput) (*servicecatalog.ListPortfoliosOutput, error) {
	var output servicecatalog.ListPortfoliosOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListPortfolios", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListPortfoliosAsync(ctx workflow.Context, input *servicecatalog.ListPortfoliosInput) *ServicecatalogListPortfoliosFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListPortfolios", input)
	return &ServicecatalogListPortfoliosFuture{Future: future}
}

func (a *ServiceCatalogStub) ListPortfoliosForProduct(ctx workflow.Context, input *servicecatalog.ListPortfoliosForProductInput) (*servicecatalog.ListPortfoliosForProductOutput, error) {
	var output servicecatalog.ListPortfoliosForProductOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListPortfoliosForProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListPortfoliosForProductAsync(ctx workflow.Context, input *servicecatalog.ListPortfoliosForProductInput) *ServicecatalogListPortfoliosForProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListPortfoliosForProduct", input)
	return &ServicecatalogListPortfoliosForProductFuture{Future: future}
}

func (a *ServiceCatalogStub) ListPrincipalsForPortfolio(ctx workflow.Context, input *servicecatalog.ListPrincipalsForPortfolioInput) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {
	var output servicecatalog.ListPrincipalsForPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListPrincipalsForPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListPrincipalsForPortfolioAsync(ctx workflow.Context, input *servicecatalog.ListPrincipalsForPortfolioInput) *ServicecatalogListPrincipalsForPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListPrincipalsForPortfolio", input)
	return &ServicecatalogListPrincipalsForPortfolioFuture{Future: future}
}

func (a *ServiceCatalogStub) ListProvisionedProductPlans(ctx workflow.Context, input *servicecatalog.ListProvisionedProductPlansInput) (*servicecatalog.ListProvisionedProductPlansOutput, error) {
	var output servicecatalog.ListProvisionedProductPlansOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListProvisionedProductPlans", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListProvisionedProductPlansAsync(ctx workflow.Context, input *servicecatalog.ListProvisionedProductPlansInput) *ServicecatalogListProvisionedProductPlansFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListProvisionedProductPlans", input)
	return &ServicecatalogListProvisionedProductPlansFuture{Future: future}
}

func (a *ServiceCatalogStub) ListProvisioningArtifacts(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsInput) (*servicecatalog.ListProvisioningArtifactsOutput, error) {
	var output servicecatalog.ListProvisioningArtifactsOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListProvisioningArtifacts", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListProvisioningArtifactsAsync(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsInput) *ServicecatalogListProvisioningArtifactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListProvisioningArtifacts", input)
	return &ServicecatalogListProvisioningArtifactsFuture{Future: future}
}

func (a *ServiceCatalogStub) ListProvisioningArtifactsForServiceAction(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {
	var output servicecatalog.ListProvisioningArtifactsForServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListProvisioningArtifactsForServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListProvisioningArtifactsForServiceActionAsync(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput) *ServicecatalogListProvisioningArtifactsForServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListProvisioningArtifactsForServiceAction", input)
	return &ServicecatalogListProvisioningArtifactsForServiceActionFuture{Future: future}
}

func (a *ServiceCatalogStub) ListRecordHistory(ctx workflow.Context, input *servicecatalog.ListRecordHistoryInput) (*servicecatalog.ListRecordHistoryOutput, error) {
	var output servicecatalog.ListRecordHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListRecordHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListRecordHistoryAsync(ctx workflow.Context, input *servicecatalog.ListRecordHistoryInput) *ServicecatalogListRecordHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListRecordHistory", input)
	return &ServicecatalogListRecordHistoryFuture{Future: future}
}

func (a *ServiceCatalogStub) ListResourcesForTagOption(ctx workflow.Context, input *servicecatalog.ListResourcesForTagOptionInput) (*servicecatalog.ListResourcesForTagOptionOutput, error) {
	var output servicecatalog.ListResourcesForTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListResourcesForTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListResourcesForTagOptionAsync(ctx workflow.Context, input *servicecatalog.ListResourcesForTagOptionInput) *ServicecatalogListResourcesForTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListResourcesForTagOption", input)
	return &ServicecatalogListResourcesForTagOptionFuture{Future: future}
}

func (a *ServiceCatalogStub) ListServiceActions(ctx workflow.Context, input *servicecatalog.ListServiceActionsInput) (*servicecatalog.ListServiceActionsOutput, error) {
	var output servicecatalog.ListServiceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListServiceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListServiceActionsAsync(ctx workflow.Context, input *servicecatalog.ListServiceActionsInput) *ServicecatalogListServiceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListServiceActions", input)
	return &ServicecatalogListServiceActionsFuture{Future: future}
}

func (a *ServiceCatalogStub) ListServiceActionsForProvisioningArtifact(ctx workflow.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {
	var output servicecatalog.ListServiceActionsForProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListServiceActionsForProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListServiceActionsForProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput) *ServicecatalogListServiceActionsForProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListServiceActionsForProvisioningArtifact", input)
	return &ServicecatalogListServiceActionsForProvisioningArtifactFuture{Future: future}
}

func (a *ServiceCatalogStub) ListStackInstancesForProvisionedProduct(ctx workflow.Context, input *servicecatalog.ListStackInstancesForProvisionedProductInput) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {
	var output servicecatalog.ListStackInstancesForProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListStackInstancesForProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListStackInstancesForProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.ListStackInstancesForProvisionedProductInput) *ServicecatalogListStackInstancesForProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListStackInstancesForProvisionedProduct", input)
	return &ServicecatalogListStackInstancesForProvisionedProductFuture{Future: future}
}

func (a *ServiceCatalogStub) ListTagOptions(ctx workflow.Context, input *servicecatalog.ListTagOptionsInput) (*servicecatalog.ListTagOptionsOutput, error) {
	var output servicecatalog.ListTagOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListTagOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ListTagOptionsAsync(ctx workflow.Context, input *servicecatalog.ListTagOptionsInput) *ServicecatalogListTagOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ListTagOptions", input)
	return &ServicecatalogListTagOptionsFuture{Future: future}
}

func (a *ServiceCatalogStub) ProvisionProduct(ctx workflow.Context, input *servicecatalog.ProvisionProductInput) (*servicecatalog.ProvisionProductOutput, error) {
	var output servicecatalog.ProvisionProductOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ProvisionProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ProvisionProductAsync(ctx workflow.Context, input *servicecatalog.ProvisionProductInput) *ServicecatalogProvisionProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ProvisionProduct", input)
	return &ServicecatalogProvisionProductFuture{Future: future}
}

func (a *ServiceCatalogStub) RejectPortfolioShare(ctx workflow.Context, input *servicecatalog.RejectPortfolioShareInput) (*servicecatalog.RejectPortfolioShareOutput, error) {
	var output servicecatalog.RejectPortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.RejectPortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) RejectPortfolioShareAsync(ctx workflow.Context, input *servicecatalog.RejectPortfolioShareInput) *ServicecatalogRejectPortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.RejectPortfolioShare", input)
	return &ServicecatalogRejectPortfolioShareFuture{Future: future}
}

func (a *ServiceCatalogStub) ScanProvisionedProducts(ctx workflow.Context, input *servicecatalog.ScanProvisionedProductsInput) (*servicecatalog.ScanProvisionedProductsOutput, error) {
	var output servicecatalog.ScanProvisionedProductsOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ScanProvisionedProducts", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) ScanProvisionedProductsAsync(ctx workflow.Context, input *servicecatalog.ScanProvisionedProductsInput) *ServicecatalogScanProvisionedProductsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.ScanProvisionedProducts", input)
	return &ServicecatalogScanProvisionedProductsFuture{Future: future}
}

func (a *ServiceCatalogStub) SearchProducts(ctx workflow.Context, input *servicecatalog.SearchProductsInput) (*servicecatalog.SearchProductsOutput, error) {
	var output servicecatalog.SearchProductsOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.SearchProducts", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) SearchProductsAsync(ctx workflow.Context, input *servicecatalog.SearchProductsInput) *ServicecatalogSearchProductsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.SearchProducts", input)
	return &ServicecatalogSearchProductsFuture{Future: future}
}

func (a *ServiceCatalogStub) SearchProductsAsAdmin(ctx workflow.Context, input *servicecatalog.SearchProductsAsAdminInput) (*servicecatalog.SearchProductsAsAdminOutput, error) {
	var output servicecatalog.SearchProductsAsAdminOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.SearchProductsAsAdmin", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) SearchProductsAsAdminAsync(ctx workflow.Context, input *servicecatalog.SearchProductsAsAdminInput) *ServicecatalogSearchProductsAsAdminFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.SearchProductsAsAdmin", input)
	return &ServicecatalogSearchProductsAsAdminFuture{Future: future}
}

func (a *ServiceCatalogStub) SearchProvisionedProducts(ctx workflow.Context, input *servicecatalog.SearchProvisionedProductsInput) (*servicecatalog.SearchProvisionedProductsOutput, error) {
	var output servicecatalog.SearchProvisionedProductsOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.SearchProvisionedProducts", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) SearchProvisionedProductsAsync(ctx workflow.Context, input *servicecatalog.SearchProvisionedProductsInput) *ServicecatalogSearchProvisionedProductsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.SearchProvisionedProducts", input)
	return &ServicecatalogSearchProvisionedProductsFuture{Future: future}
}

func (a *ServiceCatalogStub) TerminateProvisionedProduct(ctx workflow.Context, input *servicecatalog.TerminateProvisionedProductInput) (*servicecatalog.TerminateProvisionedProductOutput, error) {
	var output servicecatalog.TerminateProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.TerminateProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) TerminateProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.TerminateProvisionedProductInput) *ServicecatalogTerminateProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.TerminateProvisionedProduct", input)
	return &ServicecatalogTerminateProvisionedProductFuture{Future: future}
}

func (a *ServiceCatalogStub) UpdateConstraint(ctx workflow.Context, input *servicecatalog.UpdateConstraintInput) (*servicecatalog.UpdateConstraintOutput, error) {
	var output servicecatalog.UpdateConstraintOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateConstraint", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) UpdateConstraintAsync(ctx workflow.Context, input *servicecatalog.UpdateConstraintInput) *ServicecatalogUpdateConstraintFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateConstraint", input)
	return &ServicecatalogUpdateConstraintFuture{Future: future}
}

func (a *ServiceCatalogStub) UpdatePortfolio(ctx workflow.Context, input *servicecatalog.UpdatePortfolioInput) (*servicecatalog.UpdatePortfolioOutput, error) {
	var output servicecatalog.UpdatePortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdatePortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) UpdatePortfolioAsync(ctx workflow.Context, input *servicecatalog.UpdatePortfolioInput) *ServicecatalogUpdatePortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdatePortfolio", input)
	return &ServicecatalogUpdatePortfolioFuture{Future: future}
}

func (a *ServiceCatalogStub) UpdateProduct(ctx workflow.Context, input *servicecatalog.UpdateProductInput) (*servicecatalog.UpdateProductOutput, error) {
	var output servicecatalog.UpdateProductOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) UpdateProductAsync(ctx workflow.Context, input *servicecatalog.UpdateProductInput) *ServicecatalogUpdateProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateProduct", input)
	return &ServicecatalogUpdateProductFuture{Future: future}
}

func (a *ServiceCatalogStub) UpdateProvisionedProduct(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductInput) (*servicecatalog.UpdateProvisionedProductOutput, error) {
	var output servicecatalog.UpdateProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) UpdateProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductInput) *ServicecatalogUpdateProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateProvisionedProduct", input)
	return &ServicecatalogUpdateProvisionedProductFuture{Future: future}
}

func (a *ServiceCatalogStub) UpdateProvisionedProductProperties(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductPropertiesInput) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error) {
	var output servicecatalog.UpdateProvisionedProductPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateProvisionedProductProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) UpdateProvisionedProductPropertiesAsync(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductPropertiesInput) *ServicecatalogUpdateProvisionedProductPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateProvisionedProductProperties", input)
	return &ServicecatalogUpdateProvisionedProductPropertiesFuture{Future: future}
}

func (a *ServiceCatalogStub) UpdateProvisioningArtifact(ctx workflow.Context, input *servicecatalog.UpdateProvisioningArtifactInput) (*servicecatalog.UpdateProvisioningArtifactOutput, error) {
	var output servicecatalog.UpdateProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) UpdateProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.UpdateProvisioningArtifactInput) *ServicecatalogUpdateProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateProvisioningArtifact", input)
	return &ServicecatalogUpdateProvisioningArtifactFuture{Future: future}
}

func (a *ServiceCatalogStub) UpdateServiceAction(ctx workflow.Context, input *servicecatalog.UpdateServiceActionInput) (*servicecatalog.UpdateServiceActionOutput, error) {
	var output servicecatalog.UpdateServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) UpdateServiceActionAsync(ctx workflow.Context, input *servicecatalog.UpdateServiceActionInput) *ServicecatalogUpdateServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateServiceAction", input)
	return &ServicecatalogUpdateServiceActionFuture{Future: future}
}

func (a *ServiceCatalogStub) UpdateTagOption(ctx workflow.Context, input *servicecatalog.UpdateTagOptionInput) (*servicecatalog.UpdateTagOptionOutput, error) {
	var output servicecatalog.UpdateTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceCatalogStub) UpdateTagOptionAsync(ctx workflow.Context, input *servicecatalog.UpdateTagOptionInput) *ServicecatalogUpdateTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicecatalog.UpdateTagOption", input)
	return &ServicecatalogUpdateTagOptionFuture{Future: future}
}
