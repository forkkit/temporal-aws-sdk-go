// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/augmentedairuntime"
	"go.temporal.io/sdk/workflow"
)

type AugmentedAIRuntimeClient interface {
	DeleteHumanLoop(ctx workflow.Context, input *augmentedairuntime.DeleteHumanLoopInput) (*augmentedairuntime.DeleteHumanLoopOutput, error)
	DeleteHumanLoopAsync(ctx workflow.Context, input *augmentedairuntime.DeleteHumanLoopInput) *AugmentedairuntimeDeleteHumanLoopFuture

	DescribeHumanLoop(ctx workflow.Context, input *augmentedairuntime.DescribeHumanLoopInput) (*augmentedairuntime.DescribeHumanLoopOutput, error)
	DescribeHumanLoopAsync(ctx workflow.Context, input *augmentedairuntime.DescribeHumanLoopInput) *AugmentedairuntimeDescribeHumanLoopFuture

	ListHumanLoops(ctx workflow.Context, input *augmentedairuntime.ListHumanLoopsInput) (*augmentedairuntime.ListHumanLoopsOutput, error)
	ListHumanLoopsAsync(ctx workflow.Context, input *augmentedairuntime.ListHumanLoopsInput) *AugmentedairuntimeListHumanLoopsFuture

	StartHumanLoop(ctx workflow.Context, input *augmentedairuntime.StartHumanLoopInput) (*augmentedairuntime.StartHumanLoopOutput, error)
	StartHumanLoopAsync(ctx workflow.Context, input *augmentedairuntime.StartHumanLoopInput) *AugmentedairuntimeStartHumanLoopFuture

	StopHumanLoop(ctx workflow.Context, input *augmentedairuntime.StopHumanLoopInput) (*augmentedairuntime.StopHumanLoopOutput, error)
	StopHumanLoopAsync(ctx workflow.Context, input *augmentedairuntime.StopHumanLoopInput) *AugmentedairuntimeStopHumanLoopFuture
}

type AugmentedAIRuntimeStub struct{}

func NewAugmentedAIRuntimeStub() AugmentedAIRuntimeClient {
	return &AugmentedAIRuntimeStub{}
}

type AugmentedairuntimeDeleteHumanLoopFuture struct {
	Future workflow.Future
}

func (r *AugmentedairuntimeDeleteHumanLoopFuture) Get(ctx workflow.Context) (*augmentedairuntime.DeleteHumanLoopOutput, error) {
	var output augmentedairuntime.DeleteHumanLoopOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AugmentedairuntimeDescribeHumanLoopFuture struct {
	Future workflow.Future
}

func (r *AugmentedairuntimeDescribeHumanLoopFuture) Get(ctx workflow.Context) (*augmentedairuntime.DescribeHumanLoopOutput, error) {
	var output augmentedairuntime.DescribeHumanLoopOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AugmentedairuntimeListHumanLoopsFuture struct {
	Future workflow.Future
}

func (r *AugmentedairuntimeListHumanLoopsFuture) Get(ctx workflow.Context) (*augmentedairuntime.ListHumanLoopsOutput, error) {
	var output augmentedairuntime.ListHumanLoopsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AugmentedairuntimeStartHumanLoopFuture struct {
	Future workflow.Future
}

func (r *AugmentedairuntimeStartHumanLoopFuture) Get(ctx workflow.Context) (*augmentedairuntime.StartHumanLoopOutput, error) {
	var output augmentedairuntime.StartHumanLoopOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AugmentedairuntimeStopHumanLoopFuture struct {
	Future workflow.Future
}

func (r *AugmentedairuntimeStopHumanLoopFuture) Get(ctx workflow.Context) (*augmentedairuntime.StopHumanLoopOutput, error) {
	var output augmentedairuntime.StopHumanLoopOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *AugmentedAIRuntimeStub) DeleteHumanLoop(ctx workflow.Context, input *augmentedairuntime.DeleteHumanLoopInput) (*augmentedairuntime.DeleteHumanLoopOutput, error) {
	var output augmentedairuntime.DeleteHumanLoopOutput
	err := workflow.ExecuteActivity(ctx, "aws.augmentedairuntime.DeleteHumanLoop", input).Get(ctx, &output)
	return &output, err
}

func (a *AugmentedAIRuntimeStub) DeleteHumanLoopAsync(ctx workflow.Context, input *augmentedairuntime.DeleteHumanLoopInput) *AugmentedairuntimeDeleteHumanLoopFuture {
	future := workflow.ExecuteActivity(ctx, "aws.augmentedairuntime.DeleteHumanLoop", input)
	return &AugmentedairuntimeDeleteHumanLoopFuture{Future: future}
}

func (a *AugmentedAIRuntimeStub) DescribeHumanLoop(ctx workflow.Context, input *augmentedairuntime.DescribeHumanLoopInput) (*augmentedairuntime.DescribeHumanLoopOutput, error) {
	var output augmentedairuntime.DescribeHumanLoopOutput
	err := workflow.ExecuteActivity(ctx, "aws.augmentedairuntime.DescribeHumanLoop", input).Get(ctx, &output)
	return &output, err
}

func (a *AugmentedAIRuntimeStub) DescribeHumanLoopAsync(ctx workflow.Context, input *augmentedairuntime.DescribeHumanLoopInput) *AugmentedairuntimeDescribeHumanLoopFuture {
	future := workflow.ExecuteActivity(ctx, "aws.augmentedairuntime.DescribeHumanLoop", input)
	return &AugmentedairuntimeDescribeHumanLoopFuture{Future: future}
}

func (a *AugmentedAIRuntimeStub) ListHumanLoops(ctx workflow.Context, input *augmentedairuntime.ListHumanLoopsInput) (*augmentedairuntime.ListHumanLoopsOutput, error) {
	var output augmentedairuntime.ListHumanLoopsOutput
	err := workflow.ExecuteActivity(ctx, "aws.augmentedairuntime.ListHumanLoops", input).Get(ctx, &output)
	return &output, err
}

func (a *AugmentedAIRuntimeStub) ListHumanLoopsAsync(ctx workflow.Context, input *augmentedairuntime.ListHumanLoopsInput) *AugmentedairuntimeListHumanLoopsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.augmentedairuntime.ListHumanLoops", input)
	return &AugmentedairuntimeListHumanLoopsFuture{Future: future}
}

func (a *AugmentedAIRuntimeStub) StartHumanLoop(ctx workflow.Context, input *augmentedairuntime.StartHumanLoopInput) (*augmentedairuntime.StartHumanLoopOutput, error) {
	var output augmentedairuntime.StartHumanLoopOutput
	err := workflow.ExecuteActivity(ctx, "aws.augmentedairuntime.StartHumanLoop", input).Get(ctx, &output)
	return &output, err
}

func (a *AugmentedAIRuntimeStub) StartHumanLoopAsync(ctx workflow.Context, input *augmentedairuntime.StartHumanLoopInput) *AugmentedairuntimeStartHumanLoopFuture {
	future := workflow.ExecuteActivity(ctx, "aws.augmentedairuntime.StartHumanLoop", input)
	return &AugmentedairuntimeStartHumanLoopFuture{Future: future}
}

func (a *AugmentedAIRuntimeStub) StopHumanLoop(ctx workflow.Context, input *augmentedairuntime.StopHumanLoopInput) (*augmentedairuntime.StopHumanLoopOutput, error) {
	var output augmentedairuntime.StopHumanLoopOutput
	err := workflow.ExecuteActivity(ctx, "aws.augmentedairuntime.StopHumanLoop", input).Get(ctx, &output)
	return &output, err
}

func (a *AugmentedAIRuntimeStub) StopHumanLoopAsync(ctx workflow.Context, input *augmentedairuntime.StopHumanLoopInput) *AugmentedairuntimeStopHumanLoopFuture {
	future := workflow.ExecuteActivity(ctx, "aws.augmentedairuntime.StopHumanLoop", input)
	return &AugmentedairuntimeStopHumanLoopFuture{Future: future}
}
