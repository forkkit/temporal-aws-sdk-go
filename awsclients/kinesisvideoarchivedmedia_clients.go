// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/kinesisvideoarchivedmedia"
	"go.temporal.io/sdk/workflow"
)

type KinesisVideoArchivedMediaClient interface {
	GetClip(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetClipInput) (*kinesisvideoarchivedmedia.GetClipOutput, error)
	GetClipAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetClipInput) *KinesisvideoarchivedmediaGetClipFuture

	GetDASHStreamingSessionURL(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLInput) (*kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput, error)
	GetDASHStreamingSessionURLAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLInput) *KinesisvideoarchivedmediaGetDASHStreamingSessionURLFuture

	GetHLSStreamingSessionURL(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput) (*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput, error)
	GetHLSStreamingSessionURLAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput) *KinesisvideoarchivedmediaGetHLSStreamingSessionURLFuture

	GetMediaForFragmentList(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetMediaForFragmentListInput) (*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, error)
	GetMediaForFragmentListAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetMediaForFragmentListInput) *KinesisvideoarchivedmediaGetMediaForFragmentListFuture

	ListFragments(ctx workflow.Context, input *kinesisvideoarchivedmedia.ListFragmentsInput) (*kinesisvideoarchivedmedia.ListFragmentsOutput, error)
	ListFragmentsAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.ListFragmentsInput) *KinesisvideoarchivedmediaListFragmentsFuture
}

type KinesisVideoArchivedMediaStub struct{}

func NewKinesisVideoArchivedMediaStub() KinesisVideoArchivedMediaClient {
	return &KinesisVideoArchivedMediaStub{}
}

type KinesisvideoarchivedmediaGetClipFuture struct {
	Future workflow.Future
}

func (r *KinesisvideoarchivedmediaGetClipFuture) Get(ctx workflow.Context) (*kinesisvideoarchivedmedia.GetClipOutput, error) {
	var output kinesisvideoarchivedmedia.GetClipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisvideoarchivedmediaGetDASHStreamingSessionURLFuture struct {
	Future workflow.Future
}

func (r *KinesisvideoarchivedmediaGetDASHStreamingSessionURLFuture) Get(ctx workflow.Context) (*kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput, error) {
	var output kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisvideoarchivedmediaGetHLSStreamingSessionURLFuture struct {
	Future workflow.Future
}

func (r *KinesisvideoarchivedmediaGetHLSStreamingSessionURLFuture) Get(ctx workflow.Context) (*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput, error) {
	var output kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisvideoarchivedmediaGetMediaForFragmentListFuture struct {
	Future workflow.Future
}

func (r *KinesisvideoarchivedmediaGetMediaForFragmentListFuture) Get(ctx workflow.Context) (*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, error) {
	var output kinesisvideoarchivedmedia.GetMediaForFragmentListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisvideoarchivedmediaListFragmentsFuture struct {
	Future workflow.Future
}

func (r *KinesisvideoarchivedmediaListFragmentsFuture) Get(ctx workflow.Context) (*kinesisvideoarchivedmedia.ListFragmentsOutput, error) {
	var output kinesisvideoarchivedmedia.ListFragmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *KinesisVideoArchivedMediaStub) GetClip(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetClipInput) (*kinesisvideoarchivedmedia.GetClipOutput, error) {
	var output kinesisvideoarchivedmedia.GetClipOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisvideoarchivedmedia.GetClip", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisVideoArchivedMediaStub) GetClipAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetClipInput) *KinesisvideoarchivedmediaGetClipFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisvideoarchivedmedia.GetClip", input)
	return &KinesisvideoarchivedmediaGetClipFuture{Future: future}
}

func (a *KinesisVideoArchivedMediaStub) GetDASHStreamingSessionURL(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLInput) (*kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput, error) {
	var output kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisvideoarchivedmedia.GetDASHStreamingSessionURL", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisVideoArchivedMediaStub) GetDASHStreamingSessionURLAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLInput) *KinesisvideoarchivedmediaGetDASHStreamingSessionURLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisvideoarchivedmedia.GetDASHStreamingSessionURL", input)
	return &KinesisvideoarchivedmediaGetDASHStreamingSessionURLFuture{Future: future}
}

func (a *KinesisVideoArchivedMediaStub) GetHLSStreamingSessionURL(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput) (*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput, error) {
	var output kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisvideoarchivedmedia.GetHLSStreamingSessionURL", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisVideoArchivedMediaStub) GetHLSStreamingSessionURLAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput) *KinesisvideoarchivedmediaGetHLSStreamingSessionURLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisvideoarchivedmedia.GetHLSStreamingSessionURL", input)
	return &KinesisvideoarchivedmediaGetHLSStreamingSessionURLFuture{Future: future}
}

func (a *KinesisVideoArchivedMediaStub) GetMediaForFragmentList(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetMediaForFragmentListInput) (*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, error) {
	var output kinesisvideoarchivedmedia.GetMediaForFragmentListOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisvideoarchivedmedia.GetMediaForFragmentList", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisVideoArchivedMediaStub) GetMediaForFragmentListAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetMediaForFragmentListInput) *KinesisvideoarchivedmediaGetMediaForFragmentListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisvideoarchivedmedia.GetMediaForFragmentList", input)
	return &KinesisvideoarchivedmediaGetMediaForFragmentListFuture{Future: future}
}

func (a *KinesisVideoArchivedMediaStub) ListFragments(ctx workflow.Context, input *kinesisvideoarchivedmedia.ListFragmentsInput) (*kinesisvideoarchivedmedia.ListFragmentsOutput, error) {
	var output kinesisvideoarchivedmedia.ListFragmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisvideoarchivedmedia.ListFragments", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisVideoArchivedMediaStub) ListFragmentsAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.ListFragmentsInput) *KinesisvideoarchivedmediaListFragmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisvideoarchivedmedia.ListFragments", input)
	return &KinesisvideoarchivedmediaListFragmentsFuture{Future: future}
}
