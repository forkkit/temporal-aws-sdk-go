// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/kendra"
	"go.temporal.io/sdk/workflow"
)

type KendraClient interface {
	BatchDeleteDocument(ctx workflow.Context, input *kendra.BatchDeleteDocumentInput) (*kendra.BatchDeleteDocumentOutput, error)
	BatchDeleteDocumentAsync(ctx workflow.Context, input *kendra.BatchDeleteDocumentInput) *KendraBatchDeleteDocumentFuture

	BatchPutDocument(ctx workflow.Context, input *kendra.BatchPutDocumentInput) (*kendra.BatchPutDocumentOutput, error)
	BatchPutDocumentAsync(ctx workflow.Context, input *kendra.BatchPutDocumentInput) *KendraBatchPutDocumentFuture

	CreateDataSource(ctx workflow.Context, input *kendra.CreateDataSourceInput) (*kendra.CreateDataSourceOutput, error)
	CreateDataSourceAsync(ctx workflow.Context, input *kendra.CreateDataSourceInput) *KendraCreateDataSourceFuture

	CreateFaq(ctx workflow.Context, input *kendra.CreateFaqInput) (*kendra.CreateFaqOutput, error)
	CreateFaqAsync(ctx workflow.Context, input *kendra.CreateFaqInput) *KendraCreateFaqFuture

	CreateIndex(ctx workflow.Context, input *kendra.CreateIndexInput) (*kendra.CreateIndexOutput, error)
	CreateIndexAsync(ctx workflow.Context, input *kendra.CreateIndexInput) *KendraCreateIndexFuture

	DeleteDataSource(ctx workflow.Context, input *kendra.DeleteDataSourceInput) (*kendra.DeleteDataSourceOutput, error)
	DeleteDataSourceAsync(ctx workflow.Context, input *kendra.DeleteDataSourceInput) *KendraDeleteDataSourceFuture

	DeleteFaq(ctx workflow.Context, input *kendra.DeleteFaqInput) (*kendra.DeleteFaqOutput, error)
	DeleteFaqAsync(ctx workflow.Context, input *kendra.DeleteFaqInput) *KendraDeleteFaqFuture

	DeleteIndex(ctx workflow.Context, input *kendra.DeleteIndexInput) (*kendra.DeleteIndexOutput, error)
	DeleteIndexAsync(ctx workflow.Context, input *kendra.DeleteIndexInput) *KendraDeleteIndexFuture

	DescribeDataSource(ctx workflow.Context, input *kendra.DescribeDataSourceInput) (*kendra.DescribeDataSourceOutput, error)
	DescribeDataSourceAsync(ctx workflow.Context, input *kendra.DescribeDataSourceInput) *KendraDescribeDataSourceFuture

	DescribeFaq(ctx workflow.Context, input *kendra.DescribeFaqInput) (*kendra.DescribeFaqOutput, error)
	DescribeFaqAsync(ctx workflow.Context, input *kendra.DescribeFaqInput) *KendraDescribeFaqFuture

	DescribeIndex(ctx workflow.Context, input *kendra.DescribeIndexInput) (*kendra.DescribeIndexOutput, error)
	DescribeIndexAsync(ctx workflow.Context, input *kendra.DescribeIndexInput) *KendraDescribeIndexFuture

	ListDataSourceSyncJobs(ctx workflow.Context, input *kendra.ListDataSourceSyncJobsInput) (*kendra.ListDataSourceSyncJobsOutput, error)
	ListDataSourceSyncJobsAsync(ctx workflow.Context, input *kendra.ListDataSourceSyncJobsInput) *KendraListDataSourceSyncJobsFuture

	ListDataSources(ctx workflow.Context, input *kendra.ListDataSourcesInput) (*kendra.ListDataSourcesOutput, error)
	ListDataSourcesAsync(ctx workflow.Context, input *kendra.ListDataSourcesInput) *KendraListDataSourcesFuture

	ListFaqs(ctx workflow.Context, input *kendra.ListFaqsInput) (*kendra.ListFaqsOutput, error)
	ListFaqsAsync(ctx workflow.Context, input *kendra.ListFaqsInput) *KendraListFaqsFuture

	ListIndices(ctx workflow.Context, input *kendra.ListIndicesInput) (*kendra.ListIndicesOutput, error)
	ListIndicesAsync(ctx workflow.Context, input *kendra.ListIndicesInput) *KendraListIndicesFuture

	ListTagsForResource(ctx workflow.Context, input *kendra.ListTagsForResourceInput) (*kendra.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *kendra.ListTagsForResourceInput) *KendraListTagsForResourceFuture

	Query(ctx workflow.Context, input *kendra.QueryInput) (*kendra.QueryOutput, error)
	QueryAsync(ctx workflow.Context, input *kendra.QueryInput) *KendraQueryFuture

	StartDataSourceSyncJob(ctx workflow.Context, input *kendra.StartDataSourceSyncJobInput) (*kendra.StartDataSourceSyncJobOutput, error)
	StartDataSourceSyncJobAsync(ctx workflow.Context, input *kendra.StartDataSourceSyncJobInput) *KendraStartDataSourceSyncJobFuture

	StopDataSourceSyncJob(ctx workflow.Context, input *kendra.StopDataSourceSyncJobInput) (*kendra.StopDataSourceSyncJobOutput, error)
	StopDataSourceSyncJobAsync(ctx workflow.Context, input *kendra.StopDataSourceSyncJobInput) *KendraStopDataSourceSyncJobFuture

	SubmitFeedback(ctx workflow.Context, input *kendra.SubmitFeedbackInput) (*kendra.SubmitFeedbackOutput, error)
	SubmitFeedbackAsync(ctx workflow.Context, input *kendra.SubmitFeedbackInput) *KendraSubmitFeedbackFuture

	TagResource(ctx workflow.Context, input *kendra.TagResourceInput) (*kendra.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *kendra.TagResourceInput) *KendraTagResourceFuture

	UntagResource(ctx workflow.Context, input *kendra.UntagResourceInput) (*kendra.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *kendra.UntagResourceInput) *KendraUntagResourceFuture

	UpdateDataSource(ctx workflow.Context, input *kendra.UpdateDataSourceInput) (*kendra.UpdateDataSourceOutput, error)
	UpdateDataSourceAsync(ctx workflow.Context, input *kendra.UpdateDataSourceInput) *KendraUpdateDataSourceFuture

	UpdateIndex(ctx workflow.Context, input *kendra.UpdateIndexInput) (*kendra.UpdateIndexOutput, error)
	UpdateIndexAsync(ctx workflow.Context, input *kendra.UpdateIndexInput) *KendraUpdateIndexFuture
}

type KendraStub struct{}

func NewKendraStub() KendraClient {
	return &KendraStub{}
}

type KendraBatchDeleteDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraBatchDeleteDocumentFuture) Get(ctx workflow.Context) (*kendra.BatchDeleteDocumentOutput, error) {
	var output kendra.BatchDeleteDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraBatchPutDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraBatchPutDocumentFuture) Get(ctx workflow.Context) (*kendra.BatchPutDocumentOutput, error) {
	var output kendra.BatchPutDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraCreateDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraCreateDataSourceFuture) Get(ctx workflow.Context) (*kendra.CreateDataSourceOutput, error) {
	var output kendra.CreateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraCreateFaqFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraCreateFaqFuture) Get(ctx workflow.Context) (*kendra.CreateFaqOutput, error) {
	var output kendra.CreateFaqOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraCreateIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraCreateIndexFuture) Get(ctx workflow.Context) (*kendra.CreateIndexOutput, error) {
	var output kendra.CreateIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraDeleteDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraDeleteDataSourceFuture) Get(ctx workflow.Context) (*kendra.DeleteDataSourceOutput, error) {
	var output kendra.DeleteDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraDeleteFaqFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraDeleteFaqFuture) Get(ctx workflow.Context) (*kendra.DeleteFaqOutput, error) {
	var output kendra.DeleteFaqOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraDeleteIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraDeleteIndexFuture) Get(ctx workflow.Context) (*kendra.DeleteIndexOutput, error) {
	var output kendra.DeleteIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraDescribeDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraDescribeDataSourceFuture) Get(ctx workflow.Context) (*kendra.DescribeDataSourceOutput, error) {
	var output kendra.DescribeDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraDescribeFaqFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraDescribeFaqFuture) Get(ctx workflow.Context) (*kendra.DescribeFaqOutput, error) {
	var output kendra.DescribeFaqOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraDescribeIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraDescribeIndexFuture) Get(ctx workflow.Context) (*kendra.DescribeIndexOutput, error) {
	var output kendra.DescribeIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraListDataSourceSyncJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraListDataSourceSyncJobsFuture) Get(ctx workflow.Context) (*kendra.ListDataSourceSyncJobsOutput, error) {
	var output kendra.ListDataSourceSyncJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraListDataSourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraListDataSourcesFuture) Get(ctx workflow.Context) (*kendra.ListDataSourcesOutput, error) {
	var output kendra.ListDataSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraListFaqsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraListFaqsFuture) Get(ctx workflow.Context) (*kendra.ListFaqsOutput, error) {
	var output kendra.ListFaqsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraListIndicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraListIndicesFuture) Get(ctx workflow.Context) (*kendra.ListIndicesOutput, error) {
	var output kendra.ListIndicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraListTagsForResourceFuture) Get(ctx workflow.Context) (*kendra.ListTagsForResourceOutput, error) {
	var output kendra.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraQueryFuture) Get(ctx workflow.Context) (*kendra.QueryOutput, error) {
	var output kendra.QueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraStartDataSourceSyncJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraStartDataSourceSyncJobFuture) Get(ctx workflow.Context) (*kendra.StartDataSourceSyncJobOutput, error) {
	var output kendra.StartDataSourceSyncJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraStopDataSourceSyncJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraStopDataSourceSyncJobFuture) Get(ctx workflow.Context) (*kendra.StopDataSourceSyncJobOutput, error) {
	var output kendra.StopDataSourceSyncJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraSubmitFeedbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraSubmitFeedbackFuture) Get(ctx workflow.Context) (*kendra.SubmitFeedbackOutput, error) {
	var output kendra.SubmitFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraTagResourceFuture) Get(ctx workflow.Context) (*kendra.TagResourceOutput, error) {
	var output kendra.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraUntagResourceFuture) Get(ctx workflow.Context) (*kendra.UntagResourceOutput, error) {
	var output kendra.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraUpdateDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraUpdateDataSourceFuture) Get(ctx workflow.Context) (*kendra.UpdateDataSourceOutput, error) {
	var output kendra.UpdateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KendraUpdateIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KendraUpdateIndexFuture) Get(ctx workflow.Context) (*kendra.UpdateIndexOutput, error) {
	var output kendra.UpdateIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) BatchDeleteDocument(ctx workflow.Context, input *kendra.BatchDeleteDocumentInput) (*kendra.BatchDeleteDocumentOutput, error) {
	var output kendra.BatchDeleteDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.BatchDeleteDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) BatchDeleteDocumentAsync(ctx workflow.Context, input *kendra.BatchDeleteDocumentInput) *KendraBatchDeleteDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.BatchDeleteDocument", input)
	return &KendraBatchDeleteDocumentFuture{Future: future}
}

func (a *KendraStub) BatchPutDocument(ctx workflow.Context, input *kendra.BatchPutDocumentInput) (*kendra.BatchPutDocumentOutput, error) {
	var output kendra.BatchPutDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.BatchPutDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) BatchPutDocumentAsync(ctx workflow.Context, input *kendra.BatchPutDocumentInput) *KendraBatchPutDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.BatchPutDocument", input)
	return &KendraBatchPutDocumentFuture{Future: future}
}

func (a *KendraStub) CreateDataSource(ctx workflow.Context, input *kendra.CreateDataSourceInput) (*kendra.CreateDataSourceOutput, error) {
	var output kendra.CreateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.CreateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) CreateDataSourceAsync(ctx workflow.Context, input *kendra.CreateDataSourceInput) *KendraCreateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.CreateDataSource", input)
	return &KendraCreateDataSourceFuture{Future: future}
}

func (a *KendraStub) CreateFaq(ctx workflow.Context, input *kendra.CreateFaqInput) (*kendra.CreateFaqOutput, error) {
	var output kendra.CreateFaqOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.CreateFaq", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) CreateFaqAsync(ctx workflow.Context, input *kendra.CreateFaqInput) *KendraCreateFaqFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.CreateFaq", input)
	return &KendraCreateFaqFuture{Future: future}
}

func (a *KendraStub) CreateIndex(ctx workflow.Context, input *kendra.CreateIndexInput) (*kendra.CreateIndexOutput, error) {
	var output kendra.CreateIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.CreateIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) CreateIndexAsync(ctx workflow.Context, input *kendra.CreateIndexInput) *KendraCreateIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.CreateIndex", input)
	return &KendraCreateIndexFuture{Future: future}
}

func (a *KendraStub) DeleteDataSource(ctx workflow.Context, input *kendra.DeleteDataSourceInput) (*kendra.DeleteDataSourceOutput, error) {
	var output kendra.DeleteDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.DeleteDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) DeleteDataSourceAsync(ctx workflow.Context, input *kendra.DeleteDataSourceInput) *KendraDeleteDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.DeleteDataSource", input)
	return &KendraDeleteDataSourceFuture{Future: future}
}

func (a *KendraStub) DeleteFaq(ctx workflow.Context, input *kendra.DeleteFaqInput) (*kendra.DeleteFaqOutput, error) {
	var output kendra.DeleteFaqOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.DeleteFaq", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) DeleteFaqAsync(ctx workflow.Context, input *kendra.DeleteFaqInput) *KendraDeleteFaqFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.DeleteFaq", input)
	return &KendraDeleteFaqFuture{Future: future}
}

func (a *KendraStub) DeleteIndex(ctx workflow.Context, input *kendra.DeleteIndexInput) (*kendra.DeleteIndexOutput, error) {
	var output kendra.DeleteIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.DeleteIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) DeleteIndexAsync(ctx workflow.Context, input *kendra.DeleteIndexInput) *KendraDeleteIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.DeleteIndex", input)
	return &KendraDeleteIndexFuture{Future: future}
}

func (a *KendraStub) DescribeDataSource(ctx workflow.Context, input *kendra.DescribeDataSourceInput) (*kendra.DescribeDataSourceOutput, error) {
	var output kendra.DescribeDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.DescribeDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) DescribeDataSourceAsync(ctx workflow.Context, input *kendra.DescribeDataSourceInput) *KendraDescribeDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.DescribeDataSource", input)
	return &KendraDescribeDataSourceFuture{Future: future}
}

func (a *KendraStub) DescribeFaq(ctx workflow.Context, input *kendra.DescribeFaqInput) (*kendra.DescribeFaqOutput, error) {
	var output kendra.DescribeFaqOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.DescribeFaq", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) DescribeFaqAsync(ctx workflow.Context, input *kendra.DescribeFaqInput) *KendraDescribeFaqFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.DescribeFaq", input)
	return &KendraDescribeFaqFuture{Future: future}
}

func (a *KendraStub) DescribeIndex(ctx workflow.Context, input *kendra.DescribeIndexInput) (*kendra.DescribeIndexOutput, error) {
	var output kendra.DescribeIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.DescribeIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) DescribeIndexAsync(ctx workflow.Context, input *kendra.DescribeIndexInput) *KendraDescribeIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.DescribeIndex", input)
	return &KendraDescribeIndexFuture{Future: future}
}

func (a *KendraStub) ListDataSourceSyncJobs(ctx workflow.Context, input *kendra.ListDataSourceSyncJobsInput) (*kendra.ListDataSourceSyncJobsOutput, error) {
	var output kendra.ListDataSourceSyncJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.ListDataSourceSyncJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) ListDataSourceSyncJobsAsync(ctx workflow.Context, input *kendra.ListDataSourceSyncJobsInput) *KendraListDataSourceSyncJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.ListDataSourceSyncJobs", input)
	return &KendraListDataSourceSyncJobsFuture{Future: future}
}

func (a *KendraStub) ListDataSources(ctx workflow.Context, input *kendra.ListDataSourcesInput) (*kendra.ListDataSourcesOutput, error) {
	var output kendra.ListDataSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.ListDataSources", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) ListDataSourcesAsync(ctx workflow.Context, input *kendra.ListDataSourcesInput) *KendraListDataSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.ListDataSources", input)
	return &KendraListDataSourcesFuture{Future: future}
}

func (a *KendraStub) ListFaqs(ctx workflow.Context, input *kendra.ListFaqsInput) (*kendra.ListFaqsOutput, error) {
	var output kendra.ListFaqsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.ListFaqs", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) ListFaqsAsync(ctx workflow.Context, input *kendra.ListFaqsInput) *KendraListFaqsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.ListFaqs", input)
	return &KendraListFaqsFuture{Future: future}
}

func (a *KendraStub) ListIndices(ctx workflow.Context, input *kendra.ListIndicesInput) (*kendra.ListIndicesOutput, error) {
	var output kendra.ListIndicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.ListIndices", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) ListIndicesAsync(ctx workflow.Context, input *kendra.ListIndicesInput) *KendraListIndicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.ListIndices", input)
	return &KendraListIndicesFuture{Future: future}
}

func (a *KendraStub) ListTagsForResource(ctx workflow.Context, input *kendra.ListTagsForResourceInput) (*kendra.ListTagsForResourceOutput, error) {
	var output kendra.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) ListTagsForResourceAsync(ctx workflow.Context, input *kendra.ListTagsForResourceInput) *KendraListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.ListTagsForResource", input)
	return &KendraListTagsForResourceFuture{Future: future}
}

func (a *KendraStub) Query(ctx workflow.Context, input *kendra.QueryInput) (*kendra.QueryOutput, error) {
	var output kendra.QueryOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.Query", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) QueryAsync(ctx workflow.Context, input *kendra.QueryInput) *KendraQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.Query", input)
	return &KendraQueryFuture{Future: future}
}

func (a *KendraStub) StartDataSourceSyncJob(ctx workflow.Context, input *kendra.StartDataSourceSyncJobInput) (*kendra.StartDataSourceSyncJobOutput, error) {
	var output kendra.StartDataSourceSyncJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.StartDataSourceSyncJob", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) StartDataSourceSyncJobAsync(ctx workflow.Context, input *kendra.StartDataSourceSyncJobInput) *KendraStartDataSourceSyncJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.StartDataSourceSyncJob", input)
	return &KendraStartDataSourceSyncJobFuture{Future: future}
}

func (a *KendraStub) StopDataSourceSyncJob(ctx workflow.Context, input *kendra.StopDataSourceSyncJobInput) (*kendra.StopDataSourceSyncJobOutput, error) {
	var output kendra.StopDataSourceSyncJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.StopDataSourceSyncJob", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) StopDataSourceSyncJobAsync(ctx workflow.Context, input *kendra.StopDataSourceSyncJobInput) *KendraStopDataSourceSyncJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.StopDataSourceSyncJob", input)
	return &KendraStopDataSourceSyncJobFuture{Future: future}
}

func (a *KendraStub) SubmitFeedback(ctx workflow.Context, input *kendra.SubmitFeedbackInput) (*kendra.SubmitFeedbackOutput, error) {
	var output kendra.SubmitFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.SubmitFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) SubmitFeedbackAsync(ctx workflow.Context, input *kendra.SubmitFeedbackInput) *KendraSubmitFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.SubmitFeedback", input)
	return &KendraSubmitFeedbackFuture{Future: future}
}

func (a *KendraStub) TagResource(ctx workflow.Context, input *kendra.TagResourceInput) (*kendra.TagResourceOutput, error) {
	var output kendra.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) TagResourceAsync(ctx workflow.Context, input *kendra.TagResourceInput) *KendraTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.TagResource", input)
	return &KendraTagResourceFuture{Future: future}
}

func (a *KendraStub) UntagResource(ctx workflow.Context, input *kendra.UntagResourceInput) (*kendra.UntagResourceOutput, error) {
	var output kendra.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) UntagResourceAsync(ctx workflow.Context, input *kendra.UntagResourceInput) *KendraUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.UntagResource", input)
	return &KendraUntagResourceFuture{Future: future}
}

func (a *KendraStub) UpdateDataSource(ctx workflow.Context, input *kendra.UpdateDataSourceInput) (*kendra.UpdateDataSourceOutput, error) {
	var output kendra.UpdateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.UpdateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) UpdateDataSourceAsync(ctx workflow.Context, input *kendra.UpdateDataSourceInput) *KendraUpdateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.UpdateDataSource", input)
	return &KendraUpdateDataSourceFuture{Future: future}
}

func (a *KendraStub) UpdateIndex(ctx workflow.Context, input *kendra.UpdateIndexInput) (*kendra.UpdateIndexOutput, error) {
	var output kendra.UpdateIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws.kendra.UpdateIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *KendraStub) UpdateIndexAsync(ctx workflow.Context, input *kendra.UpdateIndexInput) *KendraUpdateIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kendra.UpdateIndex", input)
	return &KendraUpdateIndexFuture{Future: future}
}
