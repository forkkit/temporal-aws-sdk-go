// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/ec2"
	"go.temporal.io/sdk/workflow"
)

type EC2Client interface {
	AcceptReservedInstancesExchangeQuote(ctx workflow.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error)
	AcceptReservedInstancesExchangeQuoteAsync(ctx workflow.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput) *EC2AcceptReservedInstancesExchangeQuoteFuture

	AcceptTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.AcceptTransitGatewayPeeringAttachmentInput) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error)
	AcceptTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.AcceptTransitGatewayPeeringAttachmentInput) *EC2AcceptTransitGatewayPeeringAttachmentFuture

	AcceptTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error)
	AcceptTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.AcceptTransitGatewayVpcAttachmentInput) *EC2AcceptTransitGatewayVpcAttachmentFuture

	AcceptVpcEndpointConnections(ctx workflow.Context, input *ec2.AcceptVpcEndpointConnectionsInput) (*ec2.AcceptVpcEndpointConnectionsOutput, error)
	AcceptVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.AcceptVpcEndpointConnectionsInput) *EC2AcceptVpcEndpointConnectionsFuture

	AcceptVpcPeeringConnection(ctx workflow.Context, input *ec2.AcceptVpcPeeringConnectionInput) (*ec2.AcceptVpcPeeringConnectionOutput, error)
	AcceptVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.AcceptVpcPeeringConnectionInput) *EC2AcceptVpcPeeringConnectionFuture

	AdvertiseByoipCidr(ctx workflow.Context, input *ec2.AdvertiseByoipCidrInput) (*ec2.AdvertiseByoipCidrOutput, error)
	AdvertiseByoipCidrAsync(ctx workflow.Context, input *ec2.AdvertiseByoipCidrInput) *EC2AdvertiseByoipCidrFuture

	AllocateAddress(ctx workflow.Context, input *ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error)
	AllocateAddressAsync(ctx workflow.Context, input *ec2.AllocateAddressInput) *EC2AllocateAddressFuture

	AllocateHosts(ctx workflow.Context, input *ec2.AllocateHostsInput) (*ec2.AllocateHostsOutput, error)
	AllocateHostsAsync(ctx workflow.Context, input *ec2.AllocateHostsInput) *EC2AllocateHostsFuture

	ApplySecurityGroupsToClientVpnTargetNetwork(ctx workflow.Context, input *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error)
	ApplySecurityGroupsToClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) *EC2ApplySecurityGroupsToClientVpnTargetNetworkFuture

	AssignIpv6Addresses(ctx workflow.Context, input *ec2.AssignIpv6AddressesInput) (*ec2.AssignIpv6AddressesOutput, error)
	AssignIpv6AddressesAsync(ctx workflow.Context, input *ec2.AssignIpv6AddressesInput) *EC2AssignIpv6AddressesFuture

	AssignPrivateIpAddresses(ctx workflow.Context, input *ec2.AssignPrivateIpAddressesInput) (*ec2.AssignPrivateIpAddressesOutput, error)
	AssignPrivateIpAddressesAsync(ctx workflow.Context, input *ec2.AssignPrivateIpAddressesInput) *EC2AssignPrivateIpAddressesFuture

	AssociateAddress(ctx workflow.Context, input *ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error)
	AssociateAddressAsync(ctx workflow.Context, input *ec2.AssociateAddressInput) *EC2AssociateAddressFuture

	AssociateClientVpnTargetNetwork(ctx workflow.Context, input *ec2.AssociateClientVpnTargetNetworkInput) (*ec2.AssociateClientVpnTargetNetworkOutput, error)
	AssociateClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.AssociateClientVpnTargetNetworkInput) *EC2AssociateClientVpnTargetNetworkFuture

	AssociateDhcpOptions(ctx workflow.Context, input *ec2.AssociateDhcpOptionsInput) (*ec2.AssociateDhcpOptionsOutput, error)
	AssociateDhcpOptionsAsync(ctx workflow.Context, input *ec2.AssociateDhcpOptionsInput) *EC2AssociateDhcpOptionsFuture

	AssociateIamInstanceProfile(ctx workflow.Context, input *ec2.AssociateIamInstanceProfileInput) (*ec2.AssociateIamInstanceProfileOutput, error)
	AssociateIamInstanceProfileAsync(ctx workflow.Context, input *ec2.AssociateIamInstanceProfileInput) *EC2AssociateIamInstanceProfileFuture

	AssociateRouteTable(ctx workflow.Context, input *ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error)
	AssociateRouteTableAsync(ctx workflow.Context, input *ec2.AssociateRouteTableInput) *EC2AssociateRouteTableFuture

	AssociateSubnetCidrBlock(ctx workflow.Context, input *ec2.AssociateSubnetCidrBlockInput) (*ec2.AssociateSubnetCidrBlockOutput, error)
	AssociateSubnetCidrBlockAsync(ctx workflow.Context, input *ec2.AssociateSubnetCidrBlockInput) *EC2AssociateSubnetCidrBlockFuture

	AssociateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.AssociateTransitGatewayMulticastDomainInput) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error)
	AssociateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.AssociateTransitGatewayMulticastDomainInput) *EC2AssociateTransitGatewayMulticastDomainFuture

	AssociateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.AssociateTransitGatewayRouteTableInput) (*ec2.AssociateTransitGatewayRouteTableOutput, error)
	AssociateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.AssociateTransitGatewayRouteTableInput) *EC2AssociateTransitGatewayRouteTableFuture

	AssociateVpcCidrBlock(ctx workflow.Context, input *ec2.AssociateVpcCidrBlockInput) (*ec2.AssociateVpcCidrBlockOutput, error)
	AssociateVpcCidrBlockAsync(ctx workflow.Context, input *ec2.AssociateVpcCidrBlockInput) *EC2AssociateVpcCidrBlockFuture

	AttachClassicLinkVpc(ctx workflow.Context, input *ec2.AttachClassicLinkVpcInput) (*ec2.AttachClassicLinkVpcOutput, error)
	AttachClassicLinkVpcAsync(ctx workflow.Context, input *ec2.AttachClassicLinkVpcInput) *EC2AttachClassicLinkVpcFuture

	AttachInternetGateway(ctx workflow.Context, input *ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error)
	AttachInternetGatewayAsync(ctx workflow.Context, input *ec2.AttachInternetGatewayInput) *EC2AttachInternetGatewayFuture

	AttachNetworkInterface(ctx workflow.Context, input *ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error)
	AttachNetworkInterfaceAsync(ctx workflow.Context, input *ec2.AttachNetworkInterfaceInput) *EC2AttachNetworkInterfaceFuture

	AttachVolume(ctx workflow.Context, input *ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error)
	AttachVolumeAsync(ctx workflow.Context, input *ec2.AttachVolumeInput) *EC2AttachVolumeFuture

	AttachVpnGateway(ctx workflow.Context, input *ec2.AttachVpnGatewayInput) (*ec2.AttachVpnGatewayOutput, error)
	AttachVpnGatewayAsync(ctx workflow.Context, input *ec2.AttachVpnGatewayInput) *EC2AttachVpnGatewayFuture

	AuthorizeClientVpnIngress(ctx workflow.Context, input *ec2.AuthorizeClientVpnIngressInput) (*ec2.AuthorizeClientVpnIngressOutput, error)
	AuthorizeClientVpnIngressAsync(ctx workflow.Context, input *ec2.AuthorizeClientVpnIngressInput) *EC2AuthorizeClientVpnIngressFuture

	AuthorizeSecurityGroupEgress(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error)
	AuthorizeSecurityGroupEgressAsync(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupEgressInput) *EC2AuthorizeSecurityGroupEgressFuture

	AuthorizeSecurityGroupIngress(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error)
	AuthorizeSecurityGroupIngressAsync(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupIngressInput) *EC2AuthorizeSecurityGroupIngressFuture

	BundleInstance(ctx workflow.Context, input *ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error)
	BundleInstanceAsync(ctx workflow.Context, input *ec2.BundleInstanceInput) *EC2BundleInstanceFuture

	CancelBundleTask(ctx workflow.Context, input *ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error)
	CancelBundleTaskAsync(ctx workflow.Context, input *ec2.CancelBundleTaskInput) *EC2CancelBundleTaskFuture

	CancelCapacityReservation(ctx workflow.Context, input *ec2.CancelCapacityReservationInput) (*ec2.CancelCapacityReservationOutput, error)
	CancelCapacityReservationAsync(ctx workflow.Context, input *ec2.CancelCapacityReservationInput) *EC2CancelCapacityReservationFuture

	CancelConversionTask(ctx workflow.Context, input *ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error)
	CancelConversionTaskAsync(ctx workflow.Context, input *ec2.CancelConversionTaskInput) *EC2CancelConversionTaskFuture

	CancelExportTask(ctx workflow.Context, input *ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error)
	CancelExportTaskAsync(ctx workflow.Context, input *ec2.CancelExportTaskInput) *EC2CancelExportTaskFuture

	CancelImportTask(ctx workflow.Context, input *ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error)
	CancelImportTaskAsync(ctx workflow.Context, input *ec2.CancelImportTaskInput) *EC2CancelImportTaskFuture

	CancelReservedInstancesListing(ctx workflow.Context, input *ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error)
	CancelReservedInstancesListingAsync(ctx workflow.Context, input *ec2.CancelReservedInstancesListingInput) *EC2CancelReservedInstancesListingFuture

	CancelSpotFleetRequests(ctx workflow.Context, input *ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error)
	CancelSpotFleetRequestsAsync(ctx workflow.Context, input *ec2.CancelSpotFleetRequestsInput) *EC2CancelSpotFleetRequestsFuture

	CancelSpotInstanceRequests(ctx workflow.Context, input *ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error)
	CancelSpotInstanceRequestsAsync(ctx workflow.Context, input *ec2.CancelSpotInstanceRequestsInput) *EC2CancelSpotInstanceRequestsFuture

	ConfirmProductInstance(ctx workflow.Context, input *ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error)
	ConfirmProductInstanceAsync(ctx workflow.Context, input *ec2.ConfirmProductInstanceInput) *EC2ConfirmProductInstanceFuture

	CopyFpgaImage(ctx workflow.Context, input *ec2.CopyFpgaImageInput) (*ec2.CopyFpgaImageOutput, error)
	CopyFpgaImageAsync(ctx workflow.Context, input *ec2.CopyFpgaImageInput) *EC2CopyFpgaImageFuture

	CopyImage(ctx workflow.Context, input *ec2.CopyImageInput) (*ec2.CopyImageOutput, error)
	CopyImageAsync(ctx workflow.Context, input *ec2.CopyImageInput) *EC2CopyImageFuture

	CopySnapshot(ctx workflow.Context, input *ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error)
	CopySnapshotAsync(ctx workflow.Context, input *ec2.CopySnapshotInput) *EC2CopySnapshotFuture

	CreateCapacityReservation(ctx workflow.Context, input *ec2.CreateCapacityReservationInput) (*ec2.CreateCapacityReservationOutput, error)
	CreateCapacityReservationAsync(ctx workflow.Context, input *ec2.CreateCapacityReservationInput) *EC2CreateCapacityReservationFuture

	CreateCarrierGateway(ctx workflow.Context, input *ec2.CreateCarrierGatewayInput) (*ec2.CreateCarrierGatewayOutput, error)
	CreateCarrierGatewayAsync(ctx workflow.Context, input *ec2.CreateCarrierGatewayInput) *EC2CreateCarrierGatewayFuture

	CreateClientVpnEndpoint(ctx workflow.Context, input *ec2.CreateClientVpnEndpointInput) (*ec2.CreateClientVpnEndpointOutput, error)
	CreateClientVpnEndpointAsync(ctx workflow.Context, input *ec2.CreateClientVpnEndpointInput) *EC2CreateClientVpnEndpointFuture

	CreateClientVpnRoute(ctx workflow.Context, input *ec2.CreateClientVpnRouteInput) (*ec2.CreateClientVpnRouteOutput, error)
	CreateClientVpnRouteAsync(ctx workflow.Context, input *ec2.CreateClientVpnRouteInput) *EC2CreateClientVpnRouteFuture

	CreateCustomerGateway(ctx workflow.Context, input *ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error)
	CreateCustomerGatewayAsync(ctx workflow.Context, input *ec2.CreateCustomerGatewayInput) *EC2CreateCustomerGatewayFuture

	CreateDefaultSubnet(ctx workflow.Context, input *ec2.CreateDefaultSubnetInput) (*ec2.CreateDefaultSubnetOutput, error)
	CreateDefaultSubnetAsync(ctx workflow.Context, input *ec2.CreateDefaultSubnetInput) *EC2CreateDefaultSubnetFuture

	CreateDefaultVpc(ctx workflow.Context, input *ec2.CreateDefaultVpcInput) (*ec2.CreateDefaultVpcOutput, error)
	CreateDefaultVpcAsync(ctx workflow.Context, input *ec2.CreateDefaultVpcInput) *EC2CreateDefaultVpcFuture

	CreateDhcpOptions(ctx workflow.Context, input *ec2.CreateDhcpOptionsInput) (*ec2.CreateDhcpOptionsOutput, error)
	CreateDhcpOptionsAsync(ctx workflow.Context, input *ec2.CreateDhcpOptionsInput) *EC2CreateDhcpOptionsFuture

	CreateEgressOnlyInternetGateway(ctx workflow.Context, input *ec2.CreateEgressOnlyInternetGatewayInput) (*ec2.CreateEgressOnlyInternetGatewayOutput, error)
	CreateEgressOnlyInternetGatewayAsync(ctx workflow.Context, input *ec2.CreateEgressOnlyInternetGatewayInput) *EC2CreateEgressOnlyInternetGatewayFuture

	CreateFleet(ctx workflow.Context, input *ec2.CreateFleetInput) (*ec2.CreateFleetOutput, error)
	CreateFleetAsync(ctx workflow.Context, input *ec2.CreateFleetInput) *EC2CreateFleetFuture

	CreateFlowLogs(ctx workflow.Context, input *ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error)
	CreateFlowLogsAsync(ctx workflow.Context, input *ec2.CreateFlowLogsInput) *EC2CreateFlowLogsFuture

	CreateFpgaImage(ctx workflow.Context, input *ec2.CreateFpgaImageInput) (*ec2.CreateFpgaImageOutput, error)
	CreateFpgaImageAsync(ctx workflow.Context, input *ec2.CreateFpgaImageInput) *EC2CreateFpgaImageFuture

	CreateImage(ctx workflow.Context, input *ec2.CreateImageInput) (*ec2.CreateImageOutput, error)
	CreateImageAsync(ctx workflow.Context, input *ec2.CreateImageInput) *EC2CreateImageFuture

	CreateInstanceExportTask(ctx workflow.Context, input *ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error)
	CreateInstanceExportTaskAsync(ctx workflow.Context, input *ec2.CreateInstanceExportTaskInput) *EC2CreateInstanceExportTaskFuture

	CreateInternetGateway(ctx workflow.Context, input *ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error)
	CreateInternetGatewayAsync(ctx workflow.Context, input *ec2.CreateInternetGatewayInput) *EC2CreateInternetGatewayFuture

	CreateKeyPair(ctx workflow.Context, input *ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error)
	CreateKeyPairAsync(ctx workflow.Context, input *ec2.CreateKeyPairInput) *EC2CreateKeyPairFuture

	CreateLaunchTemplate(ctx workflow.Context, input *ec2.CreateLaunchTemplateInput) (*ec2.CreateLaunchTemplateOutput, error)
	CreateLaunchTemplateAsync(ctx workflow.Context, input *ec2.CreateLaunchTemplateInput) *EC2CreateLaunchTemplateFuture

	CreateLaunchTemplateVersion(ctx workflow.Context, input *ec2.CreateLaunchTemplateVersionInput) (*ec2.CreateLaunchTemplateVersionOutput, error)
	CreateLaunchTemplateVersionAsync(ctx workflow.Context, input *ec2.CreateLaunchTemplateVersionInput) *EC2CreateLaunchTemplateVersionFuture

	CreateLocalGatewayRoute(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteInput) (*ec2.CreateLocalGatewayRouteOutput, error)
	CreateLocalGatewayRouteAsync(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteInput) *EC2CreateLocalGatewayRouteFuture

	CreateLocalGatewayRouteTableVpcAssociation(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error)
	CreateLocalGatewayRouteTableVpcAssociationAsync(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) *EC2CreateLocalGatewayRouteTableVpcAssociationFuture

	CreateManagedPrefixList(ctx workflow.Context, input *ec2.CreateManagedPrefixListInput) (*ec2.CreateManagedPrefixListOutput, error)
	CreateManagedPrefixListAsync(ctx workflow.Context, input *ec2.CreateManagedPrefixListInput) *EC2CreateManagedPrefixListFuture

	CreateNatGateway(ctx workflow.Context, input *ec2.CreateNatGatewayInput) (*ec2.CreateNatGatewayOutput, error)
	CreateNatGatewayAsync(ctx workflow.Context, input *ec2.CreateNatGatewayInput) *EC2CreateNatGatewayFuture

	CreateNetworkAcl(ctx workflow.Context, input *ec2.CreateNetworkAclInput) (*ec2.CreateNetworkAclOutput, error)
	CreateNetworkAclAsync(ctx workflow.Context, input *ec2.CreateNetworkAclInput) *EC2CreateNetworkAclFuture

	CreateNetworkAclEntry(ctx workflow.Context, input *ec2.CreateNetworkAclEntryInput) (*ec2.CreateNetworkAclEntryOutput, error)
	CreateNetworkAclEntryAsync(ctx workflow.Context, input *ec2.CreateNetworkAclEntryInput) *EC2CreateNetworkAclEntryFuture

	CreateNetworkInterface(ctx workflow.Context, input *ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error)
	CreateNetworkInterfaceAsync(ctx workflow.Context, input *ec2.CreateNetworkInterfaceInput) *EC2CreateNetworkInterfaceFuture

	CreateNetworkInterfacePermission(ctx workflow.Context, input *ec2.CreateNetworkInterfacePermissionInput) (*ec2.CreateNetworkInterfacePermissionOutput, error)
	CreateNetworkInterfacePermissionAsync(ctx workflow.Context, input *ec2.CreateNetworkInterfacePermissionInput) *EC2CreateNetworkInterfacePermissionFuture

	CreatePlacementGroup(ctx workflow.Context, input *ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error)
	CreatePlacementGroupAsync(ctx workflow.Context, input *ec2.CreatePlacementGroupInput) *EC2CreatePlacementGroupFuture

	CreateReservedInstancesListing(ctx workflow.Context, input *ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error)
	CreateReservedInstancesListingAsync(ctx workflow.Context, input *ec2.CreateReservedInstancesListingInput) *EC2CreateReservedInstancesListingFuture

	CreateRoute(ctx workflow.Context, input *ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error)
	CreateRouteAsync(ctx workflow.Context, input *ec2.CreateRouteInput) *EC2CreateRouteFuture

	CreateRouteTable(ctx workflow.Context, input *ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error)
	CreateRouteTableAsync(ctx workflow.Context, input *ec2.CreateRouteTableInput) *EC2CreateRouteTableFuture

	CreateSecurityGroup(ctx workflow.Context, input *ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error)
	CreateSecurityGroupAsync(ctx workflow.Context, input *ec2.CreateSecurityGroupInput) *EC2CreateSecurityGroupFuture

	CreateSnapshot(ctx workflow.Context, input *ec2.CreateSnapshotInput) (*ec2.Snapshot, error)
	CreateSnapshotAsync(ctx workflow.Context, input *ec2.CreateSnapshotInput) *EC2CreateSnapshotFuture

	CreateSnapshots(ctx workflow.Context, input *ec2.CreateSnapshotsInput) (*ec2.CreateSnapshotsOutput, error)
	CreateSnapshotsAsync(ctx workflow.Context, input *ec2.CreateSnapshotsInput) *EC2CreateSnapshotsFuture

	CreateSpotDatafeedSubscription(ctx workflow.Context, input *ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error)
	CreateSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.CreateSpotDatafeedSubscriptionInput) *EC2CreateSpotDatafeedSubscriptionFuture

	CreateSubnet(ctx workflow.Context, input *ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error)
	CreateSubnetAsync(ctx workflow.Context, input *ec2.CreateSubnetInput) *EC2CreateSubnetFuture

	CreateTags(ctx workflow.Context, input *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error)
	CreateTagsAsync(ctx workflow.Context, input *ec2.CreateTagsInput) *EC2CreateTagsFuture

	CreateTrafficMirrorFilter(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterInput) (*ec2.CreateTrafficMirrorFilterOutput, error)
	CreateTrafficMirrorFilterAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterInput) *EC2CreateTrafficMirrorFilterFuture

	CreateTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterRuleInput) (*ec2.CreateTrafficMirrorFilterRuleOutput, error)
	CreateTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterRuleInput) *EC2CreateTrafficMirrorFilterRuleFuture

	CreateTrafficMirrorSession(ctx workflow.Context, input *ec2.CreateTrafficMirrorSessionInput) (*ec2.CreateTrafficMirrorSessionOutput, error)
	CreateTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorSessionInput) *EC2CreateTrafficMirrorSessionFuture

	CreateTrafficMirrorTarget(ctx workflow.Context, input *ec2.CreateTrafficMirrorTargetInput) (*ec2.CreateTrafficMirrorTargetOutput, error)
	CreateTrafficMirrorTargetAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorTargetInput) *EC2CreateTrafficMirrorTargetFuture

	CreateTransitGateway(ctx workflow.Context, input *ec2.CreateTransitGatewayInput) (*ec2.CreateTransitGatewayOutput, error)
	CreateTransitGatewayAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayInput) *EC2CreateTransitGatewayFuture

	CreateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.CreateTransitGatewayMulticastDomainInput) (*ec2.CreateTransitGatewayMulticastDomainOutput, error)
	CreateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayMulticastDomainInput) *EC2CreateTransitGatewayMulticastDomainFuture

	CreateTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.CreateTransitGatewayPeeringAttachmentInput) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error)
	CreateTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayPeeringAttachmentInput) *EC2CreateTransitGatewayPeeringAttachmentFuture

	CreateTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.CreateTransitGatewayPrefixListReferenceInput) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error)
	CreateTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayPrefixListReferenceInput) *EC2CreateTransitGatewayPrefixListReferenceFuture

	CreateTransitGatewayRoute(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteInput) (*ec2.CreateTransitGatewayRouteOutput, error)
	CreateTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteInput) *EC2CreateTransitGatewayRouteFuture

	CreateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteTableInput) (*ec2.CreateTransitGatewayRouteTableOutput, error)
	CreateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteTableInput) *EC2CreateTransitGatewayRouteTableFuture

	CreateTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.CreateTransitGatewayVpcAttachmentInput) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error)
	CreateTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayVpcAttachmentInput) *EC2CreateTransitGatewayVpcAttachmentFuture

	CreateVolume(ctx workflow.Context, input *ec2.CreateVolumeInput) (*ec2.Volume, error)
	CreateVolumeAsync(ctx workflow.Context, input *ec2.CreateVolumeInput) *EC2CreateVolumeFuture

	CreateVpc(ctx workflow.Context, input *ec2.CreateVpcInput) (*ec2.CreateVpcOutput, error)
	CreateVpcAsync(ctx workflow.Context, input *ec2.CreateVpcInput) *EC2CreateVpcFuture

	CreateVpcEndpoint(ctx workflow.Context, input *ec2.CreateVpcEndpointInput) (*ec2.CreateVpcEndpointOutput, error)
	CreateVpcEndpointAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointInput) *EC2CreateVpcEndpointFuture

	CreateVpcEndpointConnectionNotification(ctx workflow.Context, input *ec2.CreateVpcEndpointConnectionNotificationInput) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error)
	CreateVpcEndpointConnectionNotificationAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointConnectionNotificationInput) *EC2CreateVpcEndpointConnectionNotificationFuture

	CreateVpcEndpointServiceConfiguration(ctx workflow.Context, input *ec2.CreateVpcEndpointServiceConfigurationInput) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error)
	CreateVpcEndpointServiceConfigurationAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointServiceConfigurationInput) *EC2CreateVpcEndpointServiceConfigurationFuture

	CreateVpcPeeringConnection(ctx workflow.Context, input *ec2.CreateVpcPeeringConnectionInput) (*ec2.CreateVpcPeeringConnectionOutput, error)
	CreateVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.CreateVpcPeeringConnectionInput) *EC2CreateVpcPeeringConnectionFuture

	CreateVpnConnection(ctx workflow.Context, input *ec2.CreateVpnConnectionInput) (*ec2.CreateVpnConnectionOutput, error)
	CreateVpnConnectionAsync(ctx workflow.Context, input *ec2.CreateVpnConnectionInput) *EC2CreateVpnConnectionFuture

	CreateVpnConnectionRoute(ctx workflow.Context, input *ec2.CreateVpnConnectionRouteInput) (*ec2.CreateVpnConnectionRouteOutput, error)
	CreateVpnConnectionRouteAsync(ctx workflow.Context, input *ec2.CreateVpnConnectionRouteInput) *EC2CreateVpnConnectionRouteFuture

	CreateVpnGateway(ctx workflow.Context, input *ec2.CreateVpnGatewayInput) (*ec2.CreateVpnGatewayOutput, error)
	CreateVpnGatewayAsync(ctx workflow.Context, input *ec2.CreateVpnGatewayInput) *EC2CreateVpnGatewayFuture

	DeleteCarrierGateway(ctx workflow.Context, input *ec2.DeleteCarrierGatewayInput) (*ec2.DeleteCarrierGatewayOutput, error)
	DeleteCarrierGatewayAsync(ctx workflow.Context, input *ec2.DeleteCarrierGatewayInput) *EC2DeleteCarrierGatewayFuture

	DeleteClientVpnEndpoint(ctx workflow.Context, input *ec2.DeleteClientVpnEndpointInput) (*ec2.DeleteClientVpnEndpointOutput, error)
	DeleteClientVpnEndpointAsync(ctx workflow.Context, input *ec2.DeleteClientVpnEndpointInput) *EC2DeleteClientVpnEndpointFuture

	DeleteClientVpnRoute(ctx workflow.Context, input *ec2.DeleteClientVpnRouteInput) (*ec2.DeleteClientVpnRouteOutput, error)
	DeleteClientVpnRouteAsync(ctx workflow.Context, input *ec2.DeleteClientVpnRouteInput) *EC2DeleteClientVpnRouteFuture

	DeleteCustomerGateway(ctx workflow.Context, input *ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error)
	DeleteCustomerGatewayAsync(ctx workflow.Context, input *ec2.DeleteCustomerGatewayInput) *EC2DeleteCustomerGatewayFuture

	DeleteDhcpOptions(ctx workflow.Context, input *ec2.DeleteDhcpOptionsInput) (*ec2.DeleteDhcpOptionsOutput, error)
	DeleteDhcpOptionsAsync(ctx workflow.Context, input *ec2.DeleteDhcpOptionsInput) *EC2DeleteDhcpOptionsFuture

	DeleteEgressOnlyInternetGateway(ctx workflow.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error)
	DeleteEgressOnlyInternetGatewayAsync(ctx workflow.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput) *EC2DeleteEgressOnlyInternetGatewayFuture

	DeleteFleets(ctx workflow.Context, input *ec2.DeleteFleetsInput) (*ec2.DeleteFleetsOutput, error)
	DeleteFleetsAsync(ctx workflow.Context, input *ec2.DeleteFleetsInput) *EC2DeleteFleetsFuture

	DeleteFlowLogs(ctx workflow.Context, input *ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error)
	DeleteFlowLogsAsync(ctx workflow.Context, input *ec2.DeleteFlowLogsInput) *EC2DeleteFlowLogsFuture

	DeleteFpgaImage(ctx workflow.Context, input *ec2.DeleteFpgaImageInput) (*ec2.DeleteFpgaImageOutput, error)
	DeleteFpgaImageAsync(ctx workflow.Context, input *ec2.DeleteFpgaImageInput) *EC2DeleteFpgaImageFuture

	DeleteInternetGateway(ctx workflow.Context, input *ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error)
	DeleteInternetGatewayAsync(ctx workflow.Context, input *ec2.DeleteInternetGatewayInput) *EC2DeleteInternetGatewayFuture

	DeleteKeyPair(ctx workflow.Context, input *ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error)
	DeleteKeyPairAsync(ctx workflow.Context, input *ec2.DeleteKeyPairInput) *EC2DeleteKeyPairFuture

	DeleteLaunchTemplate(ctx workflow.Context, input *ec2.DeleteLaunchTemplateInput) (*ec2.DeleteLaunchTemplateOutput, error)
	DeleteLaunchTemplateAsync(ctx workflow.Context, input *ec2.DeleteLaunchTemplateInput) *EC2DeleteLaunchTemplateFuture

	DeleteLaunchTemplateVersions(ctx workflow.Context, input *ec2.DeleteLaunchTemplateVersionsInput) (*ec2.DeleteLaunchTemplateVersionsOutput, error)
	DeleteLaunchTemplateVersionsAsync(ctx workflow.Context, input *ec2.DeleteLaunchTemplateVersionsInput) *EC2DeleteLaunchTemplateVersionsFuture

	DeleteLocalGatewayRoute(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteInput) (*ec2.DeleteLocalGatewayRouteOutput, error)
	DeleteLocalGatewayRouteAsync(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteInput) *EC2DeleteLocalGatewayRouteFuture

	DeleteLocalGatewayRouteTableVpcAssociation(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error)
	DeleteLocalGatewayRouteTableVpcAssociationAsync(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) *EC2DeleteLocalGatewayRouteTableVpcAssociationFuture

	DeleteManagedPrefixList(ctx workflow.Context, input *ec2.DeleteManagedPrefixListInput) (*ec2.DeleteManagedPrefixListOutput, error)
	DeleteManagedPrefixListAsync(ctx workflow.Context, input *ec2.DeleteManagedPrefixListInput) *EC2DeleteManagedPrefixListFuture

	DeleteNatGateway(ctx workflow.Context, input *ec2.DeleteNatGatewayInput) (*ec2.DeleteNatGatewayOutput, error)
	DeleteNatGatewayAsync(ctx workflow.Context, input *ec2.DeleteNatGatewayInput) *EC2DeleteNatGatewayFuture

	DeleteNetworkAcl(ctx workflow.Context, input *ec2.DeleteNetworkAclInput) (*ec2.DeleteNetworkAclOutput, error)
	DeleteNetworkAclAsync(ctx workflow.Context, input *ec2.DeleteNetworkAclInput) *EC2DeleteNetworkAclFuture

	DeleteNetworkAclEntry(ctx workflow.Context, input *ec2.DeleteNetworkAclEntryInput) (*ec2.DeleteNetworkAclEntryOutput, error)
	DeleteNetworkAclEntryAsync(ctx workflow.Context, input *ec2.DeleteNetworkAclEntryInput) *EC2DeleteNetworkAclEntryFuture

	DeleteNetworkInterface(ctx workflow.Context, input *ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error)
	DeleteNetworkInterfaceAsync(ctx workflow.Context, input *ec2.DeleteNetworkInterfaceInput) *EC2DeleteNetworkInterfaceFuture

	DeleteNetworkInterfacePermission(ctx workflow.Context, input *ec2.DeleteNetworkInterfacePermissionInput) (*ec2.DeleteNetworkInterfacePermissionOutput, error)
	DeleteNetworkInterfacePermissionAsync(ctx workflow.Context, input *ec2.DeleteNetworkInterfacePermissionInput) *EC2DeleteNetworkInterfacePermissionFuture

	DeletePlacementGroup(ctx workflow.Context, input *ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error)
	DeletePlacementGroupAsync(ctx workflow.Context, input *ec2.DeletePlacementGroupInput) *EC2DeletePlacementGroupFuture

	DeleteQueuedReservedInstances(ctx workflow.Context, input *ec2.DeleteQueuedReservedInstancesInput) (*ec2.DeleteQueuedReservedInstancesOutput, error)
	DeleteQueuedReservedInstancesAsync(ctx workflow.Context, input *ec2.DeleteQueuedReservedInstancesInput) *EC2DeleteQueuedReservedInstancesFuture

	DeleteRoute(ctx workflow.Context, input *ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error)
	DeleteRouteAsync(ctx workflow.Context, input *ec2.DeleteRouteInput) *EC2DeleteRouteFuture

	DeleteRouteTable(ctx workflow.Context, input *ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error)
	DeleteRouteTableAsync(ctx workflow.Context, input *ec2.DeleteRouteTableInput) *EC2DeleteRouteTableFuture

	DeleteSecurityGroup(ctx workflow.Context, input *ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error)
	DeleteSecurityGroupAsync(ctx workflow.Context, input *ec2.DeleteSecurityGroupInput) *EC2DeleteSecurityGroupFuture

	DeleteSnapshot(ctx workflow.Context, input *ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error)
	DeleteSnapshotAsync(ctx workflow.Context, input *ec2.DeleteSnapshotInput) *EC2DeleteSnapshotFuture

	DeleteSpotDatafeedSubscription(ctx workflow.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error)
	DeleteSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput) *EC2DeleteSpotDatafeedSubscriptionFuture

	DeleteSubnet(ctx workflow.Context, input *ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error)
	DeleteSubnetAsync(ctx workflow.Context, input *ec2.DeleteSubnetInput) *EC2DeleteSubnetFuture

	DeleteTags(ctx workflow.Context, input *ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *ec2.DeleteTagsInput) *EC2DeleteTagsFuture

	DeleteTrafficMirrorFilter(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterInput) (*ec2.DeleteTrafficMirrorFilterOutput, error)
	DeleteTrafficMirrorFilterAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterInput) *EC2DeleteTrafficMirrorFilterFuture

	DeleteTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterRuleInput) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error)
	DeleteTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterRuleInput) *EC2DeleteTrafficMirrorFilterRuleFuture

	DeleteTrafficMirrorSession(ctx workflow.Context, input *ec2.DeleteTrafficMirrorSessionInput) (*ec2.DeleteTrafficMirrorSessionOutput, error)
	DeleteTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorSessionInput) *EC2DeleteTrafficMirrorSessionFuture

	DeleteTrafficMirrorTarget(ctx workflow.Context, input *ec2.DeleteTrafficMirrorTargetInput) (*ec2.DeleteTrafficMirrorTargetOutput, error)
	DeleteTrafficMirrorTargetAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorTargetInput) *EC2DeleteTrafficMirrorTargetFuture

	DeleteTransitGateway(ctx workflow.Context, input *ec2.DeleteTransitGatewayInput) (*ec2.DeleteTransitGatewayOutput, error)
	DeleteTransitGatewayAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayInput) *EC2DeleteTransitGatewayFuture

	DeleteTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.DeleteTransitGatewayMulticastDomainInput) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error)
	DeleteTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayMulticastDomainInput) *EC2DeleteTransitGatewayMulticastDomainFuture

	DeleteTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.DeleteTransitGatewayPeeringAttachmentInput) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error)
	DeleteTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayPeeringAttachmentInput) *EC2DeleteTransitGatewayPeeringAttachmentFuture

	DeleteTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.DeleteTransitGatewayPrefixListReferenceInput) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error)
	DeleteTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayPrefixListReferenceInput) *EC2DeleteTransitGatewayPrefixListReferenceFuture

	DeleteTransitGatewayRoute(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteInput) (*ec2.DeleteTransitGatewayRouteOutput, error)
	DeleteTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteInput) *EC2DeleteTransitGatewayRouteFuture

	DeleteTransitGatewayRouteTable(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteTableInput) (*ec2.DeleteTransitGatewayRouteTableOutput, error)
	DeleteTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteTableInput) *EC2DeleteTransitGatewayRouteTableFuture

	DeleteTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error)
	DeleteTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayVpcAttachmentInput) *EC2DeleteTransitGatewayVpcAttachmentFuture

	DeleteVolume(ctx workflow.Context, input *ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error)
	DeleteVolumeAsync(ctx workflow.Context, input *ec2.DeleteVolumeInput) *EC2DeleteVolumeFuture

	DeleteVpc(ctx workflow.Context, input *ec2.DeleteVpcInput) (*ec2.DeleteVpcOutput, error)
	DeleteVpcAsync(ctx workflow.Context, input *ec2.DeleteVpcInput) *EC2DeleteVpcFuture

	DeleteVpcEndpointConnectionNotifications(ctx workflow.Context, input *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error)
	DeleteVpcEndpointConnectionNotificationsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointConnectionNotificationsInput) *EC2DeleteVpcEndpointConnectionNotificationsFuture

	DeleteVpcEndpointServiceConfigurations(ctx workflow.Context, input *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error)
	DeleteVpcEndpointServiceConfigurationsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointServiceConfigurationsInput) *EC2DeleteVpcEndpointServiceConfigurationsFuture

	DeleteVpcEndpoints(ctx workflow.Context, input *ec2.DeleteVpcEndpointsInput) (*ec2.DeleteVpcEndpointsOutput, error)
	DeleteVpcEndpointsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointsInput) *EC2DeleteVpcEndpointsFuture

	DeleteVpcPeeringConnection(ctx workflow.Context, input *ec2.DeleteVpcPeeringConnectionInput) (*ec2.DeleteVpcPeeringConnectionOutput, error)
	DeleteVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.DeleteVpcPeeringConnectionInput) *EC2DeleteVpcPeeringConnectionFuture

	DeleteVpnConnection(ctx workflow.Context, input *ec2.DeleteVpnConnectionInput) (*ec2.DeleteVpnConnectionOutput, error)
	DeleteVpnConnectionAsync(ctx workflow.Context, input *ec2.DeleteVpnConnectionInput) *EC2DeleteVpnConnectionFuture

	DeleteVpnConnectionRoute(ctx workflow.Context, input *ec2.DeleteVpnConnectionRouteInput) (*ec2.DeleteVpnConnectionRouteOutput, error)
	DeleteVpnConnectionRouteAsync(ctx workflow.Context, input *ec2.DeleteVpnConnectionRouteInput) *EC2DeleteVpnConnectionRouteFuture

	DeleteVpnGateway(ctx workflow.Context, input *ec2.DeleteVpnGatewayInput) (*ec2.DeleteVpnGatewayOutput, error)
	DeleteVpnGatewayAsync(ctx workflow.Context, input *ec2.DeleteVpnGatewayInput) *EC2DeleteVpnGatewayFuture

	DeprovisionByoipCidr(ctx workflow.Context, input *ec2.DeprovisionByoipCidrInput) (*ec2.DeprovisionByoipCidrOutput, error)
	DeprovisionByoipCidrAsync(ctx workflow.Context, input *ec2.DeprovisionByoipCidrInput) *EC2DeprovisionByoipCidrFuture

	DeregisterImage(ctx workflow.Context, input *ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error)
	DeregisterImageAsync(ctx workflow.Context, input *ec2.DeregisterImageInput) *EC2DeregisterImageFuture

	DeregisterInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.DeregisterInstanceEventNotificationAttributesInput) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error)
	DeregisterInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.DeregisterInstanceEventNotificationAttributesInput) *EC2DeregisterInstanceEventNotificationAttributesFuture

	DeregisterTransitGatewayMulticastGroupMembers(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error)
	DeregisterTransitGatewayMulticastGroupMembersAsync(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) *EC2DeregisterTransitGatewayMulticastGroupMembersFuture

	DeregisterTransitGatewayMulticastGroupSources(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error)
	DeregisterTransitGatewayMulticastGroupSourcesAsync(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) *EC2DeregisterTransitGatewayMulticastGroupSourcesFuture

	DescribeAccountAttributes(ctx workflow.Context, input *ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error)
	DescribeAccountAttributesAsync(ctx workflow.Context, input *ec2.DescribeAccountAttributesInput) *EC2DescribeAccountAttributesFuture

	DescribeAddresses(ctx workflow.Context, input *ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error)
	DescribeAddressesAsync(ctx workflow.Context, input *ec2.DescribeAddressesInput) *EC2DescribeAddressesFuture

	DescribeAggregateIdFormat(ctx workflow.Context, input *ec2.DescribeAggregateIdFormatInput) (*ec2.DescribeAggregateIdFormatOutput, error)
	DescribeAggregateIdFormatAsync(ctx workflow.Context, input *ec2.DescribeAggregateIdFormatInput) *EC2DescribeAggregateIdFormatFuture

	DescribeAvailabilityZones(ctx workflow.Context, input *ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error)
	DescribeAvailabilityZonesAsync(ctx workflow.Context, input *ec2.DescribeAvailabilityZonesInput) *EC2DescribeAvailabilityZonesFuture

	DescribeBundleTasks(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error)
	DescribeBundleTasksAsync(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) *EC2DescribeBundleTasksFuture

	DescribeByoipCidrs(ctx workflow.Context, input *ec2.DescribeByoipCidrsInput) (*ec2.DescribeByoipCidrsOutput, error)
	DescribeByoipCidrsAsync(ctx workflow.Context, input *ec2.DescribeByoipCidrsInput) *EC2DescribeByoipCidrsFuture

	DescribeCapacityReservations(ctx workflow.Context, input *ec2.DescribeCapacityReservationsInput) (*ec2.DescribeCapacityReservationsOutput, error)
	DescribeCapacityReservationsAsync(ctx workflow.Context, input *ec2.DescribeCapacityReservationsInput) *EC2DescribeCapacityReservationsFuture

	DescribeCarrierGateways(ctx workflow.Context, input *ec2.DescribeCarrierGatewaysInput) (*ec2.DescribeCarrierGatewaysOutput, error)
	DescribeCarrierGatewaysAsync(ctx workflow.Context, input *ec2.DescribeCarrierGatewaysInput) *EC2DescribeCarrierGatewaysFuture

	DescribeClassicLinkInstances(ctx workflow.Context, input *ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error)
	DescribeClassicLinkInstancesAsync(ctx workflow.Context, input *ec2.DescribeClassicLinkInstancesInput) *EC2DescribeClassicLinkInstancesFuture

	DescribeClientVpnAuthorizationRules(ctx workflow.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error)
	DescribeClientVpnAuthorizationRulesAsync(ctx workflow.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput) *EC2DescribeClientVpnAuthorizationRulesFuture

	DescribeClientVpnConnections(ctx workflow.Context, input *ec2.DescribeClientVpnConnectionsInput) (*ec2.DescribeClientVpnConnectionsOutput, error)
	DescribeClientVpnConnectionsAsync(ctx workflow.Context, input *ec2.DescribeClientVpnConnectionsInput) *EC2DescribeClientVpnConnectionsFuture

	DescribeClientVpnEndpoints(ctx workflow.Context, input *ec2.DescribeClientVpnEndpointsInput) (*ec2.DescribeClientVpnEndpointsOutput, error)
	DescribeClientVpnEndpointsAsync(ctx workflow.Context, input *ec2.DescribeClientVpnEndpointsInput) *EC2DescribeClientVpnEndpointsFuture

	DescribeClientVpnRoutes(ctx workflow.Context, input *ec2.DescribeClientVpnRoutesInput) (*ec2.DescribeClientVpnRoutesOutput, error)
	DescribeClientVpnRoutesAsync(ctx workflow.Context, input *ec2.DescribeClientVpnRoutesInput) *EC2DescribeClientVpnRoutesFuture

	DescribeClientVpnTargetNetworks(ctx workflow.Context, input *ec2.DescribeClientVpnTargetNetworksInput) (*ec2.DescribeClientVpnTargetNetworksOutput, error)
	DescribeClientVpnTargetNetworksAsync(ctx workflow.Context, input *ec2.DescribeClientVpnTargetNetworksInput) *EC2DescribeClientVpnTargetNetworksFuture

	DescribeCoipPools(ctx workflow.Context, input *ec2.DescribeCoipPoolsInput) (*ec2.DescribeCoipPoolsOutput, error)
	DescribeCoipPoolsAsync(ctx workflow.Context, input *ec2.DescribeCoipPoolsInput) *EC2DescribeCoipPoolsFuture

	DescribeConversionTasks(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error)
	DescribeConversionTasksAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *EC2DescribeConversionTasksFuture

	DescribeCustomerGateways(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error)
	DescribeCustomerGatewaysAsync(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) *EC2DescribeCustomerGatewaysFuture

	DescribeDhcpOptions(ctx workflow.Context, input *ec2.DescribeDhcpOptionsInput) (*ec2.DescribeDhcpOptionsOutput, error)
	DescribeDhcpOptionsAsync(ctx workflow.Context, input *ec2.DescribeDhcpOptionsInput) *EC2DescribeDhcpOptionsFuture

	DescribeEgressOnlyInternetGateways(ctx workflow.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error)
	DescribeEgressOnlyInternetGatewaysAsync(ctx workflow.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput) *EC2DescribeEgressOnlyInternetGatewaysFuture

	DescribeElasticGpus(ctx workflow.Context, input *ec2.DescribeElasticGpusInput) (*ec2.DescribeElasticGpusOutput, error)
	DescribeElasticGpusAsync(ctx workflow.Context, input *ec2.DescribeElasticGpusInput) *EC2DescribeElasticGpusFuture

	DescribeExportImageTasks(ctx workflow.Context, input *ec2.DescribeExportImageTasksInput) (*ec2.DescribeExportImageTasksOutput, error)
	DescribeExportImageTasksAsync(ctx workflow.Context, input *ec2.DescribeExportImageTasksInput) *EC2DescribeExportImageTasksFuture

	DescribeExportTasks(ctx workflow.Context, input *ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error)
	DescribeExportTasksAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) *EC2DescribeExportTasksFuture

	DescribeFastSnapshotRestores(ctx workflow.Context, input *ec2.DescribeFastSnapshotRestoresInput) (*ec2.DescribeFastSnapshotRestoresOutput, error)
	DescribeFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.DescribeFastSnapshotRestoresInput) *EC2DescribeFastSnapshotRestoresFuture

	DescribeFleetHistory(ctx workflow.Context, input *ec2.DescribeFleetHistoryInput) (*ec2.DescribeFleetHistoryOutput, error)
	DescribeFleetHistoryAsync(ctx workflow.Context, input *ec2.DescribeFleetHistoryInput) *EC2DescribeFleetHistoryFuture

	DescribeFleetInstances(ctx workflow.Context, input *ec2.DescribeFleetInstancesInput) (*ec2.DescribeFleetInstancesOutput, error)
	DescribeFleetInstancesAsync(ctx workflow.Context, input *ec2.DescribeFleetInstancesInput) *EC2DescribeFleetInstancesFuture

	DescribeFleets(ctx workflow.Context, input *ec2.DescribeFleetsInput) (*ec2.DescribeFleetsOutput, error)
	DescribeFleetsAsync(ctx workflow.Context, input *ec2.DescribeFleetsInput) *EC2DescribeFleetsFuture

	DescribeFlowLogs(ctx workflow.Context, input *ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error)
	DescribeFlowLogsAsync(ctx workflow.Context, input *ec2.DescribeFlowLogsInput) *EC2DescribeFlowLogsFuture

	DescribeFpgaImageAttribute(ctx workflow.Context, input *ec2.DescribeFpgaImageAttributeInput) (*ec2.DescribeFpgaImageAttributeOutput, error)
	DescribeFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.DescribeFpgaImageAttributeInput) *EC2DescribeFpgaImageAttributeFuture

	DescribeFpgaImages(ctx workflow.Context, input *ec2.DescribeFpgaImagesInput) (*ec2.DescribeFpgaImagesOutput, error)
	DescribeFpgaImagesAsync(ctx workflow.Context, input *ec2.DescribeFpgaImagesInput) *EC2DescribeFpgaImagesFuture

	DescribeHostReservationOfferings(ctx workflow.Context, input *ec2.DescribeHostReservationOfferingsInput) (*ec2.DescribeHostReservationOfferingsOutput, error)
	DescribeHostReservationOfferingsAsync(ctx workflow.Context, input *ec2.DescribeHostReservationOfferingsInput) *EC2DescribeHostReservationOfferingsFuture

	DescribeHostReservations(ctx workflow.Context, input *ec2.DescribeHostReservationsInput) (*ec2.DescribeHostReservationsOutput, error)
	DescribeHostReservationsAsync(ctx workflow.Context, input *ec2.DescribeHostReservationsInput) *EC2DescribeHostReservationsFuture

	DescribeHosts(ctx workflow.Context, input *ec2.DescribeHostsInput) (*ec2.DescribeHostsOutput, error)
	DescribeHostsAsync(ctx workflow.Context, input *ec2.DescribeHostsInput) *EC2DescribeHostsFuture

	DescribeIamInstanceProfileAssociations(ctx workflow.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error)
	DescribeIamInstanceProfileAssociationsAsync(ctx workflow.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput) *EC2DescribeIamInstanceProfileAssociationsFuture

	DescribeIdFormat(ctx workflow.Context, input *ec2.DescribeIdFormatInput) (*ec2.DescribeIdFormatOutput, error)
	DescribeIdFormatAsync(ctx workflow.Context, input *ec2.DescribeIdFormatInput) *EC2DescribeIdFormatFuture

	DescribeIdentityIdFormat(ctx workflow.Context, input *ec2.DescribeIdentityIdFormatInput) (*ec2.DescribeIdentityIdFormatOutput, error)
	DescribeIdentityIdFormatAsync(ctx workflow.Context, input *ec2.DescribeIdentityIdFormatInput) *EC2DescribeIdentityIdFormatFuture

	DescribeImageAttribute(ctx workflow.Context, input *ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error)
	DescribeImageAttributeAsync(ctx workflow.Context, input *ec2.DescribeImageAttributeInput) *EC2DescribeImageAttributeFuture

	DescribeImages(ctx workflow.Context, input *ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error)
	DescribeImagesAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) *EC2DescribeImagesFuture

	DescribeImportImageTasks(ctx workflow.Context, input *ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error)
	DescribeImportImageTasksAsync(ctx workflow.Context, input *ec2.DescribeImportImageTasksInput) *EC2DescribeImportImageTasksFuture

	DescribeImportSnapshotTasks(ctx workflow.Context, input *ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error)
	DescribeImportSnapshotTasksAsync(ctx workflow.Context, input *ec2.DescribeImportSnapshotTasksInput) *EC2DescribeImportSnapshotTasksFuture

	DescribeInstanceAttribute(ctx workflow.Context, input *ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error)
	DescribeInstanceAttributeAsync(ctx workflow.Context, input *ec2.DescribeInstanceAttributeInput) *EC2DescribeInstanceAttributeFuture

	DescribeInstanceCreditSpecifications(ctx workflow.Context, input *ec2.DescribeInstanceCreditSpecificationsInput) (*ec2.DescribeInstanceCreditSpecificationsOutput, error)
	DescribeInstanceCreditSpecificationsAsync(ctx workflow.Context, input *ec2.DescribeInstanceCreditSpecificationsInput) *EC2DescribeInstanceCreditSpecificationsFuture

	DescribeInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.DescribeInstanceEventNotificationAttributesInput) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error)
	DescribeInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.DescribeInstanceEventNotificationAttributesInput) *EC2DescribeInstanceEventNotificationAttributesFuture

	DescribeInstanceStatus(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error)
	DescribeInstanceStatusAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) *EC2DescribeInstanceStatusFuture

	DescribeInstanceTypeOfferings(ctx workflow.Context, input *ec2.DescribeInstanceTypeOfferingsInput) (*ec2.DescribeInstanceTypeOfferingsOutput, error)
	DescribeInstanceTypeOfferingsAsync(ctx workflow.Context, input *ec2.DescribeInstanceTypeOfferingsInput) *EC2DescribeInstanceTypeOfferingsFuture

	DescribeInstanceTypes(ctx workflow.Context, input *ec2.DescribeInstanceTypesInput) (*ec2.DescribeInstanceTypesOutput, error)
	DescribeInstanceTypesAsync(ctx workflow.Context, input *ec2.DescribeInstanceTypesInput) *EC2DescribeInstanceTypesFuture

	DescribeInstances(ctx workflow.Context, input *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error)
	DescribeInstancesAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *EC2DescribeInstancesFuture

	DescribeInternetGateways(ctx workflow.Context, input *ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error)
	DescribeInternetGatewaysAsync(ctx workflow.Context, input *ec2.DescribeInternetGatewaysInput) *EC2DescribeInternetGatewaysFuture

	DescribeIpv6Pools(ctx workflow.Context, input *ec2.DescribeIpv6PoolsInput) (*ec2.DescribeIpv6PoolsOutput, error)
	DescribeIpv6PoolsAsync(ctx workflow.Context, input *ec2.DescribeIpv6PoolsInput) *EC2DescribeIpv6PoolsFuture

	DescribeKeyPairs(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error)
	DescribeKeyPairsAsync(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) *EC2DescribeKeyPairsFuture

	DescribeLaunchTemplateVersions(ctx workflow.Context, input *ec2.DescribeLaunchTemplateVersionsInput) (*ec2.DescribeLaunchTemplateVersionsOutput, error)
	DescribeLaunchTemplateVersionsAsync(ctx workflow.Context, input *ec2.DescribeLaunchTemplateVersionsInput) *EC2DescribeLaunchTemplateVersionsFuture

	DescribeLaunchTemplates(ctx workflow.Context, input *ec2.DescribeLaunchTemplatesInput) (*ec2.DescribeLaunchTemplatesOutput, error)
	DescribeLaunchTemplatesAsync(ctx workflow.Context, input *ec2.DescribeLaunchTemplatesInput) *EC2DescribeLaunchTemplatesFuture

	DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error)
	DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) *EC2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture

	DescribeLocalGatewayRouteTableVpcAssociations(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error)
	DescribeLocalGatewayRouteTableVpcAssociationsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) *EC2DescribeLocalGatewayRouteTableVpcAssociationsFuture

	DescribeLocalGatewayRouteTables(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTablesInput) (*ec2.DescribeLocalGatewayRouteTablesOutput, error)
	DescribeLocalGatewayRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTablesInput) *EC2DescribeLocalGatewayRouteTablesFuture

	DescribeLocalGatewayVirtualInterfaceGroups(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error)
	DescribeLocalGatewayVirtualInterfaceGroupsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) *EC2DescribeLocalGatewayVirtualInterfaceGroupsFuture

	DescribeLocalGatewayVirtualInterfaces(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error)
	DescribeLocalGatewayVirtualInterfacesAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput) *EC2DescribeLocalGatewayVirtualInterfacesFuture

	DescribeLocalGateways(ctx workflow.Context, input *ec2.DescribeLocalGatewaysInput) (*ec2.DescribeLocalGatewaysOutput, error)
	DescribeLocalGatewaysAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewaysInput) *EC2DescribeLocalGatewaysFuture

	DescribeManagedPrefixLists(ctx workflow.Context, input *ec2.DescribeManagedPrefixListsInput) (*ec2.DescribeManagedPrefixListsOutput, error)
	DescribeManagedPrefixListsAsync(ctx workflow.Context, input *ec2.DescribeManagedPrefixListsInput) *EC2DescribeManagedPrefixListsFuture

	DescribeMovingAddresses(ctx workflow.Context, input *ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error)
	DescribeMovingAddressesAsync(ctx workflow.Context, input *ec2.DescribeMovingAddressesInput) *EC2DescribeMovingAddressesFuture

	DescribeNatGateways(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) (*ec2.DescribeNatGatewaysOutput, error)
	DescribeNatGatewaysAsync(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) *EC2DescribeNatGatewaysFuture

	DescribeNetworkAcls(ctx workflow.Context, input *ec2.DescribeNetworkAclsInput) (*ec2.DescribeNetworkAclsOutput, error)
	DescribeNetworkAclsAsync(ctx workflow.Context, input *ec2.DescribeNetworkAclsInput) *EC2DescribeNetworkAclsFuture

	DescribeNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error)
	DescribeNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfaceAttributeInput) *EC2DescribeNetworkInterfaceAttributeFuture

	DescribeNetworkInterfacePermissions(ctx workflow.Context, input *ec2.DescribeNetworkInterfacePermissionsInput) (*ec2.DescribeNetworkInterfacePermissionsOutput, error)
	DescribeNetworkInterfacePermissionsAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacePermissionsInput) *EC2DescribeNetworkInterfacePermissionsFuture

	DescribeNetworkInterfaces(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error)
	DescribeNetworkInterfacesAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) *EC2DescribeNetworkInterfacesFuture

	DescribePlacementGroups(ctx workflow.Context, input *ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error)
	DescribePlacementGroupsAsync(ctx workflow.Context, input *ec2.DescribePlacementGroupsInput) *EC2DescribePlacementGroupsFuture

	DescribePrefixLists(ctx workflow.Context, input *ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error)
	DescribePrefixListsAsync(ctx workflow.Context, input *ec2.DescribePrefixListsInput) *EC2DescribePrefixListsFuture

	DescribePrincipalIdFormat(ctx workflow.Context, input *ec2.DescribePrincipalIdFormatInput) (*ec2.DescribePrincipalIdFormatOutput, error)
	DescribePrincipalIdFormatAsync(ctx workflow.Context, input *ec2.DescribePrincipalIdFormatInput) *EC2DescribePrincipalIdFormatFuture

	DescribePublicIpv4Pools(ctx workflow.Context, input *ec2.DescribePublicIpv4PoolsInput) (*ec2.DescribePublicIpv4PoolsOutput, error)
	DescribePublicIpv4PoolsAsync(ctx workflow.Context, input *ec2.DescribePublicIpv4PoolsInput) *EC2DescribePublicIpv4PoolsFuture

	DescribeRegions(ctx workflow.Context, input *ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error)
	DescribeRegionsAsync(ctx workflow.Context, input *ec2.DescribeRegionsInput) *EC2DescribeRegionsFuture

	DescribeReservedInstances(ctx workflow.Context, input *ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error)
	DescribeReservedInstancesAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesInput) *EC2DescribeReservedInstancesFuture

	DescribeReservedInstancesListings(ctx workflow.Context, input *ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error)
	DescribeReservedInstancesListingsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesListingsInput) *EC2DescribeReservedInstancesListingsFuture

	DescribeReservedInstancesModifications(ctx workflow.Context, input *ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error)
	DescribeReservedInstancesModificationsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesModificationsInput) *EC2DescribeReservedInstancesModificationsFuture

	DescribeReservedInstancesOfferings(ctx workflow.Context, input *ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error)
	DescribeReservedInstancesOfferingsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesOfferingsInput) *EC2DescribeReservedInstancesOfferingsFuture

	DescribeRouteTables(ctx workflow.Context, input *ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error)
	DescribeRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeRouteTablesInput) *EC2DescribeRouteTablesFuture

	DescribeScheduledInstanceAvailability(ctx workflow.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error)
	DescribeScheduledInstanceAvailabilityAsync(ctx workflow.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput) *EC2DescribeScheduledInstanceAvailabilityFuture

	DescribeScheduledInstances(ctx workflow.Context, input *ec2.DescribeScheduledInstancesInput) (*ec2.DescribeScheduledInstancesOutput, error)
	DescribeScheduledInstancesAsync(ctx workflow.Context, input *ec2.DescribeScheduledInstancesInput) *EC2DescribeScheduledInstancesFuture

	DescribeSecurityGroupReferences(ctx workflow.Context, input *ec2.DescribeSecurityGroupReferencesInput) (*ec2.DescribeSecurityGroupReferencesOutput, error)
	DescribeSecurityGroupReferencesAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupReferencesInput) *EC2DescribeSecurityGroupReferencesFuture

	DescribeSecurityGroups(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error)
	DescribeSecurityGroupsAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) *EC2DescribeSecurityGroupsFuture

	DescribeSnapshotAttribute(ctx workflow.Context, input *ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error)
	DescribeSnapshotAttributeAsync(ctx workflow.Context, input *ec2.DescribeSnapshotAttributeInput) *EC2DescribeSnapshotAttributeFuture

	DescribeSnapshots(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error)
	DescribeSnapshotsAsync(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) *EC2DescribeSnapshotsFuture

	DescribeSpotDatafeedSubscription(ctx workflow.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error)
	DescribeSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput) *EC2DescribeSpotDatafeedSubscriptionFuture

	DescribeSpotFleetInstances(ctx workflow.Context, input *ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error)
	DescribeSpotFleetInstancesAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetInstancesInput) *EC2DescribeSpotFleetInstancesFuture

	DescribeSpotFleetRequestHistory(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error)
	DescribeSpotFleetRequestHistoryAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestHistoryInput) *EC2DescribeSpotFleetRequestHistoryFuture

	DescribeSpotFleetRequests(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error)
	DescribeSpotFleetRequestsAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestsInput) *EC2DescribeSpotFleetRequestsFuture

	DescribeSpotInstanceRequests(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error)
	DescribeSpotInstanceRequestsAsync(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) *EC2DescribeSpotInstanceRequestsFuture

	DescribeSpotPriceHistory(ctx workflow.Context, input *ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error)
	DescribeSpotPriceHistoryAsync(ctx workflow.Context, input *ec2.DescribeSpotPriceHistoryInput) *EC2DescribeSpotPriceHistoryFuture

	DescribeStaleSecurityGroups(ctx workflow.Context, input *ec2.DescribeStaleSecurityGroupsInput) (*ec2.DescribeStaleSecurityGroupsOutput, error)
	DescribeStaleSecurityGroupsAsync(ctx workflow.Context, input *ec2.DescribeStaleSecurityGroupsInput) *EC2DescribeStaleSecurityGroupsFuture

	DescribeSubnets(ctx workflow.Context, input *ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error)
	DescribeSubnetsAsync(ctx workflow.Context, input *ec2.DescribeSubnetsInput) *EC2DescribeSubnetsFuture

	DescribeTags(ctx workflow.Context, input *ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error)
	DescribeTagsAsync(ctx workflow.Context, input *ec2.DescribeTagsInput) *EC2DescribeTagsFuture

	DescribeTrafficMirrorFilters(ctx workflow.Context, input *ec2.DescribeTrafficMirrorFiltersInput) (*ec2.DescribeTrafficMirrorFiltersOutput, error)
	DescribeTrafficMirrorFiltersAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorFiltersInput) *EC2DescribeTrafficMirrorFiltersFuture

	DescribeTrafficMirrorSessions(ctx workflow.Context, input *ec2.DescribeTrafficMirrorSessionsInput) (*ec2.DescribeTrafficMirrorSessionsOutput, error)
	DescribeTrafficMirrorSessionsAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorSessionsInput) *EC2DescribeTrafficMirrorSessionsFuture

	DescribeTrafficMirrorTargets(ctx workflow.Context, input *ec2.DescribeTrafficMirrorTargetsInput) (*ec2.DescribeTrafficMirrorTargetsOutput, error)
	DescribeTrafficMirrorTargetsAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorTargetsInput) *EC2DescribeTrafficMirrorTargetsFuture

	DescribeTransitGatewayAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)
	DescribeTransitGatewayAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayAttachmentsInput) *EC2DescribeTransitGatewayAttachmentsFuture

	DescribeTransitGatewayMulticastDomains(ctx workflow.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error)
	DescribeTransitGatewayMulticastDomainsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput) *EC2DescribeTransitGatewayMulticastDomainsFuture

	DescribeTransitGatewayPeeringAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error)
	DescribeTransitGatewayPeeringAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput) *EC2DescribeTransitGatewayPeeringAttachmentsFuture

	DescribeTransitGatewayRouteTables(ctx workflow.Context, input *ec2.DescribeTransitGatewayRouteTablesInput) (*ec2.DescribeTransitGatewayRouteTablesOutput, error)
	DescribeTransitGatewayRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayRouteTablesInput) *EC2DescribeTransitGatewayRouteTablesFuture

	DescribeTransitGatewayVpcAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error)
	DescribeTransitGatewayVpcAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput) *EC2DescribeTransitGatewayVpcAttachmentsFuture

	DescribeTransitGateways(ctx workflow.Context, input *ec2.DescribeTransitGatewaysInput) (*ec2.DescribeTransitGatewaysOutput, error)
	DescribeTransitGatewaysAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewaysInput) *EC2DescribeTransitGatewaysFuture

	DescribeVolumeAttribute(ctx workflow.Context, input *ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error)
	DescribeVolumeAttributeAsync(ctx workflow.Context, input *ec2.DescribeVolumeAttributeInput) *EC2DescribeVolumeAttributeFuture

	DescribeVolumeStatus(ctx workflow.Context, input *ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error)
	DescribeVolumeStatusAsync(ctx workflow.Context, input *ec2.DescribeVolumeStatusInput) *EC2DescribeVolumeStatusFuture

	DescribeVolumes(ctx workflow.Context, input *ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error)
	DescribeVolumesAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *EC2DescribeVolumesFuture

	DescribeVolumesModifications(ctx workflow.Context, input *ec2.DescribeVolumesModificationsInput) (*ec2.DescribeVolumesModificationsOutput, error)
	DescribeVolumesModificationsAsync(ctx workflow.Context, input *ec2.DescribeVolumesModificationsInput) *EC2DescribeVolumesModificationsFuture

	DescribeVpcAttribute(ctx workflow.Context, input *ec2.DescribeVpcAttributeInput) (*ec2.DescribeVpcAttributeOutput, error)
	DescribeVpcAttributeAsync(ctx workflow.Context, input *ec2.DescribeVpcAttributeInput) *EC2DescribeVpcAttributeFuture

	DescribeVpcClassicLink(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkInput) (*ec2.DescribeVpcClassicLinkOutput, error)
	DescribeVpcClassicLinkAsync(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkInput) *EC2DescribeVpcClassicLinkFuture

	DescribeVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error)
	DescribeVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput) *EC2DescribeVpcClassicLinkDnsSupportFuture

	DescribeVpcEndpointConnectionNotifications(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error)
	DescribeVpcEndpointConnectionNotificationsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput) *EC2DescribeVpcEndpointConnectionNotificationsFuture

	DescribeVpcEndpointConnections(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionsInput) (*ec2.DescribeVpcEndpointConnectionsOutput, error)
	DescribeVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionsInput) *EC2DescribeVpcEndpointConnectionsFuture

	DescribeVpcEndpointServiceConfigurations(ctx workflow.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error)
	DescribeVpcEndpointServiceConfigurationsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput) *EC2DescribeVpcEndpointServiceConfigurationsFuture

	DescribeVpcEndpointServicePermissions(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error)
	DescribeVpcEndpointServicePermissionsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput) *EC2DescribeVpcEndpointServicePermissionsFuture

	DescribeVpcEndpointServices(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicesInput) (*ec2.DescribeVpcEndpointServicesOutput, error)
	DescribeVpcEndpointServicesAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicesInput) *EC2DescribeVpcEndpointServicesFuture

	DescribeVpcEndpoints(ctx workflow.Context, input *ec2.DescribeVpcEndpointsInput) (*ec2.DescribeVpcEndpointsOutput, error)
	DescribeVpcEndpointsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointsInput) *EC2DescribeVpcEndpointsFuture

	DescribeVpcPeeringConnections(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error)
	DescribeVpcPeeringConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) *EC2DescribeVpcPeeringConnectionsFuture

	DescribeVpcs(ctx workflow.Context, input *ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error)
	DescribeVpcsAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) *EC2DescribeVpcsFuture

	DescribeVpnConnections(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) (*ec2.DescribeVpnConnectionsOutput, error)
	DescribeVpnConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) *EC2DescribeVpnConnectionsFuture

	DescribeVpnGateways(ctx workflow.Context, input *ec2.DescribeVpnGatewaysInput) (*ec2.DescribeVpnGatewaysOutput, error)
	DescribeVpnGatewaysAsync(ctx workflow.Context, input *ec2.DescribeVpnGatewaysInput) *EC2DescribeVpnGatewaysFuture

	DetachClassicLinkVpc(ctx workflow.Context, input *ec2.DetachClassicLinkVpcInput) (*ec2.DetachClassicLinkVpcOutput, error)
	DetachClassicLinkVpcAsync(ctx workflow.Context, input *ec2.DetachClassicLinkVpcInput) *EC2DetachClassicLinkVpcFuture

	DetachInternetGateway(ctx workflow.Context, input *ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error)
	DetachInternetGatewayAsync(ctx workflow.Context, input *ec2.DetachInternetGatewayInput) *EC2DetachInternetGatewayFuture

	DetachNetworkInterface(ctx workflow.Context, input *ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error)
	DetachNetworkInterfaceAsync(ctx workflow.Context, input *ec2.DetachNetworkInterfaceInput) *EC2DetachNetworkInterfaceFuture

	DetachVolume(ctx workflow.Context, input *ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error)
	DetachVolumeAsync(ctx workflow.Context, input *ec2.DetachVolumeInput) *EC2DetachVolumeFuture

	DetachVpnGateway(ctx workflow.Context, input *ec2.DetachVpnGatewayInput) (*ec2.DetachVpnGatewayOutput, error)
	DetachVpnGatewayAsync(ctx workflow.Context, input *ec2.DetachVpnGatewayInput) *EC2DetachVpnGatewayFuture

	DisableEbsEncryptionByDefault(ctx workflow.Context, input *ec2.DisableEbsEncryptionByDefaultInput) (*ec2.DisableEbsEncryptionByDefaultOutput, error)
	DisableEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.DisableEbsEncryptionByDefaultInput) *EC2DisableEbsEncryptionByDefaultFuture

	DisableFastSnapshotRestores(ctx workflow.Context, input *ec2.DisableFastSnapshotRestoresInput) (*ec2.DisableFastSnapshotRestoresOutput, error)
	DisableFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.DisableFastSnapshotRestoresInput) *EC2DisableFastSnapshotRestoresFuture

	DisableTransitGatewayRouteTablePropagation(ctx workflow.Context, input *ec2.DisableTransitGatewayRouteTablePropagationInput) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error)
	DisableTransitGatewayRouteTablePropagationAsync(ctx workflow.Context, input *ec2.DisableTransitGatewayRouteTablePropagationInput) *EC2DisableTransitGatewayRouteTablePropagationFuture

	DisableVgwRoutePropagation(ctx workflow.Context, input *ec2.DisableVgwRoutePropagationInput) (*ec2.DisableVgwRoutePropagationOutput, error)
	DisableVgwRoutePropagationAsync(ctx workflow.Context, input *ec2.DisableVgwRoutePropagationInput) *EC2DisableVgwRoutePropagationFuture

	DisableVpcClassicLink(ctx workflow.Context, input *ec2.DisableVpcClassicLinkInput) (*ec2.DisableVpcClassicLinkOutput, error)
	DisableVpcClassicLinkAsync(ctx workflow.Context, input *ec2.DisableVpcClassicLinkInput) *EC2DisableVpcClassicLinkFuture

	DisableVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error)
	DisableVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput) *EC2DisableVpcClassicLinkDnsSupportFuture

	DisassociateAddress(ctx workflow.Context, input *ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error)
	DisassociateAddressAsync(ctx workflow.Context, input *ec2.DisassociateAddressInput) *EC2DisassociateAddressFuture

	DisassociateClientVpnTargetNetwork(ctx workflow.Context, input *ec2.DisassociateClientVpnTargetNetworkInput) (*ec2.DisassociateClientVpnTargetNetworkOutput, error)
	DisassociateClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.DisassociateClientVpnTargetNetworkInput) *EC2DisassociateClientVpnTargetNetworkFuture

	DisassociateIamInstanceProfile(ctx workflow.Context, input *ec2.DisassociateIamInstanceProfileInput) (*ec2.DisassociateIamInstanceProfileOutput, error)
	DisassociateIamInstanceProfileAsync(ctx workflow.Context, input *ec2.DisassociateIamInstanceProfileInput) *EC2DisassociateIamInstanceProfileFuture

	DisassociateRouteTable(ctx workflow.Context, input *ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error)
	DisassociateRouteTableAsync(ctx workflow.Context, input *ec2.DisassociateRouteTableInput) *EC2DisassociateRouteTableFuture

	DisassociateSubnetCidrBlock(ctx workflow.Context, input *ec2.DisassociateSubnetCidrBlockInput) (*ec2.DisassociateSubnetCidrBlockOutput, error)
	DisassociateSubnetCidrBlockAsync(ctx workflow.Context, input *ec2.DisassociateSubnetCidrBlockInput) *EC2DisassociateSubnetCidrBlockFuture

	DisassociateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.DisassociateTransitGatewayMulticastDomainInput) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error)
	DisassociateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.DisassociateTransitGatewayMulticastDomainInput) *EC2DisassociateTransitGatewayMulticastDomainFuture

	DisassociateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.DisassociateTransitGatewayRouteTableInput) (*ec2.DisassociateTransitGatewayRouteTableOutput, error)
	DisassociateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.DisassociateTransitGatewayRouteTableInput) *EC2DisassociateTransitGatewayRouteTableFuture

	DisassociateVpcCidrBlock(ctx workflow.Context, input *ec2.DisassociateVpcCidrBlockInput) (*ec2.DisassociateVpcCidrBlockOutput, error)
	DisassociateVpcCidrBlockAsync(ctx workflow.Context, input *ec2.DisassociateVpcCidrBlockInput) *EC2DisassociateVpcCidrBlockFuture

	EnableEbsEncryptionByDefault(ctx workflow.Context, input *ec2.EnableEbsEncryptionByDefaultInput) (*ec2.EnableEbsEncryptionByDefaultOutput, error)
	EnableEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.EnableEbsEncryptionByDefaultInput) *EC2EnableEbsEncryptionByDefaultFuture

	EnableFastSnapshotRestores(ctx workflow.Context, input *ec2.EnableFastSnapshotRestoresInput) (*ec2.EnableFastSnapshotRestoresOutput, error)
	EnableFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.EnableFastSnapshotRestoresInput) *EC2EnableFastSnapshotRestoresFuture

	EnableTransitGatewayRouteTablePropagation(ctx workflow.Context, input *ec2.EnableTransitGatewayRouteTablePropagationInput) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error)
	EnableTransitGatewayRouteTablePropagationAsync(ctx workflow.Context, input *ec2.EnableTransitGatewayRouteTablePropagationInput) *EC2EnableTransitGatewayRouteTablePropagationFuture

	EnableVgwRoutePropagation(ctx workflow.Context, input *ec2.EnableVgwRoutePropagationInput) (*ec2.EnableVgwRoutePropagationOutput, error)
	EnableVgwRoutePropagationAsync(ctx workflow.Context, input *ec2.EnableVgwRoutePropagationInput) *EC2EnableVgwRoutePropagationFuture

	EnableVolumeIO(ctx workflow.Context, input *ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error)
	EnableVolumeIOAsync(ctx workflow.Context, input *ec2.EnableVolumeIOInput) *EC2EnableVolumeIOFuture

	EnableVpcClassicLink(ctx workflow.Context, input *ec2.EnableVpcClassicLinkInput) (*ec2.EnableVpcClassicLinkOutput, error)
	EnableVpcClassicLinkAsync(ctx workflow.Context, input *ec2.EnableVpcClassicLinkInput) *EC2EnableVpcClassicLinkFuture

	EnableVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error)
	EnableVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput) *EC2EnableVpcClassicLinkDnsSupportFuture

	ExportClientVpnClientCertificateRevocationList(ctx workflow.Context, input *ec2.ExportClientVpnClientCertificateRevocationListInput) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error)
	ExportClientVpnClientCertificateRevocationListAsync(ctx workflow.Context, input *ec2.ExportClientVpnClientCertificateRevocationListInput) *EC2ExportClientVpnClientCertificateRevocationListFuture

	ExportClientVpnClientConfiguration(ctx workflow.Context, input *ec2.ExportClientVpnClientConfigurationInput) (*ec2.ExportClientVpnClientConfigurationOutput, error)
	ExportClientVpnClientConfigurationAsync(ctx workflow.Context, input *ec2.ExportClientVpnClientConfigurationInput) *EC2ExportClientVpnClientConfigurationFuture

	ExportImage(ctx workflow.Context, input *ec2.ExportImageInput) (*ec2.ExportImageOutput, error)
	ExportImageAsync(ctx workflow.Context, input *ec2.ExportImageInput) *EC2ExportImageFuture

	ExportTransitGatewayRoutes(ctx workflow.Context, input *ec2.ExportTransitGatewayRoutesInput) (*ec2.ExportTransitGatewayRoutesOutput, error)
	ExportTransitGatewayRoutesAsync(ctx workflow.Context, input *ec2.ExportTransitGatewayRoutesInput) *EC2ExportTransitGatewayRoutesFuture

	GetAssociatedIpv6PoolCidrs(ctx workflow.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error)
	GetAssociatedIpv6PoolCidrsAsync(ctx workflow.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput) *EC2GetAssociatedIpv6PoolCidrsFuture

	GetCapacityReservationUsage(ctx workflow.Context, input *ec2.GetCapacityReservationUsageInput) (*ec2.GetCapacityReservationUsageOutput, error)
	GetCapacityReservationUsageAsync(ctx workflow.Context, input *ec2.GetCapacityReservationUsageInput) *EC2GetCapacityReservationUsageFuture

	GetCoipPoolUsage(ctx workflow.Context, input *ec2.GetCoipPoolUsageInput) (*ec2.GetCoipPoolUsageOutput, error)
	GetCoipPoolUsageAsync(ctx workflow.Context, input *ec2.GetCoipPoolUsageInput) *EC2GetCoipPoolUsageFuture

	GetConsoleOutput(ctx workflow.Context, input *ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error)
	GetConsoleOutputAsync(ctx workflow.Context, input *ec2.GetConsoleOutputInput) *EC2GetConsoleOutputFuture

	GetConsoleScreenshot(ctx workflow.Context, input *ec2.GetConsoleScreenshotInput) (*ec2.GetConsoleScreenshotOutput, error)
	GetConsoleScreenshotAsync(ctx workflow.Context, input *ec2.GetConsoleScreenshotInput) *EC2GetConsoleScreenshotFuture

	GetDefaultCreditSpecification(ctx workflow.Context, input *ec2.GetDefaultCreditSpecificationInput) (*ec2.GetDefaultCreditSpecificationOutput, error)
	GetDefaultCreditSpecificationAsync(ctx workflow.Context, input *ec2.GetDefaultCreditSpecificationInput) *EC2GetDefaultCreditSpecificationFuture

	GetEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.GetEbsDefaultKmsKeyIdInput) (*ec2.GetEbsDefaultKmsKeyIdOutput, error)
	GetEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.GetEbsDefaultKmsKeyIdInput) *EC2GetEbsDefaultKmsKeyIdFuture

	GetEbsEncryptionByDefault(ctx workflow.Context, input *ec2.GetEbsEncryptionByDefaultInput) (*ec2.GetEbsEncryptionByDefaultOutput, error)
	GetEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.GetEbsEncryptionByDefaultInput) *EC2GetEbsEncryptionByDefaultFuture

	GetGroupsForCapacityReservation(ctx workflow.Context, input *ec2.GetGroupsForCapacityReservationInput) (*ec2.GetGroupsForCapacityReservationOutput, error)
	GetGroupsForCapacityReservationAsync(ctx workflow.Context, input *ec2.GetGroupsForCapacityReservationInput) *EC2GetGroupsForCapacityReservationFuture

	GetHostReservationPurchasePreview(ctx workflow.Context, input *ec2.GetHostReservationPurchasePreviewInput) (*ec2.GetHostReservationPurchasePreviewOutput, error)
	GetHostReservationPurchasePreviewAsync(ctx workflow.Context, input *ec2.GetHostReservationPurchasePreviewInput) *EC2GetHostReservationPurchasePreviewFuture

	GetLaunchTemplateData(ctx workflow.Context, input *ec2.GetLaunchTemplateDataInput) (*ec2.GetLaunchTemplateDataOutput, error)
	GetLaunchTemplateDataAsync(ctx workflow.Context, input *ec2.GetLaunchTemplateDataInput) *EC2GetLaunchTemplateDataFuture

	GetManagedPrefixListAssociations(ctx workflow.Context, input *ec2.GetManagedPrefixListAssociationsInput) (*ec2.GetManagedPrefixListAssociationsOutput, error)
	GetManagedPrefixListAssociationsAsync(ctx workflow.Context, input *ec2.GetManagedPrefixListAssociationsInput) *EC2GetManagedPrefixListAssociationsFuture

	GetManagedPrefixListEntries(ctx workflow.Context, input *ec2.GetManagedPrefixListEntriesInput) (*ec2.GetManagedPrefixListEntriesOutput, error)
	GetManagedPrefixListEntriesAsync(ctx workflow.Context, input *ec2.GetManagedPrefixListEntriesInput) *EC2GetManagedPrefixListEntriesFuture

	GetPasswordData(ctx workflow.Context, input *ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error)
	GetPasswordDataAsync(ctx workflow.Context, input *ec2.GetPasswordDataInput) *EC2GetPasswordDataFuture

	GetReservedInstancesExchangeQuote(ctx workflow.Context, input *ec2.GetReservedInstancesExchangeQuoteInput) (*ec2.GetReservedInstancesExchangeQuoteOutput, error)
	GetReservedInstancesExchangeQuoteAsync(ctx workflow.Context, input *ec2.GetReservedInstancesExchangeQuoteInput) *EC2GetReservedInstancesExchangeQuoteFuture

	GetTransitGatewayAttachmentPropagations(ctx workflow.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error)
	GetTransitGatewayAttachmentPropagationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput) *EC2GetTransitGatewayAttachmentPropagationsFuture

	GetTransitGatewayMulticastDomainAssociations(ctx workflow.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error)
	GetTransitGatewayMulticastDomainAssociationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput) *EC2GetTransitGatewayMulticastDomainAssociationsFuture

	GetTransitGatewayPrefixListReferences(ctx workflow.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error)
	GetTransitGatewayPrefixListReferencesAsync(ctx workflow.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput) *EC2GetTransitGatewayPrefixListReferencesFuture

	GetTransitGatewayRouteTableAssociations(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error)
	GetTransitGatewayRouteTableAssociationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput) *EC2GetTransitGatewayRouteTableAssociationsFuture

	GetTransitGatewayRouteTablePropagations(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error)
	GetTransitGatewayRouteTablePropagationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput) *EC2GetTransitGatewayRouteTablePropagationsFuture

	ImportClientVpnClientCertificateRevocationList(ctx workflow.Context, input *ec2.ImportClientVpnClientCertificateRevocationListInput) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error)
	ImportClientVpnClientCertificateRevocationListAsync(ctx workflow.Context, input *ec2.ImportClientVpnClientCertificateRevocationListInput) *EC2ImportClientVpnClientCertificateRevocationListFuture

	ImportImage(ctx workflow.Context, input *ec2.ImportImageInput) (*ec2.ImportImageOutput, error)
	ImportImageAsync(ctx workflow.Context, input *ec2.ImportImageInput) *EC2ImportImageFuture

	ImportInstance(ctx workflow.Context, input *ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error)
	ImportInstanceAsync(ctx workflow.Context, input *ec2.ImportInstanceInput) *EC2ImportInstanceFuture

	ImportKeyPair(ctx workflow.Context, input *ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error)
	ImportKeyPairAsync(ctx workflow.Context, input *ec2.ImportKeyPairInput) *EC2ImportKeyPairFuture

	ImportSnapshot(ctx workflow.Context, input *ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error)
	ImportSnapshotAsync(ctx workflow.Context, input *ec2.ImportSnapshotInput) *EC2ImportSnapshotFuture

	ImportVolume(ctx workflow.Context, input *ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error)
	ImportVolumeAsync(ctx workflow.Context, input *ec2.ImportVolumeInput) *EC2ImportVolumeFuture

	ModifyAvailabilityZoneGroup(ctx workflow.Context, input *ec2.ModifyAvailabilityZoneGroupInput) (*ec2.ModifyAvailabilityZoneGroupOutput, error)
	ModifyAvailabilityZoneGroupAsync(ctx workflow.Context, input *ec2.ModifyAvailabilityZoneGroupInput) *EC2ModifyAvailabilityZoneGroupFuture

	ModifyCapacityReservation(ctx workflow.Context, input *ec2.ModifyCapacityReservationInput) (*ec2.ModifyCapacityReservationOutput, error)
	ModifyCapacityReservationAsync(ctx workflow.Context, input *ec2.ModifyCapacityReservationInput) *EC2ModifyCapacityReservationFuture

	ModifyClientVpnEndpoint(ctx workflow.Context, input *ec2.ModifyClientVpnEndpointInput) (*ec2.ModifyClientVpnEndpointOutput, error)
	ModifyClientVpnEndpointAsync(ctx workflow.Context, input *ec2.ModifyClientVpnEndpointInput) *EC2ModifyClientVpnEndpointFuture

	ModifyDefaultCreditSpecification(ctx workflow.Context, input *ec2.ModifyDefaultCreditSpecificationInput) (*ec2.ModifyDefaultCreditSpecificationOutput, error)
	ModifyDefaultCreditSpecificationAsync(ctx workflow.Context, input *ec2.ModifyDefaultCreditSpecificationInput) *EC2ModifyDefaultCreditSpecificationFuture

	ModifyEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.ModifyEbsDefaultKmsKeyIdInput) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error)
	ModifyEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.ModifyEbsDefaultKmsKeyIdInput) *EC2ModifyEbsDefaultKmsKeyIdFuture

	ModifyFleet(ctx workflow.Context, input *ec2.ModifyFleetInput) (*ec2.ModifyFleetOutput, error)
	ModifyFleetAsync(ctx workflow.Context, input *ec2.ModifyFleetInput) *EC2ModifyFleetFuture

	ModifyFpgaImageAttribute(ctx workflow.Context, input *ec2.ModifyFpgaImageAttributeInput) (*ec2.ModifyFpgaImageAttributeOutput, error)
	ModifyFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.ModifyFpgaImageAttributeInput) *EC2ModifyFpgaImageAttributeFuture

	ModifyHosts(ctx workflow.Context, input *ec2.ModifyHostsInput) (*ec2.ModifyHostsOutput, error)
	ModifyHostsAsync(ctx workflow.Context, input *ec2.ModifyHostsInput) *EC2ModifyHostsFuture

	ModifyIdFormat(ctx workflow.Context, input *ec2.ModifyIdFormatInput) (*ec2.ModifyIdFormatOutput, error)
	ModifyIdFormatAsync(ctx workflow.Context, input *ec2.ModifyIdFormatInput) *EC2ModifyIdFormatFuture

	ModifyIdentityIdFormat(ctx workflow.Context, input *ec2.ModifyIdentityIdFormatInput) (*ec2.ModifyIdentityIdFormatOutput, error)
	ModifyIdentityIdFormatAsync(ctx workflow.Context, input *ec2.ModifyIdentityIdFormatInput) *EC2ModifyIdentityIdFormatFuture

	ModifyImageAttribute(ctx workflow.Context, input *ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error)
	ModifyImageAttributeAsync(ctx workflow.Context, input *ec2.ModifyImageAttributeInput) *EC2ModifyImageAttributeFuture

	ModifyInstanceAttribute(ctx workflow.Context, input *ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error)
	ModifyInstanceAttributeAsync(ctx workflow.Context, input *ec2.ModifyInstanceAttributeInput) *EC2ModifyInstanceAttributeFuture

	ModifyInstanceCapacityReservationAttributes(ctx workflow.Context, input *ec2.ModifyInstanceCapacityReservationAttributesInput) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error)
	ModifyInstanceCapacityReservationAttributesAsync(ctx workflow.Context, input *ec2.ModifyInstanceCapacityReservationAttributesInput) *EC2ModifyInstanceCapacityReservationAttributesFuture

	ModifyInstanceCreditSpecification(ctx workflow.Context, input *ec2.ModifyInstanceCreditSpecificationInput) (*ec2.ModifyInstanceCreditSpecificationOutput, error)
	ModifyInstanceCreditSpecificationAsync(ctx workflow.Context, input *ec2.ModifyInstanceCreditSpecificationInput) *EC2ModifyInstanceCreditSpecificationFuture

	ModifyInstanceEventStartTime(ctx workflow.Context, input *ec2.ModifyInstanceEventStartTimeInput) (*ec2.ModifyInstanceEventStartTimeOutput, error)
	ModifyInstanceEventStartTimeAsync(ctx workflow.Context, input *ec2.ModifyInstanceEventStartTimeInput) *EC2ModifyInstanceEventStartTimeFuture

	ModifyInstanceMetadataOptions(ctx workflow.Context, input *ec2.ModifyInstanceMetadataOptionsInput) (*ec2.ModifyInstanceMetadataOptionsOutput, error)
	ModifyInstanceMetadataOptionsAsync(ctx workflow.Context, input *ec2.ModifyInstanceMetadataOptionsInput) *EC2ModifyInstanceMetadataOptionsFuture

	ModifyInstancePlacement(ctx workflow.Context, input *ec2.ModifyInstancePlacementInput) (*ec2.ModifyInstancePlacementOutput, error)
	ModifyInstancePlacementAsync(ctx workflow.Context, input *ec2.ModifyInstancePlacementInput) *EC2ModifyInstancePlacementFuture

	ModifyLaunchTemplate(ctx workflow.Context, input *ec2.ModifyLaunchTemplateInput) (*ec2.ModifyLaunchTemplateOutput, error)
	ModifyLaunchTemplateAsync(ctx workflow.Context, input *ec2.ModifyLaunchTemplateInput) *EC2ModifyLaunchTemplateFuture

	ModifyManagedPrefixList(ctx workflow.Context, input *ec2.ModifyManagedPrefixListInput) (*ec2.ModifyManagedPrefixListOutput, error)
	ModifyManagedPrefixListAsync(ctx workflow.Context, input *ec2.ModifyManagedPrefixListInput) *EC2ModifyManagedPrefixListFuture

	ModifyNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error)
	ModifyNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.ModifyNetworkInterfaceAttributeInput) *EC2ModifyNetworkInterfaceAttributeFuture

	ModifyReservedInstances(ctx workflow.Context, input *ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error)
	ModifyReservedInstancesAsync(ctx workflow.Context, input *ec2.ModifyReservedInstancesInput) *EC2ModifyReservedInstancesFuture

	ModifySnapshotAttribute(ctx workflow.Context, input *ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error)
	ModifySnapshotAttributeAsync(ctx workflow.Context, input *ec2.ModifySnapshotAttributeInput) *EC2ModifySnapshotAttributeFuture

	ModifySubnetAttribute(ctx workflow.Context, input *ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error)
	ModifySubnetAttributeAsync(ctx workflow.Context, input *ec2.ModifySubnetAttributeInput) *EC2ModifySubnetAttributeFuture

	ModifyTrafficMirrorFilterNetworkServices(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error)
	ModifyTrafficMirrorFilterNetworkServicesAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) *EC2ModifyTrafficMirrorFilterNetworkServicesFuture

	ModifyTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterRuleInput) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error)
	ModifyTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterRuleInput) *EC2ModifyTrafficMirrorFilterRuleFuture

	ModifyTrafficMirrorSession(ctx workflow.Context, input *ec2.ModifyTrafficMirrorSessionInput) (*ec2.ModifyTrafficMirrorSessionOutput, error)
	ModifyTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorSessionInput) *EC2ModifyTrafficMirrorSessionFuture

	ModifyTransitGateway(ctx workflow.Context, input *ec2.ModifyTransitGatewayInput) (*ec2.ModifyTransitGatewayOutput, error)
	ModifyTransitGatewayAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayInput) *EC2ModifyTransitGatewayFuture

	ModifyTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.ModifyTransitGatewayPrefixListReferenceInput) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error)
	ModifyTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayPrefixListReferenceInput) *EC2ModifyTransitGatewayPrefixListReferenceFuture

	ModifyTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.ModifyTransitGatewayVpcAttachmentInput) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error)
	ModifyTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayVpcAttachmentInput) *EC2ModifyTransitGatewayVpcAttachmentFuture

	ModifyVolume(ctx workflow.Context, input *ec2.ModifyVolumeInput) (*ec2.ModifyVolumeOutput, error)
	ModifyVolumeAsync(ctx workflow.Context, input *ec2.ModifyVolumeInput) *EC2ModifyVolumeFuture

	ModifyVolumeAttribute(ctx workflow.Context, input *ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error)
	ModifyVolumeAttributeAsync(ctx workflow.Context, input *ec2.ModifyVolumeAttributeInput) *EC2ModifyVolumeAttributeFuture

	ModifyVpcAttribute(ctx workflow.Context, input *ec2.ModifyVpcAttributeInput) (*ec2.ModifyVpcAttributeOutput, error)
	ModifyVpcAttributeAsync(ctx workflow.Context, input *ec2.ModifyVpcAttributeInput) *EC2ModifyVpcAttributeFuture

	ModifyVpcEndpoint(ctx workflow.Context, input *ec2.ModifyVpcEndpointInput) (*ec2.ModifyVpcEndpointOutput, error)
	ModifyVpcEndpointAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointInput) *EC2ModifyVpcEndpointFuture

	ModifyVpcEndpointConnectionNotification(ctx workflow.Context, input *ec2.ModifyVpcEndpointConnectionNotificationInput) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error)
	ModifyVpcEndpointConnectionNotificationAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointConnectionNotificationInput) *EC2ModifyVpcEndpointConnectionNotificationFuture

	ModifyVpcEndpointServiceConfiguration(ctx workflow.Context, input *ec2.ModifyVpcEndpointServiceConfigurationInput) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error)
	ModifyVpcEndpointServiceConfigurationAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointServiceConfigurationInput) *EC2ModifyVpcEndpointServiceConfigurationFuture

	ModifyVpcEndpointServicePermissions(ctx workflow.Context, input *ec2.ModifyVpcEndpointServicePermissionsInput) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error)
	ModifyVpcEndpointServicePermissionsAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointServicePermissionsInput) *EC2ModifyVpcEndpointServicePermissionsFuture

	ModifyVpcPeeringConnectionOptions(ctx workflow.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error)
	ModifyVpcPeeringConnectionOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput) *EC2ModifyVpcPeeringConnectionOptionsFuture

	ModifyVpcTenancy(ctx workflow.Context, input *ec2.ModifyVpcTenancyInput) (*ec2.ModifyVpcTenancyOutput, error)
	ModifyVpcTenancyAsync(ctx workflow.Context, input *ec2.ModifyVpcTenancyInput) *EC2ModifyVpcTenancyFuture

	ModifyVpnConnection(ctx workflow.Context, input *ec2.ModifyVpnConnectionInput) (*ec2.ModifyVpnConnectionOutput, error)
	ModifyVpnConnectionAsync(ctx workflow.Context, input *ec2.ModifyVpnConnectionInput) *EC2ModifyVpnConnectionFuture

	ModifyVpnConnectionOptions(ctx workflow.Context, input *ec2.ModifyVpnConnectionOptionsInput) (*ec2.ModifyVpnConnectionOptionsOutput, error)
	ModifyVpnConnectionOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpnConnectionOptionsInput) *EC2ModifyVpnConnectionOptionsFuture

	ModifyVpnTunnelCertificate(ctx workflow.Context, input *ec2.ModifyVpnTunnelCertificateInput) (*ec2.ModifyVpnTunnelCertificateOutput, error)
	ModifyVpnTunnelCertificateAsync(ctx workflow.Context, input *ec2.ModifyVpnTunnelCertificateInput) *EC2ModifyVpnTunnelCertificateFuture

	ModifyVpnTunnelOptions(ctx workflow.Context, input *ec2.ModifyVpnTunnelOptionsInput) (*ec2.ModifyVpnTunnelOptionsOutput, error)
	ModifyVpnTunnelOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpnTunnelOptionsInput) *EC2ModifyVpnTunnelOptionsFuture

	MonitorInstances(ctx workflow.Context, input *ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error)
	MonitorInstancesAsync(ctx workflow.Context, input *ec2.MonitorInstancesInput) *EC2MonitorInstancesFuture

	MoveAddressToVpc(ctx workflow.Context, input *ec2.MoveAddressToVpcInput) (*ec2.MoveAddressToVpcOutput, error)
	MoveAddressToVpcAsync(ctx workflow.Context, input *ec2.MoveAddressToVpcInput) *EC2MoveAddressToVpcFuture

	ProvisionByoipCidr(ctx workflow.Context, input *ec2.ProvisionByoipCidrInput) (*ec2.ProvisionByoipCidrOutput, error)
	ProvisionByoipCidrAsync(ctx workflow.Context, input *ec2.ProvisionByoipCidrInput) *EC2ProvisionByoipCidrFuture

	PurchaseHostReservation(ctx workflow.Context, input *ec2.PurchaseHostReservationInput) (*ec2.PurchaseHostReservationOutput, error)
	PurchaseHostReservationAsync(ctx workflow.Context, input *ec2.PurchaseHostReservationInput) *EC2PurchaseHostReservationFuture

	PurchaseReservedInstancesOffering(ctx workflow.Context, input *ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error)
	PurchaseReservedInstancesOfferingAsync(ctx workflow.Context, input *ec2.PurchaseReservedInstancesOfferingInput) *EC2PurchaseReservedInstancesOfferingFuture

	PurchaseScheduledInstances(ctx workflow.Context, input *ec2.PurchaseScheduledInstancesInput) (*ec2.PurchaseScheduledInstancesOutput, error)
	PurchaseScheduledInstancesAsync(ctx workflow.Context, input *ec2.PurchaseScheduledInstancesInput) *EC2PurchaseScheduledInstancesFuture

	RebootInstances(ctx workflow.Context, input *ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error)
	RebootInstancesAsync(ctx workflow.Context, input *ec2.RebootInstancesInput) *EC2RebootInstancesFuture

	RegisterImage(ctx workflow.Context, input *ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error)
	RegisterImageAsync(ctx workflow.Context, input *ec2.RegisterImageInput) *EC2RegisterImageFuture

	RegisterInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.RegisterInstanceEventNotificationAttributesInput) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error)
	RegisterInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.RegisterInstanceEventNotificationAttributesInput) *EC2RegisterInstanceEventNotificationAttributesFuture

	RegisterTransitGatewayMulticastGroupMembers(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error)
	RegisterTransitGatewayMulticastGroupMembersAsync(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupMembersInput) *EC2RegisterTransitGatewayMulticastGroupMembersFuture

	RegisterTransitGatewayMulticastGroupSources(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error)
	RegisterTransitGatewayMulticastGroupSourcesAsync(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) *EC2RegisterTransitGatewayMulticastGroupSourcesFuture

	RejectTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.RejectTransitGatewayPeeringAttachmentInput) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error)
	RejectTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.RejectTransitGatewayPeeringAttachmentInput) *EC2RejectTransitGatewayPeeringAttachmentFuture

	RejectTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error)
	RejectTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.RejectTransitGatewayVpcAttachmentInput) *EC2RejectTransitGatewayVpcAttachmentFuture

	RejectVpcEndpointConnections(ctx workflow.Context, input *ec2.RejectVpcEndpointConnectionsInput) (*ec2.RejectVpcEndpointConnectionsOutput, error)
	RejectVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.RejectVpcEndpointConnectionsInput) *EC2RejectVpcEndpointConnectionsFuture

	RejectVpcPeeringConnection(ctx workflow.Context, input *ec2.RejectVpcPeeringConnectionInput) (*ec2.RejectVpcPeeringConnectionOutput, error)
	RejectVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.RejectVpcPeeringConnectionInput) *EC2RejectVpcPeeringConnectionFuture

	ReleaseAddress(ctx workflow.Context, input *ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error)
	ReleaseAddressAsync(ctx workflow.Context, input *ec2.ReleaseAddressInput) *EC2ReleaseAddressFuture

	ReleaseHosts(ctx workflow.Context, input *ec2.ReleaseHostsInput) (*ec2.ReleaseHostsOutput, error)
	ReleaseHostsAsync(ctx workflow.Context, input *ec2.ReleaseHostsInput) *EC2ReleaseHostsFuture

	ReplaceIamInstanceProfileAssociation(ctx workflow.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error)
	ReplaceIamInstanceProfileAssociationAsync(ctx workflow.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput) *EC2ReplaceIamInstanceProfileAssociationFuture

	ReplaceNetworkAclAssociation(ctx workflow.Context, input *ec2.ReplaceNetworkAclAssociationInput) (*ec2.ReplaceNetworkAclAssociationOutput, error)
	ReplaceNetworkAclAssociationAsync(ctx workflow.Context, input *ec2.ReplaceNetworkAclAssociationInput) *EC2ReplaceNetworkAclAssociationFuture

	ReplaceNetworkAclEntry(ctx workflow.Context, input *ec2.ReplaceNetworkAclEntryInput) (*ec2.ReplaceNetworkAclEntryOutput, error)
	ReplaceNetworkAclEntryAsync(ctx workflow.Context, input *ec2.ReplaceNetworkAclEntryInput) *EC2ReplaceNetworkAclEntryFuture

	ReplaceRoute(ctx workflow.Context, input *ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error)
	ReplaceRouteAsync(ctx workflow.Context, input *ec2.ReplaceRouteInput) *EC2ReplaceRouteFuture

	ReplaceRouteTableAssociation(ctx workflow.Context, input *ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error)
	ReplaceRouteTableAssociationAsync(ctx workflow.Context, input *ec2.ReplaceRouteTableAssociationInput) *EC2ReplaceRouteTableAssociationFuture

	ReplaceTransitGatewayRoute(ctx workflow.Context, input *ec2.ReplaceTransitGatewayRouteInput) (*ec2.ReplaceTransitGatewayRouteOutput, error)
	ReplaceTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.ReplaceTransitGatewayRouteInput) *EC2ReplaceTransitGatewayRouteFuture

	ReportInstanceStatus(ctx workflow.Context, input *ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error)
	ReportInstanceStatusAsync(ctx workflow.Context, input *ec2.ReportInstanceStatusInput) *EC2ReportInstanceStatusFuture

	RequestSpotFleet(ctx workflow.Context, input *ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error)
	RequestSpotFleetAsync(ctx workflow.Context, input *ec2.RequestSpotFleetInput) *EC2RequestSpotFleetFuture

	RequestSpotInstances(ctx workflow.Context, input *ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error)
	RequestSpotInstancesAsync(ctx workflow.Context, input *ec2.RequestSpotInstancesInput) *EC2RequestSpotInstancesFuture

	ResetEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.ResetEbsDefaultKmsKeyIdInput) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error)
	ResetEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.ResetEbsDefaultKmsKeyIdInput) *EC2ResetEbsDefaultKmsKeyIdFuture

	ResetFpgaImageAttribute(ctx workflow.Context, input *ec2.ResetFpgaImageAttributeInput) (*ec2.ResetFpgaImageAttributeOutput, error)
	ResetFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.ResetFpgaImageAttributeInput) *EC2ResetFpgaImageAttributeFuture

	ResetImageAttribute(ctx workflow.Context, input *ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error)
	ResetImageAttributeAsync(ctx workflow.Context, input *ec2.ResetImageAttributeInput) *EC2ResetImageAttributeFuture

	ResetInstanceAttribute(ctx workflow.Context, input *ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error)
	ResetInstanceAttributeAsync(ctx workflow.Context, input *ec2.ResetInstanceAttributeInput) *EC2ResetInstanceAttributeFuture

	ResetNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error)
	ResetNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.ResetNetworkInterfaceAttributeInput) *EC2ResetNetworkInterfaceAttributeFuture

	ResetSnapshotAttribute(ctx workflow.Context, input *ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error)
	ResetSnapshotAttributeAsync(ctx workflow.Context, input *ec2.ResetSnapshotAttributeInput) *EC2ResetSnapshotAttributeFuture

	RestoreAddressToClassic(ctx workflow.Context, input *ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error)
	RestoreAddressToClassicAsync(ctx workflow.Context, input *ec2.RestoreAddressToClassicInput) *EC2RestoreAddressToClassicFuture

	RestoreManagedPrefixListVersion(ctx workflow.Context, input *ec2.RestoreManagedPrefixListVersionInput) (*ec2.RestoreManagedPrefixListVersionOutput, error)
	RestoreManagedPrefixListVersionAsync(ctx workflow.Context, input *ec2.RestoreManagedPrefixListVersionInput) *EC2RestoreManagedPrefixListVersionFuture

	RevokeClientVpnIngress(ctx workflow.Context, input *ec2.RevokeClientVpnIngressInput) (*ec2.RevokeClientVpnIngressOutput, error)
	RevokeClientVpnIngressAsync(ctx workflow.Context, input *ec2.RevokeClientVpnIngressInput) *EC2RevokeClientVpnIngressFuture

	RevokeSecurityGroupEgress(ctx workflow.Context, input *ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error)
	RevokeSecurityGroupEgressAsync(ctx workflow.Context, input *ec2.RevokeSecurityGroupEgressInput) *EC2RevokeSecurityGroupEgressFuture

	RevokeSecurityGroupIngress(ctx workflow.Context, input *ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error)
	RevokeSecurityGroupIngressAsync(ctx workflow.Context, input *ec2.RevokeSecurityGroupIngressInput) *EC2RevokeSecurityGroupIngressFuture

	RunInstances(ctx workflow.Context, input *ec2.RunInstancesInput) (*ec2.Reservation, error)
	RunInstancesAsync(ctx workflow.Context, input *ec2.RunInstancesInput) *EC2RunInstancesFuture

	RunScheduledInstances(ctx workflow.Context, input *ec2.RunScheduledInstancesInput) (*ec2.RunScheduledInstancesOutput, error)
	RunScheduledInstancesAsync(ctx workflow.Context, input *ec2.RunScheduledInstancesInput) *EC2RunScheduledInstancesFuture

	SearchLocalGatewayRoutes(ctx workflow.Context, input *ec2.SearchLocalGatewayRoutesInput) (*ec2.SearchLocalGatewayRoutesOutput, error)
	SearchLocalGatewayRoutesAsync(ctx workflow.Context, input *ec2.SearchLocalGatewayRoutesInput) *EC2SearchLocalGatewayRoutesFuture

	SearchTransitGatewayMulticastGroups(ctx workflow.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error)
	SearchTransitGatewayMulticastGroupsAsync(ctx workflow.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput) *EC2SearchTransitGatewayMulticastGroupsFuture

	SearchTransitGatewayRoutes(ctx workflow.Context, input *ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error)
	SearchTransitGatewayRoutesAsync(ctx workflow.Context, input *ec2.SearchTransitGatewayRoutesInput) *EC2SearchTransitGatewayRoutesFuture

	SendDiagnosticInterrupt(ctx workflow.Context, input *ec2.SendDiagnosticInterruptInput) (*ec2.SendDiagnosticInterruptOutput, error)
	SendDiagnosticInterruptAsync(ctx workflow.Context, input *ec2.SendDiagnosticInterruptInput) *EC2SendDiagnosticInterruptFuture

	StartInstances(ctx workflow.Context, input *ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error)
	StartInstancesAsync(ctx workflow.Context, input *ec2.StartInstancesInput) *EC2StartInstancesFuture

	StartVpcEndpointServicePrivateDnsVerification(ctx workflow.Context, input *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error)
	StartVpcEndpointServicePrivateDnsVerificationAsync(ctx workflow.Context, input *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) *EC2StartVpcEndpointServicePrivateDnsVerificationFuture

	StopInstances(ctx workflow.Context, input *ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error)
	StopInstancesAsync(ctx workflow.Context, input *ec2.StopInstancesInput) *EC2StopInstancesFuture

	TerminateClientVpnConnections(ctx workflow.Context, input *ec2.TerminateClientVpnConnectionsInput) (*ec2.TerminateClientVpnConnectionsOutput, error)
	TerminateClientVpnConnectionsAsync(ctx workflow.Context, input *ec2.TerminateClientVpnConnectionsInput) *EC2TerminateClientVpnConnectionsFuture

	TerminateInstances(ctx workflow.Context, input *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error)
	TerminateInstancesAsync(ctx workflow.Context, input *ec2.TerminateInstancesInput) *EC2TerminateInstancesFuture

	UnassignIpv6Addresses(ctx workflow.Context, input *ec2.UnassignIpv6AddressesInput) (*ec2.UnassignIpv6AddressesOutput, error)
	UnassignIpv6AddressesAsync(ctx workflow.Context, input *ec2.UnassignIpv6AddressesInput) *EC2UnassignIpv6AddressesFuture

	UnassignPrivateIpAddresses(ctx workflow.Context, input *ec2.UnassignPrivateIpAddressesInput) (*ec2.UnassignPrivateIpAddressesOutput, error)
	UnassignPrivateIpAddressesAsync(ctx workflow.Context, input *ec2.UnassignPrivateIpAddressesInput) *EC2UnassignPrivateIpAddressesFuture

	UnmonitorInstances(ctx workflow.Context, input *ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error)
	UnmonitorInstancesAsync(ctx workflow.Context, input *ec2.UnmonitorInstancesInput) *EC2UnmonitorInstancesFuture

	UpdateSecurityGroupRuleDescriptionsEgress(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error)
	UpdateSecurityGroupRuleDescriptionsEgressAsync(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) *EC2UpdateSecurityGroupRuleDescriptionsEgressFuture

	UpdateSecurityGroupRuleDescriptionsIngress(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error)
	UpdateSecurityGroupRuleDescriptionsIngressAsync(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) *EC2UpdateSecurityGroupRuleDescriptionsIngressFuture

	WithdrawByoipCidr(ctx workflow.Context, input *ec2.WithdrawByoipCidrInput) (*ec2.WithdrawByoipCidrOutput, error)
	WithdrawByoipCidrAsync(ctx workflow.Context, input *ec2.WithdrawByoipCidrInput) *EC2WithdrawByoipCidrFuture

	WaitUntilBundleTaskComplete(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) error
	WaitUntilBundleTaskCompleteAsync(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) *VoidFuture

	WaitUntilConversionTaskCancelled(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error
	WaitUntilConversionTaskCancelledAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *VoidFuture

	WaitUntilConversionTaskCompleted(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error
	WaitUntilConversionTaskCompletedAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *VoidFuture

	WaitUntilConversionTaskDeleted(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error
	WaitUntilConversionTaskDeletedAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *VoidFuture

	WaitUntilCustomerGatewayAvailable(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) error
	WaitUntilCustomerGatewayAvailableAsync(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) *VoidFuture

	WaitUntilExportTaskCancelled(ctx workflow.Context, input *ec2.DescribeExportTasksInput) error
	WaitUntilExportTaskCancelledAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) *VoidFuture

	WaitUntilExportTaskCompleted(ctx workflow.Context, input *ec2.DescribeExportTasksInput) error
	WaitUntilExportTaskCompletedAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) *VoidFuture

	WaitUntilImageAvailable(ctx workflow.Context, input *ec2.DescribeImagesInput) error
	WaitUntilImageAvailableAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) *VoidFuture

	WaitUntilImageExists(ctx workflow.Context, input *ec2.DescribeImagesInput) error
	WaitUntilImageExistsAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) *VoidFuture

	WaitUntilInstanceExists(ctx workflow.Context, input *ec2.DescribeInstancesInput) error
	WaitUntilInstanceExistsAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *VoidFuture

	WaitUntilInstanceRunning(ctx workflow.Context, input *ec2.DescribeInstancesInput) error
	WaitUntilInstanceRunningAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *VoidFuture

	WaitUntilInstanceStatusOk(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) error
	WaitUntilInstanceStatusOkAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) *VoidFuture

	WaitUntilInstanceStopped(ctx workflow.Context, input *ec2.DescribeInstancesInput) error
	WaitUntilInstanceStoppedAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *VoidFuture

	WaitUntilInstanceTerminated(ctx workflow.Context, input *ec2.DescribeInstancesInput) error
	WaitUntilInstanceTerminatedAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *VoidFuture

	WaitUntilKeyPairExists(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) error
	WaitUntilKeyPairExistsAsync(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) *VoidFuture

	WaitUntilNatGatewayAvailable(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) error
	WaitUntilNatGatewayAvailableAsync(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) *VoidFuture

	WaitUntilNetworkInterfaceAvailable(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) error
	WaitUntilNetworkInterfaceAvailableAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) *VoidFuture

	WaitUntilPasswordDataAvailable(ctx workflow.Context, input *ec2.GetPasswordDataInput) error
	WaitUntilPasswordDataAvailableAsync(ctx workflow.Context, input *ec2.GetPasswordDataInput) *VoidFuture

	WaitUntilSecurityGroupExists(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) error
	WaitUntilSecurityGroupExistsAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) *VoidFuture

	WaitUntilSnapshotCompleted(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) error
	WaitUntilSnapshotCompletedAsync(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) *VoidFuture

	WaitUntilSpotInstanceRequestFulfilled(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) error
	WaitUntilSpotInstanceRequestFulfilledAsync(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) *VoidFuture

	WaitUntilSubnetAvailable(ctx workflow.Context, input *ec2.DescribeSubnetsInput) error
	WaitUntilSubnetAvailableAsync(ctx workflow.Context, input *ec2.DescribeSubnetsInput) *VoidFuture

	WaitUntilSystemStatusOk(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) error
	WaitUntilSystemStatusOkAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) *VoidFuture

	WaitUntilVolumeAvailable(ctx workflow.Context, input *ec2.DescribeVolumesInput) error
	WaitUntilVolumeAvailableAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *VoidFuture

	WaitUntilVolumeDeleted(ctx workflow.Context, input *ec2.DescribeVolumesInput) error
	WaitUntilVolumeDeletedAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *VoidFuture

	WaitUntilVolumeInUse(ctx workflow.Context, input *ec2.DescribeVolumesInput) error
	WaitUntilVolumeInUseAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *VoidFuture

	WaitUntilVpcAvailable(ctx workflow.Context, input *ec2.DescribeVpcsInput) error
	WaitUntilVpcAvailableAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) *VoidFuture

	WaitUntilVpcExists(ctx workflow.Context, input *ec2.DescribeVpcsInput) error
	WaitUntilVpcExistsAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) *VoidFuture

	WaitUntilVpcPeeringConnectionDeleted(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) error
	WaitUntilVpcPeeringConnectionDeletedAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) *VoidFuture

	WaitUntilVpcPeeringConnectionExists(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) error
	WaitUntilVpcPeeringConnectionExistsAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) *VoidFuture

	WaitUntilVpnConnectionAvailable(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) error
	WaitUntilVpnConnectionAvailableAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) *VoidFuture

	WaitUntilVpnConnectionDeleted(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) error
	WaitUntilVpnConnectionDeletedAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) *VoidFuture
}

type EC2Stub struct{}

func NewEC2Stub() EC2Client {
	return &EC2Stub{}
}

type EC2AcceptReservedInstancesExchangeQuoteFuture struct {
	Future workflow.Future
}

func (r *EC2AcceptReservedInstancesExchangeQuoteFuture) Get(ctx workflow.Context) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	var output ec2.AcceptReservedInstancesExchangeQuoteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AcceptTransitGatewayPeeringAttachmentFuture struct {
	Future workflow.Future
}

func (r *EC2AcceptTransitGatewayPeeringAttachmentFuture) Get(ctx workflow.Context) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.AcceptTransitGatewayPeeringAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AcceptTransitGatewayVpcAttachmentFuture struct {
	Future workflow.Future
}

func (r *EC2AcceptTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.AcceptTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AcceptVpcEndpointConnectionsFuture struct {
	Future workflow.Future
}

func (r *EC2AcceptVpcEndpointConnectionsFuture) Get(ctx workflow.Context) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
	var output ec2.AcceptVpcEndpointConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AcceptVpcPeeringConnectionFuture struct {
	Future workflow.Future
}

func (r *EC2AcceptVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	var output ec2.AcceptVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AdvertiseByoipCidrFuture struct {
	Future workflow.Future
}

func (r *EC2AdvertiseByoipCidrFuture) Get(ctx workflow.Context) (*ec2.AdvertiseByoipCidrOutput, error) {
	var output ec2.AdvertiseByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AllocateAddressFuture struct {
	Future workflow.Future
}

func (r *EC2AllocateAddressFuture) Get(ctx workflow.Context) (*ec2.AllocateAddressOutput, error) {
	var output ec2.AllocateAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AllocateHostsFuture struct {
	Future workflow.Future
}

func (r *EC2AllocateHostsFuture) Get(ctx workflow.Context) (*ec2.AllocateHostsOutput, error) {
	var output ec2.AllocateHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ApplySecurityGroupsToClientVpnTargetNetworkFuture struct {
	Future workflow.Future
}

func (r *EC2ApplySecurityGroupsToClientVpnTargetNetworkFuture) Get(ctx workflow.Context) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
	var output ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AssignIpv6AddressesFuture struct {
	Future workflow.Future
}

func (r *EC2AssignIpv6AddressesFuture) Get(ctx workflow.Context) (*ec2.AssignIpv6AddressesOutput, error) {
	var output ec2.AssignIpv6AddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AssignPrivateIpAddressesFuture struct {
	Future workflow.Future
}

func (r *EC2AssignPrivateIpAddressesFuture) Get(ctx workflow.Context) (*ec2.AssignPrivateIpAddressesOutput, error) {
	var output ec2.AssignPrivateIpAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AssociateAddressFuture struct {
	Future workflow.Future
}

func (r *EC2AssociateAddressFuture) Get(ctx workflow.Context) (*ec2.AssociateAddressOutput, error) {
	var output ec2.AssociateAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AssociateClientVpnTargetNetworkFuture struct {
	Future workflow.Future
}

func (r *EC2AssociateClientVpnTargetNetworkFuture) Get(ctx workflow.Context) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
	var output ec2.AssociateClientVpnTargetNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AssociateDhcpOptionsFuture struct {
	Future workflow.Future
}

func (r *EC2AssociateDhcpOptionsFuture) Get(ctx workflow.Context) (*ec2.AssociateDhcpOptionsOutput, error) {
	var output ec2.AssociateDhcpOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AssociateIamInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *EC2AssociateIamInstanceProfileFuture) Get(ctx workflow.Context) (*ec2.AssociateIamInstanceProfileOutput, error) {
	var output ec2.AssociateIamInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AssociateRouteTableFuture struct {
	Future workflow.Future
}

func (r *EC2AssociateRouteTableFuture) Get(ctx workflow.Context) (*ec2.AssociateRouteTableOutput, error) {
	var output ec2.AssociateRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AssociateSubnetCidrBlockFuture struct {
	Future workflow.Future
}

func (r *EC2AssociateSubnetCidrBlockFuture) Get(ctx workflow.Context) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	var output ec2.AssociateSubnetCidrBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AssociateTransitGatewayMulticastDomainFuture struct {
	Future workflow.Future
}

func (r *EC2AssociateTransitGatewayMulticastDomainFuture) Get(ctx workflow.Context) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.AssociateTransitGatewayMulticastDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AssociateTransitGatewayRouteTableFuture struct {
	Future workflow.Future
}

func (r *EC2AssociateTransitGatewayRouteTableFuture) Get(ctx workflow.Context) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
	var output ec2.AssociateTransitGatewayRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AssociateVpcCidrBlockFuture struct {
	Future workflow.Future
}

func (r *EC2AssociateVpcCidrBlockFuture) Get(ctx workflow.Context) (*ec2.AssociateVpcCidrBlockOutput, error) {
	var output ec2.AssociateVpcCidrBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AttachClassicLinkVpcFuture struct {
	Future workflow.Future
}

func (r *EC2AttachClassicLinkVpcFuture) Get(ctx workflow.Context) (*ec2.AttachClassicLinkVpcOutput, error) {
	var output ec2.AttachClassicLinkVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AttachInternetGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2AttachInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.AttachInternetGatewayOutput, error) {
	var output ec2.AttachInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AttachNetworkInterfaceFuture struct {
	Future workflow.Future
}

func (r *EC2AttachNetworkInterfaceFuture) Get(ctx workflow.Context) (*ec2.AttachNetworkInterfaceOutput, error) {
	var output ec2.AttachNetworkInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AttachVolumeFuture struct {
	Future workflow.Future
}

func (r *EC2AttachVolumeFuture) Get(ctx workflow.Context) (*ec2.VolumeAttachment, error) {
	var output ec2.VolumeAttachment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AttachVpnGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2AttachVpnGatewayFuture) Get(ctx workflow.Context) (*ec2.AttachVpnGatewayOutput, error) {
	var output ec2.AttachVpnGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AuthorizeClientVpnIngressFuture struct {
	Future workflow.Future
}

func (r *EC2AuthorizeClientVpnIngressFuture) Get(ctx workflow.Context) (*ec2.AuthorizeClientVpnIngressOutput, error) {
	var output ec2.AuthorizeClientVpnIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AuthorizeSecurityGroupEgressFuture struct {
	Future workflow.Future
}

func (r *EC2AuthorizeSecurityGroupEgressFuture) Get(ctx workflow.Context) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	var output ec2.AuthorizeSecurityGroupEgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2AuthorizeSecurityGroupIngressFuture struct {
	Future workflow.Future
}

func (r *EC2AuthorizeSecurityGroupIngressFuture) Get(ctx workflow.Context) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	var output ec2.AuthorizeSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2BundleInstanceFuture struct {
	Future workflow.Future
}

func (r *EC2BundleInstanceFuture) Get(ctx workflow.Context) (*ec2.BundleInstanceOutput, error) {
	var output ec2.BundleInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CancelBundleTaskFuture struct {
	Future workflow.Future
}

func (r *EC2CancelBundleTaskFuture) Get(ctx workflow.Context) (*ec2.CancelBundleTaskOutput, error) {
	var output ec2.CancelBundleTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CancelCapacityReservationFuture struct {
	Future workflow.Future
}

func (r *EC2CancelCapacityReservationFuture) Get(ctx workflow.Context) (*ec2.CancelCapacityReservationOutput, error) {
	var output ec2.CancelCapacityReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CancelConversionTaskFuture struct {
	Future workflow.Future
}

func (r *EC2CancelConversionTaskFuture) Get(ctx workflow.Context) (*ec2.CancelConversionTaskOutput, error) {
	var output ec2.CancelConversionTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CancelExportTaskFuture struct {
	Future workflow.Future
}

func (r *EC2CancelExportTaskFuture) Get(ctx workflow.Context) (*ec2.CancelExportTaskOutput, error) {
	var output ec2.CancelExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CancelImportTaskFuture struct {
	Future workflow.Future
}

func (r *EC2CancelImportTaskFuture) Get(ctx workflow.Context) (*ec2.CancelImportTaskOutput, error) {
	var output ec2.CancelImportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CancelReservedInstancesListingFuture struct {
	Future workflow.Future
}

func (r *EC2CancelReservedInstancesListingFuture) Get(ctx workflow.Context) (*ec2.CancelReservedInstancesListingOutput, error) {
	var output ec2.CancelReservedInstancesListingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CancelSpotFleetRequestsFuture struct {
	Future workflow.Future
}

func (r *EC2CancelSpotFleetRequestsFuture) Get(ctx workflow.Context) (*ec2.CancelSpotFleetRequestsOutput, error) {
	var output ec2.CancelSpotFleetRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CancelSpotInstanceRequestsFuture struct {
	Future workflow.Future
}

func (r *EC2CancelSpotInstanceRequestsFuture) Get(ctx workflow.Context) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	var output ec2.CancelSpotInstanceRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ConfirmProductInstanceFuture struct {
	Future workflow.Future
}

func (r *EC2ConfirmProductInstanceFuture) Get(ctx workflow.Context) (*ec2.ConfirmProductInstanceOutput, error) {
	var output ec2.ConfirmProductInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CopyFpgaImageFuture struct {
	Future workflow.Future
}

func (r *EC2CopyFpgaImageFuture) Get(ctx workflow.Context) (*ec2.CopyFpgaImageOutput, error) {
	var output ec2.CopyFpgaImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CopyImageFuture struct {
	Future workflow.Future
}

func (r *EC2CopyImageFuture) Get(ctx workflow.Context) (*ec2.CopyImageOutput, error) {
	var output ec2.CopyImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CopySnapshotFuture struct {
	Future workflow.Future
}

func (r *EC2CopySnapshotFuture) Get(ctx workflow.Context) (*ec2.CopySnapshotOutput, error) {
	var output ec2.CopySnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateCapacityReservationFuture struct {
	Future workflow.Future
}

func (r *EC2CreateCapacityReservationFuture) Get(ctx workflow.Context) (*ec2.CreateCapacityReservationOutput, error) {
	var output ec2.CreateCapacityReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateCarrierGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2CreateCarrierGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateCarrierGatewayOutput, error) {
	var output ec2.CreateCarrierGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateClientVpnEndpointFuture struct {
	Future workflow.Future
}

func (r *EC2CreateClientVpnEndpointFuture) Get(ctx workflow.Context) (*ec2.CreateClientVpnEndpointOutput, error) {
	var output ec2.CreateClientVpnEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateClientVpnRouteFuture struct {
	Future workflow.Future
}

func (r *EC2CreateClientVpnRouteFuture) Get(ctx workflow.Context) (*ec2.CreateClientVpnRouteOutput, error) {
	var output ec2.CreateClientVpnRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateCustomerGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2CreateCustomerGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateCustomerGatewayOutput, error) {
	var output ec2.CreateCustomerGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateDefaultSubnetFuture struct {
	Future workflow.Future
}

func (r *EC2CreateDefaultSubnetFuture) Get(ctx workflow.Context) (*ec2.CreateDefaultSubnetOutput, error) {
	var output ec2.CreateDefaultSubnetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateDefaultVpcFuture struct {
	Future workflow.Future
}

func (r *EC2CreateDefaultVpcFuture) Get(ctx workflow.Context) (*ec2.CreateDefaultVpcOutput, error) {
	var output ec2.CreateDefaultVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateDhcpOptionsFuture struct {
	Future workflow.Future
}

func (r *EC2CreateDhcpOptionsFuture) Get(ctx workflow.Context) (*ec2.CreateDhcpOptionsOutput, error) {
	var output ec2.CreateDhcpOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateEgressOnlyInternetGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2CreateEgressOnlyInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	var output ec2.CreateEgressOnlyInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateFleetFuture struct {
	Future workflow.Future
}

func (r *EC2CreateFleetFuture) Get(ctx workflow.Context) (*ec2.CreateFleetOutput, error) {
	var output ec2.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateFlowLogsFuture struct {
	Future workflow.Future
}

func (r *EC2CreateFlowLogsFuture) Get(ctx workflow.Context) (*ec2.CreateFlowLogsOutput, error) {
	var output ec2.CreateFlowLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateFpgaImageFuture struct {
	Future workflow.Future
}

func (r *EC2CreateFpgaImageFuture) Get(ctx workflow.Context) (*ec2.CreateFpgaImageOutput, error) {
	var output ec2.CreateFpgaImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateImageFuture struct {
	Future workflow.Future
}

func (r *EC2CreateImageFuture) Get(ctx workflow.Context) (*ec2.CreateImageOutput, error) {
	var output ec2.CreateImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateInstanceExportTaskFuture struct {
	Future workflow.Future
}

func (r *EC2CreateInstanceExportTaskFuture) Get(ctx workflow.Context) (*ec2.CreateInstanceExportTaskOutput, error) {
	var output ec2.CreateInstanceExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateInternetGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2CreateInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateInternetGatewayOutput, error) {
	var output ec2.CreateInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateKeyPairFuture struct {
	Future workflow.Future
}

func (r *EC2CreateKeyPairFuture) Get(ctx workflow.Context) (*ec2.CreateKeyPairOutput, error) {
	var output ec2.CreateKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateLaunchTemplateFuture struct {
	Future workflow.Future
}

func (r *EC2CreateLaunchTemplateFuture) Get(ctx workflow.Context) (*ec2.CreateLaunchTemplateOutput, error) {
	var output ec2.CreateLaunchTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateLaunchTemplateVersionFuture struct {
	Future workflow.Future
}

func (r *EC2CreateLaunchTemplateVersionFuture) Get(ctx workflow.Context) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	var output ec2.CreateLaunchTemplateVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateLocalGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *EC2CreateLocalGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.CreateLocalGatewayRouteOutput, error) {
	var output ec2.CreateLocalGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateLocalGatewayRouteTableVpcAssociationFuture struct {
	Future workflow.Future
}

func (r *EC2CreateLocalGatewayRouteTableVpcAssociationFuture) Get(ctx workflow.Context) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
	var output ec2.CreateLocalGatewayRouteTableVpcAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateManagedPrefixListFuture struct {
	Future workflow.Future
}

func (r *EC2CreateManagedPrefixListFuture) Get(ctx workflow.Context) (*ec2.CreateManagedPrefixListOutput, error) {
	var output ec2.CreateManagedPrefixListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateNatGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2CreateNatGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateNatGatewayOutput, error) {
	var output ec2.CreateNatGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateNetworkAclFuture struct {
	Future workflow.Future
}

func (r *EC2CreateNetworkAclFuture) Get(ctx workflow.Context) (*ec2.CreateNetworkAclOutput, error) {
	var output ec2.CreateNetworkAclOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateNetworkAclEntryFuture struct {
	Future workflow.Future
}

func (r *EC2CreateNetworkAclEntryFuture) Get(ctx workflow.Context) (*ec2.CreateNetworkAclEntryOutput, error) {
	var output ec2.CreateNetworkAclEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateNetworkInterfaceFuture struct {
	Future workflow.Future
}

func (r *EC2CreateNetworkInterfaceFuture) Get(ctx workflow.Context) (*ec2.CreateNetworkInterfaceOutput, error) {
	var output ec2.CreateNetworkInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateNetworkInterfacePermissionFuture struct {
	Future workflow.Future
}

func (r *EC2CreateNetworkInterfacePermissionFuture) Get(ctx workflow.Context) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	var output ec2.CreateNetworkInterfacePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreatePlacementGroupFuture struct {
	Future workflow.Future
}

func (r *EC2CreatePlacementGroupFuture) Get(ctx workflow.Context) (*ec2.CreatePlacementGroupOutput, error) {
	var output ec2.CreatePlacementGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateReservedInstancesListingFuture struct {
	Future workflow.Future
}

func (r *EC2CreateReservedInstancesListingFuture) Get(ctx workflow.Context) (*ec2.CreateReservedInstancesListingOutput, error) {
	var output ec2.CreateReservedInstancesListingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateRouteFuture struct {
	Future workflow.Future
}

func (r *EC2CreateRouteFuture) Get(ctx workflow.Context) (*ec2.CreateRouteOutput, error) {
	var output ec2.CreateRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateRouteTableFuture struct {
	Future workflow.Future
}

func (r *EC2CreateRouteTableFuture) Get(ctx workflow.Context) (*ec2.CreateRouteTableOutput, error) {
	var output ec2.CreateRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *EC2CreateSecurityGroupFuture) Get(ctx workflow.Context) (*ec2.CreateSecurityGroupOutput, error) {
	var output ec2.CreateSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateSnapshotFuture struct {
	Future workflow.Future
}

func (r *EC2CreateSnapshotFuture) Get(ctx workflow.Context) (*ec2.Snapshot, error) {
	var output ec2.Snapshot
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateSnapshotsFuture struct {
	Future workflow.Future
}

func (r *EC2CreateSnapshotsFuture) Get(ctx workflow.Context) (*ec2.CreateSnapshotsOutput, error) {
	var output ec2.CreateSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateSpotDatafeedSubscriptionFuture struct {
	Future workflow.Future
}

func (r *EC2CreateSpotDatafeedSubscriptionFuture) Get(ctx workflow.Context) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	var output ec2.CreateSpotDatafeedSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateSubnetFuture struct {
	Future workflow.Future
}

func (r *EC2CreateSubnetFuture) Get(ctx workflow.Context) (*ec2.CreateSubnetOutput, error) {
	var output ec2.CreateSubnetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateTagsFuture struct {
	Future workflow.Future
}

func (r *EC2CreateTagsFuture) Get(ctx workflow.Context) (*ec2.CreateTagsOutput, error) {
	var output ec2.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateTrafficMirrorFilterFuture struct {
	Future workflow.Future
}

func (r *EC2CreateTrafficMirrorFilterFuture) Get(ctx workflow.Context) (*ec2.CreateTrafficMirrorFilterOutput, error) {
	var output ec2.CreateTrafficMirrorFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateTrafficMirrorFilterRuleFuture struct {
	Future workflow.Future
}

func (r *EC2CreateTrafficMirrorFilterRuleFuture) Get(ctx workflow.Context) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
	var output ec2.CreateTrafficMirrorFilterRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateTrafficMirrorSessionFuture struct {
	Future workflow.Future
}

func (r *EC2CreateTrafficMirrorSessionFuture) Get(ctx workflow.Context) (*ec2.CreateTrafficMirrorSessionOutput, error) {
	var output ec2.CreateTrafficMirrorSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateTrafficMirrorTargetFuture struct {
	Future workflow.Future
}

func (r *EC2CreateTrafficMirrorTargetFuture) Get(ctx workflow.Context) (*ec2.CreateTrafficMirrorTargetOutput, error) {
	var output ec2.CreateTrafficMirrorTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateTransitGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2CreateTransitGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayOutput, error) {
	var output ec2.CreateTransitGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateTransitGatewayMulticastDomainFuture struct {
	Future workflow.Future
}

func (r *EC2CreateTransitGatewayMulticastDomainFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.CreateTransitGatewayMulticastDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateTransitGatewayPeeringAttachmentFuture struct {
	Future workflow.Future
}

func (r *EC2CreateTransitGatewayPeeringAttachmentFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.CreateTransitGatewayPeeringAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateTransitGatewayPrefixListReferenceFuture struct {
	Future workflow.Future
}

func (r *EC2CreateTransitGatewayPrefixListReferenceFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.CreateTransitGatewayPrefixListReferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateTransitGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *EC2CreateTransitGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayRouteOutput, error) {
	var output ec2.CreateTransitGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateTransitGatewayRouteTableFuture struct {
	Future workflow.Future
}

func (r *EC2CreateTransitGatewayRouteTableFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
	var output ec2.CreateTransitGatewayRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateTransitGatewayVpcAttachmentFuture struct {
	Future workflow.Future
}

func (r *EC2CreateTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.CreateTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateVolumeFuture struct {
	Future workflow.Future
}

func (r *EC2CreateVolumeFuture) Get(ctx workflow.Context) (*ec2.Volume, error) {
	var output ec2.Volume
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateVpcFuture struct {
	Future workflow.Future
}

func (r *EC2CreateVpcFuture) Get(ctx workflow.Context) (*ec2.CreateVpcOutput, error) {
	var output ec2.CreateVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateVpcEndpointFuture struct {
	Future workflow.Future
}

func (r *EC2CreateVpcEndpointFuture) Get(ctx workflow.Context) (*ec2.CreateVpcEndpointOutput, error) {
	var output ec2.CreateVpcEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateVpcEndpointConnectionNotificationFuture struct {
	Future workflow.Future
}

func (r *EC2CreateVpcEndpointConnectionNotificationFuture) Get(ctx workflow.Context) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
	var output ec2.CreateVpcEndpointConnectionNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateVpcEndpointServiceConfigurationFuture struct {
	Future workflow.Future
}

func (r *EC2CreateVpcEndpointServiceConfigurationFuture) Get(ctx workflow.Context) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	var output ec2.CreateVpcEndpointServiceConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateVpcPeeringConnectionFuture struct {
	Future workflow.Future
}

func (r *EC2CreateVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	var output ec2.CreateVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateVpnConnectionFuture struct {
	Future workflow.Future
}

func (r *EC2CreateVpnConnectionFuture) Get(ctx workflow.Context) (*ec2.CreateVpnConnectionOutput, error) {
	var output ec2.CreateVpnConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateVpnConnectionRouteFuture struct {
	Future workflow.Future
}

func (r *EC2CreateVpnConnectionRouteFuture) Get(ctx workflow.Context) (*ec2.CreateVpnConnectionRouteOutput, error) {
	var output ec2.CreateVpnConnectionRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2CreateVpnGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2CreateVpnGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateVpnGatewayOutput, error) {
	var output ec2.CreateVpnGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteCarrierGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteCarrierGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteCarrierGatewayOutput, error) {
	var output ec2.DeleteCarrierGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteClientVpnEndpointFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteClientVpnEndpointFuture) Get(ctx workflow.Context) (*ec2.DeleteClientVpnEndpointOutput, error) {
	var output ec2.DeleteClientVpnEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteClientVpnRouteFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteClientVpnRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteClientVpnRouteOutput, error) {
	var output ec2.DeleteClientVpnRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteCustomerGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteCustomerGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteCustomerGatewayOutput, error) {
	var output ec2.DeleteCustomerGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteDhcpOptionsFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteDhcpOptionsFuture) Get(ctx workflow.Context) (*ec2.DeleteDhcpOptionsOutput, error) {
	var output ec2.DeleteDhcpOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteEgressOnlyInternetGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteEgressOnlyInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	var output ec2.DeleteEgressOnlyInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteFleetsFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteFleetsFuture) Get(ctx workflow.Context) (*ec2.DeleteFleetsOutput, error) {
	var output ec2.DeleteFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteFlowLogsFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteFlowLogsFuture) Get(ctx workflow.Context) (*ec2.DeleteFlowLogsOutput, error) {
	var output ec2.DeleteFlowLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteFpgaImageFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteFpgaImageFuture) Get(ctx workflow.Context) (*ec2.DeleteFpgaImageOutput, error) {
	var output ec2.DeleteFpgaImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteInternetGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteInternetGatewayOutput, error) {
	var output ec2.DeleteInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteKeyPairFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteKeyPairFuture) Get(ctx workflow.Context) (*ec2.DeleteKeyPairOutput, error) {
	var output ec2.DeleteKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteLaunchTemplateFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteLaunchTemplateFuture) Get(ctx workflow.Context) (*ec2.DeleteLaunchTemplateOutput, error) {
	var output ec2.DeleteLaunchTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteLaunchTemplateVersionsFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteLaunchTemplateVersionsFuture) Get(ctx workflow.Context) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
	var output ec2.DeleteLaunchTemplateVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteLocalGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteLocalGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteLocalGatewayRouteOutput, error) {
	var output ec2.DeleteLocalGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteLocalGatewayRouteTableVpcAssociationFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteLocalGatewayRouteTableVpcAssociationFuture) Get(ctx workflow.Context) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
	var output ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteManagedPrefixListFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteManagedPrefixListFuture) Get(ctx workflow.Context) (*ec2.DeleteManagedPrefixListOutput, error) {
	var output ec2.DeleteManagedPrefixListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteNatGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteNatGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteNatGatewayOutput, error) {
	var output ec2.DeleteNatGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteNetworkAclFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteNetworkAclFuture) Get(ctx workflow.Context) (*ec2.DeleteNetworkAclOutput, error) {
	var output ec2.DeleteNetworkAclOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteNetworkAclEntryFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteNetworkAclEntryFuture) Get(ctx workflow.Context) (*ec2.DeleteNetworkAclEntryOutput, error) {
	var output ec2.DeleteNetworkAclEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteNetworkInterfaceFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteNetworkInterfaceFuture) Get(ctx workflow.Context) (*ec2.DeleteNetworkInterfaceOutput, error) {
	var output ec2.DeleteNetworkInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteNetworkInterfacePermissionFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteNetworkInterfacePermissionFuture) Get(ctx workflow.Context) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	var output ec2.DeleteNetworkInterfacePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeletePlacementGroupFuture struct {
	Future workflow.Future
}

func (r *EC2DeletePlacementGroupFuture) Get(ctx workflow.Context) (*ec2.DeletePlacementGroupOutput, error) {
	var output ec2.DeletePlacementGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteQueuedReservedInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteQueuedReservedInstancesFuture) Get(ctx workflow.Context) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
	var output ec2.DeleteQueuedReservedInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteRouteFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteRouteOutput, error) {
	var output ec2.DeleteRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteRouteTableFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteRouteTableFuture) Get(ctx workflow.Context) (*ec2.DeleteRouteTableOutput, error) {
	var output ec2.DeleteRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteSecurityGroupFuture) Get(ctx workflow.Context) (*ec2.DeleteSecurityGroupOutput, error) {
	var output ec2.DeleteSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteSnapshotFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteSnapshotFuture) Get(ctx workflow.Context) (*ec2.DeleteSnapshotOutput, error) {
	var output ec2.DeleteSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteSpotDatafeedSubscriptionFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteSpotDatafeedSubscriptionFuture) Get(ctx workflow.Context) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	var output ec2.DeleteSpotDatafeedSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteSubnetFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteSubnetFuture) Get(ctx workflow.Context) (*ec2.DeleteSubnetOutput, error) {
	var output ec2.DeleteSubnetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteTagsFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteTagsFuture) Get(ctx workflow.Context) (*ec2.DeleteTagsOutput, error) {
	var output ec2.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteTrafficMirrorFilterFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteTrafficMirrorFilterFuture) Get(ctx workflow.Context) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
	var output ec2.DeleteTrafficMirrorFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteTrafficMirrorFilterRuleFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteTrafficMirrorFilterRuleFuture) Get(ctx workflow.Context) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
	var output ec2.DeleteTrafficMirrorFilterRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteTrafficMirrorSessionFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteTrafficMirrorSessionFuture) Get(ctx workflow.Context) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
	var output ec2.DeleteTrafficMirrorSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteTrafficMirrorTargetFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteTrafficMirrorTargetFuture) Get(ctx workflow.Context) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
	var output ec2.DeleteTrafficMirrorTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteTransitGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteTransitGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayOutput, error) {
	var output ec2.DeleteTransitGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteTransitGatewayMulticastDomainFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteTransitGatewayMulticastDomainFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
	var output ec2.DeleteTransitGatewayMulticastDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteTransitGatewayPeeringAttachmentFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteTransitGatewayPeeringAttachmentFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.DeleteTransitGatewayPeeringAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteTransitGatewayPrefixListReferenceFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteTransitGatewayPrefixListReferenceFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.DeleteTransitGatewayPrefixListReferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteTransitGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteTransitGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayRouteOutput, error) {
	var output ec2.DeleteTransitGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteTransitGatewayRouteTableFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteTransitGatewayRouteTableFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
	var output ec2.DeleteTransitGatewayRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteTransitGatewayVpcAttachmentFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.DeleteTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteVolumeFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteVolumeFuture) Get(ctx workflow.Context) (*ec2.DeleteVolumeOutput, error) {
	var output ec2.DeleteVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteVpcFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteVpcFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcOutput, error) {
	var output ec2.DeleteVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteVpcEndpointConnectionNotificationsFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteVpcEndpointConnectionNotificationsFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
	var output ec2.DeleteVpcEndpointConnectionNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteVpcEndpointServiceConfigurationsFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteVpcEndpointServiceConfigurationsFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	var output ec2.DeleteVpcEndpointServiceConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteVpcEndpointsFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteVpcEndpointsFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcEndpointsOutput, error) {
	var output ec2.DeleteVpcEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteVpcPeeringConnectionFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	var output ec2.DeleteVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteVpnConnectionFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteVpnConnectionFuture) Get(ctx workflow.Context) (*ec2.DeleteVpnConnectionOutput, error) {
	var output ec2.DeleteVpnConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteVpnConnectionRouteFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteVpnConnectionRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	var output ec2.DeleteVpnConnectionRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeleteVpnGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2DeleteVpnGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteVpnGatewayOutput, error) {
	var output ec2.DeleteVpnGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeprovisionByoipCidrFuture struct {
	Future workflow.Future
}

func (r *EC2DeprovisionByoipCidrFuture) Get(ctx workflow.Context) (*ec2.DeprovisionByoipCidrOutput, error) {
	var output ec2.DeprovisionByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeregisterImageFuture struct {
	Future workflow.Future
}

func (r *EC2DeregisterImageFuture) Get(ctx workflow.Context) (*ec2.DeregisterImageOutput, error) {
	var output ec2.DeregisterImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeregisterInstanceEventNotificationAttributesFuture struct {
	Future workflow.Future
}

func (r *EC2DeregisterInstanceEventNotificationAttributesFuture) Get(ctx workflow.Context) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error) {
	var output ec2.DeregisterInstanceEventNotificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeregisterTransitGatewayMulticastGroupMembersFuture struct {
	Future workflow.Future
}

func (r *EC2DeregisterTransitGatewayMulticastGroupMembersFuture) Get(ctx workflow.Context) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
	var output ec2.DeregisterTransitGatewayMulticastGroupMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DeregisterTransitGatewayMulticastGroupSourcesFuture struct {
	Future workflow.Future
}

func (r *EC2DeregisterTransitGatewayMulticastGroupSourcesFuture) Get(ctx workflow.Context) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
	var output ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeAccountAttributesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeAccountAttributesFuture) Get(ctx workflow.Context) (*ec2.DescribeAccountAttributesOutput, error) {
	var output ec2.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeAddressesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeAddressesFuture) Get(ctx workflow.Context) (*ec2.DescribeAddressesOutput, error) {
	var output ec2.DescribeAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeAggregateIdFormatFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeAggregateIdFormatFuture) Get(ctx workflow.Context) (*ec2.DescribeAggregateIdFormatOutput, error) {
	var output ec2.DescribeAggregateIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeAvailabilityZonesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeAvailabilityZonesFuture) Get(ctx workflow.Context) (*ec2.DescribeAvailabilityZonesOutput, error) {
	var output ec2.DescribeAvailabilityZonesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeBundleTasksFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeBundleTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeBundleTasksOutput, error) {
	var output ec2.DescribeBundleTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeByoipCidrsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeByoipCidrsFuture) Get(ctx workflow.Context) (*ec2.DescribeByoipCidrsOutput, error) {
	var output ec2.DescribeByoipCidrsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeCapacityReservationsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeCapacityReservationsFuture) Get(ctx workflow.Context) (*ec2.DescribeCapacityReservationsOutput, error) {
	var output ec2.DescribeCapacityReservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeCarrierGatewaysFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeCarrierGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeCarrierGatewaysOutput, error) {
	var output ec2.DescribeCarrierGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeClassicLinkInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeClassicLinkInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	var output ec2.DescribeClassicLinkInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeClientVpnAuthorizationRulesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeClientVpnAuthorizationRulesFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
	var output ec2.DescribeClientVpnAuthorizationRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeClientVpnConnectionsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeClientVpnConnectionsFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnConnectionsOutput, error) {
	var output ec2.DescribeClientVpnConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeClientVpnEndpointsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeClientVpnEndpointsFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnEndpointsOutput, error) {
	var output ec2.DescribeClientVpnEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeClientVpnRoutesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeClientVpnRoutesFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnRoutesOutput, error) {
	var output ec2.DescribeClientVpnRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeClientVpnTargetNetworksFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeClientVpnTargetNetworksFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
	var output ec2.DescribeClientVpnTargetNetworksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeCoipPoolsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeCoipPoolsFuture) Get(ctx workflow.Context) (*ec2.DescribeCoipPoolsOutput, error) {
	var output ec2.DescribeCoipPoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeConversionTasksFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeConversionTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeConversionTasksOutput, error) {
	var output ec2.DescribeConversionTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeCustomerGatewaysFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeCustomerGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeCustomerGatewaysOutput, error) {
	var output ec2.DescribeCustomerGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeDhcpOptionsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeDhcpOptionsFuture) Get(ctx workflow.Context) (*ec2.DescribeDhcpOptionsOutput, error) {
	var output ec2.DescribeDhcpOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeEgressOnlyInternetGatewaysFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeEgressOnlyInternetGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	var output ec2.DescribeEgressOnlyInternetGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeElasticGpusFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeElasticGpusFuture) Get(ctx workflow.Context) (*ec2.DescribeElasticGpusOutput, error) {
	var output ec2.DescribeElasticGpusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeExportImageTasksFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeExportImageTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeExportImageTasksOutput, error) {
	var output ec2.DescribeExportImageTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeExportTasksFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeExportTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeExportTasksOutput, error) {
	var output ec2.DescribeExportTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeFastSnapshotRestoresFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeFastSnapshotRestoresFuture) Get(ctx workflow.Context) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
	var output ec2.DescribeFastSnapshotRestoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeFleetHistoryFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeFleetHistoryFuture) Get(ctx workflow.Context) (*ec2.DescribeFleetHistoryOutput, error) {
	var output ec2.DescribeFleetHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeFleetInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeFleetInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeFleetInstancesOutput, error) {
	var output ec2.DescribeFleetInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeFleetsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeFleetsFuture) Get(ctx workflow.Context) (*ec2.DescribeFleetsOutput, error) {
	var output ec2.DescribeFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeFlowLogsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeFlowLogsFuture) Get(ctx workflow.Context) (*ec2.DescribeFlowLogsOutput, error) {
	var output ec2.DescribeFlowLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeFpgaImageAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeFpgaImageAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	var output ec2.DescribeFpgaImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeFpgaImagesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeFpgaImagesFuture) Get(ctx workflow.Context) (*ec2.DescribeFpgaImagesOutput, error) {
	var output ec2.DescribeFpgaImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeHostReservationOfferingsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeHostReservationOfferingsFuture) Get(ctx workflow.Context) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	var output ec2.DescribeHostReservationOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeHostReservationsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeHostReservationsFuture) Get(ctx workflow.Context) (*ec2.DescribeHostReservationsOutput, error) {
	var output ec2.DescribeHostReservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeHostsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeHostsFuture) Get(ctx workflow.Context) (*ec2.DescribeHostsOutput, error) {
	var output ec2.DescribeHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeIamInstanceProfileAssociationsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeIamInstanceProfileAssociationsFuture) Get(ctx workflow.Context) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	var output ec2.DescribeIamInstanceProfileAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeIdFormatFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeIdFormatFuture) Get(ctx workflow.Context) (*ec2.DescribeIdFormatOutput, error) {
	var output ec2.DescribeIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeIdentityIdFormatFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeIdentityIdFormatFuture) Get(ctx workflow.Context) (*ec2.DescribeIdentityIdFormatOutput, error) {
	var output ec2.DescribeIdentityIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeImageAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeImageAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeImageAttributeOutput, error) {
	var output ec2.DescribeImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeImagesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeImagesFuture) Get(ctx workflow.Context) (*ec2.DescribeImagesOutput, error) {
	var output ec2.DescribeImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeImportImageTasksFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeImportImageTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeImportImageTasksOutput, error) {
	var output ec2.DescribeImportImageTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeImportSnapshotTasksFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeImportSnapshotTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	var output ec2.DescribeImportSnapshotTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeInstanceAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeInstanceAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceAttributeOutput, error) {
	var output ec2.DescribeInstanceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeInstanceCreditSpecificationsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeInstanceCreditSpecificationsFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
	var output ec2.DescribeInstanceCreditSpecificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeInstanceEventNotificationAttributesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeInstanceEventNotificationAttributesFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error) {
	var output ec2.DescribeInstanceEventNotificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeInstanceStatusFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeInstanceStatusFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceStatusOutput, error) {
	var output ec2.DescribeInstanceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeInstanceTypeOfferingsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeInstanceTypeOfferingsFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
	var output ec2.DescribeInstanceTypeOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeInstanceTypesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeInstanceTypesFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceTypesOutput, error) {
	var output ec2.DescribeInstanceTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeInstancesOutput, error) {
	var output ec2.DescribeInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeInternetGatewaysFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeInternetGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeInternetGatewaysOutput, error) {
	var output ec2.DescribeInternetGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeIpv6PoolsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeIpv6PoolsFuture) Get(ctx workflow.Context) (*ec2.DescribeIpv6PoolsOutput, error) {
	var output ec2.DescribeIpv6PoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeKeyPairsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeKeyPairsFuture) Get(ctx workflow.Context) (*ec2.DescribeKeyPairsOutput, error) {
	var output ec2.DescribeKeyPairsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeLaunchTemplateVersionsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeLaunchTemplateVersionsFuture) Get(ctx workflow.Context) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
	var output ec2.DescribeLaunchTemplateVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeLaunchTemplatesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeLaunchTemplatesFuture) Get(ctx workflow.Context) (*ec2.DescribeLaunchTemplatesOutput, error) {
	var output ec2.DescribeLaunchTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeLocalGatewayRouteTableVpcAssociationsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeLocalGatewayRouteTableVpcAssociationsFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeLocalGatewayRouteTablesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeLocalGatewayRouteTablesFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeLocalGatewayVirtualInterfaceGroupsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeLocalGatewayVirtualInterfaceGroupsFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
	var output ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeLocalGatewayVirtualInterfacesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeLocalGatewayVirtualInterfacesFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
	var output ec2.DescribeLocalGatewayVirtualInterfacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeLocalGatewaysFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeLocalGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewaysOutput, error) {
	var output ec2.DescribeLocalGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeManagedPrefixListsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeManagedPrefixListsFuture) Get(ctx workflow.Context) (*ec2.DescribeManagedPrefixListsOutput, error) {
	var output ec2.DescribeManagedPrefixListsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeMovingAddressesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeMovingAddressesFuture) Get(ctx workflow.Context) (*ec2.DescribeMovingAddressesOutput, error) {
	var output ec2.DescribeMovingAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeNatGatewaysFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeNatGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeNatGatewaysOutput, error) {
	var output ec2.DescribeNatGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeNetworkAclsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeNetworkAclsFuture) Get(ctx workflow.Context) (*ec2.DescribeNetworkAclsOutput, error) {
	var output ec2.DescribeNetworkAclsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeNetworkInterfaceAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeNetworkInterfaceAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	var output ec2.DescribeNetworkInterfaceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeNetworkInterfacePermissionsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeNetworkInterfacePermissionsFuture) Get(ctx workflow.Context) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	var output ec2.DescribeNetworkInterfacePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeNetworkInterfacesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeNetworkInterfacesFuture) Get(ctx workflow.Context) (*ec2.DescribeNetworkInterfacesOutput, error) {
	var output ec2.DescribeNetworkInterfacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribePlacementGroupsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribePlacementGroupsFuture) Get(ctx workflow.Context) (*ec2.DescribePlacementGroupsOutput, error) {
	var output ec2.DescribePlacementGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribePrefixListsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribePrefixListsFuture) Get(ctx workflow.Context) (*ec2.DescribePrefixListsOutput, error) {
	var output ec2.DescribePrefixListsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribePrincipalIdFormatFuture struct {
	Future workflow.Future
}

func (r *EC2DescribePrincipalIdFormatFuture) Get(ctx workflow.Context) (*ec2.DescribePrincipalIdFormatOutput, error) {
	var output ec2.DescribePrincipalIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribePublicIpv4PoolsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribePublicIpv4PoolsFuture) Get(ctx workflow.Context) (*ec2.DescribePublicIpv4PoolsOutput, error) {
	var output ec2.DescribePublicIpv4PoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeRegionsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeRegionsFuture) Get(ctx workflow.Context) (*ec2.DescribeRegionsOutput, error) {
	var output ec2.DescribeRegionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeReservedInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeReservedInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeReservedInstancesOutput, error) {
	var output ec2.DescribeReservedInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeReservedInstancesListingsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeReservedInstancesListingsFuture) Get(ctx workflow.Context) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	var output ec2.DescribeReservedInstancesListingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeReservedInstancesModificationsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeReservedInstancesModificationsFuture) Get(ctx workflow.Context) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	var output ec2.DescribeReservedInstancesModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeReservedInstancesOfferingsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeReservedInstancesOfferingsFuture) Get(ctx workflow.Context) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	var output ec2.DescribeReservedInstancesOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeRouteTablesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeRouteTablesFuture) Get(ctx workflow.Context) (*ec2.DescribeRouteTablesOutput, error) {
	var output ec2.DescribeRouteTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeScheduledInstanceAvailabilityFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeScheduledInstanceAvailabilityFuture) Get(ctx workflow.Context) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	var output ec2.DescribeScheduledInstanceAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeScheduledInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeScheduledInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeScheduledInstancesOutput, error) {
	var output ec2.DescribeScheduledInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeSecurityGroupReferencesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeSecurityGroupReferencesFuture) Get(ctx workflow.Context) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	var output ec2.DescribeSecurityGroupReferencesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeSecurityGroupsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeSecurityGroupsFuture) Get(ctx workflow.Context) (*ec2.DescribeSecurityGroupsOutput, error) {
	var output ec2.DescribeSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeSnapshotAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeSnapshotAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeSnapshotAttributeOutput, error) {
	var output ec2.DescribeSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeSnapshotsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeSnapshotsFuture) Get(ctx workflow.Context) (*ec2.DescribeSnapshotsOutput, error) {
	var output ec2.DescribeSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeSpotDatafeedSubscriptionFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeSpotDatafeedSubscriptionFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	var output ec2.DescribeSpotDatafeedSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeSpotFleetInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeSpotFleetInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	var output ec2.DescribeSpotFleetInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeSpotFleetRequestHistoryFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeSpotFleetRequestHistoryFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	var output ec2.DescribeSpotFleetRequestHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeSpotFleetRequestsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeSpotFleetRequestsFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	var output ec2.DescribeSpotFleetRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeSpotInstanceRequestsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeSpotInstanceRequestsFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	var output ec2.DescribeSpotInstanceRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeSpotPriceHistoryFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeSpotPriceHistoryFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	var output ec2.DescribeSpotPriceHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeStaleSecurityGroupsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeStaleSecurityGroupsFuture) Get(ctx workflow.Context) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	var output ec2.DescribeStaleSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeSubnetsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeSubnetsFuture) Get(ctx workflow.Context) (*ec2.DescribeSubnetsOutput, error) {
	var output ec2.DescribeSubnetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeTagsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeTagsFuture) Get(ctx workflow.Context) (*ec2.DescribeTagsOutput, error) {
	var output ec2.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeTrafficMirrorFiltersFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeTrafficMirrorFiltersFuture) Get(ctx workflow.Context) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
	var output ec2.DescribeTrafficMirrorFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeTrafficMirrorSessionsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeTrafficMirrorSessionsFuture) Get(ctx workflow.Context) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
	var output ec2.DescribeTrafficMirrorSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeTrafficMirrorTargetsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeTrafficMirrorTargetsFuture) Get(ctx workflow.Context) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
	var output ec2.DescribeTrafficMirrorTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeTransitGatewayAttachmentsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeTransitGatewayAttachmentsFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeTransitGatewayMulticastDomainsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeTransitGatewayMulticastDomainsFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
	var output ec2.DescribeTransitGatewayMulticastDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeTransitGatewayPeeringAttachmentsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeTransitGatewayPeeringAttachmentsFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayPeeringAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeTransitGatewayRouteTablesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeTransitGatewayRouteTablesFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
	var output ec2.DescribeTransitGatewayRouteTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeTransitGatewayVpcAttachmentsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeTransitGatewayVpcAttachmentsFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayVpcAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeTransitGatewaysFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeTransitGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewaysOutput, error) {
	var output ec2.DescribeTransitGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVolumeAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVolumeAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeVolumeAttributeOutput, error) {
	var output ec2.DescribeVolumeAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVolumeStatusFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVolumeStatusFuture) Get(ctx workflow.Context) (*ec2.DescribeVolumeStatusOutput, error) {
	var output ec2.DescribeVolumeStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVolumesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVolumesFuture) Get(ctx workflow.Context) (*ec2.DescribeVolumesOutput, error) {
	var output ec2.DescribeVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVolumesModificationsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVolumesModificationsFuture) Get(ctx workflow.Context) (*ec2.DescribeVolumesModificationsOutput, error) {
	var output ec2.DescribeVolumesModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpcAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpcAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcAttributeOutput, error) {
	var output ec2.DescribeVpcAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpcClassicLinkFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpcClassicLinkFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcClassicLinkOutput, error) {
	var output ec2.DescribeVpcClassicLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpcClassicLinkDnsSupportFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpcClassicLinkDnsSupportFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.DescribeVpcClassicLinkDnsSupportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpcEndpointConnectionNotificationsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpcEndpointConnectionNotificationsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
	var output ec2.DescribeVpcEndpointConnectionNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpcEndpointConnectionsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpcEndpointConnectionsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
	var output ec2.DescribeVpcEndpointConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpcEndpointServiceConfigurationsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpcEndpointServiceConfigurationsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	var output ec2.DescribeVpcEndpointServiceConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpcEndpointServicePermissionsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpcEndpointServicePermissionsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	var output ec2.DescribeVpcEndpointServicePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpcEndpointServicesFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpcEndpointServicesFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	var output ec2.DescribeVpcEndpointServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpcEndpointsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpcEndpointsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointsOutput, error) {
	var output ec2.DescribeVpcEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpcPeeringConnectionsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpcPeeringConnectionsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	var output ec2.DescribeVpcPeeringConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpcsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpcsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcsOutput, error) {
	var output ec2.DescribeVpcsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpnConnectionsFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpnConnectionsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpnConnectionsOutput, error) {
	var output ec2.DescribeVpnConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DescribeVpnGatewaysFuture struct {
	Future workflow.Future
}

func (r *EC2DescribeVpnGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeVpnGatewaysOutput, error) {
	var output ec2.DescribeVpnGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DetachClassicLinkVpcFuture struct {
	Future workflow.Future
}

func (r *EC2DetachClassicLinkVpcFuture) Get(ctx workflow.Context) (*ec2.DetachClassicLinkVpcOutput, error) {
	var output ec2.DetachClassicLinkVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DetachInternetGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2DetachInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.DetachInternetGatewayOutput, error) {
	var output ec2.DetachInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DetachNetworkInterfaceFuture struct {
	Future workflow.Future
}

func (r *EC2DetachNetworkInterfaceFuture) Get(ctx workflow.Context) (*ec2.DetachNetworkInterfaceOutput, error) {
	var output ec2.DetachNetworkInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DetachVolumeFuture struct {
	Future workflow.Future
}

func (r *EC2DetachVolumeFuture) Get(ctx workflow.Context) (*ec2.VolumeAttachment, error) {
	var output ec2.VolumeAttachment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DetachVpnGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2DetachVpnGatewayFuture) Get(ctx workflow.Context) (*ec2.DetachVpnGatewayOutput, error) {
	var output ec2.DetachVpnGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisableEbsEncryptionByDefaultFuture struct {
	Future workflow.Future
}

func (r *EC2DisableEbsEncryptionByDefaultFuture) Get(ctx workflow.Context) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
	var output ec2.DisableEbsEncryptionByDefaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisableFastSnapshotRestoresFuture struct {
	Future workflow.Future
}

func (r *EC2DisableFastSnapshotRestoresFuture) Get(ctx workflow.Context) (*ec2.DisableFastSnapshotRestoresOutput, error) {
	var output ec2.DisableFastSnapshotRestoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisableTransitGatewayRouteTablePropagationFuture struct {
	Future workflow.Future
}

func (r *EC2DisableTransitGatewayRouteTablePropagationFuture) Get(ctx workflow.Context) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
	var output ec2.DisableTransitGatewayRouteTablePropagationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisableVgwRoutePropagationFuture struct {
	Future workflow.Future
}

func (r *EC2DisableVgwRoutePropagationFuture) Get(ctx workflow.Context) (*ec2.DisableVgwRoutePropagationOutput, error) {
	var output ec2.DisableVgwRoutePropagationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisableVpcClassicLinkFuture struct {
	Future workflow.Future
}

func (r *EC2DisableVpcClassicLinkFuture) Get(ctx workflow.Context) (*ec2.DisableVpcClassicLinkOutput, error) {
	var output ec2.DisableVpcClassicLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisableVpcClassicLinkDnsSupportFuture struct {
	Future workflow.Future
}

func (r *EC2DisableVpcClassicLinkDnsSupportFuture) Get(ctx workflow.Context) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.DisableVpcClassicLinkDnsSupportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisassociateAddressFuture struct {
	Future workflow.Future
}

func (r *EC2DisassociateAddressFuture) Get(ctx workflow.Context) (*ec2.DisassociateAddressOutput, error) {
	var output ec2.DisassociateAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisassociateClientVpnTargetNetworkFuture struct {
	Future workflow.Future
}

func (r *EC2DisassociateClientVpnTargetNetworkFuture) Get(ctx workflow.Context) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
	var output ec2.DisassociateClientVpnTargetNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisassociateIamInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *EC2DisassociateIamInstanceProfileFuture) Get(ctx workflow.Context) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	var output ec2.DisassociateIamInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisassociateRouteTableFuture struct {
	Future workflow.Future
}

func (r *EC2DisassociateRouteTableFuture) Get(ctx workflow.Context) (*ec2.DisassociateRouteTableOutput, error) {
	var output ec2.DisassociateRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisassociateSubnetCidrBlockFuture struct {
	Future workflow.Future
}

func (r *EC2DisassociateSubnetCidrBlockFuture) Get(ctx workflow.Context) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	var output ec2.DisassociateSubnetCidrBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisassociateTransitGatewayMulticastDomainFuture struct {
	Future workflow.Future
}

func (r *EC2DisassociateTransitGatewayMulticastDomainFuture) Get(ctx workflow.Context) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.DisassociateTransitGatewayMulticastDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisassociateTransitGatewayRouteTableFuture struct {
	Future workflow.Future
}

func (r *EC2DisassociateTransitGatewayRouteTableFuture) Get(ctx workflow.Context) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
	var output ec2.DisassociateTransitGatewayRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2DisassociateVpcCidrBlockFuture struct {
	Future workflow.Future
}

func (r *EC2DisassociateVpcCidrBlockFuture) Get(ctx workflow.Context) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	var output ec2.DisassociateVpcCidrBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2EnableEbsEncryptionByDefaultFuture struct {
	Future workflow.Future
}

func (r *EC2EnableEbsEncryptionByDefaultFuture) Get(ctx workflow.Context) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
	var output ec2.EnableEbsEncryptionByDefaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2EnableFastSnapshotRestoresFuture struct {
	Future workflow.Future
}

func (r *EC2EnableFastSnapshotRestoresFuture) Get(ctx workflow.Context) (*ec2.EnableFastSnapshotRestoresOutput, error) {
	var output ec2.EnableFastSnapshotRestoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2EnableTransitGatewayRouteTablePropagationFuture struct {
	Future workflow.Future
}

func (r *EC2EnableTransitGatewayRouteTablePropagationFuture) Get(ctx workflow.Context) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
	var output ec2.EnableTransitGatewayRouteTablePropagationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2EnableVgwRoutePropagationFuture struct {
	Future workflow.Future
}

func (r *EC2EnableVgwRoutePropagationFuture) Get(ctx workflow.Context) (*ec2.EnableVgwRoutePropagationOutput, error) {
	var output ec2.EnableVgwRoutePropagationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2EnableVolumeIOFuture struct {
	Future workflow.Future
}

func (r *EC2EnableVolumeIOFuture) Get(ctx workflow.Context) (*ec2.EnableVolumeIOOutput, error) {
	var output ec2.EnableVolumeIOOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2EnableVpcClassicLinkFuture struct {
	Future workflow.Future
}

func (r *EC2EnableVpcClassicLinkFuture) Get(ctx workflow.Context) (*ec2.EnableVpcClassicLinkOutput, error) {
	var output ec2.EnableVpcClassicLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2EnableVpcClassicLinkDnsSupportFuture struct {
	Future workflow.Future
}

func (r *EC2EnableVpcClassicLinkDnsSupportFuture) Get(ctx workflow.Context) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.EnableVpcClassicLinkDnsSupportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ExportClientVpnClientCertificateRevocationListFuture struct {
	Future workflow.Future
}

func (r *EC2ExportClientVpnClientCertificateRevocationListFuture) Get(ctx workflow.Context) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
	var output ec2.ExportClientVpnClientCertificateRevocationListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ExportClientVpnClientConfigurationFuture struct {
	Future workflow.Future
}

func (r *EC2ExportClientVpnClientConfigurationFuture) Get(ctx workflow.Context) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
	var output ec2.ExportClientVpnClientConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ExportImageFuture struct {
	Future workflow.Future
}

func (r *EC2ExportImageFuture) Get(ctx workflow.Context) (*ec2.ExportImageOutput, error) {
	var output ec2.ExportImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ExportTransitGatewayRoutesFuture struct {
	Future workflow.Future
}

func (r *EC2ExportTransitGatewayRoutesFuture) Get(ctx workflow.Context) (*ec2.ExportTransitGatewayRoutesOutput, error) {
	var output ec2.ExportTransitGatewayRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetAssociatedIpv6PoolCidrsFuture struct {
	Future workflow.Future
}

func (r *EC2GetAssociatedIpv6PoolCidrsFuture) Get(ctx workflow.Context) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
	var output ec2.GetAssociatedIpv6PoolCidrsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetCapacityReservationUsageFuture struct {
	Future workflow.Future
}

func (r *EC2GetCapacityReservationUsageFuture) Get(ctx workflow.Context) (*ec2.GetCapacityReservationUsageOutput, error) {
	var output ec2.GetCapacityReservationUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetCoipPoolUsageFuture struct {
	Future workflow.Future
}

func (r *EC2GetCoipPoolUsageFuture) Get(ctx workflow.Context) (*ec2.GetCoipPoolUsageOutput, error) {
	var output ec2.GetCoipPoolUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetConsoleOutputFuture struct {
	Future workflow.Future
}

func (r *EC2GetConsoleOutputFuture) Get(ctx workflow.Context) (*ec2.GetConsoleOutputOutput, error) {
	var output ec2.GetConsoleOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetConsoleScreenshotFuture struct {
	Future workflow.Future
}

func (r *EC2GetConsoleScreenshotFuture) Get(ctx workflow.Context) (*ec2.GetConsoleScreenshotOutput, error) {
	var output ec2.GetConsoleScreenshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetDefaultCreditSpecificationFuture struct {
	Future workflow.Future
}

func (r *EC2GetDefaultCreditSpecificationFuture) Get(ctx workflow.Context) (*ec2.GetDefaultCreditSpecificationOutput, error) {
	var output ec2.GetDefaultCreditSpecificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetEbsDefaultKmsKeyIdFuture struct {
	Future workflow.Future
}

func (r *EC2GetEbsDefaultKmsKeyIdFuture) Get(ctx workflow.Context) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.GetEbsDefaultKmsKeyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetEbsEncryptionByDefaultFuture struct {
	Future workflow.Future
}

func (r *EC2GetEbsEncryptionByDefaultFuture) Get(ctx workflow.Context) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
	var output ec2.GetEbsEncryptionByDefaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetGroupsForCapacityReservationFuture struct {
	Future workflow.Future
}

func (r *EC2GetGroupsForCapacityReservationFuture) Get(ctx workflow.Context) (*ec2.GetGroupsForCapacityReservationOutput, error) {
	var output ec2.GetGroupsForCapacityReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetHostReservationPurchasePreviewFuture struct {
	Future workflow.Future
}

func (r *EC2GetHostReservationPurchasePreviewFuture) Get(ctx workflow.Context) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	var output ec2.GetHostReservationPurchasePreviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetLaunchTemplateDataFuture struct {
	Future workflow.Future
}

func (r *EC2GetLaunchTemplateDataFuture) Get(ctx workflow.Context) (*ec2.GetLaunchTemplateDataOutput, error) {
	var output ec2.GetLaunchTemplateDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetManagedPrefixListAssociationsFuture struct {
	Future workflow.Future
}

func (r *EC2GetManagedPrefixListAssociationsFuture) Get(ctx workflow.Context) (*ec2.GetManagedPrefixListAssociationsOutput, error) {
	var output ec2.GetManagedPrefixListAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetManagedPrefixListEntriesFuture struct {
	Future workflow.Future
}

func (r *EC2GetManagedPrefixListEntriesFuture) Get(ctx workflow.Context) (*ec2.GetManagedPrefixListEntriesOutput, error) {
	var output ec2.GetManagedPrefixListEntriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetPasswordDataFuture struct {
	Future workflow.Future
}

func (r *EC2GetPasswordDataFuture) Get(ctx workflow.Context) (*ec2.GetPasswordDataOutput, error) {
	var output ec2.GetPasswordDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetReservedInstancesExchangeQuoteFuture struct {
	Future workflow.Future
}

func (r *EC2GetReservedInstancesExchangeQuoteFuture) Get(ctx workflow.Context) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	var output ec2.GetReservedInstancesExchangeQuoteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetTransitGatewayAttachmentPropagationsFuture struct {
	Future workflow.Future
}

func (r *EC2GetTransitGatewayAttachmentPropagationsFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
	var output ec2.GetTransitGatewayAttachmentPropagationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetTransitGatewayMulticastDomainAssociationsFuture struct {
	Future workflow.Future
}

func (r *EC2GetTransitGatewayMulticastDomainAssociationsFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
	var output ec2.GetTransitGatewayMulticastDomainAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetTransitGatewayPrefixListReferencesFuture struct {
	Future workflow.Future
}

func (r *EC2GetTransitGatewayPrefixListReferencesFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error) {
	var output ec2.GetTransitGatewayPrefixListReferencesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetTransitGatewayRouteTableAssociationsFuture struct {
	Future workflow.Future
}

func (r *EC2GetTransitGatewayRouteTableAssociationsFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
	var output ec2.GetTransitGatewayRouteTableAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2GetTransitGatewayRouteTablePropagationsFuture struct {
	Future workflow.Future
}

func (r *EC2GetTransitGatewayRouteTablePropagationsFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
	var output ec2.GetTransitGatewayRouteTablePropagationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ImportClientVpnClientCertificateRevocationListFuture struct {
	Future workflow.Future
}

func (r *EC2ImportClientVpnClientCertificateRevocationListFuture) Get(ctx workflow.Context) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
	var output ec2.ImportClientVpnClientCertificateRevocationListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ImportImageFuture struct {
	Future workflow.Future
}

func (r *EC2ImportImageFuture) Get(ctx workflow.Context) (*ec2.ImportImageOutput, error) {
	var output ec2.ImportImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ImportInstanceFuture struct {
	Future workflow.Future
}

func (r *EC2ImportInstanceFuture) Get(ctx workflow.Context) (*ec2.ImportInstanceOutput, error) {
	var output ec2.ImportInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ImportKeyPairFuture struct {
	Future workflow.Future
}

func (r *EC2ImportKeyPairFuture) Get(ctx workflow.Context) (*ec2.ImportKeyPairOutput, error) {
	var output ec2.ImportKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ImportSnapshotFuture struct {
	Future workflow.Future
}

func (r *EC2ImportSnapshotFuture) Get(ctx workflow.Context) (*ec2.ImportSnapshotOutput, error) {
	var output ec2.ImportSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ImportVolumeFuture struct {
	Future workflow.Future
}

func (r *EC2ImportVolumeFuture) Get(ctx workflow.Context) (*ec2.ImportVolumeOutput, error) {
	var output ec2.ImportVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyAvailabilityZoneGroupFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyAvailabilityZoneGroupFuture) Get(ctx workflow.Context) (*ec2.ModifyAvailabilityZoneGroupOutput, error) {
	var output ec2.ModifyAvailabilityZoneGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyCapacityReservationFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyCapacityReservationFuture) Get(ctx workflow.Context) (*ec2.ModifyCapacityReservationOutput, error) {
	var output ec2.ModifyCapacityReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyClientVpnEndpointFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyClientVpnEndpointFuture) Get(ctx workflow.Context) (*ec2.ModifyClientVpnEndpointOutput, error) {
	var output ec2.ModifyClientVpnEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyDefaultCreditSpecificationFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyDefaultCreditSpecificationFuture) Get(ctx workflow.Context) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
	var output ec2.ModifyDefaultCreditSpecificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyEbsDefaultKmsKeyIdFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyEbsDefaultKmsKeyIdFuture) Get(ctx workflow.Context) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.ModifyEbsDefaultKmsKeyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyFleetFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyFleetFuture) Get(ctx workflow.Context) (*ec2.ModifyFleetOutput, error) {
	var output ec2.ModifyFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyFpgaImageAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyFpgaImageAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	var output ec2.ModifyFpgaImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyHostsFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyHostsFuture) Get(ctx workflow.Context) (*ec2.ModifyHostsOutput, error) {
	var output ec2.ModifyHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyIdFormatFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyIdFormatFuture) Get(ctx workflow.Context) (*ec2.ModifyIdFormatOutput, error) {
	var output ec2.ModifyIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyIdentityIdFormatFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyIdentityIdFormatFuture) Get(ctx workflow.Context) (*ec2.ModifyIdentityIdFormatOutput, error) {
	var output ec2.ModifyIdentityIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyImageAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyImageAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyImageAttributeOutput, error) {
	var output ec2.ModifyImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyInstanceAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyInstanceAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceAttributeOutput, error) {
	var output ec2.ModifyInstanceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyInstanceCapacityReservationAttributesFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyInstanceCapacityReservationAttributesFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
	var output ec2.ModifyInstanceCapacityReservationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyInstanceCreditSpecificationFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyInstanceCreditSpecificationFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
	var output ec2.ModifyInstanceCreditSpecificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyInstanceEventStartTimeFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyInstanceEventStartTimeFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
	var output ec2.ModifyInstanceEventStartTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyInstanceMetadataOptionsFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyInstanceMetadataOptionsFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
	var output ec2.ModifyInstanceMetadataOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyInstancePlacementFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyInstancePlacementFuture) Get(ctx workflow.Context) (*ec2.ModifyInstancePlacementOutput, error) {
	var output ec2.ModifyInstancePlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyLaunchTemplateFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyLaunchTemplateFuture) Get(ctx workflow.Context) (*ec2.ModifyLaunchTemplateOutput, error) {
	var output ec2.ModifyLaunchTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyManagedPrefixListFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyManagedPrefixListFuture) Get(ctx workflow.Context) (*ec2.ModifyManagedPrefixListOutput, error) {
	var output ec2.ModifyManagedPrefixListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyNetworkInterfaceAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyNetworkInterfaceAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	var output ec2.ModifyNetworkInterfaceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyReservedInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyReservedInstancesFuture) Get(ctx workflow.Context) (*ec2.ModifyReservedInstancesOutput, error) {
	var output ec2.ModifyReservedInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifySnapshotAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ModifySnapshotAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifySnapshotAttributeOutput, error) {
	var output ec2.ModifySnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifySubnetAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ModifySubnetAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifySubnetAttributeOutput, error) {
	var output ec2.ModifySubnetAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyTrafficMirrorFilterNetworkServicesFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyTrafficMirrorFilterNetworkServicesFuture) Get(ctx workflow.Context) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
	var output ec2.ModifyTrafficMirrorFilterNetworkServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyTrafficMirrorFilterRuleFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyTrafficMirrorFilterRuleFuture) Get(ctx workflow.Context) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
	var output ec2.ModifyTrafficMirrorFilterRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyTrafficMirrorSessionFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyTrafficMirrorSessionFuture) Get(ctx workflow.Context) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
	var output ec2.ModifyTrafficMirrorSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyTransitGatewayFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyTransitGatewayFuture) Get(ctx workflow.Context) (*ec2.ModifyTransitGatewayOutput, error) {
	var output ec2.ModifyTransitGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyTransitGatewayPrefixListReferenceFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyTransitGatewayPrefixListReferenceFuture) Get(ctx workflow.Context) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.ModifyTransitGatewayPrefixListReferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyTransitGatewayVpcAttachmentFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.ModifyTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVolumeFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVolumeFuture) Get(ctx workflow.Context) (*ec2.ModifyVolumeOutput, error) {
	var output ec2.ModifyVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVolumeAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVolumeAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyVolumeAttributeOutput, error) {
	var output ec2.ModifyVolumeAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVpcAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVpcAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcAttributeOutput, error) {
	var output ec2.ModifyVpcAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVpcEndpointFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVpcEndpointFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcEndpointOutput, error) {
	var output ec2.ModifyVpcEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVpcEndpointConnectionNotificationFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVpcEndpointConnectionNotificationFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
	var output ec2.ModifyVpcEndpointConnectionNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVpcEndpointServiceConfigurationFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVpcEndpointServiceConfigurationFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
	var output ec2.ModifyVpcEndpointServiceConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVpcEndpointServicePermissionsFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVpcEndpointServicePermissionsFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	var output ec2.ModifyVpcEndpointServicePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVpcPeeringConnectionOptionsFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVpcPeeringConnectionOptionsFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	var output ec2.ModifyVpcPeeringConnectionOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVpcTenancyFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVpcTenancyFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcTenancyOutput, error) {
	var output ec2.ModifyVpcTenancyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVpnConnectionFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVpnConnectionFuture) Get(ctx workflow.Context) (*ec2.ModifyVpnConnectionOutput, error) {
	var output ec2.ModifyVpnConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVpnConnectionOptionsFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVpnConnectionOptionsFuture) Get(ctx workflow.Context) (*ec2.ModifyVpnConnectionOptionsOutput, error) {
	var output ec2.ModifyVpnConnectionOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVpnTunnelCertificateFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVpnTunnelCertificateFuture) Get(ctx workflow.Context) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
	var output ec2.ModifyVpnTunnelCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ModifyVpnTunnelOptionsFuture struct {
	Future workflow.Future
}

func (r *EC2ModifyVpnTunnelOptionsFuture) Get(ctx workflow.Context) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
	var output ec2.ModifyVpnTunnelOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2MonitorInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2MonitorInstancesFuture) Get(ctx workflow.Context) (*ec2.MonitorInstancesOutput, error) {
	var output ec2.MonitorInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2MoveAddressToVpcFuture struct {
	Future workflow.Future
}

func (r *EC2MoveAddressToVpcFuture) Get(ctx workflow.Context) (*ec2.MoveAddressToVpcOutput, error) {
	var output ec2.MoveAddressToVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ProvisionByoipCidrFuture struct {
	Future workflow.Future
}

func (r *EC2ProvisionByoipCidrFuture) Get(ctx workflow.Context) (*ec2.ProvisionByoipCidrOutput, error) {
	var output ec2.ProvisionByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2PurchaseHostReservationFuture struct {
	Future workflow.Future
}

func (r *EC2PurchaseHostReservationFuture) Get(ctx workflow.Context) (*ec2.PurchaseHostReservationOutput, error) {
	var output ec2.PurchaseHostReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2PurchaseReservedInstancesOfferingFuture struct {
	Future workflow.Future
}

func (r *EC2PurchaseReservedInstancesOfferingFuture) Get(ctx workflow.Context) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	var output ec2.PurchaseReservedInstancesOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2PurchaseScheduledInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2PurchaseScheduledInstancesFuture) Get(ctx workflow.Context) (*ec2.PurchaseScheduledInstancesOutput, error) {
	var output ec2.PurchaseScheduledInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RebootInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2RebootInstancesFuture) Get(ctx workflow.Context) (*ec2.RebootInstancesOutput, error) {
	var output ec2.RebootInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RegisterImageFuture struct {
	Future workflow.Future
}

func (r *EC2RegisterImageFuture) Get(ctx workflow.Context) (*ec2.RegisterImageOutput, error) {
	var output ec2.RegisterImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RegisterInstanceEventNotificationAttributesFuture struct {
	Future workflow.Future
}

func (r *EC2RegisterInstanceEventNotificationAttributesFuture) Get(ctx workflow.Context) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error) {
	var output ec2.RegisterInstanceEventNotificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RegisterTransitGatewayMulticastGroupMembersFuture struct {
	Future workflow.Future
}

func (r *EC2RegisterTransitGatewayMulticastGroupMembersFuture) Get(ctx workflow.Context) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
	var output ec2.RegisterTransitGatewayMulticastGroupMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RegisterTransitGatewayMulticastGroupSourcesFuture struct {
	Future workflow.Future
}

func (r *EC2RegisterTransitGatewayMulticastGroupSourcesFuture) Get(ctx workflow.Context) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
	var output ec2.RegisterTransitGatewayMulticastGroupSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RejectTransitGatewayPeeringAttachmentFuture struct {
	Future workflow.Future
}

func (r *EC2RejectTransitGatewayPeeringAttachmentFuture) Get(ctx workflow.Context) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.RejectTransitGatewayPeeringAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RejectTransitGatewayVpcAttachmentFuture struct {
	Future workflow.Future
}

func (r *EC2RejectTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.RejectTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RejectVpcEndpointConnectionsFuture struct {
	Future workflow.Future
}

func (r *EC2RejectVpcEndpointConnectionsFuture) Get(ctx workflow.Context) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
	var output ec2.RejectVpcEndpointConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RejectVpcPeeringConnectionFuture struct {
	Future workflow.Future
}

func (r *EC2RejectVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	var output ec2.RejectVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ReleaseAddressFuture struct {
	Future workflow.Future
}

func (r *EC2ReleaseAddressFuture) Get(ctx workflow.Context) (*ec2.ReleaseAddressOutput, error) {
	var output ec2.ReleaseAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ReleaseHostsFuture struct {
	Future workflow.Future
}

func (r *EC2ReleaseHostsFuture) Get(ctx workflow.Context) (*ec2.ReleaseHostsOutput, error) {
	var output ec2.ReleaseHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ReplaceIamInstanceProfileAssociationFuture struct {
	Future workflow.Future
}

func (r *EC2ReplaceIamInstanceProfileAssociationFuture) Get(ctx workflow.Context) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	var output ec2.ReplaceIamInstanceProfileAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ReplaceNetworkAclAssociationFuture struct {
	Future workflow.Future
}

func (r *EC2ReplaceNetworkAclAssociationFuture) Get(ctx workflow.Context) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	var output ec2.ReplaceNetworkAclAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ReplaceNetworkAclEntryFuture struct {
	Future workflow.Future
}

func (r *EC2ReplaceNetworkAclEntryFuture) Get(ctx workflow.Context) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	var output ec2.ReplaceNetworkAclEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ReplaceRouteFuture struct {
	Future workflow.Future
}

func (r *EC2ReplaceRouteFuture) Get(ctx workflow.Context) (*ec2.ReplaceRouteOutput, error) {
	var output ec2.ReplaceRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ReplaceRouteTableAssociationFuture struct {
	Future workflow.Future
}

func (r *EC2ReplaceRouteTableAssociationFuture) Get(ctx workflow.Context) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	var output ec2.ReplaceRouteTableAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ReplaceTransitGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *EC2ReplaceTransitGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
	var output ec2.ReplaceTransitGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ReportInstanceStatusFuture struct {
	Future workflow.Future
}

func (r *EC2ReportInstanceStatusFuture) Get(ctx workflow.Context) (*ec2.ReportInstanceStatusOutput, error) {
	var output ec2.ReportInstanceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RequestSpotFleetFuture struct {
	Future workflow.Future
}

func (r *EC2RequestSpotFleetFuture) Get(ctx workflow.Context) (*ec2.RequestSpotFleetOutput, error) {
	var output ec2.RequestSpotFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RequestSpotInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2RequestSpotInstancesFuture) Get(ctx workflow.Context) (*ec2.RequestSpotInstancesOutput, error) {
	var output ec2.RequestSpotInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ResetEbsDefaultKmsKeyIdFuture struct {
	Future workflow.Future
}

func (r *EC2ResetEbsDefaultKmsKeyIdFuture) Get(ctx workflow.Context) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.ResetEbsDefaultKmsKeyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ResetFpgaImageAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ResetFpgaImageAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetFpgaImageAttributeOutput, error) {
	var output ec2.ResetFpgaImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ResetImageAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ResetImageAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetImageAttributeOutput, error) {
	var output ec2.ResetImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ResetInstanceAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ResetInstanceAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetInstanceAttributeOutput, error) {
	var output ec2.ResetInstanceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ResetNetworkInterfaceAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ResetNetworkInterfaceAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	var output ec2.ResetNetworkInterfaceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2ResetSnapshotAttributeFuture struct {
	Future workflow.Future
}

func (r *EC2ResetSnapshotAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetSnapshotAttributeOutput, error) {
	var output ec2.ResetSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RestoreAddressToClassicFuture struct {
	Future workflow.Future
}

func (r *EC2RestoreAddressToClassicFuture) Get(ctx workflow.Context) (*ec2.RestoreAddressToClassicOutput, error) {
	var output ec2.RestoreAddressToClassicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RestoreManagedPrefixListVersionFuture struct {
	Future workflow.Future
}

func (r *EC2RestoreManagedPrefixListVersionFuture) Get(ctx workflow.Context) (*ec2.RestoreManagedPrefixListVersionOutput, error) {
	var output ec2.RestoreManagedPrefixListVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RevokeClientVpnIngressFuture struct {
	Future workflow.Future
}

func (r *EC2RevokeClientVpnIngressFuture) Get(ctx workflow.Context) (*ec2.RevokeClientVpnIngressOutput, error) {
	var output ec2.RevokeClientVpnIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RevokeSecurityGroupEgressFuture struct {
	Future workflow.Future
}

func (r *EC2RevokeSecurityGroupEgressFuture) Get(ctx workflow.Context) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	var output ec2.RevokeSecurityGroupEgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RevokeSecurityGroupIngressFuture struct {
	Future workflow.Future
}

func (r *EC2RevokeSecurityGroupIngressFuture) Get(ctx workflow.Context) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	var output ec2.RevokeSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RunInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2RunInstancesFuture) Get(ctx workflow.Context) (*ec2.Reservation, error) {
	var output ec2.Reservation
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2RunScheduledInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2RunScheduledInstancesFuture) Get(ctx workflow.Context) (*ec2.RunScheduledInstancesOutput, error) {
	var output ec2.RunScheduledInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2SearchLocalGatewayRoutesFuture struct {
	Future workflow.Future
}

func (r *EC2SearchLocalGatewayRoutesFuture) Get(ctx workflow.Context) (*ec2.SearchLocalGatewayRoutesOutput, error) {
	var output ec2.SearchLocalGatewayRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2SearchTransitGatewayMulticastGroupsFuture struct {
	Future workflow.Future
}

func (r *EC2SearchTransitGatewayMulticastGroupsFuture) Get(ctx workflow.Context) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
	var output ec2.SearchTransitGatewayMulticastGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2SearchTransitGatewayRoutesFuture struct {
	Future workflow.Future
}

func (r *EC2SearchTransitGatewayRoutesFuture) Get(ctx workflow.Context) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	var output ec2.SearchTransitGatewayRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2SendDiagnosticInterruptFuture struct {
	Future workflow.Future
}

func (r *EC2SendDiagnosticInterruptFuture) Get(ctx workflow.Context) (*ec2.SendDiagnosticInterruptOutput, error) {
	var output ec2.SendDiagnosticInterruptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2StartInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2StartInstancesFuture) Get(ctx workflow.Context) (*ec2.StartInstancesOutput, error) {
	var output ec2.StartInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2StartVpcEndpointServicePrivateDnsVerificationFuture struct {
	Future workflow.Future
}

func (r *EC2StartVpcEndpointServicePrivateDnsVerificationFuture) Get(ctx workflow.Context) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
	var output ec2.StartVpcEndpointServicePrivateDnsVerificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2StopInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2StopInstancesFuture) Get(ctx workflow.Context) (*ec2.StopInstancesOutput, error) {
	var output ec2.StopInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2TerminateClientVpnConnectionsFuture struct {
	Future workflow.Future
}

func (r *EC2TerminateClientVpnConnectionsFuture) Get(ctx workflow.Context) (*ec2.TerminateClientVpnConnectionsOutput, error) {
	var output ec2.TerminateClientVpnConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2TerminateInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2TerminateInstancesFuture) Get(ctx workflow.Context) (*ec2.TerminateInstancesOutput, error) {
	var output ec2.TerminateInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2UnassignIpv6AddressesFuture struct {
	Future workflow.Future
}

func (r *EC2UnassignIpv6AddressesFuture) Get(ctx workflow.Context) (*ec2.UnassignIpv6AddressesOutput, error) {
	var output ec2.UnassignIpv6AddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2UnassignPrivateIpAddressesFuture struct {
	Future workflow.Future
}

func (r *EC2UnassignPrivateIpAddressesFuture) Get(ctx workflow.Context) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	var output ec2.UnassignPrivateIpAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2UnmonitorInstancesFuture struct {
	Future workflow.Future
}

func (r *EC2UnmonitorInstancesFuture) Get(ctx workflow.Context) (*ec2.UnmonitorInstancesOutput, error) {
	var output ec2.UnmonitorInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2UpdateSecurityGroupRuleDescriptionsEgressFuture struct {
	Future workflow.Future
}

func (r *EC2UpdateSecurityGroupRuleDescriptionsEgressFuture) Get(ctx workflow.Context) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	var output ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2UpdateSecurityGroupRuleDescriptionsIngressFuture struct {
	Future workflow.Future
}

func (r *EC2UpdateSecurityGroupRuleDescriptionsIngressFuture) Get(ctx workflow.Context) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	var output ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EC2WithdrawByoipCidrFuture struct {
	Future workflow.Future
}

func (r *EC2WithdrawByoipCidrFuture) Get(ctx workflow.Context) (*ec2.WithdrawByoipCidrOutput, error) {
	var output ec2.WithdrawByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AcceptReservedInstancesExchangeQuote(ctx workflow.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	var output ec2.AcceptReservedInstancesExchangeQuoteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptReservedInstancesExchangeQuote", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AcceptReservedInstancesExchangeQuoteAsync(ctx workflow.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput) *EC2AcceptReservedInstancesExchangeQuoteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptReservedInstancesExchangeQuote", input)
	return &EC2AcceptReservedInstancesExchangeQuoteFuture{Future: future}
}

func (a *EC2Stub) AcceptTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.AcceptTransitGatewayPeeringAttachmentInput) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.AcceptTransitGatewayPeeringAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptTransitGatewayPeeringAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AcceptTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.AcceptTransitGatewayPeeringAttachmentInput) *EC2AcceptTransitGatewayPeeringAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptTransitGatewayPeeringAttachment", input)
	return &EC2AcceptTransitGatewayPeeringAttachmentFuture{Future: future}
}

func (a *EC2Stub) AcceptTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.AcceptTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AcceptTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.AcceptTransitGatewayVpcAttachmentInput) *EC2AcceptTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptTransitGatewayVpcAttachment", input)
	return &EC2AcceptTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *EC2Stub) AcceptVpcEndpointConnections(ctx workflow.Context, input *ec2.AcceptVpcEndpointConnectionsInput) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
	var output ec2.AcceptVpcEndpointConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptVpcEndpointConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AcceptVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.AcceptVpcEndpointConnectionsInput) *EC2AcceptVpcEndpointConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptVpcEndpointConnections", input)
	return &EC2AcceptVpcEndpointConnectionsFuture{Future: future}
}

func (a *EC2Stub) AcceptVpcPeeringConnection(ctx workflow.Context, input *ec2.AcceptVpcPeeringConnectionInput) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	var output ec2.AcceptVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AcceptVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.AcceptVpcPeeringConnectionInput) *EC2AcceptVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptVpcPeeringConnection", input)
	return &EC2AcceptVpcPeeringConnectionFuture{Future: future}
}

func (a *EC2Stub) AdvertiseByoipCidr(ctx workflow.Context, input *ec2.AdvertiseByoipCidrInput) (*ec2.AdvertiseByoipCidrOutput, error) {
	var output ec2.AdvertiseByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AdvertiseByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AdvertiseByoipCidrAsync(ctx workflow.Context, input *ec2.AdvertiseByoipCidrInput) *EC2AdvertiseByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AdvertiseByoipCidr", input)
	return &EC2AdvertiseByoipCidrFuture{Future: future}
}

func (a *EC2Stub) AllocateAddress(ctx workflow.Context, input *ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error) {
	var output ec2.AllocateAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AllocateAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AllocateAddressAsync(ctx workflow.Context, input *ec2.AllocateAddressInput) *EC2AllocateAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AllocateAddress", input)
	return &EC2AllocateAddressFuture{Future: future}
}

func (a *EC2Stub) AllocateHosts(ctx workflow.Context, input *ec2.AllocateHostsInput) (*ec2.AllocateHostsOutput, error) {
	var output ec2.AllocateHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AllocateHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AllocateHostsAsync(ctx workflow.Context, input *ec2.AllocateHostsInput) *EC2AllocateHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AllocateHosts", input)
	return &EC2AllocateHostsFuture{Future: future}
}

func (a *EC2Stub) ApplySecurityGroupsToClientVpnTargetNetwork(ctx workflow.Context, input *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
	var output ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ApplySecurityGroupsToClientVpnTargetNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ApplySecurityGroupsToClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) *EC2ApplySecurityGroupsToClientVpnTargetNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ApplySecurityGroupsToClientVpnTargetNetwork", input)
	return &EC2ApplySecurityGroupsToClientVpnTargetNetworkFuture{Future: future}
}

func (a *EC2Stub) AssignIpv6Addresses(ctx workflow.Context, input *ec2.AssignIpv6AddressesInput) (*ec2.AssignIpv6AddressesOutput, error) {
	var output ec2.AssignIpv6AddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssignIpv6Addresses", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssignIpv6AddressesAsync(ctx workflow.Context, input *ec2.AssignIpv6AddressesInput) *EC2AssignIpv6AddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssignIpv6Addresses", input)
	return &EC2AssignIpv6AddressesFuture{Future: future}
}

func (a *EC2Stub) AssignPrivateIpAddresses(ctx workflow.Context, input *ec2.AssignPrivateIpAddressesInput) (*ec2.AssignPrivateIpAddressesOutput, error) {
	var output ec2.AssignPrivateIpAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssignPrivateIpAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssignPrivateIpAddressesAsync(ctx workflow.Context, input *ec2.AssignPrivateIpAddressesInput) *EC2AssignPrivateIpAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssignPrivateIpAddresses", input)
	return &EC2AssignPrivateIpAddressesFuture{Future: future}
}

func (a *EC2Stub) AssociateAddress(ctx workflow.Context, input *ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error) {
	var output ec2.AssociateAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateAddressAsync(ctx workflow.Context, input *ec2.AssociateAddressInput) *EC2AssociateAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateAddress", input)
	return &EC2AssociateAddressFuture{Future: future}
}

func (a *EC2Stub) AssociateClientVpnTargetNetwork(ctx workflow.Context, input *ec2.AssociateClientVpnTargetNetworkInput) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
	var output ec2.AssociateClientVpnTargetNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateClientVpnTargetNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.AssociateClientVpnTargetNetworkInput) *EC2AssociateClientVpnTargetNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateClientVpnTargetNetwork", input)
	return &EC2AssociateClientVpnTargetNetworkFuture{Future: future}
}

func (a *EC2Stub) AssociateDhcpOptions(ctx workflow.Context, input *ec2.AssociateDhcpOptionsInput) (*ec2.AssociateDhcpOptionsOutput, error) {
	var output ec2.AssociateDhcpOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateDhcpOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateDhcpOptionsAsync(ctx workflow.Context, input *ec2.AssociateDhcpOptionsInput) *EC2AssociateDhcpOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateDhcpOptions", input)
	return &EC2AssociateDhcpOptionsFuture{Future: future}
}

func (a *EC2Stub) AssociateIamInstanceProfile(ctx workflow.Context, input *ec2.AssociateIamInstanceProfileInput) (*ec2.AssociateIamInstanceProfileOutput, error) {
	var output ec2.AssociateIamInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateIamInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateIamInstanceProfileAsync(ctx workflow.Context, input *ec2.AssociateIamInstanceProfileInput) *EC2AssociateIamInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateIamInstanceProfile", input)
	return &EC2AssociateIamInstanceProfileFuture{Future: future}
}

func (a *EC2Stub) AssociateRouteTable(ctx workflow.Context, input *ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error) {
	var output ec2.AssociateRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateRouteTableAsync(ctx workflow.Context, input *ec2.AssociateRouteTableInput) *EC2AssociateRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateRouteTable", input)
	return &EC2AssociateRouteTableFuture{Future: future}
}

func (a *EC2Stub) AssociateSubnetCidrBlock(ctx workflow.Context, input *ec2.AssociateSubnetCidrBlockInput) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	var output ec2.AssociateSubnetCidrBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateSubnetCidrBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateSubnetCidrBlockAsync(ctx workflow.Context, input *ec2.AssociateSubnetCidrBlockInput) *EC2AssociateSubnetCidrBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateSubnetCidrBlock", input)
	return &EC2AssociateSubnetCidrBlockFuture{Future: future}
}

func (a *EC2Stub) AssociateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.AssociateTransitGatewayMulticastDomainInput) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.AssociateTransitGatewayMulticastDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateTransitGatewayMulticastDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.AssociateTransitGatewayMulticastDomainInput) *EC2AssociateTransitGatewayMulticastDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateTransitGatewayMulticastDomain", input)
	return &EC2AssociateTransitGatewayMulticastDomainFuture{Future: future}
}

func (a *EC2Stub) AssociateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.AssociateTransitGatewayRouteTableInput) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
	var output ec2.AssociateTransitGatewayRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateTransitGatewayRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.AssociateTransitGatewayRouteTableInput) *EC2AssociateTransitGatewayRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateTransitGatewayRouteTable", input)
	return &EC2AssociateTransitGatewayRouteTableFuture{Future: future}
}

func (a *EC2Stub) AssociateVpcCidrBlock(ctx workflow.Context, input *ec2.AssociateVpcCidrBlockInput) (*ec2.AssociateVpcCidrBlockOutput, error) {
	var output ec2.AssociateVpcCidrBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateVpcCidrBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateVpcCidrBlockAsync(ctx workflow.Context, input *ec2.AssociateVpcCidrBlockInput) *EC2AssociateVpcCidrBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateVpcCidrBlock", input)
	return &EC2AssociateVpcCidrBlockFuture{Future: future}
}

func (a *EC2Stub) AttachClassicLinkVpc(ctx workflow.Context, input *ec2.AttachClassicLinkVpcInput) (*ec2.AttachClassicLinkVpcOutput, error) {
	var output ec2.AttachClassicLinkVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AttachClassicLinkVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AttachClassicLinkVpcAsync(ctx workflow.Context, input *ec2.AttachClassicLinkVpcInput) *EC2AttachClassicLinkVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AttachClassicLinkVpc", input)
	return &EC2AttachClassicLinkVpcFuture{Future: future}
}

func (a *EC2Stub) AttachInternetGateway(ctx workflow.Context, input *ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error) {
	var output ec2.AttachInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AttachInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AttachInternetGatewayAsync(ctx workflow.Context, input *ec2.AttachInternetGatewayInput) *EC2AttachInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AttachInternetGateway", input)
	return &EC2AttachInternetGatewayFuture{Future: future}
}

func (a *EC2Stub) AttachNetworkInterface(ctx workflow.Context, input *ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error) {
	var output ec2.AttachNetworkInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AttachNetworkInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AttachNetworkInterfaceAsync(ctx workflow.Context, input *ec2.AttachNetworkInterfaceInput) *EC2AttachNetworkInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AttachNetworkInterface", input)
	return &EC2AttachNetworkInterfaceFuture{Future: future}
}

func (a *EC2Stub) AttachVolume(ctx workflow.Context, input *ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error) {
	var output ec2.VolumeAttachment
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AttachVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AttachVolumeAsync(ctx workflow.Context, input *ec2.AttachVolumeInput) *EC2AttachVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AttachVolume", input)
	return &EC2AttachVolumeFuture{Future: future}
}

func (a *EC2Stub) AttachVpnGateway(ctx workflow.Context, input *ec2.AttachVpnGatewayInput) (*ec2.AttachVpnGatewayOutput, error) {
	var output ec2.AttachVpnGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AttachVpnGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AttachVpnGatewayAsync(ctx workflow.Context, input *ec2.AttachVpnGatewayInput) *EC2AttachVpnGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AttachVpnGateway", input)
	return &EC2AttachVpnGatewayFuture{Future: future}
}

func (a *EC2Stub) AuthorizeClientVpnIngress(ctx workflow.Context, input *ec2.AuthorizeClientVpnIngressInput) (*ec2.AuthorizeClientVpnIngressOutput, error) {
	var output ec2.AuthorizeClientVpnIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AuthorizeClientVpnIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AuthorizeClientVpnIngressAsync(ctx workflow.Context, input *ec2.AuthorizeClientVpnIngressInput) *EC2AuthorizeClientVpnIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AuthorizeClientVpnIngress", input)
	return &EC2AuthorizeClientVpnIngressFuture{Future: future}
}

func (a *EC2Stub) AuthorizeSecurityGroupEgress(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	var output ec2.AuthorizeSecurityGroupEgressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AuthorizeSecurityGroupEgress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AuthorizeSecurityGroupEgressAsync(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupEgressInput) *EC2AuthorizeSecurityGroupEgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AuthorizeSecurityGroupEgress", input)
	return &EC2AuthorizeSecurityGroupEgressFuture{Future: future}
}

func (a *EC2Stub) AuthorizeSecurityGroupIngress(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	var output ec2.AuthorizeSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AuthorizeSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AuthorizeSecurityGroupIngressAsync(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupIngressInput) *EC2AuthorizeSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AuthorizeSecurityGroupIngress", input)
	return &EC2AuthorizeSecurityGroupIngressFuture{Future: future}
}

func (a *EC2Stub) BundleInstance(ctx workflow.Context, input *ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error) {
	var output ec2.BundleInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.BundleInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) BundleInstanceAsync(ctx workflow.Context, input *ec2.BundleInstanceInput) *EC2BundleInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.BundleInstance", input)
	return &EC2BundleInstanceFuture{Future: future}
}

func (a *EC2Stub) CancelBundleTask(ctx workflow.Context, input *ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error) {
	var output ec2.CancelBundleTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelBundleTask", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelBundleTaskAsync(ctx workflow.Context, input *ec2.CancelBundleTaskInput) *EC2CancelBundleTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelBundleTask", input)
	return &EC2CancelBundleTaskFuture{Future: future}
}

func (a *EC2Stub) CancelCapacityReservation(ctx workflow.Context, input *ec2.CancelCapacityReservationInput) (*ec2.CancelCapacityReservationOutput, error) {
	var output ec2.CancelCapacityReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelCapacityReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelCapacityReservationAsync(ctx workflow.Context, input *ec2.CancelCapacityReservationInput) *EC2CancelCapacityReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelCapacityReservation", input)
	return &EC2CancelCapacityReservationFuture{Future: future}
}

func (a *EC2Stub) CancelConversionTask(ctx workflow.Context, input *ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error) {
	var output ec2.CancelConversionTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelConversionTask", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelConversionTaskAsync(ctx workflow.Context, input *ec2.CancelConversionTaskInput) *EC2CancelConversionTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelConversionTask", input)
	return &EC2CancelConversionTaskFuture{Future: future}
}

func (a *EC2Stub) CancelExportTask(ctx workflow.Context, input *ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error) {
	var output ec2.CancelExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelExportTaskAsync(ctx workflow.Context, input *ec2.CancelExportTaskInput) *EC2CancelExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelExportTask", input)
	return &EC2CancelExportTaskFuture{Future: future}
}

func (a *EC2Stub) CancelImportTask(ctx workflow.Context, input *ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error) {
	var output ec2.CancelImportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelImportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelImportTaskAsync(ctx workflow.Context, input *ec2.CancelImportTaskInput) *EC2CancelImportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelImportTask", input)
	return &EC2CancelImportTaskFuture{Future: future}
}

func (a *EC2Stub) CancelReservedInstancesListing(ctx workflow.Context, input *ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error) {
	var output ec2.CancelReservedInstancesListingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelReservedInstancesListing", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelReservedInstancesListingAsync(ctx workflow.Context, input *ec2.CancelReservedInstancesListingInput) *EC2CancelReservedInstancesListingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelReservedInstancesListing", input)
	return &EC2CancelReservedInstancesListingFuture{Future: future}
}

func (a *EC2Stub) CancelSpotFleetRequests(ctx workflow.Context, input *ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error) {
	var output ec2.CancelSpotFleetRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelSpotFleetRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelSpotFleetRequestsAsync(ctx workflow.Context, input *ec2.CancelSpotFleetRequestsInput) *EC2CancelSpotFleetRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelSpotFleetRequests", input)
	return &EC2CancelSpotFleetRequestsFuture{Future: future}
}

func (a *EC2Stub) CancelSpotInstanceRequests(ctx workflow.Context, input *ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	var output ec2.CancelSpotInstanceRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelSpotInstanceRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelSpotInstanceRequestsAsync(ctx workflow.Context, input *ec2.CancelSpotInstanceRequestsInput) *EC2CancelSpotInstanceRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelSpotInstanceRequests", input)
	return &EC2CancelSpotInstanceRequestsFuture{Future: future}
}

func (a *EC2Stub) ConfirmProductInstance(ctx workflow.Context, input *ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error) {
	var output ec2.ConfirmProductInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ConfirmProductInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ConfirmProductInstanceAsync(ctx workflow.Context, input *ec2.ConfirmProductInstanceInput) *EC2ConfirmProductInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ConfirmProductInstance", input)
	return &EC2ConfirmProductInstanceFuture{Future: future}
}

func (a *EC2Stub) CopyFpgaImage(ctx workflow.Context, input *ec2.CopyFpgaImageInput) (*ec2.CopyFpgaImageOutput, error) {
	var output ec2.CopyFpgaImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CopyFpgaImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CopyFpgaImageAsync(ctx workflow.Context, input *ec2.CopyFpgaImageInput) *EC2CopyFpgaImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CopyFpgaImage", input)
	return &EC2CopyFpgaImageFuture{Future: future}
}

func (a *EC2Stub) CopyImage(ctx workflow.Context, input *ec2.CopyImageInput) (*ec2.CopyImageOutput, error) {
	var output ec2.CopyImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CopyImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CopyImageAsync(ctx workflow.Context, input *ec2.CopyImageInput) *EC2CopyImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CopyImage", input)
	return &EC2CopyImageFuture{Future: future}
}

func (a *EC2Stub) CopySnapshot(ctx workflow.Context, input *ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error) {
	var output ec2.CopySnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CopySnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CopySnapshotAsync(ctx workflow.Context, input *ec2.CopySnapshotInput) *EC2CopySnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CopySnapshot", input)
	return &EC2CopySnapshotFuture{Future: future}
}

func (a *EC2Stub) CreateCapacityReservation(ctx workflow.Context, input *ec2.CreateCapacityReservationInput) (*ec2.CreateCapacityReservationOutput, error) {
	var output ec2.CreateCapacityReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateCapacityReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateCapacityReservationAsync(ctx workflow.Context, input *ec2.CreateCapacityReservationInput) *EC2CreateCapacityReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateCapacityReservation", input)
	return &EC2CreateCapacityReservationFuture{Future: future}
}

func (a *EC2Stub) CreateCarrierGateway(ctx workflow.Context, input *ec2.CreateCarrierGatewayInput) (*ec2.CreateCarrierGatewayOutput, error) {
	var output ec2.CreateCarrierGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateCarrierGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateCarrierGatewayAsync(ctx workflow.Context, input *ec2.CreateCarrierGatewayInput) *EC2CreateCarrierGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateCarrierGateway", input)
	return &EC2CreateCarrierGatewayFuture{Future: future}
}

func (a *EC2Stub) CreateClientVpnEndpoint(ctx workflow.Context, input *ec2.CreateClientVpnEndpointInput) (*ec2.CreateClientVpnEndpointOutput, error) {
	var output ec2.CreateClientVpnEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateClientVpnEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateClientVpnEndpointAsync(ctx workflow.Context, input *ec2.CreateClientVpnEndpointInput) *EC2CreateClientVpnEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateClientVpnEndpoint", input)
	return &EC2CreateClientVpnEndpointFuture{Future: future}
}

func (a *EC2Stub) CreateClientVpnRoute(ctx workflow.Context, input *ec2.CreateClientVpnRouteInput) (*ec2.CreateClientVpnRouteOutput, error) {
	var output ec2.CreateClientVpnRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateClientVpnRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateClientVpnRouteAsync(ctx workflow.Context, input *ec2.CreateClientVpnRouteInput) *EC2CreateClientVpnRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateClientVpnRoute", input)
	return &EC2CreateClientVpnRouteFuture{Future: future}
}

func (a *EC2Stub) CreateCustomerGateway(ctx workflow.Context, input *ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error) {
	var output ec2.CreateCustomerGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateCustomerGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateCustomerGatewayAsync(ctx workflow.Context, input *ec2.CreateCustomerGatewayInput) *EC2CreateCustomerGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateCustomerGateway", input)
	return &EC2CreateCustomerGatewayFuture{Future: future}
}

func (a *EC2Stub) CreateDefaultSubnet(ctx workflow.Context, input *ec2.CreateDefaultSubnetInput) (*ec2.CreateDefaultSubnetOutput, error) {
	var output ec2.CreateDefaultSubnetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateDefaultSubnet", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateDefaultSubnetAsync(ctx workflow.Context, input *ec2.CreateDefaultSubnetInput) *EC2CreateDefaultSubnetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateDefaultSubnet", input)
	return &EC2CreateDefaultSubnetFuture{Future: future}
}

func (a *EC2Stub) CreateDefaultVpc(ctx workflow.Context, input *ec2.CreateDefaultVpcInput) (*ec2.CreateDefaultVpcOutput, error) {
	var output ec2.CreateDefaultVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateDefaultVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateDefaultVpcAsync(ctx workflow.Context, input *ec2.CreateDefaultVpcInput) *EC2CreateDefaultVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateDefaultVpc", input)
	return &EC2CreateDefaultVpcFuture{Future: future}
}

func (a *EC2Stub) CreateDhcpOptions(ctx workflow.Context, input *ec2.CreateDhcpOptionsInput) (*ec2.CreateDhcpOptionsOutput, error) {
	var output ec2.CreateDhcpOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateDhcpOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateDhcpOptionsAsync(ctx workflow.Context, input *ec2.CreateDhcpOptionsInput) *EC2CreateDhcpOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateDhcpOptions", input)
	return &EC2CreateDhcpOptionsFuture{Future: future}
}

func (a *EC2Stub) CreateEgressOnlyInternetGateway(ctx workflow.Context, input *ec2.CreateEgressOnlyInternetGatewayInput) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	var output ec2.CreateEgressOnlyInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateEgressOnlyInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateEgressOnlyInternetGatewayAsync(ctx workflow.Context, input *ec2.CreateEgressOnlyInternetGatewayInput) *EC2CreateEgressOnlyInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateEgressOnlyInternetGateway", input)
	return &EC2CreateEgressOnlyInternetGatewayFuture{Future: future}
}

func (a *EC2Stub) CreateFleet(ctx workflow.Context, input *ec2.CreateFleetInput) (*ec2.CreateFleetOutput, error) {
	var output ec2.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateFleetAsync(ctx workflow.Context, input *ec2.CreateFleetInput) *EC2CreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateFleet", input)
	return &EC2CreateFleetFuture{Future: future}
}

func (a *EC2Stub) CreateFlowLogs(ctx workflow.Context, input *ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error) {
	var output ec2.CreateFlowLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateFlowLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateFlowLogsAsync(ctx workflow.Context, input *ec2.CreateFlowLogsInput) *EC2CreateFlowLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateFlowLogs", input)
	return &EC2CreateFlowLogsFuture{Future: future}
}

func (a *EC2Stub) CreateFpgaImage(ctx workflow.Context, input *ec2.CreateFpgaImageInput) (*ec2.CreateFpgaImageOutput, error) {
	var output ec2.CreateFpgaImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateFpgaImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateFpgaImageAsync(ctx workflow.Context, input *ec2.CreateFpgaImageInput) *EC2CreateFpgaImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateFpgaImage", input)
	return &EC2CreateFpgaImageFuture{Future: future}
}

func (a *EC2Stub) CreateImage(ctx workflow.Context, input *ec2.CreateImageInput) (*ec2.CreateImageOutput, error) {
	var output ec2.CreateImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateImageAsync(ctx workflow.Context, input *ec2.CreateImageInput) *EC2CreateImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateImage", input)
	return &EC2CreateImageFuture{Future: future}
}

func (a *EC2Stub) CreateInstanceExportTask(ctx workflow.Context, input *ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error) {
	var output ec2.CreateInstanceExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateInstanceExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateInstanceExportTaskAsync(ctx workflow.Context, input *ec2.CreateInstanceExportTaskInput) *EC2CreateInstanceExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateInstanceExportTask", input)
	return &EC2CreateInstanceExportTaskFuture{Future: future}
}

func (a *EC2Stub) CreateInternetGateway(ctx workflow.Context, input *ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error) {
	var output ec2.CreateInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateInternetGatewayAsync(ctx workflow.Context, input *ec2.CreateInternetGatewayInput) *EC2CreateInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateInternetGateway", input)
	return &EC2CreateInternetGatewayFuture{Future: future}
}

func (a *EC2Stub) CreateKeyPair(ctx workflow.Context, input *ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error) {
	var output ec2.CreateKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateKeyPairAsync(ctx workflow.Context, input *ec2.CreateKeyPairInput) *EC2CreateKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateKeyPair", input)
	return &EC2CreateKeyPairFuture{Future: future}
}

func (a *EC2Stub) CreateLaunchTemplate(ctx workflow.Context, input *ec2.CreateLaunchTemplateInput) (*ec2.CreateLaunchTemplateOutput, error) {
	var output ec2.CreateLaunchTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLaunchTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateLaunchTemplateAsync(ctx workflow.Context, input *ec2.CreateLaunchTemplateInput) *EC2CreateLaunchTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLaunchTemplate", input)
	return &EC2CreateLaunchTemplateFuture{Future: future}
}

func (a *EC2Stub) CreateLaunchTemplateVersion(ctx workflow.Context, input *ec2.CreateLaunchTemplateVersionInput) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	var output ec2.CreateLaunchTemplateVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLaunchTemplateVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateLaunchTemplateVersionAsync(ctx workflow.Context, input *ec2.CreateLaunchTemplateVersionInput) *EC2CreateLaunchTemplateVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLaunchTemplateVersion", input)
	return &EC2CreateLaunchTemplateVersionFuture{Future: future}
}

func (a *EC2Stub) CreateLocalGatewayRoute(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteInput) (*ec2.CreateLocalGatewayRouteOutput, error) {
	var output ec2.CreateLocalGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLocalGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateLocalGatewayRouteAsync(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteInput) *EC2CreateLocalGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLocalGatewayRoute", input)
	return &EC2CreateLocalGatewayRouteFuture{Future: future}
}

func (a *EC2Stub) CreateLocalGatewayRouteTableVpcAssociation(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
	var output ec2.CreateLocalGatewayRouteTableVpcAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLocalGatewayRouteTableVpcAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateLocalGatewayRouteTableVpcAssociationAsync(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) *EC2CreateLocalGatewayRouteTableVpcAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLocalGatewayRouteTableVpcAssociation", input)
	return &EC2CreateLocalGatewayRouteTableVpcAssociationFuture{Future: future}
}

func (a *EC2Stub) CreateManagedPrefixList(ctx workflow.Context, input *ec2.CreateManagedPrefixListInput) (*ec2.CreateManagedPrefixListOutput, error) {
	var output ec2.CreateManagedPrefixListOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateManagedPrefixList", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateManagedPrefixListAsync(ctx workflow.Context, input *ec2.CreateManagedPrefixListInput) *EC2CreateManagedPrefixListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateManagedPrefixList", input)
	return &EC2CreateManagedPrefixListFuture{Future: future}
}

func (a *EC2Stub) CreateNatGateway(ctx workflow.Context, input *ec2.CreateNatGatewayInput) (*ec2.CreateNatGatewayOutput, error) {
	var output ec2.CreateNatGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNatGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateNatGatewayAsync(ctx workflow.Context, input *ec2.CreateNatGatewayInput) *EC2CreateNatGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNatGateway", input)
	return &EC2CreateNatGatewayFuture{Future: future}
}

func (a *EC2Stub) CreateNetworkAcl(ctx workflow.Context, input *ec2.CreateNetworkAclInput) (*ec2.CreateNetworkAclOutput, error) {
	var output ec2.CreateNetworkAclOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkAcl", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateNetworkAclAsync(ctx workflow.Context, input *ec2.CreateNetworkAclInput) *EC2CreateNetworkAclFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkAcl", input)
	return &EC2CreateNetworkAclFuture{Future: future}
}

func (a *EC2Stub) CreateNetworkAclEntry(ctx workflow.Context, input *ec2.CreateNetworkAclEntryInput) (*ec2.CreateNetworkAclEntryOutput, error) {
	var output ec2.CreateNetworkAclEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkAclEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateNetworkAclEntryAsync(ctx workflow.Context, input *ec2.CreateNetworkAclEntryInput) *EC2CreateNetworkAclEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkAclEntry", input)
	return &EC2CreateNetworkAclEntryFuture{Future: future}
}

func (a *EC2Stub) CreateNetworkInterface(ctx workflow.Context, input *ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error) {
	var output ec2.CreateNetworkInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateNetworkInterfaceAsync(ctx workflow.Context, input *ec2.CreateNetworkInterfaceInput) *EC2CreateNetworkInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkInterface", input)
	return &EC2CreateNetworkInterfaceFuture{Future: future}
}

func (a *EC2Stub) CreateNetworkInterfacePermission(ctx workflow.Context, input *ec2.CreateNetworkInterfacePermissionInput) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	var output ec2.CreateNetworkInterfacePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkInterfacePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateNetworkInterfacePermissionAsync(ctx workflow.Context, input *ec2.CreateNetworkInterfacePermissionInput) *EC2CreateNetworkInterfacePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkInterfacePermission", input)
	return &EC2CreateNetworkInterfacePermissionFuture{Future: future}
}

func (a *EC2Stub) CreatePlacementGroup(ctx workflow.Context, input *ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error) {
	var output ec2.CreatePlacementGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreatePlacementGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreatePlacementGroupAsync(ctx workflow.Context, input *ec2.CreatePlacementGroupInput) *EC2CreatePlacementGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreatePlacementGroup", input)
	return &EC2CreatePlacementGroupFuture{Future: future}
}

func (a *EC2Stub) CreateReservedInstancesListing(ctx workflow.Context, input *ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error) {
	var output ec2.CreateReservedInstancesListingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateReservedInstancesListing", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateReservedInstancesListingAsync(ctx workflow.Context, input *ec2.CreateReservedInstancesListingInput) *EC2CreateReservedInstancesListingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateReservedInstancesListing", input)
	return &EC2CreateReservedInstancesListingFuture{Future: future}
}

func (a *EC2Stub) CreateRoute(ctx workflow.Context, input *ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error) {
	var output ec2.CreateRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateRouteAsync(ctx workflow.Context, input *ec2.CreateRouteInput) *EC2CreateRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateRoute", input)
	return &EC2CreateRouteFuture{Future: future}
}

func (a *EC2Stub) CreateRouteTable(ctx workflow.Context, input *ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error) {
	var output ec2.CreateRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateRouteTableAsync(ctx workflow.Context, input *ec2.CreateRouteTableInput) *EC2CreateRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateRouteTable", input)
	return &EC2CreateRouteTableFuture{Future: future}
}

func (a *EC2Stub) CreateSecurityGroup(ctx workflow.Context, input *ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error) {
	var output ec2.CreateSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateSecurityGroupAsync(ctx workflow.Context, input *ec2.CreateSecurityGroupInput) *EC2CreateSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSecurityGroup", input)
	return &EC2CreateSecurityGroupFuture{Future: future}
}

func (a *EC2Stub) CreateSnapshot(ctx workflow.Context, input *ec2.CreateSnapshotInput) (*ec2.Snapshot, error) {
	var output ec2.Snapshot
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateSnapshotAsync(ctx workflow.Context, input *ec2.CreateSnapshotInput) *EC2CreateSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSnapshot", input)
	return &EC2CreateSnapshotFuture{Future: future}
}

func (a *EC2Stub) CreateSnapshots(ctx workflow.Context, input *ec2.CreateSnapshotsInput) (*ec2.CreateSnapshotsOutput, error) {
	var output ec2.CreateSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateSnapshotsAsync(ctx workflow.Context, input *ec2.CreateSnapshotsInput) *EC2CreateSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSnapshots", input)
	return &EC2CreateSnapshotsFuture{Future: future}
}

func (a *EC2Stub) CreateSpotDatafeedSubscription(ctx workflow.Context, input *ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	var output ec2.CreateSpotDatafeedSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSpotDatafeedSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.CreateSpotDatafeedSubscriptionInput) *EC2CreateSpotDatafeedSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSpotDatafeedSubscription", input)
	return &EC2CreateSpotDatafeedSubscriptionFuture{Future: future}
}

func (a *EC2Stub) CreateSubnet(ctx workflow.Context, input *ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error) {
	var output ec2.CreateSubnetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSubnet", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateSubnetAsync(ctx workflow.Context, input *ec2.CreateSubnetInput) *EC2CreateSubnetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSubnet", input)
	return &EC2CreateSubnetFuture{Future: future}
}

func (a *EC2Stub) CreateTags(ctx workflow.Context, input *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error) {
	var output ec2.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTagsAsync(ctx workflow.Context, input *ec2.CreateTagsInput) *EC2CreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTags", input)
	return &EC2CreateTagsFuture{Future: future}
}

func (a *EC2Stub) CreateTrafficMirrorFilter(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterInput) (*ec2.CreateTrafficMirrorFilterOutput, error) {
	var output ec2.CreateTrafficMirrorFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTrafficMirrorFilterAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterInput) *EC2CreateTrafficMirrorFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorFilter", input)
	return &EC2CreateTrafficMirrorFilterFuture{Future: future}
}

func (a *EC2Stub) CreateTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterRuleInput) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
	var output ec2.CreateTrafficMirrorFilterRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorFilterRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterRuleInput) *EC2CreateTrafficMirrorFilterRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorFilterRule", input)
	return &EC2CreateTrafficMirrorFilterRuleFuture{Future: future}
}

func (a *EC2Stub) CreateTrafficMirrorSession(ctx workflow.Context, input *ec2.CreateTrafficMirrorSessionInput) (*ec2.CreateTrafficMirrorSessionOutput, error) {
	var output ec2.CreateTrafficMirrorSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorSession", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorSessionInput) *EC2CreateTrafficMirrorSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorSession", input)
	return &EC2CreateTrafficMirrorSessionFuture{Future: future}
}

func (a *EC2Stub) CreateTrafficMirrorTarget(ctx workflow.Context, input *ec2.CreateTrafficMirrorTargetInput) (*ec2.CreateTrafficMirrorTargetOutput, error) {
	var output ec2.CreateTrafficMirrorTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTrafficMirrorTargetAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorTargetInput) *EC2CreateTrafficMirrorTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorTarget", input)
	return &EC2CreateTrafficMirrorTargetFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGateway(ctx workflow.Context, input *ec2.CreateTransitGatewayInput) (*ec2.CreateTransitGatewayOutput, error) {
	var output ec2.CreateTransitGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayInput) *EC2CreateTransitGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGateway", input)
	return &EC2CreateTransitGatewayFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.CreateTransitGatewayMulticastDomainInput) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.CreateTransitGatewayMulticastDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayMulticastDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayMulticastDomainInput) *EC2CreateTransitGatewayMulticastDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayMulticastDomain", input)
	return &EC2CreateTransitGatewayMulticastDomainFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.CreateTransitGatewayPeeringAttachmentInput) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.CreateTransitGatewayPeeringAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayPeeringAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayPeeringAttachmentInput) *EC2CreateTransitGatewayPeeringAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayPeeringAttachment", input)
	return &EC2CreateTransitGatewayPeeringAttachmentFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.CreateTransitGatewayPrefixListReferenceInput) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.CreateTransitGatewayPrefixListReferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayPrefixListReference", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayPrefixListReferenceInput) *EC2CreateTransitGatewayPrefixListReferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayPrefixListReference", input)
	return &EC2CreateTransitGatewayPrefixListReferenceFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGatewayRoute(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteInput) (*ec2.CreateTransitGatewayRouteOutput, error) {
	var output ec2.CreateTransitGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteInput) *EC2CreateTransitGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayRoute", input)
	return &EC2CreateTransitGatewayRouteFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteTableInput) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
	var output ec2.CreateTransitGatewayRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteTableInput) *EC2CreateTransitGatewayRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayRouteTable", input)
	return &EC2CreateTransitGatewayRouteTableFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.CreateTransitGatewayVpcAttachmentInput) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.CreateTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayVpcAttachmentInput) *EC2CreateTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayVpcAttachment", input)
	return &EC2CreateTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *EC2Stub) CreateVolume(ctx workflow.Context, input *ec2.CreateVolumeInput) (*ec2.Volume, error) {
	var output ec2.Volume
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVolumeAsync(ctx workflow.Context, input *ec2.CreateVolumeInput) *EC2CreateVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVolume", input)
	return &EC2CreateVolumeFuture{Future: future}
}

func (a *EC2Stub) CreateVpc(ctx workflow.Context, input *ec2.CreateVpcInput) (*ec2.CreateVpcOutput, error) {
	var output ec2.CreateVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpcAsync(ctx workflow.Context, input *ec2.CreateVpcInput) *EC2CreateVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpc", input)
	return &EC2CreateVpcFuture{Future: future}
}

func (a *EC2Stub) CreateVpcEndpoint(ctx workflow.Context, input *ec2.CreateVpcEndpointInput) (*ec2.CreateVpcEndpointOutput, error) {
	var output ec2.CreateVpcEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpcEndpointAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointInput) *EC2CreateVpcEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcEndpoint", input)
	return &EC2CreateVpcEndpointFuture{Future: future}
}

func (a *EC2Stub) CreateVpcEndpointConnectionNotification(ctx workflow.Context, input *ec2.CreateVpcEndpointConnectionNotificationInput) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
	var output ec2.CreateVpcEndpointConnectionNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcEndpointConnectionNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpcEndpointConnectionNotificationAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointConnectionNotificationInput) *EC2CreateVpcEndpointConnectionNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcEndpointConnectionNotification", input)
	return &EC2CreateVpcEndpointConnectionNotificationFuture{Future: future}
}

func (a *EC2Stub) CreateVpcEndpointServiceConfiguration(ctx workflow.Context, input *ec2.CreateVpcEndpointServiceConfigurationInput) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	var output ec2.CreateVpcEndpointServiceConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcEndpointServiceConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpcEndpointServiceConfigurationAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointServiceConfigurationInput) *EC2CreateVpcEndpointServiceConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcEndpointServiceConfiguration", input)
	return &EC2CreateVpcEndpointServiceConfigurationFuture{Future: future}
}

func (a *EC2Stub) CreateVpcPeeringConnection(ctx workflow.Context, input *ec2.CreateVpcPeeringConnectionInput) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	var output ec2.CreateVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.CreateVpcPeeringConnectionInput) *EC2CreateVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcPeeringConnection", input)
	return &EC2CreateVpcPeeringConnectionFuture{Future: future}
}

func (a *EC2Stub) CreateVpnConnection(ctx workflow.Context, input *ec2.CreateVpnConnectionInput) (*ec2.CreateVpnConnectionOutput, error) {
	var output ec2.CreateVpnConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpnConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpnConnectionAsync(ctx workflow.Context, input *ec2.CreateVpnConnectionInput) *EC2CreateVpnConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpnConnection", input)
	return &EC2CreateVpnConnectionFuture{Future: future}
}

func (a *EC2Stub) CreateVpnConnectionRoute(ctx workflow.Context, input *ec2.CreateVpnConnectionRouteInput) (*ec2.CreateVpnConnectionRouteOutput, error) {
	var output ec2.CreateVpnConnectionRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpnConnectionRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpnConnectionRouteAsync(ctx workflow.Context, input *ec2.CreateVpnConnectionRouteInput) *EC2CreateVpnConnectionRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpnConnectionRoute", input)
	return &EC2CreateVpnConnectionRouteFuture{Future: future}
}

func (a *EC2Stub) CreateVpnGateway(ctx workflow.Context, input *ec2.CreateVpnGatewayInput) (*ec2.CreateVpnGatewayOutput, error) {
	var output ec2.CreateVpnGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpnGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpnGatewayAsync(ctx workflow.Context, input *ec2.CreateVpnGatewayInput) *EC2CreateVpnGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpnGateway", input)
	return &EC2CreateVpnGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteCarrierGateway(ctx workflow.Context, input *ec2.DeleteCarrierGatewayInput) (*ec2.DeleteCarrierGatewayOutput, error) {
	var output ec2.DeleteCarrierGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteCarrierGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteCarrierGatewayAsync(ctx workflow.Context, input *ec2.DeleteCarrierGatewayInput) *EC2DeleteCarrierGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteCarrierGateway", input)
	return &EC2DeleteCarrierGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteClientVpnEndpoint(ctx workflow.Context, input *ec2.DeleteClientVpnEndpointInput) (*ec2.DeleteClientVpnEndpointOutput, error) {
	var output ec2.DeleteClientVpnEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteClientVpnEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteClientVpnEndpointAsync(ctx workflow.Context, input *ec2.DeleteClientVpnEndpointInput) *EC2DeleteClientVpnEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteClientVpnEndpoint", input)
	return &EC2DeleteClientVpnEndpointFuture{Future: future}
}

func (a *EC2Stub) DeleteClientVpnRoute(ctx workflow.Context, input *ec2.DeleteClientVpnRouteInput) (*ec2.DeleteClientVpnRouteOutput, error) {
	var output ec2.DeleteClientVpnRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteClientVpnRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteClientVpnRouteAsync(ctx workflow.Context, input *ec2.DeleteClientVpnRouteInput) *EC2DeleteClientVpnRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteClientVpnRoute", input)
	return &EC2DeleteClientVpnRouteFuture{Future: future}
}

func (a *EC2Stub) DeleteCustomerGateway(ctx workflow.Context, input *ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error) {
	var output ec2.DeleteCustomerGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteCustomerGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteCustomerGatewayAsync(ctx workflow.Context, input *ec2.DeleteCustomerGatewayInput) *EC2DeleteCustomerGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteCustomerGateway", input)
	return &EC2DeleteCustomerGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteDhcpOptions(ctx workflow.Context, input *ec2.DeleteDhcpOptionsInput) (*ec2.DeleteDhcpOptionsOutput, error) {
	var output ec2.DeleteDhcpOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteDhcpOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteDhcpOptionsAsync(ctx workflow.Context, input *ec2.DeleteDhcpOptionsInput) *EC2DeleteDhcpOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteDhcpOptions", input)
	return &EC2DeleteDhcpOptionsFuture{Future: future}
}

func (a *EC2Stub) DeleteEgressOnlyInternetGateway(ctx workflow.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	var output ec2.DeleteEgressOnlyInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteEgressOnlyInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteEgressOnlyInternetGatewayAsync(ctx workflow.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput) *EC2DeleteEgressOnlyInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteEgressOnlyInternetGateway", input)
	return &EC2DeleteEgressOnlyInternetGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteFleets(ctx workflow.Context, input *ec2.DeleteFleetsInput) (*ec2.DeleteFleetsOutput, error) {
	var output ec2.DeleteFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteFleetsAsync(ctx workflow.Context, input *ec2.DeleteFleetsInput) *EC2DeleteFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteFleets", input)
	return &EC2DeleteFleetsFuture{Future: future}
}

func (a *EC2Stub) DeleteFlowLogs(ctx workflow.Context, input *ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error) {
	var output ec2.DeleteFlowLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteFlowLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteFlowLogsAsync(ctx workflow.Context, input *ec2.DeleteFlowLogsInput) *EC2DeleteFlowLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteFlowLogs", input)
	return &EC2DeleteFlowLogsFuture{Future: future}
}

func (a *EC2Stub) DeleteFpgaImage(ctx workflow.Context, input *ec2.DeleteFpgaImageInput) (*ec2.DeleteFpgaImageOutput, error) {
	var output ec2.DeleteFpgaImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteFpgaImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteFpgaImageAsync(ctx workflow.Context, input *ec2.DeleteFpgaImageInput) *EC2DeleteFpgaImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteFpgaImage", input)
	return &EC2DeleteFpgaImageFuture{Future: future}
}

func (a *EC2Stub) DeleteInternetGateway(ctx workflow.Context, input *ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error) {
	var output ec2.DeleteInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteInternetGatewayAsync(ctx workflow.Context, input *ec2.DeleteInternetGatewayInput) *EC2DeleteInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteInternetGateway", input)
	return &EC2DeleteInternetGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteKeyPair(ctx workflow.Context, input *ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error) {
	var output ec2.DeleteKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteKeyPairAsync(ctx workflow.Context, input *ec2.DeleteKeyPairInput) *EC2DeleteKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteKeyPair", input)
	return &EC2DeleteKeyPairFuture{Future: future}
}

func (a *EC2Stub) DeleteLaunchTemplate(ctx workflow.Context, input *ec2.DeleteLaunchTemplateInput) (*ec2.DeleteLaunchTemplateOutput, error) {
	var output ec2.DeleteLaunchTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLaunchTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteLaunchTemplateAsync(ctx workflow.Context, input *ec2.DeleteLaunchTemplateInput) *EC2DeleteLaunchTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLaunchTemplate", input)
	return &EC2DeleteLaunchTemplateFuture{Future: future}
}

func (a *EC2Stub) DeleteLaunchTemplateVersions(ctx workflow.Context, input *ec2.DeleteLaunchTemplateVersionsInput) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
	var output ec2.DeleteLaunchTemplateVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLaunchTemplateVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteLaunchTemplateVersionsAsync(ctx workflow.Context, input *ec2.DeleteLaunchTemplateVersionsInput) *EC2DeleteLaunchTemplateVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLaunchTemplateVersions", input)
	return &EC2DeleteLaunchTemplateVersionsFuture{Future: future}
}

func (a *EC2Stub) DeleteLocalGatewayRoute(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteInput) (*ec2.DeleteLocalGatewayRouteOutput, error) {
	var output ec2.DeleteLocalGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLocalGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteLocalGatewayRouteAsync(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteInput) *EC2DeleteLocalGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLocalGatewayRoute", input)
	return &EC2DeleteLocalGatewayRouteFuture{Future: future}
}

func (a *EC2Stub) DeleteLocalGatewayRouteTableVpcAssociation(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
	var output ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLocalGatewayRouteTableVpcAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteLocalGatewayRouteTableVpcAssociationAsync(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) *EC2DeleteLocalGatewayRouteTableVpcAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLocalGatewayRouteTableVpcAssociation", input)
	return &EC2DeleteLocalGatewayRouteTableVpcAssociationFuture{Future: future}
}

func (a *EC2Stub) DeleteManagedPrefixList(ctx workflow.Context, input *ec2.DeleteManagedPrefixListInput) (*ec2.DeleteManagedPrefixListOutput, error) {
	var output ec2.DeleteManagedPrefixListOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteManagedPrefixList", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteManagedPrefixListAsync(ctx workflow.Context, input *ec2.DeleteManagedPrefixListInput) *EC2DeleteManagedPrefixListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteManagedPrefixList", input)
	return &EC2DeleteManagedPrefixListFuture{Future: future}
}

func (a *EC2Stub) DeleteNatGateway(ctx workflow.Context, input *ec2.DeleteNatGatewayInput) (*ec2.DeleteNatGatewayOutput, error) {
	var output ec2.DeleteNatGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNatGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteNatGatewayAsync(ctx workflow.Context, input *ec2.DeleteNatGatewayInput) *EC2DeleteNatGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNatGateway", input)
	return &EC2DeleteNatGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteNetworkAcl(ctx workflow.Context, input *ec2.DeleteNetworkAclInput) (*ec2.DeleteNetworkAclOutput, error) {
	var output ec2.DeleteNetworkAclOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkAcl", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteNetworkAclAsync(ctx workflow.Context, input *ec2.DeleteNetworkAclInput) *EC2DeleteNetworkAclFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkAcl", input)
	return &EC2DeleteNetworkAclFuture{Future: future}
}

func (a *EC2Stub) DeleteNetworkAclEntry(ctx workflow.Context, input *ec2.DeleteNetworkAclEntryInput) (*ec2.DeleteNetworkAclEntryOutput, error) {
	var output ec2.DeleteNetworkAclEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkAclEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteNetworkAclEntryAsync(ctx workflow.Context, input *ec2.DeleteNetworkAclEntryInput) *EC2DeleteNetworkAclEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkAclEntry", input)
	return &EC2DeleteNetworkAclEntryFuture{Future: future}
}

func (a *EC2Stub) DeleteNetworkInterface(ctx workflow.Context, input *ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error) {
	var output ec2.DeleteNetworkInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteNetworkInterfaceAsync(ctx workflow.Context, input *ec2.DeleteNetworkInterfaceInput) *EC2DeleteNetworkInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkInterface", input)
	return &EC2DeleteNetworkInterfaceFuture{Future: future}
}

func (a *EC2Stub) DeleteNetworkInterfacePermission(ctx workflow.Context, input *ec2.DeleteNetworkInterfacePermissionInput) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	var output ec2.DeleteNetworkInterfacePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkInterfacePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteNetworkInterfacePermissionAsync(ctx workflow.Context, input *ec2.DeleteNetworkInterfacePermissionInput) *EC2DeleteNetworkInterfacePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkInterfacePermission", input)
	return &EC2DeleteNetworkInterfacePermissionFuture{Future: future}
}

func (a *EC2Stub) DeletePlacementGroup(ctx workflow.Context, input *ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error) {
	var output ec2.DeletePlacementGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeletePlacementGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeletePlacementGroupAsync(ctx workflow.Context, input *ec2.DeletePlacementGroupInput) *EC2DeletePlacementGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeletePlacementGroup", input)
	return &EC2DeletePlacementGroupFuture{Future: future}
}

func (a *EC2Stub) DeleteQueuedReservedInstances(ctx workflow.Context, input *ec2.DeleteQueuedReservedInstancesInput) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
	var output ec2.DeleteQueuedReservedInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteQueuedReservedInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteQueuedReservedInstancesAsync(ctx workflow.Context, input *ec2.DeleteQueuedReservedInstancesInput) *EC2DeleteQueuedReservedInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteQueuedReservedInstances", input)
	return &EC2DeleteQueuedReservedInstancesFuture{Future: future}
}

func (a *EC2Stub) DeleteRoute(ctx workflow.Context, input *ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error) {
	var output ec2.DeleteRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteRouteAsync(ctx workflow.Context, input *ec2.DeleteRouteInput) *EC2DeleteRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteRoute", input)
	return &EC2DeleteRouteFuture{Future: future}
}

func (a *EC2Stub) DeleteRouteTable(ctx workflow.Context, input *ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error) {
	var output ec2.DeleteRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteRouteTableAsync(ctx workflow.Context, input *ec2.DeleteRouteTableInput) *EC2DeleteRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteRouteTable", input)
	return &EC2DeleteRouteTableFuture{Future: future}
}

func (a *EC2Stub) DeleteSecurityGroup(ctx workflow.Context, input *ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error) {
	var output ec2.DeleteSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteSecurityGroupAsync(ctx workflow.Context, input *ec2.DeleteSecurityGroupInput) *EC2DeleteSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSecurityGroup", input)
	return &EC2DeleteSecurityGroupFuture{Future: future}
}

func (a *EC2Stub) DeleteSnapshot(ctx workflow.Context, input *ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error) {
	var output ec2.DeleteSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteSnapshotAsync(ctx workflow.Context, input *ec2.DeleteSnapshotInput) *EC2DeleteSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSnapshot", input)
	return &EC2DeleteSnapshotFuture{Future: future}
}

func (a *EC2Stub) DeleteSpotDatafeedSubscription(ctx workflow.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	var output ec2.DeleteSpotDatafeedSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSpotDatafeedSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput) *EC2DeleteSpotDatafeedSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSpotDatafeedSubscription", input)
	return &EC2DeleteSpotDatafeedSubscriptionFuture{Future: future}
}

func (a *EC2Stub) DeleteSubnet(ctx workflow.Context, input *ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error) {
	var output ec2.DeleteSubnetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSubnet", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteSubnetAsync(ctx workflow.Context, input *ec2.DeleteSubnetInput) *EC2DeleteSubnetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSubnet", input)
	return &EC2DeleteSubnetFuture{Future: future}
}

func (a *EC2Stub) DeleteTags(ctx workflow.Context, input *ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error) {
	var output ec2.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTagsAsync(ctx workflow.Context, input *ec2.DeleteTagsInput) *EC2DeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTags", input)
	return &EC2DeleteTagsFuture{Future: future}
}

func (a *EC2Stub) DeleteTrafficMirrorFilter(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterInput) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
	var output ec2.DeleteTrafficMirrorFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTrafficMirrorFilterAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterInput) *EC2DeleteTrafficMirrorFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorFilter", input)
	return &EC2DeleteTrafficMirrorFilterFuture{Future: future}
}

func (a *EC2Stub) DeleteTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterRuleInput) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
	var output ec2.DeleteTrafficMirrorFilterRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorFilterRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterRuleInput) *EC2DeleteTrafficMirrorFilterRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorFilterRule", input)
	return &EC2DeleteTrafficMirrorFilterRuleFuture{Future: future}
}

func (a *EC2Stub) DeleteTrafficMirrorSession(ctx workflow.Context, input *ec2.DeleteTrafficMirrorSessionInput) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
	var output ec2.DeleteTrafficMirrorSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorSession", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorSessionInput) *EC2DeleteTrafficMirrorSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorSession", input)
	return &EC2DeleteTrafficMirrorSessionFuture{Future: future}
}

func (a *EC2Stub) DeleteTrafficMirrorTarget(ctx workflow.Context, input *ec2.DeleteTrafficMirrorTargetInput) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
	var output ec2.DeleteTrafficMirrorTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTrafficMirrorTargetAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorTargetInput) *EC2DeleteTrafficMirrorTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorTarget", input)
	return &EC2DeleteTrafficMirrorTargetFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGateway(ctx workflow.Context, input *ec2.DeleteTransitGatewayInput) (*ec2.DeleteTransitGatewayOutput, error) {
	var output ec2.DeleteTransitGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayInput) *EC2DeleteTransitGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGateway", input)
	return &EC2DeleteTransitGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.DeleteTransitGatewayMulticastDomainInput) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
	var output ec2.DeleteTransitGatewayMulticastDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayMulticastDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayMulticastDomainInput) *EC2DeleteTransitGatewayMulticastDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayMulticastDomain", input)
	return &EC2DeleteTransitGatewayMulticastDomainFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.DeleteTransitGatewayPeeringAttachmentInput) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.DeleteTransitGatewayPeeringAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayPeeringAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayPeeringAttachmentInput) *EC2DeleteTransitGatewayPeeringAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayPeeringAttachment", input)
	return &EC2DeleteTransitGatewayPeeringAttachmentFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.DeleteTransitGatewayPrefixListReferenceInput) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.DeleteTransitGatewayPrefixListReferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayPrefixListReference", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayPrefixListReferenceInput) *EC2DeleteTransitGatewayPrefixListReferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayPrefixListReference", input)
	return &EC2DeleteTransitGatewayPrefixListReferenceFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGatewayRoute(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteInput) (*ec2.DeleteTransitGatewayRouteOutput, error) {
	var output ec2.DeleteTransitGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteInput) *EC2DeleteTransitGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayRoute", input)
	return &EC2DeleteTransitGatewayRouteFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGatewayRouteTable(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteTableInput) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
	var output ec2.DeleteTransitGatewayRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteTableInput) *EC2DeleteTransitGatewayRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayRouteTable", input)
	return &EC2DeleteTransitGatewayRouteTableFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.DeleteTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayVpcAttachmentInput) *EC2DeleteTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayVpcAttachment", input)
	return &EC2DeleteTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *EC2Stub) DeleteVolume(ctx workflow.Context, input *ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error) {
	var output ec2.DeleteVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVolumeAsync(ctx workflow.Context, input *ec2.DeleteVolumeInput) *EC2DeleteVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVolume", input)
	return &EC2DeleteVolumeFuture{Future: future}
}

func (a *EC2Stub) DeleteVpc(ctx workflow.Context, input *ec2.DeleteVpcInput) (*ec2.DeleteVpcOutput, error) {
	var output ec2.DeleteVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpcAsync(ctx workflow.Context, input *ec2.DeleteVpcInput) *EC2DeleteVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpc", input)
	return &EC2DeleteVpcFuture{Future: future}
}

func (a *EC2Stub) DeleteVpcEndpointConnectionNotifications(ctx workflow.Context, input *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
	var output ec2.DeleteVpcEndpointConnectionNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcEndpointConnectionNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpcEndpointConnectionNotificationsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointConnectionNotificationsInput) *EC2DeleteVpcEndpointConnectionNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcEndpointConnectionNotifications", input)
	return &EC2DeleteVpcEndpointConnectionNotificationsFuture{Future: future}
}

func (a *EC2Stub) DeleteVpcEndpointServiceConfigurations(ctx workflow.Context, input *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	var output ec2.DeleteVpcEndpointServiceConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcEndpointServiceConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpcEndpointServiceConfigurationsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointServiceConfigurationsInput) *EC2DeleteVpcEndpointServiceConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcEndpointServiceConfigurations", input)
	return &EC2DeleteVpcEndpointServiceConfigurationsFuture{Future: future}
}

func (a *EC2Stub) DeleteVpcEndpoints(ctx workflow.Context, input *ec2.DeleteVpcEndpointsInput) (*ec2.DeleteVpcEndpointsOutput, error) {
	var output ec2.DeleteVpcEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpcEndpointsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointsInput) *EC2DeleteVpcEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcEndpoints", input)
	return &EC2DeleteVpcEndpointsFuture{Future: future}
}

func (a *EC2Stub) DeleteVpcPeeringConnection(ctx workflow.Context, input *ec2.DeleteVpcPeeringConnectionInput) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	var output ec2.DeleteVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.DeleteVpcPeeringConnectionInput) *EC2DeleteVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcPeeringConnection", input)
	return &EC2DeleteVpcPeeringConnectionFuture{Future: future}
}

func (a *EC2Stub) DeleteVpnConnection(ctx workflow.Context, input *ec2.DeleteVpnConnectionInput) (*ec2.DeleteVpnConnectionOutput, error) {
	var output ec2.DeleteVpnConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpnConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpnConnectionAsync(ctx workflow.Context, input *ec2.DeleteVpnConnectionInput) *EC2DeleteVpnConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpnConnection", input)
	return &EC2DeleteVpnConnectionFuture{Future: future}
}

func (a *EC2Stub) DeleteVpnConnectionRoute(ctx workflow.Context, input *ec2.DeleteVpnConnectionRouteInput) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	var output ec2.DeleteVpnConnectionRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpnConnectionRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpnConnectionRouteAsync(ctx workflow.Context, input *ec2.DeleteVpnConnectionRouteInput) *EC2DeleteVpnConnectionRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpnConnectionRoute", input)
	return &EC2DeleteVpnConnectionRouteFuture{Future: future}
}

func (a *EC2Stub) DeleteVpnGateway(ctx workflow.Context, input *ec2.DeleteVpnGatewayInput) (*ec2.DeleteVpnGatewayOutput, error) {
	var output ec2.DeleteVpnGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpnGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpnGatewayAsync(ctx workflow.Context, input *ec2.DeleteVpnGatewayInput) *EC2DeleteVpnGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpnGateway", input)
	return &EC2DeleteVpnGatewayFuture{Future: future}
}

func (a *EC2Stub) DeprovisionByoipCidr(ctx workflow.Context, input *ec2.DeprovisionByoipCidrInput) (*ec2.DeprovisionByoipCidrOutput, error) {
	var output ec2.DeprovisionByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeprovisionByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeprovisionByoipCidrAsync(ctx workflow.Context, input *ec2.DeprovisionByoipCidrInput) *EC2DeprovisionByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeprovisionByoipCidr", input)
	return &EC2DeprovisionByoipCidrFuture{Future: future}
}

func (a *EC2Stub) DeregisterImage(ctx workflow.Context, input *ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error) {
	var output ec2.DeregisterImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeregisterImageAsync(ctx workflow.Context, input *ec2.DeregisterImageInput) *EC2DeregisterImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterImage", input)
	return &EC2DeregisterImageFuture{Future: future}
}

func (a *EC2Stub) DeregisterInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.DeregisterInstanceEventNotificationAttributesInput) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error) {
	var output ec2.DeregisterInstanceEventNotificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterInstanceEventNotificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeregisterInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.DeregisterInstanceEventNotificationAttributesInput) *EC2DeregisterInstanceEventNotificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterInstanceEventNotificationAttributes", input)
	return &EC2DeregisterInstanceEventNotificationAttributesFuture{Future: future}
}

func (a *EC2Stub) DeregisterTransitGatewayMulticastGroupMembers(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
	var output ec2.DeregisterTransitGatewayMulticastGroupMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterTransitGatewayMulticastGroupMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeregisterTransitGatewayMulticastGroupMembersAsync(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) *EC2DeregisterTransitGatewayMulticastGroupMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterTransitGatewayMulticastGroupMembers", input)
	return &EC2DeregisterTransitGatewayMulticastGroupMembersFuture{Future: future}
}

func (a *EC2Stub) DeregisterTransitGatewayMulticastGroupSources(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
	var output ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterTransitGatewayMulticastGroupSources", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeregisterTransitGatewayMulticastGroupSourcesAsync(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) *EC2DeregisterTransitGatewayMulticastGroupSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterTransitGatewayMulticastGroupSources", input)
	return &EC2DeregisterTransitGatewayMulticastGroupSourcesFuture{Future: future}
}

func (a *EC2Stub) DescribeAccountAttributes(ctx workflow.Context, input *ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error) {
	var output ec2.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeAccountAttributesAsync(ctx workflow.Context, input *ec2.DescribeAccountAttributesInput) *EC2DescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAccountAttributes", input)
	return &EC2DescribeAccountAttributesFuture{Future: future}
}

func (a *EC2Stub) DescribeAddresses(ctx workflow.Context, input *ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error) {
	var output ec2.DescribeAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeAddressesAsync(ctx workflow.Context, input *ec2.DescribeAddressesInput) *EC2DescribeAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAddresses", input)
	return &EC2DescribeAddressesFuture{Future: future}
}

func (a *EC2Stub) DescribeAggregateIdFormat(ctx workflow.Context, input *ec2.DescribeAggregateIdFormatInput) (*ec2.DescribeAggregateIdFormatOutput, error) {
	var output ec2.DescribeAggregateIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAggregateIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeAggregateIdFormatAsync(ctx workflow.Context, input *ec2.DescribeAggregateIdFormatInput) *EC2DescribeAggregateIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAggregateIdFormat", input)
	return &EC2DescribeAggregateIdFormatFuture{Future: future}
}

func (a *EC2Stub) DescribeAvailabilityZones(ctx workflow.Context, input *ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error) {
	var output ec2.DescribeAvailabilityZonesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAvailabilityZones", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeAvailabilityZonesAsync(ctx workflow.Context, input *ec2.DescribeAvailabilityZonesInput) *EC2DescribeAvailabilityZonesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAvailabilityZones", input)
	return &EC2DescribeAvailabilityZonesFuture{Future: future}
}

func (a *EC2Stub) DescribeBundleTasks(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error) {
	var output ec2.DescribeBundleTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeBundleTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeBundleTasksAsync(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) *EC2DescribeBundleTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeBundleTasks", input)
	return &EC2DescribeBundleTasksFuture{Future: future}
}

func (a *EC2Stub) DescribeByoipCidrs(ctx workflow.Context, input *ec2.DescribeByoipCidrsInput) (*ec2.DescribeByoipCidrsOutput, error) {
	var output ec2.DescribeByoipCidrsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeByoipCidrs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeByoipCidrsAsync(ctx workflow.Context, input *ec2.DescribeByoipCidrsInput) *EC2DescribeByoipCidrsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeByoipCidrs", input)
	return &EC2DescribeByoipCidrsFuture{Future: future}
}

func (a *EC2Stub) DescribeCapacityReservations(ctx workflow.Context, input *ec2.DescribeCapacityReservationsInput) (*ec2.DescribeCapacityReservationsOutput, error) {
	var output ec2.DescribeCapacityReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCapacityReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeCapacityReservationsAsync(ctx workflow.Context, input *ec2.DescribeCapacityReservationsInput) *EC2DescribeCapacityReservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCapacityReservations", input)
	return &EC2DescribeCapacityReservationsFuture{Future: future}
}

func (a *EC2Stub) DescribeCarrierGateways(ctx workflow.Context, input *ec2.DescribeCarrierGatewaysInput) (*ec2.DescribeCarrierGatewaysOutput, error) {
	var output ec2.DescribeCarrierGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCarrierGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeCarrierGatewaysAsync(ctx workflow.Context, input *ec2.DescribeCarrierGatewaysInput) *EC2DescribeCarrierGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCarrierGateways", input)
	return &EC2DescribeCarrierGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeClassicLinkInstances(ctx workflow.Context, input *ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	var output ec2.DescribeClassicLinkInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClassicLinkInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeClassicLinkInstancesAsync(ctx workflow.Context, input *ec2.DescribeClassicLinkInstancesInput) *EC2DescribeClassicLinkInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClassicLinkInstances", input)
	return &EC2DescribeClassicLinkInstancesFuture{Future: future}
}

func (a *EC2Stub) DescribeClientVpnAuthorizationRules(ctx workflow.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
	var output ec2.DescribeClientVpnAuthorizationRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnAuthorizationRules", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeClientVpnAuthorizationRulesAsync(ctx workflow.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput) *EC2DescribeClientVpnAuthorizationRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnAuthorizationRules", input)
	return &EC2DescribeClientVpnAuthorizationRulesFuture{Future: future}
}

func (a *EC2Stub) DescribeClientVpnConnections(ctx workflow.Context, input *ec2.DescribeClientVpnConnectionsInput) (*ec2.DescribeClientVpnConnectionsOutput, error) {
	var output ec2.DescribeClientVpnConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeClientVpnConnectionsAsync(ctx workflow.Context, input *ec2.DescribeClientVpnConnectionsInput) *EC2DescribeClientVpnConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnConnections", input)
	return &EC2DescribeClientVpnConnectionsFuture{Future: future}
}

func (a *EC2Stub) DescribeClientVpnEndpoints(ctx workflow.Context, input *ec2.DescribeClientVpnEndpointsInput) (*ec2.DescribeClientVpnEndpointsOutput, error) {
	var output ec2.DescribeClientVpnEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeClientVpnEndpointsAsync(ctx workflow.Context, input *ec2.DescribeClientVpnEndpointsInput) *EC2DescribeClientVpnEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnEndpoints", input)
	return &EC2DescribeClientVpnEndpointsFuture{Future: future}
}

func (a *EC2Stub) DescribeClientVpnRoutes(ctx workflow.Context, input *ec2.DescribeClientVpnRoutesInput) (*ec2.DescribeClientVpnRoutesOutput, error) {
	var output ec2.DescribeClientVpnRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeClientVpnRoutesAsync(ctx workflow.Context, input *ec2.DescribeClientVpnRoutesInput) *EC2DescribeClientVpnRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnRoutes", input)
	return &EC2DescribeClientVpnRoutesFuture{Future: future}
}

func (a *EC2Stub) DescribeClientVpnTargetNetworks(ctx workflow.Context, input *ec2.DescribeClientVpnTargetNetworksInput) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
	var output ec2.DescribeClientVpnTargetNetworksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnTargetNetworks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeClientVpnTargetNetworksAsync(ctx workflow.Context, input *ec2.DescribeClientVpnTargetNetworksInput) *EC2DescribeClientVpnTargetNetworksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnTargetNetworks", input)
	return &EC2DescribeClientVpnTargetNetworksFuture{Future: future}
}

func (a *EC2Stub) DescribeCoipPools(ctx workflow.Context, input *ec2.DescribeCoipPoolsInput) (*ec2.DescribeCoipPoolsOutput, error) {
	var output ec2.DescribeCoipPoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCoipPools", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeCoipPoolsAsync(ctx workflow.Context, input *ec2.DescribeCoipPoolsInput) *EC2DescribeCoipPoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCoipPools", input)
	return &EC2DescribeCoipPoolsFuture{Future: future}
}

func (a *EC2Stub) DescribeConversionTasks(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error) {
	var output ec2.DescribeConversionTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeConversionTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeConversionTasksAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *EC2DescribeConversionTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeConversionTasks", input)
	return &EC2DescribeConversionTasksFuture{Future: future}
}

func (a *EC2Stub) DescribeCustomerGateways(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error) {
	var output ec2.DescribeCustomerGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCustomerGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeCustomerGatewaysAsync(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) *EC2DescribeCustomerGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCustomerGateways", input)
	return &EC2DescribeCustomerGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeDhcpOptions(ctx workflow.Context, input *ec2.DescribeDhcpOptionsInput) (*ec2.DescribeDhcpOptionsOutput, error) {
	var output ec2.DescribeDhcpOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeDhcpOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeDhcpOptionsAsync(ctx workflow.Context, input *ec2.DescribeDhcpOptionsInput) *EC2DescribeDhcpOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeDhcpOptions", input)
	return &EC2DescribeDhcpOptionsFuture{Future: future}
}

func (a *EC2Stub) DescribeEgressOnlyInternetGateways(ctx workflow.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	var output ec2.DescribeEgressOnlyInternetGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeEgressOnlyInternetGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeEgressOnlyInternetGatewaysAsync(ctx workflow.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput) *EC2DescribeEgressOnlyInternetGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeEgressOnlyInternetGateways", input)
	return &EC2DescribeEgressOnlyInternetGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeElasticGpus(ctx workflow.Context, input *ec2.DescribeElasticGpusInput) (*ec2.DescribeElasticGpusOutput, error) {
	var output ec2.DescribeElasticGpusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeElasticGpus", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeElasticGpusAsync(ctx workflow.Context, input *ec2.DescribeElasticGpusInput) *EC2DescribeElasticGpusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeElasticGpus", input)
	return &EC2DescribeElasticGpusFuture{Future: future}
}

func (a *EC2Stub) DescribeExportImageTasks(ctx workflow.Context, input *ec2.DescribeExportImageTasksInput) (*ec2.DescribeExportImageTasksOutput, error) {
	var output ec2.DescribeExportImageTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeExportImageTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeExportImageTasksAsync(ctx workflow.Context, input *ec2.DescribeExportImageTasksInput) *EC2DescribeExportImageTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeExportImageTasks", input)
	return &EC2DescribeExportImageTasksFuture{Future: future}
}

func (a *EC2Stub) DescribeExportTasks(ctx workflow.Context, input *ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error) {
	var output ec2.DescribeExportTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeExportTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeExportTasksAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) *EC2DescribeExportTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeExportTasks", input)
	return &EC2DescribeExportTasksFuture{Future: future}
}

func (a *EC2Stub) DescribeFastSnapshotRestores(ctx workflow.Context, input *ec2.DescribeFastSnapshotRestoresInput) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
	var output ec2.DescribeFastSnapshotRestoresOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFastSnapshotRestores", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.DescribeFastSnapshotRestoresInput) *EC2DescribeFastSnapshotRestoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFastSnapshotRestores", input)
	return &EC2DescribeFastSnapshotRestoresFuture{Future: future}
}

func (a *EC2Stub) DescribeFleetHistory(ctx workflow.Context, input *ec2.DescribeFleetHistoryInput) (*ec2.DescribeFleetHistoryOutput, error) {
	var output ec2.DescribeFleetHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFleetHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFleetHistoryAsync(ctx workflow.Context, input *ec2.DescribeFleetHistoryInput) *EC2DescribeFleetHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFleetHistory", input)
	return &EC2DescribeFleetHistoryFuture{Future: future}
}

func (a *EC2Stub) DescribeFleetInstances(ctx workflow.Context, input *ec2.DescribeFleetInstancesInput) (*ec2.DescribeFleetInstancesOutput, error) {
	var output ec2.DescribeFleetInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFleetInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFleetInstancesAsync(ctx workflow.Context, input *ec2.DescribeFleetInstancesInput) *EC2DescribeFleetInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFleetInstances", input)
	return &EC2DescribeFleetInstancesFuture{Future: future}
}

func (a *EC2Stub) DescribeFleets(ctx workflow.Context, input *ec2.DescribeFleetsInput) (*ec2.DescribeFleetsOutput, error) {
	var output ec2.DescribeFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFleetsAsync(ctx workflow.Context, input *ec2.DescribeFleetsInput) *EC2DescribeFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFleets", input)
	return &EC2DescribeFleetsFuture{Future: future}
}

func (a *EC2Stub) DescribeFlowLogs(ctx workflow.Context, input *ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error) {
	var output ec2.DescribeFlowLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFlowLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFlowLogsAsync(ctx workflow.Context, input *ec2.DescribeFlowLogsInput) *EC2DescribeFlowLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFlowLogs", input)
	return &EC2DescribeFlowLogsFuture{Future: future}
}

func (a *EC2Stub) DescribeFpgaImageAttribute(ctx workflow.Context, input *ec2.DescribeFpgaImageAttributeInput) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	var output ec2.DescribeFpgaImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFpgaImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.DescribeFpgaImageAttributeInput) *EC2DescribeFpgaImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFpgaImageAttribute", input)
	return &EC2DescribeFpgaImageAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeFpgaImages(ctx workflow.Context, input *ec2.DescribeFpgaImagesInput) (*ec2.DescribeFpgaImagesOutput, error) {
	var output ec2.DescribeFpgaImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFpgaImages", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFpgaImagesAsync(ctx workflow.Context, input *ec2.DescribeFpgaImagesInput) *EC2DescribeFpgaImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFpgaImages", input)
	return &EC2DescribeFpgaImagesFuture{Future: future}
}

func (a *EC2Stub) DescribeHostReservationOfferings(ctx workflow.Context, input *ec2.DescribeHostReservationOfferingsInput) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	var output ec2.DescribeHostReservationOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeHostReservationOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeHostReservationOfferingsAsync(ctx workflow.Context, input *ec2.DescribeHostReservationOfferingsInput) *EC2DescribeHostReservationOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeHostReservationOfferings", input)
	return &EC2DescribeHostReservationOfferingsFuture{Future: future}
}

func (a *EC2Stub) DescribeHostReservations(ctx workflow.Context, input *ec2.DescribeHostReservationsInput) (*ec2.DescribeHostReservationsOutput, error) {
	var output ec2.DescribeHostReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeHostReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeHostReservationsAsync(ctx workflow.Context, input *ec2.DescribeHostReservationsInput) *EC2DescribeHostReservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeHostReservations", input)
	return &EC2DescribeHostReservationsFuture{Future: future}
}

func (a *EC2Stub) DescribeHosts(ctx workflow.Context, input *ec2.DescribeHostsInput) (*ec2.DescribeHostsOutput, error) {
	var output ec2.DescribeHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeHostsAsync(ctx workflow.Context, input *ec2.DescribeHostsInput) *EC2DescribeHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeHosts", input)
	return &EC2DescribeHostsFuture{Future: future}
}

func (a *EC2Stub) DescribeIamInstanceProfileAssociations(ctx workflow.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	var output ec2.DescribeIamInstanceProfileAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIamInstanceProfileAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeIamInstanceProfileAssociationsAsync(ctx workflow.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput) *EC2DescribeIamInstanceProfileAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIamInstanceProfileAssociations", input)
	return &EC2DescribeIamInstanceProfileAssociationsFuture{Future: future}
}

func (a *EC2Stub) DescribeIdFormat(ctx workflow.Context, input *ec2.DescribeIdFormatInput) (*ec2.DescribeIdFormatOutput, error) {
	var output ec2.DescribeIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeIdFormatAsync(ctx workflow.Context, input *ec2.DescribeIdFormatInput) *EC2DescribeIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIdFormat", input)
	return &EC2DescribeIdFormatFuture{Future: future}
}

func (a *EC2Stub) DescribeIdentityIdFormat(ctx workflow.Context, input *ec2.DescribeIdentityIdFormatInput) (*ec2.DescribeIdentityIdFormatOutput, error) {
	var output ec2.DescribeIdentityIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIdentityIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeIdentityIdFormatAsync(ctx workflow.Context, input *ec2.DescribeIdentityIdFormatInput) *EC2DescribeIdentityIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIdentityIdFormat", input)
	return &EC2DescribeIdentityIdFormatFuture{Future: future}
}

func (a *EC2Stub) DescribeImageAttribute(ctx workflow.Context, input *ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error) {
	var output ec2.DescribeImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeImageAttributeAsync(ctx workflow.Context, input *ec2.DescribeImageAttributeInput) *EC2DescribeImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImageAttribute", input)
	return &EC2DescribeImageAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeImages(ctx workflow.Context, input *ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error) {
	var output ec2.DescribeImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImages", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeImagesAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) *EC2DescribeImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImages", input)
	return &EC2DescribeImagesFuture{Future: future}
}

func (a *EC2Stub) DescribeImportImageTasks(ctx workflow.Context, input *ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error) {
	var output ec2.DescribeImportImageTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImportImageTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeImportImageTasksAsync(ctx workflow.Context, input *ec2.DescribeImportImageTasksInput) *EC2DescribeImportImageTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImportImageTasks", input)
	return &EC2DescribeImportImageTasksFuture{Future: future}
}

func (a *EC2Stub) DescribeImportSnapshotTasks(ctx workflow.Context, input *ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	var output ec2.DescribeImportSnapshotTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImportSnapshotTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeImportSnapshotTasksAsync(ctx workflow.Context, input *ec2.DescribeImportSnapshotTasksInput) *EC2DescribeImportSnapshotTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImportSnapshotTasks", input)
	return &EC2DescribeImportSnapshotTasksFuture{Future: future}
}

func (a *EC2Stub) DescribeInstanceAttribute(ctx workflow.Context, input *ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error) {
	var output ec2.DescribeInstanceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstanceAttributeAsync(ctx workflow.Context, input *ec2.DescribeInstanceAttributeInput) *EC2DescribeInstanceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceAttribute", input)
	return &EC2DescribeInstanceAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeInstanceCreditSpecifications(ctx workflow.Context, input *ec2.DescribeInstanceCreditSpecificationsInput) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
	var output ec2.DescribeInstanceCreditSpecificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceCreditSpecifications", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstanceCreditSpecificationsAsync(ctx workflow.Context, input *ec2.DescribeInstanceCreditSpecificationsInput) *EC2DescribeInstanceCreditSpecificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceCreditSpecifications", input)
	return &EC2DescribeInstanceCreditSpecificationsFuture{Future: future}
}

func (a *EC2Stub) DescribeInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.DescribeInstanceEventNotificationAttributesInput) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error) {
	var output ec2.DescribeInstanceEventNotificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceEventNotificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.DescribeInstanceEventNotificationAttributesInput) *EC2DescribeInstanceEventNotificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceEventNotificationAttributes", input)
	return &EC2DescribeInstanceEventNotificationAttributesFuture{Future: future}
}

func (a *EC2Stub) DescribeInstanceStatus(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error) {
	var output ec2.DescribeInstanceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstanceStatusAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) *EC2DescribeInstanceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceStatus", input)
	return &EC2DescribeInstanceStatusFuture{Future: future}
}

func (a *EC2Stub) DescribeInstanceTypeOfferings(ctx workflow.Context, input *ec2.DescribeInstanceTypeOfferingsInput) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
	var output ec2.DescribeInstanceTypeOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceTypeOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstanceTypeOfferingsAsync(ctx workflow.Context, input *ec2.DescribeInstanceTypeOfferingsInput) *EC2DescribeInstanceTypeOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceTypeOfferings", input)
	return &EC2DescribeInstanceTypeOfferingsFuture{Future: future}
}

func (a *EC2Stub) DescribeInstanceTypes(ctx workflow.Context, input *ec2.DescribeInstanceTypesInput) (*ec2.DescribeInstanceTypesOutput, error) {
	var output ec2.DescribeInstanceTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstanceTypesAsync(ctx workflow.Context, input *ec2.DescribeInstanceTypesInput) *EC2DescribeInstanceTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceTypes", input)
	return &EC2DescribeInstanceTypesFuture{Future: future}
}

func (a *EC2Stub) DescribeInstances(ctx workflow.Context, input *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error) {
	var output ec2.DescribeInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstancesAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *EC2DescribeInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstances", input)
	return &EC2DescribeInstancesFuture{Future: future}
}

func (a *EC2Stub) DescribeInternetGateways(ctx workflow.Context, input *ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error) {
	var output ec2.DescribeInternetGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInternetGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInternetGatewaysAsync(ctx workflow.Context, input *ec2.DescribeInternetGatewaysInput) *EC2DescribeInternetGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInternetGateways", input)
	return &EC2DescribeInternetGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeIpv6Pools(ctx workflow.Context, input *ec2.DescribeIpv6PoolsInput) (*ec2.DescribeIpv6PoolsOutput, error) {
	var output ec2.DescribeIpv6PoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIpv6Pools", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeIpv6PoolsAsync(ctx workflow.Context, input *ec2.DescribeIpv6PoolsInput) *EC2DescribeIpv6PoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIpv6Pools", input)
	return &EC2DescribeIpv6PoolsFuture{Future: future}
}

func (a *EC2Stub) DescribeKeyPairs(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error) {
	var output ec2.DescribeKeyPairsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeKeyPairs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeKeyPairsAsync(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) *EC2DescribeKeyPairsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeKeyPairs", input)
	return &EC2DescribeKeyPairsFuture{Future: future}
}

func (a *EC2Stub) DescribeLaunchTemplateVersions(ctx workflow.Context, input *ec2.DescribeLaunchTemplateVersionsInput) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
	var output ec2.DescribeLaunchTemplateVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLaunchTemplateVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLaunchTemplateVersionsAsync(ctx workflow.Context, input *ec2.DescribeLaunchTemplateVersionsInput) *EC2DescribeLaunchTemplateVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLaunchTemplateVersions", input)
	return &EC2DescribeLaunchTemplateVersionsFuture{Future: future}
}

func (a *EC2Stub) DescribeLaunchTemplates(ctx workflow.Context, input *ec2.DescribeLaunchTemplatesInput) (*ec2.DescribeLaunchTemplatesOutput, error) {
	var output ec2.DescribeLaunchTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLaunchTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLaunchTemplatesAsync(ctx workflow.Context, input *ec2.DescribeLaunchTemplatesInput) *EC2DescribeLaunchTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLaunchTemplates", input)
	return &EC2DescribeLaunchTemplatesFuture{Future: future}
}

func (a *EC2Stub) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) *EC2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", input)
	return &EC2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture{Future: future}
}

func (a *EC2Stub) DescribeLocalGatewayRouteTableVpcAssociations(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayRouteTableVpcAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLocalGatewayRouteTableVpcAssociationsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) *EC2DescribeLocalGatewayRouteTableVpcAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayRouteTableVpcAssociations", input)
	return &EC2DescribeLocalGatewayRouteTableVpcAssociationsFuture{Future: future}
}

func (a *EC2Stub) DescribeLocalGatewayRouteTables(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTablesInput) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayRouteTables", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLocalGatewayRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTablesInput) *EC2DescribeLocalGatewayRouteTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayRouteTables", input)
	return &EC2DescribeLocalGatewayRouteTablesFuture{Future: future}
}

func (a *EC2Stub) DescribeLocalGatewayVirtualInterfaceGroups(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
	var output ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayVirtualInterfaceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLocalGatewayVirtualInterfaceGroupsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) *EC2DescribeLocalGatewayVirtualInterfaceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayVirtualInterfaceGroups", input)
	return &EC2DescribeLocalGatewayVirtualInterfaceGroupsFuture{Future: future}
}

func (a *EC2Stub) DescribeLocalGatewayVirtualInterfaces(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
	var output ec2.DescribeLocalGatewayVirtualInterfacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayVirtualInterfaces", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLocalGatewayVirtualInterfacesAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput) *EC2DescribeLocalGatewayVirtualInterfacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayVirtualInterfaces", input)
	return &EC2DescribeLocalGatewayVirtualInterfacesFuture{Future: future}
}

func (a *EC2Stub) DescribeLocalGateways(ctx workflow.Context, input *ec2.DescribeLocalGatewaysInput) (*ec2.DescribeLocalGatewaysOutput, error) {
	var output ec2.DescribeLocalGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLocalGatewaysAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewaysInput) *EC2DescribeLocalGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGateways", input)
	return &EC2DescribeLocalGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeManagedPrefixLists(ctx workflow.Context, input *ec2.DescribeManagedPrefixListsInput) (*ec2.DescribeManagedPrefixListsOutput, error) {
	var output ec2.DescribeManagedPrefixListsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeManagedPrefixLists", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeManagedPrefixListsAsync(ctx workflow.Context, input *ec2.DescribeManagedPrefixListsInput) *EC2DescribeManagedPrefixListsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeManagedPrefixLists", input)
	return &EC2DescribeManagedPrefixListsFuture{Future: future}
}

func (a *EC2Stub) DescribeMovingAddresses(ctx workflow.Context, input *ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error) {
	var output ec2.DescribeMovingAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeMovingAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeMovingAddressesAsync(ctx workflow.Context, input *ec2.DescribeMovingAddressesInput) *EC2DescribeMovingAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeMovingAddresses", input)
	return &EC2DescribeMovingAddressesFuture{Future: future}
}

func (a *EC2Stub) DescribeNatGateways(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) (*ec2.DescribeNatGatewaysOutput, error) {
	var output ec2.DescribeNatGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNatGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeNatGatewaysAsync(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) *EC2DescribeNatGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNatGateways", input)
	return &EC2DescribeNatGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeNetworkAcls(ctx workflow.Context, input *ec2.DescribeNetworkAclsInput) (*ec2.DescribeNetworkAclsOutput, error) {
	var output ec2.DescribeNetworkAclsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkAcls", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeNetworkAclsAsync(ctx workflow.Context, input *ec2.DescribeNetworkAclsInput) *EC2DescribeNetworkAclsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkAcls", input)
	return &EC2DescribeNetworkAclsFuture{Future: future}
}

func (a *EC2Stub) DescribeNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	var output ec2.DescribeNetworkInterfaceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkInterfaceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfaceAttributeInput) *EC2DescribeNetworkInterfaceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkInterfaceAttribute", input)
	return &EC2DescribeNetworkInterfaceAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeNetworkInterfacePermissions(ctx workflow.Context, input *ec2.DescribeNetworkInterfacePermissionsInput) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	var output ec2.DescribeNetworkInterfacePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkInterfacePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeNetworkInterfacePermissionsAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacePermissionsInput) *EC2DescribeNetworkInterfacePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkInterfacePermissions", input)
	return &EC2DescribeNetworkInterfacePermissionsFuture{Future: future}
}

func (a *EC2Stub) DescribeNetworkInterfaces(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error) {
	var output ec2.DescribeNetworkInterfacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkInterfaces", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeNetworkInterfacesAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) *EC2DescribeNetworkInterfacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkInterfaces", input)
	return &EC2DescribeNetworkInterfacesFuture{Future: future}
}

func (a *EC2Stub) DescribePlacementGroups(ctx workflow.Context, input *ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error) {
	var output ec2.DescribePlacementGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePlacementGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribePlacementGroupsAsync(ctx workflow.Context, input *ec2.DescribePlacementGroupsInput) *EC2DescribePlacementGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePlacementGroups", input)
	return &EC2DescribePlacementGroupsFuture{Future: future}
}

func (a *EC2Stub) DescribePrefixLists(ctx workflow.Context, input *ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error) {
	var output ec2.DescribePrefixListsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePrefixLists", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribePrefixListsAsync(ctx workflow.Context, input *ec2.DescribePrefixListsInput) *EC2DescribePrefixListsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePrefixLists", input)
	return &EC2DescribePrefixListsFuture{Future: future}
}

func (a *EC2Stub) DescribePrincipalIdFormat(ctx workflow.Context, input *ec2.DescribePrincipalIdFormatInput) (*ec2.DescribePrincipalIdFormatOutput, error) {
	var output ec2.DescribePrincipalIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePrincipalIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribePrincipalIdFormatAsync(ctx workflow.Context, input *ec2.DescribePrincipalIdFormatInput) *EC2DescribePrincipalIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePrincipalIdFormat", input)
	return &EC2DescribePrincipalIdFormatFuture{Future: future}
}

func (a *EC2Stub) DescribePublicIpv4Pools(ctx workflow.Context, input *ec2.DescribePublicIpv4PoolsInput) (*ec2.DescribePublicIpv4PoolsOutput, error) {
	var output ec2.DescribePublicIpv4PoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePublicIpv4Pools", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribePublicIpv4PoolsAsync(ctx workflow.Context, input *ec2.DescribePublicIpv4PoolsInput) *EC2DescribePublicIpv4PoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePublicIpv4Pools", input)
	return &EC2DescribePublicIpv4PoolsFuture{Future: future}
}

func (a *EC2Stub) DescribeRegions(ctx workflow.Context, input *ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error) {
	var output ec2.DescribeRegionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeRegions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeRegionsAsync(ctx workflow.Context, input *ec2.DescribeRegionsInput) *EC2DescribeRegionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeRegions", input)
	return &EC2DescribeRegionsFuture{Future: future}
}

func (a *EC2Stub) DescribeReservedInstances(ctx workflow.Context, input *ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error) {
	var output ec2.DescribeReservedInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeReservedInstancesAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesInput) *EC2DescribeReservedInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstances", input)
	return &EC2DescribeReservedInstancesFuture{Future: future}
}

func (a *EC2Stub) DescribeReservedInstancesListings(ctx workflow.Context, input *ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	var output ec2.DescribeReservedInstancesListingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstancesListings", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeReservedInstancesListingsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesListingsInput) *EC2DescribeReservedInstancesListingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstancesListings", input)
	return &EC2DescribeReservedInstancesListingsFuture{Future: future}
}

func (a *EC2Stub) DescribeReservedInstancesModifications(ctx workflow.Context, input *ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	var output ec2.DescribeReservedInstancesModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstancesModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeReservedInstancesModificationsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesModificationsInput) *EC2DescribeReservedInstancesModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstancesModifications", input)
	return &EC2DescribeReservedInstancesModificationsFuture{Future: future}
}

func (a *EC2Stub) DescribeReservedInstancesOfferings(ctx workflow.Context, input *ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	var output ec2.DescribeReservedInstancesOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstancesOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeReservedInstancesOfferingsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesOfferingsInput) *EC2DescribeReservedInstancesOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstancesOfferings", input)
	return &EC2DescribeReservedInstancesOfferingsFuture{Future: future}
}

func (a *EC2Stub) DescribeRouteTables(ctx workflow.Context, input *ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error) {
	var output ec2.DescribeRouteTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeRouteTables", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeRouteTablesInput) *EC2DescribeRouteTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeRouteTables", input)
	return &EC2DescribeRouteTablesFuture{Future: future}
}

func (a *EC2Stub) DescribeScheduledInstanceAvailability(ctx workflow.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	var output ec2.DescribeScheduledInstanceAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeScheduledInstanceAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeScheduledInstanceAvailabilityAsync(ctx workflow.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput) *EC2DescribeScheduledInstanceAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeScheduledInstanceAvailability", input)
	return &EC2DescribeScheduledInstanceAvailabilityFuture{Future: future}
}

func (a *EC2Stub) DescribeScheduledInstances(ctx workflow.Context, input *ec2.DescribeScheduledInstancesInput) (*ec2.DescribeScheduledInstancesOutput, error) {
	var output ec2.DescribeScheduledInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeScheduledInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeScheduledInstancesAsync(ctx workflow.Context, input *ec2.DescribeScheduledInstancesInput) *EC2DescribeScheduledInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeScheduledInstances", input)
	return &EC2DescribeScheduledInstancesFuture{Future: future}
}

func (a *EC2Stub) DescribeSecurityGroupReferences(ctx workflow.Context, input *ec2.DescribeSecurityGroupReferencesInput) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	var output ec2.DescribeSecurityGroupReferencesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSecurityGroupReferences", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSecurityGroupReferencesAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupReferencesInput) *EC2DescribeSecurityGroupReferencesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSecurityGroupReferences", input)
	return &EC2DescribeSecurityGroupReferencesFuture{Future: future}
}

func (a *EC2Stub) DescribeSecurityGroups(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error) {
	var output ec2.DescribeSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSecurityGroupsAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) *EC2DescribeSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSecurityGroups", input)
	return &EC2DescribeSecurityGroupsFuture{Future: future}
}

func (a *EC2Stub) DescribeSnapshotAttribute(ctx workflow.Context, input *ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error) {
	var output ec2.DescribeSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSnapshotAttributeAsync(ctx workflow.Context, input *ec2.DescribeSnapshotAttributeInput) *EC2DescribeSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSnapshotAttribute", input)
	return &EC2DescribeSnapshotAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeSnapshots(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error) {
	var output ec2.DescribeSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSnapshotsAsync(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) *EC2DescribeSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSnapshots", input)
	return &EC2DescribeSnapshotsFuture{Future: future}
}

func (a *EC2Stub) DescribeSpotDatafeedSubscription(ctx workflow.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	var output ec2.DescribeSpotDatafeedSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotDatafeedSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput) *EC2DescribeSpotDatafeedSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotDatafeedSubscription", input)
	return &EC2DescribeSpotDatafeedSubscriptionFuture{Future: future}
}

func (a *EC2Stub) DescribeSpotFleetInstances(ctx workflow.Context, input *ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	var output ec2.DescribeSpotFleetInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotFleetInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSpotFleetInstancesAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetInstancesInput) *EC2DescribeSpotFleetInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotFleetInstances", input)
	return &EC2DescribeSpotFleetInstancesFuture{Future: future}
}

func (a *EC2Stub) DescribeSpotFleetRequestHistory(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	var output ec2.DescribeSpotFleetRequestHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotFleetRequestHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSpotFleetRequestHistoryAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestHistoryInput) *EC2DescribeSpotFleetRequestHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotFleetRequestHistory", input)
	return &EC2DescribeSpotFleetRequestHistoryFuture{Future: future}
}

func (a *EC2Stub) DescribeSpotFleetRequests(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	var output ec2.DescribeSpotFleetRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotFleetRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSpotFleetRequestsAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestsInput) *EC2DescribeSpotFleetRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotFleetRequests", input)
	return &EC2DescribeSpotFleetRequestsFuture{Future: future}
}

func (a *EC2Stub) DescribeSpotInstanceRequests(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	var output ec2.DescribeSpotInstanceRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotInstanceRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSpotInstanceRequestsAsync(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) *EC2DescribeSpotInstanceRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotInstanceRequests", input)
	return &EC2DescribeSpotInstanceRequestsFuture{Future: future}
}

func (a *EC2Stub) DescribeSpotPriceHistory(ctx workflow.Context, input *ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	var output ec2.DescribeSpotPriceHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotPriceHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSpotPriceHistoryAsync(ctx workflow.Context, input *ec2.DescribeSpotPriceHistoryInput) *EC2DescribeSpotPriceHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotPriceHistory", input)
	return &EC2DescribeSpotPriceHistoryFuture{Future: future}
}

func (a *EC2Stub) DescribeStaleSecurityGroups(ctx workflow.Context, input *ec2.DescribeStaleSecurityGroupsInput) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	var output ec2.DescribeStaleSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeStaleSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeStaleSecurityGroupsAsync(ctx workflow.Context, input *ec2.DescribeStaleSecurityGroupsInput) *EC2DescribeStaleSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeStaleSecurityGroups", input)
	return &EC2DescribeStaleSecurityGroupsFuture{Future: future}
}

func (a *EC2Stub) DescribeSubnets(ctx workflow.Context, input *ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error) {
	var output ec2.DescribeSubnetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSubnets", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSubnetsAsync(ctx workflow.Context, input *ec2.DescribeSubnetsInput) *EC2DescribeSubnetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSubnets", input)
	return &EC2DescribeSubnetsFuture{Future: future}
}

func (a *EC2Stub) DescribeTags(ctx workflow.Context, input *ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error) {
	var output ec2.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTagsAsync(ctx workflow.Context, input *ec2.DescribeTagsInput) *EC2DescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTags", input)
	return &EC2DescribeTagsFuture{Future: future}
}

func (a *EC2Stub) DescribeTrafficMirrorFilters(ctx workflow.Context, input *ec2.DescribeTrafficMirrorFiltersInput) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
	var output ec2.DescribeTrafficMirrorFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTrafficMirrorFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTrafficMirrorFiltersAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorFiltersInput) *EC2DescribeTrafficMirrorFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTrafficMirrorFilters", input)
	return &EC2DescribeTrafficMirrorFiltersFuture{Future: future}
}

func (a *EC2Stub) DescribeTrafficMirrorSessions(ctx workflow.Context, input *ec2.DescribeTrafficMirrorSessionsInput) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
	var output ec2.DescribeTrafficMirrorSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTrafficMirrorSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTrafficMirrorSessionsAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorSessionsInput) *EC2DescribeTrafficMirrorSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTrafficMirrorSessions", input)
	return &EC2DescribeTrafficMirrorSessionsFuture{Future: future}
}

func (a *EC2Stub) DescribeTrafficMirrorTargets(ctx workflow.Context, input *ec2.DescribeTrafficMirrorTargetsInput) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
	var output ec2.DescribeTrafficMirrorTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTrafficMirrorTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTrafficMirrorTargetsAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorTargetsInput) *EC2DescribeTrafficMirrorTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTrafficMirrorTargets", input)
	return &EC2DescribeTrafficMirrorTargetsFuture{Future: future}
}

func (a *EC2Stub) DescribeTransitGatewayAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTransitGatewayAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayAttachmentsInput) *EC2DescribeTransitGatewayAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayAttachments", input)
	return &EC2DescribeTransitGatewayAttachmentsFuture{Future: future}
}

func (a *EC2Stub) DescribeTransitGatewayMulticastDomains(ctx workflow.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
	var output ec2.DescribeTransitGatewayMulticastDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayMulticastDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTransitGatewayMulticastDomainsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput) *EC2DescribeTransitGatewayMulticastDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayMulticastDomains", input)
	return &EC2DescribeTransitGatewayMulticastDomainsFuture{Future: future}
}

func (a *EC2Stub) DescribeTransitGatewayPeeringAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayPeeringAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayPeeringAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTransitGatewayPeeringAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput) *EC2DescribeTransitGatewayPeeringAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayPeeringAttachments", input)
	return &EC2DescribeTransitGatewayPeeringAttachmentsFuture{Future: future}
}

func (a *EC2Stub) DescribeTransitGatewayRouteTables(ctx workflow.Context, input *ec2.DescribeTransitGatewayRouteTablesInput) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
	var output ec2.DescribeTransitGatewayRouteTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayRouteTables", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTransitGatewayRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayRouteTablesInput) *EC2DescribeTransitGatewayRouteTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayRouteTables", input)
	return &EC2DescribeTransitGatewayRouteTablesFuture{Future: future}
}

func (a *EC2Stub) DescribeTransitGatewayVpcAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayVpcAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayVpcAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTransitGatewayVpcAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput) *EC2DescribeTransitGatewayVpcAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayVpcAttachments", input)
	return &EC2DescribeTransitGatewayVpcAttachmentsFuture{Future: future}
}

func (a *EC2Stub) DescribeTransitGateways(ctx workflow.Context, input *ec2.DescribeTransitGatewaysInput) (*ec2.DescribeTransitGatewaysOutput, error) {
	var output ec2.DescribeTransitGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTransitGatewaysAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewaysInput) *EC2DescribeTransitGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGateways", input)
	return &EC2DescribeTransitGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeVolumeAttribute(ctx workflow.Context, input *ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error) {
	var output ec2.DescribeVolumeAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumeAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVolumeAttributeAsync(ctx workflow.Context, input *ec2.DescribeVolumeAttributeInput) *EC2DescribeVolumeAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumeAttribute", input)
	return &EC2DescribeVolumeAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeVolumeStatus(ctx workflow.Context, input *ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error) {
	var output ec2.DescribeVolumeStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumeStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVolumeStatusAsync(ctx workflow.Context, input *ec2.DescribeVolumeStatusInput) *EC2DescribeVolumeStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumeStatus", input)
	return &EC2DescribeVolumeStatusFuture{Future: future}
}

func (a *EC2Stub) DescribeVolumes(ctx workflow.Context, input *ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error) {
	var output ec2.DescribeVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVolumesAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *EC2DescribeVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumes", input)
	return &EC2DescribeVolumesFuture{Future: future}
}

func (a *EC2Stub) DescribeVolumesModifications(ctx workflow.Context, input *ec2.DescribeVolumesModificationsInput) (*ec2.DescribeVolumesModificationsOutput, error) {
	var output ec2.DescribeVolumesModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumesModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVolumesModificationsAsync(ctx workflow.Context, input *ec2.DescribeVolumesModificationsInput) *EC2DescribeVolumesModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumesModifications", input)
	return &EC2DescribeVolumesModificationsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcAttribute(ctx workflow.Context, input *ec2.DescribeVpcAttributeInput) (*ec2.DescribeVpcAttributeOutput, error) {
	var output ec2.DescribeVpcAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcAttributeAsync(ctx workflow.Context, input *ec2.DescribeVpcAttributeInput) *EC2DescribeVpcAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcAttribute", input)
	return &EC2DescribeVpcAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcClassicLink(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkInput) (*ec2.DescribeVpcClassicLinkOutput, error) {
	var output ec2.DescribeVpcClassicLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcClassicLink", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcClassicLinkAsync(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkInput) *EC2DescribeVpcClassicLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcClassicLink", input)
	return &EC2DescribeVpcClassicLinkFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.DescribeVpcClassicLinkDnsSupportOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcClassicLinkDnsSupport", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput) *EC2DescribeVpcClassicLinkDnsSupportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcClassicLinkDnsSupport", input)
	return &EC2DescribeVpcClassicLinkDnsSupportFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcEndpointConnectionNotifications(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
	var output ec2.DescribeVpcEndpointConnectionNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointConnectionNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcEndpointConnectionNotificationsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput) *EC2DescribeVpcEndpointConnectionNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointConnectionNotifications", input)
	return &EC2DescribeVpcEndpointConnectionNotificationsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcEndpointConnections(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionsInput) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
	var output ec2.DescribeVpcEndpointConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionsInput) *EC2DescribeVpcEndpointConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointConnections", input)
	return &EC2DescribeVpcEndpointConnectionsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcEndpointServiceConfigurations(ctx workflow.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	var output ec2.DescribeVpcEndpointServiceConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointServiceConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcEndpointServiceConfigurationsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput) *EC2DescribeVpcEndpointServiceConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointServiceConfigurations", input)
	return &EC2DescribeVpcEndpointServiceConfigurationsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcEndpointServicePermissions(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	var output ec2.DescribeVpcEndpointServicePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointServicePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcEndpointServicePermissionsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput) *EC2DescribeVpcEndpointServicePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointServicePermissions", input)
	return &EC2DescribeVpcEndpointServicePermissionsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcEndpointServices(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicesInput) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	var output ec2.DescribeVpcEndpointServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointServices", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcEndpointServicesAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicesInput) *EC2DescribeVpcEndpointServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointServices", input)
	return &EC2DescribeVpcEndpointServicesFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcEndpoints(ctx workflow.Context, input *ec2.DescribeVpcEndpointsInput) (*ec2.DescribeVpcEndpointsOutput, error) {
	var output ec2.DescribeVpcEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcEndpointsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointsInput) *EC2DescribeVpcEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpoints", input)
	return &EC2DescribeVpcEndpointsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcPeeringConnections(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	var output ec2.DescribeVpcPeeringConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcPeeringConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcPeeringConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) *EC2DescribeVpcPeeringConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcPeeringConnections", input)
	return &EC2DescribeVpcPeeringConnectionsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcs(ctx workflow.Context, input *ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error) {
	var output ec2.DescribeVpcsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcsAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) *EC2DescribeVpcsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcs", input)
	return &EC2DescribeVpcsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpnConnections(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) (*ec2.DescribeVpnConnectionsOutput, error) {
	var output ec2.DescribeVpnConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpnConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpnConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) *EC2DescribeVpnConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpnConnections", input)
	return &EC2DescribeVpnConnectionsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpnGateways(ctx workflow.Context, input *ec2.DescribeVpnGatewaysInput) (*ec2.DescribeVpnGatewaysOutput, error) {
	var output ec2.DescribeVpnGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpnGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpnGatewaysAsync(ctx workflow.Context, input *ec2.DescribeVpnGatewaysInput) *EC2DescribeVpnGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpnGateways", input)
	return &EC2DescribeVpnGatewaysFuture{Future: future}
}

func (a *EC2Stub) DetachClassicLinkVpc(ctx workflow.Context, input *ec2.DetachClassicLinkVpcInput) (*ec2.DetachClassicLinkVpcOutput, error) {
	var output ec2.DetachClassicLinkVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DetachClassicLinkVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DetachClassicLinkVpcAsync(ctx workflow.Context, input *ec2.DetachClassicLinkVpcInput) *EC2DetachClassicLinkVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DetachClassicLinkVpc", input)
	return &EC2DetachClassicLinkVpcFuture{Future: future}
}

func (a *EC2Stub) DetachInternetGateway(ctx workflow.Context, input *ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error) {
	var output ec2.DetachInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DetachInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DetachInternetGatewayAsync(ctx workflow.Context, input *ec2.DetachInternetGatewayInput) *EC2DetachInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DetachInternetGateway", input)
	return &EC2DetachInternetGatewayFuture{Future: future}
}

func (a *EC2Stub) DetachNetworkInterface(ctx workflow.Context, input *ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error) {
	var output ec2.DetachNetworkInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DetachNetworkInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DetachNetworkInterfaceAsync(ctx workflow.Context, input *ec2.DetachNetworkInterfaceInput) *EC2DetachNetworkInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DetachNetworkInterface", input)
	return &EC2DetachNetworkInterfaceFuture{Future: future}
}

func (a *EC2Stub) DetachVolume(ctx workflow.Context, input *ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error) {
	var output ec2.VolumeAttachment
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DetachVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DetachVolumeAsync(ctx workflow.Context, input *ec2.DetachVolumeInput) *EC2DetachVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DetachVolume", input)
	return &EC2DetachVolumeFuture{Future: future}
}

func (a *EC2Stub) DetachVpnGateway(ctx workflow.Context, input *ec2.DetachVpnGatewayInput) (*ec2.DetachVpnGatewayOutput, error) {
	var output ec2.DetachVpnGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DetachVpnGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DetachVpnGatewayAsync(ctx workflow.Context, input *ec2.DetachVpnGatewayInput) *EC2DetachVpnGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DetachVpnGateway", input)
	return &EC2DetachVpnGatewayFuture{Future: future}
}

func (a *EC2Stub) DisableEbsEncryptionByDefault(ctx workflow.Context, input *ec2.DisableEbsEncryptionByDefaultInput) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
	var output ec2.DisableEbsEncryptionByDefaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisableEbsEncryptionByDefault", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisableEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.DisableEbsEncryptionByDefaultInput) *EC2DisableEbsEncryptionByDefaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisableEbsEncryptionByDefault", input)
	return &EC2DisableEbsEncryptionByDefaultFuture{Future: future}
}

func (a *EC2Stub) DisableFastSnapshotRestores(ctx workflow.Context, input *ec2.DisableFastSnapshotRestoresInput) (*ec2.DisableFastSnapshotRestoresOutput, error) {
	var output ec2.DisableFastSnapshotRestoresOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisableFastSnapshotRestores", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisableFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.DisableFastSnapshotRestoresInput) *EC2DisableFastSnapshotRestoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisableFastSnapshotRestores", input)
	return &EC2DisableFastSnapshotRestoresFuture{Future: future}
}

func (a *EC2Stub) DisableTransitGatewayRouteTablePropagation(ctx workflow.Context, input *ec2.DisableTransitGatewayRouteTablePropagationInput) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
	var output ec2.DisableTransitGatewayRouteTablePropagationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisableTransitGatewayRouteTablePropagation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisableTransitGatewayRouteTablePropagationAsync(ctx workflow.Context, input *ec2.DisableTransitGatewayRouteTablePropagationInput) *EC2DisableTransitGatewayRouteTablePropagationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisableTransitGatewayRouteTablePropagation", input)
	return &EC2DisableTransitGatewayRouteTablePropagationFuture{Future: future}
}

func (a *EC2Stub) DisableVgwRoutePropagation(ctx workflow.Context, input *ec2.DisableVgwRoutePropagationInput) (*ec2.DisableVgwRoutePropagationOutput, error) {
	var output ec2.DisableVgwRoutePropagationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisableVgwRoutePropagation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisableVgwRoutePropagationAsync(ctx workflow.Context, input *ec2.DisableVgwRoutePropagationInput) *EC2DisableVgwRoutePropagationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisableVgwRoutePropagation", input)
	return &EC2DisableVgwRoutePropagationFuture{Future: future}
}

func (a *EC2Stub) DisableVpcClassicLink(ctx workflow.Context, input *ec2.DisableVpcClassicLinkInput) (*ec2.DisableVpcClassicLinkOutput, error) {
	var output ec2.DisableVpcClassicLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisableVpcClassicLink", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisableVpcClassicLinkAsync(ctx workflow.Context, input *ec2.DisableVpcClassicLinkInput) *EC2DisableVpcClassicLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisableVpcClassicLink", input)
	return &EC2DisableVpcClassicLinkFuture{Future: future}
}

func (a *EC2Stub) DisableVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.DisableVpcClassicLinkDnsSupportOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisableVpcClassicLinkDnsSupport", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisableVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput) *EC2DisableVpcClassicLinkDnsSupportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisableVpcClassicLinkDnsSupport", input)
	return &EC2DisableVpcClassicLinkDnsSupportFuture{Future: future}
}

func (a *EC2Stub) DisassociateAddress(ctx workflow.Context, input *ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error) {
	var output ec2.DisassociateAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateAddressAsync(ctx workflow.Context, input *ec2.DisassociateAddressInput) *EC2DisassociateAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateAddress", input)
	return &EC2DisassociateAddressFuture{Future: future}
}

func (a *EC2Stub) DisassociateClientVpnTargetNetwork(ctx workflow.Context, input *ec2.DisassociateClientVpnTargetNetworkInput) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
	var output ec2.DisassociateClientVpnTargetNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateClientVpnTargetNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.DisassociateClientVpnTargetNetworkInput) *EC2DisassociateClientVpnTargetNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateClientVpnTargetNetwork", input)
	return &EC2DisassociateClientVpnTargetNetworkFuture{Future: future}
}

func (a *EC2Stub) DisassociateIamInstanceProfile(ctx workflow.Context, input *ec2.DisassociateIamInstanceProfileInput) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	var output ec2.DisassociateIamInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateIamInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateIamInstanceProfileAsync(ctx workflow.Context, input *ec2.DisassociateIamInstanceProfileInput) *EC2DisassociateIamInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateIamInstanceProfile", input)
	return &EC2DisassociateIamInstanceProfileFuture{Future: future}
}

func (a *EC2Stub) DisassociateRouteTable(ctx workflow.Context, input *ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error) {
	var output ec2.DisassociateRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateRouteTableAsync(ctx workflow.Context, input *ec2.DisassociateRouteTableInput) *EC2DisassociateRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateRouteTable", input)
	return &EC2DisassociateRouteTableFuture{Future: future}
}

func (a *EC2Stub) DisassociateSubnetCidrBlock(ctx workflow.Context, input *ec2.DisassociateSubnetCidrBlockInput) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	var output ec2.DisassociateSubnetCidrBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateSubnetCidrBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateSubnetCidrBlockAsync(ctx workflow.Context, input *ec2.DisassociateSubnetCidrBlockInput) *EC2DisassociateSubnetCidrBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateSubnetCidrBlock", input)
	return &EC2DisassociateSubnetCidrBlockFuture{Future: future}
}

func (a *EC2Stub) DisassociateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.DisassociateTransitGatewayMulticastDomainInput) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.DisassociateTransitGatewayMulticastDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateTransitGatewayMulticastDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.DisassociateTransitGatewayMulticastDomainInput) *EC2DisassociateTransitGatewayMulticastDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateTransitGatewayMulticastDomain", input)
	return &EC2DisassociateTransitGatewayMulticastDomainFuture{Future: future}
}

func (a *EC2Stub) DisassociateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.DisassociateTransitGatewayRouteTableInput) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
	var output ec2.DisassociateTransitGatewayRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateTransitGatewayRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.DisassociateTransitGatewayRouteTableInput) *EC2DisassociateTransitGatewayRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateTransitGatewayRouteTable", input)
	return &EC2DisassociateTransitGatewayRouteTableFuture{Future: future}
}

func (a *EC2Stub) DisassociateVpcCidrBlock(ctx workflow.Context, input *ec2.DisassociateVpcCidrBlockInput) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	var output ec2.DisassociateVpcCidrBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateVpcCidrBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateVpcCidrBlockAsync(ctx workflow.Context, input *ec2.DisassociateVpcCidrBlockInput) *EC2DisassociateVpcCidrBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateVpcCidrBlock", input)
	return &EC2DisassociateVpcCidrBlockFuture{Future: future}
}

func (a *EC2Stub) EnableEbsEncryptionByDefault(ctx workflow.Context, input *ec2.EnableEbsEncryptionByDefaultInput) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
	var output ec2.EnableEbsEncryptionByDefaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableEbsEncryptionByDefault", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.EnableEbsEncryptionByDefaultInput) *EC2EnableEbsEncryptionByDefaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableEbsEncryptionByDefault", input)
	return &EC2EnableEbsEncryptionByDefaultFuture{Future: future}
}

func (a *EC2Stub) EnableFastSnapshotRestores(ctx workflow.Context, input *ec2.EnableFastSnapshotRestoresInput) (*ec2.EnableFastSnapshotRestoresOutput, error) {
	var output ec2.EnableFastSnapshotRestoresOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableFastSnapshotRestores", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.EnableFastSnapshotRestoresInput) *EC2EnableFastSnapshotRestoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableFastSnapshotRestores", input)
	return &EC2EnableFastSnapshotRestoresFuture{Future: future}
}

func (a *EC2Stub) EnableTransitGatewayRouteTablePropagation(ctx workflow.Context, input *ec2.EnableTransitGatewayRouteTablePropagationInput) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
	var output ec2.EnableTransitGatewayRouteTablePropagationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableTransitGatewayRouteTablePropagation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableTransitGatewayRouteTablePropagationAsync(ctx workflow.Context, input *ec2.EnableTransitGatewayRouteTablePropagationInput) *EC2EnableTransitGatewayRouteTablePropagationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableTransitGatewayRouteTablePropagation", input)
	return &EC2EnableTransitGatewayRouteTablePropagationFuture{Future: future}
}

func (a *EC2Stub) EnableVgwRoutePropagation(ctx workflow.Context, input *ec2.EnableVgwRoutePropagationInput) (*ec2.EnableVgwRoutePropagationOutput, error) {
	var output ec2.EnableVgwRoutePropagationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVgwRoutePropagation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableVgwRoutePropagationAsync(ctx workflow.Context, input *ec2.EnableVgwRoutePropagationInput) *EC2EnableVgwRoutePropagationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVgwRoutePropagation", input)
	return &EC2EnableVgwRoutePropagationFuture{Future: future}
}

func (a *EC2Stub) EnableVolumeIO(ctx workflow.Context, input *ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error) {
	var output ec2.EnableVolumeIOOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVolumeIO", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableVolumeIOAsync(ctx workflow.Context, input *ec2.EnableVolumeIOInput) *EC2EnableVolumeIOFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVolumeIO", input)
	return &EC2EnableVolumeIOFuture{Future: future}
}

func (a *EC2Stub) EnableVpcClassicLink(ctx workflow.Context, input *ec2.EnableVpcClassicLinkInput) (*ec2.EnableVpcClassicLinkOutput, error) {
	var output ec2.EnableVpcClassicLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVpcClassicLink", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableVpcClassicLinkAsync(ctx workflow.Context, input *ec2.EnableVpcClassicLinkInput) *EC2EnableVpcClassicLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVpcClassicLink", input)
	return &EC2EnableVpcClassicLinkFuture{Future: future}
}

func (a *EC2Stub) EnableVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.EnableVpcClassicLinkDnsSupportOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVpcClassicLinkDnsSupport", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput) *EC2EnableVpcClassicLinkDnsSupportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVpcClassicLinkDnsSupport", input)
	return &EC2EnableVpcClassicLinkDnsSupportFuture{Future: future}
}

func (a *EC2Stub) ExportClientVpnClientCertificateRevocationList(ctx workflow.Context, input *ec2.ExportClientVpnClientCertificateRevocationListInput) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
	var output ec2.ExportClientVpnClientCertificateRevocationListOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ExportClientVpnClientCertificateRevocationList", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ExportClientVpnClientCertificateRevocationListAsync(ctx workflow.Context, input *ec2.ExportClientVpnClientCertificateRevocationListInput) *EC2ExportClientVpnClientCertificateRevocationListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ExportClientVpnClientCertificateRevocationList", input)
	return &EC2ExportClientVpnClientCertificateRevocationListFuture{Future: future}
}

func (a *EC2Stub) ExportClientVpnClientConfiguration(ctx workflow.Context, input *ec2.ExportClientVpnClientConfigurationInput) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
	var output ec2.ExportClientVpnClientConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ExportClientVpnClientConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ExportClientVpnClientConfigurationAsync(ctx workflow.Context, input *ec2.ExportClientVpnClientConfigurationInput) *EC2ExportClientVpnClientConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ExportClientVpnClientConfiguration", input)
	return &EC2ExportClientVpnClientConfigurationFuture{Future: future}
}

func (a *EC2Stub) ExportImage(ctx workflow.Context, input *ec2.ExportImageInput) (*ec2.ExportImageOutput, error) {
	var output ec2.ExportImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ExportImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ExportImageAsync(ctx workflow.Context, input *ec2.ExportImageInput) *EC2ExportImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ExportImage", input)
	return &EC2ExportImageFuture{Future: future}
}

func (a *EC2Stub) ExportTransitGatewayRoutes(ctx workflow.Context, input *ec2.ExportTransitGatewayRoutesInput) (*ec2.ExportTransitGatewayRoutesOutput, error) {
	var output ec2.ExportTransitGatewayRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ExportTransitGatewayRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ExportTransitGatewayRoutesAsync(ctx workflow.Context, input *ec2.ExportTransitGatewayRoutesInput) *EC2ExportTransitGatewayRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ExportTransitGatewayRoutes", input)
	return &EC2ExportTransitGatewayRoutesFuture{Future: future}
}

func (a *EC2Stub) GetAssociatedIpv6PoolCidrs(ctx workflow.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
	var output ec2.GetAssociatedIpv6PoolCidrsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetAssociatedIpv6PoolCidrs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetAssociatedIpv6PoolCidrsAsync(ctx workflow.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput) *EC2GetAssociatedIpv6PoolCidrsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetAssociatedIpv6PoolCidrs", input)
	return &EC2GetAssociatedIpv6PoolCidrsFuture{Future: future}
}

func (a *EC2Stub) GetCapacityReservationUsage(ctx workflow.Context, input *ec2.GetCapacityReservationUsageInput) (*ec2.GetCapacityReservationUsageOutput, error) {
	var output ec2.GetCapacityReservationUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetCapacityReservationUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetCapacityReservationUsageAsync(ctx workflow.Context, input *ec2.GetCapacityReservationUsageInput) *EC2GetCapacityReservationUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetCapacityReservationUsage", input)
	return &EC2GetCapacityReservationUsageFuture{Future: future}
}

func (a *EC2Stub) GetCoipPoolUsage(ctx workflow.Context, input *ec2.GetCoipPoolUsageInput) (*ec2.GetCoipPoolUsageOutput, error) {
	var output ec2.GetCoipPoolUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetCoipPoolUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetCoipPoolUsageAsync(ctx workflow.Context, input *ec2.GetCoipPoolUsageInput) *EC2GetCoipPoolUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetCoipPoolUsage", input)
	return &EC2GetCoipPoolUsageFuture{Future: future}
}

func (a *EC2Stub) GetConsoleOutput(ctx workflow.Context, input *ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error) {
	var output ec2.GetConsoleOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetConsoleOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetConsoleOutputAsync(ctx workflow.Context, input *ec2.GetConsoleOutputInput) *EC2GetConsoleOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetConsoleOutput", input)
	return &EC2GetConsoleOutputFuture{Future: future}
}

func (a *EC2Stub) GetConsoleScreenshot(ctx workflow.Context, input *ec2.GetConsoleScreenshotInput) (*ec2.GetConsoleScreenshotOutput, error) {
	var output ec2.GetConsoleScreenshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetConsoleScreenshot", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetConsoleScreenshotAsync(ctx workflow.Context, input *ec2.GetConsoleScreenshotInput) *EC2GetConsoleScreenshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetConsoleScreenshot", input)
	return &EC2GetConsoleScreenshotFuture{Future: future}
}

func (a *EC2Stub) GetDefaultCreditSpecification(ctx workflow.Context, input *ec2.GetDefaultCreditSpecificationInput) (*ec2.GetDefaultCreditSpecificationOutput, error) {
	var output ec2.GetDefaultCreditSpecificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetDefaultCreditSpecification", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetDefaultCreditSpecificationAsync(ctx workflow.Context, input *ec2.GetDefaultCreditSpecificationInput) *EC2GetDefaultCreditSpecificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetDefaultCreditSpecification", input)
	return &EC2GetDefaultCreditSpecificationFuture{Future: future}
}

func (a *EC2Stub) GetEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.GetEbsDefaultKmsKeyIdInput) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.GetEbsDefaultKmsKeyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetEbsDefaultKmsKeyId", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.GetEbsDefaultKmsKeyIdInput) *EC2GetEbsDefaultKmsKeyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetEbsDefaultKmsKeyId", input)
	return &EC2GetEbsDefaultKmsKeyIdFuture{Future: future}
}

func (a *EC2Stub) GetEbsEncryptionByDefault(ctx workflow.Context, input *ec2.GetEbsEncryptionByDefaultInput) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
	var output ec2.GetEbsEncryptionByDefaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetEbsEncryptionByDefault", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.GetEbsEncryptionByDefaultInput) *EC2GetEbsEncryptionByDefaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetEbsEncryptionByDefault", input)
	return &EC2GetEbsEncryptionByDefaultFuture{Future: future}
}

func (a *EC2Stub) GetGroupsForCapacityReservation(ctx workflow.Context, input *ec2.GetGroupsForCapacityReservationInput) (*ec2.GetGroupsForCapacityReservationOutput, error) {
	var output ec2.GetGroupsForCapacityReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetGroupsForCapacityReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetGroupsForCapacityReservationAsync(ctx workflow.Context, input *ec2.GetGroupsForCapacityReservationInput) *EC2GetGroupsForCapacityReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetGroupsForCapacityReservation", input)
	return &EC2GetGroupsForCapacityReservationFuture{Future: future}
}

func (a *EC2Stub) GetHostReservationPurchasePreview(ctx workflow.Context, input *ec2.GetHostReservationPurchasePreviewInput) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	var output ec2.GetHostReservationPurchasePreviewOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetHostReservationPurchasePreview", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetHostReservationPurchasePreviewAsync(ctx workflow.Context, input *ec2.GetHostReservationPurchasePreviewInput) *EC2GetHostReservationPurchasePreviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetHostReservationPurchasePreview", input)
	return &EC2GetHostReservationPurchasePreviewFuture{Future: future}
}

func (a *EC2Stub) GetLaunchTemplateData(ctx workflow.Context, input *ec2.GetLaunchTemplateDataInput) (*ec2.GetLaunchTemplateDataOutput, error) {
	var output ec2.GetLaunchTemplateDataOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetLaunchTemplateData", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetLaunchTemplateDataAsync(ctx workflow.Context, input *ec2.GetLaunchTemplateDataInput) *EC2GetLaunchTemplateDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetLaunchTemplateData", input)
	return &EC2GetLaunchTemplateDataFuture{Future: future}
}

func (a *EC2Stub) GetManagedPrefixListAssociations(ctx workflow.Context, input *ec2.GetManagedPrefixListAssociationsInput) (*ec2.GetManagedPrefixListAssociationsOutput, error) {
	var output ec2.GetManagedPrefixListAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetManagedPrefixListAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetManagedPrefixListAssociationsAsync(ctx workflow.Context, input *ec2.GetManagedPrefixListAssociationsInput) *EC2GetManagedPrefixListAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetManagedPrefixListAssociations", input)
	return &EC2GetManagedPrefixListAssociationsFuture{Future: future}
}

func (a *EC2Stub) GetManagedPrefixListEntries(ctx workflow.Context, input *ec2.GetManagedPrefixListEntriesInput) (*ec2.GetManagedPrefixListEntriesOutput, error) {
	var output ec2.GetManagedPrefixListEntriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetManagedPrefixListEntries", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetManagedPrefixListEntriesAsync(ctx workflow.Context, input *ec2.GetManagedPrefixListEntriesInput) *EC2GetManagedPrefixListEntriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetManagedPrefixListEntries", input)
	return &EC2GetManagedPrefixListEntriesFuture{Future: future}
}

func (a *EC2Stub) GetPasswordData(ctx workflow.Context, input *ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error) {
	var output ec2.GetPasswordDataOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetPasswordData", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetPasswordDataAsync(ctx workflow.Context, input *ec2.GetPasswordDataInput) *EC2GetPasswordDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetPasswordData", input)
	return &EC2GetPasswordDataFuture{Future: future}
}

func (a *EC2Stub) GetReservedInstancesExchangeQuote(ctx workflow.Context, input *ec2.GetReservedInstancesExchangeQuoteInput) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	var output ec2.GetReservedInstancesExchangeQuoteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetReservedInstancesExchangeQuote", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetReservedInstancesExchangeQuoteAsync(ctx workflow.Context, input *ec2.GetReservedInstancesExchangeQuoteInput) *EC2GetReservedInstancesExchangeQuoteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetReservedInstancesExchangeQuote", input)
	return &EC2GetReservedInstancesExchangeQuoteFuture{Future: future}
}

func (a *EC2Stub) GetTransitGatewayAttachmentPropagations(ctx workflow.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
	var output ec2.GetTransitGatewayAttachmentPropagationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayAttachmentPropagations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetTransitGatewayAttachmentPropagationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput) *EC2GetTransitGatewayAttachmentPropagationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayAttachmentPropagations", input)
	return &EC2GetTransitGatewayAttachmentPropagationsFuture{Future: future}
}

func (a *EC2Stub) GetTransitGatewayMulticastDomainAssociations(ctx workflow.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
	var output ec2.GetTransitGatewayMulticastDomainAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayMulticastDomainAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetTransitGatewayMulticastDomainAssociationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput) *EC2GetTransitGatewayMulticastDomainAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayMulticastDomainAssociations", input)
	return &EC2GetTransitGatewayMulticastDomainAssociationsFuture{Future: future}
}

func (a *EC2Stub) GetTransitGatewayPrefixListReferences(ctx workflow.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error) {
	var output ec2.GetTransitGatewayPrefixListReferencesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayPrefixListReferences", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetTransitGatewayPrefixListReferencesAsync(ctx workflow.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput) *EC2GetTransitGatewayPrefixListReferencesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayPrefixListReferences", input)
	return &EC2GetTransitGatewayPrefixListReferencesFuture{Future: future}
}

func (a *EC2Stub) GetTransitGatewayRouteTableAssociations(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
	var output ec2.GetTransitGatewayRouteTableAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayRouteTableAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetTransitGatewayRouteTableAssociationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput) *EC2GetTransitGatewayRouteTableAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayRouteTableAssociations", input)
	return &EC2GetTransitGatewayRouteTableAssociationsFuture{Future: future}
}

func (a *EC2Stub) GetTransitGatewayRouteTablePropagations(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
	var output ec2.GetTransitGatewayRouteTablePropagationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayRouteTablePropagations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetTransitGatewayRouteTablePropagationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput) *EC2GetTransitGatewayRouteTablePropagationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayRouteTablePropagations", input)
	return &EC2GetTransitGatewayRouteTablePropagationsFuture{Future: future}
}

func (a *EC2Stub) ImportClientVpnClientCertificateRevocationList(ctx workflow.Context, input *ec2.ImportClientVpnClientCertificateRevocationListInput) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
	var output ec2.ImportClientVpnClientCertificateRevocationListOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ImportClientVpnClientCertificateRevocationList", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ImportClientVpnClientCertificateRevocationListAsync(ctx workflow.Context, input *ec2.ImportClientVpnClientCertificateRevocationListInput) *EC2ImportClientVpnClientCertificateRevocationListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ImportClientVpnClientCertificateRevocationList", input)
	return &EC2ImportClientVpnClientCertificateRevocationListFuture{Future: future}
}

func (a *EC2Stub) ImportImage(ctx workflow.Context, input *ec2.ImportImageInput) (*ec2.ImportImageOutput, error) {
	var output ec2.ImportImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ImportImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ImportImageAsync(ctx workflow.Context, input *ec2.ImportImageInput) *EC2ImportImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ImportImage", input)
	return &EC2ImportImageFuture{Future: future}
}

func (a *EC2Stub) ImportInstance(ctx workflow.Context, input *ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error) {
	var output ec2.ImportInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ImportInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ImportInstanceAsync(ctx workflow.Context, input *ec2.ImportInstanceInput) *EC2ImportInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ImportInstance", input)
	return &EC2ImportInstanceFuture{Future: future}
}

func (a *EC2Stub) ImportKeyPair(ctx workflow.Context, input *ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error) {
	var output ec2.ImportKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ImportKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ImportKeyPairAsync(ctx workflow.Context, input *ec2.ImportKeyPairInput) *EC2ImportKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ImportKeyPair", input)
	return &EC2ImportKeyPairFuture{Future: future}
}

func (a *EC2Stub) ImportSnapshot(ctx workflow.Context, input *ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error) {
	var output ec2.ImportSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ImportSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ImportSnapshotAsync(ctx workflow.Context, input *ec2.ImportSnapshotInput) *EC2ImportSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ImportSnapshot", input)
	return &EC2ImportSnapshotFuture{Future: future}
}

func (a *EC2Stub) ImportVolume(ctx workflow.Context, input *ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error) {
	var output ec2.ImportVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ImportVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ImportVolumeAsync(ctx workflow.Context, input *ec2.ImportVolumeInput) *EC2ImportVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ImportVolume", input)
	return &EC2ImportVolumeFuture{Future: future}
}

func (a *EC2Stub) ModifyAvailabilityZoneGroup(ctx workflow.Context, input *ec2.ModifyAvailabilityZoneGroupInput) (*ec2.ModifyAvailabilityZoneGroupOutput, error) {
	var output ec2.ModifyAvailabilityZoneGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyAvailabilityZoneGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyAvailabilityZoneGroupAsync(ctx workflow.Context, input *ec2.ModifyAvailabilityZoneGroupInput) *EC2ModifyAvailabilityZoneGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyAvailabilityZoneGroup", input)
	return &EC2ModifyAvailabilityZoneGroupFuture{Future: future}
}

func (a *EC2Stub) ModifyCapacityReservation(ctx workflow.Context, input *ec2.ModifyCapacityReservationInput) (*ec2.ModifyCapacityReservationOutput, error) {
	var output ec2.ModifyCapacityReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyCapacityReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyCapacityReservationAsync(ctx workflow.Context, input *ec2.ModifyCapacityReservationInput) *EC2ModifyCapacityReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyCapacityReservation", input)
	return &EC2ModifyCapacityReservationFuture{Future: future}
}

func (a *EC2Stub) ModifyClientVpnEndpoint(ctx workflow.Context, input *ec2.ModifyClientVpnEndpointInput) (*ec2.ModifyClientVpnEndpointOutput, error) {
	var output ec2.ModifyClientVpnEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyClientVpnEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyClientVpnEndpointAsync(ctx workflow.Context, input *ec2.ModifyClientVpnEndpointInput) *EC2ModifyClientVpnEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyClientVpnEndpoint", input)
	return &EC2ModifyClientVpnEndpointFuture{Future: future}
}

func (a *EC2Stub) ModifyDefaultCreditSpecification(ctx workflow.Context, input *ec2.ModifyDefaultCreditSpecificationInput) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
	var output ec2.ModifyDefaultCreditSpecificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyDefaultCreditSpecification", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyDefaultCreditSpecificationAsync(ctx workflow.Context, input *ec2.ModifyDefaultCreditSpecificationInput) *EC2ModifyDefaultCreditSpecificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyDefaultCreditSpecification", input)
	return &EC2ModifyDefaultCreditSpecificationFuture{Future: future}
}

func (a *EC2Stub) ModifyEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.ModifyEbsDefaultKmsKeyIdInput) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.ModifyEbsDefaultKmsKeyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyEbsDefaultKmsKeyId", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.ModifyEbsDefaultKmsKeyIdInput) *EC2ModifyEbsDefaultKmsKeyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyEbsDefaultKmsKeyId", input)
	return &EC2ModifyEbsDefaultKmsKeyIdFuture{Future: future}
}

func (a *EC2Stub) ModifyFleet(ctx workflow.Context, input *ec2.ModifyFleetInput) (*ec2.ModifyFleetOutput, error) {
	var output ec2.ModifyFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyFleetAsync(ctx workflow.Context, input *ec2.ModifyFleetInput) *EC2ModifyFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyFleet", input)
	return &EC2ModifyFleetFuture{Future: future}
}

func (a *EC2Stub) ModifyFpgaImageAttribute(ctx workflow.Context, input *ec2.ModifyFpgaImageAttributeInput) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	var output ec2.ModifyFpgaImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyFpgaImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.ModifyFpgaImageAttributeInput) *EC2ModifyFpgaImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyFpgaImageAttribute", input)
	return &EC2ModifyFpgaImageAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyHosts(ctx workflow.Context, input *ec2.ModifyHostsInput) (*ec2.ModifyHostsOutput, error) {
	var output ec2.ModifyHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyHostsAsync(ctx workflow.Context, input *ec2.ModifyHostsInput) *EC2ModifyHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyHosts", input)
	return &EC2ModifyHostsFuture{Future: future}
}

func (a *EC2Stub) ModifyIdFormat(ctx workflow.Context, input *ec2.ModifyIdFormatInput) (*ec2.ModifyIdFormatOutput, error) {
	var output ec2.ModifyIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyIdFormatAsync(ctx workflow.Context, input *ec2.ModifyIdFormatInput) *EC2ModifyIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyIdFormat", input)
	return &EC2ModifyIdFormatFuture{Future: future}
}

func (a *EC2Stub) ModifyIdentityIdFormat(ctx workflow.Context, input *ec2.ModifyIdentityIdFormatInput) (*ec2.ModifyIdentityIdFormatOutput, error) {
	var output ec2.ModifyIdentityIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyIdentityIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyIdentityIdFormatAsync(ctx workflow.Context, input *ec2.ModifyIdentityIdFormatInput) *EC2ModifyIdentityIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyIdentityIdFormat", input)
	return &EC2ModifyIdentityIdFormatFuture{Future: future}
}

func (a *EC2Stub) ModifyImageAttribute(ctx workflow.Context, input *ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error) {
	var output ec2.ModifyImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyImageAttributeAsync(ctx workflow.Context, input *ec2.ModifyImageAttributeInput) *EC2ModifyImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyImageAttribute", input)
	return &EC2ModifyImageAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyInstanceAttribute(ctx workflow.Context, input *ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error) {
	var output ec2.ModifyInstanceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyInstanceAttributeAsync(ctx workflow.Context, input *ec2.ModifyInstanceAttributeInput) *EC2ModifyInstanceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceAttribute", input)
	return &EC2ModifyInstanceAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyInstanceCapacityReservationAttributes(ctx workflow.Context, input *ec2.ModifyInstanceCapacityReservationAttributesInput) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
	var output ec2.ModifyInstanceCapacityReservationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceCapacityReservationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyInstanceCapacityReservationAttributesAsync(ctx workflow.Context, input *ec2.ModifyInstanceCapacityReservationAttributesInput) *EC2ModifyInstanceCapacityReservationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceCapacityReservationAttributes", input)
	return &EC2ModifyInstanceCapacityReservationAttributesFuture{Future: future}
}

func (a *EC2Stub) ModifyInstanceCreditSpecification(ctx workflow.Context, input *ec2.ModifyInstanceCreditSpecificationInput) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
	var output ec2.ModifyInstanceCreditSpecificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceCreditSpecification", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyInstanceCreditSpecificationAsync(ctx workflow.Context, input *ec2.ModifyInstanceCreditSpecificationInput) *EC2ModifyInstanceCreditSpecificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceCreditSpecification", input)
	return &EC2ModifyInstanceCreditSpecificationFuture{Future: future}
}

func (a *EC2Stub) ModifyInstanceEventStartTime(ctx workflow.Context, input *ec2.ModifyInstanceEventStartTimeInput) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
	var output ec2.ModifyInstanceEventStartTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceEventStartTime", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyInstanceEventStartTimeAsync(ctx workflow.Context, input *ec2.ModifyInstanceEventStartTimeInput) *EC2ModifyInstanceEventStartTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceEventStartTime", input)
	return &EC2ModifyInstanceEventStartTimeFuture{Future: future}
}

func (a *EC2Stub) ModifyInstanceMetadataOptions(ctx workflow.Context, input *ec2.ModifyInstanceMetadataOptionsInput) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
	var output ec2.ModifyInstanceMetadataOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceMetadataOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyInstanceMetadataOptionsAsync(ctx workflow.Context, input *ec2.ModifyInstanceMetadataOptionsInput) *EC2ModifyInstanceMetadataOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceMetadataOptions", input)
	return &EC2ModifyInstanceMetadataOptionsFuture{Future: future}
}

func (a *EC2Stub) ModifyInstancePlacement(ctx workflow.Context, input *ec2.ModifyInstancePlacementInput) (*ec2.ModifyInstancePlacementOutput, error) {
	var output ec2.ModifyInstancePlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstancePlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyInstancePlacementAsync(ctx workflow.Context, input *ec2.ModifyInstancePlacementInput) *EC2ModifyInstancePlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstancePlacement", input)
	return &EC2ModifyInstancePlacementFuture{Future: future}
}

func (a *EC2Stub) ModifyLaunchTemplate(ctx workflow.Context, input *ec2.ModifyLaunchTemplateInput) (*ec2.ModifyLaunchTemplateOutput, error) {
	var output ec2.ModifyLaunchTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyLaunchTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyLaunchTemplateAsync(ctx workflow.Context, input *ec2.ModifyLaunchTemplateInput) *EC2ModifyLaunchTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyLaunchTemplate", input)
	return &EC2ModifyLaunchTemplateFuture{Future: future}
}

func (a *EC2Stub) ModifyManagedPrefixList(ctx workflow.Context, input *ec2.ModifyManagedPrefixListInput) (*ec2.ModifyManagedPrefixListOutput, error) {
	var output ec2.ModifyManagedPrefixListOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyManagedPrefixList", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyManagedPrefixListAsync(ctx workflow.Context, input *ec2.ModifyManagedPrefixListInput) *EC2ModifyManagedPrefixListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyManagedPrefixList", input)
	return &EC2ModifyManagedPrefixListFuture{Future: future}
}

func (a *EC2Stub) ModifyNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	var output ec2.ModifyNetworkInterfaceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyNetworkInterfaceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.ModifyNetworkInterfaceAttributeInput) *EC2ModifyNetworkInterfaceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyNetworkInterfaceAttribute", input)
	return &EC2ModifyNetworkInterfaceAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyReservedInstances(ctx workflow.Context, input *ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error) {
	var output ec2.ModifyReservedInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyReservedInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyReservedInstancesAsync(ctx workflow.Context, input *ec2.ModifyReservedInstancesInput) *EC2ModifyReservedInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyReservedInstances", input)
	return &EC2ModifyReservedInstancesFuture{Future: future}
}

func (a *EC2Stub) ModifySnapshotAttribute(ctx workflow.Context, input *ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error) {
	var output ec2.ModifySnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifySnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifySnapshotAttributeAsync(ctx workflow.Context, input *ec2.ModifySnapshotAttributeInput) *EC2ModifySnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifySnapshotAttribute", input)
	return &EC2ModifySnapshotAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifySubnetAttribute(ctx workflow.Context, input *ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error) {
	var output ec2.ModifySubnetAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifySubnetAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifySubnetAttributeAsync(ctx workflow.Context, input *ec2.ModifySubnetAttributeInput) *EC2ModifySubnetAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifySubnetAttribute", input)
	return &EC2ModifySubnetAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyTrafficMirrorFilterNetworkServices(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
	var output ec2.ModifyTrafficMirrorFilterNetworkServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTrafficMirrorFilterNetworkServices", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyTrafficMirrorFilterNetworkServicesAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) *EC2ModifyTrafficMirrorFilterNetworkServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTrafficMirrorFilterNetworkServices", input)
	return &EC2ModifyTrafficMirrorFilterNetworkServicesFuture{Future: future}
}

func (a *EC2Stub) ModifyTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterRuleInput) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
	var output ec2.ModifyTrafficMirrorFilterRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTrafficMirrorFilterRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterRuleInput) *EC2ModifyTrafficMirrorFilterRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTrafficMirrorFilterRule", input)
	return &EC2ModifyTrafficMirrorFilterRuleFuture{Future: future}
}

func (a *EC2Stub) ModifyTrafficMirrorSession(ctx workflow.Context, input *ec2.ModifyTrafficMirrorSessionInput) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
	var output ec2.ModifyTrafficMirrorSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTrafficMirrorSession", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorSessionInput) *EC2ModifyTrafficMirrorSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTrafficMirrorSession", input)
	return &EC2ModifyTrafficMirrorSessionFuture{Future: future}
}

func (a *EC2Stub) ModifyTransitGateway(ctx workflow.Context, input *ec2.ModifyTransitGatewayInput) (*ec2.ModifyTransitGatewayOutput, error) {
	var output ec2.ModifyTransitGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTransitGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyTransitGatewayAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayInput) *EC2ModifyTransitGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTransitGateway", input)
	return &EC2ModifyTransitGatewayFuture{Future: future}
}

func (a *EC2Stub) ModifyTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.ModifyTransitGatewayPrefixListReferenceInput) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.ModifyTransitGatewayPrefixListReferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTransitGatewayPrefixListReference", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayPrefixListReferenceInput) *EC2ModifyTransitGatewayPrefixListReferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTransitGatewayPrefixListReference", input)
	return &EC2ModifyTransitGatewayPrefixListReferenceFuture{Future: future}
}

func (a *EC2Stub) ModifyTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.ModifyTransitGatewayVpcAttachmentInput) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.ModifyTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayVpcAttachmentInput) *EC2ModifyTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTransitGatewayVpcAttachment", input)
	return &EC2ModifyTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *EC2Stub) ModifyVolume(ctx workflow.Context, input *ec2.ModifyVolumeInput) (*ec2.ModifyVolumeOutput, error) {
	var output ec2.ModifyVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVolumeAsync(ctx workflow.Context, input *ec2.ModifyVolumeInput) *EC2ModifyVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVolume", input)
	return &EC2ModifyVolumeFuture{Future: future}
}

func (a *EC2Stub) ModifyVolumeAttribute(ctx workflow.Context, input *ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error) {
	var output ec2.ModifyVolumeAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVolumeAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVolumeAttributeAsync(ctx workflow.Context, input *ec2.ModifyVolumeAttributeInput) *EC2ModifyVolumeAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVolumeAttribute", input)
	return &EC2ModifyVolumeAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcAttribute(ctx workflow.Context, input *ec2.ModifyVpcAttributeInput) (*ec2.ModifyVpcAttributeOutput, error) {
	var output ec2.ModifyVpcAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcAttributeAsync(ctx workflow.Context, input *ec2.ModifyVpcAttributeInput) *EC2ModifyVpcAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcAttribute", input)
	return &EC2ModifyVpcAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcEndpoint(ctx workflow.Context, input *ec2.ModifyVpcEndpointInput) (*ec2.ModifyVpcEndpointOutput, error) {
	var output ec2.ModifyVpcEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcEndpointAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointInput) *EC2ModifyVpcEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpoint", input)
	return &EC2ModifyVpcEndpointFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcEndpointConnectionNotification(ctx workflow.Context, input *ec2.ModifyVpcEndpointConnectionNotificationInput) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
	var output ec2.ModifyVpcEndpointConnectionNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpointConnectionNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcEndpointConnectionNotificationAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointConnectionNotificationInput) *EC2ModifyVpcEndpointConnectionNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpointConnectionNotification", input)
	return &EC2ModifyVpcEndpointConnectionNotificationFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcEndpointServiceConfiguration(ctx workflow.Context, input *ec2.ModifyVpcEndpointServiceConfigurationInput) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
	var output ec2.ModifyVpcEndpointServiceConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpointServiceConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcEndpointServiceConfigurationAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointServiceConfigurationInput) *EC2ModifyVpcEndpointServiceConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpointServiceConfiguration", input)
	return &EC2ModifyVpcEndpointServiceConfigurationFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcEndpointServicePermissions(ctx workflow.Context, input *ec2.ModifyVpcEndpointServicePermissionsInput) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	var output ec2.ModifyVpcEndpointServicePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpointServicePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcEndpointServicePermissionsAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointServicePermissionsInput) *EC2ModifyVpcEndpointServicePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpointServicePermissions", input)
	return &EC2ModifyVpcEndpointServicePermissionsFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcPeeringConnectionOptions(ctx workflow.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	var output ec2.ModifyVpcPeeringConnectionOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcPeeringConnectionOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcPeeringConnectionOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput) *EC2ModifyVpcPeeringConnectionOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcPeeringConnectionOptions", input)
	return &EC2ModifyVpcPeeringConnectionOptionsFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcTenancy(ctx workflow.Context, input *ec2.ModifyVpcTenancyInput) (*ec2.ModifyVpcTenancyOutput, error) {
	var output ec2.ModifyVpcTenancyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcTenancy", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcTenancyAsync(ctx workflow.Context, input *ec2.ModifyVpcTenancyInput) *EC2ModifyVpcTenancyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcTenancy", input)
	return &EC2ModifyVpcTenancyFuture{Future: future}
}

func (a *EC2Stub) ModifyVpnConnection(ctx workflow.Context, input *ec2.ModifyVpnConnectionInput) (*ec2.ModifyVpnConnectionOutput, error) {
	var output ec2.ModifyVpnConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpnConnectionAsync(ctx workflow.Context, input *ec2.ModifyVpnConnectionInput) *EC2ModifyVpnConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnConnection", input)
	return &EC2ModifyVpnConnectionFuture{Future: future}
}

func (a *EC2Stub) ModifyVpnConnectionOptions(ctx workflow.Context, input *ec2.ModifyVpnConnectionOptionsInput) (*ec2.ModifyVpnConnectionOptionsOutput, error) {
	var output ec2.ModifyVpnConnectionOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnConnectionOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpnConnectionOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpnConnectionOptionsInput) *EC2ModifyVpnConnectionOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnConnectionOptions", input)
	return &EC2ModifyVpnConnectionOptionsFuture{Future: future}
}

func (a *EC2Stub) ModifyVpnTunnelCertificate(ctx workflow.Context, input *ec2.ModifyVpnTunnelCertificateInput) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
	var output ec2.ModifyVpnTunnelCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnTunnelCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpnTunnelCertificateAsync(ctx workflow.Context, input *ec2.ModifyVpnTunnelCertificateInput) *EC2ModifyVpnTunnelCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnTunnelCertificate", input)
	return &EC2ModifyVpnTunnelCertificateFuture{Future: future}
}

func (a *EC2Stub) ModifyVpnTunnelOptions(ctx workflow.Context, input *ec2.ModifyVpnTunnelOptionsInput) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
	var output ec2.ModifyVpnTunnelOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnTunnelOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpnTunnelOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpnTunnelOptionsInput) *EC2ModifyVpnTunnelOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnTunnelOptions", input)
	return &EC2ModifyVpnTunnelOptionsFuture{Future: future}
}

func (a *EC2Stub) MonitorInstances(ctx workflow.Context, input *ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error) {
	var output ec2.MonitorInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.MonitorInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) MonitorInstancesAsync(ctx workflow.Context, input *ec2.MonitorInstancesInput) *EC2MonitorInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.MonitorInstances", input)
	return &EC2MonitorInstancesFuture{Future: future}
}

func (a *EC2Stub) MoveAddressToVpc(ctx workflow.Context, input *ec2.MoveAddressToVpcInput) (*ec2.MoveAddressToVpcOutput, error) {
	var output ec2.MoveAddressToVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.MoveAddressToVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) MoveAddressToVpcAsync(ctx workflow.Context, input *ec2.MoveAddressToVpcInput) *EC2MoveAddressToVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.MoveAddressToVpc", input)
	return &EC2MoveAddressToVpcFuture{Future: future}
}

func (a *EC2Stub) ProvisionByoipCidr(ctx workflow.Context, input *ec2.ProvisionByoipCidrInput) (*ec2.ProvisionByoipCidrOutput, error) {
	var output ec2.ProvisionByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ProvisionByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ProvisionByoipCidrAsync(ctx workflow.Context, input *ec2.ProvisionByoipCidrInput) *EC2ProvisionByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ProvisionByoipCidr", input)
	return &EC2ProvisionByoipCidrFuture{Future: future}
}

func (a *EC2Stub) PurchaseHostReservation(ctx workflow.Context, input *ec2.PurchaseHostReservationInput) (*ec2.PurchaseHostReservationOutput, error) {
	var output ec2.PurchaseHostReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.PurchaseHostReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) PurchaseHostReservationAsync(ctx workflow.Context, input *ec2.PurchaseHostReservationInput) *EC2PurchaseHostReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.PurchaseHostReservation", input)
	return &EC2PurchaseHostReservationFuture{Future: future}
}

func (a *EC2Stub) PurchaseReservedInstancesOffering(ctx workflow.Context, input *ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	var output ec2.PurchaseReservedInstancesOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.PurchaseReservedInstancesOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) PurchaseReservedInstancesOfferingAsync(ctx workflow.Context, input *ec2.PurchaseReservedInstancesOfferingInput) *EC2PurchaseReservedInstancesOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.PurchaseReservedInstancesOffering", input)
	return &EC2PurchaseReservedInstancesOfferingFuture{Future: future}
}

func (a *EC2Stub) PurchaseScheduledInstances(ctx workflow.Context, input *ec2.PurchaseScheduledInstancesInput) (*ec2.PurchaseScheduledInstancesOutput, error) {
	var output ec2.PurchaseScheduledInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.PurchaseScheduledInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) PurchaseScheduledInstancesAsync(ctx workflow.Context, input *ec2.PurchaseScheduledInstancesInput) *EC2PurchaseScheduledInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.PurchaseScheduledInstances", input)
	return &EC2PurchaseScheduledInstancesFuture{Future: future}
}

func (a *EC2Stub) RebootInstances(ctx workflow.Context, input *ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error) {
	var output ec2.RebootInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RebootInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RebootInstancesAsync(ctx workflow.Context, input *ec2.RebootInstancesInput) *EC2RebootInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RebootInstances", input)
	return &EC2RebootInstancesFuture{Future: future}
}

func (a *EC2Stub) RegisterImage(ctx workflow.Context, input *ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error) {
	var output ec2.RegisterImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RegisterImageAsync(ctx workflow.Context, input *ec2.RegisterImageInput) *EC2RegisterImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterImage", input)
	return &EC2RegisterImageFuture{Future: future}
}

func (a *EC2Stub) RegisterInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.RegisterInstanceEventNotificationAttributesInput) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error) {
	var output ec2.RegisterInstanceEventNotificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterInstanceEventNotificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RegisterInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.RegisterInstanceEventNotificationAttributesInput) *EC2RegisterInstanceEventNotificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterInstanceEventNotificationAttributes", input)
	return &EC2RegisterInstanceEventNotificationAttributesFuture{Future: future}
}

func (a *EC2Stub) RegisterTransitGatewayMulticastGroupMembers(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
	var output ec2.RegisterTransitGatewayMulticastGroupMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterTransitGatewayMulticastGroupMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RegisterTransitGatewayMulticastGroupMembersAsync(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupMembersInput) *EC2RegisterTransitGatewayMulticastGroupMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterTransitGatewayMulticastGroupMembers", input)
	return &EC2RegisterTransitGatewayMulticastGroupMembersFuture{Future: future}
}

func (a *EC2Stub) RegisterTransitGatewayMulticastGroupSources(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
	var output ec2.RegisterTransitGatewayMulticastGroupSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterTransitGatewayMulticastGroupSources", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RegisterTransitGatewayMulticastGroupSourcesAsync(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) *EC2RegisterTransitGatewayMulticastGroupSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterTransitGatewayMulticastGroupSources", input)
	return &EC2RegisterTransitGatewayMulticastGroupSourcesFuture{Future: future}
}

func (a *EC2Stub) RejectTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.RejectTransitGatewayPeeringAttachmentInput) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.RejectTransitGatewayPeeringAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RejectTransitGatewayPeeringAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RejectTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.RejectTransitGatewayPeeringAttachmentInput) *EC2RejectTransitGatewayPeeringAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RejectTransitGatewayPeeringAttachment", input)
	return &EC2RejectTransitGatewayPeeringAttachmentFuture{Future: future}
}

func (a *EC2Stub) RejectTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.RejectTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RejectTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RejectTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.RejectTransitGatewayVpcAttachmentInput) *EC2RejectTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RejectTransitGatewayVpcAttachment", input)
	return &EC2RejectTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *EC2Stub) RejectVpcEndpointConnections(ctx workflow.Context, input *ec2.RejectVpcEndpointConnectionsInput) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
	var output ec2.RejectVpcEndpointConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RejectVpcEndpointConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RejectVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.RejectVpcEndpointConnectionsInput) *EC2RejectVpcEndpointConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RejectVpcEndpointConnections", input)
	return &EC2RejectVpcEndpointConnectionsFuture{Future: future}
}

func (a *EC2Stub) RejectVpcPeeringConnection(ctx workflow.Context, input *ec2.RejectVpcPeeringConnectionInput) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	var output ec2.RejectVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RejectVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RejectVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.RejectVpcPeeringConnectionInput) *EC2RejectVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RejectVpcPeeringConnection", input)
	return &EC2RejectVpcPeeringConnectionFuture{Future: future}
}

func (a *EC2Stub) ReleaseAddress(ctx workflow.Context, input *ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error) {
	var output ec2.ReleaseAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReleaseAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReleaseAddressAsync(ctx workflow.Context, input *ec2.ReleaseAddressInput) *EC2ReleaseAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReleaseAddress", input)
	return &EC2ReleaseAddressFuture{Future: future}
}

func (a *EC2Stub) ReleaseHosts(ctx workflow.Context, input *ec2.ReleaseHostsInput) (*ec2.ReleaseHostsOutput, error) {
	var output ec2.ReleaseHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReleaseHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReleaseHostsAsync(ctx workflow.Context, input *ec2.ReleaseHostsInput) *EC2ReleaseHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReleaseHosts", input)
	return &EC2ReleaseHostsFuture{Future: future}
}

func (a *EC2Stub) ReplaceIamInstanceProfileAssociation(ctx workflow.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	var output ec2.ReplaceIamInstanceProfileAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceIamInstanceProfileAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReplaceIamInstanceProfileAssociationAsync(ctx workflow.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput) *EC2ReplaceIamInstanceProfileAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceIamInstanceProfileAssociation", input)
	return &EC2ReplaceIamInstanceProfileAssociationFuture{Future: future}
}

func (a *EC2Stub) ReplaceNetworkAclAssociation(ctx workflow.Context, input *ec2.ReplaceNetworkAclAssociationInput) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	var output ec2.ReplaceNetworkAclAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceNetworkAclAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReplaceNetworkAclAssociationAsync(ctx workflow.Context, input *ec2.ReplaceNetworkAclAssociationInput) *EC2ReplaceNetworkAclAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceNetworkAclAssociation", input)
	return &EC2ReplaceNetworkAclAssociationFuture{Future: future}
}

func (a *EC2Stub) ReplaceNetworkAclEntry(ctx workflow.Context, input *ec2.ReplaceNetworkAclEntryInput) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	var output ec2.ReplaceNetworkAclEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceNetworkAclEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReplaceNetworkAclEntryAsync(ctx workflow.Context, input *ec2.ReplaceNetworkAclEntryInput) *EC2ReplaceNetworkAclEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceNetworkAclEntry", input)
	return &EC2ReplaceNetworkAclEntryFuture{Future: future}
}

func (a *EC2Stub) ReplaceRoute(ctx workflow.Context, input *ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error) {
	var output ec2.ReplaceRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReplaceRouteAsync(ctx workflow.Context, input *ec2.ReplaceRouteInput) *EC2ReplaceRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceRoute", input)
	return &EC2ReplaceRouteFuture{Future: future}
}

func (a *EC2Stub) ReplaceRouteTableAssociation(ctx workflow.Context, input *ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	var output ec2.ReplaceRouteTableAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceRouteTableAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReplaceRouteTableAssociationAsync(ctx workflow.Context, input *ec2.ReplaceRouteTableAssociationInput) *EC2ReplaceRouteTableAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceRouteTableAssociation", input)
	return &EC2ReplaceRouteTableAssociationFuture{Future: future}
}

func (a *EC2Stub) ReplaceTransitGatewayRoute(ctx workflow.Context, input *ec2.ReplaceTransitGatewayRouteInput) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
	var output ec2.ReplaceTransitGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceTransitGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReplaceTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.ReplaceTransitGatewayRouteInput) *EC2ReplaceTransitGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceTransitGatewayRoute", input)
	return &EC2ReplaceTransitGatewayRouteFuture{Future: future}
}

func (a *EC2Stub) ReportInstanceStatus(ctx workflow.Context, input *ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error) {
	var output ec2.ReportInstanceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReportInstanceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReportInstanceStatusAsync(ctx workflow.Context, input *ec2.ReportInstanceStatusInput) *EC2ReportInstanceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReportInstanceStatus", input)
	return &EC2ReportInstanceStatusFuture{Future: future}
}

func (a *EC2Stub) RequestSpotFleet(ctx workflow.Context, input *ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error) {
	var output ec2.RequestSpotFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RequestSpotFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RequestSpotFleetAsync(ctx workflow.Context, input *ec2.RequestSpotFleetInput) *EC2RequestSpotFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RequestSpotFleet", input)
	return &EC2RequestSpotFleetFuture{Future: future}
}

func (a *EC2Stub) RequestSpotInstances(ctx workflow.Context, input *ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error) {
	var output ec2.RequestSpotInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RequestSpotInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RequestSpotInstancesAsync(ctx workflow.Context, input *ec2.RequestSpotInstancesInput) *EC2RequestSpotInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RequestSpotInstances", input)
	return &EC2RequestSpotInstancesFuture{Future: future}
}

func (a *EC2Stub) ResetEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.ResetEbsDefaultKmsKeyIdInput) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.ResetEbsDefaultKmsKeyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ResetEbsDefaultKmsKeyId", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ResetEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.ResetEbsDefaultKmsKeyIdInput) *EC2ResetEbsDefaultKmsKeyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ResetEbsDefaultKmsKeyId", input)
	return &EC2ResetEbsDefaultKmsKeyIdFuture{Future: future}
}

func (a *EC2Stub) ResetFpgaImageAttribute(ctx workflow.Context, input *ec2.ResetFpgaImageAttributeInput) (*ec2.ResetFpgaImageAttributeOutput, error) {
	var output ec2.ResetFpgaImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ResetFpgaImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ResetFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.ResetFpgaImageAttributeInput) *EC2ResetFpgaImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ResetFpgaImageAttribute", input)
	return &EC2ResetFpgaImageAttributeFuture{Future: future}
}

func (a *EC2Stub) ResetImageAttribute(ctx workflow.Context, input *ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error) {
	var output ec2.ResetImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ResetImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ResetImageAttributeAsync(ctx workflow.Context, input *ec2.ResetImageAttributeInput) *EC2ResetImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ResetImageAttribute", input)
	return &EC2ResetImageAttributeFuture{Future: future}
}

func (a *EC2Stub) ResetInstanceAttribute(ctx workflow.Context, input *ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error) {
	var output ec2.ResetInstanceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ResetInstanceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ResetInstanceAttributeAsync(ctx workflow.Context, input *ec2.ResetInstanceAttributeInput) *EC2ResetInstanceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ResetInstanceAttribute", input)
	return &EC2ResetInstanceAttributeFuture{Future: future}
}

func (a *EC2Stub) ResetNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	var output ec2.ResetNetworkInterfaceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ResetNetworkInterfaceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ResetNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.ResetNetworkInterfaceAttributeInput) *EC2ResetNetworkInterfaceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ResetNetworkInterfaceAttribute", input)
	return &EC2ResetNetworkInterfaceAttributeFuture{Future: future}
}

func (a *EC2Stub) ResetSnapshotAttribute(ctx workflow.Context, input *ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error) {
	var output ec2.ResetSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ResetSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ResetSnapshotAttributeAsync(ctx workflow.Context, input *ec2.ResetSnapshotAttributeInput) *EC2ResetSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ResetSnapshotAttribute", input)
	return &EC2ResetSnapshotAttributeFuture{Future: future}
}

func (a *EC2Stub) RestoreAddressToClassic(ctx workflow.Context, input *ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error) {
	var output ec2.RestoreAddressToClassicOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RestoreAddressToClassic", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RestoreAddressToClassicAsync(ctx workflow.Context, input *ec2.RestoreAddressToClassicInput) *EC2RestoreAddressToClassicFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RestoreAddressToClassic", input)
	return &EC2RestoreAddressToClassicFuture{Future: future}
}

func (a *EC2Stub) RestoreManagedPrefixListVersion(ctx workflow.Context, input *ec2.RestoreManagedPrefixListVersionInput) (*ec2.RestoreManagedPrefixListVersionOutput, error) {
	var output ec2.RestoreManagedPrefixListVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RestoreManagedPrefixListVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RestoreManagedPrefixListVersionAsync(ctx workflow.Context, input *ec2.RestoreManagedPrefixListVersionInput) *EC2RestoreManagedPrefixListVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RestoreManagedPrefixListVersion", input)
	return &EC2RestoreManagedPrefixListVersionFuture{Future: future}
}

func (a *EC2Stub) RevokeClientVpnIngress(ctx workflow.Context, input *ec2.RevokeClientVpnIngressInput) (*ec2.RevokeClientVpnIngressOutput, error) {
	var output ec2.RevokeClientVpnIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RevokeClientVpnIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RevokeClientVpnIngressAsync(ctx workflow.Context, input *ec2.RevokeClientVpnIngressInput) *EC2RevokeClientVpnIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RevokeClientVpnIngress", input)
	return &EC2RevokeClientVpnIngressFuture{Future: future}
}

func (a *EC2Stub) RevokeSecurityGroupEgress(ctx workflow.Context, input *ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	var output ec2.RevokeSecurityGroupEgressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RevokeSecurityGroupEgress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RevokeSecurityGroupEgressAsync(ctx workflow.Context, input *ec2.RevokeSecurityGroupEgressInput) *EC2RevokeSecurityGroupEgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RevokeSecurityGroupEgress", input)
	return &EC2RevokeSecurityGroupEgressFuture{Future: future}
}

func (a *EC2Stub) RevokeSecurityGroupIngress(ctx workflow.Context, input *ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	var output ec2.RevokeSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RevokeSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RevokeSecurityGroupIngressAsync(ctx workflow.Context, input *ec2.RevokeSecurityGroupIngressInput) *EC2RevokeSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RevokeSecurityGroupIngress", input)
	return &EC2RevokeSecurityGroupIngressFuture{Future: future}
}

func (a *EC2Stub) RunInstances(ctx workflow.Context, input *ec2.RunInstancesInput) (*ec2.Reservation, error) {
	var output ec2.Reservation
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RunInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RunInstancesAsync(ctx workflow.Context, input *ec2.RunInstancesInput) *EC2RunInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RunInstances", input)
	return &EC2RunInstancesFuture{Future: future}
}

func (a *EC2Stub) RunScheduledInstances(ctx workflow.Context, input *ec2.RunScheduledInstancesInput) (*ec2.RunScheduledInstancesOutput, error) {
	var output ec2.RunScheduledInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RunScheduledInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RunScheduledInstancesAsync(ctx workflow.Context, input *ec2.RunScheduledInstancesInput) *EC2RunScheduledInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RunScheduledInstances", input)
	return &EC2RunScheduledInstancesFuture{Future: future}
}

func (a *EC2Stub) SearchLocalGatewayRoutes(ctx workflow.Context, input *ec2.SearchLocalGatewayRoutesInput) (*ec2.SearchLocalGatewayRoutesOutput, error) {
	var output ec2.SearchLocalGatewayRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.SearchLocalGatewayRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) SearchLocalGatewayRoutesAsync(ctx workflow.Context, input *ec2.SearchLocalGatewayRoutesInput) *EC2SearchLocalGatewayRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.SearchLocalGatewayRoutes", input)
	return &EC2SearchLocalGatewayRoutesFuture{Future: future}
}

func (a *EC2Stub) SearchTransitGatewayMulticastGroups(ctx workflow.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
	var output ec2.SearchTransitGatewayMulticastGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.SearchTransitGatewayMulticastGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) SearchTransitGatewayMulticastGroupsAsync(ctx workflow.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput) *EC2SearchTransitGatewayMulticastGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.SearchTransitGatewayMulticastGroups", input)
	return &EC2SearchTransitGatewayMulticastGroupsFuture{Future: future}
}

func (a *EC2Stub) SearchTransitGatewayRoutes(ctx workflow.Context, input *ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	var output ec2.SearchTransitGatewayRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.SearchTransitGatewayRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) SearchTransitGatewayRoutesAsync(ctx workflow.Context, input *ec2.SearchTransitGatewayRoutesInput) *EC2SearchTransitGatewayRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.SearchTransitGatewayRoutes", input)
	return &EC2SearchTransitGatewayRoutesFuture{Future: future}
}

func (a *EC2Stub) SendDiagnosticInterrupt(ctx workflow.Context, input *ec2.SendDiagnosticInterruptInput) (*ec2.SendDiagnosticInterruptOutput, error) {
	var output ec2.SendDiagnosticInterruptOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.SendDiagnosticInterrupt", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) SendDiagnosticInterruptAsync(ctx workflow.Context, input *ec2.SendDiagnosticInterruptInput) *EC2SendDiagnosticInterruptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.SendDiagnosticInterrupt", input)
	return &EC2SendDiagnosticInterruptFuture{Future: future}
}

func (a *EC2Stub) StartInstances(ctx workflow.Context, input *ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error) {
	var output ec2.StartInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.StartInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) StartInstancesAsync(ctx workflow.Context, input *ec2.StartInstancesInput) *EC2StartInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.StartInstances", input)
	return &EC2StartInstancesFuture{Future: future}
}

func (a *EC2Stub) StartVpcEndpointServicePrivateDnsVerification(ctx workflow.Context, input *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
	var output ec2.StartVpcEndpointServicePrivateDnsVerificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.StartVpcEndpointServicePrivateDnsVerification", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) StartVpcEndpointServicePrivateDnsVerificationAsync(ctx workflow.Context, input *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) *EC2StartVpcEndpointServicePrivateDnsVerificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.StartVpcEndpointServicePrivateDnsVerification", input)
	return &EC2StartVpcEndpointServicePrivateDnsVerificationFuture{Future: future}
}

func (a *EC2Stub) StopInstances(ctx workflow.Context, input *ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error) {
	var output ec2.StopInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.StopInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) StopInstancesAsync(ctx workflow.Context, input *ec2.StopInstancesInput) *EC2StopInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.StopInstances", input)
	return &EC2StopInstancesFuture{Future: future}
}

func (a *EC2Stub) TerminateClientVpnConnections(ctx workflow.Context, input *ec2.TerminateClientVpnConnectionsInput) (*ec2.TerminateClientVpnConnectionsOutput, error) {
	var output ec2.TerminateClientVpnConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.TerminateClientVpnConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) TerminateClientVpnConnectionsAsync(ctx workflow.Context, input *ec2.TerminateClientVpnConnectionsInput) *EC2TerminateClientVpnConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.TerminateClientVpnConnections", input)
	return &EC2TerminateClientVpnConnectionsFuture{Future: future}
}

func (a *EC2Stub) TerminateInstances(ctx workflow.Context, input *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error) {
	var output ec2.TerminateInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.TerminateInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) TerminateInstancesAsync(ctx workflow.Context, input *ec2.TerminateInstancesInput) *EC2TerminateInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.TerminateInstances", input)
	return &EC2TerminateInstancesFuture{Future: future}
}

func (a *EC2Stub) UnassignIpv6Addresses(ctx workflow.Context, input *ec2.UnassignIpv6AddressesInput) (*ec2.UnassignIpv6AddressesOutput, error) {
	var output ec2.UnassignIpv6AddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.UnassignIpv6Addresses", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) UnassignIpv6AddressesAsync(ctx workflow.Context, input *ec2.UnassignIpv6AddressesInput) *EC2UnassignIpv6AddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.UnassignIpv6Addresses", input)
	return &EC2UnassignIpv6AddressesFuture{Future: future}
}

func (a *EC2Stub) UnassignPrivateIpAddresses(ctx workflow.Context, input *ec2.UnassignPrivateIpAddressesInput) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	var output ec2.UnassignPrivateIpAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.UnassignPrivateIpAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) UnassignPrivateIpAddressesAsync(ctx workflow.Context, input *ec2.UnassignPrivateIpAddressesInput) *EC2UnassignPrivateIpAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.UnassignPrivateIpAddresses", input)
	return &EC2UnassignPrivateIpAddressesFuture{Future: future}
}

func (a *EC2Stub) UnmonitorInstances(ctx workflow.Context, input *ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error) {
	var output ec2.UnmonitorInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.UnmonitorInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) UnmonitorInstancesAsync(ctx workflow.Context, input *ec2.UnmonitorInstancesInput) *EC2UnmonitorInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.UnmonitorInstances", input)
	return &EC2UnmonitorInstancesFuture{Future: future}
}

func (a *EC2Stub) UpdateSecurityGroupRuleDescriptionsEgress(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	var output ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.UpdateSecurityGroupRuleDescriptionsEgress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) UpdateSecurityGroupRuleDescriptionsEgressAsync(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) *EC2UpdateSecurityGroupRuleDescriptionsEgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.UpdateSecurityGroupRuleDescriptionsEgress", input)
	return &EC2UpdateSecurityGroupRuleDescriptionsEgressFuture{Future: future}
}

func (a *EC2Stub) UpdateSecurityGroupRuleDescriptionsIngress(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	var output ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.UpdateSecurityGroupRuleDescriptionsIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) UpdateSecurityGroupRuleDescriptionsIngressAsync(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) *EC2UpdateSecurityGroupRuleDescriptionsIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.UpdateSecurityGroupRuleDescriptionsIngress", input)
	return &EC2UpdateSecurityGroupRuleDescriptionsIngressFuture{Future: future}
}

func (a *EC2Stub) WithdrawByoipCidr(ctx workflow.Context, input *ec2.WithdrawByoipCidrInput) (*ec2.WithdrawByoipCidrOutput, error) {
	var output ec2.WithdrawByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.WithdrawByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) WithdrawByoipCidrAsync(ctx workflow.Context, input *ec2.WithdrawByoipCidrInput) *EC2WithdrawByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WithdrawByoipCidr", input)
	return &EC2WithdrawByoipCidrFuture{Future: future}
}

func (a *EC2Stub) WaitUntilBundleTaskComplete(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilBundleTaskComplete", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilBundleTaskCompleteAsync(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilBundleTaskComplete", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilConversionTaskCancelled(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilConversionTaskCancelled", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilConversionTaskCancelledAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilConversionTaskCancelled", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilConversionTaskCompleted(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilConversionTaskCompleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilConversionTaskCompletedAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilConversionTaskCompleted", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilConversionTaskDeleted(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilConversionTaskDeleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilConversionTaskDeletedAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilConversionTaskDeleted", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilCustomerGatewayAvailable(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilCustomerGatewayAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilCustomerGatewayAvailableAsync(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilCustomerGatewayAvailable", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilExportTaskCancelled(ctx workflow.Context, input *ec2.DescribeExportTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilExportTaskCancelled", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilExportTaskCancelledAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilExportTaskCancelled", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilExportTaskCompleted(ctx workflow.Context, input *ec2.DescribeExportTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilExportTaskCompleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilExportTaskCompletedAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilExportTaskCompleted", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilImageAvailable(ctx workflow.Context, input *ec2.DescribeImagesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilImageAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilImageAvailableAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilImageAvailable", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilImageExists(ctx workflow.Context, input *ec2.DescribeImagesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilImageExists", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilImageExistsAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilImageExists", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilInstanceExists(ctx workflow.Context, input *ec2.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceExists", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilInstanceExistsAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceExists", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilInstanceRunning(ctx workflow.Context, input *ec2.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceRunning", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilInstanceRunningAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceRunning", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilInstanceStatusOk(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceStatusOk", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilInstanceStatusOkAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceStatusOk", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilInstanceStopped(ctx workflow.Context, input *ec2.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceStopped", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilInstanceStoppedAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceStopped", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilInstanceTerminated(ctx workflow.Context, input *ec2.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceTerminated", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilInstanceTerminatedAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceTerminated", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilKeyPairExists(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilKeyPairExists", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilKeyPairExistsAsync(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilKeyPairExists", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilNatGatewayAvailable(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilNatGatewayAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilNatGatewayAvailableAsync(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilNatGatewayAvailable", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilNetworkInterfaceAvailable(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilNetworkInterfaceAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilNetworkInterfaceAvailableAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilNetworkInterfaceAvailable", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilPasswordDataAvailable(ctx workflow.Context, input *ec2.GetPasswordDataInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilPasswordDataAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilPasswordDataAvailableAsync(ctx workflow.Context, input *ec2.GetPasswordDataInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilPasswordDataAvailable", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilSecurityGroupExists(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSecurityGroupExists", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilSecurityGroupExistsAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSecurityGroupExists", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilSnapshotCompleted(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSnapshotCompleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilSnapshotCompletedAsync(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSnapshotCompleted", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilSpotInstanceRequestFulfilled(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSpotInstanceRequestFulfilled", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilSpotInstanceRequestFulfilledAsync(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSpotInstanceRequestFulfilled", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilSubnetAvailable(ctx workflow.Context, input *ec2.DescribeSubnetsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSubnetAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilSubnetAvailableAsync(ctx workflow.Context, input *ec2.DescribeSubnetsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSubnetAvailable", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilSystemStatusOk(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSystemStatusOk", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilSystemStatusOkAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSystemStatusOk", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilVolumeAvailable(ctx workflow.Context, input *ec2.DescribeVolumesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVolumeAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVolumeAvailableAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVolumeAvailable", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilVolumeDeleted(ctx workflow.Context, input *ec2.DescribeVolumesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVolumeDeleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVolumeDeletedAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVolumeDeleted", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilVolumeInUse(ctx workflow.Context, input *ec2.DescribeVolumesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVolumeInUse", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVolumeInUseAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVolumeInUse", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilVpcAvailable(ctx workflow.Context, input *ec2.DescribeVpcsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVpcAvailableAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcAvailable", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilVpcExists(ctx workflow.Context, input *ec2.DescribeVpcsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcExists", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVpcExistsAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcExists", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilVpcPeeringConnectionDeleted(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcPeeringConnectionDeleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVpcPeeringConnectionDeletedAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcPeeringConnectionDeleted", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilVpcPeeringConnectionExists(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcPeeringConnectionExists", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVpcPeeringConnectionExistsAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcPeeringConnectionExists", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilVpnConnectionAvailable(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpnConnectionAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVpnConnectionAvailableAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpnConnectionAvailable", input)
	return NewVoidFuture(future)
}

func (a *EC2Stub) WaitUntilVpnConnectionDeleted(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpnConnectionDeleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVpnConnectionDeletedAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpnConnectionDeleted", input)
	return NewVoidFuture(future)
}
