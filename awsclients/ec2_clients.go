// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/ec2"
	"go.temporal.io/sdk/workflow"
)

type EC2Client interface {
	AcceptReservedInstancesExchangeQuote(ctx workflow.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error)
	AcceptReservedInstancesExchangeQuoteAsync(ctx workflow.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput) *Ec2AcceptReservedInstancesExchangeQuoteFuture

	AcceptTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.AcceptTransitGatewayPeeringAttachmentInput) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error)
	AcceptTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.AcceptTransitGatewayPeeringAttachmentInput) *Ec2AcceptTransitGatewayPeeringAttachmentFuture

	AcceptTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error)
	AcceptTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.AcceptTransitGatewayVpcAttachmentInput) *Ec2AcceptTransitGatewayVpcAttachmentFuture

	AcceptVpcEndpointConnections(ctx workflow.Context, input *ec2.AcceptVpcEndpointConnectionsInput) (*ec2.AcceptVpcEndpointConnectionsOutput, error)
	AcceptVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.AcceptVpcEndpointConnectionsInput) *Ec2AcceptVpcEndpointConnectionsFuture

	AcceptVpcPeeringConnection(ctx workflow.Context, input *ec2.AcceptVpcPeeringConnectionInput) (*ec2.AcceptVpcPeeringConnectionOutput, error)
	AcceptVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.AcceptVpcPeeringConnectionInput) *Ec2AcceptVpcPeeringConnectionFuture

	AdvertiseByoipCidr(ctx workflow.Context, input *ec2.AdvertiseByoipCidrInput) (*ec2.AdvertiseByoipCidrOutput, error)
	AdvertiseByoipCidrAsync(ctx workflow.Context, input *ec2.AdvertiseByoipCidrInput) *Ec2AdvertiseByoipCidrFuture

	AllocateAddress(ctx workflow.Context, input *ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error)
	AllocateAddressAsync(ctx workflow.Context, input *ec2.AllocateAddressInput) *Ec2AllocateAddressFuture

	AllocateHosts(ctx workflow.Context, input *ec2.AllocateHostsInput) (*ec2.AllocateHostsOutput, error)
	AllocateHostsAsync(ctx workflow.Context, input *ec2.AllocateHostsInput) *Ec2AllocateHostsFuture

	ApplySecurityGroupsToClientVpnTargetNetwork(ctx workflow.Context, input *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error)
	ApplySecurityGroupsToClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) *Ec2ApplySecurityGroupsToClientVpnTargetNetworkFuture

	AssignIpv6Addresses(ctx workflow.Context, input *ec2.AssignIpv6AddressesInput) (*ec2.AssignIpv6AddressesOutput, error)
	AssignIpv6AddressesAsync(ctx workflow.Context, input *ec2.AssignIpv6AddressesInput) *Ec2AssignIpv6AddressesFuture

	AssignPrivateIpAddresses(ctx workflow.Context, input *ec2.AssignPrivateIpAddressesInput) (*ec2.AssignPrivateIpAddressesOutput, error)
	AssignPrivateIpAddressesAsync(ctx workflow.Context, input *ec2.AssignPrivateIpAddressesInput) *Ec2AssignPrivateIpAddressesFuture

	AssociateAddress(ctx workflow.Context, input *ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error)
	AssociateAddressAsync(ctx workflow.Context, input *ec2.AssociateAddressInput) *Ec2AssociateAddressFuture

	AssociateClientVpnTargetNetwork(ctx workflow.Context, input *ec2.AssociateClientVpnTargetNetworkInput) (*ec2.AssociateClientVpnTargetNetworkOutput, error)
	AssociateClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.AssociateClientVpnTargetNetworkInput) *Ec2AssociateClientVpnTargetNetworkFuture

	AssociateDhcpOptions(ctx workflow.Context, input *ec2.AssociateDhcpOptionsInput) (*ec2.AssociateDhcpOptionsOutput, error)
	AssociateDhcpOptionsAsync(ctx workflow.Context, input *ec2.AssociateDhcpOptionsInput) *Ec2AssociateDhcpOptionsFuture

	AssociateIamInstanceProfile(ctx workflow.Context, input *ec2.AssociateIamInstanceProfileInput) (*ec2.AssociateIamInstanceProfileOutput, error)
	AssociateIamInstanceProfileAsync(ctx workflow.Context, input *ec2.AssociateIamInstanceProfileInput) *Ec2AssociateIamInstanceProfileFuture

	AssociateRouteTable(ctx workflow.Context, input *ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error)
	AssociateRouteTableAsync(ctx workflow.Context, input *ec2.AssociateRouteTableInput) *Ec2AssociateRouteTableFuture

	AssociateSubnetCidrBlock(ctx workflow.Context, input *ec2.AssociateSubnetCidrBlockInput) (*ec2.AssociateSubnetCidrBlockOutput, error)
	AssociateSubnetCidrBlockAsync(ctx workflow.Context, input *ec2.AssociateSubnetCidrBlockInput) *Ec2AssociateSubnetCidrBlockFuture

	AssociateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.AssociateTransitGatewayMulticastDomainInput) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error)
	AssociateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.AssociateTransitGatewayMulticastDomainInput) *Ec2AssociateTransitGatewayMulticastDomainFuture

	AssociateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.AssociateTransitGatewayRouteTableInput) (*ec2.AssociateTransitGatewayRouteTableOutput, error)
	AssociateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.AssociateTransitGatewayRouteTableInput) *Ec2AssociateTransitGatewayRouteTableFuture

	AssociateVpcCidrBlock(ctx workflow.Context, input *ec2.AssociateVpcCidrBlockInput) (*ec2.AssociateVpcCidrBlockOutput, error)
	AssociateVpcCidrBlockAsync(ctx workflow.Context, input *ec2.AssociateVpcCidrBlockInput) *Ec2AssociateVpcCidrBlockFuture

	AttachClassicLinkVpc(ctx workflow.Context, input *ec2.AttachClassicLinkVpcInput) (*ec2.AttachClassicLinkVpcOutput, error)
	AttachClassicLinkVpcAsync(ctx workflow.Context, input *ec2.AttachClassicLinkVpcInput) *Ec2AttachClassicLinkVpcFuture

	AttachInternetGateway(ctx workflow.Context, input *ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error)
	AttachInternetGatewayAsync(ctx workflow.Context, input *ec2.AttachInternetGatewayInput) *Ec2AttachInternetGatewayFuture

	AttachNetworkInterface(ctx workflow.Context, input *ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error)
	AttachNetworkInterfaceAsync(ctx workflow.Context, input *ec2.AttachNetworkInterfaceInput) *Ec2AttachNetworkInterfaceFuture

	AttachVolume(ctx workflow.Context, input *ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error)
	AttachVolumeAsync(ctx workflow.Context, input *ec2.AttachVolumeInput) *Ec2AttachVolumeFuture

	AttachVpnGateway(ctx workflow.Context, input *ec2.AttachVpnGatewayInput) (*ec2.AttachVpnGatewayOutput, error)
	AttachVpnGatewayAsync(ctx workflow.Context, input *ec2.AttachVpnGatewayInput) *Ec2AttachVpnGatewayFuture

	AuthorizeClientVpnIngress(ctx workflow.Context, input *ec2.AuthorizeClientVpnIngressInput) (*ec2.AuthorizeClientVpnIngressOutput, error)
	AuthorizeClientVpnIngressAsync(ctx workflow.Context, input *ec2.AuthorizeClientVpnIngressInput) *Ec2AuthorizeClientVpnIngressFuture

	AuthorizeSecurityGroupEgress(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error)
	AuthorizeSecurityGroupEgressAsync(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupEgressInput) *Ec2AuthorizeSecurityGroupEgressFuture

	AuthorizeSecurityGroupIngress(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error)
	AuthorizeSecurityGroupIngressAsync(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupIngressInput) *Ec2AuthorizeSecurityGroupIngressFuture

	BundleInstance(ctx workflow.Context, input *ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error)
	BundleInstanceAsync(ctx workflow.Context, input *ec2.BundleInstanceInput) *Ec2BundleInstanceFuture

	CancelBundleTask(ctx workflow.Context, input *ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error)
	CancelBundleTaskAsync(ctx workflow.Context, input *ec2.CancelBundleTaskInput) *Ec2CancelBundleTaskFuture

	CancelCapacityReservation(ctx workflow.Context, input *ec2.CancelCapacityReservationInput) (*ec2.CancelCapacityReservationOutput, error)
	CancelCapacityReservationAsync(ctx workflow.Context, input *ec2.CancelCapacityReservationInput) *Ec2CancelCapacityReservationFuture

	CancelConversionTask(ctx workflow.Context, input *ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error)
	CancelConversionTaskAsync(ctx workflow.Context, input *ec2.CancelConversionTaskInput) *Ec2CancelConversionTaskFuture

	CancelExportTask(ctx workflow.Context, input *ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error)
	CancelExportTaskAsync(ctx workflow.Context, input *ec2.CancelExportTaskInput) *Ec2CancelExportTaskFuture

	CancelImportTask(ctx workflow.Context, input *ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error)
	CancelImportTaskAsync(ctx workflow.Context, input *ec2.CancelImportTaskInput) *Ec2CancelImportTaskFuture

	CancelReservedInstancesListing(ctx workflow.Context, input *ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error)
	CancelReservedInstancesListingAsync(ctx workflow.Context, input *ec2.CancelReservedInstancesListingInput) *Ec2CancelReservedInstancesListingFuture

	CancelSpotFleetRequests(ctx workflow.Context, input *ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error)
	CancelSpotFleetRequestsAsync(ctx workflow.Context, input *ec2.CancelSpotFleetRequestsInput) *Ec2CancelSpotFleetRequestsFuture

	CancelSpotInstanceRequests(ctx workflow.Context, input *ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error)
	CancelSpotInstanceRequestsAsync(ctx workflow.Context, input *ec2.CancelSpotInstanceRequestsInput) *Ec2CancelSpotInstanceRequestsFuture

	ConfirmProductInstance(ctx workflow.Context, input *ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error)
	ConfirmProductInstanceAsync(ctx workflow.Context, input *ec2.ConfirmProductInstanceInput) *Ec2ConfirmProductInstanceFuture

	CopyFpgaImage(ctx workflow.Context, input *ec2.CopyFpgaImageInput) (*ec2.CopyFpgaImageOutput, error)
	CopyFpgaImageAsync(ctx workflow.Context, input *ec2.CopyFpgaImageInput) *Ec2CopyFpgaImageFuture

	CopyImage(ctx workflow.Context, input *ec2.CopyImageInput) (*ec2.CopyImageOutput, error)
	CopyImageAsync(ctx workflow.Context, input *ec2.CopyImageInput) *Ec2CopyImageFuture

	CopySnapshot(ctx workflow.Context, input *ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error)
	CopySnapshotAsync(ctx workflow.Context, input *ec2.CopySnapshotInput) *Ec2CopySnapshotFuture

	CreateCapacityReservation(ctx workflow.Context, input *ec2.CreateCapacityReservationInput) (*ec2.CreateCapacityReservationOutput, error)
	CreateCapacityReservationAsync(ctx workflow.Context, input *ec2.CreateCapacityReservationInput) *Ec2CreateCapacityReservationFuture

	CreateCarrierGateway(ctx workflow.Context, input *ec2.CreateCarrierGatewayInput) (*ec2.CreateCarrierGatewayOutput, error)
	CreateCarrierGatewayAsync(ctx workflow.Context, input *ec2.CreateCarrierGatewayInput) *Ec2CreateCarrierGatewayFuture

	CreateClientVpnEndpoint(ctx workflow.Context, input *ec2.CreateClientVpnEndpointInput) (*ec2.CreateClientVpnEndpointOutput, error)
	CreateClientVpnEndpointAsync(ctx workflow.Context, input *ec2.CreateClientVpnEndpointInput) *Ec2CreateClientVpnEndpointFuture

	CreateClientVpnRoute(ctx workflow.Context, input *ec2.CreateClientVpnRouteInput) (*ec2.CreateClientVpnRouteOutput, error)
	CreateClientVpnRouteAsync(ctx workflow.Context, input *ec2.CreateClientVpnRouteInput) *Ec2CreateClientVpnRouteFuture

	CreateCustomerGateway(ctx workflow.Context, input *ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error)
	CreateCustomerGatewayAsync(ctx workflow.Context, input *ec2.CreateCustomerGatewayInput) *Ec2CreateCustomerGatewayFuture

	CreateDefaultSubnet(ctx workflow.Context, input *ec2.CreateDefaultSubnetInput) (*ec2.CreateDefaultSubnetOutput, error)
	CreateDefaultSubnetAsync(ctx workflow.Context, input *ec2.CreateDefaultSubnetInput) *Ec2CreateDefaultSubnetFuture

	CreateDefaultVpc(ctx workflow.Context, input *ec2.CreateDefaultVpcInput) (*ec2.CreateDefaultVpcOutput, error)
	CreateDefaultVpcAsync(ctx workflow.Context, input *ec2.CreateDefaultVpcInput) *Ec2CreateDefaultVpcFuture

	CreateDhcpOptions(ctx workflow.Context, input *ec2.CreateDhcpOptionsInput) (*ec2.CreateDhcpOptionsOutput, error)
	CreateDhcpOptionsAsync(ctx workflow.Context, input *ec2.CreateDhcpOptionsInput) *Ec2CreateDhcpOptionsFuture

	CreateEgressOnlyInternetGateway(ctx workflow.Context, input *ec2.CreateEgressOnlyInternetGatewayInput) (*ec2.CreateEgressOnlyInternetGatewayOutput, error)
	CreateEgressOnlyInternetGatewayAsync(ctx workflow.Context, input *ec2.CreateEgressOnlyInternetGatewayInput) *Ec2CreateEgressOnlyInternetGatewayFuture

	CreateFleet(ctx workflow.Context, input *ec2.CreateFleetInput) (*ec2.CreateFleetOutput, error)
	CreateFleetAsync(ctx workflow.Context, input *ec2.CreateFleetInput) *Ec2CreateFleetFuture

	CreateFlowLogs(ctx workflow.Context, input *ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error)
	CreateFlowLogsAsync(ctx workflow.Context, input *ec2.CreateFlowLogsInput) *Ec2CreateFlowLogsFuture

	CreateFpgaImage(ctx workflow.Context, input *ec2.CreateFpgaImageInput) (*ec2.CreateFpgaImageOutput, error)
	CreateFpgaImageAsync(ctx workflow.Context, input *ec2.CreateFpgaImageInput) *Ec2CreateFpgaImageFuture

	CreateImage(ctx workflow.Context, input *ec2.CreateImageInput) (*ec2.CreateImageOutput, error)
	CreateImageAsync(ctx workflow.Context, input *ec2.CreateImageInput) *Ec2CreateImageFuture

	CreateInstanceExportTask(ctx workflow.Context, input *ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error)
	CreateInstanceExportTaskAsync(ctx workflow.Context, input *ec2.CreateInstanceExportTaskInput) *Ec2CreateInstanceExportTaskFuture

	CreateInternetGateway(ctx workflow.Context, input *ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error)
	CreateInternetGatewayAsync(ctx workflow.Context, input *ec2.CreateInternetGatewayInput) *Ec2CreateInternetGatewayFuture

	CreateKeyPair(ctx workflow.Context, input *ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error)
	CreateKeyPairAsync(ctx workflow.Context, input *ec2.CreateKeyPairInput) *Ec2CreateKeyPairFuture

	CreateLaunchTemplate(ctx workflow.Context, input *ec2.CreateLaunchTemplateInput) (*ec2.CreateLaunchTemplateOutput, error)
	CreateLaunchTemplateAsync(ctx workflow.Context, input *ec2.CreateLaunchTemplateInput) *Ec2CreateLaunchTemplateFuture

	CreateLaunchTemplateVersion(ctx workflow.Context, input *ec2.CreateLaunchTemplateVersionInput) (*ec2.CreateLaunchTemplateVersionOutput, error)
	CreateLaunchTemplateVersionAsync(ctx workflow.Context, input *ec2.CreateLaunchTemplateVersionInput) *Ec2CreateLaunchTemplateVersionFuture

	CreateLocalGatewayRoute(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteInput) (*ec2.CreateLocalGatewayRouteOutput, error)
	CreateLocalGatewayRouteAsync(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteInput) *Ec2CreateLocalGatewayRouteFuture

	CreateLocalGatewayRouteTableVpcAssociation(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error)
	CreateLocalGatewayRouteTableVpcAssociationAsync(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) *Ec2CreateLocalGatewayRouteTableVpcAssociationFuture

	CreateManagedPrefixList(ctx workflow.Context, input *ec2.CreateManagedPrefixListInput) (*ec2.CreateManagedPrefixListOutput, error)
	CreateManagedPrefixListAsync(ctx workflow.Context, input *ec2.CreateManagedPrefixListInput) *Ec2CreateManagedPrefixListFuture

	CreateNatGateway(ctx workflow.Context, input *ec2.CreateNatGatewayInput) (*ec2.CreateNatGatewayOutput, error)
	CreateNatGatewayAsync(ctx workflow.Context, input *ec2.CreateNatGatewayInput) *Ec2CreateNatGatewayFuture

	CreateNetworkAcl(ctx workflow.Context, input *ec2.CreateNetworkAclInput) (*ec2.CreateNetworkAclOutput, error)
	CreateNetworkAclAsync(ctx workflow.Context, input *ec2.CreateNetworkAclInput) *Ec2CreateNetworkAclFuture

	CreateNetworkAclEntry(ctx workflow.Context, input *ec2.CreateNetworkAclEntryInput) (*ec2.CreateNetworkAclEntryOutput, error)
	CreateNetworkAclEntryAsync(ctx workflow.Context, input *ec2.CreateNetworkAclEntryInput) *Ec2CreateNetworkAclEntryFuture

	CreateNetworkInterface(ctx workflow.Context, input *ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error)
	CreateNetworkInterfaceAsync(ctx workflow.Context, input *ec2.CreateNetworkInterfaceInput) *Ec2CreateNetworkInterfaceFuture

	CreateNetworkInterfacePermission(ctx workflow.Context, input *ec2.CreateNetworkInterfacePermissionInput) (*ec2.CreateNetworkInterfacePermissionOutput, error)
	CreateNetworkInterfacePermissionAsync(ctx workflow.Context, input *ec2.CreateNetworkInterfacePermissionInput) *Ec2CreateNetworkInterfacePermissionFuture

	CreatePlacementGroup(ctx workflow.Context, input *ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error)
	CreatePlacementGroupAsync(ctx workflow.Context, input *ec2.CreatePlacementGroupInput) *Ec2CreatePlacementGroupFuture

	CreateReservedInstancesListing(ctx workflow.Context, input *ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error)
	CreateReservedInstancesListingAsync(ctx workflow.Context, input *ec2.CreateReservedInstancesListingInput) *Ec2CreateReservedInstancesListingFuture

	CreateRoute(ctx workflow.Context, input *ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error)
	CreateRouteAsync(ctx workflow.Context, input *ec2.CreateRouteInput) *Ec2CreateRouteFuture

	CreateRouteTable(ctx workflow.Context, input *ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error)
	CreateRouteTableAsync(ctx workflow.Context, input *ec2.CreateRouteTableInput) *Ec2CreateRouteTableFuture

	CreateSecurityGroup(ctx workflow.Context, input *ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error)
	CreateSecurityGroupAsync(ctx workflow.Context, input *ec2.CreateSecurityGroupInput) *Ec2CreateSecurityGroupFuture

	CreateSnapshot(ctx workflow.Context, input *ec2.CreateSnapshotInput) (*ec2.Snapshot, error)
	CreateSnapshotAsync(ctx workflow.Context, input *ec2.CreateSnapshotInput) *Ec2CreateSnapshotFuture

	CreateSnapshots(ctx workflow.Context, input *ec2.CreateSnapshotsInput) (*ec2.CreateSnapshotsOutput, error)
	CreateSnapshotsAsync(ctx workflow.Context, input *ec2.CreateSnapshotsInput) *Ec2CreateSnapshotsFuture

	CreateSpotDatafeedSubscription(ctx workflow.Context, input *ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error)
	CreateSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.CreateSpotDatafeedSubscriptionInput) *Ec2CreateSpotDatafeedSubscriptionFuture

	CreateSubnet(ctx workflow.Context, input *ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error)
	CreateSubnetAsync(ctx workflow.Context, input *ec2.CreateSubnetInput) *Ec2CreateSubnetFuture

	CreateTags(ctx workflow.Context, input *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error)
	CreateTagsAsync(ctx workflow.Context, input *ec2.CreateTagsInput) *Ec2CreateTagsFuture

	CreateTrafficMirrorFilter(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterInput) (*ec2.CreateTrafficMirrorFilterOutput, error)
	CreateTrafficMirrorFilterAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterInput) *Ec2CreateTrafficMirrorFilterFuture

	CreateTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterRuleInput) (*ec2.CreateTrafficMirrorFilterRuleOutput, error)
	CreateTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterRuleInput) *Ec2CreateTrafficMirrorFilterRuleFuture

	CreateTrafficMirrorSession(ctx workflow.Context, input *ec2.CreateTrafficMirrorSessionInput) (*ec2.CreateTrafficMirrorSessionOutput, error)
	CreateTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorSessionInput) *Ec2CreateTrafficMirrorSessionFuture

	CreateTrafficMirrorTarget(ctx workflow.Context, input *ec2.CreateTrafficMirrorTargetInput) (*ec2.CreateTrafficMirrorTargetOutput, error)
	CreateTrafficMirrorTargetAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorTargetInput) *Ec2CreateTrafficMirrorTargetFuture

	CreateTransitGateway(ctx workflow.Context, input *ec2.CreateTransitGatewayInput) (*ec2.CreateTransitGatewayOutput, error)
	CreateTransitGatewayAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayInput) *Ec2CreateTransitGatewayFuture

	CreateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.CreateTransitGatewayMulticastDomainInput) (*ec2.CreateTransitGatewayMulticastDomainOutput, error)
	CreateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayMulticastDomainInput) *Ec2CreateTransitGatewayMulticastDomainFuture

	CreateTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.CreateTransitGatewayPeeringAttachmentInput) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error)
	CreateTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayPeeringAttachmentInput) *Ec2CreateTransitGatewayPeeringAttachmentFuture

	CreateTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.CreateTransitGatewayPrefixListReferenceInput) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error)
	CreateTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayPrefixListReferenceInput) *Ec2CreateTransitGatewayPrefixListReferenceFuture

	CreateTransitGatewayRoute(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteInput) (*ec2.CreateTransitGatewayRouteOutput, error)
	CreateTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteInput) *Ec2CreateTransitGatewayRouteFuture

	CreateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteTableInput) (*ec2.CreateTransitGatewayRouteTableOutput, error)
	CreateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteTableInput) *Ec2CreateTransitGatewayRouteTableFuture

	CreateTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.CreateTransitGatewayVpcAttachmentInput) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error)
	CreateTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayVpcAttachmentInput) *Ec2CreateTransitGatewayVpcAttachmentFuture

	CreateVolume(ctx workflow.Context, input *ec2.CreateVolumeInput) (*ec2.Volume, error)
	CreateVolumeAsync(ctx workflow.Context, input *ec2.CreateVolumeInput) *Ec2CreateVolumeFuture

	CreateVpc(ctx workflow.Context, input *ec2.CreateVpcInput) (*ec2.CreateVpcOutput, error)
	CreateVpcAsync(ctx workflow.Context, input *ec2.CreateVpcInput) *Ec2CreateVpcFuture

	CreateVpcEndpoint(ctx workflow.Context, input *ec2.CreateVpcEndpointInput) (*ec2.CreateVpcEndpointOutput, error)
	CreateVpcEndpointAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointInput) *Ec2CreateVpcEndpointFuture

	CreateVpcEndpointConnectionNotification(ctx workflow.Context, input *ec2.CreateVpcEndpointConnectionNotificationInput) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error)
	CreateVpcEndpointConnectionNotificationAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointConnectionNotificationInput) *Ec2CreateVpcEndpointConnectionNotificationFuture

	CreateVpcEndpointServiceConfiguration(ctx workflow.Context, input *ec2.CreateVpcEndpointServiceConfigurationInput) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error)
	CreateVpcEndpointServiceConfigurationAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointServiceConfigurationInput) *Ec2CreateVpcEndpointServiceConfigurationFuture

	CreateVpcPeeringConnection(ctx workflow.Context, input *ec2.CreateVpcPeeringConnectionInput) (*ec2.CreateVpcPeeringConnectionOutput, error)
	CreateVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.CreateVpcPeeringConnectionInput) *Ec2CreateVpcPeeringConnectionFuture

	CreateVpnConnection(ctx workflow.Context, input *ec2.CreateVpnConnectionInput) (*ec2.CreateVpnConnectionOutput, error)
	CreateVpnConnectionAsync(ctx workflow.Context, input *ec2.CreateVpnConnectionInput) *Ec2CreateVpnConnectionFuture

	CreateVpnConnectionRoute(ctx workflow.Context, input *ec2.CreateVpnConnectionRouteInput) (*ec2.CreateVpnConnectionRouteOutput, error)
	CreateVpnConnectionRouteAsync(ctx workflow.Context, input *ec2.CreateVpnConnectionRouteInput) *Ec2CreateVpnConnectionRouteFuture

	CreateVpnGateway(ctx workflow.Context, input *ec2.CreateVpnGatewayInput) (*ec2.CreateVpnGatewayOutput, error)
	CreateVpnGatewayAsync(ctx workflow.Context, input *ec2.CreateVpnGatewayInput) *Ec2CreateVpnGatewayFuture

	DeleteCarrierGateway(ctx workflow.Context, input *ec2.DeleteCarrierGatewayInput) (*ec2.DeleteCarrierGatewayOutput, error)
	DeleteCarrierGatewayAsync(ctx workflow.Context, input *ec2.DeleteCarrierGatewayInput) *Ec2DeleteCarrierGatewayFuture

	DeleteClientVpnEndpoint(ctx workflow.Context, input *ec2.DeleteClientVpnEndpointInput) (*ec2.DeleteClientVpnEndpointOutput, error)
	DeleteClientVpnEndpointAsync(ctx workflow.Context, input *ec2.DeleteClientVpnEndpointInput) *Ec2DeleteClientVpnEndpointFuture

	DeleteClientVpnRoute(ctx workflow.Context, input *ec2.DeleteClientVpnRouteInput) (*ec2.DeleteClientVpnRouteOutput, error)
	DeleteClientVpnRouteAsync(ctx workflow.Context, input *ec2.DeleteClientVpnRouteInput) *Ec2DeleteClientVpnRouteFuture

	DeleteCustomerGateway(ctx workflow.Context, input *ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error)
	DeleteCustomerGatewayAsync(ctx workflow.Context, input *ec2.DeleteCustomerGatewayInput) *Ec2DeleteCustomerGatewayFuture

	DeleteDhcpOptions(ctx workflow.Context, input *ec2.DeleteDhcpOptionsInput) (*ec2.DeleteDhcpOptionsOutput, error)
	DeleteDhcpOptionsAsync(ctx workflow.Context, input *ec2.DeleteDhcpOptionsInput) *Ec2DeleteDhcpOptionsFuture

	DeleteEgressOnlyInternetGateway(ctx workflow.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error)
	DeleteEgressOnlyInternetGatewayAsync(ctx workflow.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput) *Ec2DeleteEgressOnlyInternetGatewayFuture

	DeleteFleets(ctx workflow.Context, input *ec2.DeleteFleetsInput) (*ec2.DeleteFleetsOutput, error)
	DeleteFleetsAsync(ctx workflow.Context, input *ec2.DeleteFleetsInput) *Ec2DeleteFleetsFuture

	DeleteFlowLogs(ctx workflow.Context, input *ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error)
	DeleteFlowLogsAsync(ctx workflow.Context, input *ec2.DeleteFlowLogsInput) *Ec2DeleteFlowLogsFuture

	DeleteFpgaImage(ctx workflow.Context, input *ec2.DeleteFpgaImageInput) (*ec2.DeleteFpgaImageOutput, error)
	DeleteFpgaImageAsync(ctx workflow.Context, input *ec2.DeleteFpgaImageInput) *Ec2DeleteFpgaImageFuture

	DeleteInternetGateway(ctx workflow.Context, input *ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error)
	DeleteInternetGatewayAsync(ctx workflow.Context, input *ec2.DeleteInternetGatewayInput) *Ec2DeleteInternetGatewayFuture

	DeleteKeyPair(ctx workflow.Context, input *ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error)
	DeleteKeyPairAsync(ctx workflow.Context, input *ec2.DeleteKeyPairInput) *Ec2DeleteKeyPairFuture

	DeleteLaunchTemplate(ctx workflow.Context, input *ec2.DeleteLaunchTemplateInput) (*ec2.DeleteLaunchTemplateOutput, error)
	DeleteLaunchTemplateAsync(ctx workflow.Context, input *ec2.DeleteLaunchTemplateInput) *Ec2DeleteLaunchTemplateFuture

	DeleteLaunchTemplateVersions(ctx workflow.Context, input *ec2.DeleteLaunchTemplateVersionsInput) (*ec2.DeleteLaunchTemplateVersionsOutput, error)
	DeleteLaunchTemplateVersionsAsync(ctx workflow.Context, input *ec2.DeleteLaunchTemplateVersionsInput) *Ec2DeleteLaunchTemplateVersionsFuture

	DeleteLocalGatewayRoute(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteInput) (*ec2.DeleteLocalGatewayRouteOutput, error)
	DeleteLocalGatewayRouteAsync(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteInput) *Ec2DeleteLocalGatewayRouteFuture

	DeleteLocalGatewayRouteTableVpcAssociation(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error)
	DeleteLocalGatewayRouteTableVpcAssociationAsync(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) *Ec2DeleteLocalGatewayRouteTableVpcAssociationFuture

	DeleteManagedPrefixList(ctx workflow.Context, input *ec2.DeleteManagedPrefixListInput) (*ec2.DeleteManagedPrefixListOutput, error)
	DeleteManagedPrefixListAsync(ctx workflow.Context, input *ec2.DeleteManagedPrefixListInput) *Ec2DeleteManagedPrefixListFuture

	DeleteNatGateway(ctx workflow.Context, input *ec2.DeleteNatGatewayInput) (*ec2.DeleteNatGatewayOutput, error)
	DeleteNatGatewayAsync(ctx workflow.Context, input *ec2.DeleteNatGatewayInput) *Ec2DeleteNatGatewayFuture

	DeleteNetworkAcl(ctx workflow.Context, input *ec2.DeleteNetworkAclInput) (*ec2.DeleteNetworkAclOutput, error)
	DeleteNetworkAclAsync(ctx workflow.Context, input *ec2.DeleteNetworkAclInput) *Ec2DeleteNetworkAclFuture

	DeleteNetworkAclEntry(ctx workflow.Context, input *ec2.DeleteNetworkAclEntryInput) (*ec2.DeleteNetworkAclEntryOutput, error)
	DeleteNetworkAclEntryAsync(ctx workflow.Context, input *ec2.DeleteNetworkAclEntryInput) *Ec2DeleteNetworkAclEntryFuture

	DeleteNetworkInterface(ctx workflow.Context, input *ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error)
	DeleteNetworkInterfaceAsync(ctx workflow.Context, input *ec2.DeleteNetworkInterfaceInput) *Ec2DeleteNetworkInterfaceFuture

	DeleteNetworkInterfacePermission(ctx workflow.Context, input *ec2.DeleteNetworkInterfacePermissionInput) (*ec2.DeleteNetworkInterfacePermissionOutput, error)
	DeleteNetworkInterfacePermissionAsync(ctx workflow.Context, input *ec2.DeleteNetworkInterfacePermissionInput) *Ec2DeleteNetworkInterfacePermissionFuture

	DeletePlacementGroup(ctx workflow.Context, input *ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error)
	DeletePlacementGroupAsync(ctx workflow.Context, input *ec2.DeletePlacementGroupInput) *Ec2DeletePlacementGroupFuture

	DeleteQueuedReservedInstances(ctx workflow.Context, input *ec2.DeleteQueuedReservedInstancesInput) (*ec2.DeleteQueuedReservedInstancesOutput, error)
	DeleteQueuedReservedInstancesAsync(ctx workflow.Context, input *ec2.DeleteQueuedReservedInstancesInput) *Ec2DeleteQueuedReservedInstancesFuture

	DeleteRoute(ctx workflow.Context, input *ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error)
	DeleteRouteAsync(ctx workflow.Context, input *ec2.DeleteRouteInput) *Ec2DeleteRouteFuture

	DeleteRouteTable(ctx workflow.Context, input *ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error)
	DeleteRouteTableAsync(ctx workflow.Context, input *ec2.DeleteRouteTableInput) *Ec2DeleteRouteTableFuture

	DeleteSecurityGroup(ctx workflow.Context, input *ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error)
	DeleteSecurityGroupAsync(ctx workflow.Context, input *ec2.DeleteSecurityGroupInput) *Ec2DeleteSecurityGroupFuture

	DeleteSnapshot(ctx workflow.Context, input *ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error)
	DeleteSnapshotAsync(ctx workflow.Context, input *ec2.DeleteSnapshotInput) *Ec2DeleteSnapshotFuture

	DeleteSpotDatafeedSubscription(ctx workflow.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error)
	DeleteSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput) *Ec2DeleteSpotDatafeedSubscriptionFuture

	DeleteSubnet(ctx workflow.Context, input *ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error)
	DeleteSubnetAsync(ctx workflow.Context, input *ec2.DeleteSubnetInput) *Ec2DeleteSubnetFuture

	DeleteTags(ctx workflow.Context, input *ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *ec2.DeleteTagsInput) *Ec2DeleteTagsFuture

	DeleteTrafficMirrorFilter(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterInput) (*ec2.DeleteTrafficMirrorFilterOutput, error)
	DeleteTrafficMirrorFilterAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterInput) *Ec2DeleteTrafficMirrorFilterFuture

	DeleteTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterRuleInput) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error)
	DeleteTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterRuleInput) *Ec2DeleteTrafficMirrorFilterRuleFuture

	DeleteTrafficMirrorSession(ctx workflow.Context, input *ec2.DeleteTrafficMirrorSessionInput) (*ec2.DeleteTrafficMirrorSessionOutput, error)
	DeleteTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorSessionInput) *Ec2DeleteTrafficMirrorSessionFuture

	DeleteTrafficMirrorTarget(ctx workflow.Context, input *ec2.DeleteTrafficMirrorTargetInput) (*ec2.DeleteTrafficMirrorTargetOutput, error)
	DeleteTrafficMirrorTargetAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorTargetInput) *Ec2DeleteTrafficMirrorTargetFuture

	DeleteTransitGateway(ctx workflow.Context, input *ec2.DeleteTransitGatewayInput) (*ec2.DeleteTransitGatewayOutput, error)
	DeleteTransitGatewayAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayInput) *Ec2DeleteTransitGatewayFuture

	DeleteTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.DeleteTransitGatewayMulticastDomainInput) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error)
	DeleteTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayMulticastDomainInput) *Ec2DeleteTransitGatewayMulticastDomainFuture

	DeleteTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.DeleteTransitGatewayPeeringAttachmentInput) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error)
	DeleteTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayPeeringAttachmentInput) *Ec2DeleteTransitGatewayPeeringAttachmentFuture

	DeleteTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.DeleteTransitGatewayPrefixListReferenceInput) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error)
	DeleteTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayPrefixListReferenceInput) *Ec2DeleteTransitGatewayPrefixListReferenceFuture

	DeleteTransitGatewayRoute(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteInput) (*ec2.DeleteTransitGatewayRouteOutput, error)
	DeleteTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteInput) *Ec2DeleteTransitGatewayRouteFuture

	DeleteTransitGatewayRouteTable(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteTableInput) (*ec2.DeleteTransitGatewayRouteTableOutput, error)
	DeleteTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteTableInput) *Ec2DeleteTransitGatewayRouteTableFuture

	DeleteTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error)
	DeleteTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayVpcAttachmentInput) *Ec2DeleteTransitGatewayVpcAttachmentFuture

	DeleteVolume(ctx workflow.Context, input *ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error)
	DeleteVolumeAsync(ctx workflow.Context, input *ec2.DeleteVolumeInput) *Ec2DeleteVolumeFuture

	DeleteVpc(ctx workflow.Context, input *ec2.DeleteVpcInput) (*ec2.DeleteVpcOutput, error)
	DeleteVpcAsync(ctx workflow.Context, input *ec2.DeleteVpcInput) *Ec2DeleteVpcFuture

	DeleteVpcEndpointConnectionNotifications(ctx workflow.Context, input *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error)
	DeleteVpcEndpointConnectionNotificationsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointConnectionNotificationsInput) *Ec2DeleteVpcEndpointConnectionNotificationsFuture

	DeleteVpcEndpointServiceConfigurations(ctx workflow.Context, input *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error)
	DeleteVpcEndpointServiceConfigurationsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointServiceConfigurationsInput) *Ec2DeleteVpcEndpointServiceConfigurationsFuture

	DeleteVpcEndpoints(ctx workflow.Context, input *ec2.DeleteVpcEndpointsInput) (*ec2.DeleteVpcEndpointsOutput, error)
	DeleteVpcEndpointsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointsInput) *Ec2DeleteVpcEndpointsFuture

	DeleteVpcPeeringConnection(ctx workflow.Context, input *ec2.DeleteVpcPeeringConnectionInput) (*ec2.DeleteVpcPeeringConnectionOutput, error)
	DeleteVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.DeleteVpcPeeringConnectionInput) *Ec2DeleteVpcPeeringConnectionFuture

	DeleteVpnConnection(ctx workflow.Context, input *ec2.DeleteVpnConnectionInput) (*ec2.DeleteVpnConnectionOutput, error)
	DeleteVpnConnectionAsync(ctx workflow.Context, input *ec2.DeleteVpnConnectionInput) *Ec2DeleteVpnConnectionFuture

	DeleteVpnConnectionRoute(ctx workflow.Context, input *ec2.DeleteVpnConnectionRouteInput) (*ec2.DeleteVpnConnectionRouteOutput, error)
	DeleteVpnConnectionRouteAsync(ctx workflow.Context, input *ec2.DeleteVpnConnectionRouteInput) *Ec2DeleteVpnConnectionRouteFuture

	DeleteVpnGateway(ctx workflow.Context, input *ec2.DeleteVpnGatewayInput) (*ec2.DeleteVpnGatewayOutput, error)
	DeleteVpnGatewayAsync(ctx workflow.Context, input *ec2.DeleteVpnGatewayInput) *Ec2DeleteVpnGatewayFuture

	DeprovisionByoipCidr(ctx workflow.Context, input *ec2.DeprovisionByoipCidrInput) (*ec2.DeprovisionByoipCidrOutput, error)
	DeprovisionByoipCidrAsync(ctx workflow.Context, input *ec2.DeprovisionByoipCidrInput) *Ec2DeprovisionByoipCidrFuture

	DeregisterImage(ctx workflow.Context, input *ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error)
	DeregisterImageAsync(ctx workflow.Context, input *ec2.DeregisterImageInput) *Ec2DeregisterImageFuture

	DeregisterInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.DeregisterInstanceEventNotificationAttributesInput) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error)
	DeregisterInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.DeregisterInstanceEventNotificationAttributesInput) *Ec2DeregisterInstanceEventNotificationAttributesFuture

	DeregisterTransitGatewayMulticastGroupMembers(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error)
	DeregisterTransitGatewayMulticastGroupMembersAsync(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) *Ec2DeregisterTransitGatewayMulticastGroupMembersFuture

	DeregisterTransitGatewayMulticastGroupSources(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error)
	DeregisterTransitGatewayMulticastGroupSourcesAsync(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) *Ec2DeregisterTransitGatewayMulticastGroupSourcesFuture

	DescribeAccountAttributes(ctx workflow.Context, input *ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error)
	DescribeAccountAttributesAsync(ctx workflow.Context, input *ec2.DescribeAccountAttributesInput) *Ec2DescribeAccountAttributesFuture

	DescribeAddresses(ctx workflow.Context, input *ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error)
	DescribeAddressesAsync(ctx workflow.Context, input *ec2.DescribeAddressesInput) *Ec2DescribeAddressesFuture

	DescribeAggregateIdFormat(ctx workflow.Context, input *ec2.DescribeAggregateIdFormatInput) (*ec2.DescribeAggregateIdFormatOutput, error)
	DescribeAggregateIdFormatAsync(ctx workflow.Context, input *ec2.DescribeAggregateIdFormatInput) *Ec2DescribeAggregateIdFormatFuture

	DescribeAvailabilityZones(ctx workflow.Context, input *ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error)
	DescribeAvailabilityZonesAsync(ctx workflow.Context, input *ec2.DescribeAvailabilityZonesInput) *Ec2DescribeAvailabilityZonesFuture

	DescribeBundleTasks(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error)
	DescribeBundleTasksAsync(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) *Ec2DescribeBundleTasksFuture

	DescribeByoipCidrs(ctx workflow.Context, input *ec2.DescribeByoipCidrsInput) (*ec2.DescribeByoipCidrsOutput, error)
	DescribeByoipCidrsAsync(ctx workflow.Context, input *ec2.DescribeByoipCidrsInput) *Ec2DescribeByoipCidrsFuture

	DescribeCapacityReservations(ctx workflow.Context, input *ec2.DescribeCapacityReservationsInput) (*ec2.DescribeCapacityReservationsOutput, error)
	DescribeCapacityReservationsAsync(ctx workflow.Context, input *ec2.DescribeCapacityReservationsInput) *Ec2DescribeCapacityReservationsFuture

	DescribeCarrierGateways(ctx workflow.Context, input *ec2.DescribeCarrierGatewaysInput) (*ec2.DescribeCarrierGatewaysOutput, error)
	DescribeCarrierGatewaysAsync(ctx workflow.Context, input *ec2.DescribeCarrierGatewaysInput) *Ec2DescribeCarrierGatewaysFuture

	DescribeClassicLinkInstances(ctx workflow.Context, input *ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error)
	DescribeClassicLinkInstancesAsync(ctx workflow.Context, input *ec2.DescribeClassicLinkInstancesInput) *Ec2DescribeClassicLinkInstancesFuture

	DescribeClientVpnAuthorizationRules(ctx workflow.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error)
	DescribeClientVpnAuthorizationRulesAsync(ctx workflow.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput) *Ec2DescribeClientVpnAuthorizationRulesFuture

	DescribeClientVpnConnections(ctx workflow.Context, input *ec2.DescribeClientVpnConnectionsInput) (*ec2.DescribeClientVpnConnectionsOutput, error)
	DescribeClientVpnConnectionsAsync(ctx workflow.Context, input *ec2.DescribeClientVpnConnectionsInput) *Ec2DescribeClientVpnConnectionsFuture

	DescribeClientVpnEndpoints(ctx workflow.Context, input *ec2.DescribeClientVpnEndpointsInput) (*ec2.DescribeClientVpnEndpointsOutput, error)
	DescribeClientVpnEndpointsAsync(ctx workflow.Context, input *ec2.DescribeClientVpnEndpointsInput) *Ec2DescribeClientVpnEndpointsFuture

	DescribeClientVpnRoutes(ctx workflow.Context, input *ec2.DescribeClientVpnRoutesInput) (*ec2.DescribeClientVpnRoutesOutput, error)
	DescribeClientVpnRoutesAsync(ctx workflow.Context, input *ec2.DescribeClientVpnRoutesInput) *Ec2DescribeClientVpnRoutesFuture

	DescribeClientVpnTargetNetworks(ctx workflow.Context, input *ec2.DescribeClientVpnTargetNetworksInput) (*ec2.DescribeClientVpnTargetNetworksOutput, error)
	DescribeClientVpnTargetNetworksAsync(ctx workflow.Context, input *ec2.DescribeClientVpnTargetNetworksInput) *Ec2DescribeClientVpnTargetNetworksFuture

	DescribeCoipPools(ctx workflow.Context, input *ec2.DescribeCoipPoolsInput) (*ec2.DescribeCoipPoolsOutput, error)
	DescribeCoipPoolsAsync(ctx workflow.Context, input *ec2.DescribeCoipPoolsInput) *Ec2DescribeCoipPoolsFuture

	DescribeConversionTasks(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error)
	DescribeConversionTasksAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *Ec2DescribeConversionTasksFuture

	DescribeCustomerGateways(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error)
	DescribeCustomerGatewaysAsync(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) *Ec2DescribeCustomerGatewaysFuture

	DescribeDhcpOptions(ctx workflow.Context, input *ec2.DescribeDhcpOptionsInput) (*ec2.DescribeDhcpOptionsOutput, error)
	DescribeDhcpOptionsAsync(ctx workflow.Context, input *ec2.DescribeDhcpOptionsInput) *Ec2DescribeDhcpOptionsFuture

	DescribeEgressOnlyInternetGateways(ctx workflow.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error)
	DescribeEgressOnlyInternetGatewaysAsync(ctx workflow.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput) *Ec2DescribeEgressOnlyInternetGatewaysFuture

	DescribeElasticGpus(ctx workflow.Context, input *ec2.DescribeElasticGpusInput) (*ec2.DescribeElasticGpusOutput, error)
	DescribeElasticGpusAsync(ctx workflow.Context, input *ec2.DescribeElasticGpusInput) *Ec2DescribeElasticGpusFuture

	DescribeExportImageTasks(ctx workflow.Context, input *ec2.DescribeExportImageTasksInput) (*ec2.DescribeExportImageTasksOutput, error)
	DescribeExportImageTasksAsync(ctx workflow.Context, input *ec2.DescribeExportImageTasksInput) *Ec2DescribeExportImageTasksFuture

	DescribeExportTasks(ctx workflow.Context, input *ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error)
	DescribeExportTasksAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) *Ec2DescribeExportTasksFuture

	DescribeFastSnapshotRestores(ctx workflow.Context, input *ec2.DescribeFastSnapshotRestoresInput) (*ec2.DescribeFastSnapshotRestoresOutput, error)
	DescribeFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.DescribeFastSnapshotRestoresInput) *Ec2DescribeFastSnapshotRestoresFuture

	DescribeFleetHistory(ctx workflow.Context, input *ec2.DescribeFleetHistoryInput) (*ec2.DescribeFleetHistoryOutput, error)
	DescribeFleetHistoryAsync(ctx workflow.Context, input *ec2.DescribeFleetHistoryInput) *Ec2DescribeFleetHistoryFuture

	DescribeFleetInstances(ctx workflow.Context, input *ec2.DescribeFleetInstancesInput) (*ec2.DescribeFleetInstancesOutput, error)
	DescribeFleetInstancesAsync(ctx workflow.Context, input *ec2.DescribeFleetInstancesInput) *Ec2DescribeFleetInstancesFuture

	DescribeFleets(ctx workflow.Context, input *ec2.DescribeFleetsInput) (*ec2.DescribeFleetsOutput, error)
	DescribeFleetsAsync(ctx workflow.Context, input *ec2.DescribeFleetsInput) *Ec2DescribeFleetsFuture

	DescribeFlowLogs(ctx workflow.Context, input *ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error)
	DescribeFlowLogsAsync(ctx workflow.Context, input *ec2.DescribeFlowLogsInput) *Ec2DescribeFlowLogsFuture

	DescribeFpgaImageAttribute(ctx workflow.Context, input *ec2.DescribeFpgaImageAttributeInput) (*ec2.DescribeFpgaImageAttributeOutput, error)
	DescribeFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.DescribeFpgaImageAttributeInput) *Ec2DescribeFpgaImageAttributeFuture

	DescribeFpgaImages(ctx workflow.Context, input *ec2.DescribeFpgaImagesInput) (*ec2.DescribeFpgaImagesOutput, error)
	DescribeFpgaImagesAsync(ctx workflow.Context, input *ec2.DescribeFpgaImagesInput) *Ec2DescribeFpgaImagesFuture

	DescribeHostReservationOfferings(ctx workflow.Context, input *ec2.DescribeHostReservationOfferingsInput) (*ec2.DescribeHostReservationOfferingsOutput, error)
	DescribeHostReservationOfferingsAsync(ctx workflow.Context, input *ec2.DescribeHostReservationOfferingsInput) *Ec2DescribeHostReservationOfferingsFuture

	DescribeHostReservations(ctx workflow.Context, input *ec2.DescribeHostReservationsInput) (*ec2.DescribeHostReservationsOutput, error)
	DescribeHostReservationsAsync(ctx workflow.Context, input *ec2.DescribeHostReservationsInput) *Ec2DescribeHostReservationsFuture

	DescribeHosts(ctx workflow.Context, input *ec2.DescribeHostsInput) (*ec2.DescribeHostsOutput, error)
	DescribeHostsAsync(ctx workflow.Context, input *ec2.DescribeHostsInput) *Ec2DescribeHostsFuture

	DescribeIamInstanceProfileAssociations(ctx workflow.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error)
	DescribeIamInstanceProfileAssociationsAsync(ctx workflow.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput) *Ec2DescribeIamInstanceProfileAssociationsFuture

	DescribeIdFormat(ctx workflow.Context, input *ec2.DescribeIdFormatInput) (*ec2.DescribeIdFormatOutput, error)
	DescribeIdFormatAsync(ctx workflow.Context, input *ec2.DescribeIdFormatInput) *Ec2DescribeIdFormatFuture

	DescribeIdentityIdFormat(ctx workflow.Context, input *ec2.DescribeIdentityIdFormatInput) (*ec2.DescribeIdentityIdFormatOutput, error)
	DescribeIdentityIdFormatAsync(ctx workflow.Context, input *ec2.DescribeIdentityIdFormatInput) *Ec2DescribeIdentityIdFormatFuture

	DescribeImageAttribute(ctx workflow.Context, input *ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error)
	DescribeImageAttributeAsync(ctx workflow.Context, input *ec2.DescribeImageAttributeInput) *Ec2DescribeImageAttributeFuture

	DescribeImages(ctx workflow.Context, input *ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error)
	DescribeImagesAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) *Ec2DescribeImagesFuture

	DescribeImportImageTasks(ctx workflow.Context, input *ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error)
	DescribeImportImageTasksAsync(ctx workflow.Context, input *ec2.DescribeImportImageTasksInput) *Ec2DescribeImportImageTasksFuture

	DescribeImportSnapshotTasks(ctx workflow.Context, input *ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error)
	DescribeImportSnapshotTasksAsync(ctx workflow.Context, input *ec2.DescribeImportSnapshotTasksInput) *Ec2DescribeImportSnapshotTasksFuture

	DescribeInstanceAttribute(ctx workflow.Context, input *ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error)
	DescribeInstanceAttributeAsync(ctx workflow.Context, input *ec2.DescribeInstanceAttributeInput) *Ec2DescribeInstanceAttributeFuture

	DescribeInstanceCreditSpecifications(ctx workflow.Context, input *ec2.DescribeInstanceCreditSpecificationsInput) (*ec2.DescribeInstanceCreditSpecificationsOutput, error)
	DescribeInstanceCreditSpecificationsAsync(ctx workflow.Context, input *ec2.DescribeInstanceCreditSpecificationsInput) *Ec2DescribeInstanceCreditSpecificationsFuture

	DescribeInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.DescribeInstanceEventNotificationAttributesInput) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error)
	DescribeInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.DescribeInstanceEventNotificationAttributesInput) *Ec2DescribeInstanceEventNotificationAttributesFuture

	DescribeInstanceStatus(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error)
	DescribeInstanceStatusAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) *Ec2DescribeInstanceStatusFuture

	DescribeInstanceTypeOfferings(ctx workflow.Context, input *ec2.DescribeInstanceTypeOfferingsInput) (*ec2.DescribeInstanceTypeOfferingsOutput, error)
	DescribeInstanceTypeOfferingsAsync(ctx workflow.Context, input *ec2.DescribeInstanceTypeOfferingsInput) *Ec2DescribeInstanceTypeOfferingsFuture

	DescribeInstanceTypes(ctx workflow.Context, input *ec2.DescribeInstanceTypesInput) (*ec2.DescribeInstanceTypesOutput, error)
	DescribeInstanceTypesAsync(ctx workflow.Context, input *ec2.DescribeInstanceTypesInput) *Ec2DescribeInstanceTypesFuture

	DescribeInstances(ctx workflow.Context, input *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error)
	DescribeInstancesAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *Ec2DescribeInstancesFuture

	DescribeInternetGateways(ctx workflow.Context, input *ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error)
	DescribeInternetGatewaysAsync(ctx workflow.Context, input *ec2.DescribeInternetGatewaysInput) *Ec2DescribeInternetGatewaysFuture

	DescribeIpv6Pools(ctx workflow.Context, input *ec2.DescribeIpv6PoolsInput) (*ec2.DescribeIpv6PoolsOutput, error)
	DescribeIpv6PoolsAsync(ctx workflow.Context, input *ec2.DescribeIpv6PoolsInput) *Ec2DescribeIpv6PoolsFuture

	DescribeKeyPairs(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error)
	DescribeKeyPairsAsync(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) *Ec2DescribeKeyPairsFuture

	DescribeLaunchTemplateVersions(ctx workflow.Context, input *ec2.DescribeLaunchTemplateVersionsInput) (*ec2.DescribeLaunchTemplateVersionsOutput, error)
	DescribeLaunchTemplateVersionsAsync(ctx workflow.Context, input *ec2.DescribeLaunchTemplateVersionsInput) *Ec2DescribeLaunchTemplateVersionsFuture

	DescribeLaunchTemplates(ctx workflow.Context, input *ec2.DescribeLaunchTemplatesInput) (*ec2.DescribeLaunchTemplatesOutput, error)
	DescribeLaunchTemplatesAsync(ctx workflow.Context, input *ec2.DescribeLaunchTemplatesInput) *Ec2DescribeLaunchTemplatesFuture

	DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error)
	DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) *Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture

	DescribeLocalGatewayRouteTableVpcAssociations(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error)
	DescribeLocalGatewayRouteTableVpcAssociationsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) *Ec2DescribeLocalGatewayRouteTableVpcAssociationsFuture

	DescribeLocalGatewayRouteTables(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTablesInput) (*ec2.DescribeLocalGatewayRouteTablesOutput, error)
	DescribeLocalGatewayRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTablesInput) *Ec2DescribeLocalGatewayRouteTablesFuture

	DescribeLocalGatewayVirtualInterfaceGroups(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error)
	DescribeLocalGatewayVirtualInterfaceGroupsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) *Ec2DescribeLocalGatewayVirtualInterfaceGroupsFuture

	DescribeLocalGatewayVirtualInterfaces(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error)
	DescribeLocalGatewayVirtualInterfacesAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput) *Ec2DescribeLocalGatewayVirtualInterfacesFuture

	DescribeLocalGateways(ctx workflow.Context, input *ec2.DescribeLocalGatewaysInput) (*ec2.DescribeLocalGatewaysOutput, error)
	DescribeLocalGatewaysAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewaysInput) *Ec2DescribeLocalGatewaysFuture

	DescribeManagedPrefixLists(ctx workflow.Context, input *ec2.DescribeManagedPrefixListsInput) (*ec2.DescribeManagedPrefixListsOutput, error)
	DescribeManagedPrefixListsAsync(ctx workflow.Context, input *ec2.DescribeManagedPrefixListsInput) *Ec2DescribeManagedPrefixListsFuture

	DescribeMovingAddresses(ctx workflow.Context, input *ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error)
	DescribeMovingAddressesAsync(ctx workflow.Context, input *ec2.DescribeMovingAddressesInput) *Ec2DescribeMovingAddressesFuture

	DescribeNatGateways(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) (*ec2.DescribeNatGatewaysOutput, error)
	DescribeNatGatewaysAsync(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) *Ec2DescribeNatGatewaysFuture

	DescribeNetworkAcls(ctx workflow.Context, input *ec2.DescribeNetworkAclsInput) (*ec2.DescribeNetworkAclsOutput, error)
	DescribeNetworkAclsAsync(ctx workflow.Context, input *ec2.DescribeNetworkAclsInput) *Ec2DescribeNetworkAclsFuture

	DescribeNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error)
	DescribeNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfaceAttributeInput) *Ec2DescribeNetworkInterfaceAttributeFuture

	DescribeNetworkInterfacePermissions(ctx workflow.Context, input *ec2.DescribeNetworkInterfacePermissionsInput) (*ec2.DescribeNetworkInterfacePermissionsOutput, error)
	DescribeNetworkInterfacePermissionsAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacePermissionsInput) *Ec2DescribeNetworkInterfacePermissionsFuture

	DescribeNetworkInterfaces(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error)
	DescribeNetworkInterfacesAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) *Ec2DescribeNetworkInterfacesFuture

	DescribePlacementGroups(ctx workflow.Context, input *ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error)
	DescribePlacementGroupsAsync(ctx workflow.Context, input *ec2.DescribePlacementGroupsInput) *Ec2DescribePlacementGroupsFuture

	DescribePrefixLists(ctx workflow.Context, input *ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error)
	DescribePrefixListsAsync(ctx workflow.Context, input *ec2.DescribePrefixListsInput) *Ec2DescribePrefixListsFuture

	DescribePrincipalIdFormat(ctx workflow.Context, input *ec2.DescribePrincipalIdFormatInput) (*ec2.DescribePrincipalIdFormatOutput, error)
	DescribePrincipalIdFormatAsync(ctx workflow.Context, input *ec2.DescribePrincipalIdFormatInput) *Ec2DescribePrincipalIdFormatFuture

	DescribePublicIpv4Pools(ctx workflow.Context, input *ec2.DescribePublicIpv4PoolsInput) (*ec2.DescribePublicIpv4PoolsOutput, error)
	DescribePublicIpv4PoolsAsync(ctx workflow.Context, input *ec2.DescribePublicIpv4PoolsInput) *Ec2DescribePublicIpv4PoolsFuture

	DescribeRegions(ctx workflow.Context, input *ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error)
	DescribeRegionsAsync(ctx workflow.Context, input *ec2.DescribeRegionsInput) *Ec2DescribeRegionsFuture

	DescribeReservedInstances(ctx workflow.Context, input *ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error)
	DescribeReservedInstancesAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesInput) *Ec2DescribeReservedInstancesFuture

	DescribeReservedInstancesListings(ctx workflow.Context, input *ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error)
	DescribeReservedInstancesListingsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesListingsInput) *Ec2DescribeReservedInstancesListingsFuture

	DescribeReservedInstancesModifications(ctx workflow.Context, input *ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error)
	DescribeReservedInstancesModificationsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesModificationsInput) *Ec2DescribeReservedInstancesModificationsFuture

	DescribeReservedInstancesOfferings(ctx workflow.Context, input *ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error)
	DescribeReservedInstancesOfferingsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesOfferingsInput) *Ec2DescribeReservedInstancesOfferingsFuture

	DescribeRouteTables(ctx workflow.Context, input *ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error)
	DescribeRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeRouteTablesInput) *Ec2DescribeRouteTablesFuture

	DescribeScheduledInstanceAvailability(ctx workflow.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error)
	DescribeScheduledInstanceAvailabilityAsync(ctx workflow.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput) *Ec2DescribeScheduledInstanceAvailabilityFuture

	DescribeScheduledInstances(ctx workflow.Context, input *ec2.DescribeScheduledInstancesInput) (*ec2.DescribeScheduledInstancesOutput, error)
	DescribeScheduledInstancesAsync(ctx workflow.Context, input *ec2.DescribeScheduledInstancesInput) *Ec2DescribeScheduledInstancesFuture

	DescribeSecurityGroupReferences(ctx workflow.Context, input *ec2.DescribeSecurityGroupReferencesInput) (*ec2.DescribeSecurityGroupReferencesOutput, error)
	DescribeSecurityGroupReferencesAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupReferencesInput) *Ec2DescribeSecurityGroupReferencesFuture

	DescribeSecurityGroups(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error)
	DescribeSecurityGroupsAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) *Ec2DescribeSecurityGroupsFuture

	DescribeSnapshotAttribute(ctx workflow.Context, input *ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error)
	DescribeSnapshotAttributeAsync(ctx workflow.Context, input *ec2.DescribeSnapshotAttributeInput) *Ec2DescribeSnapshotAttributeFuture

	DescribeSnapshots(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error)
	DescribeSnapshotsAsync(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) *Ec2DescribeSnapshotsFuture

	DescribeSpotDatafeedSubscription(ctx workflow.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error)
	DescribeSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput) *Ec2DescribeSpotDatafeedSubscriptionFuture

	DescribeSpotFleetInstances(ctx workflow.Context, input *ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error)
	DescribeSpotFleetInstancesAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetInstancesInput) *Ec2DescribeSpotFleetInstancesFuture

	DescribeSpotFleetRequestHistory(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error)
	DescribeSpotFleetRequestHistoryAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestHistoryInput) *Ec2DescribeSpotFleetRequestHistoryFuture

	DescribeSpotFleetRequests(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error)
	DescribeSpotFleetRequestsAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestsInput) *Ec2DescribeSpotFleetRequestsFuture

	DescribeSpotInstanceRequests(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error)
	DescribeSpotInstanceRequestsAsync(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) *Ec2DescribeSpotInstanceRequestsFuture

	DescribeSpotPriceHistory(ctx workflow.Context, input *ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error)
	DescribeSpotPriceHistoryAsync(ctx workflow.Context, input *ec2.DescribeSpotPriceHistoryInput) *Ec2DescribeSpotPriceHistoryFuture

	DescribeStaleSecurityGroups(ctx workflow.Context, input *ec2.DescribeStaleSecurityGroupsInput) (*ec2.DescribeStaleSecurityGroupsOutput, error)
	DescribeStaleSecurityGroupsAsync(ctx workflow.Context, input *ec2.DescribeStaleSecurityGroupsInput) *Ec2DescribeStaleSecurityGroupsFuture

	DescribeSubnets(ctx workflow.Context, input *ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error)
	DescribeSubnetsAsync(ctx workflow.Context, input *ec2.DescribeSubnetsInput) *Ec2DescribeSubnetsFuture

	DescribeTags(ctx workflow.Context, input *ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error)
	DescribeTagsAsync(ctx workflow.Context, input *ec2.DescribeTagsInput) *Ec2DescribeTagsFuture

	DescribeTrafficMirrorFilters(ctx workflow.Context, input *ec2.DescribeTrafficMirrorFiltersInput) (*ec2.DescribeTrafficMirrorFiltersOutput, error)
	DescribeTrafficMirrorFiltersAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorFiltersInput) *Ec2DescribeTrafficMirrorFiltersFuture

	DescribeTrafficMirrorSessions(ctx workflow.Context, input *ec2.DescribeTrafficMirrorSessionsInput) (*ec2.DescribeTrafficMirrorSessionsOutput, error)
	DescribeTrafficMirrorSessionsAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorSessionsInput) *Ec2DescribeTrafficMirrorSessionsFuture

	DescribeTrafficMirrorTargets(ctx workflow.Context, input *ec2.DescribeTrafficMirrorTargetsInput) (*ec2.DescribeTrafficMirrorTargetsOutput, error)
	DescribeTrafficMirrorTargetsAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorTargetsInput) *Ec2DescribeTrafficMirrorTargetsFuture

	DescribeTransitGatewayAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)
	DescribeTransitGatewayAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayAttachmentsInput) *Ec2DescribeTransitGatewayAttachmentsFuture

	DescribeTransitGatewayMulticastDomains(ctx workflow.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error)
	DescribeTransitGatewayMulticastDomainsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput) *Ec2DescribeTransitGatewayMulticastDomainsFuture

	DescribeTransitGatewayPeeringAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error)
	DescribeTransitGatewayPeeringAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput) *Ec2DescribeTransitGatewayPeeringAttachmentsFuture

	DescribeTransitGatewayRouteTables(ctx workflow.Context, input *ec2.DescribeTransitGatewayRouteTablesInput) (*ec2.DescribeTransitGatewayRouteTablesOutput, error)
	DescribeTransitGatewayRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayRouteTablesInput) *Ec2DescribeTransitGatewayRouteTablesFuture

	DescribeTransitGatewayVpcAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error)
	DescribeTransitGatewayVpcAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput) *Ec2DescribeTransitGatewayVpcAttachmentsFuture

	DescribeTransitGateways(ctx workflow.Context, input *ec2.DescribeTransitGatewaysInput) (*ec2.DescribeTransitGatewaysOutput, error)
	DescribeTransitGatewaysAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewaysInput) *Ec2DescribeTransitGatewaysFuture

	DescribeVolumeAttribute(ctx workflow.Context, input *ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error)
	DescribeVolumeAttributeAsync(ctx workflow.Context, input *ec2.DescribeVolumeAttributeInput) *Ec2DescribeVolumeAttributeFuture

	DescribeVolumeStatus(ctx workflow.Context, input *ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error)
	DescribeVolumeStatusAsync(ctx workflow.Context, input *ec2.DescribeVolumeStatusInput) *Ec2DescribeVolumeStatusFuture

	DescribeVolumes(ctx workflow.Context, input *ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error)
	DescribeVolumesAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *Ec2DescribeVolumesFuture

	DescribeVolumesModifications(ctx workflow.Context, input *ec2.DescribeVolumesModificationsInput) (*ec2.DescribeVolumesModificationsOutput, error)
	DescribeVolumesModificationsAsync(ctx workflow.Context, input *ec2.DescribeVolumesModificationsInput) *Ec2DescribeVolumesModificationsFuture

	DescribeVpcAttribute(ctx workflow.Context, input *ec2.DescribeVpcAttributeInput) (*ec2.DescribeVpcAttributeOutput, error)
	DescribeVpcAttributeAsync(ctx workflow.Context, input *ec2.DescribeVpcAttributeInput) *Ec2DescribeVpcAttributeFuture

	DescribeVpcClassicLink(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkInput) (*ec2.DescribeVpcClassicLinkOutput, error)
	DescribeVpcClassicLinkAsync(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkInput) *Ec2DescribeVpcClassicLinkFuture

	DescribeVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error)
	DescribeVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput) *Ec2DescribeVpcClassicLinkDnsSupportFuture

	DescribeVpcEndpointConnectionNotifications(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error)
	DescribeVpcEndpointConnectionNotificationsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput) *Ec2DescribeVpcEndpointConnectionNotificationsFuture

	DescribeVpcEndpointConnections(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionsInput) (*ec2.DescribeVpcEndpointConnectionsOutput, error)
	DescribeVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionsInput) *Ec2DescribeVpcEndpointConnectionsFuture

	DescribeVpcEndpointServiceConfigurations(ctx workflow.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error)
	DescribeVpcEndpointServiceConfigurationsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput) *Ec2DescribeVpcEndpointServiceConfigurationsFuture

	DescribeVpcEndpointServicePermissions(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error)
	DescribeVpcEndpointServicePermissionsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput) *Ec2DescribeVpcEndpointServicePermissionsFuture

	DescribeVpcEndpointServices(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicesInput) (*ec2.DescribeVpcEndpointServicesOutput, error)
	DescribeVpcEndpointServicesAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicesInput) *Ec2DescribeVpcEndpointServicesFuture

	DescribeVpcEndpoints(ctx workflow.Context, input *ec2.DescribeVpcEndpointsInput) (*ec2.DescribeVpcEndpointsOutput, error)
	DescribeVpcEndpointsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointsInput) *Ec2DescribeVpcEndpointsFuture

	DescribeVpcPeeringConnections(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error)
	DescribeVpcPeeringConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) *Ec2DescribeVpcPeeringConnectionsFuture

	DescribeVpcs(ctx workflow.Context, input *ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error)
	DescribeVpcsAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) *Ec2DescribeVpcsFuture

	DescribeVpnConnections(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) (*ec2.DescribeVpnConnectionsOutput, error)
	DescribeVpnConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) *Ec2DescribeVpnConnectionsFuture

	DescribeVpnGateways(ctx workflow.Context, input *ec2.DescribeVpnGatewaysInput) (*ec2.DescribeVpnGatewaysOutput, error)
	DescribeVpnGatewaysAsync(ctx workflow.Context, input *ec2.DescribeVpnGatewaysInput) *Ec2DescribeVpnGatewaysFuture

	DetachClassicLinkVpc(ctx workflow.Context, input *ec2.DetachClassicLinkVpcInput) (*ec2.DetachClassicLinkVpcOutput, error)
	DetachClassicLinkVpcAsync(ctx workflow.Context, input *ec2.DetachClassicLinkVpcInput) *Ec2DetachClassicLinkVpcFuture

	DetachInternetGateway(ctx workflow.Context, input *ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error)
	DetachInternetGatewayAsync(ctx workflow.Context, input *ec2.DetachInternetGatewayInput) *Ec2DetachInternetGatewayFuture

	DetachNetworkInterface(ctx workflow.Context, input *ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error)
	DetachNetworkInterfaceAsync(ctx workflow.Context, input *ec2.DetachNetworkInterfaceInput) *Ec2DetachNetworkInterfaceFuture

	DetachVolume(ctx workflow.Context, input *ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error)
	DetachVolumeAsync(ctx workflow.Context, input *ec2.DetachVolumeInput) *Ec2DetachVolumeFuture

	DetachVpnGateway(ctx workflow.Context, input *ec2.DetachVpnGatewayInput) (*ec2.DetachVpnGatewayOutput, error)
	DetachVpnGatewayAsync(ctx workflow.Context, input *ec2.DetachVpnGatewayInput) *Ec2DetachVpnGatewayFuture

	DisableEbsEncryptionByDefault(ctx workflow.Context, input *ec2.DisableEbsEncryptionByDefaultInput) (*ec2.DisableEbsEncryptionByDefaultOutput, error)
	DisableEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.DisableEbsEncryptionByDefaultInput) *Ec2DisableEbsEncryptionByDefaultFuture

	DisableFastSnapshotRestores(ctx workflow.Context, input *ec2.DisableFastSnapshotRestoresInput) (*ec2.DisableFastSnapshotRestoresOutput, error)
	DisableFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.DisableFastSnapshotRestoresInput) *Ec2DisableFastSnapshotRestoresFuture

	DisableTransitGatewayRouteTablePropagation(ctx workflow.Context, input *ec2.DisableTransitGatewayRouteTablePropagationInput) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error)
	DisableTransitGatewayRouteTablePropagationAsync(ctx workflow.Context, input *ec2.DisableTransitGatewayRouteTablePropagationInput) *Ec2DisableTransitGatewayRouteTablePropagationFuture

	DisableVgwRoutePropagation(ctx workflow.Context, input *ec2.DisableVgwRoutePropagationInput) (*ec2.DisableVgwRoutePropagationOutput, error)
	DisableVgwRoutePropagationAsync(ctx workflow.Context, input *ec2.DisableVgwRoutePropagationInput) *Ec2DisableVgwRoutePropagationFuture

	DisableVpcClassicLink(ctx workflow.Context, input *ec2.DisableVpcClassicLinkInput) (*ec2.DisableVpcClassicLinkOutput, error)
	DisableVpcClassicLinkAsync(ctx workflow.Context, input *ec2.DisableVpcClassicLinkInput) *Ec2DisableVpcClassicLinkFuture

	DisableVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error)
	DisableVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput) *Ec2DisableVpcClassicLinkDnsSupportFuture

	DisassociateAddress(ctx workflow.Context, input *ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error)
	DisassociateAddressAsync(ctx workflow.Context, input *ec2.DisassociateAddressInput) *Ec2DisassociateAddressFuture

	DisassociateClientVpnTargetNetwork(ctx workflow.Context, input *ec2.DisassociateClientVpnTargetNetworkInput) (*ec2.DisassociateClientVpnTargetNetworkOutput, error)
	DisassociateClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.DisassociateClientVpnTargetNetworkInput) *Ec2DisassociateClientVpnTargetNetworkFuture

	DisassociateIamInstanceProfile(ctx workflow.Context, input *ec2.DisassociateIamInstanceProfileInput) (*ec2.DisassociateIamInstanceProfileOutput, error)
	DisassociateIamInstanceProfileAsync(ctx workflow.Context, input *ec2.DisassociateIamInstanceProfileInput) *Ec2DisassociateIamInstanceProfileFuture

	DisassociateRouteTable(ctx workflow.Context, input *ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error)
	DisassociateRouteTableAsync(ctx workflow.Context, input *ec2.DisassociateRouteTableInput) *Ec2DisassociateRouteTableFuture

	DisassociateSubnetCidrBlock(ctx workflow.Context, input *ec2.DisassociateSubnetCidrBlockInput) (*ec2.DisassociateSubnetCidrBlockOutput, error)
	DisassociateSubnetCidrBlockAsync(ctx workflow.Context, input *ec2.DisassociateSubnetCidrBlockInput) *Ec2DisassociateSubnetCidrBlockFuture

	DisassociateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.DisassociateTransitGatewayMulticastDomainInput) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error)
	DisassociateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.DisassociateTransitGatewayMulticastDomainInput) *Ec2DisassociateTransitGatewayMulticastDomainFuture

	DisassociateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.DisassociateTransitGatewayRouteTableInput) (*ec2.DisassociateTransitGatewayRouteTableOutput, error)
	DisassociateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.DisassociateTransitGatewayRouteTableInput) *Ec2DisassociateTransitGatewayRouteTableFuture

	DisassociateVpcCidrBlock(ctx workflow.Context, input *ec2.DisassociateVpcCidrBlockInput) (*ec2.DisassociateVpcCidrBlockOutput, error)
	DisassociateVpcCidrBlockAsync(ctx workflow.Context, input *ec2.DisassociateVpcCidrBlockInput) *Ec2DisassociateVpcCidrBlockFuture

	EnableEbsEncryptionByDefault(ctx workflow.Context, input *ec2.EnableEbsEncryptionByDefaultInput) (*ec2.EnableEbsEncryptionByDefaultOutput, error)
	EnableEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.EnableEbsEncryptionByDefaultInput) *Ec2EnableEbsEncryptionByDefaultFuture

	EnableFastSnapshotRestores(ctx workflow.Context, input *ec2.EnableFastSnapshotRestoresInput) (*ec2.EnableFastSnapshotRestoresOutput, error)
	EnableFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.EnableFastSnapshotRestoresInput) *Ec2EnableFastSnapshotRestoresFuture

	EnableTransitGatewayRouteTablePropagation(ctx workflow.Context, input *ec2.EnableTransitGatewayRouteTablePropagationInput) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error)
	EnableTransitGatewayRouteTablePropagationAsync(ctx workflow.Context, input *ec2.EnableTransitGatewayRouteTablePropagationInput) *Ec2EnableTransitGatewayRouteTablePropagationFuture

	EnableVgwRoutePropagation(ctx workflow.Context, input *ec2.EnableVgwRoutePropagationInput) (*ec2.EnableVgwRoutePropagationOutput, error)
	EnableVgwRoutePropagationAsync(ctx workflow.Context, input *ec2.EnableVgwRoutePropagationInput) *Ec2EnableVgwRoutePropagationFuture

	EnableVolumeIO(ctx workflow.Context, input *ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error)
	EnableVolumeIOAsync(ctx workflow.Context, input *ec2.EnableVolumeIOInput) *Ec2EnableVolumeIOFuture

	EnableVpcClassicLink(ctx workflow.Context, input *ec2.EnableVpcClassicLinkInput) (*ec2.EnableVpcClassicLinkOutput, error)
	EnableVpcClassicLinkAsync(ctx workflow.Context, input *ec2.EnableVpcClassicLinkInput) *Ec2EnableVpcClassicLinkFuture

	EnableVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error)
	EnableVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput) *Ec2EnableVpcClassicLinkDnsSupportFuture

	ExportClientVpnClientCertificateRevocationList(ctx workflow.Context, input *ec2.ExportClientVpnClientCertificateRevocationListInput) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error)
	ExportClientVpnClientCertificateRevocationListAsync(ctx workflow.Context, input *ec2.ExportClientVpnClientCertificateRevocationListInput) *Ec2ExportClientVpnClientCertificateRevocationListFuture

	ExportClientVpnClientConfiguration(ctx workflow.Context, input *ec2.ExportClientVpnClientConfigurationInput) (*ec2.ExportClientVpnClientConfigurationOutput, error)
	ExportClientVpnClientConfigurationAsync(ctx workflow.Context, input *ec2.ExportClientVpnClientConfigurationInput) *Ec2ExportClientVpnClientConfigurationFuture

	ExportImage(ctx workflow.Context, input *ec2.ExportImageInput) (*ec2.ExportImageOutput, error)
	ExportImageAsync(ctx workflow.Context, input *ec2.ExportImageInput) *Ec2ExportImageFuture

	ExportTransitGatewayRoutes(ctx workflow.Context, input *ec2.ExportTransitGatewayRoutesInput) (*ec2.ExportTransitGatewayRoutesOutput, error)
	ExportTransitGatewayRoutesAsync(ctx workflow.Context, input *ec2.ExportTransitGatewayRoutesInput) *Ec2ExportTransitGatewayRoutesFuture

	GetAssociatedIpv6PoolCidrs(ctx workflow.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error)
	GetAssociatedIpv6PoolCidrsAsync(ctx workflow.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput) *Ec2GetAssociatedIpv6PoolCidrsFuture

	GetCapacityReservationUsage(ctx workflow.Context, input *ec2.GetCapacityReservationUsageInput) (*ec2.GetCapacityReservationUsageOutput, error)
	GetCapacityReservationUsageAsync(ctx workflow.Context, input *ec2.GetCapacityReservationUsageInput) *Ec2GetCapacityReservationUsageFuture

	GetCoipPoolUsage(ctx workflow.Context, input *ec2.GetCoipPoolUsageInput) (*ec2.GetCoipPoolUsageOutput, error)
	GetCoipPoolUsageAsync(ctx workflow.Context, input *ec2.GetCoipPoolUsageInput) *Ec2GetCoipPoolUsageFuture

	GetConsoleOutput(ctx workflow.Context, input *ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error)
	GetConsoleOutputAsync(ctx workflow.Context, input *ec2.GetConsoleOutputInput) *Ec2GetConsoleOutputFuture

	GetConsoleScreenshot(ctx workflow.Context, input *ec2.GetConsoleScreenshotInput) (*ec2.GetConsoleScreenshotOutput, error)
	GetConsoleScreenshotAsync(ctx workflow.Context, input *ec2.GetConsoleScreenshotInput) *Ec2GetConsoleScreenshotFuture

	GetDefaultCreditSpecification(ctx workflow.Context, input *ec2.GetDefaultCreditSpecificationInput) (*ec2.GetDefaultCreditSpecificationOutput, error)
	GetDefaultCreditSpecificationAsync(ctx workflow.Context, input *ec2.GetDefaultCreditSpecificationInput) *Ec2GetDefaultCreditSpecificationFuture

	GetEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.GetEbsDefaultKmsKeyIdInput) (*ec2.GetEbsDefaultKmsKeyIdOutput, error)
	GetEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.GetEbsDefaultKmsKeyIdInput) *Ec2GetEbsDefaultKmsKeyIdFuture

	GetEbsEncryptionByDefault(ctx workflow.Context, input *ec2.GetEbsEncryptionByDefaultInput) (*ec2.GetEbsEncryptionByDefaultOutput, error)
	GetEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.GetEbsEncryptionByDefaultInput) *Ec2GetEbsEncryptionByDefaultFuture

	GetGroupsForCapacityReservation(ctx workflow.Context, input *ec2.GetGroupsForCapacityReservationInput) (*ec2.GetGroupsForCapacityReservationOutput, error)
	GetGroupsForCapacityReservationAsync(ctx workflow.Context, input *ec2.GetGroupsForCapacityReservationInput) *Ec2GetGroupsForCapacityReservationFuture

	GetHostReservationPurchasePreview(ctx workflow.Context, input *ec2.GetHostReservationPurchasePreviewInput) (*ec2.GetHostReservationPurchasePreviewOutput, error)
	GetHostReservationPurchasePreviewAsync(ctx workflow.Context, input *ec2.GetHostReservationPurchasePreviewInput) *Ec2GetHostReservationPurchasePreviewFuture

	GetLaunchTemplateData(ctx workflow.Context, input *ec2.GetLaunchTemplateDataInput) (*ec2.GetLaunchTemplateDataOutput, error)
	GetLaunchTemplateDataAsync(ctx workflow.Context, input *ec2.GetLaunchTemplateDataInput) *Ec2GetLaunchTemplateDataFuture

	GetManagedPrefixListAssociations(ctx workflow.Context, input *ec2.GetManagedPrefixListAssociationsInput) (*ec2.GetManagedPrefixListAssociationsOutput, error)
	GetManagedPrefixListAssociationsAsync(ctx workflow.Context, input *ec2.GetManagedPrefixListAssociationsInput) *Ec2GetManagedPrefixListAssociationsFuture

	GetManagedPrefixListEntries(ctx workflow.Context, input *ec2.GetManagedPrefixListEntriesInput) (*ec2.GetManagedPrefixListEntriesOutput, error)
	GetManagedPrefixListEntriesAsync(ctx workflow.Context, input *ec2.GetManagedPrefixListEntriesInput) *Ec2GetManagedPrefixListEntriesFuture

	GetPasswordData(ctx workflow.Context, input *ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error)
	GetPasswordDataAsync(ctx workflow.Context, input *ec2.GetPasswordDataInput) *Ec2GetPasswordDataFuture

	GetReservedInstancesExchangeQuote(ctx workflow.Context, input *ec2.GetReservedInstancesExchangeQuoteInput) (*ec2.GetReservedInstancesExchangeQuoteOutput, error)
	GetReservedInstancesExchangeQuoteAsync(ctx workflow.Context, input *ec2.GetReservedInstancesExchangeQuoteInput) *Ec2GetReservedInstancesExchangeQuoteFuture

	GetTransitGatewayAttachmentPropagations(ctx workflow.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error)
	GetTransitGatewayAttachmentPropagationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput) *Ec2GetTransitGatewayAttachmentPropagationsFuture

	GetTransitGatewayMulticastDomainAssociations(ctx workflow.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error)
	GetTransitGatewayMulticastDomainAssociationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput) *Ec2GetTransitGatewayMulticastDomainAssociationsFuture

	GetTransitGatewayPrefixListReferences(ctx workflow.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error)
	GetTransitGatewayPrefixListReferencesAsync(ctx workflow.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput) *Ec2GetTransitGatewayPrefixListReferencesFuture

	GetTransitGatewayRouteTableAssociations(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error)
	GetTransitGatewayRouteTableAssociationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput) *Ec2GetTransitGatewayRouteTableAssociationsFuture

	GetTransitGatewayRouteTablePropagations(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error)
	GetTransitGatewayRouteTablePropagationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput) *Ec2GetTransitGatewayRouteTablePropagationsFuture

	ImportClientVpnClientCertificateRevocationList(ctx workflow.Context, input *ec2.ImportClientVpnClientCertificateRevocationListInput) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error)
	ImportClientVpnClientCertificateRevocationListAsync(ctx workflow.Context, input *ec2.ImportClientVpnClientCertificateRevocationListInput) *Ec2ImportClientVpnClientCertificateRevocationListFuture

	ImportImage(ctx workflow.Context, input *ec2.ImportImageInput) (*ec2.ImportImageOutput, error)
	ImportImageAsync(ctx workflow.Context, input *ec2.ImportImageInput) *Ec2ImportImageFuture

	ImportInstance(ctx workflow.Context, input *ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error)
	ImportInstanceAsync(ctx workflow.Context, input *ec2.ImportInstanceInput) *Ec2ImportInstanceFuture

	ImportKeyPair(ctx workflow.Context, input *ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error)
	ImportKeyPairAsync(ctx workflow.Context, input *ec2.ImportKeyPairInput) *Ec2ImportKeyPairFuture

	ImportSnapshot(ctx workflow.Context, input *ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error)
	ImportSnapshotAsync(ctx workflow.Context, input *ec2.ImportSnapshotInput) *Ec2ImportSnapshotFuture

	ImportVolume(ctx workflow.Context, input *ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error)
	ImportVolumeAsync(ctx workflow.Context, input *ec2.ImportVolumeInput) *Ec2ImportVolumeFuture

	ModifyAvailabilityZoneGroup(ctx workflow.Context, input *ec2.ModifyAvailabilityZoneGroupInput) (*ec2.ModifyAvailabilityZoneGroupOutput, error)
	ModifyAvailabilityZoneGroupAsync(ctx workflow.Context, input *ec2.ModifyAvailabilityZoneGroupInput) *Ec2ModifyAvailabilityZoneGroupFuture

	ModifyCapacityReservation(ctx workflow.Context, input *ec2.ModifyCapacityReservationInput) (*ec2.ModifyCapacityReservationOutput, error)
	ModifyCapacityReservationAsync(ctx workflow.Context, input *ec2.ModifyCapacityReservationInput) *Ec2ModifyCapacityReservationFuture

	ModifyClientVpnEndpoint(ctx workflow.Context, input *ec2.ModifyClientVpnEndpointInput) (*ec2.ModifyClientVpnEndpointOutput, error)
	ModifyClientVpnEndpointAsync(ctx workflow.Context, input *ec2.ModifyClientVpnEndpointInput) *Ec2ModifyClientVpnEndpointFuture

	ModifyDefaultCreditSpecification(ctx workflow.Context, input *ec2.ModifyDefaultCreditSpecificationInput) (*ec2.ModifyDefaultCreditSpecificationOutput, error)
	ModifyDefaultCreditSpecificationAsync(ctx workflow.Context, input *ec2.ModifyDefaultCreditSpecificationInput) *Ec2ModifyDefaultCreditSpecificationFuture

	ModifyEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.ModifyEbsDefaultKmsKeyIdInput) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error)
	ModifyEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.ModifyEbsDefaultKmsKeyIdInput) *Ec2ModifyEbsDefaultKmsKeyIdFuture

	ModifyFleet(ctx workflow.Context, input *ec2.ModifyFleetInput) (*ec2.ModifyFleetOutput, error)
	ModifyFleetAsync(ctx workflow.Context, input *ec2.ModifyFleetInput) *Ec2ModifyFleetFuture

	ModifyFpgaImageAttribute(ctx workflow.Context, input *ec2.ModifyFpgaImageAttributeInput) (*ec2.ModifyFpgaImageAttributeOutput, error)
	ModifyFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.ModifyFpgaImageAttributeInput) *Ec2ModifyFpgaImageAttributeFuture

	ModifyHosts(ctx workflow.Context, input *ec2.ModifyHostsInput) (*ec2.ModifyHostsOutput, error)
	ModifyHostsAsync(ctx workflow.Context, input *ec2.ModifyHostsInput) *Ec2ModifyHostsFuture

	ModifyIdFormat(ctx workflow.Context, input *ec2.ModifyIdFormatInput) (*ec2.ModifyIdFormatOutput, error)
	ModifyIdFormatAsync(ctx workflow.Context, input *ec2.ModifyIdFormatInput) *Ec2ModifyIdFormatFuture

	ModifyIdentityIdFormat(ctx workflow.Context, input *ec2.ModifyIdentityIdFormatInput) (*ec2.ModifyIdentityIdFormatOutput, error)
	ModifyIdentityIdFormatAsync(ctx workflow.Context, input *ec2.ModifyIdentityIdFormatInput) *Ec2ModifyIdentityIdFormatFuture

	ModifyImageAttribute(ctx workflow.Context, input *ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error)
	ModifyImageAttributeAsync(ctx workflow.Context, input *ec2.ModifyImageAttributeInput) *Ec2ModifyImageAttributeFuture

	ModifyInstanceAttribute(ctx workflow.Context, input *ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error)
	ModifyInstanceAttributeAsync(ctx workflow.Context, input *ec2.ModifyInstanceAttributeInput) *Ec2ModifyInstanceAttributeFuture

	ModifyInstanceCapacityReservationAttributes(ctx workflow.Context, input *ec2.ModifyInstanceCapacityReservationAttributesInput) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error)
	ModifyInstanceCapacityReservationAttributesAsync(ctx workflow.Context, input *ec2.ModifyInstanceCapacityReservationAttributesInput) *Ec2ModifyInstanceCapacityReservationAttributesFuture

	ModifyInstanceCreditSpecification(ctx workflow.Context, input *ec2.ModifyInstanceCreditSpecificationInput) (*ec2.ModifyInstanceCreditSpecificationOutput, error)
	ModifyInstanceCreditSpecificationAsync(ctx workflow.Context, input *ec2.ModifyInstanceCreditSpecificationInput) *Ec2ModifyInstanceCreditSpecificationFuture

	ModifyInstanceEventStartTime(ctx workflow.Context, input *ec2.ModifyInstanceEventStartTimeInput) (*ec2.ModifyInstanceEventStartTimeOutput, error)
	ModifyInstanceEventStartTimeAsync(ctx workflow.Context, input *ec2.ModifyInstanceEventStartTimeInput) *Ec2ModifyInstanceEventStartTimeFuture

	ModifyInstanceMetadataOptions(ctx workflow.Context, input *ec2.ModifyInstanceMetadataOptionsInput) (*ec2.ModifyInstanceMetadataOptionsOutput, error)
	ModifyInstanceMetadataOptionsAsync(ctx workflow.Context, input *ec2.ModifyInstanceMetadataOptionsInput) *Ec2ModifyInstanceMetadataOptionsFuture

	ModifyInstancePlacement(ctx workflow.Context, input *ec2.ModifyInstancePlacementInput) (*ec2.ModifyInstancePlacementOutput, error)
	ModifyInstancePlacementAsync(ctx workflow.Context, input *ec2.ModifyInstancePlacementInput) *Ec2ModifyInstancePlacementFuture

	ModifyLaunchTemplate(ctx workflow.Context, input *ec2.ModifyLaunchTemplateInput) (*ec2.ModifyLaunchTemplateOutput, error)
	ModifyLaunchTemplateAsync(ctx workflow.Context, input *ec2.ModifyLaunchTemplateInput) *Ec2ModifyLaunchTemplateFuture

	ModifyManagedPrefixList(ctx workflow.Context, input *ec2.ModifyManagedPrefixListInput) (*ec2.ModifyManagedPrefixListOutput, error)
	ModifyManagedPrefixListAsync(ctx workflow.Context, input *ec2.ModifyManagedPrefixListInput) *Ec2ModifyManagedPrefixListFuture

	ModifyNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error)
	ModifyNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.ModifyNetworkInterfaceAttributeInput) *Ec2ModifyNetworkInterfaceAttributeFuture

	ModifyReservedInstances(ctx workflow.Context, input *ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error)
	ModifyReservedInstancesAsync(ctx workflow.Context, input *ec2.ModifyReservedInstancesInput) *Ec2ModifyReservedInstancesFuture

	ModifySnapshotAttribute(ctx workflow.Context, input *ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error)
	ModifySnapshotAttributeAsync(ctx workflow.Context, input *ec2.ModifySnapshotAttributeInput) *Ec2ModifySnapshotAttributeFuture

	ModifySubnetAttribute(ctx workflow.Context, input *ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error)
	ModifySubnetAttributeAsync(ctx workflow.Context, input *ec2.ModifySubnetAttributeInput) *Ec2ModifySubnetAttributeFuture

	ModifyTrafficMirrorFilterNetworkServices(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error)
	ModifyTrafficMirrorFilterNetworkServicesAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) *Ec2ModifyTrafficMirrorFilterNetworkServicesFuture

	ModifyTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterRuleInput) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error)
	ModifyTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterRuleInput) *Ec2ModifyTrafficMirrorFilterRuleFuture

	ModifyTrafficMirrorSession(ctx workflow.Context, input *ec2.ModifyTrafficMirrorSessionInput) (*ec2.ModifyTrafficMirrorSessionOutput, error)
	ModifyTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorSessionInput) *Ec2ModifyTrafficMirrorSessionFuture

	ModifyTransitGateway(ctx workflow.Context, input *ec2.ModifyTransitGatewayInput) (*ec2.ModifyTransitGatewayOutput, error)
	ModifyTransitGatewayAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayInput) *Ec2ModifyTransitGatewayFuture

	ModifyTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.ModifyTransitGatewayPrefixListReferenceInput) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error)
	ModifyTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayPrefixListReferenceInput) *Ec2ModifyTransitGatewayPrefixListReferenceFuture

	ModifyTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.ModifyTransitGatewayVpcAttachmentInput) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error)
	ModifyTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayVpcAttachmentInput) *Ec2ModifyTransitGatewayVpcAttachmentFuture

	ModifyVolume(ctx workflow.Context, input *ec2.ModifyVolumeInput) (*ec2.ModifyVolumeOutput, error)
	ModifyVolumeAsync(ctx workflow.Context, input *ec2.ModifyVolumeInput) *Ec2ModifyVolumeFuture

	ModifyVolumeAttribute(ctx workflow.Context, input *ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error)
	ModifyVolumeAttributeAsync(ctx workflow.Context, input *ec2.ModifyVolumeAttributeInput) *Ec2ModifyVolumeAttributeFuture

	ModifyVpcAttribute(ctx workflow.Context, input *ec2.ModifyVpcAttributeInput) (*ec2.ModifyVpcAttributeOutput, error)
	ModifyVpcAttributeAsync(ctx workflow.Context, input *ec2.ModifyVpcAttributeInput) *Ec2ModifyVpcAttributeFuture

	ModifyVpcEndpoint(ctx workflow.Context, input *ec2.ModifyVpcEndpointInput) (*ec2.ModifyVpcEndpointOutput, error)
	ModifyVpcEndpointAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointInput) *Ec2ModifyVpcEndpointFuture

	ModifyVpcEndpointConnectionNotification(ctx workflow.Context, input *ec2.ModifyVpcEndpointConnectionNotificationInput) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error)
	ModifyVpcEndpointConnectionNotificationAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointConnectionNotificationInput) *Ec2ModifyVpcEndpointConnectionNotificationFuture

	ModifyVpcEndpointServiceConfiguration(ctx workflow.Context, input *ec2.ModifyVpcEndpointServiceConfigurationInput) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error)
	ModifyVpcEndpointServiceConfigurationAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointServiceConfigurationInput) *Ec2ModifyVpcEndpointServiceConfigurationFuture

	ModifyVpcEndpointServicePermissions(ctx workflow.Context, input *ec2.ModifyVpcEndpointServicePermissionsInput) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error)
	ModifyVpcEndpointServicePermissionsAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointServicePermissionsInput) *Ec2ModifyVpcEndpointServicePermissionsFuture

	ModifyVpcPeeringConnectionOptions(ctx workflow.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error)
	ModifyVpcPeeringConnectionOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput) *Ec2ModifyVpcPeeringConnectionOptionsFuture

	ModifyVpcTenancy(ctx workflow.Context, input *ec2.ModifyVpcTenancyInput) (*ec2.ModifyVpcTenancyOutput, error)
	ModifyVpcTenancyAsync(ctx workflow.Context, input *ec2.ModifyVpcTenancyInput) *Ec2ModifyVpcTenancyFuture

	ModifyVpnConnection(ctx workflow.Context, input *ec2.ModifyVpnConnectionInput) (*ec2.ModifyVpnConnectionOutput, error)
	ModifyVpnConnectionAsync(ctx workflow.Context, input *ec2.ModifyVpnConnectionInput) *Ec2ModifyVpnConnectionFuture

	ModifyVpnConnectionOptions(ctx workflow.Context, input *ec2.ModifyVpnConnectionOptionsInput) (*ec2.ModifyVpnConnectionOptionsOutput, error)
	ModifyVpnConnectionOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpnConnectionOptionsInput) *Ec2ModifyVpnConnectionOptionsFuture

	ModifyVpnTunnelCertificate(ctx workflow.Context, input *ec2.ModifyVpnTunnelCertificateInput) (*ec2.ModifyVpnTunnelCertificateOutput, error)
	ModifyVpnTunnelCertificateAsync(ctx workflow.Context, input *ec2.ModifyVpnTunnelCertificateInput) *Ec2ModifyVpnTunnelCertificateFuture

	ModifyVpnTunnelOptions(ctx workflow.Context, input *ec2.ModifyVpnTunnelOptionsInput) (*ec2.ModifyVpnTunnelOptionsOutput, error)
	ModifyVpnTunnelOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpnTunnelOptionsInput) *Ec2ModifyVpnTunnelOptionsFuture

	MonitorInstances(ctx workflow.Context, input *ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error)
	MonitorInstancesAsync(ctx workflow.Context, input *ec2.MonitorInstancesInput) *Ec2MonitorInstancesFuture

	MoveAddressToVpc(ctx workflow.Context, input *ec2.MoveAddressToVpcInput) (*ec2.MoveAddressToVpcOutput, error)
	MoveAddressToVpcAsync(ctx workflow.Context, input *ec2.MoveAddressToVpcInput) *Ec2MoveAddressToVpcFuture

	ProvisionByoipCidr(ctx workflow.Context, input *ec2.ProvisionByoipCidrInput) (*ec2.ProvisionByoipCidrOutput, error)
	ProvisionByoipCidrAsync(ctx workflow.Context, input *ec2.ProvisionByoipCidrInput) *Ec2ProvisionByoipCidrFuture

	PurchaseHostReservation(ctx workflow.Context, input *ec2.PurchaseHostReservationInput) (*ec2.PurchaseHostReservationOutput, error)
	PurchaseHostReservationAsync(ctx workflow.Context, input *ec2.PurchaseHostReservationInput) *Ec2PurchaseHostReservationFuture

	PurchaseReservedInstancesOffering(ctx workflow.Context, input *ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error)
	PurchaseReservedInstancesOfferingAsync(ctx workflow.Context, input *ec2.PurchaseReservedInstancesOfferingInput) *Ec2PurchaseReservedInstancesOfferingFuture

	PurchaseScheduledInstances(ctx workflow.Context, input *ec2.PurchaseScheduledInstancesInput) (*ec2.PurchaseScheduledInstancesOutput, error)
	PurchaseScheduledInstancesAsync(ctx workflow.Context, input *ec2.PurchaseScheduledInstancesInput) *Ec2PurchaseScheduledInstancesFuture

	RebootInstances(ctx workflow.Context, input *ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error)
	RebootInstancesAsync(ctx workflow.Context, input *ec2.RebootInstancesInput) *Ec2RebootInstancesFuture

	RegisterImage(ctx workflow.Context, input *ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error)
	RegisterImageAsync(ctx workflow.Context, input *ec2.RegisterImageInput) *Ec2RegisterImageFuture

	RegisterInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.RegisterInstanceEventNotificationAttributesInput) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error)
	RegisterInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.RegisterInstanceEventNotificationAttributesInput) *Ec2RegisterInstanceEventNotificationAttributesFuture

	RegisterTransitGatewayMulticastGroupMembers(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error)
	RegisterTransitGatewayMulticastGroupMembersAsync(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupMembersInput) *Ec2RegisterTransitGatewayMulticastGroupMembersFuture

	RegisterTransitGatewayMulticastGroupSources(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error)
	RegisterTransitGatewayMulticastGroupSourcesAsync(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) *Ec2RegisterTransitGatewayMulticastGroupSourcesFuture

	RejectTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.RejectTransitGatewayPeeringAttachmentInput) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error)
	RejectTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.RejectTransitGatewayPeeringAttachmentInput) *Ec2RejectTransitGatewayPeeringAttachmentFuture

	RejectTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error)
	RejectTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.RejectTransitGatewayVpcAttachmentInput) *Ec2RejectTransitGatewayVpcAttachmentFuture

	RejectVpcEndpointConnections(ctx workflow.Context, input *ec2.RejectVpcEndpointConnectionsInput) (*ec2.RejectVpcEndpointConnectionsOutput, error)
	RejectVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.RejectVpcEndpointConnectionsInput) *Ec2RejectVpcEndpointConnectionsFuture

	RejectVpcPeeringConnection(ctx workflow.Context, input *ec2.RejectVpcPeeringConnectionInput) (*ec2.RejectVpcPeeringConnectionOutput, error)
	RejectVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.RejectVpcPeeringConnectionInput) *Ec2RejectVpcPeeringConnectionFuture

	ReleaseAddress(ctx workflow.Context, input *ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error)
	ReleaseAddressAsync(ctx workflow.Context, input *ec2.ReleaseAddressInput) *Ec2ReleaseAddressFuture

	ReleaseHosts(ctx workflow.Context, input *ec2.ReleaseHostsInput) (*ec2.ReleaseHostsOutput, error)
	ReleaseHostsAsync(ctx workflow.Context, input *ec2.ReleaseHostsInput) *Ec2ReleaseHostsFuture

	ReplaceIamInstanceProfileAssociation(ctx workflow.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error)
	ReplaceIamInstanceProfileAssociationAsync(ctx workflow.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput) *Ec2ReplaceIamInstanceProfileAssociationFuture

	ReplaceNetworkAclAssociation(ctx workflow.Context, input *ec2.ReplaceNetworkAclAssociationInput) (*ec2.ReplaceNetworkAclAssociationOutput, error)
	ReplaceNetworkAclAssociationAsync(ctx workflow.Context, input *ec2.ReplaceNetworkAclAssociationInput) *Ec2ReplaceNetworkAclAssociationFuture

	ReplaceNetworkAclEntry(ctx workflow.Context, input *ec2.ReplaceNetworkAclEntryInput) (*ec2.ReplaceNetworkAclEntryOutput, error)
	ReplaceNetworkAclEntryAsync(ctx workflow.Context, input *ec2.ReplaceNetworkAclEntryInput) *Ec2ReplaceNetworkAclEntryFuture

	ReplaceRoute(ctx workflow.Context, input *ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error)
	ReplaceRouteAsync(ctx workflow.Context, input *ec2.ReplaceRouteInput) *Ec2ReplaceRouteFuture

	ReplaceRouteTableAssociation(ctx workflow.Context, input *ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error)
	ReplaceRouteTableAssociationAsync(ctx workflow.Context, input *ec2.ReplaceRouteTableAssociationInput) *Ec2ReplaceRouteTableAssociationFuture

	ReplaceTransitGatewayRoute(ctx workflow.Context, input *ec2.ReplaceTransitGatewayRouteInput) (*ec2.ReplaceTransitGatewayRouteOutput, error)
	ReplaceTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.ReplaceTransitGatewayRouteInput) *Ec2ReplaceTransitGatewayRouteFuture

	ReportInstanceStatus(ctx workflow.Context, input *ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error)
	ReportInstanceStatusAsync(ctx workflow.Context, input *ec2.ReportInstanceStatusInput) *Ec2ReportInstanceStatusFuture

	RequestSpotFleet(ctx workflow.Context, input *ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error)
	RequestSpotFleetAsync(ctx workflow.Context, input *ec2.RequestSpotFleetInput) *Ec2RequestSpotFleetFuture

	RequestSpotInstances(ctx workflow.Context, input *ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error)
	RequestSpotInstancesAsync(ctx workflow.Context, input *ec2.RequestSpotInstancesInput) *Ec2RequestSpotInstancesFuture

	ResetEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.ResetEbsDefaultKmsKeyIdInput) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error)
	ResetEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.ResetEbsDefaultKmsKeyIdInput) *Ec2ResetEbsDefaultKmsKeyIdFuture

	ResetFpgaImageAttribute(ctx workflow.Context, input *ec2.ResetFpgaImageAttributeInput) (*ec2.ResetFpgaImageAttributeOutput, error)
	ResetFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.ResetFpgaImageAttributeInput) *Ec2ResetFpgaImageAttributeFuture

	ResetImageAttribute(ctx workflow.Context, input *ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error)
	ResetImageAttributeAsync(ctx workflow.Context, input *ec2.ResetImageAttributeInput) *Ec2ResetImageAttributeFuture

	ResetInstanceAttribute(ctx workflow.Context, input *ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error)
	ResetInstanceAttributeAsync(ctx workflow.Context, input *ec2.ResetInstanceAttributeInput) *Ec2ResetInstanceAttributeFuture

	ResetNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error)
	ResetNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.ResetNetworkInterfaceAttributeInput) *Ec2ResetNetworkInterfaceAttributeFuture

	ResetSnapshotAttribute(ctx workflow.Context, input *ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error)
	ResetSnapshotAttributeAsync(ctx workflow.Context, input *ec2.ResetSnapshotAttributeInput) *Ec2ResetSnapshotAttributeFuture

	RestoreAddressToClassic(ctx workflow.Context, input *ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error)
	RestoreAddressToClassicAsync(ctx workflow.Context, input *ec2.RestoreAddressToClassicInput) *Ec2RestoreAddressToClassicFuture

	RestoreManagedPrefixListVersion(ctx workflow.Context, input *ec2.RestoreManagedPrefixListVersionInput) (*ec2.RestoreManagedPrefixListVersionOutput, error)
	RestoreManagedPrefixListVersionAsync(ctx workflow.Context, input *ec2.RestoreManagedPrefixListVersionInput) *Ec2RestoreManagedPrefixListVersionFuture

	RevokeClientVpnIngress(ctx workflow.Context, input *ec2.RevokeClientVpnIngressInput) (*ec2.RevokeClientVpnIngressOutput, error)
	RevokeClientVpnIngressAsync(ctx workflow.Context, input *ec2.RevokeClientVpnIngressInput) *Ec2RevokeClientVpnIngressFuture

	RevokeSecurityGroupEgress(ctx workflow.Context, input *ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error)
	RevokeSecurityGroupEgressAsync(ctx workflow.Context, input *ec2.RevokeSecurityGroupEgressInput) *Ec2RevokeSecurityGroupEgressFuture

	RevokeSecurityGroupIngress(ctx workflow.Context, input *ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error)
	RevokeSecurityGroupIngressAsync(ctx workflow.Context, input *ec2.RevokeSecurityGroupIngressInput) *Ec2RevokeSecurityGroupIngressFuture

	RunInstances(ctx workflow.Context, input *ec2.RunInstancesInput) (*ec2.Reservation, error)
	RunInstancesAsync(ctx workflow.Context, input *ec2.RunInstancesInput) *Ec2RunInstancesFuture

	RunScheduledInstances(ctx workflow.Context, input *ec2.RunScheduledInstancesInput) (*ec2.RunScheduledInstancesOutput, error)
	RunScheduledInstancesAsync(ctx workflow.Context, input *ec2.RunScheduledInstancesInput) *Ec2RunScheduledInstancesFuture

	SearchLocalGatewayRoutes(ctx workflow.Context, input *ec2.SearchLocalGatewayRoutesInput) (*ec2.SearchLocalGatewayRoutesOutput, error)
	SearchLocalGatewayRoutesAsync(ctx workflow.Context, input *ec2.SearchLocalGatewayRoutesInput) *Ec2SearchLocalGatewayRoutesFuture

	SearchTransitGatewayMulticastGroups(ctx workflow.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error)
	SearchTransitGatewayMulticastGroupsAsync(ctx workflow.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput) *Ec2SearchTransitGatewayMulticastGroupsFuture

	SearchTransitGatewayRoutes(ctx workflow.Context, input *ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error)
	SearchTransitGatewayRoutesAsync(ctx workflow.Context, input *ec2.SearchTransitGatewayRoutesInput) *Ec2SearchTransitGatewayRoutesFuture

	SendDiagnosticInterrupt(ctx workflow.Context, input *ec2.SendDiagnosticInterruptInput) (*ec2.SendDiagnosticInterruptOutput, error)
	SendDiagnosticInterruptAsync(ctx workflow.Context, input *ec2.SendDiagnosticInterruptInput) *Ec2SendDiagnosticInterruptFuture

	StartInstances(ctx workflow.Context, input *ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error)
	StartInstancesAsync(ctx workflow.Context, input *ec2.StartInstancesInput) *Ec2StartInstancesFuture

	StartVpcEndpointServicePrivateDnsVerification(ctx workflow.Context, input *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error)
	StartVpcEndpointServicePrivateDnsVerificationAsync(ctx workflow.Context, input *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) *Ec2StartVpcEndpointServicePrivateDnsVerificationFuture

	StopInstances(ctx workflow.Context, input *ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error)
	StopInstancesAsync(ctx workflow.Context, input *ec2.StopInstancesInput) *Ec2StopInstancesFuture

	TerminateClientVpnConnections(ctx workflow.Context, input *ec2.TerminateClientVpnConnectionsInput) (*ec2.TerminateClientVpnConnectionsOutput, error)
	TerminateClientVpnConnectionsAsync(ctx workflow.Context, input *ec2.TerminateClientVpnConnectionsInput) *Ec2TerminateClientVpnConnectionsFuture

	TerminateInstances(ctx workflow.Context, input *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error)
	TerminateInstancesAsync(ctx workflow.Context, input *ec2.TerminateInstancesInput) *Ec2TerminateInstancesFuture

	UnassignIpv6Addresses(ctx workflow.Context, input *ec2.UnassignIpv6AddressesInput) (*ec2.UnassignIpv6AddressesOutput, error)
	UnassignIpv6AddressesAsync(ctx workflow.Context, input *ec2.UnassignIpv6AddressesInput) *Ec2UnassignIpv6AddressesFuture

	UnassignPrivateIpAddresses(ctx workflow.Context, input *ec2.UnassignPrivateIpAddressesInput) (*ec2.UnassignPrivateIpAddressesOutput, error)
	UnassignPrivateIpAddressesAsync(ctx workflow.Context, input *ec2.UnassignPrivateIpAddressesInput) *Ec2UnassignPrivateIpAddressesFuture

	UnmonitorInstances(ctx workflow.Context, input *ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error)
	UnmonitorInstancesAsync(ctx workflow.Context, input *ec2.UnmonitorInstancesInput) *Ec2UnmonitorInstancesFuture

	UpdateSecurityGroupRuleDescriptionsEgress(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error)
	UpdateSecurityGroupRuleDescriptionsEgressAsync(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) *Ec2UpdateSecurityGroupRuleDescriptionsEgressFuture

	UpdateSecurityGroupRuleDescriptionsIngress(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error)
	UpdateSecurityGroupRuleDescriptionsIngressAsync(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) *Ec2UpdateSecurityGroupRuleDescriptionsIngressFuture

	WithdrawByoipCidr(ctx workflow.Context, input *ec2.WithdrawByoipCidrInput) (*ec2.WithdrawByoipCidrOutput, error)
	WithdrawByoipCidrAsync(ctx workflow.Context, input *ec2.WithdrawByoipCidrInput) *Ec2WithdrawByoipCidrFuture

	WaitUntilBundleTaskComplete(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) error
	WaitUntilBundleTaskCompleteAsync(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) workflow.Future

	WaitUntilConversionTaskCancelled(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error
	WaitUntilConversionTaskCancelledAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) workflow.Future

	WaitUntilConversionTaskCompleted(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error
	WaitUntilConversionTaskCompletedAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) workflow.Future

	WaitUntilConversionTaskDeleted(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error
	WaitUntilConversionTaskDeletedAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) workflow.Future

	WaitUntilCustomerGatewayAvailable(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) error
	WaitUntilCustomerGatewayAvailableAsync(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) workflow.Future

	WaitUntilExportTaskCancelled(ctx workflow.Context, input *ec2.DescribeExportTasksInput) error
	WaitUntilExportTaskCancelledAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) workflow.Future

	WaitUntilExportTaskCompleted(ctx workflow.Context, input *ec2.DescribeExportTasksInput) error
	WaitUntilExportTaskCompletedAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) workflow.Future

	WaitUntilImageAvailable(ctx workflow.Context, input *ec2.DescribeImagesInput) error
	WaitUntilImageAvailableAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) workflow.Future

	WaitUntilImageExists(ctx workflow.Context, input *ec2.DescribeImagesInput) error
	WaitUntilImageExistsAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) workflow.Future

	WaitUntilInstanceExists(ctx workflow.Context, input *ec2.DescribeInstancesInput) error
	WaitUntilInstanceExistsAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) workflow.Future

	WaitUntilInstanceRunning(ctx workflow.Context, input *ec2.DescribeInstancesInput) error
	WaitUntilInstanceRunningAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) workflow.Future

	WaitUntilInstanceStatusOk(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) error
	WaitUntilInstanceStatusOkAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) workflow.Future

	WaitUntilInstanceStopped(ctx workflow.Context, input *ec2.DescribeInstancesInput) error
	WaitUntilInstanceStoppedAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) workflow.Future

	WaitUntilInstanceTerminated(ctx workflow.Context, input *ec2.DescribeInstancesInput) error
	WaitUntilInstanceTerminatedAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) workflow.Future

	WaitUntilKeyPairExists(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) error
	WaitUntilKeyPairExistsAsync(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) workflow.Future

	WaitUntilNatGatewayAvailable(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) error
	WaitUntilNatGatewayAvailableAsync(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) workflow.Future

	WaitUntilNetworkInterfaceAvailable(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) error
	WaitUntilNetworkInterfaceAvailableAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) workflow.Future

	WaitUntilPasswordDataAvailable(ctx workflow.Context, input *ec2.GetPasswordDataInput) error
	WaitUntilPasswordDataAvailableAsync(ctx workflow.Context, input *ec2.GetPasswordDataInput) workflow.Future

	WaitUntilSecurityGroupExists(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) error
	WaitUntilSecurityGroupExistsAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) workflow.Future

	WaitUntilSnapshotCompleted(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) error
	WaitUntilSnapshotCompletedAsync(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) workflow.Future

	WaitUntilSpotInstanceRequestFulfilled(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) error
	WaitUntilSpotInstanceRequestFulfilledAsync(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) workflow.Future

	WaitUntilSubnetAvailable(ctx workflow.Context, input *ec2.DescribeSubnetsInput) error
	WaitUntilSubnetAvailableAsync(ctx workflow.Context, input *ec2.DescribeSubnetsInput) workflow.Future

	WaitUntilSystemStatusOk(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) error
	WaitUntilSystemStatusOkAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) workflow.Future

	WaitUntilVolumeAvailable(ctx workflow.Context, input *ec2.DescribeVolumesInput) error
	WaitUntilVolumeAvailableAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) workflow.Future

	WaitUntilVolumeDeleted(ctx workflow.Context, input *ec2.DescribeVolumesInput) error
	WaitUntilVolumeDeletedAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) workflow.Future

	WaitUntilVolumeInUse(ctx workflow.Context, input *ec2.DescribeVolumesInput) error
	WaitUntilVolumeInUseAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) workflow.Future

	WaitUntilVpcAvailable(ctx workflow.Context, input *ec2.DescribeVpcsInput) error
	WaitUntilVpcAvailableAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) workflow.Future

	WaitUntilVpcExists(ctx workflow.Context, input *ec2.DescribeVpcsInput) error
	WaitUntilVpcExistsAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) workflow.Future

	WaitUntilVpcPeeringConnectionDeleted(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) error
	WaitUntilVpcPeeringConnectionDeletedAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) workflow.Future

	WaitUntilVpcPeeringConnectionExists(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) error
	WaitUntilVpcPeeringConnectionExistsAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) workflow.Future

	WaitUntilVpnConnectionAvailable(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) error
	WaitUntilVpnConnectionAvailableAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) workflow.Future

	WaitUntilVpnConnectionDeleted(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) error
	WaitUntilVpnConnectionDeletedAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) workflow.Future
}

type EC2Stub struct{}

func NewEC2Stub() EC2Client {
	return &EC2Stub{}
}

type Ec2AcceptReservedInstancesExchangeQuoteFuture struct {
	Future workflow.Future
}

func (r *Ec2AcceptReservedInstancesExchangeQuoteFuture) Get(ctx workflow.Context) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	var output ec2.AcceptReservedInstancesExchangeQuoteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AcceptTransitGatewayPeeringAttachmentFuture struct {
	Future workflow.Future
}

func (r *Ec2AcceptTransitGatewayPeeringAttachmentFuture) Get(ctx workflow.Context) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.AcceptTransitGatewayPeeringAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AcceptTransitGatewayVpcAttachmentFuture struct {
	Future workflow.Future
}

func (r *Ec2AcceptTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.AcceptTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AcceptVpcEndpointConnectionsFuture struct {
	Future workflow.Future
}

func (r *Ec2AcceptVpcEndpointConnectionsFuture) Get(ctx workflow.Context) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
	var output ec2.AcceptVpcEndpointConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AcceptVpcPeeringConnectionFuture struct {
	Future workflow.Future
}

func (r *Ec2AcceptVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	var output ec2.AcceptVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AdvertiseByoipCidrFuture struct {
	Future workflow.Future
}

func (r *Ec2AdvertiseByoipCidrFuture) Get(ctx workflow.Context) (*ec2.AdvertiseByoipCidrOutput, error) {
	var output ec2.AdvertiseByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AllocateAddressFuture struct {
	Future workflow.Future
}

func (r *Ec2AllocateAddressFuture) Get(ctx workflow.Context) (*ec2.AllocateAddressOutput, error) {
	var output ec2.AllocateAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AllocateHostsFuture struct {
	Future workflow.Future
}

func (r *Ec2AllocateHostsFuture) Get(ctx workflow.Context) (*ec2.AllocateHostsOutput, error) {
	var output ec2.AllocateHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ApplySecurityGroupsToClientVpnTargetNetworkFuture struct {
	Future workflow.Future
}

func (r *Ec2ApplySecurityGroupsToClientVpnTargetNetworkFuture) Get(ctx workflow.Context) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
	var output ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AssignIpv6AddressesFuture struct {
	Future workflow.Future
}

func (r *Ec2AssignIpv6AddressesFuture) Get(ctx workflow.Context) (*ec2.AssignIpv6AddressesOutput, error) {
	var output ec2.AssignIpv6AddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AssignPrivateIpAddressesFuture struct {
	Future workflow.Future
}

func (r *Ec2AssignPrivateIpAddressesFuture) Get(ctx workflow.Context) (*ec2.AssignPrivateIpAddressesOutput, error) {
	var output ec2.AssignPrivateIpAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AssociateAddressFuture struct {
	Future workflow.Future
}

func (r *Ec2AssociateAddressFuture) Get(ctx workflow.Context) (*ec2.AssociateAddressOutput, error) {
	var output ec2.AssociateAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AssociateClientVpnTargetNetworkFuture struct {
	Future workflow.Future
}

func (r *Ec2AssociateClientVpnTargetNetworkFuture) Get(ctx workflow.Context) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
	var output ec2.AssociateClientVpnTargetNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AssociateDhcpOptionsFuture struct {
	Future workflow.Future
}

func (r *Ec2AssociateDhcpOptionsFuture) Get(ctx workflow.Context) (*ec2.AssociateDhcpOptionsOutput, error) {
	var output ec2.AssociateDhcpOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AssociateIamInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *Ec2AssociateIamInstanceProfileFuture) Get(ctx workflow.Context) (*ec2.AssociateIamInstanceProfileOutput, error) {
	var output ec2.AssociateIamInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AssociateRouteTableFuture struct {
	Future workflow.Future
}

func (r *Ec2AssociateRouteTableFuture) Get(ctx workflow.Context) (*ec2.AssociateRouteTableOutput, error) {
	var output ec2.AssociateRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AssociateSubnetCidrBlockFuture struct {
	Future workflow.Future
}

func (r *Ec2AssociateSubnetCidrBlockFuture) Get(ctx workflow.Context) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	var output ec2.AssociateSubnetCidrBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AssociateTransitGatewayMulticastDomainFuture struct {
	Future workflow.Future
}

func (r *Ec2AssociateTransitGatewayMulticastDomainFuture) Get(ctx workflow.Context) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.AssociateTransitGatewayMulticastDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AssociateTransitGatewayRouteTableFuture struct {
	Future workflow.Future
}

func (r *Ec2AssociateTransitGatewayRouteTableFuture) Get(ctx workflow.Context) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
	var output ec2.AssociateTransitGatewayRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AssociateVpcCidrBlockFuture struct {
	Future workflow.Future
}

func (r *Ec2AssociateVpcCidrBlockFuture) Get(ctx workflow.Context) (*ec2.AssociateVpcCidrBlockOutput, error) {
	var output ec2.AssociateVpcCidrBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AttachClassicLinkVpcFuture struct {
	Future workflow.Future
}

func (r *Ec2AttachClassicLinkVpcFuture) Get(ctx workflow.Context) (*ec2.AttachClassicLinkVpcOutput, error) {
	var output ec2.AttachClassicLinkVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AttachInternetGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2AttachInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.AttachInternetGatewayOutput, error) {
	var output ec2.AttachInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AttachNetworkInterfaceFuture struct {
	Future workflow.Future
}

func (r *Ec2AttachNetworkInterfaceFuture) Get(ctx workflow.Context) (*ec2.AttachNetworkInterfaceOutput, error) {
	var output ec2.AttachNetworkInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AttachVolumeFuture struct {
	Future workflow.Future
}

func (r *Ec2AttachVolumeFuture) Get(ctx workflow.Context) (*ec2.VolumeAttachment, error) {
	var output ec2.VolumeAttachment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AttachVpnGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2AttachVpnGatewayFuture) Get(ctx workflow.Context) (*ec2.AttachVpnGatewayOutput, error) {
	var output ec2.AttachVpnGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AuthorizeClientVpnIngressFuture struct {
	Future workflow.Future
}

func (r *Ec2AuthorizeClientVpnIngressFuture) Get(ctx workflow.Context) (*ec2.AuthorizeClientVpnIngressOutput, error) {
	var output ec2.AuthorizeClientVpnIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AuthorizeSecurityGroupEgressFuture struct {
	Future workflow.Future
}

func (r *Ec2AuthorizeSecurityGroupEgressFuture) Get(ctx workflow.Context) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	var output ec2.AuthorizeSecurityGroupEgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2AuthorizeSecurityGroupIngressFuture struct {
	Future workflow.Future
}

func (r *Ec2AuthorizeSecurityGroupIngressFuture) Get(ctx workflow.Context) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	var output ec2.AuthorizeSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2BundleInstanceFuture struct {
	Future workflow.Future
}

func (r *Ec2BundleInstanceFuture) Get(ctx workflow.Context) (*ec2.BundleInstanceOutput, error) {
	var output ec2.BundleInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CancelBundleTaskFuture struct {
	Future workflow.Future
}

func (r *Ec2CancelBundleTaskFuture) Get(ctx workflow.Context) (*ec2.CancelBundleTaskOutput, error) {
	var output ec2.CancelBundleTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CancelCapacityReservationFuture struct {
	Future workflow.Future
}

func (r *Ec2CancelCapacityReservationFuture) Get(ctx workflow.Context) (*ec2.CancelCapacityReservationOutput, error) {
	var output ec2.CancelCapacityReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CancelConversionTaskFuture struct {
	Future workflow.Future
}

func (r *Ec2CancelConversionTaskFuture) Get(ctx workflow.Context) (*ec2.CancelConversionTaskOutput, error) {
	var output ec2.CancelConversionTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CancelExportTaskFuture struct {
	Future workflow.Future
}

func (r *Ec2CancelExportTaskFuture) Get(ctx workflow.Context) (*ec2.CancelExportTaskOutput, error) {
	var output ec2.CancelExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CancelImportTaskFuture struct {
	Future workflow.Future
}

func (r *Ec2CancelImportTaskFuture) Get(ctx workflow.Context) (*ec2.CancelImportTaskOutput, error) {
	var output ec2.CancelImportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CancelReservedInstancesListingFuture struct {
	Future workflow.Future
}

func (r *Ec2CancelReservedInstancesListingFuture) Get(ctx workflow.Context) (*ec2.CancelReservedInstancesListingOutput, error) {
	var output ec2.CancelReservedInstancesListingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CancelSpotFleetRequestsFuture struct {
	Future workflow.Future
}

func (r *Ec2CancelSpotFleetRequestsFuture) Get(ctx workflow.Context) (*ec2.CancelSpotFleetRequestsOutput, error) {
	var output ec2.CancelSpotFleetRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CancelSpotInstanceRequestsFuture struct {
	Future workflow.Future
}

func (r *Ec2CancelSpotInstanceRequestsFuture) Get(ctx workflow.Context) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	var output ec2.CancelSpotInstanceRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ConfirmProductInstanceFuture struct {
	Future workflow.Future
}

func (r *Ec2ConfirmProductInstanceFuture) Get(ctx workflow.Context) (*ec2.ConfirmProductInstanceOutput, error) {
	var output ec2.ConfirmProductInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CopyFpgaImageFuture struct {
	Future workflow.Future
}

func (r *Ec2CopyFpgaImageFuture) Get(ctx workflow.Context) (*ec2.CopyFpgaImageOutput, error) {
	var output ec2.CopyFpgaImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CopyImageFuture struct {
	Future workflow.Future
}

func (r *Ec2CopyImageFuture) Get(ctx workflow.Context) (*ec2.CopyImageOutput, error) {
	var output ec2.CopyImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CopySnapshotFuture struct {
	Future workflow.Future
}

func (r *Ec2CopySnapshotFuture) Get(ctx workflow.Context) (*ec2.CopySnapshotOutput, error) {
	var output ec2.CopySnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateCapacityReservationFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateCapacityReservationFuture) Get(ctx workflow.Context) (*ec2.CreateCapacityReservationOutput, error) {
	var output ec2.CreateCapacityReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateCarrierGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateCarrierGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateCarrierGatewayOutput, error) {
	var output ec2.CreateCarrierGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateClientVpnEndpointFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateClientVpnEndpointFuture) Get(ctx workflow.Context) (*ec2.CreateClientVpnEndpointOutput, error) {
	var output ec2.CreateClientVpnEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateClientVpnRouteFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateClientVpnRouteFuture) Get(ctx workflow.Context) (*ec2.CreateClientVpnRouteOutput, error) {
	var output ec2.CreateClientVpnRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateCustomerGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateCustomerGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateCustomerGatewayOutput, error) {
	var output ec2.CreateCustomerGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateDefaultSubnetFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateDefaultSubnetFuture) Get(ctx workflow.Context) (*ec2.CreateDefaultSubnetOutput, error) {
	var output ec2.CreateDefaultSubnetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateDefaultVpcFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateDefaultVpcFuture) Get(ctx workflow.Context) (*ec2.CreateDefaultVpcOutput, error) {
	var output ec2.CreateDefaultVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateDhcpOptionsFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateDhcpOptionsFuture) Get(ctx workflow.Context) (*ec2.CreateDhcpOptionsOutput, error) {
	var output ec2.CreateDhcpOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateEgressOnlyInternetGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateEgressOnlyInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	var output ec2.CreateEgressOnlyInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateFleetFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateFleetFuture) Get(ctx workflow.Context) (*ec2.CreateFleetOutput, error) {
	var output ec2.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateFlowLogsFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateFlowLogsFuture) Get(ctx workflow.Context) (*ec2.CreateFlowLogsOutput, error) {
	var output ec2.CreateFlowLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateFpgaImageFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateFpgaImageFuture) Get(ctx workflow.Context) (*ec2.CreateFpgaImageOutput, error) {
	var output ec2.CreateFpgaImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateImageFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateImageFuture) Get(ctx workflow.Context) (*ec2.CreateImageOutput, error) {
	var output ec2.CreateImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateInstanceExportTaskFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateInstanceExportTaskFuture) Get(ctx workflow.Context) (*ec2.CreateInstanceExportTaskOutput, error) {
	var output ec2.CreateInstanceExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateInternetGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateInternetGatewayOutput, error) {
	var output ec2.CreateInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateKeyPairFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateKeyPairFuture) Get(ctx workflow.Context) (*ec2.CreateKeyPairOutput, error) {
	var output ec2.CreateKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateLaunchTemplateFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateLaunchTemplateFuture) Get(ctx workflow.Context) (*ec2.CreateLaunchTemplateOutput, error) {
	var output ec2.CreateLaunchTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateLaunchTemplateVersionFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateLaunchTemplateVersionFuture) Get(ctx workflow.Context) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	var output ec2.CreateLaunchTemplateVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateLocalGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateLocalGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.CreateLocalGatewayRouteOutput, error) {
	var output ec2.CreateLocalGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateLocalGatewayRouteTableVpcAssociationFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateLocalGatewayRouteTableVpcAssociationFuture) Get(ctx workflow.Context) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
	var output ec2.CreateLocalGatewayRouteTableVpcAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateManagedPrefixListFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateManagedPrefixListFuture) Get(ctx workflow.Context) (*ec2.CreateManagedPrefixListOutput, error) {
	var output ec2.CreateManagedPrefixListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateNatGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateNatGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateNatGatewayOutput, error) {
	var output ec2.CreateNatGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateNetworkAclFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateNetworkAclFuture) Get(ctx workflow.Context) (*ec2.CreateNetworkAclOutput, error) {
	var output ec2.CreateNetworkAclOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateNetworkAclEntryFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateNetworkAclEntryFuture) Get(ctx workflow.Context) (*ec2.CreateNetworkAclEntryOutput, error) {
	var output ec2.CreateNetworkAclEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateNetworkInterfaceFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateNetworkInterfaceFuture) Get(ctx workflow.Context) (*ec2.CreateNetworkInterfaceOutput, error) {
	var output ec2.CreateNetworkInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateNetworkInterfacePermissionFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateNetworkInterfacePermissionFuture) Get(ctx workflow.Context) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	var output ec2.CreateNetworkInterfacePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreatePlacementGroupFuture struct {
	Future workflow.Future
}

func (r *Ec2CreatePlacementGroupFuture) Get(ctx workflow.Context) (*ec2.CreatePlacementGroupOutput, error) {
	var output ec2.CreatePlacementGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateReservedInstancesListingFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateReservedInstancesListingFuture) Get(ctx workflow.Context) (*ec2.CreateReservedInstancesListingOutput, error) {
	var output ec2.CreateReservedInstancesListingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateRouteFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateRouteFuture) Get(ctx workflow.Context) (*ec2.CreateRouteOutput, error) {
	var output ec2.CreateRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateRouteTableFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateRouteTableFuture) Get(ctx workflow.Context) (*ec2.CreateRouteTableOutput, error) {
	var output ec2.CreateRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateSecurityGroupFuture) Get(ctx workflow.Context) (*ec2.CreateSecurityGroupOutput, error) {
	var output ec2.CreateSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateSnapshotFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateSnapshotFuture) Get(ctx workflow.Context) (*ec2.Snapshot, error) {
	var output ec2.Snapshot
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateSnapshotsFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateSnapshotsFuture) Get(ctx workflow.Context) (*ec2.CreateSnapshotsOutput, error) {
	var output ec2.CreateSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateSpotDatafeedSubscriptionFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateSpotDatafeedSubscriptionFuture) Get(ctx workflow.Context) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	var output ec2.CreateSpotDatafeedSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateSubnetFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateSubnetFuture) Get(ctx workflow.Context) (*ec2.CreateSubnetOutput, error) {
	var output ec2.CreateSubnetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateTagsFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateTagsFuture) Get(ctx workflow.Context) (*ec2.CreateTagsOutput, error) {
	var output ec2.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateTrafficMirrorFilterFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateTrafficMirrorFilterFuture) Get(ctx workflow.Context) (*ec2.CreateTrafficMirrorFilterOutput, error) {
	var output ec2.CreateTrafficMirrorFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateTrafficMirrorFilterRuleFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateTrafficMirrorFilterRuleFuture) Get(ctx workflow.Context) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
	var output ec2.CreateTrafficMirrorFilterRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateTrafficMirrorSessionFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateTrafficMirrorSessionFuture) Get(ctx workflow.Context) (*ec2.CreateTrafficMirrorSessionOutput, error) {
	var output ec2.CreateTrafficMirrorSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateTrafficMirrorTargetFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateTrafficMirrorTargetFuture) Get(ctx workflow.Context) (*ec2.CreateTrafficMirrorTargetOutput, error) {
	var output ec2.CreateTrafficMirrorTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateTransitGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateTransitGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayOutput, error) {
	var output ec2.CreateTransitGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateTransitGatewayMulticastDomainFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateTransitGatewayMulticastDomainFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.CreateTransitGatewayMulticastDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateTransitGatewayPeeringAttachmentFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateTransitGatewayPeeringAttachmentFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.CreateTransitGatewayPeeringAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateTransitGatewayPrefixListReferenceFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateTransitGatewayPrefixListReferenceFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.CreateTransitGatewayPrefixListReferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateTransitGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateTransitGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayRouteOutput, error) {
	var output ec2.CreateTransitGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateTransitGatewayRouteTableFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateTransitGatewayRouteTableFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
	var output ec2.CreateTransitGatewayRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateTransitGatewayVpcAttachmentFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.CreateTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateVolumeFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateVolumeFuture) Get(ctx workflow.Context) (*ec2.Volume, error) {
	var output ec2.Volume
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateVpcFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateVpcFuture) Get(ctx workflow.Context) (*ec2.CreateVpcOutput, error) {
	var output ec2.CreateVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateVpcEndpointFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateVpcEndpointFuture) Get(ctx workflow.Context) (*ec2.CreateVpcEndpointOutput, error) {
	var output ec2.CreateVpcEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateVpcEndpointConnectionNotificationFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateVpcEndpointConnectionNotificationFuture) Get(ctx workflow.Context) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
	var output ec2.CreateVpcEndpointConnectionNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateVpcEndpointServiceConfigurationFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateVpcEndpointServiceConfigurationFuture) Get(ctx workflow.Context) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	var output ec2.CreateVpcEndpointServiceConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateVpcPeeringConnectionFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	var output ec2.CreateVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateVpnConnectionFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateVpnConnectionFuture) Get(ctx workflow.Context) (*ec2.CreateVpnConnectionOutput, error) {
	var output ec2.CreateVpnConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateVpnConnectionRouteFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateVpnConnectionRouteFuture) Get(ctx workflow.Context) (*ec2.CreateVpnConnectionRouteOutput, error) {
	var output ec2.CreateVpnConnectionRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2CreateVpnGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2CreateVpnGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateVpnGatewayOutput, error) {
	var output ec2.CreateVpnGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteCarrierGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteCarrierGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteCarrierGatewayOutput, error) {
	var output ec2.DeleteCarrierGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteClientVpnEndpointFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteClientVpnEndpointFuture) Get(ctx workflow.Context) (*ec2.DeleteClientVpnEndpointOutput, error) {
	var output ec2.DeleteClientVpnEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteClientVpnRouteFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteClientVpnRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteClientVpnRouteOutput, error) {
	var output ec2.DeleteClientVpnRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteCustomerGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteCustomerGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteCustomerGatewayOutput, error) {
	var output ec2.DeleteCustomerGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteDhcpOptionsFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteDhcpOptionsFuture) Get(ctx workflow.Context) (*ec2.DeleteDhcpOptionsOutput, error) {
	var output ec2.DeleteDhcpOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteEgressOnlyInternetGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteEgressOnlyInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	var output ec2.DeleteEgressOnlyInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteFleetsFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteFleetsFuture) Get(ctx workflow.Context) (*ec2.DeleteFleetsOutput, error) {
	var output ec2.DeleteFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteFlowLogsFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteFlowLogsFuture) Get(ctx workflow.Context) (*ec2.DeleteFlowLogsOutput, error) {
	var output ec2.DeleteFlowLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteFpgaImageFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteFpgaImageFuture) Get(ctx workflow.Context) (*ec2.DeleteFpgaImageOutput, error) {
	var output ec2.DeleteFpgaImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteInternetGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteInternetGatewayOutput, error) {
	var output ec2.DeleteInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteKeyPairFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteKeyPairFuture) Get(ctx workflow.Context) (*ec2.DeleteKeyPairOutput, error) {
	var output ec2.DeleteKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteLaunchTemplateFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteLaunchTemplateFuture) Get(ctx workflow.Context) (*ec2.DeleteLaunchTemplateOutput, error) {
	var output ec2.DeleteLaunchTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteLaunchTemplateVersionsFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteLaunchTemplateVersionsFuture) Get(ctx workflow.Context) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
	var output ec2.DeleteLaunchTemplateVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteLocalGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteLocalGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteLocalGatewayRouteOutput, error) {
	var output ec2.DeleteLocalGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteLocalGatewayRouteTableVpcAssociationFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteLocalGatewayRouteTableVpcAssociationFuture) Get(ctx workflow.Context) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
	var output ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteManagedPrefixListFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteManagedPrefixListFuture) Get(ctx workflow.Context) (*ec2.DeleteManagedPrefixListOutput, error) {
	var output ec2.DeleteManagedPrefixListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteNatGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteNatGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteNatGatewayOutput, error) {
	var output ec2.DeleteNatGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteNetworkAclFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteNetworkAclFuture) Get(ctx workflow.Context) (*ec2.DeleteNetworkAclOutput, error) {
	var output ec2.DeleteNetworkAclOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteNetworkAclEntryFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteNetworkAclEntryFuture) Get(ctx workflow.Context) (*ec2.DeleteNetworkAclEntryOutput, error) {
	var output ec2.DeleteNetworkAclEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteNetworkInterfaceFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteNetworkInterfaceFuture) Get(ctx workflow.Context) (*ec2.DeleteNetworkInterfaceOutput, error) {
	var output ec2.DeleteNetworkInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteNetworkInterfacePermissionFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteNetworkInterfacePermissionFuture) Get(ctx workflow.Context) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	var output ec2.DeleteNetworkInterfacePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeletePlacementGroupFuture struct {
	Future workflow.Future
}

func (r *Ec2DeletePlacementGroupFuture) Get(ctx workflow.Context) (*ec2.DeletePlacementGroupOutput, error) {
	var output ec2.DeletePlacementGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteQueuedReservedInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteQueuedReservedInstancesFuture) Get(ctx workflow.Context) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
	var output ec2.DeleteQueuedReservedInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteRouteFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteRouteOutput, error) {
	var output ec2.DeleteRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteRouteTableFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteRouteTableFuture) Get(ctx workflow.Context) (*ec2.DeleteRouteTableOutput, error) {
	var output ec2.DeleteRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteSecurityGroupFuture) Get(ctx workflow.Context) (*ec2.DeleteSecurityGroupOutput, error) {
	var output ec2.DeleteSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteSnapshotFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteSnapshotFuture) Get(ctx workflow.Context) (*ec2.DeleteSnapshotOutput, error) {
	var output ec2.DeleteSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteSpotDatafeedSubscriptionFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteSpotDatafeedSubscriptionFuture) Get(ctx workflow.Context) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	var output ec2.DeleteSpotDatafeedSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteSubnetFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteSubnetFuture) Get(ctx workflow.Context) (*ec2.DeleteSubnetOutput, error) {
	var output ec2.DeleteSubnetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteTagsFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteTagsFuture) Get(ctx workflow.Context) (*ec2.DeleteTagsOutput, error) {
	var output ec2.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteTrafficMirrorFilterFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteTrafficMirrorFilterFuture) Get(ctx workflow.Context) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
	var output ec2.DeleteTrafficMirrorFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteTrafficMirrorFilterRuleFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteTrafficMirrorFilterRuleFuture) Get(ctx workflow.Context) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
	var output ec2.DeleteTrafficMirrorFilterRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteTrafficMirrorSessionFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteTrafficMirrorSessionFuture) Get(ctx workflow.Context) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
	var output ec2.DeleteTrafficMirrorSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteTrafficMirrorTargetFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteTrafficMirrorTargetFuture) Get(ctx workflow.Context) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
	var output ec2.DeleteTrafficMirrorTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteTransitGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteTransitGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayOutput, error) {
	var output ec2.DeleteTransitGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteTransitGatewayMulticastDomainFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteTransitGatewayMulticastDomainFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
	var output ec2.DeleteTransitGatewayMulticastDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteTransitGatewayPeeringAttachmentFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteTransitGatewayPeeringAttachmentFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.DeleteTransitGatewayPeeringAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteTransitGatewayPrefixListReferenceFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteTransitGatewayPrefixListReferenceFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.DeleteTransitGatewayPrefixListReferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteTransitGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteTransitGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayRouteOutput, error) {
	var output ec2.DeleteTransitGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteTransitGatewayRouteTableFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteTransitGatewayRouteTableFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
	var output ec2.DeleteTransitGatewayRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteTransitGatewayVpcAttachmentFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.DeleteTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteVolumeFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteVolumeFuture) Get(ctx workflow.Context) (*ec2.DeleteVolumeOutput, error) {
	var output ec2.DeleteVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteVpcFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteVpcFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcOutput, error) {
	var output ec2.DeleteVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteVpcEndpointConnectionNotificationsFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteVpcEndpointConnectionNotificationsFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
	var output ec2.DeleteVpcEndpointConnectionNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteVpcEndpointServiceConfigurationsFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteVpcEndpointServiceConfigurationsFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	var output ec2.DeleteVpcEndpointServiceConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteVpcEndpointsFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteVpcEndpointsFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcEndpointsOutput, error) {
	var output ec2.DeleteVpcEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteVpcPeeringConnectionFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	var output ec2.DeleteVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteVpnConnectionFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteVpnConnectionFuture) Get(ctx workflow.Context) (*ec2.DeleteVpnConnectionOutput, error) {
	var output ec2.DeleteVpnConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteVpnConnectionRouteFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteVpnConnectionRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	var output ec2.DeleteVpnConnectionRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeleteVpnGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2DeleteVpnGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteVpnGatewayOutput, error) {
	var output ec2.DeleteVpnGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeprovisionByoipCidrFuture struct {
	Future workflow.Future
}

func (r *Ec2DeprovisionByoipCidrFuture) Get(ctx workflow.Context) (*ec2.DeprovisionByoipCidrOutput, error) {
	var output ec2.DeprovisionByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeregisterImageFuture struct {
	Future workflow.Future
}

func (r *Ec2DeregisterImageFuture) Get(ctx workflow.Context) (*ec2.DeregisterImageOutput, error) {
	var output ec2.DeregisterImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeregisterInstanceEventNotificationAttributesFuture struct {
	Future workflow.Future
}

func (r *Ec2DeregisterInstanceEventNotificationAttributesFuture) Get(ctx workflow.Context) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error) {
	var output ec2.DeregisterInstanceEventNotificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeregisterTransitGatewayMulticastGroupMembersFuture struct {
	Future workflow.Future
}

func (r *Ec2DeregisterTransitGatewayMulticastGroupMembersFuture) Get(ctx workflow.Context) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
	var output ec2.DeregisterTransitGatewayMulticastGroupMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DeregisterTransitGatewayMulticastGroupSourcesFuture struct {
	Future workflow.Future
}

func (r *Ec2DeregisterTransitGatewayMulticastGroupSourcesFuture) Get(ctx workflow.Context) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
	var output ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeAccountAttributesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeAccountAttributesFuture) Get(ctx workflow.Context) (*ec2.DescribeAccountAttributesOutput, error) {
	var output ec2.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeAddressesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeAddressesFuture) Get(ctx workflow.Context) (*ec2.DescribeAddressesOutput, error) {
	var output ec2.DescribeAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeAggregateIdFormatFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeAggregateIdFormatFuture) Get(ctx workflow.Context) (*ec2.DescribeAggregateIdFormatOutput, error) {
	var output ec2.DescribeAggregateIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeAvailabilityZonesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeAvailabilityZonesFuture) Get(ctx workflow.Context) (*ec2.DescribeAvailabilityZonesOutput, error) {
	var output ec2.DescribeAvailabilityZonesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeBundleTasksFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeBundleTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeBundleTasksOutput, error) {
	var output ec2.DescribeBundleTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeByoipCidrsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeByoipCidrsFuture) Get(ctx workflow.Context) (*ec2.DescribeByoipCidrsOutput, error) {
	var output ec2.DescribeByoipCidrsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeCapacityReservationsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeCapacityReservationsFuture) Get(ctx workflow.Context) (*ec2.DescribeCapacityReservationsOutput, error) {
	var output ec2.DescribeCapacityReservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeCarrierGatewaysFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeCarrierGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeCarrierGatewaysOutput, error) {
	var output ec2.DescribeCarrierGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeClassicLinkInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeClassicLinkInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	var output ec2.DescribeClassicLinkInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeClientVpnAuthorizationRulesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeClientVpnAuthorizationRulesFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
	var output ec2.DescribeClientVpnAuthorizationRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeClientVpnConnectionsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeClientVpnConnectionsFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnConnectionsOutput, error) {
	var output ec2.DescribeClientVpnConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeClientVpnEndpointsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeClientVpnEndpointsFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnEndpointsOutput, error) {
	var output ec2.DescribeClientVpnEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeClientVpnRoutesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeClientVpnRoutesFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnRoutesOutput, error) {
	var output ec2.DescribeClientVpnRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeClientVpnTargetNetworksFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeClientVpnTargetNetworksFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
	var output ec2.DescribeClientVpnTargetNetworksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeCoipPoolsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeCoipPoolsFuture) Get(ctx workflow.Context) (*ec2.DescribeCoipPoolsOutput, error) {
	var output ec2.DescribeCoipPoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeConversionTasksFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeConversionTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeConversionTasksOutput, error) {
	var output ec2.DescribeConversionTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeCustomerGatewaysFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeCustomerGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeCustomerGatewaysOutput, error) {
	var output ec2.DescribeCustomerGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeDhcpOptionsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeDhcpOptionsFuture) Get(ctx workflow.Context) (*ec2.DescribeDhcpOptionsOutput, error) {
	var output ec2.DescribeDhcpOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeEgressOnlyInternetGatewaysFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeEgressOnlyInternetGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	var output ec2.DescribeEgressOnlyInternetGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeElasticGpusFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeElasticGpusFuture) Get(ctx workflow.Context) (*ec2.DescribeElasticGpusOutput, error) {
	var output ec2.DescribeElasticGpusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeExportImageTasksFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeExportImageTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeExportImageTasksOutput, error) {
	var output ec2.DescribeExportImageTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeExportTasksFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeExportTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeExportTasksOutput, error) {
	var output ec2.DescribeExportTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeFastSnapshotRestoresFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeFastSnapshotRestoresFuture) Get(ctx workflow.Context) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
	var output ec2.DescribeFastSnapshotRestoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeFleetHistoryFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeFleetHistoryFuture) Get(ctx workflow.Context) (*ec2.DescribeFleetHistoryOutput, error) {
	var output ec2.DescribeFleetHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeFleetInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeFleetInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeFleetInstancesOutput, error) {
	var output ec2.DescribeFleetInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeFleetsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeFleetsFuture) Get(ctx workflow.Context) (*ec2.DescribeFleetsOutput, error) {
	var output ec2.DescribeFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeFlowLogsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeFlowLogsFuture) Get(ctx workflow.Context) (*ec2.DescribeFlowLogsOutput, error) {
	var output ec2.DescribeFlowLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeFpgaImageAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeFpgaImageAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	var output ec2.DescribeFpgaImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeFpgaImagesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeFpgaImagesFuture) Get(ctx workflow.Context) (*ec2.DescribeFpgaImagesOutput, error) {
	var output ec2.DescribeFpgaImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeHostReservationOfferingsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeHostReservationOfferingsFuture) Get(ctx workflow.Context) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	var output ec2.DescribeHostReservationOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeHostReservationsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeHostReservationsFuture) Get(ctx workflow.Context) (*ec2.DescribeHostReservationsOutput, error) {
	var output ec2.DescribeHostReservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeHostsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeHostsFuture) Get(ctx workflow.Context) (*ec2.DescribeHostsOutput, error) {
	var output ec2.DescribeHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeIamInstanceProfileAssociationsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeIamInstanceProfileAssociationsFuture) Get(ctx workflow.Context) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	var output ec2.DescribeIamInstanceProfileAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeIdFormatFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeIdFormatFuture) Get(ctx workflow.Context) (*ec2.DescribeIdFormatOutput, error) {
	var output ec2.DescribeIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeIdentityIdFormatFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeIdentityIdFormatFuture) Get(ctx workflow.Context) (*ec2.DescribeIdentityIdFormatOutput, error) {
	var output ec2.DescribeIdentityIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeImageAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeImageAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeImageAttributeOutput, error) {
	var output ec2.DescribeImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeImagesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeImagesFuture) Get(ctx workflow.Context) (*ec2.DescribeImagesOutput, error) {
	var output ec2.DescribeImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeImportImageTasksFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeImportImageTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeImportImageTasksOutput, error) {
	var output ec2.DescribeImportImageTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeImportSnapshotTasksFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeImportSnapshotTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	var output ec2.DescribeImportSnapshotTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeInstanceAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeInstanceAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceAttributeOutput, error) {
	var output ec2.DescribeInstanceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeInstanceCreditSpecificationsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeInstanceCreditSpecificationsFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
	var output ec2.DescribeInstanceCreditSpecificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeInstanceEventNotificationAttributesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeInstanceEventNotificationAttributesFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error) {
	var output ec2.DescribeInstanceEventNotificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeInstanceStatusFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeInstanceStatusFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceStatusOutput, error) {
	var output ec2.DescribeInstanceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeInstanceTypeOfferingsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeInstanceTypeOfferingsFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
	var output ec2.DescribeInstanceTypeOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeInstanceTypesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeInstanceTypesFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceTypesOutput, error) {
	var output ec2.DescribeInstanceTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeInstancesOutput, error) {
	var output ec2.DescribeInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeInternetGatewaysFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeInternetGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeInternetGatewaysOutput, error) {
	var output ec2.DescribeInternetGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeIpv6PoolsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeIpv6PoolsFuture) Get(ctx workflow.Context) (*ec2.DescribeIpv6PoolsOutput, error) {
	var output ec2.DescribeIpv6PoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeKeyPairsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeKeyPairsFuture) Get(ctx workflow.Context) (*ec2.DescribeKeyPairsOutput, error) {
	var output ec2.DescribeKeyPairsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeLaunchTemplateVersionsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeLaunchTemplateVersionsFuture) Get(ctx workflow.Context) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
	var output ec2.DescribeLaunchTemplateVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeLaunchTemplatesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeLaunchTemplatesFuture) Get(ctx workflow.Context) (*ec2.DescribeLaunchTemplatesOutput, error) {
	var output ec2.DescribeLaunchTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeLocalGatewayRouteTableVpcAssociationsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeLocalGatewayRouteTableVpcAssociationsFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeLocalGatewayRouteTablesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeLocalGatewayRouteTablesFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeLocalGatewayVirtualInterfaceGroupsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeLocalGatewayVirtualInterfaceGroupsFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
	var output ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeLocalGatewayVirtualInterfacesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeLocalGatewayVirtualInterfacesFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
	var output ec2.DescribeLocalGatewayVirtualInterfacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeLocalGatewaysFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeLocalGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewaysOutput, error) {
	var output ec2.DescribeLocalGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeManagedPrefixListsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeManagedPrefixListsFuture) Get(ctx workflow.Context) (*ec2.DescribeManagedPrefixListsOutput, error) {
	var output ec2.DescribeManagedPrefixListsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeMovingAddressesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeMovingAddressesFuture) Get(ctx workflow.Context) (*ec2.DescribeMovingAddressesOutput, error) {
	var output ec2.DescribeMovingAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeNatGatewaysFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeNatGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeNatGatewaysOutput, error) {
	var output ec2.DescribeNatGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeNetworkAclsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeNetworkAclsFuture) Get(ctx workflow.Context) (*ec2.DescribeNetworkAclsOutput, error) {
	var output ec2.DescribeNetworkAclsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeNetworkInterfaceAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeNetworkInterfaceAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	var output ec2.DescribeNetworkInterfaceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeNetworkInterfacePermissionsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeNetworkInterfacePermissionsFuture) Get(ctx workflow.Context) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	var output ec2.DescribeNetworkInterfacePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeNetworkInterfacesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeNetworkInterfacesFuture) Get(ctx workflow.Context) (*ec2.DescribeNetworkInterfacesOutput, error) {
	var output ec2.DescribeNetworkInterfacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribePlacementGroupsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribePlacementGroupsFuture) Get(ctx workflow.Context) (*ec2.DescribePlacementGroupsOutput, error) {
	var output ec2.DescribePlacementGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribePrefixListsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribePrefixListsFuture) Get(ctx workflow.Context) (*ec2.DescribePrefixListsOutput, error) {
	var output ec2.DescribePrefixListsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribePrincipalIdFormatFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribePrincipalIdFormatFuture) Get(ctx workflow.Context) (*ec2.DescribePrincipalIdFormatOutput, error) {
	var output ec2.DescribePrincipalIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribePublicIpv4PoolsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribePublicIpv4PoolsFuture) Get(ctx workflow.Context) (*ec2.DescribePublicIpv4PoolsOutput, error) {
	var output ec2.DescribePublicIpv4PoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeRegionsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeRegionsFuture) Get(ctx workflow.Context) (*ec2.DescribeRegionsOutput, error) {
	var output ec2.DescribeRegionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeReservedInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeReservedInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeReservedInstancesOutput, error) {
	var output ec2.DescribeReservedInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeReservedInstancesListingsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeReservedInstancesListingsFuture) Get(ctx workflow.Context) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	var output ec2.DescribeReservedInstancesListingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeReservedInstancesModificationsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeReservedInstancesModificationsFuture) Get(ctx workflow.Context) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	var output ec2.DescribeReservedInstancesModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeReservedInstancesOfferingsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeReservedInstancesOfferingsFuture) Get(ctx workflow.Context) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	var output ec2.DescribeReservedInstancesOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeRouteTablesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeRouteTablesFuture) Get(ctx workflow.Context) (*ec2.DescribeRouteTablesOutput, error) {
	var output ec2.DescribeRouteTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeScheduledInstanceAvailabilityFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeScheduledInstanceAvailabilityFuture) Get(ctx workflow.Context) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	var output ec2.DescribeScheduledInstanceAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeScheduledInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeScheduledInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeScheduledInstancesOutput, error) {
	var output ec2.DescribeScheduledInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeSecurityGroupReferencesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeSecurityGroupReferencesFuture) Get(ctx workflow.Context) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	var output ec2.DescribeSecurityGroupReferencesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeSecurityGroupsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeSecurityGroupsFuture) Get(ctx workflow.Context) (*ec2.DescribeSecurityGroupsOutput, error) {
	var output ec2.DescribeSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeSnapshotAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeSnapshotAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeSnapshotAttributeOutput, error) {
	var output ec2.DescribeSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeSnapshotsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeSnapshotsFuture) Get(ctx workflow.Context) (*ec2.DescribeSnapshotsOutput, error) {
	var output ec2.DescribeSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeSpotDatafeedSubscriptionFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeSpotDatafeedSubscriptionFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	var output ec2.DescribeSpotDatafeedSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeSpotFleetInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeSpotFleetInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	var output ec2.DescribeSpotFleetInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeSpotFleetRequestHistoryFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeSpotFleetRequestHistoryFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	var output ec2.DescribeSpotFleetRequestHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeSpotFleetRequestsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeSpotFleetRequestsFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	var output ec2.DescribeSpotFleetRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeSpotInstanceRequestsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeSpotInstanceRequestsFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	var output ec2.DescribeSpotInstanceRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeSpotPriceHistoryFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeSpotPriceHistoryFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	var output ec2.DescribeSpotPriceHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeStaleSecurityGroupsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeStaleSecurityGroupsFuture) Get(ctx workflow.Context) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	var output ec2.DescribeStaleSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeSubnetsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeSubnetsFuture) Get(ctx workflow.Context) (*ec2.DescribeSubnetsOutput, error) {
	var output ec2.DescribeSubnetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeTagsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeTagsFuture) Get(ctx workflow.Context) (*ec2.DescribeTagsOutput, error) {
	var output ec2.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeTrafficMirrorFiltersFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeTrafficMirrorFiltersFuture) Get(ctx workflow.Context) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
	var output ec2.DescribeTrafficMirrorFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeTrafficMirrorSessionsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeTrafficMirrorSessionsFuture) Get(ctx workflow.Context) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
	var output ec2.DescribeTrafficMirrorSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeTrafficMirrorTargetsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeTrafficMirrorTargetsFuture) Get(ctx workflow.Context) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
	var output ec2.DescribeTrafficMirrorTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeTransitGatewayAttachmentsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeTransitGatewayAttachmentsFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeTransitGatewayMulticastDomainsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeTransitGatewayMulticastDomainsFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
	var output ec2.DescribeTransitGatewayMulticastDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeTransitGatewayPeeringAttachmentsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeTransitGatewayPeeringAttachmentsFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayPeeringAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeTransitGatewayRouteTablesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeTransitGatewayRouteTablesFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
	var output ec2.DescribeTransitGatewayRouteTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeTransitGatewayVpcAttachmentsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeTransitGatewayVpcAttachmentsFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayVpcAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeTransitGatewaysFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeTransitGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewaysOutput, error) {
	var output ec2.DescribeTransitGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVolumeAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVolumeAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeVolumeAttributeOutput, error) {
	var output ec2.DescribeVolumeAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVolumeStatusFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVolumeStatusFuture) Get(ctx workflow.Context) (*ec2.DescribeVolumeStatusOutput, error) {
	var output ec2.DescribeVolumeStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVolumesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVolumesFuture) Get(ctx workflow.Context) (*ec2.DescribeVolumesOutput, error) {
	var output ec2.DescribeVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVolumesModificationsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVolumesModificationsFuture) Get(ctx workflow.Context) (*ec2.DescribeVolumesModificationsOutput, error) {
	var output ec2.DescribeVolumesModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpcAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpcAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcAttributeOutput, error) {
	var output ec2.DescribeVpcAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpcClassicLinkFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpcClassicLinkFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcClassicLinkOutput, error) {
	var output ec2.DescribeVpcClassicLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpcClassicLinkDnsSupportFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpcClassicLinkDnsSupportFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.DescribeVpcClassicLinkDnsSupportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpcEndpointConnectionNotificationsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpcEndpointConnectionNotificationsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
	var output ec2.DescribeVpcEndpointConnectionNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpcEndpointConnectionsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpcEndpointConnectionsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
	var output ec2.DescribeVpcEndpointConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpcEndpointServiceConfigurationsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpcEndpointServiceConfigurationsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	var output ec2.DescribeVpcEndpointServiceConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpcEndpointServicePermissionsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpcEndpointServicePermissionsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	var output ec2.DescribeVpcEndpointServicePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpcEndpointServicesFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpcEndpointServicesFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	var output ec2.DescribeVpcEndpointServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpcEndpointsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpcEndpointsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointsOutput, error) {
	var output ec2.DescribeVpcEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpcPeeringConnectionsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpcPeeringConnectionsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	var output ec2.DescribeVpcPeeringConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpcsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpcsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcsOutput, error) {
	var output ec2.DescribeVpcsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpnConnectionsFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpnConnectionsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpnConnectionsOutput, error) {
	var output ec2.DescribeVpnConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DescribeVpnGatewaysFuture struct {
	Future workflow.Future
}

func (r *Ec2DescribeVpnGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeVpnGatewaysOutput, error) {
	var output ec2.DescribeVpnGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DetachClassicLinkVpcFuture struct {
	Future workflow.Future
}

func (r *Ec2DetachClassicLinkVpcFuture) Get(ctx workflow.Context) (*ec2.DetachClassicLinkVpcOutput, error) {
	var output ec2.DetachClassicLinkVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DetachInternetGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2DetachInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.DetachInternetGatewayOutput, error) {
	var output ec2.DetachInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DetachNetworkInterfaceFuture struct {
	Future workflow.Future
}

func (r *Ec2DetachNetworkInterfaceFuture) Get(ctx workflow.Context) (*ec2.DetachNetworkInterfaceOutput, error) {
	var output ec2.DetachNetworkInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DetachVolumeFuture struct {
	Future workflow.Future
}

func (r *Ec2DetachVolumeFuture) Get(ctx workflow.Context) (*ec2.VolumeAttachment, error) {
	var output ec2.VolumeAttachment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DetachVpnGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2DetachVpnGatewayFuture) Get(ctx workflow.Context) (*ec2.DetachVpnGatewayOutput, error) {
	var output ec2.DetachVpnGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisableEbsEncryptionByDefaultFuture struct {
	Future workflow.Future
}

func (r *Ec2DisableEbsEncryptionByDefaultFuture) Get(ctx workflow.Context) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
	var output ec2.DisableEbsEncryptionByDefaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisableFastSnapshotRestoresFuture struct {
	Future workflow.Future
}

func (r *Ec2DisableFastSnapshotRestoresFuture) Get(ctx workflow.Context) (*ec2.DisableFastSnapshotRestoresOutput, error) {
	var output ec2.DisableFastSnapshotRestoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisableTransitGatewayRouteTablePropagationFuture struct {
	Future workflow.Future
}

func (r *Ec2DisableTransitGatewayRouteTablePropagationFuture) Get(ctx workflow.Context) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
	var output ec2.DisableTransitGatewayRouteTablePropagationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisableVgwRoutePropagationFuture struct {
	Future workflow.Future
}

func (r *Ec2DisableVgwRoutePropagationFuture) Get(ctx workflow.Context) (*ec2.DisableVgwRoutePropagationOutput, error) {
	var output ec2.DisableVgwRoutePropagationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisableVpcClassicLinkFuture struct {
	Future workflow.Future
}

func (r *Ec2DisableVpcClassicLinkFuture) Get(ctx workflow.Context) (*ec2.DisableVpcClassicLinkOutput, error) {
	var output ec2.DisableVpcClassicLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisableVpcClassicLinkDnsSupportFuture struct {
	Future workflow.Future
}

func (r *Ec2DisableVpcClassicLinkDnsSupportFuture) Get(ctx workflow.Context) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.DisableVpcClassicLinkDnsSupportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisassociateAddressFuture struct {
	Future workflow.Future
}

func (r *Ec2DisassociateAddressFuture) Get(ctx workflow.Context) (*ec2.DisassociateAddressOutput, error) {
	var output ec2.DisassociateAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisassociateClientVpnTargetNetworkFuture struct {
	Future workflow.Future
}

func (r *Ec2DisassociateClientVpnTargetNetworkFuture) Get(ctx workflow.Context) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
	var output ec2.DisassociateClientVpnTargetNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisassociateIamInstanceProfileFuture struct {
	Future workflow.Future
}

func (r *Ec2DisassociateIamInstanceProfileFuture) Get(ctx workflow.Context) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	var output ec2.DisassociateIamInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisassociateRouteTableFuture struct {
	Future workflow.Future
}

func (r *Ec2DisassociateRouteTableFuture) Get(ctx workflow.Context) (*ec2.DisassociateRouteTableOutput, error) {
	var output ec2.DisassociateRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisassociateSubnetCidrBlockFuture struct {
	Future workflow.Future
}

func (r *Ec2DisassociateSubnetCidrBlockFuture) Get(ctx workflow.Context) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	var output ec2.DisassociateSubnetCidrBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisassociateTransitGatewayMulticastDomainFuture struct {
	Future workflow.Future
}

func (r *Ec2DisassociateTransitGatewayMulticastDomainFuture) Get(ctx workflow.Context) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.DisassociateTransitGatewayMulticastDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisassociateTransitGatewayRouteTableFuture struct {
	Future workflow.Future
}

func (r *Ec2DisassociateTransitGatewayRouteTableFuture) Get(ctx workflow.Context) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
	var output ec2.DisassociateTransitGatewayRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2DisassociateVpcCidrBlockFuture struct {
	Future workflow.Future
}

func (r *Ec2DisassociateVpcCidrBlockFuture) Get(ctx workflow.Context) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	var output ec2.DisassociateVpcCidrBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2EnableEbsEncryptionByDefaultFuture struct {
	Future workflow.Future
}

func (r *Ec2EnableEbsEncryptionByDefaultFuture) Get(ctx workflow.Context) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
	var output ec2.EnableEbsEncryptionByDefaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2EnableFastSnapshotRestoresFuture struct {
	Future workflow.Future
}

func (r *Ec2EnableFastSnapshotRestoresFuture) Get(ctx workflow.Context) (*ec2.EnableFastSnapshotRestoresOutput, error) {
	var output ec2.EnableFastSnapshotRestoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2EnableTransitGatewayRouteTablePropagationFuture struct {
	Future workflow.Future
}

func (r *Ec2EnableTransitGatewayRouteTablePropagationFuture) Get(ctx workflow.Context) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
	var output ec2.EnableTransitGatewayRouteTablePropagationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2EnableVgwRoutePropagationFuture struct {
	Future workflow.Future
}

func (r *Ec2EnableVgwRoutePropagationFuture) Get(ctx workflow.Context) (*ec2.EnableVgwRoutePropagationOutput, error) {
	var output ec2.EnableVgwRoutePropagationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2EnableVolumeIOFuture struct {
	Future workflow.Future
}

func (r *Ec2EnableVolumeIOFuture) Get(ctx workflow.Context) (*ec2.EnableVolumeIOOutput, error) {
	var output ec2.EnableVolumeIOOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2EnableVpcClassicLinkFuture struct {
	Future workflow.Future
}

func (r *Ec2EnableVpcClassicLinkFuture) Get(ctx workflow.Context) (*ec2.EnableVpcClassicLinkOutput, error) {
	var output ec2.EnableVpcClassicLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2EnableVpcClassicLinkDnsSupportFuture struct {
	Future workflow.Future
}

func (r *Ec2EnableVpcClassicLinkDnsSupportFuture) Get(ctx workflow.Context) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.EnableVpcClassicLinkDnsSupportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ExportClientVpnClientCertificateRevocationListFuture struct {
	Future workflow.Future
}

func (r *Ec2ExportClientVpnClientCertificateRevocationListFuture) Get(ctx workflow.Context) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
	var output ec2.ExportClientVpnClientCertificateRevocationListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ExportClientVpnClientConfigurationFuture struct {
	Future workflow.Future
}

func (r *Ec2ExportClientVpnClientConfigurationFuture) Get(ctx workflow.Context) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
	var output ec2.ExportClientVpnClientConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ExportImageFuture struct {
	Future workflow.Future
}

func (r *Ec2ExportImageFuture) Get(ctx workflow.Context) (*ec2.ExportImageOutput, error) {
	var output ec2.ExportImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ExportTransitGatewayRoutesFuture struct {
	Future workflow.Future
}

func (r *Ec2ExportTransitGatewayRoutesFuture) Get(ctx workflow.Context) (*ec2.ExportTransitGatewayRoutesOutput, error) {
	var output ec2.ExportTransitGatewayRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetAssociatedIpv6PoolCidrsFuture struct {
	Future workflow.Future
}

func (r *Ec2GetAssociatedIpv6PoolCidrsFuture) Get(ctx workflow.Context) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
	var output ec2.GetAssociatedIpv6PoolCidrsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetCapacityReservationUsageFuture struct {
	Future workflow.Future
}

func (r *Ec2GetCapacityReservationUsageFuture) Get(ctx workflow.Context) (*ec2.GetCapacityReservationUsageOutput, error) {
	var output ec2.GetCapacityReservationUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetCoipPoolUsageFuture struct {
	Future workflow.Future
}

func (r *Ec2GetCoipPoolUsageFuture) Get(ctx workflow.Context) (*ec2.GetCoipPoolUsageOutput, error) {
	var output ec2.GetCoipPoolUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetConsoleOutputFuture struct {
	Future workflow.Future
}

func (r *Ec2GetConsoleOutputFuture) Get(ctx workflow.Context) (*ec2.GetConsoleOutputOutput, error) {
	var output ec2.GetConsoleOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetConsoleScreenshotFuture struct {
	Future workflow.Future
}

func (r *Ec2GetConsoleScreenshotFuture) Get(ctx workflow.Context) (*ec2.GetConsoleScreenshotOutput, error) {
	var output ec2.GetConsoleScreenshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetDefaultCreditSpecificationFuture struct {
	Future workflow.Future
}

func (r *Ec2GetDefaultCreditSpecificationFuture) Get(ctx workflow.Context) (*ec2.GetDefaultCreditSpecificationOutput, error) {
	var output ec2.GetDefaultCreditSpecificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetEbsDefaultKmsKeyIdFuture struct {
	Future workflow.Future
}

func (r *Ec2GetEbsDefaultKmsKeyIdFuture) Get(ctx workflow.Context) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.GetEbsDefaultKmsKeyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetEbsEncryptionByDefaultFuture struct {
	Future workflow.Future
}

func (r *Ec2GetEbsEncryptionByDefaultFuture) Get(ctx workflow.Context) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
	var output ec2.GetEbsEncryptionByDefaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetGroupsForCapacityReservationFuture struct {
	Future workflow.Future
}

func (r *Ec2GetGroupsForCapacityReservationFuture) Get(ctx workflow.Context) (*ec2.GetGroupsForCapacityReservationOutput, error) {
	var output ec2.GetGroupsForCapacityReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetHostReservationPurchasePreviewFuture struct {
	Future workflow.Future
}

func (r *Ec2GetHostReservationPurchasePreviewFuture) Get(ctx workflow.Context) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	var output ec2.GetHostReservationPurchasePreviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetLaunchTemplateDataFuture struct {
	Future workflow.Future
}

func (r *Ec2GetLaunchTemplateDataFuture) Get(ctx workflow.Context) (*ec2.GetLaunchTemplateDataOutput, error) {
	var output ec2.GetLaunchTemplateDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetManagedPrefixListAssociationsFuture struct {
	Future workflow.Future
}

func (r *Ec2GetManagedPrefixListAssociationsFuture) Get(ctx workflow.Context) (*ec2.GetManagedPrefixListAssociationsOutput, error) {
	var output ec2.GetManagedPrefixListAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetManagedPrefixListEntriesFuture struct {
	Future workflow.Future
}

func (r *Ec2GetManagedPrefixListEntriesFuture) Get(ctx workflow.Context) (*ec2.GetManagedPrefixListEntriesOutput, error) {
	var output ec2.GetManagedPrefixListEntriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetPasswordDataFuture struct {
	Future workflow.Future
}

func (r *Ec2GetPasswordDataFuture) Get(ctx workflow.Context) (*ec2.GetPasswordDataOutput, error) {
	var output ec2.GetPasswordDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetReservedInstancesExchangeQuoteFuture struct {
	Future workflow.Future
}

func (r *Ec2GetReservedInstancesExchangeQuoteFuture) Get(ctx workflow.Context) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	var output ec2.GetReservedInstancesExchangeQuoteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetTransitGatewayAttachmentPropagationsFuture struct {
	Future workflow.Future
}

func (r *Ec2GetTransitGatewayAttachmentPropagationsFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
	var output ec2.GetTransitGatewayAttachmentPropagationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetTransitGatewayMulticastDomainAssociationsFuture struct {
	Future workflow.Future
}

func (r *Ec2GetTransitGatewayMulticastDomainAssociationsFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
	var output ec2.GetTransitGatewayMulticastDomainAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetTransitGatewayPrefixListReferencesFuture struct {
	Future workflow.Future
}

func (r *Ec2GetTransitGatewayPrefixListReferencesFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error) {
	var output ec2.GetTransitGatewayPrefixListReferencesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetTransitGatewayRouteTableAssociationsFuture struct {
	Future workflow.Future
}

func (r *Ec2GetTransitGatewayRouteTableAssociationsFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
	var output ec2.GetTransitGatewayRouteTableAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2GetTransitGatewayRouteTablePropagationsFuture struct {
	Future workflow.Future
}

func (r *Ec2GetTransitGatewayRouteTablePropagationsFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
	var output ec2.GetTransitGatewayRouteTablePropagationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ImportClientVpnClientCertificateRevocationListFuture struct {
	Future workflow.Future
}

func (r *Ec2ImportClientVpnClientCertificateRevocationListFuture) Get(ctx workflow.Context) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
	var output ec2.ImportClientVpnClientCertificateRevocationListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ImportImageFuture struct {
	Future workflow.Future
}

func (r *Ec2ImportImageFuture) Get(ctx workflow.Context) (*ec2.ImportImageOutput, error) {
	var output ec2.ImportImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ImportInstanceFuture struct {
	Future workflow.Future
}

func (r *Ec2ImportInstanceFuture) Get(ctx workflow.Context) (*ec2.ImportInstanceOutput, error) {
	var output ec2.ImportInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ImportKeyPairFuture struct {
	Future workflow.Future
}

func (r *Ec2ImportKeyPairFuture) Get(ctx workflow.Context) (*ec2.ImportKeyPairOutput, error) {
	var output ec2.ImportKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ImportSnapshotFuture struct {
	Future workflow.Future
}

func (r *Ec2ImportSnapshotFuture) Get(ctx workflow.Context) (*ec2.ImportSnapshotOutput, error) {
	var output ec2.ImportSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ImportVolumeFuture struct {
	Future workflow.Future
}

func (r *Ec2ImportVolumeFuture) Get(ctx workflow.Context) (*ec2.ImportVolumeOutput, error) {
	var output ec2.ImportVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyAvailabilityZoneGroupFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyAvailabilityZoneGroupFuture) Get(ctx workflow.Context) (*ec2.ModifyAvailabilityZoneGroupOutput, error) {
	var output ec2.ModifyAvailabilityZoneGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyCapacityReservationFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyCapacityReservationFuture) Get(ctx workflow.Context) (*ec2.ModifyCapacityReservationOutput, error) {
	var output ec2.ModifyCapacityReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyClientVpnEndpointFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyClientVpnEndpointFuture) Get(ctx workflow.Context) (*ec2.ModifyClientVpnEndpointOutput, error) {
	var output ec2.ModifyClientVpnEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyDefaultCreditSpecificationFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyDefaultCreditSpecificationFuture) Get(ctx workflow.Context) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
	var output ec2.ModifyDefaultCreditSpecificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyEbsDefaultKmsKeyIdFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyEbsDefaultKmsKeyIdFuture) Get(ctx workflow.Context) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.ModifyEbsDefaultKmsKeyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyFleetFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyFleetFuture) Get(ctx workflow.Context) (*ec2.ModifyFleetOutput, error) {
	var output ec2.ModifyFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyFpgaImageAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyFpgaImageAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	var output ec2.ModifyFpgaImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyHostsFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyHostsFuture) Get(ctx workflow.Context) (*ec2.ModifyHostsOutput, error) {
	var output ec2.ModifyHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyIdFormatFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyIdFormatFuture) Get(ctx workflow.Context) (*ec2.ModifyIdFormatOutput, error) {
	var output ec2.ModifyIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyIdentityIdFormatFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyIdentityIdFormatFuture) Get(ctx workflow.Context) (*ec2.ModifyIdentityIdFormatOutput, error) {
	var output ec2.ModifyIdentityIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyImageAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyImageAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyImageAttributeOutput, error) {
	var output ec2.ModifyImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyInstanceAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyInstanceAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceAttributeOutput, error) {
	var output ec2.ModifyInstanceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyInstanceCapacityReservationAttributesFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyInstanceCapacityReservationAttributesFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
	var output ec2.ModifyInstanceCapacityReservationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyInstanceCreditSpecificationFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyInstanceCreditSpecificationFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
	var output ec2.ModifyInstanceCreditSpecificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyInstanceEventStartTimeFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyInstanceEventStartTimeFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
	var output ec2.ModifyInstanceEventStartTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyInstanceMetadataOptionsFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyInstanceMetadataOptionsFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
	var output ec2.ModifyInstanceMetadataOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyInstancePlacementFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyInstancePlacementFuture) Get(ctx workflow.Context) (*ec2.ModifyInstancePlacementOutput, error) {
	var output ec2.ModifyInstancePlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyLaunchTemplateFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyLaunchTemplateFuture) Get(ctx workflow.Context) (*ec2.ModifyLaunchTemplateOutput, error) {
	var output ec2.ModifyLaunchTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyManagedPrefixListFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyManagedPrefixListFuture) Get(ctx workflow.Context) (*ec2.ModifyManagedPrefixListOutput, error) {
	var output ec2.ModifyManagedPrefixListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyNetworkInterfaceAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyNetworkInterfaceAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	var output ec2.ModifyNetworkInterfaceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyReservedInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyReservedInstancesFuture) Get(ctx workflow.Context) (*ec2.ModifyReservedInstancesOutput, error) {
	var output ec2.ModifyReservedInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifySnapshotAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifySnapshotAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifySnapshotAttributeOutput, error) {
	var output ec2.ModifySnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifySubnetAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifySubnetAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifySubnetAttributeOutput, error) {
	var output ec2.ModifySubnetAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyTrafficMirrorFilterNetworkServicesFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyTrafficMirrorFilterNetworkServicesFuture) Get(ctx workflow.Context) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
	var output ec2.ModifyTrafficMirrorFilterNetworkServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyTrafficMirrorFilterRuleFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyTrafficMirrorFilterRuleFuture) Get(ctx workflow.Context) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
	var output ec2.ModifyTrafficMirrorFilterRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyTrafficMirrorSessionFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyTrafficMirrorSessionFuture) Get(ctx workflow.Context) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
	var output ec2.ModifyTrafficMirrorSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyTransitGatewayFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyTransitGatewayFuture) Get(ctx workflow.Context) (*ec2.ModifyTransitGatewayOutput, error) {
	var output ec2.ModifyTransitGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyTransitGatewayPrefixListReferenceFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyTransitGatewayPrefixListReferenceFuture) Get(ctx workflow.Context) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.ModifyTransitGatewayPrefixListReferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyTransitGatewayVpcAttachmentFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.ModifyTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVolumeFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVolumeFuture) Get(ctx workflow.Context) (*ec2.ModifyVolumeOutput, error) {
	var output ec2.ModifyVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVolumeAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVolumeAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyVolumeAttributeOutput, error) {
	var output ec2.ModifyVolumeAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVpcAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVpcAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcAttributeOutput, error) {
	var output ec2.ModifyVpcAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVpcEndpointFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVpcEndpointFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcEndpointOutput, error) {
	var output ec2.ModifyVpcEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVpcEndpointConnectionNotificationFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVpcEndpointConnectionNotificationFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
	var output ec2.ModifyVpcEndpointConnectionNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVpcEndpointServiceConfigurationFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVpcEndpointServiceConfigurationFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
	var output ec2.ModifyVpcEndpointServiceConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVpcEndpointServicePermissionsFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVpcEndpointServicePermissionsFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	var output ec2.ModifyVpcEndpointServicePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVpcPeeringConnectionOptionsFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVpcPeeringConnectionOptionsFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	var output ec2.ModifyVpcPeeringConnectionOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVpcTenancyFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVpcTenancyFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcTenancyOutput, error) {
	var output ec2.ModifyVpcTenancyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVpnConnectionFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVpnConnectionFuture) Get(ctx workflow.Context) (*ec2.ModifyVpnConnectionOutput, error) {
	var output ec2.ModifyVpnConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVpnConnectionOptionsFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVpnConnectionOptionsFuture) Get(ctx workflow.Context) (*ec2.ModifyVpnConnectionOptionsOutput, error) {
	var output ec2.ModifyVpnConnectionOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVpnTunnelCertificateFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVpnTunnelCertificateFuture) Get(ctx workflow.Context) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
	var output ec2.ModifyVpnTunnelCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ModifyVpnTunnelOptionsFuture struct {
	Future workflow.Future
}

func (r *Ec2ModifyVpnTunnelOptionsFuture) Get(ctx workflow.Context) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
	var output ec2.ModifyVpnTunnelOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2MonitorInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2MonitorInstancesFuture) Get(ctx workflow.Context) (*ec2.MonitorInstancesOutput, error) {
	var output ec2.MonitorInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2MoveAddressToVpcFuture struct {
	Future workflow.Future
}

func (r *Ec2MoveAddressToVpcFuture) Get(ctx workflow.Context) (*ec2.MoveAddressToVpcOutput, error) {
	var output ec2.MoveAddressToVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ProvisionByoipCidrFuture struct {
	Future workflow.Future
}

func (r *Ec2ProvisionByoipCidrFuture) Get(ctx workflow.Context) (*ec2.ProvisionByoipCidrOutput, error) {
	var output ec2.ProvisionByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2PurchaseHostReservationFuture struct {
	Future workflow.Future
}

func (r *Ec2PurchaseHostReservationFuture) Get(ctx workflow.Context) (*ec2.PurchaseHostReservationOutput, error) {
	var output ec2.PurchaseHostReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2PurchaseReservedInstancesOfferingFuture struct {
	Future workflow.Future
}

func (r *Ec2PurchaseReservedInstancesOfferingFuture) Get(ctx workflow.Context) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	var output ec2.PurchaseReservedInstancesOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2PurchaseScheduledInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2PurchaseScheduledInstancesFuture) Get(ctx workflow.Context) (*ec2.PurchaseScheduledInstancesOutput, error) {
	var output ec2.PurchaseScheduledInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RebootInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2RebootInstancesFuture) Get(ctx workflow.Context) (*ec2.RebootInstancesOutput, error) {
	var output ec2.RebootInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RegisterImageFuture struct {
	Future workflow.Future
}

func (r *Ec2RegisterImageFuture) Get(ctx workflow.Context) (*ec2.RegisterImageOutput, error) {
	var output ec2.RegisterImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RegisterInstanceEventNotificationAttributesFuture struct {
	Future workflow.Future
}

func (r *Ec2RegisterInstanceEventNotificationAttributesFuture) Get(ctx workflow.Context) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error) {
	var output ec2.RegisterInstanceEventNotificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RegisterTransitGatewayMulticastGroupMembersFuture struct {
	Future workflow.Future
}

func (r *Ec2RegisterTransitGatewayMulticastGroupMembersFuture) Get(ctx workflow.Context) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
	var output ec2.RegisterTransitGatewayMulticastGroupMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RegisterTransitGatewayMulticastGroupSourcesFuture struct {
	Future workflow.Future
}

func (r *Ec2RegisterTransitGatewayMulticastGroupSourcesFuture) Get(ctx workflow.Context) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
	var output ec2.RegisterTransitGatewayMulticastGroupSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RejectTransitGatewayPeeringAttachmentFuture struct {
	Future workflow.Future
}

func (r *Ec2RejectTransitGatewayPeeringAttachmentFuture) Get(ctx workflow.Context) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.RejectTransitGatewayPeeringAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RejectTransitGatewayVpcAttachmentFuture struct {
	Future workflow.Future
}

func (r *Ec2RejectTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.RejectTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RejectVpcEndpointConnectionsFuture struct {
	Future workflow.Future
}

func (r *Ec2RejectVpcEndpointConnectionsFuture) Get(ctx workflow.Context) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
	var output ec2.RejectVpcEndpointConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RejectVpcPeeringConnectionFuture struct {
	Future workflow.Future
}

func (r *Ec2RejectVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	var output ec2.RejectVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ReleaseAddressFuture struct {
	Future workflow.Future
}

func (r *Ec2ReleaseAddressFuture) Get(ctx workflow.Context) (*ec2.ReleaseAddressOutput, error) {
	var output ec2.ReleaseAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ReleaseHostsFuture struct {
	Future workflow.Future
}

func (r *Ec2ReleaseHostsFuture) Get(ctx workflow.Context) (*ec2.ReleaseHostsOutput, error) {
	var output ec2.ReleaseHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ReplaceIamInstanceProfileAssociationFuture struct {
	Future workflow.Future
}

func (r *Ec2ReplaceIamInstanceProfileAssociationFuture) Get(ctx workflow.Context) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	var output ec2.ReplaceIamInstanceProfileAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ReplaceNetworkAclAssociationFuture struct {
	Future workflow.Future
}

func (r *Ec2ReplaceNetworkAclAssociationFuture) Get(ctx workflow.Context) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	var output ec2.ReplaceNetworkAclAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ReplaceNetworkAclEntryFuture struct {
	Future workflow.Future
}

func (r *Ec2ReplaceNetworkAclEntryFuture) Get(ctx workflow.Context) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	var output ec2.ReplaceNetworkAclEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ReplaceRouteFuture struct {
	Future workflow.Future
}

func (r *Ec2ReplaceRouteFuture) Get(ctx workflow.Context) (*ec2.ReplaceRouteOutput, error) {
	var output ec2.ReplaceRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ReplaceRouteTableAssociationFuture struct {
	Future workflow.Future
}

func (r *Ec2ReplaceRouteTableAssociationFuture) Get(ctx workflow.Context) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	var output ec2.ReplaceRouteTableAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ReplaceTransitGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *Ec2ReplaceTransitGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
	var output ec2.ReplaceTransitGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ReportInstanceStatusFuture struct {
	Future workflow.Future
}

func (r *Ec2ReportInstanceStatusFuture) Get(ctx workflow.Context) (*ec2.ReportInstanceStatusOutput, error) {
	var output ec2.ReportInstanceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RequestSpotFleetFuture struct {
	Future workflow.Future
}

func (r *Ec2RequestSpotFleetFuture) Get(ctx workflow.Context) (*ec2.RequestSpotFleetOutput, error) {
	var output ec2.RequestSpotFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RequestSpotInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2RequestSpotInstancesFuture) Get(ctx workflow.Context) (*ec2.RequestSpotInstancesOutput, error) {
	var output ec2.RequestSpotInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ResetEbsDefaultKmsKeyIdFuture struct {
	Future workflow.Future
}

func (r *Ec2ResetEbsDefaultKmsKeyIdFuture) Get(ctx workflow.Context) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.ResetEbsDefaultKmsKeyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ResetFpgaImageAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ResetFpgaImageAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetFpgaImageAttributeOutput, error) {
	var output ec2.ResetFpgaImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ResetImageAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ResetImageAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetImageAttributeOutput, error) {
	var output ec2.ResetImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ResetInstanceAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ResetInstanceAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetInstanceAttributeOutput, error) {
	var output ec2.ResetInstanceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ResetNetworkInterfaceAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ResetNetworkInterfaceAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	var output ec2.ResetNetworkInterfaceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2ResetSnapshotAttributeFuture struct {
	Future workflow.Future
}

func (r *Ec2ResetSnapshotAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetSnapshotAttributeOutput, error) {
	var output ec2.ResetSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RestoreAddressToClassicFuture struct {
	Future workflow.Future
}

func (r *Ec2RestoreAddressToClassicFuture) Get(ctx workflow.Context) (*ec2.RestoreAddressToClassicOutput, error) {
	var output ec2.RestoreAddressToClassicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RestoreManagedPrefixListVersionFuture struct {
	Future workflow.Future
}

func (r *Ec2RestoreManagedPrefixListVersionFuture) Get(ctx workflow.Context) (*ec2.RestoreManagedPrefixListVersionOutput, error) {
	var output ec2.RestoreManagedPrefixListVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RevokeClientVpnIngressFuture struct {
	Future workflow.Future
}

func (r *Ec2RevokeClientVpnIngressFuture) Get(ctx workflow.Context) (*ec2.RevokeClientVpnIngressOutput, error) {
	var output ec2.RevokeClientVpnIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RevokeSecurityGroupEgressFuture struct {
	Future workflow.Future
}

func (r *Ec2RevokeSecurityGroupEgressFuture) Get(ctx workflow.Context) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	var output ec2.RevokeSecurityGroupEgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RevokeSecurityGroupIngressFuture struct {
	Future workflow.Future
}

func (r *Ec2RevokeSecurityGroupIngressFuture) Get(ctx workflow.Context) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	var output ec2.RevokeSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RunInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2RunInstancesFuture) Get(ctx workflow.Context) (*ec2.Reservation, error) {
	var output ec2.Reservation
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2RunScheduledInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2RunScheduledInstancesFuture) Get(ctx workflow.Context) (*ec2.RunScheduledInstancesOutput, error) {
	var output ec2.RunScheduledInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2SearchLocalGatewayRoutesFuture struct {
	Future workflow.Future
}

func (r *Ec2SearchLocalGatewayRoutesFuture) Get(ctx workflow.Context) (*ec2.SearchLocalGatewayRoutesOutput, error) {
	var output ec2.SearchLocalGatewayRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2SearchTransitGatewayMulticastGroupsFuture struct {
	Future workflow.Future
}

func (r *Ec2SearchTransitGatewayMulticastGroupsFuture) Get(ctx workflow.Context) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
	var output ec2.SearchTransitGatewayMulticastGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2SearchTransitGatewayRoutesFuture struct {
	Future workflow.Future
}

func (r *Ec2SearchTransitGatewayRoutesFuture) Get(ctx workflow.Context) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	var output ec2.SearchTransitGatewayRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2SendDiagnosticInterruptFuture struct {
	Future workflow.Future
}

func (r *Ec2SendDiagnosticInterruptFuture) Get(ctx workflow.Context) (*ec2.SendDiagnosticInterruptOutput, error) {
	var output ec2.SendDiagnosticInterruptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2StartInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2StartInstancesFuture) Get(ctx workflow.Context) (*ec2.StartInstancesOutput, error) {
	var output ec2.StartInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2StartVpcEndpointServicePrivateDnsVerificationFuture struct {
	Future workflow.Future
}

func (r *Ec2StartVpcEndpointServicePrivateDnsVerificationFuture) Get(ctx workflow.Context) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
	var output ec2.StartVpcEndpointServicePrivateDnsVerificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2StopInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2StopInstancesFuture) Get(ctx workflow.Context) (*ec2.StopInstancesOutput, error) {
	var output ec2.StopInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2TerminateClientVpnConnectionsFuture struct {
	Future workflow.Future
}

func (r *Ec2TerminateClientVpnConnectionsFuture) Get(ctx workflow.Context) (*ec2.TerminateClientVpnConnectionsOutput, error) {
	var output ec2.TerminateClientVpnConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2TerminateInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2TerminateInstancesFuture) Get(ctx workflow.Context) (*ec2.TerminateInstancesOutput, error) {
	var output ec2.TerminateInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2UnassignIpv6AddressesFuture struct {
	Future workflow.Future
}

func (r *Ec2UnassignIpv6AddressesFuture) Get(ctx workflow.Context) (*ec2.UnassignIpv6AddressesOutput, error) {
	var output ec2.UnassignIpv6AddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2UnassignPrivateIpAddressesFuture struct {
	Future workflow.Future
}

func (r *Ec2UnassignPrivateIpAddressesFuture) Get(ctx workflow.Context) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	var output ec2.UnassignPrivateIpAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2UnmonitorInstancesFuture struct {
	Future workflow.Future
}

func (r *Ec2UnmonitorInstancesFuture) Get(ctx workflow.Context) (*ec2.UnmonitorInstancesOutput, error) {
	var output ec2.UnmonitorInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2UpdateSecurityGroupRuleDescriptionsEgressFuture struct {
	Future workflow.Future
}

func (r *Ec2UpdateSecurityGroupRuleDescriptionsEgressFuture) Get(ctx workflow.Context) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	var output ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2UpdateSecurityGroupRuleDescriptionsIngressFuture struct {
	Future workflow.Future
}

func (r *Ec2UpdateSecurityGroupRuleDescriptionsIngressFuture) Get(ctx workflow.Context) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	var output ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Ec2WithdrawByoipCidrFuture struct {
	Future workflow.Future
}

func (r *Ec2WithdrawByoipCidrFuture) Get(ctx workflow.Context) (*ec2.WithdrawByoipCidrOutput, error) {
	var output ec2.WithdrawByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AcceptReservedInstancesExchangeQuote(ctx workflow.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	var output ec2.AcceptReservedInstancesExchangeQuoteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptReservedInstancesExchangeQuote", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AcceptReservedInstancesExchangeQuoteAsync(ctx workflow.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput) *Ec2AcceptReservedInstancesExchangeQuoteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptReservedInstancesExchangeQuote", input)
	return &Ec2AcceptReservedInstancesExchangeQuoteFuture{Future: future}
}

func (a *EC2Stub) AcceptTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.AcceptTransitGatewayPeeringAttachmentInput) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.AcceptTransitGatewayPeeringAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptTransitGatewayPeeringAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AcceptTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.AcceptTransitGatewayPeeringAttachmentInput) *Ec2AcceptTransitGatewayPeeringAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptTransitGatewayPeeringAttachment", input)
	return &Ec2AcceptTransitGatewayPeeringAttachmentFuture{Future: future}
}

func (a *EC2Stub) AcceptTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.AcceptTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AcceptTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.AcceptTransitGatewayVpcAttachmentInput) *Ec2AcceptTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptTransitGatewayVpcAttachment", input)
	return &Ec2AcceptTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *EC2Stub) AcceptVpcEndpointConnections(ctx workflow.Context, input *ec2.AcceptVpcEndpointConnectionsInput) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
	var output ec2.AcceptVpcEndpointConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptVpcEndpointConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AcceptVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.AcceptVpcEndpointConnectionsInput) *Ec2AcceptVpcEndpointConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptVpcEndpointConnections", input)
	return &Ec2AcceptVpcEndpointConnectionsFuture{Future: future}
}

func (a *EC2Stub) AcceptVpcPeeringConnection(ctx workflow.Context, input *ec2.AcceptVpcPeeringConnectionInput) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	var output ec2.AcceptVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AcceptVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.AcceptVpcPeeringConnectionInput) *Ec2AcceptVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AcceptVpcPeeringConnection", input)
	return &Ec2AcceptVpcPeeringConnectionFuture{Future: future}
}

func (a *EC2Stub) AdvertiseByoipCidr(ctx workflow.Context, input *ec2.AdvertiseByoipCidrInput) (*ec2.AdvertiseByoipCidrOutput, error) {
	var output ec2.AdvertiseByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AdvertiseByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AdvertiseByoipCidrAsync(ctx workflow.Context, input *ec2.AdvertiseByoipCidrInput) *Ec2AdvertiseByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AdvertiseByoipCidr", input)
	return &Ec2AdvertiseByoipCidrFuture{Future: future}
}

func (a *EC2Stub) AllocateAddress(ctx workflow.Context, input *ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error) {
	var output ec2.AllocateAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AllocateAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AllocateAddressAsync(ctx workflow.Context, input *ec2.AllocateAddressInput) *Ec2AllocateAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AllocateAddress", input)
	return &Ec2AllocateAddressFuture{Future: future}
}

func (a *EC2Stub) AllocateHosts(ctx workflow.Context, input *ec2.AllocateHostsInput) (*ec2.AllocateHostsOutput, error) {
	var output ec2.AllocateHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AllocateHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AllocateHostsAsync(ctx workflow.Context, input *ec2.AllocateHostsInput) *Ec2AllocateHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AllocateHosts", input)
	return &Ec2AllocateHostsFuture{Future: future}
}

func (a *EC2Stub) ApplySecurityGroupsToClientVpnTargetNetwork(ctx workflow.Context, input *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
	var output ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ApplySecurityGroupsToClientVpnTargetNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ApplySecurityGroupsToClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) *Ec2ApplySecurityGroupsToClientVpnTargetNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ApplySecurityGroupsToClientVpnTargetNetwork", input)
	return &Ec2ApplySecurityGroupsToClientVpnTargetNetworkFuture{Future: future}
}

func (a *EC2Stub) AssignIpv6Addresses(ctx workflow.Context, input *ec2.AssignIpv6AddressesInput) (*ec2.AssignIpv6AddressesOutput, error) {
	var output ec2.AssignIpv6AddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssignIpv6Addresses", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssignIpv6AddressesAsync(ctx workflow.Context, input *ec2.AssignIpv6AddressesInput) *Ec2AssignIpv6AddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssignIpv6Addresses", input)
	return &Ec2AssignIpv6AddressesFuture{Future: future}
}

func (a *EC2Stub) AssignPrivateIpAddresses(ctx workflow.Context, input *ec2.AssignPrivateIpAddressesInput) (*ec2.AssignPrivateIpAddressesOutput, error) {
	var output ec2.AssignPrivateIpAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssignPrivateIpAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssignPrivateIpAddressesAsync(ctx workflow.Context, input *ec2.AssignPrivateIpAddressesInput) *Ec2AssignPrivateIpAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssignPrivateIpAddresses", input)
	return &Ec2AssignPrivateIpAddressesFuture{Future: future}
}

func (a *EC2Stub) AssociateAddress(ctx workflow.Context, input *ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error) {
	var output ec2.AssociateAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateAddressAsync(ctx workflow.Context, input *ec2.AssociateAddressInput) *Ec2AssociateAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateAddress", input)
	return &Ec2AssociateAddressFuture{Future: future}
}

func (a *EC2Stub) AssociateClientVpnTargetNetwork(ctx workflow.Context, input *ec2.AssociateClientVpnTargetNetworkInput) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
	var output ec2.AssociateClientVpnTargetNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateClientVpnTargetNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.AssociateClientVpnTargetNetworkInput) *Ec2AssociateClientVpnTargetNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateClientVpnTargetNetwork", input)
	return &Ec2AssociateClientVpnTargetNetworkFuture{Future: future}
}

func (a *EC2Stub) AssociateDhcpOptions(ctx workflow.Context, input *ec2.AssociateDhcpOptionsInput) (*ec2.AssociateDhcpOptionsOutput, error) {
	var output ec2.AssociateDhcpOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateDhcpOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateDhcpOptionsAsync(ctx workflow.Context, input *ec2.AssociateDhcpOptionsInput) *Ec2AssociateDhcpOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateDhcpOptions", input)
	return &Ec2AssociateDhcpOptionsFuture{Future: future}
}

func (a *EC2Stub) AssociateIamInstanceProfile(ctx workflow.Context, input *ec2.AssociateIamInstanceProfileInput) (*ec2.AssociateIamInstanceProfileOutput, error) {
	var output ec2.AssociateIamInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateIamInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateIamInstanceProfileAsync(ctx workflow.Context, input *ec2.AssociateIamInstanceProfileInput) *Ec2AssociateIamInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateIamInstanceProfile", input)
	return &Ec2AssociateIamInstanceProfileFuture{Future: future}
}

func (a *EC2Stub) AssociateRouteTable(ctx workflow.Context, input *ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error) {
	var output ec2.AssociateRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateRouteTableAsync(ctx workflow.Context, input *ec2.AssociateRouteTableInput) *Ec2AssociateRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateRouteTable", input)
	return &Ec2AssociateRouteTableFuture{Future: future}
}

func (a *EC2Stub) AssociateSubnetCidrBlock(ctx workflow.Context, input *ec2.AssociateSubnetCidrBlockInput) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	var output ec2.AssociateSubnetCidrBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateSubnetCidrBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateSubnetCidrBlockAsync(ctx workflow.Context, input *ec2.AssociateSubnetCidrBlockInput) *Ec2AssociateSubnetCidrBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateSubnetCidrBlock", input)
	return &Ec2AssociateSubnetCidrBlockFuture{Future: future}
}

func (a *EC2Stub) AssociateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.AssociateTransitGatewayMulticastDomainInput) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.AssociateTransitGatewayMulticastDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateTransitGatewayMulticastDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.AssociateTransitGatewayMulticastDomainInput) *Ec2AssociateTransitGatewayMulticastDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateTransitGatewayMulticastDomain", input)
	return &Ec2AssociateTransitGatewayMulticastDomainFuture{Future: future}
}

func (a *EC2Stub) AssociateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.AssociateTransitGatewayRouteTableInput) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
	var output ec2.AssociateTransitGatewayRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateTransitGatewayRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.AssociateTransitGatewayRouteTableInput) *Ec2AssociateTransitGatewayRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateTransitGatewayRouteTable", input)
	return &Ec2AssociateTransitGatewayRouteTableFuture{Future: future}
}

func (a *EC2Stub) AssociateVpcCidrBlock(ctx workflow.Context, input *ec2.AssociateVpcCidrBlockInput) (*ec2.AssociateVpcCidrBlockOutput, error) {
	var output ec2.AssociateVpcCidrBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateVpcCidrBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AssociateVpcCidrBlockAsync(ctx workflow.Context, input *ec2.AssociateVpcCidrBlockInput) *Ec2AssociateVpcCidrBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AssociateVpcCidrBlock", input)
	return &Ec2AssociateVpcCidrBlockFuture{Future: future}
}

func (a *EC2Stub) AttachClassicLinkVpc(ctx workflow.Context, input *ec2.AttachClassicLinkVpcInput) (*ec2.AttachClassicLinkVpcOutput, error) {
	var output ec2.AttachClassicLinkVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AttachClassicLinkVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AttachClassicLinkVpcAsync(ctx workflow.Context, input *ec2.AttachClassicLinkVpcInput) *Ec2AttachClassicLinkVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AttachClassicLinkVpc", input)
	return &Ec2AttachClassicLinkVpcFuture{Future: future}
}

func (a *EC2Stub) AttachInternetGateway(ctx workflow.Context, input *ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error) {
	var output ec2.AttachInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AttachInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AttachInternetGatewayAsync(ctx workflow.Context, input *ec2.AttachInternetGatewayInput) *Ec2AttachInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AttachInternetGateway", input)
	return &Ec2AttachInternetGatewayFuture{Future: future}
}

func (a *EC2Stub) AttachNetworkInterface(ctx workflow.Context, input *ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error) {
	var output ec2.AttachNetworkInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AttachNetworkInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AttachNetworkInterfaceAsync(ctx workflow.Context, input *ec2.AttachNetworkInterfaceInput) *Ec2AttachNetworkInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AttachNetworkInterface", input)
	return &Ec2AttachNetworkInterfaceFuture{Future: future}
}

func (a *EC2Stub) AttachVolume(ctx workflow.Context, input *ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error) {
	var output ec2.VolumeAttachment
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AttachVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AttachVolumeAsync(ctx workflow.Context, input *ec2.AttachVolumeInput) *Ec2AttachVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AttachVolume", input)
	return &Ec2AttachVolumeFuture{Future: future}
}

func (a *EC2Stub) AttachVpnGateway(ctx workflow.Context, input *ec2.AttachVpnGatewayInput) (*ec2.AttachVpnGatewayOutput, error) {
	var output ec2.AttachVpnGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AttachVpnGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AttachVpnGatewayAsync(ctx workflow.Context, input *ec2.AttachVpnGatewayInput) *Ec2AttachVpnGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AttachVpnGateway", input)
	return &Ec2AttachVpnGatewayFuture{Future: future}
}

func (a *EC2Stub) AuthorizeClientVpnIngress(ctx workflow.Context, input *ec2.AuthorizeClientVpnIngressInput) (*ec2.AuthorizeClientVpnIngressOutput, error) {
	var output ec2.AuthorizeClientVpnIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AuthorizeClientVpnIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AuthorizeClientVpnIngressAsync(ctx workflow.Context, input *ec2.AuthorizeClientVpnIngressInput) *Ec2AuthorizeClientVpnIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AuthorizeClientVpnIngress", input)
	return &Ec2AuthorizeClientVpnIngressFuture{Future: future}
}

func (a *EC2Stub) AuthorizeSecurityGroupEgress(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	var output ec2.AuthorizeSecurityGroupEgressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AuthorizeSecurityGroupEgress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AuthorizeSecurityGroupEgressAsync(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupEgressInput) *Ec2AuthorizeSecurityGroupEgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AuthorizeSecurityGroupEgress", input)
	return &Ec2AuthorizeSecurityGroupEgressFuture{Future: future}
}

func (a *EC2Stub) AuthorizeSecurityGroupIngress(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	var output ec2.AuthorizeSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.AuthorizeSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) AuthorizeSecurityGroupIngressAsync(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupIngressInput) *Ec2AuthorizeSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.AuthorizeSecurityGroupIngress", input)
	return &Ec2AuthorizeSecurityGroupIngressFuture{Future: future}
}

func (a *EC2Stub) BundleInstance(ctx workflow.Context, input *ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error) {
	var output ec2.BundleInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.BundleInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) BundleInstanceAsync(ctx workflow.Context, input *ec2.BundleInstanceInput) *Ec2BundleInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.BundleInstance", input)
	return &Ec2BundleInstanceFuture{Future: future}
}

func (a *EC2Stub) CancelBundleTask(ctx workflow.Context, input *ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error) {
	var output ec2.CancelBundleTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelBundleTask", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelBundleTaskAsync(ctx workflow.Context, input *ec2.CancelBundleTaskInput) *Ec2CancelBundleTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelBundleTask", input)
	return &Ec2CancelBundleTaskFuture{Future: future}
}

func (a *EC2Stub) CancelCapacityReservation(ctx workflow.Context, input *ec2.CancelCapacityReservationInput) (*ec2.CancelCapacityReservationOutput, error) {
	var output ec2.CancelCapacityReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelCapacityReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelCapacityReservationAsync(ctx workflow.Context, input *ec2.CancelCapacityReservationInput) *Ec2CancelCapacityReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelCapacityReservation", input)
	return &Ec2CancelCapacityReservationFuture{Future: future}
}

func (a *EC2Stub) CancelConversionTask(ctx workflow.Context, input *ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error) {
	var output ec2.CancelConversionTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelConversionTask", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelConversionTaskAsync(ctx workflow.Context, input *ec2.CancelConversionTaskInput) *Ec2CancelConversionTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelConversionTask", input)
	return &Ec2CancelConversionTaskFuture{Future: future}
}

func (a *EC2Stub) CancelExportTask(ctx workflow.Context, input *ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error) {
	var output ec2.CancelExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelExportTaskAsync(ctx workflow.Context, input *ec2.CancelExportTaskInput) *Ec2CancelExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelExportTask", input)
	return &Ec2CancelExportTaskFuture{Future: future}
}

func (a *EC2Stub) CancelImportTask(ctx workflow.Context, input *ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error) {
	var output ec2.CancelImportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelImportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelImportTaskAsync(ctx workflow.Context, input *ec2.CancelImportTaskInput) *Ec2CancelImportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelImportTask", input)
	return &Ec2CancelImportTaskFuture{Future: future}
}

func (a *EC2Stub) CancelReservedInstancesListing(ctx workflow.Context, input *ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error) {
	var output ec2.CancelReservedInstancesListingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelReservedInstancesListing", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelReservedInstancesListingAsync(ctx workflow.Context, input *ec2.CancelReservedInstancesListingInput) *Ec2CancelReservedInstancesListingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelReservedInstancesListing", input)
	return &Ec2CancelReservedInstancesListingFuture{Future: future}
}

func (a *EC2Stub) CancelSpotFleetRequests(ctx workflow.Context, input *ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error) {
	var output ec2.CancelSpotFleetRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelSpotFleetRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelSpotFleetRequestsAsync(ctx workflow.Context, input *ec2.CancelSpotFleetRequestsInput) *Ec2CancelSpotFleetRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelSpotFleetRequests", input)
	return &Ec2CancelSpotFleetRequestsFuture{Future: future}
}

func (a *EC2Stub) CancelSpotInstanceRequests(ctx workflow.Context, input *ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	var output ec2.CancelSpotInstanceRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CancelSpotInstanceRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CancelSpotInstanceRequestsAsync(ctx workflow.Context, input *ec2.CancelSpotInstanceRequestsInput) *Ec2CancelSpotInstanceRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CancelSpotInstanceRequests", input)
	return &Ec2CancelSpotInstanceRequestsFuture{Future: future}
}

func (a *EC2Stub) ConfirmProductInstance(ctx workflow.Context, input *ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error) {
	var output ec2.ConfirmProductInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ConfirmProductInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ConfirmProductInstanceAsync(ctx workflow.Context, input *ec2.ConfirmProductInstanceInput) *Ec2ConfirmProductInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ConfirmProductInstance", input)
	return &Ec2ConfirmProductInstanceFuture{Future: future}
}

func (a *EC2Stub) CopyFpgaImage(ctx workflow.Context, input *ec2.CopyFpgaImageInput) (*ec2.CopyFpgaImageOutput, error) {
	var output ec2.CopyFpgaImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CopyFpgaImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CopyFpgaImageAsync(ctx workflow.Context, input *ec2.CopyFpgaImageInput) *Ec2CopyFpgaImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CopyFpgaImage", input)
	return &Ec2CopyFpgaImageFuture{Future: future}
}

func (a *EC2Stub) CopyImage(ctx workflow.Context, input *ec2.CopyImageInput) (*ec2.CopyImageOutput, error) {
	var output ec2.CopyImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CopyImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CopyImageAsync(ctx workflow.Context, input *ec2.CopyImageInput) *Ec2CopyImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CopyImage", input)
	return &Ec2CopyImageFuture{Future: future}
}

func (a *EC2Stub) CopySnapshot(ctx workflow.Context, input *ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error) {
	var output ec2.CopySnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CopySnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CopySnapshotAsync(ctx workflow.Context, input *ec2.CopySnapshotInput) *Ec2CopySnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CopySnapshot", input)
	return &Ec2CopySnapshotFuture{Future: future}
}

func (a *EC2Stub) CreateCapacityReservation(ctx workflow.Context, input *ec2.CreateCapacityReservationInput) (*ec2.CreateCapacityReservationOutput, error) {
	var output ec2.CreateCapacityReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateCapacityReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateCapacityReservationAsync(ctx workflow.Context, input *ec2.CreateCapacityReservationInput) *Ec2CreateCapacityReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateCapacityReservation", input)
	return &Ec2CreateCapacityReservationFuture{Future: future}
}

func (a *EC2Stub) CreateCarrierGateway(ctx workflow.Context, input *ec2.CreateCarrierGatewayInput) (*ec2.CreateCarrierGatewayOutput, error) {
	var output ec2.CreateCarrierGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateCarrierGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateCarrierGatewayAsync(ctx workflow.Context, input *ec2.CreateCarrierGatewayInput) *Ec2CreateCarrierGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateCarrierGateway", input)
	return &Ec2CreateCarrierGatewayFuture{Future: future}
}

func (a *EC2Stub) CreateClientVpnEndpoint(ctx workflow.Context, input *ec2.CreateClientVpnEndpointInput) (*ec2.CreateClientVpnEndpointOutput, error) {
	var output ec2.CreateClientVpnEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateClientVpnEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateClientVpnEndpointAsync(ctx workflow.Context, input *ec2.CreateClientVpnEndpointInput) *Ec2CreateClientVpnEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateClientVpnEndpoint", input)
	return &Ec2CreateClientVpnEndpointFuture{Future: future}
}

func (a *EC2Stub) CreateClientVpnRoute(ctx workflow.Context, input *ec2.CreateClientVpnRouteInput) (*ec2.CreateClientVpnRouteOutput, error) {
	var output ec2.CreateClientVpnRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateClientVpnRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateClientVpnRouteAsync(ctx workflow.Context, input *ec2.CreateClientVpnRouteInput) *Ec2CreateClientVpnRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateClientVpnRoute", input)
	return &Ec2CreateClientVpnRouteFuture{Future: future}
}

func (a *EC2Stub) CreateCustomerGateway(ctx workflow.Context, input *ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error) {
	var output ec2.CreateCustomerGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateCustomerGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateCustomerGatewayAsync(ctx workflow.Context, input *ec2.CreateCustomerGatewayInput) *Ec2CreateCustomerGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateCustomerGateway", input)
	return &Ec2CreateCustomerGatewayFuture{Future: future}
}

func (a *EC2Stub) CreateDefaultSubnet(ctx workflow.Context, input *ec2.CreateDefaultSubnetInput) (*ec2.CreateDefaultSubnetOutput, error) {
	var output ec2.CreateDefaultSubnetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateDefaultSubnet", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateDefaultSubnetAsync(ctx workflow.Context, input *ec2.CreateDefaultSubnetInput) *Ec2CreateDefaultSubnetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateDefaultSubnet", input)
	return &Ec2CreateDefaultSubnetFuture{Future: future}
}

func (a *EC2Stub) CreateDefaultVpc(ctx workflow.Context, input *ec2.CreateDefaultVpcInput) (*ec2.CreateDefaultVpcOutput, error) {
	var output ec2.CreateDefaultVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateDefaultVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateDefaultVpcAsync(ctx workflow.Context, input *ec2.CreateDefaultVpcInput) *Ec2CreateDefaultVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateDefaultVpc", input)
	return &Ec2CreateDefaultVpcFuture{Future: future}
}

func (a *EC2Stub) CreateDhcpOptions(ctx workflow.Context, input *ec2.CreateDhcpOptionsInput) (*ec2.CreateDhcpOptionsOutput, error) {
	var output ec2.CreateDhcpOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateDhcpOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateDhcpOptionsAsync(ctx workflow.Context, input *ec2.CreateDhcpOptionsInput) *Ec2CreateDhcpOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateDhcpOptions", input)
	return &Ec2CreateDhcpOptionsFuture{Future: future}
}

func (a *EC2Stub) CreateEgressOnlyInternetGateway(ctx workflow.Context, input *ec2.CreateEgressOnlyInternetGatewayInput) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	var output ec2.CreateEgressOnlyInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateEgressOnlyInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateEgressOnlyInternetGatewayAsync(ctx workflow.Context, input *ec2.CreateEgressOnlyInternetGatewayInput) *Ec2CreateEgressOnlyInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateEgressOnlyInternetGateway", input)
	return &Ec2CreateEgressOnlyInternetGatewayFuture{Future: future}
}

func (a *EC2Stub) CreateFleet(ctx workflow.Context, input *ec2.CreateFleetInput) (*ec2.CreateFleetOutput, error) {
	var output ec2.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateFleetAsync(ctx workflow.Context, input *ec2.CreateFleetInput) *Ec2CreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateFleet", input)
	return &Ec2CreateFleetFuture{Future: future}
}

func (a *EC2Stub) CreateFlowLogs(ctx workflow.Context, input *ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error) {
	var output ec2.CreateFlowLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateFlowLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateFlowLogsAsync(ctx workflow.Context, input *ec2.CreateFlowLogsInput) *Ec2CreateFlowLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateFlowLogs", input)
	return &Ec2CreateFlowLogsFuture{Future: future}
}

func (a *EC2Stub) CreateFpgaImage(ctx workflow.Context, input *ec2.CreateFpgaImageInput) (*ec2.CreateFpgaImageOutput, error) {
	var output ec2.CreateFpgaImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateFpgaImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateFpgaImageAsync(ctx workflow.Context, input *ec2.CreateFpgaImageInput) *Ec2CreateFpgaImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateFpgaImage", input)
	return &Ec2CreateFpgaImageFuture{Future: future}
}

func (a *EC2Stub) CreateImage(ctx workflow.Context, input *ec2.CreateImageInput) (*ec2.CreateImageOutput, error) {
	var output ec2.CreateImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateImageAsync(ctx workflow.Context, input *ec2.CreateImageInput) *Ec2CreateImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateImage", input)
	return &Ec2CreateImageFuture{Future: future}
}

func (a *EC2Stub) CreateInstanceExportTask(ctx workflow.Context, input *ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error) {
	var output ec2.CreateInstanceExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateInstanceExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateInstanceExportTaskAsync(ctx workflow.Context, input *ec2.CreateInstanceExportTaskInput) *Ec2CreateInstanceExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateInstanceExportTask", input)
	return &Ec2CreateInstanceExportTaskFuture{Future: future}
}

func (a *EC2Stub) CreateInternetGateway(ctx workflow.Context, input *ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error) {
	var output ec2.CreateInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateInternetGatewayAsync(ctx workflow.Context, input *ec2.CreateInternetGatewayInput) *Ec2CreateInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateInternetGateway", input)
	return &Ec2CreateInternetGatewayFuture{Future: future}
}

func (a *EC2Stub) CreateKeyPair(ctx workflow.Context, input *ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error) {
	var output ec2.CreateKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateKeyPairAsync(ctx workflow.Context, input *ec2.CreateKeyPairInput) *Ec2CreateKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateKeyPair", input)
	return &Ec2CreateKeyPairFuture{Future: future}
}

func (a *EC2Stub) CreateLaunchTemplate(ctx workflow.Context, input *ec2.CreateLaunchTemplateInput) (*ec2.CreateLaunchTemplateOutput, error) {
	var output ec2.CreateLaunchTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLaunchTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateLaunchTemplateAsync(ctx workflow.Context, input *ec2.CreateLaunchTemplateInput) *Ec2CreateLaunchTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLaunchTemplate", input)
	return &Ec2CreateLaunchTemplateFuture{Future: future}
}

func (a *EC2Stub) CreateLaunchTemplateVersion(ctx workflow.Context, input *ec2.CreateLaunchTemplateVersionInput) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	var output ec2.CreateLaunchTemplateVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLaunchTemplateVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateLaunchTemplateVersionAsync(ctx workflow.Context, input *ec2.CreateLaunchTemplateVersionInput) *Ec2CreateLaunchTemplateVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLaunchTemplateVersion", input)
	return &Ec2CreateLaunchTemplateVersionFuture{Future: future}
}

func (a *EC2Stub) CreateLocalGatewayRoute(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteInput) (*ec2.CreateLocalGatewayRouteOutput, error) {
	var output ec2.CreateLocalGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLocalGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateLocalGatewayRouteAsync(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteInput) *Ec2CreateLocalGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLocalGatewayRoute", input)
	return &Ec2CreateLocalGatewayRouteFuture{Future: future}
}

func (a *EC2Stub) CreateLocalGatewayRouteTableVpcAssociation(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
	var output ec2.CreateLocalGatewayRouteTableVpcAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLocalGatewayRouteTableVpcAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateLocalGatewayRouteTableVpcAssociationAsync(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) *Ec2CreateLocalGatewayRouteTableVpcAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateLocalGatewayRouteTableVpcAssociation", input)
	return &Ec2CreateLocalGatewayRouteTableVpcAssociationFuture{Future: future}
}

func (a *EC2Stub) CreateManagedPrefixList(ctx workflow.Context, input *ec2.CreateManagedPrefixListInput) (*ec2.CreateManagedPrefixListOutput, error) {
	var output ec2.CreateManagedPrefixListOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateManagedPrefixList", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateManagedPrefixListAsync(ctx workflow.Context, input *ec2.CreateManagedPrefixListInput) *Ec2CreateManagedPrefixListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateManagedPrefixList", input)
	return &Ec2CreateManagedPrefixListFuture{Future: future}
}

func (a *EC2Stub) CreateNatGateway(ctx workflow.Context, input *ec2.CreateNatGatewayInput) (*ec2.CreateNatGatewayOutput, error) {
	var output ec2.CreateNatGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNatGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateNatGatewayAsync(ctx workflow.Context, input *ec2.CreateNatGatewayInput) *Ec2CreateNatGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNatGateway", input)
	return &Ec2CreateNatGatewayFuture{Future: future}
}

func (a *EC2Stub) CreateNetworkAcl(ctx workflow.Context, input *ec2.CreateNetworkAclInput) (*ec2.CreateNetworkAclOutput, error) {
	var output ec2.CreateNetworkAclOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkAcl", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateNetworkAclAsync(ctx workflow.Context, input *ec2.CreateNetworkAclInput) *Ec2CreateNetworkAclFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkAcl", input)
	return &Ec2CreateNetworkAclFuture{Future: future}
}

func (a *EC2Stub) CreateNetworkAclEntry(ctx workflow.Context, input *ec2.CreateNetworkAclEntryInput) (*ec2.CreateNetworkAclEntryOutput, error) {
	var output ec2.CreateNetworkAclEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkAclEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateNetworkAclEntryAsync(ctx workflow.Context, input *ec2.CreateNetworkAclEntryInput) *Ec2CreateNetworkAclEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkAclEntry", input)
	return &Ec2CreateNetworkAclEntryFuture{Future: future}
}

func (a *EC2Stub) CreateNetworkInterface(ctx workflow.Context, input *ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error) {
	var output ec2.CreateNetworkInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateNetworkInterfaceAsync(ctx workflow.Context, input *ec2.CreateNetworkInterfaceInput) *Ec2CreateNetworkInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkInterface", input)
	return &Ec2CreateNetworkInterfaceFuture{Future: future}
}

func (a *EC2Stub) CreateNetworkInterfacePermission(ctx workflow.Context, input *ec2.CreateNetworkInterfacePermissionInput) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	var output ec2.CreateNetworkInterfacePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkInterfacePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateNetworkInterfacePermissionAsync(ctx workflow.Context, input *ec2.CreateNetworkInterfacePermissionInput) *Ec2CreateNetworkInterfacePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateNetworkInterfacePermission", input)
	return &Ec2CreateNetworkInterfacePermissionFuture{Future: future}
}

func (a *EC2Stub) CreatePlacementGroup(ctx workflow.Context, input *ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error) {
	var output ec2.CreatePlacementGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreatePlacementGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreatePlacementGroupAsync(ctx workflow.Context, input *ec2.CreatePlacementGroupInput) *Ec2CreatePlacementGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreatePlacementGroup", input)
	return &Ec2CreatePlacementGroupFuture{Future: future}
}

func (a *EC2Stub) CreateReservedInstancesListing(ctx workflow.Context, input *ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error) {
	var output ec2.CreateReservedInstancesListingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateReservedInstancesListing", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateReservedInstancesListingAsync(ctx workflow.Context, input *ec2.CreateReservedInstancesListingInput) *Ec2CreateReservedInstancesListingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateReservedInstancesListing", input)
	return &Ec2CreateReservedInstancesListingFuture{Future: future}
}

func (a *EC2Stub) CreateRoute(ctx workflow.Context, input *ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error) {
	var output ec2.CreateRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateRouteAsync(ctx workflow.Context, input *ec2.CreateRouteInput) *Ec2CreateRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateRoute", input)
	return &Ec2CreateRouteFuture{Future: future}
}

func (a *EC2Stub) CreateRouteTable(ctx workflow.Context, input *ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error) {
	var output ec2.CreateRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateRouteTableAsync(ctx workflow.Context, input *ec2.CreateRouteTableInput) *Ec2CreateRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateRouteTable", input)
	return &Ec2CreateRouteTableFuture{Future: future}
}

func (a *EC2Stub) CreateSecurityGroup(ctx workflow.Context, input *ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error) {
	var output ec2.CreateSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateSecurityGroupAsync(ctx workflow.Context, input *ec2.CreateSecurityGroupInput) *Ec2CreateSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSecurityGroup", input)
	return &Ec2CreateSecurityGroupFuture{Future: future}
}

func (a *EC2Stub) CreateSnapshot(ctx workflow.Context, input *ec2.CreateSnapshotInput) (*ec2.Snapshot, error) {
	var output ec2.Snapshot
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateSnapshotAsync(ctx workflow.Context, input *ec2.CreateSnapshotInput) *Ec2CreateSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSnapshot", input)
	return &Ec2CreateSnapshotFuture{Future: future}
}

func (a *EC2Stub) CreateSnapshots(ctx workflow.Context, input *ec2.CreateSnapshotsInput) (*ec2.CreateSnapshotsOutput, error) {
	var output ec2.CreateSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateSnapshotsAsync(ctx workflow.Context, input *ec2.CreateSnapshotsInput) *Ec2CreateSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSnapshots", input)
	return &Ec2CreateSnapshotsFuture{Future: future}
}

func (a *EC2Stub) CreateSpotDatafeedSubscription(ctx workflow.Context, input *ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	var output ec2.CreateSpotDatafeedSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSpotDatafeedSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.CreateSpotDatafeedSubscriptionInput) *Ec2CreateSpotDatafeedSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSpotDatafeedSubscription", input)
	return &Ec2CreateSpotDatafeedSubscriptionFuture{Future: future}
}

func (a *EC2Stub) CreateSubnet(ctx workflow.Context, input *ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error) {
	var output ec2.CreateSubnetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSubnet", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateSubnetAsync(ctx workflow.Context, input *ec2.CreateSubnetInput) *Ec2CreateSubnetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateSubnet", input)
	return &Ec2CreateSubnetFuture{Future: future}
}

func (a *EC2Stub) CreateTags(ctx workflow.Context, input *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error) {
	var output ec2.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTagsAsync(ctx workflow.Context, input *ec2.CreateTagsInput) *Ec2CreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTags", input)
	return &Ec2CreateTagsFuture{Future: future}
}

func (a *EC2Stub) CreateTrafficMirrorFilter(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterInput) (*ec2.CreateTrafficMirrorFilterOutput, error) {
	var output ec2.CreateTrafficMirrorFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTrafficMirrorFilterAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterInput) *Ec2CreateTrafficMirrorFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorFilter", input)
	return &Ec2CreateTrafficMirrorFilterFuture{Future: future}
}

func (a *EC2Stub) CreateTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterRuleInput) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
	var output ec2.CreateTrafficMirrorFilterRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorFilterRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterRuleInput) *Ec2CreateTrafficMirrorFilterRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorFilterRule", input)
	return &Ec2CreateTrafficMirrorFilterRuleFuture{Future: future}
}

func (a *EC2Stub) CreateTrafficMirrorSession(ctx workflow.Context, input *ec2.CreateTrafficMirrorSessionInput) (*ec2.CreateTrafficMirrorSessionOutput, error) {
	var output ec2.CreateTrafficMirrorSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorSession", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorSessionInput) *Ec2CreateTrafficMirrorSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorSession", input)
	return &Ec2CreateTrafficMirrorSessionFuture{Future: future}
}

func (a *EC2Stub) CreateTrafficMirrorTarget(ctx workflow.Context, input *ec2.CreateTrafficMirrorTargetInput) (*ec2.CreateTrafficMirrorTargetOutput, error) {
	var output ec2.CreateTrafficMirrorTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTrafficMirrorTargetAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorTargetInput) *Ec2CreateTrafficMirrorTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTrafficMirrorTarget", input)
	return &Ec2CreateTrafficMirrorTargetFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGateway(ctx workflow.Context, input *ec2.CreateTransitGatewayInput) (*ec2.CreateTransitGatewayOutput, error) {
	var output ec2.CreateTransitGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayInput) *Ec2CreateTransitGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGateway", input)
	return &Ec2CreateTransitGatewayFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.CreateTransitGatewayMulticastDomainInput) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.CreateTransitGatewayMulticastDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayMulticastDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayMulticastDomainInput) *Ec2CreateTransitGatewayMulticastDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayMulticastDomain", input)
	return &Ec2CreateTransitGatewayMulticastDomainFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.CreateTransitGatewayPeeringAttachmentInput) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.CreateTransitGatewayPeeringAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayPeeringAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayPeeringAttachmentInput) *Ec2CreateTransitGatewayPeeringAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayPeeringAttachment", input)
	return &Ec2CreateTransitGatewayPeeringAttachmentFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.CreateTransitGatewayPrefixListReferenceInput) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.CreateTransitGatewayPrefixListReferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayPrefixListReference", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayPrefixListReferenceInput) *Ec2CreateTransitGatewayPrefixListReferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayPrefixListReference", input)
	return &Ec2CreateTransitGatewayPrefixListReferenceFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGatewayRoute(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteInput) (*ec2.CreateTransitGatewayRouteOutput, error) {
	var output ec2.CreateTransitGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteInput) *Ec2CreateTransitGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayRoute", input)
	return &Ec2CreateTransitGatewayRouteFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteTableInput) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
	var output ec2.CreateTransitGatewayRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteTableInput) *Ec2CreateTransitGatewayRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayRouteTable", input)
	return &Ec2CreateTransitGatewayRouteTableFuture{Future: future}
}

func (a *EC2Stub) CreateTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.CreateTransitGatewayVpcAttachmentInput) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.CreateTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayVpcAttachmentInput) *Ec2CreateTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateTransitGatewayVpcAttachment", input)
	return &Ec2CreateTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *EC2Stub) CreateVolume(ctx workflow.Context, input *ec2.CreateVolumeInput) (*ec2.Volume, error) {
	var output ec2.Volume
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVolumeAsync(ctx workflow.Context, input *ec2.CreateVolumeInput) *Ec2CreateVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVolume", input)
	return &Ec2CreateVolumeFuture{Future: future}
}

func (a *EC2Stub) CreateVpc(ctx workflow.Context, input *ec2.CreateVpcInput) (*ec2.CreateVpcOutput, error) {
	var output ec2.CreateVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpcAsync(ctx workflow.Context, input *ec2.CreateVpcInput) *Ec2CreateVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpc", input)
	return &Ec2CreateVpcFuture{Future: future}
}

func (a *EC2Stub) CreateVpcEndpoint(ctx workflow.Context, input *ec2.CreateVpcEndpointInput) (*ec2.CreateVpcEndpointOutput, error) {
	var output ec2.CreateVpcEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpcEndpointAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointInput) *Ec2CreateVpcEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcEndpoint", input)
	return &Ec2CreateVpcEndpointFuture{Future: future}
}

func (a *EC2Stub) CreateVpcEndpointConnectionNotification(ctx workflow.Context, input *ec2.CreateVpcEndpointConnectionNotificationInput) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
	var output ec2.CreateVpcEndpointConnectionNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcEndpointConnectionNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpcEndpointConnectionNotificationAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointConnectionNotificationInput) *Ec2CreateVpcEndpointConnectionNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcEndpointConnectionNotification", input)
	return &Ec2CreateVpcEndpointConnectionNotificationFuture{Future: future}
}

func (a *EC2Stub) CreateVpcEndpointServiceConfiguration(ctx workflow.Context, input *ec2.CreateVpcEndpointServiceConfigurationInput) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	var output ec2.CreateVpcEndpointServiceConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcEndpointServiceConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpcEndpointServiceConfigurationAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointServiceConfigurationInput) *Ec2CreateVpcEndpointServiceConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcEndpointServiceConfiguration", input)
	return &Ec2CreateVpcEndpointServiceConfigurationFuture{Future: future}
}

func (a *EC2Stub) CreateVpcPeeringConnection(ctx workflow.Context, input *ec2.CreateVpcPeeringConnectionInput) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	var output ec2.CreateVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.CreateVpcPeeringConnectionInput) *Ec2CreateVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpcPeeringConnection", input)
	return &Ec2CreateVpcPeeringConnectionFuture{Future: future}
}

func (a *EC2Stub) CreateVpnConnection(ctx workflow.Context, input *ec2.CreateVpnConnectionInput) (*ec2.CreateVpnConnectionOutput, error) {
	var output ec2.CreateVpnConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpnConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpnConnectionAsync(ctx workflow.Context, input *ec2.CreateVpnConnectionInput) *Ec2CreateVpnConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpnConnection", input)
	return &Ec2CreateVpnConnectionFuture{Future: future}
}

func (a *EC2Stub) CreateVpnConnectionRoute(ctx workflow.Context, input *ec2.CreateVpnConnectionRouteInput) (*ec2.CreateVpnConnectionRouteOutput, error) {
	var output ec2.CreateVpnConnectionRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpnConnectionRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpnConnectionRouteAsync(ctx workflow.Context, input *ec2.CreateVpnConnectionRouteInput) *Ec2CreateVpnConnectionRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpnConnectionRoute", input)
	return &Ec2CreateVpnConnectionRouteFuture{Future: future}
}

func (a *EC2Stub) CreateVpnGateway(ctx workflow.Context, input *ec2.CreateVpnGatewayInput) (*ec2.CreateVpnGatewayOutput, error) {
	var output ec2.CreateVpnGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpnGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) CreateVpnGatewayAsync(ctx workflow.Context, input *ec2.CreateVpnGatewayInput) *Ec2CreateVpnGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.CreateVpnGateway", input)
	return &Ec2CreateVpnGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteCarrierGateway(ctx workflow.Context, input *ec2.DeleteCarrierGatewayInput) (*ec2.DeleteCarrierGatewayOutput, error) {
	var output ec2.DeleteCarrierGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteCarrierGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteCarrierGatewayAsync(ctx workflow.Context, input *ec2.DeleteCarrierGatewayInput) *Ec2DeleteCarrierGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteCarrierGateway", input)
	return &Ec2DeleteCarrierGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteClientVpnEndpoint(ctx workflow.Context, input *ec2.DeleteClientVpnEndpointInput) (*ec2.DeleteClientVpnEndpointOutput, error) {
	var output ec2.DeleteClientVpnEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteClientVpnEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteClientVpnEndpointAsync(ctx workflow.Context, input *ec2.DeleteClientVpnEndpointInput) *Ec2DeleteClientVpnEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteClientVpnEndpoint", input)
	return &Ec2DeleteClientVpnEndpointFuture{Future: future}
}

func (a *EC2Stub) DeleteClientVpnRoute(ctx workflow.Context, input *ec2.DeleteClientVpnRouteInput) (*ec2.DeleteClientVpnRouteOutput, error) {
	var output ec2.DeleteClientVpnRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteClientVpnRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteClientVpnRouteAsync(ctx workflow.Context, input *ec2.DeleteClientVpnRouteInput) *Ec2DeleteClientVpnRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteClientVpnRoute", input)
	return &Ec2DeleteClientVpnRouteFuture{Future: future}
}

func (a *EC2Stub) DeleteCustomerGateway(ctx workflow.Context, input *ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error) {
	var output ec2.DeleteCustomerGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteCustomerGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteCustomerGatewayAsync(ctx workflow.Context, input *ec2.DeleteCustomerGatewayInput) *Ec2DeleteCustomerGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteCustomerGateway", input)
	return &Ec2DeleteCustomerGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteDhcpOptions(ctx workflow.Context, input *ec2.DeleteDhcpOptionsInput) (*ec2.DeleteDhcpOptionsOutput, error) {
	var output ec2.DeleteDhcpOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteDhcpOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteDhcpOptionsAsync(ctx workflow.Context, input *ec2.DeleteDhcpOptionsInput) *Ec2DeleteDhcpOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteDhcpOptions", input)
	return &Ec2DeleteDhcpOptionsFuture{Future: future}
}

func (a *EC2Stub) DeleteEgressOnlyInternetGateway(ctx workflow.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	var output ec2.DeleteEgressOnlyInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteEgressOnlyInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteEgressOnlyInternetGatewayAsync(ctx workflow.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput) *Ec2DeleteEgressOnlyInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteEgressOnlyInternetGateway", input)
	return &Ec2DeleteEgressOnlyInternetGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteFleets(ctx workflow.Context, input *ec2.DeleteFleetsInput) (*ec2.DeleteFleetsOutput, error) {
	var output ec2.DeleteFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteFleetsAsync(ctx workflow.Context, input *ec2.DeleteFleetsInput) *Ec2DeleteFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteFleets", input)
	return &Ec2DeleteFleetsFuture{Future: future}
}

func (a *EC2Stub) DeleteFlowLogs(ctx workflow.Context, input *ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error) {
	var output ec2.DeleteFlowLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteFlowLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteFlowLogsAsync(ctx workflow.Context, input *ec2.DeleteFlowLogsInput) *Ec2DeleteFlowLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteFlowLogs", input)
	return &Ec2DeleteFlowLogsFuture{Future: future}
}

func (a *EC2Stub) DeleteFpgaImage(ctx workflow.Context, input *ec2.DeleteFpgaImageInput) (*ec2.DeleteFpgaImageOutput, error) {
	var output ec2.DeleteFpgaImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteFpgaImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteFpgaImageAsync(ctx workflow.Context, input *ec2.DeleteFpgaImageInput) *Ec2DeleteFpgaImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteFpgaImage", input)
	return &Ec2DeleteFpgaImageFuture{Future: future}
}

func (a *EC2Stub) DeleteInternetGateway(ctx workflow.Context, input *ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error) {
	var output ec2.DeleteInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteInternetGatewayAsync(ctx workflow.Context, input *ec2.DeleteInternetGatewayInput) *Ec2DeleteInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteInternetGateway", input)
	return &Ec2DeleteInternetGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteKeyPair(ctx workflow.Context, input *ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error) {
	var output ec2.DeleteKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteKeyPairAsync(ctx workflow.Context, input *ec2.DeleteKeyPairInput) *Ec2DeleteKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteKeyPair", input)
	return &Ec2DeleteKeyPairFuture{Future: future}
}

func (a *EC2Stub) DeleteLaunchTemplate(ctx workflow.Context, input *ec2.DeleteLaunchTemplateInput) (*ec2.DeleteLaunchTemplateOutput, error) {
	var output ec2.DeleteLaunchTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLaunchTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteLaunchTemplateAsync(ctx workflow.Context, input *ec2.DeleteLaunchTemplateInput) *Ec2DeleteLaunchTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLaunchTemplate", input)
	return &Ec2DeleteLaunchTemplateFuture{Future: future}
}

func (a *EC2Stub) DeleteLaunchTemplateVersions(ctx workflow.Context, input *ec2.DeleteLaunchTemplateVersionsInput) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
	var output ec2.DeleteLaunchTemplateVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLaunchTemplateVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteLaunchTemplateVersionsAsync(ctx workflow.Context, input *ec2.DeleteLaunchTemplateVersionsInput) *Ec2DeleteLaunchTemplateVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLaunchTemplateVersions", input)
	return &Ec2DeleteLaunchTemplateVersionsFuture{Future: future}
}

func (a *EC2Stub) DeleteLocalGatewayRoute(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteInput) (*ec2.DeleteLocalGatewayRouteOutput, error) {
	var output ec2.DeleteLocalGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLocalGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteLocalGatewayRouteAsync(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteInput) *Ec2DeleteLocalGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLocalGatewayRoute", input)
	return &Ec2DeleteLocalGatewayRouteFuture{Future: future}
}

func (a *EC2Stub) DeleteLocalGatewayRouteTableVpcAssociation(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
	var output ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLocalGatewayRouteTableVpcAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteLocalGatewayRouteTableVpcAssociationAsync(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) *Ec2DeleteLocalGatewayRouteTableVpcAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteLocalGatewayRouteTableVpcAssociation", input)
	return &Ec2DeleteLocalGatewayRouteTableVpcAssociationFuture{Future: future}
}

func (a *EC2Stub) DeleteManagedPrefixList(ctx workflow.Context, input *ec2.DeleteManagedPrefixListInput) (*ec2.DeleteManagedPrefixListOutput, error) {
	var output ec2.DeleteManagedPrefixListOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteManagedPrefixList", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteManagedPrefixListAsync(ctx workflow.Context, input *ec2.DeleteManagedPrefixListInput) *Ec2DeleteManagedPrefixListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteManagedPrefixList", input)
	return &Ec2DeleteManagedPrefixListFuture{Future: future}
}

func (a *EC2Stub) DeleteNatGateway(ctx workflow.Context, input *ec2.DeleteNatGatewayInput) (*ec2.DeleteNatGatewayOutput, error) {
	var output ec2.DeleteNatGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNatGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteNatGatewayAsync(ctx workflow.Context, input *ec2.DeleteNatGatewayInput) *Ec2DeleteNatGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNatGateway", input)
	return &Ec2DeleteNatGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteNetworkAcl(ctx workflow.Context, input *ec2.DeleteNetworkAclInput) (*ec2.DeleteNetworkAclOutput, error) {
	var output ec2.DeleteNetworkAclOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkAcl", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteNetworkAclAsync(ctx workflow.Context, input *ec2.DeleteNetworkAclInput) *Ec2DeleteNetworkAclFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkAcl", input)
	return &Ec2DeleteNetworkAclFuture{Future: future}
}

func (a *EC2Stub) DeleteNetworkAclEntry(ctx workflow.Context, input *ec2.DeleteNetworkAclEntryInput) (*ec2.DeleteNetworkAclEntryOutput, error) {
	var output ec2.DeleteNetworkAclEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkAclEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteNetworkAclEntryAsync(ctx workflow.Context, input *ec2.DeleteNetworkAclEntryInput) *Ec2DeleteNetworkAclEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkAclEntry", input)
	return &Ec2DeleteNetworkAclEntryFuture{Future: future}
}

func (a *EC2Stub) DeleteNetworkInterface(ctx workflow.Context, input *ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error) {
	var output ec2.DeleteNetworkInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteNetworkInterfaceAsync(ctx workflow.Context, input *ec2.DeleteNetworkInterfaceInput) *Ec2DeleteNetworkInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkInterface", input)
	return &Ec2DeleteNetworkInterfaceFuture{Future: future}
}

func (a *EC2Stub) DeleteNetworkInterfacePermission(ctx workflow.Context, input *ec2.DeleteNetworkInterfacePermissionInput) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	var output ec2.DeleteNetworkInterfacePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkInterfacePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteNetworkInterfacePermissionAsync(ctx workflow.Context, input *ec2.DeleteNetworkInterfacePermissionInput) *Ec2DeleteNetworkInterfacePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteNetworkInterfacePermission", input)
	return &Ec2DeleteNetworkInterfacePermissionFuture{Future: future}
}

func (a *EC2Stub) DeletePlacementGroup(ctx workflow.Context, input *ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error) {
	var output ec2.DeletePlacementGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeletePlacementGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeletePlacementGroupAsync(ctx workflow.Context, input *ec2.DeletePlacementGroupInput) *Ec2DeletePlacementGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeletePlacementGroup", input)
	return &Ec2DeletePlacementGroupFuture{Future: future}
}

func (a *EC2Stub) DeleteQueuedReservedInstances(ctx workflow.Context, input *ec2.DeleteQueuedReservedInstancesInput) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
	var output ec2.DeleteQueuedReservedInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteQueuedReservedInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteQueuedReservedInstancesAsync(ctx workflow.Context, input *ec2.DeleteQueuedReservedInstancesInput) *Ec2DeleteQueuedReservedInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteQueuedReservedInstances", input)
	return &Ec2DeleteQueuedReservedInstancesFuture{Future: future}
}

func (a *EC2Stub) DeleteRoute(ctx workflow.Context, input *ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error) {
	var output ec2.DeleteRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteRouteAsync(ctx workflow.Context, input *ec2.DeleteRouteInput) *Ec2DeleteRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteRoute", input)
	return &Ec2DeleteRouteFuture{Future: future}
}

func (a *EC2Stub) DeleteRouteTable(ctx workflow.Context, input *ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error) {
	var output ec2.DeleteRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteRouteTableAsync(ctx workflow.Context, input *ec2.DeleteRouteTableInput) *Ec2DeleteRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteRouteTable", input)
	return &Ec2DeleteRouteTableFuture{Future: future}
}

func (a *EC2Stub) DeleteSecurityGroup(ctx workflow.Context, input *ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error) {
	var output ec2.DeleteSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteSecurityGroupAsync(ctx workflow.Context, input *ec2.DeleteSecurityGroupInput) *Ec2DeleteSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSecurityGroup", input)
	return &Ec2DeleteSecurityGroupFuture{Future: future}
}

func (a *EC2Stub) DeleteSnapshot(ctx workflow.Context, input *ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error) {
	var output ec2.DeleteSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteSnapshotAsync(ctx workflow.Context, input *ec2.DeleteSnapshotInput) *Ec2DeleteSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSnapshot", input)
	return &Ec2DeleteSnapshotFuture{Future: future}
}

func (a *EC2Stub) DeleteSpotDatafeedSubscription(ctx workflow.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	var output ec2.DeleteSpotDatafeedSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSpotDatafeedSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput) *Ec2DeleteSpotDatafeedSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSpotDatafeedSubscription", input)
	return &Ec2DeleteSpotDatafeedSubscriptionFuture{Future: future}
}

func (a *EC2Stub) DeleteSubnet(ctx workflow.Context, input *ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error) {
	var output ec2.DeleteSubnetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSubnet", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteSubnetAsync(ctx workflow.Context, input *ec2.DeleteSubnetInput) *Ec2DeleteSubnetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteSubnet", input)
	return &Ec2DeleteSubnetFuture{Future: future}
}

func (a *EC2Stub) DeleteTags(ctx workflow.Context, input *ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error) {
	var output ec2.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTagsAsync(ctx workflow.Context, input *ec2.DeleteTagsInput) *Ec2DeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTags", input)
	return &Ec2DeleteTagsFuture{Future: future}
}

func (a *EC2Stub) DeleteTrafficMirrorFilter(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterInput) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
	var output ec2.DeleteTrafficMirrorFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTrafficMirrorFilterAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterInput) *Ec2DeleteTrafficMirrorFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorFilter", input)
	return &Ec2DeleteTrafficMirrorFilterFuture{Future: future}
}

func (a *EC2Stub) DeleteTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterRuleInput) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
	var output ec2.DeleteTrafficMirrorFilterRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorFilterRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterRuleInput) *Ec2DeleteTrafficMirrorFilterRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorFilterRule", input)
	return &Ec2DeleteTrafficMirrorFilterRuleFuture{Future: future}
}

func (a *EC2Stub) DeleteTrafficMirrorSession(ctx workflow.Context, input *ec2.DeleteTrafficMirrorSessionInput) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
	var output ec2.DeleteTrafficMirrorSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorSession", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorSessionInput) *Ec2DeleteTrafficMirrorSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorSession", input)
	return &Ec2DeleteTrafficMirrorSessionFuture{Future: future}
}

func (a *EC2Stub) DeleteTrafficMirrorTarget(ctx workflow.Context, input *ec2.DeleteTrafficMirrorTargetInput) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
	var output ec2.DeleteTrafficMirrorTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTrafficMirrorTargetAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorTargetInput) *Ec2DeleteTrafficMirrorTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTrafficMirrorTarget", input)
	return &Ec2DeleteTrafficMirrorTargetFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGateway(ctx workflow.Context, input *ec2.DeleteTransitGatewayInput) (*ec2.DeleteTransitGatewayOutput, error) {
	var output ec2.DeleteTransitGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayInput) *Ec2DeleteTransitGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGateway", input)
	return &Ec2DeleteTransitGatewayFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.DeleteTransitGatewayMulticastDomainInput) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
	var output ec2.DeleteTransitGatewayMulticastDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayMulticastDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayMulticastDomainInput) *Ec2DeleteTransitGatewayMulticastDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayMulticastDomain", input)
	return &Ec2DeleteTransitGatewayMulticastDomainFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.DeleteTransitGatewayPeeringAttachmentInput) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.DeleteTransitGatewayPeeringAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayPeeringAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayPeeringAttachmentInput) *Ec2DeleteTransitGatewayPeeringAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayPeeringAttachment", input)
	return &Ec2DeleteTransitGatewayPeeringAttachmentFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.DeleteTransitGatewayPrefixListReferenceInput) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.DeleteTransitGatewayPrefixListReferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayPrefixListReference", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayPrefixListReferenceInput) *Ec2DeleteTransitGatewayPrefixListReferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayPrefixListReference", input)
	return &Ec2DeleteTransitGatewayPrefixListReferenceFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGatewayRoute(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteInput) (*ec2.DeleteTransitGatewayRouteOutput, error) {
	var output ec2.DeleteTransitGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteInput) *Ec2DeleteTransitGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayRoute", input)
	return &Ec2DeleteTransitGatewayRouteFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGatewayRouteTable(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteTableInput) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
	var output ec2.DeleteTransitGatewayRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteTableInput) *Ec2DeleteTransitGatewayRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayRouteTable", input)
	return &Ec2DeleteTransitGatewayRouteTableFuture{Future: future}
}

func (a *EC2Stub) DeleteTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.DeleteTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayVpcAttachmentInput) *Ec2DeleteTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteTransitGatewayVpcAttachment", input)
	return &Ec2DeleteTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *EC2Stub) DeleteVolume(ctx workflow.Context, input *ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error) {
	var output ec2.DeleteVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVolumeAsync(ctx workflow.Context, input *ec2.DeleteVolumeInput) *Ec2DeleteVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVolume", input)
	return &Ec2DeleteVolumeFuture{Future: future}
}

func (a *EC2Stub) DeleteVpc(ctx workflow.Context, input *ec2.DeleteVpcInput) (*ec2.DeleteVpcOutput, error) {
	var output ec2.DeleteVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpcAsync(ctx workflow.Context, input *ec2.DeleteVpcInput) *Ec2DeleteVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpc", input)
	return &Ec2DeleteVpcFuture{Future: future}
}

func (a *EC2Stub) DeleteVpcEndpointConnectionNotifications(ctx workflow.Context, input *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
	var output ec2.DeleteVpcEndpointConnectionNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcEndpointConnectionNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpcEndpointConnectionNotificationsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointConnectionNotificationsInput) *Ec2DeleteVpcEndpointConnectionNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcEndpointConnectionNotifications", input)
	return &Ec2DeleteVpcEndpointConnectionNotificationsFuture{Future: future}
}

func (a *EC2Stub) DeleteVpcEndpointServiceConfigurations(ctx workflow.Context, input *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	var output ec2.DeleteVpcEndpointServiceConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcEndpointServiceConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpcEndpointServiceConfigurationsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointServiceConfigurationsInput) *Ec2DeleteVpcEndpointServiceConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcEndpointServiceConfigurations", input)
	return &Ec2DeleteVpcEndpointServiceConfigurationsFuture{Future: future}
}

func (a *EC2Stub) DeleteVpcEndpoints(ctx workflow.Context, input *ec2.DeleteVpcEndpointsInput) (*ec2.DeleteVpcEndpointsOutput, error) {
	var output ec2.DeleteVpcEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpcEndpointsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointsInput) *Ec2DeleteVpcEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcEndpoints", input)
	return &Ec2DeleteVpcEndpointsFuture{Future: future}
}

func (a *EC2Stub) DeleteVpcPeeringConnection(ctx workflow.Context, input *ec2.DeleteVpcPeeringConnectionInput) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	var output ec2.DeleteVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.DeleteVpcPeeringConnectionInput) *Ec2DeleteVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpcPeeringConnection", input)
	return &Ec2DeleteVpcPeeringConnectionFuture{Future: future}
}

func (a *EC2Stub) DeleteVpnConnection(ctx workflow.Context, input *ec2.DeleteVpnConnectionInput) (*ec2.DeleteVpnConnectionOutput, error) {
	var output ec2.DeleteVpnConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpnConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpnConnectionAsync(ctx workflow.Context, input *ec2.DeleteVpnConnectionInput) *Ec2DeleteVpnConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpnConnection", input)
	return &Ec2DeleteVpnConnectionFuture{Future: future}
}

func (a *EC2Stub) DeleteVpnConnectionRoute(ctx workflow.Context, input *ec2.DeleteVpnConnectionRouteInput) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	var output ec2.DeleteVpnConnectionRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpnConnectionRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpnConnectionRouteAsync(ctx workflow.Context, input *ec2.DeleteVpnConnectionRouteInput) *Ec2DeleteVpnConnectionRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpnConnectionRoute", input)
	return &Ec2DeleteVpnConnectionRouteFuture{Future: future}
}

func (a *EC2Stub) DeleteVpnGateway(ctx workflow.Context, input *ec2.DeleteVpnGatewayInput) (*ec2.DeleteVpnGatewayOutput, error) {
	var output ec2.DeleteVpnGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpnGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeleteVpnGatewayAsync(ctx workflow.Context, input *ec2.DeleteVpnGatewayInput) *Ec2DeleteVpnGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeleteVpnGateway", input)
	return &Ec2DeleteVpnGatewayFuture{Future: future}
}

func (a *EC2Stub) DeprovisionByoipCidr(ctx workflow.Context, input *ec2.DeprovisionByoipCidrInput) (*ec2.DeprovisionByoipCidrOutput, error) {
	var output ec2.DeprovisionByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeprovisionByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeprovisionByoipCidrAsync(ctx workflow.Context, input *ec2.DeprovisionByoipCidrInput) *Ec2DeprovisionByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeprovisionByoipCidr", input)
	return &Ec2DeprovisionByoipCidrFuture{Future: future}
}

func (a *EC2Stub) DeregisterImage(ctx workflow.Context, input *ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error) {
	var output ec2.DeregisterImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeregisterImageAsync(ctx workflow.Context, input *ec2.DeregisterImageInput) *Ec2DeregisterImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterImage", input)
	return &Ec2DeregisterImageFuture{Future: future}
}

func (a *EC2Stub) DeregisterInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.DeregisterInstanceEventNotificationAttributesInput) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error) {
	var output ec2.DeregisterInstanceEventNotificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterInstanceEventNotificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeregisterInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.DeregisterInstanceEventNotificationAttributesInput) *Ec2DeregisterInstanceEventNotificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterInstanceEventNotificationAttributes", input)
	return &Ec2DeregisterInstanceEventNotificationAttributesFuture{Future: future}
}

func (a *EC2Stub) DeregisterTransitGatewayMulticastGroupMembers(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
	var output ec2.DeregisterTransitGatewayMulticastGroupMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterTransitGatewayMulticastGroupMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeregisterTransitGatewayMulticastGroupMembersAsync(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) *Ec2DeregisterTransitGatewayMulticastGroupMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterTransitGatewayMulticastGroupMembers", input)
	return &Ec2DeregisterTransitGatewayMulticastGroupMembersFuture{Future: future}
}

func (a *EC2Stub) DeregisterTransitGatewayMulticastGroupSources(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
	var output ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterTransitGatewayMulticastGroupSources", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DeregisterTransitGatewayMulticastGroupSourcesAsync(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) *Ec2DeregisterTransitGatewayMulticastGroupSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DeregisterTransitGatewayMulticastGroupSources", input)
	return &Ec2DeregisterTransitGatewayMulticastGroupSourcesFuture{Future: future}
}

func (a *EC2Stub) DescribeAccountAttributes(ctx workflow.Context, input *ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error) {
	var output ec2.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeAccountAttributesAsync(ctx workflow.Context, input *ec2.DescribeAccountAttributesInput) *Ec2DescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAccountAttributes", input)
	return &Ec2DescribeAccountAttributesFuture{Future: future}
}

func (a *EC2Stub) DescribeAddresses(ctx workflow.Context, input *ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error) {
	var output ec2.DescribeAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeAddressesAsync(ctx workflow.Context, input *ec2.DescribeAddressesInput) *Ec2DescribeAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAddresses", input)
	return &Ec2DescribeAddressesFuture{Future: future}
}

func (a *EC2Stub) DescribeAggregateIdFormat(ctx workflow.Context, input *ec2.DescribeAggregateIdFormatInput) (*ec2.DescribeAggregateIdFormatOutput, error) {
	var output ec2.DescribeAggregateIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAggregateIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeAggregateIdFormatAsync(ctx workflow.Context, input *ec2.DescribeAggregateIdFormatInput) *Ec2DescribeAggregateIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAggregateIdFormat", input)
	return &Ec2DescribeAggregateIdFormatFuture{Future: future}
}

func (a *EC2Stub) DescribeAvailabilityZones(ctx workflow.Context, input *ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error) {
	var output ec2.DescribeAvailabilityZonesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAvailabilityZones", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeAvailabilityZonesAsync(ctx workflow.Context, input *ec2.DescribeAvailabilityZonesInput) *Ec2DescribeAvailabilityZonesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeAvailabilityZones", input)
	return &Ec2DescribeAvailabilityZonesFuture{Future: future}
}

func (a *EC2Stub) DescribeBundleTasks(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error) {
	var output ec2.DescribeBundleTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeBundleTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeBundleTasksAsync(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) *Ec2DescribeBundleTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeBundleTasks", input)
	return &Ec2DescribeBundleTasksFuture{Future: future}
}

func (a *EC2Stub) DescribeByoipCidrs(ctx workflow.Context, input *ec2.DescribeByoipCidrsInput) (*ec2.DescribeByoipCidrsOutput, error) {
	var output ec2.DescribeByoipCidrsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeByoipCidrs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeByoipCidrsAsync(ctx workflow.Context, input *ec2.DescribeByoipCidrsInput) *Ec2DescribeByoipCidrsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeByoipCidrs", input)
	return &Ec2DescribeByoipCidrsFuture{Future: future}
}

func (a *EC2Stub) DescribeCapacityReservations(ctx workflow.Context, input *ec2.DescribeCapacityReservationsInput) (*ec2.DescribeCapacityReservationsOutput, error) {
	var output ec2.DescribeCapacityReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCapacityReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeCapacityReservationsAsync(ctx workflow.Context, input *ec2.DescribeCapacityReservationsInput) *Ec2DescribeCapacityReservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCapacityReservations", input)
	return &Ec2DescribeCapacityReservationsFuture{Future: future}
}

func (a *EC2Stub) DescribeCarrierGateways(ctx workflow.Context, input *ec2.DescribeCarrierGatewaysInput) (*ec2.DescribeCarrierGatewaysOutput, error) {
	var output ec2.DescribeCarrierGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCarrierGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeCarrierGatewaysAsync(ctx workflow.Context, input *ec2.DescribeCarrierGatewaysInput) *Ec2DescribeCarrierGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCarrierGateways", input)
	return &Ec2DescribeCarrierGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeClassicLinkInstances(ctx workflow.Context, input *ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	var output ec2.DescribeClassicLinkInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClassicLinkInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeClassicLinkInstancesAsync(ctx workflow.Context, input *ec2.DescribeClassicLinkInstancesInput) *Ec2DescribeClassicLinkInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClassicLinkInstances", input)
	return &Ec2DescribeClassicLinkInstancesFuture{Future: future}
}

func (a *EC2Stub) DescribeClientVpnAuthorizationRules(ctx workflow.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
	var output ec2.DescribeClientVpnAuthorizationRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnAuthorizationRules", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeClientVpnAuthorizationRulesAsync(ctx workflow.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput) *Ec2DescribeClientVpnAuthorizationRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnAuthorizationRules", input)
	return &Ec2DescribeClientVpnAuthorizationRulesFuture{Future: future}
}

func (a *EC2Stub) DescribeClientVpnConnections(ctx workflow.Context, input *ec2.DescribeClientVpnConnectionsInput) (*ec2.DescribeClientVpnConnectionsOutput, error) {
	var output ec2.DescribeClientVpnConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeClientVpnConnectionsAsync(ctx workflow.Context, input *ec2.DescribeClientVpnConnectionsInput) *Ec2DescribeClientVpnConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnConnections", input)
	return &Ec2DescribeClientVpnConnectionsFuture{Future: future}
}

func (a *EC2Stub) DescribeClientVpnEndpoints(ctx workflow.Context, input *ec2.DescribeClientVpnEndpointsInput) (*ec2.DescribeClientVpnEndpointsOutput, error) {
	var output ec2.DescribeClientVpnEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeClientVpnEndpointsAsync(ctx workflow.Context, input *ec2.DescribeClientVpnEndpointsInput) *Ec2DescribeClientVpnEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnEndpoints", input)
	return &Ec2DescribeClientVpnEndpointsFuture{Future: future}
}

func (a *EC2Stub) DescribeClientVpnRoutes(ctx workflow.Context, input *ec2.DescribeClientVpnRoutesInput) (*ec2.DescribeClientVpnRoutesOutput, error) {
	var output ec2.DescribeClientVpnRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeClientVpnRoutesAsync(ctx workflow.Context, input *ec2.DescribeClientVpnRoutesInput) *Ec2DescribeClientVpnRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnRoutes", input)
	return &Ec2DescribeClientVpnRoutesFuture{Future: future}
}

func (a *EC2Stub) DescribeClientVpnTargetNetworks(ctx workflow.Context, input *ec2.DescribeClientVpnTargetNetworksInput) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
	var output ec2.DescribeClientVpnTargetNetworksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnTargetNetworks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeClientVpnTargetNetworksAsync(ctx workflow.Context, input *ec2.DescribeClientVpnTargetNetworksInput) *Ec2DescribeClientVpnTargetNetworksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeClientVpnTargetNetworks", input)
	return &Ec2DescribeClientVpnTargetNetworksFuture{Future: future}
}

func (a *EC2Stub) DescribeCoipPools(ctx workflow.Context, input *ec2.DescribeCoipPoolsInput) (*ec2.DescribeCoipPoolsOutput, error) {
	var output ec2.DescribeCoipPoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCoipPools", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeCoipPoolsAsync(ctx workflow.Context, input *ec2.DescribeCoipPoolsInput) *Ec2DescribeCoipPoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCoipPools", input)
	return &Ec2DescribeCoipPoolsFuture{Future: future}
}

func (a *EC2Stub) DescribeConversionTasks(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error) {
	var output ec2.DescribeConversionTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeConversionTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeConversionTasksAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *Ec2DescribeConversionTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeConversionTasks", input)
	return &Ec2DescribeConversionTasksFuture{Future: future}
}

func (a *EC2Stub) DescribeCustomerGateways(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error) {
	var output ec2.DescribeCustomerGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCustomerGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeCustomerGatewaysAsync(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) *Ec2DescribeCustomerGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeCustomerGateways", input)
	return &Ec2DescribeCustomerGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeDhcpOptions(ctx workflow.Context, input *ec2.DescribeDhcpOptionsInput) (*ec2.DescribeDhcpOptionsOutput, error) {
	var output ec2.DescribeDhcpOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeDhcpOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeDhcpOptionsAsync(ctx workflow.Context, input *ec2.DescribeDhcpOptionsInput) *Ec2DescribeDhcpOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeDhcpOptions", input)
	return &Ec2DescribeDhcpOptionsFuture{Future: future}
}

func (a *EC2Stub) DescribeEgressOnlyInternetGateways(ctx workflow.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	var output ec2.DescribeEgressOnlyInternetGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeEgressOnlyInternetGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeEgressOnlyInternetGatewaysAsync(ctx workflow.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput) *Ec2DescribeEgressOnlyInternetGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeEgressOnlyInternetGateways", input)
	return &Ec2DescribeEgressOnlyInternetGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeElasticGpus(ctx workflow.Context, input *ec2.DescribeElasticGpusInput) (*ec2.DescribeElasticGpusOutput, error) {
	var output ec2.DescribeElasticGpusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeElasticGpus", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeElasticGpusAsync(ctx workflow.Context, input *ec2.DescribeElasticGpusInput) *Ec2DescribeElasticGpusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeElasticGpus", input)
	return &Ec2DescribeElasticGpusFuture{Future: future}
}

func (a *EC2Stub) DescribeExportImageTasks(ctx workflow.Context, input *ec2.DescribeExportImageTasksInput) (*ec2.DescribeExportImageTasksOutput, error) {
	var output ec2.DescribeExportImageTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeExportImageTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeExportImageTasksAsync(ctx workflow.Context, input *ec2.DescribeExportImageTasksInput) *Ec2DescribeExportImageTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeExportImageTasks", input)
	return &Ec2DescribeExportImageTasksFuture{Future: future}
}

func (a *EC2Stub) DescribeExportTasks(ctx workflow.Context, input *ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error) {
	var output ec2.DescribeExportTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeExportTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeExportTasksAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) *Ec2DescribeExportTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeExportTasks", input)
	return &Ec2DescribeExportTasksFuture{Future: future}
}

func (a *EC2Stub) DescribeFastSnapshotRestores(ctx workflow.Context, input *ec2.DescribeFastSnapshotRestoresInput) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
	var output ec2.DescribeFastSnapshotRestoresOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFastSnapshotRestores", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.DescribeFastSnapshotRestoresInput) *Ec2DescribeFastSnapshotRestoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFastSnapshotRestores", input)
	return &Ec2DescribeFastSnapshotRestoresFuture{Future: future}
}

func (a *EC2Stub) DescribeFleetHistory(ctx workflow.Context, input *ec2.DescribeFleetHistoryInput) (*ec2.DescribeFleetHistoryOutput, error) {
	var output ec2.DescribeFleetHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFleetHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFleetHistoryAsync(ctx workflow.Context, input *ec2.DescribeFleetHistoryInput) *Ec2DescribeFleetHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFleetHistory", input)
	return &Ec2DescribeFleetHistoryFuture{Future: future}
}

func (a *EC2Stub) DescribeFleetInstances(ctx workflow.Context, input *ec2.DescribeFleetInstancesInput) (*ec2.DescribeFleetInstancesOutput, error) {
	var output ec2.DescribeFleetInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFleetInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFleetInstancesAsync(ctx workflow.Context, input *ec2.DescribeFleetInstancesInput) *Ec2DescribeFleetInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFleetInstances", input)
	return &Ec2DescribeFleetInstancesFuture{Future: future}
}

func (a *EC2Stub) DescribeFleets(ctx workflow.Context, input *ec2.DescribeFleetsInput) (*ec2.DescribeFleetsOutput, error) {
	var output ec2.DescribeFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFleetsAsync(ctx workflow.Context, input *ec2.DescribeFleetsInput) *Ec2DescribeFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFleets", input)
	return &Ec2DescribeFleetsFuture{Future: future}
}

func (a *EC2Stub) DescribeFlowLogs(ctx workflow.Context, input *ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error) {
	var output ec2.DescribeFlowLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFlowLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFlowLogsAsync(ctx workflow.Context, input *ec2.DescribeFlowLogsInput) *Ec2DescribeFlowLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFlowLogs", input)
	return &Ec2DescribeFlowLogsFuture{Future: future}
}

func (a *EC2Stub) DescribeFpgaImageAttribute(ctx workflow.Context, input *ec2.DescribeFpgaImageAttributeInput) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	var output ec2.DescribeFpgaImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFpgaImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.DescribeFpgaImageAttributeInput) *Ec2DescribeFpgaImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFpgaImageAttribute", input)
	return &Ec2DescribeFpgaImageAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeFpgaImages(ctx workflow.Context, input *ec2.DescribeFpgaImagesInput) (*ec2.DescribeFpgaImagesOutput, error) {
	var output ec2.DescribeFpgaImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFpgaImages", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeFpgaImagesAsync(ctx workflow.Context, input *ec2.DescribeFpgaImagesInput) *Ec2DescribeFpgaImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeFpgaImages", input)
	return &Ec2DescribeFpgaImagesFuture{Future: future}
}

func (a *EC2Stub) DescribeHostReservationOfferings(ctx workflow.Context, input *ec2.DescribeHostReservationOfferingsInput) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	var output ec2.DescribeHostReservationOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeHostReservationOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeHostReservationOfferingsAsync(ctx workflow.Context, input *ec2.DescribeHostReservationOfferingsInput) *Ec2DescribeHostReservationOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeHostReservationOfferings", input)
	return &Ec2DescribeHostReservationOfferingsFuture{Future: future}
}

func (a *EC2Stub) DescribeHostReservations(ctx workflow.Context, input *ec2.DescribeHostReservationsInput) (*ec2.DescribeHostReservationsOutput, error) {
	var output ec2.DescribeHostReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeHostReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeHostReservationsAsync(ctx workflow.Context, input *ec2.DescribeHostReservationsInput) *Ec2DescribeHostReservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeHostReservations", input)
	return &Ec2DescribeHostReservationsFuture{Future: future}
}

func (a *EC2Stub) DescribeHosts(ctx workflow.Context, input *ec2.DescribeHostsInput) (*ec2.DescribeHostsOutput, error) {
	var output ec2.DescribeHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeHostsAsync(ctx workflow.Context, input *ec2.DescribeHostsInput) *Ec2DescribeHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeHosts", input)
	return &Ec2DescribeHostsFuture{Future: future}
}

func (a *EC2Stub) DescribeIamInstanceProfileAssociations(ctx workflow.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	var output ec2.DescribeIamInstanceProfileAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIamInstanceProfileAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeIamInstanceProfileAssociationsAsync(ctx workflow.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput) *Ec2DescribeIamInstanceProfileAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIamInstanceProfileAssociations", input)
	return &Ec2DescribeIamInstanceProfileAssociationsFuture{Future: future}
}

func (a *EC2Stub) DescribeIdFormat(ctx workflow.Context, input *ec2.DescribeIdFormatInput) (*ec2.DescribeIdFormatOutput, error) {
	var output ec2.DescribeIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeIdFormatAsync(ctx workflow.Context, input *ec2.DescribeIdFormatInput) *Ec2DescribeIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIdFormat", input)
	return &Ec2DescribeIdFormatFuture{Future: future}
}

func (a *EC2Stub) DescribeIdentityIdFormat(ctx workflow.Context, input *ec2.DescribeIdentityIdFormatInput) (*ec2.DescribeIdentityIdFormatOutput, error) {
	var output ec2.DescribeIdentityIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIdentityIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeIdentityIdFormatAsync(ctx workflow.Context, input *ec2.DescribeIdentityIdFormatInput) *Ec2DescribeIdentityIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIdentityIdFormat", input)
	return &Ec2DescribeIdentityIdFormatFuture{Future: future}
}

func (a *EC2Stub) DescribeImageAttribute(ctx workflow.Context, input *ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error) {
	var output ec2.DescribeImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeImageAttributeAsync(ctx workflow.Context, input *ec2.DescribeImageAttributeInput) *Ec2DescribeImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImageAttribute", input)
	return &Ec2DescribeImageAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeImages(ctx workflow.Context, input *ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error) {
	var output ec2.DescribeImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImages", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeImagesAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) *Ec2DescribeImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImages", input)
	return &Ec2DescribeImagesFuture{Future: future}
}

func (a *EC2Stub) DescribeImportImageTasks(ctx workflow.Context, input *ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error) {
	var output ec2.DescribeImportImageTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImportImageTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeImportImageTasksAsync(ctx workflow.Context, input *ec2.DescribeImportImageTasksInput) *Ec2DescribeImportImageTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImportImageTasks", input)
	return &Ec2DescribeImportImageTasksFuture{Future: future}
}

func (a *EC2Stub) DescribeImportSnapshotTasks(ctx workflow.Context, input *ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	var output ec2.DescribeImportSnapshotTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImportSnapshotTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeImportSnapshotTasksAsync(ctx workflow.Context, input *ec2.DescribeImportSnapshotTasksInput) *Ec2DescribeImportSnapshotTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeImportSnapshotTasks", input)
	return &Ec2DescribeImportSnapshotTasksFuture{Future: future}
}

func (a *EC2Stub) DescribeInstanceAttribute(ctx workflow.Context, input *ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error) {
	var output ec2.DescribeInstanceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstanceAttributeAsync(ctx workflow.Context, input *ec2.DescribeInstanceAttributeInput) *Ec2DescribeInstanceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceAttribute", input)
	return &Ec2DescribeInstanceAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeInstanceCreditSpecifications(ctx workflow.Context, input *ec2.DescribeInstanceCreditSpecificationsInput) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
	var output ec2.DescribeInstanceCreditSpecificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceCreditSpecifications", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstanceCreditSpecificationsAsync(ctx workflow.Context, input *ec2.DescribeInstanceCreditSpecificationsInput) *Ec2DescribeInstanceCreditSpecificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceCreditSpecifications", input)
	return &Ec2DescribeInstanceCreditSpecificationsFuture{Future: future}
}

func (a *EC2Stub) DescribeInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.DescribeInstanceEventNotificationAttributesInput) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error) {
	var output ec2.DescribeInstanceEventNotificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceEventNotificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.DescribeInstanceEventNotificationAttributesInput) *Ec2DescribeInstanceEventNotificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceEventNotificationAttributes", input)
	return &Ec2DescribeInstanceEventNotificationAttributesFuture{Future: future}
}

func (a *EC2Stub) DescribeInstanceStatus(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error) {
	var output ec2.DescribeInstanceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstanceStatusAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) *Ec2DescribeInstanceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceStatus", input)
	return &Ec2DescribeInstanceStatusFuture{Future: future}
}

func (a *EC2Stub) DescribeInstanceTypeOfferings(ctx workflow.Context, input *ec2.DescribeInstanceTypeOfferingsInput) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
	var output ec2.DescribeInstanceTypeOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceTypeOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstanceTypeOfferingsAsync(ctx workflow.Context, input *ec2.DescribeInstanceTypeOfferingsInput) *Ec2DescribeInstanceTypeOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceTypeOfferings", input)
	return &Ec2DescribeInstanceTypeOfferingsFuture{Future: future}
}

func (a *EC2Stub) DescribeInstanceTypes(ctx workflow.Context, input *ec2.DescribeInstanceTypesInput) (*ec2.DescribeInstanceTypesOutput, error) {
	var output ec2.DescribeInstanceTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstanceTypesAsync(ctx workflow.Context, input *ec2.DescribeInstanceTypesInput) *Ec2DescribeInstanceTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstanceTypes", input)
	return &Ec2DescribeInstanceTypesFuture{Future: future}
}

func (a *EC2Stub) DescribeInstances(ctx workflow.Context, input *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error) {
	var output ec2.DescribeInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInstancesAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *Ec2DescribeInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInstances", input)
	return &Ec2DescribeInstancesFuture{Future: future}
}

func (a *EC2Stub) DescribeInternetGateways(ctx workflow.Context, input *ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error) {
	var output ec2.DescribeInternetGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInternetGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeInternetGatewaysAsync(ctx workflow.Context, input *ec2.DescribeInternetGatewaysInput) *Ec2DescribeInternetGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeInternetGateways", input)
	return &Ec2DescribeInternetGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeIpv6Pools(ctx workflow.Context, input *ec2.DescribeIpv6PoolsInput) (*ec2.DescribeIpv6PoolsOutput, error) {
	var output ec2.DescribeIpv6PoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIpv6Pools", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeIpv6PoolsAsync(ctx workflow.Context, input *ec2.DescribeIpv6PoolsInput) *Ec2DescribeIpv6PoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeIpv6Pools", input)
	return &Ec2DescribeIpv6PoolsFuture{Future: future}
}

func (a *EC2Stub) DescribeKeyPairs(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error) {
	var output ec2.DescribeKeyPairsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeKeyPairs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeKeyPairsAsync(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) *Ec2DescribeKeyPairsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeKeyPairs", input)
	return &Ec2DescribeKeyPairsFuture{Future: future}
}

func (a *EC2Stub) DescribeLaunchTemplateVersions(ctx workflow.Context, input *ec2.DescribeLaunchTemplateVersionsInput) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
	var output ec2.DescribeLaunchTemplateVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLaunchTemplateVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLaunchTemplateVersionsAsync(ctx workflow.Context, input *ec2.DescribeLaunchTemplateVersionsInput) *Ec2DescribeLaunchTemplateVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLaunchTemplateVersions", input)
	return &Ec2DescribeLaunchTemplateVersionsFuture{Future: future}
}

func (a *EC2Stub) DescribeLaunchTemplates(ctx workflow.Context, input *ec2.DescribeLaunchTemplatesInput) (*ec2.DescribeLaunchTemplatesOutput, error) {
	var output ec2.DescribeLaunchTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLaunchTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLaunchTemplatesAsync(ctx workflow.Context, input *ec2.DescribeLaunchTemplatesInput) *Ec2DescribeLaunchTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLaunchTemplates", input)
	return &Ec2DescribeLaunchTemplatesFuture{Future: future}
}

func (a *EC2Stub) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) *Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", input)
	return &Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture{Future: future}
}

func (a *EC2Stub) DescribeLocalGatewayRouteTableVpcAssociations(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayRouteTableVpcAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLocalGatewayRouteTableVpcAssociationsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) *Ec2DescribeLocalGatewayRouteTableVpcAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayRouteTableVpcAssociations", input)
	return &Ec2DescribeLocalGatewayRouteTableVpcAssociationsFuture{Future: future}
}

func (a *EC2Stub) DescribeLocalGatewayRouteTables(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTablesInput) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayRouteTables", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLocalGatewayRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTablesInput) *Ec2DescribeLocalGatewayRouteTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayRouteTables", input)
	return &Ec2DescribeLocalGatewayRouteTablesFuture{Future: future}
}

func (a *EC2Stub) DescribeLocalGatewayVirtualInterfaceGroups(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
	var output ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayVirtualInterfaceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLocalGatewayVirtualInterfaceGroupsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) *Ec2DescribeLocalGatewayVirtualInterfaceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayVirtualInterfaceGroups", input)
	return &Ec2DescribeLocalGatewayVirtualInterfaceGroupsFuture{Future: future}
}

func (a *EC2Stub) DescribeLocalGatewayVirtualInterfaces(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
	var output ec2.DescribeLocalGatewayVirtualInterfacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayVirtualInterfaces", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLocalGatewayVirtualInterfacesAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput) *Ec2DescribeLocalGatewayVirtualInterfacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGatewayVirtualInterfaces", input)
	return &Ec2DescribeLocalGatewayVirtualInterfacesFuture{Future: future}
}

func (a *EC2Stub) DescribeLocalGateways(ctx workflow.Context, input *ec2.DescribeLocalGatewaysInput) (*ec2.DescribeLocalGatewaysOutput, error) {
	var output ec2.DescribeLocalGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeLocalGatewaysAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewaysInput) *Ec2DescribeLocalGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeLocalGateways", input)
	return &Ec2DescribeLocalGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeManagedPrefixLists(ctx workflow.Context, input *ec2.DescribeManagedPrefixListsInput) (*ec2.DescribeManagedPrefixListsOutput, error) {
	var output ec2.DescribeManagedPrefixListsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeManagedPrefixLists", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeManagedPrefixListsAsync(ctx workflow.Context, input *ec2.DescribeManagedPrefixListsInput) *Ec2DescribeManagedPrefixListsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeManagedPrefixLists", input)
	return &Ec2DescribeManagedPrefixListsFuture{Future: future}
}

func (a *EC2Stub) DescribeMovingAddresses(ctx workflow.Context, input *ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error) {
	var output ec2.DescribeMovingAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeMovingAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeMovingAddressesAsync(ctx workflow.Context, input *ec2.DescribeMovingAddressesInput) *Ec2DescribeMovingAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeMovingAddresses", input)
	return &Ec2DescribeMovingAddressesFuture{Future: future}
}

func (a *EC2Stub) DescribeNatGateways(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) (*ec2.DescribeNatGatewaysOutput, error) {
	var output ec2.DescribeNatGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNatGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeNatGatewaysAsync(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) *Ec2DescribeNatGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNatGateways", input)
	return &Ec2DescribeNatGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeNetworkAcls(ctx workflow.Context, input *ec2.DescribeNetworkAclsInput) (*ec2.DescribeNetworkAclsOutput, error) {
	var output ec2.DescribeNetworkAclsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkAcls", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeNetworkAclsAsync(ctx workflow.Context, input *ec2.DescribeNetworkAclsInput) *Ec2DescribeNetworkAclsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkAcls", input)
	return &Ec2DescribeNetworkAclsFuture{Future: future}
}

func (a *EC2Stub) DescribeNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	var output ec2.DescribeNetworkInterfaceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkInterfaceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfaceAttributeInput) *Ec2DescribeNetworkInterfaceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkInterfaceAttribute", input)
	return &Ec2DescribeNetworkInterfaceAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeNetworkInterfacePermissions(ctx workflow.Context, input *ec2.DescribeNetworkInterfacePermissionsInput) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	var output ec2.DescribeNetworkInterfacePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkInterfacePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeNetworkInterfacePermissionsAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacePermissionsInput) *Ec2DescribeNetworkInterfacePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkInterfacePermissions", input)
	return &Ec2DescribeNetworkInterfacePermissionsFuture{Future: future}
}

func (a *EC2Stub) DescribeNetworkInterfaces(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error) {
	var output ec2.DescribeNetworkInterfacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkInterfaces", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeNetworkInterfacesAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) *Ec2DescribeNetworkInterfacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeNetworkInterfaces", input)
	return &Ec2DescribeNetworkInterfacesFuture{Future: future}
}

func (a *EC2Stub) DescribePlacementGroups(ctx workflow.Context, input *ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error) {
	var output ec2.DescribePlacementGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePlacementGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribePlacementGroupsAsync(ctx workflow.Context, input *ec2.DescribePlacementGroupsInput) *Ec2DescribePlacementGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePlacementGroups", input)
	return &Ec2DescribePlacementGroupsFuture{Future: future}
}

func (a *EC2Stub) DescribePrefixLists(ctx workflow.Context, input *ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error) {
	var output ec2.DescribePrefixListsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePrefixLists", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribePrefixListsAsync(ctx workflow.Context, input *ec2.DescribePrefixListsInput) *Ec2DescribePrefixListsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePrefixLists", input)
	return &Ec2DescribePrefixListsFuture{Future: future}
}

func (a *EC2Stub) DescribePrincipalIdFormat(ctx workflow.Context, input *ec2.DescribePrincipalIdFormatInput) (*ec2.DescribePrincipalIdFormatOutput, error) {
	var output ec2.DescribePrincipalIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePrincipalIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribePrincipalIdFormatAsync(ctx workflow.Context, input *ec2.DescribePrincipalIdFormatInput) *Ec2DescribePrincipalIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePrincipalIdFormat", input)
	return &Ec2DescribePrincipalIdFormatFuture{Future: future}
}

func (a *EC2Stub) DescribePublicIpv4Pools(ctx workflow.Context, input *ec2.DescribePublicIpv4PoolsInput) (*ec2.DescribePublicIpv4PoolsOutput, error) {
	var output ec2.DescribePublicIpv4PoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePublicIpv4Pools", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribePublicIpv4PoolsAsync(ctx workflow.Context, input *ec2.DescribePublicIpv4PoolsInput) *Ec2DescribePublicIpv4PoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribePublicIpv4Pools", input)
	return &Ec2DescribePublicIpv4PoolsFuture{Future: future}
}

func (a *EC2Stub) DescribeRegions(ctx workflow.Context, input *ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error) {
	var output ec2.DescribeRegionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeRegions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeRegionsAsync(ctx workflow.Context, input *ec2.DescribeRegionsInput) *Ec2DescribeRegionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeRegions", input)
	return &Ec2DescribeRegionsFuture{Future: future}
}

func (a *EC2Stub) DescribeReservedInstances(ctx workflow.Context, input *ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error) {
	var output ec2.DescribeReservedInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeReservedInstancesAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesInput) *Ec2DescribeReservedInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstances", input)
	return &Ec2DescribeReservedInstancesFuture{Future: future}
}

func (a *EC2Stub) DescribeReservedInstancesListings(ctx workflow.Context, input *ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	var output ec2.DescribeReservedInstancesListingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstancesListings", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeReservedInstancesListingsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesListingsInput) *Ec2DescribeReservedInstancesListingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstancesListings", input)
	return &Ec2DescribeReservedInstancesListingsFuture{Future: future}
}

func (a *EC2Stub) DescribeReservedInstancesModifications(ctx workflow.Context, input *ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	var output ec2.DescribeReservedInstancesModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstancesModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeReservedInstancesModificationsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesModificationsInput) *Ec2DescribeReservedInstancesModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstancesModifications", input)
	return &Ec2DescribeReservedInstancesModificationsFuture{Future: future}
}

func (a *EC2Stub) DescribeReservedInstancesOfferings(ctx workflow.Context, input *ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	var output ec2.DescribeReservedInstancesOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstancesOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeReservedInstancesOfferingsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesOfferingsInput) *Ec2DescribeReservedInstancesOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeReservedInstancesOfferings", input)
	return &Ec2DescribeReservedInstancesOfferingsFuture{Future: future}
}

func (a *EC2Stub) DescribeRouteTables(ctx workflow.Context, input *ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error) {
	var output ec2.DescribeRouteTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeRouteTables", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeRouteTablesInput) *Ec2DescribeRouteTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeRouteTables", input)
	return &Ec2DescribeRouteTablesFuture{Future: future}
}

func (a *EC2Stub) DescribeScheduledInstanceAvailability(ctx workflow.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	var output ec2.DescribeScheduledInstanceAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeScheduledInstanceAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeScheduledInstanceAvailabilityAsync(ctx workflow.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput) *Ec2DescribeScheduledInstanceAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeScheduledInstanceAvailability", input)
	return &Ec2DescribeScheduledInstanceAvailabilityFuture{Future: future}
}

func (a *EC2Stub) DescribeScheduledInstances(ctx workflow.Context, input *ec2.DescribeScheduledInstancesInput) (*ec2.DescribeScheduledInstancesOutput, error) {
	var output ec2.DescribeScheduledInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeScheduledInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeScheduledInstancesAsync(ctx workflow.Context, input *ec2.DescribeScheduledInstancesInput) *Ec2DescribeScheduledInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeScheduledInstances", input)
	return &Ec2DescribeScheduledInstancesFuture{Future: future}
}

func (a *EC2Stub) DescribeSecurityGroupReferences(ctx workflow.Context, input *ec2.DescribeSecurityGroupReferencesInput) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	var output ec2.DescribeSecurityGroupReferencesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSecurityGroupReferences", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSecurityGroupReferencesAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupReferencesInput) *Ec2DescribeSecurityGroupReferencesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSecurityGroupReferences", input)
	return &Ec2DescribeSecurityGroupReferencesFuture{Future: future}
}

func (a *EC2Stub) DescribeSecurityGroups(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error) {
	var output ec2.DescribeSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSecurityGroupsAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) *Ec2DescribeSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSecurityGroups", input)
	return &Ec2DescribeSecurityGroupsFuture{Future: future}
}

func (a *EC2Stub) DescribeSnapshotAttribute(ctx workflow.Context, input *ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error) {
	var output ec2.DescribeSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSnapshotAttributeAsync(ctx workflow.Context, input *ec2.DescribeSnapshotAttributeInput) *Ec2DescribeSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSnapshotAttribute", input)
	return &Ec2DescribeSnapshotAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeSnapshots(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error) {
	var output ec2.DescribeSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSnapshotsAsync(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) *Ec2DescribeSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSnapshots", input)
	return &Ec2DescribeSnapshotsFuture{Future: future}
}

func (a *EC2Stub) DescribeSpotDatafeedSubscription(ctx workflow.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	var output ec2.DescribeSpotDatafeedSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotDatafeedSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput) *Ec2DescribeSpotDatafeedSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotDatafeedSubscription", input)
	return &Ec2DescribeSpotDatafeedSubscriptionFuture{Future: future}
}

func (a *EC2Stub) DescribeSpotFleetInstances(ctx workflow.Context, input *ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	var output ec2.DescribeSpotFleetInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotFleetInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSpotFleetInstancesAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetInstancesInput) *Ec2DescribeSpotFleetInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotFleetInstances", input)
	return &Ec2DescribeSpotFleetInstancesFuture{Future: future}
}

func (a *EC2Stub) DescribeSpotFleetRequestHistory(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	var output ec2.DescribeSpotFleetRequestHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotFleetRequestHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSpotFleetRequestHistoryAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestHistoryInput) *Ec2DescribeSpotFleetRequestHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotFleetRequestHistory", input)
	return &Ec2DescribeSpotFleetRequestHistoryFuture{Future: future}
}

func (a *EC2Stub) DescribeSpotFleetRequests(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	var output ec2.DescribeSpotFleetRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotFleetRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSpotFleetRequestsAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestsInput) *Ec2DescribeSpotFleetRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotFleetRequests", input)
	return &Ec2DescribeSpotFleetRequestsFuture{Future: future}
}

func (a *EC2Stub) DescribeSpotInstanceRequests(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	var output ec2.DescribeSpotInstanceRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotInstanceRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSpotInstanceRequestsAsync(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) *Ec2DescribeSpotInstanceRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotInstanceRequests", input)
	return &Ec2DescribeSpotInstanceRequestsFuture{Future: future}
}

func (a *EC2Stub) DescribeSpotPriceHistory(ctx workflow.Context, input *ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	var output ec2.DescribeSpotPriceHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotPriceHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSpotPriceHistoryAsync(ctx workflow.Context, input *ec2.DescribeSpotPriceHistoryInput) *Ec2DescribeSpotPriceHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSpotPriceHistory", input)
	return &Ec2DescribeSpotPriceHistoryFuture{Future: future}
}

func (a *EC2Stub) DescribeStaleSecurityGroups(ctx workflow.Context, input *ec2.DescribeStaleSecurityGroupsInput) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	var output ec2.DescribeStaleSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeStaleSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeStaleSecurityGroupsAsync(ctx workflow.Context, input *ec2.DescribeStaleSecurityGroupsInput) *Ec2DescribeStaleSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeStaleSecurityGroups", input)
	return &Ec2DescribeStaleSecurityGroupsFuture{Future: future}
}

func (a *EC2Stub) DescribeSubnets(ctx workflow.Context, input *ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error) {
	var output ec2.DescribeSubnetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSubnets", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeSubnetsAsync(ctx workflow.Context, input *ec2.DescribeSubnetsInput) *Ec2DescribeSubnetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeSubnets", input)
	return &Ec2DescribeSubnetsFuture{Future: future}
}

func (a *EC2Stub) DescribeTags(ctx workflow.Context, input *ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error) {
	var output ec2.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTagsAsync(ctx workflow.Context, input *ec2.DescribeTagsInput) *Ec2DescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTags", input)
	return &Ec2DescribeTagsFuture{Future: future}
}

func (a *EC2Stub) DescribeTrafficMirrorFilters(ctx workflow.Context, input *ec2.DescribeTrafficMirrorFiltersInput) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
	var output ec2.DescribeTrafficMirrorFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTrafficMirrorFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTrafficMirrorFiltersAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorFiltersInput) *Ec2DescribeTrafficMirrorFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTrafficMirrorFilters", input)
	return &Ec2DescribeTrafficMirrorFiltersFuture{Future: future}
}

func (a *EC2Stub) DescribeTrafficMirrorSessions(ctx workflow.Context, input *ec2.DescribeTrafficMirrorSessionsInput) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
	var output ec2.DescribeTrafficMirrorSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTrafficMirrorSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTrafficMirrorSessionsAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorSessionsInput) *Ec2DescribeTrafficMirrorSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTrafficMirrorSessions", input)
	return &Ec2DescribeTrafficMirrorSessionsFuture{Future: future}
}

func (a *EC2Stub) DescribeTrafficMirrorTargets(ctx workflow.Context, input *ec2.DescribeTrafficMirrorTargetsInput) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
	var output ec2.DescribeTrafficMirrorTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTrafficMirrorTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTrafficMirrorTargetsAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorTargetsInput) *Ec2DescribeTrafficMirrorTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTrafficMirrorTargets", input)
	return &Ec2DescribeTrafficMirrorTargetsFuture{Future: future}
}

func (a *EC2Stub) DescribeTransitGatewayAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTransitGatewayAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayAttachmentsInput) *Ec2DescribeTransitGatewayAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayAttachments", input)
	return &Ec2DescribeTransitGatewayAttachmentsFuture{Future: future}
}

func (a *EC2Stub) DescribeTransitGatewayMulticastDomains(ctx workflow.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
	var output ec2.DescribeTransitGatewayMulticastDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayMulticastDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTransitGatewayMulticastDomainsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput) *Ec2DescribeTransitGatewayMulticastDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayMulticastDomains", input)
	return &Ec2DescribeTransitGatewayMulticastDomainsFuture{Future: future}
}

func (a *EC2Stub) DescribeTransitGatewayPeeringAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayPeeringAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayPeeringAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTransitGatewayPeeringAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput) *Ec2DescribeTransitGatewayPeeringAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayPeeringAttachments", input)
	return &Ec2DescribeTransitGatewayPeeringAttachmentsFuture{Future: future}
}

func (a *EC2Stub) DescribeTransitGatewayRouteTables(ctx workflow.Context, input *ec2.DescribeTransitGatewayRouteTablesInput) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
	var output ec2.DescribeTransitGatewayRouteTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayRouteTables", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTransitGatewayRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayRouteTablesInput) *Ec2DescribeTransitGatewayRouteTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayRouteTables", input)
	return &Ec2DescribeTransitGatewayRouteTablesFuture{Future: future}
}

func (a *EC2Stub) DescribeTransitGatewayVpcAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayVpcAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayVpcAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTransitGatewayVpcAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput) *Ec2DescribeTransitGatewayVpcAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGatewayVpcAttachments", input)
	return &Ec2DescribeTransitGatewayVpcAttachmentsFuture{Future: future}
}

func (a *EC2Stub) DescribeTransitGateways(ctx workflow.Context, input *ec2.DescribeTransitGatewaysInput) (*ec2.DescribeTransitGatewaysOutput, error) {
	var output ec2.DescribeTransitGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeTransitGatewaysAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewaysInput) *Ec2DescribeTransitGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeTransitGateways", input)
	return &Ec2DescribeTransitGatewaysFuture{Future: future}
}

func (a *EC2Stub) DescribeVolumeAttribute(ctx workflow.Context, input *ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error) {
	var output ec2.DescribeVolumeAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumeAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVolumeAttributeAsync(ctx workflow.Context, input *ec2.DescribeVolumeAttributeInput) *Ec2DescribeVolumeAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumeAttribute", input)
	return &Ec2DescribeVolumeAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeVolumeStatus(ctx workflow.Context, input *ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error) {
	var output ec2.DescribeVolumeStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumeStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVolumeStatusAsync(ctx workflow.Context, input *ec2.DescribeVolumeStatusInput) *Ec2DescribeVolumeStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumeStatus", input)
	return &Ec2DescribeVolumeStatusFuture{Future: future}
}

func (a *EC2Stub) DescribeVolumes(ctx workflow.Context, input *ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error) {
	var output ec2.DescribeVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVolumesAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *Ec2DescribeVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumes", input)
	return &Ec2DescribeVolumesFuture{Future: future}
}

func (a *EC2Stub) DescribeVolumesModifications(ctx workflow.Context, input *ec2.DescribeVolumesModificationsInput) (*ec2.DescribeVolumesModificationsOutput, error) {
	var output ec2.DescribeVolumesModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumesModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVolumesModificationsAsync(ctx workflow.Context, input *ec2.DescribeVolumesModificationsInput) *Ec2DescribeVolumesModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVolumesModifications", input)
	return &Ec2DescribeVolumesModificationsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcAttribute(ctx workflow.Context, input *ec2.DescribeVpcAttributeInput) (*ec2.DescribeVpcAttributeOutput, error) {
	var output ec2.DescribeVpcAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcAttributeAsync(ctx workflow.Context, input *ec2.DescribeVpcAttributeInput) *Ec2DescribeVpcAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcAttribute", input)
	return &Ec2DescribeVpcAttributeFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcClassicLink(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkInput) (*ec2.DescribeVpcClassicLinkOutput, error) {
	var output ec2.DescribeVpcClassicLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcClassicLink", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcClassicLinkAsync(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkInput) *Ec2DescribeVpcClassicLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcClassicLink", input)
	return &Ec2DescribeVpcClassicLinkFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.DescribeVpcClassicLinkDnsSupportOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcClassicLinkDnsSupport", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput) *Ec2DescribeVpcClassicLinkDnsSupportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcClassicLinkDnsSupport", input)
	return &Ec2DescribeVpcClassicLinkDnsSupportFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcEndpointConnectionNotifications(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
	var output ec2.DescribeVpcEndpointConnectionNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointConnectionNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcEndpointConnectionNotificationsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput) *Ec2DescribeVpcEndpointConnectionNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointConnectionNotifications", input)
	return &Ec2DescribeVpcEndpointConnectionNotificationsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcEndpointConnections(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionsInput) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
	var output ec2.DescribeVpcEndpointConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionsInput) *Ec2DescribeVpcEndpointConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointConnections", input)
	return &Ec2DescribeVpcEndpointConnectionsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcEndpointServiceConfigurations(ctx workflow.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	var output ec2.DescribeVpcEndpointServiceConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointServiceConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcEndpointServiceConfigurationsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput) *Ec2DescribeVpcEndpointServiceConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointServiceConfigurations", input)
	return &Ec2DescribeVpcEndpointServiceConfigurationsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcEndpointServicePermissions(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	var output ec2.DescribeVpcEndpointServicePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointServicePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcEndpointServicePermissionsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput) *Ec2DescribeVpcEndpointServicePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointServicePermissions", input)
	return &Ec2DescribeVpcEndpointServicePermissionsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcEndpointServices(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicesInput) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	var output ec2.DescribeVpcEndpointServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointServices", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcEndpointServicesAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicesInput) *Ec2DescribeVpcEndpointServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpointServices", input)
	return &Ec2DescribeVpcEndpointServicesFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcEndpoints(ctx workflow.Context, input *ec2.DescribeVpcEndpointsInput) (*ec2.DescribeVpcEndpointsOutput, error) {
	var output ec2.DescribeVpcEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcEndpointsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointsInput) *Ec2DescribeVpcEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcEndpoints", input)
	return &Ec2DescribeVpcEndpointsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcPeeringConnections(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	var output ec2.DescribeVpcPeeringConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcPeeringConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcPeeringConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) *Ec2DescribeVpcPeeringConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcPeeringConnections", input)
	return &Ec2DescribeVpcPeeringConnectionsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpcs(ctx workflow.Context, input *ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error) {
	var output ec2.DescribeVpcsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpcsAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) *Ec2DescribeVpcsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpcs", input)
	return &Ec2DescribeVpcsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpnConnections(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) (*ec2.DescribeVpnConnectionsOutput, error) {
	var output ec2.DescribeVpnConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpnConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpnConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) *Ec2DescribeVpnConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpnConnections", input)
	return &Ec2DescribeVpnConnectionsFuture{Future: future}
}

func (a *EC2Stub) DescribeVpnGateways(ctx workflow.Context, input *ec2.DescribeVpnGatewaysInput) (*ec2.DescribeVpnGatewaysOutput, error) {
	var output ec2.DescribeVpnGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpnGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DescribeVpnGatewaysAsync(ctx workflow.Context, input *ec2.DescribeVpnGatewaysInput) *Ec2DescribeVpnGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DescribeVpnGateways", input)
	return &Ec2DescribeVpnGatewaysFuture{Future: future}
}

func (a *EC2Stub) DetachClassicLinkVpc(ctx workflow.Context, input *ec2.DetachClassicLinkVpcInput) (*ec2.DetachClassicLinkVpcOutput, error) {
	var output ec2.DetachClassicLinkVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DetachClassicLinkVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DetachClassicLinkVpcAsync(ctx workflow.Context, input *ec2.DetachClassicLinkVpcInput) *Ec2DetachClassicLinkVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DetachClassicLinkVpc", input)
	return &Ec2DetachClassicLinkVpcFuture{Future: future}
}

func (a *EC2Stub) DetachInternetGateway(ctx workflow.Context, input *ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error) {
	var output ec2.DetachInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DetachInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DetachInternetGatewayAsync(ctx workflow.Context, input *ec2.DetachInternetGatewayInput) *Ec2DetachInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DetachInternetGateway", input)
	return &Ec2DetachInternetGatewayFuture{Future: future}
}

func (a *EC2Stub) DetachNetworkInterface(ctx workflow.Context, input *ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error) {
	var output ec2.DetachNetworkInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DetachNetworkInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DetachNetworkInterfaceAsync(ctx workflow.Context, input *ec2.DetachNetworkInterfaceInput) *Ec2DetachNetworkInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DetachNetworkInterface", input)
	return &Ec2DetachNetworkInterfaceFuture{Future: future}
}

func (a *EC2Stub) DetachVolume(ctx workflow.Context, input *ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error) {
	var output ec2.VolumeAttachment
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DetachVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DetachVolumeAsync(ctx workflow.Context, input *ec2.DetachVolumeInput) *Ec2DetachVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DetachVolume", input)
	return &Ec2DetachVolumeFuture{Future: future}
}

func (a *EC2Stub) DetachVpnGateway(ctx workflow.Context, input *ec2.DetachVpnGatewayInput) (*ec2.DetachVpnGatewayOutput, error) {
	var output ec2.DetachVpnGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DetachVpnGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DetachVpnGatewayAsync(ctx workflow.Context, input *ec2.DetachVpnGatewayInput) *Ec2DetachVpnGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DetachVpnGateway", input)
	return &Ec2DetachVpnGatewayFuture{Future: future}
}

func (a *EC2Stub) DisableEbsEncryptionByDefault(ctx workflow.Context, input *ec2.DisableEbsEncryptionByDefaultInput) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
	var output ec2.DisableEbsEncryptionByDefaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisableEbsEncryptionByDefault", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisableEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.DisableEbsEncryptionByDefaultInput) *Ec2DisableEbsEncryptionByDefaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisableEbsEncryptionByDefault", input)
	return &Ec2DisableEbsEncryptionByDefaultFuture{Future: future}
}

func (a *EC2Stub) DisableFastSnapshotRestores(ctx workflow.Context, input *ec2.DisableFastSnapshotRestoresInput) (*ec2.DisableFastSnapshotRestoresOutput, error) {
	var output ec2.DisableFastSnapshotRestoresOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisableFastSnapshotRestores", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisableFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.DisableFastSnapshotRestoresInput) *Ec2DisableFastSnapshotRestoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisableFastSnapshotRestores", input)
	return &Ec2DisableFastSnapshotRestoresFuture{Future: future}
}

func (a *EC2Stub) DisableTransitGatewayRouteTablePropagation(ctx workflow.Context, input *ec2.DisableTransitGatewayRouteTablePropagationInput) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
	var output ec2.DisableTransitGatewayRouteTablePropagationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisableTransitGatewayRouteTablePropagation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisableTransitGatewayRouteTablePropagationAsync(ctx workflow.Context, input *ec2.DisableTransitGatewayRouteTablePropagationInput) *Ec2DisableTransitGatewayRouteTablePropagationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisableTransitGatewayRouteTablePropagation", input)
	return &Ec2DisableTransitGatewayRouteTablePropagationFuture{Future: future}
}

func (a *EC2Stub) DisableVgwRoutePropagation(ctx workflow.Context, input *ec2.DisableVgwRoutePropagationInput) (*ec2.DisableVgwRoutePropagationOutput, error) {
	var output ec2.DisableVgwRoutePropagationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisableVgwRoutePropagation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisableVgwRoutePropagationAsync(ctx workflow.Context, input *ec2.DisableVgwRoutePropagationInput) *Ec2DisableVgwRoutePropagationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisableVgwRoutePropagation", input)
	return &Ec2DisableVgwRoutePropagationFuture{Future: future}
}

func (a *EC2Stub) DisableVpcClassicLink(ctx workflow.Context, input *ec2.DisableVpcClassicLinkInput) (*ec2.DisableVpcClassicLinkOutput, error) {
	var output ec2.DisableVpcClassicLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisableVpcClassicLink", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisableVpcClassicLinkAsync(ctx workflow.Context, input *ec2.DisableVpcClassicLinkInput) *Ec2DisableVpcClassicLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisableVpcClassicLink", input)
	return &Ec2DisableVpcClassicLinkFuture{Future: future}
}

func (a *EC2Stub) DisableVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.DisableVpcClassicLinkDnsSupportOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisableVpcClassicLinkDnsSupport", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisableVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput) *Ec2DisableVpcClassicLinkDnsSupportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisableVpcClassicLinkDnsSupport", input)
	return &Ec2DisableVpcClassicLinkDnsSupportFuture{Future: future}
}

func (a *EC2Stub) DisassociateAddress(ctx workflow.Context, input *ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error) {
	var output ec2.DisassociateAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateAddressAsync(ctx workflow.Context, input *ec2.DisassociateAddressInput) *Ec2DisassociateAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateAddress", input)
	return &Ec2DisassociateAddressFuture{Future: future}
}

func (a *EC2Stub) DisassociateClientVpnTargetNetwork(ctx workflow.Context, input *ec2.DisassociateClientVpnTargetNetworkInput) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
	var output ec2.DisassociateClientVpnTargetNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateClientVpnTargetNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.DisassociateClientVpnTargetNetworkInput) *Ec2DisassociateClientVpnTargetNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateClientVpnTargetNetwork", input)
	return &Ec2DisassociateClientVpnTargetNetworkFuture{Future: future}
}

func (a *EC2Stub) DisassociateIamInstanceProfile(ctx workflow.Context, input *ec2.DisassociateIamInstanceProfileInput) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	var output ec2.DisassociateIamInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateIamInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateIamInstanceProfileAsync(ctx workflow.Context, input *ec2.DisassociateIamInstanceProfileInput) *Ec2DisassociateIamInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateIamInstanceProfile", input)
	return &Ec2DisassociateIamInstanceProfileFuture{Future: future}
}

func (a *EC2Stub) DisassociateRouteTable(ctx workflow.Context, input *ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error) {
	var output ec2.DisassociateRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateRouteTableAsync(ctx workflow.Context, input *ec2.DisassociateRouteTableInput) *Ec2DisassociateRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateRouteTable", input)
	return &Ec2DisassociateRouteTableFuture{Future: future}
}

func (a *EC2Stub) DisassociateSubnetCidrBlock(ctx workflow.Context, input *ec2.DisassociateSubnetCidrBlockInput) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	var output ec2.DisassociateSubnetCidrBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateSubnetCidrBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateSubnetCidrBlockAsync(ctx workflow.Context, input *ec2.DisassociateSubnetCidrBlockInput) *Ec2DisassociateSubnetCidrBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateSubnetCidrBlock", input)
	return &Ec2DisassociateSubnetCidrBlockFuture{Future: future}
}

func (a *EC2Stub) DisassociateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.DisassociateTransitGatewayMulticastDomainInput) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.DisassociateTransitGatewayMulticastDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateTransitGatewayMulticastDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.DisassociateTransitGatewayMulticastDomainInput) *Ec2DisassociateTransitGatewayMulticastDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateTransitGatewayMulticastDomain", input)
	return &Ec2DisassociateTransitGatewayMulticastDomainFuture{Future: future}
}

func (a *EC2Stub) DisassociateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.DisassociateTransitGatewayRouteTableInput) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
	var output ec2.DisassociateTransitGatewayRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateTransitGatewayRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.DisassociateTransitGatewayRouteTableInput) *Ec2DisassociateTransitGatewayRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateTransitGatewayRouteTable", input)
	return &Ec2DisassociateTransitGatewayRouteTableFuture{Future: future}
}

func (a *EC2Stub) DisassociateVpcCidrBlock(ctx workflow.Context, input *ec2.DisassociateVpcCidrBlockInput) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	var output ec2.DisassociateVpcCidrBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateVpcCidrBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) DisassociateVpcCidrBlockAsync(ctx workflow.Context, input *ec2.DisassociateVpcCidrBlockInput) *Ec2DisassociateVpcCidrBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.DisassociateVpcCidrBlock", input)
	return &Ec2DisassociateVpcCidrBlockFuture{Future: future}
}

func (a *EC2Stub) EnableEbsEncryptionByDefault(ctx workflow.Context, input *ec2.EnableEbsEncryptionByDefaultInput) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
	var output ec2.EnableEbsEncryptionByDefaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableEbsEncryptionByDefault", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.EnableEbsEncryptionByDefaultInput) *Ec2EnableEbsEncryptionByDefaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableEbsEncryptionByDefault", input)
	return &Ec2EnableEbsEncryptionByDefaultFuture{Future: future}
}

func (a *EC2Stub) EnableFastSnapshotRestores(ctx workflow.Context, input *ec2.EnableFastSnapshotRestoresInput) (*ec2.EnableFastSnapshotRestoresOutput, error) {
	var output ec2.EnableFastSnapshotRestoresOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableFastSnapshotRestores", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.EnableFastSnapshotRestoresInput) *Ec2EnableFastSnapshotRestoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableFastSnapshotRestores", input)
	return &Ec2EnableFastSnapshotRestoresFuture{Future: future}
}

func (a *EC2Stub) EnableTransitGatewayRouteTablePropagation(ctx workflow.Context, input *ec2.EnableTransitGatewayRouteTablePropagationInput) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
	var output ec2.EnableTransitGatewayRouteTablePropagationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableTransitGatewayRouteTablePropagation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableTransitGatewayRouteTablePropagationAsync(ctx workflow.Context, input *ec2.EnableTransitGatewayRouteTablePropagationInput) *Ec2EnableTransitGatewayRouteTablePropagationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableTransitGatewayRouteTablePropagation", input)
	return &Ec2EnableTransitGatewayRouteTablePropagationFuture{Future: future}
}

func (a *EC2Stub) EnableVgwRoutePropagation(ctx workflow.Context, input *ec2.EnableVgwRoutePropagationInput) (*ec2.EnableVgwRoutePropagationOutput, error) {
	var output ec2.EnableVgwRoutePropagationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVgwRoutePropagation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableVgwRoutePropagationAsync(ctx workflow.Context, input *ec2.EnableVgwRoutePropagationInput) *Ec2EnableVgwRoutePropagationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVgwRoutePropagation", input)
	return &Ec2EnableVgwRoutePropagationFuture{Future: future}
}

func (a *EC2Stub) EnableVolumeIO(ctx workflow.Context, input *ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error) {
	var output ec2.EnableVolumeIOOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVolumeIO", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableVolumeIOAsync(ctx workflow.Context, input *ec2.EnableVolumeIOInput) *Ec2EnableVolumeIOFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVolumeIO", input)
	return &Ec2EnableVolumeIOFuture{Future: future}
}

func (a *EC2Stub) EnableVpcClassicLink(ctx workflow.Context, input *ec2.EnableVpcClassicLinkInput) (*ec2.EnableVpcClassicLinkOutput, error) {
	var output ec2.EnableVpcClassicLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVpcClassicLink", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableVpcClassicLinkAsync(ctx workflow.Context, input *ec2.EnableVpcClassicLinkInput) *Ec2EnableVpcClassicLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVpcClassicLink", input)
	return &Ec2EnableVpcClassicLinkFuture{Future: future}
}

func (a *EC2Stub) EnableVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.EnableVpcClassicLinkDnsSupportOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVpcClassicLinkDnsSupport", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) EnableVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput) *Ec2EnableVpcClassicLinkDnsSupportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.EnableVpcClassicLinkDnsSupport", input)
	return &Ec2EnableVpcClassicLinkDnsSupportFuture{Future: future}
}

func (a *EC2Stub) ExportClientVpnClientCertificateRevocationList(ctx workflow.Context, input *ec2.ExportClientVpnClientCertificateRevocationListInput) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
	var output ec2.ExportClientVpnClientCertificateRevocationListOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ExportClientVpnClientCertificateRevocationList", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ExportClientVpnClientCertificateRevocationListAsync(ctx workflow.Context, input *ec2.ExportClientVpnClientCertificateRevocationListInput) *Ec2ExportClientVpnClientCertificateRevocationListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ExportClientVpnClientCertificateRevocationList", input)
	return &Ec2ExportClientVpnClientCertificateRevocationListFuture{Future: future}
}

func (a *EC2Stub) ExportClientVpnClientConfiguration(ctx workflow.Context, input *ec2.ExportClientVpnClientConfigurationInput) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
	var output ec2.ExportClientVpnClientConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ExportClientVpnClientConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ExportClientVpnClientConfigurationAsync(ctx workflow.Context, input *ec2.ExportClientVpnClientConfigurationInput) *Ec2ExportClientVpnClientConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ExportClientVpnClientConfiguration", input)
	return &Ec2ExportClientVpnClientConfigurationFuture{Future: future}
}

func (a *EC2Stub) ExportImage(ctx workflow.Context, input *ec2.ExportImageInput) (*ec2.ExportImageOutput, error) {
	var output ec2.ExportImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ExportImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ExportImageAsync(ctx workflow.Context, input *ec2.ExportImageInput) *Ec2ExportImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ExportImage", input)
	return &Ec2ExportImageFuture{Future: future}
}

func (a *EC2Stub) ExportTransitGatewayRoutes(ctx workflow.Context, input *ec2.ExportTransitGatewayRoutesInput) (*ec2.ExportTransitGatewayRoutesOutput, error) {
	var output ec2.ExportTransitGatewayRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ExportTransitGatewayRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ExportTransitGatewayRoutesAsync(ctx workflow.Context, input *ec2.ExportTransitGatewayRoutesInput) *Ec2ExportTransitGatewayRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ExportTransitGatewayRoutes", input)
	return &Ec2ExportTransitGatewayRoutesFuture{Future: future}
}

func (a *EC2Stub) GetAssociatedIpv6PoolCidrs(ctx workflow.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
	var output ec2.GetAssociatedIpv6PoolCidrsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetAssociatedIpv6PoolCidrs", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetAssociatedIpv6PoolCidrsAsync(ctx workflow.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput) *Ec2GetAssociatedIpv6PoolCidrsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetAssociatedIpv6PoolCidrs", input)
	return &Ec2GetAssociatedIpv6PoolCidrsFuture{Future: future}
}

func (a *EC2Stub) GetCapacityReservationUsage(ctx workflow.Context, input *ec2.GetCapacityReservationUsageInput) (*ec2.GetCapacityReservationUsageOutput, error) {
	var output ec2.GetCapacityReservationUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetCapacityReservationUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetCapacityReservationUsageAsync(ctx workflow.Context, input *ec2.GetCapacityReservationUsageInput) *Ec2GetCapacityReservationUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetCapacityReservationUsage", input)
	return &Ec2GetCapacityReservationUsageFuture{Future: future}
}

func (a *EC2Stub) GetCoipPoolUsage(ctx workflow.Context, input *ec2.GetCoipPoolUsageInput) (*ec2.GetCoipPoolUsageOutput, error) {
	var output ec2.GetCoipPoolUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetCoipPoolUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetCoipPoolUsageAsync(ctx workflow.Context, input *ec2.GetCoipPoolUsageInput) *Ec2GetCoipPoolUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetCoipPoolUsage", input)
	return &Ec2GetCoipPoolUsageFuture{Future: future}
}

func (a *EC2Stub) GetConsoleOutput(ctx workflow.Context, input *ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error) {
	var output ec2.GetConsoleOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetConsoleOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetConsoleOutputAsync(ctx workflow.Context, input *ec2.GetConsoleOutputInput) *Ec2GetConsoleOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetConsoleOutput", input)
	return &Ec2GetConsoleOutputFuture{Future: future}
}

func (a *EC2Stub) GetConsoleScreenshot(ctx workflow.Context, input *ec2.GetConsoleScreenshotInput) (*ec2.GetConsoleScreenshotOutput, error) {
	var output ec2.GetConsoleScreenshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetConsoleScreenshot", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetConsoleScreenshotAsync(ctx workflow.Context, input *ec2.GetConsoleScreenshotInput) *Ec2GetConsoleScreenshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetConsoleScreenshot", input)
	return &Ec2GetConsoleScreenshotFuture{Future: future}
}

func (a *EC2Stub) GetDefaultCreditSpecification(ctx workflow.Context, input *ec2.GetDefaultCreditSpecificationInput) (*ec2.GetDefaultCreditSpecificationOutput, error) {
	var output ec2.GetDefaultCreditSpecificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetDefaultCreditSpecification", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetDefaultCreditSpecificationAsync(ctx workflow.Context, input *ec2.GetDefaultCreditSpecificationInput) *Ec2GetDefaultCreditSpecificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetDefaultCreditSpecification", input)
	return &Ec2GetDefaultCreditSpecificationFuture{Future: future}
}

func (a *EC2Stub) GetEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.GetEbsDefaultKmsKeyIdInput) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.GetEbsDefaultKmsKeyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetEbsDefaultKmsKeyId", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.GetEbsDefaultKmsKeyIdInput) *Ec2GetEbsDefaultKmsKeyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetEbsDefaultKmsKeyId", input)
	return &Ec2GetEbsDefaultKmsKeyIdFuture{Future: future}
}

func (a *EC2Stub) GetEbsEncryptionByDefault(ctx workflow.Context, input *ec2.GetEbsEncryptionByDefaultInput) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
	var output ec2.GetEbsEncryptionByDefaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetEbsEncryptionByDefault", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.GetEbsEncryptionByDefaultInput) *Ec2GetEbsEncryptionByDefaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetEbsEncryptionByDefault", input)
	return &Ec2GetEbsEncryptionByDefaultFuture{Future: future}
}

func (a *EC2Stub) GetGroupsForCapacityReservation(ctx workflow.Context, input *ec2.GetGroupsForCapacityReservationInput) (*ec2.GetGroupsForCapacityReservationOutput, error) {
	var output ec2.GetGroupsForCapacityReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetGroupsForCapacityReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetGroupsForCapacityReservationAsync(ctx workflow.Context, input *ec2.GetGroupsForCapacityReservationInput) *Ec2GetGroupsForCapacityReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetGroupsForCapacityReservation", input)
	return &Ec2GetGroupsForCapacityReservationFuture{Future: future}
}

func (a *EC2Stub) GetHostReservationPurchasePreview(ctx workflow.Context, input *ec2.GetHostReservationPurchasePreviewInput) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	var output ec2.GetHostReservationPurchasePreviewOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetHostReservationPurchasePreview", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetHostReservationPurchasePreviewAsync(ctx workflow.Context, input *ec2.GetHostReservationPurchasePreviewInput) *Ec2GetHostReservationPurchasePreviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetHostReservationPurchasePreview", input)
	return &Ec2GetHostReservationPurchasePreviewFuture{Future: future}
}

func (a *EC2Stub) GetLaunchTemplateData(ctx workflow.Context, input *ec2.GetLaunchTemplateDataInput) (*ec2.GetLaunchTemplateDataOutput, error) {
	var output ec2.GetLaunchTemplateDataOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetLaunchTemplateData", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetLaunchTemplateDataAsync(ctx workflow.Context, input *ec2.GetLaunchTemplateDataInput) *Ec2GetLaunchTemplateDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetLaunchTemplateData", input)
	return &Ec2GetLaunchTemplateDataFuture{Future: future}
}

func (a *EC2Stub) GetManagedPrefixListAssociations(ctx workflow.Context, input *ec2.GetManagedPrefixListAssociationsInput) (*ec2.GetManagedPrefixListAssociationsOutput, error) {
	var output ec2.GetManagedPrefixListAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetManagedPrefixListAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetManagedPrefixListAssociationsAsync(ctx workflow.Context, input *ec2.GetManagedPrefixListAssociationsInput) *Ec2GetManagedPrefixListAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetManagedPrefixListAssociations", input)
	return &Ec2GetManagedPrefixListAssociationsFuture{Future: future}
}

func (a *EC2Stub) GetManagedPrefixListEntries(ctx workflow.Context, input *ec2.GetManagedPrefixListEntriesInput) (*ec2.GetManagedPrefixListEntriesOutput, error) {
	var output ec2.GetManagedPrefixListEntriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetManagedPrefixListEntries", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetManagedPrefixListEntriesAsync(ctx workflow.Context, input *ec2.GetManagedPrefixListEntriesInput) *Ec2GetManagedPrefixListEntriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetManagedPrefixListEntries", input)
	return &Ec2GetManagedPrefixListEntriesFuture{Future: future}
}

func (a *EC2Stub) GetPasswordData(ctx workflow.Context, input *ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error) {
	var output ec2.GetPasswordDataOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetPasswordData", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetPasswordDataAsync(ctx workflow.Context, input *ec2.GetPasswordDataInput) *Ec2GetPasswordDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetPasswordData", input)
	return &Ec2GetPasswordDataFuture{Future: future}
}

func (a *EC2Stub) GetReservedInstancesExchangeQuote(ctx workflow.Context, input *ec2.GetReservedInstancesExchangeQuoteInput) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	var output ec2.GetReservedInstancesExchangeQuoteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetReservedInstancesExchangeQuote", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetReservedInstancesExchangeQuoteAsync(ctx workflow.Context, input *ec2.GetReservedInstancesExchangeQuoteInput) *Ec2GetReservedInstancesExchangeQuoteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetReservedInstancesExchangeQuote", input)
	return &Ec2GetReservedInstancesExchangeQuoteFuture{Future: future}
}

func (a *EC2Stub) GetTransitGatewayAttachmentPropagations(ctx workflow.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
	var output ec2.GetTransitGatewayAttachmentPropagationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayAttachmentPropagations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetTransitGatewayAttachmentPropagationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput) *Ec2GetTransitGatewayAttachmentPropagationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayAttachmentPropagations", input)
	return &Ec2GetTransitGatewayAttachmentPropagationsFuture{Future: future}
}

func (a *EC2Stub) GetTransitGatewayMulticastDomainAssociations(ctx workflow.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
	var output ec2.GetTransitGatewayMulticastDomainAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayMulticastDomainAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetTransitGatewayMulticastDomainAssociationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput) *Ec2GetTransitGatewayMulticastDomainAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayMulticastDomainAssociations", input)
	return &Ec2GetTransitGatewayMulticastDomainAssociationsFuture{Future: future}
}

func (a *EC2Stub) GetTransitGatewayPrefixListReferences(ctx workflow.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error) {
	var output ec2.GetTransitGatewayPrefixListReferencesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayPrefixListReferences", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetTransitGatewayPrefixListReferencesAsync(ctx workflow.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput) *Ec2GetTransitGatewayPrefixListReferencesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayPrefixListReferences", input)
	return &Ec2GetTransitGatewayPrefixListReferencesFuture{Future: future}
}

func (a *EC2Stub) GetTransitGatewayRouteTableAssociations(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
	var output ec2.GetTransitGatewayRouteTableAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayRouteTableAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetTransitGatewayRouteTableAssociationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput) *Ec2GetTransitGatewayRouteTableAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayRouteTableAssociations", input)
	return &Ec2GetTransitGatewayRouteTableAssociationsFuture{Future: future}
}

func (a *EC2Stub) GetTransitGatewayRouteTablePropagations(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
	var output ec2.GetTransitGatewayRouteTablePropagationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayRouteTablePropagations", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) GetTransitGatewayRouteTablePropagationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput) *Ec2GetTransitGatewayRouteTablePropagationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.GetTransitGatewayRouteTablePropagations", input)
	return &Ec2GetTransitGatewayRouteTablePropagationsFuture{Future: future}
}

func (a *EC2Stub) ImportClientVpnClientCertificateRevocationList(ctx workflow.Context, input *ec2.ImportClientVpnClientCertificateRevocationListInput) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
	var output ec2.ImportClientVpnClientCertificateRevocationListOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ImportClientVpnClientCertificateRevocationList", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ImportClientVpnClientCertificateRevocationListAsync(ctx workflow.Context, input *ec2.ImportClientVpnClientCertificateRevocationListInput) *Ec2ImportClientVpnClientCertificateRevocationListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ImportClientVpnClientCertificateRevocationList", input)
	return &Ec2ImportClientVpnClientCertificateRevocationListFuture{Future: future}
}

func (a *EC2Stub) ImportImage(ctx workflow.Context, input *ec2.ImportImageInput) (*ec2.ImportImageOutput, error) {
	var output ec2.ImportImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ImportImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ImportImageAsync(ctx workflow.Context, input *ec2.ImportImageInput) *Ec2ImportImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ImportImage", input)
	return &Ec2ImportImageFuture{Future: future}
}

func (a *EC2Stub) ImportInstance(ctx workflow.Context, input *ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error) {
	var output ec2.ImportInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ImportInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ImportInstanceAsync(ctx workflow.Context, input *ec2.ImportInstanceInput) *Ec2ImportInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ImportInstance", input)
	return &Ec2ImportInstanceFuture{Future: future}
}

func (a *EC2Stub) ImportKeyPair(ctx workflow.Context, input *ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error) {
	var output ec2.ImportKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ImportKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ImportKeyPairAsync(ctx workflow.Context, input *ec2.ImportKeyPairInput) *Ec2ImportKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ImportKeyPair", input)
	return &Ec2ImportKeyPairFuture{Future: future}
}

func (a *EC2Stub) ImportSnapshot(ctx workflow.Context, input *ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error) {
	var output ec2.ImportSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ImportSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ImportSnapshotAsync(ctx workflow.Context, input *ec2.ImportSnapshotInput) *Ec2ImportSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ImportSnapshot", input)
	return &Ec2ImportSnapshotFuture{Future: future}
}

func (a *EC2Stub) ImportVolume(ctx workflow.Context, input *ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error) {
	var output ec2.ImportVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ImportVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ImportVolumeAsync(ctx workflow.Context, input *ec2.ImportVolumeInput) *Ec2ImportVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ImportVolume", input)
	return &Ec2ImportVolumeFuture{Future: future}
}

func (a *EC2Stub) ModifyAvailabilityZoneGroup(ctx workflow.Context, input *ec2.ModifyAvailabilityZoneGroupInput) (*ec2.ModifyAvailabilityZoneGroupOutput, error) {
	var output ec2.ModifyAvailabilityZoneGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyAvailabilityZoneGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyAvailabilityZoneGroupAsync(ctx workflow.Context, input *ec2.ModifyAvailabilityZoneGroupInput) *Ec2ModifyAvailabilityZoneGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyAvailabilityZoneGroup", input)
	return &Ec2ModifyAvailabilityZoneGroupFuture{Future: future}
}

func (a *EC2Stub) ModifyCapacityReservation(ctx workflow.Context, input *ec2.ModifyCapacityReservationInput) (*ec2.ModifyCapacityReservationOutput, error) {
	var output ec2.ModifyCapacityReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyCapacityReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyCapacityReservationAsync(ctx workflow.Context, input *ec2.ModifyCapacityReservationInput) *Ec2ModifyCapacityReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyCapacityReservation", input)
	return &Ec2ModifyCapacityReservationFuture{Future: future}
}

func (a *EC2Stub) ModifyClientVpnEndpoint(ctx workflow.Context, input *ec2.ModifyClientVpnEndpointInput) (*ec2.ModifyClientVpnEndpointOutput, error) {
	var output ec2.ModifyClientVpnEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyClientVpnEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyClientVpnEndpointAsync(ctx workflow.Context, input *ec2.ModifyClientVpnEndpointInput) *Ec2ModifyClientVpnEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyClientVpnEndpoint", input)
	return &Ec2ModifyClientVpnEndpointFuture{Future: future}
}

func (a *EC2Stub) ModifyDefaultCreditSpecification(ctx workflow.Context, input *ec2.ModifyDefaultCreditSpecificationInput) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
	var output ec2.ModifyDefaultCreditSpecificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyDefaultCreditSpecification", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyDefaultCreditSpecificationAsync(ctx workflow.Context, input *ec2.ModifyDefaultCreditSpecificationInput) *Ec2ModifyDefaultCreditSpecificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyDefaultCreditSpecification", input)
	return &Ec2ModifyDefaultCreditSpecificationFuture{Future: future}
}

func (a *EC2Stub) ModifyEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.ModifyEbsDefaultKmsKeyIdInput) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.ModifyEbsDefaultKmsKeyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyEbsDefaultKmsKeyId", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.ModifyEbsDefaultKmsKeyIdInput) *Ec2ModifyEbsDefaultKmsKeyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyEbsDefaultKmsKeyId", input)
	return &Ec2ModifyEbsDefaultKmsKeyIdFuture{Future: future}
}

func (a *EC2Stub) ModifyFleet(ctx workflow.Context, input *ec2.ModifyFleetInput) (*ec2.ModifyFleetOutput, error) {
	var output ec2.ModifyFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyFleetAsync(ctx workflow.Context, input *ec2.ModifyFleetInput) *Ec2ModifyFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyFleet", input)
	return &Ec2ModifyFleetFuture{Future: future}
}

func (a *EC2Stub) ModifyFpgaImageAttribute(ctx workflow.Context, input *ec2.ModifyFpgaImageAttributeInput) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	var output ec2.ModifyFpgaImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyFpgaImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.ModifyFpgaImageAttributeInput) *Ec2ModifyFpgaImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyFpgaImageAttribute", input)
	return &Ec2ModifyFpgaImageAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyHosts(ctx workflow.Context, input *ec2.ModifyHostsInput) (*ec2.ModifyHostsOutput, error) {
	var output ec2.ModifyHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyHostsAsync(ctx workflow.Context, input *ec2.ModifyHostsInput) *Ec2ModifyHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyHosts", input)
	return &Ec2ModifyHostsFuture{Future: future}
}

func (a *EC2Stub) ModifyIdFormat(ctx workflow.Context, input *ec2.ModifyIdFormatInput) (*ec2.ModifyIdFormatOutput, error) {
	var output ec2.ModifyIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyIdFormatAsync(ctx workflow.Context, input *ec2.ModifyIdFormatInput) *Ec2ModifyIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyIdFormat", input)
	return &Ec2ModifyIdFormatFuture{Future: future}
}

func (a *EC2Stub) ModifyIdentityIdFormat(ctx workflow.Context, input *ec2.ModifyIdentityIdFormatInput) (*ec2.ModifyIdentityIdFormatOutput, error) {
	var output ec2.ModifyIdentityIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyIdentityIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyIdentityIdFormatAsync(ctx workflow.Context, input *ec2.ModifyIdentityIdFormatInput) *Ec2ModifyIdentityIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyIdentityIdFormat", input)
	return &Ec2ModifyIdentityIdFormatFuture{Future: future}
}

func (a *EC2Stub) ModifyImageAttribute(ctx workflow.Context, input *ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error) {
	var output ec2.ModifyImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyImageAttributeAsync(ctx workflow.Context, input *ec2.ModifyImageAttributeInput) *Ec2ModifyImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyImageAttribute", input)
	return &Ec2ModifyImageAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyInstanceAttribute(ctx workflow.Context, input *ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error) {
	var output ec2.ModifyInstanceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyInstanceAttributeAsync(ctx workflow.Context, input *ec2.ModifyInstanceAttributeInput) *Ec2ModifyInstanceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceAttribute", input)
	return &Ec2ModifyInstanceAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyInstanceCapacityReservationAttributes(ctx workflow.Context, input *ec2.ModifyInstanceCapacityReservationAttributesInput) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
	var output ec2.ModifyInstanceCapacityReservationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceCapacityReservationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyInstanceCapacityReservationAttributesAsync(ctx workflow.Context, input *ec2.ModifyInstanceCapacityReservationAttributesInput) *Ec2ModifyInstanceCapacityReservationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceCapacityReservationAttributes", input)
	return &Ec2ModifyInstanceCapacityReservationAttributesFuture{Future: future}
}

func (a *EC2Stub) ModifyInstanceCreditSpecification(ctx workflow.Context, input *ec2.ModifyInstanceCreditSpecificationInput) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
	var output ec2.ModifyInstanceCreditSpecificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceCreditSpecification", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyInstanceCreditSpecificationAsync(ctx workflow.Context, input *ec2.ModifyInstanceCreditSpecificationInput) *Ec2ModifyInstanceCreditSpecificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceCreditSpecification", input)
	return &Ec2ModifyInstanceCreditSpecificationFuture{Future: future}
}

func (a *EC2Stub) ModifyInstanceEventStartTime(ctx workflow.Context, input *ec2.ModifyInstanceEventStartTimeInput) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
	var output ec2.ModifyInstanceEventStartTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceEventStartTime", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyInstanceEventStartTimeAsync(ctx workflow.Context, input *ec2.ModifyInstanceEventStartTimeInput) *Ec2ModifyInstanceEventStartTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceEventStartTime", input)
	return &Ec2ModifyInstanceEventStartTimeFuture{Future: future}
}

func (a *EC2Stub) ModifyInstanceMetadataOptions(ctx workflow.Context, input *ec2.ModifyInstanceMetadataOptionsInput) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
	var output ec2.ModifyInstanceMetadataOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceMetadataOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyInstanceMetadataOptionsAsync(ctx workflow.Context, input *ec2.ModifyInstanceMetadataOptionsInput) *Ec2ModifyInstanceMetadataOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstanceMetadataOptions", input)
	return &Ec2ModifyInstanceMetadataOptionsFuture{Future: future}
}

func (a *EC2Stub) ModifyInstancePlacement(ctx workflow.Context, input *ec2.ModifyInstancePlacementInput) (*ec2.ModifyInstancePlacementOutput, error) {
	var output ec2.ModifyInstancePlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstancePlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyInstancePlacementAsync(ctx workflow.Context, input *ec2.ModifyInstancePlacementInput) *Ec2ModifyInstancePlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyInstancePlacement", input)
	return &Ec2ModifyInstancePlacementFuture{Future: future}
}

func (a *EC2Stub) ModifyLaunchTemplate(ctx workflow.Context, input *ec2.ModifyLaunchTemplateInput) (*ec2.ModifyLaunchTemplateOutput, error) {
	var output ec2.ModifyLaunchTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyLaunchTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyLaunchTemplateAsync(ctx workflow.Context, input *ec2.ModifyLaunchTemplateInput) *Ec2ModifyLaunchTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyLaunchTemplate", input)
	return &Ec2ModifyLaunchTemplateFuture{Future: future}
}

func (a *EC2Stub) ModifyManagedPrefixList(ctx workflow.Context, input *ec2.ModifyManagedPrefixListInput) (*ec2.ModifyManagedPrefixListOutput, error) {
	var output ec2.ModifyManagedPrefixListOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyManagedPrefixList", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyManagedPrefixListAsync(ctx workflow.Context, input *ec2.ModifyManagedPrefixListInput) *Ec2ModifyManagedPrefixListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyManagedPrefixList", input)
	return &Ec2ModifyManagedPrefixListFuture{Future: future}
}

func (a *EC2Stub) ModifyNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	var output ec2.ModifyNetworkInterfaceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyNetworkInterfaceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.ModifyNetworkInterfaceAttributeInput) *Ec2ModifyNetworkInterfaceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyNetworkInterfaceAttribute", input)
	return &Ec2ModifyNetworkInterfaceAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyReservedInstances(ctx workflow.Context, input *ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error) {
	var output ec2.ModifyReservedInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyReservedInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyReservedInstancesAsync(ctx workflow.Context, input *ec2.ModifyReservedInstancesInput) *Ec2ModifyReservedInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyReservedInstances", input)
	return &Ec2ModifyReservedInstancesFuture{Future: future}
}

func (a *EC2Stub) ModifySnapshotAttribute(ctx workflow.Context, input *ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error) {
	var output ec2.ModifySnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifySnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifySnapshotAttributeAsync(ctx workflow.Context, input *ec2.ModifySnapshotAttributeInput) *Ec2ModifySnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifySnapshotAttribute", input)
	return &Ec2ModifySnapshotAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifySubnetAttribute(ctx workflow.Context, input *ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error) {
	var output ec2.ModifySubnetAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifySubnetAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifySubnetAttributeAsync(ctx workflow.Context, input *ec2.ModifySubnetAttributeInput) *Ec2ModifySubnetAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifySubnetAttribute", input)
	return &Ec2ModifySubnetAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyTrafficMirrorFilterNetworkServices(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
	var output ec2.ModifyTrafficMirrorFilterNetworkServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTrafficMirrorFilterNetworkServices", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyTrafficMirrorFilterNetworkServicesAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) *Ec2ModifyTrafficMirrorFilterNetworkServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTrafficMirrorFilterNetworkServices", input)
	return &Ec2ModifyTrafficMirrorFilterNetworkServicesFuture{Future: future}
}

func (a *EC2Stub) ModifyTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterRuleInput) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
	var output ec2.ModifyTrafficMirrorFilterRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTrafficMirrorFilterRule", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterRuleInput) *Ec2ModifyTrafficMirrorFilterRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTrafficMirrorFilterRule", input)
	return &Ec2ModifyTrafficMirrorFilterRuleFuture{Future: future}
}

func (a *EC2Stub) ModifyTrafficMirrorSession(ctx workflow.Context, input *ec2.ModifyTrafficMirrorSessionInput) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
	var output ec2.ModifyTrafficMirrorSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTrafficMirrorSession", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorSessionInput) *Ec2ModifyTrafficMirrorSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTrafficMirrorSession", input)
	return &Ec2ModifyTrafficMirrorSessionFuture{Future: future}
}

func (a *EC2Stub) ModifyTransitGateway(ctx workflow.Context, input *ec2.ModifyTransitGatewayInput) (*ec2.ModifyTransitGatewayOutput, error) {
	var output ec2.ModifyTransitGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTransitGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyTransitGatewayAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayInput) *Ec2ModifyTransitGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTransitGateway", input)
	return &Ec2ModifyTransitGatewayFuture{Future: future}
}

func (a *EC2Stub) ModifyTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.ModifyTransitGatewayPrefixListReferenceInput) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.ModifyTransitGatewayPrefixListReferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTransitGatewayPrefixListReference", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayPrefixListReferenceInput) *Ec2ModifyTransitGatewayPrefixListReferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTransitGatewayPrefixListReference", input)
	return &Ec2ModifyTransitGatewayPrefixListReferenceFuture{Future: future}
}

func (a *EC2Stub) ModifyTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.ModifyTransitGatewayVpcAttachmentInput) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.ModifyTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayVpcAttachmentInput) *Ec2ModifyTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyTransitGatewayVpcAttachment", input)
	return &Ec2ModifyTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *EC2Stub) ModifyVolume(ctx workflow.Context, input *ec2.ModifyVolumeInput) (*ec2.ModifyVolumeOutput, error) {
	var output ec2.ModifyVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVolumeAsync(ctx workflow.Context, input *ec2.ModifyVolumeInput) *Ec2ModifyVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVolume", input)
	return &Ec2ModifyVolumeFuture{Future: future}
}

func (a *EC2Stub) ModifyVolumeAttribute(ctx workflow.Context, input *ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error) {
	var output ec2.ModifyVolumeAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVolumeAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVolumeAttributeAsync(ctx workflow.Context, input *ec2.ModifyVolumeAttributeInput) *Ec2ModifyVolumeAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVolumeAttribute", input)
	return &Ec2ModifyVolumeAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcAttribute(ctx workflow.Context, input *ec2.ModifyVpcAttributeInput) (*ec2.ModifyVpcAttributeOutput, error) {
	var output ec2.ModifyVpcAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcAttributeAsync(ctx workflow.Context, input *ec2.ModifyVpcAttributeInput) *Ec2ModifyVpcAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcAttribute", input)
	return &Ec2ModifyVpcAttributeFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcEndpoint(ctx workflow.Context, input *ec2.ModifyVpcEndpointInput) (*ec2.ModifyVpcEndpointOutput, error) {
	var output ec2.ModifyVpcEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcEndpointAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointInput) *Ec2ModifyVpcEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpoint", input)
	return &Ec2ModifyVpcEndpointFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcEndpointConnectionNotification(ctx workflow.Context, input *ec2.ModifyVpcEndpointConnectionNotificationInput) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
	var output ec2.ModifyVpcEndpointConnectionNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpointConnectionNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcEndpointConnectionNotificationAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointConnectionNotificationInput) *Ec2ModifyVpcEndpointConnectionNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpointConnectionNotification", input)
	return &Ec2ModifyVpcEndpointConnectionNotificationFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcEndpointServiceConfiguration(ctx workflow.Context, input *ec2.ModifyVpcEndpointServiceConfigurationInput) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
	var output ec2.ModifyVpcEndpointServiceConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpointServiceConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcEndpointServiceConfigurationAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointServiceConfigurationInput) *Ec2ModifyVpcEndpointServiceConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpointServiceConfiguration", input)
	return &Ec2ModifyVpcEndpointServiceConfigurationFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcEndpointServicePermissions(ctx workflow.Context, input *ec2.ModifyVpcEndpointServicePermissionsInput) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	var output ec2.ModifyVpcEndpointServicePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpointServicePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcEndpointServicePermissionsAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointServicePermissionsInput) *Ec2ModifyVpcEndpointServicePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcEndpointServicePermissions", input)
	return &Ec2ModifyVpcEndpointServicePermissionsFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcPeeringConnectionOptions(ctx workflow.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	var output ec2.ModifyVpcPeeringConnectionOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcPeeringConnectionOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcPeeringConnectionOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput) *Ec2ModifyVpcPeeringConnectionOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcPeeringConnectionOptions", input)
	return &Ec2ModifyVpcPeeringConnectionOptionsFuture{Future: future}
}

func (a *EC2Stub) ModifyVpcTenancy(ctx workflow.Context, input *ec2.ModifyVpcTenancyInput) (*ec2.ModifyVpcTenancyOutput, error) {
	var output ec2.ModifyVpcTenancyOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcTenancy", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpcTenancyAsync(ctx workflow.Context, input *ec2.ModifyVpcTenancyInput) *Ec2ModifyVpcTenancyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpcTenancy", input)
	return &Ec2ModifyVpcTenancyFuture{Future: future}
}

func (a *EC2Stub) ModifyVpnConnection(ctx workflow.Context, input *ec2.ModifyVpnConnectionInput) (*ec2.ModifyVpnConnectionOutput, error) {
	var output ec2.ModifyVpnConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpnConnectionAsync(ctx workflow.Context, input *ec2.ModifyVpnConnectionInput) *Ec2ModifyVpnConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnConnection", input)
	return &Ec2ModifyVpnConnectionFuture{Future: future}
}

func (a *EC2Stub) ModifyVpnConnectionOptions(ctx workflow.Context, input *ec2.ModifyVpnConnectionOptionsInput) (*ec2.ModifyVpnConnectionOptionsOutput, error) {
	var output ec2.ModifyVpnConnectionOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnConnectionOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpnConnectionOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpnConnectionOptionsInput) *Ec2ModifyVpnConnectionOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnConnectionOptions", input)
	return &Ec2ModifyVpnConnectionOptionsFuture{Future: future}
}

func (a *EC2Stub) ModifyVpnTunnelCertificate(ctx workflow.Context, input *ec2.ModifyVpnTunnelCertificateInput) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
	var output ec2.ModifyVpnTunnelCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnTunnelCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpnTunnelCertificateAsync(ctx workflow.Context, input *ec2.ModifyVpnTunnelCertificateInput) *Ec2ModifyVpnTunnelCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnTunnelCertificate", input)
	return &Ec2ModifyVpnTunnelCertificateFuture{Future: future}
}

func (a *EC2Stub) ModifyVpnTunnelOptions(ctx workflow.Context, input *ec2.ModifyVpnTunnelOptionsInput) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
	var output ec2.ModifyVpnTunnelOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnTunnelOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ModifyVpnTunnelOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpnTunnelOptionsInput) *Ec2ModifyVpnTunnelOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ModifyVpnTunnelOptions", input)
	return &Ec2ModifyVpnTunnelOptionsFuture{Future: future}
}

func (a *EC2Stub) MonitorInstances(ctx workflow.Context, input *ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error) {
	var output ec2.MonitorInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.MonitorInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) MonitorInstancesAsync(ctx workflow.Context, input *ec2.MonitorInstancesInput) *Ec2MonitorInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.MonitorInstances", input)
	return &Ec2MonitorInstancesFuture{Future: future}
}

func (a *EC2Stub) MoveAddressToVpc(ctx workflow.Context, input *ec2.MoveAddressToVpcInput) (*ec2.MoveAddressToVpcOutput, error) {
	var output ec2.MoveAddressToVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.MoveAddressToVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) MoveAddressToVpcAsync(ctx workflow.Context, input *ec2.MoveAddressToVpcInput) *Ec2MoveAddressToVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.MoveAddressToVpc", input)
	return &Ec2MoveAddressToVpcFuture{Future: future}
}

func (a *EC2Stub) ProvisionByoipCidr(ctx workflow.Context, input *ec2.ProvisionByoipCidrInput) (*ec2.ProvisionByoipCidrOutput, error) {
	var output ec2.ProvisionByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ProvisionByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ProvisionByoipCidrAsync(ctx workflow.Context, input *ec2.ProvisionByoipCidrInput) *Ec2ProvisionByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ProvisionByoipCidr", input)
	return &Ec2ProvisionByoipCidrFuture{Future: future}
}

func (a *EC2Stub) PurchaseHostReservation(ctx workflow.Context, input *ec2.PurchaseHostReservationInput) (*ec2.PurchaseHostReservationOutput, error) {
	var output ec2.PurchaseHostReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.PurchaseHostReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) PurchaseHostReservationAsync(ctx workflow.Context, input *ec2.PurchaseHostReservationInput) *Ec2PurchaseHostReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.PurchaseHostReservation", input)
	return &Ec2PurchaseHostReservationFuture{Future: future}
}

func (a *EC2Stub) PurchaseReservedInstancesOffering(ctx workflow.Context, input *ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	var output ec2.PurchaseReservedInstancesOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.PurchaseReservedInstancesOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) PurchaseReservedInstancesOfferingAsync(ctx workflow.Context, input *ec2.PurchaseReservedInstancesOfferingInput) *Ec2PurchaseReservedInstancesOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.PurchaseReservedInstancesOffering", input)
	return &Ec2PurchaseReservedInstancesOfferingFuture{Future: future}
}

func (a *EC2Stub) PurchaseScheduledInstances(ctx workflow.Context, input *ec2.PurchaseScheduledInstancesInput) (*ec2.PurchaseScheduledInstancesOutput, error) {
	var output ec2.PurchaseScheduledInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.PurchaseScheduledInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) PurchaseScheduledInstancesAsync(ctx workflow.Context, input *ec2.PurchaseScheduledInstancesInput) *Ec2PurchaseScheduledInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.PurchaseScheduledInstances", input)
	return &Ec2PurchaseScheduledInstancesFuture{Future: future}
}

func (a *EC2Stub) RebootInstances(ctx workflow.Context, input *ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error) {
	var output ec2.RebootInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RebootInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RebootInstancesAsync(ctx workflow.Context, input *ec2.RebootInstancesInput) *Ec2RebootInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RebootInstances", input)
	return &Ec2RebootInstancesFuture{Future: future}
}

func (a *EC2Stub) RegisterImage(ctx workflow.Context, input *ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error) {
	var output ec2.RegisterImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterImage", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RegisterImageAsync(ctx workflow.Context, input *ec2.RegisterImageInput) *Ec2RegisterImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterImage", input)
	return &Ec2RegisterImageFuture{Future: future}
}

func (a *EC2Stub) RegisterInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.RegisterInstanceEventNotificationAttributesInput) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error) {
	var output ec2.RegisterInstanceEventNotificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterInstanceEventNotificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RegisterInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.RegisterInstanceEventNotificationAttributesInput) *Ec2RegisterInstanceEventNotificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterInstanceEventNotificationAttributes", input)
	return &Ec2RegisterInstanceEventNotificationAttributesFuture{Future: future}
}

func (a *EC2Stub) RegisterTransitGatewayMulticastGroupMembers(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
	var output ec2.RegisterTransitGatewayMulticastGroupMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterTransitGatewayMulticastGroupMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RegisterTransitGatewayMulticastGroupMembersAsync(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupMembersInput) *Ec2RegisterTransitGatewayMulticastGroupMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterTransitGatewayMulticastGroupMembers", input)
	return &Ec2RegisterTransitGatewayMulticastGroupMembersFuture{Future: future}
}

func (a *EC2Stub) RegisterTransitGatewayMulticastGroupSources(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
	var output ec2.RegisterTransitGatewayMulticastGroupSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterTransitGatewayMulticastGroupSources", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RegisterTransitGatewayMulticastGroupSourcesAsync(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) *Ec2RegisterTransitGatewayMulticastGroupSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RegisterTransitGatewayMulticastGroupSources", input)
	return &Ec2RegisterTransitGatewayMulticastGroupSourcesFuture{Future: future}
}

func (a *EC2Stub) RejectTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.RejectTransitGatewayPeeringAttachmentInput) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.RejectTransitGatewayPeeringAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RejectTransitGatewayPeeringAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RejectTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.RejectTransitGatewayPeeringAttachmentInput) *Ec2RejectTransitGatewayPeeringAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RejectTransitGatewayPeeringAttachment", input)
	return &Ec2RejectTransitGatewayPeeringAttachmentFuture{Future: future}
}

func (a *EC2Stub) RejectTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.RejectTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RejectTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RejectTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.RejectTransitGatewayVpcAttachmentInput) *Ec2RejectTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RejectTransitGatewayVpcAttachment", input)
	return &Ec2RejectTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *EC2Stub) RejectVpcEndpointConnections(ctx workflow.Context, input *ec2.RejectVpcEndpointConnectionsInput) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
	var output ec2.RejectVpcEndpointConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RejectVpcEndpointConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RejectVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.RejectVpcEndpointConnectionsInput) *Ec2RejectVpcEndpointConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RejectVpcEndpointConnections", input)
	return &Ec2RejectVpcEndpointConnectionsFuture{Future: future}
}

func (a *EC2Stub) RejectVpcPeeringConnection(ctx workflow.Context, input *ec2.RejectVpcPeeringConnectionInput) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	var output ec2.RejectVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RejectVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RejectVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.RejectVpcPeeringConnectionInput) *Ec2RejectVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RejectVpcPeeringConnection", input)
	return &Ec2RejectVpcPeeringConnectionFuture{Future: future}
}

func (a *EC2Stub) ReleaseAddress(ctx workflow.Context, input *ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error) {
	var output ec2.ReleaseAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReleaseAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReleaseAddressAsync(ctx workflow.Context, input *ec2.ReleaseAddressInput) *Ec2ReleaseAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReleaseAddress", input)
	return &Ec2ReleaseAddressFuture{Future: future}
}

func (a *EC2Stub) ReleaseHosts(ctx workflow.Context, input *ec2.ReleaseHostsInput) (*ec2.ReleaseHostsOutput, error) {
	var output ec2.ReleaseHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReleaseHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReleaseHostsAsync(ctx workflow.Context, input *ec2.ReleaseHostsInput) *Ec2ReleaseHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReleaseHosts", input)
	return &Ec2ReleaseHostsFuture{Future: future}
}

func (a *EC2Stub) ReplaceIamInstanceProfileAssociation(ctx workflow.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	var output ec2.ReplaceIamInstanceProfileAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceIamInstanceProfileAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReplaceIamInstanceProfileAssociationAsync(ctx workflow.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput) *Ec2ReplaceIamInstanceProfileAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceIamInstanceProfileAssociation", input)
	return &Ec2ReplaceIamInstanceProfileAssociationFuture{Future: future}
}

func (a *EC2Stub) ReplaceNetworkAclAssociation(ctx workflow.Context, input *ec2.ReplaceNetworkAclAssociationInput) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	var output ec2.ReplaceNetworkAclAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceNetworkAclAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReplaceNetworkAclAssociationAsync(ctx workflow.Context, input *ec2.ReplaceNetworkAclAssociationInput) *Ec2ReplaceNetworkAclAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceNetworkAclAssociation", input)
	return &Ec2ReplaceNetworkAclAssociationFuture{Future: future}
}

func (a *EC2Stub) ReplaceNetworkAclEntry(ctx workflow.Context, input *ec2.ReplaceNetworkAclEntryInput) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	var output ec2.ReplaceNetworkAclEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceNetworkAclEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReplaceNetworkAclEntryAsync(ctx workflow.Context, input *ec2.ReplaceNetworkAclEntryInput) *Ec2ReplaceNetworkAclEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceNetworkAclEntry", input)
	return &Ec2ReplaceNetworkAclEntryFuture{Future: future}
}

func (a *EC2Stub) ReplaceRoute(ctx workflow.Context, input *ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error) {
	var output ec2.ReplaceRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReplaceRouteAsync(ctx workflow.Context, input *ec2.ReplaceRouteInput) *Ec2ReplaceRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceRoute", input)
	return &Ec2ReplaceRouteFuture{Future: future}
}

func (a *EC2Stub) ReplaceRouteTableAssociation(ctx workflow.Context, input *ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	var output ec2.ReplaceRouteTableAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceRouteTableAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReplaceRouteTableAssociationAsync(ctx workflow.Context, input *ec2.ReplaceRouteTableAssociationInput) *Ec2ReplaceRouteTableAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceRouteTableAssociation", input)
	return &Ec2ReplaceRouteTableAssociationFuture{Future: future}
}

func (a *EC2Stub) ReplaceTransitGatewayRoute(ctx workflow.Context, input *ec2.ReplaceTransitGatewayRouteInput) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
	var output ec2.ReplaceTransitGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceTransitGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReplaceTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.ReplaceTransitGatewayRouteInput) *Ec2ReplaceTransitGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReplaceTransitGatewayRoute", input)
	return &Ec2ReplaceTransitGatewayRouteFuture{Future: future}
}

func (a *EC2Stub) ReportInstanceStatus(ctx workflow.Context, input *ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error) {
	var output ec2.ReportInstanceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ReportInstanceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ReportInstanceStatusAsync(ctx workflow.Context, input *ec2.ReportInstanceStatusInput) *Ec2ReportInstanceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ReportInstanceStatus", input)
	return &Ec2ReportInstanceStatusFuture{Future: future}
}

func (a *EC2Stub) RequestSpotFleet(ctx workflow.Context, input *ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error) {
	var output ec2.RequestSpotFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RequestSpotFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RequestSpotFleetAsync(ctx workflow.Context, input *ec2.RequestSpotFleetInput) *Ec2RequestSpotFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RequestSpotFleet", input)
	return &Ec2RequestSpotFleetFuture{Future: future}
}

func (a *EC2Stub) RequestSpotInstances(ctx workflow.Context, input *ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error) {
	var output ec2.RequestSpotInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RequestSpotInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RequestSpotInstancesAsync(ctx workflow.Context, input *ec2.RequestSpotInstancesInput) *Ec2RequestSpotInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RequestSpotInstances", input)
	return &Ec2RequestSpotInstancesFuture{Future: future}
}

func (a *EC2Stub) ResetEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.ResetEbsDefaultKmsKeyIdInput) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.ResetEbsDefaultKmsKeyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ResetEbsDefaultKmsKeyId", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ResetEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.ResetEbsDefaultKmsKeyIdInput) *Ec2ResetEbsDefaultKmsKeyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ResetEbsDefaultKmsKeyId", input)
	return &Ec2ResetEbsDefaultKmsKeyIdFuture{Future: future}
}

func (a *EC2Stub) ResetFpgaImageAttribute(ctx workflow.Context, input *ec2.ResetFpgaImageAttributeInput) (*ec2.ResetFpgaImageAttributeOutput, error) {
	var output ec2.ResetFpgaImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ResetFpgaImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ResetFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.ResetFpgaImageAttributeInput) *Ec2ResetFpgaImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ResetFpgaImageAttribute", input)
	return &Ec2ResetFpgaImageAttributeFuture{Future: future}
}

func (a *EC2Stub) ResetImageAttribute(ctx workflow.Context, input *ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error) {
	var output ec2.ResetImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ResetImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ResetImageAttributeAsync(ctx workflow.Context, input *ec2.ResetImageAttributeInput) *Ec2ResetImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ResetImageAttribute", input)
	return &Ec2ResetImageAttributeFuture{Future: future}
}

func (a *EC2Stub) ResetInstanceAttribute(ctx workflow.Context, input *ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error) {
	var output ec2.ResetInstanceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ResetInstanceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ResetInstanceAttributeAsync(ctx workflow.Context, input *ec2.ResetInstanceAttributeInput) *Ec2ResetInstanceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ResetInstanceAttribute", input)
	return &Ec2ResetInstanceAttributeFuture{Future: future}
}

func (a *EC2Stub) ResetNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	var output ec2.ResetNetworkInterfaceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ResetNetworkInterfaceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ResetNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.ResetNetworkInterfaceAttributeInput) *Ec2ResetNetworkInterfaceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ResetNetworkInterfaceAttribute", input)
	return &Ec2ResetNetworkInterfaceAttributeFuture{Future: future}
}

func (a *EC2Stub) ResetSnapshotAttribute(ctx workflow.Context, input *ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error) {
	var output ec2.ResetSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.ResetSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) ResetSnapshotAttributeAsync(ctx workflow.Context, input *ec2.ResetSnapshotAttributeInput) *Ec2ResetSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.ResetSnapshotAttribute", input)
	return &Ec2ResetSnapshotAttributeFuture{Future: future}
}

func (a *EC2Stub) RestoreAddressToClassic(ctx workflow.Context, input *ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error) {
	var output ec2.RestoreAddressToClassicOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RestoreAddressToClassic", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RestoreAddressToClassicAsync(ctx workflow.Context, input *ec2.RestoreAddressToClassicInput) *Ec2RestoreAddressToClassicFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RestoreAddressToClassic", input)
	return &Ec2RestoreAddressToClassicFuture{Future: future}
}

func (a *EC2Stub) RestoreManagedPrefixListVersion(ctx workflow.Context, input *ec2.RestoreManagedPrefixListVersionInput) (*ec2.RestoreManagedPrefixListVersionOutput, error) {
	var output ec2.RestoreManagedPrefixListVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RestoreManagedPrefixListVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RestoreManagedPrefixListVersionAsync(ctx workflow.Context, input *ec2.RestoreManagedPrefixListVersionInput) *Ec2RestoreManagedPrefixListVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RestoreManagedPrefixListVersion", input)
	return &Ec2RestoreManagedPrefixListVersionFuture{Future: future}
}

func (a *EC2Stub) RevokeClientVpnIngress(ctx workflow.Context, input *ec2.RevokeClientVpnIngressInput) (*ec2.RevokeClientVpnIngressOutput, error) {
	var output ec2.RevokeClientVpnIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RevokeClientVpnIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RevokeClientVpnIngressAsync(ctx workflow.Context, input *ec2.RevokeClientVpnIngressInput) *Ec2RevokeClientVpnIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RevokeClientVpnIngress", input)
	return &Ec2RevokeClientVpnIngressFuture{Future: future}
}

func (a *EC2Stub) RevokeSecurityGroupEgress(ctx workflow.Context, input *ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	var output ec2.RevokeSecurityGroupEgressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RevokeSecurityGroupEgress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RevokeSecurityGroupEgressAsync(ctx workflow.Context, input *ec2.RevokeSecurityGroupEgressInput) *Ec2RevokeSecurityGroupEgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RevokeSecurityGroupEgress", input)
	return &Ec2RevokeSecurityGroupEgressFuture{Future: future}
}

func (a *EC2Stub) RevokeSecurityGroupIngress(ctx workflow.Context, input *ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	var output ec2.RevokeSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RevokeSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RevokeSecurityGroupIngressAsync(ctx workflow.Context, input *ec2.RevokeSecurityGroupIngressInput) *Ec2RevokeSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RevokeSecurityGroupIngress", input)
	return &Ec2RevokeSecurityGroupIngressFuture{Future: future}
}

func (a *EC2Stub) RunInstances(ctx workflow.Context, input *ec2.RunInstancesInput) (*ec2.Reservation, error) {
	var output ec2.Reservation
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RunInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RunInstancesAsync(ctx workflow.Context, input *ec2.RunInstancesInput) *Ec2RunInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RunInstances", input)
	return &Ec2RunInstancesFuture{Future: future}
}

func (a *EC2Stub) RunScheduledInstances(ctx workflow.Context, input *ec2.RunScheduledInstancesInput) (*ec2.RunScheduledInstancesOutput, error) {
	var output ec2.RunScheduledInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.RunScheduledInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) RunScheduledInstancesAsync(ctx workflow.Context, input *ec2.RunScheduledInstancesInput) *Ec2RunScheduledInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.RunScheduledInstances", input)
	return &Ec2RunScheduledInstancesFuture{Future: future}
}

func (a *EC2Stub) SearchLocalGatewayRoutes(ctx workflow.Context, input *ec2.SearchLocalGatewayRoutesInput) (*ec2.SearchLocalGatewayRoutesOutput, error) {
	var output ec2.SearchLocalGatewayRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.SearchLocalGatewayRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) SearchLocalGatewayRoutesAsync(ctx workflow.Context, input *ec2.SearchLocalGatewayRoutesInput) *Ec2SearchLocalGatewayRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.SearchLocalGatewayRoutes", input)
	return &Ec2SearchLocalGatewayRoutesFuture{Future: future}
}

func (a *EC2Stub) SearchTransitGatewayMulticastGroups(ctx workflow.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
	var output ec2.SearchTransitGatewayMulticastGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.SearchTransitGatewayMulticastGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) SearchTransitGatewayMulticastGroupsAsync(ctx workflow.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput) *Ec2SearchTransitGatewayMulticastGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.SearchTransitGatewayMulticastGroups", input)
	return &Ec2SearchTransitGatewayMulticastGroupsFuture{Future: future}
}

func (a *EC2Stub) SearchTransitGatewayRoutes(ctx workflow.Context, input *ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	var output ec2.SearchTransitGatewayRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.SearchTransitGatewayRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) SearchTransitGatewayRoutesAsync(ctx workflow.Context, input *ec2.SearchTransitGatewayRoutesInput) *Ec2SearchTransitGatewayRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.SearchTransitGatewayRoutes", input)
	return &Ec2SearchTransitGatewayRoutesFuture{Future: future}
}

func (a *EC2Stub) SendDiagnosticInterrupt(ctx workflow.Context, input *ec2.SendDiagnosticInterruptInput) (*ec2.SendDiagnosticInterruptOutput, error) {
	var output ec2.SendDiagnosticInterruptOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.SendDiagnosticInterrupt", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) SendDiagnosticInterruptAsync(ctx workflow.Context, input *ec2.SendDiagnosticInterruptInput) *Ec2SendDiagnosticInterruptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.SendDiagnosticInterrupt", input)
	return &Ec2SendDiagnosticInterruptFuture{Future: future}
}

func (a *EC2Stub) StartInstances(ctx workflow.Context, input *ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error) {
	var output ec2.StartInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.StartInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) StartInstancesAsync(ctx workflow.Context, input *ec2.StartInstancesInput) *Ec2StartInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.StartInstances", input)
	return &Ec2StartInstancesFuture{Future: future}
}

func (a *EC2Stub) StartVpcEndpointServicePrivateDnsVerification(ctx workflow.Context, input *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
	var output ec2.StartVpcEndpointServicePrivateDnsVerificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.StartVpcEndpointServicePrivateDnsVerification", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) StartVpcEndpointServicePrivateDnsVerificationAsync(ctx workflow.Context, input *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) *Ec2StartVpcEndpointServicePrivateDnsVerificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.StartVpcEndpointServicePrivateDnsVerification", input)
	return &Ec2StartVpcEndpointServicePrivateDnsVerificationFuture{Future: future}
}

func (a *EC2Stub) StopInstances(ctx workflow.Context, input *ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error) {
	var output ec2.StopInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.StopInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) StopInstancesAsync(ctx workflow.Context, input *ec2.StopInstancesInput) *Ec2StopInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.StopInstances", input)
	return &Ec2StopInstancesFuture{Future: future}
}

func (a *EC2Stub) TerminateClientVpnConnections(ctx workflow.Context, input *ec2.TerminateClientVpnConnectionsInput) (*ec2.TerminateClientVpnConnectionsOutput, error) {
	var output ec2.TerminateClientVpnConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.TerminateClientVpnConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) TerminateClientVpnConnectionsAsync(ctx workflow.Context, input *ec2.TerminateClientVpnConnectionsInput) *Ec2TerminateClientVpnConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.TerminateClientVpnConnections", input)
	return &Ec2TerminateClientVpnConnectionsFuture{Future: future}
}

func (a *EC2Stub) TerminateInstances(ctx workflow.Context, input *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error) {
	var output ec2.TerminateInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.TerminateInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) TerminateInstancesAsync(ctx workflow.Context, input *ec2.TerminateInstancesInput) *Ec2TerminateInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.TerminateInstances", input)
	return &Ec2TerminateInstancesFuture{Future: future}
}

func (a *EC2Stub) UnassignIpv6Addresses(ctx workflow.Context, input *ec2.UnassignIpv6AddressesInput) (*ec2.UnassignIpv6AddressesOutput, error) {
	var output ec2.UnassignIpv6AddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.UnassignIpv6Addresses", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) UnassignIpv6AddressesAsync(ctx workflow.Context, input *ec2.UnassignIpv6AddressesInput) *Ec2UnassignIpv6AddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.UnassignIpv6Addresses", input)
	return &Ec2UnassignIpv6AddressesFuture{Future: future}
}

func (a *EC2Stub) UnassignPrivateIpAddresses(ctx workflow.Context, input *ec2.UnassignPrivateIpAddressesInput) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	var output ec2.UnassignPrivateIpAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.UnassignPrivateIpAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) UnassignPrivateIpAddressesAsync(ctx workflow.Context, input *ec2.UnassignPrivateIpAddressesInput) *Ec2UnassignPrivateIpAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.UnassignPrivateIpAddresses", input)
	return &Ec2UnassignPrivateIpAddressesFuture{Future: future}
}

func (a *EC2Stub) UnmonitorInstances(ctx workflow.Context, input *ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error) {
	var output ec2.UnmonitorInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.UnmonitorInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) UnmonitorInstancesAsync(ctx workflow.Context, input *ec2.UnmonitorInstancesInput) *Ec2UnmonitorInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.UnmonitorInstances", input)
	return &Ec2UnmonitorInstancesFuture{Future: future}
}

func (a *EC2Stub) UpdateSecurityGroupRuleDescriptionsEgress(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	var output ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.UpdateSecurityGroupRuleDescriptionsEgress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) UpdateSecurityGroupRuleDescriptionsEgressAsync(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) *Ec2UpdateSecurityGroupRuleDescriptionsEgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.UpdateSecurityGroupRuleDescriptionsEgress", input)
	return &Ec2UpdateSecurityGroupRuleDescriptionsEgressFuture{Future: future}
}

func (a *EC2Stub) UpdateSecurityGroupRuleDescriptionsIngress(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	var output ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.UpdateSecurityGroupRuleDescriptionsIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) UpdateSecurityGroupRuleDescriptionsIngressAsync(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) *Ec2UpdateSecurityGroupRuleDescriptionsIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.UpdateSecurityGroupRuleDescriptionsIngress", input)
	return &Ec2UpdateSecurityGroupRuleDescriptionsIngressFuture{Future: future}
}

func (a *EC2Stub) WithdrawByoipCidr(ctx workflow.Context, input *ec2.WithdrawByoipCidrInput) (*ec2.WithdrawByoipCidrOutput, error) {
	var output ec2.WithdrawByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws.ec2.WithdrawByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *EC2Stub) WithdrawByoipCidrAsync(ctx workflow.Context, input *ec2.WithdrawByoipCidrInput) *Ec2WithdrawByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.ec2.WithdrawByoipCidr", input)
	return &Ec2WithdrawByoipCidrFuture{Future: future}
}

func (a *EC2Stub) WaitUntilBundleTaskComplete(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilBundleTaskComplete", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilBundleTaskCompleteAsync(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilBundleTaskComplete", input)
}

func (a *EC2Stub) WaitUntilConversionTaskCancelled(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilConversionTaskCancelled", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilConversionTaskCancelledAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilConversionTaskCancelled", input)
}

func (a *EC2Stub) WaitUntilConversionTaskCompleted(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilConversionTaskCompleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilConversionTaskCompletedAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilConversionTaskCompleted", input)
}

func (a *EC2Stub) WaitUntilConversionTaskDeleted(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilConversionTaskDeleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilConversionTaskDeletedAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilConversionTaskDeleted", input)
}

func (a *EC2Stub) WaitUntilCustomerGatewayAvailable(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilCustomerGatewayAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilCustomerGatewayAvailableAsync(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilCustomerGatewayAvailable", input)
}

func (a *EC2Stub) WaitUntilExportTaskCancelled(ctx workflow.Context, input *ec2.DescribeExportTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilExportTaskCancelled", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilExportTaskCancelledAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilExportTaskCancelled", input)
}

func (a *EC2Stub) WaitUntilExportTaskCompleted(ctx workflow.Context, input *ec2.DescribeExportTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilExportTaskCompleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilExportTaskCompletedAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilExportTaskCompleted", input)
}

func (a *EC2Stub) WaitUntilImageAvailable(ctx workflow.Context, input *ec2.DescribeImagesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilImageAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilImageAvailableAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilImageAvailable", input)
}

func (a *EC2Stub) WaitUntilImageExists(ctx workflow.Context, input *ec2.DescribeImagesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilImageExists", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilImageExistsAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilImageExists", input)
}

func (a *EC2Stub) WaitUntilInstanceExists(ctx workflow.Context, input *ec2.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceExists", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilInstanceExistsAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceExists", input)
}

func (a *EC2Stub) WaitUntilInstanceRunning(ctx workflow.Context, input *ec2.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceRunning", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilInstanceRunningAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceRunning", input)
}

func (a *EC2Stub) WaitUntilInstanceStatusOk(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceStatusOk", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilInstanceStatusOkAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceStatusOk", input)
}

func (a *EC2Stub) WaitUntilInstanceStopped(ctx workflow.Context, input *ec2.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceStopped", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilInstanceStoppedAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceStopped", input)
}

func (a *EC2Stub) WaitUntilInstanceTerminated(ctx workflow.Context, input *ec2.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceTerminated", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilInstanceTerminatedAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilInstanceTerminated", input)
}

func (a *EC2Stub) WaitUntilKeyPairExists(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilKeyPairExists", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilKeyPairExistsAsync(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilKeyPairExists", input)
}

func (a *EC2Stub) WaitUntilNatGatewayAvailable(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilNatGatewayAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilNatGatewayAvailableAsync(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilNatGatewayAvailable", input)
}

func (a *EC2Stub) WaitUntilNetworkInterfaceAvailable(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilNetworkInterfaceAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilNetworkInterfaceAvailableAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilNetworkInterfaceAvailable", input)
}

func (a *EC2Stub) WaitUntilPasswordDataAvailable(ctx workflow.Context, input *ec2.GetPasswordDataInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilPasswordDataAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilPasswordDataAvailableAsync(ctx workflow.Context, input *ec2.GetPasswordDataInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilPasswordDataAvailable", input)
}

func (a *EC2Stub) WaitUntilSecurityGroupExists(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSecurityGroupExists", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilSecurityGroupExistsAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSecurityGroupExists", input)
}

func (a *EC2Stub) WaitUntilSnapshotCompleted(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSnapshotCompleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilSnapshotCompletedAsync(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSnapshotCompleted", input)
}

func (a *EC2Stub) WaitUntilSpotInstanceRequestFulfilled(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSpotInstanceRequestFulfilled", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilSpotInstanceRequestFulfilledAsync(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSpotInstanceRequestFulfilled", input)
}

func (a *EC2Stub) WaitUntilSubnetAvailable(ctx workflow.Context, input *ec2.DescribeSubnetsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSubnetAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilSubnetAvailableAsync(ctx workflow.Context, input *ec2.DescribeSubnetsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSubnetAvailable", input)
}

func (a *EC2Stub) WaitUntilSystemStatusOk(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSystemStatusOk", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilSystemStatusOkAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilSystemStatusOk", input)
}

func (a *EC2Stub) WaitUntilVolumeAvailable(ctx workflow.Context, input *ec2.DescribeVolumesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVolumeAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVolumeAvailableAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVolumeAvailable", input)
}

func (a *EC2Stub) WaitUntilVolumeDeleted(ctx workflow.Context, input *ec2.DescribeVolumesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVolumeDeleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVolumeDeletedAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVolumeDeleted", input)
}

func (a *EC2Stub) WaitUntilVolumeInUse(ctx workflow.Context, input *ec2.DescribeVolumesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVolumeInUse", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVolumeInUseAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVolumeInUse", input)
}

func (a *EC2Stub) WaitUntilVpcAvailable(ctx workflow.Context, input *ec2.DescribeVpcsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVpcAvailableAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcAvailable", input)
}

func (a *EC2Stub) WaitUntilVpcExists(ctx workflow.Context, input *ec2.DescribeVpcsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcExists", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVpcExistsAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcExists", input)
}

func (a *EC2Stub) WaitUntilVpcPeeringConnectionDeleted(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcPeeringConnectionDeleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVpcPeeringConnectionDeletedAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcPeeringConnectionDeleted", input)
}

func (a *EC2Stub) WaitUntilVpcPeeringConnectionExists(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcPeeringConnectionExists", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVpcPeeringConnectionExistsAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpcPeeringConnectionExists", input)
}

func (a *EC2Stub) WaitUntilVpnConnectionAvailable(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpnConnectionAvailable", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVpnConnectionAvailableAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpnConnectionAvailable", input)
}

func (a *EC2Stub) WaitUntilVpnConnectionDeleted(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpnConnectionDeleted", input).Get(ctx, nil)
}

func (a *EC2Stub) WaitUntilVpnConnectionDeletedAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.ec2.WaitUntilVpnConnectionDeleted", input)
}
