// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/fsx"
	"go.temporal.io/sdk/workflow"
)

type FSxClient interface {
	CancelDataRepositoryTask(ctx workflow.Context, input *fsx.CancelDataRepositoryTaskInput) (*fsx.CancelDataRepositoryTaskOutput, error)
	CancelDataRepositoryTaskAsync(ctx workflow.Context, input *fsx.CancelDataRepositoryTaskInput) *FSxCancelDataRepositoryTaskFuture

	CreateBackup(ctx workflow.Context, input *fsx.CreateBackupInput) (*fsx.CreateBackupOutput, error)
	CreateBackupAsync(ctx workflow.Context, input *fsx.CreateBackupInput) *FSxCreateBackupFuture

	CreateDataRepositoryTask(ctx workflow.Context, input *fsx.CreateDataRepositoryTaskInput) (*fsx.CreateDataRepositoryTaskOutput, error)
	CreateDataRepositoryTaskAsync(ctx workflow.Context, input *fsx.CreateDataRepositoryTaskInput) *FSxCreateDataRepositoryTaskFuture

	CreateFileSystem(ctx workflow.Context, input *fsx.CreateFileSystemInput) (*fsx.CreateFileSystemOutput, error)
	CreateFileSystemAsync(ctx workflow.Context, input *fsx.CreateFileSystemInput) *FSxCreateFileSystemFuture

	CreateFileSystemFromBackup(ctx workflow.Context, input *fsx.CreateFileSystemFromBackupInput) (*fsx.CreateFileSystemFromBackupOutput, error)
	CreateFileSystemFromBackupAsync(ctx workflow.Context, input *fsx.CreateFileSystemFromBackupInput) *FSxCreateFileSystemFromBackupFuture

	DeleteBackup(ctx workflow.Context, input *fsx.DeleteBackupInput) (*fsx.DeleteBackupOutput, error)
	DeleteBackupAsync(ctx workflow.Context, input *fsx.DeleteBackupInput) *FSxDeleteBackupFuture

	DeleteFileSystem(ctx workflow.Context, input *fsx.DeleteFileSystemInput) (*fsx.DeleteFileSystemOutput, error)
	DeleteFileSystemAsync(ctx workflow.Context, input *fsx.DeleteFileSystemInput) *FSxDeleteFileSystemFuture

	DescribeBackups(ctx workflow.Context, input *fsx.DescribeBackupsInput) (*fsx.DescribeBackupsOutput, error)
	DescribeBackupsAsync(ctx workflow.Context, input *fsx.DescribeBackupsInput) *FSxDescribeBackupsFuture

	DescribeDataRepositoryTasks(ctx workflow.Context, input *fsx.DescribeDataRepositoryTasksInput) (*fsx.DescribeDataRepositoryTasksOutput, error)
	DescribeDataRepositoryTasksAsync(ctx workflow.Context, input *fsx.DescribeDataRepositoryTasksInput) *FSxDescribeDataRepositoryTasksFuture

	DescribeFileSystems(ctx workflow.Context, input *fsx.DescribeFileSystemsInput) (*fsx.DescribeFileSystemsOutput, error)
	DescribeFileSystemsAsync(ctx workflow.Context, input *fsx.DescribeFileSystemsInput) *FSxDescribeFileSystemsFuture

	ListTagsForResource(ctx workflow.Context, input *fsx.ListTagsForResourceInput) (*fsx.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *fsx.ListTagsForResourceInput) *FSxListTagsForResourceFuture

	TagResource(ctx workflow.Context, input *fsx.TagResourceInput) (*fsx.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *fsx.TagResourceInput) *FSxTagResourceFuture

	UntagResource(ctx workflow.Context, input *fsx.UntagResourceInput) (*fsx.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *fsx.UntagResourceInput) *FSxUntagResourceFuture

	UpdateFileSystem(ctx workflow.Context, input *fsx.UpdateFileSystemInput) (*fsx.UpdateFileSystemOutput, error)
	UpdateFileSystemAsync(ctx workflow.Context, input *fsx.UpdateFileSystemInput) *FSxUpdateFileSystemFuture
}

type FSxStub struct{}

func NewFSxStub() FSxClient {
	return &FSxStub{}
}

type FSxCancelDataRepositoryTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxCancelDataRepositoryTaskFuture) Get(ctx workflow.Context) (*fsx.CancelDataRepositoryTaskOutput, error) {
	var output fsx.CancelDataRepositoryTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxCreateBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxCreateBackupFuture) Get(ctx workflow.Context) (*fsx.CreateBackupOutput, error) {
	var output fsx.CreateBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxCreateDataRepositoryTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxCreateDataRepositoryTaskFuture) Get(ctx workflow.Context) (*fsx.CreateDataRepositoryTaskOutput, error) {
	var output fsx.CreateDataRepositoryTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxCreateFileSystemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxCreateFileSystemFuture) Get(ctx workflow.Context) (*fsx.CreateFileSystemOutput, error) {
	var output fsx.CreateFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxCreateFileSystemFromBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxCreateFileSystemFromBackupFuture) Get(ctx workflow.Context) (*fsx.CreateFileSystemFromBackupOutput, error) {
	var output fsx.CreateFileSystemFromBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxDeleteBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxDeleteBackupFuture) Get(ctx workflow.Context) (*fsx.DeleteBackupOutput, error) {
	var output fsx.DeleteBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxDeleteFileSystemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxDeleteFileSystemFuture) Get(ctx workflow.Context) (*fsx.DeleteFileSystemOutput, error) {
	var output fsx.DeleteFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxDescribeBackupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxDescribeBackupsFuture) Get(ctx workflow.Context) (*fsx.DescribeBackupsOutput, error) {
	var output fsx.DescribeBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxDescribeDataRepositoryTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxDescribeDataRepositoryTasksFuture) Get(ctx workflow.Context) (*fsx.DescribeDataRepositoryTasksOutput, error) {
	var output fsx.DescribeDataRepositoryTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxDescribeFileSystemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxDescribeFileSystemsFuture) Get(ctx workflow.Context) (*fsx.DescribeFileSystemsOutput, error) {
	var output fsx.DescribeFileSystemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxListTagsForResourceFuture) Get(ctx workflow.Context) (*fsx.ListTagsForResourceOutput, error) {
	var output fsx.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxTagResourceFuture) Get(ctx workflow.Context) (*fsx.TagResourceOutput, error) {
	var output fsx.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxUntagResourceFuture) Get(ctx workflow.Context) (*fsx.UntagResourceOutput, error) {
	var output fsx.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FSxUpdateFileSystemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FSxUpdateFileSystemFuture) Get(ctx workflow.Context) (*fsx.UpdateFileSystemOutput, error) {
	var output fsx.UpdateFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) CancelDataRepositoryTask(ctx workflow.Context, input *fsx.CancelDataRepositoryTaskInput) (*fsx.CancelDataRepositoryTaskOutput, error) {
	var output fsx.CancelDataRepositoryTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.CancelDataRepositoryTask", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) CancelDataRepositoryTaskAsync(ctx workflow.Context, input *fsx.CancelDataRepositoryTaskInput) *FSxCancelDataRepositoryTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.CancelDataRepositoryTask", input)
	return &FSxCancelDataRepositoryTaskFuture{Future: future}
}

func (a *FSxStub) CreateBackup(ctx workflow.Context, input *fsx.CreateBackupInput) (*fsx.CreateBackupOutput, error) {
	var output fsx.CreateBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.CreateBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) CreateBackupAsync(ctx workflow.Context, input *fsx.CreateBackupInput) *FSxCreateBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.CreateBackup", input)
	return &FSxCreateBackupFuture{Future: future}
}

func (a *FSxStub) CreateDataRepositoryTask(ctx workflow.Context, input *fsx.CreateDataRepositoryTaskInput) (*fsx.CreateDataRepositoryTaskOutput, error) {
	var output fsx.CreateDataRepositoryTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.CreateDataRepositoryTask", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) CreateDataRepositoryTaskAsync(ctx workflow.Context, input *fsx.CreateDataRepositoryTaskInput) *FSxCreateDataRepositoryTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.CreateDataRepositoryTask", input)
	return &FSxCreateDataRepositoryTaskFuture{Future: future}
}

func (a *FSxStub) CreateFileSystem(ctx workflow.Context, input *fsx.CreateFileSystemInput) (*fsx.CreateFileSystemOutput, error) {
	var output fsx.CreateFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.CreateFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) CreateFileSystemAsync(ctx workflow.Context, input *fsx.CreateFileSystemInput) *FSxCreateFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.CreateFileSystem", input)
	return &FSxCreateFileSystemFuture{Future: future}
}

func (a *FSxStub) CreateFileSystemFromBackup(ctx workflow.Context, input *fsx.CreateFileSystemFromBackupInput) (*fsx.CreateFileSystemFromBackupOutput, error) {
	var output fsx.CreateFileSystemFromBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.CreateFileSystemFromBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) CreateFileSystemFromBackupAsync(ctx workflow.Context, input *fsx.CreateFileSystemFromBackupInput) *FSxCreateFileSystemFromBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.CreateFileSystemFromBackup", input)
	return &FSxCreateFileSystemFromBackupFuture{Future: future}
}

func (a *FSxStub) DeleteBackup(ctx workflow.Context, input *fsx.DeleteBackupInput) (*fsx.DeleteBackupOutput, error) {
	var output fsx.DeleteBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.DeleteBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) DeleteBackupAsync(ctx workflow.Context, input *fsx.DeleteBackupInput) *FSxDeleteBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.DeleteBackup", input)
	return &FSxDeleteBackupFuture{Future: future}
}

func (a *FSxStub) DeleteFileSystem(ctx workflow.Context, input *fsx.DeleteFileSystemInput) (*fsx.DeleteFileSystemOutput, error) {
	var output fsx.DeleteFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.DeleteFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) DeleteFileSystemAsync(ctx workflow.Context, input *fsx.DeleteFileSystemInput) *FSxDeleteFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.DeleteFileSystem", input)
	return &FSxDeleteFileSystemFuture{Future: future}
}

func (a *FSxStub) DescribeBackups(ctx workflow.Context, input *fsx.DescribeBackupsInput) (*fsx.DescribeBackupsOutput, error) {
	var output fsx.DescribeBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.DescribeBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) DescribeBackupsAsync(ctx workflow.Context, input *fsx.DescribeBackupsInput) *FSxDescribeBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.DescribeBackups", input)
	return &FSxDescribeBackupsFuture{Future: future}
}

func (a *FSxStub) DescribeDataRepositoryTasks(ctx workflow.Context, input *fsx.DescribeDataRepositoryTasksInput) (*fsx.DescribeDataRepositoryTasksOutput, error) {
	var output fsx.DescribeDataRepositoryTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.DescribeDataRepositoryTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) DescribeDataRepositoryTasksAsync(ctx workflow.Context, input *fsx.DescribeDataRepositoryTasksInput) *FSxDescribeDataRepositoryTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.DescribeDataRepositoryTasks", input)
	return &FSxDescribeDataRepositoryTasksFuture{Future: future}
}

func (a *FSxStub) DescribeFileSystems(ctx workflow.Context, input *fsx.DescribeFileSystemsInput) (*fsx.DescribeFileSystemsOutput, error) {
	var output fsx.DescribeFileSystemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.DescribeFileSystems", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) DescribeFileSystemsAsync(ctx workflow.Context, input *fsx.DescribeFileSystemsInput) *FSxDescribeFileSystemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.DescribeFileSystems", input)
	return &FSxDescribeFileSystemsFuture{Future: future}
}

func (a *FSxStub) ListTagsForResource(ctx workflow.Context, input *fsx.ListTagsForResourceInput) (*fsx.ListTagsForResourceOutput, error) {
	var output fsx.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) ListTagsForResourceAsync(ctx workflow.Context, input *fsx.ListTagsForResourceInput) *FSxListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.ListTagsForResource", input)
	return &FSxListTagsForResourceFuture{Future: future}
}

func (a *FSxStub) TagResource(ctx workflow.Context, input *fsx.TagResourceInput) (*fsx.TagResourceOutput, error) {
	var output fsx.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) TagResourceAsync(ctx workflow.Context, input *fsx.TagResourceInput) *FSxTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.TagResource", input)
	return &FSxTagResourceFuture{Future: future}
}

func (a *FSxStub) UntagResource(ctx workflow.Context, input *fsx.UntagResourceInput) (*fsx.UntagResourceOutput, error) {
	var output fsx.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) UntagResourceAsync(ctx workflow.Context, input *fsx.UntagResourceInput) *FSxUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.UntagResource", input)
	return &FSxUntagResourceFuture{Future: future}
}

func (a *FSxStub) UpdateFileSystem(ctx workflow.Context, input *fsx.UpdateFileSystemInput) (*fsx.UpdateFileSystemOutput, error) {
	var output fsx.UpdateFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.UpdateFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) UpdateFileSystemAsync(ctx workflow.Context, input *fsx.UpdateFileSystemInput) *FSxUpdateFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.UpdateFileSystem", input)
	return &FSxUpdateFileSystemFuture{Future: future}
}
