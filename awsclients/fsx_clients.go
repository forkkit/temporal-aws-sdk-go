// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/fsx"
	"go.temporal.io/sdk/workflow"
)

type FSxClient interface {
	CancelDataRepositoryTask(ctx workflow.Context, input *fsx.CancelDataRepositoryTaskInput) (*fsx.CancelDataRepositoryTaskOutput, error)
	CancelDataRepositoryTaskAsync(ctx workflow.Context, input *fsx.CancelDataRepositoryTaskInput) *FsxCancelDataRepositoryTaskFuture

	CreateBackup(ctx workflow.Context, input *fsx.CreateBackupInput) (*fsx.CreateBackupOutput, error)
	CreateBackupAsync(ctx workflow.Context, input *fsx.CreateBackupInput) *FsxCreateBackupFuture

	CreateDataRepositoryTask(ctx workflow.Context, input *fsx.CreateDataRepositoryTaskInput) (*fsx.CreateDataRepositoryTaskOutput, error)
	CreateDataRepositoryTaskAsync(ctx workflow.Context, input *fsx.CreateDataRepositoryTaskInput) *FsxCreateDataRepositoryTaskFuture

	CreateFileSystem(ctx workflow.Context, input *fsx.CreateFileSystemInput) (*fsx.CreateFileSystemOutput, error)
	CreateFileSystemAsync(ctx workflow.Context, input *fsx.CreateFileSystemInput) *FsxCreateFileSystemFuture

	CreateFileSystemFromBackup(ctx workflow.Context, input *fsx.CreateFileSystemFromBackupInput) (*fsx.CreateFileSystemFromBackupOutput, error)
	CreateFileSystemFromBackupAsync(ctx workflow.Context, input *fsx.CreateFileSystemFromBackupInput) *FsxCreateFileSystemFromBackupFuture

	DeleteBackup(ctx workflow.Context, input *fsx.DeleteBackupInput) (*fsx.DeleteBackupOutput, error)
	DeleteBackupAsync(ctx workflow.Context, input *fsx.DeleteBackupInput) *FsxDeleteBackupFuture

	DeleteFileSystem(ctx workflow.Context, input *fsx.DeleteFileSystemInput) (*fsx.DeleteFileSystemOutput, error)
	DeleteFileSystemAsync(ctx workflow.Context, input *fsx.DeleteFileSystemInput) *FsxDeleteFileSystemFuture

	DescribeBackups(ctx workflow.Context, input *fsx.DescribeBackupsInput) (*fsx.DescribeBackupsOutput, error)
	DescribeBackupsAsync(ctx workflow.Context, input *fsx.DescribeBackupsInput) *FsxDescribeBackupsFuture

	DescribeDataRepositoryTasks(ctx workflow.Context, input *fsx.DescribeDataRepositoryTasksInput) (*fsx.DescribeDataRepositoryTasksOutput, error)
	DescribeDataRepositoryTasksAsync(ctx workflow.Context, input *fsx.DescribeDataRepositoryTasksInput) *FsxDescribeDataRepositoryTasksFuture

	DescribeFileSystems(ctx workflow.Context, input *fsx.DescribeFileSystemsInput) (*fsx.DescribeFileSystemsOutput, error)
	DescribeFileSystemsAsync(ctx workflow.Context, input *fsx.DescribeFileSystemsInput) *FsxDescribeFileSystemsFuture

	ListTagsForResource(ctx workflow.Context, input *fsx.ListTagsForResourceInput) (*fsx.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *fsx.ListTagsForResourceInput) *FsxListTagsForResourceFuture

	TagResource(ctx workflow.Context, input *fsx.TagResourceInput) (*fsx.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *fsx.TagResourceInput) *FsxTagResourceFuture

	UntagResource(ctx workflow.Context, input *fsx.UntagResourceInput) (*fsx.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *fsx.UntagResourceInput) *FsxUntagResourceFuture

	UpdateFileSystem(ctx workflow.Context, input *fsx.UpdateFileSystemInput) (*fsx.UpdateFileSystemOutput, error)
	UpdateFileSystemAsync(ctx workflow.Context, input *fsx.UpdateFileSystemInput) *FsxUpdateFileSystemFuture
}

type FSxStub struct{}

func NewFSxStub() FSxClient {
	return &FSxStub{}
}

type FsxCancelDataRepositoryTaskFuture struct {
	Future workflow.Future
}

func (r *FsxCancelDataRepositoryTaskFuture) Get(ctx workflow.Context) (*fsx.CancelDataRepositoryTaskOutput, error) {
	var output fsx.CancelDataRepositoryTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxCreateBackupFuture struct {
	Future workflow.Future
}

func (r *FsxCreateBackupFuture) Get(ctx workflow.Context) (*fsx.CreateBackupOutput, error) {
	var output fsx.CreateBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxCreateDataRepositoryTaskFuture struct {
	Future workflow.Future
}

func (r *FsxCreateDataRepositoryTaskFuture) Get(ctx workflow.Context) (*fsx.CreateDataRepositoryTaskOutput, error) {
	var output fsx.CreateDataRepositoryTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxCreateFileSystemFuture struct {
	Future workflow.Future
}

func (r *FsxCreateFileSystemFuture) Get(ctx workflow.Context) (*fsx.CreateFileSystemOutput, error) {
	var output fsx.CreateFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxCreateFileSystemFromBackupFuture struct {
	Future workflow.Future
}

func (r *FsxCreateFileSystemFromBackupFuture) Get(ctx workflow.Context) (*fsx.CreateFileSystemFromBackupOutput, error) {
	var output fsx.CreateFileSystemFromBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxDeleteBackupFuture struct {
	Future workflow.Future
}

func (r *FsxDeleteBackupFuture) Get(ctx workflow.Context) (*fsx.DeleteBackupOutput, error) {
	var output fsx.DeleteBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxDeleteFileSystemFuture struct {
	Future workflow.Future
}

func (r *FsxDeleteFileSystemFuture) Get(ctx workflow.Context) (*fsx.DeleteFileSystemOutput, error) {
	var output fsx.DeleteFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxDescribeBackupsFuture struct {
	Future workflow.Future
}

func (r *FsxDescribeBackupsFuture) Get(ctx workflow.Context) (*fsx.DescribeBackupsOutput, error) {
	var output fsx.DescribeBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxDescribeDataRepositoryTasksFuture struct {
	Future workflow.Future
}

func (r *FsxDescribeDataRepositoryTasksFuture) Get(ctx workflow.Context) (*fsx.DescribeDataRepositoryTasksOutput, error) {
	var output fsx.DescribeDataRepositoryTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxDescribeFileSystemsFuture struct {
	Future workflow.Future
}

func (r *FsxDescribeFileSystemsFuture) Get(ctx workflow.Context) (*fsx.DescribeFileSystemsOutput, error) {
	var output fsx.DescribeFileSystemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *FsxListTagsForResourceFuture) Get(ctx workflow.Context) (*fsx.ListTagsForResourceOutput, error) {
	var output fsx.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxTagResourceFuture struct {
	Future workflow.Future
}

func (r *FsxTagResourceFuture) Get(ctx workflow.Context) (*fsx.TagResourceOutput, error) {
	var output fsx.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxUntagResourceFuture struct {
	Future workflow.Future
}

func (r *FsxUntagResourceFuture) Get(ctx workflow.Context) (*fsx.UntagResourceOutput, error) {
	var output fsx.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FsxUpdateFileSystemFuture struct {
	Future workflow.Future
}

func (r *FsxUpdateFileSystemFuture) Get(ctx workflow.Context) (*fsx.UpdateFileSystemOutput, error) {
	var output fsx.UpdateFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) CancelDataRepositoryTask(ctx workflow.Context, input *fsx.CancelDataRepositoryTaskInput) (*fsx.CancelDataRepositoryTaskOutput, error) {
	var output fsx.CancelDataRepositoryTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.CancelDataRepositoryTask", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) CancelDataRepositoryTaskAsync(ctx workflow.Context, input *fsx.CancelDataRepositoryTaskInput) *FsxCancelDataRepositoryTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.CancelDataRepositoryTask", input)
	return &FsxCancelDataRepositoryTaskFuture{Future: future}
}

func (a *FSxStub) CreateBackup(ctx workflow.Context, input *fsx.CreateBackupInput) (*fsx.CreateBackupOutput, error) {
	var output fsx.CreateBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.CreateBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) CreateBackupAsync(ctx workflow.Context, input *fsx.CreateBackupInput) *FsxCreateBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.CreateBackup", input)
	return &FsxCreateBackupFuture{Future: future}
}

func (a *FSxStub) CreateDataRepositoryTask(ctx workflow.Context, input *fsx.CreateDataRepositoryTaskInput) (*fsx.CreateDataRepositoryTaskOutput, error) {
	var output fsx.CreateDataRepositoryTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.CreateDataRepositoryTask", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) CreateDataRepositoryTaskAsync(ctx workflow.Context, input *fsx.CreateDataRepositoryTaskInput) *FsxCreateDataRepositoryTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.CreateDataRepositoryTask", input)
	return &FsxCreateDataRepositoryTaskFuture{Future: future}
}

func (a *FSxStub) CreateFileSystem(ctx workflow.Context, input *fsx.CreateFileSystemInput) (*fsx.CreateFileSystemOutput, error) {
	var output fsx.CreateFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.CreateFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) CreateFileSystemAsync(ctx workflow.Context, input *fsx.CreateFileSystemInput) *FsxCreateFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.CreateFileSystem", input)
	return &FsxCreateFileSystemFuture{Future: future}
}

func (a *FSxStub) CreateFileSystemFromBackup(ctx workflow.Context, input *fsx.CreateFileSystemFromBackupInput) (*fsx.CreateFileSystemFromBackupOutput, error) {
	var output fsx.CreateFileSystemFromBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.CreateFileSystemFromBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) CreateFileSystemFromBackupAsync(ctx workflow.Context, input *fsx.CreateFileSystemFromBackupInput) *FsxCreateFileSystemFromBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.CreateFileSystemFromBackup", input)
	return &FsxCreateFileSystemFromBackupFuture{Future: future}
}

func (a *FSxStub) DeleteBackup(ctx workflow.Context, input *fsx.DeleteBackupInput) (*fsx.DeleteBackupOutput, error) {
	var output fsx.DeleteBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.DeleteBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) DeleteBackupAsync(ctx workflow.Context, input *fsx.DeleteBackupInput) *FsxDeleteBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.DeleteBackup", input)
	return &FsxDeleteBackupFuture{Future: future}
}

func (a *FSxStub) DeleteFileSystem(ctx workflow.Context, input *fsx.DeleteFileSystemInput) (*fsx.DeleteFileSystemOutput, error) {
	var output fsx.DeleteFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.DeleteFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) DeleteFileSystemAsync(ctx workflow.Context, input *fsx.DeleteFileSystemInput) *FsxDeleteFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.DeleteFileSystem", input)
	return &FsxDeleteFileSystemFuture{Future: future}
}

func (a *FSxStub) DescribeBackups(ctx workflow.Context, input *fsx.DescribeBackupsInput) (*fsx.DescribeBackupsOutput, error) {
	var output fsx.DescribeBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.DescribeBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) DescribeBackupsAsync(ctx workflow.Context, input *fsx.DescribeBackupsInput) *FsxDescribeBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.DescribeBackups", input)
	return &FsxDescribeBackupsFuture{Future: future}
}

func (a *FSxStub) DescribeDataRepositoryTasks(ctx workflow.Context, input *fsx.DescribeDataRepositoryTasksInput) (*fsx.DescribeDataRepositoryTasksOutput, error) {
	var output fsx.DescribeDataRepositoryTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.DescribeDataRepositoryTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) DescribeDataRepositoryTasksAsync(ctx workflow.Context, input *fsx.DescribeDataRepositoryTasksInput) *FsxDescribeDataRepositoryTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.DescribeDataRepositoryTasks", input)
	return &FsxDescribeDataRepositoryTasksFuture{Future: future}
}

func (a *FSxStub) DescribeFileSystems(ctx workflow.Context, input *fsx.DescribeFileSystemsInput) (*fsx.DescribeFileSystemsOutput, error) {
	var output fsx.DescribeFileSystemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.DescribeFileSystems", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) DescribeFileSystemsAsync(ctx workflow.Context, input *fsx.DescribeFileSystemsInput) *FsxDescribeFileSystemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.DescribeFileSystems", input)
	return &FsxDescribeFileSystemsFuture{Future: future}
}

func (a *FSxStub) ListTagsForResource(ctx workflow.Context, input *fsx.ListTagsForResourceInput) (*fsx.ListTagsForResourceOutput, error) {
	var output fsx.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) ListTagsForResourceAsync(ctx workflow.Context, input *fsx.ListTagsForResourceInput) *FsxListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.ListTagsForResource", input)
	return &FsxListTagsForResourceFuture{Future: future}
}

func (a *FSxStub) TagResource(ctx workflow.Context, input *fsx.TagResourceInput) (*fsx.TagResourceOutput, error) {
	var output fsx.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) TagResourceAsync(ctx workflow.Context, input *fsx.TagResourceInput) *FsxTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.TagResource", input)
	return &FsxTagResourceFuture{Future: future}
}

func (a *FSxStub) UntagResource(ctx workflow.Context, input *fsx.UntagResourceInput) (*fsx.UntagResourceOutput, error) {
	var output fsx.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) UntagResourceAsync(ctx workflow.Context, input *fsx.UntagResourceInput) *FsxUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.UntagResource", input)
	return &FsxUntagResourceFuture{Future: future}
}

func (a *FSxStub) UpdateFileSystem(ctx workflow.Context, input *fsx.UpdateFileSystemInput) (*fsx.UpdateFileSystemOutput, error) {
	var output fsx.UpdateFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws.fsx.UpdateFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *FSxStub) UpdateFileSystemAsync(ctx workflow.Context, input *fsx.UpdateFileSystemInput) *FsxUpdateFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fsx.UpdateFileSystem", input)
	return &FsxUpdateFileSystemFuture{Future: future}
}
