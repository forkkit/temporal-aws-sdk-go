// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/apigatewayv2"
	"go.temporal.io/sdk/workflow"
)

type ApiGatewayV2Client interface {
	CreateApi(ctx workflow.Context, input *apigatewayv2.CreateApiInput) (*apigatewayv2.CreateApiOutput, error)
	CreateApiAsync(ctx workflow.Context, input *apigatewayv2.CreateApiInput) *Apigatewayv2CreateApiFuture

	CreateApiMapping(ctx workflow.Context, input *apigatewayv2.CreateApiMappingInput) (*apigatewayv2.CreateApiMappingOutput, error)
	CreateApiMappingAsync(ctx workflow.Context, input *apigatewayv2.CreateApiMappingInput) *Apigatewayv2CreateApiMappingFuture

	CreateAuthorizer(ctx workflow.Context, input *apigatewayv2.CreateAuthorizerInput) (*apigatewayv2.CreateAuthorizerOutput, error)
	CreateAuthorizerAsync(ctx workflow.Context, input *apigatewayv2.CreateAuthorizerInput) *Apigatewayv2CreateAuthorizerFuture

	CreateDeployment(ctx workflow.Context, input *apigatewayv2.CreateDeploymentInput) (*apigatewayv2.CreateDeploymentOutput, error)
	CreateDeploymentAsync(ctx workflow.Context, input *apigatewayv2.CreateDeploymentInput) *Apigatewayv2CreateDeploymentFuture

	CreateDomainName(ctx workflow.Context, input *apigatewayv2.CreateDomainNameInput) (*apigatewayv2.CreateDomainNameOutput, error)
	CreateDomainNameAsync(ctx workflow.Context, input *apigatewayv2.CreateDomainNameInput) *Apigatewayv2CreateDomainNameFuture

	CreateIntegration(ctx workflow.Context, input *apigatewayv2.CreateIntegrationInput) (*apigatewayv2.CreateIntegrationOutput, error)
	CreateIntegrationAsync(ctx workflow.Context, input *apigatewayv2.CreateIntegrationInput) *Apigatewayv2CreateIntegrationFuture

	CreateIntegrationResponse(ctx workflow.Context, input *apigatewayv2.CreateIntegrationResponseInput) (*apigatewayv2.CreateIntegrationResponseOutput, error)
	CreateIntegrationResponseAsync(ctx workflow.Context, input *apigatewayv2.CreateIntegrationResponseInput) *Apigatewayv2CreateIntegrationResponseFuture

	CreateModel(ctx workflow.Context, input *apigatewayv2.CreateModelInput) (*apigatewayv2.CreateModelOutput, error)
	CreateModelAsync(ctx workflow.Context, input *apigatewayv2.CreateModelInput) *Apigatewayv2CreateModelFuture

	CreateRoute(ctx workflow.Context, input *apigatewayv2.CreateRouteInput) (*apigatewayv2.CreateRouteOutput, error)
	CreateRouteAsync(ctx workflow.Context, input *apigatewayv2.CreateRouteInput) *Apigatewayv2CreateRouteFuture

	CreateRouteResponse(ctx workflow.Context, input *apigatewayv2.CreateRouteResponseInput) (*apigatewayv2.CreateRouteResponseOutput, error)
	CreateRouteResponseAsync(ctx workflow.Context, input *apigatewayv2.CreateRouteResponseInput) *Apigatewayv2CreateRouteResponseFuture

	CreateStage(ctx workflow.Context, input *apigatewayv2.CreateStageInput) (*apigatewayv2.CreateStageOutput, error)
	CreateStageAsync(ctx workflow.Context, input *apigatewayv2.CreateStageInput) *Apigatewayv2CreateStageFuture

	CreateVpcLink(ctx workflow.Context, input *apigatewayv2.CreateVpcLinkInput) (*apigatewayv2.CreateVpcLinkOutput, error)
	CreateVpcLinkAsync(ctx workflow.Context, input *apigatewayv2.CreateVpcLinkInput) *Apigatewayv2CreateVpcLinkFuture

	DeleteAccessLogSettings(ctx workflow.Context, input *apigatewayv2.DeleteAccessLogSettingsInput) (*apigatewayv2.DeleteAccessLogSettingsOutput, error)
	DeleteAccessLogSettingsAsync(ctx workflow.Context, input *apigatewayv2.DeleteAccessLogSettingsInput) *Apigatewayv2DeleteAccessLogSettingsFuture

	DeleteApi(ctx workflow.Context, input *apigatewayv2.DeleteApiInput) (*apigatewayv2.DeleteApiOutput, error)
	DeleteApiAsync(ctx workflow.Context, input *apigatewayv2.DeleteApiInput) *Apigatewayv2DeleteApiFuture

	DeleteApiMapping(ctx workflow.Context, input *apigatewayv2.DeleteApiMappingInput) (*apigatewayv2.DeleteApiMappingOutput, error)
	DeleteApiMappingAsync(ctx workflow.Context, input *apigatewayv2.DeleteApiMappingInput) *Apigatewayv2DeleteApiMappingFuture

	DeleteAuthorizer(ctx workflow.Context, input *apigatewayv2.DeleteAuthorizerInput) (*apigatewayv2.DeleteAuthorizerOutput, error)
	DeleteAuthorizerAsync(ctx workflow.Context, input *apigatewayv2.DeleteAuthorizerInput) *Apigatewayv2DeleteAuthorizerFuture

	DeleteCorsConfiguration(ctx workflow.Context, input *apigatewayv2.DeleteCorsConfigurationInput) (*apigatewayv2.DeleteCorsConfigurationOutput, error)
	DeleteCorsConfigurationAsync(ctx workflow.Context, input *apigatewayv2.DeleteCorsConfigurationInput) *Apigatewayv2DeleteCorsConfigurationFuture

	DeleteDeployment(ctx workflow.Context, input *apigatewayv2.DeleteDeploymentInput) (*apigatewayv2.DeleteDeploymentOutput, error)
	DeleteDeploymentAsync(ctx workflow.Context, input *apigatewayv2.DeleteDeploymentInput) *Apigatewayv2DeleteDeploymentFuture

	DeleteDomainName(ctx workflow.Context, input *apigatewayv2.DeleteDomainNameInput) (*apigatewayv2.DeleteDomainNameOutput, error)
	DeleteDomainNameAsync(ctx workflow.Context, input *apigatewayv2.DeleteDomainNameInput) *Apigatewayv2DeleteDomainNameFuture

	DeleteIntegration(ctx workflow.Context, input *apigatewayv2.DeleteIntegrationInput) (*apigatewayv2.DeleteIntegrationOutput, error)
	DeleteIntegrationAsync(ctx workflow.Context, input *apigatewayv2.DeleteIntegrationInput) *Apigatewayv2DeleteIntegrationFuture

	DeleteIntegrationResponse(ctx workflow.Context, input *apigatewayv2.DeleteIntegrationResponseInput) (*apigatewayv2.DeleteIntegrationResponseOutput, error)
	DeleteIntegrationResponseAsync(ctx workflow.Context, input *apigatewayv2.DeleteIntegrationResponseInput) *Apigatewayv2DeleteIntegrationResponseFuture

	DeleteModel(ctx workflow.Context, input *apigatewayv2.DeleteModelInput) (*apigatewayv2.DeleteModelOutput, error)
	DeleteModelAsync(ctx workflow.Context, input *apigatewayv2.DeleteModelInput) *Apigatewayv2DeleteModelFuture

	DeleteRoute(ctx workflow.Context, input *apigatewayv2.DeleteRouteInput) (*apigatewayv2.DeleteRouteOutput, error)
	DeleteRouteAsync(ctx workflow.Context, input *apigatewayv2.DeleteRouteInput) *Apigatewayv2DeleteRouteFuture

	DeleteRouteRequestParameter(ctx workflow.Context, input *apigatewayv2.DeleteRouteRequestParameterInput) (*apigatewayv2.DeleteRouteRequestParameterOutput, error)
	DeleteRouteRequestParameterAsync(ctx workflow.Context, input *apigatewayv2.DeleteRouteRequestParameterInput) *Apigatewayv2DeleteRouteRequestParameterFuture

	DeleteRouteResponse(ctx workflow.Context, input *apigatewayv2.DeleteRouteResponseInput) (*apigatewayv2.DeleteRouteResponseOutput, error)
	DeleteRouteResponseAsync(ctx workflow.Context, input *apigatewayv2.DeleteRouteResponseInput) *Apigatewayv2DeleteRouteResponseFuture

	DeleteRouteSettings(ctx workflow.Context, input *apigatewayv2.DeleteRouteSettingsInput) (*apigatewayv2.DeleteRouteSettingsOutput, error)
	DeleteRouteSettingsAsync(ctx workflow.Context, input *apigatewayv2.DeleteRouteSettingsInput) *Apigatewayv2DeleteRouteSettingsFuture

	DeleteStage(ctx workflow.Context, input *apigatewayv2.DeleteStageInput) (*apigatewayv2.DeleteStageOutput, error)
	DeleteStageAsync(ctx workflow.Context, input *apigatewayv2.DeleteStageInput) *Apigatewayv2DeleteStageFuture

	DeleteVpcLink(ctx workflow.Context, input *apigatewayv2.DeleteVpcLinkInput) (*apigatewayv2.DeleteVpcLinkOutput, error)
	DeleteVpcLinkAsync(ctx workflow.Context, input *apigatewayv2.DeleteVpcLinkInput) *Apigatewayv2DeleteVpcLinkFuture

	ExportApi(ctx workflow.Context, input *apigatewayv2.ExportApiInput) (*apigatewayv2.ExportApiOutput, error)
	ExportApiAsync(ctx workflow.Context, input *apigatewayv2.ExportApiInput) *Apigatewayv2ExportApiFuture

	GetApi(ctx workflow.Context, input *apigatewayv2.GetApiInput) (*apigatewayv2.GetApiOutput, error)
	GetApiAsync(ctx workflow.Context, input *apigatewayv2.GetApiInput) *Apigatewayv2GetApiFuture

	GetApiMapping(ctx workflow.Context, input *apigatewayv2.GetApiMappingInput) (*apigatewayv2.GetApiMappingOutput, error)
	GetApiMappingAsync(ctx workflow.Context, input *apigatewayv2.GetApiMappingInput) *Apigatewayv2GetApiMappingFuture

	GetApiMappings(ctx workflow.Context, input *apigatewayv2.GetApiMappingsInput) (*apigatewayv2.GetApiMappingsOutput, error)
	GetApiMappingsAsync(ctx workflow.Context, input *apigatewayv2.GetApiMappingsInput) *Apigatewayv2GetApiMappingsFuture

	GetApis(ctx workflow.Context, input *apigatewayv2.GetApisInput) (*apigatewayv2.GetApisOutput, error)
	GetApisAsync(ctx workflow.Context, input *apigatewayv2.GetApisInput) *Apigatewayv2GetApisFuture

	GetAuthorizer(ctx workflow.Context, input *apigatewayv2.GetAuthorizerInput) (*apigatewayv2.GetAuthorizerOutput, error)
	GetAuthorizerAsync(ctx workflow.Context, input *apigatewayv2.GetAuthorizerInput) *Apigatewayv2GetAuthorizerFuture

	GetAuthorizers(ctx workflow.Context, input *apigatewayv2.GetAuthorizersInput) (*apigatewayv2.GetAuthorizersOutput, error)
	GetAuthorizersAsync(ctx workflow.Context, input *apigatewayv2.GetAuthorizersInput) *Apigatewayv2GetAuthorizersFuture

	GetDeployment(ctx workflow.Context, input *apigatewayv2.GetDeploymentInput) (*apigatewayv2.GetDeploymentOutput, error)
	GetDeploymentAsync(ctx workflow.Context, input *apigatewayv2.GetDeploymentInput) *Apigatewayv2GetDeploymentFuture

	GetDeployments(ctx workflow.Context, input *apigatewayv2.GetDeploymentsInput) (*apigatewayv2.GetDeploymentsOutput, error)
	GetDeploymentsAsync(ctx workflow.Context, input *apigatewayv2.GetDeploymentsInput) *Apigatewayv2GetDeploymentsFuture

	GetDomainName(ctx workflow.Context, input *apigatewayv2.GetDomainNameInput) (*apigatewayv2.GetDomainNameOutput, error)
	GetDomainNameAsync(ctx workflow.Context, input *apigatewayv2.GetDomainNameInput) *Apigatewayv2GetDomainNameFuture

	GetDomainNames(ctx workflow.Context, input *apigatewayv2.GetDomainNamesInput) (*apigatewayv2.GetDomainNamesOutput, error)
	GetDomainNamesAsync(ctx workflow.Context, input *apigatewayv2.GetDomainNamesInput) *Apigatewayv2GetDomainNamesFuture

	GetIntegration(ctx workflow.Context, input *apigatewayv2.GetIntegrationInput) (*apigatewayv2.GetIntegrationOutput, error)
	GetIntegrationAsync(ctx workflow.Context, input *apigatewayv2.GetIntegrationInput) *Apigatewayv2GetIntegrationFuture

	GetIntegrationResponse(ctx workflow.Context, input *apigatewayv2.GetIntegrationResponseInput) (*apigatewayv2.GetIntegrationResponseOutput, error)
	GetIntegrationResponseAsync(ctx workflow.Context, input *apigatewayv2.GetIntegrationResponseInput) *Apigatewayv2GetIntegrationResponseFuture

	GetIntegrationResponses(ctx workflow.Context, input *apigatewayv2.GetIntegrationResponsesInput) (*apigatewayv2.GetIntegrationResponsesOutput, error)
	GetIntegrationResponsesAsync(ctx workflow.Context, input *apigatewayv2.GetIntegrationResponsesInput) *Apigatewayv2GetIntegrationResponsesFuture

	GetIntegrations(ctx workflow.Context, input *apigatewayv2.GetIntegrationsInput) (*apigatewayv2.GetIntegrationsOutput, error)
	GetIntegrationsAsync(ctx workflow.Context, input *apigatewayv2.GetIntegrationsInput) *Apigatewayv2GetIntegrationsFuture

	GetModel(ctx workflow.Context, input *apigatewayv2.GetModelInput) (*apigatewayv2.GetModelOutput, error)
	GetModelAsync(ctx workflow.Context, input *apigatewayv2.GetModelInput) *Apigatewayv2GetModelFuture

	GetModelTemplate(ctx workflow.Context, input *apigatewayv2.GetModelTemplateInput) (*apigatewayv2.GetModelTemplateOutput, error)
	GetModelTemplateAsync(ctx workflow.Context, input *apigatewayv2.GetModelTemplateInput) *Apigatewayv2GetModelTemplateFuture

	GetModels(ctx workflow.Context, input *apigatewayv2.GetModelsInput) (*apigatewayv2.GetModelsOutput, error)
	GetModelsAsync(ctx workflow.Context, input *apigatewayv2.GetModelsInput) *Apigatewayv2GetModelsFuture

	GetRoute(ctx workflow.Context, input *apigatewayv2.GetRouteInput) (*apigatewayv2.GetRouteOutput, error)
	GetRouteAsync(ctx workflow.Context, input *apigatewayv2.GetRouteInput) *Apigatewayv2GetRouteFuture

	GetRouteResponse(ctx workflow.Context, input *apigatewayv2.GetRouteResponseInput) (*apigatewayv2.GetRouteResponseOutput, error)
	GetRouteResponseAsync(ctx workflow.Context, input *apigatewayv2.GetRouteResponseInput) *Apigatewayv2GetRouteResponseFuture

	GetRouteResponses(ctx workflow.Context, input *apigatewayv2.GetRouteResponsesInput) (*apigatewayv2.GetRouteResponsesOutput, error)
	GetRouteResponsesAsync(ctx workflow.Context, input *apigatewayv2.GetRouteResponsesInput) *Apigatewayv2GetRouteResponsesFuture

	GetRoutes(ctx workflow.Context, input *apigatewayv2.GetRoutesInput) (*apigatewayv2.GetRoutesOutput, error)
	GetRoutesAsync(ctx workflow.Context, input *apigatewayv2.GetRoutesInput) *Apigatewayv2GetRoutesFuture

	GetStage(ctx workflow.Context, input *apigatewayv2.GetStageInput) (*apigatewayv2.GetStageOutput, error)
	GetStageAsync(ctx workflow.Context, input *apigatewayv2.GetStageInput) *Apigatewayv2GetStageFuture

	GetStages(ctx workflow.Context, input *apigatewayv2.GetStagesInput) (*apigatewayv2.GetStagesOutput, error)
	GetStagesAsync(ctx workflow.Context, input *apigatewayv2.GetStagesInput) *Apigatewayv2GetStagesFuture

	GetTags(ctx workflow.Context, input *apigatewayv2.GetTagsInput) (*apigatewayv2.GetTagsOutput, error)
	GetTagsAsync(ctx workflow.Context, input *apigatewayv2.GetTagsInput) *Apigatewayv2GetTagsFuture

	GetVpcLink(ctx workflow.Context, input *apigatewayv2.GetVpcLinkInput) (*apigatewayv2.GetVpcLinkOutput, error)
	GetVpcLinkAsync(ctx workflow.Context, input *apigatewayv2.GetVpcLinkInput) *Apigatewayv2GetVpcLinkFuture

	GetVpcLinks(ctx workflow.Context, input *apigatewayv2.GetVpcLinksInput) (*apigatewayv2.GetVpcLinksOutput, error)
	GetVpcLinksAsync(ctx workflow.Context, input *apigatewayv2.GetVpcLinksInput) *Apigatewayv2GetVpcLinksFuture

	ImportApi(ctx workflow.Context, input *apigatewayv2.ImportApiInput) (*apigatewayv2.ImportApiOutput, error)
	ImportApiAsync(ctx workflow.Context, input *apigatewayv2.ImportApiInput) *Apigatewayv2ImportApiFuture

	ReimportApi(ctx workflow.Context, input *apigatewayv2.ReimportApiInput) (*apigatewayv2.ReimportApiOutput, error)
	ReimportApiAsync(ctx workflow.Context, input *apigatewayv2.ReimportApiInput) *Apigatewayv2ReimportApiFuture

	ResetAuthorizersCache(ctx workflow.Context, input *apigatewayv2.ResetAuthorizersCacheInput) (*apigatewayv2.ResetAuthorizersCacheOutput, error)
	ResetAuthorizersCacheAsync(ctx workflow.Context, input *apigatewayv2.ResetAuthorizersCacheInput) *Apigatewayv2ResetAuthorizersCacheFuture

	TagResource(ctx workflow.Context, input *apigatewayv2.TagResourceInput) (*apigatewayv2.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *apigatewayv2.TagResourceInput) *Apigatewayv2TagResourceFuture

	UntagResource(ctx workflow.Context, input *apigatewayv2.UntagResourceInput) (*apigatewayv2.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *apigatewayv2.UntagResourceInput) *Apigatewayv2UntagResourceFuture

	UpdateApi(ctx workflow.Context, input *apigatewayv2.UpdateApiInput) (*apigatewayv2.UpdateApiOutput, error)
	UpdateApiAsync(ctx workflow.Context, input *apigatewayv2.UpdateApiInput) *Apigatewayv2UpdateApiFuture

	UpdateApiMapping(ctx workflow.Context, input *apigatewayv2.UpdateApiMappingInput) (*apigatewayv2.UpdateApiMappingOutput, error)
	UpdateApiMappingAsync(ctx workflow.Context, input *apigatewayv2.UpdateApiMappingInput) *Apigatewayv2UpdateApiMappingFuture

	UpdateAuthorizer(ctx workflow.Context, input *apigatewayv2.UpdateAuthorizerInput) (*apigatewayv2.UpdateAuthorizerOutput, error)
	UpdateAuthorizerAsync(ctx workflow.Context, input *apigatewayv2.UpdateAuthorizerInput) *Apigatewayv2UpdateAuthorizerFuture

	UpdateDeployment(ctx workflow.Context, input *apigatewayv2.UpdateDeploymentInput) (*apigatewayv2.UpdateDeploymentOutput, error)
	UpdateDeploymentAsync(ctx workflow.Context, input *apigatewayv2.UpdateDeploymentInput) *Apigatewayv2UpdateDeploymentFuture

	UpdateDomainName(ctx workflow.Context, input *apigatewayv2.UpdateDomainNameInput) (*apigatewayv2.UpdateDomainNameOutput, error)
	UpdateDomainNameAsync(ctx workflow.Context, input *apigatewayv2.UpdateDomainNameInput) *Apigatewayv2UpdateDomainNameFuture

	UpdateIntegration(ctx workflow.Context, input *apigatewayv2.UpdateIntegrationInput) (*apigatewayv2.UpdateIntegrationOutput, error)
	UpdateIntegrationAsync(ctx workflow.Context, input *apigatewayv2.UpdateIntegrationInput) *Apigatewayv2UpdateIntegrationFuture

	UpdateIntegrationResponse(ctx workflow.Context, input *apigatewayv2.UpdateIntegrationResponseInput) (*apigatewayv2.UpdateIntegrationResponseOutput, error)
	UpdateIntegrationResponseAsync(ctx workflow.Context, input *apigatewayv2.UpdateIntegrationResponseInput) *Apigatewayv2UpdateIntegrationResponseFuture

	UpdateModel(ctx workflow.Context, input *apigatewayv2.UpdateModelInput) (*apigatewayv2.UpdateModelOutput, error)
	UpdateModelAsync(ctx workflow.Context, input *apigatewayv2.UpdateModelInput) *Apigatewayv2UpdateModelFuture

	UpdateRoute(ctx workflow.Context, input *apigatewayv2.UpdateRouteInput) (*apigatewayv2.UpdateRouteOutput, error)
	UpdateRouteAsync(ctx workflow.Context, input *apigatewayv2.UpdateRouteInput) *Apigatewayv2UpdateRouteFuture

	UpdateRouteResponse(ctx workflow.Context, input *apigatewayv2.UpdateRouteResponseInput) (*apigatewayv2.UpdateRouteResponseOutput, error)
	UpdateRouteResponseAsync(ctx workflow.Context, input *apigatewayv2.UpdateRouteResponseInput) *Apigatewayv2UpdateRouteResponseFuture

	UpdateStage(ctx workflow.Context, input *apigatewayv2.UpdateStageInput) (*apigatewayv2.UpdateStageOutput, error)
	UpdateStageAsync(ctx workflow.Context, input *apigatewayv2.UpdateStageInput) *Apigatewayv2UpdateStageFuture

	UpdateVpcLink(ctx workflow.Context, input *apigatewayv2.UpdateVpcLinkInput) (*apigatewayv2.UpdateVpcLinkOutput, error)
	UpdateVpcLinkAsync(ctx workflow.Context, input *apigatewayv2.UpdateVpcLinkInput) *Apigatewayv2UpdateVpcLinkFuture
}

type ApiGatewayV2Stub struct{}

func NewApiGatewayV2Stub() ApiGatewayV2Client {
	return &ApiGatewayV2Stub{}
}

type Apigatewayv2CreateApiFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2CreateApiFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateApiOutput, error) {
	var output apigatewayv2.CreateApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2CreateApiMappingFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2CreateApiMappingFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateApiMappingOutput, error) {
	var output apigatewayv2.CreateApiMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2CreateAuthorizerFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2CreateAuthorizerFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateAuthorizerOutput, error) {
	var output apigatewayv2.CreateAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2CreateDeploymentFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2CreateDeploymentFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateDeploymentOutput, error) {
	var output apigatewayv2.CreateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2CreateDomainNameFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2CreateDomainNameFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateDomainNameOutput, error) {
	var output apigatewayv2.CreateDomainNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2CreateIntegrationFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2CreateIntegrationFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateIntegrationOutput, error) {
	var output apigatewayv2.CreateIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2CreateIntegrationResponseFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2CreateIntegrationResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateIntegrationResponseOutput, error) {
	var output apigatewayv2.CreateIntegrationResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2CreateModelFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2CreateModelFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateModelOutput, error) {
	var output apigatewayv2.CreateModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2CreateRouteFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2CreateRouteFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateRouteOutput, error) {
	var output apigatewayv2.CreateRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2CreateRouteResponseFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2CreateRouteResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateRouteResponseOutput, error) {
	var output apigatewayv2.CreateRouteResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2CreateStageFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2CreateStageFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateStageOutput, error) {
	var output apigatewayv2.CreateStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2CreateVpcLinkFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2CreateVpcLinkFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateVpcLinkOutput, error) {
	var output apigatewayv2.CreateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteAccessLogSettingsFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteAccessLogSettingsFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteAccessLogSettingsOutput, error) {
	var output apigatewayv2.DeleteAccessLogSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteApiFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteApiFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteApiOutput, error) {
	var output apigatewayv2.DeleteApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteApiMappingFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteApiMappingFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteApiMappingOutput, error) {
	var output apigatewayv2.DeleteApiMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteAuthorizerFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteAuthorizerFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteAuthorizerOutput, error) {
	var output apigatewayv2.DeleteAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteCorsConfigurationFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteCorsConfigurationFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteCorsConfigurationOutput, error) {
	var output apigatewayv2.DeleteCorsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteDeploymentFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteDeploymentFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteDeploymentOutput, error) {
	var output apigatewayv2.DeleteDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteDomainNameFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteDomainNameFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteDomainNameOutput, error) {
	var output apigatewayv2.DeleteDomainNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteIntegrationFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteIntegrationFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteIntegrationOutput, error) {
	var output apigatewayv2.DeleteIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteIntegrationResponseFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteIntegrationResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteIntegrationResponseOutput, error) {
	var output apigatewayv2.DeleteIntegrationResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteModelFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteModelFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteModelOutput, error) {
	var output apigatewayv2.DeleteModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteRouteFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteRouteFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteRouteOutput, error) {
	var output apigatewayv2.DeleteRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteRouteRequestParameterFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteRouteRequestParameterFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteRouteRequestParameterOutput, error) {
	var output apigatewayv2.DeleteRouteRequestParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteRouteResponseFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteRouteResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteRouteResponseOutput, error) {
	var output apigatewayv2.DeleteRouteResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteRouteSettingsFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteRouteSettingsFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteRouteSettingsOutput, error) {
	var output apigatewayv2.DeleteRouteSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteStageFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteStageFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteStageOutput, error) {
	var output apigatewayv2.DeleteStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2DeleteVpcLinkFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2DeleteVpcLinkFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteVpcLinkOutput, error) {
	var output apigatewayv2.DeleteVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2ExportApiFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2ExportApiFuture) Get(ctx workflow.Context) (*apigatewayv2.ExportApiOutput, error) {
	var output apigatewayv2.ExportApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetApiFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetApiFuture) Get(ctx workflow.Context) (*apigatewayv2.GetApiOutput, error) {
	var output apigatewayv2.GetApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetApiMappingFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetApiMappingFuture) Get(ctx workflow.Context) (*apigatewayv2.GetApiMappingOutput, error) {
	var output apigatewayv2.GetApiMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetApiMappingsFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetApiMappingsFuture) Get(ctx workflow.Context) (*apigatewayv2.GetApiMappingsOutput, error) {
	var output apigatewayv2.GetApiMappingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetApisFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetApisFuture) Get(ctx workflow.Context) (*apigatewayv2.GetApisOutput, error) {
	var output apigatewayv2.GetApisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetAuthorizerFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetAuthorizerFuture) Get(ctx workflow.Context) (*apigatewayv2.GetAuthorizerOutput, error) {
	var output apigatewayv2.GetAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetAuthorizersFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetAuthorizersFuture) Get(ctx workflow.Context) (*apigatewayv2.GetAuthorizersOutput, error) {
	var output apigatewayv2.GetAuthorizersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetDeploymentFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetDeploymentFuture) Get(ctx workflow.Context) (*apigatewayv2.GetDeploymentOutput, error) {
	var output apigatewayv2.GetDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetDeploymentsFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetDeploymentsFuture) Get(ctx workflow.Context) (*apigatewayv2.GetDeploymentsOutput, error) {
	var output apigatewayv2.GetDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetDomainNameFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetDomainNameFuture) Get(ctx workflow.Context) (*apigatewayv2.GetDomainNameOutput, error) {
	var output apigatewayv2.GetDomainNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetDomainNamesFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetDomainNamesFuture) Get(ctx workflow.Context) (*apigatewayv2.GetDomainNamesOutput, error) {
	var output apigatewayv2.GetDomainNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetIntegrationFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetIntegrationFuture) Get(ctx workflow.Context) (*apigatewayv2.GetIntegrationOutput, error) {
	var output apigatewayv2.GetIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetIntegrationResponseFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetIntegrationResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.GetIntegrationResponseOutput, error) {
	var output apigatewayv2.GetIntegrationResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetIntegrationResponsesFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetIntegrationResponsesFuture) Get(ctx workflow.Context) (*apigatewayv2.GetIntegrationResponsesOutput, error) {
	var output apigatewayv2.GetIntegrationResponsesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetIntegrationsFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetIntegrationsFuture) Get(ctx workflow.Context) (*apigatewayv2.GetIntegrationsOutput, error) {
	var output apigatewayv2.GetIntegrationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetModelFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetModelFuture) Get(ctx workflow.Context) (*apigatewayv2.GetModelOutput, error) {
	var output apigatewayv2.GetModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetModelTemplateFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetModelTemplateFuture) Get(ctx workflow.Context) (*apigatewayv2.GetModelTemplateOutput, error) {
	var output apigatewayv2.GetModelTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetModelsFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetModelsFuture) Get(ctx workflow.Context) (*apigatewayv2.GetModelsOutput, error) {
	var output apigatewayv2.GetModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetRouteFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetRouteFuture) Get(ctx workflow.Context) (*apigatewayv2.GetRouteOutput, error) {
	var output apigatewayv2.GetRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetRouteResponseFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetRouteResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.GetRouteResponseOutput, error) {
	var output apigatewayv2.GetRouteResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetRouteResponsesFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetRouteResponsesFuture) Get(ctx workflow.Context) (*apigatewayv2.GetRouteResponsesOutput, error) {
	var output apigatewayv2.GetRouteResponsesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetRoutesFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetRoutesFuture) Get(ctx workflow.Context) (*apigatewayv2.GetRoutesOutput, error) {
	var output apigatewayv2.GetRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetStageFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetStageFuture) Get(ctx workflow.Context) (*apigatewayv2.GetStageOutput, error) {
	var output apigatewayv2.GetStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetStagesFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetStagesFuture) Get(ctx workflow.Context) (*apigatewayv2.GetStagesOutput, error) {
	var output apigatewayv2.GetStagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetTagsFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetTagsFuture) Get(ctx workflow.Context) (*apigatewayv2.GetTagsOutput, error) {
	var output apigatewayv2.GetTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetVpcLinkFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetVpcLinkFuture) Get(ctx workflow.Context) (*apigatewayv2.GetVpcLinkOutput, error) {
	var output apigatewayv2.GetVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2GetVpcLinksFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2GetVpcLinksFuture) Get(ctx workflow.Context) (*apigatewayv2.GetVpcLinksOutput, error) {
	var output apigatewayv2.GetVpcLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2ImportApiFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2ImportApiFuture) Get(ctx workflow.Context) (*apigatewayv2.ImportApiOutput, error) {
	var output apigatewayv2.ImportApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2ReimportApiFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2ReimportApiFuture) Get(ctx workflow.Context) (*apigatewayv2.ReimportApiOutput, error) {
	var output apigatewayv2.ReimportApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2ResetAuthorizersCacheFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2ResetAuthorizersCacheFuture) Get(ctx workflow.Context) (*apigatewayv2.ResetAuthorizersCacheOutput, error) {
	var output apigatewayv2.ResetAuthorizersCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2TagResourceFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2TagResourceFuture) Get(ctx workflow.Context) (*apigatewayv2.TagResourceOutput, error) {
	var output apigatewayv2.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UntagResourceFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UntagResourceFuture) Get(ctx workflow.Context) (*apigatewayv2.UntagResourceOutput, error) {
	var output apigatewayv2.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UpdateApiFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UpdateApiFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateApiOutput, error) {
	var output apigatewayv2.UpdateApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UpdateApiMappingFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UpdateApiMappingFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateApiMappingOutput, error) {
	var output apigatewayv2.UpdateApiMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UpdateAuthorizerFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UpdateAuthorizerFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateAuthorizerOutput, error) {
	var output apigatewayv2.UpdateAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UpdateDeploymentFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UpdateDeploymentFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateDeploymentOutput, error) {
	var output apigatewayv2.UpdateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UpdateDomainNameFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UpdateDomainNameFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateDomainNameOutput, error) {
	var output apigatewayv2.UpdateDomainNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UpdateIntegrationFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UpdateIntegrationFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateIntegrationOutput, error) {
	var output apigatewayv2.UpdateIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UpdateIntegrationResponseFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UpdateIntegrationResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateIntegrationResponseOutput, error) {
	var output apigatewayv2.UpdateIntegrationResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UpdateModelFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UpdateModelFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateModelOutput, error) {
	var output apigatewayv2.UpdateModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UpdateRouteFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UpdateRouteFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateRouteOutput, error) {
	var output apigatewayv2.UpdateRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UpdateRouteResponseFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UpdateRouteResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateRouteResponseOutput, error) {
	var output apigatewayv2.UpdateRouteResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UpdateStageFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UpdateStageFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateStageOutput, error) {
	var output apigatewayv2.UpdateStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Apigatewayv2UpdateVpcLinkFuture struct {
	Future workflow.Future
}

func (r *Apigatewayv2UpdateVpcLinkFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateVpcLinkOutput, error) {
	var output apigatewayv2.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateApi(ctx workflow.Context, input *apigatewayv2.CreateApiInput) (*apigatewayv2.CreateApiOutput, error) {
	var output apigatewayv2.CreateApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateApi", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateApiAsync(ctx workflow.Context, input *apigatewayv2.CreateApiInput) *Apigatewayv2CreateApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateApi", input)
	return &Apigatewayv2CreateApiFuture{Future: future}
}

func (a *ApiGatewayV2Stub) CreateApiMapping(ctx workflow.Context, input *apigatewayv2.CreateApiMappingInput) (*apigatewayv2.CreateApiMappingOutput, error) {
	var output apigatewayv2.CreateApiMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateApiMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateApiMappingAsync(ctx workflow.Context, input *apigatewayv2.CreateApiMappingInput) *Apigatewayv2CreateApiMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateApiMapping", input)
	return &Apigatewayv2CreateApiMappingFuture{Future: future}
}

func (a *ApiGatewayV2Stub) CreateAuthorizer(ctx workflow.Context, input *apigatewayv2.CreateAuthorizerInput) (*apigatewayv2.CreateAuthorizerOutput, error) {
	var output apigatewayv2.CreateAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateAuthorizerAsync(ctx workflow.Context, input *apigatewayv2.CreateAuthorizerInput) *Apigatewayv2CreateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateAuthorizer", input)
	return &Apigatewayv2CreateAuthorizerFuture{Future: future}
}

func (a *ApiGatewayV2Stub) CreateDeployment(ctx workflow.Context, input *apigatewayv2.CreateDeploymentInput) (*apigatewayv2.CreateDeploymentOutput, error) {
	var output apigatewayv2.CreateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateDeploymentAsync(ctx workflow.Context, input *apigatewayv2.CreateDeploymentInput) *Apigatewayv2CreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateDeployment", input)
	return &Apigatewayv2CreateDeploymentFuture{Future: future}
}

func (a *ApiGatewayV2Stub) CreateDomainName(ctx workflow.Context, input *apigatewayv2.CreateDomainNameInput) (*apigatewayv2.CreateDomainNameOutput, error) {
	var output apigatewayv2.CreateDomainNameOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateDomainNameAsync(ctx workflow.Context, input *apigatewayv2.CreateDomainNameInput) *Apigatewayv2CreateDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateDomainName", input)
	return &Apigatewayv2CreateDomainNameFuture{Future: future}
}

func (a *ApiGatewayV2Stub) CreateIntegration(ctx workflow.Context, input *apigatewayv2.CreateIntegrationInput) (*apigatewayv2.CreateIntegrationOutput, error) {
	var output apigatewayv2.CreateIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateIntegrationAsync(ctx workflow.Context, input *apigatewayv2.CreateIntegrationInput) *Apigatewayv2CreateIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateIntegration", input)
	return &Apigatewayv2CreateIntegrationFuture{Future: future}
}

func (a *ApiGatewayV2Stub) CreateIntegrationResponse(ctx workflow.Context, input *apigatewayv2.CreateIntegrationResponseInput) (*apigatewayv2.CreateIntegrationResponseOutput, error) {
	var output apigatewayv2.CreateIntegrationResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateIntegrationResponseAsync(ctx workflow.Context, input *apigatewayv2.CreateIntegrationResponseInput) *Apigatewayv2CreateIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateIntegrationResponse", input)
	return &Apigatewayv2CreateIntegrationResponseFuture{Future: future}
}

func (a *ApiGatewayV2Stub) CreateModel(ctx workflow.Context, input *apigatewayv2.CreateModelInput) (*apigatewayv2.CreateModelOutput, error) {
	var output apigatewayv2.CreateModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateModelAsync(ctx workflow.Context, input *apigatewayv2.CreateModelInput) *Apigatewayv2CreateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateModel", input)
	return &Apigatewayv2CreateModelFuture{Future: future}
}

func (a *ApiGatewayV2Stub) CreateRoute(ctx workflow.Context, input *apigatewayv2.CreateRouteInput) (*apigatewayv2.CreateRouteOutput, error) {
	var output apigatewayv2.CreateRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateRouteAsync(ctx workflow.Context, input *apigatewayv2.CreateRouteInput) *Apigatewayv2CreateRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateRoute", input)
	return &Apigatewayv2CreateRouteFuture{Future: future}
}

func (a *ApiGatewayV2Stub) CreateRouteResponse(ctx workflow.Context, input *apigatewayv2.CreateRouteResponseInput) (*apigatewayv2.CreateRouteResponseOutput, error) {
	var output apigatewayv2.CreateRouteResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateRouteResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateRouteResponseAsync(ctx workflow.Context, input *apigatewayv2.CreateRouteResponseInput) *Apigatewayv2CreateRouteResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateRouteResponse", input)
	return &Apigatewayv2CreateRouteResponseFuture{Future: future}
}

func (a *ApiGatewayV2Stub) CreateStage(ctx workflow.Context, input *apigatewayv2.CreateStageInput) (*apigatewayv2.CreateStageOutput, error) {
	var output apigatewayv2.CreateStageOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateStage", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateStageAsync(ctx workflow.Context, input *apigatewayv2.CreateStageInput) *Apigatewayv2CreateStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateStage", input)
	return &Apigatewayv2CreateStageFuture{Future: future}
}

func (a *ApiGatewayV2Stub) CreateVpcLink(ctx workflow.Context, input *apigatewayv2.CreateVpcLinkInput) (*apigatewayv2.CreateVpcLinkOutput, error) {
	var output apigatewayv2.CreateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) CreateVpcLinkAsync(ctx workflow.Context, input *apigatewayv2.CreateVpcLinkInput) *Apigatewayv2CreateVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.CreateVpcLink", input)
	return &Apigatewayv2CreateVpcLinkFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteAccessLogSettings(ctx workflow.Context, input *apigatewayv2.DeleteAccessLogSettingsInput) (*apigatewayv2.DeleteAccessLogSettingsOutput, error) {
	var output apigatewayv2.DeleteAccessLogSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteAccessLogSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteAccessLogSettingsAsync(ctx workflow.Context, input *apigatewayv2.DeleteAccessLogSettingsInput) *Apigatewayv2DeleteAccessLogSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteAccessLogSettings", input)
	return &Apigatewayv2DeleteAccessLogSettingsFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteApi(ctx workflow.Context, input *apigatewayv2.DeleteApiInput) (*apigatewayv2.DeleteApiOutput, error) {
	var output apigatewayv2.DeleteApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteApi", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteApiAsync(ctx workflow.Context, input *apigatewayv2.DeleteApiInput) *Apigatewayv2DeleteApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteApi", input)
	return &Apigatewayv2DeleteApiFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteApiMapping(ctx workflow.Context, input *apigatewayv2.DeleteApiMappingInput) (*apigatewayv2.DeleteApiMappingOutput, error) {
	var output apigatewayv2.DeleteApiMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteApiMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteApiMappingAsync(ctx workflow.Context, input *apigatewayv2.DeleteApiMappingInput) *Apigatewayv2DeleteApiMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteApiMapping", input)
	return &Apigatewayv2DeleteApiMappingFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteAuthorizer(ctx workflow.Context, input *apigatewayv2.DeleteAuthorizerInput) (*apigatewayv2.DeleteAuthorizerOutput, error) {
	var output apigatewayv2.DeleteAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteAuthorizerAsync(ctx workflow.Context, input *apigatewayv2.DeleteAuthorizerInput) *Apigatewayv2DeleteAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteAuthorizer", input)
	return &Apigatewayv2DeleteAuthorizerFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteCorsConfiguration(ctx workflow.Context, input *apigatewayv2.DeleteCorsConfigurationInput) (*apigatewayv2.DeleteCorsConfigurationOutput, error) {
	var output apigatewayv2.DeleteCorsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteCorsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteCorsConfigurationAsync(ctx workflow.Context, input *apigatewayv2.DeleteCorsConfigurationInput) *Apigatewayv2DeleteCorsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteCorsConfiguration", input)
	return &Apigatewayv2DeleteCorsConfigurationFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteDeployment(ctx workflow.Context, input *apigatewayv2.DeleteDeploymentInput) (*apigatewayv2.DeleteDeploymentOutput, error) {
	var output apigatewayv2.DeleteDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteDeploymentAsync(ctx workflow.Context, input *apigatewayv2.DeleteDeploymentInput) *Apigatewayv2DeleteDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteDeployment", input)
	return &Apigatewayv2DeleteDeploymentFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteDomainName(ctx workflow.Context, input *apigatewayv2.DeleteDomainNameInput) (*apigatewayv2.DeleteDomainNameOutput, error) {
	var output apigatewayv2.DeleteDomainNameOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteDomainNameAsync(ctx workflow.Context, input *apigatewayv2.DeleteDomainNameInput) *Apigatewayv2DeleteDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteDomainName", input)
	return &Apigatewayv2DeleteDomainNameFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteIntegration(ctx workflow.Context, input *apigatewayv2.DeleteIntegrationInput) (*apigatewayv2.DeleteIntegrationOutput, error) {
	var output apigatewayv2.DeleteIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteIntegrationAsync(ctx workflow.Context, input *apigatewayv2.DeleteIntegrationInput) *Apigatewayv2DeleteIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteIntegration", input)
	return &Apigatewayv2DeleteIntegrationFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteIntegrationResponse(ctx workflow.Context, input *apigatewayv2.DeleteIntegrationResponseInput) (*apigatewayv2.DeleteIntegrationResponseOutput, error) {
	var output apigatewayv2.DeleteIntegrationResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteIntegrationResponseAsync(ctx workflow.Context, input *apigatewayv2.DeleteIntegrationResponseInput) *Apigatewayv2DeleteIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteIntegrationResponse", input)
	return &Apigatewayv2DeleteIntegrationResponseFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteModel(ctx workflow.Context, input *apigatewayv2.DeleteModelInput) (*apigatewayv2.DeleteModelOutput, error) {
	var output apigatewayv2.DeleteModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteModel", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteModelAsync(ctx workflow.Context, input *apigatewayv2.DeleteModelInput) *Apigatewayv2DeleteModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteModel", input)
	return &Apigatewayv2DeleteModelFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteRoute(ctx workflow.Context, input *apigatewayv2.DeleteRouteInput) (*apigatewayv2.DeleteRouteOutput, error) {
	var output apigatewayv2.DeleteRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteRouteAsync(ctx workflow.Context, input *apigatewayv2.DeleteRouteInput) *Apigatewayv2DeleteRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteRoute", input)
	return &Apigatewayv2DeleteRouteFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteRouteRequestParameter(ctx workflow.Context, input *apigatewayv2.DeleteRouteRequestParameterInput) (*apigatewayv2.DeleteRouteRequestParameterOutput, error) {
	var output apigatewayv2.DeleteRouteRequestParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteRouteRequestParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteRouteRequestParameterAsync(ctx workflow.Context, input *apigatewayv2.DeleteRouteRequestParameterInput) *Apigatewayv2DeleteRouteRequestParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteRouteRequestParameter", input)
	return &Apigatewayv2DeleteRouteRequestParameterFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteRouteResponse(ctx workflow.Context, input *apigatewayv2.DeleteRouteResponseInput) (*apigatewayv2.DeleteRouteResponseOutput, error) {
	var output apigatewayv2.DeleteRouteResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteRouteResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteRouteResponseAsync(ctx workflow.Context, input *apigatewayv2.DeleteRouteResponseInput) *Apigatewayv2DeleteRouteResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteRouteResponse", input)
	return &Apigatewayv2DeleteRouteResponseFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteRouteSettings(ctx workflow.Context, input *apigatewayv2.DeleteRouteSettingsInput) (*apigatewayv2.DeleteRouteSettingsOutput, error) {
	var output apigatewayv2.DeleteRouteSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteRouteSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteRouteSettingsAsync(ctx workflow.Context, input *apigatewayv2.DeleteRouteSettingsInput) *Apigatewayv2DeleteRouteSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteRouteSettings", input)
	return &Apigatewayv2DeleteRouteSettingsFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteStage(ctx workflow.Context, input *apigatewayv2.DeleteStageInput) (*apigatewayv2.DeleteStageOutput, error) {
	var output apigatewayv2.DeleteStageOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteStage", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteStageAsync(ctx workflow.Context, input *apigatewayv2.DeleteStageInput) *Apigatewayv2DeleteStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteStage", input)
	return &Apigatewayv2DeleteStageFuture{Future: future}
}

func (a *ApiGatewayV2Stub) DeleteVpcLink(ctx workflow.Context, input *apigatewayv2.DeleteVpcLinkInput) (*apigatewayv2.DeleteVpcLinkOutput, error) {
	var output apigatewayv2.DeleteVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) DeleteVpcLinkAsync(ctx workflow.Context, input *apigatewayv2.DeleteVpcLinkInput) *Apigatewayv2DeleteVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.DeleteVpcLink", input)
	return &Apigatewayv2DeleteVpcLinkFuture{Future: future}
}

func (a *ApiGatewayV2Stub) ExportApi(ctx workflow.Context, input *apigatewayv2.ExportApiInput) (*apigatewayv2.ExportApiOutput, error) {
	var output apigatewayv2.ExportApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.ExportApi", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) ExportApiAsync(ctx workflow.Context, input *apigatewayv2.ExportApiInput) *Apigatewayv2ExportApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.ExportApi", input)
	return &Apigatewayv2ExportApiFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetApi(ctx workflow.Context, input *apigatewayv2.GetApiInput) (*apigatewayv2.GetApiOutput, error) {
	var output apigatewayv2.GetApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetApi", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetApiAsync(ctx workflow.Context, input *apigatewayv2.GetApiInput) *Apigatewayv2GetApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetApi", input)
	return &Apigatewayv2GetApiFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetApiMapping(ctx workflow.Context, input *apigatewayv2.GetApiMappingInput) (*apigatewayv2.GetApiMappingOutput, error) {
	var output apigatewayv2.GetApiMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetApiMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetApiMappingAsync(ctx workflow.Context, input *apigatewayv2.GetApiMappingInput) *Apigatewayv2GetApiMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetApiMapping", input)
	return &Apigatewayv2GetApiMappingFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetApiMappings(ctx workflow.Context, input *apigatewayv2.GetApiMappingsInput) (*apigatewayv2.GetApiMappingsOutput, error) {
	var output apigatewayv2.GetApiMappingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetApiMappings", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetApiMappingsAsync(ctx workflow.Context, input *apigatewayv2.GetApiMappingsInput) *Apigatewayv2GetApiMappingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetApiMappings", input)
	return &Apigatewayv2GetApiMappingsFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetApis(ctx workflow.Context, input *apigatewayv2.GetApisInput) (*apigatewayv2.GetApisOutput, error) {
	var output apigatewayv2.GetApisOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetApis", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetApisAsync(ctx workflow.Context, input *apigatewayv2.GetApisInput) *Apigatewayv2GetApisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetApis", input)
	return &Apigatewayv2GetApisFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetAuthorizer(ctx workflow.Context, input *apigatewayv2.GetAuthorizerInput) (*apigatewayv2.GetAuthorizerOutput, error) {
	var output apigatewayv2.GetAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetAuthorizerAsync(ctx workflow.Context, input *apigatewayv2.GetAuthorizerInput) *Apigatewayv2GetAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetAuthorizer", input)
	return &Apigatewayv2GetAuthorizerFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetAuthorizers(ctx workflow.Context, input *apigatewayv2.GetAuthorizersInput) (*apigatewayv2.GetAuthorizersOutput, error) {
	var output apigatewayv2.GetAuthorizersOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetAuthorizers", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetAuthorizersAsync(ctx workflow.Context, input *apigatewayv2.GetAuthorizersInput) *Apigatewayv2GetAuthorizersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetAuthorizers", input)
	return &Apigatewayv2GetAuthorizersFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetDeployment(ctx workflow.Context, input *apigatewayv2.GetDeploymentInput) (*apigatewayv2.GetDeploymentOutput, error) {
	var output apigatewayv2.GetDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetDeploymentAsync(ctx workflow.Context, input *apigatewayv2.GetDeploymentInput) *Apigatewayv2GetDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetDeployment", input)
	return &Apigatewayv2GetDeploymentFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetDeployments(ctx workflow.Context, input *apigatewayv2.GetDeploymentsInput) (*apigatewayv2.GetDeploymentsOutput, error) {
	var output apigatewayv2.GetDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetDeploymentsAsync(ctx workflow.Context, input *apigatewayv2.GetDeploymentsInput) *Apigatewayv2GetDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetDeployments", input)
	return &Apigatewayv2GetDeploymentsFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetDomainName(ctx workflow.Context, input *apigatewayv2.GetDomainNameInput) (*apigatewayv2.GetDomainNameOutput, error) {
	var output apigatewayv2.GetDomainNameOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetDomainNameAsync(ctx workflow.Context, input *apigatewayv2.GetDomainNameInput) *Apigatewayv2GetDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetDomainName", input)
	return &Apigatewayv2GetDomainNameFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetDomainNames(ctx workflow.Context, input *apigatewayv2.GetDomainNamesInput) (*apigatewayv2.GetDomainNamesOutput, error) {
	var output apigatewayv2.GetDomainNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetDomainNames", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetDomainNamesAsync(ctx workflow.Context, input *apigatewayv2.GetDomainNamesInput) *Apigatewayv2GetDomainNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetDomainNames", input)
	return &Apigatewayv2GetDomainNamesFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetIntegration(ctx workflow.Context, input *apigatewayv2.GetIntegrationInput) (*apigatewayv2.GetIntegrationOutput, error) {
	var output apigatewayv2.GetIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetIntegrationAsync(ctx workflow.Context, input *apigatewayv2.GetIntegrationInput) *Apigatewayv2GetIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetIntegration", input)
	return &Apigatewayv2GetIntegrationFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetIntegrationResponse(ctx workflow.Context, input *apigatewayv2.GetIntegrationResponseInput) (*apigatewayv2.GetIntegrationResponseOutput, error) {
	var output apigatewayv2.GetIntegrationResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetIntegrationResponseAsync(ctx workflow.Context, input *apigatewayv2.GetIntegrationResponseInput) *Apigatewayv2GetIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetIntegrationResponse", input)
	return &Apigatewayv2GetIntegrationResponseFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetIntegrationResponses(ctx workflow.Context, input *apigatewayv2.GetIntegrationResponsesInput) (*apigatewayv2.GetIntegrationResponsesOutput, error) {
	var output apigatewayv2.GetIntegrationResponsesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetIntegrationResponses", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetIntegrationResponsesAsync(ctx workflow.Context, input *apigatewayv2.GetIntegrationResponsesInput) *Apigatewayv2GetIntegrationResponsesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetIntegrationResponses", input)
	return &Apigatewayv2GetIntegrationResponsesFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetIntegrations(ctx workflow.Context, input *apigatewayv2.GetIntegrationsInput) (*apigatewayv2.GetIntegrationsOutput, error) {
	var output apigatewayv2.GetIntegrationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetIntegrations", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetIntegrationsAsync(ctx workflow.Context, input *apigatewayv2.GetIntegrationsInput) *Apigatewayv2GetIntegrationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetIntegrations", input)
	return &Apigatewayv2GetIntegrationsFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetModel(ctx workflow.Context, input *apigatewayv2.GetModelInput) (*apigatewayv2.GetModelOutput, error) {
	var output apigatewayv2.GetModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetModelAsync(ctx workflow.Context, input *apigatewayv2.GetModelInput) *Apigatewayv2GetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetModel", input)
	return &Apigatewayv2GetModelFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetModelTemplate(ctx workflow.Context, input *apigatewayv2.GetModelTemplateInput) (*apigatewayv2.GetModelTemplateOutput, error) {
	var output apigatewayv2.GetModelTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetModelTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetModelTemplateAsync(ctx workflow.Context, input *apigatewayv2.GetModelTemplateInput) *Apigatewayv2GetModelTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetModelTemplate", input)
	return &Apigatewayv2GetModelTemplateFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetModels(ctx workflow.Context, input *apigatewayv2.GetModelsInput) (*apigatewayv2.GetModelsOutput, error) {
	var output apigatewayv2.GetModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetModels", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetModelsAsync(ctx workflow.Context, input *apigatewayv2.GetModelsInput) *Apigatewayv2GetModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetModels", input)
	return &Apigatewayv2GetModelsFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetRoute(ctx workflow.Context, input *apigatewayv2.GetRouteInput) (*apigatewayv2.GetRouteOutput, error) {
	var output apigatewayv2.GetRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetRouteAsync(ctx workflow.Context, input *apigatewayv2.GetRouteInput) *Apigatewayv2GetRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetRoute", input)
	return &Apigatewayv2GetRouteFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetRouteResponse(ctx workflow.Context, input *apigatewayv2.GetRouteResponseInput) (*apigatewayv2.GetRouteResponseOutput, error) {
	var output apigatewayv2.GetRouteResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetRouteResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetRouteResponseAsync(ctx workflow.Context, input *apigatewayv2.GetRouteResponseInput) *Apigatewayv2GetRouteResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetRouteResponse", input)
	return &Apigatewayv2GetRouteResponseFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetRouteResponses(ctx workflow.Context, input *apigatewayv2.GetRouteResponsesInput) (*apigatewayv2.GetRouteResponsesOutput, error) {
	var output apigatewayv2.GetRouteResponsesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetRouteResponses", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetRouteResponsesAsync(ctx workflow.Context, input *apigatewayv2.GetRouteResponsesInput) *Apigatewayv2GetRouteResponsesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetRouteResponses", input)
	return &Apigatewayv2GetRouteResponsesFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetRoutes(ctx workflow.Context, input *apigatewayv2.GetRoutesInput) (*apigatewayv2.GetRoutesOutput, error) {
	var output apigatewayv2.GetRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetRoutesAsync(ctx workflow.Context, input *apigatewayv2.GetRoutesInput) *Apigatewayv2GetRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetRoutes", input)
	return &Apigatewayv2GetRoutesFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetStage(ctx workflow.Context, input *apigatewayv2.GetStageInput) (*apigatewayv2.GetStageOutput, error) {
	var output apigatewayv2.GetStageOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetStage", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetStageAsync(ctx workflow.Context, input *apigatewayv2.GetStageInput) *Apigatewayv2GetStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetStage", input)
	return &Apigatewayv2GetStageFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetStages(ctx workflow.Context, input *apigatewayv2.GetStagesInput) (*apigatewayv2.GetStagesOutput, error) {
	var output apigatewayv2.GetStagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetStages", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetStagesAsync(ctx workflow.Context, input *apigatewayv2.GetStagesInput) *Apigatewayv2GetStagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetStages", input)
	return &Apigatewayv2GetStagesFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetTags(ctx workflow.Context, input *apigatewayv2.GetTagsInput) (*apigatewayv2.GetTagsOutput, error) {
	var output apigatewayv2.GetTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetTagsAsync(ctx workflow.Context, input *apigatewayv2.GetTagsInput) *Apigatewayv2GetTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetTags", input)
	return &Apigatewayv2GetTagsFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetVpcLink(ctx workflow.Context, input *apigatewayv2.GetVpcLinkInput) (*apigatewayv2.GetVpcLinkOutput, error) {
	var output apigatewayv2.GetVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetVpcLinkAsync(ctx workflow.Context, input *apigatewayv2.GetVpcLinkInput) *Apigatewayv2GetVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetVpcLink", input)
	return &Apigatewayv2GetVpcLinkFuture{Future: future}
}

func (a *ApiGatewayV2Stub) GetVpcLinks(ctx workflow.Context, input *apigatewayv2.GetVpcLinksInput) (*apigatewayv2.GetVpcLinksOutput, error) {
	var output apigatewayv2.GetVpcLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetVpcLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) GetVpcLinksAsync(ctx workflow.Context, input *apigatewayv2.GetVpcLinksInput) *Apigatewayv2GetVpcLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.GetVpcLinks", input)
	return &Apigatewayv2GetVpcLinksFuture{Future: future}
}

func (a *ApiGatewayV2Stub) ImportApi(ctx workflow.Context, input *apigatewayv2.ImportApiInput) (*apigatewayv2.ImportApiOutput, error) {
	var output apigatewayv2.ImportApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.ImportApi", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) ImportApiAsync(ctx workflow.Context, input *apigatewayv2.ImportApiInput) *Apigatewayv2ImportApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.ImportApi", input)
	return &Apigatewayv2ImportApiFuture{Future: future}
}

func (a *ApiGatewayV2Stub) ReimportApi(ctx workflow.Context, input *apigatewayv2.ReimportApiInput) (*apigatewayv2.ReimportApiOutput, error) {
	var output apigatewayv2.ReimportApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.ReimportApi", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) ReimportApiAsync(ctx workflow.Context, input *apigatewayv2.ReimportApiInput) *Apigatewayv2ReimportApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.ReimportApi", input)
	return &Apigatewayv2ReimportApiFuture{Future: future}
}

func (a *ApiGatewayV2Stub) ResetAuthorizersCache(ctx workflow.Context, input *apigatewayv2.ResetAuthorizersCacheInput) (*apigatewayv2.ResetAuthorizersCacheOutput, error) {
	var output apigatewayv2.ResetAuthorizersCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.ResetAuthorizersCache", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) ResetAuthorizersCacheAsync(ctx workflow.Context, input *apigatewayv2.ResetAuthorizersCacheInput) *Apigatewayv2ResetAuthorizersCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.ResetAuthorizersCache", input)
	return &Apigatewayv2ResetAuthorizersCacheFuture{Future: future}
}

func (a *ApiGatewayV2Stub) TagResource(ctx workflow.Context, input *apigatewayv2.TagResourceInput) (*apigatewayv2.TagResourceOutput, error) {
	var output apigatewayv2.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) TagResourceAsync(ctx workflow.Context, input *apigatewayv2.TagResourceInput) *Apigatewayv2TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.TagResource", input)
	return &Apigatewayv2TagResourceFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UntagResource(ctx workflow.Context, input *apigatewayv2.UntagResourceInput) (*apigatewayv2.UntagResourceOutput, error) {
	var output apigatewayv2.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UntagResourceAsync(ctx workflow.Context, input *apigatewayv2.UntagResourceInput) *Apigatewayv2UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UntagResource", input)
	return &Apigatewayv2UntagResourceFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UpdateApi(ctx workflow.Context, input *apigatewayv2.UpdateApiInput) (*apigatewayv2.UpdateApiOutput, error) {
	var output apigatewayv2.UpdateApiOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateApi", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UpdateApiAsync(ctx workflow.Context, input *apigatewayv2.UpdateApiInput) *Apigatewayv2UpdateApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateApi", input)
	return &Apigatewayv2UpdateApiFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UpdateApiMapping(ctx workflow.Context, input *apigatewayv2.UpdateApiMappingInput) (*apigatewayv2.UpdateApiMappingOutput, error) {
	var output apigatewayv2.UpdateApiMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateApiMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UpdateApiMappingAsync(ctx workflow.Context, input *apigatewayv2.UpdateApiMappingInput) *Apigatewayv2UpdateApiMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateApiMapping", input)
	return &Apigatewayv2UpdateApiMappingFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UpdateAuthorizer(ctx workflow.Context, input *apigatewayv2.UpdateAuthorizerInput) (*apigatewayv2.UpdateAuthorizerOutput, error) {
	var output apigatewayv2.UpdateAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UpdateAuthorizerAsync(ctx workflow.Context, input *apigatewayv2.UpdateAuthorizerInput) *Apigatewayv2UpdateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateAuthorizer", input)
	return &Apigatewayv2UpdateAuthorizerFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UpdateDeployment(ctx workflow.Context, input *apigatewayv2.UpdateDeploymentInput) (*apigatewayv2.UpdateDeploymentOutput, error) {
	var output apigatewayv2.UpdateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UpdateDeploymentAsync(ctx workflow.Context, input *apigatewayv2.UpdateDeploymentInput) *Apigatewayv2UpdateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateDeployment", input)
	return &Apigatewayv2UpdateDeploymentFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UpdateDomainName(ctx workflow.Context, input *apigatewayv2.UpdateDomainNameInput) (*apigatewayv2.UpdateDomainNameOutput, error) {
	var output apigatewayv2.UpdateDomainNameOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UpdateDomainNameAsync(ctx workflow.Context, input *apigatewayv2.UpdateDomainNameInput) *Apigatewayv2UpdateDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateDomainName", input)
	return &Apigatewayv2UpdateDomainNameFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UpdateIntegration(ctx workflow.Context, input *apigatewayv2.UpdateIntegrationInput) (*apigatewayv2.UpdateIntegrationOutput, error) {
	var output apigatewayv2.UpdateIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UpdateIntegrationAsync(ctx workflow.Context, input *apigatewayv2.UpdateIntegrationInput) *Apigatewayv2UpdateIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateIntegration", input)
	return &Apigatewayv2UpdateIntegrationFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UpdateIntegrationResponse(ctx workflow.Context, input *apigatewayv2.UpdateIntegrationResponseInput) (*apigatewayv2.UpdateIntegrationResponseOutput, error) {
	var output apigatewayv2.UpdateIntegrationResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UpdateIntegrationResponseAsync(ctx workflow.Context, input *apigatewayv2.UpdateIntegrationResponseInput) *Apigatewayv2UpdateIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateIntegrationResponse", input)
	return &Apigatewayv2UpdateIntegrationResponseFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UpdateModel(ctx workflow.Context, input *apigatewayv2.UpdateModelInput) (*apigatewayv2.UpdateModelOutput, error) {
	var output apigatewayv2.UpdateModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UpdateModelAsync(ctx workflow.Context, input *apigatewayv2.UpdateModelInput) *Apigatewayv2UpdateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateModel", input)
	return &Apigatewayv2UpdateModelFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UpdateRoute(ctx workflow.Context, input *apigatewayv2.UpdateRouteInput) (*apigatewayv2.UpdateRouteOutput, error) {
	var output apigatewayv2.UpdateRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UpdateRouteAsync(ctx workflow.Context, input *apigatewayv2.UpdateRouteInput) *Apigatewayv2UpdateRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateRoute", input)
	return &Apigatewayv2UpdateRouteFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UpdateRouteResponse(ctx workflow.Context, input *apigatewayv2.UpdateRouteResponseInput) (*apigatewayv2.UpdateRouteResponseOutput, error) {
	var output apigatewayv2.UpdateRouteResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateRouteResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UpdateRouteResponseAsync(ctx workflow.Context, input *apigatewayv2.UpdateRouteResponseInput) *Apigatewayv2UpdateRouteResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateRouteResponse", input)
	return &Apigatewayv2UpdateRouteResponseFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UpdateStage(ctx workflow.Context, input *apigatewayv2.UpdateStageInput) (*apigatewayv2.UpdateStageOutput, error) {
	var output apigatewayv2.UpdateStageOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateStage", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UpdateStageAsync(ctx workflow.Context, input *apigatewayv2.UpdateStageInput) *Apigatewayv2UpdateStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateStage", input)
	return &Apigatewayv2UpdateStageFuture{Future: future}
}

func (a *ApiGatewayV2Stub) UpdateVpcLink(ctx workflow.Context, input *apigatewayv2.UpdateVpcLinkInput) (*apigatewayv2.UpdateVpcLinkOutput, error) {
	var output apigatewayv2.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *ApiGatewayV2Stub) UpdateVpcLinkAsync(ctx workflow.Context, input *apigatewayv2.UpdateVpcLinkInput) *Apigatewayv2UpdateVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws.apigatewayv2.UpdateVpcLink", input)
	return &Apigatewayv2UpdateVpcLinkFuture{Future: future}
}
