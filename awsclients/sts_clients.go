// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/sts"
	"go.temporal.io/sdk/workflow"
)

type STSClient interface {
	AssumeRole(ctx workflow.Context, input *sts.AssumeRoleInput) (*sts.AssumeRoleOutput, error)
	AssumeRoleAsync(ctx workflow.Context, input *sts.AssumeRoleInput) *StsAssumeRoleFuture

	AssumeRoleWithSAML(ctx workflow.Context, input *sts.AssumeRoleWithSAMLInput) (*sts.AssumeRoleWithSAMLOutput, error)
	AssumeRoleWithSAMLAsync(ctx workflow.Context, input *sts.AssumeRoleWithSAMLInput) *StsAssumeRoleWithSAMLFuture

	AssumeRoleWithWebIdentity(ctx workflow.Context, input *sts.AssumeRoleWithWebIdentityInput) (*sts.AssumeRoleWithWebIdentityOutput, error)
	AssumeRoleWithWebIdentityAsync(ctx workflow.Context, input *sts.AssumeRoleWithWebIdentityInput) *StsAssumeRoleWithWebIdentityFuture

	DecodeAuthorizationMessage(ctx workflow.Context, input *sts.DecodeAuthorizationMessageInput) (*sts.DecodeAuthorizationMessageOutput, error)
	DecodeAuthorizationMessageAsync(ctx workflow.Context, input *sts.DecodeAuthorizationMessageInput) *StsDecodeAuthorizationMessageFuture

	GetAccessKeyInfo(ctx workflow.Context, input *sts.GetAccessKeyInfoInput) (*sts.GetAccessKeyInfoOutput, error)
	GetAccessKeyInfoAsync(ctx workflow.Context, input *sts.GetAccessKeyInfoInput) *StsGetAccessKeyInfoFuture

	GetCallerIdentity(ctx workflow.Context, input *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error)
	GetCallerIdentityAsync(ctx workflow.Context, input *sts.GetCallerIdentityInput) *StsGetCallerIdentityFuture

	GetFederationToken(ctx workflow.Context, input *sts.GetFederationTokenInput) (*sts.GetFederationTokenOutput, error)
	GetFederationTokenAsync(ctx workflow.Context, input *sts.GetFederationTokenInput) *StsGetFederationTokenFuture

	GetSessionToken(ctx workflow.Context, input *sts.GetSessionTokenInput) (*sts.GetSessionTokenOutput, error)
	GetSessionTokenAsync(ctx workflow.Context, input *sts.GetSessionTokenInput) *StsGetSessionTokenFuture
}

type STSStub struct{}

func NewSTSStub() STSClient {
	return &STSStub{}
}

type StsAssumeRoleFuture struct {
	Future workflow.Future
}

func (r *StsAssumeRoleFuture) Get(ctx workflow.Context) (*sts.AssumeRoleOutput, error) {
	var output sts.AssumeRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StsAssumeRoleWithSAMLFuture struct {
	Future workflow.Future
}

func (r *StsAssumeRoleWithSAMLFuture) Get(ctx workflow.Context) (*sts.AssumeRoleWithSAMLOutput, error) {
	var output sts.AssumeRoleWithSAMLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StsAssumeRoleWithWebIdentityFuture struct {
	Future workflow.Future
}

func (r *StsAssumeRoleWithWebIdentityFuture) Get(ctx workflow.Context) (*sts.AssumeRoleWithWebIdentityOutput, error) {
	var output sts.AssumeRoleWithWebIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StsDecodeAuthorizationMessageFuture struct {
	Future workflow.Future
}

func (r *StsDecodeAuthorizationMessageFuture) Get(ctx workflow.Context) (*sts.DecodeAuthorizationMessageOutput, error) {
	var output sts.DecodeAuthorizationMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StsGetAccessKeyInfoFuture struct {
	Future workflow.Future
}

func (r *StsGetAccessKeyInfoFuture) Get(ctx workflow.Context) (*sts.GetAccessKeyInfoOutput, error) {
	var output sts.GetAccessKeyInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StsGetCallerIdentityFuture struct {
	Future workflow.Future
}

func (r *StsGetCallerIdentityFuture) Get(ctx workflow.Context) (*sts.GetCallerIdentityOutput, error) {
	var output sts.GetCallerIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StsGetFederationTokenFuture struct {
	Future workflow.Future
}

func (r *StsGetFederationTokenFuture) Get(ctx workflow.Context) (*sts.GetFederationTokenOutput, error) {
	var output sts.GetFederationTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StsGetSessionTokenFuture struct {
	Future workflow.Future
}

func (r *StsGetSessionTokenFuture) Get(ctx workflow.Context) (*sts.GetSessionTokenOutput, error) {
	var output sts.GetSessionTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *STSStub) AssumeRole(ctx workflow.Context, input *sts.AssumeRoleInput) (*sts.AssumeRoleOutput, error) {
	var output sts.AssumeRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws.sts.AssumeRole", input).Get(ctx, &output)
	return &output, err
}

func (a *STSStub) AssumeRoleAsync(ctx workflow.Context, input *sts.AssumeRoleInput) *StsAssumeRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sts.AssumeRole", input)
	return &StsAssumeRoleFuture{Future: future}
}

func (a *STSStub) AssumeRoleWithSAML(ctx workflow.Context, input *sts.AssumeRoleWithSAMLInput) (*sts.AssumeRoleWithSAMLOutput, error) {
	var output sts.AssumeRoleWithSAMLOutput
	err := workflow.ExecuteActivity(ctx, "aws.sts.AssumeRoleWithSAML", input).Get(ctx, &output)
	return &output, err
}

func (a *STSStub) AssumeRoleWithSAMLAsync(ctx workflow.Context, input *sts.AssumeRoleWithSAMLInput) *StsAssumeRoleWithSAMLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sts.AssumeRoleWithSAML", input)
	return &StsAssumeRoleWithSAMLFuture{Future: future}
}

func (a *STSStub) AssumeRoleWithWebIdentity(ctx workflow.Context, input *sts.AssumeRoleWithWebIdentityInput) (*sts.AssumeRoleWithWebIdentityOutput, error) {
	var output sts.AssumeRoleWithWebIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.sts.AssumeRoleWithWebIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *STSStub) AssumeRoleWithWebIdentityAsync(ctx workflow.Context, input *sts.AssumeRoleWithWebIdentityInput) *StsAssumeRoleWithWebIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sts.AssumeRoleWithWebIdentity", input)
	return &StsAssumeRoleWithWebIdentityFuture{Future: future}
}

func (a *STSStub) DecodeAuthorizationMessage(ctx workflow.Context, input *sts.DecodeAuthorizationMessageInput) (*sts.DecodeAuthorizationMessageOutput, error) {
	var output sts.DecodeAuthorizationMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws.sts.DecodeAuthorizationMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *STSStub) DecodeAuthorizationMessageAsync(ctx workflow.Context, input *sts.DecodeAuthorizationMessageInput) *StsDecodeAuthorizationMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sts.DecodeAuthorizationMessage", input)
	return &StsDecodeAuthorizationMessageFuture{Future: future}
}

func (a *STSStub) GetAccessKeyInfo(ctx workflow.Context, input *sts.GetAccessKeyInfoInput) (*sts.GetAccessKeyInfoOutput, error) {
	var output sts.GetAccessKeyInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws.sts.GetAccessKeyInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *STSStub) GetAccessKeyInfoAsync(ctx workflow.Context, input *sts.GetAccessKeyInfoInput) *StsGetAccessKeyInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sts.GetAccessKeyInfo", input)
	return &StsGetAccessKeyInfoFuture{Future: future}
}

func (a *STSStub) GetCallerIdentity(ctx workflow.Context, input *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error) {
	var output sts.GetCallerIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.sts.GetCallerIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *STSStub) GetCallerIdentityAsync(ctx workflow.Context, input *sts.GetCallerIdentityInput) *StsGetCallerIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sts.GetCallerIdentity", input)
	return &StsGetCallerIdentityFuture{Future: future}
}

func (a *STSStub) GetFederationToken(ctx workflow.Context, input *sts.GetFederationTokenInput) (*sts.GetFederationTokenOutput, error) {
	var output sts.GetFederationTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.sts.GetFederationToken", input).Get(ctx, &output)
	return &output, err
}

func (a *STSStub) GetFederationTokenAsync(ctx workflow.Context, input *sts.GetFederationTokenInput) *StsGetFederationTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sts.GetFederationToken", input)
	return &StsGetFederationTokenFuture{Future: future}
}

func (a *STSStub) GetSessionToken(ctx workflow.Context, input *sts.GetSessionTokenInput) (*sts.GetSessionTokenOutput, error) {
	var output sts.GetSessionTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.sts.GetSessionToken", input).Get(ctx, &output)
	return &output, err
}

func (a *STSStub) GetSessionTokenAsync(ctx workflow.Context, input *sts.GetSessionTokenInput) *StsGetSessionTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sts.GetSessionToken", input)
	return &StsGetSessionTokenFuture{Future: future}
}
