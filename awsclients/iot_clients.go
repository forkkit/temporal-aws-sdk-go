// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/iot"
	"go.temporal.io/sdk/workflow"
)

type IoTClient interface {
	AcceptCertificateTransfer(ctx workflow.Context, input *iot.AcceptCertificateTransferInput) (*iot.AcceptCertificateTransferOutput, error)
	AcceptCertificateTransferAsync(ctx workflow.Context, input *iot.AcceptCertificateTransferInput) *IotAcceptCertificateTransferFuture

	AddThingToBillingGroup(ctx workflow.Context, input *iot.AddThingToBillingGroupInput) (*iot.AddThingToBillingGroupOutput, error)
	AddThingToBillingGroupAsync(ctx workflow.Context, input *iot.AddThingToBillingGroupInput) *IotAddThingToBillingGroupFuture

	AddThingToThingGroup(ctx workflow.Context, input *iot.AddThingToThingGroupInput) (*iot.AddThingToThingGroupOutput, error)
	AddThingToThingGroupAsync(ctx workflow.Context, input *iot.AddThingToThingGroupInput) *IotAddThingToThingGroupFuture

	AssociateTargetsWithJob(ctx workflow.Context, input *iot.AssociateTargetsWithJobInput) (*iot.AssociateTargetsWithJobOutput, error)
	AssociateTargetsWithJobAsync(ctx workflow.Context, input *iot.AssociateTargetsWithJobInput) *IotAssociateTargetsWithJobFuture

	AttachPolicy(ctx workflow.Context, input *iot.AttachPolicyInput) (*iot.AttachPolicyOutput, error)
	AttachPolicyAsync(ctx workflow.Context, input *iot.AttachPolicyInput) *IotAttachPolicyFuture

	AttachPrincipalPolicy(ctx workflow.Context, input *iot.AttachPrincipalPolicyInput) (*iot.AttachPrincipalPolicyOutput, error)
	AttachPrincipalPolicyAsync(ctx workflow.Context, input *iot.AttachPrincipalPolicyInput) *IotAttachPrincipalPolicyFuture

	AttachSecurityProfile(ctx workflow.Context, input *iot.AttachSecurityProfileInput) (*iot.AttachSecurityProfileOutput, error)
	AttachSecurityProfileAsync(ctx workflow.Context, input *iot.AttachSecurityProfileInput) *IotAttachSecurityProfileFuture

	AttachThingPrincipal(ctx workflow.Context, input *iot.AttachThingPrincipalInput) (*iot.AttachThingPrincipalOutput, error)
	AttachThingPrincipalAsync(ctx workflow.Context, input *iot.AttachThingPrincipalInput) *IotAttachThingPrincipalFuture

	CancelAuditMitigationActionsTask(ctx workflow.Context, input *iot.CancelAuditMitigationActionsTaskInput) (*iot.CancelAuditMitigationActionsTaskOutput, error)
	CancelAuditMitigationActionsTaskAsync(ctx workflow.Context, input *iot.CancelAuditMitigationActionsTaskInput) *IotCancelAuditMitigationActionsTaskFuture

	CancelAuditTask(ctx workflow.Context, input *iot.CancelAuditTaskInput) (*iot.CancelAuditTaskOutput, error)
	CancelAuditTaskAsync(ctx workflow.Context, input *iot.CancelAuditTaskInput) *IotCancelAuditTaskFuture

	CancelCertificateTransfer(ctx workflow.Context, input *iot.CancelCertificateTransferInput) (*iot.CancelCertificateTransferOutput, error)
	CancelCertificateTransferAsync(ctx workflow.Context, input *iot.CancelCertificateTransferInput) *IotCancelCertificateTransferFuture

	CancelJob(ctx workflow.Context, input *iot.CancelJobInput) (*iot.CancelJobOutput, error)
	CancelJobAsync(ctx workflow.Context, input *iot.CancelJobInput) *IotCancelJobFuture

	CancelJobExecution(ctx workflow.Context, input *iot.CancelJobExecutionInput) (*iot.CancelJobExecutionOutput, error)
	CancelJobExecutionAsync(ctx workflow.Context, input *iot.CancelJobExecutionInput) *IotCancelJobExecutionFuture

	ClearDefaultAuthorizer(ctx workflow.Context, input *iot.ClearDefaultAuthorizerInput) (*iot.ClearDefaultAuthorizerOutput, error)
	ClearDefaultAuthorizerAsync(ctx workflow.Context, input *iot.ClearDefaultAuthorizerInput) *IotClearDefaultAuthorizerFuture

	ConfirmTopicRuleDestination(ctx workflow.Context, input *iot.ConfirmTopicRuleDestinationInput) (*iot.ConfirmTopicRuleDestinationOutput, error)
	ConfirmTopicRuleDestinationAsync(ctx workflow.Context, input *iot.ConfirmTopicRuleDestinationInput) *IotConfirmTopicRuleDestinationFuture

	CreateAuditSuppression(ctx workflow.Context, input *iot.CreateAuditSuppressionInput) (*iot.CreateAuditSuppressionOutput, error)
	CreateAuditSuppressionAsync(ctx workflow.Context, input *iot.CreateAuditSuppressionInput) *IotCreateAuditSuppressionFuture

	CreateAuthorizer(ctx workflow.Context, input *iot.CreateAuthorizerInput) (*iot.CreateAuthorizerOutput, error)
	CreateAuthorizerAsync(ctx workflow.Context, input *iot.CreateAuthorizerInput) *IotCreateAuthorizerFuture

	CreateBillingGroup(ctx workflow.Context, input *iot.CreateBillingGroupInput) (*iot.CreateBillingGroupOutput, error)
	CreateBillingGroupAsync(ctx workflow.Context, input *iot.CreateBillingGroupInput) *IotCreateBillingGroupFuture

	CreateCertificateFromCsr(ctx workflow.Context, input *iot.CreateCertificateFromCsrInput) (*iot.CreateCertificateFromCsrOutput, error)
	CreateCertificateFromCsrAsync(ctx workflow.Context, input *iot.CreateCertificateFromCsrInput) *IotCreateCertificateFromCsrFuture

	CreateDimension(ctx workflow.Context, input *iot.CreateDimensionInput) (*iot.CreateDimensionOutput, error)
	CreateDimensionAsync(ctx workflow.Context, input *iot.CreateDimensionInput) *IotCreateDimensionFuture

	CreateDomainConfiguration(ctx workflow.Context, input *iot.CreateDomainConfigurationInput) (*iot.CreateDomainConfigurationOutput, error)
	CreateDomainConfigurationAsync(ctx workflow.Context, input *iot.CreateDomainConfigurationInput) *IotCreateDomainConfigurationFuture

	CreateDynamicThingGroup(ctx workflow.Context, input *iot.CreateDynamicThingGroupInput) (*iot.CreateDynamicThingGroupOutput, error)
	CreateDynamicThingGroupAsync(ctx workflow.Context, input *iot.CreateDynamicThingGroupInput) *IotCreateDynamicThingGroupFuture

	CreateJob(ctx workflow.Context, input *iot.CreateJobInput) (*iot.CreateJobOutput, error)
	CreateJobAsync(ctx workflow.Context, input *iot.CreateJobInput) *IotCreateJobFuture

	CreateKeysAndCertificate(ctx workflow.Context, input *iot.CreateKeysAndCertificateInput) (*iot.CreateKeysAndCertificateOutput, error)
	CreateKeysAndCertificateAsync(ctx workflow.Context, input *iot.CreateKeysAndCertificateInput) *IotCreateKeysAndCertificateFuture

	CreateMitigationAction(ctx workflow.Context, input *iot.CreateMitigationActionInput) (*iot.CreateMitigationActionOutput, error)
	CreateMitigationActionAsync(ctx workflow.Context, input *iot.CreateMitigationActionInput) *IotCreateMitigationActionFuture

	CreateOTAUpdate(ctx workflow.Context, input *iot.CreateOTAUpdateInput) (*iot.CreateOTAUpdateOutput, error)
	CreateOTAUpdateAsync(ctx workflow.Context, input *iot.CreateOTAUpdateInput) *IotCreateOTAUpdateFuture

	CreatePolicy(ctx workflow.Context, input *iot.CreatePolicyInput) (*iot.CreatePolicyOutput, error)
	CreatePolicyAsync(ctx workflow.Context, input *iot.CreatePolicyInput) *IotCreatePolicyFuture

	CreatePolicyVersion(ctx workflow.Context, input *iot.CreatePolicyVersionInput) (*iot.CreatePolicyVersionOutput, error)
	CreatePolicyVersionAsync(ctx workflow.Context, input *iot.CreatePolicyVersionInput) *IotCreatePolicyVersionFuture

	CreateProvisioningClaim(ctx workflow.Context, input *iot.CreateProvisioningClaimInput) (*iot.CreateProvisioningClaimOutput, error)
	CreateProvisioningClaimAsync(ctx workflow.Context, input *iot.CreateProvisioningClaimInput) *IotCreateProvisioningClaimFuture

	CreateProvisioningTemplate(ctx workflow.Context, input *iot.CreateProvisioningTemplateInput) (*iot.CreateProvisioningTemplateOutput, error)
	CreateProvisioningTemplateAsync(ctx workflow.Context, input *iot.CreateProvisioningTemplateInput) *IotCreateProvisioningTemplateFuture

	CreateProvisioningTemplateVersion(ctx workflow.Context, input *iot.CreateProvisioningTemplateVersionInput) (*iot.CreateProvisioningTemplateVersionOutput, error)
	CreateProvisioningTemplateVersionAsync(ctx workflow.Context, input *iot.CreateProvisioningTemplateVersionInput) *IotCreateProvisioningTemplateVersionFuture

	CreateRoleAlias(ctx workflow.Context, input *iot.CreateRoleAliasInput) (*iot.CreateRoleAliasOutput, error)
	CreateRoleAliasAsync(ctx workflow.Context, input *iot.CreateRoleAliasInput) *IotCreateRoleAliasFuture

	CreateScheduledAudit(ctx workflow.Context, input *iot.CreateScheduledAuditInput) (*iot.CreateScheduledAuditOutput, error)
	CreateScheduledAuditAsync(ctx workflow.Context, input *iot.CreateScheduledAuditInput) *IotCreateScheduledAuditFuture

	CreateSecurityProfile(ctx workflow.Context, input *iot.CreateSecurityProfileInput) (*iot.CreateSecurityProfileOutput, error)
	CreateSecurityProfileAsync(ctx workflow.Context, input *iot.CreateSecurityProfileInput) *IotCreateSecurityProfileFuture

	CreateStream(ctx workflow.Context, input *iot.CreateStreamInput) (*iot.CreateStreamOutput, error)
	CreateStreamAsync(ctx workflow.Context, input *iot.CreateStreamInput) *IotCreateStreamFuture

	CreateThing(ctx workflow.Context, input *iot.CreateThingInput) (*iot.CreateThingOutput, error)
	CreateThingAsync(ctx workflow.Context, input *iot.CreateThingInput) *IotCreateThingFuture

	CreateThingGroup(ctx workflow.Context, input *iot.CreateThingGroupInput) (*iot.CreateThingGroupOutput, error)
	CreateThingGroupAsync(ctx workflow.Context, input *iot.CreateThingGroupInput) *IotCreateThingGroupFuture

	CreateThingType(ctx workflow.Context, input *iot.CreateThingTypeInput) (*iot.CreateThingTypeOutput, error)
	CreateThingTypeAsync(ctx workflow.Context, input *iot.CreateThingTypeInput) *IotCreateThingTypeFuture

	CreateTopicRule(ctx workflow.Context, input *iot.CreateTopicRuleInput) (*iot.CreateTopicRuleOutput, error)
	CreateTopicRuleAsync(ctx workflow.Context, input *iot.CreateTopicRuleInput) *IotCreateTopicRuleFuture

	CreateTopicRuleDestination(ctx workflow.Context, input *iot.CreateTopicRuleDestinationInput) (*iot.CreateTopicRuleDestinationOutput, error)
	CreateTopicRuleDestinationAsync(ctx workflow.Context, input *iot.CreateTopicRuleDestinationInput) *IotCreateTopicRuleDestinationFuture

	DeleteAccountAuditConfiguration(ctx workflow.Context, input *iot.DeleteAccountAuditConfigurationInput) (*iot.DeleteAccountAuditConfigurationOutput, error)
	DeleteAccountAuditConfigurationAsync(ctx workflow.Context, input *iot.DeleteAccountAuditConfigurationInput) *IotDeleteAccountAuditConfigurationFuture

	DeleteAuditSuppression(ctx workflow.Context, input *iot.DeleteAuditSuppressionInput) (*iot.DeleteAuditSuppressionOutput, error)
	DeleteAuditSuppressionAsync(ctx workflow.Context, input *iot.DeleteAuditSuppressionInput) *IotDeleteAuditSuppressionFuture

	DeleteAuthorizer(ctx workflow.Context, input *iot.DeleteAuthorizerInput) (*iot.DeleteAuthorizerOutput, error)
	DeleteAuthorizerAsync(ctx workflow.Context, input *iot.DeleteAuthorizerInput) *IotDeleteAuthorizerFuture

	DeleteBillingGroup(ctx workflow.Context, input *iot.DeleteBillingGroupInput) (*iot.DeleteBillingGroupOutput, error)
	DeleteBillingGroupAsync(ctx workflow.Context, input *iot.DeleteBillingGroupInput) *IotDeleteBillingGroupFuture

	DeleteCACertificate(ctx workflow.Context, input *iot.DeleteCACertificateInput) (*iot.DeleteCACertificateOutput, error)
	DeleteCACertificateAsync(ctx workflow.Context, input *iot.DeleteCACertificateInput) *IotDeleteCACertificateFuture

	DeleteCertificate(ctx workflow.Context, input *iot.DeleteCertificateInput) (*iot.DeleteCertificateOutput, error)
	DeleteCertificateAsync(ctx workflow.Context, input *iot.DeleteCertificateInput) *IotDeleteCertificateFuture

	DeleteDimension(ctx workflow.Context, input *iot.DeleteDimensionInput) (*iot.DeleteDimensionOutput, error)
	DeleteDimensionAsync(ctx workflow.Context, input *iot.DeleteDimensionInput) *IotDeleteDimensionFuture

	DeleteDomainConfiguration(ctx workflow.Context, input *iot.DeleteDomainConfigurationInput) (*iot.DeleteDomainConfigurationOutput, error)
	DeleteDomainConfigurationAsync(ctx workflow.Context, input *iot.DeleteDomainConfigurationInput) *IotDeleteDomainConfigurationFuture

	DeleteDynamicThingGroup(ctx workflow.Context, input *iot.DeleteDynamicThingGroupInput) (*iot.DeleteDynamicThingGroupOutput, error)
	DeleteDynamicThingGroupAsync(ctx workflow.Context, input *iot.DeleteDynamicThingGroupInput) *IotDeleteDynamicThingGroupFuture

	DeleteJob(ctx workflow.Context, input *iot.DeleteJobInput) (*iot.DeleteJobOutput, error)
	DeleteJobAsync(ctx workflow.Context, input *iot.DeleteJobInput) *IotDeleteJobFuture

	DeleteJobExecution(ctx workflow.Context, input *iot.DeleteJobExecutionInput) (*iot.DeleteJobExecutionOutput, error)
	DeleteJobExecutionAsync(ctx workflow.Context, input *iot.DeleteJobExecutionInput) *IotDeleteJobExecutionFuture

	DeleteMitigationAction(ctx workflow.Context, input *iot.DeleteMitigationActionInput) (*iot.DeleteMitigationActionOutput, error)
	DeleteMitigationActionAsync(ctx workflow.Context, input *iot.DeleteMitigationActionInput) *IotDeleteMitigationActionFuture

	DeleteOTAUpdate(ctx workflow.Context, input *iot.DeleteOTAUpdateInput) (*iot.DeleteOTAUpdateOutput, error)
	DeleteOTAUpdateAsync(ctx workflow.Context, input *iot.DeleteOTAUpdateInput) *IotDeleteOTAUpdateFuture

	DeletePolicy(ctx workflow.Context, input *iot.DeletePolicyInput) (*iot.DeletePolicyOutput, error)
	DeletePolicyAsync(ctx workflow.Context, input *iot.DeletePolicyInput) *IotDeletePolicyFuture

	DeletePolicyVersion(ctx workflow.Context, input *iot.DeletePolicyVersionInput) (*iot.DeletePolicyVersionOutput, error)
	DeletePolicyVersionAsync(ctx workflow.Context, input *iot.DeletePolicyVersionInput) *IotDeletePolicyVersionFuture

	DeleteProvisioningTemplate(ctx workflow.Context, input *iot.DeleteProvisioningTemplateInput) (*iot.DeleteProvisioningTemplateOutput, error)
	DeleteProvisioningTemplateAsync(ctx workflow.Context, input *iot.DeleteProvisioningTemplateInput) *IotDeleteProvisioningTemplateFuture

	DeleteProvisioningTemplateVersion(ctx workflow.Context, input *iot.DeleteProvisioningTemplateVersionInput) (*iot.DeleteProvisioningTemplateVersionOutput, error)
	DeleteProvisioningTemplateVersionAsync(ctx workflow.Context, input *iot.DeleteProvisioningTemplateVersionInput) *IotDeleteProvisioningTemplateVersionFuture

	DeleteRegistrationCode(ctx workflow.Context, input *iot.DeleteRegistrationCodeInput) (*iot.DeleteRegistrationCodeOutput, error)
	DeleteRegistrationCodeAsync(ctx workflow.Context, input *iot.DeleteRegistrationCodeInput) *IotDeleteRegistrationCodeFuture

	DeleteRoleAlias(ctx workflow.Context, input *iot.DeleteRoleAliasInput) (*iot.DeleteRoleAliasOutput, error)
	DeleteRoleAliasAsync(ctx workflow.Context, input *iot.DeleteRoleAliasInput) *IotDeleteRoleAliasFuture

	DeleteScheduledAudit(ctx workflow.Context, input *iot.DeleteScheduledAuditInput) (*iot.DeleteScheduledAuditOutput, error)
	DeleteScheduledAuditAsync(ctx workflow.Context, input *iot.DeleteScheduledAuditInput) *IotDeleteScheduledAuditFuture

	DeleteSecurityProfile(ctx workflow.Context, input *iot.DeleteSecurityProfileInput) (*iot.DeleteSecurityProfileOutput, error)
	DeleteSecurityProfileAsync(ctx workflow.Context, input *iot.DeleteSecurityProfileInput) *IotDeleteSecurityProfileFuture

	DeleteStream(ctx workflow.Context, input *iot.DeleteStreamInput) (*iot.DeleteStreamOutput, error)
	DeleteStreamAsync(ctx workflow.Context, input *iot.DeleteStreamInput) *IotDeleteStreamFuture

	DeleteThing(ctx workflow.Context, input *iot.DeleteThingInput) (*iot.DeleteThingOutput, error)
	DeleteThingAsync(ctx workflow.Context, input *iot.DeleteThingInput) *IotDeleteThingFuture

	DeleteThingGroup(ctx workflow.Context, input *iot.DeleteThingGroupInput) (*iot.DeleteThingGroupOutput, error)
	DeleteThingGroupAsync(ctx workflow.Context, input *iot.DeleteThingGroupInput) *IotDeleteThingGroupFuture

	DeleteThingType(ctx workflow.Context, input *iot.DeleteThingTypeInput) (*iot.DeleteThingTypeOutput, error)
	DeleteThingTypeAsync(ctx workflow.Context, input *iot.DeleteThingTypeInput) *IotDeleteThingTypeFuture

	DeleteTopicRule(ctx workflow.Context, input *iot.DeleteTopicRuleInput) (*iot.DeleteTopicRuleOutput, error)
	DeleteTopicRuleAsync(ctx workflow.Context, input *iot.DeleteTopicRuleInput) *IotDeleteTopicRuleFuture

	DeleteTopicRuleDestination(ctx workflow.Context, input *iot.DeleteTopicRuleDestinationInput) (*iot.DeleteTopicRuleDestinationOutput, error)
	DeleteTopicRuleDestinationAsync(ctx workflow.Context, input *iot.DeleteTopicRuleDestinationInput) *IotDeleteTopicRuleDestinationFuture

	DeleteV2LoggingLevel(ctx workflow.Context, input *iot.DeleteV2LoggingLevelInput) (*iot.DeleteV2LoggingLevelOutput, error)
	DeleteV2LoggingLevelAsync(ctx workflow.Context, input *iot.DeleteV2LoggingLevelInput) *IotDeleteV2LoggingLevelFuture

	DeprecateThingType(ctx workflow.Context, input *iot.DeprecateThingTypeInput) (*iot.DeprecateThingTypeOutput, error)
	DeprecateThingTypeAsync(ctx workflow.Context, input *iot.DeprecateThingTypeInput) *IotDeprecateThingTypeFuture

	DescribeAccountAuditConfiguration(ctx workflow.Context, input *iot.DescribeAccountAuditConfigurationInput) (*iot.DescribeAccountAuditConfigurationOutput, error)
	DescribeAccountAuditConfigurationAsync(ctx workflow.Context, input *iot.DescribeAccountAuditConfigurationInput) *IotDescribeAccountAuditConfigurationFuture

	DescribeAuditFinding(ctx workflow.Context, input *iot.DescribeAuditFindingInput) (*iot.DescribeAuditFindingOutput, error)
	DescribeAuditFindingAsync(ctx workflow.Context, input *iot.DescribeAuditFindingInput) *IotDescribeAuditFindingFuture

	DescribeAuditMitigationActionsTask(ctx workflow.Context, input *iot.DescribeAuditMitigationActionsTaskInput) (*iot.DescribeAuditMitigationActionsTaskOutput, error)
	DescribeAuditMitigationActionsTaskAsync(ctx workflow.Context, input *iot.DescribeAuditMitigationActionsTaskInput) *IotDescribeAuditMitigationActionsTaskFuture

	DescribeAuditSuppression(ctx workflow.Context, input *iot.DescribeAuditSuppressionInput) (*iot.DescribeAuditSuppressionOutput, error)
	DescribeAuditSuppressionAsync(ctx workflow.Context, input *iot.DescribeAuditSuppressionInput) *IotDescribeAuditSuppressionFuture

	DescribeAuditTask(ctx workflow.Context, input *iot.DescribeAuditTaskInput) (*iot.DescribeAuditTaskOutput, error)
	DescribeAuditTaskAsync(ctx workflow.Context, input *iot.DescribeAuditTaskInput) *IotDescribeAuditTaskFuture

	DescribeAuthorizer(ctx workflow.Context, input *iot.DescribeAuthorizerInput) (*iot.DescribeAuthorizerOutput, error)
	DescribeAuthorizerAsync(ctx workflow.Context, input *iot.DescribeAuthorizerInput) *IotDescribeAuthorizerFuture

	DescribeBillingGroup(ctx workflow.Context, input *iot.DescribeBillingGroupInput) (*iot.DescribeBillingGroupOutput, error)
	DescribeBillingGroupAsync(ctx workflow.Context, input *iot.DescribeBillingGroupInput) *IotDescribeBillingGroupFuture

	DescribeCACertificate(ctx workflow.Context, input *iot.DescribeCACertificateInput) (*iot.DescribeCACertificateOutput, error)
	DescribeCACertificateAsync(ctx workflow.Context, input *iot.DescribeCACertificateInput) *IotDescribeCACertificateFuture

	DescribeCertificate(ctx workflow.Context, input *iot.DescribeCertificateInput) (*iot.DescribeCertificateOutput, error)
	DescribeCertificateAsync(ctx workflow.Context, input *iot.DescribeCertificateInput) *IotDescribeCertificateFuture

	DescribeDefaultAuthorizer(ctx workflow.Context, input *iot.DescribeDefaultAuthorizerInput) (*iot.DescribeDefaultAuthorizerOutput, error)
	DescribeDefaultAuthorizerAsync(ctx workflow.Context, input *iot.DescribeDefaultAuthorizerInput) *IotDescribeDefaultAuthorizerFuture

	DescribeDimension(ctx workflow.Context, input *iot.DescribeDimensionInput) (*iot.DescribeDimensionOutput, error)
	DescribeDimensionAsync(ctx workflow.Context, input *iot.DescribeDimensionInput) *IotDescribeDimensionFuture

	DescribeDomainConfiguration(ctx workflow.Context, input *iot.DescribeDomainConfigurationInput) (*iot.DescribeDomainConfigurationOutput, error)
	DescribeDomainConfigurationAsync(ctx workflow.Context, input *iot.DescribeDomainConfigurationInput) *IotDescribeDomainConfigurationFuture

	DescribeEndpoint(ctx workflow.Context, input *iot.DescribeEndpointInput) (*iot.DescribeEndpointOutput, error)
	DescribeEndpointAsync(ctx workflow.Context, input *iot.DescribeEndpointInput) *IotDescribeEndpointFuture

	DescribeEventConfigurations(ctx workflow.Context, input *iot.DescribeEventConfigurationsInput) (*iot.DescribeEventConfigurationsOutput, error)
	DescribeEventConfigurationsAsync(ctx workflow.Context, input *iot.DescribeEventConfigurationsInput) *IotDescribeEventConfigurationsFuture

	DescribeIndex(ctx workflow.Context, input *iot.DescribeIndexInput) (*iot.DescribeIndexOutput, error)
	DescribeIndexAsync(ctx workflow.Context, input *iot.DescribeIndexInput) *IotDescribeIndexFuture

	DescribeJob(ctx workflow.Context, input *iot.DescribeJobInput) (*iot.DescribeJobOutput, error)
	DescribeJobAsync(ctx workflow.Context, input *iot.DescribeJobInput) *IotDescribeJobFuture

	DescribeJobExecution(ctx workflow.Context, input *iot.DescribeJobExecutionInput) (*iot.DescribeJobExecutionOutput, error)
	DescribeJobExecutionAsync(ctx workflow.Context, input *iot.DescribeJobExecutionInput) *IotDescribeJobExecutionFuture

	DescribeMitigationAction(ctx workflow.Context, input *iot.DescribeMitigationActionInput) (*iot.DescribeMitigationActionOutput, error)
	DescribeMitigationActionAsync(ctx workflow.Context, input *iot.DescribeMitigationActionInput) *IotDescribeMitigationActionFuture

	DescribeProvisioningTemplate(ctx workflow.Context, input *iot.DescribeProvisioningTemplateInput) (*iot.DescribeProvisioningTemplateOutput, error)
	DescribeProvisioningTemplateAsync(ctx workflow.Context, input *iot.DescribeProvisioningTemplateInput) *IotDescribeProvisioningTemplateFuture

	DescribeProvisioningTemplateVersion(ctx workflow.Context, input *iot.DescribeProvisioningTemplateVersionInput) (*iot.DescribeProvisioningTemplateVersionOutput, error)
	DescribeProvisioningTemplateVersionAsync(ctx workflow.Context, input *iot.DescribeProvisioningTemplateVersionInput) *IotDescribeProvisioningTemplateVersionFuture

	DescribeRoleAlias(ctx workflow.Context, input *iot.DescribeRoleAliasInput) (*iot.DescribeRoleAliasOutput, error)
	DescribeRoleAliasAsync(ctx workflow.Context, input *iot.DescribeRoleAliasInput) *IotDescribeRoleAliasFuture

	DescribeScheduledAudit(ctx workflow.Context, input *iot.DescribeScheduledAuditInput) (*iot.DescribeScheduledAuditOutput, error)
	DescribeScheduledAuditAsync(ctx workflow.Context, input *iot.DescribeScheduledAuditInput) *IotDescribeScheduledAuditFuture

	DescribeSecurityProfile(ctx workflow.Context, input *iot.DescribeSecurityProfileInput) (*iot.DescribeSecurityProfileOutput, error)
	DescribeSecurityProfileAsync(ctx workflow.Context, input *iot.DescribeSecurityProfileInput) *IotDescribeSecurityProfileFuture

	DescribeStream(ctx workflow.Context, input *iot.DescribeStreamInput) (*iot.DescribeStreamOutput, error)
	DescribeStreamAsync(ctx workflow.Context, input *iot.DescribeStreamInput) *IotDescribeStreamFuture

	DescribeThing(ctx workflow.Context, input *iot.DescribeThingInput) (*iot.DescribeThingOutput, error)
	DescribeThingAsync(ctx workflow.Context, input *iot.DescribeThingInput) *IotDescribeThingFuture

	DescribeThingGroup(ctx workflow.Context, input *iot.DescribeThingGroupInput) (*iot.DescribeThingGroupOutput, error)
	DescribeThingGroupAsync(ctx workflow.Context, input *iot.DescribeThingGroupInput) *IotDescribeThingGroupFuture

	DescribeThingRegistrationTask(ctx workflow.Context, input *iot.DescribeThingRegistrationTaskInput) (*iot.DescribeThingRegistrationTaskOutput, error)
	DescribeThingRegistrationTaskAsync(ctx workflow.Context, input *iot.DescribeThingRegistrationTaskInput) *IotDescribeThingRegistrationTaskFuture

	DescribeThingType(ctx workflow.Context, input *iot.DescribeThingTypeInput) (*iot.DescribeThingTypeOutput, error)
	DescribeThingTypeAsync(ctx workflow.Context, input *iot.DescribeThingTypeInput) *IotDescribeThingTypeFuture

	DetachPolicy(ctx workflow.Context, input *iot.DetachPolicyInput) (*iot.DetachPolicyOutput, error)
	DetachPolicyAsync(ctx workflow.Context, input *iot.DetachPolicyInput) *IotDetachPolicyFuture

	DetachPrincipalPolicy(ctx workflow.Context, input *iot.DetachPrincipalPolicyInput) (*iot.DetachPrincipalPolicyOutput, error)
	DetachPrincipalPolicyAsync(ctx workflow.Context, input *iot.DetachPrincipalPolicyInput) *IotDetachPrincipalPolicyFuture

	DetachSecurityProfile(ctx workflow.Context, input *iot.DetachSecurityProfileInput) (*iot.DetachSecurityProfileOutput, error)
	DetachSecurityProfileAsync(ctx workflow.Context, input *iot.DetachSecurityProfileInput) *IotDetachSecurityProfileFuture

	DetachThingPrincipal(ctx workflow.Context, input *iot.DetachThingPrincipalInput) (*iot.DetachThingPrincipalOutput, error)
	DetachThingPrincipalAsync(ctx workflow.Context, input *iot.DetachThingPrincipalInput) *IotDetachThingPrincipalFuture

	DisableTopicRule(ctx workflow.Context, input *iot.DisableTopicRuleInput) (*iot.DisableTopicRuleOutput, error)
	DisableTopicRuleAsync(ctx workflow.Context, input *iot.DisableTopicRuleInput) *IotDisableTopicRuleFuture

	EnableTopicRule(ctx workflow.Context, input *iot.EnableTopicRuleInput) (*iot.EnableTopicRuleOutput, error)
	EnableTopicRuleAsync(ctx workflow.Context, input *iot.EnableTopicRuleInput) *IotEnableTopicRuleFuture

	GetCardinality(ctx workflow.Context, input *iot.GetCardinalityInput) (*iot.GetCardinalityOutput, error)
	GetCardinalityAsync(ctx workflow.Context, input *iot.GetCardinalityInput) *IotGetCardinalityFuture

	GetEffectivePolicies(ctx workflow.Context, input *iot.GetEffectivePoliciesInput) (*iot.GetEffectivePoliciesOutput, error)
	GetEffectivePoliciesAsync(ctx workflow.Context, input *iot.GetEffectivePoliciesInput) *IotGetEffectivePoliciesFuture

	GetIndexingConfiguration(ctx workflow.Context, input *iot.GetIndexingConfigurationInput) (*iot.GetIndexingConfigurationOutput, error)
	GetIndexingConfigurationAsync(ctx workflow.Context, input *iot.GetIndexingConfigurationInput) *IotGetIndexingConfigurationFuture

	GetJobDocument(ctx workflow.Context, input *iot.GetJobDocumentInput) (*iot.GetJobDocumentOutput, error)
	GetJobDocumentAsync(ctx workflow.Context, input *iot.GetJobDocumentInput) *IotGetJobDocumentFuture

	GetLoggingOptions(ctx workflow.Context, input *iot.GetLoggingOptionsInput) (*iot.GetLoggingOptionsOutput, error)
	GetLoggingOptionsAsync(ctx workflow.Context, input *iot.GetLoggingOptionsInput) *IotGetLoggingOptionsFuture

	GetOTAUpdate(ctx workflow.Context, input *iot.GetOTAUpdateInput) (*iot.GetOTAUpdateOutput, error)
	GetOTAUpdateAsync(ctx workflow.Context, input *iot.GetOTAUpdateInput) *IotGetOTAUpdateFuture

	GetPercentiles(ctx workflow.Context, input *iot.GetPercentilesInput) (*iot.GetPercentilesOutput, error)
	GetPercentilesAsync(ctx workflow.Context, input *iot.GetPercentilesInput) *IotGetPercentilesFuture

	GetPolicy(ctx workflow.Context, input *iot.GetPolicyInput) (*iot.GetPolicyOutput, error)
	GetPolicyAsync(ctx workflow.Context, input *iot.GetPolicyInput) *IotGetPolicyFuture

	GetPolicyVersion(ctx workflow.Context, input *iot.GetPolicyVersionInput) (*iot.GetPolicyVersionOutput, error)
	GetPolicyVersionAsync(ctx workflow.Context, input *iot.GetPolicyVersionInput) *IotGetPolicyVersionFuture

	GetRegistrationCode(ctx workflow.Context, input *iot.GetRegistrationCodeInput) (*iot.GetRegistrationCodeOutput, error)
	GetRegistrationCodeAsync(ctx workflow.Context, input *iot.GetRegistrationCodeInput) *IotGetRegistrationCodeFuture

	GetStatistics(ctx workflow.Context, input *iot.GetStatisticsInput) (*iot.GetStatisticsOutput, error)
	GetStatisticsAsync(ctx workflow.Context, input *iot.GetStatisticsInput) *IotGetStatisticsFuture

	GetTopicRule(ctx workflow.Context, input *iot.GetTopicRuleInput) (*iot.GetTopicRuleOutput, error)
	GetTopicRuleAsync(ctx workflow.Context, input *iot.GetTopicRuleInput) *IotGetTopicRuleFuture

	GetTopicRuleDestination(ctx workflow.Context, input *iot.GetTopicRuleDestinationInput) (*iot.GetTopicRuleDestinationOutput, error)
	GetTopicRuleDestinationAsync(ctx workflow.Context, input *iot.GetTopicRuleDestinationInput) *IotGetTopicRuleDestinationFuture

	GetV2LoggingOptions(ctx workflow.Context, input *iot.GetV2LoggingOptionsInput) (*iot.GetV2LoggingOptionsOutput, error)
	GetV2LoggingOptionsAsync(ctx workflow.Context, input *iot.GetV2LoggingOptionsInput) *IotGetV2LoggingOptionsFuture

	ListActiveViolations(ctx workflow.Context, input *iot.ListActiveViolationsInput) (*iot.ListActiveViolationsOutput, error)
	ListActiveViolationsAsync(ctx workflow.Context, input *iot.ListActiveViolationsInput) *IotListActiveViolationsFuture

	ListAttachedPolicies(ctx workflow.Context, input *iot.ListAttachedPoliciesInput) (*iot.ListAttachedPoliciesOutput, error)
	ListAttachedPoliciesAsync(ctx workflow.Context, input *iot.ListAttachedPoliciesInput) *IotListAttachedPoliciesFuture

	ListAuditFindings(ctx workflow.Context, input *iot.ListAuditFindingsInput) (*iot.ListAuditFindingsOutput, error)
	ListAuditFindingsAsync(ctx workflow.Context, input *iot.ListAuditFindingsInput) *IotListAuditFindingsFuture

	ListAuditMitigationActionsExecutions(ctx workflow.Context, input *iot.ListAuditMitigationActionsExecutionsInput) (*iot.ListAuditMitigationActionsExecutionsOutput, error)
	ListAuditMitigationActionsExecutionsAsync(ctx workflow.Context, input *iot.ListAuditMitigationActionsExecutionsInput) *IotListAuditMitigationActionsExecutionsFuture

	ListAuditMitigationActionsTasks(ctx workflow.Context, input *iot.ListAuditMitigationActionsTasksInput) (*iot.ListAuditMitigationActionsTasksOutput, error)
	ListAuditMitigationActionsTasksAsync(ctx workflow.Context, input *iot.ListAuditMitigationActionsTasksInput) *IotListAuditMitigationActionsTasksFuture

	ListAuditSuppressions(ctx workflow.Context, input *iot.ListAuditSuppressionsInput) (*iot.ListAuditSuppressionsOutput, error)
	ListAuditSuppressionsAsync(ctx workflow.Context, input *iot.ListAuditSuppressionsInput) *IotListAuditSuppressionsFuture

	ListAuditTasks(ctx workflow.Context, input *iot.ListAuditTasksInput) (*iot.ListAuditTasksOutput, error)
	ListAuditTasksAsync(ctx workflow.Context, input *iot.ListAuditTasksInput) *IotListAuditTasksFuture

	ListAuthorizers(ctx workflow.Context, input *iot.ListAuthorizersInput) (*iot.ListAuthorizersOutput, error)
	ListAuthorizersAsync(ctx workflow.Context, input *iot.ListAuthorizersInput) *IotListAuthorizersFuture

	ListBillingGroups(ctx workflow.Context, input *iot.ListBillingGroupsInput) (*iot.ListBillingGroupsOutput, error)
	ListBillingGroupsAsync(ctx workflow.Context, input *iot.ListBillingGroupsInput) *IotListBillingGroupsFuture

	ListCACertificates(ctx workflow.Context, input *iot.ListCACertificatesInput) (*iot.ListCACertificatesOutput, error)
	ListCACertificatesAsync(ctx workflow.Context, input *iot.ListCACertificatesInput) *IotListCACertificatesFuture

	ListCertificates(ctx workflow.Context, input *iot.ListCertificatesInput) (*iot.ListCertificatesOutput, error)
	ListCertificatesAsync(ctx workflow.Context, input *iot.ListCertificatesInput) *IotListCertificatesFuture

	ListCertificatesByCA(ctx workflow.Context, input *iot.ListCertificatesByCAInput) (*iot.ListCertificatesByCAOutput, error)
	ListCertificatesByCAAsync(ctx workflow.Context, input *iot.ListCertificatesByCAInput) *IotListCertificatesByCAFuture

	ListDimensions(ctx workflow.Context, input *iot.ListDimensionsInput) (*iot.ListDimensionsOutput, error)
	ListDimensionsAsync(ctx workflow.Context, input *iot.ListDimensionsInput) *IotListDimensionsFuture

	ListDomainConfigurations(ctx workflow.Context, input *iot.ListDomainConfigurationsInput) (*iot.ListDomainConfigurationsOutput, error)
	ListDomainConfigurationsAsync(ctx workflow.Context, input *iot.ListDomainConfigurationsInput) *IotListDomainConfigurationsFuture

	ListIndices(ctx workflow.Context, input *iot.ListIndicesInput) (*iot.ListIndicesOutput, error)
	ListIndicesAsync(ctx workflow.Context, input *iot.ListIndicesInput) *IotListIndicesFuture

	ListJobExecutionsForJob(ctx workflow.Context, input *iot.ListJobExecutionsForJobInput) (*iot.ListJobExecutionsForJobOutput, error)
	ListJobExecutionsForJobAsync(ctx workflow.Context, input *iot.ListJobExecutionsForJobInput) *IotListJobExecutionsForJobFuture

	ListJobExecutionsForThing(ctx workflow.Context, input *iot.ListJobExecutionsForThingInput) (*iot.ListJobExecutionsForThingOutput, error)
	ListJobExecutionsForThingAsync(ctx workflow.Context, input *iot.ListJobExecutionsForThingInput) *IotListJobExecutionsForThingFuture

	ListJobs(ctx workflow.Context, input *iot.ListJobsInput) (*iot.ListJobsOutput, error)
	ListJobsAsync(ctx workflow.Context, input *iot.ListJobsInput) *IotListJobsFuture

	ListMitigationActions(ctx workflow.Context, input *iot.ListMitigationActionsInput) (*iot.ListMitigationActionsOutput, error)
	ListMitigationActionsAsync(ctx workflow.Context, input *iot.ListMitigationActionsInput) *IotListMitigationActionsFuture

	ListOTAUpdates(ctx workflow.Context, input *iot.ListOTAUpdatesInput) (*iot.ListOTAUpdatesOutput, error)
	ListOTAUpdatesAsync(ctx workflow.Context, input *iot.ListOTAUpdatesInput) *IotListOTAUpdatesFuture

	ListOutgoingCertificates(ctx workflow.Context, input *iot.ListOutgoingCertificatesInput) (*iot.ListOutgoingCertificatesOutput, error)
	ListOutgoingCertificatesAsync(ctx workflow.Context, input *iot.ListOutgoingCertificatesInput) *IotListOutgoingCertificatesFuture

	ListPolicies(ctx workflow.Context, input *iot.ListPoliciesInput) (*iot.ListPoliciesOutput, error)
	ListPoliciesAsync(ctx workflow.Context, input *iot.ListPoliciesInput) *IotListPoliciesFuture

	ListPolicyPrincipals(ctx workflow.Context, input *iot.ListPolicyPrincipalsInput) (*iot.ListPolicyPrincipalsOutput, error)
	ListPolicyPrincipalsAsync(ctx workflow.Context, input *iot.ListPolicyPrincipalsInput) *IotListPolicyPrincipalsFuture

	ListPolicyVersions(ctx workflow.Context, input *iot.ListPolicyVersionsInput) (*iot.ListPolicyVersionsOutput, error)
	ListPolicyVersionsAsync(ctx workflow.Context, input *iot.ListPolicyVersionsInput) *IotListPolicyVersionsFuture

	ListPrincipalPolicies(ctx workflow.Context, input *iot.ListPrincipalPoliciesInput) (*iot.ListPrincipalPoliciesOutput, error)
	ListPrincipalPoliciesAsync(ctx workflow.Context, input *iot.ListPrincipalPoliciesInput) *IotListPrincipalPoliciesFuture

	ListPrincipalThings(ctx workflow.Context, input *iot.ListPrincipalThingsInput) (*iot.ListPrincipalThingsOutput, error)
	ListPrincipalThingsAsync(ctx workflow.Context, input *iot.ListPrincipalThingsInput) *IotListPrincipalThingsFuture

	ListProvisioningTemplateVersions(ctx workflow.Context, input *iot.ListProvisioningTemplateVersionsInput) (*iot.ListProvisioningTemplateVersionsOutput, error)
	ListProvisioningTemplateVersionsAsync(ctx workflow.Context, input *iot.ListProvisioningTemplateVersionsInput) *IotListProvisioningTemplateVersionsFuture

	ListProvisioningTemplates(ctx workflow.Context, input *iot.ListProvisioningTemplatesInput) (*iot.ListProvisioningTemplatesOutput, error)
	ListProvisioningTemplatesAsync(ctx workflow.Context, input *iot.ListProvisioningTemplatesInput) *IotListProvisioningTemplatesFuture

	ListRoleAliases(ctx workflow.Context, input *iot.ListRoleAliasesInput) (*iot.ListRoleAliasesOutput, error)
	ListRoleAliasesAsync(ctx workflow.Context, input *iot.ListRoleAliasesInput) *IotListRoleAliasesFuture

	ListScheduledAudits(ctx workflow.Context, input *iot.ListScheduledAuditsInput) (*iot.ListScheduledAuditsOutput, error)
	ListScheduledAuditsAsync(ctx workflow.Context, input *iot.ListScheduledAuditsInput) *IotListScheduledAuditsFuture

	ListSecurityProfiles(ctx workflow.Context, input *iot.ListSecurityProfilesInput) (*iot.ListSecurityProfilesOutput, error)
	ListSecurityProfilesAsync(ctx workflow.Context, input *iot.ListSecurityProfilesInput) *IotListSecurityProfilesFuture

	ListSecurityProfilesForTarget(ctx workflow.Context, input *iot.ListSecurityProfilesForTargetInput) (*iot.ListSecurityProfilesForTargetOutput, error)
	ListSecurityProfilesForTargetAsync(ctx workflow.Context, input *iot.ListSecurityProfilesForTargetInput) *IotListSecurityProfilesForTargetFuture

	ListStreams(ctx workflow.Context, input *iot.ListStreamsInput) (*iot.ListStreamsOutput, error)
	ListStreamsAsync(ctx workflow.Context, input *iot.ListStreamsInput) *IotListStreamsFuture

	ListTagsForResource(ctx workflow.Context, input *iot.ListTagsForResourceInput) (*iot.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *iot.ListTagsForResourceInput) *IotListTagsForResourceFuture

	ListTargetsForPolicy(ctx workflow.Context, input *iot.ListTargetsForPolicyInput) (*iot.ListTargetsForPolicyOutput, error)
	ListTargetsForPolicyAsync(ctx workflow.Context, input *iot.ListTargetsForPolicyInput) *IotListTargetsForPolicyFuture

	ListTargetsForSecurityProfile(ctx workflow.Context, input *iot.ListTargetsForSecurityProfileInput) (*iot.ListTargetsForSecurityProfileOutput, error)
	ListTargetsForSecurityProfileAsync(ctx workflow.Context, input *iot.ListTargetsForSecurityProfileInput) *IotListTargetsForSecurityProfileFuture

	ListThingGroups(ctx workflow.Context, input *iot.ListThingGroupsInput) (*iot.ListThingGroupsOutput, error)
	ListThingGroupsAsync(ctx workflow.Context, input *iot.ListThingGroupsInput) *IotListThingGroupsFuture

	ListThingGroupsForThing(ctx workflow.Context, input *iot.ListThingGroupsForThingInput) (*iot.ListThingGroupsForThingOutput, error)
	ListThingGroupsForThingAsync(ctx workflow.Context, input *iot.ListThingGroupsForThingInput) *IotListThingGroupsForThingFuture

	ListThingPrincipals(ctx workflow.Context, input *iot.ListThingPrincipalsInput) (*iot.ListThingPrincipalsOutput, error)
	ListThingPrincipalsAsync(ctx workflow.Context, input *iot.ListThingPrincipalsInput) *IotListThingPrincipalsFuture

	ListThingRegistrationTaskReports(ctx workflow.Context, input *iot.ListThingRegistrationTaskReportsInput) (*iot.ListThingRegistrationTaskReportsOutput, error)
	ListThingRegistrationTaskReportsAsync(ctx workflow.Context, input *iot.ListThingRegistrationTaskReportsInput) *IotListThingRegistrationTaskReportsFuture

	ListThingRegistrationTasks(ctx workflow.Context, input *iot.ListThingRegistrationTasksInput) (*iot.ListThingRegistrationTasksOutput, error)
	ListThingRegistrationTasksAsync(ctx workflow.Context, input *iot.ListThingRegistrationTasksInput) *IotListThingRegistrationTasksFuture

	ListThingTypes(ctx workflow.Context, input *iot.ListThingTypesInput) (*iot.ListThingTypesOutput, error)
	ListThingTypesAsync(ctx workflow.Context, input *iot.ListThingTypesInput) *IotListThingTypesFuture

	ListThings(ctx workflow.Context, input *iot.ListThingsInput) (*iot.ListThingsOutput, error)
	ListThingsAsync(ctx workflow.Context, input *iot.ListThingsInput) *IotListThingsFuture

	ListThingsInBillingGroup(ctx workflow.Context, input *iot.ListThingsInBillingGroupInput) (*iot.ListThingsInBillingGroupOutput, error)
	ListThingsInBillingGroupAsync(ctx workflow.Context, input *iot.ListThingsInBillingGroupInput) *IotListThingsInBillingGroupFuture

	ListThingsInThingGroup(ctx workflow.Context, input *iot.ListThingsInThingGroupInput) (*iot.ListThingsInThingGroupOutput, error)
	ListThingsInThingGroupAsync(ctx workflow.Context, input *iot.ListThingsInThingGroupInput) *IotListThingsInThingGroupFuture

	ListTopicRuleDestinations(ctx workflow.Context, input *iot.ListTopicRuleDestinationsInput) (*iot.ListTopicRuleDestinationsOutput, error)
	ListTopicRuleDestinationsAsync(ctx workflow.Context, input *iot.ListTopicRuleDestinationsInput) *IotListTopicRuleDestinationsFuture

	ListTopicRules(ctx workflow.Context, input *iot.ListTopicRulesInput) (*iot.ListTopicRulesOutput, error)
	ListTopicRulesAsync(ctx workflow.Context, input *iot.ListTopicRulesInput) *IotListTopicRulesFuture

	ListV2LoggingLevels(ctx workflow.Context, input *iot.ListV2LoggingLevelsInput) (*iot.ListV2LoggingLevelsOutput, error)
	ListV2LoggingLevelsAsync(ctx workflow.Context, input *iot.ListV2LoggingLevelsInput) *IotListV2LoggingLevelsFuture

	ListViolationEvents(ctx workflow.Context, input *iot.ListViolationEventsInput) (*iot.ListViolationEventsOutput, error)
	ListViolationEventsAsync(ctx workflow.Context, input *iot.ListViolationEventsInput) *IotListViolationEventsFuture

	RegisterCACertificate(ctx workflow.Context, input *iot.RegisterCACertificateInput) (*iot.RegisterCACertificateOutput, error)
	RegisterCACertificateAsync(ctx workflow.Context, input *iot.RegisterCACertificateInput) *IotRegisterCACertificateFuture

	RegisterCertificate(ctx workflow.Context, input *iot.RegisterCertificateInput) (*iot.RegisterCertificateOutput, error)
	RegisterCertificateAsync(ctx workflow.Context, input *iot.RegisterCertificateInput) *IotRegisterCertificateFuture

	RegisterCertificateWithoutCA(ctx workflow.Context, input *iot.RegisterCertificateWithoutCAInput) (*iot.RegisterCertificateWithoutCAOutput, error)
	RegisterCertificateWithoutCAAsync(ctx workflow.Context, input *iot.RegisterCertificateWithoutCAInput) *IotRegisterCertificateWithoutCAFuture

	RegisterThing(ctx workflow.Context, input *iot.RegisterThingInput) (*iot.RegisterThingOutput, error)
	RegisterThingAsync(ctx workflow.Context, input *iot.RegisterThingInput) *IotRegisterThingFuture

	RejectCertificateTransfer(ctx workflow.Context, input *iot.RejectCertificateTransferInput) (*iot.RejectCertificateTransferOutput, error)
	RejectCertificateTransferAsync(ctx workflow.Context, input *iot.RejectCertificateTransferInput) *IotRejectCertificateTransferFuture

	RemoveThingFromBillingGroup(ctx workflow.Context, input *iot.RemoveThingFromBillingGroupInput) (*iot.RemoveThingFromBillingGroupOutput, error)
	RemoveThingFromBillingGroupAsync(ctx workflow.Context, input *iot.RemoveThingFromBillingGroupInput) *IotRemoveThingFromBillingGroupFuture

	RemoveThingFromThingGroup(ctx workflow.Context, input *iot.RemoveThingFromThingGroupInput) (*iot.RemoveThingFromThingGroupOutput, error)
	RemoveThingFromThingGroupAsync(ctx workflow.Context, input *iot.RemoveThingFromThingGroupInput) *IotRemoveThingFromThingGroupFuture

	ReplaceTopicRule(ctx workflow.Context, input *iot.ReplaceTopicRuleInput) (*iot.ReplaceTopicRuleOutput, error)
	ReplaceTopicRuleAsync(ctx workflow.Context, input *iot.ReplaceTopicRuleInput) *IotReplaceTopicRuleFuture

	SearchIndex(ctx workflow.Context, input *iot.SearchIndexInput) (*iot.SearchIndexOutput, error)
	SearchIndexAsync(ctx workflow.Context, input *iot.SearchIndexInput) *IotSearchIndexFuture

	SetDefaultAuthorizer(ctx workflow.Context, input *iot.SetDefaultAuthorizerInput) (*iot.SetDefaultAuthorizerOutput, error)
	SetDefaultAuthorizerAsync(ctx workflow.Context, input *iot.SetDefaultAuthorizerInput) *IotSetDefaultAuthorizerFuture

	SetDefaultPolicyVersion(ctx workflow.Context, input *iot.SetDefaultPolicyVersionInput) (*iot.SetDefaultPolicyVersionOutput, error)
	SetDefaultPolicyVersionAsync(ctx workflow.Context, input *iot.SetDefaultPolicyVersionInput) *IotSetDefaultPolicyVersionFuture

	SetLoggingOptions(ctx workflow.Context, input *iot.SetLoggingOptionsInput) (*iot.SetLoggingOptionsOutput, error)
	SetLoggingOptionsAsync(ctx workflow.Context, input *iot.SetLoggingOptionsInput) *IotSetLoggingOptionsFuture

	SetV2LoggingLevel(ctx workflow.Context, input *iot.SetV2LoggingLevelInput) (*iot.SetV2LoggingLevelOutput, error)
	SetV2LoggingLevelAsync(ctx workflow.Context, input *iot.SetV2LoggingLevelInput) *IotSetV2LoggingLevelFuture

	SetV2LoggingOptions(ctx workflow.Context, input *iot.SetV2LoggingOptionsInput) (*iot.SetV2LoggingOptionsOutput, error)
	SetV2LoggingOptionsAsync(ctx workflow.Context, input *iot.SetV2LoggingOptionsInput) *IotSetV2LoggingOptionsFuture

	StartAuditMitigationActionsTask(ctx workflow.Context, input *iot.StartAuditMitigationActionsTaskInput) (*iot.StartAuditMitigationActionsTaskOutput, error)
	StartAuditMitigationActionsTaskAsync(ctx workflow.Context, input *iot.StartAuditMitigationActionsTaskInput) *IotStartAuditMitigationActionsTaskFuture

	StartOnDemandAuditTask(ctx workflow.Context, input *iot.StartOnDemandAuditTaskInput) (*iot.StartOnDemandAuditTaskOutput, error)
	StartOnDemandAuditTaskAsync(ctx workflow.Context, input *iot.StartOnDemandAuditTaskInput) *IotStartOnDemandAuditTaskFuture

	StartThingRegistrationTask(ctx workflow.Context, input *iot.StartThingRegistrationTaskInput) (*iot.StartThingRegistrationTaskOutput, error)
	StartThingRegistrationTaskAsync(ctx workflow.Context, input *iot.StartThingRegistrationTaskInput) *IotStartThingRegistrationTaskFuture

	StopThingRegistrationTask(ctx workflow.Context, input *iot.StopThingRegistrationTaskInput) (*iot.StopThingRegistrationTaskOutput, error)
	StopThingRegistrationTaskAsync(ctx workflow.Context, input *iot.StopThingRegistrationTaskInput) *IotStopThingRegistrationTaskFuture

	TagResource(ctx workflow.Context, input *iot.TagResourceInput) (*iot.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *iot.TagResourceInput) *IotTagResourceFuture

	TestAuthorization(ctx workflow.Context, input *iot.TestAuthorizationInput) (*iot.TestAuthorizationOutput, error)
	TestAuthorizationAsync(ctx workflow.Context, input *iot.TestAuthorizationInput) *IotTestAuthorizationFuture

	TestInvokeAuthorizer(ctx workflow.Context, input *iot.TestInvokeAuthorizerInput) (*iot.TestInvokeAuthorizerOutput, error)
	TestInvokeAuthorizerAsync(ctx workflow.Context, input *iot.TestInvokeAuthorizerInput) *IotTestInvokeAuthorizerFuture

	TransferCertificate(ctx workflow.Context, input *iot.TransferCertificateInput) (*iot.TransferCertificateOutput, error)
	TransferCertificateAsync(ctx workflow.Context, input *iot.TransferCertificateInput) *IotTransferCertificateFuture

	UntagResource(ctx workflow.Context, input *iot.UntagResourceInput) (*iot.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *iot.UntagResourceInput) *IotUntagResourceFuture

	UpdateAccountAuditConfiguration(ctx workflow.Context, input *iot.UpdateAccountAuditConfigurationInput) (*iot.UpdateAccountAuditConfigurationOutput, error)
	UpdateAccountAuditConfigurationAsync(ctx workflow.Context, input *iot.UpdateAccountAuditConfigurationInput) *IotUpdateAccountAuditConfigurationFuture

	UpdateAuditSuppression(ctx workflow.Context, input *iot.UpdateAuditSuppressionInput) (*iot.UpdateAuditSuppressionOutput, error)
	UpdateAuditSuppressionAsync(ctx workflow.Context, input *iot.UpdateAuditSuppressionInput) *IotUpdateAuditSuppressionFuture

	UpdateAuthorizer(ctx workflow.Context, input *iot.UpdateAuthorizerInput) (*iot.UpdateAuthorizerOutput, error)
	UpdateAuthorizerAsync(ctx workflow.Context, input *iot.UpdateAuthorizerInput) *IotUpdateAuthorizerFuture

	UpdateBillingGroup(ctx workflow.Context, input *iot.UpdateBillingGroupInput) (*iot.UpdateBillingGroupOutput, error)
	UpdateBillingGroupAsync(ctx workflow.Context, input *iot.UpdateBillingGroupInput) *IotUpdateBillingGroupFuture

	UpdateCACertificate(ctx workflow.Context, input *iot.UpdateCACertificateInput) (*iot.UpdateCACertificateOutput, error)
	UpdateCACertificateAsync(ctx workflow.Context, input *iot.UpdateCACertificateInput) *IotUpdateCACertificateFuture

	UpdateCertificate(ctx workflow.Context, input *iot.UpdateCertificateInput) (*iot.UpdateCertificateOutput, error)
	UpdateCertificateAsync(ctx workflow.Context, input *iot.UpdateCertificateInput) *IotUpdateCertificateFuture

	UpdateDimension(ctx workflow.Context, input *iot.UpdateDimensionInput) (*iot.UpdateDimensionOutput, error)
	UpdateDimensionAsync(ctx workflow.Context, input *iot.UpdateDimensionInput) *IotUpdateDimensionFuture

	UpdateDomainConfiguration(ctx workflow.Context, input *iot.UpdateDomainConfigurationInput) (*iot.UpdateDomainConfigurationOutput, error)
	UpdateDomainConfigurationAsync(ctx workflow.Context, input *iot.UpdateDomainConfigurationInput) *IotUpdateDomainConfigurationFuture

	UpdateDynamicThingGroup(ctx workflow.Context, input *iot.UpdateDynamicThingGroupInput) (*iot.UpdateDynamicThingGroupOutput, error)
	UpdateDynamicThingGroupAsync(ctx workflow.Context, input *iot.UpdateDynamicThingGroupInput) *IotUpdateDynamicThingGroupFuture

	UpdateEventConfigurations(ctx workflow.Context, input *iot.UpdateEventConfigurationsInput) (*iot.UpdateEventConfigurationsOutput, error)
	UpdateEventConfigurationsAsync(ctx workflow.Context, input *iot.UpdateEventConfigurationsInput) *IotUpdateEventConfigurationsFuture

	UpdateIndexingConfiguration(ctx workflow.Context, input *iot.UpdateIndexingConfigurationInput) (*iot.UpdateIndexingConfigurationOutput, error)
	UpdateIndexingConfigurationAsync(ctx workflow.Context, input *iot.UpdateIndexingConfigurationInput) *IotUpdateIndexingConfigurationFuture

	UpdateJob(ctx workflow.Context, input *iot.UpdateJobInput) (*iot.UpdateJobOutput, error)
	UpdateJobAsync(ctx workflow.Context, input *iot.UpdateJobInput) *IotUpdateJobFuture

	UpdateMitigationAction(ctx workflow.Context, input *iot.UpdateMitigationActionInput) (*iot.UpdateMitigationActionOutput, error)
	UpdateMitigationActionAsync(ctx workflow.Context, input *iot.UpdateMitigationActionInput) *IotUpdateMitigationActionFuture

	UpdateProvisioningTemplate(ctx workflow.Context, input *iot.UpdateProvisioningTemplateInput) (*iot.UpdateProvisioningTemplateOutput, error)
	UpdateProvisioningTemplateAsync(ctx workflow.Context, input *iot.UpdateProvisioningTemplateInput) *IotUpdateProvisioningTemplateFuture

	UpdateRoleAlias(ctx workflow.Context, input *iot.UpdateRoleAliasInput) (*iot.UpdateRoleAliasOutput, error)
	UpdateRoleAliasAsync(ctx workflow.Context, input *iot.UpdateRoleAliasInput) *IotUpdateRoleAliasFuture

	UpdateScheduledAudit(ctx workflow.Context, input *iot.UpdateScheduledAuditInput) (*iot.UpdateScheduledAuditOutput, error)
	UpdateScheduledAuditAsync(ctx workflow.Context, input *iot.UpdateScheduledAuditInput) *IotUpdateScheduledAuditFuture

	UpdateSecurityProfile(ctx workflow.Context, input *iot.UpdateSecurityProfileInput) (*iot.UpdateSecurityProfileOutput, error)
	UpdateSecurityProfileAsync(ctx workflow.Context, input *iot.UpdateSecurityProfileInput) *IotUpdateSecurityProfileFuture

	UpdateStream(ctx workflow.Context, input *iot.UpdateStreamInput) (*iot.UpdateStreamOutput, error)
	UpdateStreamAsync(ctx workflow.Context, input *iot.UpdateStreamInput) *IotUpdateStreamFuture

	UpdateThing(ctx workflow.Context, input *iot.UpdateThingInput) (*iot.UpdateThingOutput, error)
	UpdateThingAsync(ctx workflow.Context, input *iot.UpdateThingInput) *IotUpdateThingFuture

	UpdateThingGroup(ctx workflow.Context, input *iot.UpdateThingGroupInput) (*iot.UpdateThingGroupOutput, error)
	UpdateThingGroupAsync(ctx workflow.Context, input *iot.UpdateThingGroupInput) *IotUpdateThingGroupFuture

	UpdateThingGroupsForThing(ctx workflow.Context, input *iot.UpdateThingGroupsForThingInput) (*iot.UpdateThingGroupsForThingOutput, error)
	UpdateThingGroupsForThingAsync(ctx workflow.Context, input *iot.UpdateThingGroupsForThingInput) *IotUpdateThingGroupsForThingFuture

	UpdateTopicRuleDestination(ctx workflow.Context, input *iot.UpdateTopicRuleDestinationInput) (*iot.UpdateTopicRuleDestinationOutput, error)
	UpdateTopicRuleDestinationAsync(ctx workflow.Context, input *iot.UpdateTopicRuleDestinationInput) *IotUpdateTopicRuleDestinationFuture

	ValidateSecurityProfileBehaviors(ctx workflow.Context, input *iot.ValidateSecurityProfileBehaviorsInput) (*iot.ValidateSecurityProfileBehaviorsOutput, error)
	ValidateSecurityProfileBehaviorsAsync(ctx workflow.Context, input *iot.ValidateSecurityProfileBehaviorsInput) *IotValidateSecurityProfileBehaviorsFuture
}

type IoTStub struct{}

func NewIoTStub() IoTClient {
	return &IoTStub{}
}

type IotAcceptCertificateTransferFuture struct {
	Future workflow.Future
}

func (r *IotAcceptCertificateTransferFuture) Get(ctx workflow.Context) (*iot.AcceptCertificateTransferOutput, error) {
	var output iot.AcceptCertificateTransferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotAddThingToBillingGroupFuture struct {
	Future workflow.Future
}

func (r *IotAddThingToBillingGroupFuture) Get(ctx workflow.Context) (*iot.AddThingToBillingGroupOutput, error) {
	var output iot.AddThingToBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotAddThingToThingGroupFuture struct {
	Future workflow.Future
}

func (r *IotAddThingToThingGroupFuture) Get(ctx workflow.Context) (*iot.AddThingToThingGroupOutput, error) {
	var output iot.AddThingToThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotAssociateTargetsWithJobFuture struct {
	Future workflow.Future
}

func (r *IotAssociateTargetsWithJobFuture) Get(ctx workflow.Context) (*iot.AssociateTargetsWithJobOutput, error) {
	var output iot.AssociateTargetsWithJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotAttachPolicyFuture struct {
	Future workflow.Future
}

func (r *IotAttachPolicyFuture) Get(ctx workflow.Context) (*iot.AttachPolicyOutput, error) {
	var output iot.AttachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotAttachPrincipalPolicyFuture struct {
	Future workflow.Future
}

func (r *IotAttachPrincipalPolicyFuture) Get(ctx workflow.Context) (*iot.AttachPrincipalPolicyOutput, error) {
	var output iot.AttachPrincipalPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotAttachSecurityProfileFuture struct {
	Future workflow.Future
}

func (r *IotAttachSecurityProfileFuture) Get(ctx workflow.Context) (*iot.AttachSecurityProfileOutput, error) {
	var output iot.AttachSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotAttachThingPrincipalFuture struct {
	Future workflow.Future
}

func (r *IotAttachThingPrincipalFuture) Get(ctx workflow.Context) (*iot.AttachThingPrincipalOutput, error) {
	var output iot.AttachThingPrincipalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCancelAuditMitigationActionsTaskFuture struct {
	Future workflow.Future
}

func (r *IotCancelAuditMitigationActionsTaskFuture) Get(ctx workflow.Context) (*iot.CancelAuditMitigationActionsTaskOutput, error) {
	var output iot.CancelAuditMitigationActionsTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCancelAuditTaskFuture struct {
	Future workflow.Future
}

func (r *IotCancelAuditTaskFuture) Get(ctx workflow.Context) (*iot.CancelAuditTaskOutput, error) {
	var output iot.CancelAuditTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCancelCertificateTransferFuture struct {
	Future workflow.Future
}

func (r *IotCancelCertificateTransferFuture) Get(ctx workflow.Context) (*iot.CancelCertificateTransferOutput, error) {
	var output iot.CancelCertificateTransferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCancelJobFuture struct {
	Future workflow.Future
}

func (r *IotCancelJobFuture) Get(ctx workflow.Context) (*iot.CancelJobOutput, error) {
	var output iot.CancelJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCancelJobExecutionFuture struct {
	Future workflow.Future
}

func (r *IotCancelJobExecutionFuture) Get(ctx workflow.Context) (*iot.CancelJobExecutionOutput, error) {
	var output iot.CancelJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotClearDefaultAuthorizerFuture struct {
	Future workflow.Future
}

func (r *IotClearDefaultAuthorizerFuture) Get(ctx workflow.Context) (*iot.ClearDefaultAuthorizerOutput, error) {
	var output iot.ClearDefaultAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotConfirmTopicRuleDestinationFuture struct {
	Future workflow.Future
}

func (r *IotConfirmTopicRuleDestinationFuture) Get(ctx workflow.Context) (*iot.ConfirmTopicRuleDestinationOutput, error) {
	var output iot.ConfirmTopicRuleDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateAuditSuppressionFuture struct {
	Future workflow.Future
}

func (r *IotCreateAuditSuppressionFuture) Get(ctx workflow.Context) (*iot.CreateAuditSuppressionOutput, error) {
	var output iot.CreateAuditSuppressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateAuthorizerFuture struct {
	Future workflow.Future
}

func (r *IotCreateAuthorizerFuture) Get(ctx workflow.Context) (*iot.CreateAuthorizerOutput, error) {
	var output iot.CreateAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateBillingGroupFuture struct {
	Future workflow.Future
}

func (r *IotCreateBillingGroupFuture) Get(ctx workflow.Context) (*iot.CreateBillingGroupOutput, error) {
	var output iot.CreateBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateCertificateFromCsrFuture struct {
	Future workflow.Future
}

func (r *IotCreateCertificateFromCsrFuture) Get(ctx workflow.Context) (*iot.CreateCertificateFromCsrOutput, error) {
	var output iot.CreateCertificateFromCsrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateDimensionFuture struct {
	Future workflow.Future
}

func (r *IotCreateDimensionFuture) Get(ctx workflow.Context) (*iot.CreateDimensionOutput, error) {
	var output iot.CreateDimensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateDomainConfigurationFuture struct {
	Future workflow.Future
}

func (r *IotCreateDomainConfigurationFuture) Get(ctx workflow.Context) (*iot.CreateDomainConfigurationOutput, error) {
	var output iot.CreateDomainConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateDynamicThingGroupFuture struct {
	Future workflow.Future
}

func (r *IotCreateDynamicThingGroupFuture) Get(ctx workflow.Context) (*iot.CreateDynamicThingGroupOutput, error) {
	var output iot.CreateDynamicThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateJobFuture struct {
	Future workflow.Future
}

func (r *IotCreateJobFuture) Get(ctx workflow.Context) (*iot.CreateJobOutput, error) {
	var output iot.CreateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateKeysAndCertificateFuture struct {
	Future workflow.Future
}

func (r *IotCreateKeysAndCertificateFuture) Get(ctx workflow.Context) (*iot.CreateKeysAndCertificateOutput, error) {
	var output iot.CreateKeysAndCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateMitigationActionFuture struct {
	Future workflow.Future
}

func (r *IotCreateMitigationActionFuture) Get(ctx workflow.Context) (*iot.CreateMitigationActionOutput, error) {
	var output iot.CreateMitigationActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateOTAUpdateFuture struct {
	Future workflow.Future
}

func (r *IotCreateOTAUpdateFuture) Get(ctx workflow.Context) (*iot.CreateOTAUpdateOutput, error) {
	var output iot.CreateOTAUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreatePolicyFuture struct {
	Future workflow.Future
}

func (r *IotCreatePolicyFuture) Get(ctx workflow.Context) (*iot.CreatePolicyOutput, error) {
	var output iot.CreatePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreatePolicyVersionFuture struct {
	Future workflow.Future
}

func (r *IotCreatePolicyVersionFuture) Get(ctx workflow.Context) (*iot.CreatePolicyVersionOutput, error) {
	var output iot.CreatePolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateProvisioningClaimFuture struct {
	Future workflow.Future
}

func (r *IotCreateProvisioningClaimFuture) Get(ctx workflow.Context) (*iot.CreateProvisioningClaimOutput, error) {
	var output iot.CreateProvisioningClaimOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateProvisioningTemplateFuture struct {
	Future workflow.Future
}

func (r *IotCreateProvisioningTemplateFuture) Get(ctx workflow.Context) (*iot.CreateProvisioningTemplateOutput, error) {
	var output iot.CreateProvisioningTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateProvisioningTemplateVersionFuture struct {
	Future workflow.Future
}

func (r *IotCreateProvisioningTemplateVersionFuture) Get(ctx workflow.Context) (*iot.CreateProvisioningTemplateVersionOutput, error) {
	var output iot.CreateProvisioningTemplateVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateRoleAliasFuture struct {
	Future workflow.Future
}

func (r *IotCreateRoleAliasFuture) Get(ctx workflow.Context) (*iot.CreateRoleAliasOutput, error) {
	var output iot.CreateRoleAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateScheduledAuditFuture struct {
	Future workflow.Future
}

func (r *IotCreateScheduledAuditFuture) Get(ctx workflow.Context) (*iot.CreateScheduledAuditOutput, error) {
	var output iot.CreateScheduledAuditOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateSecurityProfileFuture struct {
	Future workflow.Future
}

func (r *IotCreateSecurityProfileFuture) Get(ctx workflow.Context) (*iot.CreateSecurityProfileOutput, error) {
	var output iot.CreateSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateStreamFuture struct {
	Future workflow.Future
}

func (r *IotCreateStreamFuture) Get(ctx workflow.Context) (*iot.CreateStreamOutput, error) {
	var output iot.CreateStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateThingFuture struct {
	Future workflow.Future
}

func (r *IotCreateThingFuture) Get(ctx workflow.Context) (*iot.CreateThingOutput, error) {
	var output iot.CreateThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateThingGroupFuture struct {
	Future workflow.Future
}

func (r *IotCreateThingGroupFuture) Get(ctx workflow.Context) (*iot.CreateThingGroupOutput, error) {
	var output iot.CreateThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateThingTypeFuture struct {
	Future workflow.Future
}

func (r *IotCreateThingTypeFuture) Get(ctx workflow.Context) (*iot.CreateThingTypeOutput, error) {
	var output iot.CreateThingTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateTopicRuleFuture struct {
	Future workflow.Future
}

func (r *IotCreateTopicRuleFuture) Get(ctx workflow.Context) (*iot.CreateTopicRuleOutput, error) {
	var output iot.CreateTopicRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotCreateTopicRuleDestinationFuture struct {
	Future workflow.Future
}

func (r *IotCreateTopicRuleDestinationFuture) Get(ctx workflow.Context) (*iot.CreateTopicRuleDestinationOutput, error) {
	var output iot.CreateTopicRuleDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteAccountAuditConfigurationFuture struct {
	Future workflow.Future
}

func (r *IotDeleteAccountAuditConfigurationFuture) Get(ctx workflow.Context) (*iot.DeleteAccountAuditConfigurationOutput, error) {
	var output iot.DeleteAccountAuditConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteAuditSuppressionFuture struct {
	Future workflow.Future
}

func (r *IotDeleteAuditSuppressionFuture) Get(ctx workflow.Context) (*iot.DeleteAuditSuppressionOutput, error) {
	var output iot.DeleteAuditSuppressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteAuthorizerFuture struct {
	Future workflow.Future
}

func (r *IotDeleteAuthorizerFuture) Get(ctx workflow.Context) (*iot.DeleteAuthorizerOutput, error) {
	var output iot.DeleteAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteBillingGroupFuture struct {
	Future workflow.Future
}

func (r *IotDeleteBillingGroupFuture) Get(ctx workflow.Context) (*iot.DeleteBillingGroupOutput, error) {
	var output iot.DeleteBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteCACertificateFuture struct {
	Future workflow.Future
}

func (r *IotDeleteCACertificateFuture) Get(ctx workflow.Context) (*iot.DeleteCACertificateOutput, error) {
	var output iot.DeleteCACertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteCertificateFuture struct {
	Future workflow.Future
}

func (r *IotDeleteCertificateFuture) Get(ctx workflow.Context) (*iot.DeleteCertificateOutput, error) {
	var output iot.DeleteCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteDimensionFuture struct {
	Future workflow.Future
}

func (r *IotDeleteDimensionFuture) Get(ctx workflow.Context) (*iot.DeleteDimensionOutput, error) {
	var output iot.DeleteDimensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteDomainConfigurationFuture struct {
	Future workflow.Future
}

func (r *IotDeleteDomainConfigurationFuture) Get(ctx workflow.Context) (*iot.DeleteDomainConfigurationOutput, error) {
	var output iot.DeleteDomainConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteDynamicThingGroupFuture struct {
	Future workflow.Future
}

func (r *IotDeleteDynamicThingGroupFuture) Get(ctx workflow.Context) (*iot.DeleteDynamicThingGroupOutput, error) {
	var output iot.DeleteDynamicThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteJobFuture struct {
	Future workflow.Future
}

func (r *IotDeleteJobFuture) Get(ctx workflow.Context) (*iot.DeleteJobOutput, error) {
	var output iot.DeleteJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteJobExecutionFuture struct {
	Future workflow.Future
}

func (r *IotDeleteJobExecutionFuture) Get(ctx workflow.Context) (*iot.DeleteJobExecutionOutput, error) {
	var output iot.DeleteJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteMitigationActionFuture struct {
	Future workflow.Future
}

func (r *IotDeleteMitigationActionFuture) Get(ctx workflow.Context) (*iot.DeleteMitigationActionOutput, error) {
	var output iot.DeleteMitigationActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteOTAUpdateFuture struct {
	Future workflow.Future
}

func (r *IotDeleteOTAUpdateFuture) Get(ctx workflow.Context) (*iot.DeleteOTAUpdateOutput, error) {
	var output iot.DeleteOTAUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeletePolicyFuture struct {
	Future workflow.Future
}

func (r *IotDeletePolicyFuture) Get(ctx workflow.Context) (*iot.DeletePolicyOutput, error) {
	var output iot.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeletePolicyVersionFuture struct {
	Future workflow.Future
}

func (r *IotDeletePolicyVersionFuture) Get(ctx workflow.Context) (*iot.DeletePolicyVersionOutput, error) {
	var output iot.DeletePolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteProvisioningTemplateFuture struct {
	Future workflow.Future
}

func (r *IotDeleteProvisioningTemplateFuture) Get(ctx workflow.Context) (*iot.DeleteProvisioningTemplateOutput, error) {
	var output iot.DeleteProvisioningTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteProvisioningTemplateVersionFuture struct {
	Future workflow.Future
}

func (r *IotDeleteProvisioningTemplateVersionFuture) Get(ctx workflow.Context) (*iot.DeleteProvisioningTemplateVersionOutput, error) {
	var output iot.DeleteProvisioningTemplateVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteRegistrationCodeFuture struct {
	Future workflow.Future
}

func (r *IotDeleteRegistrationCodeFuture) Get(ctx workflow.Context) (*iot.DeleteRegistrationCodeOutput, error) {
	var output iot.DeleteRegistrationCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteRoleAliasFuture struct {
	Future workflow.Future
}

func (r *IotDeleteRoleAliasFuture) Get(ctx workflow.Context) (*iot.DeleteRoleAliasOutput, error) {
	var output iot.DeleteRoleAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteScheduledAuditFuture struct {
	Future workflow.Future
}

func (r *IotDeleteScheduledAuditFuture) Get(ctx workflow.Context) (*iot.DeleteScheduledAuditOutput, error) {
	var output iot.DeleteScheduledAuditOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteSecurityProfileFuture struct {
	Future workflow.Future
}

func (r *IotDeleteSecurityProfileFuture) Get(ctx workflow.Context) (*iot.DeleteSecurityProfileOutput, error) {
	var output iot.DeleteSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteStreamFuture struct {
	Future workflow.Future
}

func (r *IotDeleteStreamFuture) Get(ctx workflow.Context) (*iot.DeleteStreamOutput, error) {
	var output iot.DeleteStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteThingFuture struct {
	Future workflow.Future
}

func (r *IotDeleteThingFuture) Get(ctx workflow.Context) (*iot.DeleteThingOutput, error) {
	var output iot.DeleteThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteThingGroupFuture struct {
	Future workflow.Future
}

func (r *IotDeleteThingGroupFuture) Get(ctx workflow.Context) (*iot.DeleteThingGroupOutput, error) {
	var output iot.DeleteThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteThingTypeFuture struct {
	Future workflow.Future
}

func (r *IotDeleteThingTypeFuture) Get(ctx workflow.Context) (*iot.DeleteThingTypeOutput, error) {
	var output iot.DeleteThingTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteTopicRuleFuture struct {
	Future workflow.Future
}

func (r *IotDeleteTopicRuleFuture) Get(ctx workflow.Context) (*iot.DeleteTopicRuleOutput, error) {
	var output iot.DeleteTopicRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteTopicRuleDestinationFuture struct {
	Future workflow.Future
}

func (r *IotDeleteTopicRuleDestinationFuture) Get(ctx workflow.Context) (*iot.DeleteTopicRuleDestinationOutput, error) {
	var output iot.DeleteTopicRuleDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeleteV2LoggingLevelFuture struct {
	Future workflow.Future
}

func (r *IotDeleteV2LoggingLevelFuture) Get(ctx workflow.Context) (*iot.DeleteV2LoggingLevelOutput, error) {
	var output iot.DeleteV2LoggingLevelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDeprecateThingTypeFuture struct {
	Future workflow.Future
}

func (r *IotDeprecateThingTypeFuture) Get(ctx workflow.Context) (*iot.DeprecateThingTypeOutput, error) {
	var output iot.DeprecateThingTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeAccountAuditConfigurationFuture struct {
	Future workflow.Future
}

func (r *IotDescribeAccountAuditConfigurationFuture) Get(ctx workflow.Context) (*iot.DescribeAccountAuditConfigurationOutput, error) {
	var output iot.DescribeAccountAuditConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeAuditFindingFuture struct {
	Future workflow.Future
}

func (r *IotDescribeAuditFindingFuture) Get(ctx workflow.Context) (*iot.DescribeAuditFindingOutput, error) {
	var output iot.DescribeAuditFindingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeAuditMitigationActionsTaskFuture struct {
	Future workflow.Future
}

func (r *IotDescribeAuditMitigationActionsTaskFuture) Get(ctx workflow.Context) (*iot.DescribeAuditMitigationActionsTaskOutput, error) {
	var output iot.DescribeAuditMitigationActionsTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeAuditSuppressionFuture struct {
	Future workflow.Future
}

func (r *IotDescribeAuditSuppressionFuture) Get(ctx workflow.Context) (*iot.DescribeAuditSuppressionOutput, error) {
	var output iot.DescribeAuditSuppressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeAuditTaskFuture struct {
	Future workflow.Future
}

func (r *IotDescribeAuditTaskFuture) Get(ctx workflow.Context) (*iot.DescribeAuditTaskOutput, error) {
	var output iot.DescribeAuditTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeAuthorizerFuture struct {
	Future workflow.Future
}

func (r *IotDescribeAuthorizerFuture) Get(ctx workflow.Context) (*iot.DescribeAuthorizerOutput, error) {
	var output iot.DescribeAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeBillingGroupFuture struct {
	Future workflow.Future
}

func (r *IotDescribeBillingGroupFuture) Get(ctx workflow.Context) (*iot.DescribeBillingGroupOutput, error) {
	var output iot.DescribeBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeCACertificateFuture struct {
	Future workflow.Future
}

func (r *IotDescribeCACertificateFuture) Get(ctx workflow.Context) (*iot.DescribeCACertificateOutput, error) {
	var output iot.DescribeCACertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeCertificateFuture struct {
	Future workflow.Future
}

func (r *IotDescribeCertificateFuture) Get(ctx workflow.Context) (*iot.DescribeCertificateOutput, error) {
	var output iot.DescribeCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeDefaultAuthorizerFuture struct {
	Future workflow.Future
}

func (r *IotDescribeDefaultAuthorizerFuture) Get(ctx workflow.Context) (*iot.DescribeDefaultAuthorizerOutput, error) {
	var output iot.DescribeDefaultAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeDimensionFuture struct {
	Future workflow.Future
}

func (r *IotDescribeDimensionFuture) Get(ctx workflow.Context) (*iot.DescribeDimensionOutput, error) {
	var output iot.DescribeDimensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeDomainConfigurationFuture struct {
	Future workflow.Future
}

func (r *IotDescribeDomainConfigurationFuture) Get(ctx workflow.Context) (*iot.DescribeDomainConfigurationOutput, error) {
	var output iot.DescribeDomainConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeEndpointFuture struct {
	Future workflow.Future
}

func (r *IotDescribeEndpointFuture) Get(ctx workflow.Context) (*iot.DescribeEndpointOutput, error) {
	var output iot.DescribeEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeEventConfigurationsFuture struct {
	Future workflow.Future
}

func (r *IotDescribeEventConfigurationsFuture) Get(ctx workflow.Context) (*iot.DescribeEventConfigurationsOutput, error) {
	var output iot.DescribeEventConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeIndexFuture struct {
	Future workflow.Future
}

func (r *IotDescribeIndexFuture) Get(ctx workflow.Context) (*iot.DescribeIndexOutput, error) {
	var output iot.DescribeIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeJobFuture struct {
	Future workflow.Future
}

func (r *IotDescribeJobFuture) Get(ctx workflow.Context) (*iot.DescribeJobOutput, error) {
	var output iot.DescribeJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeJobExecutionFuture struct {
	Future workflow.Future
}

func (r *IotDescribeJobExecutionFuture) Get(ctx workflow.Context) (*iot.DescribeJobExecutionOutput, error) {
	var output iot.DescribeJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeMitigationActionFuture struct {
	Future workflow.Future
}

func (r *IotDescribeMitigationActionFuture) Get(ctx workflow.Context) (*iot.DescribeMitigationActionOutput, error) {
	var output iot.DescribeMitigationActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeProvisioningTemplateFuture struct {
	Future workflow.Future
}

func (r *IotDescribeProvisioningTemplateFuture) Get(ctx workflow.Context) (*iot.DescribeProvisioningTemplateOutput, error) {
	var output iot.DescribeProvisioningTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeProvisioningTemplateVersionFuture struct {
	Future workflow.Future
}

func (r *IotDescribeProvisioningTemplateVersionFuture) Get(ctx workflow.Context) (*iot.DescribeProvisioningTemplateVersionOutput, error) {
	var output iot.DescribeProvisioningTemplateVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeRoleAliasFuture struct {
	Future workflow.Future
}

func (r *IotDescribeRoleAliasFuture) Get(ctx workflow.Context) (*iot.DescribeRoleAliasOutput, error) {
	var output iot.DescribeRoleAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeScheduledAuditFuture struct {
	Future workflow.Future
}

func (r *IotDescribeScheduledAuditFuture) Get(ctx workflow.Context) (*iot.DescribeScheduledAuditOutput, error) {
	var output iot.DescribeScheduledAuditOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeSecurityProfileFuture struct {
	Future workflow.Future
}

func (r *IotDescribeSecurityProfileFuture) Get(ctx workflow.Context) (*iot.DescribeSecurityProfileOutput, error) {
	var output iot.DescribeSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeStreamFuture struct {
	Future workflow.Future
}

func (r *IotDescribeStreamFuture) Get(ctx workflow.Context) (*iot.DescribeStreamOutput, error) {
	var output iot.DescribeStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeThingFuture struct {
	Future workflow.Future
}

func (r *IotDescribeThingFuture) Get(ctx workflow.Context) (*iot.DescribeThingOutput, error) {
	var output iot.DescribeThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeThingGroupFuture struct {
	Future workflow.Future
}

func (r *IotDescribeThingGroupFuture) Get(ctx workflow.Context) (*iot.DescribeThingGroupOutput, error) {
	var output iot.DescribeThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeThingRegistrationTaskFuture struct {
	Future workflow.Future
}

func (r *IotDescribeThingRegistrationTaskFuture) Get(ctx workflow.Context) (*iot.DescribeThingRegistrationTaskOutput, error) {
	var output iot.DescribeThingRegistrationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDescribeThingTypeFuture struct {
	Future workflow.Future
}

func (r *IotDescribeThingTypeFuture) Get(ctx workflow.Context) (*iot.DescribeThingTypeOutput, error) {
	var output iot.DescribeThingTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDetachPolicyFuture struct {
	Future workflow.Future
}

func (r *IotDetachPolicyFuture) Get(ctx workflow.Context) (*iot.DetachPolicyOutput, error) {
	var output iot.DetachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDetachPrincipalPolicyFuture struct {
	Future workflow.Future
}

func (r *IotDetachPrincipalPolicyFuture) Get(ctx workflow.Context) (*iot.DetachPrincipalPolicyOutput, error) {
	var output iot.DetachPrincipalPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDetachSecurityProfileFuture struct {
	Future workflow.Future
}

func (r *IotDetachSecurityProfileFuture) Get(ctx workflow.Context) (*iot.DetachSecurityProfileOutput, error) {
	var output iot.DetachSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDetachThingPrincipalFuture struct {
	Future workflow.Future
}

func (r *IotDetachThingPrincipalFuture) Get(ctx workflow.Context) (*iot.DetachThingPrincipalOutput, error) {
	var output iot.DetachThingPrincipalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotDisableTopicRuleFuture struct {
	Future workflow.Future
}

func (r *IotDisableTopicRuleFuture) Get(ctx workflow.Context) (*iot.DisableTopicRuleOutput, error) {
	var output iot.DisableTopicRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotEnableTopicRuleFuture struct {
	Future workflow.Future
}

func (r *IotEnableTopicRuleFuture) Get(ctx workflow.Context) (*iot.EnableTopicRuleOutput, error) {
	var output iot.EnableTopicRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetCardinalityFuture struct {
	Future workflow.Future
}

func (r *IotGetCardinalityFuture) Get(ctx workflow.Context) (*iot.GetCardinalityOutput, error) {
	var output iot.GetCardinalityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetEffectivePoliciesFuture struct {
	Future workflow.Future
}

func (r *IotGetEffectivePoliciesFuture) Get(ctx workflow.Context) (*iot.GetEffectivePoliciesOutput, error) {
	var output iot.GetEffectivePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetIndexingConfigurationFuture struct {
	Future workflow.Future
}

func (r *IotGetIndexingConfigurationFuture) Get(ctx workflow.Context) (*iot.GetIndexingConfigurationOutput, error) {
	var output iot.GetIndexingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetJobDocumentFuture struct {
	Future workflow.Future
}

func (r *IotGetJobDocumentFuture) Get(ctx workflow.Context) (*iot.GetJobDocumentOutput, error) {
	var output iot.GetJobDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetLoggingOptionsFuture struct {
	Future workflow.Future
}

func (r *IotGetLoggingOptionsFuture) Get(ctx workflow.Context) (*iot.GetLoggingOptionsOutput, error) {
	var output iot.GetLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetOTAUpdateFuture struct {
	Future workflow.Future
}

func (r *IotGetOTAUpdateFuture) Get(ctx workflow.Context) (*iot.GetOTAUpdateOutput, error) {
	var output iot.GetOTAUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetPercentilesFuture struct {
	Future workflow.Future
}

func (r *IotGetPercentilesFuture) Get(ctx workflow.Context) (*iot.GetPercentilesOutput, error) {
	var output iot.GetPercentilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetPolicyFuture struct {
	Future workflow.Future
}

func (r *IotGetPolicyFuture) Get(ctx workflow.Context) (*iot.GetPolicyOutput, error) {
	var output iot.GetPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetPolicyVersionFuture struct {
	Future workflow.Future
}

func (r *IotGetPolicyVersionFuture) Get(ctx workflow.Context) (*iot.GetPolicyVersionOutput, error) {
	var output iot.GetPolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetRegistrationCodeFuture struct {
	Future workflow.Future
}

func (r *IotGetRegistrationCodeFuture) Get(ctx workflow.Context) (*iot.GetRegistrationCodeOutput, error) {
	var output iot.GetRegistrationCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetStatisticsFuture struct {
	Future workflow.Future
}

func (r *IotGetStatisticsFuture) Get(ctx workflow.Context) (*iot.GetStatisticsOutput, error) {
	var output iot.GetStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetTopicRuleFuture struct {
	Future workflow.Future
}

func (r *IotGetTopicRuleFuture) Get(ctx workflow.Context) (*iot.GetTopicRuleOutput, error) {
	var output iot.GetTopicRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetTopicRuleDestinationFuture struct {
	Future workflow.Future
}

func (r *IotGetTopicRuleDestinationFuture) Get(ctx workflow.Context) (*iot.GetTopicRuleDestinationOutput, error) {
	var output iot.GetTopicRuleDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotGetV2LoggingOptionsFuture struct {
	Future workflow.Future
}

func (r *IotGetV2LoggingOptionsFuture) Get(ctx workflow.Context) (*iot.GetV2LoggingOptionsOutput, error) {
	var output iot.GetV2LoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListActiveViolationsFuture struct {
	Future workflow.Future
}

func (r *IotListActiveViolationsFuture) Get(ctx workflow.Context) (*iot.ListActiveViolationsOutput, error) {
	var output iot.ListActiveViolationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListAttachedPoliciesFuture struct {
	Future workflow.Future
}

func (r *IotListAttachedPoliciesFuture) Get(ctx workflow.Context) (*iot.ListAttachedPoliciesOutput, error) {
	var output iot.ListAttachedPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListAuditFindingsFuture struct {
	Future workflow.Future
}

func (r *IotListAuditFindingsFuture) Get(ctx workflow.Context) (*iot.ListAuditFindingsOutput, error) {
	var output iot.ListAuditFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListAuditMitigationActionsExecutionsFuture struct {
	Future workflow.Future
}

func (r *IotListAuditMitigationActionsExecutionsFuture) Get(ctx workflow.Context) (*iot.ListAuditMitigationActionsExecutionsOutput, error) {
	var output iot.ListAuditMitigationActionsExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListAuditMitigationActionsTasksFuture struct {
	Future workflow.Future
}

func (r *IotListAuditMitigationActionsTasksFuture) Get(ctx workflow.Context) (*iot.ListAuditMitigationActionsTasksOutput, error) {
	var output iot.ListAuditMitigationActionsTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListAuditSuppressionsFuture struct {
	Future workflow.Future
}

func (r *IotListAuditSuppressionsFuture) Get(ctx workflow.Context) (*iot.ListAuditSuppressionsOutput, error) {
	var output iot.ListAuditSuppressionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListAuditTasksFuture struct {
	Future workflow.Future
}

func (r *IotListAuditTasksFuture) Get(ctx workflow.Context) (*iot.ListAuditTasksOutput, error) {
	var output iot.ListAuditTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListAuthorizersFuture struct {
	Future workflow.Future
}

func (r *IotListAuthorizersFuture) Get(ctx workflow.Context) (*iot.ListAuthorizersOutput, error) {
	var output iot.ListAuthorizersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListBillingGroupsFuture struct {
	Future workflow.Future
}

func (r *IotListBillingGroupsFuture) Get(ctx workflow.Context) (*iot.ListBillingGroupsOutput, error) {
	var output iot.ListBillingGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListCACertificatesFuture struct {
	Future workflow.Future
}

func (r *IotListCACertificatesFuture) Get(ctx workflow.Context) (*iot.ListCACertificatesOutput, error) {
	var output iot.ListCACertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListCertificatesFuture struct {
	Future workflow.Future
}

func (r *IotListCertificatesFuture) Get(ctx workflow.Context) (*iot.ListCertificatesOutput, error) {
	var output iot.ListCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListCertificatesByCAFuture struct {
	Future workflow.Future
}

func (r *IotListCertificatesByCAFuture) Get(ctx workflow.Context) (*iot.ListCertificatesByCAOutput, error) {
	var output iot.ListCertificatesByCAOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListDimensionsFuture struct {
	Future workflow.Future
}

func (r *IotListDimensionsFuture) Get(ctx workflow.Context) (*iot.ListDimensionsOutput, error) {
	var output iot.ListDimensionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListDomainConfigurationsFuture struct {
	Future workflow.Future
}

func (r *IotListDomainConfigurationsFuture) Get(ctx workflow.Context) (*iot.ListDomainConfigurationsOutput, error) {
	var output iot.ListDomainConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListIndicesFuture struct {
	Future workflow.Future
}

func (r *IotListIndicesFuture) Get(ctx workflow.Context) (*iot.ListIndicesOutput, error) {
	var output iot.ListIndicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListJobExecutionsForJobFuture struct {
	Future workflow.Future
}

func (r *IotListJobExecutionsForJobFuture) Get(ctx workflow.Context) (*iot.ListJobExecutionsForJobOutput, error) {
	var output iot.ListJobExecutionsForJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListJobExecutionsForThingFuture struct {
	Future workflow.Future
}

func (r *IotListJobExecutionsForThingFuture) Get(ctx workflow.Context) (*iot.ListJobExecutionsForThingOutput, error) {
	var output iot.ListJobExecutionsForThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListJobsFuture struct {
	Future workflow.Future
}

func (r *IotListJobsFuture) Get(ctx workflow.Context) (*iot.ListJobsOutput, error) {
	var output iot.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListMitigationActionsFuture struct {
	Future workflow.Future
}

func (r *IotListMitigationActionsFuture) Get(ctx workflow.Context) (*iot.ListMitigationActionsOutput, error) {
	var output iot.ListMitigationActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListOTAUpdatesFuture struct {
	Future workflow.Future
}

func (r *IotListOTAUpdatesFuture) Get(ctx workflow.Context) (*iot.ListOTAUpdatesOutput, error) {
	var output iot.ListOTAUpdatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListOutgoingCertificatesFuture struct {
	Future workflow.Future
}

func (r *IotListOutgoingCertificatesFuture) Get(ctx workflow.Context) (*iot.ListOutgoingCertificatesOutput, error) {
	var output iot.ListOutgoingCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListPoliciesFuture struct {
	Future workflow.Future
}

func (r *IotListPoliciesFuture) Get(ctx workflow.Context) (*iot.ListPoliciesOutput, error) {
	var output iot.ListPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListPolicyPrincipalsFuture struct {
	Future workflow.Future
}

func (r *IotListPolicyPrincipalsFuture) Get(ctx workflow.Context) (*iot.ListPolicyPrincipalsOutput, error) {
	var output iot.ListPolicyPrincipalsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListPolicyVersionsFuture struct {
	Future workflow.Future
}

func (r *IotListPolicyVersionsFuture) Get(ctx workflow.Context) (*iot.ListPolicyVersionsOutput, error) {
	var output iot.ListPolicyVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListPrincipalPoliciesFuture struct {
	Future workflow.Future
}

func (r *IotListPrincipalPoliciesFuture) Get(ctx workflow.Context) (*iot.ListPrincipalPoliciesOutput, error) {
	var output iot.ListPrincipalPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListPrincipalThingsFuture struct {
	Future workflow.Future
}

func (r *IotListPrincipalThingsFuture) Get(ctx workflow.Context) (*iot.ListPrincipalThingsOutput, error) {
	var output iot.ListPrincipalThingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListProvisioningTemplateVersionsFuture struct {
	Future workflow.Future
}

func (r *IotListProvisioningTemplateVersionsFuture) Get(ctx workflow.Context) (*iot.ListProvisioningTemplateVersionsOutput, error) {
	var output iot.ListProvisioningTemplateVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListProvisioningTemplatesFuture struct {
	Future workflow.Future
}

func (r *IotListProvisioningTemplatesFuture) Get(ctx workflow.Context) (*iot.ListProvisioningTemplatesOutput, error) {
	var output iot.ListProvisioningTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListRoleAliasesFuture struct {
	Future workflow.Future
}

func (r *IotListRoleAliasesFuture) Get(ctx workflow.Context) (*iot.ListRoleAliasesOutput, error) {
	var output iot.ListRoleAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListScheduledAuditsFuture struct {
	Future workflow.Future
}

func (r *IotListScheduledAuditsFuture) Get(ctx workflow.Context) (*iot.ListScheduledAuditsOutput, error) {
	var output iot.ListScheduledAuditsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListSecurityProfilesFuture struct {
	Future workflow.Future
}

func (r *IotListSecurityProfilesFuture) Get(ctx workflow.Context) (*iot.ListSecurityProfilesOutput, error) {
	var output iot.ListSecurityProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListSecurityProfilesForTargetFuture struct {
	Future workflow.Future
}

func (r *IotListSecurityProfilesForTargetFuture) Get(ctx workflow.Context) (*iot.ListSecurityProfilesForTargetOutput, error) {
	var output iot.ListSecurityProfilesForTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListStreamsFuture struct {
	Future workflow.Future
}

func (r *IotListStreamsFuture) Get(ctx workflow.Context) (*iot.ListStreamsOutput, error) {
	var output iot.ListStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *IotListTagsForResourceFuture) Get(ctx workflow.Context) (*iot.ListTagsForResourceOutput, error) {
	var output iot.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListTargetsForPolicyFuture struct {
	Future workflow.Future
}

func (r *IotListTargetsForPolicyFuture) Get(ctx workflow.Context) (*iot.ListTargetsForPolicyOutput, error) {
	var output iot.ListTargetsForPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListTargetsForSecurityProfileFuture struct {
	Future workflow.Future
}

func (r *IotListTargetsForSecurityProfileFuture) Get(ctx workflow.Context) (*iot.ListTargetsForSecurityProfileOutput, error) {
	var output iot.ListTargetsForSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListThingGroupsFuture struct {
	Future workflow.Future
}

func (r *IotListThingGroupsFuture) Get(ctx workflow.Context) (*iot.ListThingGroupsOutput, error) {
	var output iot.ListThingGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListThingGroupsForThingFuture struct {
	Future workflow.Future
}

func (r *IotListThingGroupsForThingFuture) Get(ctx workflow.Context) (*iot.ListThingGroupsForThingOutput, error) {
	var output iot.ListThingGroupsForThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListThingPrincipalsFuture struct {
	Future workflow.Future
}

func (r *IotListThingPrincipalsFuture) Get(ctx workflow.Context) (*iot.ListThingPrincipalsOutput, error) {
	var output iot.ListThingPrincipalsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListThingRegistrationTaskReportsFuture struct {
	Future workflow.Future
}

func (r *IotListThingRegistrationTaskReportsFuture) Get(ctx workflow.Context) (*iot.ListThingRegistrationTaskReportsOutput, error) {
	var output iot.ListThingRegistrationTaskReportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListThingRegistrationTasksFuture struct {
	Future workflow.Future
}

func (r *IotListThingRegistrationTasksFuture) Get(ctx workflow.Context) (*iot.ListThingRegistrationTasksOutput, error) {
	var output iot.ListThingRegistrationTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListThingTypesFuture struct {
	Future workflow.Future
}

func (r *IotListThingTypesFuture) Get(ctx workflow.Context) (*iot.ListThingTypesOutput, error) {
	var output iot.ListThingTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListThingsFuture struct {
	Future workflow.Future
}

func (r *IotListThingsFuture) Get(ctx workflow.Context) (*iot.ListThingsOutput, error) {
	var output iot.ListThingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListThingsInBillingGroupFuture struct {
	Future workflow.Future
}

func (r *IotListThingsInBillingGroupFuture) Get(ctx workflow.Context) (*iot.ListThingsInBillingGroupOutput, error) {
	var output iot.ListThingsInBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListThingsInThingGroupFuture struct {
	Future workflow.Future
}

func (r *IotListThingsInThingGroupFuture) Get(ctx workflow.Context) (*iot.ListThingsInThingGroupOutput, error) {
	var output iot.ListThingsInThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListTopicRuleDestinationsFuture struct {
	Future workflow.Future
}

func (r *IotListTopicRuleDestinationsFuture) Get(ctx workflow.Context) (*iot.ListTopicRuleDestinationsOutput, error) {
	var output iot.ListTopicRuleDestinationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListTopicRulesFuture struct {
	Future workflow.Future
}

func (r *IotListTopicRulesFuture) Get(ctx workflow.Context) (*iot.ListTopicRulesOutput, error) {
	var output iot.ListTopicRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListV2LoggingLevelsFuture struct {
	Future workflow.Future
}

func (r *IotListV2LoggingLevelsFuture) Get(ctx workflow.Context) (*iot.ListV2LoggingLevelsOutput, error) {
	var output iot.ListV2LoggingLevelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotListViolationEventsFuture struct {
	Future workflow.Future
}

func (r *IotListViolationEventsFuture) Get(ctx workflow.Context) (*iot.ListViolationEventsOutput, error) {
	var output iot.ListViolationEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotRegisterCACertificateFuture struct {
	Future workflow.Future
}

func (r *IotRegisterCACertificateFuture) Get(ctx workflow.Context) (*iot.RegisterCACertificateOutput, error) {
	var output iot.RegisterCACertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotRegisterCertificateFuture struct {
	Future workflow.Future
}

func (r *IotRegisterCertificateFuture) Get(ctx workflow.Context) (*iot.RegisterCertificateOutput, error) {
	var output iot.RegisterCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotRegisterCertificateWithoutCAFuture struct {
	Future workflow.Future
}

func (r *IotRegisterCertificateWithoutCAFuture) Get(ctx workflow.Context) (*iot.RegisterCertificateWithoutCAOutput, error) {
	var output iot.RegisterCertificateWithoutCAOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotRegisterThingFuture struct {
	Future workflow.Future
}

func (r *IotRegisterThingFuture) Get(ctx workflow.Context) (*iot.RegisterThingOutput, error) {
	var output iot.RegisterThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotRejectCertificateTransferFuture struct {
	Future workflow.Future
}

func (r *IotRejectCertificateTransferFuture) Get(ctx workflow.Context) (*iot.RejectCertificateTransferOutput, error) {
	var output iot.RejectCertificateTransferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotRemoveThingFromBillingGroupFuture struct {
	Future workflow.Future
}

func (r *IotRemoveThingFromBillingGroupFuture) Get(ctx workflow.Context) (*iot.RemoveThingFromBillingGroupOutput, error) {
	var output iot.RemoveThingFromBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotRemoveThingFromThingGroupFuture struct {
	Future workflow.Future
}

func (r *IotRemoveThingFromThingGroupFuture) Get(ctx workflow.Context) (*iot.RemoveThingFromThingGroupOutput, error) {
	var output iot.RemoveThingFromThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotReplaceTopicRuleFuture struct {
	Future workflow.Future
}

func (r *IotReplaceTopicRuleFuture) Get(ctx workflow.Context) (*iot.ReplaceTopicRuleOutput, error) {
	var output iot.ReplaceTopicRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotSearchIndexFuture struct {
	Future workflow.Future
}

func (r *IotSearchIndexFuture) Get(ctx workflow.Context) (*iot.SearchIndexOutput, error) {
	var output iot.SearchIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotSetDefaultAuthorizerFuture struct {
	Future workflow.Future
}

func (r *IotSetDefaultAuthorizerFuture) Get(ctx workflow.Context) (*iot.SetDefaultAuthorizerOutput, error) {
	var output iot.SetDefaultAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotSetDefaultPolicyVersionFuture struct {
	Future workflow.Future
}

func (r *IotSetDefaultPolicyVersionFuture) Get(ctx workflow.Context) (*iot.SetDefaultPolicyVersionOutput, error) {
	var output iot.SetDefaultPolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotSetLoggingOptionsFuture struct {
	Future workflow.Future
}

func (r *IotSetLoggingOptionsFuture) Get(ctx workflow.Context) (*iot.SetLoggingOptionsOutput, error) {
	var output iot.SetLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotSetV2LoggingLevelFuture struct {
	Future workflow.Future
}

func (r *IotSetV2LoggingLevelFuture) Get(ctx workflow.Context) (*iot.SetV2LoggingLevelOutput, error) {
	var output iot.SetV2LoggingLevelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotSetV2LoggingOptionsFuture struct {
	Future workflow.Future
}

func (r *IotSetV2LoggingOptionsFuture) Get(ctx workflow.Context) (*iot.SetV2LoggingOptionsOutput, error) {
	var output iot.SetV2LoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotStartAuditMitigationActionsTaskFuture struct {
	Future workflow.Future
}

func (r *IotStartAuditMitigationActionsTaskFuture) Get(ctx workflow.Context) (*iot.StartAuditMitigationActionsTaskOutput, error) {
	var output iot.StartAuditMitigationActionsTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotStartOnDemandAuditTaskFuture struct {
	Future workflow.Future
}

func (r *IotStartOnDemandAuditTaskFuture) Get(ctx workflow.Context) (*iot.StartOnDemandAuditTaskOutput, error) {
	var output iot.StartOnDemandAuditTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotStartThingRegistrationTaskFuture struct {
	Future workflow.Future
}

func (r *IotStartThingRegistrationTaskFuture) Get(ctx workflow.Context) (*iot.StartThingRegistrationTaskOutput, error) {
	var output iot.StartThingRegistrationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotStopThingRegistrationTaskFuture struct {
	Future workflow.Future
}

func (r *IotStopThingRegistrationTaskFuture) Get(ctx workflow.Context) (*iot.StopThingRegistrationTaskOutput, error) {
	var output iot.StopThingRegistrationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotTagResourceFuture struct {
	Future workflow.Future
}

func (r *IotTagResourceFuture) Get(ctx workflow.Context) (*iot.TagResourceOutput, error) {
	var output iot.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotTestAuthorizationFuture struct {
	Future workflow.Future
}

func (r *IotTestAuthorizationFuture) Get(ctx workflow.Context) (*iot.TestAuthorizationOutput, error) {
	var output iot.TestAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotTestInvokeAuthorizerFuture struct {
	Future workflow.Future
}

func (r *IotTestInvokeAuthorizerFuture) Get(ctx workflow.Context) (*iot.TestInvokeAuthorizerOutput, error) {
	var output iot.TestInvokeAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotTransferCertificateFuture struct {
	Future workflow.Future
}

func (r *IotTransferCertificateFuture) Get(ctx workflow.Context) (*iot.TransferCertificateOutput, error) {
	var output iot.TransferCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUntagResourceFuture struct {
	Future workflow.Future
}

func (r *IotUntagResourceFuture) Get(ctx workflow.Context) (*iot.UntagResourceOutput, error) {
	var output iot.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateAccountAuditConfigurationFuture struct {
	Future workflow.Future
}

func (r *IotUpdateAccountAuditConfigurationFuture) Get(ctx workflow.Context) (*iot.UpdateAccountAuditConfigurationOutput, error) {
	var output iot.UpdateAccountAuditConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateAuditSuppressionFuture struct {
	Future workflow.Future
}

func (r *IotUpdateAuditSuppressionFuture) Get(ctx workflow.Context) (*iot.UpdateAuditSuppressionOutput, error) {
	var output iot.UpdateAuditSuppressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateAuthorizerFuture struct {
	Future workflow.Future
}

func (r *IotUpdateAuthorizerFuture) Get(ctx workflow.Context) (*iot.UpdateAuthorizerOutput, error) {
	var output iot.UpdateAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateBillingGroupFuture struct {
	Future workflow.Future
}

func (r *IotUpdateBillingGroupFuture) Get(ctx workflow.Context) (*iot.UpdateBillingGroupOutput, error) {
	var output iot.UpdateBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateCACertificateFuture struct {
	Future workflow.Future
}

func (r *IotUpdateCACertificateFuture) Get(ctx workflow.Context) (*iot.UpdateCACertificateOutput, error) {
	var output iot.UpdateCACertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateCertificateFuture struct {
	Future workflow.Future
}

func (r *IotUpdateCertificateFuture) Get(ctx workflow.Context) (*iot.UpdateCertificateOutput, error) {
	var output iot.UpdateCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateDimensionFuture struct {
	Future workflow.Future
}

func (r *IotUpdateDimensionFuture) Get(ctx workflow.Context) (*iot.UpdateDimensionOutput, error) {
	var output iot.UpdateDimensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateDomainConfigurationFuture struct {
	Future workflow.Future
}

func (r *IotUpdateDomainConfigurationFuture) Get(ctx workflow.Context) (*iot.UpdateDomainConfigurationOutput, error) {
	var output iot.UpdateDomainConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateDynamicThingGroupFuture struct {
	Future workflow.Future
}

func (r *IotUpdateDynamicThingGroupFuture) Get(ctx workflow.Context) (*iot.UpdateDynamicThingGroupOutput, error) {
	var output iot.UpdateDynamicThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateEventConfigurationsFuture struct {
	Future workflow.Future
}

func (r *IotUpdateEventConfigurationsFuture) Get(ctx workflow.Context) (*iot.UpdateEventConfigurationsOutput, error) {
	var output iot.UpdateEventConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateIndexingConfigurationFuture struct {
	Future workflow.Future
}

func (r *IotUpdateIndexingConfigurationFuture) Get(ctx workflow.Context) (*iot.UpdateIndexingConfigurationOutput, error) {
	var output iot.UpdateIndexingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateJobFuture struct {
	Future workflow.Future
}

func (r *IotUpdateJobFuture) Get(ctx workflow.Context) (*iot.UpdateJobOutput, error) {
	var output iot.UpdateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateMitigationActionFuture struct {
	Future workflow.Future
}

func (r *IotUpdateMitigationActionFuture) Get(ctx workflow.Context) (*iot.UpdateMitigationActionOutput, error) {
	var output iot.UpdateMitigationActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateProvisioningTemplateFuture struct {
	Future workflow.Future
}

func (r *IotUpdateProvisioningTemplateFuture) Get(ctx workflow.Context) (*iot.UpdateProvisioningTemplateOutput, error) {
	var output iot.UpdateProvisioningTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateRoleAliasFuture struct {
	Future workflow.Future
}

func (r *IotUpdateRoleAliasFuture) Get(ctx workflow.Context) (*iot.UpdateRoleAliasOutput, error) {
	var output iot.UpdateRoleAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateScheduledAuditFuture struct {
	Future workflow.Future
}

func (r *IotUpdateScheduledAuditFuture) Get(ctx workflow.Context) (*iot.UpdateScheduledAuditOutput, error) {
	var output iot.UpdateScheduledAuditOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateSecurityProfileFuture struct {
	Future workflow.Future
}

func (r *IotUpdateSecurityProfileFuture) Get(ctx workflow.Context) (*iot.UpdateSecurityProfileOutput, error) {
	var output iot.UpdateSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateStreamFuture struct {
	Future workflow.Future
}

func (r *IotUpdateStreamFuture) Get(ctx workflow.Context) (*iot.UpdateStreamOutput, error) {
	var output iot.UpdateStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateThingFuture struct {
	Future workflow.Future
}

func (r *IotUpdateThingFuture) Get(ctx workflow.Context) (*iot.UpdateThingOutput, error) {
	var output iot.UpdateThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateThingGroupFuture struct {
	Future workflow.Future
}

func (r *IotUpdateThingGroupFuture) Get(ctx workflow.Context) (*iot.UpdateThingGroupOutput, error) {
	var output iot.UpdateThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateThingGroupsForThingFuture struct {
	Future workflow.Future
}

func (r *IotUpdateThingGroupsForThingFuture) Get(ctx workflow.Context) (*iot.UpdateThingGroupsForThingOutput, error) {
	var output iot.UpdateThingGroupsForThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotUpdateTopicRuleDestinationFuture struct {
	Future workflow.Future
}

func (r *IotUpdateTopicRuleDestinationFuture) Get(ctx workflow.Context) (*iot.UpdateTopicRuleDestinationOutput, error) {
	var output iot.UpdateTopicRuleDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IotValidateSecurityProfileBehaviorsFuture struct {
	Future workflow.Future
}

func (r *IotValidateSecurityProfileBehaviorsFuture) Get(ctx workflow.Context) (*iot.ValidateSecurityProfileBehaviorsOutput, error) {
	var output iot.ValidateSecurityProfileBehaviorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) AcceptCertificateTransfer(ctx workflow.Context, input *iot.AcceptCertificateTransferInput) (*iot.AcceptCertificateTransferOutput, error) {
	var output iot.AcceptCertificateTransferOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.AcceptCertificateTransfer", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) AcceptCertificateTransferAsync(ctx workflow.Context, input *iot.AcceptCertificateTransferInput) *IotAcceptCertificateTransferFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.AcceptCertificateTransfer", input)
	return &IotAcceptCertificateTransferFuture{Future: future}
}

func (a *IoTStub) AddThingToBillingGroup(ctx workflow.Context, input *iot.AddThingToBillingGroupInput) (*iot.AddThingToBillingGroupOutput, error) {
	var output iot.AddThingToBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.AddThingToBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) AddThingToBillingGroupAsync(ctx workflow.Context, input *iot.AddThingToBillingGroupInput) *IotAddThingToBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.AddThingToBillingGroup", input)
	return &IotAddThingToBillingGroupFuture{Future: future}
}

func (a *IoTStub) AddThingToThingGroup(ctx workflow.Context, input *iot.AddThingToThingGroupInput) (*iot.AddThingToThingGroupOutput, error) {
	var output iot.AddThingToThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.AddThingToThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) AddThingToThingGroupAsync(ctx workflow.Context, input *iot.AddThingToThingGroupInput) *IotAddThingToThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.AddThingToThingGroup", input)
	return &IotAddThingToThingGroupFuture{Future: future}
}

func (a *IoTStub) AssociateTargetsWithJob(ctx workflow.Context, input *iot.AssociateTargetsWithJobInput) (*iot.AssociateTargetsWithJobOutput, error) {
	var output iot.AssociateTargetsWithJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.AssociateTargetsWithJob", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) AssociateTargetsWithJobAsync(ctx workflow.Context, input *iot.AssociateTargetsWithJobInput) *IotAssociateTargetsWithJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.AssociateTargetsWithJob", input)
	return &IotAssociateTargetsWithJobFuture{Future: future}
}

func (a *IoTStub) AttachPolicy(ctx workflow.Context, input *iot.AttachPolicyInput) (*iot.AttachPolicyOutput, error) {
	var output iot.AttachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.AttachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) AttachPolicyAsync(ctx workflow.Context, input *iot.AttachPolicyInput) *IotAttachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.AttachPolicy", input)
	return &IotAttachPolicyFuture{Future: future}
}

func (a *IoTStub) AttachPrincipalPolicy(ctx workflow.Context, input *iot.AttachPrincipalPolicyInput) (*iot.AttachPrincipalPolicyOutput, error) {
	var output iot.AttachPrincipalPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.AttachPrincipalPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) AttachPrincipalPolicyAsync(ctx workflow.Context, input *iot.AttachPrincipalPolicyInput) *IotAttachPrincipalPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.AttachPrincipalPolicy", input)
	return &IotAttachPrincipalPolicyFuture{Future: future}
}

func (a *IoTStub) AttachSecurityProfile(ctx workflow.Context, input *iot.AttachSecurityProfileInput) (*iot.AttachSecurityProfileOutput, error) {
	var output iot.AttachSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.AttachSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) AttachSecurityProfileAsync(ctx workflow.Context, input *iot.AttachSecurityProfileInput) *IotAttachSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.AttachSecurityProfile", input)
	return &IotAttachSecurityProfileFuture{Future: future}
}

func (a *IoTStub) AttachThingPrincipal(ctx workflow.Context, input *iot.AttachThingPrincipalInput) (*iot.AttachThingPrincipalOutput, error) {
	var output iot.AttachThingPrincipalOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.AttachThingPrincipal", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) AttachThingPrincipalAsync(ctx workflow.Context, input *iot.AttachThingPrincipalInput) *IotAttachThingPrincipalFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.AttachThingPrincipal", input)
	return &IotAttachThingPrincipalFuture{Future: future}
}

func (a *IoTStub) CancelAuditMitigationActionsTask(ctx workflow.Context, input *iot.CancelAuditMitigationActionsTaskInput) (*iot.CancelAuditMitigationActionsTaskOutput, error) {
	var output iot.CancelAuditMitigationActionsTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CancelAuditMitigationActionsTask", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CancelAuditMitigationActionsTaskAsync(ctx workflow.Context, input *iot.CancelAuditMitigationActionsTaskInput) *IotCancelAuditMitigationActionsTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CancelAuditMitigationActionsTask", input)
	return &IotCancelAuditMitigationActionsTaskFuture{Future: future}
}

func (a *IoTStub) CancelAuditTask(ctx workflow.Context, input *iot.CancelAuditTaskInput) (*iot.CancelAuditTaskOutput, error) {
	var output iot.CancelAuditTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CancelAuditTask", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CancelAuditTaskAsync(ctx workflow.Context, input *iot.CancelAuditTaskInput) *IotCancelAuditTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CancelAuditTask", input)
	return &IotCancelAuditTaskFuture{Future: future}
}

func (a *IoTStub) CancelCertificateTransfer(ctx workflow.Context, input *iot.CancelCertificateTransferInput) (*iot.CancelCertificateTransferOutput, error) {
	var output iot.CancelCertificateTransferOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CancelCertificateTransfer", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CancelCertificateTransferAsync(ctx workflow.Context, input *iot.CancelCertificateTransferInput) *IotCancelCertificateTransferFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CancelCertificateTransfer", input)
	return &IotCancelCertificateTransferFuture{Future: future}
}

func (a *IoTStub) CancelJob(ctx workflow.Context, input *iot.CancelJobInput) (*iot.CancelJobOutput, error) {
	var output iot.CancelJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CancelJob", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CancelJobAsync(ctx workflow.Context, input *iot.CancelJobInput) *IotCancelJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CancelJob", input)
	return &IotCancelJobFuture{Future: future}
}

func (a *IoTStub) CancelJobExecution(ctx workflow.Context, input *iot.CancelJobExecutionInput) (*iot.CancelJobExecutionOutput, error) {
	var output iot.CancelJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CancelJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CancelJobExecutionAsync(ctx workflow.Context, input *iot.CancelJobExecutionInput) *IotCancelJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CancelJobExecution", input)
	return &IotCancelJobExecutionFuture{Future: future}
}

func (a *IoTStub) ClearDefaultAuthorizer(ctx workflow.Context, input *iot.ClearDefaultAuthorizerInput) (*iot.ClearDefaultAuthorizerOutput, error) {
	var output iot.ClearDefaultAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ClearDefaultAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ClearDefaultAuthorizerAsync(ctx workflow.Context, input *iot.ClearDefaultAuthorizerInput) *IotClearDefaultAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ClearDefaultAuthorizer", input)
	return &IotClearDefaultAuthorizerFuture{Future: future}
}

func (a *IoTStub) ConfirmTopicRuleDestination(ctx workflow.Context, input *iot.ConfirmTopicRuleDestinationInput) (*iot.ConfirmTopicRuleDestinationOutput, error) {
	var output iot.ConfirmTopicRuleDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ConfirmTopicRuleDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ConfirmTopicRuleDestinationAsync(ctx workflow.Context, input *iot.ConfirmTopicRuleDestinationInput) *IotConfirmTopicRuleDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ConfirmTopicRuleDestination", input)
	return &IotConfirmTopicRuleDestinationFuture{Future: future}
}

func (a *IoTStub) CreateAuditSuppression(ctx workflow.Context, input *iot.CreateAuditSuppressionInput) (*iot.CreateAuditSuppressionOutput, error) {
	var output iot.CreateAuditSuppressionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateAuditSuppression", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateAuditSuppressionAsync(ctx workflow.Context, input *iot.CreateAuditSuppressionInput) *IotCreateAuditSuppressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateAuditSuppression", input)
	return &IotCreateAuditSuppressionFuture{Future: future}
}

func (a *IoTStub) CreateAuthorizer(ctx workflow.Context, input *iot.CreateAuthorizerInput) (*iot.CreateAuthorizerOutput, error) {
	var output iot.CreateAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateAuthorizerAsync(ctx workflow.Context, input *iot.CreateAuthorizerInput) *IotCreateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateAuthorizer", input)
	return &IotCreateAuthorizerFuture{Future: future}
}

func (a *IoTStub) CreateBillingGroup(ctx workflow.Context, input *iot.CreateBillingGroupInput) (*iot.CreateBillingGroupOutput, error) {
	var output iot.CreateBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateBillingGroupAsync(ctx workflow.Context, input *iot.CreateBillingGroupInput) *IotCreateBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateBillingGroup", input)
	return &IotCreateBillingGroupFuture{Future: future}
}

func (a *IoTStub) CreateCertificateFromCsr(ctx workflow.Context, input *iot.CreateCertificateFromCsrInput) (*iot.CreateCertificateFromCsrOutput, error) {
	var output iot.CreateCertificateFromCsrOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateCertificateFromCsr", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateCertificateFromCsrAsync(ctx workflow.Context, input *iot.CreateCertificateFromCsrInput) *IotCreateCertificateFromCsrFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateCertificateFromCsr", input)
	return &IotCreateCertificateFromCsrFuture{Future: future}
}

func (a *IoTStub) CreateDimension(ctx workflow.Context, input *iot.CreateDimensionInput) (*iot.CreateDimensionOutput, error) {
	var output iot.CreateDimensionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateDimension", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateDimensionAsync(ctx workflow.Context, input *iot.CreateDimensionInput) *IotCreateDimensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateDimension", input)
	return &IotCreateDimensionFuture{Future: future}
}

func (a *IoTStub) CreateDomainConfiguration(ctx workflow.Context, input *iot.CreateDomainConfigurationInput) (*iot.CreateDomainConfigurationOutput, error) {
	var output iot.CreateDomainConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateDomainConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateDomainConfigurationAsync(ctx workflow.Context, input *iot.CreateDomainConfigurationInput) *IotCreateDomainConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateDomainConfiguration", input)
	return &IotCreateDomainConfigurationFuture{Future: future}
}

func (a *IoTStub) CreateDynamicThingGroup(ctx workflow.Context, input *iot.CreateDynamicThingGroupInput) (*iot.CreateDynamicThingGroupOutput, error) {
	var output iot.CreateDynamicThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateDynamicThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateDynamicThingGroupAsync(ctx workflow.Context, input *iot.CreateDynamicThingGroupInput) *IotCreateDynamicThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateDynamicThingGroup", input)
	return &IotCreateDynamicThingGroupFuture{Future: future}
}

func (a *IoTStub) CreateJob(ctx workflow.Context, input *iot.CreateJobInput) (*iot.CreateJobOutput, error) {
	var output iot.CreateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateJobAsync(ctx workflow.Context, input *iot.CreateJobInput) *IotCreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateJob", input)
	return &IotCreateJobFuture{Future: future}
}

func (a *IoTStub) CreateKeysAndCertificate(ctx workflow.Context, input *iot.CreateKeysAndCertificateInput) (*iot.CreateKeysAndCertificateOutput, error) {
	var output iot.CreateKeysAndCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateKeysAndCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateKeysAndCertificateAsync(ctx workflow.Context, input *iot.CreateKeysAndCertificateInput) *IotCreateKeysAndCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateKeysAndCertificate", input)
	return &IotCreateKeysAndCertificateFuture{Future: future}
}

func (a *IoTStub) CreateMitigationAction(ctx workflow.Context, input *iot.CreateMitigationActionInput) (*iot.CreateMitigationActionOutput, error) {
	var output iot.CreateMitigationActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateMitigationAction", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateMitigationActionAsync(ctx workflow.Context, input *iot.CreateMitigationActionInput) *IotCreateMitigationActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateMitigationAction", input)
	return &IotCreateMitigationActionFuture{Future: future}
}

func (a *IoTStub) CreateOTAUpdate(ctx workflow.Context, input *iot.CreateOTAUpdateInput) (*iot.CreateOTAUpdateOutput, error) {
	var output iot.CreateOTAUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateOTAUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateOTAUpdateAsync(ctx workflow.Context, input *iot.CreateOTAUpdateInput) *IotCreateOTAUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateOTAUpdate", input)
	return &IotCreateOTAUpdateFuture{Future: future}
}

func (a *IoTStub) CreatePolicy(ctx workflow.Context, input *iot.CreatePolicyInput) (*iot.CreatePolicyOutput, error) {
	var output iot.CreatePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreatePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreatePolicyAsync(ctx workflow.Context, input *iot.CreatePolicyInput) *IotCreatePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreatePolicy", input)
	return &IotCreatePolicyFuture{Future: future}
}

func (a *IoTStub) CreatePolicyVersion(ctx workflow.Context, input *iot.CreatePolicyVersionInput) (*iot.CreatePolicyVersionOutput, error) {
	var output iot.CreatePolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreatePolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreatePolicyVersionAsync(ctx workflow.Context, input *iot.CreatePolicyVersionInput) *IotCreatePolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreatePolicyVersion", input)
	return &IotCreatePolicyVersionFuture{Future: future}
}

func (a *IoTStub) CreateProvisioningClaim(ctx workflow.Context, input *iot.CreateProvisioningClaimInput) (*iot.CreateProvisioningClaimOutput, error) {
	var output iot.CreateProvisioningClaimOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateProvisioningClaim", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateProvisioningClaimAsync(ctx workflow.Context, input *iot.CreateProvisioningClaimInput) *IotCreateProvisioningClaimFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateProvisioningClaim", input)
	return &IotCreateProvisioningClaimFuture{Future: future}
}

func (a *IoTStub) CreateProvisioningTemplate(ctx workflow.Context, input *iot.CreateProvisioningTemplateInput) (*iot.CreateProvisioningTemplateOutput, error) {
	var output iot.CreateProvisioningTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateProvisioningTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateProvisioningTemplateAsync(ctx workflow.Context, input *iot.CreateProvisioningTemplateInput) *IotCreateProvisioningTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateProvisioningTemplate", input)
	return &IotCreateProvisioningTemplateFuture{Future: future}
}

func (a *IoTStub) CreateProvisioningTemplateVersion(ctx workflow.Context, input *iot.CreateProvisioningTemplateVersionInput) (*iot.CreateProvisioningTemplateVersionOutput, error) {
	var output iot.CreateProvisioningTemplateVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateProvisioningTemplateVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateProvisioningTemplateVersionAsync(ctx workflow.Context, input *iot.CreateProvisioningTemplateVersionInput) *IotCreateProvisioningTemplateVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateProvisioningTemplateVersion", input)
	return &IotCreateProvisioningTemplateVersionFuture{Future: future}
}

func (a *IoTStub) CreateRoleAlias(ctx workflow.Context, input *iot.CreateRoleAliasInput) (*iot.CreateRoleAliasOutput, error) {
	var output iot.CreateRoleAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateRoleAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateRoleAliasAsync(ctx workflow.Context, input *iot.CreateRoleAliasInput) *IotCreateRoleAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateRoleAlias", input)
	return &IotCreateRoleAliasFuture{Future: future}
}

func (a *IoTStub) CreateScheduledAudit(ctx workflow.Context, input *iot.CreateScheduledAuditInput) (*iot.CreateScheduledAuditOutput, error) {
	var output iot.CreateScheduledAuditOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateScheduledAudit", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateScheduledAuditAsync(ctx workflow.Context, input *iot.CreateScheduledAuditInput) *IotCreateScheduledAuditFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateScheduledAudit", input)
	return &IotCreateScheduledAuditFuture{Future: future}
}

func (a *IoTStub) CreateSecurityProfile(ctx workflow.Context, input *iot.CreateSecurityProfileInput) (*iot.CreateSecurityProfileOutput, error) {
	var output iot.CreateSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateSecurityProfileAsync(ctx workflow.Context, input *iot.CreateSecurityProfileInput) *IotCreateSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateSecurityProfile", input)
	return &IotCreateSecurityProfileFuture{Future: future}
}

func (a *IoTStub) CreateStream(ctx workflow.Context, input *iot.CreateStreamInput) (*iot.CreateStreamOutput, error) {
	var output iot.CreateStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateStream", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateStreamAsync(ctx workflow.Context, input *iot.CreateStreamInput) *IotCreateStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateStream", input)
	return &IotCreateStreamFuture{Future: future}
}

func (a *IoTStub) CreateThing(ctx workflow.Context, input *iot.CreateThingInput) (*iot.CreateThingOutput, error) {
	var output iot.CreateThingOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateThing", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateThingAsync(ctx workflow.Context, input *iot.CreateThingInput) *IotCreateThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateThing", input)
	return &IotCreateThingFuture{Future: future}
}

func (a *IoTStub) CreateThingGroup(ctx workflow.Context, input *iot.CreateThingGroupInput) (*iot.CreateThingGroupOutput, error) {
	var output iot.CreateThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateThingGroupAsync(ctx workflow.Context, input *iot.CreateThingGroupInput) *IotCreateThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateThingGroup", input)
	return &IotCreateThingGroupFuture{Future: future}
}

func (a *IoTStub) CreateThingType(ctx workflow.Context, input *iot.CreateThingTypeInput) (*iot.CreateThingTypeOutput, error) {
	var output iot.CreateThingTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateThingType", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateThingTypeAsync(ctx workflow.Context, input *iot.CreateThingTypeInput) *IotCreateThingTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateThingType", input)
	return &IotCreateThingTypeFuture{Future: future}
}

func (a *IoTStub) CreateTopicRule(ctx workflow.Context, input *iot.CreateTopicRuleInput) (*iot.CreateTopicRuleOutput, error) {
	var output iot.CreateTopicRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateTopicRule", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateTopicRuleAsync(ctx workflow.Context, input *iot.CreateTopicRuleInput) *IotCreateTopicRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateTopicRule", input)
	return &IotCreateTopicRuleFuture{Future: future}
}

func (a *IoTStub) CreateTopicRuleDestination(ctx workflow.Context, input *iot.CreateTopicRuleDestinationInput) (*iot.CreateTopicRuleDestinationOutput, error) {
	var output iot.CreateTopicRuleDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.CreateTopicRuleDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) CreateTopicRuleDestinationAsync(ctx workflow.Context, input *iot.CreateTopicRuleDestinationInput) *IotCreateTopicRuleDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.CreateTopicRuleDestination", input)
	return &IotCreateTopicRuleDestinationFuture{Future: future}
}

func (a *IoTStub) DeleteAccountAuditConfiguration(ctx workflow.Context, input *iot.DeleteAccountAuditConfigurationInput) (*iot.DeleteAccountAuditConfigurationOutput, error) {
	var output iot.DeleteAccountAuditConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteAccountAuditConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteAccountAuditConfigurationAsync(ctx workflow.Context, input *iot.DeleteAccountAuditConfigurationInput) *IotDeleteAccountAuditConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteAccountAuditConfiguration", input)
	return &IotDeleteAccountAuditConfigurationFuture{Future: future}
}

func (a *IoTStub) DeleteAuditSuppression(ctx workflow.Context, input *iot.DeleteAuditSuppressionInput) (*iot.DeleteAuditSuppressionOutput, error) {
	var output iot.DeleteAuditSuppressionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteAuditSuppression", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteAuditSuppressionAsync(ctx workflow.Context, input *iot.DeleteAuditSuppressionInput) *IotDeleteAuditSuppressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteAuditSuppression", input)
	return &IotDeleteAuditSuppressionFuture{Future: future}
}

func (a *IoTStub) DeleteAuthorizer(ctx workflow.Context, input *iot.DeleteAuthorizerInput) (*iot.DeleteAuthorizerOutput, error) {
	var output iot.DeleteAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteAuthorizerAsync(ctx workflow.Context, input *iot.DeleteAuthorizerInput) *IotDeleteAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteAuthorizer", input)
	return &IotDeleteAuthorizerFuture{Future: future}
}

func (a *IoTStub) DeleteBillingGroup(ctx workflow.Context, input *iot.DeleteBillingGroupInput) (*iot.DeleteBillingGroupOutput, error) {
	var output iot.DeleteBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteBillingGroupAsync(ctx workflow.Context, input *iot.DeleteBillingGroupInput) *IotDeleteBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteBillingGroup", input)
	return &IotDeleteBillingGroupFuture{Future: future}
}

func (a *IoTStub) DeleteCACertificate(ctx workflow.Context, input *iot.DeleteCACertificateInput) (*iot.DeleteCACertificateOutput, error) {
	var output iot.DeleteCACertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteCACertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteCACertificateAsync(ctx workflow.Context, input *iot.DeleteCACertificateInput) *IotDeleteCACertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteCACertificate", input)
	return &IotDeleteCACertificateFuture{Future: future}
}

func (a *IoTStub) DeleteCertificate(ctx workflow.Context, input *iot.DeleteCertificateInput) (*iot.DeleteCertificateOutput, error) {
	var output iot.DeleteCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteCertificateAsync(ctx workflow.Context, input *iot.DeleteCertificateInput) *IotDeleteCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteCertificate", input)
	return &IotDeleteCertificateFuture{Future: future}
}

func (a *IoTStub) DeleteDimension(ctx workflow.Context, input *iot.DeleteDimensionInput) (*iot.DeleteDimensionOutput, error) {
	var output iot.DeleteDimensionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteDimension", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteDimensionAsync(ctx workflow.Context, input *iot.DeleteDimensionInput) *IotDeleteDimensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteDimension", input)
	return &IotDeleteDimensionFuture{Future: future}
}

func (a *IoTStub) DeleteDomainConfiguration(ctx workflow.Context, input *iot.DeleteDomainConfigurationInput) (*iot.DeleteDomainConfigurationOutput, error) {
	var output iot.DeleteDomainConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteDomainConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteDomainConfigurationAsync(ctx workflow.Context, input *iot.DeleteDomainConfigurationInput) *IotDeleteDomainConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteDomainConfiguration", input)
	return &IotDeleteDomainConfigurationFuture{Future: future}
}

func (a *IoTStub) DeleteDynamicThingGroup(ctx workflow.Context, input *iot.DeleteDynamicThingGroupInput) (*iot.DeleteDynamicThingGroupOutput, error) {
	var output iot.DeleteDynamicThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteDynamicThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteDynamicThingGroupAsync(ctx workflow.Context, input *iot.DeleteDynamicThingGroupInput) *IotDeleteDynamicThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteDynamicThingGroup", input)
	return &IotDeleteDynamicThingGroupFuture{Future: future}
}

func (a *IoTStub) DeleteJob(ctx workflow.Context, input *iot.DeleteJobInput) (*iot.DeleteJobOutput, error) {
	var output iot.DeleteJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteJob", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteJobAsync(ctx workflow.Context, input *iot.DeleteJobInput) *IotDeleteJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteJob", input)
	return &IotDeleteJobFuture{Future: future}
}

func (a *IoTStub) DeleteJobExecution(ctx workflow.Context, input *iot.DeleteJobExecutionInput) (*iot.DeleteJobExecutionOutput, error) {
	var output iot.DeleteJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteJobExecutionAsync(ctx workflow.Context, input *iot.DeleteJobExecutionInput) *IotDeleteJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteJobExecution", input)
	return &IotDeleteJobExecutionFuture{Future: future}
}

func (a *IoTStub) DeleteMitigationAction(ctx workflow.Context, input *iot.DeleteMitigationActionInput) (*iot.DeleteMitigationActionOutput, error) {
	var output iot.DeleteMitigationActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteMitigationAction", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteMitigationActionAsync(ctx workflow.Context, input *iot.DeleteMitigationActionInput) *IotDeleteMitigationActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteMitigationAction", input)
	return &IotDeleteMitigationActionFuture{Future: future}
}

func (a *IoTStub) DeleteOTAUpdate(ctx workflow.Context, input *iot.DeleteOTAUpdateInput) (*iot.DeleteOTAUpdateOutput, error) {
	var output iot.DeleteOTAUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteOTAUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteOTAUpdateAsync(ctx workflow.Context, input *iot.DeleteOTAUpdateInput) *IotDeleteOTAUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteOTAUpdate", input)
	return &IotDeleteOTAUpdateFuture{Future: future}
}

func (a *IoTStub) DeletePolicy(ctx workflow.Context, input *iot.DeletePolicyInput) (*iot.DeletePolicyOutput, error) {
	var output iot.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeletePolicyAsync(ctx workflow.Context, input *iot.DeletePolicyInput) *IotDeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeletePolicy", input)
	return &IotDeletePolicyFuture{Future: future}
}

func (a *IoTStub) DeletePolicyVersion(ctx workflow.Context, input *iot.DeletePolicyVersionInput) (*iot.DeletePolicyVersionOutput, error) {
	var output iot.DeletePolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeletePolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeletePolicyVersionAsync(ctx workflow.Context, input *iot.DeletePolicyVersionInput) *IotDeletePolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeletePolicyVersion", input)
	return &IotDeletePolicyVersionFuture{Future: future}
}

func (a *IoTStub) DeleteProvisioningTemplate(ctx workflow.Context, input *iot.DeleteProvisioningTemplateInput) (*iot.DeleteProvisioningTemplateOutput, error) {
	var output iot.DeleteProvisioningTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteProvisioningTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteProvisioningTemplateAsync(ctx workflow.Context, input *iot.DeleteProvisioningTemplateInput) *IotDeleteProvisioningTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteProvisioningTemplate", input)
	return &IotDeleteProvisioningTemplateFuture{Future: future}
}

func (a *IoTStub) DeleteProvisioningTemplateVersion(ctx workflow.Context, input *iot.DeleteProvisioningTemplateVersionInput) (*iot.DeleteProvisioningTemplateVersionOutput, error) {
	var output iot.DeleteProvisioningTemplateVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteProvisioningTemplateVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteProvisioningTemplateVersionAsync(ctx workflow.Context, input *iot.DeleteProvisioningTemplateVersionInput) *IotDeleteProvisioningTemplateVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteProvisioningTemplateVersion", input)
	return &IotDeleteProvisioningTemplateVersionFuture{Future: future}
}

func (a *IoTStub) DeleteRegistrationCode(ctx workflow.Context, input *iot.DeleteRegistrationCodeInput) (*iot.DeleteRegistrationCodeOutput, error) {
	var output iot.DeleteRegistrationCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteRegistrationCode", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteRegistrationCodeAsync(ctx workflow.Context, input *iot.DeleteRegistrationCodeInput) *IotDeleteRegistrationCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteRegistrationCode", input)
	return &IotDeleteRegistrationCodeFuture{Future: future}
}

func (a *IoTStub) DeleteRoleAlias(ctx workflow.Context, input *iot.DeleteRoleAliasInput) (*iot.DeleteRoleAliasOutput, error) {
	var output iot.DeleteRoleAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteRoleAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteRoleAliasAsync(ctx workflow.Context, input *iot.DeleteRoleAliasInput) *IotDeleteRoleAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteRoleAlias", input)
	return &IotDeleteRoleAliasFuture{Future: future}
}

func (a *IoTStub) DeleteScheduledAudit(ctx workflow.Context, input *iot.DeleteScheduledAuditInput) (*iot.DeleteScheduledAuditOutput, error) {
	var output iot.DeleteScheduledAuditOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteScheduledAudit", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteScheduledAuditAsync(ctx workflow.Context, input *iot.DeleteScheduledAuditInput) *IotDeleteScheduledAuditFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteScheduledAudit", input)
	return &IotDeleteScheduledAuditFuture{Future: future}
}

func (a *IoTStub) DeleteSecurityProfile(ctx workflow.Context, input *iot.DeleteSecurityProfileInput) (*iot.DeleteSecurityProfileOutput, error) {
	var output iot.DeleteSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteSecurityProfileAsync(ctx workflow.Context, input *iot.DeleteSecurityProfileInput) *IotDeleteSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteSecurityProfile", input)
	return &IotDeleteSecurityProfileFuture{Future: future}
}

func (a *IoTStub) DeleteStream(ctx workflow.Context, input *iot.DeleteStreamInput) (*iot.DeleteStreamOutput, error) {
	var output iot.DeleteStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteStream", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteStreamAsync(ctx workflow.Context, input *iot.DeleteStreamInput) *IotDeleteStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteStream", input)
	return &IotDeleteStreamFuture{Future: future}
}

func (a *IoTStub) DeleteThing(ctx workflow.Context, input *iot.DeleteThingInput) (*iot.DeleteThingOutput, error) {
	var output iot.DeleteThingOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteThing", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteThingAsync(ctx workflow.Context, input *iot.DeleteThingInput) *IotDeleteThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteThing", input)
	return &IotDeleteThingFuture{Future: future}
}

func (a *IoTStub) DeleteThingGroup(ctx workflow.Context, input *iot.DeleteThingGroupInput) (*iot.DeleteThingGroupOutput, error) {
	var output iot.DeleteThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteThingGroupAsync(ctx workflow.Context, input *iot.DeleteThingGroupInput) *IotDeleteThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteThingGroup", input)
	return &IotDeleteThingGroupFuture{Future: future}
}

func (a *IoTStub) DeleteThingType(ctx workflow.Context, input *iot.DeleteThingTypeInput) (*iot.DeleteThingTypeOutput, error) {
	var output iot.DeleteThingTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteThingType", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteThingTypeAsync(ctx workflow.Context, input *iot.DeleteThingTypeInput) *IotDeleteThingTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteThingType", input)
	return &IotDeleteThingTypeFuture{Future: future}
}

func (a *IoTStub) DeleteTopicRule(ctx workflow.Context, input *iot.DeleteTopicRuleInput) (*iot.DeleteTopicRuleOutput, error) {
	var output iot.DeleteTopicRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteTopicRule", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteTopicRuleAsync(ctx workflow.Context, input *iot.DeleteTopicRuleInput) *IotDeleteTopicRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteTopicRule", input)
	return &IotDeleteTopicRuleFuture{Future: future}
}

func (a *IoTStub) DeleteTopicRuleDestination(ctx workflow.Context, input *iot.DeleteTopicRuleDestinationInput) (*iot.DeleteTopicRuleDestinationOutput, error) {
	var output iot.DeleteTopicRuleDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteTopicRuleDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteTopicRuleDestinationAsync(ctx workflow.Context, input *iot.DeleteTopicRuleDestinationInput) *IotDeleteTopicRuleDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteTopicRuleDestination", input)
	return &IotDeleteTopicRuleDestinationFuture{Future: future}
}

func (a *IoTStub) DeleteV2LoggingLevel(ctx workflow.Context, input *iot.DeleteV2LoggingLevelInput) (*iot.DeleteV2LoggingLevelOutput, error) {
	var output iot.DeleteV2LoggingLevelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeleteV2LoggingLevel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeleteV2LoggingLevelAsync(ctx workflow.Context, input *iot.DeleteV2LoggingLevelInput) *IotDeleteV2LoggingLevelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeleteV2LoggingLevel", input)
	return &IotDeleteV2LoggingLevelFuture{Future: future}
}

func (a *IoTStub) DeprecateThingType(ctx workflow.Context, input *iot.DeprecateThingTypeInput) (*iot.DeprecateThingTypeOutput, error) {
	var output iot.DeprecateThingTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DeprecateThingType", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DeprecateThingTypeAsync(ctx workflow.Context, input *iot.DeprecateThingTypeInput) *IotDeprecateThingTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DeprecateThingType", input)
	return &IotDeprecateThingTypeFuture{Future: future}
}

func (a *IoTStub) DescribeAccountAuditConfiguration(ctx workflow.Context, input *iot.DescribeAccountAuditConfigurationInput) (*iot.DescribeAccountAuditConfigurationOutput, error) {
	var output iot.DescribeAccountAuditConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeAccountAuditConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeAccountAuditConfigurationAsync(ctx workflow.Context, input *iot.DescribeAccountAuditConfigurationInput) *IotDescribeAccountAuditConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeAccountAuditConfiguration", input)
	return &IotDescribeAccountAuditConfigurationFuture{Future: future}
}

func (a *IoTStub) DescribeAuditFinding(ctx workflow.Context, input *iot.DescribeAuditFindingInput) (*iot.DescribeAuditFindingOutput, error) {
	var output iot.DescribeAuditFindingOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeAuditFinding", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeAuditFindingAsync(ctx workflow.Context, input *iot.DescribeAuditFindingInput) *IotDescribeAuditFindingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeAuditFinding", input)
	return &IotDescribeAuditFindingFuture{Future: future}
}

func (a *IoTStub) DescribeAuditMitigationActionsTask(ctx workflow.Context, input *iot.DescribeAuditMitigationActionsTaskInput) (*iot.DescribeAuditMitigationActionsTaskOutput, error) {
	var output iot.DescribeAuditMitigationActionsTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeAuditMitigationActionsTask", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeAuditMitigationActionsTaskAsync(ctx workflow.Context, input *iot.DescribeAuditMitigationActionsTaskInput) *IotDescribeAuditMitigationActionsTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeAuditMitigationActionsTask", input)
	return &IotDescribeAuditMitigationActionsTaskFuture{Future: future}
}

func (a *IoTStub) DescribeAuditSuppression(ctx workflow.Context, input *iot.DescribeAuditSuppressionInput) (*iot.DescribeAuditSuppressionOutput, error) {
	var output iot.DescribeAuditSuppressionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeAuditSuppression", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeAuditSuppressionAsync(ctx workflow.Context, input *iot.DescribeAuditSuppressionInput) *IotDescribeAuditSuppressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeAuditSuppression", input)
	return &IotDescribeAuditSuppressionFuture{Future: future}
}

func (a *IoTStub) DescribeAuditTask(ctx workflow.Context, input *iot.DescribeAuditTaskInput) (*iot.DescribeAuditTaskOutput, error) {
	var output iot.DescribeAuditTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeAuditTask", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeAuditTaskAsync(ctx workflow.Context, input *iot.DescribeAuditTaskInput) *IotDescribeAuditTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeAuditTask", input)
	return &IotDescribeAuditTaskFuture{Future: future}
}

func (a *IoTStub) DescribeAuthorizer(ctx workflow.Context, input *iot.DescribeAuthorizerInput) (*iot.DescribeAuthorizerOutput, error) {
	var output iot.DescribeAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeAuthorizerAsync(ctx workflow.Context, input *iot.DescribeAuthorizerInput) *IotDescribeAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeAuthorizer", input)
	return &IotDescribeAuthorizerFuture{Future: future}
}

func (a *IoTStub) DescribeBillingGroup(ctx workflow.Context, input *iot.DescribeBillingGroupInput) (*iot.DescribeBillingGroupOutput, error) {
	var output iot.DescribeBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeBillingGroupAsync(ctx workflow.Context, input *iot.DescribeBillingGroupInput) *IotDescribeBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeBillingGroup", input)
	return &IotDescribeBillingGroupFuture{Future: future}
}

func (a *IoTStub) DescribeCACertificate(ctx workflow.Context, input *iot.DescribeCACertificateInput) (*iot.DescribeCACertificateOutput, error) {
	var output iot.DescribeCACertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeCACertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeCACertificateAsync(ctx workflow.Context, input *iot.DescribeCACertificateInput) *IotDescribeCACertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeCACertificate", input)
	return &IotDescribeCACertificateFuture{Future: future}
}

func (a *IoTStub) DescribeCertificate(ctx workflow.Context, input *iot.DescribeCertificateInput) (*iot.DescribeCertificateOutput, error) {
	var output iot.DescribeCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeCertificateAsync(ctx workflow.Context, input *iot.DescribeCertificateInput) *IotDescribeCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeCertificate", input)
	return &IotDescribeCertificateFuture{Future: future}
}

func (a *IoTStub) DescribeDefaultAuthorizer(ctx workflow.Context, input *iot.DescribeDefaultAuthorizerInput) (*iot.DescribeDefaultAuthorizerOutput, error) {
	var output iot.DescribeDefaultAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeDefaultAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeDefaultAuthorizerAsync(ctx workflow.Context, input *iot.DescribeDefaultAuthorizerInput) *IotDescribeDefaultAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeDefaultAuthorizer", input)
	return &IotDescribeDefaultAuthorizerFuture{Future: future}
}

func (a *IoTStub) DescribeDimension(ctx workflow.Context, input *iot.DescribeDimensionInput) (*iot.DescribeDimensionOutput, error) {
	var output iot.DescribeDimensionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeDimension", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeDimensionAsync(ctx workflow.Context, input *iot.DescribeDimensionInput) *IotDescribeDimensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeDimension", input)
	return &IotDescribeDimensionFuture{Future: future}
}

func (a *IoTStub) DescribeDomainConfiguration(ctx workflow.Context, input *iot.DescribeDomainConfigurationInput) (*iot.DescribeDomainConfigurationOutput, error) {
	var output iot.DescribeDomainConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeDomainConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeDomainConfigurationAsync(ctx workflow.Context, input *iot.DescribeDomainConfigurationInput) *IotDescribeDomainConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeDomainConfiguration", input)
	return &IotDescribeDomainConfigurationFuture{Future: future}
}

func (a *IoTStub) DescribeEndpoint(ctx workflow.Context, input *iot.DescribeEndpointInput) (*iot.DescribeEndpointOutput, error) {
	var output iot.DescribeEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeEndpointAsync(ctx workflow.Context, input *iot.DescribeEndpointInput) *IotDescribeEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeEndpoint", input)
	return &IotDescribeEndpointFuture{Future: future}
}

func (a *IoTStub) DescribeEventConfigurations(ctx workflow.Context, input *iot.DescribeEventConfigurationsInput) (*iot.DescribeEventConfigurationsOutput, error) {
	var output iot.DescribeEventConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeEventConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeEventConfigurationsAsync(ctx workflow.Context, input *iot.DescribeEventConfigurationsInput) *IotDescribeEventConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeEventConfigurations", input)
	return &IotDescribeEventConfigurationsFuture{Future: future}
}

func (a *IoTStub) DescribeIndex(ctx workflow.Context, input *iot.DescribeIndexInput) (*iot.DescribeIndexOutput, error) {
	var output iot.DescribeIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeIndexAsync(ctx workflow.Context, input *iot.DescribeIndexInput) *IotDescribeIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeIndex", input)
	return &IotDescribeIndexFuture{Future: future}
}

func (a *IoTStub) DescribeJob(ctx workflow.Context, input *iot.DescribeJobInput) (*iot.DescribeJobOutput, error) {
	var output iot.DescribeJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeJob", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeJobAsync(ctx workflow.Context, input *iot.DescribeJobInput) *IotDescribeJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeJob", input)
	return &IotDescribeJobFuture{Future: future}
}

func (a *IoTStub) DescribeJobExecution(ctx workflow.Context, input *iot.DescribeJobExecutionInput) (*iot.DescribeJobExecutionOutput, error) {
	var output iot.DescribeJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeJobExecutionAsync(ctx workflow.Context, input *iot.DescribeJobExecutionInput) *IotDescribeJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeJobExecution", input)
	return &IotDescribeJobExecutionFuture{Future: future}
}

func (a *IoTStub) DescribeMitigationAction(ctx workflow.Context, input *iot.DescribeMitigationActionInput) (*iot.DescribeMitigationActionOutput, error) {
	var output iot.DescribeMitigationActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeMitigationAction", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeMitigationActionAsync(ctx workflow.Context, input *iot.DescribeMitigationActionInput) *IotDescribeMitigationActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeMitigationAction", input)
	return &IotDescribeMitigationActionFuture{Future: future}
}

func (a *IoTStub) DescribeProvisioningTemplate(ctx workflow.Context, input *iot.DescribeProvisioningTemplateInput) (*iot.DescribeProvisioningTemplateOutput, error) {
	var output iot.DescribeProvisioningTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeProvisioningTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeProvisioningTemplateAsync(ctx workflow.Context, input *iot.DescribeProvisioningTemplateInput) *IotDescribeProvisioningTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeProvisioningTemplate", input)
	return &IotDescribeProvisioningTemplateFuture{Future: future}
}

func (a *IoTStub) DescribeProvisioningTemplateVersion(ctx workflow.Context, input *iot.DescribeProvisioningTemplateVersionInput) (*iot.DescribeProvisioningTemplateVersionOutput, error) {
	var output iot.DescribeProvisioningTemplateVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeProvisioningTemplateVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeProvisioningTemplateVersionAsync(ctx workflow.Context, input *iot.DescribeProvisioningTemplateVersionInput) *IotDescribeProvisioningTemplateVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeProvisioningTemplateVersion", input)
	return &IotDescribeProvisioningTemplateVersionFuture{Future: future}
}

func (a *IoTStub) DescribeRoleAlias(ctx workflow.Context, input *iot.DescribeRoleAliasInput) (*iot.DescribeRoleAliasOutput, error) {
	var output iot.DescribeRoleAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeRoleAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeRoleAliasAsync(ctx workflow.Context, input *iot.DescribeRoleAliasInput) *IotDescribeRoleAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeRoleAlias", input)
	return &IotDescribeRoleAliasFuture{Future: future}
}

func (a *IoTStub) DescribeScheduledAudit(ctx workflow.Context, input *iot.DescribeScheduledAuditInput) (*iot.DescribeScheduledAuditOutput, error) {
	var output iot.DescribeScheduledAuditOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeScheduledAudit", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeScheduledAuditAsync(ctx workflow.Context, input *iot.DescribeScheduledAuditInput) *IotDescribeScheduledAuditFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeScheduledAudit", input)
	return &IotDescribeScheduledAuditFuture{Future: future}
}

func (a *IoTStub) DescribeSecurityProfile(ctx workflow.Context, input *iot.DescribeSecurityProfileInput) (*iot.DescribeSecurityProfileOutput, error) {
	var output iot.DescribeSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeSecurityProfileAsync(ctx workflow.Context, input *iot.DescribeSecurityProfileInput) *IotDescribeSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeSecurityProfile", input)
	return &IotDescribeSecurityProfileFuture{Future: future}
}

func (a *IoTStub) DescribeStream(ctx workflow.Context, input *iot.DescribeStreamInput) (*iot.DescribeStreamOutput, error) {
	var output iot.DescribeStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeStream", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeStreamAsync(ctx workflow.Context, input *iot.DescribeStreamInput) *IotDescribeStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeStream", input)
	return &IotDescribeStreamFuture{Future: future}
}

func (a *IoTStub) DescribeThing(ctx workflow.Context, input *iot.DescribeThingInput) (*iot.DescribeThingOutput, error) {
	var output iot.DescribeThingOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeThing", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeThingAsync(ctx workflow.Context, input *iot.DescribeThingInput) *IotDescribeThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeThing", input)
	return &IotDescribeThingFuture{Future: future}
}

func (a *IoTStub) DescribeThingGroup(ctx workflow.Context, input *iot.DescribeThingGroupInput) (*iot.DescribeThingGroupOutput, error) {
	var output iot.DescribeThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeThingGroupAsync(ctx workflow.Context, input *iot.DescribeThingGroupInput) *IotDescribeThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeThingGroup", input)
	return &IotDescribeThingGroupFuture{Future: future}
}

func (a *IoTStub) DescribeThingRegistrationTask(ctx workflow.Context, input *iot.DescribeThingRegistrationTaskInput) (*iot.DescribeThingRegistrationTaskOutput, error) {
	var output iot.DescribeThingRegistrationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeThingRegistrationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeThingRegistrationTaskAsync(ctx workflow.Context, input *iot.DescribeThingRegistrationTaskInput) *IotDescribeThingRegistrationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeThingRegistrationTask", input)
	return &IotDescribeThingRegistrationTaskFuture{Future: future}
}

func (a *IoTStub) DescribeThingType(ctx workflow.Context, input *iot.DescribeThingTypeInput) (*iot.DescribeThingTypeOutput, error) {
	var output iot.DescribeThingTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DescribeThingType", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DescribeThingTypeAsync(ctx workflow.Context, input *iot.DescribeThingTypeInput) *IotDescribeThingTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DescribeThingType", input)
	return &IotDescribeThingTypeFuture{Future: future}
}

func (a *IoTStub) DetachPolicy(ctx workflow.Context, input *iot.DetachPolicyInput) (*iot.DetachPolicyOutput, error) {
	var output iot.DetachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DetachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DetachPolicyAsync(ctx workflow.Context, input *iot.DetachPolicyInput) *IotDetachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DetachPolicy", input)
	return &IotDetachPolicyFuture{Future: future}
}

func (a *IoTStub) DetachPrincipalPolicy(ctx workflow.Context, input *iot.DetachPrincipalPolicyInput) (*iot.DetachPrincipalPolicyOutput, error) {
	var output iot.DetachPrincipalPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DetachPrincipalPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DetachPrincipalPolicyAsync(ctx workflow.Context, input *iot.DetachPrincipalPolicyInput) *IotDetachPrincipalPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DetachPrincipalPolicy", input)
	return &IotDetachPrincipalPolicyFuture{Future: future}
}

func (a *IoTStub) DetachSecurityProfile(ctx workflow.Context, input *iot.DetachSecurityProfileInput) (*iot.DetachSecurityProfileOutput, error) {
	var output iot.DetachSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DetachSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DetachSecurityProfileAsync(ctx workflow.Context, input *iot.DetachSecurityProfileInput) *IotDetachSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DetachSecurityProfile", input)
	return &IotDetachSecurityProfileFuture{Future: future}
}

func (a *IoTStub) DetachThingPrincipal(ctx workflow.Context, input *iot.DetachThingPrincipalInput) (*iot.DetachThingPrincipalOutput, error) {
	var output iot.DetachThingPrincipalOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DetachThingPrincipal", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DetachThingPrincipalAsync(ctx workflow.Context, input *iot.DetachThingPrincipalInput) *IotDetachThingPrincipalFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DetachThingPrincipal", input)
	return &IotDetachThingPrincipalFuture{Future: future}
}

func (a *IoTStub) DisableTopicRule(ctx workflow.Context, input *iot.DisableTopicRuleInput) (*iot.DisableTopicRuleOutput, error) {
	var output iot.DisableTopicRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.DisableTopicRule", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) DisableTopicRuleAsync(ctx workflow.Context, input *iot.DisableTopicRuleInput) *IotDisableTopicRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.DisableTopicRule", input)
	return &IotDisableTopicRuleFuture{Future: future}
}

func (a *IoTStub) EnableTopicRule(ctx workflow.Context, input *iot.EnableTopicRuleInput) (*iot.EnableTopicRuleOutput, error) {
	var output iot.EnableTopicRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.EnableTopicRule", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) EnableTopicRuleAsync(ctx workflow.Context, input *iot.EnableTopicRuleInput) *IotEnableTopicRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.EnableTopicRule", input)
	return &IotEnableTopicRuleFuture{Future: future}
}

func (a *IoTStub) GetCardinality(ctx workflow.Context, input *iot.GetCardinalityInput) (*iot.GetCardinalityOutput, error) {
	var output iot.GetCardinalityOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetCardinality", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetCardinalityAsync(ctx workflow.Context, input *iot.GetCardinalityInput) *IotGetCardinalityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetCardinality", input)
	return &IotGetCardinalityFuture{Future: future}
}

func (a *IoTStub) GetEffectivePolicies(ctx workflow.Context, input *iot.GetEffectivePoliciesInput) (*iot.GetEffectivePoliciesOutput, error) {
	var output iot.GetEffectivePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetEffectivePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetEffectivePoliciesAsync(ctx workflow.Context, input *iot.GetEffectivePoliciesInput) *IotGetEffectivePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetEffectivePolicies", input)
	return &IotGetEffectivePoliciesFuture{Future: future}
}

func (a *IoTStub) GetIndexingConfiguration(ctx workflow.Context, input *iot.GetIndexingConfigurationInput) (*iot.GetIndexingConfigurationOutput, error) {
	var output iot.GetIndexingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetIndexingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetIndexingConfigurationAsync(ctx workflow.Context, input *iot.GetIndexingConfigurationInput) *IotGetIndexingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetIndexingConfiguration", input)
	return &IotGetIndexingConfigurationFuture{Future: future}
}

func (a *IoTStub) GetJobDocument(ctx workflow.Context, input *iot.GetJobDocumentInput) (*iot.GetJobDocumentOutput, error) {
	var output iot.GetJobDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetJobDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetJobDocumentAsync(ctx workflow.Context, input *iot.GetJobDocumentInput) *IotGetJobDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetJobDocument", input)
	return &IotGetJobDocumentFuture{Future: future}
}

func (a *IoTStub) GetLoggingOptions(ctx workflow.Context, input *iot.GetLoggingOptionsInput) (*iot.GetLoggingOptionsOutput, error) {
	var output iot.GetLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetLoggingOptionsAsync(ctx workflow.Context, input *iot.GetLoggingOptionsInput) *IotGetLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetLoggingOptions", input)
	return &IotGetLoggingOptionsFuture{Future: future}
}

func (a *IoTStub) GetOTAUpdate(ctx workflow.Context, input *iot.GetOTAUpdateInput) (*iot.GetOTAUpdateOutput, error) {
	var output iot.GetOTAUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetOTAUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetOTAUpdateAsync(ctx workflow.Context, input *iot.GetOTAUpdateInput) *IotGetOTAUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetOTAUpdate", input)
	return &IotGetOTAUpdateFuture{Future: future}
}

func (a *IoTStub) GetPercentiles(ctx workflow.Context, input *iot.GetPercentilesInput) (*iot.GetPercentilesOutput, error) {
	var output iot.GetPercentilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetPercentiles", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetPercentilesAsync(ctx workflow.Context, input *iot.GetPercentilesInput) *IotGetPercentilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetPercentiles", input)
	return &IotGetPercentilesFuture{Future: future}
}

func (a *IoTStub) GetPolicy(ctx workflow.Context, input *iot.GetPolicyInput) (*iot.GetPolicyOutput, error) {
	var output iot.GetPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetPolicyAsync(ctx workflow.Context, input *iot.GetPolicyInput) *IotGetPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetPolicy", input)
	return &IotGetPolicyFuture{Future: future}
}

func (a *IoTStub) GetPolicyVersion(ctx workflow.Context, input *iot.GetPolicyVersionInput) (*iot.GetPolicyVersionOutput, error) {
	var output iot.GetPolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetPolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetPolicyVersionAsync(ctx workflow.Context, input *iot.GetPolicyVersionInput) *IotGetPolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetPolicyVersion", input)
	return &IotGetPolicyVersionFuture{Future: future}
}

func (a *IoTStub) GetRegistrationCode(ctx workflow.Context, input *iot.GetRegistrationCodeInput) (*iot.GetRegistrationCodeOutput, error) {
	var output iot.GetRegistrationCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetRegistrationCode", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetRegistrationCodeAsync(ctx workflow.Context, input *iot.GetRegistrationCodeInput) *IotGetRegistrationCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetRegistrationCode", input)
	return &IotGetRegistrationCodeFuture{Future: future}
}

func (a *IoTStub) GetStatistics(ctx workflow.Context, input *iot.GetStatisticsInput) (*iot.GetStatisticsOutput, error) {
	var output iot.GetStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetStatisticsAsync(ctx workflow.Context, input *iot.GetStatisticsInput) *IotGetStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetStatistics", input)
	return &IotGetStatisticsFuture{Future: future}
}

func (a *IoTStub) GetTopicRule(ctx workflow.Context, input *iot.GetTopicRuleInput) (*iot.GetTopicRuleOutput, error) {
	var output iot.GetTopicRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetTopicRule", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetTopicRuleAsync(ctx workflow.Context, input *iot.GetTopicRuleInput) *IotGetTopicRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetTopicRule", input)
	return &IotGetTopicRuleFuture{Future: future}
}

func (a *IoTStub) GetTopicRuleDestination(ctx workflow.Context, input *iot.GetTopicRuleDestinationInput) (*iot.GetTopicRuleDestinationOutput, error) {
	var output iot.GetTopicRuleDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetTopicRuleDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetTopicRuleDestinationAsync(ctx workflow.Context, input *iot.GetTopicRuleDestinationInput) *IotGetTopicRuleDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetTopicRuleDestination", input)
	return &IotGetTopicRuleDestinationFuture{Future: future}
}

func (a *IoTStub) GetV2LoggingOptions(ctx workflow.Context, input *iot.GetV2LoggingOptionsInput) (*iot.GetV2LoggingOptionsOutput, error) {
	var output iot.GetV2LoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.GetV2LoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) GetV2LoggingOptionsAsync(ctx workflow.Context, input *iot.GetV2LoggingOptionsInput) *IotGetV2LoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.GetV2LoggingOptions", input)
	return &IotGetV2LoggingOptionsFuture{Future: future}
}

func (a *IoTStub) ListActiveViolations(ctx workflow.Context, input *iot.ListActiveViolationsInput) (*iot.ListActiveViolationsOutput, error) {
	var output iot.ListActiveViolationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListActiveViolations", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListActiveViolationsAsync(ctx workflow.Context, input *iot.ListActiveViolationsInput) *IotListActiveViolationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListActiveViolations", input)
	return &IotListActiveViolationsFuture{Future: future}
}

func (a *IoTStub) ListAttachedPolicies(ctx workflow.Context, input *iot.ListAttachedPoliciesInput) (*iot.ListAttachedPoliciesOutput, error) {
	var output iot.ListAttachedPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListAttachedPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListAttachedPoliciesAsync(ctx workflow.Context, input *iot.ListAttachedPoliciesInput) *IotListAttachedPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListAttachedPolicies", input)
	return &IotListAttachedPoliciesFuture{Future: future}
}

func (a *IoTStub) ListAuditFindings(ctx workflow.Context, input *iot.ListAuditFindingsInput) (*iot.ListAuditFindingsOutput, error) {
	var output iot.ListAuditFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListAuditFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListAuditFindingsAsync(ctx workflow.Context, input *iot.ListAuditFindingsInput) *IotListAuditFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListAuditFindings", input)
	return &IotListAuditFindingsFuture{Future: future}
}

func (a *IoTStub) ListAuditMitigationActionsExecutions(ctx workflow.Context, input *iot.ListAuditMitigationActionsExecutionsInput) (*iot.ListAuditMitigationActionsExecutionsOutput, error) {
	var output iot.ListAuditMitigationActionsExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListAuditMitigationActionsExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListAuditMitigationActionsExecutionsAsync(ctx workflow.Context, input *iot.ListAuditMitigationActionsExecutionsInput) *IotListAuditMitigationActionsExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListAuditMitigationActionsExecutions", input)
	return &IotListAuditMitigationActionsExecutionsFuture{Future: future}
}

func (a *IoTStub) ListAuditMitigationActionsTasks(ctx workflow.Context, input *iot.ListAuditMitigationActionsTasksInput) (*iot.ListAuditMitigationActionsTasksOutput, error) {
	var output iot.ListAuditMitigationActionsTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListAuditMitigationActionsTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListAuditMitigationActionsTasksAsync(ctx workflow.Context, input *iot.ListAuditMitigationActionsTasksInput) *IotListAuditMitigationActionsTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListAuditMitigationActionsTasks", input)
	return &IotListAuditMitigationActionsTasksFuture{Future: future}
}

func (a *IoTStub) ListAuditSuppressions(ctx workflow.Context, input *iot.ListAuditSuppressionsInput) (*iot.ListAuditSuppressionsOutput, error) {
	var output iot.ListAuditSuppressionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListAuditSuppressions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListAuditSuppressionsAsync(ctx workflow.Context, input *iot.ListAuditSuppressionsInput) *IotListAuditSuppressionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListAuditSuppressions", input)
	return &IotListAuditSuppressionsFuture{Future: future}
}

func (a *IoTStub) ListAuditTasks(ctx workflow.Context, input *iot.ListAuditTasksInput) (*iot.ListAuditTasksOutput, error) {
	var output iot.ListAuditTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListAuditTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListAuditTasksAsync(ctx workflow.Context, input *iot.ListAuditTasksInput) *IotListAuditTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListAuditTasks", input)
	return &IotListAuditTasksFuture{Future: future}
}

func (a *IoTStub) ListAuthorizers(ctx workflow.Context, input *iot.ListAuthorizersInput) (*iot.ListAuthorizersOutput, error) {
	var output iot.ListAuthorizersOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListAuthorizers", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListAuthorizersAsync(ctx workflow.Context, input *iot.ListAuthorizersInput) *IotListAuthorizersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListAuthorizers", input)
	return &IotListAuthorizersFuture{Future: future}
}

func (a *IoTStub) ListBillingGroups(ctx workflow.Context, input *iot.ListBillingGroupsInput) (*iot.ListBillingGroupsOutput, error) {
	var output iot.ListBillingGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListBillingGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListBillingGroupsAsync(ctx workflow.Context, input *iot.ListBillingGroupsInput) *IotListBillingGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListBillingGroups", input)
	return &IotListBillingGroupsFuture{Future: future}
}

func (a *IoTStub) ListCACertificates(ctx workflow.Context, input *iot.ListCACertificatesInput) (*iot.ListCACertificatesOutput, error) {
	var output iot.ListCACertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListCACertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListCACertificatesAsync(ctx workflow.Context, input *iot.ListCACertificatesInput) *IotListCACertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListCACertificates", input)
	return &IotListCACertificatesFuture{Future: future}
}

func (a *IoTStub) ListCertificates(ctx workflow.Context, input *iot.ListCertificatesInput) (*iot.ListCertificatesOutput, error) {
	var output iot.ListCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListCertificatesAsync(ctx workflow.Context, input *iot.ListCertificatesInput) *IotListCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListCertificates", input)
	return &IotListCertificatesFuture{Future: future}
}

func (a *IoTStub) ListCertificatesByCA(ctx workflow.Context, input *iot.ListCertificatesByCAInput) (*iot.ListCertificatesByCAOutput, error) {
	var output iot.ListCertificatesByCAOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListCertificatesByCA", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListCertificatesByCAAsync(ctx workflow.Context, input *iot.ListCertificatesByCAInput) *IotListCertificatesByCAFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListCertificatesByCA", input)
	return &IotListCertificatesByCAFuture{Future: future}
}

func (a *IoTStub) ListDimensions(ctx workflow.Context, input *iot.ListDimensionsInput) (*iot.ListDimensionsOutput, error) {
	var output iot.ListDimensionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListDimensions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListDimensionsAsync(ctx workflow.Context, input *iot.ListDimensionsInput) *IotListDimensionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListDimensions", input)
	return &IotListDimensionsFuture{Future: future}
}

func (a *IoTStub) ListDomainConfigurations(ctx workflow.Context, input *iot.ListDomainConfigurationsInput) (*iot.ListDomainConfigurationsOutput, error) {
	var output iot.ListDomainConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListDomainConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListDomainConfigurationsAsync(ctx workflow.Context, input *iot.ListDomainConfigurationsInput) *IotListDomainConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListDomainConfigurations", input)
	return &IotListDomainConfigurationsFuture{Future: future}
}

func (a *IoTStub) ListIndices(ctx workflow.Context, input *iot.ListIndicesInput) (*iot.ListIndicesOutput, error) {
	var output iot.ListIndicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListIndices", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListIndicesAsync(ctx workflow.Context, input *iot.ListIndicesInput) *IotListIndicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListIndices", input)
	return &IotListIndicesFuture{Future: future}
}

func (a *IoTStub) ListJobExecutionsForJob(ctx workflow.Context, input *iot.ListJobExecutionsForJobInput) (*iot.ListJobExecutionsForJobOutput, error) {
	var output iot.ListJobExecutionsForJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListJobExecutionsForJob", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListJobExecutionsForJobAsync(ctx workflow.Context, input *iot.ListJobExecutionsForJobInput) *IotListJobExecutionsForJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListJobExecutionsForJob", input)
	return &IotListJobExecutionsForJobFuture{Future: future}
}

func (a *IoTStub) ListJobExecutionsForThing(ctx workflow.Context, input *iot.ListJobExecutionsForThingInput) (*iot.ListJobExecutionsForThingOutput, error) {
	var output iot.ListJobExecutionsForThingOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListJobExecutionsForThing", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListJobExecutionsForThingAsync(ctx workflow.Context, input *iot.ListJobExecutionsForThingInput) *IotListJobExecutionsForThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListJobExecutionsForThing", input)
	return &IotListJobExecutionsForThingFuture{Future: future}
}

func (a *IoTStub) ListJobs(ctx workflow.Context, input *iot.ListJobsInput) (*iot.ListJobsOutput, error) {
	var output iot.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListJobsAsync(ctx workflow.Context, input *iot.ListJobsInput) *IotListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListJobs", input)
	return &IotListJobsFuture{Future: future}
}

func (a *IoTStub) ListMitigationActions(ctx workflow.Context, input *iot.ListMitigationActionsInput) (*iot.ListMitigationActionsOutput, error) {
	var output iot.ListMitigationActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListMitigationActions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListMitigationActionsAsync(ctx workflow.Context, input *iot.ListMitigationActionsInput) *IotListMitigationActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListMitigationActions", input)
	return &IotListMitigationActionsFuture{Future: future}
}

func (a *IoTStub) ListOTAUpdates(ctx workflow.Context, input *iot.ListOTAUpdatesInput) (*iot.ListOTAUpdatesOutput, error) {
	var output iot.ListOTAUpdatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListOTAUpdates", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListOTAUpdatesAsync(ctx workflow.Context, input *iot.ListOTAUpdatesInput) *IotListOTAUpdatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListOTAUpdates", input)
	return &IotListOTAUpdatesFuture{Future: future}
}

func (a *IoTStub) ListOutgoingCertificates(ctx workflow.Context, input *iot.ListOutgoingCertificatesInput) (*iot.ListOutgoingCertificatesOutput, error) {
	var output iot.ListOutgoingCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListOutgoingCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListOutgoingCertificatesAsync(ctx workflow.Context, input *iot.ListOutgoingCertificatesInput) *IotListOutgoingCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListOutgoingCertificates", input)
	return &IotListOutgoingCertificatesFuture{Future: future}
}

func (a *IoTStub) ListPolicies(ctx workflow.Context, input *iot.ListPoliciesInput) (*iot.ListPoliciesOutput, error) {
	var output iot.ListPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListPoliciesAsync(ctx workflow.Context, input *iot.ListPoliciesInput) *IotListPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListPolicies", input)
	return &IotListPoliciesFuture{Future: future}
}

func (a *IoTStub) ListPolicyPrincipals(ctx workflow.Context, input *iot.ListPolicyPrincipalsInput) (*iot.ListPolicyPrincipalsOutput, error) {
	var output iot.ListPolicyPrincipalsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListPolicyPrincipals", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListPolicyPrincipalsAsync(ctx workflow.Context, input *iot.ListPolicyPrincipalsInput) *IotListPolicyPrincipalsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListPolicyPrincipals", input)
	return &IotListPolicyPrincipalsFuture{Future: future}
}

func (a *IoTStub) ListPolicyVersions(ctx workflow.Context, input *iot.ListPolicyVersionsInput) (*iot.ListPolicyVersionsOutput, error) {
	var output iot.ListPolicyVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListPolicyVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListPolicyVersionsAsync(ctx workflow.Context, input *iot.ListPolicyVersionsInput) *IotListPolicyVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListPolicyVersions", input)
	return &IotListPolicyVersionsFuture{Future: future}
}

func (a *IoTStub) ListPrincipalPolicies(ctx workflow.Context, input *iot.ListPrincipalPoliciesInput) (*iot.ListPrincipalPoliciesOutput, error) {
	var output iot.ListPrincipalPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListPrincipalPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListPrincipalPoliciesAsync(ctx workflow.Context, input *iot.ListPrincipalPoliciesInput) *IotListPrincipalPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListPrincipalPolicies", input)
	return &IotListPrincipalPoliciesFuture{Future: future}
}

func (a *IoTStub) ListPrincipalThings(ctx workflow.Context, input *iot.ListPrincipalThingsInput) (*iot.ListPrincipalThingsOutput, error) {
	var output iot.ListPrincipalThingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListPrincipalThings", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListPrincipalThingsAsync(ctx workflow.Context, input *iot.ListPrincipalThingsInput) *IotListPrincipalThingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListPrincipalThings", input)
	return &IotListPrincipalThingsFuture{Future: future}
}

func (a *IoTStub) ListProvisioningTemplateVersions(ctx workflow.Context, input *iot.ListProvisioningTemplateVersionsInput) (*iot.ListProvisioningTemplateVersionsOutput, error) {
	var output iot.ListProvisioningTemplateVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListProvisioningTemplateVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListProvisioningTemplateVersionsAsync(ctx workflow.Context, input *iot.ListProvisioningTemplateVersionsInput) *IotListProvisioningTemplateVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListProvisioningTemplateVersions", input)
	return &IotListProvisioningTemplateVersionsFuture{Future: future}
}

func (a *IoTStub) ListProvisioningTemplates(ctx workflow.Context, input *iot.ListProvisioningTemplatesInput) (*iot.ListProvisioningTemplatesOutput, error) {
	var output iot.ListProvisioningTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListProvisioningTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListProvisioningTemplatesAsync(ctx workflow.Context, input *iot.ListProvisioningTemplatesInput) *IotListProvisioningTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListProvisioningTemplates", input)
	return &IotListProvisioningTemplatesFuture{Future: future}
}

func (a *IoTStub) ListRoleAliases(ctx workflow.Context, input *iot.ListRoleAliasesInput) (*iot.ListRoleAliasesOutput, error) {
	var output iot.ListRoleAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListRoleAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListRoleAliasesAsync(ctx workflow.Context, input *iot.ListRoleAliasesInput) *IotListRoleAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListRoleAliases", input)
	return &IotListRoleAliasesFuture{Future: future}
}

func (a *IoTStub) ListScheduledAudits(ctx workflow.Context, input *iot.ListScheduledAuditsInput) (*iot.ListScheduledAuditsOutput, error) {
	var output iot.ListScheduledAuditsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListScheduledAudits", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListScheduledAuditsAsync(ctx workflow.Context, input *iot.ListScheduledAuditsInput) *IotListScheduledAuditsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListScheduledAudits", input)
	return &IotListScheduledAuditsFuture{Future: future}
}

func (a *IoTStub) ListSecurityProfiles(ctx workflow.Context, input *iot.ListSecurityProfilesInput) (*iot.ListSecurityProfilesOutput, error) {
	var output iot.ListSecurityProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListSecurityProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListSecurityProfilesAsync(ctx workflow.Context, input *iot.ListSecurityProfilesInput) *IotListSecurityProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListSecurityProfiles", input)
	return &IotListSecurityProfilesFuture{Future: future}
}

func (a *IoTStub) ListSecurityProfilesForTarget(ctx workflow.Context, input *iot.ListSecurityProfilesForTargetInput) (*iot.ListSecurityProfilesForTargetOutput, error) {
	var output iot.ListSecurityProfilesForTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListSecurityProfilesForTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListSecurityProfilesForTargetAsync(ctx workflow.Context, input *iot.ListSecurityProfilesForTargetInput) *IotListSecurityProfilesForTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListSecurityProfilesForTarget", input)
	return &IotListSecurityProfilesForTargetFuture{Future: future}
}

func (a *IoTStub) ListStreams(ctx workflow.Context, input *iot.ListStreamsInput) (*iot.ListStreamsOutput, error) {
	var output iot.ListStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListStreamsAsync(ctx workflow.Context, input *iot.ListStreamsInput) *IotListStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListStreams", input)
	return &IotListStreamsFuture{Future: future}
}

func (a *IoTStub) ListTagsForResource(ctx workflow.Context, input *iot.ListTagsForResourceInput) (*iot.ListTagsForResourceOutput, error) {
	var output iot.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListTagsForResourceAsync(ctx workflow.Context, input *iot.ListTagsForResourceInput) *IotListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListTagsForResource", input)
	return &IotListTagsForResourceFuture{Future: future}
}

func (a *IoTStub) ListTargetsForPolicy(ctx workflow.Context, input *iot.ListTargetsForPolicyInput) (*iot.ListTargetsForPolicyOutput, error) {
	var output iot.ListTargetsForPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListTargetsForPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListTargetsForPolicyAsync(ctx workflow.Context, input *iot.ListTargetsForPolicyInput) *IotListTargetsForPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListTargetsForPolicy", input)
	return &IotListTargetsForPolicyFuture{Future: future}
}

func (a *IoTStub) ListTargetsForSecurityProfile(ctx workflow.Context, input *iot.ListTargetsForSecurityProfileInput) (*iot.ListTargetsForSecurityProfileOutput, error) {
	var output iot.ListTargetsForSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListTargetsForSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListTargetsForSecurityProfileAsync(ctx workflow.Context, input *iot.ListTargetsForSecurityProfileInput) *IotListTargetsForSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListTargetsForSecurityProfile", input)
	return &IotListTargetsForSecurityProfileFuture{Future: future}
}

func (a *IoTStub) ListThingGroups(ctx workflow.Context, input *iot.ListThingGroupsInput) (*iot.ListThingGroupsOutput, error) {
	var output iot.ListThingGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListThingGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListThingGroupsAsync(ctx workflow.Context, input *iot.ListThingGroupsInput) *IotListThingGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListThingGroups", input)
	return &IotListThingGroupsFuture{Future: future}
}

func (a *IoTStub) ListThingGroupsForThing(ctx workflow.Context, input *iot.ListThingGroupsForThingInput) (*iot.ListThingGroupsForThingOutput, error) {
	var output iot.ListThingGroupsForThingOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListThingGroupsForThing", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListThingGroupsForThingAsync(ctx workflow.Context, input *iot.ListThingGroupsForThingInput) *IotListThingGroupsForThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListThingGroupsForThing", input)
	return &IotListThingGroupsForThingFuture{Future: future}
}

func (a *IoTStub) ListThingPrincipals(ctx workflow.Context, input *iot.ListThingPrincipalsInput) (*iot.ListThingPrincipalsOutput, error) {
	var output iot.ListThingPrincipalsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListThingPrincipals", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListThingPrincipalsAsync(ctx workflow.Context, input *iot.ListThingPrincipalsInput) *IotListThingPrincipalsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListThingPrincipals", input)
	return &IotListThingPrincipalsFuture{Future: future}
}

func (a *IoTStub) ListThingRegistrationTaskReports(ctx workflow.Context, input *iot.ListThingRegistrationTaskReportsInput) (*iot.ListThingRegistrationTaskReportsOutput, error) {
	var output iot.ListThingRegistrationTaskReportsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListThingRegistrationTaskReports", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListThingRegistrationTaskReportsAsync(ctx workflow.Context, input *iot.ListThingRegistrationTaskReportsInput) *IotListThingRegistrationTaskReportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListThingRegistrationTaskReports", input)
	return &IotListThingRegistrationTaskReportsFuture{Future: future}
}

func (a *IoTStub) ListThingRegistrationTasks(ctx workflow.Context, input *iot.ListThingRegistrationTasksInput) (*iot.ListThingRegistrationTasksOutput, error) {
	var output iot.ListThingRegistrationTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListThingRegistrationTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListThingRegistrationTasksAsync(ctx workflow.Context, input *iot.ListThingRegistrationTasksInput) *IotListThingRegistrationTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListThingRegistrationTasks", input)
	return &IotListThingRegistrationTasksFuture{Future: future}
}

func (a *IoTStub) ListThingTypes(ctx workflow.Context, input *iot.ListThingTypesInput) (*iot.ListThingTypesOutput, error) {
	var output iot.ListThingTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListThingTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListThingTypesAsync(ctx workflow.Context, input *iot.ListThingTypesInput) *IotListThingTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListThingTypes", input)
	return &IotListThingTypesFuture{Future: future}
}

func (a *IoTStub) ListThings(ctx workflow.Context, input *iot.ListThingsInput) (*iot.ListThingsOutput, error) {
	var output iot.ListThingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListThings", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListThingsAsync(ctx workflow.Context, input *iot.ListThingsInput) *IotListThingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListThings", input)
	return &IotListThingsFuture{Future: future}
}

func (a *IoTStub) ListThingsInBillingGroup(ctx workflow.Context, input *iot.ListThingsInBillingGroupInput) (*iot.ListThingsInBillingGroupOutput, error) {
	var output iot.ListThingsInBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListThingsInBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListThingsInBillingGroupAsync(ctx workflow.Context, input *iot.ListThingsInBillingGroupInput) *IotListThingsInBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListThingsInBillingGroup", input)
	return &IotListThingsInBillingGroupFuture{Future: future}
}

func (a *IoTStub) ListThingsInThingGroup(ctx workflow.Context, input *iot.ListThingsInThingGroupInput) (*iot.ListThingsInThingGroupOutput, error) {
	var output iot.ListThingsInThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListThingsInThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListThingsInThingGroupAsync(ctx workflow.Context, input *iot.ListThingsInThingGroupInput) *IotListThingsInThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListThingsInThingGroup", input)
	return &IotListThingsInThingGroupFuture{Future: future}
}

func (a *IoTStub) ListTopicRuleDestinations(ctx workflow.Context, input *iot.ListTopicRuleDestinationsInput) (*iot.ListTopicRuleDestinationsOutput, error) {
	var output iot.ListTopicRuleDestinationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListTopicRuleDestinations", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListTopicRuleDestinationsAsync(ctx workflow.Context, input *iot.ListTopicRuleDestinationsInput) *IotListTopicRuleDestinationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListTopicRuleDestinations", input)
	return &IotListTopicRuleDestinationsFuture{Future: future}
}

func (a *IoTStub) ListTopicRules(ctx workflow.Context, input *iot.ListTopicRulesInput) (*iot.ListTopicRulesOutput, error) {
	var output iot.ListTopicRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListTopicRules", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListTopicRulesAsync(ctx workflow.Context, input *iot.ListTopicRulesInput) *IotListTopicRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListTopicRules", input)
	return &IotListTopicRulesFuture{Future: future}
}

func (a *IoTStub) ListV2LoggingLevels(ctx workflow.Context, input *iot.ListV2LoggingLevelsInput) (*iot.ListV2LoggingLevelsOutput, error) {
	var output iot.ListV2LoggingLevelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListV2LoggingLevels", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListV2LoggingLevelsAsync(ctx workflow.Context, input *iot.ListV2LoggingLevelsInput) *IotListV2LoggingLevelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListV2LoggingLevels", input)
	return &IotListV2LoggingLevelsFuture{Future: future}
}

func (a *IoTStub) ListViolationEvents(ctx workflow.Context, input *iot.ListViolationEventsInput) (*iot.ListViolationEventsOutput, error) {
	var output iot.ListViolationEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ListViolationEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ListViolationEventsAsync(ctx workflow.Context, input *iot.ListViolationEventsInput) *IotListViolationEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ListViolationEvents", input)
	return &IotListViolationEventsFuture{Future: future}
}

func (a *IoTStub) RegisterCACertificate(ctx workflow.Context, input *iot.RegisterCACertificateInput) (*iot.RegisterCACertificateOutput, error) {
	var output iot.RegisterCACertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.RegisterCACertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) RegisterCACertificateAsync(ctx workflow.Context, input *iot.RegisterCACertificateInput) *IotRegisterCACertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.RegisterCACertificate", input)
	return &IotRegisterCACertificateFuture{Future: future}
}

func (a *IoTStub) RegisterCertificate(ctx workflow.Context, input *iot.RegisterCertificateInput) (*iot.RegisterCertificateOutput, error) {
	var output iot.RegisterCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.RegisterCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) RegisterCertificateAsync(ctx workflow.Context, input *iot.RegisterCertificateInput) *IotRegisterCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.RegisterCertificate", input)
	return &IotRegisterCertificateFuture{Future: future}
}

func (a *IoTStub) RegisterCertificateWithoutCA(ctx workflow.Context, input *iot.RegisterCertificateWithoutCAInput) (*iot.RegisterCertificateWithoutCAOutput, error) {
	var output iot.RegisterCertificateWithoutCAOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.RegisterCertificateWithoutCA", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) RegisterCertificateWithoutCAAsync(ctx workflow.Context, input *iot.RegisterCertificateWithoutCAInput) *IotRegisterCertificateWithoutCAFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.RegisterCertificateWithoutCA", input)
	return &IotRegisterCertificateWithoutCAFuture{Future: future}
}

func (a *IoTStub) RegisterThing(ctx workflow.Context, input *iot.RegisterThingInput) (*iot.RegisterThingOutput, error) {
	var output iot.RegisterThingOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.RegisterThing", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) RegisterThingAsync(ctx workflow.Context, input *iot.RegisterThingInput) *IotRegisterThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.RegisterThing", input)
	return &IotRegisterThingFuture{Future: future}
}

func (a *IoTStub) RejectCertificateTransfer(ctx workflow.Context, input *iot.RejectCertificateTransferInput) (*iot.RejectCertificateTransferOutput, error) {
	var output iot.RejectCertificateTransferOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.RejectCertificateTransfer", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) RejectCertificateTransferAsync(ctx workflow.Context, input *iot.RejectCertificateTransferInput) *IotRejectCertificateTransferFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.RejectCertificateTransfer", input)
	return &IotRejectCertificateTransferFuture{Future: future}
}

func (a *IoTStub) RemoveThingFromBillingGroup(ctx workflow.Context, input *iot.RemoveThingFromBillingGroupInput) (*iot.RemoveThingFromBillingGroupOutput, error) {
	var output iot.RemoveThingFromBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.RemoveThingFromBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) RemoveThingFromBillingGroupAsync(ctx workflow.Context, input *iot.RemoveThingFromBillingGroupInput) *IotRemoveThingFromBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.RemoveThingFromBillingGroup", input)
	return &IotRemoveThingFromBillingGroupFuture{Future: future}
}

func (a *IoTStub) RemoveThingFromThingGroup(ctx workflow.Context, input *iot.RemoveThingFromThingGroupInput) (*iot.RemoveThingFromThingGroupOutput, error) {
	var output iot.RemoveThingFromThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.RemoveThingFromThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) RemoveThingFromThingGroupAsync(ctx workflow.Context, input *iot.RemoveThingFromThingGroupInput) *IotRemoveThingFromThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.RemoveThingFromThingGroup", input)
	return &IotRemoveThingFromThingGroupFuture{Future: future}
}

func (a *IoTStub) ReplaceTopicRule(ctx workflow.Context, input *iot.ReplaceTopicRuleInput) (*iot.ReplaceTopicRuleOutput, error) {
	var output iot.ReplaceTopicRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ReplaceTopicRule", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ReplaceTopicRuleAsync(ctx workflow.Context, input *iot.ReplaceTopicRuleInput) *IotReplaceTopicRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ReplaceTopicRule", input)
	return &IotReplaceTopicRuleFuture{Future: future}
}

func (a *IoTStub) SearchIndex(ctx workflow.Context, input *iot.SearchIndexInput) (*iot.SearchIndexOutput, error) {
	var output iot.SearchIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.SearchIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) SearchIndexAsync(ctx workflow.Context, input *iot.SearchIndexInput) *IotSearchIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.SearchIndex", input)
	return &IotSearchIndexFuture{Future: future}
}

func (a *IoTStub) SetDefaultAuthorizer(ctx workflow.Context, input *iot.SetDefaultAuthorizerInput) (*iot.SetDefaultAuthorizerOutput, error) {
	var output iot.SetDefaultAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.SetDefaultAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) SetDefaultAuthorizerAsync(ctx workflow.Context, input *iot.SetDefaultAuthorizerInput) *IotSetDefaultAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.SetDefaultAuthorizer", input)
	return &IotSetDefaultAuthorizerFuture{Future: future}
}

func (a *IoTStub) SetDefaultPolicyVersion(ctx workflow.Context, input *iot.SetDefaultPolicyVersionInput) (*iot.SetDefaultPolicyVersionOutput, error) {
	var output iot.SetDefaultPolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.SetDefaultPolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) SetDefaultPolicyVersionAsync(ctx workflow.Context, input *iot.SetDefaultPolicyVersionInput) *IotSetDefaultPolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.SetDefaultPolicyVersion", input)
	return &IotSetDefaultPolicyVersionFuture{Future: future}
}

func (a *IoTStub) SetLoggingOptions(ctx workflow.Context, input *iot.SetLoggingOptionsInput) (*iot.SetLoggingOptionsOutput, error) {
	var output iot.SetLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.SetLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) SetLoggingOptionsAsync(ctx workflow.Context, input *iot.SetLoggingOptionsInput) *IotSetLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.SetLoggingOptions", input)
	return &IotSetLoggingOptionsFuture{Future: future}
}

func (a *IoTStub) SetV2LoggingLevel(ctx workflow.Context, input *iot.SetV2LoggingLevelInput) (*iot.SetV2LoggingLevelOutput, error) {
	var output iot.SetV2LoggingLevelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.SetV2LoggingLevel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) SetV2LoggingLevelAsync(ctx workflow.Context, input *iot.SetV2LoggingLevelInput) *IotSetV2LoggingLevelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.SetV2LoggingLevel", input)
	return &IotSetV2LoggingLevelFuture{Future: future}
}

func (a *IoTStub) SetV2LoggingOptions(ctx workflow.Context, input *iot.SetV2LoggingOptionsInput) (*iot.SetV2LoggingOptionsOutput, error) {
	var output iot.SetV2LoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.SetV2LoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) SetV2LoggingOptionsAsync(ctx workflow.Context, input *iot.SetV2LoggingOptionsInput) *IotSetV2LoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.SetV2LoggingOptions", input)
	return &IotSetV2LoggingOptionsFuture{Future: future}
}

func (a *IoTStub) StartAuditMitigationActionsTask(ctx workflow.Context, input *iot.StartAuditMitigationActionsTaskInput) (*iot.StartAuditMitigationActionsTaskOutput, error) {
	var output iot.StartAuditMitigationActionsTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.StartAuditMitigationActionsTask", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) StartAuditMitigationActionsTaskAsync(ctx workflow.Context, input *iot.StartAuditMitigationActionsTaskInput) *IotStartAuditMitigationActionsTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.StartAuditMitigationActionsTask", input)
	return &IotStartAuditMitigationActionsTaskFuture{Future: future}
}

func (a *IoTStub) StartOnDemandAuditTask(ctx workflow.Context, input *iot.StartOnDemandAuditTaskInput) (*iot.StartOnDemandAuditTaskOutput, error) {
	var output iot.StartOnDemandAuditTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.StartOnDemandAuditTask", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) StartOnDemandAuditTaskAsync(ctx workflow.Context, input *iot.StartOnDemandAuditTaskInput) *IotStartOnDemandAuditTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.StartOnDemandAuditTask", input)
	return &IotStartOnDemandAuditTaskFuture{Future: future}
}

func (a *IoTStub) StartThingRegistrationTask(ctx workflow.Context, input *iot.StartThingRegistrationTaskInput) (*iot.StartThingRegistrationTaskOutput, error) {
	var output iot.StartThingRegistrationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.StartThingRegistrationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) StartThingRegistrationTaskAsync(ctx workflow.Context, input *iot.StartThingRegistrationTaskInput) *IotStartThingRegistrationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.StartThingRegistrationTask", input)
	return &IotStartThingRegistrationTaskFuture{Future: future}
}

func (a *IoTStub) StopThingRegistrationTask(ctx workflow.Context, input *iot.StopThingRegistrationTaskInput) (*iot.StopThingRegistrationTaskOutput, error) {
	var output iot.StopThingRegistrationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.StopThingRegistrationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) StopThingRegistrationTaskAsync(ctx workflow.Context, input *iot.StopThingRegistrationTaskInput) *IotStopThingRegistrationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.StopThingRegistrationTask", input)
	return &IotStopThingRegistrationTaskFuture{Future: future}
}

func (a *IoTStub) TagResource(ctx workflow.Context, input *iot.TagResourceInput) (*iot.TagResourceOutput, error) {
	var output iot.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) TagResourceAsync(ctx workflow.Context, input *iot.TagResourceInput) *IotTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.TagResource", input)
	return &IotTagResourceFuture{Future: future}
}

func (a *IoTStub) TestAuthorization(ctx workflow.Context, input *iot.TestAuthorizationInput) (*iot.TestAuthorizationOutput, error) {
	var output iot.TestAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.TestAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) TestAuthorizationAsync(ctx workflow.Context, input *iot.TestAuthorizationInput) *IotTestAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.TestAuthorization", input)
	return &IotTestAuthorizationFuture{Future: future}
}

func (a *IoTStub) TestInvokeAuthorizer(ctx workflow.Context, input *iot.TestInvokeAuthorizerInput) (*iot.TestInvokeAuthorizerOutput, error) {
	var output iot.TestInvokeAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.TestInvokeAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) TestInvokeAuthorizerAsync(ctx workflow.Context, input *iot.TestInvokeAuthorizerInput) *IotTestInvokeAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.TestInvokeAuthorizer", input)
	return &IotTestInvokeAuthorizerFuture{Future: future}
}

func (a *IoTStub) TransferCertificate(ctx workflow.Context, input *iot.TransferCertificateInput) (*iot.TransferCertificateOutput, error) {
	var output iot.TransferCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.TransferCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) TransferCertificateAsync(ctx workflow.Context, input *iot.TransferCertificateInput) *IotTransferCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.TransferCertificate", input)
	return &IotTransferCertificateFuture{Future: future}
}

func (a *IoTStub) UntagResource(ctx workflow.Context, input *iot.UntagResourceInput) (*iot.UntagResourceOutput, error) {
	var output iot.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UntagResourceAsync(ctx workflow.Context, input *iot.UntagResourceInput) *IotUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UntagResource", input)
	return &IotUntagResourceFuture{Future: future}
}

func (a *IoTStub) UpdateAccountAuditConfiguration(ctx workflow.Context, input *iot.UpdateAccountAuditConfigurationInput) (*iot.UpdateAccountAuditConfigurationOutput, error) {
	var output iot.UpdateAccountAuditConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateAccountAuditConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateAccountAuditConfigurationAsync(ctx workflow.Context, input *iot.UpdateAccountAuditConfigurationInput) *IotUpdateAccountAuditConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateAccountAuditConfiguration", input)
	return &IotUpdateAccountAuditConfigurationFuture{Future: future}
}

func (a *IoTStub) UpdateAuditSuppression(ctx workflow.Context, input *iot.UpdateAuditSuppressionInput) (*iot.UpdateAuditSuppressionOutput, error) {
	var output iot.UpdateAuditSuppressionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateAuditSuppression", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateAuditSuppressionAsync(ctx workflow.Context, input *iot.UpdateAuditSuppressionInput) *IotUpdateAuditSuppressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateAuditSuppression", input)
	return &IotUpdateAuditSuppressionFuture{Future: future}
}

func (a *IoTStub) UpdateAuthorizer(ctx workflow.Context, input *iot.UpdateAuthorizerInput) (*iot.UpdateAuthorizerOutput, error) {
	var output iot.UpdateAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateAuthorizerAsync(ctx workflow.Context, input *iot.UpdateAuthorizerInput) *IotUpdateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateAuthorizer", input)
	return &IotUpdateAuthorizerFuture{Future: future}
}

func (a *IoTStub) UpdateBillingGroup(ctx workflow.Context, input *iot.UpdateBillingGroupInput) (*iot.UpdateBillingGroupOutput, error) {
	var output iot.UpdateBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateBillingGroupAsync(ctx workflow.Context, input *iot.UpdateBillingGroupInput) *IotUpdateBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateBillingGroup", input)
	return &IotUpdateBillingGroupFuture{Future: future}
}

func (a *IoTStub) UpdateCACertificate(ctx workflow.Context, input *iot.UpdateCACertificateInput) (*iot.UpdateCACertificateOutput, error) {
	var output iot.UpdateCACertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateCACertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateCACertificateAsync(ctx workflow.Context, input *iot.UpdateCACertificateInput) *IotUpdateCACertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateCACertificate", input)
	return &IotUpdateCACertificateFuture{Future: future}
}

func (a *IoTStub) UpdateCertificate(ctx workflow.Context, input *iot.UpdateCertificateInput) (*iot.UpdateCertificateOutput, error) {
	var output iot.UpdateCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateCertificateAsync(ctx workflow.Context, input *iot.UpdateCertificateInput) *IotUpdateCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateCertificate", input)
	return &IotUpdateCertificateFuture{Future: future}
}

func (a *IoTStub) UpdateDimension(ctx workflow.Context, input *iot.UpdateDimensionInput) (*iot.UpdateDimensionOutput, error) {
	var output iot.UpdateDimensionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateDimension", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateDimensionAsync(ctx workflow.Context, input *iot.UpdateDimensionInput) *IotUpdateDimensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateDimension", input)
	return &IotUpdateDimensionFuture{Future: future}
}

func (a *IoTStub) UpdateDomainConfiguration(ctx workflow.Context, input *iot.UpdateDomainConfigurationInput) (*iot.UpdateDomainConfigurationOutput, error) {
	var output iot.UpdateDomainConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateDomainConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateDomainConfigurationAsync(ctx workflow.Context, input *iot.UpdateDomainConfigurationInput) *IotUpdateDomainConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateDomainConfiguration", input)
	return &IotUpdateDomainConfigurationFuture{Future: future}
}

func (a *IoTStub) UpdateDynamicThingGroup(ctx workflow.Context, input *iot.UpdateDynamicThingGroupInput) (*iot.UpdateDynamicThingGroupOutput, error) {
	var output iot.UpdateDynamicThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateDynamicThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateDynamicThingGroupAsync(ctx workflow.Context, input *iot.UpdateDynamicThingGroupInput) *IotUpdateDynamicThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateDynamicThingGroup", input)
	return &IotUpdateDynamicThingGroupFuture{Future: future}
}

func (a *IoTStub) UpdateEventConfigurations(ctx workflow.Context, input *iot.UpdateEventConfigurationsInput) (*iot.UpdateEventConfigurationsOutput, error) {
	var output iot.UpdateEventConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateEventConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateEventConfigurationsAsync(ctx workflow.Context, input *iot.UpdateEventConfigurationsInput) *IotUpdateEventConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateEventConfigurations", input)
	return &IotUpdateEventConfigurationsFuture{Future: future}
}

func (a *IoTStub) UpdateIndexingConfiguration(ctx workflow.Context, input *iot.UpdateIndexingConfigurationInput) (*iot.UpdateIndexingConfigurationOutput, error) {
	var output iot.UpdateIndexingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateIndexingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateIndexingConfigurationAsync(ctx workflow.Context, input *iot.UpdateIndexingConfigurationInput) *IotUpdateIndexingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateIndexingConfiguration", input)
	return &IotUpdateIndexingConfigurationFuture{Future: future}
}

func (a *IoTStub) UpdateJob(ctx workflow.Context, input *iot.UpdateJobInput) (*iot.UpdateJobOutput, error) {
	var output iot.UpdateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateJobAsync(ctx workflow.Context, input *iot.UpdateJobInput) *IotUpdateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateJob", input)
	return &IotUpdateJobFuture{Future: future}
}

func (a *IoTStub) UpdateMitigationAction(ctx workflow.Context, input *iot.UpdateMitigationActionInput) (*iot.UpdateMitigationActionOutput, error) {
	var output iot.UpdateMitigationActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateMitigationAction", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateMitigationActionAsync(ctx workflow.Context, input *iot.UpdateMitigationActionInput) *IotUpdateMitigationActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateMitigationAction", input)
	return &IotUpdateMitigationActionFuture{Future: future}
}

func (a *IoTStub) UpdateProvisioningTemplate(ctx workflow.Context, input *iot.UpdateProvisioningTemplateInput) (*iot.UpdateProvisioningTemplateOutput, error) {
	var output iot.UpdateProvisioningTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateProvisioningTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateProvisioningTemplateAsync(ctx workflow.Context, input *iot.UpdateProvisioningTemplateInput) *IotUpdateProvisioningTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateProvisioningTemplate", input)
	return &IotUpdateProvisioningTemplateFuture{Future: future}
}

func (a *IoTStub) UpdateRoleAlias(ctx workflow.Context, input *iot.UpdateRoleAliasInput) (*iot.UpdateRoleAliasOutput, error) {
	var output iot.UpdateRoleAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateRoleAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateRoleAliasAsync(ctx workflow.Context, input *iot.UpdateRoleAliasInput) *IotUpdateRoleAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateRoleAlias", input)
	return &IotUpdateRoleAliasFuture{Future: future}
}

func (a *IoTStub) UpdateScheduledAudit(ctx workflow.Context, input *iot.UpdateScheduledAuditInput) (*iot.UpdateScheduledAuditOutput, error) {
	var output iot.UpdateScheduledAuditOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateScheduledAudit", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateScheduledAuditAsync(ctx workflow.Context, input *iot.UpdateScheduledAuditInput) *IotUpdateScheduledAuditFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateScheduledAudit", input)
	return &IotUpdateScheduledAuditFuture{Future: future}
}

func (a *IoTStub) UpdateSecurityProfile(ctx workflow.Context, input *iot.UpdateSecurityProfileInput) (*iot.UpdateSecurityProfileOutput, error) {
	var output iot.UpdateSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateSecurityProfileAsync(ctx workflow.Context, input *iot.UpdateSecurityProfileInput) *IotUpdateSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateSecurityProfile", input)
	return &IotUpdateSecurityProfileFuture{Future: future}
}

func (a *IoTStub) UpdateStream(ctx workflow.Context, input *iot.UpdateStreamInput) (*iot.UpdateStreamOutput, error) {
	var output iot.UpdateStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateStream", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateStreamAsync(ctx workflow.Context, input *iot.UpdateStreamInput) *IotUpdateStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateStream", input)
	return &IotUpdateStreamFuture{Future: future}
}

func (a *IoTStub) UpdateThing(ctx workflow.Context, input *iot.UpdateThingInput) (*iot.UpdateThingOutput, error) {
	var output iot.UpdateThingOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateThing", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateThingAsync(ctx workflow.Context, input *iot.UpdateThingInput) *IotUpdateThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateThing", input)
	return &IotUpdateThingFuture{Future: future}
}

func (a *IoTStub) UpdateThingGroup(ctx workflow.Context, input *iot.UpdateThingGroupInput) (*iot.UpdateThingGroupOutput, error) {
	var output iot.UpdateThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateThingGroupAsync(ctx workflow.Context, input *iot.UpdateThingGroupInput) *IotUpdateThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateThingGroup", input)
	return &IotUpdateThingGroupFuture{Future: future}
}

func (a *IoTStub) UpdateThingGroupsForThing(ctx workflow.Context, input *iot.UpdateThingGroupsForThingInput) (*iot.UpdateThingGroupsForThingOutput, error) {
	var output iot.UpdateThingGroupsForThingOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateThingGroupsForThing", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateThingGroupsForThingAsync(ctx workflow.Context, input *iot.UpdateThingGroupsForThingInput) *IotUpdateThingGroupsForThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateThingGroupsForThing", input)
	return &IotUpdateThingGroupsForThingFuture{Future: future}
}

func (a *IoTStub) UpdateTopicRuleDestination(ctx workflow.Context, input *iot.UpdateTopicRuleDestinationInput) (*iot.UpdateTopicRuleDestinationOutput, error) {
	var output iot.UpdateTopicRuleDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.UpdateTopicRuleDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) UpdateTopicRuleDestinationAsync(ctx workflow.Context, input *iot.UpdateTopicRuleDestinationInput) *IotUpdateTopicRuleDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.UpdateTopicRuleDestination", input)
	return &IotUpdateTopicRuleDestinationFuture{Future: future}
}

func (a *IoTStub) ValidateSecurityProfileBehaviors(ctx workflow.Context, input *iot.ValidateSecurityProfileBehaviorsInput) (*iot.ValidateSecurityProfileBehaviorsOutput, error) {
	var output iot.ValidateSecurityProfileBehaviorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iot.ValidateSecurityProfileBehaviors", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTStub) ValidateSecurityProfileBehaviorsAsync(ctx workflow.Context, input *iot.ValidateSecurityProfileBehaviorsInput) *IotValidateSecurityProfileBehaviorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iot.ValidateSecurityProfileBehaviors", input)
	return &IotValidateSecurityProfileBehaviorsFuture{Future: future}
}
