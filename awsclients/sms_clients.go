// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/sms"
	"go.temporal.io/sdk/workflow"
)

type SMSClient interface {
	CreateApp(ctx workflow.Context, input *sms.CreateAppInput) (*sms.CreateAppOutput, error)
	CreateAppAsync(ctx workflow.Context, input *sms.CreateAppInput) *SmsCreateAppFuture

	CreateReplicationJob(ctx workflow.Context, input *sms.CreateReplicationJobInput) (*sms.CreateReplicationJobOutput, error)
	CreateReplicationJobAsync(ctx workflow.Context, input *sms.CreateReplicationJobInput) *SmsCreateReplicationJobFuture

	DeleteApp(ctx workflow.Context, input *sms.DeleteAppInput) (*sms.DeleteAppOutput, error)
	DeleteAppAsync(ctx workflow.Context, input *sms.DeleteAppInput) *SmsDeleteAppFuture

	DeleteAppLaunchConfiguration(ctx workflow.Context, input *sms.DeleteAppLaunchConfigurationInput) (*sms.DeleteAppLaunchConfigurationOutput, error)
	DeleteAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppLaunchConfigurationInput) *SmsDeleteAppLaunchConfigurationFuture

	DeleteAppReplicationConfiguration(ctx workflow.Context, input *sms.DeleteAppReplicationConfigurationInput) (*sms.DeleteAppReplicationConfigurationOutput, error)
	DeleteAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppReplicationConfigurationInput) *SmsDeleteAppReplicationConfigurationFuture

	DeleteAppValidationConfiguration(ctx workflow.Context, input *sms.DeleteAppValidationConfigurationInput) (*sms.DeleteAppValidationConfigurationOutput, error)
	DeleteAppValidationConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppValidationConfigurationInput) *SmsDeleteAppValidationConfigurationFuture

	DeleteReplicationJob(ctx workflow.Context, input *sms.DeleteReplicationJobInput) (*sms.DeleteReplicationJobOutput, error)
	DeleteReplicationJobAsync(ctx workflow.Context, input *sms.DeleteReplicationJobInput) *SmsDeleteReplicationJobFuture

	DeleteServerCatalog(ctx workflow.Context, input *sms.DeleteServerCatalogInput) (*sms.DeleteServerCatalogOutput, error)
	DeleteServerCatalogAsync(ctx workflow.Context, input *sms.DeleteServerCatalogInput) *SmsDeleteServerCatalogFuture

	DisassociateConnector(ctx workflow.Context, input *sms.DisassociateConnectorInput) (*sms.DisassociateConnectorOutput, error)
	DisassociateConnectorAsync(ctx workflow.Context, input *sms.DisassociateConnectorInput) *SmsDisassociateConnectorFuture

	GenerateChangeSet(ctx workflow.Context, input *sms.GenerateChangeSetInput) (*sms.GenerateChangeSetOutput, error)
	GenerateChangeSetAsync(ctx workflow.Context, input *sms.GenerateChangeSetInput) *SmsGenerateChangeSetFuture

	GenerateTemplate(ctx workflow.Context, input *sms.GenerateTemplateInput) (*sms.GenerateTemplateOutput, error)
	GenerateTemplateAsync(ctx workflow.Context, input *sms.GenerateTemplateInput) *SmsGenerateTemplateFuture

	GetApp(ctx workflow.Context, input *sms.GetAppInput) (*sms.GetAppOutput, error)
	GetAppAsync(ctx workflow.Context, input *sms.GetAppInput) *SmsGetAppFuture

	GetAppLaunchConfiguration(ctx workflow.Context, input *sms.GetAppLaunchConfigurationInput) (*sms.GetAppLaunchConfigurationOutput, error)
	GetAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.GetAppLaunchConfigurationInput) *SmsGetAppLaunchConfigurationFuture

	GetAppReplicationConfiguration(ctx workflow.Context, input *sms.GetAppReplicationConfigurationInput) (*sms.GetAppReplicationConfigurationOutput, error)
	GetAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.GetAppReplicationConfigurationInput) *SmsGetAppReplicationConfigurationFuture

	GetAppValidationConfiguration(ctx workflow.Context, input *sms.GetAppValidationConfigurationInput) (*sms.GetAppValidationConfigurationOutput, error)
	GetAppValidationConfigurationAsync(ctx workflow.Context, input *sms.GetAppValidationConfigurationInput) *SmsGetAppValidationConfigurationFuture

	GetAppValidationOutput(ctx workflow.Context, input *sms.GetAppValidationOutputInput) (*sms.GetAppValidationOutputOutput, error)
	GetAppValidationOutputAsync(ctx workflow.Context, input *sms.GetAppValidationOutputInput) *SmsGetAppValidationOutputFuture

	GetConnectors(ctx workflow.Context, input *sms.GetConnectorsInput) (*sms.GetConnectorsOutput, error)
	GetConnectorsAsync(ctx workflow.Context, input *sms.GetConnectorsInput) *SmsGetConnectorsFuture

	GetReplicationJobs(ctx workflow.Context, input *sms.GetReplicationJobsInput) (*sms.GetReplicationJobsOutput, error)
	GetReplicationJobsAsync(ctx workflow.Context, input *sms.GetReplicationJobsInput) *SmsGetReplicationJobsFuture

	GetReplicationRuns(ctx workflow.Context, input *sms.GetReplicationRunsInput) (*sms.GetReplicationRunsOutput, error)
	GetReplicationRunsAsync(ctx workflow.Context, input *sms.GetReplicationRunsInput) *SmsGetReplicationRunsFuture

	GetServers(ctx workflow.Context, input *sms.GetServersInput) (*sms.GetServersOutput, error)
	GetServersAsync(ctx workflow.Context, input *sms.GetServersInput) *SmsGetServersFuture

	ImportAppCatalog(ctx workflow.Context, input *sms.ImportAppCatalogInput) (*sms.ImportAppCatalogOutput, error)
	ImportAppCatalogAsync(ctx workflow.Context, input *sms.ImportAppCatalogInput) *SmsImportAppCatalogFuture

	ImportServerCatalog(ctx workflow.Context, input *sms.ImportServerCatalogInput) (*sms.ImportServerCatalogOutput, error)
	ImportServerCatalogAsync(ctx workflow.Context, input *sms.ImportServerCatalogInput) *SmsImportServerCatalogFuture

	LaunchApp(ctx workflow.Context, input *sms.LaunchAppInput) (*sms.LaunchAppOutput, error)
	LaunchAppAsync(ctx workflow.Context, input *sms.LaunchAppInput) *SmsLaunchAppFuture

	ListApps(ctx workflow.Context, input *sms.ListAppsInput) (*sms.ListAppsOutput, error)
	ListAppsAsync(ctx workflow.Context, input *sms.ListAppsInput) *SmsListAppsFuture

	NotifyAppValidationOutput(ctx workflow.Context, input *sms.NotifyAppValidationOutputInput) (*sms.NotifyAppValidationOutputOutput, error)
	NotifyAppValidationOutputAsync(ctx workflow.Context, input *sms.NotifyAppValidationOutputInput) *SmsNotifyAppValidationOutputFuture

	PutAppLaunchConfiguration(ctx workflow.Context, input *sms.PutAppLaunchConfigurationInput) (*sms.PutAppLaunchConfigurationOutput, error)
	PutAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.PutAppLaunchConfigurationInput) *SmsPutAppLaunchConfigurationFuture

	PutAppReplicationConfiguration(ctx workflow.Context, input *sms.PutAppReplicationConfigurationInput) (*sms.PutAppReplicationConfigurationOutput, error)
	PutAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.PutAppReplicationConfigurationInput) *SmsPutAppReplicationConfigurationFuture

	PutAppValidationConfiguration(ctx workflow.Context, input *sms.PutAppValidationConfigurationInput) (*sms.PutAppValidationConfigurationOutput, error)
	PutAppValidationConfigurationAsync(ctx workflow.Context, input *sms.PutAppValidationConfigurationInput) *SmsPutAppValidationConfigurationFuture

	StartAppReplication(ctx workflow.Context, input *sms.StartAppReplicationInput) (*sms.StartAppReplicationOutput, error)
	StartAppReplicationAsync(ctx workflow.Context, input *sms.StartAppReplicationInput) *SmsStartAppReplicationFuture

	StartOnDemandAppReplication(ctx workflow.Context, input *sms.StartOnDemandAppReplicationInput) (*sms.StartOnDemandAppReplicationOutput, error)
	StartOnDemandAppReplicationAsync(ctx workflow.Context, input *sms.StartOnDemandAppReplicationInput) *SmsStartOnDemandAppReplicationFuture

	StartOnDemandReplicationRun(ctx workflow.Context, input *sms.StartOnDemandReplicationRunInput) (*sms.StartOnDemandReplicationRunOutput, error)
	StartOnDemandReplicationRunAsync(ctx workflow.Context, input *sms.StartOnDemandReplicationRunInput) *SmsStartOnDemandReplicationRunFuture

	StopAppReplication(ctx workflow.Context, input *sms.StopAppReplicationInput) (*sms.StopAppReplicationOutput, error)
	StopAppReplicationAsync(ctx workflow.Context, input *sms.StopAppReplicationInput) *SmsStopAppReplicationFuture

	TerminateApp(ctx workflow.Context, input *sms.TerminateAppInput) (*sms.TerminateAppOutput, error)
	TerminateAppAsync(ctx workflow.Context, input *sms.TerminateAppInput) *SmsTerminateAppFuture

	UpdateApp(ctx workflow.Context, input *sms.UpdateAppInput) (*sms.UpdateAppOutput, error)
	UpdateAppAsync(ctx workflow.Context, input *sms.UpdateAppInput) *SmsUpdateAppFuture

	UpdateReplicationJob(ctx workflow.Context, input *sms.UpdateReplicationJobInput) (*sms.UpdateReplicationJobOutput, error)
	UpdateReplicationJobAsync(ctx workflow.Context, input *sms.UpdateReplicationJobInput) *SmsUpdateReplicationJobFuture
}

type SMSStub struct{}

func NewSMSStub() SMSClient {
	return &SMSStub{}
}

type SmsCreateAppFuture struct {
	Future workflow.Future
}

func (r *SmsCreateAppFuture) Get(ctx workflow.Context) (*sms.CreateAppOutput, error) {
	var output sms.CreateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsCreateReplicationJobFuture struct {
	Future workflow.Future
}

func (r *SmsCreateReplicationJobFuture) Get(ctx workflow.Context) (*sms.CreateReplicationJobOutput, error) {
	var output sms.CreateReplicationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsDeleteAppFuture struct {
	Future workflow.Future
}

func (r *SmsDeleteAppFuture) Get(ctx workflow.Context) (*sms.DeleteAppOutput, error) {
	var output sms.DeleteAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsDeleteAppLaunchConfigurationFuture struct {
	Future workflow.Future
}

func (r *SmsDeleteAppLaunchConfigurationFuture) Get(ctx workflow.Context) (*sms.DeleteAppLaunchConfigurationOutput, error) {
	var output sms.DeleteAppLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsDeleteAppReplicationConfigurationFuture struct {
	Future workflow.Future
}

func (r *SmsDeleteAppReplicationConfigurationFuture) Get(ctx workflow.Context) (*sms.DeleteAppReplicationConfigurationOutput, error) {
	var output sms.DeleteAppReplicationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsDeleteAppValidationConfigurationFuture struct {
	Future workflow.Future
}

func (r *SmsDeleteAppValidationConfigurationFuture) Get(ctx workflow.Context) (*sms.DeleteAppValidationConfigurationOutput, error) {
	var output sms.DeleteAppValidationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsDeleteReplicationJobFuture struct {
	Future workflow.Future
}

func (r *SmsDeleteReplicationJobFuture) Get(ctx workflow.Context) (*sms.DeleteReplicationJobOutput, error) {
	var output sms.DeleteReplicationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsDeleteServerCatalogFuture struct {
	Future workflow.Future
}

func (r *SmsDeleteServerCatalogFuture) Get(ctx workflow.Context) (*sms.DeleteServerCatalogOutput, error) {
	var output sms.DeleteServerCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsDisassociateConnectorFuture struct {
	Future workflow.Future
}

func (r *SmsDisassociateConnectorFuture) Get(ctx workflow.Context) (*sms.DisassociateConnectorOutput, error) {
	var output sms.DisassociateConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsGenerateChangeSetFuture struct {
	Future workflow.Future
}

func (r *SmsGenerateChangeSetFuture) Get(ctx workflow.Context) (*sms.GenerateChangeSetOutput, error) {
	var output sms.GenerateChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsGenerateTemplateFuture struct {
	Future workflow.Future
}

func (r *SmsGenerateTemplateFuture) Get(ctx workflow.Context) (*sms.GenerateTemplateOutput, error) {
	var output sms.GenerateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsGetAppFuture struct {
	Future workflow.Future
}

func (r *SmsGetAppFuture) Get(ctx workflow.Context) (*sms.GetAppOutput, error) {
	var output sms.GetAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsGetAppLaunchConfigurationFuture struct {
	Future workflow.Future
}

func (r *SmsGetAppLaunchConfigurationFuture) Get(ctx workflow.Context) (*sms.GetAppLaunchConfigurationOutput, error) {
	var output sms.GetAppLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsGetAppReplicationConfigurationFuture struct {
	Future workflow.Future
}

func (r *SmsGetAppReplicationConfigurationFuture) Get(ctx workflow.Context) (*sms.GetAppReplicationConfigurationOutput, error) {
	var output sms.GetAppReplicationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsGetAppValidationConfigurationFuture struct {
	Future workflow.Future
}

func (r *SmsGetAppValidationConfigurationFuture) Get(ctx workflow.Context) (*sms.GetAppValidationConfigurationOutput, error) {
	var output sms.GetAppValidationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsGetAppValidationOutputFuture struct {
	Future workflow.Future
}

func (r *SmsGetAppValidationOutputFuture) Get(ctx workflow.Context) (*sms.GetAppValidationOutputOutput, error) {
	var output sms.GetAppValidationOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsGetConnectorsFuture struct {
	Future workflow.Future
}

func (r *SmsGetConnectorsFuture) Get(ctx workflow.Context) (*sms.GetConnectorsOutput, error) {
	var output sms.GetConnectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsGetReplicationJobsFuture struct {
	Future workflow.Future
}

func (r *SmsGetReplicationJobsFuture) Get(ctx workflow.Context) (*sms.GetReplicationJobsOutput, error) {
	var output sms.GetReplicationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsGetReplicationRunsFuture struct {
	Future workflow.Future
}

func (r *SmsGetReplicationRunsFuture) Get(ctx workflow.Context) (*sms.GetReplicationRunsOutput, error) {
	var output sms.GetReplicationRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsGetServersFuture struct {
	Future workflow.Future
}

func (r *SmsGetServersFuture) Get(ctx workflow.Context) (*sms.GetServersOutput, error) {
	var output sms.GetServersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsImportAppCatalogFuture struct {
	Future workflow.Future
}

func (r *SmsImportAppCatalogFuture) Get(ctx workflow.Context) (*sms.ImportAppCatalogOutput, error) {
	var output sms.ImportAppCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsImportServerCatalogFuture struct {
	Future workflow.Future
}

func (r *SmsImportServerCatalogFuture) Get(ctx workflow.Context) (*sms.ImportServerCatalogOutput, error) {
	var output sms.ImportServerCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsLaunchAppFuture struct {
	Future workflow.Future
}

func (r *SmsLaunchAppFuture) Get(ctx workflow.Context) (*sms.LaunchAppOutput, error) {
	var output sms.LaunchAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsListAppsFuture struct {
	Future workflow.Future
}

func (r *SmsListAppsFuture) Get(ctx workflow.Context) (*sms.ListAppsOutput, error) {
	var output sms.ListAppsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsNotifyAppValidationOutputFuture struct {
	Future workflow.Future
}

func (r *SmsNotifyAppValidationOutputFuture) Get(ctx workflow.Context) (*sms.NotifyAppValidationOutputOutput, error) {
	var output sms.NotifyAppValidationOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsPutAppLaunchConfigurationFuture struct {
	Future workflow.Future
}

func (r *SmsPutAppLaunchConfigurationFuture) Get(ctx workflow.Context) (*sms.PutAppLaunchConfigurationOutput, error) {
	var output sms.PutAppLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsPutAppReplicationConfigurationFuture struct {
	Future workflow.Future
}

func (r *SmsPutAppReplicationConfigurationFuture) Get(ctx workflow.Context) (*sms.PutAppReplicationConfigurationOutput, error) {
	var output sms.PutAppReplicationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsPutAppValidationConfigurationFuture struct {
	Future workflow.Future
}

func (r *SmsPutAppValidationConfigurationFuture) Get(ctx workflow.Context) (*sms.PutAppValidationConfigurationOutput, error) {
	var output sms.PutAppValidationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsStartAppReplicationFuture struct {
	Future workflow.Future
}

func (r *SmsStartAppReplicationFuture) Get(ctx workflow.Context) (*sms.StartAppReplicationOutput, error) {
	var output sms.StartAppReplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsStartOnDemandAppReplicationFuture struct {
	Future workflow.Future
}

func (r *SmsStartOnDemandAppReplicationFuture) Get(ctx workflow.Context) (*sms.StartOnDemandAppReplicationOutput, error) {
	var output sms.StartOnDemandAppReplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsStartOnDemandReplicationRunFuture struct {
	Future workflow.Future
}

func (r *SmsStartOnDemandReplicationRunFuture) Get(ctx workflow.Context) (*sms.StartOnDemandReplicationRunOutput, error) {
	var output sms.StartOnDemandReplicationRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsStopAppReplicationFuture struct {
	Future workflow.Future
}

func (r *SmsStopAppReplicationFuture) Get(ctx workflow.Context) (*sms.StopAppReplicationOutput, error) {
	var output sms.StopAppReplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsTerminateAppFuture struct {
	Future workflow.Future
}

func (r *SmsTerminateAppFuture) Get(ctx workflow.Context) (*sms.TerminateAppOutput, error) {
	var output sms.TerminateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsUpdateAppFuture struct {
	Future workflow.Future
}

func (r *SmsUpdateAppFuture) Get(ctx workflow.Context) (*sms.UpdateAppOutput, error) {
	var output sms.UpdateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SmsUpdateReplicationJobFuture struct {
	Future workflow.Future
}

func (r *SmsUpdateReplicationJobFuture) Get(ctx workflow.Context) (*sms.UpdateReplicationJobOutput, error) {
	var output sms.UpdateReplicationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) CreateApp(ctx workflow.Context, input *sms.CreateAppInput) (*sms.CreateAppOutput, error) {
	var output sms.CreateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.CreateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) CreateAppAsync(ctx workflow.Context, input *sms.CreateAppInput) *SmsCreateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.CreateApp", input)
	return &SmsCreateAppFuture{Future: future}
}

func (a *SMSStub) CreateReplicationJob(ctx workflow.Context, input *sms.CreateReplicationJobInput) (*sms.CreateReplicationJobOutput, error) {
	var output sms.CreateReplicationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.CreateReplicationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) CreateReplicationJobAsync(ctx workflow.Context, input *sms.CreateReplicationJobInput) *SmsCreateReplicationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.CreateReplicationJob", input)
	return &SmsCreateReplicationJobFuture{Future: future}
}

func (a *SMSStub) DeleteApp(ctx workflow.Context, input *sms.DeleteAppInput) (*sms.DeleteAppOutput, error) {
	var output sms.DeleteAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DeleteApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DeleteAppAsync(ctx workflow.Context, input *sms.DeleteAppInput) *SmsDeleteAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DeleteApp", input)
	return &SmsDeleteAppFuture{Future: future}
}

func (a *SMSStub) DeleteAppLaunchConfiguration(ctx workflow.Context, input *sms.DeleteAppLaunchConfigurationInput) (*sms.DeleteAppLaunchConfigurationOutput, error) {
	var output sms.DeleteAppLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DeleteAppLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DeleteAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppLaunchConfigurationInput) *SmsDeleteAppLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DeleteAppLaunchConfiguration", input)
	return &SmsDeleteAppLaunchConfigurationFuture{Future: future}
}

func (a *SMSStub) DeleteAppReplicationConfiguration(ctx workflow.Context, input *sms.DeleteAppReplicationConfigurationInput) (*sms.DeleteAppReplicationConfigurationOutput, error) {
	var output sms.DeleteAppReplicationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DeleteAppReplicationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DeleteAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppReplicationConfigurationInput) *SmsDeleteAppReplicationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DeleteAppReplicationConfiguration", input)
	return &SmsDeleteAppReplicationConfigurationFuture{Future: future}
}

func (a *SMSStub) DeleteAppValidationConfiguration(ctx workflow.Context, input *sms.DeleteAppValidationConfigurationInput) (*sms.DeleteAppValidationConfigurationOutput, error) {
	var output sms.DeleteAppValidationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DeleteAppValidationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DeleteAppValidationConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppValidationConfigurationInput) *SmsDeleteAppValidationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DeleteAppValidationConfiguration", input)
	return &SmsDeleteAppValidationConfigurationFuture{Future: future}
}

func (a *SMSStub) DeleteReplicationJob(ctx workflow.Context, input *sms.DeleteReplicationJobInput) (*sms.DeleteReplicationJobOutput, error) {
	var output sms.DeleteReplicationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DeleteReplicationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DeleteReplicationJobAsync(ctx workflow.Context, input *sms.DeleteReplicationJobInput) *SmsDeleteReplicationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DeleteReplicationJob", input)
	return &SmsDeleteReplicationJobFuture{Future: future}
}

func (a *SMSStub) DeleteServerCatalog(ctx workflow.Context, input *sms.DeleteServerCatalogInput) (*sms.DeleteServerCatalogOutput, error) {
	var output sms.DeleteServerCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DeleteServerCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DeleteServerCatalogAsync(ctx workflow.Context, input *sms.DeleteServerCatalogInput) *SmsDeleteServerCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DeleteServerCatalog", input)
	return &SmsDeleteServerCatalogFuture{Future: future}
}

func (a *SMSStub) DisassociateConnector(ctx workflow.Context, input *sms.DisassociateConnectorInput) (*sms.DisassociateConnectorOutput, error) {
	var output sms.DisassociateConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DisassociateConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DisassociateConnectorAsync(ctx workflow.Context, input *sms.DisassociateConnectorInput) *SmsDisassociateConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DisassociateConnector", input)
	return &SmsDisassociateConnectorFuture{Future: future}
}

func (a *SMSStub) GenerateChangeSet(ctx workflow.Context, input *sms.GenerateChangeSetInput) (*sms.GenerateChangeSetOutput, error) {
	var output sms.GenerateChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GenerateChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GenerateChangeSetAsync(ctx workflow.Context, input *sms.GenerateChangeSetInput) *SmsGenerateChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GenerateChangeSet", input)
	return &SmsGenerateChangeSetFuture{Future: future}
}

func (a *SMSStub) GenerateTemplate(ctx workflow.Context, input *sms.GenerateTemplateInput) (*sms.GenerateTemplateOutput, error) {
	var output sms.GenerateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GenerateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GenerateTemplateAsync(ctx workflow.Context, input *sms.GenerateTemplateInput) *SmsGenerateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GenerateTemplate", input)
	return &SmsGenerateTemplateFuture{Future: future}
}

func (a *SMSStub) GetApp(ctx workflow.Context, input *sms.GetAppInput) (*sms.GetAppOutput, error) {
	var output sms.GetAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetAppAsync(ctx workflow.Context, input *sms.GetAppInput) *SmsGetAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetApp", input)
	return &SmsGetAppFuture{Future: future}
}

func (a *SMSStub) GetAppLaunchConfiguration(ctx workflow.Context, input *sms.GetAppLaunchConfigurationInput) (*sms.GetAppLaunchConfigurationOutput, error) {
	var output sms.GetAppLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetAppLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.GetAppLaunchConfigurationInput) *SmsGetAppLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetAppLaunchConfiguration", input)
	return &SmsGetAppLaunchConfigurationFuture{Future: future}
}

func (a *SMSStub) GetAppReplicationConfiguration(ctx workflow.Context, input *sms.GetAppReplicationConfigurationInput) (*sms.GetAppReplicationConfigurationOutput, error) {
	var output sms.GetAppReplicationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetAppReplicationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.GetAppReplicationConfigurationInput) *SmsGetAppReplicationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetAppReplicationConfiguration", input)
	return &SmsGetAppReplicationConfigurationFuture{Future: future}
}

func (a *SMSStub) GetAppValidationConfiguration(ctx workflow.Context, input *sms.GetAppValidationConfigurationInput) (*sms.GetAppValidationConfigurationOutput, error) {
	var output sms.GetAppValidationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetAppValidationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetAppValidationConfigurationAsync(ctx workflow.Context, input *sms.GetAppValidationConfigurationInput) *SmsGetAppValidationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetAppValidationConfiguration", input)
	return &SmsGetAppValidationConfigurationFuture{Future: future}
}

func (a *SMSStub) GetAppValidationOutput(ctx workflow.Context, input *sms.GetAppValidationOutputInput) (*sms.GetAppValidationOutputOutput, error) {
	var output sms.GetAppValidationOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetAppValidationOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetAppValidationOutputAsync(ctx workflow.Context, input *sms.GetAppValidationOutputInput) *SmsGetAppValidationOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetAppValidationOutput", input)
	return &SmsGetAppValidationOutputFuture{Future: future}
}

func (a *SMSStub) GetConnectors(ctx workflow.Context, input *sms.GetConnectorsInput) (*sms.GetConnectorsOutput, error) {
	var output sms.GetConnectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetConnectors", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetConnectorsAsync(ctx workflow.Context, input *sms.GetConnectorsInput) *SmsGetConnectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetConnectors", input)
	return &SmsGetConnectorsFuture{Future: future}
}

func (a *SMSStub) GetReplicationJobs(ctx workflow.Context, input *sms.GetReplicationJobsInput) (*sms.GetReplicationJobsOutput, error) {
	var output sms.GetReplicationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetReplicationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetReplicationJobsAsync(ctx workflow.Context, input *sms.GetReplicationJobsInput) *SmsGetReplicationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetReplicationJobs", input)
	return &SmsGetReplicationJobsFuture{Future: future}
}

func (a *SMSStub) GetReplicationRuns(ctx workflow.Context, input *sms.GetReplicationRunsInput) (*sms.GetReplicationRunsOutput, error) {
	var output sms.GetReplicationRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetReplicationRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetReplicationRunsAsync(ctx workflow.Context, input *sms.GetReplicationRunsInput) *SmsGetReplicationRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetReplicationRuns", input)
	return &SmsGetReplicationRunsFuture{Future: future}
}

func (a *SMSStub) GetServers(ctx workflow.Context, input *sms.GetServersInput) (*sms.GetServersOutput, error) {
	var output sms.GetServersOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetServers", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetServersAsync(ctx workflow.Context, input *sms.GetServersInput) *SmsGetServersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetServers", input)
	return &SmsGetServersFuture{Future: future}
}

func (a *SMSStub) ImportAppCatalog(ctx workflow.Context, input *sms.ImportAppCatalogInput) (*sms.ImportAppCatalogOutput, error) {
	var output sms.ImportAppCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.ImportAppCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) ImportAppCatalogAsync(ctx workflow.Context, input *sms.ImportAppCatalogInput) *SmsImportAppCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.ImportAppCatalog", input)
	return &SmsImportAppCatalogFuture{Future: future}
}

func (a *SMSStub) ImportServerCatalog(ctx workflow.Context, input *sms.ImportServerCatalogInput) (*sms.ImportServerCatalogOutput, error) {
	var output sms.ImportServerCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.ImportServerCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) ImportServerCatalogAsync(ctx workflow.Context, input *sms.ImportServerCatalogInput) *SmsImportServerCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.ImportServerCatalog", input)
	return &SmsImportServerCatalogFuture{Future: future}
}

func (a *SMSStub) LaunchApp(ctx workflow.Context, input *sms.LaunchAppInput) (*sms.LaunchAppOutput, error) {
	var output sms.LaunchAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.LaunchApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) LaunchAppAsync(ctx workflow.Context, input *sms.LaunchAppInput) *SmsLaunchAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.LaunchApp", input)
	return &SmsLaunchAppFuture{Future: future}
}

func (a *SMSStub) ListApps(ctx workflow.Context, input *sms.ListAppsInput) (*sms.ListAppsOutput, error) {
	var output sms.ListAppsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.ListApps", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) ListAppsAsync(ctx workflow.Context, input *sms.ListAppsInput) *SmsListAppsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.ListApps", input)
	return &SmsListAppsFuture{Future: future}
}

func (a *SMSStub) NotifyAppValidationOutput(ctx workflow.Context, input *sms.NotifyAppValidationOutputInput) (*sms.NotifyAppValidationOutputOutput, error) {
	var output sms.NotifyAppValidationOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.NotifyAppValidationOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) NotifyAppValidationOutputAsync(ctx workflow.Context, input *sms.NotifyAppValidationOutputInput) *SmsNotifyAppValidationOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.NotifyAppValidationOutput", input)
	return &SmsNotifyAppValidationOutputFuture{Future: future}
}

func (a *SMSStub) PutAppLaunchConfiguration(ctx workflow.Context, input *sms.PutAppLaunchConfigurationInput) (*sms.PutAppLaunchConfigurationOutput, error) {
	var output sms.PutAppLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.PutAppLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) PutAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.PutAppLaunchConfigurationInput) *SmsPutAppLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.PutAppLaunchConfiguration", input)
	return &SmsPutAppLaunchConfigurationFuture{Future: future}
}

func (a *SMSStub) PutAppReplicationConfiguration(ctx workflow.Context, input *sms.PutAppReplicationConfigurationInput) (*sms.PutAppReplicationConfigurationOutput, error) {
	var output sms.PutAppReplicationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.PutAppReplicationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) PutAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.PutAppReplicationConfigurationInput) *SmsPutAppReplicationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.PutAppReplicationConfiguration", input)
	return &SmsPutAppReplicationConfigurationFuture{Future: future}
}

func (a *SMSStub) PutAppValidationConfiguration(ctx workflow.Context, input *sms.PutAppValidationConfigurationInput) (*sms.PutAppValidationConfigurationOutput, error) {
	var output sms.PutAppValidationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.PutAppValidationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) PutAppValidationConfigurationAsync(ctx workflow.Context, input *sms.PutAppValidationConfigurationInput) *SmsPutAppValidationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.PutAppValidationConfiguration", input)
	return &SmsPutAppValidationConfigurationFuture{Future: future}
}

func (a *SMSStub) StartAppReplication(ctx workflow.Context, input *sms.StartAppReplicationInput) (*sms.StartAppReplicationOutput, error) {
	var output sms.StartAppReplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.StartAppReplication", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) StartAppReplicationAsync(ctx workflow.Context, input *sms.StartAppReplicationInput) *SmsStartAppReplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.StartAppReplication", input)
	return &SmsStartAppReplicationFuture{Future: future}
}

func (a *SMSStub) StartOnDemandAppReplication(ctx workflow.Context, input *sms.StartOnDemandAppReplicationInput) (*sms.StartOnDemandAppReplicationOutput, error) {
	var output sms.StartOnDemandAppReplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.StartOnDemandAppReplication", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) StartOnDemandAppReplicationAsync(ctx workflow.Context, input *sms.StartOnDemandAppReplicationInput) *SmsStartOnDemandAppReplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.StartOnDemandAppReplication", input)
	return &SmsStartOnDemandAppReplicationFuture{Future: future}
}

func (a *SMSStub) StartOnDemandReplicationRun(ctx workflow.Context, input *sms.StartOnDemandReplicationRunInput) (*sms.StartOnDemandReplicationRunOutput, error) {
	var output sms.StartOnDemandReplicationRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.StartOnDemandReplicationRun", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) StartOnDemandReplicationRunAsync(ctx workflow.Context, input *sms.StartOnDemandReplicationRunInput) *SmsStartOnDemandReplicationRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.StartOnDemandReplicationRun", input)
	return &SmsStartOnDemandReplicationRunFuture{Future: future}
}

func (a *SMSStub) StopAppReplication(ctx workflow.Context, input *sms.StopAppReplicationInput) (*sms.StopAppReplicationOutput, error) {
	var output sms.StopAppReplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.StopAppReplication", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) StopAppReplicationAsync(ctx workflow.Context, input *sms.StopAppReplicationInput) *SmsStopAppReplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.StopAppReplication", input)
	return &SmsStopAppReplicationFuture{Future: future}
}

func (a *SMSStub) TerminateApp(ctx workflow.Context, input *sms.TerminateAppInput) (*sms.TerminateAppOutput, error) {
	var output sms.TerminateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.TerminateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) TerminateAppAsync(ctx workflow.Context, input *sms.TerminateAppInput) *SmsTerminateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.TerminateApp", input)
	return &SmsTerminateAppFuture{Future: future}
}

func (a *SMSStub) UpdateApp(ctx workflow.Context, input *sms.UpdateAppInput) (*sms.UpdateAppOutput, error) {
	var output sms.UpdateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.UpdateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) UpdateAppAsync(ctx workflow.Context, input *sms.UpdateAppInput) *SmsUpdateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.UpdateApp", input)
	return &SmsUpdateAppFuture{Future: future}
}

func (a *SMSStub) UpdateReplicationJob(ctx workflow.Context, input *sms.UpdateReplicationJobInput) (*sms.UpdateReplicationJobOutput, error) {
	var output sms.UpdateReplicationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.UpdateReplicationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) UpdateReplicationJobAsync(ctx workflow.Context, input *sms.UpdateReplicationJobInput) *SmsUpdateReplicationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.UpdateReplicationJob", input)
	return &SmsUpdateReplicationJobFuture{Future: future}
}
