// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/sms"
	"go.temporal.io/sdk/workflow"
)

type SMSClient interface {
	CreateApp(ctx workflow.Context, input *sms.CreateAppInput) (*sms.CreateAppOutput, error)
	CreateAppAsync(ctx workflow.Context, input *sms.CreateAppInput) *SMSCreateAppFuture

	CreateReplicationJob(ctx workflow.Context, input *sms.CreateReplicationJobInput) (*sms.CreateReplicationJobOutput, error)
	CreateReplicationJobAsync(ctx workflow.Context, input *sms.CreateReplicationJobInput) *SMSCreateReplicationJobFuture

	DeleteApp(ctx workflow.Context, input *sms.DeleteAppInput) (*sms.DeleteAppOutput, error)
	DeleteAppAsync(ctx workflow.Context, input *sms.DeleteAppInput) *SMSDeleteAppFuture

	DeleteAppLaunchConfiguration(ctx workflow.Context, input *sms.DeleteAppLaunchConfigurationInput) (*sms.DeleteAppLaunchConfigurationOutput, error)
	DeleteAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppLaunchConfigurationInput) *SMSDeleteAppLaunchConfigurationFuture

	DeleteAppReplicationConfiguration(ctx workflow.Context, input *sms.DeleteAppReplicationConfigurationInput) (*sms.DeleteAppReplicationConfigurationOutput, error)
	DeleteAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppReplicationConfigurationInput) *SMSDeleteAppReplicationConfigurationFuture

	DeleteAppValidationConfiguration(ctx workflow.Context, input *sms.DeleteAppValidationConfigurationInput) (*sms.DeleteAppValidationConfigurationOutput, error)
	DeleteAppValidationConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppValidationConfigurationInput) *SMSDeleteAppValidationConfigurationFuture

	DeleteReplicationJob(ctx workflow.Context, input *sms.DeleteReplicationJobInput) (*sms.DeleteReplicationJobOutput, error)
	DeleteReplicationJobAsync(ctx workflow.Context, input *sms.DeleteReplicationJobInput) *SMSDeleteReplicationJobFuture

	DeleteServerCatalog(ctx workflow.Context, input *sms.DeleteServerCatalogInput) (*sms.DeleteServerCatalogOutput, error)
	DeleteServerCatalogAsync(ctx workflow.Context, input *sms.DeleteServerCatalogInput) *SMSDeleteServerCatalogFuture

	DisassociateConnector(ctx workflow.Context, input *sms.DisassociateConnectorInput) (*sms.DisassociateConnectorOutput, error)
	DisassociateConnectorAsync(ctx workflow.Context, input *sms.DisassociateConnectorInput) *SMSDisassociateConnectorFuture

	GenerateChangeSet(ctx workflow.Context, input *sms.GenerateChangeSetInput) (*sms.GenerateChangeSetOutput, error)
	GenerateChangeSetAsync(ctx workflow.Context, input *sms.GenerateChangeSetInput) *SMSGenerateChangeSetFuture

	GenerateTemplate(ctx workflow.Context, input *sms.GenerateTemplateInput) (*sms.GenerateTemplateOutput, error)
	GenerateTemplateAsync(ctx workflow.Context, input *sms.GenerateTemplateInput) *SMSGenerateTemplateFuture

	GetApp(ctx workflow.Context, input *sms.GetAppInput) (*sms.GetAppOutput, error)
	GetAppAsync(ctx workflow.Context, input *sms.GetAppInput) *SMSGetAppFuture

	GetAppLaunchConfiguration(ctx workflow.Context, input *sms.GetAppLaunchConfigurationInput) (*sms.GetAppLaunchConfigurationOutput, error)
	GetAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.GetAppLaunchConfigurationInput) *SMSGetAppLaunchConfigurationFuture

	GetAppReplicationConfiguration(ctx workflow.Context, input *sms.GetAppReplicationConfigurationInput) (*sms.GetAppReplicationConfigurationOutput, error)
	GetAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.GetAppReplicationConfigurationInput) *SMSGetAppReplicationConfigurationFuture

	GetAppValidationConfiguration(ctx workflow.Context, input *sms.GetAppValidationConfigurationInput) (*sms.GetAppValidationConfigurationOutput, error)
	GetAppValidationConfigurationAsync(ctx workflow.Context, input *sms.GetAppValidationConfigurationInput) *SMSGetAppValidationConfigurationFuture

	GetAppValidationOutput(ctx workflow.Context, input *sms.GetAppValidationOutputInput) (*sms.GetAppValidationOutputOutput, error)
	GetAppValidationOutputAsync(ctx workflow.Context, input *sms.GetAppValidationOutputInput) *SMSGetAppValidationOutputFuture

	GetConnectors(ctx workflow.Context, input *sms.GetConnectorsInput) (*sms.GetConnectorsOutput, error)
	GetConnectorsAsync(ctx workflow.Context, input *sms.GetConnectorsInput) *SMSGetConnectorsFuture

	GetReplicationJobs(ctx workflow.Context, input *sms.GetReplicationJobsInput) (*sms.GetReplicationJobsOutput, error)
	GetReplicationJobsAsync(ctx workflow.Context, input *sms.GetReplicationJobsInput) *SMSGetReplicationJobsFuture

	GetReplicationRuns(ctx workflow.Context, input *sms.GetReplicationRunsInput) (*sms.GetReplicationRunsOutput, error)
	GetReplicationRunsAsync(ctx workflow.Context, input *sms.GetReplicationRunsInput) *SMSGetReplicationRunsFuture

	GetServers(ctx workflow.Context, input *sms.GetServersInput) (*sms.GetServersOutput, error)
	GetServersAsync(ctx workflow.Context, input *sms.GetServersInput) *SMSGetServersFuture

	ImportAppCatalog(ctx workflow.Context, input *sms.ImportAppCatalogInput) (*sms.ImportAppCatalogOutput, error)
	ImportAppCatalogAsync(ctx workflow.Context, input *sms.ImportAppCatalogInput) *SMSImportAppCatalogFuture

	ImportServerCatalog(ctx workflow.Context, input *sms.ImportServerCatalogInput) (*sms.ImportServerCatalogOutput, error)
	ImportServerCatalogAsync(ctx workflow.Context, input *sms.ImportServerCatalogInput) *SMSImportServerCatalogFuture

	LaunchApp(ctx workflow.Context, input *sms.LaunchAppInput) (*sms.LaunchAppOutput, error)
	LaunchAppAsync(ctx workflow.Context, input *sms.LaunchAppInput) *SMSLaunchAppFuture

	ListApps(ctx workflow.Context, input *sms.ListAppsInput) (*sms.ListAppsOutput, error)
	ListAppsAsync(ctx workflow.Context, input *sms.ListAppsInput) *SMSListAppsFuture

	NotifyAppValidationOutput(ctx workflow.Context, input *sms.NotifyAppValidationOutputInput) (*sms.NotifyAppValidationOutputOutput, error)
	NotifyAppValidationOutputAsync(ctx workflow.Context, input *sms.NotifyAppValidationOutputInput) *SMSNotifyAppValidationOutputFuture

	PutAppLaunchConfiguration(ctx workflow.Context, input *sms.PutAppLaunchConfigurationInput) (*sms.PutAppLaunchConfigurationOutput, error)
	PutAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.PutAppLaunchConfigurationInput) *SMSPutAppLaunchConfigurationFuture

	PutAppReplicationConfiguration(ctx workflow.Context, input *sms.PutAppReplicationConfigurationInput) (*sms.PutAppReplicationConfigurationOutput, error)
	PutAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.PutAppReplicationConfigurationInput) *SMSPutAppReplicationConfigurationFuture

	PutAppValidationConfiguration(ctx workflow.Context, input *sms.PutAppValidationConfigurationInput) (*sms.PutAppValidationConfigurationOutput, error)
	PutAppValidationConfigurationAsync(ctx workflow.Context, input *sms.PutAppValidationConfigurationInput) *SMSPutAppValidationConfigurationFuture

	StartAppReplication(ctx workflow.Context, input *sms.StartAppReplicationInput) (*sms.StartAppReplicationOutput, error)
	StartAppReplicationAsync(ctx workflow.Context, input *sms.StartAppReplicationInput) *SMSStartAppReplicationFuture

	StartOnDemandAppReplication(ctx workflow.Context, input *sms.StartOnDemandAppReplicationInput) (*sms.StartOnDemandAppReplicationOutput, error)
	StartOnDemandAppReplicationAsync(ctx workflow.Context, input *sms.StartOnDemandAppReplicationInput) *SMSStartOnDemandAppReplicationFuture

	StartOnDemandReplicationRun(ctx workflow.Context, input *sms.StartOnDemandReplicationRunInput) (*sms.StartOnDemandReplicationRunOutput, error)
	StartOnDemandReplicationRunAsync(ctx workflow.Context, input *sms.StartOnDemandReplicationRunInput) *SMSStartOnDemandReplicationRunFuture

	StopAppReplication(ctx workflow.Context, input *sms.StopAppReplicationInput) (*sms.StopAppReplicationOutput, error)
	StopAppReplicationAsync(ctx workflow.Context, input *sms.StopAppReplicationInput) *SMSStopAppReplicationFuture

	TerminateApp(ctx workflow.Context, input *sms.TerminateAppInput) (*sms.TerminateAppOutput, error)
	TerminateAppAsync(ctx workflow.Context, input *sms.TerminateAppInput) *SMSTerminateAppFuture

	UpdateApp(ctx workflow.Context, input *sms.UpdateAppInput) (*sms.UpdateAppOutput, error)
	UpdateAppAsync(ctx workflow.Context, input *sms.UpdateAppInput) *SMSUpdateAppFuture

	UpdateReplicationJob(ctx workflow.Context, input *sms.UpdateReplicationJobInput) (*sms.UpdateReplicationJobOutput, error)
	UpdateReplicationJobAsync(ctx workflow.Context, input *sms.UpdateReplicationJobInput) *SMSUpdateReplicationJobFuture
}

type SMSStub struct{}

func NewSMSStub() SMSClient {
	return &SMSStub{}
}

type SMSCreateAppFuture struct {
	Future workflow.Future
}

func (r *SMSCreateAppFuture) Get(ctx workflow.Context) (*sms.CreateAppOutput, error) {
	var output sms.CreateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSCreateReplicationJobFuture struct {
	Future workflow.Future
}

func (r *SMSCreateReplicationJobFuture) Get(ctx workflow.Context) (*sms.CreateReplicationJobOutput, error) {
	var output sms.CreateReplicationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSDeleteAppFuture struct {
	Future workflow.Future
}

func (r *SMSDeleteAppFuture) Get(ctx workflow.Context) (*sms.DeleteAppOutput, error) {
	var output sms.DeleteAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSDeleteAppLaunchConfigurationFuture struct {
	Future workflow.Future
}

func (r *SMSDeleteAppLaunchConfigurationFuture) Get(ctx workflow.Context) (*sms.DeleteAppLaunchConfigurationOutput, error) {
	var output sms.DeleteAppLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSDeleteAppReplicationConfigurationFuture struct {
	Future workflow.Future
}

func (r *SMSDeleteAppReplicationConfigurationFuture) Get(ctx workflow.Context) (*sms.DeleteAppReplicationConfigurationOutput, error) {
	var output sms.DeleteAppReplicationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSDeleteAppValidationConfigurationFuture struct {
	Future workflow.Future
}

func (r *SMSDeleteAppValidationConfigurationFuture) Get(ctx workflow.Context) (*sms.DeleteAppValidationConfigurationOutput, error) {
	var output sms.DeleteAppValidationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSDeleteReplicationJobFuture struct {
	Future workflow.Future
}

func (r *SMSDeleteReplicationJobFuture) Get(ctx workflow.Context) (*sms.DeleteReplicationJobOutput, error) {
	var output sms.DeleteReplicationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSDeleteServerCatalogFuture struct {
	Future workflow.Future
}

func (r *SMSDeleteServerCatalogFuture) Get(ctx workflow.Context) (*sms.DeleteServerCatalogOutput, error) {
	var output sms.DeleteServerCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSDisassociateConnectorFuture struct {
	Future workflow.Future
}

func (r *SMSDisassociateConnectorFuture) Get(ctx workflow.Context) (*sms.DisassociateConnectorOutput, error) {
	var output sms.DisassociateConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSGenerateChangeSetFuture struct {
	Future workflow.Future
}

func (r *SMSGenerateChangeSetFuture) Get(ctx workflow.Context) (*sms.GenerateChangeSetOutput, error) {
	var output sms.GenerateChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSGenerateTemplateFuture struct {
	Future workflow.Future
}

func (r *SMSGenerateTemplateFuture) Get(ctx workflow.Context) (*sms.GenerateTemplateOutput, error) {
	var output sms.GenerateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSGetAppFuture struct {
	Future workflow.Future
}

func (r *SMSGetAppFuture) Get(ctx workflow.Context) (*sms.GetAppOutput, error) {
	var output sms.GetAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSGetAppLaunchConfigurationFuture struct {
	Future workflow.Future
}

func (r *SMSGetAppLaunchConfigurationFuture) Get(ctx workflow.Context) (*sms.GetAppLaunchConfigurationOutput, error) {
	var output sms.GetAppLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSGetAppReplicationConfigurationFuture struct {
	Future workflow.Future
}

func (r *SMSGetAppReplicationConfigurationFuture) Get(ctx workflow.Context) (*sms.GetAppReplicationConfigurationOutput, error) {
	var output sms.GetAppReplicationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSGetAppValidationConfigurationFuture struct {
	Future workflow.Future
}

func (r *SMSGetAppValidationConfigurationFuture) Get(ctx workflow.Context) (*sms.GetAppValidationConfigurationOutput, error) {
	var output sms.GetAppValidationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSGetAppValidationOutputFuture struct {
	Future workflow.Future
}

func (r *SMSGetAppValidationOutputFuture) Get(ctx workflow.Context) (*sms.GetAppValidationOutputOutput, error) {
	var output sms.GetAppValidationOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSGetConnectorsFuture struct {
	Future workflow.Future
}

func (r *SMSGetConnectorsFuture) Get(ctx workflow.Context) (*sms.GetConnectorsOutput, error) {
	var output sms.GetConnectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSGetReplicationJobsFuture struct {
	Future workflow.Future
}

func (r *SMSGetReplicationJobsFuture) Get(ctx workflow.Context) (*sms.GetReplicationJobsOutput, error) {
	var output sms.GetReplicationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSGetReplicationRunsFuture struct {
	Future workflow.Future
}

func (r *SMSGetReplicationRunsFuture) Get(ctx workflow.Context) (*sms.GetReplicationRunsOutput, error) {
	var output sms.GetReplicationRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSGetServersFuture struct {
	Future workflow.Future
}

func (r *SMSGetServersFuture) Get(ctx workflow.Context) (*sms.GetServersOutput, error) {
	var output sms.GetServersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSImportAppCatalogFuture struct {
	Future workflow.Future
}

func (r *SMSImportAppCatalogFuture) Get(ctx workflow.Context) (*sms.ImportAppCatalogOutput, error) {
	var output sms.ImportAppCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSImportServerCatalogFuture struct {
	Future workflow.Future
}

func (r *SMSImportServerCatalogFuture) Get(ctx workflow.Context) (*sms.ImportServerCatalogOutput, error) {
	var output sms.ImportServerCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSLaunchAppFuture struct {
	Future workflow.Future
}

func (r *SMSLaunchAppFuture) Get(ctx workflow.Context) (*sms.LaunchAppOutput, error) {
	var output sms.LaunchAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSListAppsFuture struct {
	Future workflow.Future
}

func (r *SMSListAppsFuture) Get(ctx workflow.Context) (*sms.ListAppsOutput, error) {
	var output sms.ListAppsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSNotifyAppValidationOutputFuture struct {
	Future workflow.Future
}

func (r *SMSNotifyAppValidationOutputFuture) Get(ctx workflow.Context) (*sms.NotifyAppValidationOutputOutput, error) {
	var output sms.NotifyAppValidationOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSPutAppLaunchConfigurationFuture struct {
	Future workflow.Future
}

func (r *SMSPutAppLaunchConfigurationFuture) Get(ctx workflow.Context) (*sms.PutAppLaunchConfigurationOutput, error) {
	var output sms.PutAppLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSPutAppReplicationConfigurationFuture struct {
	Future workflow.Future
}

func (r *SMSPutAppReplicationConfigurationFuture) Get(ctx workflow.Context) (*sms.PutAppReplicationConfigurationOutput, error) {
	var output sms.PutAppReplicationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSPutAppValidationConfigurationFuture struct {
	Future workflow.Future
}

func (r *SMSPutAppValidationConfigurationFuture) Get(ctx workflow.Context) (*sms.PutAppValidationConfigurationOutput, error) {
	var output sms.PutAppValidationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSStartAppReplicationFuture struct {
	Future workflow.Future
}

func (r *SMSStartAppReplicationFuture) Get(ctx workflow.Context) (*sms.StartAppReplicationOutput, error) {
	var output sms.StartAppReplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSStartOnDemandAppReplicationFuture struct {
	Future workflow.Future
}

func (r *SMSStartOnDemandAppReplicationFuture) Get(ctx workflow.Context) (*sms.StartOnDemandAppReplicationOutput, error) {
	var output sms.StartOnDemandAppReplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSStartOnDemandReplicationRunFuture struct {
	Future workflow.Future
}

func (r *SMSStartOnDemandReplicationRunFuture) Get(ctx workflow.Context) (*sms.StartOnDemandReplicationRunOutput, error) {
	var output sms.StartOnDemandReplicationRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSStopAppReplicationFuture struct {
	Future workflow.Future
}

func (r *SMSStopAppReplicationFuture) Get(ctx workflow.Context) (*sms.StopAppReplicationOutput, error) {
	var output sms.StopAppReplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSTerminateAppFuture struct {
	Future workflow.Future
}

func (r *SMSTerminateAppFuture) Get(ctx workflow.Context) (*sms.TerminateAppOutput, error) {
	var output sms.TerminateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSUpdateAppFuture struct {
	Future workflow.Future
}

func (r *SMSUpdateAppFuture) Get(ctx workflow.Context) (*sms.UpdateAppOutput, error) {
	var output sms.UpdateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SMSUpdateReplicationJobFuture struct {
	Future workflow.Future
}

func (r *SMSUpdateReplicationJobFuture) Get(ctx workflow.Context) (*sms.UpdateReplicationJobOutput, error) {
	var output sms.UpdateReplicationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) CreateApp(ctx workflow.Context, input *sms.CreateAppInput) (*sms.CreateAppOutput, error) {
	var output sms.CreateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.CreateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) CreateAppAsync(ctx workflow.Context, input *sms.CreateAppInput) *SMSCreateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.CreateApp", input)
	return &SMSCreateAppFuture{Future: future}
}

func (a *SMSStub) CreateReplicationJob(ctx workflow.Context, input *sms.CreateReplicationJobInput) (*sms.CreateReplicationJobOutput, error) {
	var output sms.CreateReplicationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.CreateReplicationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) CreateReplicationJobAsync(ctx workflow.Context, input *sms.CreateReplicationJobInput) *SMSCreateReplicationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.CreateReplicationJob", input)
	return &SMSCreateReplicationJobFuture{Future: future}
}

func (a *SMSStub) DeleteApp(ctx workflow.Context, input *sms.DeleteAppInput) (*sms.DeleteAppOutput, error) {
	var output sms.DeleteAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DeleteApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DeleteAppAsync(ctx workflow.Context, input *sms.DeleteAppInput) *SMSDeleteAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DeleteApp", input)
	return &SMSDeleteAppFuture{Future: future}
}

func (a *SMSStub) DeleteAppLaunchConfiguration(ctx workflow.Context, input *sms.DeleteAppLaunchConfigurationInput) (*sms.DeleteAppLaunchConfigurationOutput, error) {
	var output sms.DeleteAppLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DeleteAppLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DeleteAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppLaunchConfigurationInput) *SMSDeleteAppLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DeleteAppLaunchConfiguration", input)
	return &SMSDeleteAppLaunchConfigurationFuture{Future: future}
}

func (a *SMSStub) DeleteAppReplicationConfiguration(ctx workflow.Context, input *sms.DeleteAppReplicationConfigurationInput) (*sms.DeleteAppReplicationConfigurationOutput, error) {
	var output sms.DeleteAppReplicationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DeleteAppReplicationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DeleteAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppReplicationConfigurationInput) *SMSDeleteAppReplicationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DeleteAppReplicationConfiguration", input)
	return &SMSDeleteAppReplicationConfigurationFuture{Future: future}
}

func (a *SMSStub) DeleteAppValidationConfiguration(ctx workflow.Context, input *sms.DeleteAppValidationConfigurationInput) (*sms.DeleteAppValidationConfigurationOutput, error) {
	var output sms.DeleteAppValidationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DeleteAppValidationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DeleteAppValidationConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppValidationConfigurationInput) *SMSDeleteAppValidationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DeleteAppValidationConfiguration", input)
	return &SMSDeleteAppValidationConfigurationFuture{Future: future}
}

func (a *SMSStub) DeleteReplicationJob(ctx workflow.Context, input *sms.DeleteReplicationJobInput) (*sms.DeleteReplicationJobOutput, error) {
	var output sms.DeleteReplicationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DeleteReplicationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DeleteReplicationJobAsync(ctx workflow.Context, input *sms.DeleteReplicationJobInput) *SMSDeleteReplicationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DeleteReplicationJob", input)
	return &SMSDeleteReplicationJobFuture{Future: future}
}

func (a *SMSStub) DeleteServerCatalog(ctx workflow.Context, input *sms.DeleteServerCatalogInput) (*sms.DeleteServerCatalogOutput, error) {
	var output sms.DeleteServerCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DeleteServerCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DeleteServerCatalogAsync(ctx workflow.Context, input *sms.DeleteServerCatalogInput) *SMSDeleteServerCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DeleteServerCatalog", input)
	return &SMSDeleteServerCatalogFuture{Future: future}
}

func (a *SMSStub) DisassociateConnector(ctx workflow.Context, input *sms.DisassociateConnectorInput) (*sms.DisassociateConnectorOutput, error) {
	var output sms.DisassociateConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.DisassociateConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) DisassociateConnectorAsync(ctx workflow.Context, input *sms.DisassociateConnectorInput) *SMSDisassociateConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.DisassociateConnector", input)
	return &SMSDisassociateConnectorFuture{Future: future}
}

func (a *SMSStub) GenerateChangeSet(ctx workflow.Context, input *sms.GenerateChangeSetInput) (*sms.GenerateChangeSetOutput, error) {
	var output sms.GenerateChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GenerateChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GenerateChangeSetAsync(ctx workflow.Context, input *sms.GenerateChangeSetInput) *SMSGenerateChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GenerateChangeSet", input)
	return &SMSGenerateChangeSetFuture{Future: future}
}

func (a *SMSStub) GenerateTemplate(ctx workflow.Context, input *sms.GenerateTemplateInput) (*sms.GenerateTemplateOutput, error) {
	var output sms.GenerateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GenerateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GenerateTemplateAsync(ctx workflow.Context, input *sms.GenerateTemplateInput) *SMSGenerateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GenerateTemplate", input)
	return &SMSGenerateTemplateFuture{Future: future}
}

func (a *SMSStub) GetApp(ctx workflow.Context, input *sms.GetAppInput) (*sms.GetAppOutput, error) {
	var output sms.GetAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetAppAsync(ctx workflow.Context, input *sms.GetAppInput) *SMSGetAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetApp", input)
	return &SMSGetAppFuture{Future: future}
}

func (a *SMSStub) GetAppLaunchConfiguration(ctx workflow.Context, input *sms.GetAppLaunchConfigurationInput) (*sms.GetAppLaunchConfigurationOutput, error) {
	var output sms.GetAppLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetAppLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.GetAppLaunchConfigurationInput) *SMSGetAppLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetAppLaunchConfiguration", input)
	return &SMSGetAppLaunchConfigurationFuture{Future: future}
}

func (a *SMSStub) GetAppReplicationConfiguration(ctx workflow.Context, input *sms.GetAppReplicationConfigurationInput) (*sms.GetAppReplicationConfigurationOutput, error) {
	var output sms.GetAppReplicationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetAppReplicationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.GetAppReplicationConfigurationInput) *SMSGetAppReplicationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetAppReplicationConfiguration", input)
	return &SMSGetAppReplicationConfigurationFuture{Future: future}
}

func (a *SMSStub) GetAppValidationConfiguration(ctx workflow.Context, input *sms.GetAppValidationConfigurationInput) (*sms.GetAppValidationConfigurationOutput, error) {
	var output sms.GetAppValidationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetAppValidationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetAppValidationConfigurationAsync(ctx workflow.Context, input *sms.GetAppValidationConfigurationInput) *SMSGetAppValidationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetAppValidationConfiguration", input)
	return &SMSGetAppValidationConfigurationFuture{Future: future}
}

func (a *SMSStub) GetAppValidationOutput(ctx workflow.Context, input *sms.GetAppValidationOutputInput) (*sms.GetAppValidationOutputOutput, error) {
	var output sms.GetAppValidationOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetAppValidationOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetAppValidationOutputAsync(ctx workflow.Context, input *sms.GetAppValidationOutputInput) *SMSGetAppValidationOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetAppValidationOutput", input)
	return &SMSGetAppValidationOutputFuture{Future: future}
}

func (a *SMSStub) GetConnectors(ctx workflow.Context, input *sms.GetConnectorsInput) (*sms.GetConnectorsOutput, error) {
	var output sms.GetConnectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetConnectors", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetConnectorsAsync(ctx workflow.Context, input *sms.GetConnectorsInput) *SMSGetConnectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetConnectors", input)
	return &SMSGetConnectorsFuture{Future: future}
}

func (a *SMSStub) GetReplicationJobs(ctx workflow.Context, input *sms.GetReplicationJobsInput) (*sms.GetReplicationJobsOutput, error) {
	var output sms.GetReplicationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetReplicationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetReplicationJobsAsync(ctx workflow.Context, input *sms.GetReplicationJobsInput) *SMSGetReplicationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetReplicationJobs", input)
	return &SMSGetReplicationJobsFuture{Future: future}
}

func (a *SMSStub) GetReplicationRuns(ctx workflow.Context, input *sms.GetReplicationRunsInput) (*sms.GetReplicationRunsOutput, error) {
	var output sms.GetReplicationRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetReplicationRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetReplicationRunsAsync(ctx workflow.Context, input *sms.GetReplicationRunsInput) *SMSGetReplicationRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetReplicationRuns", input)
	return &SMSGetReplicationRunsFuture{Future: future}
}

func (a *SMSStub) GetServers(ctx workflow.Context, input *sms.GetServersInput) (*sms.GetServersOutput, error) {
	var output sms.GetServersOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.GetServers", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) GetServersAsync(ctx workflow.Context, input *sms.GetServersInput) *SMSGetServersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.GetServers", input)
	return &SMSGetServersFuture{Future: future}
}

func (a *SMSStub) ImportAppCatalog(ctx workflow.Context, input *sms.ImportAppCatalogInput) (*sms.ImportAppCatalogOutput, error) {
	var output sms.ImportAppCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.ImportAppCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) ImportAppCatalogAsync(ctx workflow.Context, input *sms.ImportAppCatalogInput) *SMSImportAppCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.ImportAppCatalog", input)
	return &SMSImportAppCatalogFuture{Future: future}
}

func (a *SMSStub) ImportServerCatalog(ctx workflow.Context, input *sms.ImportServerCatalogInput) (*sms.ImportServerCatalogOutput, error) {
	var output sms.ImportServerCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.ImportServerCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) ImportServerCatalogAsync(ctx workflow.Context, input *sms.ImportServerCatalogInput) *SMSImportServerCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.ImportServerCatalog", input)
	return &SMSImportServerCatalogFuture{Future: future}
}

func (a *SMSStub) LaunchApp(ctx workflow.Context, input *sms.LaunchAppInput) (*sms.LaunchAppOutput, error) {
	var output sms.LaunchAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.LaunchApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) LaunchAppAsync(ctx workflow.Context, input *sms.LaunchAppInput) *SMSLaunchAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.LaunchApp", input)
	return &SMSLaunchAppFuture{Future: future}
}

func (a *SMSStub) ListApps(ctx workflow.Context, input *sms.ListAppsInput) (*sms.ListAppsOutput, error) {
	var output sms.ListAppsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.ListApps", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) ListAppsAsync(ctx workflow.Context, input *sms.ListAppsInput) *SMSListAppsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.ListApps", input)
	return &SMSListAppsFuture{Future: future}
}

func (a *SMSStub) NotifyAppValidationOutput(ctx workflow.Context, input *sms.NotifyAppValidationOutputInput) (*sms.NotifyAppValidationOutputOutput, error) {
	var output sms.NotifyAppValidationOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.NotifyAppValidationOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) NotifyAppValidationOutputAsync(ctx workflow.Context, input *sms.NotifyAppValidationOutputInput) *SMSNotifyAppValidationOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.NotifyAppValidationOutput", input)
	return &SMSNotifyAppValidationOutputFuture{Future: future}
}

func (a *SMSStub) PutAppLaunchConfiguration(ctx workflow.Context, input *sms.PutAppLaunchConfigurationInput) (*sms.PutAppLaunchConfigurationOutput, error) {
	var output sms.PutAppLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.PutAppLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) PutAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.PutAppLaunchConfigurationInput) *SMSPutAppLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.PutAppLaunchConfiguration", input)
	return &SMSPutAppLaunchConfigurationFuture{Future: future}
}

func (a *SMSStub) PutAppReplicationConfiguration(ctx workflow.Context, input *sms.PutAppReplicationConfigurationInput) (*sms.PutAppReplicationConfigurationOutput, error) {
	var output sms.PutAppReplicationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.PutAppReplicationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) PutAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.PutAppReplicationConfigurationInput) *SMSPutAppReplicationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.PutAppReplicationConfiguration", input)
	return &SMSPutAppReplicationConfigurationFuture{Future: future}
}

func (a *SMSStub) PutAppValidationConfiguration(ctx workflow.Context, input *sms.PutAppValidationConfigurationInput) (*sms.PutAppValidationConfigurationOutput, error) {
	var output sms.PutAppValidationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.PutAppValidationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) PutAppValidationConfigurationAsync(ctx workflow.Context, input *sms.PutAppValidationConfigurationInput) *SMSPutAppValidationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.PutAppValidationConfiguration", input)
	return &SMSPutAppValidationConfigurationFuture{Future: future}
}

func (a *SMSStub) StartAppReplication(ctx workflow.Context, input *sms.StartAppReplicationInput) (*sms.StartAppReplicationOutput, error) {
	var output sms.StartAppReplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.StartAppReplication", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) StartAppReplicationAsync(ctx workflow.Context, input *sms.StartAppReplicationInput) *SMSStartAppReplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.StartAppReplication", input)
	return &SMSStartAppReplicationFuture{Future: future}
}

func (a *SMSStub) StartOnDemandAppReplication(ctx workflow.Context, input *sms.StartOnDemandAppReplicationInput) (*sms.StartOnDemandAppReplicationOutput, error) {
	var output sms.StartOnDemandAppReplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.StartOnDemandAppReplication", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) StartOnDemandAppReplicationAsync(ctx workflow.Context, input *sms.StartOnDemandAppReplicationInput) *SMSStartOnDemandAppReplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.StartOnDemandAppReplication", input)
	return &SMSStartOnDemandAppReplicationFuture{Future: future}
}

func (a *SMSStub) StartOnDemandReplicationRun(ctx workflow.Context, input *sms.StartOnDemandReplicationRunInput) (*sms.StartOnDemandReplicationRunOutput, error) {
	var output sms.StartOnDemandReplicationRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.StartOnDemandReplicationRun", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) StartOnDemandReplicationRunAsync(ctx workflow.Context, input *sms.StartOnDemandReplicationRunInput) *SMSStartOnDemandReplicationRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.StartOnDemandReplicationRun", input)
	return &SMSStartOnDemandReplicationRunFuture{Future: future}
}

func (a *SMSStub) StopAppReplication(ctx workflow.Context, input *sms.StopAppReplicationInput) (*sms.StopAppReplicationOutput, error) {
	var output sms.StopAppReplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.StopAppReplication", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) StopAppReplicationAsync(ctx workflow.Context, input *sms.StopAppReplicationInput) *SMSStopAppReplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.StopAppReplication", input)
	return &SMSStopAppReplicationFuture{Future: future}
}

func (a *SMSStub) TerminateApp(ctx workflow.Context, input *sms.TerminateAppInput) (*sms.TerminateAppOutput, error) {
	var output sms.TerminateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.TerminateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) TerminateAppAsync(ctx workflow.Context, input *sms.TerminateAppInput) *SMSTerminateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.TerminateApp", input)
	return &SMSTerminateAppFuture{Future: future}
}

func (a *SMSStub) UpdateApp(ctx workflow.Context, input *sms.UpdateAppInput) (*sms.UpdateAppOutput, error) {
	var output sms.UpdateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.UpdateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) UpdateAppAsync(ctx workflow.Context, input *sms.UpdateAppInput) *SMSUpdateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.UpdateApp", input)
	return &SMSUpdateAppFuture{Future: future}
}

func (a *SMSStub) UpdateReplicationJob(ctx workflow.Context, input *sms.UpdateReplicationJobInput) (*sms.UpdateReplicationJobOutput, error) {
	var output sms.UpdateReplicationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sms.UpdateReplicationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SMSStub) UpdateReplicationJobAsync(ctx workflow.Context, input *sms.UpdateReplicationJobInput) *SMSUpdateReplicationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sms.UpdateReplicationJob", input)
	return &SMSUpdateReplicationJobFuture{Future: future}
}
