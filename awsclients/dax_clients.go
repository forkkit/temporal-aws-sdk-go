// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/dax"
	"go.temporal.io/sdk/workflow"
)

type DAXClient interface {
	CreateCluster(ctx workflow.Context, input *dax.CreateClusterInput) (*dax.CreateClusterOutput, error)
	CreateClusterAsync(ctx workflow.Context, input *dax.CreateClusterInput) *DaxCreateClusterFuture

	CreateParameterGroup(ctx workflow.Context, input *dax.CreateParameterGroupInput) (*dax.CreateParameterGroupOutput, error)
	CreateParameterGroupAsync(ctx workflow.Context, input *dax.CreateParameterGroupInput) *DaxCreateParameterGroupFuture

	CreateSubnetGroup(ctx workflow.Context, input *dax.CreateSubnetGroupInput) (*dax.CreateSubnetGroupOutput, error)
	CreateSubnetGroupAsync(ctx workflow.Context, input *dax.CreateSubnetGroupInput) *DaxCreateSubnetGroupFuture

	DecreaseReplicationFactor(ctx workflow.Context, input *dax.DecreaseReplicationFactorInput) (*dax.DecreaseReplicationFactorOutput, error)
	DecreaseReplicationFactorAsync(ctx workflow.Context, input *dax.DecreaseReplicationFactorInput) *DaxDecreaseReplicationFactorFuture

	DeleteCluster(ctx workflow.Context, input *dax.DeleteClusterInput) (*dax.DeleteClusterOutput, error)
	DeleteClusterAsync(ctx workflow.Context, input *dax.DeleteClusterInput) *DaxDeleteClusterFuture

	DeleteParameterGroup(ctx workflow.Context, input *dax.DeleteParameterGroupInput) (*dax.DeleteParameterGroupOutput, error)
	DeleteParameterGroupAsync(ctx workflow.Context, input *dax.DeleteParameterGroupInput) *DaxDeleteParameterGroupFuture

	DeleteSubnetGroup(ctx workflow.Context, input *dax.DeleteSubnetGroupInput) (*dax.DeleteSubnetGroupOutput, error)
	DeleteSubnetGroupAsync(ctx workflow.Context, input *dax.DeleteSubnetGroupInput) *DaxDeleteSubnetGroupFuture

	DescribeClusters(ctx workflow.Context, input *dax.DescribeClustersInput) (*dax.DescribeClustersOutput, error)
	DescribeClustersAsync(ctx workflow.Context, input *dax.DescribeClustersInput) *DaxDescribeClustersFuture

	DescribeDefaultParameters(ctx workflow.Context, input *dax.DescribeDefaultParametersInput) (*dax.DescribeDefaultParametersOutput, error)
	DescribeDefaultParametersAsync(ctx workflow.Context, input *dax.DescribeDefaultParametersInput) *DaxDescribeDefaultParametersFuture

	DescribeEvents(ctx workflow.Context, input *dax.DescribeEventsInput) (*dax.DescribeEventsOutput, error)
	DescribeEventsAsync(ctx workflow.Context, input *dax.DescribeEventsInput) *DaxDescribeEventsFuture

	DescribeParameterGroups(ctx workflow.Context, input *dax.DescribeParameterGroupsInput) (*dax.DescribeParameterGroupsOutput, error)
	DescribeParameterGroupsAsync(ctx workflow.Context, input *dax.DescribeParameterGroupsInput) *DaxDescribeParameterGroupsFuture

	DescribeParameters(ctx workflow.Context, input *dax.DescribeParametersInput) (*dax.DescribeParametersOutput, error)
	DescribeParametersAsync(ctx workflow.Context, input *dax.DescribeParametersInput) *DaxDescribeParametersFuture

	DescribeSubnetGroups(ctx workflow.Context, input *dax.DescribeSubnetGroupsInput) (*dax.DescribeSubnetGroupsOutput, error)
	DescribeSubnetGroupsAsync(ctx workflow.Context, input *dax.DescribeSubnetGroupsInput) *DaxDescribeSubnetGroupsFuture

	IncreaseReplicationFactor(ctx workflow.Context, input *dax.IncreaseReplicationFactorInput) (*dax.IncreaseReplicationFactorOutput, error)
	IncreaseReplicationFactorAsync(ctx workflow.Context, input *dax.IncreaseReplicationFactorInput) *DaxIncreaseReplicationFactorFuture

	ListTags(ctx workflow.Context, input *dax.ListTagsInput) (*dax.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *dax.ListTagsInput) *DaxListTagsFuture

	RebootNode(ctx workflow.Context, input *dax.RebootNodeInput) (*dax.RebootNodeOutput, error)
	RebootNodeAsync(ctx workflow.Context, input *dax.RebootNodeInput) *DaxRebootNodeFuture

	TagResource(ctx workflow.Context, input *dax.TagResourceInput) (*dax.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *dax.TagResourceInput) *DaxTagResourceFuture

	UntagResource(ctx workflow.Context, input *dax.UntagResourceInput) (*dax.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *dax.UntagResourceInput) *DaxUntagResourceFuture

	UpdateCluster(ctx workflow.Context, input *dax.UpdateClusterInput) (*dax.UpdateClusterOutput, error)
	UpdateClusterAsync(ctx workflow.Context, input *dax.UpdateClusterInput) *DaxUpdateClusterFuture

	UpdateParameterGroup(ctx workflow.Context, input *dax.UpdateParameterGroupInput) (*dax.UpdateParameterGroupOutput, error)
	UpdateParameterGroupAsync(ctx workflow.Context, input *dax.UpdateParameterGroupInput) *DaxUpdateParameterGroupFuture

	UpdateSubnetGroup(ctx workflow.Context, input *dax.UpdateSubnetGroupInput) (*dax.UpdateSubnetGroupOutput, error)
	UpdateSubnetGroupAsync(ctx workflow.Context, input *dax.UpdateSubnetGroupInput) *DaxUpdateSubnetGroupFuture
}

type DAXStub struct{}

func NewDAXStub() DAXClient {
	return &DAXStub{}
}

type DaxCreateClusterFuture struct {
	Future workflow.Future
}

func (r *DaxCreateClusterFuture) Get(ctx workflow.Context) (*dax.CreateClusterOutput, error) {
	var output dax.CreateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxCreateParameterGroupFuture struct {
	Future workflow.Future
}

func (r *DaxCreateParameterGroupFuture) Get(ctx workflow.Context) (*dax.CreateParameterGroupOutput, error) {
	var output dax.CreateParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxCreateSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *DaxCreateSubnetGroupFuture) Get(ctx workflow.Context) (*dax.CreateSubnetGroupOutput, error) {
	var output dax.CreateSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxDecreaseReplicationFactorFuture struct {
	Future workflow.Future
}

func (r *DaxDecreaseReplicationFactorFuture) Get(ctx workflow.Context) (*dax.DecreaseReplicationFactorOutput, error) {
	var output dax.DecreaseReplicationFactorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxDeleteClusterFuture struct {
	Future workflow.Future
}

func (r *DaxDeleteClusterFuture) Get(ctx workflow.Context) (*dax.DeleteClusterOutput, error) {
	var output dax.DeleteClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxDeleteParameterGroupFuture struct {
	Future workflow.Future
}

func (r *DaxDeleteParameterGroupFuture) Get(ctx workflow.Context) (*dax.DeleteParameterGroupOutput, error) {
	var output dax.DeleteParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxDeleteSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *DaxDeleteSubnetGroupFuture) Get(ctx workflow.Context) (*dax.DeleteSubnetGroupOutput, error) {
	var output dax.DeleteSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxDescribeClustersFuture struct {
	Future workflow.Future
}

func (r *DaxDescribeClustersFuture) Get(ctx workflow.Context) (*dax.DescribeClustersOutput, error) {
	var output dax.DescribeClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxDescribeDefaultParametersFuture struct {
	Future workflow.Future
}

func (r *DaxDescribeDefaultParametersFuture) Get(ctx workflow.Context) (*dax.DescribeDefaultParametersOutput, error) {
	var output dax.DescribeDefaultParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxDescribeEventsFuture struct {
	Future workflow.Future
}

func (r *DaxDescribeEventsFuture) Get(ctx workflow.Context) (*dax.DescribeEventsOutput, error) {
	var output dax.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxDescribeParameterGroupsFuture struct {
	Future workflow.Future
}

func (r *DaxDescribeParameterGroupsFuture) Get(ctx workflow.Context) (*dax.DescribeParameterGroupsOutput, error) {
	var output dax.DescribeParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxDescribeParametersFuture struct {
	Future workflow.Future
}

func (r *DaxDescribeParametersFuture) Get(ctx workflow.Context) (*dax.DescribeParametersOutput, error) {
	var output dax.DescribeParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxDescribeSubnetGroupsFuture struct {
	Future workflow.Future
}

func (r *DaxDescribeSubnetGroupsFuture) Get(ctx workflow.Context) (*dax.DescribeSubnetGroupsOutput, error) {
	var output dax.DescribeSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxIncreaseReplicationFactorFuture struct {
	Future workflow.Future
}

func (r *DaxIncreaseReplicationFactorFuture) Get(ctx workflow.Context) (*dax.IncreaseReplicationFactorOutput, error) {
	var output dax.IncreaseReplicationFactorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxListTagsFuture struct {
	Future workflow.Future
}

func (r *DaxListTagsFuture) Get(ctx workflow.Context) (*dax.ListTagsOutput, error) {
	var output dax.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxRebootNodeFuture struct {
	Future workflow.Future
}

func (r *DaxRebootNodeFuture) Get(ctx workflow.Context) (*dax.RebootNodeOutput, error) {
	var output dax.RebootNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxTagResourceFuture struct {
	Future workflow.Future
}

func (r *DaxTagResourceFuture) Get(ctx workflow.Context) (*dax.TagResourceOutput, error) {
	var output dax.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxUntagResourceFuture struct {
	Future workflow.Future
}

func (r *DaxUntagResourceFuture) Get(ctx workflow.Context) (*dax.UntagResourceOutput, error) {
	var output dax.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxUpdateClusterFuture struct {
	Future workflow.Future
}

func (r *DaxUpdateClusterFuture) Get(ctx workflow.Context) (*dax.UpdateClusterOutput, error) {
	var output dax.UpdateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxUpdateParameterGroupFuture struct {
	Future workflow.Future
}

func (r *DaxUpdateParameterGroupFuture) Get(ctx workflow.Context) (*dax.UpdateParameterGroupOutput, error) {
	var output dax.UpdateParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DaxUpdateSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *DaxUpdateSubnetGroupFuture) Get(ctx workflow.Context) (*dax.UpdateSubnetGroupOutput, error) {
	var output dax.UpdateSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) CreateCluster(ctx workflow.Context, input *dax.CreateClusterInput) (*dax.CreateClusterOutput, error) {
	var output dax.CreateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.CreateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) CreateClusterAsync(ctx workflow.Context, input *dax.CreateClusterInput) *DaxCreateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.CreateCluster", input)
	return &DaxCreateClusterFuture{Future: future}
}

func (a *DAXStub) CreateParameterGroup(ctx workflow.Context, input *dax.CreateParameterGroupInput) (*dax.CreateParameterGroupOutput, error) {
	var output dax.CreateParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.CreateParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) CreateParameterGroupAsync(ctx workflow.Context, input *dax.CreateParameterGroupInput) *DaxCreateParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.CreateParameterGroup", input)
	return &DaxCreateParameterGroupFuture{Future: future}
}

func (a *DAXStub) CreateSubnetGroup(ctx workflow.Context, input *dax.CreateSubnetGroupInput) (*dax.CreateSubnetGroupOutput, error) {
	var output dax.CreateSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.CreateSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) CreateSubnetGroupAsync(ctx workflow.Context, input *dax.CreateSubnetGroupInput) *DaxCreateSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.CreateSubnetGroup", input)
	return &DaxCreateSubnetGroupFuture{Future: future}
}

func (a *DAXStub) DecreaseReplicationFactor(ctx workflow.Context, input *dax.DecreaseReplicationFactorInput) (*dax.DecreaseReplicationFactorOutput, error) {
	var output dax.DecreaseReplicationFactorOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.DecreaseReplicationFactor", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) DecreaseReplicationFactorAsync(ctx workflow.Context, input *dax.DecreaseReplicationFactorInput) *DaxDecreaseReplicationFactorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.DecreaseReplicationFactor", input)
	return &DaxDecreaseReplicationFactorFuture{Future: future}
}

func (a *DAXStub) DeleteCluster(ctx workflow.Context, input *dax.DeleteClusterInput) (*dax.DeleteClusterOutput, error) {
	var output dax.DeleteClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.DeleteCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) DeleteClusterAsync(ctx workflow.Context, input *dax.DeleteClusterInput) *DaxDeleteClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.DeleteCluster", input)
	return &DaxDeleteClusterFuture{Future: future}
}

func (a *DAXStub) DeleteParameterGroup(ctx workflow.Context, input *dax.DeleteParameterGroupInput) (*dax.DeleteParameterGroupOutput, error) {
	var output dax.DeleteParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.DeleteParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) DeleteParameterGroupAsync(ctx workflow.Context, input *dax.DeleteParameterGroupInput) *DaxDeleteParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.DeleteParameterGroup", input)
	return &DaxDeleteParameterGroupFuture{Future: future}
}

func (a *DAXStub) DeleteSubnetGroup(ctx workflow.Context, input *dax.DeleteSubnetGroupInput) (*dax.DeleteSubnetGroupOutput, error) {
	var output dax.DeleteSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.DeleteSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) DeleteSubnetGroupAsync(ctx workflow.Context, input *dax.DeleteSubnetGroupInput) *DaxDeleteSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.DeleteSubnetGroup", input)
	return &DaxDeleteSubnetGroupFuture{Future: future}
}

func (a *DAXStub) DescribeClusters(ctx workflow.Context, input *dax.DescribeClustersInput) (*dax.DescribeClustersOutput, error) {
	var output dax.DescribeClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.DescribeClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) DescribeClustersAsync(ctx workflow.Context, input *dax.DescribeClustersInput) *DaxDescribeClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.DescribeClusters", input)
	return &DaxDescribeClustersFuture{Future: future}
}

func (a *DAXStub) DescribeDefaultParameters(ctx workflow.Context, input *dax.DescribeDefaultParametersInput) (*dax.DescribeDefaultParametersOutput, error) {
	var output dax.DescribeDefaultParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.DescribeDefaultParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) DescribeDefaultParametersAsync(ctx workflow.Context, input *dax.DescribeDefaultParametersInput) *DaxDescribeDefaultParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.DescribeDefaultParameters", input)
	return &DaxDescribeDefaultParametersFuture{Future: future}
}

func (a *DAXStub) DescribeEvents(ctx workflow.Context, input *dax.DescribeEventsInput) (*dax.DescribeEventsOutput, error) {
	var output dax.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) DescribeEventsAsync(ctx workflow.Context, input *dax.DescribeEventsInput) *DaxDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.DescribeEvents", input)
	return &DaxDescribeEventsFuture{Future: future}
}

func (a *DAXStub) DescribeParameterGroups(ctx workflow.Context, input *dax.DescribeParameterGroupsInput) (*dax.DescribeParameterGroupsOutput, error) {
	var output dax.DescribeParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.DescribeParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) DescribeParameterGroupsAsync(ctx workflow.Context, input *dax.DescribeParameterGroupsInput) *DaxDescribeParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.DescribeParameterGroups", input)
	return &DaxDescribeParameterGroupsFuture{Future: future}
}

func (a *DAXStub) DescribeParameters(ctx workflow.Context, input *dax.DescribeParametersInput) (*dax.DescribeParametersOutput, error) {
	var output dax.DescribeParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.DescribeParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) DescribeParametersAsync(ctx workflow.Context, input *dax.DescribeParametersInput) *DaxDescribeParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.DescribeParameters", input)
	return &DaxDescribeParametersFuture{Future: future}
}

func (a *DAXStub) DescribeSubnetGroups(ctx workflow.Context, input *dax.DescribeSubnetGroupsInput) (*dax.DescribeSubnetGroupsOutput, error) {
	var output dax.DescribeSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.DescribeSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) DescribeSubnetGroupsAsync(ctx workflow.Context, input *dax.DescribeSubnetGroupsInput) *DaxDescribeSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.DescribeSubnetGroups", input)
	return &DaxDescribeSubnetGroupsFuture{Future: future}
}

func (a *DAXStub) IncreaseReplicationFactor(ctx workflow.Context, input *dax.IncreaseReplicationFactorInput) (*dax.IncreaseReplicationFactorOutput, error) {
	var output dax.IncreaseReplicationFactorOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.IncreaseReplicationFactor", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) IncreaseReplicationFactorAsync(ctx workflow.Context, input *dax.IncreaseReplicationFactorInput) *DaxIncreaseReplicationFactorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.IncreaseReplicationFactor", input)
	return &DaxIncreaseReplicationFactorFuture{Future: future}
}

func (a *DAXStub) ListTags(ctx workflow.Context, input *dax.ListTagsInput) (*dax.ListTagsOutput, error) {
	var output dax.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) ListTagsAsync(ctx workflow.Context, input *dax.ListTagsInput) *DaxListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.ListTags", input)
	return &DaxListTagsFuture{Future: future}
}

func (a *DAXStub) RebootNode(ctx workflow.Context, input *dax.RebootNodeInput) (*dax.RebootNodeOutput, error) {
	var output dax.RebootNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.RebootNode", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) RebootNodeAsync(ctx workflow.Context, input *dax.RebootNodeInput) *DaxRebootNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.RebootNode", input)
	return &DaxRebootNodeFuture{Future: future}
}

func (a *DAXStub) TagResource(ctx workflow.Context, input *dax.TagResourceInput) (*dax.TagResourceOutput, error) {
	var output dax.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) TagResourceAsync(ctx workflow.Context, input *dax.TagResourceInput) *DaxTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.TagResource", input)
	return &DaxTagResourceFuture{Future: future}
}

func (a *DAXStub) UntagResource(ctx workflow.Context, input *dax.UntagResourceInput) (*dax.UntagResourceOutput, error) {
	var output dax.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) UntagResourceAsync(ctx workflow.Context, input *dax.UntagResourceInput) *DaxUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.UntagResource", input)
	return &DaxUntagResourceFuture{Future: future}
}

func (a *DAXStub) UpdateCluster(ctx workflow.Context, input *dax.UpdateClusterInput) (*dax.UpdateClusterOutput, error) {
	var output dax.UpdateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.UpdateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) UpdateClusterAsync(ctx workflow.Context, input *dax.UpdateClusterInput) *DaxUpdateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.UpdateCluster", input)
	return &DaxUpdateClusterFuture{Future: future}
}

func (a *DAXStub) UpdateParameterGroup(ctx workflow.Context, input *dax.UpdateParameterGroupInput) (*dax.UpdateParameterGroupOutput, error) {
	var output dax.UpdateParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.UpdateParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) UpdateParameterGroupAsync(ctx workflow.Context, input *dax.UpdateParameterGroupInput) *DaxUpdateParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.UpdateParameterGroup", input)
	return &DaxUpdateParameterGroupFuture{Future: future}
}

func (a *DAXStub) UpdateSubnetGroup(ctx workflow.Context, input *dax.UpdateSubnetGroupInput) (*dax.UpdateSubnetGroupOutput, error) {
	var output dax.UpdateSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.dax.UpdateSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DAXStub) UpdateSubnetGroupAsync(ctx workflow.Context, input *dax.UpdateSubnetGroupInput) *DaxUpdateSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dax.UpdateSubnetGroup", input)
	return &DaxUpdateSubnetGroupFuture{Future: future}
}
