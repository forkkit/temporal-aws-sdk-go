// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/resourcegroups"
	"go.temporal.io/sdk/workflow"
)

type ResourceGroupsClient interface {
	CreateGroup(ctx workflow.Context, input *resourcegroups.CreateGroupInput) (*resourcegroups.CreateGroupOutput, error)
	CreateGroupAsync(ctx workflow.Context, input *resourcegroups.CreateGroupInput) *ResourcegroupsCreateGroupFuture

	DeleteGroup(ctx workflow.Context, input *resourcegroups.DeleteGroupInput) (*resourcegroups.DeleteGroupOutput, error)
	DeleteGroupAsync(ctx workflow.Context, input *resourcegroups.DeleteGroupInput) *ResourcegroupsDeleteGroupFuture

	GetGroup(ctx workflow.Context, input *resourcegroups.GetGroupInput) (*resourcegroups.GetGroupOutput, error)
	GetGroupAsync(ctx workflow.Context, input *resourcegroups.GetGroupInput) *ResourcegroupsGetGroupFuture

	GetGroupConfiguration(ctx workflow.Context, input *resourcegroups.GetGroupConfigurationInput) (*resourcegroups.GetGroupConfigurationOutput, error)
	GetGroupConfigurationAsync(ctx workflow.Context, input *resourcegroups.GetGroupConfigurationInput) *ResourcegroupsGetGroupConfigurationFuture

	GetGroupQuery(ctx workflow.Context, input *resourcegroups.GetGroupQueryInput) (*resourcegroups.GetGroupQueryOutput, error)
	GetGroupQueryAsync(ctx workflow.Context, input *resourcegroups.GetGroupQueryInput) *ResourcegroupsGetGroupQueryFuture

	GetTags(ctx workflow.Context, input *resourcegroups.GetTagsInput) (*resourcegroups.GetTagsOutput, error)
	GetTagsAsync(ctx workflow.Context, input *resourcegroups.GetTagsInput) *ResourcegroupsGetTagsFuture

	GroupResources(ctx workflow.Context, input *resourcegroups.GroupResourcesInput) (*resourcegroups.GroupResourcesOutput, error)
	GroupResourcesAsync(ctx workflow.Context, input *resourcegroups.GroupResourcesInput) *ResourcegroupsGroupResourcesFuture

	ListGroupResources(ctx workflow.Context, input *resourcegroups.ListGroupResourcesInput) (*resourcegroups.ListGroupResourcesOutput, error)
	ListGroupResourcesAsync(ctx workflow.Context, input *resourcegroups.ListGroupResourcesInput) *ResourcegroupsListGroupResourcesFuture

	ListGroups(ctx workflow.Context, input *resourcegroups.ListGroupsInput) (*resourcegroups.ListGroupsOutput, error)
	ListGroupsAsync(ctx workflow.Context, input *resourcegroups.ListGroupsInput) *ResourcegroupsListGroupsFuture

	SearchResources(ctx workflow.Context, input *resourcegroups.SearchResourcesInput) (*resourcegroups.SearchResourcesOutput, error)
	SearchResourcesAsync(ctx workflow.Context, input *resourcegroups.SearchResourcesInput) *ResourcegroupsSearchResourcesFuture

	Tag(ctx workflow.Context, input *resourcegroups.TagInput) (*resourcegroups.TagOutput, error)
	TagAsync(ctx workflow.Context, input *resourcegroups.TagInput) *ResourcegroupsTagFuture

	UngroupResources(ctx workflow.Context, input *resourcegroups.UngroupResourcesInput) (*resourcegroups.UngroupResourcesOutput, error)
	UngroupResourcesAsync(ctx workflow.Context, input *resourcegroups.UngroupResourcesInput) *ResourcegroupsUngroupResourcesFuture

	Untag(ctx workflow.Context, input *resourcegroups.UntagInput) (*resourcegroups.UntagOutput, error)
	UntagAsync(ctx workflow.Context, input *resourcegroups.UntagInput) *ResourcegroupsUntagFuture

	UpdateGroup(ctx workflow.Context, input *resourcegroups.UpdateGroupInput) (*resourcegroups.UpdateGroupOutput, error)
	UpdateGroupAsync(ctx workflow.Context, input *resourcegroups.UpdateGroupInput) *ResourcegroupsUpdateGroupFuture

	UpdateGroupQuery(ctx workflow.Context, input *resourcegroups.UpdateGroupQueryInput) (*resourcegroups.UpdateGroupQueryOutput, error)
	UpdateGroupQueryAsync(ctx workflow.Context, input *resourcegroups.UpdateGroupQueryInput) *ResourcegroupsUpdateGroupQueryFuture
}

type ResourceGroupsStub struct{}

func NewResourceGroupsStub() ResourceGroupsClient {
	return &ResourceGroupsStub{}
}

type ResourcegroupsCreateGroupFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsCreateGroupFuture) Get(ctx workflow.Context) (*resourcegroups.CreateGroupOutput, error) {
	var output resourcegroups.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsDeleteGroupFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsDeleteGroupFuture) Get(ctx workflow.Context) (*resourcegroups.DeleteGroupOutput, error) {
	var output resourcegroups.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsGetGroupFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsGetGroupFuture) Get(ctx workflow.Context) (*resourcegroups.GetGroupOutput, error) {
	var output resourcegroups.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsGetGroupConfigurationFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsGetGroupConfigurationFuture) Get(ctx workflow.Context) (*resourcegroups.GetGroupConfigurationOutput, error) {
	var output resourcegroups.GetGroupConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsGetGroupQueryFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsGetGroupQueryFuture) Get(ctx workflow.Context) (*resourcegroups.GetGroupQueryOutput, error) {
	var output resourcegroups.GetGroupQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsGetTagsFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsGetTagsFuture) Get(ctx workflow.Context) (*resourcegroups.GetTagsOutput, error) {
	var output resourcegroups.GetTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsGroupResourcesFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsGroupResourcesFuture) Get(ctx workflow.Context) (*resourcegroups.GroupResourcesOutput, error) {
	var output resourcegroups.GroupResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsListGroupResourcesFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsListGroupResourcesFuture) Get(ctx workflow.Context) (*resourcegroups.ListGroupResourcesOutput, error) {
	var output resourcegroups.ListGroupResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsListGroupsFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsListGroupsFuture) Get(ctx workflow.Context) (*resourcegroups.ListGroupsOutput, error) {
	var output resourcegroups.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsSearchResourcesFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsSearchResourcesFuture) Get(ctx workflow.Context) (*resourcegroups.SearchResourcesOutput, error) {
	var output resourcegroups.SearchResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsTagFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsTagFuture) Get(ctx workflow.Context) (*resourcegroups.TagOutput, error) {
	var output resourcegroups.TagOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsUngroupResourcesFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsUngroupResourcesFuture) Get(ctx workflow.Context) (*resourcegroups.UngroupResourcesOutput, error) {
	var output resourcegroups.UngroupResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsUntagFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsUntagFuture) Get(ctx workflow.Context) (*resourcegroups.UntagOutput, error) {
	var output resourcegroups.UntagOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsUpdateGroupFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsUpdateGroupFuture) Get(ctx workflow.Context) (*resourcegroups.UpdateGroupOutput, error) {
	var output resourcegroups.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourcegroupsUpdateGroupQueryFuture struct {
	Future workflow.Future
}

func (r *ResourcegroupsUpdateGroupQueryFuture) Get(ctx workflow.Context) (*resourcegroups.UpdateGroupQueryOutput, error) {
	var output resourcegroups.UpdateGroupQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) CreateGroup(ctx workflow.Context, input *resourcegroups.CreateGroupInput) (*resourcegroups.CreateGroupOutput, error) {
	var output resourcegroups.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) CreateGroupAsync(ctx workflow.Context, input *resourcegroups.CreateGroupInput) *ResourcegroupsCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.CreateGroup", input)
	return &ResourcegroupsCreateGroupFuture{Future: future}
}

func (a *ResourceGroupsStub) DeleteGroup(ctx workflow.Context, input *resourcegroups.DeleteGroupInput) (*resourcegroups.DeleteGroupOutput, error) {
	var output resourcegroups.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) DeleteGroupAsync(ctx workflow.Context, input *resourcegroups.DeleteGroupInput) *ResourcegroupsDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.DeleteGroup", input)
	return &ResourcegroupsDeleteGroupFuture{Future: future}
}

func (a *ResourceGroupsStub) GetGroup(ctx workflow.Context, input *resourcegroups.GetGroupInput) (*resourcegroups.GetGroupOutput, error) {
	var output resourcegroups.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) GetGroupAsync(ctx workflow.Context, input *resourcegroups.GetGroupInput) *ResourcegroupsGetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.GetGroup", input)
	return &ResourcegroupsGetGroupFuture{Future: future}
}

func (a *ResourceGroupsStub) GetGroupConfiguration(ctx workflow.Context, input *resourcegroups.GetGroupConfigurationInput) (*resourcegroups.GetGroupConfigurationOutput, error) {
	var output resourcegroups.GetGroupConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.GetGroupConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) GetGroupConfigurationAsync(ctx workflow.Context, input *resourcegroups.GetGroupConfigurationInput) *ResourcegroupsGetGroupConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.GetGroupConfiguration", input)
	return &ResourcegroupsGetGroupConfigurationFuture{Future: future}
}

func (a *ResourceGroupsStub) GetGroupQuery(ctx workflow.Context, input *resourcegroups.GetGroupQueryInput) (*resourcegroups.GetGroupQueryOutput, error) {
	var output resourcegroups.GetGroupQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.GetGroupQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) GetGroupQueryAsync(ctx workflow.Context, input *resourcegroups.GetGroupQueryInput) *ResourcegroupsGetGroupQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.GetGroupQuery", input)
	return &ResourcegroupsGetGroupQueryFuture{Future: future}
}

func (a *ResourceGroupsStub) GetTags(ctx workflow.Context, input *resourcegroups.GetTagsInput) (*resourcegroups.GetTagsOutput, error) {
	var output resourcegroups.GetTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.GetTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) GetTagsAsync(ctx workflow.Context, input *resourcegroups.GetTagsInput) *ResourcegroupsGetTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.GetTags", input)
	return &ResourcegroupsGetTagsFuture{Future: future}
}

func (a *ResourceGroupsStub) GroupResources(ctx workflow.Context, input *resourcegroups.GroupResourcesInput) (*resourcegroups.GroupResourcesOutput, error) {
	var output resourcegroups.GroupResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.GroupResources", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) GroupResourcesAsync(ctx workflow.Context, input *resourcegroups.GroupResourcesInput) *ResourcegroupsGroupResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.GroupResources", input)
	return &ResourcegroupsGroupResourcesFuture{Future: future}
}

func (a *ResourceGroupsStub) ListGroupResources(ctx workflow.Context, input *resourcegroups.ListGroupResourcesInput) (*resourcegroups.ListGroupResourcesOutput, error) {
	var output resourcegroups.ListGroupResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.ListGroupResources", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) ListGroupResourcesAsync(ctx workflow.Context, input *resourcegroups.ListGroupResourcesInput) *ResourcegroupsListGroupResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.ListGroupResources", input)
	return &ResourcegroupsListGroupResourcesFuture{Future: future}
}

func (a *ResourceGroupsStub) ListGroups(ctx workflow.Context, input *resourcegroups.ListGroupsInput) (*resourcegroups.ListGroupsOutput, error) {
	var output resourcegroups.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) ListGroupsAsync(ctx workflow.Context, input *resourcegroups.ListGroupsInput) *ResourcegroupsListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.ListGroups", input)
	return &ResourcegroupsListGroupsFuture{Future: future}
}

func (a *ResourceGroupsStub) SearchResources(ctx workflow.Context, input *resourcegroups.SearchResourcesInput) (*resourcegroups.SearchResourcesOutput, error) {
	var output resourcegroups.SearchResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.SearchResources", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) SearchResourcesAsync(ctx workflow.Context, input *resourcegroups.SearchResourcesInput) *ResourcegroupsSearchResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.SearchResources", input)
	return &ResourcegroupsSearchResourcesFuture{Future: future}
}

func (a *ResourceGroupsStub) Tag(ctx workflow.Context, input *resourcegroups.TagInput) (*resourcegroups.TagOutput, error) {
	var output resourcegroups.TagOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.Tag", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) TagAsync(ctx workflow.Context, input *resourcegroups.TagInput) *ResourcegroupsTagFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.Tag", input)
	return &ResourcegroupsTagFuture{Future: future}
}

func (a *ResourceGroupsStub) UngroupResources(ctx workflow.Context, input *resourcegroups.UngroupResourcesInput) (*resourcegroups.UngroupResourcesOutput, error) {
	var output resourcegroups.UngroupResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.UngroupResources", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) UngroupResourcesAsync(ctx workflow.Context, input *resourcegroups.UngroupResourcesInput) *ResourcegroupsUngroupResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.UngroupResources", input)
	return &ResourcegroupsUngroupResourcesFuture{Future: future}
}

func (a *ResourceGroupsStub) Untag(ctx workflow.Context, input *resourcegroups.UntagInput) (*resourcegroups.UntagOutput, error) {
	var output resourcegroups.UntagOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.Untag", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) UntagAsync(ctx workflow.Context, input *resourcegroups.UntagInput) *ResourcegroupsUntagFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.Untag", input)
	return &ResourcegroupsUntagFuture{Future: future}
}

func (a *ResourceGroupsStub) UpdateGroup(ctx workflow.Context, input *resourcegroups.UpdateGroupInput) (*resourcegroups.UpdateGroupOutput, error) {
	var output resourcegroups.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) UpdateGroupAsync(ctx workflow.Context, input *resourcegroups.UpdateGroupInput) *ResourcegroupsUpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.UpdateGroup", input)
	return &ResourcegroupsUpdateGroupFuture{Future: future}
}

func (a *ResourceGroupsStub) UpdateGroupQuery(ctx workflow.Context, input *resourcegroups.UpdateGroupQueryInput) (*resourcegroups.UpdateGroupQueryOutput, error) {
	var output resourcegroups.UpdateGroupQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws.resourcegroups.UpdateGroupQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *ResourceGroupsStub) UpdateGroupQueryAsync(ctx workflow.Context, input *resourcegroups.UpdateGroupQueryInput) *ResourcegroupsUpdateGroupQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.resourcegroups.UpdateGroupQuery", input)
	return &ResourcegroupsUpdateGroupQueryFuture{Future: future}
}
