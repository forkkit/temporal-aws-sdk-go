// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cognitoidentity"
	"go.temporal.io/sdk/workflow"
)

type CognitoIdentityClient interface {
	CreateIdentityPool(ctx workflow.Context, input *cognitoidentity.CreateIdentityPoolInput) (*cognitoidentity.IdentityPool, error)
	CreateIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.CreateIdentityPoolInput) *CognitoIdentityCreateIdentityPoolFuture

	DeleteIdentities(ctx workflow.Context, input *cognitoidentity.DeleteIdentitiesInput) (*cognitoidentity.DeleteIdentitiesOutput, error)
	DeleteIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.DeleteIdentitiesInput) *CognitoIdentityDeleteIdentitiesFuture

	DeleteIdentityPool(ctx workflow.Context, input *cognitoidentity.DeleteIdentityPoolInput) (*cognitoidentity.DeleteIdentityPoolOutput, error)
	DeleteIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.DeleteIdentityPoolInput) *CognitoIdentityDeleteIdentityPoolFuture

	DescribeIdentity(ctx workflow.Context, input *cognitoidentity.DescribeIdentityInput) (*cognitoidentity.IdentityDescription, error)
	DescribeIdentityAsync(ctx workflow.Context, input *cognitoidentity.DescribeIdentityInput) *CognitoIdentityDescribeIdentityFuture

	DescribeIdentityPool(ctx workflow.Context, input *cognitoidentity.DescribeIdentityPoolInput) (*cognitoidentity.IdentityPool, error)
	DescribeIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.DescribeIdentityPoolInput) *CognitoIdentityDescribeIdentityPoolFuture

	GetCredentialsForIdentity(ctx workflow.Context, input *cognitoidentity.GetCredentialsForIdentityInput) (*cognitoidentity.GetCredentialsForIdentityOutput, error)
	GetCredentialsForIdentityAsync(ctx workflow.Context, input *cognitoidentity.GetCredentialsForIdentityInput) *CognitoIdentityGetCredentialsForIdentityFuture

	GetId(ctx workflow.Context, input *cognitoidentity.GetIdInput) (*cognitoidentity.GetIdOutput, error)
	GetIdAsync(ctx workflow.Context, input *cognitoidentity.GetIdInput) *CognitoIdentityGetIdFuture

	GetIdentityPoolRoles(ctx workflow.Context, input *cognitoidentity.GetIdentityPoolRolesInput) (*cognitoidentity.GetIdentityPoolRolesOutput, error)
	GetIdentityPoolRolesAsync(ctx workflow.Context, input *cognitoidentity.GetIdentityPoolRolesInput) *CognitoIdentityGetIdentityPoolRolesFuture

	GetOpenIdToken(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenInput) (*cognitoidentity.GetOpenIdTokenOutput, error)
	GetOpenIdTokenAsync(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenInput) *CognitoIdentityGetOpenIdTokenFuture

	GetOpenIdTokenForDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput) (*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, error)
	GetOpenIdTokenForDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput) *CognitoIdentityGetOpenIdTokenForDeveloperIdentityFuture

	ListIdentities(ctx workflow.Context, input *cognitoidentity.ListIdentitiesInput) (*cognitoidentity.ListIdentitiesOutput, error)
	ListIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.ListIdentitiesInput) *CognitoIdentityListIdentitiesFuture

	ListIdentityPools(ctx workflow.Context, input *cognitoidentity.ListIdentityPoolsInput) (*cognitoidentity.ListIdentityPoolsOutput, error)
	ListIdentityPoolsAsync(ctx workflow.Context, input *cognitoidentity.ListIdentityPoolsInput) *CognitoIdentityListIdentityPoolsFuture

	ListTagsForResource(ctx workflow.Context, input *cognitoidentity.ListTagsForResourceInput) (*cognitoidentity.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *cognitoidentity.ListTagsForResourceInput) *CognitoIdentityListTagsForResourceFuture

	LookupDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.LookupDeveloperIdentityInput) (*cognitoidentity.LookupDeveloperIdentityOutput, error)
	LookupDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.LookupDeveloperIdentityInput) *CognitoIdentityLookupDeveloperIdentityFuture

	MergeDeveloperIdentities(ctx workflow.Context, input *cognitoidentity.MergeDeveloperIdentitiesInput) (*cognitoidentity.MergeDeveloperIdentitiesOutput, error)
	MergeDeveloperIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.MergeDeveloperIdentitiesInput) *CognitoIdentityMergeDeveloperIdentitiesFuture

	SetIdentityPoolRoles(ctx workflow.Context, input *cognitoidentity.SetIdentityPoolRolesInput) (*cognitoidentity.SetIdentityPoolRolesOutput, error)
	SetIdentityPoolRolesAsync(ctx workflow.Context, input *cognitoidentity.SetIdentityPoolRolesInput) *CognitoIdentitySetIdentityPoolRolesFuture

	TagResource(ctx workflow.Context, input *cognitoidentity.TagResourceInput) (*cognitoidentity.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *cognitoidentity.TagResourceInput) *CognitoIdentityTagResourceFuture

	UnlinkDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.UnlinkDeveloperIdentityInput) (*cognitoidentity.UnlinkDeveloperIdentityOutput, error)
	UnlinkDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.UnlinkDeveloperIdentityInput) *CognitoIdentityUnlinkDeveloperIdentityFuture

	UnlinkIdentity(ctx workflow.Context, input *cognitoidentity.UnlinkIdentityInput) (*cognitoidentity.UnlinkIdentityOutput, error)
	UnlinkIdentityAsync(ctx workflow.Context, input *cognitoidentity.UnlinkIdentityInput) *CognitoIdentityUnlinkIdentityFuture

	UntagResource(ctx workflow.Context, input *cognitoidentity.UntagResourceInput) (*cognitoidentity.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *cognitoidentity.UntagResourceInput) *CognitoIdentityUntagResourceFuture

	UpdateIdentityPool(ctx workflow.Context, input *cognitoidentity.IdentityPool) (*cognitoidentity.IdentityPool, error)
	UpdateIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.IdentityPool) *CognitoIdentityUpdateIdentityPoolFuture
}

type CognitoIdentityStub struct{}

func NewCognitoIdentityStub() CognitoIdentityClient {
	return &CognitoIdentityStub{}
}

type CognitoIdentityCreateIdentityPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityCreateIdentityPoolFuture) Get(ctx workflow.Context) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityDeleteIdentitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityDeleteIdentitiesFuture) Get(ctx workflow.Context) (*cognitoidentity.DeleteIdentitiesOutput, error) {
	var output cognitoidentity.DeleteIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityDeleteIdentityPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityDeleteIdentityPoolFuture) Get(ctx workflow.Context) (*cognitoidentity.DeleteIdentityPoolOutput, error) {
	var output cognitoidentity.DeleteIdentityPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityDescribeIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityDescribeIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.IdentityDescription, error) {
	var output cognitoidentity.IdentityDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityDescribeIdentityPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityDescribeIdentityPoolFuture) Get(ctx workflow.Context) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityGetCredentialsForIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityGetCredentialsForIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.GetCredentialsForIdentityOutput, error) {
	var output cognitoidentity.GetCredentialsForIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityGetIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityGetIdFuture) Get(ctx workflow.Context) (*cognitoidentity.GetIdOutput, error) {
	var output cognitoidentity.GetIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityGetIdentityPoolRolesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityGetIdentityPoolRolesFuture) Get(ctx workflow.Context) (*cognitoidentity.GetIdentityPoolRolesOutput, error) {
	var output cognitoidentity.GetIdentityPoolRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityGetOpenIdTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityGetOpenIdTokenFuture) Get(ctx workflow.Context) (*cognitoidentity.GetOpenIdTokenOutput, error) {
	var output cognitoidentity.GetOpenIdTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityGetOpenIdTokenForDeveloperIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityGetOpenIdTokenForDeveloperIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, error) {
	var output cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityListIdentitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityListIdentitiesFuture) Get(ctx workflow.Context) (*cognitoidentity.ListIdentitiesOutput, error) {
	var output cognitoidentity.ListIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityListIdentityPoolsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityListIdentityPoolsFuture) Get(ctx workflow.Context) (*cognitoidentity.ListIdentityPoolsOutput, error) {
	var output cognitoidentity.ListIdentityPoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityListTagsForResourceFuture) Get(ctx workflow.Context) (*cognitoidentity.ListTagsForResourceOutput, error) {
	var output cognitoidentity.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityLookupDeveloperIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityLookupDeveloperIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.LookupDeveloperIdentityOutput, error) {
	var output cognitoidentity.LookupDeveloperIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityMergeDeveloperIdentitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityMergeDeveloperIdentitiesFuture) Get(ctx workflow.Context) (*cognitoidentity.MergeDeveloperIdentitiesOutput, error) {
	var output cognitoidentity.MergeDeveloperIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentitySetIdentityPoolRolesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentitySetIdentityPoolRolesFuture) Get(ctx workflow.Context) (*cognitoidentity.SetIdentityPoolRolesOutput, error) {
	var output cognitoidentity.SetIdentityPoolRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityTagResourceFuture) Get(ctx workflow.Context) (*cognitoidentity.TagResourceOutput, error) {
	var output cognitoidentity.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityUnlinkDeveloperIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityUnlinkDeveloperIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.UnlinkDeveloperIdentityOutput, error) {
	var output cognitoidentity.UnlinkDeveloperIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityUnlinkIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityUnlinkIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.UnlinkIdentityOutput, error) {
	var output cognitoidentity.UnlinkIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityUntagResourceFuture) Get(ctx workflow.Context) (*cognitoidentity.UntagResourceOutput, error) {
	var output cognitoidentity.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityUpdateIdentityPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityUpdateIdentityPoolFuture) Get(ctx workflow.Context) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) CreateIdentityPool(ctx workflow.Context, input *cognitoidentity.CreateIdentityPoolInput) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.CreateIdentityPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) CreateIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.CreateIdentityPoolInput) *CognitoIdentityCreateIdentityPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.CreateIdentityPool", input)
	return &CognitoIdentityCreateIdentityPoolFuture{Future: future}
}

func (a *CognitoIdentityStub) DeleteIdentities(ctx workflow.Context, input *cognitoidentity.DeleteIdentitiesInput) (*cognitoidentity.DeleteIdentitiesOutput, error) {
	var output cognitoidentity.DeleteIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DeleteIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) DeleteIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.DeleteIdentitiesInput) *CognitoIdentityDeleteIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DeleteIdentities", input)
	return &CognitoIdentityDeleteIdentitiesFuture{Future: future}
}

func (a *CognitoIdentityStub) DeleteIdentityPool(ctx workflow.Context, input *cognitoidentity.DeleteIdentityPoolInput) (*cognitoidentity.DeleteIdentityPoolOutput, error) {
	var output cognitoidentity.DeleteIdentityPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DeleteIdentityPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) DeleteIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.DeleteIdentityPoolInput) *CognitoIdentityDeleteIdentityPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DeleteIdentityPool", input)
	return &CognitoIdentityDeleteIdentityPoolFuture{Future: future}
}

func (a *CognitoIdentityStub) DescribeIdentity(ctx workflow.Context, input *cognitoidentity.DescribeIdentityInput) (*cognitoidentity.IdentityDescription, error) {
	var output cognitoidentity.IdentityDescription
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DescribeIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) DescribeIdentityAsync(ctx workflow.Context, input *cognitoidentity.DescribeIdentityInput) *CognitoIdentityDescribeIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DescribeIdentity", input)
	return &CognitoIdentityDescribeIdentityFuture{Future: future}
}

func (a *CognitoIdentityStub) DescribeIdentityPool(ctx workflow.Context, input *cognitoidentity.DescribeIdentityPoolInput) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DescribeIdentityPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) DescribeIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.DescribeIdentityPoolInput) *CognitoIdentityDescribeIdentityPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DescribeIdentityPool", input)
	return &CognitoIdentityDescribeIdentityPoolFuture{Future: future}
}

func (a *CognitoIdentityStub) GetCredentialsForIdentity(ctx workflow.Context, input *cognitoidentity.GetCredentialsForIdentityInput) (*cognitoidentity.GetCredentialsForIdentityOutput, error) {
	var output cognitoidentity.GetCredentialsForIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetCredentialsForIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) GetCredentialsForIdentityAsync(ctx workflow.Context, input *cognitoidentity.GetCredentialsForIdentityInput) *CognitoIdentityGetCredentialsForIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetCredentialsForIdentity", input)
	return &CognitoIdentityGetCredentialsForIdentityFuture{Future: future}
}

func (a *CognitoIdentityStub) GetId(ctx workflow.Context, input *cognitoidentity.GetIdInput) (*cognitoidentity.GetIdOutput, error) {
	var output cognitoidentity.GetIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetId", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) GetIdAsync(ctx workflow.Context, input *cognitoidentity.GetIdInput) *CognitoIdentityGetIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetId", input)
	return &CognitoIdentityGetIdFuture{Future: future}
}

func (a *CognitoIdentityStub) GetIdentityPoolRoles(ctx workflow.Context, input *cognitoidentity.GetIdentityPoolRolesInput) (*cognitoidentity.GetIdentityPoolRolesOutput, error) {
	var output cognitoidentity.GetIdentityPoolRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetIdentityPoolRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) GetIdentityPoolRolesAsync(ctx workflow.Context, input *cognitoidentity.GetIdentityPoolRolesInput) *CognitoIdentityGetIdentityPoolRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetIdentityPoolRoles", input)
	return &CognitoIdentityGetIdentityPoolRolesFuture{Future: future}
}

func (a *CognitoIdentityStub) GetOpenIdToken(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenInput) (*cognitoidentity.GetOpenIdTokenOutput, error) {
	var output cognitoidentity.GetOpenIdTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetOpenIdToken", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) GetOpenIdTokenAsync(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenInput) *CognitoIdentityGetOpenIdTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetOpenIdToken", input)
	return &CognitoIdentityGetOpenIdTokenFuture{Future: future}
}

func (a *CognitoIdentityStub) GetOpenIdTokenForDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput) (*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, error) {
	var output cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetOpenIdTokenForDeveloperIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) GetOpenIdTokenForDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput) *CognitoIdentityGetOpenIdTokenForDeveloperIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetOpenIdTokenForDeveloperIdentity", input)
	return &CognitoIdentityGetOpenIdTokenForDeveloperIdentityFuture{Future: future}
}

func (a *CognitoIdentityStub) ListIdentities(ctx workflow.Context, input *cognitoidentity.ListIdentitiesInput) (*cognitoidentity.ListIdentitiesOutput, error) {
	var output cognitoidentity.ListIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.ListIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) ListIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.ListIdentitiesInput) *CognitoIdentityListIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.ListIdentities", input)
	return &CognitoIdentityListIdentitiesFuture{Future: future}
}

func (a *CognitoIdentityStub) ListIdentityPools(ctx workflow.Context, input *cognitoidentity.ListIdentityPoolsInput) (*cognitoidentity.ListIdentityPoolsOutput, error) {
	var output cognitoidentity.ListIdentityPoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.ListIdentityPools", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) ListIdentityPoolsAsync(ctx workflow.Context, input *cognitoidentity.ListIdentityPoolsInput) *CognitoIdentityListIdentityPoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.ListIdentityPools", input)
	return &CognitoIdentityListIdentityPoolsFuture{Future: future}
}

func (a *CognitoIdentityStub) ListTagsForResource(ctx workflow.Context, input *cognitoidentity.ListTagsForResourceInput) (*cognitoidentity.ListTagsForResourceOutput, error) {
	var output cognitoidentity.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) ListTagsForResourceAsync(ctx workflow.Context, input *cognitoidentity.ListTagsForResourceInput) *CognitoIdentityListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.ListTagsForResource", input)
	return &CognitoIdentityListTagsForResourceFuture{Future: future}
}

func (a *CognitoIdentityStub) LookupDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.LookupDeveloperIdentityInput) (*cognitoidentity.LookupDeveloperIdentityOutput, error) {
	var output cognitoidentity.LookupDeveloperIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.LookupDeveloperIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) LookupDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.LookupDeveloperIdentityInput) *CognitoIdentityLookupDeveloperIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.LookupDeveloperIdentity", input)
	return &CognitoIdentityLookupDeveloperIdentityFuture{Future: future}
}

func (a *CognitoIdentityStub) MergeDeveloperIdentities(ctx workflow.Context, input *cognitoidentity.MergeDeveloperIdentitiesInput) (*cognitoidentity.MergeDeveloperIdentitiesOutput, error) {
	var output cognitoidentity.MergeDeveloperIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.MergeDeveloperIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) MergeDeveloperIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.MergeDeveloperIdentitiesInput) *CognitoIdentityMergeDeveloperIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.MergeDeveloperIdentities", input)
	return &CognitoIdentityMergeDeveloperIdentitiesFuture{Future: future}
}

func (a *CognitoIdentityStub) SetIdentityPoolRoles(ctx workflow.Context, input *cognitoidentity.SetIdentityPoolRolesInput) (*cognitoidentity.SetIdentityPoolRolesOutput, error) {
	var output cognitoidentity.SetIdentityPoolRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.SetIdentityPoolRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) SetIdentityPoolRolesAsync(ctx workflow.Context, input *cognitoidentity.SetIdentityPoolRolesInput) *CognitoIdentitySetIdentityPoolRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.SetIdentityPoolRoles", input)
	return &CognitoIdentitySetIdentityPoolRolesFuture{Future: future}
}

func (a *CognitoIdentityStub) TagResource(ctx workflow.Context, input *cognitoidentity.TagResourceInput) (*cognitoidentity.TagResourceOutput, error) {
	var output cognitoidentity.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) TagResourceAsync(ctx workflow.Context, input *cognitoidentity.TagResourceInput) *CognitoIdentityTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.TagResource", input)
	return &CognitoIdentityTagResourceFuture{Future: future}
}

func (a *CognitoIdentityStub) UnlinkDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.UnlinkDeveloperIdentityInput) (*cognitoidentity.UnlinkDeveloperIdentityOutput, error) {
	var output cognitoidentity.UnlinkDeveloperIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UnlinkDeveloperIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) UnlinkDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.UnlinkDeveloperIdentityInput) *CognitoIdentityUnlinkDeveloperIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UnlinkDeveloperIdentity", input)
	return &CognitoIdentityUnlinkDeveloperIdentityFuture{Future: future}
}

func (a *CognitoIdentityStub) UnlinkIdentity(ctx workflow.Context, input *cognitoidentity.UnlinkIdentityInput) (*cognitoidentity.UnlinkIdentityOutput, error) {
	var output cognitoidentity.UnlinkIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UnlinkIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) UnlinkIdentityAsync(ctx workflow.Context, input *cognitoidentity.UnlinkIdentityInput) *CognitoIdentityUnlinkIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UnlinkIdentity", input)
	return &CognitoIdentityUnlinkIdentityFuture{Future: future}
}

func (a *CognitoIdentityStub) UntagResource(ctx workflow.Context, input *cognitoidentity.UntagResourceInput) (*cognitoidentity.UntagResourceOutput, error) {
	var output cognitoidentity.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) UntagResourceAsync(ctx workflow.Context, input *cognitoidentity.UntagResourceInput) *CognitoIdentityUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UntagResource", input)
	return &CognitoIdentityUntagResourceFuture{Future: future}
}

func (a *CognitoIdentityStub) UpdateIdentityPool(ctx workflow.Context, input *cognitoidentity.IdentityPool) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UpdateIdentityPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) UpdateIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.IdentityPool) *CognitoIdentityUpdateIdentityPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UpdateIdentityPool", input)
	return &CognitoIdentityUpdateIdentityPoolFuture{Future: future}
}
