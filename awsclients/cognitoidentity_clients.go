// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cognitoidentity"
	"go.temporal.io/sdk/workflow"
)

type CognitoIdentityClient interface {
	CreateIdentityPool(ctx workflow.Context, input *cognitoidentity.CreateIdentityPoolInput) (*cognitoidentity.IdentityPool, error)
	CreateIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.CreateIdentityPoolInput) *CognitoidentityCreateIdentityPoolFuture

	DeleteIdentities(ctx workflow.Context, input *cognitoidentity.DeleteIdentitiesInput) (*cognitoidentity.DeleteIdentitiesOutput, error)
	DeleteIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.DeleteIdentitiesInput) *CognitoidentityDeleteIdentitiesFuture

	DeleteIdentityPool(ctx workflow.Context, input *cognitoidentity.DeleteIdentityPoolInput) (*cognitoidentity.DeleteIdentityPoolOutput, error)
	DeleteIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.DeleteIdentityPoolInput) *CognitoidentityDeleteIdentityPoolFuture

	DescribeIdentity(ctx workflow.Context, input *cognitoidentity.DescribeIdentityInput) (*cognitoidentity.IdentityDescription, error)
	DescribeIdentityAsync(ctx workflow.Context, input *cognitoidentity.DescribeIdentityInput) *CognitoidentityDescribeIdentityFuture

	DescribeIdentityPool(ctx workflow.Context, input *cognitoidentity.DescribeIdentityPoolInput) (*cognitoidentity.IdentityPool, error)
	DescribeIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.DescribeIdentityPoolInput) *CognitoidentityDescribeIdentityPoolFuture

	GetCredentialsForIdentity(ctx workflow.Context, input *cognitoidentity.GetCredentialsForIdentityInput) (*cognitoidentity.GetCredentialsForIdentityOutput, error)
	GetCredentialsForIdentityAsync(ctx workflow.Context, input *cognitoidentity.GetCredentialsForIdentityInput) *CognitoidentityGetCredentialsForIdentityFuture

	GetId(ctx workflow.Context, input *cognitoidentity.GetIdInput) (*cognitoidentity.GetIdOutput, error)
	GetIdAsync(ctx workflow.Context, input *cognitoidentity.GetIdInput) *CognitoidentityGetIdFuture

	GetIdentityPoolRoles(ctx workflow.Context, input *cognitoidentity.GetIdentityPoolRolesInput) (*cognitoidentity.GetIdentityPoolRolesOutput, error)
	GetIdentityPoolRolesAsync(ctx workflow.Context, input *cognitoidentity.GetIdentityPoolRolesInput) *CognitoidentityGetIdentityPoolRolesFuture

	GetOpenIdToken(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenInput) (*cognitoidentity.GetOpenIdTokenOutput, error)
	GetOpenIdTokenAsync(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenInput) *CognitoidentityGetOpenIdTokenFuture

	GetOpenIdTokenForDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput) (*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, error)
	GetOpenIdTokenForDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput) *CognitoidentityGetOpenIdTokenForDeveloperIdentityFuture

	ListIdentities(ctx workflow.Context, input *cognitoidentity.ListIdentitiesInput) (*cognitoidentity.ListIdentitiesOutput, error)
	ListIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.ListIdentitiesInput) *CognitoidentityListIdentitiesFuture

	ListIdentityPools(ctx workflow.Context, input *cognitoidentity.ListIdentityPoolsInput) (*cognitoidentity.ListIdentityPoolsOutput, error)
	ListIdentityPoolsAsync(ctx workflow.Context, input *cognitoidentity.ListIdentityPoolsInput) *CognitoidentityListIdentityPoolsFuture

	ListTagsForResource(ctx workflow.Context, input *cognitoidentity.ListTagsForResourceInput) (*cognitoidentity.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *cognitoidentity.ListTagsForResourceInput) *CognitoidentityListTagsForResourceFuture

	LookupDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.LookupDeveloperIdentityInput) (*cognitoidentity.LookupDeveloperIdentityOutput, error)
	LookupDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.LookupDeveloperIdentityInput) *CognitoidentityLookupDeveloperIdentityFuture

	MergeDeveloperIdentities(ctx workflow.Context, input *cognitoidentity.MergeDeveloperIdentitiesInput) (*cognitoidentity.MergeDeveloperIdentitiesOutput, error)
	MergeDeveloperIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.MergeDeveloperIdentitiesInput) *CognitoidentityMergeDeveloperIdentitiesFuture

	SetIdentityPoolRoles(ctx workflow.Context, input *cognitoidentity.SetIdentityPoolRolesInput) (*cognitoidentity.SetIdentityPoolRolesOutput, error)
	SetIdentityPoolRolesAsync(ctx workflow.Context, input *cognitoidentity.SetIdentityPoolRolesInput) *CognitoidentitySetIdentityPoolRolesFuture

	TagResource(ctx workflow.Context, input *cognitoidentity.TagResourceInput) (*cognitoidentity.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *cognitoidentity.TagResourceInput) *CognitoidentityTagResourceFuture

	UnlinkDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.UnlinkDeveloperIdentityInput) (*cognitoidentity.UnlinkDeveloperIdentityOutput, error)
	UnlinkDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.UnlinkDeveloperIdentityInput) *CognitoidentityUnlinkDeveloperIdentityFuture

	UnlinkIdentity(ctx workflow.Context, input *cognitoidentity.UnlinkIdentityInput) (*cognitoidentity.UnlinkIdentityOutput, error)
	UnlinkIdentityAsync(ctx workflow.Context, input *cognitoidentity.UnlinkIdentityInput) *CognitoidentityUnlinkIdentityFuture

	UntagResource(ctx workflow.Context, input *cognitoidentity.UntagResourceInput) (*cognitoidentity.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *cognitoidentity.UntagResourceInput) *CognitoidentityUntagResourceFuture

	UpdateIdentityPool(ctx workflow.Context, input *cognitoidentity.IdentityPool) (*cognitoidentity.IdentityPool, error)
	UpdateIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.IdentityPool) *CognitoidentityUpdateIdentityPoolFuture
}

type CognitoIdentityStub struct{}

func NewCognitoIdentityStub() CognitoIdentityClient {
	return &CognitoIdentityStub{}
}

type CognitoidentityCreateIdentityPoolFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityCreateIdentityPoolFuture) Get(ctx workflow.Context) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityDeleteIdentitiesFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityDeleteIdentitiesFuture) Get(ctx workflow.Context) (*cognitoidentity.DeleteIdentitiesOutput, error) {
	var output cognitoidentity.DeleteIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityDeleteIdentityPoolFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityDeleteIdentityPoolFuture) Get(ctx workflow.Context) (*cognitoidentity.DeleteIdentityPoolOutput, error) {
	var output cognitoidentity.DeleteIdentityPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityDescribeIdentityFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityDescribeIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.IdentityDescription, error) {
	var output cognitoidentity.IdentityDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityDescribeIdentityPoolFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityDescribeIdentityPoolFuture) Get(ctx workflow.Context) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityGetCredentialsForIdentityFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityGetCredentialsForIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.GetCredentialsForIdentityOutput, error) {
	var output cognitoidentity.GetCredentialsForIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityGetIdFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityGetIdFuture) Get(ctx workflow.Context) (*cognitoidentity.GetIdOutput, error) {
	var output cognitoidentity.GetIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityGetIdentityPoolRolesFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityGetIdentityPoolRolesFuture) Get(ctx workflow.Context) (*cognitoidentity.GetIdentityPoolRolesOutput, error) {
	var output cognitoidentity.GetIdentityPoolRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityGetOpenIdTokenFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityGetOpenIdTokenFuture) Get(ctx workflow.Context) (*cognitoidentity.GetOpenIdTokenOutput, error) {
	var output cognitoidentity.GetOpenIdTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityGetOpenIdTokenForDeveloperIdentityFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityGetOpenIdTokenForDeveloperIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, error) {
	var output cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityListIdentitiesFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityListIdentitiesFuture) Get(ctx workflow.Context) (*cognitoidentity.ListIdentitiesOutput, error) {
	var output cognitoidentity.ListIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityListIdentityPoolsFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityListIdentityPoolsFuture) Get(ctx workflow.Context) (*cognitoidentity.ListIdentityPoolsOutput, error) {
	var output cognitoidentity.ListIdentityPoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityListTagsForResourceFuture) Get(ctx workflow.Context) (*cognitoidentity.ListTagsForResourceOutput, error) {
	var output cognitoidentity.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityLookupDeveloperIdentityFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityLookupDeveloperIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.LookupDeveloperIdentityOutput, error) {
	var output cognitoidentity.LookupDeveloperIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityMergeDeveloperIdentitiesFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityMergeDeveloperIdentitiesFuture) Get(ctx workflow.Context) (*cognitoidentity.MergeDeveloperIdentitiesOutput, error) {
	var output cognitoidentity.MergeDeveloperIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentitySetIdentityPoolRolesFuture struct {
	Future workflow.Future
}

func (r *CognitoidentitySetIdentityPoolRolesFuture) Get(ctx workflow.Context) (*cognitoidentity.SetIdentityPoolRolesOutput, error) {
	var output cognitoidentity.SetIdentityPoolRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityTagResourceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityTagResourceFuture) Get(ctx workflow.Context) (*cognitoidentity.TagResourceOutput, error) {
	var output cognitoidentity.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityUnlinkDeveloperIdentityFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityUnlinkDeveloperIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.UnlinkDeveloperIdentityOutput, error) {
	var output cognitoidentity.UnlinkDeveloperIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityUnlinkIdentityFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityUnlinkIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.UnlinkIdentityOutput, error) {
	var output cognitoidentity.UnlinkIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityUntagResourceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityUntagResourceFuture) Get(ctx workflow.Context) (*cognitoidentity.UntagResourceOutput, error) {
	var output cognitoidentity.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityUpdateIdentityPoolFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityUpdateIdentityPoolFuture) Get(ctx workflow.Context) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) CreateIdentityPool(ctx workflow.Context, input *cognitoidentity.CreateIdentityPoolInput) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.CreateIdentityPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) CreateIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.CreateIdentityPoolInput) *CognitoidentityCreateIdentityPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.CreateIdentityPool", input)
	return &CognitoidentityCreateIdentityPoolFuture{Future: future}
}

func (a *CognitoIdentityStub) DeleteIdentities(ctx workflow.Context, input *cognitoidentity.DeleteIdentitiesInput) (*cognitoidentity.DeleteIdentitiesOutput, error) {
	var output cognitoidentity.DeleteIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DeleteIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) DeleteIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.DeleteIdentitiesInput) *CognitoidentityDeleteIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DeleteIdentities", input)
	return &CognitoidentityDeleteIdentitiesFuture{Future: future}
}

func (a *CognitoIdentityStub) DeleteIdentityPool(ctx workflow.Context, input *cognitoidentity.DeleteIdentityPoolInput) (*cognitoidentity.DeleteIdentityPoolOutput, error) {
	var output cognitoidentity.DeleteIdentityPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DeleteIdentityPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) DeleteIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.DeleteIdentityPoolInput) *CognitoidentityDeleteIdentityPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DeleteIdentityPool", input)
	return &CognitoidentityDeleteIdentityPoolFuture{Future: future}
}

func (a *CognitoIdentityStub) DescribeIdentity(ctx workflow.Context, input *cognitoidentity.DescribeIdentityInput) (*cognitoidentity.IdentityDescription, error) {
	var output cognitoidentity.IdentityDescription
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DescribeIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) DescribeIdentityAsync(ctx workflow.Context, input *cognitoidentity.DescribeIdentityInput) *CognitoidentityDescribeIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DescribeIdentity", input)
	return &CognitoidentityDescribeIdentityFuture{Future: future}
}

func (a *CognitoIdentityStub) DescribeIdentityPool(ctx workflow.Context, input *cognitoidentity.DescribeIdentityPoolInput) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DescribeIdentityPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) DescribeIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.DescribeIdentityPoolInput) *CognitoidentityDescribeIdentityPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.DescribeIdentityPool", input)
	return &CognitoidentityDescribeIdentityPoolFuture{Future: future}
}

func (a *CognitoIdentityStub) GetCredentialsForIdentity(ctx workflow.Context, input *cognitoidentity.GetCredentialsForIdentityInput) (*cognitoidentity.GetCredentialsForIdentityOutput, error) {
	var output cognitoidentity.GetCredentialsForIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetCredentialsForIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) GetCredentialsForIdentityAsync(ctx workflow.Context, input *cognitoidentity.GetCredentialsForIdentityInput) *CognitoidentityGetCredentialsForIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetCredentialsForIdentity", input)
	return &CognitoidentityGetCredentialsForIdentityFuture{Future: future}
}

func (a *CognitoIdentityStub) GetId(ctx workflow.Context, input *cognitoidentity.GetIdInput) (*cognitoidentity.GetIdOutput, error) {
	var output cognitoidentity.GetIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetId", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) GetIdAsync(ctx workflow.Context, input *cognitoidentity.GetIdInput) *CognitoidentityGetIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetId", input)
	return &CognitoidentityGetIdFuture{Future: future}
}

func (a *CognitoIdentityStub) GetIdentityPoolRoles(ctx workflow.Context, input *cognitoidentity.GetIdentityPoolRolesInput) (*cognitoidentity.GetIdentityPoolRolesOutput, error) {
	var output cognitoidentity.GetIdentityPoolRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetIdentityPoolRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) GetIdentityPoolRolesAsync(ctx workflow.Context, input *cognitoidentity.GetIdentityPoolRolesInput) *CognitoidentityGetIdentityPoolRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetIdentityPoolRoles", input)
	return &CognitoidentityGetIdentityPoolRolesFuture{Future: future}
}

func (a *CognitoIdentityStub) GetOpenIdToken(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenInput) (*cognitoidentity.GetOpenIdTokenOutput, error) {
	var output cognitoidentity.GetOpenIdTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetOpenIdToken", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) GetOpenIdTokenAsync(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenInput) *CognitoidentityGetOpenIdTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetOpenIdToken", input)
	return &CognitoidentityGetOpenIdTokenFuture{Future: future}
}

func (a *CognitoIdentityStub) GetOpenIdTokenForDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput) (*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, error) {
	var output cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetOpenIdTokenForDeveloperIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) GetOpenIdTokenForDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput) *CognitoidentityGetOpenIdTokenForDeveloperIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.GetOpenIdTokenForDeveloperIdentity", input)
	return &CognitoidentityGetOpenIdTokenForDeveloperIdentityFuture{Future: future}
}

func (a *CognitoIdentityStub) ListIdentities(ctx workflow.Context, input *cognitoidentity.ListIdentitiesInput) (*cognitoidentity.ListIdentitiesOutput, error) {
	var output cognitoidentity.ListIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.ListIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) ListIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.ListIdentitiesInput) *CognitoidentityListIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.ListIdentities", input)
	return &CognitoidentityListIdentitiesFuture{Future: future}
}

func (a *CognitoIdentityStub) ListIdentityPools(ctx workflow.Context, input *cognitoidentity.ListIdentityPoolsInput) (*cognitoidentity.ListIdentityPoolsOutput, error) {
	var output cognitoidentity.ListIdentityPoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.ListIdentityPools", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) ListIdentityPoolsAsync(ctx workflow.Context, input *cognitoidentity.ListIdentityPoolsInput) *CognitoidentityListIdentityPoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.ListIdentityPools", input)
	return &CognitoidentityListIdentityPoolsFuture{Future: future}
}

func (a *CognitoIdentityStub) ListTagsForResource(ctx workflow.Context, input *cognitoidentity.ListTagsForResourceInput) (*cognitoidentity.ListTagsForResourceOutput, error) {
	var output cognitoidentity.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) ListTagsForResourceAsync(ctx workflow.Context, input *cognitoidentity.ListTagsForResourceInput) *CognitoidentityListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.ListTagsForResource", input)
	return &CognitoidentityListTagsForResourceFuture{Future: future}
}

func (a *CognitoIdentityStub) LookupDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.LookupDeveloperIdentityInput) (*cognitoidentity.LookupDeveloperIdentityOutput, error) {
	var output cognitoidentity.LookupDeveloperIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.LookupDeveloperIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) LookupDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.LookupDeveloperIdentityInput) *CognitoidentityLookupDeveloperIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.LookupDeveloperIdentity", input)
	return &CognitoidentityLookupDeveloperIdentityFuture{Future: future}
}

func (a *CognitoIdentityStub) MergeDeveloperIdentities(ctx workflow.Context, input *cognitoidentity.MergeDeveloperIdentitiesInput) (*cognitoidentity.MergeDeveloperIdentitiesOutput, error) {
	var output cognitoidentity.MergeDeveloperIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.MergeDeveloperIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) MergeDeveloperIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.MergeDeveloperIdentitiesInput) *CognitoidentityMergeDeveloperIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.MergeDeveloperIdentities", input)
	return &CognitoidentityMergeDeveloperIdentitiesFuture{Future: future}
}

func (a *CognitoIdentityStub) SetIdentityPoolRoles(ctx workflow.Context, input *cognitoidentity.SetIdentityPoolRolesInput) (*cognitoidentity.SetIdentityPoolRolesOutput, error) {
	var output cognitoidentity.SetIdentityPoolRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.SetIdentityPoolRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) SetIdentityPoolRolesAsync(ctx workflow.Context, input *cognitoidentity.SetIdentityPoolRolesInput) *CognitoidentitySetIdentityPoolRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.SetIdentityPoolRoles", input)
	return &CognitoidentitySetIdentityPoolRolesFuture{Future: future}
}

func (a *CognitoIdentityStub) TagResource(ctx workflow.Context, input *cognitoidentity.TagResourceInput) (*cognitoidentity.TagResourceOutput, error) {
	var output cognitoidentity.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) TagResourceAsync(ctx workflow.Context, input *cognitoidentity.TagResourceInput) *CognitoidentityTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.TagResource", input)
	return &CognitoidentityTagResourceFuture{Future: future}
}

func (a *CognitoIdentityStub) UnlinkDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.UnlinkDeveloperIdentityInput) (*cognitoidentity.UnlinkDeveloperIdentityOutput, error) {
	var output cognitoidentity.UnlinkDeveloperIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UnlinkDeveloperIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) UnlinkDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.UnlinkDeveloperIdentityInput) *CognitoidentityUnlinkDeveloperIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UnlinkDeveloperIdentity", input)
	return &CognitoidentityUnlinkDeveloperIdentityFuture{Future: future}
}

func (a *CognitoIdentityStub) UnlinkIdentity(ctx workflow.Context, input *cognitoidentity.UnlinkIdentityInput) (*cognitoidentity.UnlinkIdentityOutput, error) {
	var output cognitoidentity.UnlinkIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UnlinkIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) UnlinkIdentityAsync(ctx workflow.Context, input *cognitoidentity.UnlinkIdentityInput) *CognitoidentityUnlinkIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UnlinkIdentity", input)
	return &CognitoidentityUnlinkIdentityFuture{Future: future}
}

func (a *CognitoIdentityStub) UntagResource(ctx workflow.Context, input *cognitoidentity.UntagResourceInput) (*cognitoidentity.UntagResourceOutput, error) {
	var output cognitoidentity.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) UntagResourceAsync(ctx workflow.Context, input *cognitoidentity.UntagResourceInput) *CognitoidentityUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UntagResource", input)
	return &CognitoidentityUntagResourceFuture{Future: future}
}

func (a *CognitoIdentityStub) UpdateIdentityPool(ctx workflow.Context, input *cognitoidentity.IdentityPool) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UpdateIdentityPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityStub) UpdateIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.IdentityPool) *CognitoidentityUpdateIdentityPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentity.UpdateIdentityPool", input)
	return &CognitoidentityUpdateIdentityPoolFuture{Future: future}
}
