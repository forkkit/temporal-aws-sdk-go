// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/datapipeline"
	"go.temporal.io/sdk/workflow"
)

type DataPipelineClient interface {
	ActivatePipeline(ctx workflow.Context, input *datapipeline.ActivatePipelineInput) (*datapipeline.ActivatePipelineOutput, error)
	ActivatePipelineAsync(ctx workflow.Context, input *datapipeline.ActivatePipelineInput) *DatapipelineActivatePipelineFuture

	AddTags(ctx workflow.Context, input *datapipeline.AddTagsInput) (*datapipeline.AddTagsOutput, error)
	AddTagsAsync(ctx workflow.Context, input *datapipeline.AddTagsInput) *DatapipelineAddTagsFuture

	CreatePipeline(ctx workflow.Context, input *datapipeline.CreatePipelineInput) (*datapipeline.CreatePipelineOutput, error)
	CreatePipelineAsync(ctx workflow.Context, input *datapipeline.CreatePipelineInput) *DatapipelineCreatePipelineFuture

	DeactivatePipeline(ctx workflow.Context, input *datapipeline.DeactivatePipelineInput) (*datapipeline.DeactivatePipelineOutput, error)
	DeactivatePipelineAsync(ctx workflow.Context, input *datapipeline.DeactivatePipelineInput) *DatapipelineDeactivatePipelineFuture

	DeletePipeline(ctx workflow.Context, input *datapipeline.DeletePipelineInput) (*datapipeline.DeletePipelineOutput, error)
	DeletePipelineAsync(ctx workflow.Context, input *datapipeline.DeletePipelineInput) *DatapipelineDeletePipelineFuture

	DescribeObjects(ctx workflow.Context, input *datapipeline.DescribeObjectsInput) (*datapipeline.DescribeObjectsOutput, error)
	DescribeObjectsAsync(ctx workflow.Context, input *datapipeline.DescribeObjectsInput) *DatapipelineDescribeObjectsFuture

	DescribePipelines(ctx workflow.Context, input *datapipeline.DescribePipelinesInput) (*datapipeline.DescribePipelinesOutput, error)
	DescribePipelinesAsync(ctx workflow.Context, input *datapipeline.DescribePipelinesInput) *DatapipelineDescribePipelinesFuture

	EvaluateExpression(ctx workflow.Context, input *datapipeline.EvaluateExpressionInput) (*datapipeline.EvaluateExpressionOutput, error)
	EvaluateExpressionAsync(ctx workflow.Context, input *datapipeline.EvaluateExpressionInput) *DatapipelineEvaluateExpressionFuture

	GetPipelineDefinition(ctx workflow.Context, input *datapipeline.GetPipelineDefinitionInput) (*datapipeline.GetPipelineDefinitionOutput, error)
	GetPipelineDefinitionAsync(ctx workflow.Context, input *datapipeline.GetPipelineDefinitionInput) *DatapipelineGetPipelineDefinitionFuture

	ListPipelines(ctx workflow.Context, input *datapipeline.ListPipelinesInput) (*datapipeline.ListPipelinesOutput, error)
	ListPipelinesAsync(ctx workflow.Context, input *datapipeline.ListPipelinesInput) *DatapipelineListPipelinesFuture

	PollForTask(ctx workflow.Context, input *datapipeline.PollForTaskInput) (*datapipeline.PollForTaskOutput, error)
	PollForTaskAsync(ctx workflow.Context, input *datapipeline.PollForTaskInput) *DatapipelinePollForTaskFuture

	PutPipelineDefinition(ctx workflow.Context, input *datapipeline.PutPipelineDefinitionInput) (*datapipeline.PutPipelineDefinitionOutput, error)
	PutPipelineDefinitionAsync(ctx workflow.Context, input *datapipeline.PutPipelineDefinitionInput) *DatapipelinePutPipelineDefinitionFuture

	QueryObjects(ctx workflow.Context, input *datapipeline.QueryObjectsInput) (*datapipeline.QueryObjectsOutput, error)
	QueryObjectsAsync(ctx workflow.Context, input *datapipeline.QueryObjectsInput) *DatapipelineQueryObjectsFuture

	RemoveTags(ctx workflow.Context, input *datapipeline.RemoveTagsInput) (*datapipeline.RemoveTagsOutput, error)
	RemoveTagsAsync(ctx workflow.Context, input *datapipeline.RemoveTagsInput) *DatapipelineRemoveTagsFuture

	ReportTaskProgress(ctx workflow.Context, input *datapipeline.ReportTaskProgressInput) (*datapipeline.ReportTaskProgressOutput, error)
	ReportTaskProgressAsync(ctx workflow.Context, input *datapipeline.ReportTaskProgressInput) *DatapipelineReportTaskProgressFuture

	ReportTaskRunnerHeartbeat(ctx workflow.Context, input *datapipeline.ReportTaskRunnerHeartbeatInput) (*datapipeline.ReportTaskRunnerHeartbeatOutput, error)
	ReportTaskRunnerHeartbeatAsync(ctx workflow.Context, input *datapipeline.ReportTaskRunnerHeartbeatInput) *DatapipelineReportTaskRunnerHeartbeatFuture

	SetStatus(ctx workflow.Context, input *datapipeline.SetStatusInput) (*datapipeline.SetStatusOutput, error)
	SetStatusAsync(ctx workflow.Context, input *datapipeline.SetStatusInput) *DatapipelineSetStatusFuture

	SetTaskStatus(ctx workflow.Context, input *datapipeline.SetTaskStatusInput) (*datapipeline.SetTaskStatusOutput, error)
	SetTaskStatusAsync(ctx workflow.Context, input *datapipeline.SetTaskStatusInput) *DatapipelineSetTaskStatusFuture

	ValidatePipelineDefinition(ctx workflow.Context, input *datapipeline.ValidatePipelineDefinitionInput) (*datapipeline.ValidatePipelineDefinitionOutput, error)
	ValidatePipelineDefinitionAsync(ctx workflow.Context, input *datapipeline.ValidatePipelineDefinitionInput) *DatapipelineValidatePipelineDefinitionFuture
}

type DataPipelineStub struct{}

func NewDataPipelineStub() DataPipelineClient {
	return &DataPipelineStub{}
}

type DatapipelineActivatePipelineFuture struct {
	Future workflow.Future
}

func (r *DatapipelineActivatePipelineFuture) Get(ctx workflow.Context) (*datapipeline.ActivatePipelineOutput, error) {
	var output datapipeline.ActivatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineAddTagsFuture struct {
	Future workflow.Future
}

func (r *DatapipelineAddTagsFuture) Get(ctx workflow.Context) (*datapipeline.AddTagsOutput, error) {
	var output datapipeline.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineCreatePipelineFuture struct {
	Future workflow.Future
}

func (r *DatapipelineCreatePipelineFuture) Get(ctx workflow.Context) (*datapipeline.CreatePipelineOutput, error) {
	var output datapipeline.CreatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineDeactivatePipelineFuture struct {
	Future workflow.Future
}

func (r *DatapipelineDeactivatePipelineFuture) Get(ctx workflow.Context) (*datapipeline.DeactivatePipelineOutput, error) {
	var output datapipeline.DeactivatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineDeletePipelineFuture struct {
	Future workflow.Future
}

func (r *DatapipelineDeletePipelineFuture) Get(ctx workflow.Context) (*datapipeline.DeletePipelineOutput, error) {
	var output datapipeline.DeletePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineDescribeObjectsFuture struct {
	Future workflow.Future
}

func (r *DatapipelineDescribeObjectsFuture) Get(ctx workflow.Context) (*datapipeline.DescribeObjectsOutput, error) {
	var output datapipeline.DescribeObjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineDescribePipelinesFuture struct {
	Future workflow.Future
}

func (r *DatapipelineDescribePipelinesFuture) Get(ctx workflow.Context) (*datapipeline.DescribePipelinesOutput, error) {
	var output datapipeline.DescribePipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineEvaluateExpressionFuture struct {
	Future workflow.Future
}

func (r *DatapipelineEvaluateExpressionFuture) Get(ctx workflow.Context) (*datapipeline.EvaluateExpressionOutput, error) {
	var output datapipeline.EvaluateExpressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineGetPipelineDefinitionFuture struct {
	Future workflow.Future
}

func (r *DatapipelineGetPipelineDefinitionFuture) Get(ctx workflow.Context) (*datapipeline.GetPipelineDefinitionOutput, error) {
	var output datapipeline.GetPipelineDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineListPipelinesFuture struct {
	Future workflow.Future
}

func (r *DatapipelineListPipelinesFuture) Get(ctx workflow.Context) (*datapipeline.ListPipelinesOutput, error) {
	var output datapipeline.ListPipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelinePollForTaskFuture struct {
	Future workflow.Future
}

func (r *DatapipelinePollForTaskFuture) Get(ctx workflow.Context) (*datapipeline.PollForTaskOutput, error) {
	var output datapipeline.PollForTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelinePutPipelineDefinitionFuture struct {
	Future workflow.Future
}

func (r *DatapipelinePutPipelineDefinitionFuture) Get(ctx workflow.Context) (*datapipeline.PutPipelineDefinitionOutput, error) {
	var output datapipeline.PutPipelineDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineQueryObjectsFuture struct {
	Future workflow.Future
}

func (r *DatapipelineQueryObjectsFuture) Get(ctx workflow.Context) (*datapipeline.QueryObjectsOutput, error) {
	var output datapipeline.QueryObjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineRemoveTagsFuture struct {
	Future workflow.Future
}

func (r *DatapipelineRemoveTagsFuture) Get(ctx workflow.Context) (*datapipeline.RemoveTagsOutput, error) {
	var output datapipeline.RemoveTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineReportTaskProgressFuture struct {
	Future workflow.Future
}

func (r *DatapipelineReportTaskProgressFuture) Get(ctx workflow.Context) (*datapipeline.ReportTaskProgressOutput, error) {
	var output datapipeline.ReportTaskProgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineReportTaskRunnerHeartbeatFuture struct {
	Future workflow.Future
}

func (r *DatapipelineReportTaskRunnerHeartbeatFuture) Get(ctx workflow.Context) (*datapipeline.ReportTaskRunnerHeartbeatOutput, error) {
	var output datapipeline.ReportTaskRunnerHeartbeatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineSetStatusFuture struct {
	Future workflow.Future
}

func (r *DatapipelineSetStatusFuture) Get(ctx workflow.Context) (*datapipeline.SetStatusOutput, error) {
	var output datapipeline.SetStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineSetTaskStatusFuture struct {
	Future workflow.Future
}

func (r *DatapipelineSetTaskStatusFuture) Get(ctx workflow.Context) (*datapipeline.SetTaskStatusOutput, error) {
	var output datapipeline.SetTaskStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatapipelineValidatePipelineDefinitionFuture struct {
	Future workflow.Future
}

func (r *DatapipelineValidatePipelineDefinitionFuture) Get(ctx workflow.Context) (*datapipeline.ValidatePipelineDefinitionOutput, error) {
	var output datapipeline.ValidatePipelineDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) ActivatePipeline(ctx workflow.Context, input *datapipeline.ActivatePipelineInput) (*datapipeline.ActivatePipelineOutput, error) {
	var output datapipeline.ActivatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.ActivatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) ActivatePipelineAsync(ctx workflow.Context, input *datapipeline.ActivatePipelineInput) *DatapipelineActivatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.ActivatePipeline", input)
	return &DatapipelineActivatePipelineFuture{Future: future}
}

func (a *DataPipelineStub) AddTags(ctx workflow.Context, input *datapipeline.AddTagsInput) (*datapipeline.AddTagsOutput, error) {
	var output datapipeline.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) AddTagsAsync(ctx workflow.Context, input *datapipeline.AddTagsInput) *DatapipelineAddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.AddTags", input)
	return &DatapipelineAddTagsFuture{Future: future}
}

func (a *DataPipelineStub) CreatePipeline(ctx workflow.Context, input *datapipeline.CreatePipelineInput) (*datapipeline.CreatePipelineOutput, error) {
	var output datapipeline.CreatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.CreatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) CreatePipelineAsync(ctx workflow.Context, input *datapipeline.CreatePipelineInput) *DatapipelineCreatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.CreatePipeline", input)
	return &DatapipelineCreatePipelineFuture{Future: future}
}

func (a *DataPipelineStub) DeactivatePipeline(ctx workflow.Context, input *datapipeline.DeactivatePipelineInput) (*datapipeline.DeactivatePipelineOutput, error) {
	var output datapipeline.DeactivatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.DeactivatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) DeactivatePipelineAsync(ctx workflow.Context, input *datapipeline.DeactivatePipelineInput) *DatapipelineDeactivatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.DeactivatePipeline", input)
	return &DatapipelineDeactivatePipelineFuture{Future: future}
}

func (a *DataPipelineStub) DeletePipeline(ctx workflow.Context, input *datapipeline.DeletePipelineInput) (*datapipeline.DeletePipelineOutput, error) {
	var output datapipeline.DeletePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.DeletePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) DeletePipelineAsync(ctx workflow.Context, input *datapipeline.DeletePipelineInput) *DatapipelineDeletePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.DeletePipeline", input)
	return &DatapipelineDeletePipelineFuture{Future: future}
}

func (a *DataPipelineStub) DescribeObjects(ctx workflow.Context, input *datapipeline.DescribeObjectsInput) (*datapipeline.DescribeObjectsOutput, error) {
	var output datapipeline.DescribeObjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.DescribeObjects", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) DescribeObjectsAsync(ctx workflow.Context, input *datapipeline.DescribeObjectsInput) *DatapipelineDescribeObjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.DescribeObjects", input)
	return &DatapipelineDescribeObjectsFuture{Future: future}
}

func (a *DataPipelineStub) DescribePipelines(ctx workflow.Context, input *datapipeline.DescribePipelinesInput) (*datapipeline.DescribePipelinesOutput, error) {
	var output datapipeline.DescribePipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.DescribePipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) DescribePipelinesAsync(ctx workflow.Context, input *datapipeline.DescribePipelinesInput) *DatapipelineDescribePipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.DescribePipelines", input)
	return &DatapipelineDescribePipelinesFuture{Future: future}
}

func (a *DataPipelineStub) EvaluateExpression(ctx workflow.Context, input *datapipeline.EvaluateExpressionInput) (*datapipeline.EvaluateExpressionOutput, error) {
	var output datapipeline.EvaluateExpressionOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.EvaluateExpression", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) EvaluateExpressionAsync(ctx workflow.Context, input *datapipeline.EvaluateExpressionInput) *DatapipelineEvaluateExpressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.EvaluateExpression", input)
	return &DatapipelineEvaluateExpressionFuture{Future: future}
}

func (a *DataPipelineStub) GetPipelineDefinition(ctx workflow.Context, input *datapipeline.GetPipelineDefinitionInput) (*datapipeline.GetPipelineDefinitionOutput, error) {
	var output datapipeline.GetPipelineDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.GetPipelineDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) GetPipelineDefinitionAsync(ctx workflow.Context, input *datapipeline.GetPipelineDefinitionInput) *DatapipelineGetPipelineDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.GetPipelineDefinition", input)
	return &DatapipelineGetPipelineDefinitionFuture{Future: future}
}

func (a *DataPipelineStub) ListPipelines(ctx workflow.Context, input *datapipeline.ListPipelinesInput) (*datapipeline.ListPipelinesOutput, error) {
	var output datapipeline.ListPipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.ListPipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) ListPipelinesAsync(ctx workflow.Context, input *datapipeline.ListPipelinesInput) *DatapipelineListPipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.ListPipelines", input)
	return &DatapipelineListPipelinesFuture{Future: future}
}

func (a *DataPipelineStub) PollForTask(ctx workflow.Context, input *datapipeline.PollForTaskInput) (*datapipeline.PollForTaskOutput, error) {
	var output datapipeline.PollForTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.PollForTask", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) PollForTaskAsync(ctx workflow.Context, input *datapipeline.PollForTaskInput) *DatapipelinePollForTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.PollForTask", input)
	return &DatapipelinePollForTaskFuture{Future: future}
}

func (a *DataPipelineStub) PutPipelineDefinition(ctx workflow.Context, input *datapipeline.PutPipelineDefinitionInput) (*datapipeline.PutPipelineDefinitionOutput, error) {
	var output datapipeline.PutPipelineDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.PutPipelineDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) PutPipelineDefinitionAsync(ctx workflow.Context, input *datapipeline.PutPipelineDefinitionInput) *DatapipelinePutPipelineDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.PutPipelineDefinition", input)
	return &DatapipelinePutPipelineDefinitionFuture{Future: future}
}

func (a *DataPipelineStub) QueryObjects(ctx workflow.Context, input *datapipeline.QueryObjectsInput) (*datapipeline.QueryObjectsOutput, error) {
	var output datapipeline.QueryObjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.QueryObjects", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) QueryObjectsAsync(ctx workflow.Context, input *datapipeline.QueryObjectsInput) *DatapipelineQueryObjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.QueryObjects", input)
	return &DatapipelineQueryObjectsFuture{Future: future}
}

func (a *DataPipelineStub) RemoveTags(ctx workflow.Context, input *datapipeline.RemoveTagsInput) (*datapipeline.RemoveTagsOutput, error) {
	var output datapipeline.RemoveTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.RemoveTags", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) RemoveTagsAsync(ctx workflow.Context, input *datapipeline.RemoveTagsInput) *DatapipelineRemoveTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.RemoveTags", input)
	return &DatapipelineRemoveTagsFuture{Future: future}
}

func (a *DataPipelineStub) ReportTaskProgress(ctx workflow.Context, input *datapipeline.ReportTaskProgressInput) (*datapipeline.ReportTaskProgressOutput, error) {
	var output datapipeline.ReportTaskProgressOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.ReportTaskProgress", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) ReportTaskProgressAsync(ctx workflow.Context, input *datapipeline.ReportTaskProgressInput) *DatapipelineReportTaskProgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.ReportTaskProgress", input)
	return &DatapipelineReportTaskProgressFuture{Future: future}
}

func (a *DataPipelineStub) ReportTaskRunnerHeartbeat(ctx workflow.Context, input *datapipeline.ReportTaskRunnerHeartbeatInput) (*datapipeline.ReportTaskRunnerHeartbeatOutput, error) {
	var output datapipeline.ReportTaskRunnerHeartbeatOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.ReportTaskRunnerHeartbeat", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) ReportTaskRunnerHeartbeatAsync(ctx workflow.Context, input *datapipeline.ReportTaskRunnerHeartbeatInput) *DatapipelineReportTaskRunnerHeartbeatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.ReportTaskRunnerHeartbeat", input)
	return &DatapipelineReportTaskRunnerHeartbeatFuture{Future: future}
}

func (a *DataPipelineStub) SetStatus(ctx workflow.Context, input *datapipeline.SetStatusInput) (*datapipeline.SetStatusOutput, error) {
	var output datapipeline.SetStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.SetStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) SetStatusAsync(ctx workflow.Context, input *datapipeline.SetStatusInput) *DatapipelineSetStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.SetStatus", input)
	return &DatapipelineSetStatusFuture{Future: future}
}

func (a *DataPipelineStub) SetTaskStatus(ctx workflow.Context, input *datapipeline.SetTaskStatusInput) (*datapipeline.SetTaskStatusOutput, error) {
	var output datapipeline.SetTaskStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.SetTaskStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) SetTaskStatusAsync(ctx workflow.Context, input *datapipeline.SetTaskStatusInput) *DatapipelineSetTaskStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.SetTaskStatus", input)
	return &DatapipelineSetTaskStatusFuture{Future: future}
}

func (a *DataPipelineStub) ValidatePipelineDefinition(ctx workflow.Context, input *datapipeline.ValidatePipelineDefinitionInput) (*datapipeline.ValidatePipelineDefinitionOutput, error) {
	var output datapipeline.ValidatePipelineDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.datapipeline.ValidatePipelineDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *DataPipelineStub) ValidatePipelineDefinitionAsync(ctx workflow.Context, input *datapipeline.ValidatePipelineDefinitionInput) *DatapipelineValidatePipelineDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.datapipeline.ValidatePipelineDefinition", input)
	return &DatapipelineValidatePipelineDefinitionFuture{Future: future}
}
