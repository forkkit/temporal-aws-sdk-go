// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/xray"
	"go.temporal.io/sdk/workflow"
)

type XRayClient interface {
	BatchGetTraces(ctx workflow.Context, input *xray.BatchGetTracesInput) (*xray.BatchGetTracesOutput, error)
	BatchGetTracesAsync(ctx workflow.Context, input *xray.BatchGetTracesInput) *XrayBatchGetTracesFuture

	CreateGroup(ctx workflow.Context, input *xray.CreateGroupInput) (*xray.CreateGroupOutput, error)
	CreateGroupAsync(ctx workflow.Context, input *xray.CreateGroupInput) *XrayCreateGroupFuture

	CreateSamplingRule(ctx workflow.Context, input *xray.CreateSamplingRuleInput) (*xray.CreateSamplingRuleOutput, error)
	CreateSamplingRuleAsync(ctx workflow.Context, input *xray.CreateSamplingRuleInput) *XrayCreateSamplingRuleFuture

	DeleteGroup(ctx workflow.Context, input *xray.DeleteGroupInput) (*xray.DeleteGroupOutput, error)
	DeleteGroupAsync(ctx workflow.Context, input *xray.DeleteGroupInput) *XrayDeleteGroupFuture

	DeleteSamplingRule(ctx workflow.Context, input *xray.DeleteSamplingRuleInput) (*xray.DeleteSamplingRuleOutput, error)
	DeleteSamplingRuleAsync(ctx workflow.Context, input *xray.DeleteSamplingRuleInput) *XrayDeleteSamplingRuleFuture

	GetEncryptionConfig(ctx workflow.Context, input *xray.GetEncryptionConfigInput) (*xray.GetEncryptionConfigOutput, error)
	GetEncryptionConfigAsync(ctx workflow.Context, input *xray.GetEncryptionConfigInput) *XrayGetEncryptionConfigFuture

	GetGroup(ctx workflow.Context, input *xray.GetGroupInput) (*xray.GetGroupOutput, error)
	GetGroupAsync(ctx workflow.Context, input *xray.GetGroupInput) *XrayGetGroupFuture

	GetGroups(ctx workflow.Context, input *xray.GetGroupsInput) (*xray.GetGroupsOutput, error)
	GetGroupsAsync(ctx workflow.Context, input *xray.GetGroupsInput) *XrayGetGroupsFuture

	GetSamplingRules(ctx workflow.Context, input *xray.GetSamplingRulesInput) (*xray.GetSamplingRulesOutput, error)
	GetSamplingRulesAsync(ctx workflow.Context, input *xray.GetSamplingRulesInput) *XrayGetSamplingRulesFuture

	GetSamplingStatisticSummaries(ctx workflow.Context, input *xray.GetSamplingStatisticSummariesInput) (*xray.GetSamplingStatisticSummariesOutput, error)
	GetSamplingStatisticSummariesAsync(ctx workflow.Context, input *xray.GetSamplingStatisticSummariesInput) *XrayGetSamplingStatisticSummariesFuture

	GetSamplingTargets(ctx workflow.Context, input *xray.GetSamplingTargetsInput) (*xray.GetSamplingTargetsOutput, error)
	GetSamplingTargetsAsync(ctx workflow.Context, input *xray.GetSamplingTargetsInput) *XrayGetSamplingTargetsFuture

	GetServiceGraph(ctx workflow.Context, input *xray.GetServiceGraphInput) (*xray.GetServiceGraphOutput, error)
	GetServiceGraphAsync(ctx workflow.Context, input *xray.GetServiceGraphInput) *XrayGetServiceGraphFuture

	GetTimeSeriesServiceStatistics(ctx workflow.Context, input *xray.GetTimeSeriesServiceStatisticsInput) (*xray.GetTimeSeriesServiceStatisticsOutput, error)
	GetTimeSeriesServiceStatisticsAsync(ctx workflow.Context, input *xray.GetTimeSeriesServiceStatisticsInput) *XrayGetTimeSeriesServiceStatisticsFuture

	GetTraceGraph(ctx workflow.Context, input *xray.GetTraceGraphInput) (*xray.GetTraceGraphOutput, error)
	GetTraceGraphAsync(ctx workflow.Context, input *xray.GetTraceGraphInput) *XrayGetTraceGraphFuture

	GetTraceSummaries(ctx workflow.Context, input *xray.GetTraceSummariesInput) (*xray.GetTraceSummariesOutput, error)
	GetTraceSummariesAsync(ctx workflow.Context, input *xray.GetTraceSummariesInput) *XrayGetTraceSummariesFuture

	ListTagsForResource(ctx workflow.Context, input *xray.ListTagsForResourceInput) (*xray.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *xray.ListTagsForResourceInput) *XrayListTagsForResourceFuture

	PutEncryptionConfig(ctx workflow.Context, input *xray.PutEncryptionConfigInput) (*xray.PutEncryptionConfigOutput, error)
	PutEncryptionConfigAsync(ctx workflow.Context, input *xray.PutEncryptionConfigInput) *XrayPutEncryptionConfigFuture

	PutTelemetryRecords(ctx workflow.Context, input *xray.PutTelemetryRecordsInput) (*xray.PutTelemetryRecordsOutput, error)
	PutTelemetryRecordsAsync(ctx workflow.Context, input *xray.PutTelemetryRecordsInput) *XrayPutTelemetryRecordsFuture

	PutTraceSegments(ctx workflow.Context, input *xray.PutTraceSegmentsInput) (*xray.PutTraceSegmentsOutput, error)
	PutTraceSegmentsAsync(ctx workflow.Context, input *xray.PutTraceSegmentsInput) *XrayPutTraceSegmentsFuture

	TagResource(ctx workflow.Context, input *xray.TagResourceInput) (*xray.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *xray.TagResourceInput) *XrayTagResourceFuture

	UntagResource(ctx workflow.Context, input *xray.UntagResourceInput) (*xray.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *xray.UntagResourceInput) *XrayUntagResourceFuture

	UpdateGroup(ctx workflow.Context, input *xray.UpdateGroupInput) (*xray.UpdateGroupOutput, error)
	UpdateGroupAsync(ctx workflow.Context, input *xray.UpdateGroupInput) *XrayUpdateGroupFuture

	UpdateSamplingRule(ctx workflow.Context, input *xray.UpdateSamplingRuleInput) (*xray.UpdateSamplingRuleOutput, error)
	UpdateSamplingRuleAsync(ctx workflow.Context, input *xray.UpdateSamplingRuleInput) *XrayUpdateSamplingRuleFuture
}

type XRayStub struct{}

func NewXRayStub() XRayClient {
	return &XRayStub{}
}

type XrayBatchGetTracesFuture struct {
	Future workflow.Future
}

func (r *XrayBatchGetTracesFuture) Get(ctx workflow.Context) (*xray.BatchGetTracesOutput, error) {
	var output xray.BatchGetTracesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayCreateGroupFuture struct {
	Future workflow.Future
}

func (r *XrayCreateGroupFuture) Get(ctx workflow.Context) (*xray.CreateGroupOutput, error) {
	var output xray.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayCreateSamplingRuleFuture struct {
	Future workflow.Future
}

func (r *XrayCreateSamplingRuleFuture) Get(ctx workflow.Context) (*xray.CreateSamplingRuleOutput, error) {
	var output xray.CreateSamplingRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayDeleteGroupFuture struct {
	Future workflow.Future
}

func (r *XrayDeleteGroupFuture) Get(ctx workflow.Context) (*xray.DeleteGroupOutput, error) {
	var output xray.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayDeleteSamplingRuleFuture struct {
	Future workflow.Future
}

func (r *XrayDeleteSamplingRuleFuture) Get(ctx workflow.Context) (*xray.DeleteSamplingRuleOutput, error) {
	var output xray.DeleteSamplingRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayGetEncryptionConfigFuture struct {
	Future workflow.Future
}

func (r *XrayGetEncryptionConfigFuture) Get(ctx workflow.Context) (*xray.GetEncryptionConfigOutput, error) {
	var output xray.GetEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayGetGroupFuture struct {
	Future workflow.Future
}

func (r *XrayGetGroupFuture) Get(ctx workflow.Context) (*xray.GetGroupOutput, error) {
	var output xray.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayGetGroupsFuture struct {
	Future workflow.Future
}

func (r *XrayGetGroupsFuture) Get(ctx workflow.Context) (*xray.GetGroupsOutput, error) {
	var output xray.GetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayGetSamplingRulesFuture struct {
	Future workflow.Future
}

func (r *XrayGetSamplingRulesFuture) Get(ctx workflow.Context) (*xray.GetSamplingRulesOutput, error) {
	var output xray.GetSamplingRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayGetSamplingStatisticSummariesFuture struct {
	Future workflow.Future
}

func (r *XrayGetSamplingStatisticSummariesFuture) Get(ctx workflow.Context) (*xray.GetSamplingStatisticSummariesOutput, error) {
	var output xray.GetSamplingStatisticSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayGetSamplingTargetsFuture struct {
	Future workflow.Future
}

func (r *XrayGetSamplingTargetsFuture) Get(ctx workflow.Context) (*xray.GetSamplingTargetsOutput, error) {
	var output xray.GetSamplingTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayGetServiceGraphFuture struct {
	Future workflow.Future
}

func (r *XrayGetServiceGraphFuture) Get(ctx workflow.Context) (*xray.GetServiceGraphOutput, error) {
	var output xray.GetServiceGraphOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayGetTimeSeriesServiceStatisticsFuture struct {
	Future workflow.Future
}

func (r *XrayGetTimeSeriesServiceStatisticsFuture) Get(ctx workflow.Context) (*xray.GetTimeSeriesServiceStatisticsOutput, error) {
	var output xray.GetTimeSeriesServiceStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayGetTraceGraphFuture struct {
	Future workflow.Future
}

func (r *XrayGetTraceGraphFuture) Get(ctx workflow.Context) (*xray.GetTraceGraphOutput, error) {
	var output xray.GetTraceGraphOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayGetTraceSummariesFuture struct {
	Future workflow.Future
}

func (r *XrayGetTraceSummariesFuture) Get(ctx workflow.Context) (*xray.GetTraceSummariesOutput, error) {
	var output xray.GetTraceSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *XrayListTagsForResourceFuture) Get(ctx workflow.Context) (*xray.ListTagsForResourceOutput, error) {
	var output xray.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayPutEncryptionConfigFuture struct {
	Future workflow.Future
}

func (r *XrayPutEncryptionConfigFuture) Get(ctx workflow.Context) (*xray.PutEncryptionConfigOutput, error) {
	var output xray.PutEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayPutTelemetryRecordsFuture struct {
	Future workflow.Future
}

func (r *XrayPutTelemetryRecordsFuture) Get(ctx workflow.Context) (*xray.PutTelemetryRecordsOutput, error) {
	var output xray.PutTelemetryRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayPutTraceSegmentsFuture struct {
	Future workflow.Future
}

func (r *XrayPutTraceSegmentsFuture) Get(ctx workflow.Context) (*xray.PutTraceSegmentsOutput, error) {
	var output xray.PutTraceSegmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayTagResourceFuture struct {
	Future workflow.Future
}

func (r *XrayTagResourceFuture) Get(ctx workflow.Context) (*xray.TagResourceOutput, error) {
	var output xray.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayUntagResourceFuture struct {
	Future workflow.Future
}

func (r *XrayUntagResourceFuture) Get(ctx workflow.Context) (*xray.UntagResourceOutput, error) {
	var output xray.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayUpdateGroupFuture struct {
	Future workflow.Future
}

func (r *XrayUpdateGroupFuture) Get(ctx workflow.Context) (*xray.UpdateGroupOutput, error) {
	var output xray.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XrayUpdateSamplingRuleFuture struct {
	Future workflow.Future
}

func (r *XrayUpdateSamplingRuleFuture) Get(ctx workflow.Context) (*xray.UpdateSamplingRuleOutput, error) {
	var output xray.UpdateSamplingRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) BatchGetTraces(ctx workflow.Context, input *xray.BatchGetTracesInput) (*xray.BatchGetTracesOutput, error) {
	var output xray.BatchGetTracesOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.BatchGetTraces", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) BatchGetTracesAsync(ctx workflow.Context, input *xray.BatchGetTracesInput) *XrayBatchGetTracesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.BatchGetTraces", input)
	return &XrayBatchGetTracesFuture{Future: future}
}

func (a *XRayStub) CreateGroup(ctx workflow.Context, input *xray.CreateGroupInput) (*xray.CreateGroupOutput, error) {
	var output xray.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) CreateGroupAsync(ctx workflow.Context, input *xray.CreateGroupInput) *XrayCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.CreateGroup", input)
	return &XrayCreateGroupFuture{Future: future}
}

func (a *XRayStub) CreateSamplingRule(ctx workflow.Context, input *xray.CreateSamplingRuleInput) (*xray.CreateSamplingRuleOutput, error) {
	var output xray.CreateSamplingRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.CreateSamplingRule", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) CreateSamplingRuleAsync(ctx workflow.Context, input *xray.CreateSamplingRuleInput) *XrayCreateSamplingRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.CreateSamplingRule", input)
	return &XrayCreateSamplingRuleFuture{Future: future}
}

func (a *XRayStub) DeleteGroup(ctx workflow.Context, input *xray.DeleteGroupInput) (*xray.DeleteGroupOutput, error) {
	var output xray.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) DeleteGroupAsync(ctx workflow.Context, input *xray.DeleteGroupInput) *XrayDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.DeleteGroup", input)
	return &XrayDeleteGroupFuture{Future: future}
}

func (a *XRayStub) DeleteSamplingRule(ctx workflow.Context, input *xray.DeleteSamplingRuleInput) (*xray.DeleteSamplingRuleOutput, error) {
	var output xray.DeleteSamplingRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.DeleteSamplingRule", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) DeleteSamplingRuleAsync(ctx workflow.Context, input *xray.DeleteSamplingRuleInput) *XrayDeleteSamplingRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.DeleteSamplingRule", input)
	return &XrayDeleteSamplingRuleFuture{Future: future}
}

func (a *XRayStub) GetEncryptionConfig(ctx workflow.Context, input *xray.GetEncryptionConfigInput) (*xray.GetEncryptionConfigOutput, error) {
	var output xray.GetEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.GetEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) GetEncryptionConfigAsync(ctx workflow.Context, input *xray.GetEncryptionConfigInput) *XrayGetEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.GetEncryptionConfig", input)
	return &XrayGetEncryptionConfigFuture{Future: future}
}

func (a *XRayStub) GetGroup(ctx workflow.Context, input *xray.GetGroupInput) (*xray.GetGroupOutput, error) {
	var output xray.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) GetGroupAsync(ctx workflow.Context, input *xray.GetGroupInput) *XrayGetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.GetGroup", input)
	return &XrayGetGroupFuture{Future: future}
}

func (a *XRayStub) GetGroups(ctx workflow.Context, input *xray.GetGroupsInput) (*xray.GetGroupsOutput, error) {
	var output xray.GetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.GetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) GetGroupsAsync(ctx workflow.Context, input *xray.GetGroupsInput) *XrayGetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.GetGroups", input)
	return &XrayGetGroupsFuture{Future: future}
}

func (a *XRayStub) GetSamplingRules(ctx workflow.Context, input *xray.GetSamplingRulesInput) (*xray.GetSamplingRulesOutput, error) {
	var output xray.GetSamplingRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.GetSamplingRules", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) GetSamplingRulesAsync(ctx workflow.Context, input *xray.GetSamplingRulesInput) *XrayGetSamplingRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.GetSamplingRules", input)
	return &XrayGetSamplingRulesFuture{Future: future}
}

func (a *XRayStub) GetSamplingStatisticSummaries(ctx workflow.Context, input *xray.GetSamplingStatisticSummariesInput) (*xray.GetSamplingStatisticSummariesOutput, error) {
	var output xray.GetSamplingStatisticSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.GetSamplingStatisticSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) GetSamplingStatisticSummariesAsync(ctx workflow.Context, input *xray.GetSamplingStatisticSummariesInput) *XrayGetSamplingStatisticSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.GetSamplingStatisticSummaries", input)
	return &XrayGetSamplingStatisticSummariesFuture{Future: future}
}

func (a *XRayStub) GetSamplingTargets(ctx workflow.Context, input *xray.GetSamplingTargetsInput) (*xray.GetSamplingTargetsOutput, error) {
	var output xray.GetSamplingTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.GetSamplingTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) GetSamplingTargetsAsync(ctx workflow.Context, input *xray.GetSamplingTargetsInput) *XrayGetSamplingTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.GetSamplingTargets", input)
	return &XrayGetSamplingTargetsFuture{Future: future}
}

func (a *XRayStub) GetServiceGraph(ctx workflow.Context, input *xray.GetServiceGraphInput) (*xray.GetServiceGraphOutput, error) {
	var output xray.GetServiceGraphOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.GetServiceGraph", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) GetServiceGraphAsync(ctx workflow.Context, input *xray.GetServiceGraphInput) *XrayGetServiceGraphFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.GetServiceGraph", input)
	return &XrayGetServiceGraphFuture{Future: future}
}

func (a *XRayStub) GetTimeSeriesServiceStatistics(ctx workflow.Context, input *xray.GetTimeSeriesServiceStatisticsInput) (*xray.GetTimeSeriesServiceStatisticsOutput, error) {
	var output xray.GetTimeSeriesServiceStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.GetTimeSeriesServiceStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) GetTimeSeriesServiceStatisticsAsync(ctx workflow.Context, input *xray.GetTimeSeriesServiceStatisticsInput) *XrayGetTimeSeriesServiceStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.GetTimeSeriesServiceStatistics", input)
	return &XrayGetTimeSeriesServiceStatisticsFuture{Future: future}
}

func (a *XRayStub) GetTraceGraph(ctx workflow.Context, input *xray.GetTraceGraphInput) (*xray.GetTraceGraphOutput, error) {
	var output xray.GetTraceGraphOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.GetTraceGraph", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) GetTraceGraphAsync(ctx workflow.Context, input *xray.GetTraceGraphInput) *XrayGetTraceGraphFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.GetTraceGraph", input)
	return &XrayGetTraceGraphFuture{Future: future}
}

func (a *XRayStub) GetTraceSummaries(ctx workflow.Context, input *xray.GetTraceSummariesInput) (*xray.GetTraceSummariesOutput, error) {
	var output xray.GetTraceSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.GetTraceSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) GetTraceSummariesAsync(ctx workflow.Context, input *xray.GetTraceSummariesInput) *XrayGetTraceSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.GetTraceSummaries", input)
	return &XrayGetTraceSummariesFuture{Future: future}
}

func (a *XRayStub) ListTagsForResource(ctx workflow.Context, input *xray.ListTagsForResourceInput) (*xray.ListTagsForResourceOutput, error) {
	var output xray.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) ListTagsForResourceAsync(ctx workflow.Context, input *xray.ListTagsForResourceInput) *XrayListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.ListTagsForResource", input)
	return &XrayListTagsForResourceFuture{Future: future}
}

func (a *XRayStub) PutEncryptionConfig(ctx workflow.Context, input *xray.PutEncryptionConfigInput) (*xray.PutEncryptionConfigOutput, error) {
	var output xray.PutEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.PutEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) PutEncryptionConfigAsync(ctx workflow.Context, input *xray.PutEncryptionConfigInput) *XrayPutEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.PutEncryptionConfig", input)
	return &XrayPutEncryptionConfigFuture{Future: future}
}

func (a *XRayStub) PutTelemetryRecords(ctx workflow.Context, input *xray.PutTelemetryRecordsInput) (*xray.PutTelemetryRecordsOutput, error) {
	var output xray.PutTelemetryRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.PutTelemetryRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) PutTelemetryRecordsAsync(ctx workflow.Context, input *xray.PutTelemetryRecordsInput) *XrayPutTelemetryRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.PutTelemetryRecords", input)
	return &XrayPutTelemetryRecordsFuture{Future: future}
}

func (a *XRayStub) PutTraceSegments(ctx workflow.Context, input *xray.PutTraceSegmentsInput) (*xray.PutTraceSegmentsOutput, error) {
	var output xray.PutTraceSegmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.PutTraceSegments", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) PutTraceSegmentsAsync(ctx workflow.Context, input *xray.PutTraceSegmentsInput) *XrayPutTraceSegmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.PutTraceSegments", input)
	return &XrayPutTraceSegmentsFuture{Future: future}
}

func (a *XRayStub) TagResource(ctx workflow.Context, input *xray.TagResourceInput) (*xray.TagResourceOutput, error) {
	var output xray.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) TagResourceAsync(ctx workflow.Context, input *xray.TagResourceInput) *XrayTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.TagResource", input)
	return &XrayTagResourceFuture{Future: future}
}

func (a *XRayStub) UntagResource(ctx workflow.Context, input *xray.UntagResourceInput) (*xray.UntagResourceOutput, error) {
	var output xray.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) UntagResourceAsync(ctx workflow.Context, input *xray.UntagResourceInput) *XrayUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.UntagResource", input)
	return &XrayUntagResourceFuture{Future: future}
}

func (a *XRayStub) UpdateGroup(ctx workflow.Context, input *xray.UpdateGroupInput) (*xray.UpdateGroupOutput, error) {
	var output xray.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) UpdateGroupAsync(ctx workflow.Context, input *xray.UpdateGroupInput) *XrayUpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.UpdateGroup", input)
	return &XrayUpdateGroupFuture{Future: future}
}

func (a *XRayStub) UpdateSamplingRule(ctx workflow.Context, input *xray.UpdateSamplingRuleInput) (*xray.UpdateSamplingRuleOutput, error) {
	var output xray.UpdateSamplingRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.xray.UpdateSamplingRule", input).Get(ctx, &output)
	return &output, err
}

func (a *XRayStub) UpdateSamplingRuleAsync(ctx workflow.Context, input *xray.UpdateSamplingRuleInput) *XrayUpdateSamplingRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.xray.UpdateSamplingRule", input)
	return &XrayUpdateSamplingRuleFuture{Future: future}
}
