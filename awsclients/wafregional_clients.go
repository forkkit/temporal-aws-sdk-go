// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/waf"
	"github.com/aws/aws-sdk-go/service/wafregional"
	"go.temporal.io/sdk/workflow"
)

type WAFRegionalClient interface {
	AssociateWebACL(ctx workflow.Context, input *wafregional.AssociateWebACLInput) (*wafregional.AssociateWebACLOutput, error)
	AssociateWebACLAsync(ctx workflow.Context, input *wafregional.AssociateWebACLInput) *WafregionalAssociateWebACLFuture

	CreateByteMatchSet(ctx workflow.Context, input *waf.CreateByteMatchSetInput) (*waf.CreateByteMatchSetOutput, error)
	CreateByteMatchSetAsync(ctx workflow.Context, input *waf.CreateByteMatchSetInput) *WafCreateByteMatchSetFuture

	CreateGeoMatchSet(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) (*waf.CreateGeoMatchSetOutput, error)
	CreateGeoMatchSetAsync(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) *WafCreateGeoMatchSetFuture

	CreateIPSet(ctx workflow.Context, input *waf.CreateIPSetInput) (*waf.CreateIPSetOutput, error)
	CreateIPSetAsync(ctx workflow.Context, input *waf.CreateIPSetInput) *WafCreateIPSetFuture

	CreateRateBasedRule(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) (*waf.CreateRateBasedRuleOutput, error)
	CreateRateBasedRuleAsync(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) *WafCreateRateBasedRuleFuture

	CreateRegexMatchSet(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) (*waf.CreateRegexMatchSetOutput, error)
	CreateRegexMatchSetAsync(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) *WafCreateRegexMatchSetFuture

	CreateRegexPatternSet(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) (*waf.CreateRegexPatternSetOutput, error)
	CreateRegexPatternSetAsync(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) *WafCreateRegexPatternSetFuture

	CreateRule(ctx workflow.Context, input *waf.CreateRuleInput) (*waf.CreateRuleOutput, error)
	CreateRuleAsync(ctx workflow.Context, input *waf.CreateRuleInput) *WafCreateRuleFuture

	CreateRuleGroup(ctx workflow.Context, input *waf.CreateRuleGroupInput) (*waf.CreateRuleGroupOutput, error)
	CreateRuleGroupAsync(ctx workflow.Context, input *waf.CreateRuleGroupInput) *WafCreateRuleGroupFuture

	CreateSizeConstraintSet(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) (*waf.CreateSizeConstraintSetOutput, error)
	CreateSizeConstraintSetAsync(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) *WafCreateSizeConstraintSetFuture

	CreateSqlInjectionMatchSet(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) (*waf.CreateSqlInjectionMatchSetOutput, error)
	CreateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) *WafCreateSqlInjectionMatchSetFuture

	CreateWebACL(ctx workflow.Context, input *waf.CreateWebACLInput) (*waf.CreateWebACLOutput, error)
	CreateWebACLAsync(ctx workflow.Context, input *waf.CreateWebACLInput) *WafCreateWebACLFuture

	CreateWebACLMigrationStack(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) (*waf.CreateWebACLMigrationStackOutput, error)
	CreateWebACLMigrationStackAsync(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) *WafCreateWebACLMigrationStackFuture

	CreateXssMatchSet(ctx workflow.Context, input *waf.CreateXssMatchSetInput) (*waf.CreateXssMatchSetOutput, error)
	CreateXssMatchSetAsync(ctx workflow.Context, input *waf.CreateXssMatchSetInput) *WafCreateXssMatchSetFuture

	DeleteByteMatchSet(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) (*waf.DeleteByteMatchSetOutput, error)
	DeleteByteMatchSetAsync(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) *WafDeleteByteMatchSetFuture

	DeleteGeoMatchSet(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) (*waf.DeleteGeoMatchSetOutput, error)
	DeleteGeoMatchSetAsync(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) *WafDeleteGeoMatchSetFuture

	DeleteIPSet(ctx workflow.Context, input *waf.DeleteIPSetInput) (*waf.DeleteIPSetOutput, error)
	DeleteIPSetAsync(ctx workflow.Context, input *waf.DeleteIPSetInput) *WafDeleteIPSetFuture

	DeleteLoggingConfiguration(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) (*waf.DeleteLoggingConfigurationOutput, error)
	DeleteLoggingConfigurationAsync(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) *WafDeleteLoggingConfigurationFuture

	DeletePermissionPolicy(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) (*waf.DeletePermissionPolicyOutput, error)
	DeletePermissionPolicyAsync(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) *WafDeletePermissionPolicyFuture

	DeleteRateBasedRule(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) (*waf.DeleteRateBasedRuleOutput, error)
	DeleteRateBasedRuleAsync(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) *WafDeleteRateBasedRuleFuture

	DeleteRegexMatchSet(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) (*waf.DeleteRegexMatchSetOutput, error)
	DeleteRegexMatchSetAsync(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) *WafDeleteRegexMatchSetFuture

	DeleteRegexPatternSet(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) (*waf.DeleteRegexPatternSetOutput, error)
	DeleteRegexPatternSetAsync(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) *WafDeleteRegexPatternSetFuture

	DeleteRule(ctx workflow.Context, input *waf.DeleteRuleInput) (*waf.DeleteRuleOutput, error)
	DeleteRuleAsync(ctx workflow.Context, input *waf.DeleteRuleInput) *WafDeleteRuleFuture

	DeleteRuleGroup(ctx workflow.Context, input *waf.DeleteRuleGroupInput) (*waf.DeleteRuleGroupOutput, error)
	DeleteRuleGroupAsync(ctx workflow.Context, input *waf.DeleteRuleGroupInput) *WafDeleteRuleGroupFuture

	DeleteSizeConstraintSet(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) (*waf.DeleteSizeConstraintSetOutput, error)
	DeleteSizeConstraintSetAsync(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) *WafDeleteSizeConstraintSetFuture

	DeleteSqlInjectionMatchSet(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) (*waf.DeleteSqlInjectionMatchSetOutput, error)
	DeleteSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) *WafDeleteSqlInjectionMatchSetFuture

	DeleteWebACL(ctx workflow.Context, input *waf.DeleteWebACLInput) (*waf.DeleteWebACLOutput, error)
	DeleteWebACLAsync(ctx workflow.Context, input *waf.DeleteWebACLInput) *WafDeleteWebACLFuture

	DeleteXssMatchSet(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) (*waf.DeleteXssMatchSetOutput, error)
	DeleteXssMatchSetAsync(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) *WafDeleteXssMatchSetFuture

	DisassociateWebACL(ctx workflow.Context, input *wafregional.DisassociateWebACLInput) (*wafregional.DisassociateWebACLOutput, error)
	DisassociateWebACLAsync(ctx workflow.Context, input *wafregional.DisassociateWebACLInput) *WafregionalDisassociateWebACLFuture

	GetByteMatchSet(ctx workflow.Context, input *waf.GetByteMatchSetInput) (*waf.GetByteMatchSetOutput, error)
	GetByteMatchSetAsync(ctx workflow.Context, input *waf.GetByteMatchSetInput) *WafGetByteMatchSetFuture

	GetChangeToken(ctx workflow.Context, input *waf.GetChangeTokenInput) (*waf.GetChangeTokenOutput, error)
	GetChangeTokenAsync(ctx workflow.Context, input *waf.GetChangeTokenInput) *WafGetChangeTokenFuture

	GetChangeTokenStatus(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) (*waf.GetChangeTokenStatusOutput, error)
	GetChangeTokenStatusAsync(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) *WafGetChangeTokenStatusFuture

	GetGeoMatchSet(ctx workflow.Context, input *waf.GetGeoMatchSetInput) (*waf.GetGeoMatchSetOutput, error)
	GetGeoMatchSetAsync(ctx workflow.Context, input *waf.GetGeoMatchSetInput) *WafGetGeoMatchSetFuture

	GetIPSet(ctx workflow.Context, input *waf.GetIPSetInput) (*waf.GetIPSetOutput, error)
	GetIPSetAsync(ctx workflow.Context, input *waf.GetIPSetInput) *WafGetIPSetFuture

	GetLoggingConfiguration(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) (*waf.GetLoggingConfigurationOutput, error)
	GetLoggingConfigurationAsync(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) *WafGetLoggingConfigurationFuture

	GetPermissionPolicy(ctx workflow.Context, input *waf.GetPermissionPolicyInput) (*waf.GetPermissionPolicyOutput, error)
	GetPermissionPolicyAsync(ctx workflow.Context, input *waf.GetPermissionPolicyInput) *WafGetPermissionPolicyFuture

	GetRateBasedRule(ctx workflow.Context, input *waf.GetRateBasedRuleInput) (*waf.GetRateBasedRuleOutput, error)
	GetRateBasedRuleAsync(ctx workflow.Context, input *waf.GetRateBasedRuleInput) *WafGetRateBasedRuleFuture

	GetRateBasedRuleManagedKeys(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) (*waf.GetRateBasedRuleManagedKeysOutput, error)
	GetRateBasedRuleManagedKeysAsync(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) *WafGetRateBasedRuleManagedKeysFuture

	GetRegexMatchSet(ctx workflow.Context, input *waf.GetRegexMatchSetInput) (*waf.GetRegexMatchSetOutput, error)
	GetRegexMatchSetAsync(ctx workflow.Context, input *waf.GetRegexMatchSetInput) *WafGetRegexMatchSetFuture

	GetRegexPatternSet(ctx workflow.Context, input *waf.GetRegexPatternSetInput) (*waf.GetRegexPatternSetOutput, error)
	GetRegexPatternSetAsync(ctx workflow.Context, input *waf.GetRegexPatternSetInput) *WafGetRegexPatternSetFuture

	GetRule(ctx workflow.Context, input *waf.GetRuleInput) (*waf.GetRuleOutput, error)
	GetRuleAsync(ctx workflow.Context, input *waf.GetRuleInput) *WafGetRuleFuture

	GetRuleGroup(ctx workflow.Context, input *waf.GetRuleGroupInput) (*waf.GetRuleGroupOutput, error)
	GetRuleGroupAsync(ctx workflow.Context, input *waf.GetRuleGroupInput) *WafGetRuleGroupFuture

	GetSampledRequests(ctx workflow.Context, input *waf.GetSampledRequestsInput) (*waf.GetSampledRequestsOutput, error)
	GetSampledRequestsAsync(ctx workflow.Context, input *waf.GetSampledRequestsInput) *WafGetSampledRequestsFuture

	GetSizeConstraintSet(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) (*waf.GetSizeConstraintSetOutput, error)
	GetSizeConstraintSetAsync(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) *WafGetSizeConstraintSetFuture

	GetSqlInjectionMatchSet(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) (*waf.GetSqlInjectionMatchSetOutput, error)
	GetSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) *WafGetSqlInjectionMatchSetFuture

	GetWebACL(ctx workflow.Context, input *waf.GetWebACLInput) (*waf.GetWebACLOutput, error)
	GetWebACLAsync(ctx workflow.Context, input *waf.GetWebACLInput) *WafGetWebACLFuture

	GetWebACLForResource(ctx workflow.Context, input *wafregional.GetWebACLForResourceInput) (*wafregional.GetWebACLForResourceOutput, error)
	GetWebACLForResourceAsync(ctx workflow.Context, input *wafregional.GetWebACLForResourceInput) *WafregionalGetWebACLForResourceFuture

	GetXssMatchSet(ctx workflow.Context, input *waf.GetXssMatchSetInput) (*waf.GetXssMatchSetOutput, error)
	GetXssMatchSetAsync(ctx workflow.Context, input *waf.GetXssMatchSetInput) *WafGetXssMatchSetFuture

	ListActivatedRulesInRuleGroup(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) (*waf.ListActivatedRulesInRuleGroupOutput, error)
	ListActivatedRulesInRuleGroupAsync(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) *WafListActivatedRulesInRuleGroupFuture

	ListByteMatchSets(ctx workflow.Context, input *waf.ListByteMatchSetsInput) (*waf.ListByteMatchSetsOutput, error)
	ListByteMatchSetsAsync(ctx workflow.Context, input *waf.ListByteMatchSetsInput) *WafListByteMatchSetsFuture

	ListGeoMatchSets(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) (*waf.ListGeoMatchSetsOutput, error)
	ListGeoMatchSetsAsync(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) *WafListGeoMatchSetsFuture

	ListIPSets(ctx workflow.Context, input *waf.ListIPSetsInput) (*waf.ListIPSetsOutput, error)
	ListIPSetsAsync(ctx workflow.Context, input *waf.ListIPSetsInput) *WafListIPSetsFuture

	ListLoggingConfigurations(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) (*waf.ListLoggingConfigurationsOutput, error)
	ListLoggingConfigurationsAsync(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) *WafListLoggingConfigurationsFuture

	ListRateBasedRules(ctx workflow.Context, input *waf.ListRateBasedRulesInput) (*waf.ListRateBasedRulesOutput, error)
	ListRateBasedRulesAsync(ctx workflow.Context, input *waf.ListRateBasedRulesInput) *WafListRateBasedRulesFuture

	ListRegexMatchSets(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) (*waf.ListRegexMatchSetsOutput, error)
	ListRegexMatchSetsAsync(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) *WafListRegexMatchSetsFuture

	ListRegexPatternSets(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) (*waf.ListRegexPatternSetsOutput, error)
	ListRegexPatternSetsAsync(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) *WafListRegexPatternSetsFuture

	ListResourcesForWebACL(ctx workflow.Context, input *wafregional.ListResourcesForWebACLInput) (*wafregional.ListResourcesForWebACLOutput, error)
	ListResourcesForWebACLAsync(ctx workflow.Context, input *wafregional.ListResourcesForWebACLInput) *WafregionalListResourcesForWebACLFuture

	ListRuleGroups(ctx workflow.Context, input *waf.ListRuleGroupsInput) (*waf.ListRuleGroupsOutput, error)
	ListRuleGroupsAsync(ctx workflow.Context, input *waf.ListRuleGroupsInput) *WafListRuleGroupsFuture

	ListRules(ctx workflow.Context, input *waf.ListRulesInput) (*waf.ListRulesOutput, error)
	ListRulesAsync(ctx workflow.Context, input *waf.ListRulesInput) *WafListRulesFuture

	ListSizeConstraintSets(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) (*waf.ListSizeConstraintSetsOutput, error)
	ListSizeConstraintSetsAsync(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) *WafListSizeConstraintSetsFuture

	ListSqlInjectionMatchSets(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) (*waf.ListSqlInjectionMatchSetsOutput, error)
	ListSqlInjectionMatchSetsAsync(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) *WafListSqlInjectionMatchSetsFuture

	ListSubscribedRuleGroups(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) (*waf.ListSubscribedRuleGroupsOutput, error)
	ListSubscribedRuleGroupsAsync(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) *WafListSubscribedRuleGroupsFuture

	ListTagsForResource(ctx workflow.Context, input *waf.ListTagsForResourceInput) (*waf.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *waf.ListTagsForResourceInput) *WafListTagsForResourceFuture

	ListWebACLs(ctx workflow.Context, input *waf.ListWebACLsInput) (*waf.ListWebACLsOutput, error)
	ListWebACLsAsync(ctx workflow.Context, input *waf.ListWebACLsInput) *WafListWebACLsFuture

	ListXssMatchSets(ctx workflow.Context, input *waf.ListXssMatchSetsInput) (*waf.ListXssMatchSetsOutput, error)
	ListXssMatchSetsAsync(ctx workflow.Context, input *waf.ListXssMatchSetsInput) *WafListXssMatchSetsFuture

	PutLoggingConfiguration(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) (*waf.PutLoggingConfigurationOutput, error)
	PutLoggingConfigurationAsync(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) *WafPutLoggingConfigurationFuture

	PutPermissionPolicy(ctx workflow.Context, input *waf.PutPermissionPolicyInput) (*waf.PutPermissionPolicyOutput, error)
	PutPermissionPolicyAsync(ctx workflow.Context, input *waf.PutPermissionPolicyInput) *WafPutPermissionPolicyFuture

	TagResource(ctx workflow.Context, input *waf.TagResourceInput) (*waf.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *waf.TagResourceInput) *WafTagResourceFuture

	UntagResource(ctx workflow.Context, input *waf.UntagResourceInput) (*waf.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *waf.UntagResourceInput) *WafUntagResourceFuture

	UpdateByteMatchSet(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) (*waf.UpdateByteMatchSetOutput, error)
	UpdateByteMatchSetAsync(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) *WafUpdateByteMatchSetFuture

	UpdateGeoMatchSet(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) (*waf.UpdateGeoMatchSetOutput, error)
	UpdateGeoMatchSetAsync(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) *WafUpdateGeoMatchSetFuture

	UpdateIPSet(ctx workflow.Context, input *waf.UpdateIPSetInput) (*waf.UpdateIPSetOutput, error)
	UpdateIPSetAsync(ctx workflow.Context, input *waf.UpdateIPSetInput) *WafUpdateIPSetFuture

	UpdateRateBasedRule(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) (*waf.UpdateRateBasedRuleOutput, error)
	UpdateRateBasedRuleAsync(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) *WafUpdateRateBasedRuleFuture

	UpdateRegexMatchSet(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) (*waf.UpdateRegexMatchSetOutput, error)
	UpdateRegexMatchSetAsync(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) *WafUpdateRegexMatchSetFuture

	UpdateRegexPatternSet(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) (*waf.UpdateRegexPatternSetOutput, error)
	UpdateRegexPatternSetAsync(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) *WafUpdateRegexPatternSetFuture

	UpdateRule(ctx workflow.Context, input *waf.UpdateRuleInput) (*waf.UpdateRuleOutput, error)
	UpdateRuleAsync(ctx workflow.Context, input *waf.UpdateRuleInput) *WafUpdateRuleFuture

	UpdateRuleGroup(ctx workflow.Context, input *waf.UpdateRuleGroupInput) (*waf.UpdateRuleGroupOutput, error)
	UpdateRuleGroupAsync(ctx workflow.Context, input *waf.UpdateRuleGroupInput) *WafUpdateRuleGroupFuture

	UpdateSizeConstraintSet(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) (*waf.UpdateSizeConstraintSetOutput, error)
	UpdateSizeConstraintSetAsync(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) *WafUpdateSizeConstraintSetFuture

	UpdateSqlInjectionMatchSet(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) (*waf.UpdateSqlInjectionMatchSetOutput, error)
	UpdateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) *WafUpdateSqlInjectionMatchSetFuture

	UpdateWebACL(ctx workflow.Context, input *waf.UpdateWebACLInput) (*waf.UpdateWebACLOutput, error)
	UpdateWebACLAsync(ctx workflow.Context, input *waf.UpdateWebACLInput) *WafUpdateWebACLFuture

	UpdateXssMatchSet(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) (*waf.UpdateXssMatchSetOutput, error)
	UpdateXssMatchSetAsync(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) *WafUpdateXssMatchSetFuture
}

type WAFRegionalStub struct{}

func NewWAFRegionalStub() WAFRegionalClient {
	return &WAFRegionalStub{}
}

type WafregionalAssociateWebACLFuture struct {
	Future workflow.Future
}

func (r *WafregionalAssociateWebACLFuture) Get(ctx workflow.Context) (*wafregional.AssociateWebACLOutput, error) {
	var output wafregional.AssociateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WafregionalDisassociateWebACLFuture struct {
	Future workflow.Future
}

func (r *WafregionalDisassociateWebACLFuture) Get(ctx workflow.Context) (*wafregional.DisassociateWebACLOutput, error) {
	var output wafregional.DisassociateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WafregionalGetWebACLForResourceFuture struct {
	Future workflow.Future
}

func (r *WafregionalGetWebACLForResourceFuture) Get(ctx workflow.Context) (*wafregional.GetWebACLForResourceOutput, error) {
	var output wafregional.GetWebACLForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WafregionalListResourcesForWebACLFuture struct {
	Future workflow.Future
}

func (r *WafregionalListResourcesForWebACLFuture) Get(ctx workflow.Context) (*wafregional.ListResourcesForWebACLOutput, error) {
	var output wafregional.ListResourcesForWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) AssociateWebACL(ctx workflow.Context, input *wafregional.AssociateWebACLInput) (*wafregional.AssociateWebACLOutput, error) {
	var output wafregional.AssociateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.AssociateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) AssociateWebACLAsync(ctx workflow.Context, input *wafregional.AssociateWebACLInput) *WafregionalAssociateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.AssociateWebACL", input)
	return &WafregionalAssociateWebACLFuture{Future: future}
}

func (a *WAFRegionalStub) CreateByteMatchSet(ctx workflow.Context, input *waf.CreateByteMatchSetInput) (*waf.CreateByteMatchSetOutput, error) {
	var output waf.CreateByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateByteMatchSetAsync(ctx workflow.Context, input *waf.CreateByteMatchSetInput) *WafCreateByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateByteMatchSet", input)
	return &WafCreateByteMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) CreateGeoMatchSet(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) (*waf.CreateGeoMatchSetOutput, error) {
	var output waf.CreateGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateGeoMatchSetAsync(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) *WafCreateGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateGeoMatchSet", input)
	return &WafCreateGeoMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) CreateIPSet(ctx workflow.Context, input *waf.CreateIPSetInput) (*waf.CreateIPSetOutput, error) {
	var output waf.CreateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateIPSetAsync(ctx workflow.Context, input *waf.CreateIPSetInput) *WafCreateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateIPSet", input)
	return &WafCreateIPSetFuture{Future: future}
}

func (a *WAFRegionalStub) CreateRateBasedRule(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) (*waf.CreateRateBasedRuleOutput, error) {
	var output waf.CreateRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateRateBasedRuleAsync(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) *WafCreateRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateRateBasedRule", input)
	return &WafCreateRateBasedRuleFuture{Future: future}
}

func (a *WAFRegionalStub) CreateRegexMatchSet(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) (*waf.CreateRegexMatchSetOutput, error) {
	var output waf.CreateRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateRegexMatchSetAsync(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) *WafCreateRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateRegexMatchSet", input)
	return &WafCreateRegexMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) CreateRegexPatternSet(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) (*waf.CreateRegexPatternSetOutput, error) {
	var output waf.CreateRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateRegexPatternSetAsync(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) *WafCreateRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateRegexPatternSet", input)
	return &WafCreateRegexPatternSetFuture{Future: future}
}

func (a *WAFRegionalStub) CreateRule(ctx workflow.Context, input *waf.CreateRuleInput) (*waf.CreateRuleOutput, error) {
	var output waf.CreateRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateRuleAsync(ctx workflow.Context, input *waf.CreateRuleInput) *WafCreateRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateRule", input)
	return &WafCreateRuleFuture{Future: future}
}

func (a *WAFRegionalStub) CreateRuleGroup(ctx workflow.Context, input *waf.CreateRuleGroupInput) (*waf.CreateRuleGroupOutput, error) {
	var output waf.CreateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateRuleGroupAsync(ctx workflow.Context, input *waf.CreateRuleGroupInput) *WafCreateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateRuleGroup", input)
	return &WafCreateRuleGroupFuture{Future: future}
}

func (a *WAFRegionalStub) CreateSizeConstraintSet(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) (*waf.CreateSizeConstraintSetOutput, error) {
	var output waf.CreateSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateSizeConstraintSetAsync(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) *WafCreateSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateSizeConstraintSet", input)
	return &WafCreateSizeConstraintSetFuture{Future: future}
}

func (a *WAFRegionalStub) CreateSqlInjectionMatchSet(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	var output waf.CreateSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) *WafCreateSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateSqlInjectionMatchSet", input)
	return &WafCreateSqlInjectionMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) CreateWebACL(ctx workflow.Context, input *waf.CreateWebACLInput) (*waf.CreateWebACLOutput, error) {
	var output waf.CreateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateWebACLAsync(ctx workflow.Context, input *waf.CreateWebACLInput) *WafCreateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateWebACL", input)
	return &WafCreateWebACLFuture{Future: future}
}

func (a *WAFRegionalStub) CreateWebACLMigrationStack(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) (*waf.CreateWebACLMigrationStackOutput, error) {
	var output waf.CreateWebACLMigrationStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateWebACLMigrationStack", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateWebACLMigrationStackAsync(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) *WafCreateWebACLMigrationStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateWebACLMigrationStack", input)
	return &WafCreateWebACLMigrationStackFuture{Future: future}
}

func (a *WAFRegionalStub) CreateXssMatchSet(ctx workflow.Context, input *waf.CreateXssMatchSetInput) (*waf.CreateXssMatchSetOutput, error) {
	var output waf.CreateXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) CreateXssMatchSetAsync(ctx workflow.Context, input *waf.CreateXssMatchSetInput) *WafCreateXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.CreateXssMatchSet", input)
	return &WafCreateXssMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteByteMatchSet(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) (*waf.DeleteByteMatchSetOutput, error) {
	var output waf.DeleteByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteByteMatchSetAsync(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) *WafDeleteByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteByteMatchSet", input)
	return &WafDeleteByteMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteGeoMatchSet(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) (*waf.DeleteGeoMatchSetOutput, error) {
	var output waf.DeleteGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteGeoMatchSetAsync(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) *WafDeleteGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteGeoMatchSet", input)
	return &WafDeleteGeoMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteIPSet(ctx workflow.Context, input *waf.DeleteIPSetInput) (*waf.DeleteIPSetOutput, error) {
	var output waf.DeleteIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteIPSetAsync(ctx workflow.Context, input *waf.DeleteIPSetInput) *WafDeleteIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteIPSet", input)
	return &WafDeleteIPSetFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteLoggingConfiguration(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) (*waf.DeleteLoggingConfigurationOutput, error) {
	var output waf.DeleteLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteLoggingConfigurationAsync(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) *WafDeleteLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteLoggingConfiguration", input)
	return &WafDeleteLoggingConfigurationFuture{Future: future}
}

func (a *WAFRegionalStub) DeletePermissionPolicy(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) (*waf.DeletePermissionPolicyOutput, error) {
	var output waf.DeletePermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeletePermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeletePermissionPolicyAsync(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) *WafDeletePermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeletePermissionPolicy", input)
	return &WafDeletePermissionPolicyFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteRateBasedRule(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) (*waf.DeleteRateBasedRuleOutput, error) {
	var output waf.DeleteRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteRateBasedRuleAsync(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) *WafDeleteRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteRateBasedRule", input)
	return &WafDeleteRateBasedRuleFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteRegexMatchSet(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) (*waf.DeleteRegexMatchSetOutput, error) {
	var output waf.DeleteRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteRegexMatchSetAsync(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) *WafDeleteRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteRegexMatchSet", input)
	return &WafDeleteRegexMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteRegexPatternSet(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) (*waf.DeleteRegexPatternSetOutput, error) {
	var output waf.DeleteRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteRegexPatternSetAsync(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) *WafDeleteRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteRegexPatternSet", input)
	return &WafDeleteRegexPatternSetFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteRule(ctx workflow.Context, input *waf.DeleteRuleInput) (*waf.DeleteRuleOutput, error) {
	var output waf.DeleteRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteRuleAsync(ctx workflow.Context, input *waf.DeleteRuleInput) *WafDeleteRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteRule", input)
	return &WafDeleteRuleFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteRuleGroup(ctx workflow.Context, input *waf.DeleteRuleGroupInput) (*waf.DeleteRuleGroupOutput, error) {
	var output waf.DeleteRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteRuleGroupAsync(ctx workflow.Context, input *waf.DeleteRuleGroupInput) *WafDeleteRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteRuleGroup", input)
	return &WafDeleteRuleGroupFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteSizeConstraintSet(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) (*waf.DeleteSizeConstraintSetOutput, error) {
	var output waf.DeleteSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteSizeConstraintSetAsync(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) *WafDeleteSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteSizeConstraintSet", input)
	return &WafDeleteSizeConstraintSetFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteSqlInjectionMatchSet(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	var output waf.DeleteSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) *WafDeleteSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteSqlInjectionMatchSet", input)
	return &WafDeleteSqlInjectionMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteWebACL(ctx workflow.Context, input *waf.DeleteWebACLInput) (*waf.DeleteWebACLOutput, error) {
	var output waf.DeleteWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteWebACLAsync(ctx workflow.Context, input *waf.DeleteWebACLInput) *WafDeleteWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteWebACL", input)
	return &WafDeleteWebACLFuture{Future: future}
}

func (a *WAFRegionalStub) DeleteXssMatchSet(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) (*waf.DeleteXssMatchSetOutput, error) {
	var output waf.DeleteXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DeleteXssMatchSetAsync(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) *WafDeleteXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DeleteXssMatchSet", input)
	return &WafDeleteXssMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) DisassociateWebACL(ctx workflow.Context, input *wafregional.DisassociateWebACLInput) (*wafregional.DisassociateWebACLOutput, error) {
	var output wafregional.DisassociateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.DisassociateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) DisassociateWebACLAsync(ctx workflow.Context, input *wafregional.DisassociateWebACLInput) *WafregionalDisassociateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.DisassociateWebACL", input)
	return &WafregionalDisassociateWebACLFuture{Future: future}
}

func (a *WAFRegionalStub) GetByteMatchSet(ctx workflow.Context, input *waf.GetByteMatchSetInput) (*waf.GetByteMatchSetOutput, error) {
	var output waf.GetByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetByteMatchSetAsync(ctx workflow.Context, input *waf.GetByteMatchSetInput) *WafGetByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetByteMatchSet", input)
	return &WafGetByteMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) GetChangeToken(ctx workflow.Context, input *waf.GetChangeTokenInput) (*waf.GetChangeTokenOutput, error) {
	var output waf.GetChangeTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetChangeToken", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetChangeTokenAsync(ctx workflow.Context, input *waf.GetChangeTokenInput) *WafGetChangeTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetChangeToken", input)
	return &WafGetChangeTokenFuture{Future: future}
}

func (a *WAFRegionalStub) GetChangeTokenStatus(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) (*waf.GetChangeTokenStatusOutput, error) {
	var output waf.GetChangeTokenStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetChangeTokenStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetChangeTokenStatusAsync(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) *WafGetChangeTokenStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetChangeTokenStatus", input)
	return &WafGetChangeTokenStatusFuture{Future: future}
}

func (a *WAFRegionalStub) GetGeoMatchSet(ctx workflow.Context, input *waf.GetGeoMatchSetInput) (*waf.GetGeoMatchSetOutput, error) {
	var output waf.GetGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetGeoMatchSetAsync(ctx workflow.Context, input *waf.GetGeoMatchSetInput) *WafGetGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetGeoMatchSet", input)
	return &WafGetGeoMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) GetIPSet(ctx workflow.Context, input *waf.GetIPSetInput) (*waf.GetIPSetOutput, error) {
	var output waf.GetIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetIPSetAsync(ctx workflow.Context, input *waf.GetIPSetInput) *WafGetIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetIPSet", input)
	return &WafGetIPSetFuture{Future: future}
}

func (a *WAFRegionalStub) GetLoggingConfiguration(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) (*waf.GetLoggingConfigurationOutput, error) {
	var output waf.GetLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetLoggingConfigurationAsync(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) *WafGetLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetLoggingConfiguration", input)
	return &WafGetLoggingConfigurationFuture{Future: future}
}

func (a *WAFRegionalStub) GetPermissionPolicy(ctx workflow.Context, input *waf.GetPermissionPolicyInput) (*waf.GetPermissionPolicyOutput, error) {
	var output waf.GetPermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetPermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetPermissionPolicyAsync(ctx workflow.Context, input *waf.GetPermissionPolicyInput) *WafGetPermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetPermissionPolicy", input)
	return &WafGetPermissionPolicyFuture{Future: future}
}

func (a *WAFRegionalStub) GetRateBasedRule(ctx workflow.Context, input *waf.GetRateBasedRuleInput) (*waf.GetRateBasedRuleOutput, error) {
	var output waf.GetRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetRateBasedRuleAsync(ctx workflow.Context, input *waf.GetRateBasedRuleInput) *WafGetRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetRateBasedRule", input)
	return &WafGetRateBasedRuleFuture{Future: future}
}

func (a *WAFRegionalStub) GetRateBasedRuleManagedKeys(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	var output waf.GetRateBasedRuleManagedKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetRateBasedRuleManagedKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetRateBasedRuleManagedKeysAsync(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) *WafGetRateBasedRuleManagedKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetRateBasedRuleManagedKeys", input)
	return &WafGetRateBasedRuleManagedKeysFuture{Future: future}
}

func (a *WAFRegionalStub) GetRegexMatchSet(ctx workflow.Context, input *waf.GetRegexMatchSetInput) (*waf.GetRegexMatchSetOutput, error) {
	var output waf.GetRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetRegexMatchSetAsync(ctx workflow.Context, input *waf.GetRegexMatchSetInput) *WafGetRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetRegexMatchSet", input)
	return &WafGetRegexMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) GetRegexPatternSet(ctx workflow.Context, input *waf.GetRegexPatternSetInput) (*waf.GetRegexPatternSetOutput, error) {
	var output waf.GetRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetRegexPatternSetAsync(ctx workflow.Context, input *waf.GetRegexPatternSetInput) *WafGetRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetRegexPatternSet", input)
	return &WafGetRegexPatternSetFuture{Future: future}
}

func (a *WAFRegionalStub) GetRule(ctx workflow.Context, input *waf.GetRuleInput) (*waf.GetRuleOutput, error) {
	var output waf.GetRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetRuleAsync(ctx workflow.Context, input *waf.GetRuleInput) *WafGetRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetRule", input)
	return &WafGetRuleFuture{Future: future}
}

func (a *WAFRegionalStub) GetRuleGroup(ctx workflow.Context, input *waf.GetRuleGroupInput) (*waf.GetRuleGroupOutput, error) {
	var output waf.GetRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetRuleGroupAsync(ctx workflow.Context, input *waf.GetRuleGroupInput) *WafGetRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetRuleGroup", input)
	return &WafGetRuleGroupFuture{Future: future}
}

func (a *WAFRegionalStub) GetSampledRequests(ctx workflow.Context, input *waf.GetSampledRequestsInput) (*waf.GetSampledRequestsOutput, error) {
	var output waf.GetSampledRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetSampledRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetSampledRequestsAsync(ctx workflow.Context, input *waf.GetSampledRequestsInput) *WafGetSampledRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetSampledRequests", input)
	return &WafGetSampledRequestsFuture{Future: future}
}

func (a *WAFRegionalStub) GetSizeConstraintSet(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) (*waf.GetSizeConstraintSetOutput, error) {
	var output waf.GetSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetSizeConstraintSetAsync(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) *WafGetSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetSizeConstraintSet", input)
	return &WafGetSizeConstraintSetFuture{Future: future}
}

func (a *WAFRegionalStub) GetSqlInjectionMatchSet(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) (*waf.GetSqlInjectionMatchSetOutput, error) {
	var output waf.GetSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) *WafGetSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetSqlInjectionMatchSet", input)
	return &WafGetSqlInjectionMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) GetWebACL(ctx workflow.Context, input *waf.GetWebACLInput) (*waf.GetWebACLOutput, error) {
	var output waf.GetWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetWebACLAsync(ctx workflow.Context, input *waf.GetWebACLInput) *WafGetWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetWebACL", input)
	return &WafGetWebACLFuture{Future: future}
}

func (a *WAFRegionalStub) GetWebACLForResource(ctx workflow.Context, input *wafregional.GetWebACLForResourceInput) (*wafregional.GetWebACLForResourceOutput, error) {
	var output wafregional.GetWebACLForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetWebACLForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetWebACLForResourceAsync(ctx workflow.Context, input *wafregional.GetWebACLForResourceInput) *WafregionalGetWebACLForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetWebACLForResource", input)
	return &WafregionalGetWebACLForResourceFuture{Future: future}
}

func (a *WAFRegionalStub) GetXssMatchSet(ctx workflow.Context, input *waf.GetXssMatchSetInput) (*waf.GetXssMatchSetOutput, error) {
	var output waf.GetXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.GetXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) GetXssMatchSetAsync(ctx workflow.Context, input *waf.GetXssMatchSetInput) *WafGetXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.GetXssMatchSet", input)
	return &WafGetXssMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) ListActivatedRulesInRuleGroup(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	var output waf.ListActivatedRulesInRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListActivatedRulesInRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListActivatedRulesInRuleGroupAsync(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) *WafListActivatedRulesInRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListActivatedRulesInRuleGroup", input)
	return &WafListActivatedRulesInRuleGroupFuture{Future: future}
}

func (a *WAFRegionalStub) ListByteMatchSets(ctx workflow.Context, input *waf.ListByteMatchSetsInput) (*waf.ListByteMatchSetsOutput, error) {
	var output waf.ListByteMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListByteMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListByteMatchSetsAsync(ctx workflow.Context, input *waf.ListByteMatchSetsInput) *WafListByteMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListByteMatchSets", input)
	return &WafListByteMatchSetsFuture{Future: future}
}

func (a *WAFRegionalStub) ListGeoMatchSets(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) (*waf.ListGeoMatchSetsOutput, error) {
	var output waf.ListGeoMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListGeoMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListGeoMatchSetsAsync(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) *WafListGeoMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListGeoMatchSets", input)
	return &WafListGeoMatchSetsFuture{Future: future}
}

func (a *WAFRegionalStub) ListIPSets(ctx workflow.Context, input *waf.ListIPSetsInput) (*waf.ListIPSetsOutput, error) {
	var output waf.ListIPSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListIPSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListIPSetsAsync(ctx workflow.Context, input *waf.ListIPSetsInput) *WafListIPSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListIPSets", input)
	return &WafListIPSetsFuture{Future: future}
}

func (a *WAFRegionalStub) ListLoggingConfigurations(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) (*waf.ListLoggingConfigurationsOutput, error) {
	var output waf.ListLoggingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListLoggingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListLoggingConfigurationsAsync(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) *WafListLoggingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListLoggingConfigurations", input)
	return &WafListLoggingConfigurationsFuture{Future: future}
}

func (a *WAFRegionalStub) ListRateBasedRules(ctx workflow.Context, input *waf.ListRateBasedRulesInput) (*waf.ListRateBasedRulesOutput, error) {
	var output waf.ListRateBasedRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListRateBasedRules", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListRateBasedRulesAsync(ctx workflow.Context, input *waf.ListRateBasedRulesInput) *WafListRateBasedRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListRateBasedRules", input)
	return &WafListRateBasedRulesFuture{Future: future}
}

func (a *WAFRegionalStub) ListRegexMatchSets(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) (*waf.ListRegexMatchSetsOutput, error) {
	var output waf.ListRegexMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListRegexMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListRegexMatchSetsAsync(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) *WafListRegexMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListRegexMatchSets", input)
	return &WafListRegexMatchSetsFuture{Future: future}
}

func (a *WAFRegionalStub) ListRegexPatternSets(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) (*waf.ListRegexPatternSetsOutput, error) {
	var output waf.ListRegexPatternSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListRegexPatternSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListRegexPatternSetsAsync(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) *WafListRegexPatternSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListRegexPatternSets", input)
	return &WafListRegexPatternSetsFuture{Future: future}
}

func (a *WAFRegionalStub) ListResourcesForWebACL(ctx workflow.Context, input *wafregional.ListResourcesForWebACLInput) (*wafregional.ListResourcesForWebACLOutput, error) {
	var output wafregional.ListResourcesForWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListResourcesForWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListResourcesForWebACLAsync(ctx workflow.Context, input *wafregional.ListResourcesForWebACLInput) *WafregionalListResourcesForWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListResourcesForWebACL", input)
	return &WafregionalListResourcesForWebACLFuture{Future: future}
}

func (a *WAFRegionalStub) ListRuleGroups(ctx workflow.Context, input *waf.ListRuleGroupsInput) (*waf.ListRuleGroupsOutput, error) {
	var output waf.ListRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListRuleGroupsAsync(ctx workflow.Context, input *waf.ListRuleGroupsInput) *WafListRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListRuleGroups", input)
	return &WafListRuleGroupsFuture{Future: future}
}

func (a *WAFRegionalStub) ListRules(ctx workflow.Context, input *waf.ListRulesInput) (*waf.ListRulesOutput, error) {
	var output waf.ListRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListRules", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListRulesAsync(ctx workflow.Context, input *waf.ListRulesInput) *WafListRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListRules", input)
	return &WafListRulesFuture{Future: future}
}

func (a *WAFRegionalStub) ListSizeConstraintSets(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) (*waf.ListSizeConstraintSetsOutput, error) {
	var output waf.ListSizeConstraintSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListSizeConstraintSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListSizeConstraintSetsAsync(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) *WafListSizeConstraintSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListSizeConstraintSets", input)
	return &WafListSizeConstraintSetsFuture{Future: future}
}

func (a *WAFRegionalStub) ListSqlInjectionMatchSets(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	var output waf.ListSqlInjectionMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListSqlInjectionMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListSqlInjectionMatchSetsAsync(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) *WafListSqlInjectionMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListSqlInjectionMatchSets", input)
	return &WafListSqlInjectionMatchSetsFuture{Future: future}
}

func (a *WAFRegionalStub) ListSubscribedRuleGroups(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) (*waf.ListSubscribedRuleGroupsOutput, error) {
	var output waf.ListSubscribedRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListSubscribedRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListSubscribedRuleGroupsAsync(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) *WafListSubscribedRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListSubscribedRuleGroups", input)
	return &WafListSubscribedRuleGroupsFuture{Future: future}
}

func (a *WAFRegionalStub) ListTagsForResource(ctx workflow.Context, input *waf.ListTagsForResourceInput) (*waf.ListTagsForResourceOutput, error) {
	var output waf.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListTagsForResourceAsync(ctx workflow.Context, input *waf.ListTagsForResourceInput) *WafListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListTagsForResource", input)
	return &WafListTagsForResourceFuture{Future: future}
}

func (a *WAFRegionalStub) ListWebACLs(ctx workflow.Context, input *waf.ListWebACLsInput) (*waf.ListWebACLsOutput, error) {
	var output waf.ListWebACLsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListWebACLs", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListWebACLsAsync(ctx workflow.Context, input *waf.ListWebACLsInput) *WafListWebACLsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListWebACLs", input)
	return &WafListWebACLsFuture{Future: future}
}

func (a *WAFRegionalStub) ListXssMatchSets(ctx workflow.Context, input *waf.ListXssMatchSetsInput) (*waf.ListXssMatchSetsOutput, error) {
	var output waf.ListXssMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.ListXssMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) ListXssMatchSetsAsync(ctx workflow.Context, input *waf.ListXssMatchSetsInput) *WafListXssMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.ListXssMatchSets", input)
	return &WafListXssMatchSetsFuture{Future: future}
}

func (a *WAFRegionalStub) PutLoggingConfiguration(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) (*waf.PutLoggingConfigurationOutput, error) {
	var output waf.PutLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.PutLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) PutLoggingConfigurationAsync(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) *WafPutLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.PutLoggingConfiguration", input)
	return &WafPutLoggingConfigurationFuture{Future: future}
}

func (a *WAFRegionalStub) PutPermissionPolicy(ctx workflow.Context, input *waf.PutPermissionPolicyInput) (*waf.PutPermissionPolicyOutput, error) {
	var output waf.PutPermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.PutPermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) PutPermissionPolicyAsync(ctx workflow.Context, input *waf.PutPermissionPolicyInput) *WafPutPermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.PutPermissionPolicy", input)
	return &WafPutPermissionPolicyFuture{Future: future}
}

func (a *WAFRegionalStub) TagResource(ctx workflow.Context, input *waf.TagResourceInput) (*waf.TagResourceOutput, error) {
	var output waf.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) TagResourceAsync(ctx workflow.Context, input *waf.TagResourceInput) *WafTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.TagResource", input)
	return &WafTagResourceFuture{Future: future}
}

func (a *WAFRegionalStub) UntagResource(ctx workflow.Context, input *waf.UntagResourceInput) (*waf.UntagResourceOutput, error) {
	var output waf.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UntagResourceAsync(ctx workflow.Context, input *waf.UntagResourceInput) *WafUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UntagResource", input)
	return &WafUntagResourceFuture{Future: future}
}

func (a *WAFRegionalStub) UpdateByteMatchSet(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) (*waf.UpdateByteMatchSetOutput, error) {
	var output waf.UpdateByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UpdateByteMatchSetAsync(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) *WafUpdateByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateByteMatchSet", input)
	return &WafUpdateByteMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) UpdateGeoMatchSet(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) (*waf.UpdateGeoMatchSetOutput, error) {
	var output waf.UpdateGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UpdateGeoMatchSetAsync(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) *WafUpdateGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateGeoMatchSet", input)
	return &WafUpdateGeoMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) UpdateIPSet(ctx workflow.Context, input *waf.UpdateIPSetInput) (*waf.UpdateIPSetOutput, error) {
	var output waf.UpdateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UpdateIPSetAsync(ctx workflow.Context, input *waf.UpdateIPSetInput) *WafUpdateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateIPSet", input)
	return &WafUpdateIPSetFuture{Future: future}
}

func (a *WAFRegionalStub) UpdateRateBasedRule(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) (*waf.UpdateRateBasedRuleOutput, error) {
	var output waf.UpdateRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UpdateRateBasedRuleAsync(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) *WafUpdateRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateRateBasedRule", input)
	return &WafUpdateRateBasedRuleFuture{Future: future}
}

func (a *WAFRegionalStub) UpdateRegexMatchSet(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) (*waf.UpdateRegexMatchSetOutput, error) {
	var output waf.UpdateRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UpdateRegexMatchSetAsync(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) *WafUpdateRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateRegexMatchSet", input)
	return &WafUpdateRegexMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) UpdateRegexPatternSet(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) (*waf.UpdateRegexPatternSetOutput, error) {
	var output waf.UpdateRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UpdateRegexPatternSetAsync(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) *WafUpdateRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateRegexPatternSet", input)
	return &WafUpdateRegexPatternSetFuture{Future: future}
}

func (a *WAFRegionalStub) UpdateRule(ctx workflow.Context, input *waf.UpdateRuleInput) (*waf.UpdateRuleOutput, error) {
	var output waf.UpdateRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UpdateRuleAsync(ctx workflow.Context, input *waf.UpdateRuleInput) *WafUpdateRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateRule", input)
	return &WafUpdateRuleFuture{Future: future}
}

func (a *WAFRegionalStub) UpdateRuleGroup(ctx workflow.Context, input *waf.UpdateRuleGroupInput) (*waf.UpdateRuleGroupOutput, error) {
	var output waf.UpdateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UpdateRuleGroupAsync(ctx workflow.Context, input *waf.UpdateRuleGroupInput) *WafUpdateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateRuleGroup", input)
	return &WafUpdateRuleGroupFuture{Future: future}
}

func (a *WAFRegionalStub) UpdateSizeConstraintSet(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) (*waf.UpdateSizeConstraintSetOutput, error) {
	var output waf.UpdateSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UpdateSizeConstraintSetAsync(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) *WafUpdateSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateSizeConstraintSet", input)
	return &WafUpdateSizeConstraintSetFuture{Future: future}
}

func (a *WAFRegionalStub) UpdateSqlInjectionMatchSet(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	var output waf.UpdateSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UpdateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) *WafUpdateSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateSqlInjectionMatchSet", input)
	return &WafUpdateSqlInjectionMatchSetFuture{Future: future}
}

func (a *WAFRegionalStub) UpdateWebACL(ctx workflow.Context, input *waf.UpdateWebACLInput) (*waf.UpdateWebACLOutput, error) {
	var output waf.UpdateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UpdateWebACLAsync(ctx workflow.Context, input *waf.UpdateWebACLInput) *WafUpdateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateWebACL", input)
	return &WafUpdateWebACLFuture{Future: future}
}

func (a *WAFRegionalStub) UpdateXssMatchSet(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) (*waf.UpdateXssMatchSetOutput, error) {
	var output waf.UpdateXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFRegionalStub) UpdateXssMatchSetAsync(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) *WafUpdateXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.wafregional.UpdateXssMatchSet", input)
	return &WafUpdateXssMatchSetFuture{Future: future}
}
