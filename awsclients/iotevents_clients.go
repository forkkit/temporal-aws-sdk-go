// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/iotevents"
	"go.temporal.io/sdk/workflow"
)

type IoTEventsClient interface {
	CreateDetectorModel(ctx workflow.Context, input *iotevents.CreateDetectorModelInput) (*iotevents.CreateDetectorModelOutput, error)
	CreateDetectorModelAsync(ctx workflow.Context, input *iotevents.CreateDetectorModelInput) *IoteventsCreateDetectorModelFuture

	CreateInput(ctx workflow.Context, input *iotevents.CreateInputInput) (*iotevents.CreateInputOutput, error)
	CreateInputAsync(ctx workflow.Context, input *iotevents.CreateInputInput) *IoteventsCreateInputFuture

	DeleteDetectorModel(ctx workflow.Context, input *iotevents.DeleteDetectorModelInput) (*iotevents.DeleteDetectorModelOutput, error)
	DeleteDetectorModelAsync(ctx workflow.Context, input *iotevents.DeleteDetectorModelInput) *IoteventsDeleteDetectorModelFuture

	DeleteInput(ctx workflow.Context, input *iotevents.DeleteInputInput) (*iotevents.DeleteInputOutput, error)
	DeleteInputAsync(ctx workflow.Context, input *iotevents.DeleteInputInput) *IoteventsDeleteInputFuture

	DescribeDetectorModel(ctx workflow.Context, input *iotevents.DescribeDetectorModelInput) (*iotevents.DescribeDetectorModelOutput, error)
	DescribeDetectorModelAsync(ctx workflow.Context, input *iotevents.DescribeDetectorModelInput) *IoteventsDescribeDetectorModelFuture

	DescribeInput(ctx workflow.Context, input *iotevents.DescribeInputInput) (*iotevents.DescribeInputOutput, error)
	DescribeInputAsync(ctx workflow.Context, input *iotevents.DescribeInputInput) *IoteventsDescribeInputFuture

	DescribeLoggingOptions(ctx workflow.Context, input *iotevents.DescribeLoggingOptionsInput) (*iotevents.DescribeLoggingOptionsOutput, error)
	DescribeLoggingOptionsAsync(ctx workflow.Context, input *iotevents.DescribeLoggingOptionsInput) *IoteventsDescribeLoggingOptionsFuture

	ListDetectorModelVersions(ctx workflow.Context, input *iotevents.ListDetectorModelVersionsInput) (*iotevents.ListDetectorModelVersionsOutput, error)
	ListDetectorModelVersionsAsync(ctx workflow.Context, input *iotevents.ListDetectorModelVersionsInput) *IoteventsListDetectorModelVersionsFuture

	ListDetectorModels(ctx workflow.Context, input *iotevents.ListDetectorModelsInput) (*iotevents.ListDetectorModelsOutput, error)
	ListDetectorModelsAsync(ctx workflow.Context, input *iotevents.ListDetectorModelsInput) *IoteventsListDetectorModelsFuture

	ListInputs(ctx workflow.Context, input *iotevents.ListInputsInput) (*iotevents.ListInputsOutput, error)
	ListInputsAsync(ctx workflow.Context, input *iotevents.ListInputsInput) *IoteventsListInputsFuture

	ListTagsForResource(ctx workflow.Context, input *iotevents.ListTagsForResourceInput) (*iotevents.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *iotevents.ListTagsForResourceInput) *IoteventsListTagsForResourceFuture

	PutLoggingOptions(ctx workflow.Context, input *iotevents.PutLoggingOptionsInput) (*iotevents.PutLoggingOptionsOutput, error)
	PutLoggingOptionsAsync(ctx workflow.Context, input *iotevents.PutLoggingOptionsInput) *IoteventsPutLoggingOptionsFuture

	TagResource(ctx workflow.Context, input *iotevents.TagResourceInput) (*iotevents.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *iotevents.TagResourceInput) *IoteventsTagResourceFuture

	UntagResource(ctx workflow.Context, input *iotevents.UntagResourceInput) (*iotevents.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *iotevents.UntagResourceInput) *IoteventsUntagResourceFuture

	UpdateDetectorModel(ctx workflow.Context, input *iotevents.UpdateDetectorModelInput) (*iotevents.UpdateDetectorModelOutput, error)
	UpdateDetectorModelAsync(ctx workflow.Context, input *iotevents.UpdateDetectorModelInput) *IoteventsUpdateDetectorModelFuture

	UpdateInput(ctx workflow.Context, input *iotevents.UpdateInputInput) (*iotevents.UpdateInputOutput, error)
	UpdateInputAsync(ctx workflow.Context, input *iotevents.UpdateInputInput) *IoteventsUpdateInputFuture
}

type IoTEventsStub struct{}

func NewIoTEventsStub() IoTEventsClient {
	return &IoTEventsStub{}
}

type IoteventsCreateDetectorModelFuture struct {
	Future workflow.Future
}

func (r *IoteventsCreateDetectorModelFuture) Get(ctx workflow.Context) (*iotevents.CreateDetectorModelOutput, error) {
	var output iotevents.CreateDetectorModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsCreateInputFuture struct {
	Future workflow.Future
}

func (r *IoteventsCreateInputFuture) Get(ctx workflow.Context) (*iotevents.CreateInputOutput, error) {
	var output iotevents.CreateInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsDeleteDetectorModelFuture struct {
	Future workflow.Future
}

func (r *IoteventsDeleteDetectorModelFuture) Get(ctx workflow.Context) (*iotevents.DeleteDetectorModelOutput, error) {
	var output iotevents.DeleteDetectorModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsDeleteInputFuture struct {
	Future workflow.Future
}

func (r *IoteventsDeleteInputFuture) Get(ctx workflow.Context) (*iotevents.DeleteInputOutput, error) {
	var output iotevents.DeleteInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsDescribeDetectorModelFuture struct {
	Future workflow.Future
}

func (r *IoteventsDescribeDetectorModelFuture) Get(ctx workflow.Context) (*iotevents.DescribeDetectorModelOutput, error) {
	var output iotevents.DescribeDetectorModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsDescribeInputFuture struct {
	Future workflow.Future
}

func (r *IoteventsDescribeInputFuture) Get(ctx workflow.Context) (*iotevents.DescribeInputOutput, error) {
	var output iotevents.DescribeInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsDescribeLoggingOptionsFuture struct {
	Future workflow.Future
}

func (r *IoteventsDescribeLoggingOptionsFuture) Get(ctx workflow.Context) (*iotevents.DescribeLoggingOptionsOutput, error) {
	var output iotevents.DescribeLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsListDetectorModelVersionsFuture struct {
	Future workflow.Future
}

func (r *IoteventsListDetectorModelVersionsFuture) Get(ctx workflow.Context) (*iotevents.ListDetectorModelVersionsOutput, error) {
	var output iotevents.ListDetectorModelVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsListDetectorModelsFuture struct {
	Future workflow.Future
}

func (r *IoteventsListDetectorModelsFuture) Get(ctx workflow.Context) (*iotevents.ListDetectorModelsOutput, error) {
	var output iotevents.ListDetectorModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsListInputsFuture struct {
	Future workflow.Future
}

func (r *IoteventsListInputsFuture) Get(ctx workflow.Context) (*iotevents.ListInputsOutput, error) {
	var output iotevents.ListInputsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *IoteventsListTagsForResourceFuture) Get(ctx workflow.Context) (*iotevents.ListTagsForResourceOutput, error) {
	var output iotevents.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsPutLoggingOptionsFuture struct {
	Future workflow.Future
}

func (r *IoteventsPutLoggingOptionsFuture) Get(ctx workflow.Context) (*iotevents.PutLoggingOptionsOutput, error) {
	var output iotevents.PutLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsTagResourceFuture struct {
	Future workflow.Future
}

func (r *IoteventsTagResourceFuture) Get(ctx workflow.Context) (*iotevents.TagResourceOutput, error) {
	var output iotevents.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsUntagResourceFuture struct {
	Future workflow.Future
}

func (r *IoteventsUntagResourceFuture) Get(ctx workflow.Context) (*iotevents.UntagResourceOutput, error) {
	var output iotevents.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsUpdateDetectorModelFuture struct {
	Future workflow.Future
}

func (r *IoteventsUpdateDetectorModelFuture) Get(ctx workflow.Context) (*iotevents.UpdateDetectorModelOutput, error) {
	var output iotevents.UpdateDetectorModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoteventsUpdateInputFuture struct {
	Future workflow.Future
}

func (r *IoteventsUpdateInputFuture) Get(ctx workflow.Context) (*iotevents.UpdateInputOutput, error) {
	var output iotevents.UpdateInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) CreateDetectorModel(ctx workflow.Context, input *iotevents.CreateDetectorModelInput) (*iotevents.CreateDetectorModelOutput, error) {
	var output iotevents.CreateDetectorModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.CreateDetectorModel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) CreateDetectorModelAsync(ctx workflow.Context, input *iotevents.CreateDetectorModelInput) *IoteventsCreateDetectorModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.CreateDetectorModel", input)
	return &IoteventsCreateDetectorModelFuture{Future: future}
}

func (a *IoTEventsStub) CreateInput(ctx workflow.Context, input *iotevents.CreateInputInput) (*iotevents.CreateInputOutput, error) {
	var output iotevents.CreateInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.CreateInput", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) CreateInputAsync(ctx workflow.Context, input *iotevents.CreateInputInput) *IoteventsCreateInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.CreateInput", input)
	return &IoteventsCreateInputFuture{Future: future}
}

func (a *IoTEventsStub) DeleteDetectorModel(ctx workflow.Context, input *iotevents.DeleteDetectorModelInput) (*iotevents.DeleteDetectorModelOutput, error) {
	var output iotevents.DeleteDetectorModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.DeleteDetectorModel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) DeleteDetectorModelAsync(ctx workflow.Context, input *iotevents.DeleteDetectorModelInput) *IoteventsDeleteDetectorModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.DeleteDetectorModel", input)
	return &IoteventsDeleteDetectorModelFuture{Future: future}
}

func (a *IoTEventsStub) DeleteInput(ctx workflow.Context, input *iotevents.DeleteInputInput) (*iotevents.DeleteInputOutput, error) {
	var output iotevents.DeleteInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.DeleteInput", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) DeleteInputAsync(ctx workflow.Context, input *iotevents.DeleteInputInput) *IoteventsDeleteInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.DeleteInput", input)
	return &IoteventsDeleteInputFuture{Future: future}
}

func (a *IoTEventsStub) DescribeDetectorModel(ctx workflow.Context, input *iotevents.DescribeDetectorModelInput) (*iotevents.DescribeDetectorModelOutput, error) {
	var output iotevents.DescribeDetectorModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.DescribeDetectorModel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) DescribeDetectorModelAsync(ctx workflow.Context, input *iotevents.DescribeDetectorModelInput) *IoteventsDescribeDetectorModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.DescribeDetectorModel", input)
	return &IoteventsDescribeDetectorModelFuture{Future: future}
}

func (a *IoTEventsStub) DescribeInput(ctx workflow.Context, input *iotevents.DescribeInputInput) (*iotevents.DescribeInputOutput, error) {
	var output iotevents.DescribeInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.DescribeInput", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) DescribeInputAsync(ctx workflow.Context, input *iotevents.DescribeInputInput) *IoteventsDescribeInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.DescribeInput", input)
	return &IoteventsDescribeInputFuture{Future: future}
}

func (a *IoTEventsStub) DescribeLoggingOptions(ctx workflow.Context, input *iotevents.DescribeLoggingOptionsInput) (*iotevents.DescribeLoggingOptionsOutput, error) {
	var output iotevents.DescribeLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.DescribeLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) DescribeLoggingOptionsAsync(ctx workflow.Context, input *iotevents.DescribeLoggingOptionsInput) *IoteventsDescribeLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.DescribeLoggingOptions", input)
	return &IoteventsDescribeLoggingOptionsFuture{Future: future}
}

func (a *IoTEventsStub) ListDetectorModelVersions(ctx workflow.Context, input *iotevents.ListDetectorModelVersionsInput) (*iotevents.ListDetectorModelVersionsOutput, error) {
	var output iotevents.ListDetectorModelVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.ListDetectorModelVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) ListDetectorModelVersionsAsync(ctx workflow.Context, input *iotevents.ListDetectorModelVersionsInput) *IoteventsListDetectorModelVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.ListDetectorModelVersions", input)
	return &IoteventsListDetectorModelVersionsFuture{Future: future}
}

func (a *IoTEventsStub) ListDetectorModels(ctx workflow.Context, input *iotevents.ListDetectorModelsInput) (*iotevents.ListDetectorModelsOutput, error) {
	var output iotevents.ListDetectorModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.ListDetectorModels", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) ListDetectorModelsAsync(ctx workflow.Context, input *iotevents.ListDetectorModelsInput) *IoteventsListDetectorModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.ListDetectorModels", input)
	return &IoteventsListDetectorModelsFuture{Future: future}
}

func (a *IoTEventsStub) ListInputs(ctx workflow.Context, input *iotevents.ListInputsInput) (*iotevents.ListInputsOutput, error) {
	var output iotevents.ListInputsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.ListInputs", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) ListInputsAsync(ctx workflow.Context, input *iotevents.ListInputsInput) *IoteventsListInputsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.ListInputs", input)
	return &IoteventsListInputsFuture{Future: future}
}

func (a *IoTEventsStub) ListTagsForResource(ctx workflow.Context, input *iotevents.ListTagsForResourceInput) (*iotevents.ListTagsForResourceOutput, error) {
	var output iotevents.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) ListTagsForResourceAsync(ctx workflow.Context, input *iotevents.ListTagsForResourceInput) *IoteventsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.ListTagsForResource", input)
	return &IoteventsListTagsForResourceFuture{Future: future}
}

func (a *IoTEventsStub) PutLoggingOptions(ctx workflow.Context, input *iotevents.PutLoggingOptionsInput) (*iotevents.PutLoggingOptionsOutput, error) {
	var output iotevents.PutLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.PutLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) PutLoggingOptionsAsync(ctx workflow.Context, input *iotevents.PutLoggingOptionsInput) *IoteventsPutLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.PutLoggingOptions", input)
	return &IoteventsPutLoggingOptionsFuture{Future: future}
}

func (a *IoTEventsStub) TagResource(ctx workflow.Context, input *iotevents.TagResourceInput) (*iotevents.TagResourceOutput, error) {
	var output iotevents.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) TagResourceAsync(ctx workflow.Context, input *iotevents.TagResourceInput) *IoteventsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.TagResource", input)
	return &IoteventsTagResourceFuture{Future: future}
}

func (a *IoTEventsStub) UntagResource(ctx workflow.Context, input *iotevents.UntagResourceInput) (*iotevents.UntagResourceOutput, error) {
	var output iotevents.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) UntagResourceAsync(ctx workflow.Context, input *iotevents.UntagResourceInput) *IoteventsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.UntagResource", input)
	return &IoteventsUntagResourceFuture{Future: future}
}

func (a *IoTEventsStub) UpdateDetectorModel(ctx workflow.Context, input *iotevents.UpdateDetectorModelInput) (*iotevents.UpdateDetectorModelOutput, error) {
	var output iotevents.UpdateDetectorModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.UpdateDetectorModel", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) UpdateDetectorModelAsync(ctx workflow.Context, input *iotevents.UpdateDetectorModelInput) *IoteventsUpdateDetectorModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.UpdateDetectorModel", input)
	return &IoteventsUpdateDetectorModelFuture{Future: future}
}

func (a *IoTEventsStub) UpdateInput(ctx workflow.Context, input *iotevents.UpdateInputInput) (*iotevents.UpdateInputOutput, error) {
	var output iotevents.UpdateInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.iotevents.UpdateInput", input).Get(ctx, &output)
	return &output, err
}

func (a *IoTEventsStub) UpdateInputAsync(ctx workflow.Context, input *iotevents.UpdateInputInput) *IoteventsUpdateInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.iotevents.UpdateInput", input)
	return &IoteventsUpdateInputFuture{Future: future}
}
