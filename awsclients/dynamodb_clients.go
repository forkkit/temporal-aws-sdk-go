// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"go.temporal.io/sdk/workflow"
)

type DynamoDBClient interface {
	BatchGetItem(ctx workflow.Context, input *dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error)
	BatchGetItemAsync(ctx workflow.Context, input *dynamodb.BatchGetItemInput) *DynamodbBatchGetItemFuture

	BatchWriteItem(ctx workflow.Context, input *dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error)
	BatchWriteItemAsync(ctx workflow.Context, input *dynamodb.BatchWriteItemInput) *DynamodbBatchWriteItemFuture

	CreateBackup(ctx workflow.Context, input *dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error)
	CreateBackupAsync(ctx workflow.Context, input *dynamodb.CreateBackupInput) *DynamodbCreateBackupFuture

	CreateGlobalTable(ctx workflow.Context, input *dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error)
	CreateGlobalTableAsync(ctx workflow.Context, input *dynamodb.CreateGlobalTableInput) *DynamodbCreateGlobalTableFuture

	CreateTable(ctx workflow.Context, input *dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error)
	CreateTableAsync(ctx workflow.Context, input *dynamodb.CreateTableInput) *DynamodbCreateTableFuture

	DeleteBackup(ctx workflow.Context, input *dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error)
	DeleteBackupAsync(ctx workflow.Context, input *dynamodb.DeleteBackupInput) *DynamodbDeleteBackupFuture

	DeleteItem(ctx workflow.Context, input *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error)
	DeleteItemAsync(ctx workflow.Context, input *dynamodb.DeleteItemInput) *DynamodbDeleteItemFuture

	DeleteTable(ctx workflow.Context, input *dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error)
	DeleteTableAsync(ctx workflow.Context, input *dynamodb.DeleteTableInput) *DynamodbDeleteTableFuture

	DescribeBackup(ctx workflow.Context, input *dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error)
	DescribeBackupAsync(ctx workflow.Context, input *dynamodb.DescribeBackupInput) *DynamodbDescribeBackupFuture

	DescribeContinuousBackups(ctx workflow.Context, input *dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error)
	DescribeContinuousBackupsAsync(ctx workflow.Context, input *dynamodb.DescribeContinuousBackupsInput) *DynamodbDescribeContinuousBackupsFuture

	DescribeContributorInsights(ctx workflow.Context, input *dynamodb.DescribeContributorInsightsInput) (*dynamodb.DescribeContributorInsightsOutput, error)
	DescribeContributorInsightsAsync(ctx workflow.Context, input *dynamodb.DescribeContributorInsightsInput) *DynamodbDescribeContributorInsightsFuture

	DescribeEndpoints(ctx workflow.Context, input *dynamodb.DescribeEndpointsInput) (*dynamodb.DescribeEndpointsOutput, error)
	DescribeEndpointsAsync(ctx workflow.Context, input *dynamodb.DescribeEndpointsInput) *DynamodbDescribeEndpointsFuture

	DescribeGlobalTable(ctx workflow.Context, input *dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error)
	DescribeGlobalTableAsync(ctx workflow.Context, input *dynamodb.DescribeGlobalTableInput) *DynamodbDescribeGlobalTableFuture

	DescribeGlobalTableSettings(ctx workflow.Context, input *dynamodb.DescribeGlobalTableSettingsInput) (*dynamodb.DescribeGlobalTableSettingsOutput, error)
	DescribeGlobalTableSettingsAsync(ctx workflow.Context, input *dynamodb.DescribeGlobalTableSettingsInput) *DynamodbDescribeGlobalTableSettingsFuture

	DescribeLimits(ctx workflow.Context, input *dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error)
	DescribeLimitsAsync(ctx workflow.Context, input *dynamodb.DescribeLimitsInput) *DynamodbDescribeLimitsFuture

	DescribeTable(ctx workflow.Context, input *dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error)
	DescribeTableAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) *DynamodbDescribeTableFuture

	DescribeTableReplicaAutoScaling(ctx workflow.Context, input *dynamodb.DescribeTableReplicaAutoScalingInput) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error)
	DescribeTableReplicaAutoScalingAsync(ctx workflow.Context, input *dynamodb.DescribeTableReplicaAutoScalingInput) *DynamodbDescribeTableReplicaAutoScalingFuture

	DescribeTimeToLive(ctx workflow.Context, input *dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error)
	DescribeTimeToLiveAsync(ctx workflow.Context, input *dynamodb.DescribeTimeToLiveInput) *DynamodbDescribeTimeToLiveFuture

	GetItem(ctx workflow.Context, input *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error)
	GetItemAsync(ctx workflow.Context, input *dynamodb.GetItemInput) *DynamodbGetItemFuture

	ListBackups(ctx workflow.Context, input *dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error)
	ListBackupsAsync(ctx workflow.Context, input *dynamodb.ListBackupsInput) *DynamodbListBackupsFuture

	ListContributorInsights(ctx workflow.Context, input *dynamodb.ListContributorInsightsInput) (*dynamodb.ListContributorInsightsOutput, error)
	ListContributorInsightsAsync(ctx workflow.Context, input *dynamodb.ListContributorInsightsInput) *DynamodbListContributorInsightsFuture

	ListGlobalTables(ctx workflow.Context, input *dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error)
	ListGlobalTablesAsync(ctx workflow.Context, input *dynamodb.ListGlobalTablesInput) *DynamodbListGlobalTablesFuture

	ListTables(ctx workflow.Context, input *dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error)
	ListTablesAsync(ctx workflow.Context, input *dynamodb.ListTablesInput) *DynamodbListTablesFuture

	ListTagsOfResource(ctx workflow.Context, input *dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error)
	ListTagsOfResourceAsync(ctx workflow.Context, input *dynamodb.ListTagsOfResourceInput) *DynamodbListTagsOfResourceFuture

	PutItem(ctx workflow.Context, input *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error)
	PutItemAsync(ctx workflow.Context, input *dynamodb.PutItemInput) *DynamodbPutItemFuture

	Query(ctx workflow.Context, input *dynamodb.QueryInput) (*dynamodb.QueryOutput, error)
	QueryAsync(ctx workflow.Context, input *dynamodb.QueryInput) *DynamodbQueryFuture

	RestoreTableFromBackup(ctx workflow.Context, input *dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error)
	RestoreTableFromBackupAsync(ctx workflow.Context, input *dynamodb.RestoreTableFromBackupInput) *DynamodbRestoreTableFromBackupFuture

	RestoreTableToPointInTime(ctx workflow.Context, input *dynamodb.RestoreTableToPointInTimeInput) (*dynamodb.RestoreTableToPointInTimeOutput, error)
	RestoreTableToPointInTimeAsync(ctx workflow.Context, input *dynamodb.RestoreTableToPointInTimeInput) *DynamodbRestoreTableToPointInTimeFuture

	Scan(ctx workflow.Context, input *dynamodb.ScanInput) (*dynamodb.ScanOutput, error)
	ScanAsync(ctx workflow.Context, input *dynamodb.ScanInput) *DynamodbScanFuture

	TagResource(ctx workflow.Context, input *dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *dynamodb.TagResourceInput) *DynamodbTagResourceFuture

	TransactGetItems(ctx workflow.Context, input *dynamodb.TransactGetItemsInput) (*dynamodb.TransactGetItemsOutput, error)
	TransactGetItemsAsync(ctx workflow.Context, input *dynamodb.TransactGetItemsInput) *DynamodbTransactGetItemsFuture

	TransactWriteItems(ctx workflow.Context, input *dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error)
	TransactWriteItemsAsync(ctx workflow.Context, input *dynamodb.TransactWriteItemsInput) *DynamodbTransactWriteItemsFuture

	UntagResource(ctx workflow.Context, input *dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *dynamodb.UntagResourceInput) *DynamodbUntagResourceFuture

	UpdateContinuousBackups(ctx workflow.Context, input *dynamodb.UpdateContinuousBackupsInput) (*dynamodb.UpdateContinuousBackupsOutput, error)
	UpdateContinuousBackupsAsync(ctx workflow.Context, input *dynamodb.UpdateContinuousBackupsInput) *DynamodbUpdateContinuousBackupsFuture

	UpdateContributorInsights(ctx workflow.Context, input *dynamodb.UpdateContributorInsightsInput) (*dynamodb.UpdateContributorInsightsOutput, error)
	UpdateContributorInsightsAsync(ctx workflow.Context, input *dynamodb.UpdateContributorInsightsInput) *DynamodbUpdateContributorInsightsFuture

	UpdateGlobalTable(ctx workflow.Context, input *dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error)
	UpdateGlobalTableAsync(ctx workflow.Context, input *dynamodb.UpdateGlobalTableInput) *DynamodbUpdateGlobalTableFuture

	UpdateGlobalTableSettings(ctx workflow.Context, input *dynamodb.UpdateGlobalTableSettingsInput) (*dynamodb.UpdateGlobalTableSettingsOutput, error)
	UpdateGlobalTableSettingsAsync(ctx workflow.Context, input *dynamodb.UpdateGlobalTableSettingsInput) *DynamodbUpdateGlobalTableSettingsFuture

	UpdateItem(ctx workflow.Context, input *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error)
	UpdateItemAsync(ctx workflow.Context, input *dynamodb.UpdateItemInput) *DynamodbUpdateItemFuture

	UpdateTable(ctx workflow.Context, input *dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error)
	UpdateTableAsync(ctx workflow.Context, input *dynamodb.UpdateTableInput) *DynamodbUpdateTableFuture

	UpdateTableReplicaAutoScaling(ctx workflow.Context, input *dynamodb.UpdateTableReplicaAutoScalingInput) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error)
	UpdateTableReplicaAutoScalingAsync(ctx workflow.Context, input *dynamodb.UpdateTableReplicaAutoScalingInput) *DynamodbUpdateTableReplicaAutoScalingFuture

	UpdateTimeToLive(ctx workflow.Context, input *dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error)
	UpdateTimeToLiveAsync(ctx workflow.Context, input *dynamodb.UpdateTimeToLiveInput) *DynamodbUpdateTimeToLiveFuture

	WaitUntilTableExists(ctx workflow.Context, input *dynamodb.DescribeTableInput) error
	WaitUntilTableExistsAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) workflow.Future

	WaitUntilTableNotExists(ctx workflow.Context, input *dynamodb.DescribeTableInput) error
	WaitUntilTableNotExistsAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) workflow.Future
}

type DynamoDBStub struct{}

func NewDynamoDBStub() DynamoDBClient {
	return &DynamoDBStub{}
}

type DynamodbBatchGetItemFuture struct {
	Future workflow.Future
}

func (r *DynamodbBatchGetItemFuture) Get(ctx workflow.Context) (*dynamodb.BatchGetItemOutput, error) {
	var output dynamodb.BatchGetItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbBatchWriteItemFuture struct {
	Future workflow.Future
}

func (r *DynamodbBatchWriteItemFuture) Get(ctx workflow.Context) (*dynamodb.BatchWriteItemOutput, error) {
	var output dynamodb.BatchWriteItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbCreateBackupFuture struct {
	Future workflow.Future
}

func (r *DynamodbCreateBackupFuture) Get(ctx workflow.Context) (*dynamodb.CreateBackupOutput, error) {
	var output dynamodb.CreateBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbCreateGlobalTableFuture struct {
	Future workflow.Future
}

func (r *DynamodbCreateGlobalTableFuture) Get(ctx workflow.Context) (*dynamodb.CreateGlobalTableOutput, error) {
	var output dynamodb.CreateGlobalTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbCreateTableFuture struct {
	Future workflow.Future
}

func (r *DynamodbCreateTableFuture) Get(ctx workflow.Context) (*dynamodb.CreateTableOutput, error) {
	var output dynamodb.CreateTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDeleteBackupFuture struct {
	Future workflow.Future
}

func (r *DynamodbDeleteBackupFuture) Get(ctx workflow.Context) (*dynamodb.DeleteBackupOutput, error) {
	var output dynamodb.DeleteBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDeleteItemFuture struct {
	Future workflow.Future
}

func (r *DynamodbDeleteItemFuture) Get(ctx workflow.Context) (*dynamodb.DeleteItemOutput, error) {
	var output dynamodb.DeleteItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDeleteTableFuture struct {
	Future workflow.Future
}

func (r *DynamodbDeleteTableFuture) Get(ctx workflow.Context) (*dynamodb.DeleteTableOutput, error) {
	var output dynamodb.DeleteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDescribeBackupFuture struct {
	Future workflow.Future
}

func (r *DynamodbDescribeBackupFuture) Get(ctx workflow.Context) (*dynamodb.DescribeBackupOutput, error) {
	var output dynamodb.DescribeBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDescribeContinuousBackupsFuture struct {
	Future workflow.Future
}

func (r *DynamodbDescribeContinuousBackupsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	var output dynamodb.DescribeContinuousBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDescribeContributorInsightsFuture struct {
	Future workflow.Future
}

func (r *DynamodbDescribeContributorInsightsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeContributorInsightsOutput, error) {
	var output dynamodb.DescribeContributorInsightsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDescribeEndpointsFuture struct {
	Future workflow.Future
}

func (r *DynamodbDescribeEndpointsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeEndpointsOutput, error) {
	var output dynamodb.DescribeEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDescribeGlobalTableFuture struct {
	Future workflow.Future
}

func (r *DynamodbDescribeGlobalTableFuture) Get(ctx workflow.Context) (*dynamodb.DescribeGlobalTableOutput, error) {
	var output dynamodb.DescribeGlobalTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDescribeGlobalTableSettingsFuture struct {
	Future workflow.Future
}

func (r *DynamodbDescribeGlobalTableSettingsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
	var output dynamodb.DescribeGlobalTableSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDescribeLimitsFuture struct {
	Future workflow.Future
}

func (r *DynamodbDescribeLimitsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeLimitsOutput, error) {
	var output dynamodb.DescribeLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDescribeTableFuture struct {
	Future workflow.Future
}

func (r *DynamodbDescribeTableFuture) Get(ctx workflow.Context) (*dynamodb.DescribeTableOutput, error) {
	var output dynamodb.DescribeTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDescribeTableReplicaAutoScalingFuture struct {
	Future workflow.Future
}

func (r *DynamodbDescribeTableReplicaAutoScalingFuture) Get(ctx workflow.Context) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
	var output dynamodb.DescribeTableReplicaAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbDescribeTimeToLiveFuture struct {
	Future workflow.Future
}

func (r *DynamodbDescribeTimeToLiveFuture) Get(ctx workflow.Context) (*dynamodb.DescribeTimeToLiveOutput, error) {
	var output dynamodb.DescribeTimeToLiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbGetItemFuture struct {
	Future workflow.Future
}

func (r *DynamodbGetItemFuture) Get(ctx workflow.Context) (*dynamodb.GetItemOutput, error) {
	var output dynamodb.GetItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbListBackupsFuture struct {
	Future workflow.Future
}

func (r *DynamodbListBackupsFuture) Get(ctx workflow.Context) (*dynamodb.ListBackupsOutput, error) {
	var output dynamodb.ListBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbListContributorInsightsFuture struct {
	Future workflow.Future
}

func (r *DynamodbListContributorInsightsFuture) Get(ctx workflow.Context) (*dynamodb.ListContributorInsightsOutput, error) {
	var output dynamodb.ListContributorInsightsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbListGlobalTablesFuture struct {
	Future workflow.Future
}

func (r *DynamodbListGlobalTablesFuture) Get(ctx workflow.Context) (*dynamodb.ListGlobalTablesOutput, error) {
	var output dynamodb.ListGlobalTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbListTablesFuture struct {
	Future workflow.Future
}

func (r *DynamodbListTablesFuture) Get(ctx workflow.Context) (*dynamodb.ListTablesOutput, error) {
	var output dynamodb.ListTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbListTagsOfResourceFuture struct {
	Future workflow.Future
}

func (r *DynamodbListTagsOfResourceFuture) Get(ctx workflow.Context) (*dynamodb.ListTagsOfResourceOutput, error) {
	var output dynamodb.ListTagsOfResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbPutItemFuture struct {
	Future workflow.Future
}

func (r *DynamodbPutItemFuture) Get(ctx workflow.Context) (*dynamodb.PutItemOutput, error) {
	var output dynamodb.PutItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbQueryFuture struct {
	Future workflow.Future
}

func (r *DynamodbQueryFuture) Get(ctx workflow.Context) (*dynamodb.QueryOutput, error) {
	var output dynamodb.QueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbRestoreTableFromBackupFuture struct {
	Future workflow.Future
}

func (r *DynamodbRestoreTableFromBackupFuture) Get(ctx workflow.Context) (*dynamodb.RestoreTableFromBackupOutput, error) {
	var output dynamodb.RestoreTableFromBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbRestoreTableToPointInTimeFuture struct {
	Future workflow.Future
}

func (r *DynamodbRestoreTableToPointInTimeFuture) Get(ctx workflow.Context) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
	var output dynamodb.RestoreTableToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbScanFuture struct {
	Future workflow.Future
}

func (r *DynamodbScanFuture) Get(ctx workflow.Context) (*dynamodb.ScanOutput, error) {
	var output dynamodb.ScanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbTagResourceFuture struct {
	Future workflow.Future
}

func (r *DynamodbTagResourceFuture) Get(ctx workflow.Context) (*dynamodb.TagResourceOutput, error) {
	var output dynamodb.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbTransactGetItemsFuture struct {
	Future workflow.Future
}

func (r *DynamodbTransactGetItemsFuture) Get(ctx workflow.Context) (*dynamodb.TransactGetItemsOutput, error) {
	var output dynamodb.TransactGetItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbTransactWriteItemsFuture struct {
	Future workflow.Future
}

func (r *DynamodbTransactWriteItemsFuture) Get(ctx workflow.Context) (*dynamodb.TransactWriteItemsOutput, error) {
	var output dynamodb.TransactWriteItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbUntagResourceFuture struct {
	Future workflow.Future
}

func (r *DynamodbUntagResourceFuture) Get(ctx workflow.Context) (*dynamodb.UntagResourceOutput, error) {
	var output dynamodb.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbUpdateContinuousBackupsFuture struct {
	Future workflow.Future
}

func (r *DynamodbUpdateContinuousBackupsFuture) Get(ctx workflow.Context) (*dynamodb.UpdateContinuousBackupsOutput, error) {
	var output dynamodb.UpdateContinuousBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbUpdateContributorInsightsFuture struct {
	Future workflow.Future
}

func (r *DynamodbUpdateContributorInsightsFuture) Get(ctx workflow.Context) (*dynamodb.UpdateContributorInsightsOutput, error) {
	var output dynamodb.UpdateContributorInsightsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbUpdateGlobalTableFuture struct {
	Future workflow.Future
}

func (r *DynamodbUpdateGlobalTableFuture) Get(ctx workflow.Context) (*dynamodb.UpdateGlobalTableOutput, error) {
	var output dynamodb.UpdateGlobalTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbUpdateGlobalTableSettingsFuture struct {
	Future workflow.Future
}

func (r *DynamodbUpdateGlobalTableSettingsFuture) Get(ctx workflow.Context) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
	var output dynamodb.UpdateGlobalTableSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbUpdateItemFuture struct {
	Future workflow.Future
}

func (r *DynamodbUpdateItemFuture) Get(ctx workflow.Context) (*dynamodb.UpdateItemOutput, error) {
	var output dynamodb.UpdateItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbUpdateTableFuture struct {
	Future workflow.Future
}

func (r *DynamodbUpdateTableFuture) Get(ctx workflow.Context) (*dynamodb.UpdateTableOutput, error) {
	var output dynamodb.UpdateTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbUpdateTableReplicaAutoScalingFuture struct {
	Future workflow.Future
}

func (r *DynamodbUpdateTableReplicaAutoScalingFuture) Get(ctx workflow.Context) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
	var output dynamodb.UpdateTableReplicaAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamodbUpdateTimeToLiveFuture struct {
	Future workflow.Future
}

func (r *DynamodbUpdateTimeToLiveFuture) Get(ctx workflow.Context) (*dynamodb.UpdateTimeToLiveOutput, error) {
	var output dynamodb.UpdateTimeToLiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) BatchGetItem(ctx workflow.Context, input *dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error) {
	var output dynamodb.BatchGetItemOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.BatchGetItem", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) BatchGetItemAsync(ctx workflow.Context, input *dynamodb.BatchGetItemInput) *DynamodbBatchGetItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.BatchGetItem", input)
	return &DynamodbBatchGetItemFuture{Future: future}
}

func (a *DynamoDBStub) BatchWriteItem(ctx workflow.Context, input *dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error) {
	var output dynamodb.BatchWriteItemOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.BatchWriteItem", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) BatchWriteItemAsync(ctx workflow.Context, input *dynamodb.BatchWriteItemInput) *DynamodbBatchWriteItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.BatchWriteItem", input)
	return &DynamodbBatchWriteItemFuture{Future: future}
}

func (a *DynamoDBStub) CreateBackup(ctx workflow.Context, input *dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error) {
	var output dynamodb.CreateBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.CreateBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) CreateBackupAsync(ctx workflow.Context, input *dynamodb.CreateBackupInput) *DynamodbCreateBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.CreateBackup", input)
	return &DynamodbCreateBackupFuture{Future: future}
}

func (a *DynamoDBStub) CreateGlobalTable(ctx workflow.Context, input *dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error) {
	var output dynamodb.CreateGlobalTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.CreateGlobalTable", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) CreateGlobalTableAsync(ctx workflow.Context, input *dynamodb.CreateGlobalTableInput) *DynamodbCreateGlobalTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.CreateGlobalTable", input)
	return &DynamodbCreateGlobalTableFuture{Future: future}
}

func (a *DynamoDBStub) CreateTable(ctx workflow.Context, input *dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error) {
	var output dynamodb.CreateTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.CreateTable", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) CreateTableAsync(ctx workflow.Context, input *dynamodb.CreateTableInput) *DynamodbCreateTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.CreateTable", input)
	return &DynamodbCreateTableFuture{Future: future}
}

func (a *DynamoDBStub) DeleteBackup(ctx workflow.Context, input *dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error) {
	var output dynamodb.DeleteBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DeleteBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DeleteBackupAsync(ctx workflow.Context, input *dynamodb.DeleteBackupInput) *DynamodbDeleteBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DeleteBackup", input)
	return &DynamodbDeleteBackupFuture{Future: future}
}

func (a *DynamoDBStub) DeleteItem(ctx workflow.Context, input *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error) {
	var output dynamodb.DeleteItemOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DeleteItem", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DeleteItemAsync(ctx workflow.Context, input *dynamodb.DeleteItemInput) *DynamodbDeleteItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DeleteItem", input)
	return &DynamodbDeleteItemFuture{Future: future}
}

func (a *DynamoDBStub) DeleteTable(ctx workflow.Context, input *dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error) {
	var output dynamodb.DeleteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DeleteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DeleteTableAsync(ctx workflow.Context, input *dynamodb.DeleteTableInput) *DynamodbDeleteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DeleteTable", input)
	return &DynamodbDeleteTableFuture{Future: future}
}

func (a *DynamoDBStub) DescribeBackup(ctx workflow.Context, input *dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error) {
	var output dynamodb.DescribeBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DescribeBackupAsync(ctx workflow.Context, input *dynamodb.DescribeBackupInput) *DynamodbDescribeBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeBackup", input)
	return &DynamodbDescribeBackupFuture{Future: future}
}

func (a *DynamoDBStub) DescribeContinuousBackups(ctx workflow.Context, input *dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	var output dynamodb.DescribeContinuousBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeContinuousBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DescribeContinuousBackupsAsync(ctx workflow.Context, input *dynamodb.DescribeContinuousBackupsInput) *DynamodbDescribeContinuousBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeContinuousBackups", input)
	return &DynamodbDescribeContinuousBackupsFuture{Future: future}
}

func (a *DynamoDBStub) DescribeContributorInsights(ctx workflow.Context, input *dynamodb.DescribeContributorInsightsInput) (*dynamodb.DescribeContributorInsightsOutput, error) {
	var output dynamodb.DescribeContributorInsightsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeContributorInsights", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DescribeContributorInsightsAsync(ctx workflow.Context, input *dynamodb.DescribeContributorInsightsInput) *DynamodbDescribeContributorInsightsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeContributorInsights", input)
	return &DynamodbDescribeContributorInsightsFuture{Future: future}
}

func (a *DynamoDBStub) DescribeEndpoints(ctx workflow.Context, input *dynamodb.DescribeEndpointsInput) (*dynamodb.DescribeEndpointsOutput, error) {
	var output dynamodb.DescribeEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DescribeEndpointsAsync(ctx workflow.Context, input *dynamodb.DescribeEndpointsInput) *DynamodbDescribeEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeEndpoints", input)
	return &DynamodbDescribeEndpointsFuture{Future: future}
}

func (a *DynamoDBStub) DescribeGlobalTable(ctx workflow.Context, input *dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error) {
	var output dynamodb.DescribeGlobalTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeGlobalTable", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DescribeGlobalTableAsync(ctx workflow.Context, input *dynamodb.DescribeGlobalTableInput) *DynamodbDescribeGlobalTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeGlobalTable", input)
	return &DynamodbDescribeGlobalTableFuture{Future: future}
}

func (a *DynamoDBStub) DescribeGlobalTableSettings(ctx workflow.Context, input *dynamodb.DescribeGlobalTableSettingsInput) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
	var output dynamodb.DescribeGlobalTableSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeGlobalTableSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DescribeGlobalTableSettingsAsync(ctx workflow.Context, input *dynamodb.DescribeGlobalTableSettingsInput) *DynamodbDescribeGlobalTableSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeGlobalTableSettings", input)
	return &DynamodbDescribeGlobalTableSettingsFuture{Future: future}
}

func (a *DynamoDBStub) DescribeLimits(ctx workflow.Context, input *dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error) {
	var output dynamodb.DescribeLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DescribeLimitsAsync(ctx workflow.Context, input *dynamodb.DescribeLimitsInput) *DynamodbDescribeLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeLimits", input)
	return &DynamodbDescribeLimitsFuture{Future: future}
}

func (a *DynamoDBStub) DescribeTable(ctx workflow.Context, input *dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error) {
	var output dynamodb.DescribeTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeTable", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DescribeTableAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) *DynamodbDescribeTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeTable", input)
	return &DynamodbDescribeTableFuture{Future: future}
}

func (a *DynamoDBStub) DescribeTableReplicaAutoScaling(ctx workflow.Context, input *dynamodb.DescribeTableReplicaAutoScalingInput) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
	var output dynamodb.DescribeTableReplicaAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeTableReplicaAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DescribeTableReplicaAutoScalingAsync(ctx workflow.Context, input *dynamodb.DescribeTableReplicaAutoScalingInput) *DynamodbDescribeTableReplicaAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeTableReplicaAutoScaling", input)
	return &DynamodbDescribeTableReplicaAutoScalingFuture{Future: future}
}

func (a *DynamoDBStub) DescribeTimeToLive(ctx workflow.Context, input *dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error) {
	var output dynamodb.DescribeTimeToLiveOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeTimeToLive", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) DescribeTimeToLiveAsync(ctx workflow.Context, input *dynamodb.DescribeTimeToLiveInput) *DynamodbDescribeTimeToLiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.DescribeTimeToLive", input)
	return &DynamodbDescribeTimeToLiveFuture{Future: future}
}

func (a *DynamoDBStub) GetItem(ctx workflow.Context, input *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error) {
	var output dynamodb.GetItemOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.GetItem", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) GetItemAsync(ctx workflow.Context, input *dynamodb.GetItemInput) *DynamodbGetItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.GetItem", input)
	return &DynamodbGetItemFuture{Future: future}
}

func (a *DynamoDBStub) ListBackups(ctx workflow.Context, input *dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error) {
	var output dynamodb.ListBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.ListBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) ListBackupsAsync(ctx workflow.Context, input *dynamodb.ListBackupsInput) *DynamodbListBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.ListBackups", input)
	return &DynamodbListBackupsFuture{Future: future}
}

func (a *DynamoDBStub) ListContributorInsights(ctx workflow.Context, input *dynamodb.ListContributorInsightsInput) (*dynamodb.ListContributorInsightsOutput, error) {
	var output dynamodb.ListContributorInsightsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.ListContributorInsights", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) ListContributorInsightsAsync(ctx workflow.Context, input *dynamodb.ListContributorInsightsInput) *DynamodbListContributorInsightsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.ListContributorInsights", input)
	return &DynamodbListContributorInsightsFuture{Future: future}
}

func (a *DynamoDBStub) ListGlobalTables(ctx workflow.Context, input *dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error) {
	var output dynamodb.ListGlobalTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.ListGlobalTables", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) ListGlobalTablesAsync(ctx workflow.Context, input *dynamodb.ListGlobalTablesInput) *DynamodbListGlobalTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.ListGlobalTables", input)
	return &DynamodbListGlobalTablesFuture{Future: future}
}

func (a *DynamoDBStub) ListTables(ctx workflow.Context, input *dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error) {
	var output dynamodb.ListTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.ListTables", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) ListTablesAsync(ctx workflow.Context, input *dynamodb.ListTablesInput) *DynamodbListTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.ListTables", input)
	return &DynamodbListTablesFuture{Future: future}
}

func (a *DynamoDBStub) ListTagsOfResource(ctx workflow.Context, input *dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error) {
	var output dynamodb.ListTagsOfResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.ListTagsOfResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) ListTagsOfResourceAsync(ctx workflow.Context, input *dynamodb.ListTagsOfResourceInput) *DynamodbListTagsOfResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.ListTagsOfResource", input)
	return &DynamodbListTagsOfResourceFuture{Future: future}
}

func (a *DynamoDBStub) PutItem(ctx workflow.Context, input *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error) {
	var output dynamodb.PutItemOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.PutItem", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) PutItemAsync(ctx workflow.Context, input *dynamodb.PutItemInput) *DynamodbPutItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.PutItem", input)
	return &DynamodbPutItemFuture{Future: future}
}

func (a *DynamoDBStub) Query(ctx workflow.Context, input *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) {
	var output dynamodb.QueryOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.Query", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) QueryAsync(ctx workflow.Context, input *dynamodb.QueryInput) *DynamodbQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.Query", input)
	return &DynamodbQueryFuture{Future: future}
}

func (a *DynamoDBStub) RestoreTableFromBackup(ctx workflow.Context, input *dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error) {
	var output dynamodb.RestoreTableFromBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.RestoreTableFromBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) RestoreTableFromBackupAsync(ctx workflow.Context, input *dynamodb.RestoreTableFromBackupInput) *DynamodbRestoreTableFromBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.RestoreTableFromBackup", input)
	return &DynamodbRestoreTableFromBackupFuture{Future: future}
}

func (a *DynamoDBStub) RestoreTableToPointInTime(ctx workflow.Context, input *dynamodb.RestoreTableToPointInTimeInput) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
	var output dynamodb.RestoreTableToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.RestoreTableToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) RestoreTableToPointInTimeAsync(ctx workflow.Context, input *dynamodb.RestoreTableToPointInTimeInput) *DynamodbRestoreTableToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.RestoreTableToPointInTime", input)
	return &DynamodbRestoreTableToPointInTimeFuture{Future: future}
}

func (a *DynamoDBStub) Scan(ctx workflow.Context, input *dynamodb.ScanInput) (*dynamodb.ScanOutput, error) {
	var output dynamodb.ScanOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.Scan", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) ScanAsync(ctx workflow.Context, input *dynamodb.ScanInput) *DynamodbScanFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.Scan", input)
	return &DynamodbScanFuture{Future: future}
}

func (a *DynamoDBStub) TagResource(ctx workflow.Context, input *dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error) {
	var output dynamodb.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) TagResourceAsync(ctx workflow.Context, input *dynamodb.TagResourceInput) *DynamodbTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.TagResource", input)
	return &DynamodbTagResourceFuture{Future: future}
}

func (a *DynamoDBStub) TransactGetItems(ctx workflow.Context, input *dynamodb.TransactGetItemsInput) (*dynamodb.TransactGetItemsOutput, error) {
	var output dynamodb.TransactGetItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.TransactGetItems", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) TransactGetItemsAsync(ctx workflow.Context, input *dynamodb.TransactGetItemsInput) *DynamodbTransactGetItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.TransactGetItems", input)
	return &DynamodbTransactGetItemsFuture{Future: future}
}

func (a *DynamoDBStub) TransactWriteItems(ctx workflow.Context, input *dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error) {
	var output dynamodb.TransactWriteItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.TransactWriteItems", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) TransactWriteItemsAsync(ctx workflow.Context, input *dynamodb.TransactWriteItemsInput) *DynamodbTransactWriteItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.TransactWriteItems", input)
	return &DynamodbTransactWriteItemsFuture{Future: future}
}

func (a *DynamoDBStub) UntagResource(ctx workflow.Context, input *dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error) {
	var output dynamodb.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) UntagResourceAsync(ctx workflow.Context, input *dynamodb.UntagResourceInput) *DynamodbUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.UntagResource", input)
	return &DynamodbUntagResourceFuture{Future: future}
}

func (a *DynamoDBStub) UpdateContinuousBackups(ctx workflow.Context, input *dynamodb.UpdateContinuousBackupsInput) (*dynamodb.UpdateContinuousBackupsOutput, error) {
	var output dynamodb.UpdateContinuousBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateContinuousBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) UpdateContinuousBackupsAsync(ctx workflow.Context, input *dynamodb.UpdateContinuousBackupsInput) *DynamodbUpdateContinuousBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateContinuousBackups", input)
	return &DynamodbUpdateContinuousBackupsFuture{Future: future}
}

func (a *DynamoDBStub) UpdateContributorInsights(ctx workflow.Context, input *dynamodb.UpdateContributorInsightsInput) (*dynamodb.UpdateContributorInsightsOutput, error) {
	var output dynamodb.UpdateContributorInsightsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateContributorInsights", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) UpdateContributorInsightsAsync(ctx workflow.Context, input *dynamodb.UpdateContributorInsightsInput) *DynamodbUpdateContributorInsightsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateContributorInsights", input)
	return &DynamodbUpdateContributorInsightsFuture{Future: future}
}

func (a *DynamoDBStub) UpdateGlobalTable(ctx workflow.Context, input *dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error) {
	var output dynamodb.UpdateGlobalTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateGlobalTable", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) UpdateGlobalTableAsync(ctx workflow.Context, input *dynamodb.UpdateGlobalTableInput) *DynamodbUpdateGlobalTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateGlobalTable", input)
	return &DynamodbUpdateGlobalTableFuture{Future: future}
}

func (a *DynamoDBStub) UpdateGlobalTableSettings(ctx workflow.Context, input *dynamodb.UpdateGlobalTableSettingsInput) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
	var output dynamodb.UpdateGlobalTableSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateGlobalTableSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) UpdateGlobalTableSettingsAsync(ctx workflow.Context, input *dynamodb.UpdateGlobalTableSettingsInput) *DynamodbUpdateGlobalTableSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateGlobalTableSettings", input)
	return &DynamodbUpdateGlobalTableSettingsFuture{Future: future}
}

func (a *DynamoDBStub) UpdateItem(ctx workflow.Context, input *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error) {
	var output dynamodb.UpdateItemOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateItem", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) UpdateItemAsync(ctx workflow.Context, input *dynamodb.UpdateItemInput) *DynamodbUpdateItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateItem", input)
	return &DynamodbUpdateItemFuture{Future: future}
}

func (a *DynamoDBStub) UpdateTable(ctx workflow.Context, input *dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error) {
	var output dynamodb.UpdateTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateTable", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) UpdateTableAsync(ctx workflow.Context, input *dynamodb.UpdateTableInput) *DynamodbUpdateTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateTable", input)
	return &DynamodbUpdateTableFuture{Future: future}
}

func (a *DynamoDBStub) UpdateTableReplicaAutoScaling(ctx workflow.Context, input *dynamodb.UpdateTableReplicaAutoScalingInput) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
	var output dynamodb.UpdateTableReplicaAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateTableReplicaAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) UpdateTableReplicaAutoScalingAsync(ctx workflow.Context, input *dynamodb.UpdateTableReplicaAutoScalingInput) *DynamodbUpdateTableReplicaAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateTableReplicaAutoScaling", input)
	return &DynamodbUpdateTableReplicaAutoScalingFuture{Future: future}
}

func (a *DynamoDBStub) UpdateTimeToLive(ctx workflow.Context, input *dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error) {
	var output dynamodb.UpdateTimeToLiveOutput
	err := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateTimeToLive", input).Get(ctx, &output)
	return &output, err
}

func (a *DynamoDBStub) UpdateTimeToLiveAsync(ctx workflow.Context, input *dynamodb.UpdateTimeToLiveInput) *DynamodbUpdateTimeToLiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws.dynamodb.UpdateTimeToLive", input)
	return &DynamodbUpdateTimeToLiveFuture{Future: future}
}

func (a *DynamoDBStub) WaitUntilTableExists(ctx workflow.Context, input *dynamodb.DescribeTableInput) error {
	return workflow.ExecuteActivity(ctx, "aws.dynamodb.WaitUntilTableExists", input).Get(ctx, nil)
}

func (a *DynamoDBStub) WaitUntilTableExistsAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.dynamodb.WaitUntilTableExists", input)
}

func (a *DynamoDBStub) WaitUntilTableNotExists(ctx workflow.Context, input *dynamodb.DescribeTableInput) error {
	return workflow.ExecuteActivity(ctx, "aws.dynamodb.WaitUntilTableNotExists", input).Get(ctx, nil)
}

func (a *DynamoDBStub) WaitUntilTableNotExistsAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.dynamodb.WaitUntilTableNotExists", input)
}
