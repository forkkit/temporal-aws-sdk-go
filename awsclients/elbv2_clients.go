// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/elbv2"
	"go.temporal.io/sdk/workflow"
)

type ELBV2Client interface {
	AddListenerCertificates(ctx workflow.Context, input *elbv2.AddListenerCertificatesInput) (*elbv2.AddListenerCertificatesOutput, error)
	AddListenerCertificatesAsync(ctx workflow.Context, input *elbv2.AddListenerCertificatesInput) *Elbv2AddListenerCertificatesFuture

	AddTags(ctx workflow.Context, input *elbv2.AddTagsInput) (*elbv2.AddTagsOutput, error)
	AddTagsAsync(ctx workflow.Context, input *elbv2.AddTagsInput) *Elbv2AddTagsFuture

	CreateListener(ctx workflow.Context, input *elbv2.CreateListenerInput) (*elbv2.CreateListenerOutput, error)
	CreateListenerAsync(ctx workflow.Context, input *elbv2.CreateListenerInput) *Elbv2CreateListenerFuture

	CreateLoadBalancer(ctx workflow.Context, input *elbv2.CreateLoadBalancerInput) (*elbv2.CreateLoadBalancerOutput, error)
	CreateLoadBalancerAsync(ctx workflow.Context, input *elbv2.CreateLoadBalancerInput) *Elbv2CreateLoadBalancerFuture

	CreateRule(ctx workflow.Context, input *elbv2.CreateRuleInput) (*elbv2.CreateRuleOutput, error)
	CreateRuleAsync(ctx workflow.Context, input *elbv2.CreateRuleInput) *Elbv2CreateRuleFuture

	CreateTargetGroup(ctx workflow.Context, input *elbv2.CreateTargetGroupInput) (*elbv2.CreateTargetGroupOutput, error)
	CreateTargetGroupAsync(ctx workflow.Context, input *elbv2.CreateTargetGroupInput) *Elbv2CreateTargetGroupFuture

	DeleteListener(ctx workflow.Context, input *elbv2.DeleteListenerInput) (*elbv2.DeleteListenerOutput, error)
	DeleteListenerAsync(ctx workflow.Context, input *elbv2.DeleteListenerInput) *Elbv2DeleteListenerFuture

	DeleteLoadBalancer(ctx workflow.Context, input *elbv2.DeleteLoadBalancerInput) (*elbv2.DeleteLoadBalancerOutput, error)
	DeleteLoadBalancerAsync(ctx workflow.Context, input *elbv2.DeleteLoadBalancerInput) *Elbv2DeleteLoadBalancerFuture

	DeleteRule(ctx workflow.Context, input *elbv2.DeleteRuleInput) (*elbv2.DeleteRuleOutput, error)
	DeleteRuleAsync(ctx workflow.Context, input *elbv2.DeleteRuleInput) *Elbv2DeleteRuleFuture

	DeleteTargetGroup(ctx workflow.Context, input *elbv2.DeleteTargetGroupInput) (*elbv2.DeleteTargetGroupOutput, error)
	DeleteTargetGroupAsync(ctx workflow.Context, input *elbv2.DeleteTargetGroupInput) *Elbv2DeleteTargetGroupFuture

	DeregisterTargets(ctx workflow.Context, input *elbv2.DeregisterTargetsInput) (*elbv2.DeregisterTargetsOutput, error)
	DeregisterTargetsAsync(ctx workflow.Context, input *elbv2.DeregisterTargetsInput) *Elbv2DeregisterTargetsFuture

	DescribeAccountLimits(ctx workflow.Context, input *elbv2.DescribeAccountLimitsInput) (*elbv2.DescribeAccountLimitsOutput, error)
	DescribeAccountLimitsAsync(ctx workflow.Context, input *elbv2.DescribeAccountLimitsInput) *Elbv2DescribeAccountLimitsFuture

	DescribeListenerCertificates(ctx workflow.Context, input *elbv2.DescribeListenerCertificatesInput) (*elbv2.DescribeListenerCertificatesOutput, error)
	DescribeListenerCertificatesAsync(ctx workflow.Context, input *elbv2.DescribeListenerCertificatesInput) *Elbv2DescribeListenerCertificatesFuture

	DescribeListeners(ctx workflow.Context, input *elbv2.DescribeListenersInput) (*elbv2.DescribeListenersOutput, error)
	DescribeListenersAsync(ctx workflow.Context, input *elbv2.DescribeListenersInput) *Elbv2DescribeListenersFuture

	DescribeLoadBalancerAttributes(ctx workflow.Context, input *elbv2.DescribeLoadBalancerAttributesInput) (*elbv2.DescribeLoadBalancerAttributesOutput, error)
	DescribeLoadBalancerAttributesAsync(ctx workflow.Context, input *elbv2.DescribeLoadBalancerAttributesInput) *Elbv2DescribeLoadBalancerAttributesFuture

	DescribeLoadBalancers(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) (*elbv2.DescribeLoadBalancersOutput, error)
	DescribeLoadBalancersAsync(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) *Elbv2DescribeLoadBalancersFuture

	DescribeRules(ctx workflow.Context, input *elbv2.DescribeRulesInput) (*elbv2.DescribeRulesOutput, error)
	DescribeRulesAsync(ctx workflow.Context, input *elbv2.DescribeRulesInput) *Elbv2DescribeRulesFuture

	DescribeSSLPolicies(ctx workflow.Context, input *elbv2.DescribeSSLPoliciesInput) (*elbv2.DescribeSSLPoliciesOutput, error)
	DescribeSSLPoliciesAsync(ctx workflow.Context, input *elbv2.DescribeSSLPoliciesInput) *Elbv2DescribeSSLPoliciesFuture

	DescribeTags(ctx workflow.Context, input *elbv2.DescribeTagsInput) (*elbv2.DescribeTagsOutput, error)
	DescribeTagsAsync(ctx workflow.Context, input *elbv2.DescribeTagsInput) *Elbv2DescribeTagsFuture

	DescribeTargetGroupAttributes(ctx workflow.Context, input *elbv2.DescribeTargetGroupAttributesInput) (*elbv2.DescribeTargetGroupAttributesOutput, error)
	DescribeTargetGroupAttributesAsync(ctx workflow.Context, input *elbv2.DescribeTargetGroupAttributesInput) *Elbv2DescribeTargetGroupAttributesFuture

	DescribeTargetGroups(ctx workflow.Context, input *elbv2.DescribeTargetGroupsInput) (*elbv2.DescribeTargetGroupsOutput, error)
	DescribeTargetGroupsAsync(ctx workflow.Context, input *elbv2.DescribeTargetGroupsInput) *Elbv2DescribeTargetGroupsFuture

	DescribeTargetHealth(ctx workflow.Context, input *elbv2.DescribeTargetHealthInput) (*elbv2.DescribeTargetHealthOutput, error)
	DescribeTargetHealthAsync(ctx workflow.Context, input *elbv2.DescribeTargetHealthInput) *Elbv2DescribeTargetHealthFuture

	ModifyListener(ctx workflow.Context, input *elbv2.ModifyListenerInput) (*elbv2.ModifyListenerOutput, error)
	ModifyListenerAsync(ctx workflow.Context, input *elbv2.ModifyListenerInput) *Elbv2ModifyListenerFuture

	ModifyLoadBalancerAttributes(ctx workflow.Context, input *elbv2.ModifyLoadBalancerAttributesInput) (*elbv2.ModifyLoadBalancerAttributesOutput, error)
	ModifyLoadBalancerAttributesAsync(ctx workflow.Context, input *elbv2.ModifyLoadBalancerAttributesInput) *Elbv2ModifyLoadBalancerAttributesFuture

	ModifyRule(ctx workflow.Context, input *elbv2.ModifyRuleInput) (*elbv2.ModifyRuleOutput, error)
	ModifyRuleAsync(ctx workflow.Context, input *elbv2.ModifyRuleInput) *Elbv2ModifyRuleFuture

	ModifyTargetGroup(ctx workflow.Context, input *elbv2.ModifyTargetGroupInput) (*elbv2.ModifyTargetGroupOutput, error)
	ModifyTargetGroupAsync(ctx workflow.Context, input *elbv2.ModifyTargetGroupInput) *Elbv2ModifyTargetGroupFuture

	ModifyTargetGroupAttributes(ctx workflow.Context, input *elbv2.ModifyTargetGroupAttributesInput) (*elbv2.ModifyTargetGroupAttributesOutput, error)
	ModifyTargetGroupAttributesAsync(ctx workflow.Context, input *elbv2.ModifyTargetGroupAttributesInput) *Elbv2ModifyTargetGroupAttributesFuture

	RegisterTargets(ctx workflow.Context, input *elbv2.RegisterTargetsInput) (*elbv2.RegisterTargetsOutput, error)
	RegisterTargetsAsync(ctx workflow.Context, input *elbv2.RegisterTargetsInput) *Elbv2RegisterTargetsFuture

	RemoveListenerCertificates(ctx workflow.Context, input *elbv2.RemoveListenerCertificatesInput) (*elbv2.RemoveListenerCertificatesOutput, error)
	RemoveListenerCertificatesAsync(ctx workflow.Context, input *elbv2.RemoveListenerCertificatesInput) *Elbv2RemoveListenerCertificatesFuture

	RemoveTags(ctx workflow.Context, input *elbv2.RemoveTagsInput) (*elbv2.RemoveTagsOutput, error)
	RemoveTagsAsync(ctx workflow.Context, input *elbv2.RemoveTagsInput) *Elbv2RemoveTagsFuture

	SetIpAddressType(ctx workflow.Context, input *elbv2.SetIpAddressTypeInput) (*elbv2.SetIpAddressTypeOutput, error)
	SetIpAddressTypeAsync(ctx workflow.Context, input *elbv2.SetIpAddressTypeInput) *Elbv2SetIpAddressTypeFuture

	SetRulePriorities(ctx workflow.Context, input *elbv2.SetRulePrioritiesInput) (*elbv2.SetRulePrioritiesOutput, error)
	SetRulePrioritiesAsync(ctx workflow.Context, input *elbv2.SetRulePrioritiesInput) *Elbv2SetRulePrioritiesFuture

	SetSecurityGroups(ctx workflow.Context, input *elbv2.SetSecurityGroupsInput) (*elbv2.SetSecurityGroupsOutput, error)
	SetSecurityGroupsAsync(ctx workflow.Context, input *elbv2.SetSecurityGroupsInput) *Elbv2SetSecurityGroupsFuture

	SetSubnets(ctx workflow.Context, input *elbv2.SetSubnetsInput) (*elbv2.SetSubnetsOutput, error)
	SetSubnetsAsync(ctx workflow.Context, input *elbv2.SetSubnetsInput) *Elbv2SetSubnetsFuture

	WaitUntilLoadBalancerAvailable(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) error
	WaitUntilLoadBalancerAvailableAsync(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) *VoidFuture

	WaitUntilLoadBalancerExists(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) error
	WaitUntilLoadBalancerExistsAsync(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) *VoidFuture

	WaitUntilLoadBalancersDeleted(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) error
	WaitUntilLoadBalancersDeletedAsync(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) *VoidFuture

	WaitUntilTargetDeregistered(ctx workflow.Context, input *elbv2.DescribeTargetHealthInput) error
	WaitUntilTargetDeregisteredAsync(ctx workflow.Context, input *elbv2.DescribeTargetHealthInput) *VoidFuture

	WaitUntilTargetInService(ctx workflow.Context, input *elbv2.DescribeTargetHealthInput) error
	WaitUntilTargetInServiceAsync(ctx workflow.Context, input *elbv2.DescribeTargetHealthInput) *VoidFuture
}

type ELBV2Stub struct{}

func NewELBV2Stub() ELBV2Client {
	return &ELBV2Stub{}
}

type Elbv2AddListenerCertificatesFuture struct {
	Future workflow.Future
}

func (r *Elbv2AddListenerCertificatesFuture) Get(ctx workflow.Context) (*elbv2.AddListenerCertificatesOutput, error) {
	var output elbv2.AddListenerCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2AddTagsFuture struct {
	Future workflow.Future
}

func (r *Elbv2AddTagsFuture) Get(ctx workflow.Context) (*elbv2.AddTagsOutput, error) {
	var output elbv2.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2CreateListenerFuture struct {
	Future workflow.Future
}

func (r *Elbv2CreateListenerFuture) Get(ctx workflow.Context) (*elbv2.CreateListenerOutput, error) {
	var output elbv2.CreateListenerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2CreateLoadBalancerFuture struct {
	Future workflow.Future
}

func (r *Elbv2CreateLoadBalancerFuture) Get(ctx workflow.Context) (*elbv2.CreateLoadBalancerOutput, error) {
	var output elbv2.CreateLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2CreateRuleFuture struct {
	Future workflow.Future
}

func (r *Elbv2CreateRuleFuture) Get(ctx workflow.Context) (*elbv2.CreateRuleOutput, error) {
	var output elbv2.CreateRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2CreateTargetGroupFuture struct {
	Future workflow.Future
}

func (r *Elbv2CreateTargetGroupFuture) Get(ctx workflow.Context) (*elbv2.CreateTargetGroupOutput, error) {
	var output elbv2.CreateTargetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DeleteListenerFuture struct {
	Future workflow.Future
}

func (r *Elbv2DeleteListenerFuture) Get(ctx workflow.Context) (*elbv2.DeleteListenerOutput, error) {
	var output elbv2.DeleteListenerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DeleteLoadBalancerFuture struct {
	Future workflow.Future
}

func (r *Elbv2DeleteLoadBalancerFuture) Get(ctx workflow.Context) (*elbv2.DeleteLoadBalancerOutput, error) {
	var output elbv2.DeleteLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DeleteRuleFuture struct {
	Future workflow.Future
}

func (r *Elbv2DeleteRuleFuture) Get(ctx workflow.Context) (*elbv2.DeleteRuleOutput, error) {
	var output elbv2.DeleteRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DeleteTargetGroupFuture struct {
	Future workflow.Future
}

func (r *Elbv2DeleteTargetGroupFuture) Get(ctx workflow.Context) (*elbv2.DeleteTargetGroupOutput, error) {
	var output elbv2.DeleteTargetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DeregisterTargetsFuture struct {
	Future workflow.Future
}

func (r *Elbv2DeregisterTargetsFuture) Get(ctx workflow.Context) (*elbv2.DeregisterTargetsOutput, error) {
	var output elbv2.DeregisterTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DescribeAccountLimitsFuture struct {
	Future workflow.Future
}

func (r *Elbv2DescribeAccountLimitsFuture) Get(ctx workflow.Context) (*elbv2.DescribeAccountLimitsOutput, error) {
	var output elbv2.DescribeAccountLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DescribeListenerCertificatesFuture struct {
	Future workflow.Future
}

func (r *Elbv2DescribeListenerCertificatesFuture) Get(ctx workflow.Context) (*elbv2.DescribeListenerCertificatesOutput, error) {
	var output elbv2.DescribeListenerCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DescribeListenersFuture struct {
	Future workflow.Future
}

func (r *Elbv2DescribeListenersFuture) Get(ctx workflow.Context) (*elbv2.DescribeListenersOutput, error) {
	var output elbv2.DescribeListenersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DescribeLoadBalancerAttributesFuture struct {
	Future workflow.Future
}

func (r *Elbv2DescribeLoadBalancerAttributesFuture) Get(ctx workflow.Context) (*elbv2.DescribeLoadBalancerAttributesOutput, error) {
	var output elbv2.DescribeLoadBalancerAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DescribeLoadBalancersFuture struct {
	Future workflow.Future
}

func (r *Elbv2DescribeLoadBalancersFuture) Get(ctx workflow.Context) (*elbv2.DescribeLoadBalancersOutput, error) {
	var output elbv2.DescribeLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DescribeRulesFuture struct {
	Future workflow.Future
}

func (r *Elbv2DescribeRulesFuture) Get(ctx workflow.Context) (*elbv2.DescribeRulesOutput, error) {
	var output elbv2.DescribeRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DescribeSSLPoliciesFuture struct {
	Future workflow.Future
}

func (r *Elbv2DescribeSSLPoliciesFuture) Get(ctx workflow.Context) (*elbv2.DescribeSSLPoliciesOutput, error) {
	var output elbv2.DescribeSSLPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DescribeTagsFuture struct {
	Future workflow.Future
}

func (r *Elbv2DescribeTagsFuture) Get(ctx workflow.Context) (*elbv2.DescribeTagsOutput, error) {
	var output elbv2.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DescribeTargetGroupAttributesFuture struct {
	Future workflow.Future
}

func (r *Elbv2DescribeTargetGroupAttributesFuture) Get(ctx workflow.Context) (*elbv2.DescribeTargetGroupAttributesOutput, error) {
	var output elbv2.DescribeTargetGroupAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DescribeTargetGroupsFuture struct {
	Future workflow.Future
}

func (r *Elbv2DescribeTargetGroupsFuture) Get(ctx workflow.Context) (*elbv2.DescribeTargetGroupsOutput, error) {
	var output elbv2.DescribeTargetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2DescribeTargetHealthFuture struct {
	Future workflow.Future
}

func (r *Elbv2DescribeTargetHealthFuture) Get(ctx workflow.Context) (*elbv2.DescribeTargetHealthOutput, error) {
	var output elbv2.DescribeTargetHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2ModifyListenerFuture struct {
	Future workflow.Future
}

func (r *Elbv2ModifyListenerFuture) Get(ctx workflow.Context) (*elbv2.ModifyListenerOutput, error) {
	var output elbv2.ModifyListenerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2ModifyLoadBalancerAttributesFuture struct {
	Future workflow.Future
}

func (r *Elbv2ModifyLoadBalancerAttributesFuture) Get(ctx workflow.Context) (*elbv2.ModifyLoadBalancerAttributesOutput, error) {
	var output elbv2.ModifyLoadBalancerAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2ModifyRuleFuture struct {
	Future workflow.Future
}

func (r *Elbv2ModifyRuleFuture) Get(ctx workflow.Context) (*elbv2.ModifyRuleOutput, error) {
	var output elbv2.ModifyRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2ModifyTargetGroupFuture struct {
	Future workflow.Future
}

func (r *Elbv2ModifyTargetGroupFuture) Get(ctx workflow.Context) (*elbv2.ModifyTargetGroupOutput, error) {
	var output elbv2.ModifyTargetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2ModifyTargetGroupAttributesFuture struct {
	Future workflow.Future
}

func (r *Elbv2ModifyTargetGroupAttributesFuture) Get(ctx workflow.Context) (*elbv2.ModifyTargetGroupAttributesOutput, error) {
	var output elbv2.ModifyTargetGroupAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2RegisterTargetsFuture struct {
	Future workflow.Future
}

func (r *Elbv2RegisterTargetsFuture) Get(ctx workflow.Context) (*elbv2.RegisterTargetsOutput, error) {
	var output elbv2.RegisterTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2RemoveListenerCertificatesFuture struct {
	Future workflow.Future
}

func (r *Elbv2RemoveListenerCertificatesFuture) Get(ctx workflow.Context) (*elbv2.RemoveListenerCertificatesOutput, error) {
	var output elbv2.RemoveListenerCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2RemoveTagsFuture struct {
	Future workflow.Future
}

func (r *Elbv2RemoveTagsFuture) Get(ctx workflow.Context) (*elbv2.RemoveTagsOutput, error) {
	var output elbv2.RemoveTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2SetIpAddressTypeFuture struct {
	Future workflow.Future
}

func (r *Elbv2SetIpAddressTypeFuture) Get(ctx workflow.Context) (*elbv2.SetIpAddressTypeOutput, error) {
	var output elbv2.SetIpAddressTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2SetRulePrioritiesFuture struct {
	Future workflow.Future
}

func (r *Elbv2SetRulePrioritiesFuture) Get(ctx workflow.Context) (*elbv2.SetRulePrioritiesOutput, error) {
	var output elbv2.SetRulePrioritiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2SetSecurityGroupsFuture struct {
	Future workflow.Future
}

func (r *Elbv2SetSecurityGroupsFuture) Get(ctx workflow.Context) (*elbv2.SetSecurityGroupsOutput, error) {
	var output elbv2.SetSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Elbv2SetSubnetsFuture struct {
	Future workflow.Future
}

func (r *Elbv2SetSubnetsFuture) Get(ctx workflow.Context) (*elbv2.SetSubnetsOutput, error) {
	var output elbv2.SetSubnetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) AddListenerCertificates(ctx workflow.Context, input *elbv2.AddListenerCertificatesInput) (*elbv2.AddListenerCertificatesOutput, error) {
	var output elbv2.AddListenerCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.AddListenerCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) AddListenerCertificatesAsync(ctx workflow.Context, input *elbv2.AddListenerCertificatesInput) *Elbv2AddListenerCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.AddListenerCertificates", input)
	return &Elbv2AddListenerCertificatesFuture{Future: future}
}

func (a *ELBV2Stub) AddTags(ctx workflow.Context, input *elbv2.AddTagsInput) (*elbv2.AddTagsOutput, error) {
	var output elbv2.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) AddTagsAsync(ctx workflow.Context, input *elbv2.AddTagsInput) *Elbv2AddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.AddTags", input)
	return &Elbv2AddTagsFuture{Future: future}
}

func (a *ELBV2Stub) CreateListener(ctx workflow.Context, input *elbv2.CreateListenerInput) (*elbv2.CreateListenerOutput, error) {
	var output elbv2.CreateListenerOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.CreateListener", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) CreateListenerAsync(ctx workflow.Context, input *elbv2.CreateListenerInput) *Elbv2CreateListenerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.CreateListener", input)
	return &Elbv2CreateListenerFuture{Future: future}
}

func (a *ELBV2Stub) CreateLoadBalancer(ctx workflow.Context, input *elbv2.CreateLoadBalancerInput) (*elbv2.CreateLoadBalancerOutput, error) {
	var output elbv2.CreateLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.CreateLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) CreateLoadBalancerAsync(ctx workflow.Context, input *elbv2.CreateLoadBalancerInput) *Elbv2CreateLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.CreateLoadBalancer", input)
	return &Elbv2CreateLoadBalancerFuture{Future: future}
}

func (a *ELBV2Stub) CreateRule(ctx workflow.Context, input *elbv2.CreateRuleInput) (*elbv2.CreateRuleOutput, error) {
	var output elbv2.CreateRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.CreateRule", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) CreateRuleAsync(ctx workflow.Context, input *elbv2.CreateRuleInput) *Elbv2CreateRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.CreateRule", input)
	return &Elbv2CreateRuleFuture{Future: future}
}

func (a *ELBV2Stub) CreateTargetGroup(ctx workflow.Context, input *elbv2.CreateTargetGroupInput) (*elbv2.CreateTargetGroupOutput, error) {
	var output elbv2.CreateTargetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.CreateTargetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) CreateTargetGroupAsync(ctx workflow.Context, input *elbv2.CreateTargetGroupInput) *Elbv2CreateTargetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.CreateTargetGroup", input)
	return &Elbv2CreateTargetGroupFuture{Future: future}
}

func (a *ELBV2Stub) DeleteListener(ctx workflow.Context, input *elbv2.DeleteListenerInput) (*elbv2.DeleteListenerOutput, error) {
	var output elbv2.DeleteListenerOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DeleteListener", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DeleteListenerAsync(ctx workflow.Context, input *elbv2.DeleteListenerInput) *Elbv2DeleteListenerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DeleteListener", input)
	return &Elbv2DeleteListenerFuture{Future: future}
}

func (a *ELBV2Stub) DeleteLoadBalancer(ctx workflow.Context, input *elbv2.DeleteLoadBalancerInput) (*elbv2.DeleteLoadBalancerOutput, error) {
	var output elbv2.DeleteLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DeleteLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DeleteLoadBalancerAsync(ctx workflow.Context, input *elbv2.DeleteLoadBalancerInput) *Elbv2DeleteLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DeleteLoadBalancer", input)
	return &Elbv2DeleteLoadBalancerFuture{Future: future}
}

func (a *ELBV2Stub) DeleteRule(ctx workflow.Context, input *elbv2.DeleteRuleInput) (*elbv2.DeleteRuleOutput, error) {
	var output elbv2.DeleteRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DeleteRule", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DeleteRuleAsync(ctx workflow.Context, input *elbv2.DeleteRuleInput) *Elbv2DeleteRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DeleteRule", input)
	return &Elbv2DeleteRuleFuture{Future: future}
}

func (a *ELBV2Stub) DeleteTargetGroup(ctx workflow.Context, input *elbv2.DeleteTargetGroupInput) (*elbv2.DeleteTargetGroupOutput, error) {
	var output elbv2.DeleteTargetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DeleteTargetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DeleteTargetGroupAsync(ctx workflow.Context, input *elbv2.DeleteTargetGroupInput) *Elbv2DeleteTargetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DeleteTargetGroup", input)
	return &Elbv2DeleteTargetGroupFuture{Future: future}
}

func (a *ELBV2Stub) DeregisterTargets(ctx workflow.Context, input *elbv2.DeregisterTargetsInput) (*elbv2.DeregisterTargetsOutput, error) {
	var output elbv2.DeregisterTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DeregisterTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DeregisterTargetsAsync(ctx workflow.Context, input *elbv2.DeregisterTargetsInput) *Elbv2DeregisterTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DeregisterTargets", input)
	return &Elbv2DeregisterTargetsFuture{Future: future}
}

func (a *ELBV2Stub) DescribeAccountLimits(ctx workflow.Context, input *elbv2.DescribeAccountLimitsInput) (*elbv2.DescribeAccountLimitsOutput, error) {
	var output elbv2.DescribeAccountLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeAccountLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DescribeAccountLimitsAsync(ctx workflow.Context, input *elbv2.DescribeAccountLimitsInput) *Elbv2DescribeAccountLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeAccountLimits", input)
	return &Elbv2DescribeAccountLimitsFuture{Future: future}
}

func (a *ELBV2Stub) DescribeListenerCertificates(ctx workflow.Context, input *elbv2.DescribeListenerCertificatesInput) (*elbv2.DescribeListenerCertificatesOutput, error) {
	var output elbv2.DescribeListenerCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeListenerCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DescribeListenerCertificatesAsync(ctx workflow.Context, input *elbv2.DescribeListenerCertificatesInput) *Elbv2DescribeListenerCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeListenerCertificates", input)
	return &Elbv2DescribeListenerCertificatesFuture{Future: future}
}

func (a *ELBV2Stub) DescribeListeners(ctx workflow.Context, input *elbv2.DescribeListenersInput) (*elbv2.DescribeListenersOutput, error) {
	var output elbv2.DescribeListenersOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeListeners", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DescribeListenersAsync(ctx workflow.Context, input *elbv2.DescribeListenersInput) *Elbv2DescribeListenersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeListeners", input)
	return &Elbv2DescribeListenersFuture{Future: future}
}

func (a *ELBV2Stub) DescribeLoadBalancerAttributes(ctx workflow.Context, input *elbv2.DescribeLoadBalancerAttributesInput) (*elbv2.DescribeLoadBalancerAttributesOutput, error) {
	var output elbv2.DescribeLoadBalancerAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeLoadBalancerAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DescribeLoadBalancerAttributesAsync(ctx workflow.Context, input *elbv2.DescribeLoadBalancerAttributesInput) *Elbv2DescribeLoadBalancerAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeLoadBalancerAttributes", input)
	return &Elbv2DescribeLoadBalancerAttributesFuture{Future: future}
}

func (a *ELBV2Stub) DescribeLoadBalancers(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) (*elbv2.DescribeLoadBalancersOutput, error) {
	var output elbv2.DescribeLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DescribeLoadBalancersAsync(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) *Elbv2DescribeLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeLoadBalancers", input)
	return &Elbv2DescribeLoadBalancersFuture{Future: future}
}

func (a *ELBV2Stub) DescribeRules(ctx workflow.Context, input *elbv2.DescribeRulesInput) (*elbv2.DescribeRulesOutput, error) {
	var output elbv2.DescribeRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeRules", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DescribeRulesAsync(ctx workflow.Context, input *elbv2.DescribeRulesInput) *Elbv2DescribeRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeRules", input)
	return &Elbv2DescribeRulesFuture{Future: future}
}

func (a *ELBV2Stub) DescribeSSLPolicies(ctx workflow.Context, input *elbv2.DescribeSSLPoliciesInput) (*elbv2.DescribeSSLPoliciesOutput, error) {
	var output elbv2.DescribeSSLPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeSSLPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DescribeSSLPoliciesAsync(ctx workflow.Context, input *elbv2.DescribeSSLPoliciesInput) *Elbv2DescribeSSLPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeSSLPolicies", input)
	return &Elbv2DescribeSSLPoliciesFuture{Future: future}
}

func (a *ELBV2Stub) DescribeTags(ctx workflow.Context, input *elbv2.DescribeTagsInput) (*elbv2.DescribeTagsOutput, error) {
	var output elbv2.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DescribeTagsAsync(ctx workflow.Context, input *elbv2.DescribeTagsInput) *Elbv2DescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeTags", input)
	return &Elbv2DescribeTagsFuture{Future: future}
}

func (a *ELBV2Stub) DescribeTargetGroupAttributes(ctx workflow.Context, input *elbv2.DescribeTargetGroupAttributesInput) (*elbv2.DescribeTargetGroupAttributesOutput, error) {
	var output elbv2.DescribeTargetGroupAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeTargetGroupAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DescribeTargetGroupAttributesAsync(ctx workflow.Context, input *elbv2.DescribeTargetGroupAttributesInput) *Elbv2DescribeTargetGroupAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeTargetGroupAttributes", input)
	return &Elbv2DescribeTargetGroupAttributesFuture{Future: future}
}

func (a *ELBV2Stub) DescribeTargetGroups(ctx workflow.Context, input *elbv2.DescribeTargetGroupsInput) (*elbv2.DescribeTargetGroupsOutput, error) {
	var output elbv2.DescribeTargetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeTargetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DescribeTargetGroupsAsync(ctx workflow.Context, input *elbv2.DescribeTargetGroupsInput) *Elbv2DescribeTargetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeTargetGroups", input)
	return &Elbv2DescribeTargetGroupsFuture{Future: future}
}

func (a *ELBV2Stub) DescribeTargetHealth(ctx workflow.Context, input *elbv2.DescribeTargetHealthInput) (*elbv2.DescribeTargetHealthOutput, error) {
	var output elbv2.DescribeTargetHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeTargetHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) DescribeTargetHealthAsync(ctx workflow.Context, input *elbv2.DescribeTargetHealthInput) *Elbv2DescribeTargetHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.DescribeTargetHealth", input)
	return &Elbv2DescribeTargetHealthFuture{Future: future}
}

func (a *ELBV2Stub) ModifyListener(ctx workflow.Context, input *elbv2.ModifyListenerInput) (*elbv2.ModifyListenerOutput, error) {
	var output elbv2.ModifyListenerOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.ModifyListener", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) ModifyListenerAsync(ctx workflow.Context, input *elbv2.ModifyListenerInput) *Elbv2ModifyListenerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.ModifyListener", input)
	return &Elbv2ModifyListenerFuture{Future: future}
}

func (a *ELBV2Stub) ModifyLoadBalancerAttributes(ctx workflow.Context, input *elbv2.ModifyLoadBalancerAttributesInput) (*elbv2.ModifyLoadBalancerAttributesOutput, error) {
	var output elbv2.ModifyLoadBalancerAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.ModifyLoadBalancerAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) ModifyLoadBalancerAttributesAsync(ctx workflow.Context, input *elbv2.ModifyLoadBalancerAttributesInput) *Elbv2ModifyLoadBalancerAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.ModifyLoadBalancerAttributes", input)
	return &Elbv2ModifyLoadBalancerAttributesFuture{Future: future}
}

func (a *ELBV2Stub) ModifyRule(ctx workflow.Context, input *elbv2.ModifyRuleInput) (*elbv2.ModifyRuleOutput, error) {
	var output elbv2.ModifyRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.ModifyRule", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) ModifyRuleAsync(ctx workflow.Context, input *elbv2.ModifyRuleInput) *Elbv2ModifyRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.ModifyRule", input)
	return &Elbv2ModifyRuleFuture{Future: future}
}

func (a *ELBV2Stub) ModifyTargetGroup(ctx workflow.Context, input *elbv2.ModifyTargetGroupInput) (*elbv2.ModifyTargetGroupOutput, error) {
	var output elbv2.ModifyTargetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.ModifyTargetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) ModifyTargetGroupAsync(ctx workflow.Context, input *elbv2.ModifyTargetGroupInput) *Elbv2ModifyTargetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.ModifyTargetGroup", input)
	return &Elbv2ModifyTargetGroupFuture{Future: future}
}

func (a *ELBV2Stub) ModifyTargetGroupAttributes(ctx workflow.Context, input *elbv2.ModifyTargetGroupAttributesInput) (*elbv2.ModifyTargetGroupAttributesOutput, error) {
	var output elbv2.ModifyTargetGroupAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.ModifyTargetGroupAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) ModifyTargetGroupAttributesAsync(ctx workflow.Context, input *elbv2.ModifyTargetGroupAttributesInput) *Elbv2ModifyTargetGroupAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.ModifyTargetGroupAttributes", input)
	return &Elbv2ModifyTargetGroupAttributesFuture{Future: future}
}

func (a *ELBV2Stub) RegisterTargets(ctx workflow.Context, input *elbv2.RegisterTargetsInput) (*elbv2.RegisterTargetsOutput, error) {
	var output elbv2.RegisterTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.RegisterTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) RegisterTargetsAsync(ctx workflow.Context, input *elbv2.RegisterTargetsInput) *Elbv2RegisterTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.RegisterTargets", input)
	return &Elbv2RegisterTargetsFuture{Future: future}
}

func (a *ELBV2Stub) RemoveListenerCertificates(ctx workflow.Context, input *elbv2.RemoveListenerCertificatesInput) (*elbv2.RemoveListenerCertificatesOutput, error) {
	var output elbv2.RemoveListenerCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.RemoveListenerCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) RemoveListenerCertificatesAsync(ctx workflow.Context, input *elbv2.RemoveListenerCertificatesInput) *Elbv2RemoveListenerCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.RemoveListenerCertificates", input)
	return &Elbv2RemoveListenerCertificatesFuture{Future: future}
}

func (a *ELBV2Stub) RemoveTags(ctx workflow.Context, input *elbv2.RemoveTagsInput) (*elbv2.RemoveTagsOutput, error) {
	var output elbv2.RemoveTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.RemoveTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) RemoveTagsAsync(ctx workflow.Context, input *elbv2.RemoveTagsInput) *Elbv2RemoveTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.RemoveTags", input)
	return &Elbv2RemoveTagsFuture{Future: future}
}

func (a *ELBV2Stub) SetIpAddressType(ctx workflow.Context, input *elbv2.SetIpAddressTypeInput) (*elbv2.SetIpAddressTypeOutput, error) {
	var output elbv2.SetIpAddressTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.SetIpAddressType", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) SetIpAddressTypeAsync(ctx workflow.Context, input *elbv2.SetIpAddressTypeInput) *Elbv2SetIpAddressTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.SetIpAddressType", input)
	return &Elbv2SetIpAddressTypeFuture{Future: future}
}

func (a *ELBV2Stub) SetRulePriorities(ctx workflow.Context, input *elbv2.SetRulePrioritiesInput) (*elbv2.SetRulePrioritiesOutput, error) {
	var output elbv2.SetRulePrioritiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.SetRulePriorities", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) SetRulePrioritiesAsync(ctx workflow.Context, input *elbv2.SetRulePrioritiesInput) *Elbv2SetRulePrioritiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.SetRulePriorities", input)
	return &Elbv2SetRulePrioritiesFuture{Future: future}
}

func (a *ELBV2Stub) SetSecurityGroups(ctx workflow.Context, input *elbv2.SetSecurityGroupsInput) (*elbv2.SetSecurityGroupsOutput, error) {
	var output elbv2.SetSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.SetSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) SetSecurityGroupsAsync(ctx workflow.Context, input *elbv2.SetSecurityGroupsInput) *Elbv2SetSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.SetSecurityGroups", input)
	return &Elbv2SetSecurityGroupsFuture{Future: future}
}

func (a *ELBV2Stub) SetSubnets(ctx workflow.Context, input *elbv2.SetSubnetsInput) (*elbv2.SetSubnetsOutput, error) {
	var output elbv2.SetSubnetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.elbv2.SetSubnets", input).Get(ctx, &output)
	return &output, err
}

func (a *ELBV2Stub) SetSubnetsAsync(ctx workflow.Context, input *elbv2.SetSubnetsInput) *Elbv2SetSubnetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.SetSubnets", input)
	return &Elbv2SetSubnetsFuture{Future: future}
}

func (a *ELBV2Stub) WaitUntilLoadBalancerAvailable(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elbv2.WaitUntilLoadBalancerAvailable", input).Get(ctx, nil)
}

func (a *ELBV2Stub) WaitUntilLoadBalancerAvailableAsync(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.WaitUntilLoadBalancerAvailable", input)
	return NewVoidFuture(future)
}

func (a *ELBV2Stub) WaitUntilLoadBalancerExists(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elbv2.WaitUntilLoadBalancerExists", input).Get(ctx, nil)
}

func (a *ELBV2Stub) WaitUntilLoadBalancerExistsAsync(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.WaitUntilLoadBalancerExists", input)
	return NewVoidFuture(future)
}

func (a *ELBV2Stub) WaitUntilLoadBalancersDeleted(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elbv2.WaitUntilLoadBalancersDeleted", input).Get(ctx, nil)
}

func (a *ELBV2Stub) WaitUntilLoadBalancersDeletedAsync(ctx workflow.Context, input *elbv2.DescribeLoadBalancersInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.WaitUntilLoadBalancersDeleted", input)
	return NewVoidFuture(future)
}

func (a *ELBV2Stub) WaitUntilTargetDeregistered(ctx workflow.Context, input *elbv2.DescribeTargetHealthInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elbv2.WaitUntilTargetDeregistered", input).Get(ctx, nil)
}

func (a *ELBV2Stub) WaitUntilTargetDeregisteredAsync(ctx workflow.Context, input *elbv2.DescribeTargetHealthInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.WaitUntilTargetDeregistered", input)
	return NewVoidFuture(future)
}

func (a *ELBV2Stub) WaitUntilTargetInService(ctx workflow.Context, input *elbv2.DescribeTargetHealthInput) error {
	return workflow.ExecuteActivity(ctx, "aws.elbv2.WaitUntilTargetInService", input).Get(ctx, nil)
}

func (a *ELBV2Stub) WaitUntilTargetInServiceAsync(ctx workflow.Context, input *elbv2.DescribeTargetHealthInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.elbv2.WaitUntilTargetInService", input)
	return NewVoidFuture(future)
}
