// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/route53domains"
	"go.temporal.io/sdk/workflow"
)

type Route53DomainsClient interface {
	AcceptDomainTransferFromAnotherAwsAccount(ctx workflow.Context, input *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput) (*route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput, error)
	AcceptDomainTransferFromAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput) *Route53domainsAcceptDomainTransferFromAnotherAwsAccountFuture

	CancelDomainTransferToAnotherAwsAccount(ctx workflow.Context, input *route53domains.CancelDomainTransferToAnotherAwsAccountInput) (*route53domains.CancelDomainTransferToAnotherAwsAccountOutput, error)
	CancelDomainTransferToAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.CancelDomainTransferToAnotherAwsAccountInput) *Route53domainsCancelDomainTransferToAnotherAwsAccountFuture

	CheckDomainAvailability(ctx workflow.Context, input *route53domains.CheckDomainAvailabilityInput) (*route53domains.CheckDomainAvailabilityOutput, error)
	CheckDomainAvailabilityAsync(ctx workflow.Context, input *route53domains.CheckDomainAvailabilityInput) *Route53domainsCheckDomainAvailabilityFuture

	CheckDomainTransferability(ctx workflow.Context, input *route53domains.CheckDomainTransferabilityInput) (*route53domains.CheckDomainTransferabilityOutput, error)
	CheckDomainTransferabilityAsync(ctx workflow.Context, input *route53domains.CheckDomainTransferabilityInput) *Route53domainsCheckDomainTransferabilityFuture

	DeleteTagsForDomain(ctx workflow.Context, input *route53domains.DeleteTagsForDomainInput) (*route53domains.DeleteTagsForDomainOutput, error)
	DeleteTagsForDomainAsync(ctx workflow.Context, input *route53domains.DeleteTagsForDomainInput) *Route53domainsDeleteTagsForDomainFuture

	DisableDomainAutoRenew(ctx workflow.Context, input *route53domains.DisableDomainAutoRenewInput) (*route53domains.DisableDomainAutoRenewOutput, error)
	DisableDomainAutoRenewAsync(ctx workflow.Context, input *route53domains.DisableDomainAutoRenewInput) *Route53domainsDisableDomainAutoRenewFuture

	DisableDomainTransferLock(ctx workflow.Context, input *route53domains.DisableDomainTransferLockInput) (*route53domains.DisableDomainTransferLockOutput, error)
	DisableDomainTransferLockAsync(ctx workflow.Context, input *route53domains.DisableDomainTransferLockInput) *Route53domainsDisableDomainTransferLockFuture

	EnableDomainAutoRenew(ctx workflow.Context, input *route53domains.EnableDomainAutoRenewInput) (*route53domains.EnableDomainAutoRenewOutput, error)
	EnableDomainAutoRenewAsync(ctx workflow.Context, input *route53domains.EnableDomainAutoRenewInput) *Route53domainsEnableDomainAutoRenewFuture

	EnableDomainTransferLock(ctx workflow.Context, input *route53domains.EnableDomainTransferLockInput) (*route53domains.EnableDomainTransferLockOutput, error)
	EnableDomainTransferLockAsync(ctx workflow.Context, input *route53domains.EnableDomainTransferLockInput) *Route53domainsEnableDomainTransferLockFuture

	GetContactReachabilityStatus(ctx workflow.Context, input *route53domains.GetContactReachabilityStatusInput) (*route53domains.GetContactReachabilityStatusOutput, error)
	GetContactReachabilityStatusAsync(ctx workflow.Context, input *route53domains.GetContactReachabilityStatusInput) *Route53domainsGetContactReachabilityStatusFuture

	GetDomainDetail(ctx workflow.Context, input *route53domains.GetDomainDetailInput) (*route53domains.GetDomainDetailOutput, error)
	GetDomainDetailAsync(ctx workflow.Context, input *route53domains.GetDomainDetailInput) *Route53domainsGetDomainDetailFuture

	GetDomainSuggestions(ctx workflow.Context, input *route53domains.GetDomainSuggestionsInput) (*route53domains.GetDomainSuggestionsOutput, error)
	GetDomainSuggestionsAsync(ctx workflow.Context, input *route53domains.GetDomainSuggestionsInput) *Route53domainsGetDomainSuggestionsFuture

	GetOperationDetail(ctx workflow.Context, input *route53domains.GetOperationDetailInput) (*route53domains.GetOperationDetailOutput, error)
	GetOperationDetailAsync(ctx workflow.Context, input *route53domains.GetOperationDetailInput) *Route53domainsGetOperationDetailFuture

	ListDomains(ctx workflow.Context, input *route53domains.ListDomainsInput) (*route53domains.ListDomainsOutput, error)
	ListDomainsAsync(ctx workflow.Context, input *route53domains.ListDomainsInput) *Route53domainsListDomainsFuture

	ListOperations(ctx workflow.Context, input *route53domains.ListOperationsInput) (*route53domains.ListOperationsOutput, error)
	ListOperationsAsync(ctx workflow.Context, input *route53domains.ListOperationsInput) *Route53domainsListOperationsFuture

	ListTagsForDomain(ctx workflow.Context, input *route53domains.ListTagsForDomainInput) (*route53domains.ListTagsForDomainOutput, error)
	ListTagsForDomainAsync(ctx workflow.Context, input *route53domains.ListTagsForDomainInput) *Route53domainsListTagsForDomainFuture

	RegisterDomain(ctx workflow.Context, input *route53domains.RegisterDomainInput) (*route53domains.RegisterDomainOutput, error)
	RegisterDomainAsync(ctx workflow.Context, input *route53domains.RegisterDomainInput) *Route53domainsRegisterDomainFuture

	RejectDomainTransferFromAnotherAwsAccount(ctx workflow.Context, input *route53domains.RejectDomainTransferFromAnotherAwsAccountInput) (*route53domains.RejectDomainTransferFromAnotherAwsAccountOutput, error)
	RejectDomainTransferFromAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.RejectDomainTransferFromAnotherAwsAccountInput) *Route53domainsRejectDomainTransferFromAnotherAwsAccountFuture

	RenewDomain(ctx workflow.Context, input *route53domains.RenewDomainInput) (*route53domains.RenewDomainOutput, error)
	RenewDomainAsync(ctx workflow.Context, input *route53domains.RenewDomainInput) *Route53domainsRenewDomainFuture

	ResendContactReachabilityEmail(ctx workflow.Context, input *route53domains.ResendContactReachabilityEmailInput) (*route53domains.ResendContactReachabilityEmailOutput, error)
	ResendContactReachabilityEmailAsync(ctx workflow.Context, input *route53domains.ResendContactReachabilityEmailInput) *Route53domainsResendContactReachabilityEmailFuture

	RetrieveDomainAuthCode(ctx workflow.Context, input *route53domains.RetrieveDomainAuthCodeInput) (*route53domains.RetrieveDomainAuthCodeOutput, error)
	RetrieveDomainAuthCodeAsync(ctx workflow.Context, input *route53domains.RetrieveDomainAuthCodeInput) *Route53domainsRetrieveDomainAuthCodeFuture

	TransferDomain(ctx workflow.Context, input *route53domains.TransferDomainInput) (*route53domains.TransferDomainOutput, error)
	TransferDomainAsync(ctx workflow.Context, input *route53domains.TransferDomainInput) *Route53domainsTransferDomainFuture

	TransferDomainToAnotherAwsAccount(ctx workflow.Context, input *route53domains.TransferDomainToAnotherAwsAccountInput) (*route53domains.TransferDomainToAnotherAwsAccountOutput, error)
	TransferDomainToAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.TransferDomainToAnotherAwsAccountInput) *Route53domainsTransferDomainToAnotherAwsAccountFuture

	UpdateDomainContact(ctx workflow.Context, input *route53domains.UpdateDomainContactInput) (*route53domains.UpdateDomainContactOutput, error)
	UpdateDomainContactAsync(ctx workflow.Context, input *route53domains.UpdateDomainContactInput) *Route53domainsUpdateDomainContactFuture

	UpdateDomainContactPrivacy(ctx workflow.Context, input *route53domains.UpdateDomainContactPrivacyInput) (*route53domains.UpdateDomainContactPrivacyOutput, error)
	UpdateDomainContactPrivacyAsync(ctx workflow.Context, input *route53domains.UpdateDomainContactPrivacyInput) *Route53domainsUpdateDomainContactPrivacyFuture

	UpdateDomainNameservers(ctx workflow.Context, input *route53domains.UpdateDomainNameserversInput) (*route53domains.UpdateDomainNameserversOutput, error)
	UpdateDomainNameserversAsync(ctx workflow.Context, input *route53domains.UpdateDomainNameserversInput) *Route53domainsUpdateDomainNameserversFuture

	UpdateTagsForDomain(ctx workflow.Context, input *route53domains.UpdateTagsForDomainInput) (*route53domains.UpdateTagsForDomainOutput, error)
	UpdateTagsForDomainAsync(ctx workflow.Context, input *route53domains.UpdateTagsForDomainInput) *Route53domainsUpdateTagsForDomainFuture

	ViewBilling(ctx workflow.Context, input *route53domains.ViewBillingInput) (*route53domains.ViewBillingOutput, error)
	ViewBillingAsync(ctx workflow.Context, input *route53domains.ViewBillingInput) *Route53domainsViewBillingFuture
}

type Route53DomainsStub struct{}

func NewRoute53DomainsStub() Route53DomainsClient {
	return &Route53DomainsStub{}
}

type Route53domainsAcceptDomainTransferFromAnotherAwsAccountFuture struct {
	Future workflow.Future
}

func (r *Route53domainsAcceptDomainTransferFromAnotherAwsAccountFuture) Get(ctx workflow.Context) (*route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput, error) {
	var output route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsCancelDomainTransferToAnotherAwsAccountFuture struct {
	Future workflow.Future
}

func (r *Route53domainsCancelDomainTransferToAnotherAwsAccountFuture) Get(ctx workflow.Context) (*route53domains.CancelDomainTransferToAnotherAwsAccountOutput, error) {
	var output route53domains.CancelDomainTransferToAnotherAwsAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsCheckDomainAvailabilityFuture struct {
	Future workflow.Future
}

func (r *Route53domainsCheckDomainAvailabilityFuture) Get(ctx workflow.Context) (*route53domains.CheckDomainAvailabilityOutput, error) {
	var output route53domains.CheckDomainAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsCheckDomainTransferabilityFuture struct {
	Future workflow.Future
}

func (r *Route53domainsCheckDomainTransferabilityFuture) Get(ctx workflow.Context) (*route53domains.CheckDomainTransferabilityOutput, error) {
	var output route53domains.CheckDomainTransferabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsDeleteTagsForDomainFuture struct {
	Future workflow.Future
}

func (r *Route53domainsDeleteTagsForDomainFuture) Get(ctx workflow.Context) (*route53domains.DeleteTagsForDomainOutput, error) {
	var output route53domains.DeleteTagsForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsDisableDomainAutoRenewFuture struct {
	Future workflow.Future
}

func (r *Route53domainsDisableDomainAutoRenewFuture) Get(ctx workflow.Context) (*route53domains.DisableDomainAutoRenewOutput, error) {
	var output route53domains.DisableDomainAutoRenewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsDisableDomainTransferLockFuture struct {
	Future workflow.Future
}

func (r *Route53domainsDisableDomainTransferLockFuture) Get(ctx workflow.Context) (*route53domains.DisableDomainTransferLockOutput, error) {
	var output route53domains.DisableDomainTransferLockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsEnableDomainAutoRenewFuture struct {
	Future workflow.Future
}

func (r *Route53domainsEnableDomainAutoRenewFuture) Get(ctx workflow.Context) (*route53domains.EnableDomainAutoRenewOutput, error) {
	var output route53domains.EnableDomainAutoRenewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsEnableDomainTransferLockFuture struct {
	Future workflow.Future
}

func (r *Route53domainsEnableDomainTransferLockFuture) Get(ctx workflow.Context) (*route53domains.EnableDomainTransferLockOutput, error) {
	var output route53domains.EnableDomainTransferLockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsGetContactReachabilityStatusFuture struct {
	Future workflow.Future
}

func (r *Route53domainsGetContactReachabilityStatusFuture) Get(ctx workflow.Context) (*route53domains.GetContactReachabilityStatusOutput, error) {
	var output route53domains.GetContactReachabilityStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsGetDomainDetailFuture struct {
	Future workflow.Future
}

func (r *Route53domainsGetDomainDetailFuture) Get(ctx workflow.Context) (*route53domains.GetDomainDetailOutput, error) {
	var output route53domains.GetDomainDetailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsGetDomainSuggestionsFuture struct {
	Future workflow.Future
}

func (r *Route53domainsGetDomainSuggestionsFuture) Get(ctx workflow.Context) (*route53domains.GetDomainSuggestionsOutput, error) {
	var output route53domains.GetDomainSuggestionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsGetOperationDetailFuture struct {
	Future workflow.Future
}

func (r *Route53domainsGetOperationDetailFuture) Get(ctx workflow.Context) (*route53domains.GetOperationDetailOutput, error) {
	var output route53domains.GetOperationDetailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsListDomainsFuture struct {
	Future workflow.Future
}

func (r *Route53domainsListDomainsFuture) Get(ctx workflow.Context) (*route53domains.ListDomainsOutput, error) {
	var output route53domains.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsListOperationsFuture struct {
	Future workflow.Future
}

func (r *Route53domainsListOperationsFuture) Get(ctx workflow.Context) (*route53domains.ListOperationsOutput, error) {
	var output route53domains.ListOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsListTagsForDomainFuture struct {
	Future workflow.Future
}

func (r *Route53domainsListTagsForDomainFuture) Get(ctx workflow.Context) (*route53domains.ListTagsForDomainOutput, error) {
	var output route53domains.ListTagsForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsRegisterDomainFuture struct {
	Future workflow.Future
}

func (r *Route53domainsRegisterDomainFuture) Get(ctx workflow.Context) (*route53domains.RegisterDomainOutput, error) {
	var output route53domains.RegisterDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsRejectDomainTransferFromAnotherAwsAccountFuture struct {
	Future workflow.Future
}

func (r *Route53domainsRejectDomainTransferFromAnotherAwsAccountFuture) Get(ctx workflow.Context) (*route53domains.RejectDomainTransferFromAnotherAwsAccountOutput, error) {
	var output route53domains.RejectDomainTransferFromAnotherAwsAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsRenewDomainFuture struct {
	Future workflow.Future
}

func (r *Route53domainsRenewDomainFuture) Get(ctx workflow.Context) (*route53domains.RenewDomainOutput, error) {
	var output route53domains.RenewDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsResendContactReachabilityEmailFuture struct {
	Future workflow.Future
}

func (r *Route53domainsResendContactReachabilityEmailFuture) Get(ctx workflow.Context) (*route53domains.ResendContactReachabilityEmailOutput, error) {
	var output route53domains.ResendContactReachabilityEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsRetrieveDomainAuthCodeFuture struct {
	Future workflow.Future
}

func (r *Route53domainsRetrieveDomainAuthCodeFuture) Get(ctx workflow.Context) (*route53domains.RetrieveDomainAuthCodeOutput, error) {
	var output route53domains.RetrieveDomainAuthCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsTransferDomainFuture struct {
	Future workflow.Future
}

func (r *Route53domainsTransferDomainFuture) Get(ctx workflow.Context) (*route53domains.TransferDomainOutput, error) {
	var output route53domains.TransferDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsTransferDomainToAnotherAwsAccountFuture struct {
	Future workflow.Future
}

func (r *Route53domainsTransferDomainToAnotherAwsAccountFuture) Get(ctx workflow.Context) (*route53domains.TransferDomainToAnotherAwsAccountOutput, error) {
	var output route53domains.TransferDomainToAnotherAwsAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsUpdateDomainContactFuture struct {
	Future workflow.Future
}

func (r *Route53domainsUpdateDomainContactFuture) Get(ctx workflow.Context) (*route53domains.UpdateDomainContactOutput, error) {
	var output route53domains.UpdateDomainContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsUpdateDomainContactPrivacyFuture struct {
	Future workflow.Future
}

func (r *Route53domainsUpdateDomainContactPrivacyFuture) Get(ctx workflow.Context) (*route53domains.UpdateDomainContactPrivacyOutput, error) {
	var output route53domains.UpdateDomainContactPrivacyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsUpdateDomainNameserversFuture struct {
	Future workflow.Future
}

func (r *Route53domainsUpdateDomainNameserversFuture) Get(ctx workflow.Context) (*route53domains.UpdateDomainNameserversOutput, error) {
	var output route53domains.UpdateDomainNameserversOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsUpdateTagsForDomainFuture struct {
	Future workflow.Future
}

func (r *Route53domainsUpdateTagsForDomainFuture) Get(ctx workflow.Context) (*route53domains.UpdateTagsForDomainOutput, error) {
	var output route53domains.UpdateTagsForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53domainsViewBillingFuture struct {
	Future workflow.Future
}

func (r *Route53domainsViewBillingFuture) Get(ctx workflow.Context) (*route53domains.ViewBillingOutput, error) {
	var output route53domains.ViewBillingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) AcceptDomainTransferFromAnotherAwsAccount(ctx workflow.Context, input *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput) (*route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput, error) {
	var output route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.AcceptDomainTransferFromAnotherAwsAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) AcceptDomainTransferFromAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput) *Route53domainsAcceptDomainTransferFromAnotherAwsAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.AcceptDomainTransferFromAnotherAwsAccount", input)
	return &Route53domainsAcceptDomainTransferFromAnotherAwsAccountFuture{Future: future}
}

func (a *Route53DomainsStub) CancelDomainTransferToAnotherAwsAccount(ctx workflow.Context, input *route53domains.CancelDomainTransferToAnotherAwsAccountInput) (*route53domains.CancelDomainTransferToAnotherAwsAccountOutput, error) {
	var output route53domains.CancelDomainTransferToAnotherAwsAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.CancelDomainTransferToAnotherAwsAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) CancelDomainTransferToAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.CancelDomainTransferToAnotherAwsAccountInput) *Route53domainsCancelDomainTransferToAnotherAwsAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.CancelDomainTransferToAnotherAwsAccount", input)
	return &Route53domainsCancelDomainTransferToAnotherAwsAccountFuture{Future: future}
}

func (a *Route53DomainsStub) CheckDomainAvailability(ctx workflow.Context, input *route53domains.CheckDomainAvailabilityInput) (*route53domains.CheckDomainAvailabilityOutput, error) {
	var output route53domains.CheckDomainAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.CheckDomainAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) CheckDomainAvailabilityAsync(ctx workflow.Context, input *route53domains.CheckDomainAvailabilityInput) *Route53domainsCheckDomainAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.CheckDomainAvailability", input)
	return &Route53domainsCheckDomainAvailabilityFuture{Future: future}
}

func (a *Route53DomainsStub) CheckDomainTransferability(ctx workflow.Context, input *route53domains.CheckDomainTransferabilityInput) (*route53domains.CheckDomainTransferabilityOutput, error) {
	var output route53domains.CheckDomainTransferabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.CheckDomainTransferability", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) CheckDomainTransferabilityAsync(ctx workflow.Context, input *route53domains.CheckDomainTransferabilityInput) *Route53domainsCheckDomainTransferabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.CheckDomainTransferability", input)
	return &Route53domainsCheckDomainTransferabilityFuture{Future: future}
}

func (a *Route53DomainsStub) DeleteTagsForDomain(ctx workflow.Context, input *route53domains.DeleteTagsForDomainInput) (*route53domains.DeleteTagsForDomainOutput, error) {
	var output route53domains.DeleteTagsForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.DeleteTagsForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) DeleteTagsForDomainAsync(ctx workflow.Context, input *route53domains.DeleteTagsForDomainInput) *Route53domainsDeleteTagsForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.DeleteTagsForDomain", input)
	return &Route53domainsDeleteTagsForDomainFuture{Future: future}
}

func (a *Route53DomainsStub) DisableDomainAutoRenew(ctx workflow.Context, input *route53domains.DisableDomainAutoRenewInput) (*route53domains.DisableDomainAutoRenewOutput, error) {
	var output route53domains.DisableDomainAutoRenewOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.DisableDomainAutoRenew", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) DisableDomainAutoRenewAsync(ctx workflow.Context, input *route53domains.DisableDomainAutoRenewInput) *Route53domainsDisableDomainAutoRenewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.DisableDomainAutoRenew", input)
	return &Route53domainsDisableDomainAutoRenewFuture{Future: future}
}

func (a *Route53DomainsStub) DisableDomainTransferLock(ctx workflow.Context, input *route53domains.DisableDomainTransferLockInput) (*route53domains.DisableDomainTransferLockOutput, error) {
	var output route53domains.DisableDomainTransferLockOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.DisableDomainTransferLock", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) DisableDomainTransferLockAsync(ctx workflow.Context, input *route53domains.DisableDomainTransferLockInput) *Route53domainsDisableDomainTransferLockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.DisableDomainTransferLock", input)
	return &Route53domainsDisableDomainTransferLockFuture{Future: future}
}

func (a *Route53DomainsStub) EnableDomainAutoRenew(ctx workflow.Context, input *route53domains.EnableDomainAutoRenewInput) (*route53domains.EnableDomainAutoRenewOutput, error) {
	var output route53domains.EnableDomainAutoRenewOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.EnableDomainAutoRenew", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) EnableDomainAutoRenewAsync(ctx workflow.Context, input *route53domains.EnableDomainAutoRenewInput) *Route53domainsEnableDomainAutoRenewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.EnableDomainAutoRenew", input)
	return &Route53domainsEnableDomainAutoRenewFuture{Future: future}
}

func (a *Route53DomainsStub) EnableDomainTransferLock(ctx workflow.Context, input *route53domains.EnableDomainTransferLockInput) (*route53domains.EnableDomainTransferLockOutput, error) {
	var output route53domains.EnableDomainTransferLockOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.EnableDomainTransferLock", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) EnableDomainTransferLockAsync(ctx workflow.Context, input *route53domains.EnableDomainTransferLockInput) *Route53domainsEnableDomainTransferLockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.EnableDomainTransferLock", input)
	return &Route53domainsEnableDomainTransferLockFuture{Future: future}
}

func (a *Route53DomainsStub) GetContactReachabilityStatus(ctx workflow.Context, input *route53domains.GetContactReachabilityStatusInput) (*route53domains.GetContactReachabilityStatusOutput, error) {
	var output route53domains.GetContactReachabilityStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.GetContactReachabilityStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) GetContactReachabilityStatusAsync(ctx workflow.Context, input *route53domains.GetContactReachabilityStatusInput) *Route53domainsGetContactReachabilityStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.GetContactReachabilityStatus", input)
	return &Route53domainsGetContactReachabilityStatusFuture{Future: future}
}

func (a *Route53DomainsStub) GetDomainDetail(ctx workflow.Context, input *route53domains.GetDomainDetailInput) (*route53domains.GetDomainDetailOutput, error) {
	var output route53domains.GetDomainDetailOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.GetDomainDetail", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) GetDomainDetailAsync(ctx workflow.Context, input *route53domains.GetDomainDetailInput) *Route53domainsGetDomainDetailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.GetDomainDetail", input)
	return &Route53domainsGetDomainDetailFuture{Future: future}
}

func (a *Route53DomainsStub) GetDomainSuggestions(ctx workflow.Context, input *route53domains.GetDomainSuggestionsInput) (*route53domains.GetDomainSuggestionsOutput, error) {
	var output route53domains.GetDomainSuggestionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.GetDomainSuggestions", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) GetDomainSuggestionsAsync(ctx workflow.Context, input *route53domains.GetDomainSuggestionsInput) *Route53domainsGetDomainSuggestionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.GetDomainSuggestions", input)
	return &Route53domainsGetDomainSuggestionsFuture{Future: future}
}

func (a *Route53DomainsStub) GetOperationDetail(ctx workflow.Context, input *route53domains.GetOperationDetailInput) (*route53domains.GetOperationDetailOutput, error) {
	var output route53domains.GetOperationDetailOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.GetOperationDetail", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) GetOperationDetailAsync(ctx workflow.Context, input *route53domains.GetOperationDetailInput) *Route53domainsGetOperationDetailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.GetOperationDetail", input)
	return &Route53domainsGetOperationDetailFuture{Future: future}
}

func (a *Route53DomainsStub) ListDomains(ctx workflow.Context, input *route53domains.ListDomainsInput) (*route53domains.ListDomainsOutput, error) {
	var output route53domains.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) ListDomainsAsync(ctx workflow.Context, input *route53domains.ListDomainsInput) *Route53domainsListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.ListDomains", input)
	return &Route53domainsListDomainsFuture{Future: future}
}

func (a *Route53DomainsStub) ListOperations(ctx workflow.Context, input *route53domains.ListOperationsInput) (*route53domains.ListOperationsOutput, error) {
	var output route53domains.ListOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.ListOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) ListOperationsAsync(ctx workflow.Context, input *route53domains.ListOperationsInput) *Route53domainsListOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.ListOperations", input)
	return &Route53domainsListOperationsFuture{Future: future}
}

func (a *Route53DomainsStub) ListTagsForDomain(ctx workflow.Context, input *route53domains.ListTagsForDomainInput) (*route53domains.ListTagsForDomainOutput, error) {
	var output route53domains.ListTagsForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.ListTagsForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) ListTagsForDomainAsync(ctx workflow.Context, input *route53domains.ListTagsForDomainInput) *Route53domainsListTagsForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.ListTagsForDomain", input)
	return &Route53domainsListTagsForDomainFuture{Future: future}
}

func (a *Route53DomainsStub) RegisterDomain(ctx workflow.Context, input *route53domains.RegisterDomainInput) (*route53domains.RegisterDomainOutput, error) {
	var output route53domains.RegisterDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.RegisterDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) RegisterDomainAsync(ctx workflow.Context, input *route53domains.RegisterDomainInput) *Route53domainsRegisterDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.RegisterDomain", input)
	return &Route53domainsRegisterDomainFuture{Future: future}
}

func (a *Route53DomainsStub) RejectDomainTransferFromAnotherAwsAccount(ctx workflow.Context, input *route53domains.RejectDomainTransferFromAnotherAwsAccountInput) (*route53domains.RejectDomainTransferFromAnotherAwsAccountOutput, error) {
	var output route53domains.RejectDomainTransferFromAnotherAwsAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.RejectDomainTransferFromAnotherAwsAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) RejectDomainTransferFromAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.RejectDomainTransferFromAnotherAwsAccountInput) *Route53domainsRejectDomainTransferFromAnotherAwsAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.RejectDomainTransferFromAnotherAwsAccount", input)
	return &Route53domainsRejectDomainTransferFromAnotherAwsAccountFuture{Future: future}
}

func (a *Route53DomainsStub) RenewDomain(ctx workflow.Context, input *route53domains.RenewDomainInput) (*route53domains.RenewDomainOutput, error) {
	var output route53domains.RenewDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.RenewDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) RenewDomainAsync(ctx workflow.Context, input *route53domains.RenewDomainInput) *Route53domainsRenewDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.RenewDomain", input)
	return &Route53domainsRenewDomainFuture{Future: future}
}

func (a *Route53DomainsStub) ResendContactReachabilityEmail(ctx workflow.Context, input *route53domains.ResendContactReachabilityEmailInput) (*route53domains.ResendContactReachabilityEmailOutput, error) {
	var output route53domains.ResendContactReachabilityEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.ResendContactReachabilityEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) ResendContactReachabilityEmailAsync(ctx workflow.Context, input *route53domains.ResendContactReachabilityEmailInput) *Route53domainsResendContactReachabilityEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.ResendContactReachabilityEmail", input)
	return &Route53domainsResendContactReachabilityEmailFuture{Future: future}
}

func (a *Route53DomainsStub) RetrieveDomainAuthCode(ctx workflow.Context, input *route53domains.RetrieveDomainAuthCodeInput) (*route53domains.RetrieveDomainAuthCodeOutput, error) {
	var output route53domains.RetrieveDomainAuthCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.RetrieveDomainAuthCode", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) RetrieveDomainAuthCodeAsync(ctx workflow.Context, input *route53domains.RetrieveDomainAuthCodeInput) *Route53domainsRetrieveDomainAuthCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.RetrieveDomainAuthCode", input)
	return &Route53domainsRetrieveDomainAuthCodeFuture{Future: future}
}

func (a *Route53DomainsStub) TransferDomain(ctx workflow.Context, input *route53domains.TransferDomainInput) (*route53domains.TransferDomainOutput, error) {
	var output route53domains.TransferDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.TransferDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) TransferDomainAsync(ctx workflow.Context, input *route53domains.TransferDomainInput) *Route53domainsTransferDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.TransferDomain", input)
	return &Route53domainsTransferDomainFuture{Future: future}
}

func (a *Route53DomainsStub) TransferDomainToAnotherAwsAccount(ctx workflow.Context, input *route53domains.TransferDomainToAnotherAwsAccountInput) (*route53domains.TransferDomainToAnotherAwsAccountOutput, error) {
	var output route53domains.TransferDomainToAnotherAwsAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.TransferDomainToAnotherAwsAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) TransferDomainToAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.TransferDomainToAnotherAwsAccountInput) *Route53domainsTransferDomainToAnotherAwsAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.TransferDomainToAnotherAwsAccount", input)
	return &Route53domainsTransferDomainToAnotherAwsAccountFuture{Future: future}
}

func (a *Route53DomainsStub) UpdateDomainContact(ctx workflow.Context, input *route53domains.UpdateDomainContactInput) (*route53domains.UpdateDomainContactOutput, error) {
	var output route53domains.UpdateDomainContactOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateDomainContact", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) UpdateDomainContactAsync(ctx workflow.Context, input *route53domains.UpdateDomainContactInput) *Route53domainsUpdateDomainContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateDomainContact", input)
	return &Route53domainsUpdateDomainContactFuture{Future: future}
}

func (a *Route53DomainsStub) UpdateDomainContactPrivacy(ctx workflow.Context, input *route53domains.UpdateDomainContactPrivacyInput) (*route53domains.UpdateDomainContactPrivacyOutput, error) {
	var output route53domains.UpdateDomainContactPrivacyOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateDomainContactPrivacy", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) UpdateDomainContactPrivacyAsync(ctx workflow.Context, input *route53domains.UpdateDomainContactPrivacyInput) *Route53domainsUpdateDomainContactPrivacyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateDomainContactPrivacy", input)
	return &Route53domainsUpdateDomainContactPrivacyFuture{Future: future}
}

func (a *Route53DomainsStub) UpdateDomainNameservers(ctx workflow.Context, input *route53domains.UpdateDomainNameserversInput) (*route53domains.UpdateDomainNameserversOutput, error) {
	var output route53domains.UpdateDomainNameserversOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateDomainNameservers", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) UpdateDomainNameserversAsync(ctx workflow.Context, input *route53domains.UpdateDomainNameserversInput) *Route53domainsUpdateDomainNameserversFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateDomainNameservers", input)
	return &Route53domainsUpdateDomainNameserversFuture{Future: future}
}

func (a *Route53DomainsStub) UpdateTagsForDomain(ctx workflow.Context, input *route53domains.UpdateTagsForDomainInput) (*route53domains.UpdateTagsForDomainOutput, error) {
	var output route53domains.UpdateTagsForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateTagsForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) UpdateTagsForDomainAsync(ctx workflow.Context, input *route53domains.UpdateTagsForDomainInput) *Route53domainsUpdateTagsForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateTagsForDomain", input)
	return &Route53domainsUpdateTagsForDomainFuture{Future: future}
}

func (a *Route53DomainsStub) ViewBilling(ctx workflow.Context, input *route53domains.ViewBillingInput) (*route53domains.ViewBillingOutput, error) {
	var output route53domains.ViewBillingOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.ViewBilling", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) ViewBillingAsync(ctx workflow.Context, input *route53domains.ViewBillingInput) *Route53domainsViewBillingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.ViewBilling", input)
	return &Route53domainsViewBillingFuture{Future: future}
}
