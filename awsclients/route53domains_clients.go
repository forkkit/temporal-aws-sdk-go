// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/route53domains"
	"go.temporal.io/sdk/workflow"
)

type Route53DomainsClient interface {
	AcceptDomainTransferFromAnotherAwsAccount(ctx workflow.Context, input *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput) (*route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput, error)
	AcceptDomainTransferFromAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput) *Route53DomainsAcceptDomainTransferFromAnotherAwsAccountFuture

	CancelDomainTransferToAnotherAwsAccount(ctx workflow.Context, input *route53domains.CancelDomainTransferToAnotherAwsAccountInput) (*route53domains.CancelDomainTransferToAnotherAwsAccountOutput, error)
	CancelDomainTransferToAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.CancelDomainTransferToAnotherAwsAccountInput) *Route53DomainsCancelDomainTransferToAnotherAwsAccountFuture

	CheckDomainAvailability(ctx workflow.Context, input *route53domains.CheckDomainAvailabilityInput) (*route53domains.CheckDomainAvailabilityOutput, error)
	CheckDomainAvailabilityAsync(ctx workflow.Context, input *route53domains.CheckDomainAvailabilityInput) *Route53DomainsCheckDomainAvailabilityFuture

	CheckDomainTransferability(ctx workflow.Context, input *route53domains.CheckDomainTransferabilityInput) (*route53domains.CheckDomainTransferabilityOutput, error)
	CheckDomainTransferabilityAsync(ctx workflow.Context, input *route53domains.CheckDomainTransferabilityInput) *Route53DomainsCheckDomainTransferabilityFuture

	DeleteTagsForDomain(ctx workflow.Context, input *route53domains.DeleteTagsForDomainInput) (*route53domains.DeleteTagsForDomainOutput, error)
	DeleteTagsForDomainAsync(ctx workflow.Context, input *route53domains.DeleteTagsForDomainInput) *Route53DomainsDeleteTagsForDomainFuture

	DisableDomainAutoRenew(ctx workflow.Context, input *route53domains.DisableDomainAutoRenewInput) (*route53domains.DisableDomainAutoRenewOutput, error)
	DisableDomainAutoRenewAsync(ctx workflow.Context, input *route53domains.DisableDomainAutoRenewInput) *Route53DomainsDisableDomainAutoRenewFuture

	DisableDomainTransferLock(ctx workflow.Context, input *route53domains.DisableDomainTransferLockInput) (*route53domains.DisableDomainTransferLockOutput, error)
	DisableDomainTransferLockAsync(ctx workflow.Context, input *route53domains.DisableDomainTransferLockInput) *Route53DomainsDisableDomainTransferLockFuture

	EnableDomainAutoRenew(ctx workflow.Context, input *route53domains.EnableDomainAutoRenewInput) (*route53domains.EnableDomainAutoRenewOutput, error)
	EnableDomainAutoRenewAsync(ctx workflow.Context, input *route53domains.EnableDomainAutoRenewInput) *Route53DomainsEnableDomainAutoRenewFuture

	EnableDomainTransferLock(ctx workflow.Context, input *route53domains.EnableDomainTransferLockInput) (*route53domains.EnableDomainTransferLockOutput, error)
	EnableDomainTransferLockAsync(ctx workflow.Context, input *route53domains.EnableDomainTransferLockInput) *Route53DomainsEnableDomainTransferLockFuture

	GetContactReachabilityStatus(ctx workflow.Context, input *route53domains.GetContactReachabilityStatusInput) (*route53domains.GetContactReachabilityStatusOutput, error)
	GetContactReachabilityStatusAsync(ctx workflow.Context, input *route53domains.GetContactReachabilityStatusInput) *Route53DomainsGetContactReachabilityStatusFuture

	GetDomainDetail(ctx workflow.Context, input *route53domains.GetDomainDetailInput) (*route53domains.GetDomainDetailOutput, error)
	GetDomainDetailAsync(ctx workflow.Context, input *route53domains.GetDomainDetailInput) *Route53DomainsGetDomainDetailFuture

	GetDomainSuggestions(ctx workflow.Context, input *route53domains.GetDomainSuggestionsInput) (*route53domains.GetDomainSuggestionsOutput, error)
	GetDomainSuggestionsAsync(ctx workflow.Context, input *route53domains.GetDomainSuggestionsInput) *Route53DomainsGetDomainSuggestionsFuture

	GetOperationDetail(ctx workflow.Context, input *route53domains.GetOperationDetailInput) (*route53domains.GetOperationDetailOutput, error)
	GetOperationDetailAsync(ctx workflow.Context, input *route53domains.GetOperationDetailInput) *Route53DomainsGetOperationDetailFuture

	ListDomains(ctx workflow.Context, input *route53domains.ListDomainsInput) (*route53domains.ListDomainsOutput, error)
	ListDomainsAsync(ctx workflow.Context, input *route53domains.ListDomainsInput) *Route53DomainsListDomainsFuture

	ListOperations(ctx workflow.Context, input *route53domains.ListOperationsInput) (*route53domains.ListOperationsOutput, error)
	ListOperationsAsync(ctx workflow.Context, input *route53domains.ListOperationsInput) *Route53DomainsListOperationsFuture

	ListTagsForDomain(ctx workflow.Context, input *route53domains.ListTagsForDomainInput) (*route53domains.ListTagsForDomainOutput, error)
	ListTagsForDomainAsync(ctx workflow.Context, input *route53domains.ListTagsForDomainInput) *Route53DomainsListTagsForDomainFuture

	RegisterDomain(ctx workflow.Context, input *route53domains.RegisterDomainInput) (*route53domains.RegisterDomainOutput, error)
	RegisterDomainAsync(ctx workflow.Context, input *route53domains.RegisterDomainInput) *Route53DomainsRegisterDomainFuture

	RejectDomainTransferFromAnotherAwsAccount(ctx workflow.Context, input *route53domains.RejectDomainTransferFromAnotherAwsAccountInput) (*route53domains.RejectDomainTransferFromAnotherAwsAccountOutput, error)
	RejectDomainTransferFromAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.RejectDomainTransferFromAnotherAwsAccountInput) *Route53DomainsRejectDomainTransferFromAnotherAwsAccountFuture

	RenewDomain(ctx workflow.Context, input *route53domains.RenewDomainInput) (*route53domains.RenewDomainOutput, error)
	RenewDomainAsync(ctx workflow.Context, input *route53domains.RenewDomainInput) *Route53DomainsRenewDomainFuture

	ResendContactReachabilityEmail(ctx workflow.Context, input *route53domains.ResendContactReachabilityEmailInput) (*route53domains.ResendContactReachabilityEmailOutput, error)
	ResendContactReachabilityEmailAsync(ctx workflow.Context, input *route53domains.ResendContactReachabilityEmailInput) *Route53DomainsResendContactReachabilityEmailFuture

	RetrieveDomainAuthCode(ctx workflow.Context, input *route53domains.RetrieveDomainAuthCodeInput) (*route53domains.RetrieveDomainAuthCodeOutput, error)
	RetrieveDomainAuthCodeAsync(ctx workflow.Context, input *route53domains.RetrieveDomainAuthCodeInput) *Route53DomainsRetrieveDomainAuthCodeFuture

	TransferDomain(ctx workflow.Context, input *route53domains.TransferDomainInput) (*route53domains.TransferDomainOutput, error)
	TransferDomainAsync(ctx workflow.Context, input *route53domains.TransferDomainInput) *Route53DomainsTransferDomainFuture

	TransferDomainToAnotherAwsAccount(ctx workflow.Context, input *route53domains.TransferDomainToAnotherAwsAccountInput) (*route53domains.TransferDomainToAnotherAwsAccountOutput, error)
	TransferDomainToAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.TransferDomainToAnotherAwsAccountInput) *Route53DomainsTransferDomainToAnotherAwsAccountFuture

	UpdateDomainContact(ctx workflow.Context, input *route53domains.UpdateDomainContactInput) (*route53domains.UpdateDomainContactOutput, error)
	UpdateDomainContactAsync(ctx workflow.Context, input *route53domains.UpdateDomainContactInput) *Route53DomainsUpdateDomainContactFuture

	UpdateDomainContactPrivacy(ctx workflow.Context, input *route53domains.UpdateDomainContactPrivacyInput) (*route53domains.UpdateDomainContactPrivacyOutput, error)
	UpdateDomainContactPrivacyAsync(ctx workflow.Context, input *route53domains.UpdateDomainContactPrivacyInput) *Route53DomainsUpdateDomainContactPrivacyFuture

	UpdateDomainNameservers(ctx workflow.Context, input *route53domains.UpdateDomainNameserversInput) (*route53domains.UpdateDomainNameserversOutput, error)
	UpdateDomainNameserversAsync(ctx workflow.Context, input *route53domains.UpdateDomainNameserversInput) *Route53DomainsUpdateDomainNameserversFuture

	UpdateTagsForDomain(ctx workflow.Context, input *route53domains.UpdateTagsForDomainInput) (*route53domains.UpdateTagsForDomainOutput, error)
	UpdateTagsForDomainAsync(ctx workflow.Context, input *route53domains.UpdateTagsForDomainInput) *Route53DomainsUpdateTagsForDomainFuture

	ViewBilling(ctx workflow.Context, input *route53domains.ViewBillingInput) (*route53domains.ViewBillingOutput, error)
	ViewBillingAsync(ctx workflow.Context, input *route53domains.ViewBillingInput) *Route53DomainsViewBillingFuture
}

type Route53DomainsStub struct{}

func NewRoute53DomainsStub() Route53DomainsClient {
	return &Route53DomainsStub{}
}

type Route53DomainsAcceptDomainTransferFromAnotherAwsAccountFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsAcceptDomainTransferFromAnotherAwsAccountFuture) Get(ctx workflow.Context) (*route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput, error) {
	var output route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsCancelDomainTransferToAnotherAwsAccountFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsCancelDomainTransferToAnotherAwsAccountFuture) Get(ctx workflow.Context) (*route53domains.CancelDomainTransferToAnotherAwsAccountOutput, error) {
	var output route53domains.CancelDomainTransferToAnotherAwsAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsCheckDomainAvailabilityFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsCheckDomainAvailabilityFuture) Get(ctx workflow.Context) (*route53domains.CheckDomainAvailabilityOutput, error) {
	var output route53domains.CheckDomainAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsCheckDomainTransferabilityFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsCheckDomainTransferabilityFuture) Get(ctx workflow.Context) (*route53domains.CheckDomainTransferabilityOutput, error) {
	var output route53domains.CheckDomainTransferabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsDeleteTagsForDomainFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsDeleteTagsForDomainFuture) Get(ctx workflow.Context) (*route53domains.DeleteTagsForDomainOutput, error) {
	var output route53domains.DeleteTagsForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsDisableDomainAutoRenewFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsDisableDomainAutoRenewFuture) Get(ctx workflow.Context) (*route53domains.DisableDomainAutoRenewOutput, error) {
	var output route53domains.DisableDomainAutoRenewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsDisableDomainTransferLockFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsDisableDomainTransferLockFuture) Get(ctx workflow.Context) (*route53domains.DisableDomainTransferLockOutput, error) {
	var output route53domains.DisableDomainTransferLockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsEnableDomainAutoRenewFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsEnableDomainAutoRenewFuture) Get(ctx workflow.Context) (*route53domains.EnableDomainAutoRenewOutput, error) {
	var output route53domains.EnableDomainAutoRenewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsEnableDomainTransferLockFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsEnableDomainTransferLockFuture) Get(ctx workflow.Context) (*route53domains.EnableDomainTransferLockOutput, error) {
	var output route53domains.EnableDomainTransferLockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsGetContactReachabilityStatusFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsGetContactReachabilityStatusFuture) Get(ctx workflow.Context) (*route53domains.GetContactReachabilityStatusOutput, error) {
	var output route53domains.GetContactReachabilityStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsGetDomainDetailFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsGetDomainDetailFuture) Get(ctx workflow.Context) (*route53domains.GetDomainDetailOutput, error) {
	var output route53domains.GetDomainDetailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsGetDomainSuggestionsFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsGetDomainSuggestionsFuture) Get(ctx workflow.Context) (*route53domains.GetDomainSuggestionsOutput, error) {
	var output route53domains.GetDomainSuggestionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsGetOperationDetailFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsGetOperationDetailFuture) Get(ctx workflow.Context) (*route53domains.GetOperationDetailOutput, error) {
	var output route53domains.GetOperationDetailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsListDomainsFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsListDomainsFuture) Get(ctx workflow.Context) (*route53domains.ListDomainsOutput, error) {
	var output route53domains.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsListOperationsFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsListOperationsFuture) Get(ctx workflow.Context) (*route53domains.ListOperationsOutput, error) {
	var output route53domains.ListOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsListTagsForDomainFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsListTagsForDomainFuture) Get(ctx workflow.Context) (*route53domains.ListTagsForDomainOutput, error) {
	var output route53domains.ListTagsForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsRegisterDomainFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsRegisterDomainFuture) Get(ctx workflow.Context) (*route53domains.RegisterDomainOutput, error) {
	var output route53domains.RegisterDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsRejectDomainTransferFromAnotherAwsAccountFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsRejectDomainTransferFromAnotherAwsAccountFuture) Get(ctx workflow.Context) (*route53domains.RejectDomainTransferFromAnotherAwsAccountOutput, error) {
	var output route53domains.RejectDomainTransferFromAnotherAwsAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsRenewDomainFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsRenewDomainFuture) Get(ctx workflow.Context) (*route53domains.RenewDomainOutput, error) {
	var output route53domains.RenewDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsResendContactReachabilityEmailFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsResendContactReachabilityEmailFuture) Get(ctx workflow.Context) (*route53domains.ResendContactReachabilityEmailOutput, error) {
	var output route53domains.ResendContactReachabilityEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsRetrieveDomainAuthCodeFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsRetrieveDomainAuthCodeFuture) Get(ctx workflow.Context) (*route53domains.RetrieveDomainAuthCodeOutput, error) {
	var output route53domains.RetrieveDomainAuthCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsTransferDomainFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsTransferDomainFuture) Get(ctx workflow.Context) (*route53domains.TransferDomainOutput, error) {
	var output route53domains.TransferDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsTransferDomainToAnotherAwsAccountFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsTransferDomainToAnotherAwsAccountFuture) Get(ctx workflow.Context) (*route53domains.TransferDomainToAnotherAwsAccountOutput, error) {
	var output route53domains.TransferDomainToAnotherAwsAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsUpdateDomainContactFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsUpdateDomainContactFuture) Get(ctx workflow.Context) (*route53domains.UpdateDomainContactOutput, error) {
	var output route53domains.UpdateDomainContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsUpdateDomainContactPrivacyFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsUpdateDomainContactPrivacyFuture) Get(ctx workflow.Context) (*route53domains.UpdateDomainContactPrivacyOutput, error) {
	var output route53domains.UpdateDomainContactPrivacyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsUpdateDomainNameserversFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsUpdateDomainNameserversFuture) Get(ctx workflow.Context) (*route53domains.UpdateDomainNameserversOutput, error) {
	var output route53domains.UpdateDomainNameserversOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsUpdateTagsForDomainFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsUpdateTagsForDomainFuture) Get(ctx workflow.Context) (*route53domains.UpdateTagsForDomainOutput, error) {
	var output route53domains.UpdateTagsForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DomainsViewBillingFuture struct {
	Future workflow.Future
}

func (r *Route53DomainsViewBillingFuture) Get(ctx workflow.Context) (*route53domains.ViewBillingOutput, error) {
	var output route53domains.ViewBillingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) AcceptDomainTransferFromAnotherAwsAccount(ctx workflow.Context, input *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput) (*route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput, error) {
	var output route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.AcceptDomainTransferFromAnotherAwsAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) AcceptDomainTransferFromAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput) *Route53DomainsAcceptDomainTransferFromAnotherAwsAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.AcceptDomainTransferFromAnotherAwsAccount", input)
	return &Route53DomainsAcceptDomainTransferFromAnotherAwsAccountFuture{Future: future}
}

func (a *Route53DomainsStub) CancelDomainTransferToAnotherAwsAccount(ctx workflow.Context, input *route53domains.CancelDomainTransferToAnotherAwsAccountInput) (*route53domains.CancelDomainTransferToAnotherAwsAccountOutput, error) {
	var output route53domains.CancelDomainTransferToAnotherAwsAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.CancelDomainTransferToAnotherAwsAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) CancelDomainTransferToAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.CancelDomainTransferToAnotherAwsAccountInput) *Route53DomainsCancelDomainTransferToAnotherAwsAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.CancelDomainTransferToAnotherAwsAccount", input)
	return &Route53DomainsCancelDomainTransferToAnotherAwsAccountFuture{Future: future}
}

func (a *Route53DomainsStub) CheckDomainAvailability(ctx workflow.Context, input *route53domains.CheckDomainAvailabilityInput) (*route53domains.CheckDomainAvailabilityOutput, error) {
	var output route53domains.CheckDomainAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.CheckDomainAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) CheckDomainAvailabilityAsync(ctx workflow.Context, input *route53domains.CheckDomainAvailabilityInput) *Route53DomainsCheckDomainAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.CheckDomainAvailability", input)
	return &Route53DomainsCheckDomainAvailabilityFuture{Future: future}
}

func (a *Route53DomainsStub) CheckDomainTransferability(ctx workflow.Context, input *route53domains.CheckDomainTransferabilityInput) (*route53domains.CheckDomainTransferabilityOutput, error) {
	var output route53domains.CheckDomainTransferabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.CheckDomainTransferability", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) CheckDomainTransferabilityAsync(ctx workflow.Context, input *route53domains.CheckDomainTransferabilityInput) *Route53DomainsCheckDomainTransferabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.CheckDomainTransferability", input)
	return &Route53DomainsCheckDomainTransferabilityFuture{Future: future}
}

func (a *Route53DomainsStub) DeleteTagsForDomain(ctx workflow.Context, input *route53domains.DeleteTagsForDomainInput) (*route53domains.DeleteTagsForDomainOutput, error) {
	var output route53domains.DeleteTagsForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.DeleteTagsForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) DeleteTagsForDomainAsync(ctx workflow.Context, input *route53domains.DeleteTagsForDomainInput) *Route53DomainsDeleteTagsForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.DeleteTagsForDomain", input)
	return &Route53DomainsDeleteTagsForDomainFuture{Future: future}
}

func (a *Route53DomainsStub) DisableDomainAutoRenew(ctx workflow.Context, input *route53domains.DisableDomainAutoRenewInput) (*route53domains.DisableDomainAutoRenewOutput, error) {
	var output route53domains.DisableDomainAutoRenewOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.DisableDomainAutoRenew", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) DisableDomainAutoRenewAsync(ctx workflow.Context, input *route53domains.DisableDomainAutoRenewInput) *Route53DomainsDisableDomainAutoRenewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.DisableDomainAutoRenew", input)
	return &Route53DomainsDisableDomainAutoRenewFuture{Future: future}
}

func (a *Route53DomainsStub) DisableDomainTransferLock(ctx workflow.Context, input *route53domains.DisableDomainTransferLockInput) (*route53domains.DisableDomainTransferLockOutput, error) {
	var output route53domains.DisableDomainTransferLockOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.DisableDomainTransferLock", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) DisableDomainTransferLockAsync(ctx workflow.Context, input *route53domains.DisableDomainTransferLockInput) *Route53DomainsDisableDomainTransferLockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.DisableDomainTransferLock", input)
	return &Route53DomainsDisableDomainTransferLockFuture{Future: future}
}

func (a *Route53DomainsStub) EnableDomainAutoRenew(ctx workflow.Context, input *route53domains.EnableDomainAutoRenewInput) (*route53domains.EnableDomainAutoRenewOutput, error) {
	var output route53domains.EnableDomainAutoRenewOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.EnableDomainAutoRenew", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) EnableDomainAutoRenewAsync(ctx workflow.Context, input *route53domains.EnableDomainAutoRenewInput) *Route53DomainsEnableDomainAutoRenewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.EnableDomainAutoRenew", input)
	return &Route53DomainsEnableDomainAutoRenewFuture{Future: future}
}

func (a *Route53DomainsStub) EnableDomainTransferLock(ctx workflow.Context, input *route53domains.EnableDomainTransferLockInput) (*route53domains.EnableDomainTransferLockOutput, error) {
	var output route53domains.EnableDomainTransferLockOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.EnableDomainTransferLock", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) EnableDomainTransferLockAsync(ctx workflow.Context, input *route53domains.EnableDomainTransferLockInput) *Route53DomainsEnableDomainTransferLockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.EnableDomainTransferLock", input)
	return &Route53DomainsEnableDomainTransferLockFuture{Future: future}
}

func (a *Route53DomainsStub) GetContactReachabilityStatus(ctx workflow.Context, input *route53domains.GetContactReachabilityStatusInput) (*route53domains.GetContactReachabilityStatusOutput, error) {
	var output route53domains.GetContactReachabilityStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.GetContactReachabilityStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) GetContactReachabilityStatusAsync(ctx workflow.Context, input *route53domains.GetContactReachabilityStatusInput) *Route53DomainsGetContactReachabilityStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.GetContactReachabilityStatus", input)
	return &Route53DomainsGetContactReachabilityStatusFuture{Future: future}
}

func (a *Route53DomainsStub) GetDomainDetail(ctx workflow.Context, input *route53domains.GetDomainDetailInput) (*route53domains.GetDomainDetailOutput, error) {
	var output route53domains.GetDomainDetailOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.GetDomainDetail", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) GetDomainDetailAsync(ctx workflow.Context, input *route53domains.GetDomainDetailInput) *Route53DomainsGetDomainDetailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.GetDomainDetail", input)
	return &Route53DomainsGetDomainDetailFuture{Future: future}
}

func (a *Route53DomainsStub) GetDomainSuggestions(ctx workflow.Context, input *route53domains.GetDomainSuggestionsInput) (*route53domains.GetDomainSuggestionsOutput, error) {
	var output route53domains.GetDomainSuggestionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.GetDomainSuggestions", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) GetDomainSuggestionsAsync(ctx workflow.Context, input *route53domains.GetDomainSuggestionsInput) *Route53DomainsGetDomainSuggestionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.GetDomainSuggestions", input)
	return &Route53DomainsGetDomainSuggestionsFuture{Future: future}
}

func (a *Route53DomainsStub) GetOperationDetail(ctx workflow.Context, input *route53domains.GetOperationDetailInput) (*route53domains.GetOperationDetailOutput, error) {
	var output route53domains.GetOperationDetailOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.GetOperationDetail", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) GetOperationDetailAsync(ctx workflow.Context, input *route53domains.GetOperationDetailInput) *Route53DomainsGetOperationDetailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.GetOperationDetail", input)
	return &Route53DomainsGetOperationDetailFuture{Future: future}
}

func (a *Route53DomainsStub) ListDomains(ctx workflow.Context, input *route53domains.ListDomainsInput) (*route53domains.ListDomainsOutput, error) {
	var output route53domains.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) ListDomainsAsync(ctx workflow.Context, input *route53domains.ListDomainsInput) *Route53DomainsListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.ListDomains", input)
	return &Route53DomainsListDomainsFuture{Future: future}
}

func (a *Route53DomainsStub) ListOperations(ctx workflow.Context, input *route53domains.ListOperationsInput) (*route53domains.ListOperationsOutput, error) {
	var output route53domains.ListOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.ListOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) ListOperationsAsync(ctx workflow.Context, input *route53domains.ListOperationsInput) *Route53DomainsListOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.ListOperations", input)
	return &Route53DomainsListOperationsFuture{Future: future}
}

func (a *Route53DomainsStub) ListTagsForDomain(ctx workflow.Context, input *route53domains.ListTagsForDomainInput) (*route53domains.ListTagsForDomainOutput, error) {
	var output route53domains.ListTagsForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.ListTagsForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) ListTagsForDomainAsync(ctx workflow.Context, input *route53domains.ListTagsForDomainInput) *Route53DomainsListTagsForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.ListTagsForDomain", input)
	return &Route53DomainsListTagsForDomainFuture{Future: future}
}

func (a *Route53DomainsStub) RegisterDomain(ctx workflow.Context, input *route53domains.RegisterDomainInput) (*route53domains.RegisterDomainOutput, error) {
	var output route53domains.RegisterDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.RegisterDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) RegisterDomainAsync(ctx workflow.Context, input *route53domains.RegisterDomainInput) *Route53DomainsRegisterDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.RegisterDomain", input)
	return &Route53DomainsRegisterDomainFuture{Future: future}
}

func (a *Route53DomainsStub) RejectDomainTransferFromAnotherAwsAccount(ctx workflow.Context, input *route53domains.RejectDomainTransferFromAnotherAwsAccountInput) (*route53domains.RejectDomainTransferFromAnotherAwsAccountOutput, error) {
	var output route53domains.RejectDomainTransferFromAnotherAwsAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.RejectDomainTransferFromAnotherAwsAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) RejectDomainTransferFromAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.RejectDomainTransferFromAnotherAwsAccountInput) *Route53DomainsRejectDomainTransferFromAnotherAwsAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.RejectDomainTransferFromAnotherAwsAccount", input)
	return &Route53DomainsRejectDomainTransferFromAnotherAwsAccountFuture{Future: future}
}

func (a *Route53DomainsStub) RenewDomain(ctx workflow.Context, input *route53domains.RenewDomainInput) (*route53domains.RenewDomainOutput, error) {
	var output route53domains.RenewDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.RenewDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) RenewDomainAsync(ctx workflow.Context, input *route53domains.RenewDomainInput) *Route53DomainsRenewDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.RenewDomain", input)
	return &Route53DomainsRenewDomainFuture{Future: future}
}

func (a *Route53DomainsStub) ResendContactReachabilityEmail(ctx workflow.Context, input *route53domains.ResendContactReachabilityEmailInput) (*route53domains.ResendContactReachabilityEmailOutput, error) {
	var output route53domains.ResendContactReachabilityEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.ResendContactReachabilityEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) ResendContactReachabilityEmailAsync(ctx workflow.Context, input *route53domains.ResendContactReachabilityEmailInput) *Route53DomainsResendContactReachabilityEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.ResendContactReachabilityEmail", input)
	return &Route53DomainsResendContactReachabilityEmailFuture{Future: future}
}

func (a *Route53DomainsStub) RetrieveDomainAuthCode(ctx workflow.Context, input *route53domains.RetrieveDomainAuthCodeInput) (*route53domains.RetrieveDomainAuthCodeOutput, error) {
	var output route53domains.RetrieveDomainAuthCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.RetrieveDomainAuthCode", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) RetrieveDomainAuthCodeAsync(ctx workflow.Context, input *route53domains.RetrieveDomainAuthCodeInput) *Route53DomainsRetrieveDomainAuthCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.RetrieveDomainAuthCode", input)
	return &Route53DomainsRetrieveDomainAuthCodeFuture{Future: future}
}

func (a *Route53DomainsStub) TransferDomain(ctx workflow.Context, input *route53domains.TransferDomainInput) (*route53domains.TransferDomainOutput, error) {
	var output route53domains.TransferDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.TransferDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) TransferDomainAsync(ctx workflow.Context, input *route53domains.TransferDomainInput) *Route53DomainsTransferDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.TransferDomain", input)
	return &Route53DomainsTransferDomainFuture{Future: future}
}

func (a *Route53DomainsStub) TransferDomainToAnotherAwsAccount(ctx workflow.Context, input *route53domains.TransferDomainToAnotherAwsAccountInput) (*route53domains.TransferDomainToAnotherAwsAccountOutput, error) {
	var output route53domains.TransferDomainToAnotherAwsAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.TransferDomainToAnotherAwsAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) TransferDomainToAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.TransferDomainToAnotherAwsAccountInput) *Route53DomainsTransferDomainToAnotherAwsAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.TransferDomainToAnotherAwsAccount", input)
	return &Route53DomainsTransferDomainToAnotherAwsAccountFuture{Future: future}
}

func (a *Route53DomainsStub) UpdateDomainContact(ctx workflow.Context, input *route53domains.UpdateDomainContactInput) (*route53domains.UpdateDomainContactOutput, error) {
	var output route53domains.UpdateDomainContactOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateDomainContact", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) UpdateDomainContactAsync(ctx workflow.Context, input *route53domains.UpdateDomainContactInput) *Route53DomainsUpdateDomainContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateDomainContact", input)
	return &Route53DomainsUpdateDomainContactFuture{Future: future}
}

func (a *Route53DomainsStub) UpdateDomainContactPrivacy(ctx workflow.Context, input *route53domains.UpdateDomainContactPrivacyInput) (*route53domains.UpdateDomainContactPrivacyOutput, error) {
	var output route53domains.UpdateDomainContactPrivacyOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateDomainContactPrivacy", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) UpdateDomainContactPrivacyAsync(ctx workflow.Context, input *route53domains.UpdateDomainContactPrivacyInput) *Route53DomainsUpdateDomainContactPrivacyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateDomainContactPrivacy", input)
	return &Route53DomainsUpdateDomainContactPrivacyFuture{Future: future}
}

func (a *Route53DomainsStub) UpdateDomainNameservers(ctx workflow.Context, input *route53domains.UpdateDomainNameserversInput) (*route53domains.UpdateDomainNameserversOutput, error) {
	var output route53domains.UpdateDomainNameserversOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateDomainNameservers", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) UpdateDomainNameserversAsync(ctx workflow.Context, input *route53domains.UpdateDomainNameserversInput) *Route53DomainsUpdateDomainNameserversFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateDomainNameservers", input)
	return &Route53DomainsUpdateDomainNameserversFuture{Future: future}
}

func (a *Route53DomainsStub) UpdateTagsForDomain(ctx workflow.Context, input *route53domains.UpdateTagsForDomainInput) (*route53domains.UpdateTagsForDomainOutput, error) {
	var output route53domains.UpdateTagsForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateTagsForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) UpdateTagsForDomainAsync(ctx workflow.Context, input *route53domains.UpdateTagsForDomainInput) *Route53DomainsUpdateTagsForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.UpdateTagsForDomain", input)
	return &Route53DomainsUpdateTagsForDomainFuture{Future: future}
}

func (a *Route53DomainsStub) ViewBilling(ctx workflow.Context, input *route53domains.ViewBillingInput) (*route53domains.ViewBillingOutput, error) {
	var output route53domains.ViewBillingOutput
	err := workflow.ExecuteActivity(ctx, "aws.route53domains.ViewBilling", input).Get(ctx, &output)
	return &output, err
}

func (a *Route53DomainsStub) ViewBillingAsync(ctx workflow.Context, input *route53domains.ViewBillingInput) *Route53DomainsViewBillingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.route53domains.ViewBilling", input)
	return &Route53DomainsViewBillingFuture{Future: future}
}
