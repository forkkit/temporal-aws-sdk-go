// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/sso"
	"go.temporal.io/sdk/workflow"
)

type SSOClient interface {
	GetRoleCredentials(ctx workflow.Context, input *sso.GetRoleCredentialsInput) (*sso.GetRoleCredentialsOutput, error)
	GetRoleCredentialsAsync(ctx workflow.Context, input *sso.GetRoleCredentialsInput) *SSOGetRoleCredentialsFuture

	ListAccountRoles(ctx workflow.Context, input *sso.ListAccountRolesInput) (*sso.ListAccountRolesOutput, error)
	ListAccountRolesAsync(ctx workflow.Context, input *sso.ListAccountRolesInput) *SSOListAccountRolesFuture

	ListAccounts(ctx workflow.Context, input *sso.ListAccountsInput) (*sso.ListAccountsOutput, error)
	ListAccountsAsync(ctx workflow.Context, input *sso.ListAccountsInput) *SSOListAccountsFuture

	Logout(ctx workflow.Context, input *sso.LogoutInput) (*sso.LogoutOutput, error)
	LogoutAsync(ctx workflow.Context, input *sso.LogoutInput) *SSOLogoutFuture
}

type SSOStub struct{}

func NewSSOStub() SSOClient {
	return &SSOStub{}
}

type SSOGetRoleCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSOGetRoleCredentialsFuture) Get(ctx workflow.Context) (*sso.GetRoleCredentialsOutput, error) {
	var output sso.GetRoleCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSOListAccountRolesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSOListAccountRolesFuture) Get(ctx workflow.Context) (*sso.ListAccountRolesOutput, error) {
	var output sso.ListAccountRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSOListAccountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSOListAccountsFuture) Get(ctx workflow.Context) (*sso.ListAccountsOutput, error) {
	var output sso.ListAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SSOLogoutFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SSOLogoutFuture) Get(ctx workflow.Context) (*sso.LogoutOutput, error) {
	var output sso.LogoutOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SSOStub) GetRoleCredentials(ctx workflow.Context, input *sso.GetRoleCredentialsInput) (*sso.GetRoleCredentialsOutput, error) {
	var output sso.GetRoleCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sso.GetRoleCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOStub) GetRoleCredentialsAsync(ctx workflow.Context, input *sso.GetRoleCredentialsInput) *SSOGetRoleCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sso.GetRoleCredentials", input)
	return &SSOGetRoleCredentialsFuture{Future: future}
}

func (a *SSOStub) ListAccountRoles(ctx workflow.Context, input *sso.ListAccountRolesInput) (*sso.ListAccountRolesOutput, error) {
	var output sso.ListAccountRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sso.ListAccountRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOStub) ListAccountRolesAsync(ctx workflow.Context, input *sso.ListAccountRolesInput) *SSOListAccountRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sso.ListAccountRoles", input)
	return &SSOListAccountRolesFuture{Future: future}
}

func (a *SSOStub) ListAccounts(ctx workflow.Context, input *sso.ListAccountsInput) (*sso.ListAccountsOutput, error) {
	var output sso.ListAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sso.ListAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOStub) ListAccountsAsync(ctx workflow.Context, input *sso.ListAccountsInput) *SSOListAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sso.ListAccounts", input)
	return &SSOListAccountsFuture{Future: future}
}

func (a *SSOStub) Logout(ctx workflow.Context, input *sso.LogoutInput) (*sso.LogoutOutput, error) {
	var output sso.LogoutOutput
	err := workflow.ExecuteActivity(ctx, "aws.sso.Logout", input).Get(ctx, &output)
	return &output, err
}

func (a *SSOStub) LogoutAsync(ctx workflow.Context, input *sso.LogoutInput) *SSOLogoutFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sso.Logout", input)
	return &SSOLogoutFuture{Future: future}
}
