// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/connectparticipant"
	"go.temporal.io/sdk/workflow"
)

type ConnectParticipantClient interface {
	CreateParticipantConnection(ctx workflow.Context, input *connectparticipant.CreateParticipantConnectionInput) (*connectparticipant.CreateParticipantConnectionOutput, error)
	CreateParticipantConnectionAsync(ctx workflow.Context, input *connectparticipant.CreateParticipantConnectionInput) *ConnectParticipantCreateParticipantConnectionFuture

	DisconnectParticipant(ctx workflow.Context, input *connectparticipant.DisconnectParticipantInput) (*connectparticipant.DisconnectParticipantOutput, error)
	DisconnectParticipantAsync(ctx workflow.Context, input *connectparticipant.DisconnectParticipantInput) *ConnectParticipantDisconnectParticipantFuture

	GetTranscript(ctx workflow.Context, input *connectparticipant.GetTranscriptInput) (*connectparticipant.GetTranscriptOutput, error)
	GetTranscriptAsync(ctx workflow.Context, input *connectparticipant.GetTranscriptInput) *ConnectParticipantGetTranscriptFuture

	SendEvent(ctx workflow.Context, input *connectparticipant.SendEventInput) (*connectparticipant.SendEventOutput, error)
	SendEventAsync(ctx workflow.Context, input *connectparticipant.SendEventInput) *ConnectParticipantSendEventFuture

	SendMessage(ctx workflow.Context, input *connectparticipant.SendMessageInput) (*connectparticipant.SendMessageOutput, error)
	SendMessageAsync(ctx workflow.Context, input *connectparticipant.SendMessageInput) *ConnectParticipantSendMessageFuture
}

type ConnectParticipantStub struct{}

func NewConnectParticipantStub() ConnectParticipantClient {
	return &ConnectParticipantStub{}
}

type ConnectParticipantCreateParticipantConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectParticipantCreateParticipantConnectionFuture) Get(ctx workflow.Context) (*connectparticipant.CreateParticipantConnectionOutput, error) {
	var output connectparticipant.CreateParticipantConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectParticipantDisconnectParticipantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectParticipantDisconnectParticipantFuture) Get(ctx workflow.Context) (*connectparticipant.DisconnectParticipantOutput, error) {
	var output connectparticipant.DisconnectParticipantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectParticipantGetTranscriptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectParticipantGetTranscriptFuture) Get(ctx workflow.Context) (*connectparticipant.GetTranscriptOutput, error) {
	var output connectparticipant.GetTranscriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectParticipantSendEventFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectParticipantSendEventFuture) Get(ctx workflow.Context) (*connectparticipant.SendEventOutput, error) {
	var output connectparticipant.SendEventOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectParticipantSendMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectParticipantSendMessageFuture) Get(ctx workflow.Context) (*connectparticipant.SendMessageOutput, error) {
	var output connectparticipant.SendMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ConnectParticipantStub) CreateParticipantConnection(ctx workflow.Context, input *connectparticipant.CreateParticipantConnectionInput) (*connectparticipant.CreateParticipantConnectionOutput, error) {
	var output connectparticipant.CreateParticipantConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.connectparticipant.CreateParticipantConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *ConnectParticipantStub) CreateParticipantConnectionAsync(ctx workflow.Context, input *connectparticipant.CreateParticipantConnectionInput) *ConnectParticipantCreateParticipantConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.connectparticipant.CreateParticipantConnection", input)
	return &ConnectParticipantCreateParticipantConnectionFuture{Future: future}
}

func (a *ConnectParticipantStub) DisconnectParticipant(ctx workflow.Context, input *connectparticipant.DisconnectParticipantInput) (*connectparticipant.DisconnectParticipantOutput, error) {
	var output connectparticipant.DisconnectParticipantOutput
	err := workflow.ExecuteActivity(ctx, "aws.connectparticipant.DisconnectParticipant", input).Get(ctx, &output)
	return &output, err
}

func (a *ConnectParticipantStub) DisconnectParticipantAsync(ctx workflow.Context, input *connectparticipant.DisconnectParticipantInput) *ConnectParticipantDisconnectParticipantFuture {
	future := workflow.ExecuteActivity(ctx, "aws.connectparticipant.DisconnectParticipant", input)
	return &ConnectParticipantDisconnectParticipantFuture{Future: future}
}

func (a *ConnectParticipantStub) GetTranscript(ctx workflow.Context, input *connectparticipant.GetTranscriptInput) (*connectparticipant.GetTranscriptOutput, error) {
	var output connectparticipant.GetTranscriptOutput
	err := workflow.ExecuteActivity(ctx, "aws.connectparticipant.GetTranscript", input).Get(ctx, &output)
	return &output, err
}

func (a *ConnectParticipantStub) GetTranscriptAsync(ctx workflow.Context, input *connectparticipant.GetTranscriptInput) *ConnectParticipantGetTranscriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.connectparticipant.GetTranscript", input)
	return &ConnectParticipantGetTranscriptFuture{Future: future}
}

func (a *ConnectParticipantStub) SendEvent(ctx workflow.Context, input *connectparticipant.SendEventInput) (*connectparticipant.SendEventOutput, error) {
	var output connectparticipant.SendEventOutput
	err := workflow.ExecuteActivity(ctx, "aws.connectparticipant.SendEvent", input).Get(ctx, &output)
	return &output, err
}

func (a *ConnectParticipantStub) SendEventAsync(ctx workflow.Context, input *connectparticipant.SendEventInput) *ConnectParticipantSendEventFuture {
	future := workflow.ExecuteActivity(ctx, "aws.connectparticipant.SendEvent", input)
	return &ConnectParticipantSendEventFuture{Future: future}
}

func (a *ConnectParticipantStub) SendMessage(ctx workflow.Context, input *connectparticipant.SendMessageInput) (*connectparticipant.SendMessageOutput, error) {
	var output connectparticipant.SendMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws.connectparticipant.SendMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *ConnectParticipantStub) SendMessageAsync(ctx workflow.Context, input *connectparticipant.SendMessageInput) *ConnectParticipantSendMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.connectparticipant.SendMessage", input)
	return &ConnectParticipantSendMessageFuture{Future: future}
}
