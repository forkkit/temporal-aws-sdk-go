// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/fms"
	"go.temporal.io/sdk/workflow"
)

type FMSClient interface {
	AssociateAdminAccount(ctx workflow.Context, input *fms.AssociateAdminAccountInput) (*fms.AssociateAdminAccountOutput, error)
	AssociateAdminAccountAsync(ctx workflow.Context, input *fms.AssociateAdminAccountInput) *FmsAssociateAdminAccountFuture

	DeleteAppsList(ctx workflow.Context, input *fms.DeleteAppsListInput) (*fms.DeleteAppsListOutput, error)
	DeleteAppsListAsync(ctx workflow.Context, input *fms.DeleteAppsListInput) *FmsDeleteAppsListFuture

	DeleteNotificationChannel(ctx workflow.Context, input *fms.DeleteNotificationChannelInput) (*fms.DeleteNotificationChannelOutput, error)
	DeleteNotificationChannelAsync(ctx workflow.Context, input *fms.DeleteNotificationChannelInput) *FmsDeleteNotificationChannelFuture

	DeletePolicy(ctx workflow.Context, input *fms.DeletePolicyInput) (*fms.DeletePolicyOutput, error)
	DeletePolicyAsync(ctx workflow.Context, input *fms.DeletePolicyInput) *FmsDeletePolicyFuture

	DeleteProtocolsList(ctx workflow.Context, input *fms.DeleteProtocolsListInput) (*fms.DeleteProtocolsListOutput, error)
	DeleteProtocolsListAsync(ctx workflow.Context, input *fms.DeleteProtocolsListInput) *FmsDeleteProtocolsListFuture

	DisassociateAdminAccount(ctx workflow.Context, input *fms.DisassociateAdminAccountInput) (*fms.DisassociateAdminAccountOutput, error)
	DisassociateAdminAccountAsync(ctx workflow.Context, input *fms.DisassociateAdminAccountInput) *FmsDisassociateAdminAccountFuture

	GetAdminAccount(ctx workflow.Context, input *fms.GetAdminAccountInput) (*fms.GetAdminAccountOutput, error)
	GetAdminAccountAsync(ctx workflow.Context, input *fms.GetAdminAccountInput) *FmsGetAdminAccountFuture

	GetAppsList(ctx workflow.Context, input *fms.GetAppsListInput) (*fms.GetAppsListOutput, error)
	GetAppsListAsync(ctx workflow.Context, input *fms.GetAppsListInput) *FmsGetAppsListFuture

	GetComplianceDetail(ctx workflow.Context, input *fms.GetComplianceDetailInput) (*fms.GetComplianceDetailOutput, error)
	GetComplianceDetailAsync(ctx workflow.Context, input *fms.GetComplianceDetailInput) *FmsGetComplianceDetailFuture

	GetNotificationChannel(ctx workflow.Context, input *fms.GetNotificationChannelInput) (*fms.GetNotificationChannelOutput, error)
	GetNotificationChannelAsync(ctx workflow.Context, input *fms.GetNotificationChannelInput) *FmsGetNotificationChannelFuture

	GetPolicy(ctx workflow.Context, input *fms.GetPolicyInput) (*fms.GetPolicyOutput, error)
	GetPolicyAsync(ctx workflow.Context, input *fms.GetPolicyInput) *FmsGetPolicyFuture

	GetProtectionStatus(ctx workflow.Context, input *fms.GetProtectionStatusInput) (*fms.GetProtectionStatusOutput, error)
	GetProtectionStatusAsync(ctx workflow.Context, input *fms.GetProtectionStatusInput) *FmsGetProtectionStatusFuture

	GetProtocolsList(ctx workflow.Context, input *fms.GetProtocolsListInput) (*fms.GetProtocolsListOutput, error)
	GetProtocolsListAsync(ctx workflow.Context, input *fms.GetProtocolsListInput) *FmsGetProtocolsListFuture

	GetViolationDetails(ctx workflow.Context, input *fms.GetViolationDetailsInput) (*fms.GetViolationDetailsOutput, error)
	GetViolationDetailsAsync(ctx workflow.Context, input *fms.GetViolationDetailsInput) *FmsGetViolationDetailsFuture

	ListAppsLists(ctx workflow.Context, input *fms.ListAppsListsInput) (*fms.ListAppsListsOutput, error)
	ListAppsListsAsync(ctx workflow.Context, input *fms.ListAppsListsInput) *FmsListAppsListsFuture

	ListComplianceStatus(ctx workflow.Context, input *fms.ListComplianceStatusInput) (*fms.ListComplianceStatusOutput, error)
	ListComplianceStatusAsync(ctx workflow.Context, input *fms.ListComplianceStatusInput) *FmsListComplianceStatusFuture

	ListMemberAccounts(ctx workflow.Context, input *fms.ListMemberAccountsInput) (*fms.ListMemberAccountsOutput, error)
	ListMemberAccountsAsync(ctx workflow.Context, input *fms.ListMemberAccountsInput) *FmsListMemberAccountsFuture

	ListPolicies(ctx workflow.Context, input *fms.ListPoliciesInput) (*fms.ListPoliciesOutput, error)
	ListPoliciesAsync(ctx workflow.Context, input *fms.ListPoliciesInput) *FmsListPoliciesFuture

	ListProtocolsLists(ctx workflow.Context, input *fms.ListProtocolsListsInput) (*fms.ListProtocolsListsOutput, error)
	ListProtocolsListsAsync(ctx workflow.Context, input *fms.ListProtocolsListsInput) *FmsListProtocolsListsFuture

	ListTagsForResource(ctx workflow.Context, input *fms.ListTagsForResourceInput) (*fms.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *fms.ListTagsForResourceInput) *FmsListTagsForResourceFuture

	PutAppsList(ctx workflow.Context, input *fms.PutAppsListInput) (*fms.PutAppsListOutput, error)
	PutAppsListAsync(ctx workflow.Context, input *fms.PutAppsListInput) *FmsPutAppsListFuture

	PutNotificationChannel(ctx workflow.Context, input *fms.PutNotificationChannelInput) (*fms.PutNotificationChannelOutput, error)
	PutNotificationChannelAsync(ctx workflow.Context, input *fms.PutNotificationChannelInput) *FmsPutNotificationChannelFuture

	PutPolicy(ctx workflow.Context, input *fms.PutPolicyInput) (*fms.PutPolicyOutput, error)
	PutPolicyAsync(ctx workflow.Context, input *fms.PutPolicyInput) *FmsPutPolicyFuture

	PutProtocolsList(ctx workflow.Context, input *fms.PutProtocolsListInput) (*fms.PutProtocolsListOutput, error)
	PutProtocolsListAsync(ctx workflow.Context, input *fms.PutProtocolsListInput) *FmsPutProtocolsListFuture

	TagResource(ctx workflow.Context, input *fms.TagResourceInput) (*fms.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *fms.TagResourceInput) *FmsTagResourceFuture

	UntagResource(ctx workflow.Context, input *fms.UntagResourceInput) (*fms.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *fms.UntagResourceInput) *FmsUntagResourceFuture
}

type FMSStub struct{}

func NewFMSStub() FMSClient {
	return &FMSStub{}
}

type FmsAssociateAdminAccountFuture struct {
	Future workflow.Future
}

func (r *FmsAssociateAdminAccountFuture) Get(ctx workflow.Context) (*fms.AssociateAdminAccountOutput, error) {
	var output fms.AssociateAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsDeleteAppsListFuture struct {
	Future workflow.Future
}

func (r *FmsDeleteAppsListFuture) Get(ctx workflow.Context) (*fms.DeleteAppsListOutput, error) {
	var output fms.DeleteAppsListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsDeleteNotificationChannelFuture struct {
	Future workflow.Future
}

func (r *FmsDeleteNotificationChannelFuture) Get(ctx workflow.Context) (*fms.DeleteNotificationChannelOutput, error) {
	var output fms.DeleteNotificationChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsDeletePolicyFuture struct {
	Future workflow.Future
}

func (r *FmsDeletePolicyFuture) Get(ctx workflow.Context) (*fms.DeletePolicyOutput, error) {
	var output fms.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsDeleteProtocolsListFuture struct {
	Future workflow.Future
}

func (r *FmsDeleteProtocolsListFuture) Get(ctx workflow.Context) (*fms.DeleteProtocolsListOutput, error) {
	var output fms.DeleteProtocolsListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsDisassociateAdminAccountFuture struct {
	Future workflow.Future
}

func (r *FmsDisassociateAdminAccountFuture) Get(ctx workflow.Context) (*fms.DisassociateAdminAccountOutput, error) {
	var output fms.DisassociateAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsGetAdminAccountFuture struct {
	Future workflow.Future
}

func (r *FmsGetAdminAccountFuture) Get(ctx workflow.Context) (*fms.GetAdminAccountOutput, error) {
	var output fms.GetAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsGetAppsListFuture struct {
	Future workflow.Future
}

func (r *FmsGetAppsListFuture) Get(ctx workflow.Context) (*fms.GetAppsListOutput, error) {
	var output fms.GetAppsListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsGetComplianceDetailFuture struct {
	Future workflow.Future
}

func (r *FmsGetComplianceDetailFuture) Get(ctx workflow.Context) (*fms.GetComplianceDetailOutput, error) {
	var output fms.GetComplianceDetailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsGetNotificationChannelFuture struct {
	Future workflow.Future
}

func (r *FmsGetNotificationChannelFuture) Get(ctx workflow.Context) (*fms.GetNotificationChannelOutput, error) {
	var output fms.GetNotificationChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsGetPolicyFuture struct {
	Future workflow.Future
}

func (r *FmsGetPolicyFuture) Get(ctx workflow.Context) (*fms.GetPolicyOutput, error) {
	var output fms.GetPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsGetProtectionStatusFuture struct {
	Future workflow.Future
}

func (r *FmsGetProtectionStatusFuture) Get(ctx workflow.Context) (*fms.GetProtectionStatusOutput, error) {
	var output fms.GetProtectionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsGetProtocolsListFuture struct {
	Future workflow.Future
}

func (r *FmsGetProtocolsListFuture) Get(ctx workflow.Context) (*fms.GetProtocolsListOutput, error) {
	var output fms.GetProtocolsListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsGetViolationDetailsFuture struct {
	Future workflow.Future
}

func (r *FmsGetViolationDetailsFuture) Get(ctx workflow.Context) (*fms.GetViolationDetailsOutput, error) {
	var output fms.GetViolationDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsListAppsListsFuture struct {
	Future workflow.Future
}

func (r *FmsListAppsListsFuture) Get(ctx workflow.Context) (*fms.ListAppsListsOutput, error) {
	var output fms.ListAppsListsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsListComplianceStatusFuture struct {
	Future workflow.Future
}

func (r *FmsListComplianceStatusFuture) Get(ctx workflow.Context) (*fms.ListComplianceStatusOutput, error) {
	var output fms.ListComplianceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsListMemberAccountsFuture struct {
	Future workflow.Future
}

func (r *FmsListMemberAccountsFuture) Get(ctx workflow.Context) (*fms.ListMemberAccountsOutput, error) {
	var output fms.ListMemberAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsListPoliciesFuture struct {
	Future workflow.Future
}

func (r *FmsListPoliciesFuture) Get(ctx workflow.Context) (*fms.ListPoliciesOutput, error) {
	var output fms.ListPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsListProtocolsListsFuture struct {
	Future workflow.Future
}

func (r *FmsListProtocolsListsFuture) Get(ctx workflow.Context) (*fms.ListProtocolsListsOutput, error) {
	var output fms.ListProtocolsListsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *FmsListTagsForResourceFuture) Get(ctx workflow.Context) (*fms.ListTagsForResourceOutput, error) {
	var output fms.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsPutAppsListFuture struct {
	Future workflow.Future
}

func (r *FmsPutAppsListFuture) Get(ctx workflow.Context) (*fms.PutAppsListOutput, error) {
	var output fms.PutAppsListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsPutNotificationChannelFuture struct {
	Future workflow.Future
}

func (r *FmsPutNotificationChannelFuture) Get(ctx workflow.Context) (*fms.PutNotificationChannelOutput, error) {
	var output fms.PutNotificationChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsPutPolicyFuture struct {
	Future workflow.Future
}

func (r *FmsPutPolicyFuture) Get(ctx workflow.Context) (*fms.PutPolicyOutput, error) {
	var output fms.PutPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsPutProtocolsListFuture struct {
	Future workflow.Future
}

func (r *FmsPutProtocolsListFuture) Get(ctx workflow.Context) (*fms.PutProtocolsListOutput, error) {
	var output fms.PutProtocolsListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsTagResourceFuture struct {
	Future workflow.Future
}

func (r *FmsTagResourceFuture) Get(ctx workflow.Context) (*fms.TagResourceOutput, error) {
	var output fms.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FmsUntagResourceFuture struct {
	Future workflow.Future
}

func (r *FmsUntagResourceFuture) Get(ctx workflow.Context) (*fms.UntagResourceOutput, error) {
	var output fms.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) AssociateAdminAccount(ctx workflow.Context, input *fms.AssociateAdminAccountInput) (*fms.AssociateAdminAccountOutput, error) {
	var output fms.AssociateAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.AssociateAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) AssociateAdminAccountAsync(ctx workflow.Context, input *fms.AssociateAdminAccountInput) *FmsAssociateAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.AssociateAdminAccount", input)
	return &FmsAssociateAdminAccountFuture{Future: future}
}

func (a *FMSStub) DeleteAppsList(ctx workflow.Context, input *fms.DeleteAppsListInput) (*fms.DeleteAppsListOutput, error) {
	var output fms.DeleteAppsListOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.DeleteAppsList", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) DeleteAppsListAsync(ctx workflow.Context, input *fms.DeleteAppsListInput) *FmsDeleteAppsListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.DeleteAppsList", input)
	return &FmsDeleteAppsListFuture{Future: future}
}

func (a *FMSStub) DeleteNotificationChannel(ctx workflow.Context, input *fms.DeleteNotificationChannelInput) (*fms.DeleteNotificationChannelOutput, error) {
	var output fms.DeleteNotificationChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.DeleteNotificationChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) DeleteNotificationChannelAsync(ctx workflow.Context, input *fms.DeleteNotificationChannelInput) *FmsDeleteNotificationChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.DeleteNotificationChannel", input)
	return &FmsDeleteNotificationChannelFuture{Future: future}
}

func (a *FMSStub) DeletePolicy(ctx workflow.Context, input *fms.DeletePolicyInput) (*fms.DeletePolicyOutput, error) {
	var output fms.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) DeletePolicyAsync(ctx workflow.Context, input *fms.DeletePolicyInput) *FmsDeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.DeletePolicy", input)
	return &FmsDeletePolicyFuture{Future: future}
}

func (a *FMSStub) DeleteProtocolsList(ctx workflow.Context, input *fms.DeleteProtocolsListInput) (*fms.DeleteProtocolsListOutput, error) {
	var output fms.DeleteProtocolsListOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.DeleteProtocolsList", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) DeleteProtocolsListAsync(ctx workflow.Context, input *fms.DeleteProtocolsListInput) *FmsDeleteProtocolsListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.DeleteProtocolsList", input)
	return &FmsDeleteProtocolsListFuture{Future: future}
}

func (a *FMSStub) DisassociateAdminAccount(ctx workflow.Context, input *fms.DisassociateAdminAccountInput) (*fms.DisassociateAdminAccountOutput, error) {
	var output fms.DisassociateAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.DisassociateAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) DisassociateAdminAccountAsync(ctx workflow.Context, input *fms.DisassociateAdminAccountInput) *FmsDisassociateAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.DisassociateAdminAccount", input)
	return &FmsDisassociateAdminAccountFuture{Future: future}
}

func (a *FMSStub) GetAdminAccount(ctx workflow.Context, input *fms.GetAdminAccountInput) (*fms.GetAdminAccountOutput, error) {
	var output fms.GetAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.GetAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) GetAdminAccountAsync(ctx workflow.Context, input *fms.GetAdminAccountInput) *FmsGetAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.GetAdminAccount", input)
	return &FmsGetAdminAccountFuture{Future: future}
}

func (a *FMSStub) GetAppsList(ctx workflow.Context, input *fms.GetAppsListInput) (*fms.GetAppsListOutput, error) {
	var output fms.GetAppsListOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.GetAppsList", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) GetAppsListAsync(ctx workflow.Context, input *fms.GetAppsListInput) *FmsGetAppsListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.GetAppsList", input)
	return &FmsGetAppsListFuture{Future: future}
}

func (a *FMSStub) GetComplianceDetail(ctx workflow.Context, input *fms.GetComplianceDetailInput) (*fms.GetComplianceDetailOutput, error) {
	var output fms.GetComplianceDetailOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.GetComplianceDetail", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) GetComplianceDetailAsync(ctx workflow.Context, input *fms.GetComplianceDetailInput) *FmsGetComplianceDetailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.GetComplianceDetail", input)
	return &FmsGetComplianceDetailFuture{Future: future}
}

func (a *FMSStub) GetNotificationChannel(ctx workflow.Context, input *fms.GetNotificationChannelInput) (*fms.GetNotificationChannelOutput, error) {
	var output fms.GetNotificationChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.GetNotificationChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) GetNotificationChannelAsync(ctx workflow.Context, input *fms.GetNotificationChannelInput) *FmsGetNotificationChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.GetNotificationChannel", input)
	return &FmsGetNotificationChannelFuture{Future: future}
}

func (a *FMSStub) GetPolicy(ctx workflow.Context, input *fms.GetPolicyInput) (*fms.GetPolicyOutput, error) {
	var output fms.GetPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.GetPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) GetPolicyAsync(ctx workflow.Context, input *fms.GetPolicyInput) *FmsGetPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.GetPolicy", input)
	return &FmsGetPolicyFuture{Future: future}
}

func (a *FMSStub) GetProtectionStatus(ctx workflow.Context, input *fms.GetProtectionStatusInput) (*fms.GetProtectionStatusOutput, error) {
	var output fms.GetProtectionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.GetProtectionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) GetProtectionStatusAsync(ctx workflow.Context, input *fms.GetProtectionStatusInput) *FmsGetProtectionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.GetProtectionStatus", input)
	return &FmsGetProtectionStatusFuture{Future: future}
}

func (a *FMSStub) GetProtocolsList(ctx workflow.Context, input *fms.GetProtocolsListInput) (*fms.GetProtocolsListOutput, error) {
	var output fms.GetProtocolsListOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.GetProtocolsList", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) GetProtocolsListAsync(ctx workflow.Context, input *fms.GetProtocolsListInput) *FmsGetProtocolsListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.GetProtocolsList", input)
	return &FmsGetProtocolsListFuture{Future: future}
}

func (a *FMSStub) GetViolationDetails(ctx workflow.Context, input *fms.GetViolationDetailsInput) (*fms.GetViolationDetailsOutput, error) {
	var output fms.GetViolationDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.GetViolationDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) GetViolationDetailsAsync(ctx workflow.Context, input *fms.GetViolationDetailsInput) *FmsGetViolationDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.GetViolationDetails", input)
	return &FmsGetViolationDetailsFuture{Future: future}
}

func (a *FMSStub) ListAppsLists(ctx workflow.Context, input *fms.ListAppsListsInput) (*fms.ListAppsListsOutput, error) {
	var output fms.ListAppsListsOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.ListAppsLists", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) ListAppsListsAsync(ctx workflow.Context, input *fms.ListAppsListsInput) *FmsListAppsListsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.ListAppsLists", input)
	return &FmsListAppsListsFuture{Future: future}
}

func (a *FMSStub) ListComplianceStatus(ctx workflow.Context, input *fms.ListComplianceStatusInput) (*fms.ListComplianceStatusOutput, error) {
	var output fms.ListComplianceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.ListComplianceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) ListComplianceStatusAsync(ctx workflow.Context, input *fms.ListComplianceStatusInput) *FmsListComplianceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.ListComplianceStatus", input)
	return &FmsListComplianceStatusFuture{Future: future}
}

func (a *FMSStub) ListMemberAccounts(ctx workflow.Context, input *fms.ListMemberAccountsInput) (*fms.ListMemberAccountsOutput, error) {
	var output fms.ListMemberAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.ListMemberAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) ListMemberAccountsAsync(ctx workflow.Context, input *fms.ListMemberAccountsInput) *FmsListMemberAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.ListMemberAccounts", input)
	return &FmsListMemberAccountsFuture{Future: future}
}

func (a *FMSStub) ListPolicies(ctx workflow.Context, input *fms.ListPoliciesInput) (*fms.ListPoliciesOutput, error) {
	var output fms.ListPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.ListPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) ListPoliciesAsync(ctx workflow.Context, input *fms.ListPoliciesInput) *FmsListPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.ListPolicies", input)
	return &FmsListPoliciesFuture{Future: future}
}

func (a *FMSStub) ListProtocolsLists(ctx workflow.Context, input *fms.ListProtocolsListsInput) (*fms.ListProtocolsListsOutput, error) {
	var output fms.ListProtocolsListsOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.ListProtocolsLists", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) ListProtocolsListsAsync(ctx workflow.Context, input *fms.ListProtocolsListsInput) *FmsListProtocolsListsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.ListProtocolsLists", input)
	return &FmsListProtocolsListsFuture{Future: future}
}

func (a *FMSStub) ListTagsForResource(ctx workflow.Context, input *fms.ListTagsForResourceInput) (*fms.ListTagsForResourceOutput, error) {
	var output fms.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) ListTagsForResourceAsync(ctx workflow.Context, input *fms.ListTagsForResourceInput) *FmsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.ListTagsForResource", input)
	return &FmsListTagsForResourceFuture{Future: future}
}

func (a *FMSStub) PutAppsList(ctx workflow.Context, input *fms.PutAppsListInput) (*fms.PutAppsListOutput, error) {
	var output fms.PutAppsListOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.PutAppsList", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) PutAppsListAsync(ctx workflow.Context, input *fms.PutAppsListInput) *FmsPutAppsListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.PutAppsList", input)
	return &FmsPutAppsListFuture{Future: future}
}

func (a *FMSStub) PutNotificationChannel(ctx workflow.Context, input *fms.PutNotificationChannelInput) (*fms.PutNotificationChannelOutput, error) {
	var output fms.PutNotificationChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.PutNotificationChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) PutNotificationChannelAsync(ctx workflow.Context, input *fms.PutNotificationChannelInput) *FmsPutNotificationChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.PutNotificationChannel", input)
	return &FmsPutNotificationChannelFuture{Future: future}
}

func (a *FMSStub) PutPolicy(ctx workflow.Context, input *fms.PutPolicyInput) (*fms.PutPolicyOutput, error) {
	var output fms.PutPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.PutPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) PutPolicyAsync(ctx workflow.Context, input *fms.PutPolicyInput) *FmsPutPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.PutPolicy", input)
	return &FmsPutPolicyFuture{Future: future}
}

func (a *FMSStub) PutProtocolsList(ctx workflow.Context, input *fms.PutProtocolsListInput) (*fms.PutProtocolsListOutput, error) {
	var output fms.PutProtocolsListOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.PutProtocolsList", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) PutProtocolsListAsync(ctx workflow.Context, input *fms.PutProtocolsListInput) *FmsPutProtocolsListFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.PutProtocolsList", input)
	return &FmsPutProtocolsListFuture{Future: future}
}

func (a *FMSStub) TagResource(ctx workflow.Context, input *fms.TagResourceInput) (*fms.TagResourceOutput, error) {
	var output fms.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) TagResourceAsync(ctx workflow.Context, input *fms.TagResourceInput) *FmsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.TagResource", input)
	return &FmsTagResourceFuture{Future: future}
}

func (a *FMSStub) UntagResource(ctx workflow.Context, input *fms.UntagResourceInput) (*fms.UntagResourceOutput, error) {
	var output fms.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.fms.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *FMSStub) UntagResourceAsync(ctx workflow.Context, input *fms.UntagResourceInput) *FmsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.fms.UntagResource", input)
	return &FmsUntagResourceFuture{Future: future}
}
