// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/mturk"
	"go.temporal.io/sdk/workflow"
)

type MTurkClient interface {
	ApproveAssignment(ctx workflow.Context, input *mturk.ApproveAssignmentInput) (*mturk.ApproveAssignmentOutput, error)
	ApproveAssignmentAsync(ctx workflow.Context, input *mturk.ApproveAssignmentInput) *MturkApproveAssignmentFuture

	AssociateQualificationWithWorker(ctx workflow.Context, input *mturk.AssociateQualificationWithWorkerInput) (*mturk.AssociateQualificationWithWorkerOutput, error)
	AssociateQualificationWithWorkerAsync(ctx workflow.Context, input *mturk.AssociateQualificationWithWorkerInput) *MturkAssociateQualificationWithWorkerFuture

	CreateAdditionalAssignmentsForHIT(ctx workflow.Context, input *mturk.CreateAdditionalAssignmentsForHITInput) (*mturk.CreateAdditionalAssignmentsForHITOutput, error)
	CreateAdditionalAssignmentsForHITAsync(ctx workflow.Context, input *mturk.CreateAdditionalAssignmentsForHITInput) *MturkCreateAdditionalAssignmentsForHITFuture

	CreateHIT(ctx workflow.Context, input *mturk.CreateHITInput) (*mturk.CreateHITOutput, error)
	CreateHITAsync(ctx workflow.Context, input *mturk.CreateHITInput) *MturkCreateHITFuture

	CreateHITType(ctx workflow.Context, input *mturk.CreateHITTypeInput) (*mturk.CreateHITTypeOutput, error)
	CreateHITTypeAsync(ctx workflow.Context, input *mturk.CreateHITTypeInput) *MturkCreateHITTypeFuture

	CreateHITWithHITType(ctx workflow.Context, input *mturk.CreateHITWithHITTypeInput) (*mturk.CreateHITWithHITTypeOutput, error)
	CreateHITWithHITTypeAsync(ctx workflow.Context, input *mturk.CreateHITWithHITTypeInput) *MturkCreateHITWithHITTypeFuture

	CreateQualificationType(ctx workflow.Context, input *mturk.CreateQualificationTypeInput) (*mturk.CreateQualificationTypeOutput, error)
	CreateQualificationTypeAsync(ctx workflow.Context, input *mturk.CreateQualificationTypeInput) *MturkCreateQualificationTypeFuture

	CreateWorkerBlock(ctx workflow.Context, input *mturk.CreateWorkerBlockInput) (*mturk.CreateWorkerBlockOutput, error)
	CreateWorkerBlockAsync(ctx workflow.Context, input *mturk.CreateWorkerBlockInput) *MturkCreateWorkerBlockFuture

	DeleteHIT(ctx workflow.Context, input *mturk.DeleteHITInput) (*mturk.DeleteHITOutput, error)
	DeleteHITAsync(ctx workflow.Context, input *mturk.DeleteHITInput) *MturkDeleteHITFuture

	DeleteQualificationType(ctx workflow.Context, input *mturk.DeleteQualificationTypeInput) (*mturk.DeleteQualificationTypeOutput, error)
	DeleteQualificationTypeAsync(ctx workflow.Context, input *mturk.DeleteQualificationTypeInput) *MturkDeleteQualificationTypeFuture

	DeleteWorkerBlock(ctx workflow.Context, input *mturk.DeleteWorkerBlockInput) (*mturk.DeleteWorkerBlockOutput, error)
	DeleteWorkerBlockAsync(ctx workflow.Context, input *mturk.DeleteWorkerBlockInput) *MturkDeleteWorkerBlockFuture

	DisassociateQualificationFromWorker(ctx workflow.Context, input *mturk.DisassociateQualificationFromWorkerInput) (*mturk.DisassociateQualificationFromWorkerOutput, error)
	DisassociateQualificationFromWorkerAsync(ctx workflow.Context, input *mturk.DisassociateQualificationFromWorkerInput) *MturkDisassociateQualificationFromWorkerFuture

	GetAccountBalance(ctx workflow.Context, input *mturk.GetAccountBalanceInput) (*mturk.GetAccountBalanceOutput, error)
	GetAccountBalanceAsync(ctx workflow.Context, input *mturk.GetAccountBalanceInput) *MturkGetAccountBalanceFuture

	GetAssignment(ctx workflow.Context, input *mturk.GetAssignmentInput) (*mturk.GetAssignmentOutput, error)
	GetAssignmentAsync(ctx workflow.Context, input *mturk.GetAssignmentInput) *MturkGetAssignmentFuture

	GetFileUploadURL(ctx workflow.Context, input *mturk.GetFileUploadURLInput) (*mturk.GetFileUploadURLOutput, error)
	GetFileUploadURLAsync(ctx workflow.Context, input *mturk.GetFileUploadURLInput) *MturkGetFileUploadURLFuture

	GetHIT(ctx workflow.Context, input *mturk.GetHITInput) (*mturk.GetHITOutput, error)
	GetHITAsync(ctx workflow.Context, input *mturk.GetHITInput) *MturkGetHITFuture

	GetQualificationScore(ctx workflow.Context, input *mturk.GetQualificationScoreInput) (*mturk.GetQualificationScoreOutput, error)
	GetQualificationScoreAsync(ctx workflow.Context, input *mturk.GetQualificationScoreInput) *MturkGetQualificationScoreFuture

	GetQualificationType(ctx workflow.Context, input *mturk.GetQualificationTypeInput) (*mturk.GetQualificationTypeOutput, error)
	GetQualificationTypeAsync(ctx workflow.Context, input *mturk.GetQualificationTypeInput) *MturkGetQualificationTypeFuture

	ListAssignmentsForHIT(ctx workflow.Context, input *mturk.ListAssignmentsForHITInput) (*mturk.ListAssignmentsForHITOutput, error)
	ListAssignmentsForHITAsync(ctx workflow.Context, input *mturk.ListAssignmentsForHITInput) *MturkListAssignmentsForHITFuture

	ListBonusPayments(ctx workflow.Context, input *mturk.ListBonusPaymentsInput) (*mturk.ListBonusPaymentsOutput, error)
	ListBonusPaymentsAsync(ctx workflow.Context, input *mturk.ListBonusPaymentsInput) *MturkListBonusPaymentsFuture

	ListHITs(ctx workflow.Context, input *mturk.ListHITsInput) (*mturk.ListHITsOutput, error)
	ListHITsAsync(ctx workflow.Context, input *mturk.ListHITsInput) *MturkListHITsFuture

	ListHITsForQualificationType(ctx workflow.Context, input *mturk.ListHITsForQualificationTypeInput) (*mturk.ListHITsForQualificationTypeOutput, error)
	ListHITsForQualificationTypeAsync(ctx workflow.Context, input *mturk.ListHITsForQualificationTypeInput) *MturkListHITsForQualificationTypeFuture

	ListQualificationRequests(ctx workflow.Context, input *mturk.ListQualificationRequestsInput) (*mturk.ListQualificationRequestsOutput, error)
	ListQualificationRequestsAsync(ctx workflow.Context, input *mturk.ListQualificationRequestsInput) *MturkListQualificationRequestsFuture

	ListQualificationTypes(ctx workflow.Context, input *mturk.ListQualificationTypesInput) (*mturk.ListQualificationTypesOutput, error)
	ListQualificationTypesAsync(ctx workflow.Context, input *mturk.ListQualificationTypesInput) *MturkListQualificationTypesFuture

	ListReviewPolicyResultsForHIT(ctx workflow.Context, input *mturk.ListReviewPolicyResultsForHITInput) (*mturk.ListReviewPolicyResultsForHITOutput, error)
	ListReviewPolicyResultsForHITAsync(ctx workflow.Context, input *mturk.ListReviewPolicyResultsForHITInput) *MturkListReviewPolicyResultsForHITFuture

	ListReviewableHITs(ctx workflow.Context, input *mturk.ListReviewableHITsInput) (*mturk.ListReviewableHITsOutput, error)
	ListReviewableHITsAsync(ctx workflow.Context, input *mturk.ListReviewableHITsInput) *MturkListReviewableHITsFuture

	ListWorkerBlocks(ctx workflow.Context, input *mturk.ListWorkerBlocksInput) (*mturk.ListWorkerBlocksOutput, error)
	ListWorkerBlocksAsync(ctx workflow.Context, input *mturk.ListWorkerBlocksInput) *MturkListWorkerBlocksFuture

	ListWorkersWithQualificationType(ctx workflow.Context, input *mturk.ListWorkersWithQualificationTypeInput) (*mturk.ListWorkersWithQualificationTypeOutput, error)
	ListWorkersWithQualificationTypeAsync(ctx workflow.Context, input *mturk.ListWorkersWithQualificationTypeInput) *MturkListWorkersWithQualificationTypeFuture

	NotifyWorkers(ctx workflow.Context, input *mturk.NotifyWorkersInput) (*mturk.NotifyWorkersOutput, error)
	NotifyWorkersAsync(ctx workflow.Context, input *mturk.NotifyWorkersInput) *MturkNotifyWorkersFuture

	RejectAssignment(ctx workflow.Context, input *mturk.RejectAssignmentInput) (*mturk.RejectAssignmentOutput, error)
	RejectAssignmentAsync(ctx workflow.Context, input *mturk.RejectAssignmentInput) *MturkRejectAssignmentFuture

	SendBonus(ctx workflow.Context, input *mturk.SendBonusInput) (*mturk.SendBonusOutput, error)
	SendBonusAsync(ctx workflow.Context, input *mturk.SendBonusInput) *MturkSendBonusFuture

	SendTestEventNotification(ctx workflow.Context, input *mturk.SendTestEventNotificationInput) (*mturk.SendTestEventNotificationOutput, error)
	SendTestEventNotificationAsync(ctx workflow.Context, input *mturk.SendTestEventNotificationInput) *MturkSendTestEventNotificationFuture

	UpdateExpirationForHIT(ctx workflow.Context, input *mturk.UpdateExpirationForHITInput) (*mturk.UpdateExpirationForHITOutput, error)
	UpdateExpirationForHITAsync(ctx workflow.Context, input *mturk.UpdateExpirationForHITInput) *MturkUpdateExpirationForHITFuture

	UpdateHITReviewStatus(ctx workflow.Context, input *mturk.UpdateHITReviewStatusInput) (*mturk.UpdateHITReviewStatusOutput, error)
	UpdateHITReviewStatusAsync(ctx workflow.Context, input *mturk.UpdateHITReviewStatusInput) *MturkUpdateHITReviewStatusFuture

	UpdateHITTypeOfHIT(ctx workflow.Context, input *mturk.UpdateHITTypeOfHITInput) (*mturk.UpdateHITTypeOfHITOutput, error)
	UpdateHITTypeOfHITAsync(ctx workflow.Context, input *mturk.UpdateHITTypeOfHITInput) *MturkUpdateHITTypeOfHITFuture

	UpdateNotificationSettings(ctx workflow.Context, input *mturk.UpdateNotificationSettingsInput) (*mturk.UpdateNotificationSettingsOutput, error)
	UpdateNotificationSettingsAsync(ctx workflow.Context, input *mturk.UpdateNotificationSettingsInput) *MturkUpdateNotificationSettingsFuture

	UpdateQualificationType(ctx workflow.Context, input *mturk.UpdateQualificationTypeInput) (*mturk.UpdateQualificationTypeOutput, error)
	UpdateQualificationTypeAsync(ctx workflow.Context, input *mturk.UpdateQualificationTypeInput) *MturkUpdateQualificationTypeFuture
}

type MTurkStub struct{}

func NewMTurkStub() MTurkClient {
	return &MTurkStub{}
}

type MturkApproveAssignmentFuture struct {
	Future workflow.Future
}

func (r *MturkApproveAssignmentFuture) Get(ctx workflow.Context) (*mturk.ApproveAssignmentOutput, error) {
	var output mturk.ApproveAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkAssociateQualificationWithWorkerFuture struct {
	Future workflow.Future
}

func (r *MturkAssociateQualificationWithWorkerFuture) Get(ctx workflow.Context) (*mturk.AssociateQualificationWithWorkerOutput, error) {
	var output mturk.AssociateQualificationWithWorkerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkCreateAdditionalAssignmentsForHITFuture struct {
	Future workflow.Future
}

func (r *MturkCreateAdditionalAssignmentsForHITFuture) Get(ctx workflow.Context) (*mturk.CreateAdditionalAssignmentsForHITOutput, error) {
	var output mturk.CreateAdditionalAssignmentsForHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkCreateHITFuture struct {
	Future workflow.Future
}

func (r *MturkCreateHITFuture) Get(ctx workflow.Context) (*mturk.CreateHITOutput, error) {
	var output mturk.CreateHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkCreateHITTypeFuture struct {
	Future workflow.Future
}

func (r *MturkCreateHITTypeFuture) Get(ctx workflow.Context) (*mturk.CreateHITTypeOutput, error) {
	var output mturk.CreateHITTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkCreateHITWithHITTypeFuture struct {
	Future workflow.Future
}

func (r *MturkCreateHITWithHITTypeFuture) Get(ctx workflow.Context) (*mturk.CreateHITWithHITTypeOutput, error) {
	var output mturk.CreateHITWithHITTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkCreateQualificationTypeFuture struct {
	Future workflow.Future
}

func (r *MturkCreateQualificationTypeFuture) Get(ctx workflow.Context) (*mturk.CreateQualificationTypeOutput, error) {
	var output mturk.CreateQualificationTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkCreateWorkerBlockFuture struct {
	Future workflow.Future
}

func (r *MturkCreateWorkerBlockFuture) Get(ctx workflow.Context) (*mturk.CreateWorkerBlockOutput, error) {
	var output mturk.CreateWorkerBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkDeleteHITFuture struct {
	Future workflow.Future
}

func (r *MturkDeleteHITFuture) Get(ctx workflow.Context) (*mturk.DeleteHITOutput, error) {
	var output mturk.DeleteHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkDeleteQualificationTypeFuture struct {
	Future workflow.Future
}

func (r *MturkDeleteQualificationTypeFuture) Get(ctx workflow.Context) (*mturk.DeleteQualificationTypeOutput, error) {
	var output mturk.DeleteQualificationTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkDeleteWorkerBlockFuture struct {
	Future workflow.Future
}

func (r *MturkDeleteWorkerBlockFuture) Get(ctx workflow.Context) (*mturk.DeleteWorkerBlockOutput, error) {
	var output mturk.DeleteWorkerBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkDisassociateQualificationFromWorkerFuture struct {
	Future workflow.Future
}

func (r *MturkDisassociateQualificationFromWorkerFuture) Get(ctx workflow.Context) (*mturk.DisassociateQualificationFromWorkerOutput, error) {
	var output mturk.DisassociateQualificationFromWorkerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkGetAccountBalanceFuture struct {
	Future workflow.Future
}

func (r *MturkGetAccountBalanceFuture) Get(ctx workflow.Context) (*mturk.GetAccountBalanceOutput, error) {
	var output mturk.GetAccountBalanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkGetAssignmentFuture struct {
	Future workflow.Future
}

func (r *MturkGetAssignmentFuture) Get(ctx workflow.Context) (*mturk.GetAssignmentOutput, error) {
	var output mturk.GetAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkGetFileUploadURLFuture struct {
	Future workflow.Future
}

func (r *MturkGetFileUploadURLFuture) Get(ctx workflow.Context) (*mturk.GetFileUploadURLOutput, error) {
	var output mturk.GetFileUploadURLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkGetHITFuture struct {
	Future workflow.Future
}

func (r *MturkGetHITFuture) Get(ctx workflow.Context) (*mturk.GetHITOutput, error) {
	var output mturk.GetHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkGetQualificationScoreFuture struct {
	Future workflow.Future
}

func (r *MturkGetQualificationScoreFuture) Get(ctx workflow.Context) (*mturk.GetQualificationScoreOutput, error) {
	var output mturk.GetQualificationScoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkGetQualificationTypeFuture struct {
	Future workflow.Future
}

func (r *MturkGetQualificationTypeFuture) Get(ctx workflow.Context) (*mturk.GetQualificationTypeOutput, error) {
	var output mturk.GetQualificationTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkListAssignmentsForHITFuture struct {
	Future workflow.Future
}

func (r *MturkListAssignmentsForHITFuture) Get(ctx workflow.Context) (*mturk.ListAssignmentsForHITOutput, error) {
	var output mturk.ListAssignmentsForHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkListBonusPaymentsFuture struct {
	Future workflow.Future
}

func (r *MturkListBonusPaymentsFuture) Get(ctx workflow.Context) (*mturk.ListBonusPaymentsOutput, error) {
	var output mturk.ListBonusPaymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkListHITsFuture struct {
	Future workflow.Future
}

func (r *MturkListHITsFuture) Get(ctx workflow.Context) (*mturk.ListHITsOutput, error) {
	var output mturk.ListHITsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkListHITsForQualificationTypeFuture struct {
	Future workflow.Future
}

func (r *MturkListHITsForQualificationTypeFuture) Get(ctx workflow.Context) (*mturk.ListHITsForQualificationTypeOutput, error) {
	var output mturk.ListHITsForQualificationTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkListQualificationRequestsFuture struct {
	Future workflow.Future
}

func (r *MturkListQualificationRequestsFuture) Get(ctx workflow.Context) (*mturk.ListQualificationRequestsOutput, error) {
	var output mturk.ListQualificationRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkListQualificationTypesFuture struct {
	Future workflow.Future
}

func (r *MturkListQualificationTypesFuture) Get(ctx workflow.Context) (*mturk.ListQualificationTypesOutput, error) {
	var output mturk.ListQualificationTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkListReviewPolicyResultsForHITFuture struct {
	Future workflow.Future
}

func (r *MturkListReviewPolicyResultsForHITFuture) Get(ctx workflow.Context) (*mturk.ListReviewPolicyResultsForHITOutput, error) {
	var output mturk.ListReviewPolicyResultsForHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkListReviewableHITsFuture struct {
	Future workflow.Future
}

func (r *MturkListReviewableHITsFuture) Get(ctx workflow.Context) (*mturk.ListReviewableHITsOutput, error) {
	var output mturk.ListReviewableHITsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkListWorkerBlocksFuture struct {
	Future workflow.Future
}

func (r *MturkListWorkerBlocksFuture) Get(ctx workflow.Context) (*mturk.ListWorkerBlocksOutput, error) {
	var output mturk.ListWorkerBlocksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkListWorkersWithQualificationTypeFuture struct {
	Future workflow.Future
}

func (r *MturkListWorkersWithQualificationTypeFuture) Get(ctx workflow.Context) (*mturk.ListWorkersWithQualificationTypeOutput, error) {
	var output mturk.ListWorkersWithQualificationTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkNotifyWorkersFuture struct {
	Future workflow.Future
}

func (r *MturkNotifyWorkersFuture) Get(ctx workflow.Context) (*mturk.NotifyWorkersOutput, error) {
	var output mturk.NotifyWorkersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkRejectAssignmentFuture struct {
	Future workflow.Future
}

func (r *MturkRejectAssignmentFuture) Get(ctx workflow.Context) (*mturk.RejectAssignmentOutput, error) {
	var output mturk.RejectAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkSendBonusFuture struct {
	Future workflow.Future
}

func (r *MturkSendBonusFuture) Get(ctx workflow.Context) (*mturk.SendBonusOutput, error) {
	var output mturk.SendBonusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkSendTestEventNotificationFuture struct {
	Future workflow.Future
}

func (r *MturkSendTestEventNotificationFuture) Get(ctx workflow.Context) (*mturk.SendTestEventNotificationOutput, error) {
	var output mturk.SendTestEventNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkUpdateExpirationForHITFuture struct {
	Future workflow.Future
}

func (r *MturkUpdateExpirationForHITFuture) Get(ctx workflow.Context) (*mturk.UpdateExpirationForHITOutput, error) {
	var output mturk.UpdateExpirationForHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkUpdateHITReviewStatusFuture struct {
	Future workflow.Future
}

func (r *MturkUpdateHITReviewStatusFuture) Get(ctx workflow.Context) (*mturk.UpdateHITReviewStatusOutput, error) {
	var output mturk.UpdateHITReviewStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkUpdateHITTypeOfHITFuture struct {
	Future workflow.Future
}

func (r *MturkUpdateHITTypeOfHITFuture) Get(ctx workflow.Context) (*mturk.UpdateHITTypeOfHITOutput, error) {
	var output mturk.UpdateHITTypeOfHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkUpdateNotificationSettingsFuture struct {
	Future workflow.Future
}

func (r *MturkUpdateNotificationSettingsFuture) Get(ctx workflow.Context) (*mturk.UpdateNotificationSettingsOutput, error) {
	var output mturk.UpdateNotificationSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MturkUpdateQualificationTypeFuture struct {
	Future workflow.Future
}

func (r *MturkUpdateQualificationTypeFuture) Get(ctx workflow.Context) (*mturk.UpdateQualificationTypeOutput, error) {
	var output mturk.UpdateQualificationTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ApproveAssignment(ctx workflow.Context, input *mturk.ApproveAssignmentInput) (*mturk.ApproveAssignmentOutput, error) {
	var output mturk.ApproveAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ApproveAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ApproveAssignmentAsync(ctx workflow.Context, input *mturk.ApproveAssignmentInput) *MturkApproveAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ApproveAssignment", input)
	return &MturkApproveAssignmentFuture{Future: future}
}

func (a *MTurkStub) AssociateQualificationWithWorker(ctx workflow.Context, input *mturk.AssociateQualificationWithWorkerInput) (*mturk.AssociateQualificationWithWorkerOutput, error) {
	var output mturk.AssociateQualificationWithWorkerOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.AssociateQualificationWithWorker", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) AssociateQualificationWithWorkerAsync(ctx workflow.Context, input *mturk.AssociateQualificationWithWorkerInput) *MturkAssociateQualificationWithWorkerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.AssociateQualificationWithWorker", input)
	return &MturkAssociateQualificationWithWorkerFuture{Future: future}
}

func (a *MTurkStub) CreateAdditionalAssignmentsForHIT(ctx workflow.Context, input *mturk.CreateAdditionalAssignmentsForHITInput) (*mturk.CreateAdditionalAssignmentsForHITOutput, error) {
	var output mturk.CreateAdditionalAssignmentsForHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.CreateAdditionalAssignmentsForHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) CreateAdditionalAssignmentsForHITAsync(ctx workflow.Context, input *mturk.CreateAdditionalAssignmentsForHITInput) *MturkCreateAdditionalAssignmentsForHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.CreateAdditionalAssignmentsForHIT", input)
	return &MturkCreateAdditionalAssignmentsForHITFuture{Future: future}
}

func (a *MTurkStub) CreateHIT(ctx workflow.Context, input *mturk.CreateHITInput) (*mturk.CreateHITOutput, error) {
	var output mturk.CreateHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.CreateHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) CreateHITAsync(ctx workflow.Context, input *mturk.CreateHITInput) *MturkCreateHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.CreateHIT", input)
	return &MturkCreateHITFuture{Future: future}
}

func (a *MTurkStub) CreateHITType(ctx workflow.Context, input *mturk.CreateHITTypeInput) (*mturk.CreateHITTypeOutput, error) {
	var output mturk.CreateHITTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.CreateHITType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) CreateHITTypeAsync(ctx workflow.Context, input *mturk.CreateHITTypeInput) *MturkCreateHITTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.CreateHITType", input)
	return &MturkCreateHITTypeFuture{Future: future}
}

func (a *MTurkStub) CreateHITWithHITType(ctx workflow.Context, input *mturk.CreateHITWithHITTypeInput) (*mturk.CreateHITWithHITTypeOutput, error) {
	var output mturk.CreateHITWithHITTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.CreateHITWithHITType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) CreateHITWithHITTypeAsync(ctx workflow.Context, input *mturk.CreateHITWithHITTypeInput) *MturkCreateHITWithHITTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.CreateHITWithHITType", input)
	return &MturkCreateHITWithHITTypeFuture{Future: future}
}

func (a *MTurkStub) CreateQualificationType(ctx workflow.Context, input *mturk.CreateQualificationTypeInput) (*mturk.CreateQualificationTypeOutput, error) {
	var output mturk.CreateQualificationTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.CreateQualificationType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) CreateQualificationTypeAsync(ctx workflow.Context, input *mturk.CreateQualificationTypeInput) *MturkCreateQualificationTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.CreateQualificationType", input)
	return &MturkCreateQualificationTypeFuture{Future: future}
}

func (a *MTurkStub) CreateWorkerBlock(ctx workflow.Context, input *mturk.CreateWorkerBlockInput) (*mturk.CreateWorkerBlockOutput, error) {
	var output mturk.CreateWorkerBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.CreateWorkerBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) CreateWorkerBlockAsync(ctx workflow.Context, input *mturk.CreateWorkerBlockInput) *MturkCreateWorkerBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.CreateWorkerBlock", input)
	return &MturkCreateWorkerBlockFuture{Future: future}
}

func (a *MTurkStub) DeleteHIT(ctx workflow.Context, input *mturk.DeleteHITInput) (*mturk.DeleteHITOutput, error) {
	var output mturk.DeleteHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.DeleteHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) DeleteHITAsync(ctx workflow.Context, input *mturk.DeleteHITInput) *MturkDeleteHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.DeleteHIT", input)
	return &MturkDeleteHITFuture{Future: future}
}

func (a *MTurkStub) DeleteQualificationType(ctx workflow.Context, input *mturk.DeleteQualificationTypeInput) (*mturk.DeleteQualificationTypeOutput, error) {
	var output mturk.DeleteQualificationTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.DeleteQualificationType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) DeleteQualificationTypeAsync(ctx workflow.Context, input *mturk.DeleteQualificationTypeInput) *MturkDeleteQualificationTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.DeleteQualificationType", input)
	return &MturkDeleteQualificationTypeFuture{Future: future}
}

func (a *MTurkStub) DeleteWorkerBlock(ctx workflow.Context, input *mturk.DeleteWorkerBlockInput) (*mturk.DeleteWorkerBlockOutput, error) {
	var output mturk.DeleteWorkerBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.DeleteWorkerBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) DeleteWorkerBlockAsync(ctx workflow.Context, input *mturk.DeleteWorkerBlockInput) *MturkDeleteWorkerBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.DeleteWorkerBlock", input)
	return &MturkDeleteWorkerBlockFuture{Future: future}
}

func (a *MTurkStub) DisassociateQualificationFromWorker(ctx workflow.Context, input *mturk.DisassociateQualificationFromWorkerInput) (*mturk.DisassociateQualificationFromWorkerOutput, error) {
	var output mturk.DisassociateQualificationFromWorkerOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.DisassociateQualificationFromWorker", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) DisassociateQualificationFromWorkerAsync(ctx workflow.Context, input *mturk.DisassociateQualificationFromWorkerInput) *MturkDisassociateQualificationFromWorkerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.DisassociateQualificationFromWorker", input)
	return &MturkDisassociateQualificationFromWorkerFuture{Future: future}
}

func (a *MTurkStub) GetAccountBalance(ctx workflow.Context, input *mturk.GetAccountBalanceInput) (*mturk.GetAccountBalanceOutput, error) {
	var output mturk.GetAccountBalanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.GetAccountBalance", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) GetAccountBalanceAsync(ctx workflow.Context, input *mturk.GetAccountBalanceInput) *MturkGetAccountBalanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.GetAccountBalance", input)
	return &MturkGetAccountBalanceFuture{Future: future}
}

func (a *MTurkStub) GetAssignment(ctx workflow.Context, input *mturk.GetAssignmentInput) (*mturk.GetAssignmentOutput, error) {
	var output mturk.GetAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.GetAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) GetAssignmentAsync(ctx workflow.Context, input *mturk.GetAssignmentInput) *MturkGetAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.GetAssignment", input)
	return &MturkGetAssignmentFuture{Future: future}
}

func (a *MTurkStub) GetFileUploadURL(ctx workflow.Context, input *mturk.GetFileUploadURLInput) (*mturk.GetFileUploadURLOutput, error) {
	var output mturk.GetFileUploadURLOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.GetFileUploadURL", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) GetFileUploadURLAsync(ctx workflow.Context, input *mturk.GetFileUploadURLInput) *MturkGetFileUploadURLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.GetFileUploadURL", input)
	return &MturkGetFileUploadURLFuture{Future: future}
}

func (a *MTurkStub) GetHIT(ctx workflow.Context, input *mturk.GetHITInput) (*mturk.GetHITOutput, error) {
	var output mturk.GetHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.GetHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) GetHITAsync(ctx workflow.Context, input *mturk.GetHITInput) *MturkGetHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.GetHIT", input)
	return &MturkGetHITFuture{Future: future}
}

func (a *MTurkStub) GetQualificationScore(ctx workflow.Context, input *mturk.GetQualificationScoreInput) (*mturk.GetQualificationScoreOutput, error) {
	var output mturk.GetQualificationScoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.GetQualificationScore", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) GetQualificationScoreAsync(ctx workflow.Context, input *mturk.GetQualificationScoreInput) *MturkGetQualificationScoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.GetQualificationScore", input)
	return &MturkGetQualificationScoreFuture{Future: future}
}

func (a *MTurkStub) GetQualificationType(ctx workflow.Context, input *mturk.GetQualificationTypeInput) (*mturk.GetQualificationTypeOutput, error) {
	var output mturk.GetQualificationTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.GetQualificationType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) GetQualificationTypeAsync(ctx workflow.Context, input *mturk.GetQualificationTypeInput) *MturkGetQualificationTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.GetQualificationType", input)
	return &MturkGetQualificationTypeFuture{Future: future}
}

func (a *MTurkStub) ListAssignmentsForHIT(ctx workflow.Context, input *mturk.ListAssignmentsForHITInput) (*mturk.ListAssignmentsForHITOutput, error) {
	var output mturk.ListAssignmentsForHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListAssignmentsForHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListAssignmentsForHITAsync(ctx workflow.Context, input *mturk.ListAssignmentsForHITInput) *MturkListAssignmentsForHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListAssignmentsForHIT", input)
	return &MturkListAssignmentsForHITFuture{Future: future}
}

func (a *MTurkStub) ListBonusPayments(ctx workflow.Context, input *mturk.ListBonusPaymentsInput) (*mturk.ListBonusPaymentsOutput, error) {
	var output mturk.ListBonusPaymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListBonusPayments", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListBonusPaymentsAsync(ctx workflow.Context, input *mturk.ListBonusPaymentsInput) *MturkListBonusPaymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListBonusPayments", input)
	return &MturkListBonusPaymentsFuture{Future: future}
}

func (a *MTurkStub) ListHITs(ctx workflow.Context, input *mturk.ListHITsInput) (*mturk.ListHITsOutput, error) {
	var output mturk.ListHITsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListHITs", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListHITsAsync(ctx workflow.Context, input *mturk.ListHITsInput) *MturkListHITsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListHITs", input)
	return &MturkListHITsFuture{Future: future}
}

func (a *MTurkStub) ListHITsForQualificationType(ctx workflow.Context, input *mturk.ListHITsForQualificationTypeInput) (*mturk.ListHITsForQualificationTypeOutput, error) {
	var output mturk.ListHITsForQualificationTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListHITsForQualificationType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListHITsForQualificationTypeAsync(ctx workflow.Context, input *mturk.ListHITsForQualificationTypeInput) *MturkListHITsForQualificationTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListHITsForQualificationType", input)
	return &MturkListHITsForQualificationTypeFuture{Future: future}
}

func (a *MTurkStub) ListQualificationRequests(ctx workflow.Context, input *mturk.ListQualificationRequestsInput) (*mturk.ListQualificationRequestsOutput, error) {
	var output mturk.ListQualificationRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListQualificationRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListQualificationRequestsAsync(ctx workflow.Context, input *mturk.ListQualificationRequestsInput) *MturkListQualificationRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListQualificationRequests", input)
	return &MturkListQualificationRequestsFuture{Future: future}
}

func (a *MTurkStub) ListQualificationTypes(ctx workflow.Context, input *mturk.ListQualificationTypesInput) (*mturk.ListQualificationTypesOutput, error) {
	var output mturk.ListQualificationTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListQualificationTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListQualificationTypesAsync(ctx workflow.Context, input *mturk.ListQualificationTypesInput) *MturkListQualificationTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListQualificationTypes", input)
	return &MturkListQualificationTypesFuture{Future: future}
}

func (a *MTurkStub) ListReviewPolicyResultsForHIT(ctx workflow.Context, input *mturk.ListReviewPolicyResultsForHITInput) (*mturk.ListReviewPolicyResultsForHITOutput, error) {
	var output mturk.ListReviewPolicyResultsForHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListReviewPolicyResultsForHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListReviewPolicyResultsForHITAsync(ctx workflow.Context, input *mturk.ListReviewPolicyResultsForHITInput) *MturkListReviewPolicyResultsForHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListReviewPolicyResultsForHIT", input)
	return &MturkListReviewPolicyResultsForHITFuture{Future: future}
}

func (a *MTurkStub) ListReviewableHITs(ctx workflow.Context, input *mturk.ListReviewableHITsInput) (*mturk.ListReviewableHITsOutput, error) {
	var output mturk.ListReviewableHITsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListReviewableHITs", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListReviewableHITsAsync(ctx workflow.Context, input *mturk.ListReviewableHITsInput) *MturkListReviewableHITsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListReviewableHITs", input)
	return &MturkListReviewableHITsFuture{Future: future}
}

func (a *MTurkStub) ListWorkerBlocks(ctx workflow.Context, input *mturk.ListWorkerBlocksInput) (*mturk.ListWorkerBlocksOutput, error) {
	var output mturk.ListWorkerBlocksOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListWorkerBlocks", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListWorkerBlocksAsync(ctx workflow.Context, input *mturk.ListWorkerBlocksInput) *MturkListWorkerBlocksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListWorkerBlocks", input)
	return &MturkListWorkerBlocksFuture{Future: future}
}

func (a *MTurkStub) ListWorkersWithQualificationType(ctx workflow.Context, input *mturk.ListWorkersWithQualificationTypeInput) (*mturk.ListWorkersWithQualificationTypeOutput, error) {
	var output mturk.ListWorkersWithQualificationTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListWorkersWithQualificationType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListWorkersWithQualificationTypeAsync(ctx workflow.Context, input *mturk.ListWorkersWithQualificationTypeInput) *MturkListWorkersWithQualificationTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListWorkersWithQualificationType", input)
	return &MturkListWorkersWithQualificationTypeFuture{Future: future}
}

func (a *MTurkStub) NotifyWorkers(ctx workflow.Context, input *mturk.NotifyWorkersInput) (*mturk.NotifyWorkersOutput, error) {
	var output mturk.NotifyWorkersOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.NotifyWorkers", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) NotifyWorkersAsync(ctx workflow.Context, input *mturk.NotifyWorkersInput) *MturkNotifyWorkersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.NotifyWorkers", input)
	return &MturkNotifyWorkersFuture{Future: future}
}

func (a *MTurkStub) RejectAssignment(ctx workflow.Context, input *mturk.RejectAssignmentInput) (*mturk.RejectAssignmentOutput, error) {
	var output mturk.RejectAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.RejectAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) RejectAssignmentAsync(ctx workflow.Context, input *mturk.RejectAssignmentInput) *MturkRejectAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.RejectAssignment", input)
	return &MturkRejectAssignmentFuture{Future: future}
}

func (a *MTurkStub) SendBonus(ctx workflow.Context, input *mturk.SendBonusInput) (*mturk.SendBonusOutput, error) {
	var output mturk.SendBonusOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.SendBonus", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) SendBonusAsync(ctx workflow.Context, input *mturk.SendBonusInput) *MturkSendBonusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.SendBonus", input)
	return &MturkSendBonusFuture{Future: future}
}

func (a *MTurkStub) SendTestEventNotification(ctx workflow.Context, input *mturk.SendTestEventNotificationInput) (*mturk.SendTestEventNotificationOutput, error) {
	var output mturk.SendTestEventNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.SendTestEventNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) SendTestEventNotificationAsync(ctx workflow.Context, input *mturk.SendTestEventNotificationInput) *MturkSendTestEventNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.SendTestEventNotification", input)
	return &MturkSendTestEventNotificationFuture{Future: future}
}

func (a *MTurkStub) UpdateExpirationForHIT(ctx workflow.Context, input *mturk.UpdateExpirationForHITInput) (*mturk.UpdateExpirationForHITOutput, error) {
	var output mturk.UpdateExpirationForHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateExpirationForHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) UpdateExpirationForHITAsync(ctx workflow.Context, input *mturk.UpdateExpirationForHITInput) *MturkUpdateExpirationForHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateExpirationForHIT", input)
	return &MturkUpdateExpirationForHITFuture{Future: future}
}

func (a *MTurkStub) UpdateHITReviewStatus(ctx workflow.Context, input *mturk.UpdateHITReviewStatusInput) (*mturk.UpdateHITReviewStatusOutput, error) {
	var output mturk.UpdateHITReviewStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateHITReviewStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) UpdateHITReviewStatusAsync(ctx workflow.Context, input *mturk.UpdateHITReviewStatusInput) *MturkUpdateHITReviewStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateHITReviewStatus", input)
	return &MturkUpdateHITReviewStatusFuture{Future: future}
}

func (a *MTurkStub) UpdateHITTypeOfHIT(ctx workflow.Context, input *mturk.UpdateHITTypeOfHITInput) (*mturk.UpdateHITTypeOfHITOutput, error) {
	var output mturk.UpdateHITTypeOfHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateHITTypeOfHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) UpdateHITTypeOfHITAsync(ctx workflow.Context, input *mturk.UpdateHITTypeOfHITInput) *MturkUpdateHITTypeOfHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateHITTypeOfHIT", input)
	return &MturkUpdateHITTypeOfHITFuture{Future: future}
}

func (a *MTurkStub) UpdateNotificationSettings(ctx workflow.Context, input *mturk.UpdateNotificationSettingsInput) (*mturk.UpdateNotificationSettingsOutput, error) {
	var output mturk.UpdateNotificationSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateNotificationSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) UpdateNotificationSettingsAsync(ctx workflow.Context, input *mturk.UpdateNotificationSettingsInput) *MturkUpdateNotificationSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateNotificationSettings", input)
	return &MturkUpdateNotificationSettingsFuture{Future: future}
}

func (a *MTurkStub) UpdateQualificationType(ctx workflow.Context, input *mturk.UpdateQualificationTypeInput) (*mturk.UpdateQualificationTypeOutput, error) {
	var output mturk.UpdateQualificationTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateQualificationType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) UpdateQualificationTypeAsync(ctx workflow.Context, input *mturk.UpdateQualificationTypeInput) *MturkUpdateQualificationTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateQualificationType", input)
	return &MturkUpdateQualificationTypeFuture{Future: future}
}
