// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/mturk"
	"go.temporal.io/sdk/workflow"
)

type MTurkClient interface {
	ApproveAssignment(ctx workflow.Context, input *mturk.ApproveAssignmentInput) (*mturk.ApproveAssignmentOutput, error)
	ApproveAssignmentAsync(ctx workflow.Context, input *mturk.ApproveAssignmentInput) *MTurkApproveAssignmentFuture

	AssociateQualificationWithWorker(ctx workflow.Context, input *mturk.AssociateQualificationWithWorkerInput) (*mturk.AssociateQualificationWithWorkerOutput, error)
	AssociateQualificationWithWorkerAsync(ctx workflow.Context, input *mturk.AssociateQualificationWithWorkerInput) *MTurkAssociateQualificationWithWorkerFuture

	CreateAdditionalAssignmentsForHIT(ctx workflow.Context, input *mturk.CreateAdditionalAssignmentsForHITInput) (*mturk.CreateAdditionalAssignmentsForHITOutput, error)
	CreateAdditionalAssignmentsForHITAsync(ctx workflow.Context, input *mturk.CreateAdditionalAssignmentsForHITInput) *MTurkCreateAdditionalAssignmentsForHITFuture

	CreateHIT(ctx workflow.Context, input *mturk.CreateHITInput) (*mturk.CreateHITOutput, error)
	CreateHITAsync(ctx workflow.Context, input *mturk.CreateHITInput) *MTurkCreateHITFuture

	CreateHITType(ctx workflow.Context, input *mturk.CreateHITTypeInput) (*mturk.CreateHITTypeOutput, error)
	CreateHITTypeAsync(ctx workflow.Context, input *mturk.CreateHITTypeInput) *MTurkCreateHITTypeFuture

	CreateHITWithHITType(ctx workflow.Context, input *mturk.CreateHITWithHITTypeInput) (*mturk.CreateHITWithHITTypeOutput, error)
	CreateHITWithHITTypeAsync(ctx workflow.Context, input *mturk.CreateHITWithHITTypeInput) *MTurkCreateHITWithHITTypeFuture

	CreateQualificationType(ctx workflow.Context, input *mturk.CreateQualificationTypeInput) (*mturk.CreateQualificationTypeOutput, error)
	CreateQualificationTypeAsync(ctx workflow.Context, input *mturk.CreateQualificationTypeInput) *MTurkCreateQualificationTypeFuture

	CreateWorkerBlock(ctx workflow.Context, input *mturk.CreateWorkerBlockInput) (*mturk.CreateWorkerBlockOutput, error)
	CreateWorkerBlockAsync(ctx workflow.Context, input *mturk.CreateWorkerBlockInput) *MTurkCreateWorkerBlockFuture

	DeleteHIT(ctx workflow.Context, input *mturk.DeleteHITInput) (*mturk.DeleteHITOutput, error)
	DeleteHITAsync(ctx workflow.Context, input *mturk.DeleteHITInput) *MTurkDeleteHITFuture

	DeleteQualificationType(ctx workflow.Context, input *mturk.DeleteQualificationTypeInput) (*mturk.DeleteQualificationTypeOutput, error)
	DeleteQualificationTypeAsync(ctx workflow.Context, input *mturk.DeleteQualificationTypeInput) *MTurkDeleteQualificationTypeFuture

	DeleteWorkerBlock(ctx workflow.Context, input *mturk.DeleteWorkerBlockInput) (*mturk.DeleteWorkerBlockOutput, error)
	DeleteWorkerBlockAsync(ctx workflow.Context, input *mturk.DeleteWorkerBlockInput) *MTurkDeleteWorkerBlockFuture

	DisassociateQualificationFromWorker(ctx workflow.Context, input *mturk.DisassociateQualificationFromWorkerInput) (*mturk.DisassociateQualificationFromWorkerOutput, error)
	DisassociateQualificationFromWorkerAsync(ctx workflow.Context, input *mturk.DisassociateQualificationFromWorkerInput) *MTurkDisassociateQualificationFromWorkerFuture

	GetAccountBalance(ctx workflow.Context, input *mturk.GetAccountBalanceInput) (*mturk.GetAccountBalanceOutput, error)
	GetAccountBalanceAsync(ctx workflow.Context, input *mturk.GetAccountBalanceInput) *MTurkGetAccountBalanceFuture

	GetAssignment(ctx workflow.Context, input *mturk.GetAssignmentInput) (*mturk.GetAssignmentOutput, error)
	GetAssignmentAsync(ctx workflow.Context, input *mturk.GetAssignmentInput) *MTurkGetAssignmentFuture

	GetFileUploadURL(ctx workflow.Context, input *mturk.GetFileUploadURLInput) (*mturk.GetFileUploadURLOutput, error)
	GetFileUploadURLAsync(ctx workflow.Context, input *mturk.GetFileUploadURLInput) *MTurkGetFileUploadURLFuture

	GetHIT(ctx workflow.Context, input *mturk.GetHITInput) (*mturk.GetHITOutput, error)
	GetHITAsync(ctx workflow.Context, input *mturk.GetHITInput) *MTurkGetHITFuture

	GetQualificationScore(ctx workflow.Context, input *mturk.GetQualificationScoreInput) (*mturk.GetQualificationScoreOutput, error)
	GetQualificationScoreAsync(ctx workflow.Context, input *mturk.GetQualificationScoreInput) *MTurkGetQualificationScoreFuture

	GetQualificationType(ctx workflow.Context, input *mturk.GetQualificationTypeInput) (*mturk.GetQualificationTypeOutput, error)
	GetQualificationTypeAsync(ctx workflow.Context, input *mturk.GetQualificationTypeInput) *MTurkGetQualificationTypeFuture

	ListAssignmentsForHIT(ctx workflow.Context, input *mturk.ListAssignmentsForHITInput) (*mturk.ListAssignmentsForHITOutput, error)
	ListAssignmentsForHITAsync(ctx workflow.Context, input *mturk.ListAssignmentsForHITInput) *MTurkListAssignmentsForHITFuture

	ListBonusPayments(ctx workflow.Context, input *mturk.ListBonusPaymentsInput) (*mturk.ListBonusPaymentsOutput, error)
	ListBonusPaymentsAsync(ctx workflow.Context, input *mturk.ListBonusPaymentsInput) *MTurkListBonusPaymentsFuture

	ListHITs(ctx workflow.Context, input *mturk.ListHITsInput) (*mturk.ListHITsOutput, error)
	ListHITsAsync(ctx workflow.Context, input *mturk.ListHITsInput) *MTurkListHITsFuture

	ListHITsForQualificationType(ctx workflow.Context, input *mturk.ListHITsForQualificationTypeInput) (*mturk.ListHITsForQualificationTypeOutput, error)
	ListHITsForQualificationTypeAsync(ctx workflow.Context, input *mturk.ListHITsForQualificationTypeInput) *MTurkListHITsForQualificationTypeFuture

	ListQualificationRequests(ctx workflow.Context, input *mturk.ListQualificationRequestsInput) (*mturk.ListQualificationRequestsOutput, error)
	ListQualificationRequestsAsync(ctx workflow.Context, input *mturk.ListQualificationRequestsInput) *MTurkListQualificationRequestsFuture

	ListQualificationTypes(ctx workflow.Context, input *mturk.ListQualificationTypesInput) (*mturk.ListQualificationTypesOutput, error)
	ListQualificationTypesAsync(ctx workflow.Context, input *mturk.ListQualificationTypesInput) *MTurkListQualificationTypesFuture

	ListReviewPolicyResultsForHIT(ctx workflow.Context, input *mturk.ListReviewPolicyResultsForHITInput) (*mturk.ListReviewPolicyResultsForHITOutput, error)
	ListReviewPolicyResultsForHITAsync(ctx workflow.Context, input *mturk.ListReviewPolicyResultsForHITInput) *MTurkListReviewPolicyResultsForHITFuture

	ListReviewableHITs(ctx workflow.Context, input *mturk.ListReviewableHITsInput) (*mturk.ListReviewableHITsOutput, error)
	ListReviewableHITsAsync(ctx workflow.Context, input *mturk.ListReviewableHITsInput) *MTurkListReviewableHITsFuture

	ListWorkerBlocks(ctx workflow.Context, input *mturk.ListWorkerBlocksInput) (*mturk.ListWorkerBlocksOutput, error)
	ListWorkerBlocksAsync(ctx workflow.Context, input *mturk.ListWorkerBlocksInput) *MTurkListWorkerBlocksFuture

	ListWorkersWithQualificationType(ctx workflow.Context, input *mturk.ListWorkersWithQualificationTypeInput) (*mturk.ListWorkersWithQualificationTypeOutput, error)
	ListWorkersWithQualificationTypeAsync(ctx workflow.Context, input *mturk.ListWorkersWithQualificationTypeInput) *MTurkListWorkersWithQualificationTypeFuture

	NotifyWorkers(ctx workflow.Context, input *mturk.NotifyWorkersInput) (*mturk.NotifyWorkersOutput, error)
	NotifyWorkersAsync(ctx workflow.Context, input *mturk.NotifyWorkersInput) *MTurkNotifyWorkersFuture

	RejectAssignment(ctx workflow.Context, input *mturk.RejectAssignmentInput) (*mturk.RejectAssignmentOutput, error)
	RejectAssignmentAsync(ctx workflow.Context, input *mturk.RejectAssignmentInput) *MTurkRejectAssignmentFuture

	SendBonus(ctx workflow.Context, input *mturk.SendBonusInput) (*mturk.SendBonusOutput, error)
	SendBonusAsync(ctx workflow.Context, input *mturk.SendBonusInput) *MTurkSendBonusFuture

	SendTestEventNotification(ctx workflow.Context, input *mturk.SendTestEventNotificationInput) (*mturk.SendTestEventNotificationOutput, error)
	SendTestEventNotificationAsync(ctx workflow.Context, input *mturk.SendTestEventNotificationInput) *MTurkSendTestEventNotificationFuture

	UpdateExpirationForHIT(ctx workflow.Context, input *mturk.UpdateExpirationForHITInput) (*mturk.UpdateExpirationForHITOutput, error)
	UpdateExpirationForHITAsync(ctx workflow.Context, input *mturk.UpdateExpirationForHITInput) *MTurkUpdateExpirationForHITFuture

	UpdateHITReviewStatus(ctx workflow.Context, input *mturk.UpdateHITReviewStatusInput) (*mturk.UpdateHITReviewStatusOutput, error)
	UpdateHITReviewStatusAsync(ctx workflow.Context, input *mturk.UpdateHITReviewStatusInput) *MTurkUpdateHITReviewStatusFuture

	UpdateHITTypeOfHIT(ctx workflow.Context, input *mturk.UpdateHITTypeOfHITInput) (*mturk.UpdateHITTypeOfHITOutput, error)
	UpdateHITTypeOfHITAsync(ctx workflow.Context, input *mturk.UpdateHITTypeOfHITInput) *MTurkUpdateHITTypeOfHITFuture

	UpdateNotificationSettings(ctx workflow.Context, input *mturk.UpdateNotificationSettingsInput) (*mturk.UpdateNotificationSettingsOutput, error)
	UpdateNotificationSettingsAsync(ctx workflow.Context, input *mturk.UpdateNotificationSettingsInput) *MTurkUpdateNotificationSettingsFuture

	UpdateQualificationType(ctx workflow.Context, input *mturk.UpdateQualificationTypeInput) (*mturk.UpdateQualificationTypeOutput, error)
	UpdateQualificationTypeAsync(ctx workflow.Context, input *mturk.UpdateQualificationTypeInput) *MTurkUpdateQualificationTypeFuture
}

type MTurkStub struct{}

func NewMTurkStub() MTurkClient {
	return &MTurkStub{}
}

type MTurkApproveAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkApproveAssignmentFuture) Get(ctx workflow.Context) (*mturk.ApproveAssignmentOutput, error) {
	var output mturk.ApproveAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkAssociateQualificationWithWorkerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkAssociateQualificationWithWorkerFuture) Get(ctx workflow.Context) (*mturk.AssociateQualificationWithWorkerOutput, error) {
	var output mturk.AssociateQualificationWithWorkerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkCreateAdditionalAssignmentsForHITFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkCreateAdditionalAssignmentsForHITFuture) Get(ctx workflow.Context) (*mturk.CreateAdditionalAssignmentsForHITOutput, error) {
	var output mturk.CreateAdditionalAssignmentsForHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkCreateHITFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkCreateHITFuture) Get(ctx workflow.Context) (*mturk.CreateHITOutput, error) {
	var output mturk.CreateHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkCreateHITTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkCreateHITTypeFuture) Get(ctx workflow.Context) (*mturk.CreateHITTypeOutput, error) {
	var output mturk.CreateHITTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkCreateHITWithHITTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkCreateHITWithHITTypeFuture) Get(ctx workflow.Context) (*mturk.CreateHITWithHITTypeOutput, error) {
	var output mturk.CreateHITWithHITTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkCreateQualificationTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkCreateQualificationTypeFuture) Get(ctx workflow.Context) (*mturk.CreateQualificationTypeOutput, error) {
	var output mturk.CreateQualificationTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkCreateWorkerBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkCreateWorkerBlockFuture) Get(ctx workflow.Context) (*mturk.CreateWorkerBlockOutput, error) {
	var output mturk.CreateWorkerBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkDeleteHITFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkDeleteHITFuture) Get(ctx workflow.Context) (*mturk.DeleteHITOutput, error) {
	var output mturk.DeleteHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkDeleteQualificationTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkDeleteQualificationTypeFuture) Get(ctx workflow.Context) (*mturk.DeleteQualificationTypeOutput, error) {
	var output mturk.DeleteQualificationTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkDeleteWorkerBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkDeleteWorkerBlockFuture) Get(ctx workflow.Context) (*mturk.DeleteWorkerBlockOutput, error) {
	var output mturk.DeleteWorkerBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkDisassociateQualificationFromWorkerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkDisassociateQualificationFromWorkerFuture) Get(ctx workflow.Context) (*mturk.DisassociateQualificationFromWorkerOutput, error) {
	var output mturk.DisassociateQualificationFromWorkerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkGetAccountBalanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkGetAccountBalanceFuture) Get(ctx workflow.Context) (*mturk.GetAccountBalanceOutput, error) {
	var output mturk.GetAccountBalanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkGetAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkGetAssignmentFuture) Get(ctx workflow.Context) (*mturk.GetAssignmentOutput, error) {
	var output mturk.GetAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkGetFileUploadURLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkGetFileUploadURLFuture) Get(ctx workflow.Context) (*mturk.GetFileUploadURLOutput, error) {
	var output mturk.GetFileUploadURLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkGetHITFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkGetHITFuture) Get(ctx workflow.Context) (*mturk.GetHITOutput, error) {
	var output mturk.GetHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkGetQualificationScoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkGetQualificationScoreFuture) Get(ctx workflow.Context) (*mturk.GetQualificationScoreOutput, error) {
	var output mturk.GetQualificationScoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkGetQualificationTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkGetQualificationTypeFuture) Get(ctx workflow.Context) (*mturk.GetQualificationTypeOutput, error) {
	var output mturk.GetQualificationTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkListAssignmentsForHITFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkListAssignmentsForHITFuture) Get(ctx workflow.Context) (*mturk.ListAssignmentsForHITOutput, error) {
	var output mturk.ListAssignmentsForHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkListBonusPaymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkListBonusPaymentsFuture) Get(ctx workflow.Context) (*mturk.ListBonusPaymentsOutput, error) {
	var output mturk.ListBonusPaymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkListHITsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkListHITsFuture) Get(ctx workflow.Context) (*mturk.ListHITsOutput, error) {
	var output mturk.ListHITsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkListHITsForQualificationTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkListHITsForQualificationTypeFuture) Get(ctx workflow.Context) (*mturk.ListHITsForQualificationTypeOutput, error) {
	var output mturk.ListHITsForQualificationTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkListQualificationRequestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkListQualificationRequestsFuture) Get(ctx workflow.Context) (*mturk.ListQualificationRequestsOutput, error) {
	var output mturk.ListQualificationRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkListQualificationTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkListQualificationTypesFuture) Get(ctx workflow.Context) (*mturk.ListQualificationTypesOutput, error) {
	var output mturk.ListQualificationTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkListReviewPolicyResultsForHITFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkListReviewPolicyResultsForHITFuture) Get(ctx workflow.Context) (*mturk.ListReviewPolicyResultsForHITOutput, error) {
	var output mturk.ListReviewPolicyResultsForHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkListReviewableHITsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkListReviewableHITsFuture) Get(ctx workflow.Context) (*mturk.ListReviewableHITsOutput, error) {
	var output mturk.ListReviewableHITsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkListWorkerBlocksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkListWorkerBlocksFuture) Get(ctx workflow.Context) (*mturk.ListWorkerBlocksOutput, error) {
	var output mturk.ListWorkerBlocksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkListWorkersWithQualificationTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkListWorkersWithQualificationTypeFuture) Get(ctx workflow.Context) (*mturk.ListWorkersWithQualificationTypeOutput, error) {
	var output mturk.ListWorkersWithQualificationTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkNotifyWorkersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkNotifyWorkersFuture) Get(ctx workflow.Context) (*mturk.NotifyWorkersOutput, error) {
	var output mturk.NotifyWorkersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkRejectAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkRejectAssignmentFuture) Get(ctx workflow.Context) (*mturk.RejectAssignmentOutput, error) {
	var output mturk.RejectAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkSendBonusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkSendBonusFuture) Get(ctx workflow.Context) (*mturk.SendBonusOutput, error) {
	var output mturk.SendBonusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkSendTestEventNotificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkSendTestEventNotificationFuture) Get(ctx workflow.Context) (*mturk.SendTestEventNotificationOutput, error) {
	var output mturk.SendTestEventNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkUpdateExpirationForHITFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkUpdateExpirationForHITFuture) Get(ctx workflow.Context) (*mturk.UpdateExpirationForHITOutput, error) {
	var output mturk.UpdateExpirationForHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkUpdateHITReviewStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkUpdateHITReviewStatusFuture) Get(ctx workflow.Context) (*mturk.UpdateHITReviewStatusOutput, error) {
	var output mturk.UpdateHITReviewStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkUpdateHITTypeOfHITFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkUpdateHITTypeOfHITFuture) Get(ctx workflow.Context) (*mturk.UpdateHITTypeOfHITOutput, error) {
	var output mturk.UpdateHITTypeOfHITOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkUpdateNotificationSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkUpdateNotificationSettingsFuture) Get(ctx workflow.Context) (*mturk.UpdateNotificationSettingsOutput, error) {
	var output mturk.UpdateNotificationSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MTurkUpdateQualificationTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MTurkUpdateQualificationTypeFuture) Get(ctx workflow.Context) (*mturk.UpdateQualificationTypeOutput, error) {
	var output mturk.UpdateQualificationTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ApproveAssignment(ctx workflow.Context, input *mturk.ApproveAssignmentInput) (*mturk.ApproveAssignmentOutput, error) {
	var output mturk.ApproveAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ApproveAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ApproveAssignmentAsync(ctx workflow.Context, input *mturk.ApproveAssignmentInput) *MTurkApproveAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ApproveAssignment", input)
	return &MTurkApproveAssignmentFuture{Future: future}
}

func (a *MTurkStub) AssociateQualificationWithWorker(ctx workflow.Context, input *mturk.AssociateQualificationWithWorkerInput) (*mturk.AssociateQualificationWithWorkerOutput, error) {
	var output mturk.AssociateQualificationWithWorkerOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.AssociateQualificationWithWorker", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) AssociateQualificationWithWorkerAsync(ctx workflow.Context, input *mturk.AssociateQualificationWithWorkerInput) *MTurkAssociateQualificationWithWorkerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.AssociateQualificationWithWorker", input)
	return &MTurkAssociateQualificationWithWorkerFuture{Future: future}
}

func (a *MTurkStub) CreateAdditionalAssignmentsForHIT(ctx workflow.Context, input *mturk.CreateAdditionalAssignmentsForHITInput) (*mturk.CreateAdditionalAssignmentsForHITOutput, error) {
	var output mturk.CreateAdditionalAssignmentsForHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.CreateAdditionalAssignmentsForHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) CreateAdditionalAssignmentsForHITAsync(ctx workflow.Context, input *mturk.CreateAdditionalAssignmentsForHITInput) *MTurkCreateAdditionalAssignmentsForHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.CreateAdditionalAssignmentsForHIT", input)
	return &MTurkCreateAdditionalAssignmentsForHITFuture{Future: future}
}

func (a *MTurkStub) CreateHIT(ctx workflow.Context, input *mturk.CreateHITInput) (*mturk.CreateHITOutput, error) {
	var output mturk.CreateHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.CreateHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) CreateHITAsync(ctx workflow.Context, input *mturk.CreateHITInput) *MTurkCreateHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.CreateHIT", input)
	return &MTurkCreateHITFuture{Future: future}
}

func (a *MTurkStub) CreateHITType(ctx workflow.Context, input *mturk.CreateHITTypeInput) (*mturk.CreateHITTypeOutput, error) {
	var output mturk.CreateHITTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.CreateHITType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) CreateHITTypeAsync(ctx workflow.Context, input *mturk.CreateHITTypeInput) *MTurkCreateHITTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.CreateHITType", input)
	return &MTurkCreateHITTypeFuture{Future: future}
}

func (a *MTurkStub) CreateHITWithHITType(ctx workflow.Context, input *mturk.CreateHITWithHITTypeInput) (*mturk.CreateHITWithHITTypeOutput, error) {
	var output mturk.CreateHITWithHITTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.CreateHITWithHITType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) CreateHITWithHITTypeAsync(ctx workflow.Context, input *mturk.CreateHITWithHITTypeInput) *MTurkCreateHITWithHITTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.CreateHITWithHITType", input)
	return &MTurkCreateHITWithHITTypeFuture{Future: future}
}

func (a *MTurkStub) CreateQualificationType(ctx workflow.Context, input *mturk.CreateQualificationTypeInput) (*mturk.CreateQualificationTypeOutput, error) {
	var output mturk.CreateQualificationTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.CreateQualificationType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) CreateQualificationTypeAsync(ctx workflow.Context, input *mturk.CreateQualificationTypeInput) *MTurkCreateQualificationTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.CreateQualificationType", input)
	return &MTurkCreateQualificationTypeFuture{Future: future}
}

func (a *MTurkStub) CreateWorkerBlock(ctx workflow.Context, input *mturk.CreateWorkerBlockInput) (*mturk.CreateWorkerBlockOutput, error) {
	var output mturk.CreateWorkerBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.CreateWorkerBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) CreateWorkerBlockAsync(ctx workflow.Context, input *mturk.CreateWorkerBlockInput) *MTurkCreateWorkerBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.CreateWorkerBlock", input)
	return &MTurkCreateWorkerBlockFuture{Future: future}
}

func (a *MTurkStub) DeleteHIT(ctx workflow.Context, input *mturk.DeleteHITInput) (*mturk.DeleteHITOutput, error) {
	var output mturk.DeleteHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.DeleteHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) DeleteHITAsync(ctx workflow.Context, input *mturk.DeleteHITInput) *MTurkDeleteHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.DeleteHIT", input)
	return &MTurkDeleteHITFuture{Future: future}
}

func (a *MTurkStub) DeleteQualificationType(ctx workflow.Context, input *mturk.DeleteQualificationTypeInput) (*mturk.DeleteQualificationTypeOutput, error) {
	var output mturk.DeleteQualificationTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.DeleteQualificationType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) DeleteQualificationTypeAsync(ctx workflow.Context, input *mturk.DeleteQualificationTypeInput) *MTurkDeleteQualificationTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.DeleteQualificationType", input)
	return &MTurkDeleteQualificationTypeFuture{Future: future}
}

func (a *MTurkStub) DeleteWorkerBlock(ctx workflow.Context, input *mturk.DeleteWorkerBlockInput) (*mturk.DeleteWorkerBlockOutput, error) {
	var output mturk.DeleteWorkerBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.DeleteWorkerBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) DeleteWorkerBlockAsync(ctx workflow.Context, input *mturk.DeleteWorkerBlockInput) *MTurkDeleteWorkerBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.DeleteWorkerBlock", input)
	return &MTurkDeleteWorkerBlockFuture{Future: future}
}

func (a *MTurkStub) DisassociateQualificationFromWorker(ctx workflow.Context, input *mturk.DisassociateQualificationFromWorkerInput) (*mturk.DisassociateQualificationFromWorkerOutput, error) {
	var output mturk.DisassociateQualificationFromWorkerOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.DisassociateQualificationFromWorker", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) DisassociateQualificationFromWorkerAsync(ctx workflow.Context, input *mturk.DisassociateQualificationFromWorkerInput) *MTurkDisassociateQualificationFromWorkerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.DisassociateQualificationFromWorker", input)
	return &MTurkDisassociateQualificationFromWorkerFuture{Future: future}
}

func (a *MTurkStub) GetAccountBalance(ctx workflow.Context, input *mturk.GetAccountBalanceInput) (*mturk.GetAccountBalanceOutput, error) {
	var output mturk.GetAccountBalanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.GetAccountBalance", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) GetAccountBalanceAsync(ctx workflow.Context, input *mturk.GetAccountBalanceInput) *MTurkGetAccountBalanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.GetAccountBalance", input)
	return &MTurkGetAccountBalanceFuture{Future: future}
}

func (a *MTurkStub) GetAssignment(ctx workflow.Context, input *mturk.GetAssignmentInput) (*mturk.GetAssignmentOutput, error) {
	var output mturk.GetAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.GetAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) GetAssignmentAsync(ctx workflow.Context, input *mturk.GetAssignmentInput) *MTurkGetAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.GetAssignment", input)
	return &MTurkGetAssignmentFuture{Future: future}
}

func (a *MTurkStub) GetFileUploadURL(ctx workflow.Context, input *mturk.GetFileUploadURLInput) (*mturk.GetFileUploadURLOutput, error) {
	var output mturk.GetFileUploadURLOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.GetFileUploadURL", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) GetFileUploadURLAsync(ctx workflow.Context, input *mturk.GetFileUploadURLInput) *MTurkGetFileUploadURLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.GetFileUploadURL", input)
	return &MTurkGetFileUploadURLFuture{Future: future}
}

func (a *MTurkStub) GetHIT(ctx workflow.Context, input *mturk.GetHITInput) (*mturk.GetHITOutput, error) {
	var output mturk.GetHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.GetHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) GetHITAsync(ctx workflow.Context, input *mturk.GetHITInput) *MTurkGetHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.GetHIT", input)
	return &MTurkGetHITFuture{Future: future}
}

func (a *MTurkStub) GetQualificationScore(ctx workflow.Context, input *mturk.GetQualificationScoreInput) (*mturk.GetQualificationScoreOutput, error) {
	var output mturk.GetQualificationScoreOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.GetQualificationScore", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) GetQualificationScoreAsync(ctx workflow.Context, input *mturk.GetQualificationScoreInput) *MTurkGetQualificationScoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.GetQualificationScore", input)
	return &MTurkGetQualificationScoreFuture{Future: future}
}

func (a *MTurkStub) GetQualificationType(ctx workflow.Context, input *mturk.GetQualificationTypeInput) (*mturk.GetQualificationTypeOutput, error) {
	var output mturk.GetQualificationTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.GetQualificationType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) GetQualificationTypeAsync(ctx workflow.Context, input *mturk.GetQualificationTypeInput) *MTurkGetQualificationTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.GetQualificationType", input)
	return &MTurkGetQualificationTypeFuture{Future: future}
}

func (a *MTurkStub) ListAssignmentsForHIT(ctx workflow.Context, input *mturk.ListAssignmentsForHITInput) (*mturk.ListAssignmentsForHITOutput, error) {
	var output mturk.ListAssignmentsForHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListAssignmentsForHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListAssignmentsForHITAsync(ctx workflow.Context, input *mturk.ListAssignmentsForHITInput) *MTurkListAssignmentsForHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListAssignmentsForHIT", input)
	return &MTurkListAssignmentsForHITFuture{Future: future}
}

func (a *MTurkStub) ListBonusPayments(ctx workflow.Context, input *mturk.ListBonusPaymentsInput) (*mturk.ListBonusPaymentsOutput, error) {
	var output mturk.ListBonusPaymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListBonusPayments", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListBonusPaymentsAsync(ctx workflow.Context, input *mturk.ListBonusPaymentsInput) *MTurkListBonusPaymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListBonusPayments", input)
	return &MTurkListBonusPaymentsFuture{Future: future}
}

func (a *MTurkStub) ListHITs(ctx workflow.Context, input *mturk.ListHITsInput) (*mturk.ListHITsOutput, error) {
	var output mturk.ListHITsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListHITs", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListHITsAsync(ctx workflow.Context, input *mturk.ListHITsInput) *MTurkListHITsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListHITs", input)
	return &MTurkListHITsFuture{Future: future}
}

func (a *MTurkStub) ListHITsForQualificationType(ctx workflow.Context, input *mturk.ListHITsForQualificationTypeInput) (*mturk.ListHITsForQualificationTypeOutput, error) {
	var output mturk.ListHITsForQualificationTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListHITsForQualificationType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListHITsForQualificationTypeAsync(ctx workflow.Context, input *mturk.ListHITsForQualificationTypeInput) *MTurkListHITsForQualificationTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListHITsForQualificationType", input)
	return &MTurkListHITsForQualificationTypeFuture{Future: future}
}

func (a *MTurkStub) ListQualificationRequests(ctx workflow.Context, input *mturk.ListQualificationRequestsInput) (*mturk.ListQualificationRequestsOutput, error) {
	var output mturk.ListQualificationRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListQualificationRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListQualificationRequestsAsync(ctx workflow.Context, input *mturk.ListQualificationRequestsInput) *MTurkListQualificationRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListQualificationRequests", input)
	return &MTurkListQualificationRequestsFuture{Future: future}
}

func (a *MTurkStub) ListQualificationTypes(ctx workflow.Context, input *mturk.ListQualificationTypesInput) (*mturk.ListQualificationTypesOutput, error) {
	var output mturk.ListQualificationTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListQualificationTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListQualificationTypesAsync(ctx workflow.Context, input *mturk.ListQualificationTypesInput) *MTurkListQualificationTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListQualificationTypes", input)
	return &MTurkListQualificationTypesFuture{Future: future}
}

func (a *MTurkStub) ListReviewPolicyResultsForHIT(ctx workflow.Context, input *mturk.ListReviewPolicyResultsForHITInput) (*mturk.ListReviewPolicyResultsForHITOutput, error) {
	var output mturk.ListReviewPolicyResultsForHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListReviewPolicyResultsForHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListReviewPolicyResultsForHITAsync(ctx workflow.Context, input *mturk.ListReviewPolicyResultsForHITInput) *MTurkListReviewPolicyResultsForHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListReviewPolicyResultsForHIT", input)
	return &MTurkListReviewPolicyResultsForHITFuture{Future: future}
}

func (a *MTurkStub) ListReviewableHITs(ctx workflow.Context, input *mturk.ListReviewableHITsInput) (*mturk.ListReviewableHITsOutput, error) {
	var output mturk.ListReviewableHITsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListReviewableHITs", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListReviewableHITsAsync(ctx workflow.Context, input *mturk.ListReviewableHITsInput) *MTurkListReviewableHITsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListReviewableHITs", input)
	return &MTurkListReviewableHITsFuture{Future: future}
}

func (a *MTurkStub) ListWorkerBlocks(ctx workflow.Context, input *mturk.ListWorkerBlocksInput) (*mturk.ListWorkerBlocksOutput, error) {
	var output mturk.ListWorkerBlocksOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListWorkerBlocks", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListWorkerBlocksAsync(ctx workflow.Context, input *mturk.ListWorkerBlocksInput) *MTurkListWorkerBlocksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListWorkerBlocks", input)
	return &MTurkListWorkerBlocksFuture{Future: future}
}

func (a *MTurkStub) ListWorkersWithQualificationType(ctx workflow.Context, input *mturk.ListWorkersWithQualificationTypeInput) (*mturk.ListWorkersWithQualificationTypeOutput, error) {
	var output mturk.ListWorkersWithQualificationTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.ListWorkersWithQualificationType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) ListWorkersWithQualificationTypeAsync(ctx workflow.Context, input *mturk.ListWorkersWithQualificationTypeInput) *MTurkListWorkersWithQualificationTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.ListWorkersWithQualificationType", input)
	return &MTurkListWorkersWithQualificationTypeFuture{Future: future}
}

func (a *MTurkStub) NotifyWorkers(ctx workflow.Context, input *mturk.NotifyWorkersInput) (*mturk.NotifyWorkersOutput, error) {
	var output mturk.NotifyWorkersOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.NotifyWorkers", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) NotifyWorkersAsync(ctx workflow.Context, input *mturk.NotifyWorkersInput) *MTurkNotifyWorkersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.NotifyWorkers", input)
	return &MTurkNotifyWorkersFuture{Future: future}
}

func (a *MTurkStub) RejectAssignment(ctx workflow.Context, input *mturk.RejectAssignmentInput) (*mturk.RejectAssignmentOutput, error) {
	var output mturk.RejectAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.RejectAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) RejectAssignmentAsync(ctx workflow.Context, input *mturk.RejectAssignmentInput) *MTurkRejectAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.RejectAssignment", input)
	return &MTurkRejectAssignmentFuture{Future: future}
}

func (a *MTurkStub) SendBonus(ctx workflow.Context, input *mturk.SendBonusInput) (*mturk.SendBonusOutput, error) {
	var output mturk.SendBonusOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.SendBonus", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) SendBonusAsync(ctx workflow.Context, input *mturk.SendBonusInput) *MTurkSendBonusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.SendBonus", input)
	return &MTurkSendBonusFuture{Future: future}
}

func (a *MTurkStub) SendTestEventNotification(ctx workflow.Context, input *mturk.SendTestEventNotificationInput) (*mturk.SendTestEventNotificationOutput, error) {
	var output mturk.SendTestEventNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.SendTestEventNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) SendTestEventNotificationAsync(ctx workflow.Context, input *mturk.SendTestEventNotificationInput) *MTurkSendTestEventNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.SendTestEventNotification", input)
	return &MTurkSendTestEventNotificationFuture{Future: future}
}

func (a *MTurkStub) UpdateExpirationForHIT(ctx workflow.Context, input *mturk.UpdateExpirationForHITInput) (*mturk.UpdateExpirationForHITOutput, error) {
	var output mturk.UpdateExpirationForHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateExpirationForHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) UpdateExpirationForHITAsync(ctx workflow.Context, input *mturk.UpdateExpirationForHITInput) *MTurkUpdateExpirationForHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateExpirationForHIT", input)
	return &MTurkUpdateExpirationForHITFuture{Future: future}
}

func (a *MTurkStub) UpdateHITReviewStatus(ctx workflow.Context, input *mturk.UpdateHITReviewStatusInput) (*mturk.UpdateHITReviewStatusOutput, error) {
	var output mturk.UpdateHITReviewStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateHITReviewStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) UpdateHITReviewStatusAsync(ctx workflow.Context, input *mturk.UpdateHITReviewStatusInput) *MTurkUpdateHITReviewStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateHITReviewStatus", input)
	return &MTurkUpdateHITReviewStatusFuture{Future: future}
}

func (a *MTurkStub) UpdateHITTypeOfHIT(ctx workflow.Context, input *mturk.UpdateHITTypeOfHITInput) (*mturk.UpdateHITTypeOfHITOutput, error) {
	var output mturk.UpdateHITTypeOfHITOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateHITTypeOfHIT", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) UpdateHITTypeOfHITAsync(ctx workflow.Context, input *mturk.UpdateHITTypeOfHITInput) *MTurkUpdateHITTypeOfHITFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateHITTypeOfHIT", input)
	return &MTurkUpdateHITTypeOfHITFuture{Future: future}
}

func (a *MTurkStub) UpdateNotificationSettings(ctx workflow.Context, input *mturk.UpdateNotificationSettingsInput) (*mturk.UpdateNotificationSettingsOutput, error) {
	var output mturk.UpdateNotificationSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateNotificationSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) UpdateNotificationSettingsAsync(ctx workflow.Context, input *mturk.UpdateNotificationSettingsInput) *MTurkUpdateNotificationSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateNotificationSettings", input)
	return &MTurkUpdateNotificationSettingsFuture{Future: future}
}

func (a *MTurkStub) UpdateQualificationType(ctx workflow.Context, input *mturk.UpdateQualificationTypeInput) (*mturk.UpdateQualificationTypeOutput, error) {
	var output mturk.UpdateQualificationTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateQualificationType", input).Get(ctx, &output)
	return &output, err
}

func (a *MTurkStub) UpdateQualificationTypeAsync(ctx workflow.Context, input *mturk.UpdateQualificationTypeInput) *MTurkUpdateQualificationTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mturk.UpdateQualificationType", input)
	return &MTurkUpdateQualificationTypeFuture{Future: future}
}
