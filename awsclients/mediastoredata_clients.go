// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/mediastoredata"
	"go.temporal.io/sdk/workflow"
)

type MediaStoreDataClient interface {
	DeleteObject(ctx workflow.Context, input *mediastoredata.DeleteObjectInput) (*mediastoredata.DeleteObjectOutput, error)
	DeleteObjectAsync(ctx workflow.Context, input *mediastoredata.DeleteObjectInput) *MediastoredataDeleteObjectFuture

	DescribeObject(ctx workflow.Context, input *mediastoredata.DescribeObjectInput) (*mediastoredata.DescribeObjectOutput, error)
	DescribeObjectAsync(ctx workflow.Context, input *mediastoredata.DescribeObjectInput) *MediastoredataDescribeObjectFuture

	GetObject(ctx workflow.Context, input *mediastoredata.GetObjectInput) (*mediastoredata.GetObjectOutput, error)
	GetObjectAsync(ctx workflow.Context, input *mediastoredata.GetObjectInput) *MediastoredataGetObjectFuture

	ListItems(ctx workflow.Context, input *mediastoredata.ListItemsInput) (*mediastoredata.ListItemsOutput, error)
	ListItemsAsync(ctx workflow.Context, input *mediastoredata.ListItemsInput) *MediastoredataListItemsFuture

	PutObject(ctx workflow.Context, input *mediastoredata.PutObjectInput) (*mediastoredata.PutObjectOutput, error)
	PutObjectAsync(ctx workflow.Context, input *mediastoredata.PutObjectInput) *MediastoredataPutObjectFuture
}

type MediaStoreDataStub struct{}

func NewMediaStoreDataStub() MediaStoreDataClient {
	return &MediaStoreDataStub{}
}

type MediastoredataDeleteObjectFuture struct {
	Future workflow.Future
}

func (r *MediastoredataDeleteObjectFuture) Get(ctx workflow.Context) (*mediastoredata.DeleteObjectOutput, error) {
	var output mediastoredata.DeleteObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoredataDescribeObjectFuture struct {
	Future workflow.Future
}

func (r *MediastoredataDescribeObjectFuture) Get(ctx workflow.Context) (*mediastoredata.DescribeObjectOutput, error) {
	var output mediastoredata.DescribeObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoredataGetObjectFuture struct {
	Future workflow.Future
}

func (r *MediastoredataGetObjectFuture) Get(ctx workflow.Context) (*mediastoredata.GetObjectOutput, error) {
	var output mediastoredata.GetObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoredataListItemsFuture struct {
	Future workflow.Future
}

func (r *MediastoredataListItemsFuture) Get(ctx workflow.Context) (*mediastoredata.ListItemsOutput, error) {
	var output mediastoredata.ListItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediastoredataPutObjectFuture struct {
	Future workflow.Future
}

func (r *MediastoredataPutObjectFuture) Get(ctx workflow.Context) (*mediastoredata.PutObjectOutput, error) {
	var output mediastoredata.PutObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreDataStub) DeleteObject(ctx workflow.Context, input *mediastoredata.DeleteObjectInput) (*mediastoredata.DeleteObjectOutput, error) {
	var output mediastoredata.DeleteObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastoredata.DeleteObject", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreDataStub) DeleteObjectAsync(ctx workflow.Context, input *mediastoredata.DeleteObjectInput) *MediastoredataDeleteObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastoredata.DeleteObject", input)
	return &MediastoredataDeleteObjectFuture{Future: future}
}

func (a *MediaStoreDataStub) DescribeObject(ctx workflow.Context, input *mediastoredata.DescribeObjectInput) (*mediastoredata.DescribeObjectOutput, error) {
	var output mediastoredata.DescribeObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastoredata.DescribeObject", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreDataStub) DescribeObjectAsync(ctx workflow.Context, input *mediastoredata.DescribeObjectInput) *MediastoredataDescribeObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastoredata.DescribeObject", input)
	return &MediastoredataDescribeObjectFuture{Future: future}
}

func (a *MediaStoreDataStub) GetObject(ctx workflow.Context, input *mediastoredata.GetObjectInput) (*mediastoredata.GetObjectOutput, error) {
	var output mediastoredata.GetObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastoredata.GetObject", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreDataStub) GetObjectAsync(ctx workflow.Context, input *mediastoredata.GetObjectInput) *MediastoredataGetObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastoredata.GetObject", input)
	return &MediastoredataGetObjectFuture{Future: future}
}

func (a *MediaStoreDataStub) ListItems(ctx workflow.Context, input *mediastoredata.ListItemsInput) (*mediastoredata.ListItemsOutput, error) {
	var output mediastoredata.ListItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastoredata.ListItems", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreDataStub) ListItemsAsync(ctx workflow.Context, input *mediastoredata.ListItemsInput) *MediastoredataListItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastoredata.ListItems", input)
	return &MediastoredataListItemsFuture{Future: future}
}

func (a *MediaStoreDataStub) PutObject(ctx workflow.Context, input *mediastoredata.PutObjectInput) (*mediastoredata.PutObjectOutput, error) {
	var output mediastoredata.PutObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediastoredata.PutObject", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaStoreDataStub) PutObjectAsync(ctx workflow.Context, input *mediastoredata.PutObjectInput) *MediastoredataPutObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediastoredata.PutObject", input)
	return &MediastoredataPutObjectFuture{Future: future}
}
