// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/quicksight"
	"go.temporal.io/sdk/workflow"
)

type QuickSightClient interface {
	CancelIngestion(ctx workflow.Context, input *quicksight.CancelIngestionInput) (*quicksight.CancelIngestionOutput, error)
	CancelIngestionAsync(ctx workflow.Context, input *quicksight.CancelIngestionInput) *QuicksightCancelIngestionFuture

	CreateAccountCustomization(ctx workflow.Context, input *quicksight.CreateAccountCustomizationInput) (*quicksight.CreateAccountCustomizationOutput, error)
	CreateAccountCustomizationAsync(ctx workflow.Context, input *quicksight.CreateAccountCustomizationInput) *QuicksightCreateAccountCustomizationFuture

	CreateAnalysis(ctx workflow.Context, input *quicksight.CreateAnalysisInput) (*quicksight.CreateAnalysisOutput, error)
	CreateAnalysisAsync(ctx workflow.Context, input *quicksight.CreateAnalysisInput) *QuicksightCreateAnalysisFuture

	CreateDashboard(ctx workflow.Context, input *quicksight.CreateDashboardInput) (*quicksight.CreateDashboardOutput, error)
	CreateDashboardAsync(ctx workflow.Context, input *quicksight.CreateDashboardInput) *QuicksightCreateDashboardFuture

	CreateDataSet(ctx workflow.Context, input *quicksight.CreateDataSetInput) (*quicksight.CreateDataSetOutput, error)
	CreateDataSetAsync(ctx workflow.Context, input *quicksight.CreateDataSetInput) *QuicksightCreateDataSetFuture

	CreateDataSource(ctx workflow.Context, input *quicksight.CreateDataSourceInput) (*quicksight.CreateDataSourceOutput, error)
	CreateDataSourceAsync(ctx workflow.Context, input *quicksight.CreateDataSourceInput) *QuicksightCreateDataSourceFuture

	CreateGroup(ctx workflow.Context, input *quicksight.CreateGroupInput) (*quicksight.CreateGroupOutput, error)
	CreateGroupAsync(ctx workflow.Context, input *quicksight.CreateGroupInput) *QuicksightCreateGroupFuture

	CreateGroupMembership(ctx workflow.Context, input *quicksight.CreateGroupMembershipInput) (*quicksight.CreateGroupMembershipOutput, error)
	CreateGroupMembershipAsync(ctx workflow.Context, input *quicksight.CreateGroupMembershipInput) *QuicksightCreateGroupMembershipFuture

	CreateIAMPolicyAssignment(ctx workflow.Context, input *quicksight.CreateIAMPolicyAssignmentInput) (*quicksight.CreateIAMPolicyAssignmentOutput, error)
	CreateIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.CreateIAMPolicyAssignmentInput) *QuicksightCreateIAMPolicyAssignmentFuture

	CreateIngestion(ctx workflow.Context, input *quicksight.CreateIngestionInput) (*quicksight.CreateIngestionOutput, error)
	CreateIngestionAsync(ctx workflow.Context, input *quicksight.CreateIngestionInput) *QuicksightCreateIngestionFuture

	CreateNamespace(ctx workflow.Context, input *quicksight.CreateNamespaceInput) (*quicksight.CreateNamespaceOutput, error)
	CreateNamespaceAsync(ctx workflow.Context, input *quicksight.CreateNamespaceInput) *QuicksightCreateNamespaceFuture

	CreateTemplate(ctx workflow.Context, input *quicksight.CreateTemplateInput) (*quicksight.CreateTemplateOutput, error)
	CreateTemplateAsync(ctx workflow.Context, input *quicksight.CreateTemplateInput) *QuicksightCreateTemplateFuture

	CreateTemplateAlias(ctx workflow.Context, input *quicksight.CreateTemplateAliasInput) (*quicksight.CreateTemplateAliasOutput, error)
	CreateTemplateAliasAsync(ctx workflow.Context, input *quicksight.CreateTemplateAliasInput) *QuicksightCreateTemplateAliasFuture

	CreateTheme(ctx workflow.Context, input *quicksight.CreateThemeInput) (*quicksight.CreateThemeOutput, error)
	CreateThemeAsync(ctx workflow.Context, input *quicksight.CreateThemeInput) *QuicksightCreateThemeFuture

	CreateThemeAlias(ctx workflow.Context, input *quicksight.CreateThemeAliasInput) (*quicksight.CreateThemeAliasOutput, error)
	CreateThemeAliasAsync(ctx workflow.Context, input *quicksight.CreateThemeAliasInput) *QuicksightCreateThemeAliasFuture

	DeleteAccountCustomization(ctx workflow.Context, input *quicksight.DeleteAccountCustomizationInput) (*quicksight.DeleteAccountCustomizationOutput, error)
	DeleteAccountCustomizationAsync(ctx workflow.Context, input *quicksight.DeleteAccountCustomizationInput) *QuicksightDeleteAccountCustomizationFuture

	DeleteAnalysis(ctx workflow.Context, input *quicksight.DeleteAnalysisInput) (*quicksight.DeleteAnalysisOutput, error)
	DeleteAnalysisAsync(ctx workflow.Context, input *quicksight.DeleteAnalysisInput) *QuicksightDeleteAnalysisFuture

	DeleteDashboard(ctx workflow.Context, input *quicksight.DeleteDashboardInput) (*quicksight.DeleteDashboardOutput, error)
	DeleteDashboardAsync(ctx workflow.Context, input *quicksight.DeleteDashboardInput) *QuicksightDeleteDashboardFuture

	DeleteDataSet(ctx workflow.Context, input *quicksight.DeleteDataSetInput) (*quicksight.DeleteDataSetOutput, error)
	DeleteDataSetAsync(ctx workflow.Context, input *quicksight.DeleteDataSetInput) *QuicksightDeleteDataSetFuture

	DeleteDataSource(ctx workflow.Context, input *quicksight.DeleteDataSourceInput) (*quicksight.DeleteDataSourceOutput, error)
	DeleteDataSourceAsync(ctx workflow.Context, input *quicksight.DeleteDataSourceInput) *QuicksightDeleteDataSourceFuture

	DeleteGroup(ctx workflow.Context, input *quicksight.DeleteGroupInput) (*quicksight.DeleteGroupOutput, error)
	DeleteGroupAsync(ctx workflow.Context, input *quicksight.DeleteGroupInput) *QuicksightDeleteGroupFuture

	DeleteGroupMembership(ctx workflow.Context, input *quicksight.DeleteGroupMembershipInput) (*quicksight.DeleteGroupMembershipOutput, error)
	DeleteGroupMembershipAsync(ctx workflow.Context, input *quicksight.DeleteGroupMembershipInput) *QuicksightDeleteGroupMembershipFuture

	DeleteIAMPolicyAssignment(ctx workflow.Context, input *quicksight.DeleteIAMPolicyAssignmentInput) (*quicksight.DeleteIAMPolicyAssignmentOutput, error)
	DeleteIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.DeleteIAMPolicyAssignmentInput) *QuicksightDeleteIAMPolicyAssignmentFuture

	DeleteNamespace(ctx workflow.Context, input *quicksight.DeleteNamespaceInput) (*quicksight.DeleteNamespaceOutput, error)
	DeleteNamespaceAsync(ctx workflow.Context, input *quicksight.DeleteNamespaceInput) *QuicksightDeleteNamespaceFuture

	DeleteTemplate(ctx workflow.Context, input *quicksight.DeleteTemplateInput) (*quicksight.DeleteTemplateOutput, error)
	DeleteTemplateAsync(ctx workflow.Context, input *quicksight.DeleteTemplateInput) *QuicksightDeleteTemplateFuture

	DeleteTemplateAlias(ctx workflow.Context, input *quicksight.DeleteTemplateAliasInput) (*quicksight.DeleteTemplateAliasOutput, error)
	DeleteTemplateAliasAsync(ctx workflow.Context, input *quicksight.DeleteTemplateAliasInput) *QuicksightDeleteTemplateAliasFuture

	DeleteTheme(ctx workflow.Context, input *quicksight.DeleteThemeInput) (*quicksight.DeleteThemeOutput, error)
	DeleteThemeAsync(ctx workflow.Context, input *quicksight.DeleteThemeInput) *QuicksightDeleteThemeFuture

	DeleteThemeAlias(ctx workflow.Context, input *quicksight.DeleteThemeAliasInput) (*quicksight.DeleteThemeAliasOutput, error)
	DeleteThemeAliasAsync(ctx workflow.Context, input *quicksight.DeleteThemeAliasInput) *QuicksightDeleteThemeAliasFuture

	DeleteUser(ctx workflow.Context, input *quicksight.DeleteUserInput) (*quicksight.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *quicksight.DeleteUserInput) *QuicksightDeleteUserFuture

	DeleteUserByPrincipalId(ctx workflow.Context, input *quicksight.DeleteUserByPrincipalIdInput) (*quicksight.DeleteUserByPrincipalIdOutput, error)
	DeleteUserByPrincipalIdAsync(ctx workflow.Context, input *quicksight.DeleteUserByPrincipalIdInput) *QuicksightDeleteUserByPrincipalIdFuture

	DescribeAccountCustomization(ctx workflow.Context, input *quicksight.DescribeAccountCustomizationInput) (*quicksight.DescribeAccountCustomizationOutput, error)
	DescribeAccountCustomizationAsync(ctx workflow.Context, input *quicksight.DescribeAccountCustomizationInput) *QuicksightDescribeAccountCustomizationFuture

	DescribeAccountSettings(ctx workflow.Context, input *quicksight.DescribeAccountSettingsInput) (*quicksight.DescribeAccountSettingsOutput, error)
	DescribeAccountSettingsAsync(ctx workflow.Context, input *quicksight.DescribeAccountSettingsInput) *QuicksightDescribeAccountSettingsFuture

	DescribeAnalysis(ctx workflow.Context, input *quicksight.DescribeAnalysisInput) (*quicksight.DescribeAnalysisOutput, error)
	DescribeAnalysisAsync(ctx workflow.Context, input *quicksight.DescribeAnalysisInput) *QuicksightDescribeAnalysisFuture

	DescribeAnalysisPermissions(ctx workflow.Context, input *quicksight.DescribeAnalysisPermissionsInput) (*quicksight.DescribeAnalysisPermissionsOutput, error)
	DescribeAnalysisPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeAnalysisPermissionsInput) *QuicksightDescribeAnalysisPermissionsFuture

	DescribeDashboard(ctx workflow.Context, input *quicksight.DescribeDashboardInput) (*quicksight.DescribeDashboardOutput, error)
	DescribeDashboardAsync(ctx workflow.Context, input *quicksight.DescribeDashboardInput) *QuicksightDescribeDashboardFuture

	DescribeDashboardPermissions(ctx workflow.Context, input *quicksight.DescribeDashboardPermissionsInput) (*quicksight.DescribeDashboardPermissionsOutput, error)
	DescribeDashboardPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDashboardPermissionsInput) *QuicksightDescribeDashboardPermissionsFuture

	DescribeDataSet(ctx workflow.Context, input *quicksight.DescribeDataSetInput) (*quicksight.DescribeDataSetOutput, error)
	DescribeDataSetAsync(ctx workflow.Context, input *quicksight.DescribeDataSetInput) *QuicksightDescribeDataSetFuture

	DescribeDataSetPermissions(ctx workflow.Context, input *quicksight.DescribeDataSetPermissionsInput) (*quicksight.DescribeDataSetPermissionsOutput, error)
	DescribeDataSetPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDataSetPermissionsInput) *QuicksightDescribeDataSetPermissionsFuture

	DescribeDataSource(ctx workflow.Context, input *quicksight.DescribeDataSourceInput) (*quicksight.DescribeDataSourceOutput, error)
	DescribeDataSourceAsync(ctx workflow.Context, input *quicksight.DescribeDataSourceInput) *QuicksightDescribeDataSourceFuture

	DescribeDataSourcePermissions(ctx workflow.Context, input *quicksight.DescribeDataSourcePermissionsInput) (*quicksight.DescribeDataSourcePermissionsOutput, error)
	DescribeDataSourcePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDataSourcePermissionsInput) *QuicksightDescribeDataSourcePermissionsFuture

	DescribeGroup(ctx workflow.Context, input *quicksight.DescribeGroupInput) (*quicksight.DescribeGroupOutput, error)
	DescribeGroupAsync(ctx workflow.Context, input *quicksight.DescribeGroupInput) *QuicksightDescribeGroupFuture

	DescribeIAMPolicyAssignment(ctx workflow.Context, input *quicksight.DescribeIAMPolicyAssignmentInput) (*quicksight.DescribeIAMPolicyAssignmentOutput, error)
	DescribeIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.DescribeIAMPolicyAssignmentInput) *QuicksightDescribeIAMPolicyAssignmentFuture

	DescribeIngestion(ctx workflow.Context, input *quicksight.DescribeIngestionInput) (*quicksight.DescribeIngestionOutput, error)
	DescribeIngestionAsync(ctx workflow.Context, input *quicksight.DescribeIngestionInput) *QuicksightDescribeIngestionFuture

	DescribeNamespace(ctx workflow.Context, input *quicksight.DescribeNamespaceInput) (*quicksight.DescribeNamespaceOutput, error)
	DescribeNamespaceAsync(ctx workflow.Context, input *quicksight.DescribeNamespaceInput) *QuicksightDescribeNamespaceFuture

	DescribeTemplate(ctx workflow.Context, input *quicksight.DescribeTemplateInput) (*quicksight.DescribeTemplateOutput, error)
	DescribeTemplateAsync(ctx workflow.Context, input *quicksight.DescribeTemplateInput) *QuicksightDescribeTemplateFuture

	DescribeTemplateAlias(ctx workflow.Context, input *quicksight.DescribeTemplateAliasInput) (*quicksight.DescribeTemplateAliasOutput, error)
	DescribeTemplateAliasAsync(ctx workflow.Context, input *quicksight.DescribeTemplateAliasInput) *QuicksightDescribeTemplateAliasFuture

	DescribeTemplatePermissions(ctx workflow.Context, input *quicksight.DescribeTemplatePermissionsInput) (*quicksight.DescribeTemplatePermissionsOutput, error)
	DescribeTemplatePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeTemplatePermissionsInput) *QuicksightDescribeTemplatePermissionsFuture

	DescribeTheme(ctx workflow.Context, input *quicksight.DescribeThemeInput) (*quicksight.DescribeThemeOutput, error)
	DescribeThemeAsync(ctx workflow.Context, input *quicksight.DescribeThemeInput) *QuicksightDescribeThemeFuture

	DescribeThemeAlias(ctx workflow.Context, input *quicksight.DescribeThemeAliasInput) (*quicksight.DescribeThemeAliasOutput, error)
	DescribeThemeAliasAsync(ctx workflow.Context, input *quicksight.DescribeThemeAliasInput) *QuicksightDescribeThemeAliasFuture

	DescribeThemePermissions(ctx workflow.Context, input *quicksight.DescribeThemePermissionsInput) (*quicksight.DescribeThemePermissionsOutput, error)
	DescribeThemePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeThemePermissionsInput) *QuicksightDescribeThemePermissionsFuture

	DescribeUser(ctx workflow.Context, input *quicksight.DescribeUserInput) (*quicksight.DescribeUserOutput, error)
	DescribeUserAsync(ctx workflow.Context, input *quicksight.DescribeUserInput) *QuicksightDescribeUserFuture

	GetDashboardEmbedUrl(ctx workflow.Context, input *quicksight.GetDashboardEmbedUrlInput) (*quicksight.GetDashboardEmbedUrlOutput, error)
	GetDashboardEmbedUrlAsync(ctx workflow.Context, input *quicksight.GetDashboardEmbedUrlInput) *QuicksightGetDashboardEmbedUrlFuture

	GetSessionEmbedUrl(ctx workflow.Context, input *quicksight.GetSessionEmbedUrlInput) (*quicksight.GetSessionEmbedUrlOutput, error)
	GetSessionEmbedUrlAsync(ctx workflow.Context, input *quicksight.GetSessionEmbedUrlInput) *QuicksightGetSessionEmbedUrlFuture

	ListAnalyses(ctx workflow.Context, input *quicksight.ListAnalysesInput) (*quicksight.ListAnalysesOutput, error)
	ListAnalysesAsync(ctx workflow.Context, input *quicksight.ListAnalysesInput) *QuicksightListAnalysesFuture

	ListDashboardVersions(ctx workflow.Context, input *quicksight.ListDashboardVersionsInput) (*quicksight.ListDashboardVersionsOutput, error)
	ListDashboardVersionsAsync(ctx workflow.Context, input *quicksight.ListDashboardVersionsInput) *QuicksightListDashboardVersionsFuture

	ListDashboards(ctx workflow.Context, input *quicksight.ListDashboardsInput) (*quicksight.ListDashboardsOutput, error)
	ListDashboardsAsync(ctx workflow.Context, input *quicksight.ListDashboardsInput) *QuicksightListDashboardsFuture

	ListDataSets(ctx workflow.Context, input *quicksight.ListDataSetsInput) (*quicksight.ListDataSetsOutput, error)
	ListDataSetsAsync(ctx workflow.Context, input *quicksight.ListDataSetsInput) *QuicksightListDataSetsFuture

	ListDataSources(ctx workflow.Context, input *quicksight.ListDataSourcesInput) (*quicksight.ListDataSourcesOutput, error)
	ListDataSourcesAsync(ctx workflow.Context, input *quicksight.ListDataSourcesInput) *QuicksightListDataSourcesFuture

	ListGroupMemberships(ctx workflow.Context, input *quicksight.ListGroupMembershipsInput) (*quicksight.ListGroupMembershipsOutput, error)
	ListGroupMembershipsAsync(ctx workflow.Context, input *quicksight.ListGroupMembershipsInput) *QuicksightListGroupMembershipsFuture

	ListGroups(ctx workflow.Context, input *quicksight.ListGroupsInput) (*quicksight.ListGroupsOutput, error)
	ListGroupsAsync(ctx workflow.Context, input *quicksight.ListGroupsInput) *QuicksightListGroupsFuture

	ListIAMPolicyAssignments(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsInput) (*quicksight.ListIAMPolicyAssignmentsOutput, error)
	ListIAMPolicyAssignmentsAsync(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsInput) *QuicksightListIAMPolicyAssignmentsFuture

	ListIAMPolicyAssignmentsForUser(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsForUserInput) (*quicksight.ListIAMPolicyAssignmentsForUserOutput, error)
	ListIAMPolicyAssignmentsForUserAsync(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsForUserInput) *QuicksightListIAMPolicyAssignmentsForUserFuture

	ListIngestions(ctx workflow.Context, input *quicksight.ListIngestionsInput) (*quicksight.ListIngestionsOutput, error)
	ListIngestionsAsync(ctx workflow.Context, input *quicksight.ListIngestionsInput) *QuicksightListIngestionsFuture

	ListNamespaces(ctx workflow.Context, input *quicksight.ListNamespacesInput) (*quicksight.ListNamespacesOutput, error)
	ListNamespacesAsync(ctx workflow.Context, input *quicksight.ListNamespacesInput) *QuicksightListNamespacesFuture

	ListTagsForResource(ctx workflow.Context, input *quicksight.ListTagsForResourceInput) (*quicksight.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *quicksight.ListTagsForResourceInput) *QuicksightListTagsForResourceFuture

	ListTemplateAliases(ctx workflow.Context, input *quicksight.ListTemplateAliasesInput) (*quicksight.ListTemplateAliasesOutput, error)
	ListTemplateAliasesAsync(ctx workflow.Context, input *quicksight.ListTemplateAliasesInput) *QuicksightListTemplateAliasesFuture

	ListTemplateVersions(ctx workflow.Context, input *quicksight.ListTemplateVersionsInput) (*quicksight.ListTemplateVersionsOutput, error)
	ListTemplateVersionsAsync(ctx workflow.Context, input *quicksight.ListTemplateVersionsInput) *QuicksightListTemplateVersionsFuture

	ListTemplates(ctx workflow.Context, input *quicksight.ListTemplatesInput) (*quicksight.ListTemplatesOutput, error)
	ListTemplatesAsync(ctx workflow.Context, input *quicksight.ListTemplatesInput) *QuicksightListTemplatesFuture

	ListThemeAliases(ctx workflow.Context, input *quicksight.ListThemeAliasesInput) (*quicksight.ListThemeAliasesOutput, error)
	ListThemeAliasesAsync(ctx workflow.Context, input *quicksight.ListThemeAliasesInput) *QuicksightListThemeAliasesFuture

	ListThemeVersions(ctx workflow.Context, input *quicksight.ListThemeVersionsInput) (*quicksight.ListThemeVersionsOutput, error)
	ListThemeVersionsAsync(ctx workflow.Context, input *quicksight.ListThemeVersionsInput) *QuicksightListThemeVersionsFuture

	ListThemes(ctx workflow.Context, input *quicksight.ListThemesInput) (*quicksight.ListThemesOutput, error)
	ListThemesAsync(ctx workflow.Context, input *quicksight.ListThemesInput) *QuicksightListThemesFuture

	ListUserGroups(ctx workflow.Context, input *quicksight.ListUserGroupsInput) (*quicksight.ListUserGroupsOutput, error)
	ListUserGroupsAsync(ctx workflow.Context, input *quicksight.ListUserGroupsInput) *QuicksightListUserGroupsFuture

	ListUsers(ctx workflow.Context, input *quicksight.ListUsersInput) (*quicksight.ListUsersOutput, error)
	ListUsersAsync(ctx workflow.Context, input *quicksight.ListUsersInput) *QuicksightListUsersFuture

	RegisterUser(ctx workflow.Context, input *quicksight.RegisterUserInput) (*quicksight.RegisterUserOutput, error)
	RegisterUserAsync(ctx workflow.Context, input *quicksight.RegisterUserInput) *QuicksightRegisterUserFuture

	RestoreAnalysis(ctx workflow.Context, input *quicksight.RestoreAnalysisInput) (*quicksight.RestoreAnalysisOutput, error)
	RestoreAnalysisAsync(ctx workflow.Context, input *quicksight.RestoreAnalysisInput) *QuicksightRestoreAnalysisFuture

	SearchAnalyses(ctx workflow.Context, input *quicksight.SearchAnalysesInput) (*quicksight.SearchAnalysesOutput, error)
	SearchAnalysesAsync(ctx workflow.Context, input *quicksight.SearchAnalysesInput) *QuicksightSearchAnalysesFuture

	SearchDashboards(ctx workflow.Context, input *quicksight.SearchDashboardsInput) (*quicksight.SearchDashboardsOutput, error)
	SearchDashboardsAsync(ctx workflow.Context, input *quicksight.SearchDashboardsInput) *QuicksightSearchDashboardsFuture

	TagResource(ctx workflow.Context, input *quicksight.TagResourceInput) (*quicksight.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *quicksight.TagResourceInput) *QuicksightTagResourceFuture

	UntagResource(ctx workflow.Context, input *quicksight.UntagResourceInput) (*quicksight.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *quicksight.UntagResourceInput) *QuicksightUntagResourceFuture

	UpdateAccountCustomization(ctx workflow.Context, input *quicksight.UpdateAccountCustomizationInput) (*quicksight.UpdateAccountCustomizationOutput, error)
	UpdateAccountCustomizationAsync(ctx workflow.Context, input *quicksight.UpdateAccountCustomizationInput) *QuicksightUpdateAccountCustomizationFuture

	UpdateAccountSettings(ctx workflow.Context, input *quicksight.UpdateAccountSettingsInput) (*quicksight.UpdateAccountSettingsOutput, error)
	UpdateAccountSettingsAsync(ctx workflow.Context, input *quicksight.UpdateAccountSettingsInput) *QuicksightUpdateAccountSettingsFuture

	UpdateAnalysis(ctx workflow.Context, input *quicksight.UpdateAnalysisInput) (*quicksight.UpdateAnalysisOutput, error)
	UpdateAnalysisAsync(ctx workflow.Context, input *quicksight.UpdateAnalysisInput) *QuicksightUpdateAnalysisFuture

	UpdateAnalysisPermissions(ctx workflow.Context, input *quicksight.UpdateAnalysisPermissionsInput) (*quicksight.UpdateAnalysisPermissionsOutput, error)
	UpdateAnalysisPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateAnalysisPermissionsInput) *QuicksightUpdateAnalysisPermissionsFuture

	UpdateDashboard(ctx workflow.Context, input *quicksight.UpdateDashboardInput) (*quicksight.UpdateDashboardOutput, error)
	UpdateDashboardAsync(ctx workflow.Context, input *quicksight.UpdateDashboardInput) *QuicksightUpdateDashboardFuture

	UpdateDashboardPermissions(ctx workflow.Context, input *quicksight.UpdateDashboardPermissionsInput) (*quicksight.UpdateDashboardPermissionsOutput, error)
	UpdateDashboardPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDashboardPermissionsInput) *QuicksightUpdateDashboardPermissionsFuture

	UpdateDashboardPublishedVersion(ctx workflow.Context, input *quicksight.UpdateDashboardPublishedVersionInput) (*quicksight.UpdateDashboardPublishedVersionOutput, error)
	UpdateDashboardPublishedVersionAsync(ctx workflow.Context, input *quicksight.UpdateDashboardPublishedVersionInput) *QuicksightUpdateDashboardPublishedVersionFuture

	UpdateDataSet(ctx workflow.Context, input *quicksight.UpdateDataSetInput) (*quicksight.UpdateDataSetOutput, error)
	UpdateDataSetAsync(ctx workflow.Context, input *quicksight.UpdateDataSetInput) *QuicksightUpdateDataSetFuture

	UpdateDataSetPermissions(ctx workflow.Context, input *quicksight.UpdateDataSetPermissionsInput) (*quicksight.UpdateDataSetPermissionsOutput, error)
	UpdateDataSetPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDataSetPermissionsInput) *QuicksightUpdateDataSetPermissionsFuture

	UpdateDataSource(ctx workflow.Context, input *quicksight.UpdateDataSourceInput) (*quicksight.UpdateDataSourceOutput, error)
	UpdateDataSourceAsync(ctx workflow.Context, input *quicksight.UpdateDataSourceInput) *QuicksightUpdateDataSourceFuture

	UpdateDataSourcePermissions(ctx workflow.Context, input *quicksight.UpdateDataSourcePermissionsInput) (*quicksight.UpdateDataSourcePermissionsOutput, error)
	UpdateDataSourcePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDataSourcePermissionsInput) *QuicksightUpdateDataSourcePermissionsFuture

	UpdateGroup(ctx workflow.Context, input *quicksight.UpdateGroupInput) (*quicksight.UpdateGroupOutput, error)
	UpdateGroupAsync(ctx workflow.Context, input *quicksight.UpdateGroupInput) *QuicksightUpdateGroupFuture

	UpdateIAMPolicyAssignment(ctx workflow.Context, input *quicksight.UpdateIAMPolicyAssignmentInput) (*quicksight.UpdateIAMPolicyAssignmentOutput, error)
	UpdateIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.UpdateIAMPolicyAssignmentInput) *QuicksightUpdateIAMPolicyAssignmentFuture

	UpdateTemplate(ctx workflow.Context, input *quicksight.UpdateTemplateInput) (*quicksight.UpdateTemplateOutput, error)
	UpdateTemplateAsync(ctx workflow.Context, input *quicksight.UpdateTemplateInput) *QuicksightUpdateTemplateFuture

	UpdateTemplateAlias(ctx workflow.Context, input *quicksight.UpdateTemplateAliasInput) (*quicksight.UpdateTemplateAliasOutput, error)
	UpdateTemplateAliasAsync(ctx workflow.Context, input *quicksight.UpdateTemplateAliasInput) *QuicksightUpdateTemplateAliasFuture

	UpdateTemplatePermissions(ctx workflow.Context, input *quicksight.UpdateTemplatePermissionsInput) (*quicksight.UpdateTemplatePermissionsOutput, error)
	UpdateTemplatePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateTemplatePermissionsInput) *QuicksightUpdateTemplatePermissionsFuture

	UpdateTheme(ctx workflow.Context, input *quicksight.UpdateThemeInput) (*quicksight.UpdateThemeOutput, error)
	UpdateThemeAsync(ctx workflow.Context, input *quicksight.UpdateThemeInput) *QuicksightUpdateThemeFuture

	UpdateThemeAlias(ctx workflow.Context, input *quicksight.UpdateThemeAliasInput) (*quicksight.UpdateThemeAliasOutput, error)
	UpdateThemeAliasAsync(ctx workflow.Context, input *quicksight.UpdateThemeAliasInput) *QuicksightUpdateThemeAliasFuture

	UpdateThemePermissions(ctx workflow.Context, input *quicksight.UpdateThemePermissionsInput) (*quicksight.UpdateThemePermissionsOutput, error)
	UpdateThemePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateThemePermissionsInput) *QuicksightUpdateThemePermissionsFuture

	UpdateUser(ctx workflow.Context, input *quicksight.UpdateUserInput) (*quicksight.UpdateUserOutput, error)
	UpdateUserAsync(ctx workflow.Context, input *quicksight.UpdateUserInput) *QuicksightUpdateUserFuture
}

type QuickSightStub struct{}

func NewQuickSightStub() QuickSightClient {
	return &QuickSightStub{}
}

type QuicksightCancelIngestionFuture struct {
	Future workflow.Future
}

func (r *QuicksightCancelIngestionFuture) Get(ctx workflow.Context) (*quicksight.CancelIngestionOutput, error) {
	var output quicksight.CancelIngestionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateAccountCustomizationFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateAccountCustomizationFuture) Get(ctx workflow.Context) (*quicksight.CreateAccountCustomizationOutput, error) {
	var output quicksight.CreateAccountCustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateAnalysisFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateAnalysisFuture) Get(ctx workflow.Context) (*quicksight.CreateAnalysisOutput, error) {
	var output quicksight.CreateAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateDashboardFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateDashboardFuture) Get(ctx workflow.Context) (*quicksight.CreateDashboardOutput, error) {
	var output quicksight.CreateDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateDataSetFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateDataSetFuture) Get(ctx workflow.Context) (*quicksight.CreateDataSetOutput, error) {
	var output quicksight.CreateDataSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateDataSourceFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateDataSourceFuture) Get(ctx workflow.Context) (*quicksight.CreateDataSourceOutput, error) {
	var output quicksight.CreateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateGroupFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateGroupFuture) Get(ctx workflow.Context) (*quicksight.CreateGroupOutput, error) {
	var output quicksight.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateGroupMembershipFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateGroupMembershipFuture) Get(ctx workflow.Context) (*quicksight.CreateGroupMembershipOutput, error) {
	var output quicksight.CreateGroupMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateIAMPolicyAssignmentFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateIAMPolicyAssignmentFuture) Get(ctx workflow.Context) (*quicksight.CreateIAMPolicyAssignmentOutput, error) {
	var output quicksight.CreateIAMPolicyAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateIngestionFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateIngestionFuture) Get(ctx workflow.Context) (*quicksight.CreateIngestionOutput, error) {
	var output quicksight.CreateIngestionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateNamespaceFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateNamespaceFuture) Get(ctx workflow.Context) (*quicksight.CreateNamespaceOutput, error) {
	var output quicksight.CreateNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateTemplateFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateTemplateFuture) Get(ctx workflow.Context) (*quicksight.CreateTemplateOutput, error) {
	var output quicksight.CreateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateTemplateAliasFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateTemplateAliasFuture) Get(ctx workflow.Context) (*quicksight.CreateTemplateAliasOutput, error) {
	var output quicksight.CreateTemplateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateThemeFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateThemeFuture) Get(ctx workflow.Context) (*quicksight.CreateThemeOutput, error) {
	var output quicksight.CreateThemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightCreateThemeAliasFuture struct {
	Future workflow.Future
}

func (r *QuicksightCreateThemeAliasFuture) Get(ctx workflow.Context) (*quicksight.CreateThemeAliasOutput, error) {
	var output quicksight.CreateThemeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteAccountCustomizationFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteAccountCustomizationFuture) Get(ctx workflow.Context) (*quicksight.DeleteAccountCustomizationOutput, error) {
	var output quicksight.DeleteAccountCustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteAnalysisFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteAnalysisFuture) Get(ctx workflow.Context) (*quicksight.DeleteAnalysisOutput, error) {
	var output quicksight.DeleteAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteDashboardFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteDashboardFuture) Get(ctx workflow.Context) (*quicksight.DeleteDashboardOutput, error) {
	var output quicksight.DeleteDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteDataSetFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteDataSetFuture) Get(ctx workflow.Context) (*quicksight.DeleteDataSetOutput, error) {
	var output quicksight.DeleteDataSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteDataSourceFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteDataSourceFuture) Get(ctx workflow.Context) (*quicksight.DeleteDataSourceOutput, error) {
	var output quicksight.DeleteDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteGroupFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteGroupFuture) Get(ctx workflow.Context) (*quicksight.DeleteGroupOutput, error) {
	var output quicksight.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteGroupMembershipFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteGroupMembershipFuture) Get(ctx workflow.Context) (*quicksight.DeleteGroupMembershipOutput, error) {
	var output quicksight.DeleteGroupMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteIAMPolicyAssignmentFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteIAMPolicyAssignmentFuture) Get(ctx workflow.Context) (*quicksight.DeleteIAMPolicyAssignmentOutput, error) {
	var output quicksight.DeleteIAMPolicyAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteNamespaceFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteNamespaceFuture) Get(ctx workflow.Context) (*quicksight.DeleteNamespaceOutput, error) {
	var output quicksight.DeleteNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteTemplateFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteTemplateFuture) Get(ctx workflow.Context) (*quicksight.DeleteTemplateOutput, error) {
	var output quicksight.DeleteTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteTemplateAliasFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteTemplateAliasFuture) Get(ctx workflow.Context) (*quicksight.DeleteTemplateAliasOutput, error) {
	var output quicksight.DeleteTemplateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteThemeFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteThemeFuture) Get(ctx workflow.Context) (*quicksight.DeleteThemeOutput, error) {
	var output quicksight.DeleteThemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteThemeAliasFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteThemeAliasFuture) Get(ctx workflow.Context) (*quicksight.DeleteThemeAliasOutput, error) {
	var output quicksight.DeleteThemeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteUserFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteUserFuture) Get(ctx workflow.Context) (*quicksight.DeleteUserOutput, error) {
	var output quicksight.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDeleteUserByPrincipalIdFuture struct {
	Future workflow.Future
}

func (r *QuicksightDeleteUserByPrincipalIdFuture) Get(ctx workflow.Context) (*quicksight.DeleteUserByPrincipalIdOutput, error) {
	var output quicksight.DeleteUserByPrincipalIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeAccountCustomizationFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeAccountCustomizationFuture) Get(ctx workflow.Context) (*quicksight.DescribeAccountCustomizationOutput, error) {
	var output quicksight.DescribeAccountCustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeAccountSettingsFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeAccountSettingsFuture) Get(ctx workflow.Context) (*quicksight.DescribeAccountSettingsOutput, error) {
	var output quicksight.DescribeAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeAnalysisFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeAnalysisFuture) Get(ctx workflow.Context) (*quicksight.DescribeAnalysisOutput, error) {
	var output quicksight.DescribeAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeAnalysisPermissionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeAnalysisPermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeAnalysisPermissionsOutput, error) {
	var output quicksight.DescribeAnalysisPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeDashboardFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeDashboardFuture) Get(ctx workflow.Context) (*quicksight.DescribeDashboardOutput, error) {
	var output quicksight.DescribeDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeDashboardPermissionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeDashboardPermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeDashboardPermissionsOutput, error) {
	var output quicksight.DescribeDashboardPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeDataSetFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeDataSetFuture) Get(ctx workflow.Context) (*quicksight.DescribeDataSetOutput, error) {
	var output quicksight.DescribeDataSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeDataSetPermissionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeDataSetPermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeDataSetPermissionsOutput, error) {
	var output quicksight.DescribeDataSetPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeDataSourceFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeDataSourceFuture) Get(ctx workflow.Context) (*quicksight.DescribeDataSourceOutput, error) {
	var output quicksight.DescribeDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeDataSourcePermissionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeDataSourcePermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeDataSourcePermissionsOutput, error) {
	var output quicksight.DescribeDataSourcePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeGroupFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeGroupFuture) Get(ctx workflow.Context) (*quicksight.DescribeGroupOutput, error) {
	var output quicksight.DescribeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeIAMPolicyAssignmentFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeIAMPolicyAssignmentFuture) Get(ctx workflow.Context) (*quicksight.DescribeIAMPolicyAssignmentOutput, error) {
	var output quicksight.DescribeIAMPolicyAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeIngestionFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeIngestionFuture) Get(ctx workflow.Context) (*quicksight.DescribeIngestionOutput, error) {
	var output quicksight.DescribeIngestionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeNamespaceFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeNamespaceFuture) Get(ctx workflow.Context) (*quicksight.DescribeNamespaceOutput, error) {
	var output quicksight.DescribeNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeTemplateFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeTemplateFuture) Get(ctx workflow.Context) (*quicksight.DescribeTemplateOutput, error) {
	var output quicksight.DescribeTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeTemplateAliasFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeTemplateAliasFuture) Get(ctx workflow.Context) (*quicksight.DescribeTemplateAliasOutput, error) {
	var output quicksight.DescribeTemplateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeTemplatePermissionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeTemplatePermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeTemplatePermissionsOutput, error) {
	var output quicksight.DescribeTemplatePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeThemeFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeThemeFuture) Get(ctx workflow.Context) (*quicksight.DescribeThemeOutput, error) {
	var output quicksight.DescribeThemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeThemeAliasFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeThemeAliasFuture) Get(ctx workflow.Context) (*quicksight.DescribeThemeAliasOutput, error) {
	var output quicksight.DescribeThemeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeThemePermissionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeThemePermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeThemePermissionsOutput, error) {
	var output quicksight.DescribeThemePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightDescribeUserFuture struct {
	Future workflow.Future
}

func (r *QuicksightDescribeUserFuture) Get(ctx workflow.Context) (*quicksight.DescribeUserOutput, error) {
	var output quicksight.DescribeUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightGetDashboardEmbedUrlFuture struct {
	Future workflow.Future
}

func (r *QuicksightGetDashboardEmbedUrlFuture) Get(ctx workflow.Context) (*quicksight.GetDashboardEmbedUrlOutput, error) {
	var output quicksight.GetDashboardEmbedUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightGetSessionEmbedUrlFuture struct {
	Future workflow.Future
}

func (r *QuicksightGetSessionEmbedUrlFuture) Get(ctx workflow.Context) (*quicksight.GetSessionEmbedUrlOutput, error) {
	var output quicksight.GetSessionEmbedUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListAnalysesFuture struct {
	Future workflow.Future
}

func (r *QuicksightListAnalysesFuture) Get(ctx workflow.Context) (*quicksight.ListAnalysesOutput, error) {
	var output quicksight.ListAnalysesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListDashboardVersionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightListDashboardVersionsFuture) Get(ctx workflow.Context) (*quicksight.ListDashboardVersionsOutput, error) {
	var output quicksight.ListDashboardVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListDashboardsFuture struct {
	Future workflow.Future
}

func (r *QuicksightListDashboardsFuture) Get(ctx workflow.Context) (*quicksight.ListDashboardsOutput, error) {
	var output quicksight.ListDashboardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListDataSetsFuture struct {
	Future workflow.Future
}

func (r *QuicksightListDataSetsFuture) Get(ctx workflow.Context) (*quicksight.ListDataSetsOutput, error) {
	var output quicksight.ListDataSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListDataSourcesFuture struct {
	Future workflow.Future
}

func (r *QuicksightListDataSourcesFuture) Get(ctx workflow.Context) (*quicksight.ListDataSourcesOutput, error) {
	var output quicksight.ListDataSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListGroupMembershipsFuture struct {
	Future workflow.Future
}

func (r *QuicksightListGroupMembershipsFuture) Get(ctx workflow.Context) (*quicksight.ListGroupMembershipsOutput, error) {
	var output quicksight.ListGroupMembershipsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListGroupsFuture struct {
	Future workflow.Future
}

func (r *QuicksightListGroupsFuture) Get(ctx workflow.Context) (*quicksight.ListGroupsOutput, error) {
	var output quicksight.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListIAMPolicyAssignmentsFuture struct {
	Future workflow.Future
}

func (r *QuicksightListIAMPolicyAssignmentsFuture) Get(ctx workflow.Context) (*quicksight.ListIAMPolicyAssignmentsOutput, error) {
	var output quicksight.ListIAMPolicyAssignmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListIAMPolicyAssignmentsForUserFuture struct {
	Future workflow.Future
}

func (r *QuicksightListIAMPolicyAssignmentsForUserFuture) Get(ctx workflow.Context) (*quicksight.ListIAMPolicyAssignmentsForUserOutput, error) {
	var output quicksight.ListIAMPolicyAssignmentsForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListIngestionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightListIngestionsFuture) Get(ctx workflow.Context) (*quicksight.ListIngestionsOutput, error) {
	var output quicksight.ListIngestionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListNamespacesFuture struct {
	Future workflow.Future
}

func (r *QuicksightListNamespacesFuture) Get(ctx workflow.Context) (*quicksight.ListNamespacesOutput, error) {
	var output quicksight.ListNamespacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *QuicksightListTagsForResourceFuture) Get(ctx workflow.Context) (*quicksight.ListTagsForResourceOutput, error) {
	var output quicksight.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListTemplateAliasesFuture struct {
	Future workflow.Future
}

func (r *QuicksightListTemplateAliasesFuture) Get(ctx workflow.Context) (*quicksight.ListTemplateAliasesOutput, error) {
	var output quicksight.ListTemplateAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListTemplateVersionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightListTemplateVersionsFuture) Get(ctx workflow.Context) (*quicksight.ListTemplateVersionsOutput, error) {
	var output quicksight.ListTemplateVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListTemplatesFuture struct {
	Future workflow.Future
}

func (r *QuicksightListTemplatesFuture) Get(ctx workflow.Context) (*quicksight.ListTemplatesOutput, error) {
	var output quicksight.ListTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListThemeAliasesFuture struct {
	Future workflow.Future
}

func (r *QuicksightListThemeAliasesFuture) Get(ctx workflow.Context) (*quicksight.ListThemeAliasesOutput, error) {
	var output quicksight.ListThemeAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListThemeVersionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightListThemeVersionsFuture) Get(ctx workflow.Context) (*quicksight.ListThemeVersionsOutput, error) {
	var output quicksight.ListThemeVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListThemesFuture struct {
	Future workflow.Future
}

func (r *QuicksightListThemesFuture) Get(ctx workflow.Context) (*quicksight.ListThemesOutput, error) {
	var output quicksight.ListThemesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListUserGroupsFuture struct {
	Future workflow.Future
}

func (r *QuicksightListUserGroupsFuture) Get(ctx workflow.Context) (*quicksight.ListUserGroupsOutput, error) {
	var output quicksight.ListUserGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightListUsersFuture struct {
	Future workflow.Future
}

func (r *QuicksightListUsersFuture) Get(ctx workflow.Context) (*quicksight.ListUsersOutput, error) {
	var output quicksight.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightRegisterUserFuture struct {
	Future workflow.Future
}

func (r *QuicksightRegisterUserFuture) Get(ctx workflow.Context) (*quicksight.RegisterUserOutput, error) {
	var output quicksight.RegisterUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightRestoreAnalysisFuture struct {
	Future workflow.Future
}

func (r *QuicksightRestoreAnalysisFuture) Get(ctx workflow.Context) (*quicksight.RestoreAnalysisOutput, error) {
	var output quicksight.RestoreAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightSearchAnalysesFuture struct {
	Future workflow.Future
}

func (r *QuicksightSearchAnalysesFuture) Get(ctx workflow.Context) (*quicksight.SearchAnalysesOutput, error) {
	var output quicksight.SearchAnalysesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightSearchDashboardsFuture struct {
	Future workflow.Future
}

func (r *QuicksightSearchDashboardsFuture) Get(ctx workflow.Context) (*quicksight.SearchDashboardsOutput, error) {
	var output quicksight.SearchDashboardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightTagResourceFuture struct {
	Future workflow.Future
}

func (r *QuicksightTagResourceFuture) Get(ctx workflow.Context) (*quicksight.TagResourceOutput, error) {
	var output quicksight.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUntagResourceFuture struct {
	Future workflow.Future
}

func (r *QuicksightUntagResourceFuture) Get(ctx workflow.Context) (*quicksight.UntagResourceOutput, error) {
	var output quicksight.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateAccountCustomizationFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateAccountCustomizationFuture) Get(ctx workflow.Context) (*quicksight.UpdateAccountCustomizationOutput, error) {
	var output quicksight.UpdateAccountCustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateAccountSettingsFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateAccountSettingsFuture) Get(ctx workflow.Context) (*quicksight.UpdateAccountSettingsOutput, error) {
	var output quicksight.UpdateAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateAnalysisFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateAnalysisFuture) Get(ctx workflow.Context) (*quicksight.UpdateAnalysisOutput, error) {
	var output quicksight.UpdateAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateAnalysisPermissionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateAnalysisPermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateAnalysisPermissionsOutput, error) {
	var output quicksight.UpdateAnalysisPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateDashboardFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateDashboardFuture) Get(ctx workflow.Context) (*quicksight.UpdateDashboardOutput, error) {
	var output quicksight.UpdateDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateDashboardPermissionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateDashboardPermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateDashboardPermissionsOutput, error) {
	var output quicksight.UpdateDashboardPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateDashboardPublishedVersionFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateDashboardPublishedVersionFuture) Get(ctx workflow.Context) (*quicksight.UpdateDashboardPublishedVersionOutput, error) {
	var output quicksight.UpdateDashboardPublishedVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateDataSetFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateDataSetFuture) Get(ctx workflow.Context) (*quicksight.UpdateDataSetOutput, error) {
	var output quicksight.UpdateDataSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateDataSetPermissionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateDataSetPermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateDataSetPermissionsOutput, error) {
	var output quicksight.UpdateDataSetPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateDataSourceFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateDataSourceFuture) Get(ctx workflow.Context) (*quicksight.UpdateDataSourceOutput, error) {
	var output quicksight.UpdateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateDataSourcePermissionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateDataSourcePermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateDataSourcePermissionsOutput, error) {
	var output quicksight.UpdateDataSourcePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateGroupFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateGroupFuture) Get(ctx workflow.Context) (*quicksight.UpdateGroupOutput, error) {
	var output quicksight.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateIAMPolicyAssignmentFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateIAMPolicyAssignmentFuture) Get(ctx workflow.Context) (*quicksight.UpdateIAMPolicyAssignmentOutput, error) {
	var output quicksight.UpdateIAMPolicyAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateTemplateFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateTemplateFuture) Get(ctx workflow.Context) (*quicksight.UpdateTemplateOutput, error) {
	var output quicksight.UpdateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateTemplateAliasFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateTemplateAliasFuture) Get(ctx workflow.Context) (*quicksight.UpdateTemplateAliasOutput, error) {
	var output quicksight.UpdateTemplateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateTemplatePermissionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateTemplatePermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateTemplatePermissionsOutput, error) {
	var output quicksight.UpdateTemplatePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateThemeFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateThemeFuture) Get(ctx workflow.Context) (*quicksight.UpdateThemeOutput, error) {
	var output quicksight.UpdateThemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateThemeAliasFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateThemeAliasFuture) Get(ctx workflow.Context) (*quicksight.UpdateThemeAliasOutput, error) {
	var output quicksight.UpdateThemeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateThemePermissionsFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateThemePermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateThemePermissionsOutput, error) {
	var output quicksight.UpdateThemePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuicksightUpdateUserFuture struct {
	Future workflow.Future
}

func (r *QuicksightUpdateUserFuture) Get(ctx workflow.Context) (*quicksight.UpdateUserOutput, error) {
	var output quicksight.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CancelIngestion(ctx workflow.Context, input *quicksight.CancelIngestionInput) (*quicksight.CancelIngestionOutput, error) {
	var output quicksight.CancelIngestionOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CancelIngestion", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CancelIngestionAsync(ctx workflow.Context, input *quicksight.CancelIngestionInput) *QuicksightCancelIngestionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CancelIngestion", input)
	return &QuicksightCancelIngestionFuture{Future: future}
}

func (a *QuickSightStub) CreateAccountCustomization(ctx workflow.Context, input *quicksight.CreateAccountCustomizationInput) (*quicksight.CreateAccountCustomizationOutput, error) {
	var output quicksight.CreateAccountCustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateAccountCustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateAccountCustomizationAsync(ctx workflow.Context, input *quicksight.CreateAccountCustomizationInput) *QuicksightCreateAccountCustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateAccountCustomization", input)
	return &QuicksightCreateAccountCustomizationFuture{Future: future}
}

func (a *QuickSightStub) CreateAnalysis(ctx workflow.Context, input *quicksight.CreateAnalysisInput) (*quicksight.CreateAnalysisOutput, error) {
	var output quicksight.CreateAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateAnalysisAsync(ctx workflow.Context, input *quicksight.CreateAnalysisInput) *QuicksightCreateAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateAnalysis", input)
	return &QuicksightCreateAnalysisFuture{Future: future}
}

func (a *QuickSightStub) CreateDashboard(ctx workflow.Context, input *quicksight.CreateDashboardInput) (*quicksight.CreateDashboardOutput, error) {
	var output quicksight.CreateDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateDashboardAsync(ctx workflow.Context, input *quicksight.CreateDashboardInput) *QuicksightCreateDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateDashboard", input)
	return &QuicksightCreateDashboardFuture{Future: future}
}

func (a *QuickSightStub) CreateDataSet(ctx workflow.Context, input *quicksight.CreateDataSetInput) (*quicksight.CreateDataSetOutput, error) {
	var output quicksight.CreateDataSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateDataSet", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateDataSetAsync(ctx workflow.Context, input *quicksight.CreateDataSetInput) *QuicksightCreateDataSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateDataSet", input)
	return &QuicksightCreateDataSetFuture{Future: future}
}

func (a *QuickSightStub) CreateDataSource(ctx workflow.Context, input *quicksight.CreateDataSourceInput) (*quicksight.CreateDataSourceOutput, error) {
	var output quicksight.CreateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateDataSourceAsync(ctx workflow.Context, input *quicksight.CreateDataSourceInput) *QuicksightCreateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateDataSource", input)
	return &QuicksightCreateDataSourceFuture{Future: future}
}

func (a *QuickSightStub) CreateGroup(ctx workflow.Context, input *quicksight.CreateGroupInput) (*quicksight.CreateGroupOutput, error) {
	var output quicksight.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateGroupAsync(ctx workflow.Context, input *quicksight.CreateGroupInput) *QuicksightCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateGroup", input)
	return &QuicksightCreateGroupFuture{Future: future}
}

func (a *QuickSightStub) CreateGroupMembership(ctx workflow.Context, input *quicksight.CreateGroupMembershipInput) (*quicksight.CreateGroupMembershipOutput, error) {
	var output quicksight.CreateGroupMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateGroupMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateGroupMembershipAsync(ctx workflow.Context, input *quicksight.CreateGroupMembershipInput) *QuicksightCreateGroupMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateGroupMembership", input)
	return &QuicksightCreateGroupMembershipFuture{Future: future}
}

func (a *QuickSightStub) CreateIAMPolicyAssignment(ctx workflow.Context, input *quicksight.CreateIAMPolicyAssignmentInput) (*quicksight.CreateIAMPolicyAssignmentOutput, error) {
	var output quicksight.CreateIAMPolicyAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateIAMPolicyAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.CreateIAMPolicyAssignmentInput) *QuicksightCreateIAMPolicyAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateIAMPolicyAssignment", input)
	return &QuicksightCreateIAMPolicyAssignmentFuture{Future: future}
}

func (a *QuickSightStub) CreateIngestion(ctx workflow.Context, input *quicksight.CreateIngestionInput) (*quicksight.CreateIngestionOutput, error) {
	var output quicksight.CreateIngestionOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateIngestion", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateIngestionAsync(ctx workflow.Context, input *quicksight.CreateIngestionInput) *QuicksightCreateIngestionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateIngestion", input)
	return &QuicksightCreateIngestionFuture{Future: future}
}

func (a *QuickSightStub) CreateNamespace(ctx workflow.Context, input *quicksight.CreateNamespaceInput) (*quicksight.CreateNamespaceOutput, error) {
	var output quicksight.CreateNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateNamespaceAsync(ctx workflow.Context, input *quicksight.CreateNamespaceInput) *QuicksightCreateNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateNamespace", input)
	return &QuicksightCreateNamespaceFuture{Future: future}
}

func (a *QuickSightStub) CreateTemplate(ctx workflow.Context, input *quicksight.CreateTemplateInput) (*quicksight.CreateTemplateOutput, error) {
	var output quicksight.CreateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateTemplateAsync(ctx workflow.Context, input *quicksight.CreateTemplateInput) *QuicksightCreateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateTemplate", input)
	return &QuicksightCreateTemplateFuture{Future: future}
}

func (a *QuickSightStub) CreateTemplateAlias(ctx workflow.Context, input *quicksight.CreateTemplateAliasInput) (*quicksight.CreateTemplateAliasOutput, error) {
	var output quicksight.CreateTemplateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateTemplateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateTemplateAliasAsync(ctx workflow.Context, input *quicksight.CreateTemplateAliasInput) *QuicksightCreateTemplateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateTemplateAlias", input)
	return &QuicksightCreateTemplateAliasFuture{Future: future}
}

func (a *QuickSightStub) CreateTheme(ctx workflow.Context, input *quicksight.CreateThemeInput) (*quicksight.CreateThemeOutput, error) {
	var output quicksight.CreateThemeOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateTheme", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateThemeAsync(ctx workflow.Context, input *quicksight.CreateThemeInput) *QuicksightCreateThemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateTheme", input)
	return &QuicksightCreateThemeFuture{Future: future}
}

func (a *QuickSightStub) CreateThemeAlias(ctx workflow.Context, input *quicksight.CreateThemeAliasInput) (*quicksight.CreateThemeAliasOutput, error) {
	var output quicksight.CreateThemeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateThemeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateThemeAliasAsync(ctx workflow.Context, input *quicksight.CreateThemeAliasInput) *QuicksightCreateThemeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateThemeAlias", input)
	return &QuicksightCreateThemeAliasFuture{Future: future}
}

func (a *QuickSightStub) DeleteAccountCustomization(ctx workflow.Context, input *quicksight.DeleteAccountCustomizationInput) (*quicksight.DeleteAccountCustomizationOutput, error) {
	var output quicksight.DeleteAccountCustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteAccountCustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteAccountCustomizationAsync(ctx workflow.Context, input *quicksight.DeleteAccountCustomizationInput) *QuicksightDeleteAccountCustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteAccountCustomization", input)
	return &QuicksightDeleteAccountCustomizationFuture{Future: future}
}

func (a *QuickSightStub) DeleteAnalysis(ctx workflow.Context, input *quicksight.DeleteAnalysisInput) (*quicksight.DeleteAnalysisOutput, error) {
	var output quicksight.DeleteAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteAnalysisAsync(ctx workflow.Context, input *quicksight.DeleteAnalysisInput) *QuicksightDeleteAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteAnalysis", input)
	return &QuicksightDeleteAnalysisFuture{Future: future}
}

func (a *QuickSightStub) DeleteDashboard(ctx workflow.Context, input *quicksight.DeleteDashboardInput) (*quicksight.DeleteDashboardOutput, error) {
	var output quicksight.DeleteDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteDashboardAsync(ctx workflow.Context, input *quicksight.DeleteDashboardInput) *QuicksightDeleteDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteDashboard", input)
	return &QuicksightDeleteDashboardFuture{Future: future}
}

func (a *QuickSightStub) DeleteDataSet(ctx workflow.Context, input *quicksight.DeleteDataSetInput) (*quicksight.DeleteDataSetOutput, error) {
	var output quicksight.DeleteDataSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteDataSet", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteDataSetAsync(ctx workflow.Context, input *quicksight.DeleteDataSetInput) *QuicksightDeleteDataSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteDataSet", input)
	return &QuicksightDeleteDataSetFuture{Future: future}
}

func (a *QuickSightStub) DeleteDataSource(ctx workflow.Context, input *quicksight.DeleteDataSourceInput) (*quicksight.DeleteDataSourceOutput, error) {
	var output quicksight.DeleteDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteDataSourceAsync(ctx workflow.Context, input *quicksight.DeleteDataSourceInput) *QuicksightDeleteDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteDataSource", input)
	return &QuicksightDeleteDataSourceFuture{Future: future}
}

func (a *QuickSightStub) DeleteGroup(ctx workflow.Context, input *quicksight.DeleteGroupInput) (*quicksight.DeleteGroupOutput, error) {
	var output quicksight.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteGroupAsync(ctx workflow.Context, input *quicksight.DeleteGroupInput) *QuicksightDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteGroup", input)
	return &QuicksightDeleteGroupFuture{Future: future}
}

func (a *QuickSightStub) DeleteGroupMembership(ctx workflow.Context, input *quicksight.DeleteGroupMembershipInput) (*quicksight.DeleteGroupMembershipOutput, error) {
	var output quicksight.DeleteGroupMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteGroupMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteGroupMembershipAsync(ctx workflow.Context, input *quicksight.DeleteGroupMembershipInput) *QuicksightDeleteGroupMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteGroupMembership", input)
	return &QuicksightDeleteGroupMembershipFuture{Future: future}
}

func (a *QuickSightStub) DeleteIAMPolicyAssignment(ctx workflow.Context, input *quicksight.DeleteIAMPolicyAssignmentInput) (*quicksight.DeleteIAMPolicyAssignmentOutput, error) {
	var output quicksight.DeleteIAMPolicyAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteIAMPolicyAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.DeleteIAMPolicyAssignmentInput) *QuicksightDeleteIAMPolicyAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteIAMPolicyAssignment", input)
	return &QuicksightDeleteIAMPolicyAssignmentFuture{Future: future}
}

func (a *QuickSightStub) DeleteNamespace(ctx workflow.Context, input *quicksight.DeleteNamespaceInput) (*quicksight.DeleteNamespaceOutput, error) {
	var output quicksight.DeleteNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteNamespaceAsync(ctx workflow.Context, input *quicksight.DeleteNamespaceInput) *QuicksightDeleteNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteNamespace", input)
	return &QuicksightDeleteNamespaceFuture{Future: future}
}

func (a *QuickSightStub) DeleteTemplate(ctx workflow.Context, input *quicksight.DeleteTemplateInput) (*quicksight.DeleteTemplateOutput, error) {
	var output quicksight.DeleteTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteTemplateAsync(ctx workflow.Context, input *quicksight.DeleteTemplateInput) *QuicksightDeleteTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteTemplate", input)
	return &QuicksightDeleteTemplateFuture{Future: future}
}

func (a *QuickSightStub) DeleteTemplateAlias(ctx workflow.Context, input *quicksight.DeleteTemplateAliasInput) (*quicksight.DeleteTemplateAliasOutput, error) {
	var output quicksight.DeleteTemplateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteTemplateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteTemplateAliasAsync(ctx workflow.Context, input *quicksight.DeleteTemplateAliasInput) *QuicksightDeleteTemplateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteTemplateAlias", input)
	return &QuicksightDeleteTemplateAliasFuture{Future: future}
}

func (a *QuickSightStub) DeleteTheme(ctx workflow.Context, input *quicksight.DeleteThemeInput) (*quicksight.DeleteThemeOutput, error) {
	var output quicksight.DeleteThemeOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteTheme", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteThemeAsync(ctx workflow.Context, input *quicksight.DeleteThemeInput) *QuicksightDeleteThemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteTheme", input)
	return &QuicksightDeleteThemeFuture{Future: future}
}

func (a *QuickSightStub) DeleteThemeAlias(ctx workflow.Context, input *quicksight.DeleteThemeAliasInput) (*quicksight.DeleteThemeAliasOutput, error) {
	var output quicksight.DeleteThemeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteThemeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteThemeAliasAsync(ctx workflow.Context, input *quicksight.DeleteThemeAliasInput) *QuicksightDeleteThemeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteThemeAlias", input)
	return &QuicksightDeleteThemeAliasFuture{Future: future}
}

func (a *QuickSightStub) DeleteUser(ctx workflow.Context, input *quicksight.DeleteUserInput) (*quicksight.DeleteUserOutput, error) {
	var output quicksight.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteUserAsync(ctx workflow.Context, input *quicksight.DeleteUserInput) *QuicksightDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteUser", input)
	return &QuicksightDeleteUserFuture{Future: future}
}

func (a *QuickSightStub) DeleteUserByPrincipalId(ctx workflow.Context, input *quicksight.DeleteUserByPrincipalIdInput) (*quicksight.DeleteUserByPrincipalIdOutput, error) {
	var output quicksight.DeleteUserByPrincipalIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteUserByPrincipalId", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteUserByPrincipalIdAsync(ctx workflow.Context, input *quicksight.DeleteUserByPrincipalIdInput) *QuicksightDeleteUserByPrincipalIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteUserByPrincipalId", input)
	return &QuicksightDeleteUserByPrincipalIdFuture{Future: future}
}

func (a *QuickSightStub) DescribeAccountCustomization(ctx workflow.Context, input *quicksight.DescribeAccountCustomizationInput) (*quicksight.DescribeAccountCustomizationOutput, error) {
	var output quicksight.DescribeAccountCustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAccountCustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeAccountCustomizationAsync(ctx workflow.Context, input *quicksight.DescribeAccountCustomizationInput) *QuicksightDescribeAccountCustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAccountCustomization", input)
	return &QuicksightDescribeAccountCustomizationFuture{Future: future}
}

func (a *QuickSightStub) DescribeAccountSettings(ctx workflow.Context, input *quicksight.DescribeAccountSettingsInput) (*quicksight.DescribeAccountSettingsOutput, error) {
	var output quicksight.DescribeAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeAccountSettingsAsync(ctx workflow.Context, input *quicksight.DescribeAccountSettingsInput) *QuicksightDescribeAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAccountSettings", input)
	return &QuicksightDescribeAccountSettingsFuture{Future: future}
}

func (a *QuickSightStub) DescribeAnalysis(ctx workflow.Context, input *quicksight.DescribeAnalysisInput) (*quicksight.DescribeAnalysisOutput, error) {
	var output quicksight.DescribeAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeAnalysisAsync(ctx workflow.Context, input *quicksight.DescribeAnalysisInput) *QuicksightDescribeAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAnalysis", input)
	return &QuicksightDescribeAnalysisFuture{Future: future}
}

func (a *QuickSightStub) DescribeAnalysisPermissions(ctx workflow.Context, input *quicksight.DescribeAnalysisPermissionsInput) (*quicksight.DescribeAnalysisPermissionsOutput, error) {
	var output quicksight.DescribeAnalysisPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAnalysisPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeAnalysisPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeAnalysisPermissionsInput) *QuicksightDescribeAnalysisPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAnalysisPermissions", input)
	return &QuicksightDescribeAnalysisPermissionsFuture{Future: future}
}

func (a *QuickSightStub) DescribeDashboard(ctx workflow.Context, input *quicksight.DescribeDashboardInput) (*quicksight.DescribeDashboardOutput, error) {
	var output quicksight.DescribeDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeDashboardAsync(ctx workflow.Context, input *quicksight.DescribeDashboardInput) *QuicksightDescribeDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDashboard", input)
	return &QuicksightDescribeDashboardFuture{Future: future}
}

func (a *QuickSightStub) DescribeDashboardPermissions(ctx workflow.Context, input *quicksight.DescribeDashboardPermissionsInput) (*quicksight.DescribeDashboardPermissionsOutput, error) {
	var output quicksight.DescribeDashboardPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDashboardPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeDashboardPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDashboardPermissionsInput) *QuicksightDescribeDashboardPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDashboardPermissions", input)
	return &QuicksightDescribeDashboardPermissionsFuture{Future: future}
}

func (a *QuickSightStub) DescribeDataSet(ctx workflow.Context, input *quicksight.DescribeDataSetInput) (*quicksight.DescribeDataSetOutput, error) {
	var output quicksight.DescribeDataSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSet", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeDataSetAsync(ctx workflow.Context, input *quicksight.DescribeDataSetInput) *QuicksightDescribeDataSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSet", input)
	return &QuicksightDescribeDataSetFuture{Future: future}
}

func (a *QuickSightStub) DescribeDataSetPermissions(ctx workflow.Context, input *quicksight.DescribeDataSetPermissionsInput) (*quicksight.DescribeDataSetPermissionsOutput, error) {
	var output quicksight.DescribeDataSetPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSetPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeDataSetPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDataSetPermissionsInput) *QuicksightDescribeDataSetPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSetPermissions", input)
	return &QuicksightDescribeDataSetPermissionsFuture{Future: future}
}

func (a *QuickSightStub) DescribeDataSource(ctx workflow.Context, input *quicksight.DescribeDataSourceInput) (*quicksight.DescribeDataSourceOutput, error) {
	var output quicksight.DescribeDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeDataSourceAsync(ctx workflow.Context, input *quicksight.DescribeDataSourceInput) *QuicksightDescribeDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSource", input)
	return &QuicksightDescribeDataSourceFuture{Future: future}
}

func (a *QuickSightStub) DescribeDataSourcePermissions(ctx workflow.Context, input *quicksight.DescribeDataSourcePermissionsInput) (*quicksight.DescribeDataSourcePermissionsOutput, error) {
	var output quicksight.DescribeDataSourcePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSourcePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeDataSourcePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDataSourcePermissionsInput) *QuicksightDescribeDataSourcePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSourcePermissions", input)
	return &QuicksightDescribeDataSourcePermissionsFuture{Future: future}
}

func (a *QuickSightStub) DescribeGroup(ctx workflow.Context, input *quicksight.DescribeGroupInput) (*quicksight.DescribeGroupOutput, error) {
	var output quicksight.DescribeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeGroupAsync(ctx workflow.Context, input *quicksight.DescribeGroupInput) *QuicksightDescribeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeGroup", input)
	return &QuicksightDescribeGroupFuture{Future: future}
}

func (a *QuickSightStub) DescribeIAMPolicyAssignment(ctx workflow.Context, input *quicksight.DescribeIAMPolicyAssignmentInput) (*quicksight.DescribeIAMPolicyAssignmentOutput, error) {
	var output quicksight.DescribeIAMPolicyAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeIAMPolicyAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.DescribeIAMPolicyAssignmentInput) *QuicksightDescribeIAMPolicyAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeIAMPolicyAssignment", input)
	return &QuicksightDescribeIAMPolicyAssignmentFuture{Future: future}
}

func (a *QuickSightStub) DescribeIngestion(ctx workflow.Context, input *quicksight.DescribeIngestionInput) (*quicksight.DescribeIngestionOutput, error) {
	var output quicksight.DescribeIngestionOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeIngestion", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeIngestionAsync(ctx workflow.Context, input *quicksight.DescribeIngestionInput) *QuicksightDescribeIngestionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeIngestion", input)
	return &QuicksightDescribeIngestionFuture{Future: future}
}

func (a *QuickSightStub) DescribeNamespace(ctx workflow.Context, input *quicksight.DescribeNamespaceInput) (*quicksight.DescribeNamespaceOutput, error) {
	var output quicksight.DescribeNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeNamespaceAsync(ctx workflow.Context, input *quicksight.DescribeNamespaceInput) *QuicksightDescribeNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeNamespace", input)
	return &QuicksightDescribeNamespaceFuture{Future: future}
}

func (a *QuickSightStub) DescribeTemplate(ctx workflow.Context, input *quicksight.DescribeTemplateInput) (*quicksight.DescribeTemplateOutput, error) {
	var output quicksight.DescribeTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeTemplateAsync(ctx workflow.Context, input *quicksight.DescribeTemplateInput) *QuicksightDescribeTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTemplate", input)
	return &QuicksightDescribeTemplateFuture{Future: future}
}

func (a *QuickSightStub) DescribeTemplateAlias(ctx workflow.Context, input *quicksight.DescribeTemplateAliasInput) (*quicksight.DescribeTemplateAliasOutput, error) {
	var output quicksight.DescribeTemplateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTemplateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeTemplateAliasAsync(ctx workflow.Context, input *quicksight.DescribeTemplateAliasInput) *QuicksightDescribeTemplateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTemplateAlias", input)
	return &QuicksightDescribeTemplateAliasFuture{Future: future}
}

func (a *QuickSightStub) DescribeTemplatePermissions(ctx workflow.Context, input *quicksight.DescribeTemplatePermissionsInput) (*quicksight.DescribeTemplatePermissionsOutput, error) {
	var output quicksight.DescribeTemplatePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTemplatePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeTemplatePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeTemplatePermissionsInput) *QuicksightDescribeTemplatePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTemplatePermissions", input)
	return &QuicksightDescribeTemplatePermissionsFuture{Future: future}
}

func (a *QuickSightStub) DescribeTheme(ctx workflow.Context, input *quicksight.DescribeThemeInput) (*quicksight.DescribeThemeOutput, error) {
	var output quicksight.DescribeThemeOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTheme", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeThemeAsync(ctx workflow.Context, input *quicksight.DescribeThemeInput) *QuicksightDescribeThemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTheme", input)
	return &QuicksightDescribeThemeFuture{Future: future}
}

func (a *QuickSightStub) DescribeThemeAlias(ctx workflow.Context, input *quicksight.DescribeThemeAliasInput) (*quicksight.DescribeThemeAliasOutput, error) {
	var output quicksight.DescribeThemeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeThemeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeThemeAliasAsync(ctx workflow.Context, input *quicksight.DescribeThemeAliasInput) *QuicksightDescribeThemeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeThemeAlias", input)
	return &QuicksightDescribeThemeAliasFuture{Future: future}
}

func (a *QuickSightStub) DescribeThemePermissions(ctx workflow.Context, input *quicksight.DescribeThemePermissionsInput) (*quicksight.DescribeThemePermissionsOutput, error) {
	var output quicksight.DescribeThemePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeThemePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeThemePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeThemePermissionsInput) *QuicksightDescribeThemePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeThemePermissions", input)
	return &QuicksightDescribeThemePermissionsFuture{Future: future}
}

func (a *QuickSightStub) DescribeUser(ctx workflow.Context, input *quicksight.DescribeUserInput) (*quicksight.DescribeUserOutput, error) {
	var output quicksight.DescribeUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeUser", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeUserAsync(ctx workflow.Context, input *quicksight.DescribeUserInput) *QuicksightDescribeUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeUser", input)
	return &QuicksightDescribeUserFuture{Future: future}
}

func (a *QuickSightStub) GetDashboardEmbedUrl(ctx workflow.Context, input *quicksight.GetDashboardEmbedUrlInput) (*quicksight.GetDashboardEmbedUrlOutput, error) {
	var output quicksight.GetDashboardEmbedUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.GetDashboardEmbedUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) GetDashboardEmbedUrlAsync(ctx workflow.Context, input *quicksight.GetDashboardEmbedUrlInput) *QuicksightGetDashboardEmbedUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.GetDashboardEmbedUrl", input)
	return &QuicksightGetDashboardEmbedUrlFuture{Future: future}
}

func (a *QuickSightStub) GetSessionEmbedUrl(ctx workflow.Context, input *quicksight.GetSessionEmbedUrlInput) (*quicksight.GetSessionEmbedUrlOutput, error) {
	var output quicksight.GetSessionEmbedUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.GetSessionEmbedUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) GetSessionEmbedUrlAsync(ctx workflow.Context, input *quicksight.GetSessionEmbedUrlInput) *QuicksightGetSessionEmbedUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.GetSessionEmbedUrl", input)
	return &QuicksightGetSessionEmbedUrlFuture{Future: future}
}

func (a *QuickSightStub) ListAnalyses(ctx workflow.Context, input *quicksight.ListAnalysesInput) (*quicksight.ListAnalysesOutput, error) {
	var output quicksight.ListAnalysesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListAnalyses", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListAnalysesAsync(ctx workflow.Context, input *quicksight.ListAnalysesInput) *QuicksightListAnalysesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListAnalyses", input)
	return &QuicksightListAnalysesFuture{Future: future}
}

func (a *QuickSightStub) ListDashboardVersions(ctx workflow.Context, input *quicksight.ListDashboardVersionsInput) (*quicksight.ListDashboardVersionsOutput, error) {
	var output quicksight.ListDashboardVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDashboardVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListDashboardVersionsAsync(ctx workflow.Context, input *quicksight.ListDashboardVersionsInput) *QuicksightListDashboardVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDashboardVersions", input)
	return &QuicksightListDashboardVersionsFuture{Future: future}
}

func (a *QuickSightStub) ListDashboards(ctx workflow.Context, input *quicksight.ListDashboardsInput) (*quicksight.ListDashboardsOutput, error) {
	var output quicksight.ListDashboardsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDashboards", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListDashboardsAsync(ctx workflow.Context, input *quicksight.ListDashboardsInput) *QuicksightListDashboardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDashboards", input)
	return &QuicksightListDashboardsFuture{Future: future}
}

func (a *QuickSightStub) ListDataSets(ctx workflow.Context, input *quicksight.ListDataSetsInput) (*quicksight.ListDataSetsOutput, error) {
	var output quicksight.ListDataSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDataSets", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListDataSetsAsync(ctx workflow.Context, input *quicksight.ListDataSetsInput) *QuicksightListDataSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDataSets", input)
	return &QuicksightListDataSetsFuture{Future: future}
}

func (a *QuickSightStub) ListDataSources(ctx workflow.Context, input *quicksight.ListDataSourcesInput) (*quicksight.ListDataSourcesOutput, error) {
	var output quicksight.ListDataSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDataSources", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListDataSourcesAsync(ctx workflow.Context, input *quicksight.ListDataSourcesInput) *QuicksightListDataSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDataSources", input)
	return &QuicksightListDataSourcesFuture{Future: future}
}

func (a *QuickSightStub) ListGroupMemberships(ctx workflow.Context, input *quicksight.ListGroupMembershipsInput) (*quicksight.ListGroupMembershipsOutput, error) {
	var output quicksight.ListGroupMembershipsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListGroupMemberships", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListGroupMembershipsAsync(ctx workflow.Context, input *quicksight.ListGroupMembershipsInput) *QuicksightListGroupMembershipsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListGroupMemberships", input)
	return &QuicksightListGroupMembershipsFuture{Future: future}
}

func (a *QuickSightStub) ListGroups(ctx workflow.Context, input *quicksight.ListGroupsInput) (*quicksight.ListGroupsOutput, error) {
	var output quicksight.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListGroupsAsync(ctx workflow.Context, input *quicksight.ListGroupsInput) *QuicksightListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListGroups", input)
	return &QuicksightListGroupsFuture{Future: future}
}

func (a *QuickSightStub) ListIAMPolicyAssignments(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsInput) (*quicksight.ListIAMPolicyAssignmentsOutput, error) {
	var output quicksight.ListIAMPolicyAssignmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListIAMPolicyAssignments", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListIAMPolicyAssignmentsAsync(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsInput) *QuicksightListIAMPolicyAssignmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListIAMPolicyAssignments", input)
	return &QuicksightListIAMPolicyAssignmentsFuture{Future: future}
}

func (a *QuickSightStub) ListIAMPolicyAssignmentsForUser(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsForUserInput) (*quicksight.ListIAMPolicyAssignmentsForUserOutput, error) {
	var output quicksight.ListIAMPolicyAssignmentsForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListIAMPolicyAssignmentsForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListIAMPolicyAssignmentsForUserAsync(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsForUserInput) *QuicksightListIAMPolicyAssignmentsForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListIAMPolicyAssignmentsForUser", input)
	return &QuicksightListIAMPolicyAssignmentsForUserFuture{Future: future}
}

func (a *QuickSightStub) ListIngestions(ctx workflow.Context, input *quicksight.ListIngestionsInput) (*quicksight.ListIngestionsOutput, error) {
	var output quicksight.ListIngestionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListIngestions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListIngestionsAsync(ctx workflow.Context, input *quicksight.ListIngestionsInput) *QuicksightListIngestionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListIngestions", input)
	return &QuicksightListIngestionsFuture{Future: future}
}

func (a *QuickSightStub) ListNamespaces(ctx workflow.Context, input *quicksight.ListNamespacesInput) (*quicksight.ListNamespacesOutput, error) {
	var output quicksight.ListNamespacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListNamespaces", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListNamespacesAsync(ctx workflow.Context, input *quicksight.ListNamespacesInput) *QuicksightListNamespacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListNamespaces", input)
	return &QuicksightListNamespacesFuture{Future: future}
}

func (a *QuickSightStub) ListTagsForResource(ctx workflow.Context, input *quicksight.ListTagsForResourceInput) (*quicksight.ListTagsForResourceOutput, error) {
	var output quicksight.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListTagsForResourceAsync(ctx workflow.Context, input *quicksight.ListTagsForResourceInput) *QuicksightListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTagsForResource", input)
	return &QuicksightListTagsForResourceFuture{Future: future}
}

func (a *QuickSightStub) ListTemplateAliases(ctx workflow.Context, input *quicksight.ListTemplateAliasesInput) (*quicksight.ListTemplateAliasesOutput, error) {
	var output quicksight.ListTemplateAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTemplateAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListTemplateAliasesAsync(ctx workflow.Context, input *quicksight.ListTemplateAliasesInput) *QuicksightListTemplateAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTemplateAliases", input)
	return &QuicksightListTemplateAliasesFuture{Future: future}
}

func (a *QuickSightStub) ListTemplateVersions(ctx workflow.Context, input *quicksight.ListTemplateVersionsInput) (*quicksight.ListTemplateVersionsOutput, error) {
	var output quicksight.ListTemplateVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTemplateVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListTemplateVersionsAsync(ctx workflow.Context, input *quicksight.ListTemplateVersionsInput) *QuicksightListTemplateVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTemplateVersions", input)
	return &QuicksightListTemplateVersionsFuture{Future: future}
}

func (a *QuickSightStub) ListTemplates(ctx workflow.Context, input *quicksight.ListTemplatesInput) (*quicksight.ListTemplatesOutput, error) {
	var output quicksight.ListTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListTemplatesAsync(ctx workflow.Context, input *quicksight.ListTemplatesInput) *QuicksightListTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTemplates", input)
	return &QuicksightListTemplatesFuture{Future: future}
}

func (a *QuickSightStub) ListThemeAliases(ctx workflow.Context, input *quicksight.ListThemeAliasesInput) (*quicksight.ListThemeAliasesOutput, error) {
	var output quicksight.ListThemeAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListThemeAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListThemeAliasesAsync(ctx workflow.Context, input *quicksight.ListThemeAliasesInput) *QuicksightListThemeAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListThemeAliases", input)
	return &QuicksightListThemeAliasesFuture{Future: future}
}

func (a *QuickSightStub) ListThemeVersions(ctx workflow.Context, input *quicksight.ListThemeVersionsInput) (*quicksight.ListThemeVersionsOutput, error) {
	var output quicksight.ListThemeVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListThemeVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListThemeVersionsAsync(ctx workflow.Context, input *quicksight.ListThemeVersionsInput) *QuicksightListThemeVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListThemeVersions", input)
	return &QuicksightListThemeVersionsFuture{Future: future}
}

func (a *QuickSightStub) ListThemes(ctx workflow.Context, input *quicksight.ListThemesInput) (*quicksight.ListThemesOutput, error) {
	var output quicksight.ListThemesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListThemes", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListThemesAsync(ctx workflow.Context, input *quicksight.ListThemesInput) *QuicksightListThemesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListThemes", input)
	return &QuicksightListThemesFuture{Future: future}
}

func (a *QuickSightStub) ListUserGroups(ctx workflow.Context, input *quicksight.ListUserGroupsInput) (*quicksight.ListUserGroupsOutput, error) {
	var output quicksight.ListUserGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListUserGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListUserGroupsAsync(ctx workflow.Context, input *quicksight.ListUserGroupsInput) *QuicksightListUserGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListUserGroups", input)
	return &QuicksightListUserGroupsFuture{Future: future}
}

func (a *QuickSightStub) ListUsers(ctx workflow.Context, input *quicksight.ListUsersInput) (*quicksight.ListUsersOutput, error) {
	var output quicksight.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListUsersAsync(ctx workflow.Context, input *quicksight.ListUsersInput) *QuicksightListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListUsers", input)
	return &QuicksightListUsersFuture{Future: future}
}

func (a *QuickSightStub) RegisterUser(ctx workflow.Context, input *quicksight.RegisterUserInput) (*quicksight.RegisterUserOutput, error) {
	var output quicksight.RegisterUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.RegisterUser", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) RegisterUserAsync(ctx workflow.Context, input *quicksight.RegisterUserInput) *QuicksightRegisterUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.RegisterUser", input)
	return &QuicksightRegisterUserFuture{Future: future}
}

func (a *QuickSightStub) RestoreAnalysis(ctx workflow.Context, input *quicksight.RestoreAnalysisInput) (*quicksight.RestoreAnalysisOutput, error) {
	var output quicksight.RestoreAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.RestoreAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) RestoreAnalysisAsync(ctx workflow.Context, input *quicksight.RestoreAnalysisInput) *QuicksightRestoreAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.RestoreAnalysis", input)
	return &QuicksightRestoreAnalysisFuture{Future: future}
}

func (a *QuickSightStub) SearchAnalyses(ctx workflow.Context, input *quicksight.SearchAnalysesInput) (*quicksight.SearchAnalysesOutput, error) {
	var output quicksight.SearchAnalysesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.SearchAnalyses", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) SearchAnalysesAsync(ctx workflow.Context, input *quicksight.SearchAnalysesInput) *QuicksightSearchAnalysesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.SearchAnalyses", input)
	return &QuicksightSearchAnalysesFuture{Future: future}
}

func (a *QuickSightStub) SearchDashboards(ctx workflow.Context, input *quicksight.SearchDashboardsInput) (*quicksight.SearchDashboardsOutput, error) {
	var output quicksight.SearchDashboardsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.SearchDashboards", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) SearchDashboardsAsync(ctx workflow.Context, input *quicksight.SearchDashboardsInput) *QuicksightSearchDashboardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.SearchDashboards", input)
	return &QuicksightSearchDashboardsFuture{Future: future}
}

func (a *QuickSightStub) TagResource(ctx workflow.Context, input *quicksight.TagResourceInput) (*quicksight.TagResourceOutput, error) {
	var output quicksight.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) TagResourceAsync(ctx workflow.Context, input *quicksight.TagResourceInput) *QuicksightTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.TagResource", input)
	return &QuicksightTagResourceFuture{Future: future}
}

func (a *QuickSightStub) UntagResource(ctx workflow.Context, input *quicksight.UntagResourceInput) (*quicksight.UntagResourceOutput, error) {
	var output quicksight.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UntagResourceAsync(ctx workflow.Context, input *quicksight.UntagResourceInput) *QuicksightUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UntagResource", input)
	return &QuicksightUntagResourceFuture{Future: future}
}

func (a *QuickSightStub) UpdateAccountCustomization(ctx workflow.Context, input *quicksight.UpdateAccountCustomizationInput) (*quicksight.UpdateAccountCustomizationOutput, error) {
	var output quicksight.UpdateAccountCustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAccountCustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateAccountCustomizationAsync(ctx workflow.Context, input *quicksight.UpdateAccountCustomizationInput) *QuicksightUpdateAccountCustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAccountCustomization", input)
	return &QuicksightUpdateAccountCustomizationFuture{Future: future}
}

func (a *QuickSightStub) UpdateAccountSettings(ctx workflow.Context, input *quicksight.UpdateAccountSettingsInput) (*quicksight.UpdateAccountSettingsOutput, error) {
	var output quicksight.UpdateAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateAccountSettingsAsync(ctx workflow.Context, input *quicksight.UpdateAccountSettingsInput) *QuicksightUpdateAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAccountSettings", input)
	return &QuicksightUpdateAccountSettingsFuture{Future: future}
}

func (a *QuickSightStub) UpdateAnalysis(ctx workflow.Context, input *quicksight.UpdateAnalysisInput) (*quicksight.UpdateAnalysisOutput, error) {
	var output quicksight.UpdateAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateAnalysisAsync(ctx workflow.Context, input *quicksight.UpdateAnalysisInput) *QuicksightUpdateAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAnalysis", input)
	return &QuicksightUpdateAnalysisFuture{Future: future}
}

func (a *QuickSightStub) UpdateAnalysisPermissions(ctx workflow.Context, input *quicksight.UpdateAnalysisPermissionsInput) (*quicksight.UpdateAnalysisPermissionsOutput, error) {
	var output quicksight.UpdateAnalysisPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAnalysisPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateAnalysisPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateAnalysisPermissionsInput) *QuicksightUpdateAnalysisPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAnalysisPermissions", input)
	return &QuicksightUpdateAnalysisPermissionsFuture{Future: future}
}

func (a *QuickSightStub) UpdateDashboard(ctx workflow.Context, input *quicksight.UpdateDashboardInput) (*quicksight.UpdateDashboardOutput, error) {
	var output quicksight.UpdateDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDashboardAsync(ctx workflow.Context, input *quicksight.UpdateDashboardInput) *QuicksightUpdateDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDashboard", input)
	return &QuicksightUpdateDashboardFuture{Future: future}
}

func (a *QuickSightStub) UpdateDashboardPermissions(ctx workflow.Context, input *quicksight.UpdateDashboardPermissionsInput) (*quicksight.UpdateDashboardPermissionsOutput, error) {
	var output quicksight.UpdateDashboardPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDashboardPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDashboardPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDashboardPermissionsInput) *QuicksightUpdateDashboardPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDashboardPermissions", input)
	return &QuicksightUpdateDashboardPermissionsFuture{Future: future}
}

func (a *QuickSightStub) UpdateDashboardPublishedVersion(ctx workflow.Context, input *quicksight.UpdateDashboardPublishedVersionInput) (*quicksight.UpdateDashboardPublishedVersionOutput, error) {
	var output quicksight.UpdateDashboardPublishedVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDashboardPublishedVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDashboardPublishedVersionAsync(ctx workflow.Context, input *quicksight.UpdateDashboardPublishedVersionInput) *QuicksightUpdateDashboardPublishedVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDashboardPublishedVersion", input)
	return &QuicksightUpdateDashboardPublishedVersionFuture{Future: future}
}

func (a *QuickSightStub) UpdateDataSet(ctx workflow.Context, input *quicksight.UpdateDataSetInput) (*quicksight.UpdateDataSetOutput, error) {
	var output quicksight.UpdateDataSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSet", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDataSetAsync(ctx workflow.Context, input *quicksight.UpdateDataSetInput) *QuicksightUpdateDataSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSet", input)
	return &QuicksightUpdateDataSetFuture{Future: future}
}

func (a *QuickSightStub) UpdateDataSetPermissions(ctx workflow.Context, input *quicksight.UpdateDataSetPermissionsInput) (*quicksight.UpdateDataSetPermissionsOutput, error) {
	var output quicksight.UpdateDataSetPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSetPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDataSetPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDataSetPermissionsInput) *QuicksightUpdateDataSetPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSetPermissions", input)
	return &QuicksightUpdateDataSetPermissionsFuture{Future: future}
}

func (a *QuickSightStub) UpdateDataSource(ctx workflow.Context, input *quicksight.UpdateDataSourceInput) (*quicksight.UpdateDataSourceOutput, error) {
	var output quicksight.UpdateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDataSourceAsync(ctx workflow.Context, input *quicksight.UpdateDataSourceInput) *QuicksightUpdateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSource", input)
	return &QuicksightUpdateDataSourceFuture{Future: future}
}

func (a *QuickSightStub) UpdateDataSourcePermissions(ctx workflow.Context, input *quicksight.UpdateDataSourcePermissionsInput) (*quicksight.UpdateDataSourcePermissionsOutput, error) {
	var output quicksight.UpdateDataSourcePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSourcePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDataSourcePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDataSourcePermissionsInput) *QuicksightUpdateDataSourcePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSourcePermissions", input)
	return &QuicksightUpdateDataSourcePermissionsFuture{Future: future}
}

func (a *QuickSightStub) UpdateGroup(ctx workflow.Context, input *quicksight.UpdateGroupInput) (*quicksight.UpdateGroupOutput, error) {
	var output quicksight.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateGroupAsync(ctx workflow.Context, input *quicksight.UpdateGroupInput) *QuicksightUpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateGroup", input)
	return &QuicksightUpdateGroupFuture{Future: future}
}

func (a *QuickSightStub) UpdateIAMPolicyAssignment(ctx workflow.Context, input *quicksight.UpdateIAMPolicyAssignmentInput) (*quicksight.UpdateIAMPolicyAssignmentOutput, error) {
	var output quicksight.UpdateIAMPolicyAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateIAMPolicyAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.UpdateIAMPolicyAssignmentInput) *QuicksightUpdateIAMPolicyAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateIAMPolicyAssignment", input)
	return &QuicksightUpdateIAMPolicyAssignmentFuture{Future: future}
}

func (a *QuickSightStub) UpdateTemplate(ctx workflow.Context, input *quicksight.UpdateTemplateInput) (*quicksight.UpdateTemplateOutput, error) {
	var output quicksight.UpdateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateTemplateAsync(ctx workflow.Context, input *quicksight.UpdateTemplateInput) *QuicksightUpdateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTemplate", input)
	return &QuicksightUpdateTemplateFuture{Future: future}
}

func (a *QuickSightStub) UpdateTemplateAlias(ctx workflow.Context, input *quicksight.UpdateTemplateAliasInput) (*quicksight.UpdateTemplateAliasOutput, error) {
	var output quicksight.UpdateTemplateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTemplateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateTemplateAliasAsync(ctx workflow.Context, input *quicksight.UpdateTemplateAliasInput) *QuicksightUpdateTemplateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTemplateAlias", input)
	return &QuicksightUpdateTemplateAliasFuture{Future: future}
}

func (a *QuickSightStub) UpdateTemplatePermissions(ctx workflow.Context, input *quicksight.UpdateTemplatePermissionsInput) (*quicksight.UpdateTemplatePermissionsOutput, error) {
	var output quicksight.UpdateTemplatePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTemplatePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateTemplatePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateTemplatePermissionsInput) *QuicksightUpdateTemplatePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTemplatePermissions", input)
	return &QuicksightUpdateTemplatePermissionsFuture{Future: future}
}

func (a *QuickSightStub) UpdateTheme(ctx workflow.Context, input *quicksight.UpdateThemeInput) (*quicksight.UpdateThemeOutput, error) {
	var output quicksight.UpdateThemeOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTheme", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateThemeAsync(ctx workflow.Context, input *quicksight.UpdateThemeInput) *QuicksightUpdateThemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTheme", input)
	return &QuicksightUpdateThemeFuture{Future: future}
}

func (a *QuickSightStub) UpdateThemeAlias(ctx workflow.Context, input *quicksight.UpdateThemeAliasInput) (*quicksight.UpdateThemeAliasOutput, error) {
	var output quicksight.UpdateThemeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateThemeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateThemeAliasAsync(ctx workflow.Context, input *quicksight.UpdateThemeAliasInput) *QuicksightUpdateThemeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateThemeAlias", input)
	return &QuicksightUpdateThemeAliasFuture{Future: future}
}

func (a *QuickSightStub) UpdateThemePermissions(ctx workflow.Context, input *quicksight.UpdateThemePermissionsInput) (*quicksight.UpdateThemePermissionsOutput, error) {
	var output quicksight.UpdateThemePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateThemePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateThemePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateThemePermissionsInput) *QuicksightUpdateThemePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateThemePermissions", input)
	return &QuicksightUpdateThemePermissionsFuture{Future: future}
}

func (a *QuickSightStub) UpdateUser(ctx workflow.Context, input *quicksight.UpdateUserInput) (*quicksight.UpdateUserOutput, error) {
	var output quicksight.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateUserAsync(ctx workflow.Context, input *quicksight.UpdateUserInput) *QuicksightUpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateUser", input)
	return &QuicksightUpdateUserFuture{Future: future}
}
