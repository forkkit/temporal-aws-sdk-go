// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/quicksight"
	"go.temporal.io/sdk/workflow"
)

type QuickSightClient interface {
	CancelIngestion(ctx workflow.Context, input *quicksight.CancelIngestionInput) (*quicksight.CancelIngestionOutput, error)
	CancelIngestionAsync(ctx workflow.Context, input *quicksight.CancelIngestionInput) *QuickSightCancelIngestionFuture

	CreateAccountCustomization(ctx workflow.Context, input *quicksight.CreateAccountCustomizationInput) (*quicksight.CreateAccountCustomizationOutput, error)
	CreateAccountCustomizationAsync(ctx workflow.Context, input *quicksight.CreateAccountCustomizationInput) *QuickSightCreateAccountCustomizationFuture

	CreateAnalysis(ctx workflow.Context, input *quicksight.CreateAnalysisInput) (*quicksight.CreateAnalysisOutput, error)
	CreateAnalysisAsync(ctx workflow.Context, input *quicksight.CreateAnalysisInput) *QuickSightCreateAnalysisFuture

	CreateDashboard(ctx workflow.Context, input *quicksight.CreateDashboardInput) (*quicksight.CreateDashboardOutput, error)
	CreateDashboardAsync(ctx workflow.Context, input *quicksight.CreateDashboardInput) *QuickSightCreateDashboardFuture

	CreateDataSet(ctx workflow.Context, input *quicksight.CreateDataSetInput) (*quicksight.CreateDataSetOutput, error)
	CreateDataSetAsync(ctx workflow.Context, input *quicksight.CreateDataSetInput) *QuickSightCreateDataSetFuture

	CreateDataSource(ctx workflow.Context, input *quicksight.CreateDataSourceInput) (*quicksight.CreateDataSourceOutput, error)
	CreateDataSourceAsync(ctx workflow.Context, input *quicksight.CreateDataSourceInput) *QuickSightCreateDataSourceFuture

	CreateGroup(ctx workflow.Context, input *quicksight.CreateGroupInput) (*quicksight.CreateGroupOutput, error)
	CreateGroupAsync(ctx workflow.Context, input *quicksight.CreateGroupInput) *QuickSightCreateGroupFuture

	CreateGroupMembership(ctx workflow.Context, input *quicksight.CreateGroupMembershipInput) (*quicksight.CreateGroupMembershipOutput, error)
	CreateGroupMembershipAsync(ctx workflow.Context, input *quicksight.CreateGroupMembershipInput) *QuickSightCreateGroupMembershipFuture

	CreateIAMPolicyAssignment(ctx workflow.Context, input *quicksight.CreateIAMPolicyAssignmentInput) (*quicksight.CreateIAMPolicyAssignmentOutput, error)
	CreateIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.CreateIAMPolicyAssignmentInput) *QuickSightCreateIAMPolicyAssignmentFuture

	CreateIngestion(ctx workflow.Context, input *quicksight.CreateIngestionInput) (*quicksight.CreateIngestionOutput, error)
	CreateIngestionAsync(ctx workflow.Context, input *quicksight.CreateIngestionInput) *QuickSightCreateIngestionFuture

	CreateNamespace(ctx workflow.Context, input *quicksight.CreateNamespaceInput) (*quicksight.CreateNamespaceOutput, error)
	CreateNamespaceAsync(ctx workflow.Context, input *quicksight.CreateNamespaceInput) *QuickSightCreateNamespaceFuture

	CreateTemplate(ctx workflow.Context, input *quicksight.CreateTemplateInput) (*quicksight.CreateTemplateOutput, error)
	CreateTemplateAsync(ctx workflow.Context, input *quicksight.CreateTemplateInput) *QuickSightCreateTemplateFuture

	CreateTemplateAlias(ctx workflow.Context, input *quicksight.CreateTemplateAliasInput) (*quicksight.CreateTemplateAliasOutput, error)
	CreateTemplateAliasAsync(ctx workflow.Context, input *quicksight.CreateTemplateAliasInput) *QuickSightCreateTemplateAliasFuture

	CreateTheme(ctx workflow.Context, input *quicksight.CreateThemeInput) (*quicksight.CreateThemeOutput, error)
	CreateThemeAsync(ctx workflow.Context, input *quicksight.CreateThemeInput) *QuickSightCreateThemeFuture

	CreateThemeAlias(ctx workflow.Context, input *quicksight.CreateThemeAliasInput) (*quicksight.CreateThemeAliasOutput, error)
	CreateThemeAliasAsync(ctx workflow.Context, input *quicksight.CreateThemeAliasInput) *QuickSightCreateThemeAliasFuture

	DeleteAccountCustomization(ctx workflow.Context, input *quicksight.DeleteAccountCustomizationInput) (*quicksight.DeleteAccountCustomizationOutput, error)
	DeleteAccountCustomizationAsync(ctx workflow.Context, input *quicksight.DeleteAccountCustomizationInput) *QuickSightDeleteAccountCustomizationFuture

	DeleteAnalysis(ctx workflow.Context, input *quicksight.DeleteAnalysisInput) (*quicksight.DeleteAnalysisOutput, error)
	DeleteAnalysisAsync(ctx workflow.Context, input *quicksight.DeleteAnalysisInput) *QuickSightDeleteAnalysisFuture

	DeleteDashboard(ctx workflow.Context, input *quicksight.DeleteDashboardInput) (*quicksight.DeleteDashboardOutput, error)
	DeleteDashboardAsync(ctx workflow.Context, input *quicksight.DeleteDashboardInput) *QuickSightDeleteDashboardFuture

	DeleteDataSet(ctx workflow.Context, input *quicksight.DeleteDataSetInput) (*quicksight.DeleteDataSetOutput, error)
	DeleteDataSetAsync(ctx workflow.Context, input *quicksight.DeleteDataSetInput) *QuickSightDeleteDataSetFuture

	DeleteDataSource(ctx workflow.Context, input *quicksight.DeleteDataSourceInput) (*quicksight.DeleteDataSourceOutput, error)
	DeleteDataSourceAsync(ctx workflow.Context, input *quicksight.DeleteDataSourceInput) *QuickSightDeleteDataSourceFuture

	DeleteGroup(ctx workflow.Context, input *quicksight.DeleteGroupInput) (*quicksight.DeleteGroupOutput, error)
	DeleteGroupAsync(ctx workflow.Context, input *quicksight.DeleteGroupInput) *QuickSightDeleteGroupFuture

	DeleteGroupMembership(ctx workflow.Context, input *quicksight.DeleteGroupMembershipInput) (*quicksight.DeleteGroupMembershipOutput, error)
	DeleteGroupMembershipAsync(ctx workflow.Context, input *quicksight.DeleteGroupMembershipInput) *QuickSightDeleteGroupMembershipFuture

	DeleteIAMPolicyAssignment(ctx workflow.Context, input *quicksight.DeleteIAMPolicyAssignmentInput) (*quicksight.DeleteIAMPolicyAssignmentOutput, error)
	DeleteIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.DeleteIAMPolicyAssignmentInput) *QuickSightDeleteIAMPolicyAssignmentFuture

	DeleteNamespace(ctx workflow.Context, input *quicksight.DeleteNamespaceInput) (*quicksight.DeleteNamespaceOutput, error)
	DeleteNamespaceAsync(ctx workflow.Context, input *quicksight.DeleteNamespaceInput) *QuickSightDeleteNamespaceFuture

	DeleteTemplate(ctx workflow.Context, input *quicksight.DeleteTemplateInput) (*quicksight.DeleteTemplateOutput, error)
	DeleteTemplateAsync(ctx workflow.Context, input *quicksight.DeleteTemplateInput) *QuickSightDeleteTemplateFuture

	DeleteTemplateAlias(ctx workflow.Context, input *quicksight.DeleteTemplateAliasInput) (*quicksight.DeleteTemplateAliasOutput, error)
	DeleteTemplateAliasAsync(ctx workflow.Context, input *quicksight.DeleteTemplateAliasInput) *QuickSightDeleteTemplateAliasFuture

	DeleteTheme(ctx workflow.Context, input *quicksight.DeleteThemeInput) (*quicksight.DeleteThemeOutput, error)
	DeleteThemeAsync(ctx workflow.Context, input *quicksight.DeleteThemeInput) *QuickSightDeleteThemeFuture

	DeleteThemeAlias(ctx workflow.Context, input *quicksight.DeleteThemeAliasInput) (*quicksight.DeleteThemeAliasOutput, error)
	DeleteThemeAliasAsync(ctx workflow.Context, input *quicksight.DeleteThemeAliasInput) *QuickSightDeleteThemeAliasFuture

	DeleteUser(ctx workflow.Context, input *quicksight.DeleteUserInput) (*quicksight.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *quicksight.DeleteUserInput) *QuickSightDeleteUserFuture

	DeleteUserByPrincipalId(ctx workflow.Context, input *quicksight.DeleteUserByPrincipalIdInput) (*quicksight.DeleteUserByPrincipalIdOutput, error)
	DeleteUserByPrincipalIdAsync(ctx workflow.Context, input *quicksight.DeleteUserByPrincipalIdInput) *QuickSightDeleteUserByPrincipalIdFuture

	DescribeAccountCustomization(ctx workflow.Context, input *quicksight.DescribeAccountCustomizationInput) (*quicksight.DescribeAccountCustomizationOutput, error)
	DescribeAccountCustomizationAsync(ctx workflow.Context, input *quicksight.DescribeAccountCustomizationInput) *QuickSightDescribeAccountCustomizationFuture

	DescribeAccountSettings(ctx workflow.Context, input *quicksight.DescribeAccountSettingsInput) (*quicksight.DescribeAccountSettingsOutput, error)
	DescribeAccountSettingsAsync(ctx workflow.Context, input *quicksight.DescribeAccountSettingsInput) *QuickSightDescribeAccountSettingsFuture

	DescribeAnalysis(ctx workflow.Context, input *quicksight.DescribeAnalysisInput) (*quicksight.DescribeAnalysisOutput, error)
	DescribeAnalysisAsync(ctx workflow.Context, input *quicksight.DescribeAnalysisInput) *QuickSightDescribeAnalysisFuture

	DescribeAnalysisPermissions(ctx workflow.Context, input *quicksight.DescribeAnalysisPermissionsInput) (*quicksight.DescribeAnalysisPermissionsOutput, error)
	DescribeAnalysisPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeAnalysisPermissionsInput) *QuickSightDescribeAnalysisPermissionsFuture

	DescribeDashboard(ctx workflow.Context, input *quicksight.DescribeDashboardInput) (*quicksight.DescribeDashboardOutput, error)
	DescribeDashboardAsync(ctx workflow.Context, input *quicksight.DescribeDashboardInput) *QuickSightDescribeDashboardFuture

	DescribeDashboardPermissions(ctx workflow.Context, input *quicksight.DescribeDashboardPermissionsInput) (*quicksight.DescribeDashboardPermissionsOutput, error)
	DescribeDashboardPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDashboardPermissionsInput) *QuickSightDescribeDashboardPermissionsFuture

	DescribeDataSet(ctx workflow.Context, input *quicksight.DescribeDataSetInput) (*quicksight.DescribeDataSetOutput, error)
	DescribeDataSetAsync(ctx workflow.Context, input *quicksight.DescribeDataSetInput) *QuickSightDescribeDataSetFuture

	DescribeDataSetPermissions(ctx workflow.Context, input *quicksight.DescribeDataSetPermissionsInput) (*quicksight.DescribeDataSetPermissionsOutput, error)
	DescribeDataSetPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDataSetPermissionsInput) *QuickSightDescribeDataSetPermissionsFuture

	DescribeDataSource(ctx workflow.Context, input *quicksight.DescribeDataSourceInput) (*quicksight.DescribeDataSourceOutput, error)
	DescribeDataSourceAsync(ctx workflow.Context, input *quicksight.DescribeDataSourceInput) *QuickSightDescribeDataSourceFuture

	DescribeDataSourcePermissions(ctx workflow.Context, input *quicksight.DescribeDataSourcePermissionsInput) (*quicksight.DescribeDataSourcePermissionsOutput, error)
	DescribeDataSourcePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDataSourcePermissionsInput) *QuickSightDescribeDataSourcePermissionsFuture

	DescribeGroup(ctx workflow.Context, input *quicksight.DescribeGroupInput) (*quicksight.DescribeGroupOutput, error)
	DescribeGroupAsync(ctx workflow.Context, input *quicksight.DescribeGroupInput) *QuickSightDescribeGroupFuture

	DescribeIAMPolicyAssignment(ctx workflow.Context, input *quicksight.DescribeIAMPolicyAssignmentInput) (*quicksight.DescribeIAMPolicyAssignmentOutput, error)
	DescribeIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.DescribeIAMPolicyAssignmentInput) *QuickSightDescribeIAMPolicyAssignmentFuture

	DescribeIngestion(ctx workflow.Context, input *quicksight.DescribeIngestionInput) (*quicksight.DescribeIngestionOutput, error)
	DescribeIngestionAsync(ctx workflow.Context, input *quicksight.DescribeIngestionInput) *QuickSightDescribeIngestionFuture

	DescribeNamespace(ctx workflow.Context, input *quicksight.DescribeNamespaceInput) (*quicksight.DescribeNamespaceOutput, error)
	DescribeNamespaceAsync(ctx workflow.Context, input *quicksight.DescribeNamespaceInput) *QuickSightDescribeNamespaceFuture

	DescribeTemplate(ctx workflow.Context, input *quicksight.DescribeTemplateInput) (*quicksight.DescribeTemplateOutput, error)
	DescribeTemplateAsync(ctx workflow.Context, input *quicksight.DescribeTemplateInput) *QuickSightDescribeTemplateFuture

	DescribeTemplateAlias(ctx workflow.Context, input *quicksight.DescribeTemplateAliasInput) (*quicksight.DescribeTemplateAliasOutput, error)
	DescribeTemplateAliasAsync(ctx workflow.Context, input *quicksight.DescribeTemplateAliasInput) *QuickSightDescribeTemplateAliasFuture

	DescribeTemplatePermissions(ctx workflow.Context, input *quicksight.DescribeTemplatePermissionsInput) (*quicksight.DescribeTemplatePermissionsOutput, error)
	DescribeTemplatePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeTemplatePermissionsInput) *QuickSightDescribeTemplatePermissionsFuture

	DescribeTheme(ctx workflow.Context, input *quicksight.DescribeThemeInput) (*quicksight.DescribeThemeOutput, error)
	DescribeThemeAsync(ctx workflow.Context, input *quicksight.DescribeThemeInput) *QuickSightDescribeThemeFuture

	DescribeThemeAlias(ctx workflow.Context, input *quicksight.DescribeThemeAliasInput) (*quicksight.DescribeThemeAliasOutput, error)
	DescribeThemeAliasAsync(ctx workflow.Context, input *quicksight.DescribeThemeAliasInput) *QuickSightDescribeThemeAliasFuture

	DescribeThemePermissions(ctx workflow.Context, input *quicksight.DescribeThemePermissionsInput) (*quicksight.DescribeThemePermissionsOutput, error)
	DescribeThemePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeThemePermissionsInput) *QuickSightDescribeThemePermissionsFuture

	DescribeUser(ctx workflow.Context, input *quicksight.DescribeUserInput) (*quicksight.DescribeUserOutput, error)
	DescribeUserAsync(ctx workflow.Context, input *quicksight.DescribeUserInput) *QuickSightDescribeUserFuture

	GetDashboardEmbedUrl(ctx workflow.Context, input *quicksight.GetDashboardEmbedUrlInput) (*quicksight.GetDashboardEmbedUrlOutput, error)
	GetDashboardEmbedUrlAsync(ctx workflow.Context, input *quicksight.GetDashboardEmbedUrlInput) *QuickSightGetDashboardEmbedUrlFuture

	GetSessionEmbedUrl(ctx workflow.Context, input *quicksight.GetSessionEmbedUrlInput) (*quicksight.GetSessionEmbedUrlOutput, error)
	GetSessionEmbedUrlAsync(ctx workflow.Context, input *quicksight.GetSessionEmbedUrlInput) *QuickSightGetSessionEmbedUrlFuture

	ListAnalyses(ctx workflow.Context, input *quicksight.ListAnalysesInput) (*quicksight.ListAnalysesOutput, error)
	ListAnalysesAsync(ctx workflow.Context, input *quicksight.ListAnalysesInput) *QuickSightListAnalysesFuture

	ListDashboardVersions(ctx workflow.Context, input *quicksight.ListDashboardVersionsInput) (*quicksight.ListDashboardVersionsOutput, error)
	ListDashboardVersionsAsync(ctx workflow.Context, input *quicksight.ListDashboardVersionsInput) *QuickSightListDashboardVersionsFuture

	ListDashboards(ctx workflow.Context, input *quicksight.ListDashboardsInput) (*quicksight.ListDashboardsOutput, error)
	ListDashboardsAsync(ctx workflow.Context, input *quicksight.ListDashboardsInput) *QuickSightListDashboardsFuture

	ListDataSets(ctx workflow.Context, input *quicksight.ListDataSetsInput) (*quicksight.ListDataSetsOutput, error)
	ListDataSetsAsync(ctx workflow.Context, input *quicksight.ListDataSetsInput) *QuickSightListDataSetsFuture

	ListDataSources(ctx workflow.Context, input *quicksight.ListDataSourcesInput) (*quicksight.ListDataSourcesOutput, error)
	ListDataSourcesAsync(ctx workflow.Context, input *quicksight.ListDataSourcesInput) *QuickSightListDataSourcesFuture

	ListGroupMemberships(ctx workflow.Context, input *quicksight.ListGroupMembershipsInput) (*quicksight.ListGroupMembershipsOutput, error)
	ListGroupMembershipsAsync(ctx workflow.Context, input *quicksight.ListGroupMembershipsInput) *QuickSightListGroupMembershipsFuture

	ListGroups(ctx workflow.Context, input *quicksight.ListGroupsInput) (*quicksight.ListGroupsOutput, error)
	ListGroupsAsync(ctx workflow.Context, input *quicksight.ListGroupsInput) *QuickSightListGroupsFuture

	ListIAMPolicyAssignments(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsInput) (*quicksight.ListIAMPolicyAssignmentsOutput, error)
	ListIAMPolicyAssignmentsAsync(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsInput) *QuickSightListIAMPolicyAssignmentsFuture

	ListIAMPolicyAssignmentsForUser(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsForUserInput) (*quicksight.ListIAMPolicyAssignmentsForUserOutput, error)
	ListIAMPolicyAssignmentsForUserAsync(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsForUserInput) *QuickSightListIAMPolicyAssignmentsForUserFuture

	ListIngestions(ctx workflow.Context, input *quicksight.ListIngestionsInput) (*quicksight.ListIngestionsOutput, error)
	ListIngestionsAsync(ctx workflow.Context, input *quicksight.ListIngestionsInput) *QuickSightListIngestionsFuture

	ListNamespaces(ctx workflow.Context, input *quicksight.ListNamespacesInput) (*quicksight.ListNamespacesOutput, error)
	ListNamespacesAsync(ctx workflow.Context, input *quicksight.ListNamespacesInput) *QuickSightListNamespacesFuture

	ListTagsForResource(ctx workflow.Context, input *quicksight.ListTagsForResourceInput) (*quicksight.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *quicksight.ListTagsForResourceInput) *QuickSightListTagsForResourceFuture

	ListTemplateAliases(ctx workflow.Context, input *quicksight.ListTemplateAliasesInput) (*quicksight.ListTemplateAliasesOutput, error)
	ListTemplateAliasesAsync(ctx workflow.Context, input *quicksight.ListTemplateAliasesInput) *QuickSightListTemplateAliasesFuture

	ListTemplateVersions(ctx workflow.Context, input *quicksight.ListTemplateVersionsInput) (*quicksight.ListTemplateVersionsOutput, error)
	ListTemplateVersionsAsync(ctx workflow.Context, input *quicksight.ListTemplateVersionsInput) *QuickSightListTemplateVersionsFuture

	ListTemplates(ctx workflow.Context, input *quicksight.ListTemplatesInput) (*quicksight.ListTemplatesOutput, error)
	ListTemplatesAsync(ctx workflow.Context, input *quicksight.ListTemplatesInput) *QuickSightListTemplatesFuture

	ListThemeAliases(ctx workflow.Context, input *quicksight.ListThemeAliasesInput) (*quicksight.ListThemeAliasesOutput, error)
	ListThemeAliasesAsync(ctx workflow.Context, input *quicksight.ListThemeAliasesInput) *QuickSightListThemeAliasesFuture

	ListThemeVersions(ctx workflow.Context, input *quicksight.ListThemeVersionsInput) (*quicksight.ListThemeVersionsOutput, error)
	ListThemeVersionsAsync(ctx workflow.Context, input *quicksight.ListThemeVersionsInput) *QuickSightListThemeVersionsFuture

	ListThemes(ctx workflow.Context, input *quicksight.ListThemesInput) (*quicksight.ListThemesOutput, error)
	ListThemesAsync(ctx workflow.Context, input *quicksight.ListThemesInput) *QuickSightListThemesFuture

	ListUserGroups(ctx workflow.Context, input *quicksight.ListUserGroupsInput) (*quicksight.ListUserGroupsOutput, error)
	ListUserGroupsAsync(ctx workflow.Context, input *quicksight.ListUserGroupsInput) *QuickSightListUserGroupsFuture

	ListUsers(ctx workflow.Context, input *quicksight.ListUsersInput) (*quicksight.ListUsersOutput, error)
	ListUsersAsync(ctx workflow.Context, input *quicksight.ListUsersInput) *QuickSightListUsersFuture

	RegisterUser(ctx workflow.Context, input *quicksight.RegisterUserInput) (*quicksight.RegisterUserOutput, error)
	RegisterUserAsync(ctx workflow.Context, input *quicksight.RegisterUserInput) *QuickSightRegisterUserFuture

	RestoreAnalysis(ctx workflow.Context, input *quicksight.RestoreAnalysisInput) (*quicksight.RestoreAnalysisOutput, error)
	RestoreAnalysisAsync(ctx workflow.Context, input *quicksight.RestoreAnalysisInput) *QuickSightRestoreAnalysisFuture

	SearchAnalyses(ctx workflow.Context, input *quicksight.SearchAnalysesInput) (*quicksight.SearchAnalysesOutput, error)
	SearchAnalysesAsync(ctx workflow.Context, input *quicksight.SearchAnalysesInput) *QuickSightSearchAnalysesFuture

	SearchDashboards(ctx workflow.Context, input *quicksight.SearchDashboardsInput) (*quicksight.SearchDashboardsOutput, error)
	SearchDashboardsAsync(ctx workflow.Context, input *quicksight.SearchDashboardsInput) *QuickSightSearchDashboardsFuture

	TagResource(ctx workflow.Context, input *quicksight.TagResourceInput) (*quicksight.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *quicksight.TagResourceInput) *QuickSightTagResourceFuture

	UntagResource(ctx workflow.Context, input *quicksight.UntagResourceInput) (*quicksight.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *quicksight.UntagResourceInput) *QuickSightUntagResourceFuture

	UpdateAccountCustomization(ctx workflow.Context, input *quicksight.UpdateAccountCustomizationInput) (*quicksight.UpdateAccountCustomizationOutput, error)
	UpdateAccountCustomizationAsync(ctx workflow.Context, input *quicksight.UpdateAccountCustomizationInput) *QuickSightUpdateAccountCustomizationFuture

	UpdateAccountSettings(ctx workflow.Context, input *quicksight.UpdateAccountSettingsInput) (*quicksight.UpdateAccountSettingsOutput, error)
	UpdateAccountSettingsAsync(ctx workflow.Context, input *quicksight.UpdateAccountSettingsInput) *QuickSightUpdateAccountSettingsFuture

	UpdateAnalysis(ctx workflow.Context, input *quicksight.UpdateAnalysisInput) (*quicksight.UpdateAnalysisOutput, error)
	UpdateAnalysisAsync(ctx workflow.Context, input *quicksight.UpdateAnalysisInput) *QuickSightUpdateAnalysisFuture

	UpdateAnalysisPermissions(ctx workflow.Context, input *quicksight.UpdateAnalysisPermissionsInput) (*quicksight.UpdateAnalysisPermissionsOutput, error)
	UpdateAnalysisPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateAnalysisPermissionsInput) *QuickSightUpdateAnalysisPermissionsFuture

	UpdateDashboard(ctx workflow.Context, input *quicksight.UpdateDashboardInput) (*quicksight.UpdateDashboardOutput, error)
	UpdateDashboardAsync(ctx workflow.Context, input *quicksight.UpdateDashboardInput) *QuickSightUpdateDashboardFuture

	UpdateDashboardPermissions(ctx workflow.Context, input *quicksight.UpdateDashboardPermissionsInput) (*quicksight.UpdateDashboardPermissionsOutput, error)
	UpdateDashboardPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDashboardPermissionsInput) *QuickSightUpdateDashboardPermissionsFuture

	UpdateDashboardPublishedVersion(ctx workflow.Context, input *quicksight.UpdateDashboardPublishedVersionInput) (*quicksight.UpdateDashboardPublishedVersionOutput, error)
	UpdateDashboardPublishedVersionAsync(ctx workflow.Context, input *quicksight.UpdateDashboardPublishedVersionInput) *QuickSightUpdateDashboardPublishedVersionFuture

	UpdateDataSet(ctx workflow.Context, input *quicksight.UpdateDataSetInput) (*quicksight.UpdateDataSetOutput, error)
	UpdateDataSetAsync(ctx workflow.Context, input *quicksight.UpdateDataSetInput) *QuickSightUpdateDataSetFuture

	UpdateDataSetPermissions(ctx workflow.Context, input *quicksight.UpdateDataSetPermissionsInput) (*quicksight.UpdateDataSetPermissionsOutput, error)
	UpdateDataSetPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDataSetPermissionsInput) *QuickSightUpdateDataSetPermissionsFuture

	UpdateDataSource(ctx workflow.Context, input *quicksight.UpdateDataSourceInput) (*quicksight.UpdateDataSourceOutput, error)
	UpdateDataSourceAsync(ctx workflow.Context, input *quicksight.UpdateDataSourceInput) *QuickSightUpdateDataSourceFuture

	UpdateDataSourcePermissions(ctx workflow.Context, input *quicksight.UpdateDataSourcePermissionsInput) (*quicksight.UpdateDataSourcePermissionsOutput, error)
	UpdateDataSourcePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDataSourcePermissionsInput) *QuickSightUpdateDataSourcePermissionsFuture

	UpdateGroup(ctx workflow.Context, input *quicksight.UpdateGroupInput) (*quicksight.UpdateGroupOutput, error)
	UpdateGroupAsync(ctx workflow.Context, input *quicksight.UpdateGroupInput) *QuickSightUpdateGroupFuture

	UpdateIAMPolicyAssignment(ctx workflow.Context, input *quicksight.UpdateIAMPolicyAssignmentInput) (*quicksight.UpdateIAMPolicyAssignmentOutput, error)
	UpdateIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.UpdateIAMPolicyAssignmentInput) *QuickSightUpdateIAMPolicyAssignmentFuture

	UpdateTemplate(ctx workflow.Context, input *quicksight.UpdateTemplateInput) (*quicksight.UpdateTemplateOutput, error)
	UpdateTemplateAsync(ctx workflow.Context, input *quicksight.UpdateTemplateInput) *QuickSightUpdateTemplateFuture

	UpdateTemplateAlias(ctx workflow.Context, input *quicksight.UpdateTemplateAliasInput) (*quicksight.UpdateTemplateAliasOutput, error)
	UpdateTemplateAliasAsync(ctx workflow.Context, input *quicksight.UpdateTemplateAliasInput) *QuickSightUpdateTemplateAliasFuture

	UpdateTemplatePermissions(ctx workflow.Context, input *quicksight.UpdateTemplatePermissionsInput) (*quicksight.UpdateTemplatePermissionsOutput, error)
	UpdateTemplatePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateTemplatePermissionsInput) *QuickSightUpdateTemplatePermissionsFuture

	UpdateTheme(ctx workflow.Context, input *quicksight.UpdateThemeInput) (*quicksight.UpdateThemeOutput, error)
	UpdateThemeAsync(ctx workflow.Context, input *quicksight.UpdateThemeInput) *QuickSightUpdateThemeFuture

	UpdateThemeAlias(ctx workflow.Context, input *quicksight.UpdateThemeAliasInput) (*quicksight.UpdateThemeAliasOutput, error)
	UpdateThemeAliasAsync(ctx workflow.Context, input *quicksight.UpdateThemeAliasInput) *QuickSightUpdateThemeAliasFuture

	UpdateThemePermissions(ctx workflow.Context, input *quicksight.UpdateThemePermissionsInput) (*quicksight.UpdateThemePermissionsOutput, error)
	UpdateThemePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateThemePermissionsInput) *QuickSightUpdateThemePermissionsFuture

	UpdateUser(ctx workflow.Context, input *quicksight.UpdateUserInput) (*quicksight.UpdateUserOutput, error)
	UpdateUserAsync(ctx workflow.Context, input *quicksight.UpdateUserInput) *QuickSightUpdateUserFuture
}

type QuickSightStub struct{}

func NewQuickSightStub() QuickSightClient {
	return &QuickSightStub{}
}

type QuickSightCancelIngestionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCancelIngestionFuture) Get(ctx workflow.Context) (*quicksight.CancelIngestionOutput, error) {
	var output quicksight.CancelIngestionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateAccountCustomizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateAccountCustomizationFuture) Get(ctx workflow.Context) (*quicksight.CreateAccountCustomizationOutput, error) {
	var output quicksight.CreateAccountCustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateAnalysisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateAnalysisFuture) Get(ctx workflow.Context) (*quicksight.CreateAnalysisOutput, error) {
	var output quicksight.CreateAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateDashboardFuture) Get(ctx workflow.Context) (*quicksight.CreateDashboardOutput, error) {
	var output quicksight.CreateDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateDataSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateDataSetFuture) Get(ctx workflow.Context) (*quicksight.CreateDataSetOutput, error) {
	var output quicksight.CreateDataSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateDataSourceFuture) Get(ctx workflow.Context) (*quicksight.CreateDataSourceOutput, error) {
	var output quicksight.CreateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateGroupFuture) Get(ctx workflow.Context) (*quicksight.CreateGroupOutput, error) {
	var output quicksight.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateGroupMembershipFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateGroupMembershipFuture) Get(ctx workflow.Context) (*quicksight.CreateGroupMembershipOutput, error) {
	var output quicksight.CreateGroupMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateIAMPolicyAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateIAMPolicyAssignmentFuture) Get(ctx workflow.Context) (*quicksight.CreateIAMPolicyAssignmentOutput, error) {
	var output quicksight.CreateIAMPolicyAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateIngestionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateIngestionFuture) Get(ctx workflow.Context) (*quicksight.CreateIngestionOutput, error) {
	var output quicksight.CreateIngestionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateNamespaceFuture) Get(ctx workflow.Context) (*quicksight.CreateNamespaceOutput, error) {
	var output quicksight.CreateNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateTemplateFuture) Get(ctx workflow.Context) (*quicksight.CreateTemplateOutput, error) {
	var output quicksight.CreateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateTemplateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateTemplateAliasFuture) Get(ctx workflow.Context) (*quicksight.CreateTemplateAliasOutput, error) {
	var output quicksight.CreateTemplateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateThemeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateThemeFuture) Get(ctx workflow.Context) (*quicksight.CreateThemeOutput, error) {
	var output quicksight.CreateThemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightCreateThemeAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightCreateThemeAliasFuture) Get(ctx workflow.Context) (*quicksight.CreateThemeAliasOutput, error) {
	var output quicksight.CreateThemeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteAccountCustomizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteAccountCustomizationFuture) Get(ctx workflow.Context) (*quicksight.DeleteAccountCustomizationOutput, error) {
	var output quicksight.DeleteAccountCustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteAnalysisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteAnalysisFuture) Get(ctx workflow.Context) (*quicksight.DeleteAnalysisOutput, error) {
	var output quicksight.DeleteAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteDashboardFuture) Get(ctx workflow.Context) (*quicksight.DeleteDashboardOutput, error) {
	var output quicksight.DeleteDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteDataSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteDataSetFuture) Get(ctx workflow.Context) (*quicksight.DeleteDataSetOutput, error) {
	var output quicksight.DeleteDataSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteDataSourceFuture) Get(ctx workflow.Context) (*quicksight.DeleteDataSourceOutput, error) {
	var output quicksight.DeleteDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteGroupFuture) Get(ctx workflow.Context) (*quicksight.DeleteGroupOutput, error) {
	var output quicksight.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteGroupMembershipFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteGroupMembershipFuture) Get(ctx workflow.Context) (*quicksight.DeleteGroupMembershipOutput, error) {
	var output quicksight.DeleteGroupMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteIAMPolicyAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteIAMPolicyAssignmentFuture) Get(ctx workflow.Context) (*quicksight.DeleteIAMPolicyAssignmentOutput, error) {
	var output quicksight.DeleteIAMPolicyAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteNamespaceFuture) Get(ctx workflow.Context) (*quicksight.DeleteNamespaceOutput, error) {
	var output quicksight.DeleteNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteTemplateFuture) Get(ctx workflow.Context) (*quicksight.DeleteTemplateOutput, error) {
	var output quicksight.DeleteTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteTemplateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteTemplateAliasFuture) Get(ctx workflow.Context) (*quicksight.DeleteTemplateAliasOutput, error) {
	var output quicksight.DeleteTemplateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteThemeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteThemeFuture) Get(ctx workflow.Context) (*quicksight.DeleteThemeOutput, error) {
	var output quicksight.DeleteThemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteThemeAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteThemeAliasFuture) Get(ctx workflow.Context) (*quicksight.DeleteThemeAliasOutput, error) {
	var output quicksight.DeleteThemeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteUserFuture) Get(ctx workflow.Context) (*quicksight.DeleteUserOutput, error) {
	var output quicksight.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDeleteUserByPrincipalIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDeleteUserByPrincipalIdFuture) Get(ctx workflow.Context) (*quicksight.DeleteUserByPrincipalIdOutput, error) {
	var output quicksight.DeleteUserByPrincipalIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeAccountCustomizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeAccountCustomizationFuture) Get(ctx workflow.Context) (*quicksight.DescribeAccountCustomizationOutput, error) {
	var output quicksight.DescribeAccountCustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeAccountSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeAccountSettingsFuture) Get(ctx workflow.Context) (*quicksight.DescribeAccountSettingsOutput, error) {
	var output quicksight.DescribeAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeAnalysisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeAnalysisFuture) Get(ctx workflow.Context) (*quicksight.DescribeAnalysisOutput, error) {
	var output quicksight.DescribeAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeAnalysisPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeAnalysisPermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeAnalysisPermissionsOutput, error) {
	var output quicksight.DescribeAnalysisPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeDashboardFuture) Get(ctx workflow.Context) (*quicksight.DescribeDashboardOutput, error) {
	var output quicksight.DescribeDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeDashboardPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeDashboardPermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeDashboardPermissionsOutput, error) {
	var output quicksight.DescribeDashboardPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeDataSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeDataSetFuture) Get(ctx workflow.Context) (*quicksight.DescribeDataSetOutput, error) {
	var output quicksight.DescribeDataSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeDataSetPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeDataSetPermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeDataSetPermissionsOutput, error) {
	var output quicksight.DescribeDataSetPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeDataSourceFuture) Get(ctx workflow.Context) (*quicksight.DescribeDataSourceOutput, error) {
	var output quicksight.DescribeDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeDataSourcePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeDataSourcePermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeDataSourcePermissionsOutput, error) {
	var output quicksight.DescribeDataSourcePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeGroupFuture) Get(ctx workflow.Context) (*quicksight.DescribeGroupOutput, error) {
	var output quicksight.DescribeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeIAMPolicyAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeIAMPolicyAssignmentFuture) Get(ctx workflow.Context) (*quicksight.DescribeIAMPolicyAssignmentOutput, error) {
	var output quicksight.DescribeIAMPolicyAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeIngestionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeIngestionFuture) Get(ctx workflow.Context) (*quicksight.DescribeIngestionOutput, error) {
	var output quicksight.DescribeIngestionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeNamespaceFuture) Get(ctx workflow.Context) (*quicksight.DescribeNamespaceOutput, error) {
	var output quicksight.DescribeNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeTemplateFuture) Get(ctx workflow.Context) (*quicksight.DescribeTemplateOutput, error) {
	var output quicksight.DescribeTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeTemplateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeTemplateAliasFuture) Get(ctx workflow.Context) (*quicksight.DescribeTemplateAliasOutput, error) {
	var output quicksight.DescribeTemplateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeTemplatePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeTemplatePermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeTemplatePermissionsOutput, error) {
	var output quicksight.DescribeTemplatePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeThemeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeThemeFuture) Get(ctx workflow.Context) (*quicksight.DescribeThemeOutput, error) {
	var output quicksight.DescribeThemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeThemeAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeThemeAliasFuture) Get(ctx workflow.Context) (*quicksight.DescribeThemeAliasOutput, error) {
	var output quicksight.DescribeThemeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeThemePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeThemePermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeThemePermissionsOutput, error) {
	var output quicksight.DescribeThemePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightDescribeUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightDescribeUserFuture) Get(ctx workflow.Context) (*quicksight.DescribeUserOutput, error) {
	var output quicksight.DescribeUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightGetDashboardEmbedUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightGetDashboardEmbedUrlFuture) Get(ctx workflow.Context) (*quicksight.GetDashboardEmbedUrlOutput, error) {
	var output quicksight.GetDashboardEmbedUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightGetSessionEmbedUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightGetSessionEmbedUrlFuture) Get(ctx workflow.Context) (*quicksight.GetSessionEmbedUrlOutput, error) {
	var output quicksight.GetSessionEmbedUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListAnalysesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListAnalysesFuture) Get(ctx workflow.Context) (*quicksight.ListAnalysesOutput, error) {
	var output quicksight.ListAnalysesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListDashboardVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListDashboardVersionsFuture) Get(ctx workflow.Context) (*quicksight.ListDashboardVersionsOutput, error) {
	var output quicksight.ListDashboardVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListDashboardsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListDashboardsFuture) Get(ctx workflow.Context) (*quicksight.ListDashboardsOutput, error) {
	var output quicksight.ListDashboardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListDataSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListDataSetsFuture) Get(ctx workflow.Context) (*quicksight.ListDataSetsOutput, error) {
	var output quicksight.ListDataSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListDataSourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListDataSourcesFuture) Get(ctx workflow.Context) (*quicksight.ListDataSourcesOutput, error) {
	var output quicksight.ListDataSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListGroupMembershipsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListGroupMembershipsFuture) Get(ctx workflow.Context) (*quicksight.ListGroupMembershipsOutput, error) {
	var output quicksight.ListGroupMembershipsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListGroupsFuture) Get(ctx workflow.Context) (*quicksight.ListGroupsOutput, error) {
	var output quicksight.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListIAMPolicyAssignmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListIAMPolicyAssignmentsFuture) Get(ctx workflow.Context) (*quicksight.ListIAMPolicyAssignmentsOutput, error) {
	var output quicksight.ListIAMPolicyAssignmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListIAMPolicyAssignmentsForUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListIAMPolicyAssignmentsForUserFuture) Get(ctx workflow.Context) (*quicksight.ListIAMPolicyAssignmentsForUserOutput, error) {
	var output quicksight.ListIAMPolicyAssignmentsForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListIngestionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListIngestionsFuture) Get(ctx workflow.Context) (*quicksight.ListIngestionsOutput, error) {
	var output quicksight.ListIngestionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListNamespacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListNamespacesFuture) Get(ctx workflow.Context) (*quicksight.ListNamespacesOutput, error) {
	var output quicksight.ListNamespacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListTagsForResourceFuture) Get(ctx workflow.Context) (*quicksight.ListTagsForResourceOutput, error) {
	var output quicksight.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListTemplateAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListTemplateAliasesFuture) Get(ctx workflow.Context) (*quicksight.ListTemplateAliasesOutput, error) {
	var output quicksight.ListTemplateAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListTemplateVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListTemplateVersionsFuture) Get(ctx workflow.Context) (*quicksight.ListTemplateVersionsOutput, error) {
	var output quicksight.ListTemplateVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListTemplatesFuture) Get(ctx workflow.Context) (*quicksight.ListTemplatesOutput, error) {
	var output quicksight.ListTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListThemeAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListThemeAliasesFuture) Get(ctx workflow.Context) (*quicksight.ListThemeAliasesOutput, error) {
	var output quicksight.ListThemeAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListThemeVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListThemeVersionsFuture) Get(ctx workflow.Context) (*quicksight.ListThemeVersionsOutput, error) {
	var output quicksight.ListThemeVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListThemesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListThemesFuture) Get(ctx workflow.Context) (*quicksight.ListThemesOutput, error) {
	var output quicksight.ListThemesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListUserGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListUserGroupsFuture) Get(ctx workflow.Context) (*quicksight.ListUserGroupsOutput, error) {
	var output quicksight.ListUserGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightListUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightListUsersFuture) Get(ctx workflow.Context) (*quicksight.ListUsersOutput, error) {
	var output quicksight.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightRegisterUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightRegisterUserFuture) Get(ctx workflow.Context) (*quicksight.RegisterUserOutput, error) {
	var output quicksight.RegisterUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightRestoreAnalysisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightRestoreAnalysisFuture) Get(ctx workflow.Context) (*quicksight.RestoreAnalysisOutput, error) {
	var output quicksight.RestoreAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightSearchAnalysesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightSearchAnalysesFuture) Get(ctx workflow.Context) (*quicksight.SearchAnalysesOutput, error) {
	var output quicksight.SearchAnalysesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightSearchDashboardsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightSearchDashboardsFuture) Get(ctx workflow.Context) (*quicksight.SearchDashboardsOutput, error) {
	var output quicksight.SearchDashboardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightTagResourceFuture) Get(ctx workflow.Context) (*quicksight.TagResourceOutput, error) {
	var output quicksight.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUntagResourceFuture) Get(ctx workflow.Context) (*quicksight.UntagResourceOutput, error) {
	var output quicksight.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateAccountCustomizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateAccountCustomizationFuture) Get(ctx workflow.Context) (*quicksight.UpdateAccountCustomizationOutput, error) {
	var output quicksight.UpdateAccountCustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateAccountSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateAccountSettingsFuture) Get(ctx workflow.Context) (*quicksight.UpdateAccountSettingsOutput, error) {
	var output quicksight.UpdateAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateAnalysisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateAnalysisFuture) Get(ctx workflow.Context) (*quicksight.UpdateAnalysisOutput, error) {
	var output quicksight.UpdateAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateAnalysisPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateAnalysisPermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateAnalysisPermissionsOutput, error) {
	var output quicksight.UpdateAnalysisPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateDashboardFuture) Get(ctx workflow.Context) (*quicksight.UpdateDashboardOutput, error) {
	var output quicksight.UpdateDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateDashboardPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateDashboardPermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateDashboardPermissionsOutput, error) {
	var output quicksight.UpdateDashboardPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateDashboardPublishedVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateDashboardPublishedVersionFuture) Get(ctx workflow.Context) (*quicksight.UpdateDashboardPublishedVersionOutput, error) {
	var output quicksight.UpdateDashboardPublishedVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateDataSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateDataSetFuture) Get(ctx workflow.Context) (*quicksight.UpdateDataSetOutput, error) {
	var output quicksight.UpdateDataSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateDataSetPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateDataSetPermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateDataSetPermissionsOutput, error) {
	var output quicksight.UpdateDataSetPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateDataSourceFuture) Get(ctx workflow.Context) (*quicksight.UpdateDataSourceOutput, error) {
	var output quicksight.UpdateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateDataSourcePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateDataSourcePermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateDataSourcePermissionsOutput, error) {
	var output quicksight.UpdateDataSourcePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateGroupFuture) Get(ctx workflow.Context) (*quicksight.UpdateGroupOutput, error) {
	var output quicksight.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateIAMPolicyAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateIAMPolicyAssignmentFuture) Get(ctx workflow.Context) (*quicksight.UpdateIAMPolicyAssignmentOutput, error) {
	var output quicksight.UpdateIAMPolicyAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateTemplateFuture) Get(ctx workflow.Context) (*quicksight.UpdateTemplateOutput, error) {
	var output quicksight.UpdateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateTemplateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateTemplateAliasFuture) Get(ctx workflow.Context) (*quicksight.UpdateTemplateAliasOutput, error) {
	var output quicksight.UpdateTemplateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateTemplatePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateTemplatePermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateTemplatePermissionsOutput, error) {
	var output quicksight.UpdateTemplatePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateThemeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateThemeFuture) Get(ctx workflow.Context) (*quicksight.UpdateThemeOutput, error) {
	var output quicksight.UpdateThemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateThemeAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateThemeAliasFuture) Get(ctx workflow.Context) (*quicksight.UpdateThemeAliasOutput, error) {
	var output quicksight.UpdateThemeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateThemePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateThemePermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateThemePermissionsOutput, error) {
	var output quicksight.UpdateThemePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuickSightUpdateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuickSightUpdateUserFuture) Get(ctx workflow.Context) (*quicksight.UpdateUserOutput, error) {
	var output quicksight.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CancelIngestion(ctx workflow.Context, input *quicksight.CancelIngestionInput) (*quicksight.CancelIngestionOutput, error) {
	var output quicksight.CancelIngestionOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CancelIngestion", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CancelIngestionAsync(ctx workflow.Context, input *quicksight.CancelIngestionInput) *QuickSightCancelIngestionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CancelIngestion", input)
	return &QuickSightCancelIngestionFuture{Future: future}
}

func (a *QuickSightStub) CreateAccountCustomization(ctx workflow.Context, input *quicksight.CreateAccountCustomizationInput) (*quicksight.CreateAccountCustomizationOutput, error) {
	var output quicksight.CreateAccountCustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateAccountCustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateAccountCustomizationAsync(ctx workflow.Context, input *quicksight.CreateAccountCustomizationInput) *QuickSightCreateAccountCustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateAccountCustomization", input)
	return &QuickSightCreateAccountCustomizationFuture{Future: future}
}

func (a *QuickSightStub) CreateAnalysis(ctx workflow.Context, input *quicksight.CreateAnalysisInput) (*quicksight.CreateAnalysisOutput, error) {
	var output quicksight.CreateAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateAnalysisAsync(ctx workflow.Context, input *quicksight.CreateAnalysisInput) *QuickSightCreateAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateAnalysis", input)
	return &QuickSightCreateAnalysisFuture{Future: future}
}

func (a *QuickSightStub) CreateDashboard(ctx workflow.Context, input *quicksight.CreateDashboardInput) (*quicksight.CreateDashboardOutput, error) {
	var output quicksight.CreateDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateDashboardAsync(ctx workflow.Context, input *quicksight.CreateDashboardInput) *QuickSightCreateDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateDashboard", input)
	return &QuickSightCreateDashboardFuture{Future: future}
}

func (a *QuickSightStub) CreateDataSet(ctx workflow.Context, input *quicksight.CreateDataSetInput) (*quicksight.CreateDataSetOutput, error) {
	var output quicksight.CreateDataSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateDataSet", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateDataSetAsync(ctx workflow.Context, input *quicksight.CreateDataSetInput) *QuickSightCreateDataSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateDataSet", input)
	return &QuickSightCreateDataSetFuture{Future: future}
}

func (a *QuickSightStub) CreateDataSource(ctx workflow.Context, input *quicksight.CreateDataSourceInput) (*quicksight.CreateDataSourceOutput, error) {
	var output quicksight.CreateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateDataSourceAsync(ctx workflow.Context, input *quicksight.CreateDataSourceInput) *QuickSightCreateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateDataSource", input)
	return &QuickSightCreateDataSourceFuture{Future: future}
}

func (a *QuickSightStub) CreateGroup(ctx workflow.Context, input *quicksight.CreateGroupInput) (*quicksight.CreateGroupOutput, error) {
	var output quicksight.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateGroupAsync(ctx workflow.Context, input *quicksight.CreateGroupInput) *QuickSightCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateGroup", input)
	return &QuickSightCreateGroupFuture{Future: future}
}

func (a *QuickSightStub) CreateGroupMembership(ctx workflow.Context, input *quicksight.CreateGroupMembershipInput) (*quicksight.CreateGroupMembershipOutput, error) {
	var output quicksight.CreateGroupMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateGroupMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateGroupMembershipAsync(ctx workflow.Context, input *quicksight.CreateGroupMembershipInput) *QuickSightCreateGroupMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateGroupMembership", input)
	return &QuickSightCreateGroupMembershipFuture{Future: future}
}

func (a *QuickSightStub) CreateIAMPolicyAssignment(ctx workflow.Context, input *quicksight.CreateIAMPolicyAssignmentInput) (*quicksight.CreateIAMPolicyAssignmentOutput, error) {
	var output quicksight.CreateIAMPolicyAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateIAMPolicyAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.CreateIAMPolicyAssignmentInput) *QuickSightCreateIAMPolicyAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateIAMPolicyAssignment", input)
	return &QuickSightCreateIAMPolicyAssignmentFuture{Future: future}
}

func (a *QuickSightStub) CreateIngestion(ctx workflow.Context, input *quicksight.CreateIngestionInput) (*quicksight.CreateIngestionOutput, error) {
	var output quicksight.CreateIngestionOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateIngestion", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateIngestionAsync(ctx workflow.Context, input *quicksight.CreateIngestionInput) *QuickSightCreateIngestionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateIngestion", input)
	return &QuickSightCreateIngestionFuture{Future: future}
}

func (a *QuickSightStub) CreateNamespace(ctx workflow.Context, input *quicksight.CreateNamespaceInput) (*quicksight.CreateNamespaceOutput, error) {
	var output quicksight.CreateNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateNamespaceAsync(ctx workflow.Context, input *quicksight.CreateNamespaceInput) *QuickSightCreateNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateNamespace", input)
	return &QuickSightCreateNamespaceFuture{Future: future}
}

func (a *QuickSightStub) CreateTemplate(ctx workflow.Context, input *quicksight.CreateTemplateInput) (*quicksight.CreateTemplateOutput, error) {
	var output quicksight.CreateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateTemplateAsync(ctx workflow.Context, input *quicksight.CreateTemplateInput) *QuickSightCreateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateTemplate", input)
	return &QuickSightCreateTemplateFuture{Future: future}
}

func (a *QuickSightStub) CreateTemplateAlias(ctx workflow.Context, input *quicksight.CreateTemplateAliasInput) (*quicksight.CreateTemplateAliasOutput, error) {
	var output quicksight.CreateTemplateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateTemplateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateTemplateAliasAsync(ctx workflow.Context, input *quicksight.CreateTemplateAliasInput) *QuickSightCreateTemplateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateTemplateAlias", input)
	return &QuickSightCreateTemplateAliasFuture{Future: future}
}

func (a *QuickSightStub) CreateTheme(ctx workflow.Context, input *quicksight.CreateThemeInput) (*quicksight.CreateThemeOutput, error) {
	var output quicksight.CreateThemeOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateTheme", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateThemeAsync(ctx workflow.Context, input *quicksight.CreateThemeInput) *QuickSightCreateThemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateTheme", input)
	return &QuickSightCreateThemeFuture{Future: future}
}

func (a *QuickSightStub) CreateThemeAlias(ctx workflow.Context, input *quicksight.CreateThemeAliasInput) (*quicksight.CreateThemeAliasOutput, error) {
	var output quicksight.CreateThemeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateThemeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) CreateThemeAliasAsync(ctx workflow.Context, input *quicksight.CreateThemeAliasInput) *QuickSightCreateThemeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.CreateThemeAlias", input)
	return &QuickSightCreateThemeAliasFuture{Future: future}
}

func (a *QuickSightStub) DeleteAccountCustomization(ctx workflow.Context, input *quicksight.DeleteAccountCustomizationInput) (*quicksight.DeleteAccountCustomizationOutput, error) {
	var output quicksight.DeleteAccountCustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteAccountCustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteAccountCustomizationAsync(ctx workflow.Context, input *quicksight.DeleteAccountCustomizationInput) *QuickSightDeleteAccountCustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteAccountCustomization", input)
	return &QuickSightDeleteAccountCustomizationFuture{Future: future}
}

func (a *QuickSightStub) DeleteAnalysis(ctx workflow.Context, input *quicksight.DeleteAnalysisInput) (*quicksight.DeleteAnalysisOutput, error) {
	var output quicksight.DeleteAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteAnalysisAsync(ctx workflow.Context, input *quicksight.DeleteAnalysisInput) *QuickSightDeleteAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteAnalysis", input)
	return &QuickSightDeleteAnalysisFuture{Future: future}
}

func (a *QuickSightStub) DeleteDashboard(ctx workflow.Context, input *quicksight.DeleteDashboardInput) (*quicksight.DeleteDashboardOutput, error) {
	var output quicksight.DeleteDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteDashboardAsync(ctx workflow.Context, input *quicksight.DeleteDashboardInput) *QuickSightDeleteDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteDashboard", input)
	return &QuickSightDeleteDashboardFuture{Future: future}
}

func (a *QuickSightStub) DeleteDataSet(ctx workflow.Context, input *quicksight.DeleteDataSetInput) (*quicksight.DeleteDataSetOutput, error) {
	var output quicksight.DeleteDataSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteDataSet", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteDataSetAsync(ctx workflow.Context, input *quicksight.DeleteDataSetInput) *QuickSightDeleteDataSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteDataSet", input)
	return &QuickSightDeleteDataSetFuture{Future: future}
}

func (a *QuickSightStub) DeleteDataSource(ctx workflow.Context, input *quicksight.DeleteDataSourceInput) (*quicksight.DeleteDataSourceOutput, error) {
	var output quicksight.DeleteDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteDataSourceAsync(ctx workflow.Context, input *quicksight.DeleteDataSourceInput) *QuickSightDeleteDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteDataSource", input)
	return &QuickSightDeleteDataSourceFuture{Future: future}
}

func (a *QuickSightStub) DeleteGroup(ctx workflow.Context, input *quicksight.DeleteGroupInput) (*quicksight.DeleteGroupOutput, error) {
	var output quicksight.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteGroupAsync(ctx workflow.Context, input *quicksight.DeleteGroupInput) *QuickSightDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteGroup", input)
	return &QuickSightDeleteGroupFuture{Future: future}
}

func (a *QuickSightStub) DeleteGroupMembership(ctx workflow.Context, input *quicksight.DeleteGroupMembershipInput) (*quicksight.DeleteGroupMembershipOutput, error) {
	var output quicksight.DeleteGroupMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteGroupMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteGroupMembershipAsync(ctx workflow.Context, input *quicksight.DeleteGroupMembershipInput) *QuickSightDeleteGroupMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteGroupMembership", input)
	return &QuickSightDeleteGroupMembershipFuture{Future: future}
}

func (a *QuickSightStub) DeleteIAMPolicyAssignment(ctx workflow.Context, input *quicksight.DeleteIAMPolicyAssignmentInput) (*quicksight.DeleteIAMPolicyAssignmentOutput, error) {
	var output quicksight.DeleteIAMPolicyAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteIAMPolicyAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.DeleteIAMPolicyAssignmentInput) *QuickSightDeleteIAMPolicyAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteIAMPolicyAssignment", input)
	return &QuickSightDeleteIAMPolicyAssignmentFuture{Future: future}
}

func (a *QuickSightStub) DeleteNamespace(ctx workflow.Context, input *quicksight.DeleteNamespaceInput) (*quicksight.DeleteNamespaceOutput, error) {
	var output quicksight.DeleteNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteNamespaceAsync(ctx workflow.Context, input *quicksight.DeleteNamespaceInput) *QuickSightDeleteNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteNamespace", input)
	return &QuickSightDeleteNamespaceFuture{Future: future}
}

func (a *QuickSightStub) DeleteTemplate(ctx workflow.Context, input *quicksight.DeleteTemplateInput) (*quicksight.DeleteTemplateOutput, error) {
	var output quicksight.DeleteTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteTemplateAsync(ctx workflow.Context, input *quicksight.DeleteTemplateInput) *QuickSightDeleteTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteTemplate", input)
	return &QuickSightDeleteTemplateFuture{Future: future}
}

func (a *QuickSightStub) DeleteTemplateAlias(ctx workflow.Context, input *quicksight.DeleteTemplateAliasInput) (*quicksight.DeleteTemplateAliasOutput, error) {
	var output quicksight.DeleteTemplateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteTemplateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteTemplateAliasAsync(ctx workflow.Context, input *quicksight.DeleteTemplateAliasInput) *QuickSightDeleteTemplateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteTemplateAlias", input)
	return &QuickSightDeleteTemplateAliasFuture{Future: future}
}

func (a *QuickSightStub) DeleteTheme(ctx workflow.Context, input *quicksight.DeleteThemeInput) (*quicksight.DeleteThemeOutput, error) {
	var output quicksight.DeleteThemeOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteTheme", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteThemeAsync(ctx workflow.Context, input *quicksight.DeleteThemeInput) *QuickSightDeleteThemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteTheme", input)
	return &QuickSightDeleteThemeFuture{Future: future}
}

func (a *QuickSightStub) DeleteThemeAlias(ctx workflow.Context, input *quicksight.DeleteThemeAliasInput) (*quicksight.DeleteThemeAliasOutput, error) {
	var output quicksight.DeleteThemeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteThemeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteThemeAliasAsync(ctx workflow.Context, input *quicksight.DeleteThemeAliasInput) *QuickSightDeleteThemeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteThemeAlias", input)
	return &QuickSightDeleteThemeAliasFuture{Future: future}
}

func (a *QuickSightStub) DeleteUser(ctx workflow.Context, input *quicksight.DeleteUserInput) (*quicksight.DeleteUserOutput, error) {
	var output quicksight.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteUserAsync(ctx workflow.Context, input *quicksight.DeleteUserInput) *QuickSightDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteUser", input)
	return &QuickSightDeleteUserFuture{Future: future}
}

func (a *QuickSightStub) DeleteUserByPrincipalId(ctx workflow.Context, input *quicksight.DeleteUserByPrincipalIdInput) (*quicksight.DeleteUserByPrincipalIdOutput, error) {
	var output quicksight.DeleteUserByPrincipalIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteUserByPrincipalId", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DeleteUserByPrincipalIdAsync(ctx workflow.Context, input *quicksight.DeleteUserByPrincipalIdInput) *QuickSightDeleteUserByPrincipalIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DeleteUserByPrincipalId", input)
	return &QuickSightDeleteUserByPrincipalIdFuture{Future: future}
}

func (a *QuickSightStub) DescribeAccountCustomization(ctx workflow.Context, input *quicksight.DescribeAccountCustomizationInput) (*quicksight.DescribeAccountCustomizationOutput, error) {
	var output quicksight.DescribeAccountCustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAccountCustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeAccountCustomizationAsync(ctx workflow.Context, input *quicksight.DescribeAccountCustomizationInput) *QuickSightDescribeAccountCustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAccountCustomization", input)
	return &QuickSightDescribeAccountCustomizationFuture{Future: future}
}

func (a *QuickSightStub) DescribeAccountSettings(ctx workflow.Context, input *quicksight.DescribeAccountSettingsInput) (*quicksight.DescribeAccountSettingsOutput, error) {
	var output quicksight.DescribeAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeAccountSettingsAsync(ctx workflow.Context, input *quicksight.DescribeAccountSettingsInput) *QuickSightDescribeAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAccountSettings", input)
	return &QuickSightDescribeAccountSettingsFuture{Future: future}
}

func (a *QuickSightStub) DescribeAnalysis(ctx workflow.Context, input *quicksight.DescribeAnalysisInput) (*quicksight.DescribeAnalysisOutput, error) {
	var output quicksight.DescribeAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeAnalysisAsync(ctx workflow.Context, input *quicksight.DescribeAnalysisInput) *QuickSightDescribeAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAnalysis", input)
	return &QuickSightDescribeAnalysisFuture{Future: future}
}

func (a *QuickSightStub) DescribeAnalysisPermissions(ctx workflow.Context, input *quicksight.DescribeAnalysisPermissionsInput) (*quicksight.DescribeAnalysisPermissionsOutput, error) {
	var output quicksight.DescribeAnalysisPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAnalysisPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeAnalysisPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeAnalysisPermissionsInput) *QuickSightDescribeAnalysisPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeAnalysisPermissions", input)
	return &QuickSightDescribeAnalysisPermissionsFuture{Future: future}
}

func (a *QuickSightStub) DescribeDashboard(ctx workflow.Context, input *quicksight.DescribeDashboardInput) (*quicksight.DescribeDashboardOutput, error) {
	var output quicksight.DescribeDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeDashboardAsync(ctx workflow.Context, input *quicksight.DescribeDashboardInput) *QuickSightDescribeDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDashboard", input)
	return &QuickSightDescribeDashboardFuture{Future: future}
}

func (a *QuickSightStub) DescribeDashboardPermissions(ctx workflow.Context, input *quicksight.DescribeDashboardPermissionsInput) (*quicksight.DescribeDashboardPermissionsOutput, error) {
	var output quicksight.DescribeDashboardPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDashboardPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeDashboardPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDashboardPermissionsInput) *QuickSightDescribeDashboardPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDashboardPermissions", input)
	return &QuickSightDescribeDashboardPermissionsFuture{Future: future}
}

func (a *QuickSightStub) DescribeDataSet(ctx workflow.Context, input *quicksight.DescribeDataSetInput) (*quicksight.DescribeDataSetOutput, error) {
	var output quicksight.DescribeDataSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSet", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeDataSetAsync(ctx workflow.Context, input *quicksight.DescribeDataSetInput) *QuickSightDescribeDataSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSet", input)
	return &QuickSightDescribeDataSetFuture{Future: future}
}

func (a *QuickSightStub) DescribeDataSetPermissions(ctx workflow.Context, input *quicksight.DescribeDataSetPermissionsInput) (*quicksight.DescribeDataSetPermissionsOutput, error) {
	var output quicksight.DescribeDataSetPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSetPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeDataSetPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDataSetPermissionsInput) *QuickSightDescribeDataSetPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSetPermissions", input)
	return &QuickSightDescribeDataSetPermissionsFuture{Future: future}
}

func (a *QuickSightStub) DescribeDataSource(ctx workflow.Context, input *quicksight.DescribeDataSourceInput) (*quicksight.DescribeDataSourceOutput, error) {
	var output quicksight.DescribeDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeDataSourceAsync(ctx workflow.Context, input *quicksight.DescribeDataSourceInput) *QuickSightDescribeDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSource", input)
	return &QuickSightDescribeDataSourceFuture{Future: future}
}

func (a *QuickSightStub) DescribeDataSourcePermissions(ctx workflow.Context, input *quicksight.DescribeDataSourcePermissionsInput) (*quicksight.DescribeDataSourcePermissionsOutput, error) {
	var output quicksight.DescribeDataSourcePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSourcePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeDataSourcePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDataSourcePermissionsInput) *QuickSightDescribeDataSourcePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeDataSourcePermissions", input)
	return &QuickSightDescribeDataSourcePermissionsFuture{Future: future}
}

func (a *QuickSightStub) DescribeGroup(ctx workflow.Context, input *quicksight.DescribeGroupInput) (*quicksight.DescribeGroupOutput, error) {
	var output quicksight.DescribeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeGroupAsync(ctx workflow.Context, input *quicksight.DescribeGroupInput) *QuickSightDescribeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeGroup", input)
	return &QuickSightDescribeGroupFuture{Future: future}
}

func (a *QuickSightStub) DescribeIAMPolicyAssignment(ctx workflow.Context, input *quicksight.DescribeIAMPolicyAssignmentInput) (*quicksight.DescribeIAMPolicyAssignmentOutput, error) {
	var output quicksight.DescribeIAMPolicyAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeIAMPolicyAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.DescribeIAMPolicyAssignmentInput) *QuickSightDescribeIAMPolicyAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeIAMPolicyAssignment", input)
	return &QuickSightDescribeIAMPolicyAssignmentFuture{Future: future}
}

func (a *QuickSightStub) DescribeIngestion(ctx workflow.Context, input *quicksight.DescribeIngestionInput) (*quicksight.DescribeIngestionOutput, error) {
	var output quicksight.DescribeIngestionOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeIngestion", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeIngestionAsync(ctx workflow.Context, input *quicksight.DescribeIngestionInput) *QuickSightDescribeIngestionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeIngestion", input)
	return &QuickSightDescribeIngestionFuture{Future: future}
}

func (a *QuickSightStub) DescribeNamespace(ctx workflow.Context, input *quicksight.DescribeNamespaceInput) (*quicksight.DescribeNamespaceOutput, error) {
	var output quicksight.DescribeNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeNamespaceAsync(ctx workflow.Context, input *quicksight.DescribeNamespaceInput) *QuickSightDescribeNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeNamespace", input)
	return &QuickSightDescribeNamespaceFuture{Future: future}
}

func (a *QuickSightStub) DescribeTemplate(ctx workflow.Context, input *quicksight.DescribeTemplateInput) (*quicksight.DescribeTemplateOutput, error) {
	var output quicksight.DescribeTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeTemplateAsync(ctx workflow.Context, input *quicksight.DescribeTemplateInput) *QuickSightDescribeTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTemplate", input)
	return &QuickSightDescribeTemplateFuture{Future: future}
}

func (a *QuickSightStub) DescribeTemplateAlias(ctx workflow.Context, input *quicksight.DescribeTemplateAliasInput) (*quicksight.DescribeTemplateAliasOutput, error) {
	var output quicksight.DescribeTemplateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTemplateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeTemplateAliasAsync(ctx workflow.Context, input *quicksight.DescribeTemplateAliasInput) *QuickSightDescribeTemplateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTemplateAlias", input)
	return &QuickSightDescribeTemplateAliasFuture{Future: future}
}

func (a *QuickSightStub) DescribeTemplatePermissions(ctx workflow.Context, input *quicksight.DescribeTemplatePermissionsInput) (*quicksight.DescribeTemplatePermissionsOutput, error) {
	var output quicksight.DescribeTemplatePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTemplatePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeTemplatePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeTemplatePermissionsInput) *QuickSightDescribeTemplatePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTemplatePermissions", input)
	return &QuickSightDescribeTemplatePermissionsFuture{Future: future}
}

func (a *QuickSightStub) DescribeTheme(ctx workflow.Context, input *quicksight.DescribeThemeInput) (*quicksight.DescribeThemeOutput, error) {
	var output quicksight.DescribeThemeOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTheme", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeThemeAsync(ctx workflow.Context, input *quicksight.DescribeThemeInput) *QuickSightDescribeThemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeTheme", input)
	return &QuickSightDescribeThemeFuture{Future: future}
}

func (a *QuickSightStub) DescribeThemeAlias(ctx workflow.Context, input *quicksight.DescribeThemeAliasInput) (*quicksight.DescribeThemeAliasOutput, error) {
	var output quicksight.DescribeThemeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeThemeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeThemeAliasAsync(ctx workflow.Context, input *quicksight.DescribeThemeAliasInput) *QuickSightDescribeThemeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeThemeAlias", input)
	return &QuickSightDescribeThemeAliasFuture{Future: future}
}

func (a *QuickSightStub) DescribeThemePermissions(ctx workflow.Context, input *quicksight.DescribeThemePermissionsInput) (*quicksight.DescribeThemePermissionsOutput, error) {
	var output quicksight.DescribeThemePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeThemePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeThemePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeThemePermissionsInput) *QuickSightDescribeThemePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeThemePermissions", input)
	return &QuickSightDescribeThemePermissionsFuture{Future: future}
}

func (a *QuickSightStub) DescribeUser(ctx workflow.Context, input *quicksight.DescribeUserInput) (*quicksight.DescribeUserOutput, error) {
	var output quicksight.DescribeUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeUser", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) DescribeUserAsync(ctx workflow.Context, input *quicksight.DescribeUserInput) *QuickSightDescribeUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.DescribeUser", input)
	return &QuickSightDescribeUserFuture{Future: future}
}

func (a *QuickSightStub) GetDashboardEmbedUrl(ctx workflow.Context, input *quicksight.GetDashboardEmbedUrlInput) (*quicksight.GetDashboardEmbedUrlOutput, error) {
	var output quicksight.GetDashboardEmbedUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.GetDashboardEmbedUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) GetDashboardEmbedUrlAsync(ctx workflow.Context, input *quicksight.GetDashboardEmbedUrlInput) *QuickSightGetDashboardEmbedUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.GetDashboardEmbedUrl", input)
	return &QuickSightGetDashboardEmbedUrlFuture{Future: future}
}

func (a *QuickSightStub) GetSessionEmbedUrl(ctx workflow.Context, input *quicksight.GetSessionEmbedUrlInput) (*quicksight.GetSessionEmbedUrlOutput, error) {
	var output quicksight.GetSessionEmbedUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.GetSessionEmbedUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) GetSessionEmbedUrlAsync(ctx workflow.Context, input *quicksight.GetSessionEmbedUrlInput) *QuickSightGetSessionEmbedUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.GetSessionEmbedUrl", input)
	return &QuickSightGetSessionEmbedUrlFuture{Future: future}
}

func (a *QuickSightStub) ListAnalyses(ctx workflow.Context, input *quicksight.ListAnalysesInput) (*quicksight.ListAnalysesOutput, error) {
	var output quicksight.ListAnalysesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListAnalyses", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListAnalysesAsync(ctx workflow.Context, input *quicksight.ListAnalysesInput) *QuickSightListAnalysesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListAnalyses", input)
	return &QuickSightListAnalysesFuture{Future: future}
}

func (a *QuickSightStub) ListDashboardVersions(ctx workflow.Context, input *quicksight.ListDashboardVersionsInput) (*quicksight.ListDashboardVersionsOutput, error) {
	var output quicksight.ListDashboardVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDashboardVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListDashboardVersionsAsync(ctx workflow.Context, input *quicksight.ListDashboardVersionsInput) *QuickSightListDashboardVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDashboardVersions", input)
	return &QuickSightListDashboardVersionsFuture{Future: future}
}

func (a *QuickSightStub) ListDashboards(ctx workflow.Context, input *quicksight.ListDashboardsInput) (*quicksight.ListDashboardsOutput, error) {
	var output quicksight.ListDashboardsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDashboards", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListDashboardsAsync(ctx workflow.Context, input *quicksight.ListDashboardsInput) *QuickSightListDashboardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDashboards", input)
	return &QuickSightListDashboardsFuture{Future: future}
}

func (a *QuickSightStub) ListDataSets(ctx workflow.Context, input *quicksight.ListDataSetsInput) (*quicksight.ListDataSetsOutput, error) {
	var output quicksight.ListDataSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDataSets", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListDataSetsAsync(ctx workflow.Context, input *quicksight.ListDataSetsInput) *QuickSightListDataSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDataSets", input)
	return &QuickSightListDataSetsFuture{Future: future}
}

func (a *QuickSightStub) ListDataSources(ctx workflow.Context, input *quicksight.ListDataSourcesInput) (*quicksight.ListDataSourcesOutput, error) {
	var output quicksight.ListDataSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDataSources", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListDataSourcesAsync(ctx workflow.Context, input *quicksight.ListDataSourcesInput) *QuickSightListDataSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListDataSources", input)
	return &QuickSightListDataSourcesFuture{Future: future}
}

func (a *QuickSightStub) ListGroupMemberships(ctx workflow.Context, input *quicksight.ListGroupMembershipsInput) (*quicksight.ListGroupMembershipsOutput, error) {
	var output quicksight.ListGroupMembershipsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListGroupMemberships", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListGroupMembershipsAsync(ctx workflow.Context, input *quicksight.ListGroupMembershipsInput) *QuickSightListGroupMembershipsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListGroupMemberships", input)
	return &QuickSightListGroupMembershipsFuture{Future: future}
}

func (a *QuickSightStub) ListGroups(ctx workflow.Context, input *quicksight.ListGroupsInput) (*quicksight.ListGroupsOutput, error) {
	var output quicksight.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListGroupsAsync(ctx workflow.Context, input *quicksight.ListGroupsInput) *QuickSightListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListGroups", input)
	return &QuickSightListGroupsFuture{Future: future}
}

func (a *QuickSightStub) ListIAMPolicyAssignments(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsInput) (*quicksight.ListIAMPolicyAssignmentsOutput, error) {
	var output quicksight.ListIAMPolicyAssignmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListIAMPolicyAssignments", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListIAMPolicyAssignmentsAsync(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsInput) *QuickSightListIAMPolicyAssignmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListIAMPolicyAssignments", input)
	return &QuickSightListIAMPolicyAssignmentsFuture{Future: future}
}

func (a *QuickSightStub) ListIAMPolicyAssignmentsForUser(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsForUserInput) (*quicksight.ListIAMPolicyAssignmentsForUserOutput, error) {
	var output quicksight.ListIAMPolicyAssignmentsForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListIAMPolicyAssignmentsForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListIAMPolicyAssignmentsForUserAsync(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsForUserInput) *QuickSightListIAMPolicyAssignmentsForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListIAMPolicyAssignmentsForUser", input)
	return &QuickSightListIAMPolicyAssignmentsForUserFuture{Future: future}
}

func (a *QuickSightStub) ListIngestions(ctx workflow.Context, input *quicksight.ListIngestionsInput) (*quicksight.ListIngestionsOutput, error) {
	var output quicksight.ListIngestionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListIngestions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListIngestionsAsync(ctx workflow.Context, input *quicksight.ListIngestionsInput) *QuickSightListIngestionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListIngestions", input)
	return &QuickSightListIngestionsFuture{Future: future}
}

func (a *QuickSightStub) ListNamespaces(ctx workflow.Context, input *quicksight.ListNamespacesInput) (*quicksight.ListNamespacesOutput, error) {
	var output quicksight.ListNamespacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListNamespaces", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListNamespacesAsync(ctx workflow.Context, input *quicksight.ListNamespacesInput) *QuickSightListNamespacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListNamespaces", input)
	return &QuickSightListNamespacesFuture{Future: future}
}

func (a *QuickSightStub) ListTagsForResource(ctx workflow.Context, input *quicksight.ListTagsForResourceInput) (*quicksight.ListTagsForResourceOutput, error) {
	var output quicksight.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListTagsForResourceAsync(ctx workflow.Context, input *quicksight.ListTagsForResourceInput) *QuickSightListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTagsForResource", input)
	return &QuickSightListTagsForResourceFuture{Future: future}
}

func (a *QuickSightStub) ListTemplateAliases(ctx workflow.Context, input *quicksight.ListTemplateAliasesInput) (*quicksight.ListTemplateAliasesOutput, error) {
	var output quicksight.ListTemplateAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTemplateAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListTemplateAliasesAsync(ctx workflow.Context, input *quicksight.ListTemplateAliasesInput) *QuickSightListTemplateAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTemplateAliases", input)
	return &QuickSightListTemplateAliasesFuture{Future: future}
}

func (a *QuickSightStub) ListTemplateVersions(ctx workflow.Context, input *quicksight.ListTemplateVersionsInput) (*quicksight.ListTemplateVersionsOutput, error) {
	var output quicksight.ListTemplateVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTemplateVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListTemplateVersionsAsync(ctx workflow.Context, input *quicksight.ListTemplateVersionsInput) *QuickSightListTemplateVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTemplateVersions", input)
	return &QuickSightListTemplateVersionsFuture{Future: future}
}

func (a *QuickSightStub) ListTemplates(ctx workflow.Context, input *quicksight.ListTemplatesInput) (*quicksight.ListTemplatesOutput, error) {
	var output quicksight.ListTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListTemplatesAsync(ctx workflow.Context, input *quicksight.ListTemplatesInput) *QuickSightListTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListTemplates", input)
	return &QuickSightListTemplatesFuture{Future: future}
}

func (a *QuickSightStub) ListThemeAliases(ctx workflow.Context, input *quicksight.ListThemeAliasesInput) (*quicksight.ListThemeAliasesOutput, error) {
	var output quicksight.ListThemeAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListThemeAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListThemeAliasesAsync(ctx workflow.Context, input *quicksight.ListThemeAliasesInput) *QuickSightListThemeAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListThemeAliases", input)
	return &QuickSightListThemeAliasesFuture{Future: future}
}

func (a *QuickSightStub) ListThemeVersions(ctx workflow.Context, input *quicksight.ListThemeVersionsInput) (*quicksight.ListThemeVersionsOutput, error) {
	var output quicksight.ListThemeVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListThemeVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListThemeVersionsAsync(ctx workflow.Context, input *quicksight.ListThemeVersionsInput) *QuickSightListThemeVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListThemeVersions", input)
	return &QuickSightListThemeVersionsFuture{Future: future}
}

func (a *QuickSightStub) ListThemes(ctx workflow.Context, input *quicksight.ListThemesInput) (*quicksight.ListThemesOutput, error) {
	var output quicksight.ListThemesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListThemes", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListThemesAsync(ctx workflow.Context, input *quicksight.ListThemesInput) *QuickSightListThemesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListThemes", input)
	return &QuickSightListThemesFuture{Future: future}
}

func (a *QuickSightStub) ListUserGroups(ctx workflow.Context, input *quicksight.ListUserGroupsInput) (*quicksight.ListUserGroupsOutput, error) {
	var output quicksight.ListUserGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListUserGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListUserGroupsAsync(ctx workflow.Context, input *quicksight.ListUserGroupsInput) *QuickSightListUserGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListUserGroups", input)
	return &QuickSightListUserGroupsFuture{Future: future}
}

func (a *QuickSightStub) ListUsers(ctx workflow.Context, input *quicksight.ListUsersInput) (*quicksight.ListUsersOutput, error) {
	var output quicksight.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) ListUsersAsync(ctx workflow.Context, input *quicksight.ListUsersInput) *QuickSightListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.ListUsers", input)
	return &QuickSightListUsersFuture{Future: future}
}

func (a *QuickSightStub) RegisterUser(ctx workflow.Context, input *quicksight.RegisterUserInput) (*quicksight.RegisterUserOutput, error) {
	var output quicksight.RegisterUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.RegisterUser", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) RegisterUserAsync(ctx workflow.Context, input *quicksight.RegisterUserInput) *QuickSightRegisterUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.RegisterUser", input)
	return &QuickSightRegisterUserFuture{Future: future}
}

func (a *QuickSightStub) RestoreAnalysis(ctx workflow.Context, input *quicksight.RestoreAnalysisInput) (*quicksight.RestoreAnalysisOutput, error) {
	var output quicksight.RestoreAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.RestoreAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) RestoreAnalysisAsync(ctx workflow.Context, input *quicksight.RestoreAnalysisInput) *QuickSightRestoreAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.RestoreAnalysis", input)
	return &QuickSightRestoreAnalysisFuture{Future: future}
}

func (a *QuickSightStub) SearchAnalyses(ctx workflow.Context, input *quicksight.SearchAnalysesInput) (*quicksight.SearchAnalysesOutput, error) {
	var output quicksight.SearchAnalysesOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.SearchAnalyses", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) SearchAnalysesAsync(ctx workflow.Context, input *quicksight.SearchAnalysesInput) *QuickSightSearchAnalysesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.SearchAnalyses", input)
	return &QuickSightSearchAnalysesFuture{Future: future}
}

func (a *QuickSightStub) SearchDashboards(ctx workflow.Context, input *quicksight.SearchDashboardsInput) (*quicksight.SearchDashboardsOutput, error) {
	var output quicksight.SearchDashboardsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.SearchDashboards", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) SearchDashboardsAsync(ctx workflow.Context, input *quicksight.SearchDashboardsInput) *QuickSightSearchDashboardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.SearchDashboards", input)
	return &QuickSightSearchDashboardsFuture{Future: future}
}

func (a *QuickSightStub) TagResource(ctx workflow.Context, input *quicksight.TagResourceInput) (*quicksight.TagResourceOutput, error) {
	var output quicksight.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) TagResourceAsync(ctx workflow.Context, input *quicksight.TagResourceInput) *QuickSightTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.TagResource", input)
	return &QuickSightTagResourceFuture{Future: future}
}

func (a *QuickSightStub) UntagResource(ctx workflow.Context, input *quicksight.UntagResourceInput) (*quicksight.UntagResourceOutput, error) {
	var output quicksight.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UntagResourceAsync(ctx workflow.Context, input *quicksight.UntagResourceInput) *QuickSightUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UntagResource", input)
	return &QuickSightUntagResourceFuture{Future: future}
}

func (a *QuickSightStub) UpdateAccountCustomization(ctx workflow.Context, input *quicksight.UpdateAccountCustomizationInput) (*quicksight.UpdateAccountCustomizationOutput, error) {
	var output quicksight.UpdateAccountCustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAccountCustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateAccountCustomizationAsync(ctx workflow.Context, input *quicksight.UpdateAccountCustomizationInput) *QuickSightUpdateAccountCustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAccountCustomization", input)
	return &QuickSightUpdateAccountCustomizationFuture{Future: future}
}

func (a *QuickSightStub) UpdateAccountSettings(ctx workflow.Context, input *quicksight.UpdateAccountSettingsInput) (*quicksight.UpdateAccountSettingsOutput, error) {
	var output quicksight.UpdateAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateAccountSettingsAsync(ctx workflow.Context, input *quicksight.UpdateAccountSettingsInput) *QuickSightUpdateAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAccountSettings", input)
	return &QuickSightUpdateAccountSettingsFuture{Future: future}
}

func (a *QuickSightStub) UpdateAnalysis(ctx workflow.Context, input *quicksight.UpdateAnalysisInput) (*quicksight.UpdateAnalysisOutput, error) {
	var output quicksight.UpdateAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateAnalysisAsync(ctx workflow.Context, input *quicksight.UpdateAnalysisInput) *QuickSightUpdateAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAnalysis", input)
	return &QuickSightUpdateAnalysisFuture{Future: future}
}

func (a *QuickSightStub) UpdateAnalysisPermissions(ctx workflow.Context, input *quicksight.UpdateAnalysisPermissionsInput) (*quicksight.UpdateAnalysisPermissionsOutput, error) {
	var output quicksight.UpdateAnalysisPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAnalysisPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateAnalysisPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateAnalysisPermissionsInput) *QuickSightUpdateAnalysisPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateAnalysisPermissions", input)
	return &QuickSightUpdateAnalysisPermissionsFuture{Future: future}
}

func (a *QuickSightStub) UpdateDashboard(ctx workflow.Context, input *quicksight.UpdateDashboardInput) (*quicksight.UpdateDashboardOutput, error) {
	var output quicksight.UpdateDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDashboardAsync(ctx workflow.Context, input *quicksight.UpdateDashboardInput) *QuickSightUpdateDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDashboard", input)
	return &QuickSightUpdateDashboardFuture{Future: future}
}

func (a *QuickSightStub) UpdateDashboardPermissions(ctx workflow.Context, input *quicksight.UpdateDashboardPermissionsInput) (*quicksight.UpdateDashboardPermissionsOutput, error) {
	var output quicksight.UpdateDashboardPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDashboardPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDashboardPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDashboardPermissionsInput) *QuickSightUpdateDashboardPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDashboardPermissions", input)
	return &QuickSightUpdateDashboardPermissionsFuture{Future: future}
}

func (a *QuickSightStub) UpdateDashboardPublishedVersion(ctx workflow.Context, input *quicksight.UpdateDashboardPublishedVersionInput) (*quicksight.UpdateDashboardPublishedVersionOutput, error) {
	var output quicksight.UpdateDashboardPublishedVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDashboardPublishedVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDashboardPublishedVersionAsync(ctx workflow.Context, input *quicksight.UpdateDashboardPublishedVersionInput) *QuickSightUpdateDashboardPublishedVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDashboardPublishedVersion", input)
	return &QuickSightUpdateDashboardPublishedVersionFuture{Future: future}
}

func (a *QuickSightStub) UpdateDataSet(ctx workflow.Context, input *quicksight.UpdateDataSetInput) (*quicksight.UpdateDataSetOutput, error) {
	var output quicksight.UpdateDataSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSet", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDataSetAsync(ctx workflow.Context, input *quicksight.UpdateDataSetInput) *QuickSightUpdateDataSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSet", input)
	return &QuickSightUpdateDataSetFuture{Future: future}
}

func (a *QuickSightStub) UpdateDataSetPermissions(ctx workflow.Context, input *quicksight.UpdateDataSetPermissionsInput) (*quicksight.UpdateDataSetPermissionsOutput, error) {
	var output quicksight.UpdateDataSetPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSetPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDataSetPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDataSetPermissionsInput) *QuickSightUpdateDataSetPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSetPermissions", input)
	return &QuickSightUpdateDataSetPermissionsFuture{Future: future}
}

func (a *QuickSightStub) UpdateDataSource(ctx workflow.Context, input *quicksight.UpdateDataSourceInput) (*quicksight.UpdateDataSourceOutput, error) {
	var output quicksight.UpdateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDataSourceAsync(ctx workflow.Context, input *quicksight.UpdateDataSourceInput) *QuickSightUpdateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSource", input)
	return &QuickSightUpdateDataSourceFuture{Future: future}
}

func (a *QuickSightStub) UpdateDataSourcePermissions(ctx workflow.Context, input *quicksight.UpdateDataSourcePermissionsInput) (*quicksight.UpdateDataSourcePermissionsOutput, error) {
	var output quicksight.UpdateDataSourcePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSourcePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateDataSourcePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDataSourcePermissionsInput) *QuickSightUpdateDataSourcePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateDataSourcePermissions", input)
	return &QuickSightUpdateDataSourcePermissionsFuture{Future: future}
}

func (a *QuickSightStub) UpdateGroup(ctx workflow.Context, input *quicksight.UpdateGroupInput) (*quicksight.UpdateGroupOutput, error) {
	var output quicksight.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateGroupAsync(ctx workflow.Context, input *quicksight.UpdateGroupInput) *QuickSightUpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateGroup", input)
	return &QuickSightUpdateGroupFuture{Future: future}
}

func (a *QuickSightStub) UpdateIAMPolicyAssignment(ctx workflow.Context, input *quicksight.UpdateIAMPolicyAssignmentInput) (*quicksight.UpdateIAMPolicyAssignmentOutput, error) {
	var output quicksight.UpdateIAMPolicyAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateIAMPolicyAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.UpdateIAMPolicyAssignmentInput) *QuickSightUpdateIAMPolicyAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateIAMPolicyAssignment", input)
	return &QuickSightUpdateIAMPolicyAssignmentFuture{Future: future}
}

func (a *QuickSightStub) UpdateTemplate(ctx workflow.Context, input *quicksight.UpdateTemplateInput) (*quicksight.UpdateTemplateOutput, error) {
	var output quicksight.UpdateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateTemplateAsync(ctx workflow.Context, input *quicksight.UpdateTemplateInput) *QuickSightUpdateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTemplate", input)
	return &QuickSightUpdateTemplateFuture{Future: future}
}

func (a *QuickSightStub) UpdateTemplateAlias(ctx workflow.Context, input *quicksight.UpdateTemplateAliasInput) (*quicksight.UpdateTemplateAliasOutput, error) {
	var output quicksight.UpdateTemplateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTemplateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateTemplateAliasAsync(ctx workflow.Context, input *quicksight.UpdateTemplateAliasInput) *QuickSightUpdateTemplateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTemplateAlias", input)
	return &QuickSightUpdateTemplateAliasFuture{Future: future}
}

func (a *QuickSightStub) UpdateTemplatePermissions(ctx workflow.Context, input *quicksight.UpdateTemplatePermissionsInput) (*quicksight.UpdateTemplatePermissionsOutput, error) {
	var output quicksight.UpdateTemplatePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTemplatePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateTemplatePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateTemplatePermissionsInput) *QuickSightUpdateTemplatePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTemplatePermissions", input)
	return &QuickSightUpdateTemplatePermissionsFuture{Future: future}
}

func (a *QuickSightStub) UpdateTheme(ctx workflow.Context, input *quicksight.UpdateThemeInput) (*quicksight.UpdateThemeOutput, error) {
	var output quicksight.UpdateThemeOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTheme", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateThemeAsync(ctx workflow.Context, input *quicksight.UpdateThemeInput) *QuickSightUpdateThemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateTheme", input)
	return &QuickSightUpdateThemeFuture{Future: future}
}

func (a *QuickSightStub) UpdateThemeAlias(ctx workflow.Context, input *quicksight.UpdateThemeAliasInput) (*quicksight.UpdateThemeAliasOutput, error) {
	var output quicksight.UpdateThemeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateThemeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateThemeAliasAsync(ctx workflow.Context, input *quicksight.UpdateThemeAliasInput) *QuickSightUpdateThemeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateThemeAlias", input)
	return &QuickSightUpdateThemeAliasFuture{Future: future}
}

func (a *QuickSightStub) UpdateThemePermissions(ctx workflow.Context, input *quicksight.UpdateThemePermissionsInput) (*quicksight.UpdateThemePermissionsOutput, error) {
	var output quicksight.UpdateThemePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateThemePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateThemePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateThemePermissionsInput) *QuickSightUpdateThemePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateThemePermissions", input)
	return &QuickSightUpdateThemePermissionsFuture{Future: future}
}

func (a *QuickSightStub) UpdateUser(ctx workflow.Context, input *quicksight.UpdateUserInput) (*quicksight.UpdateUserOutput, error) {
	var output quicksight.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *QuickSightStub) UpdateUserAsync(ctx workflow.Context, input *quicksight.UpdateUserInput) *QuickSightUpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.quicksight.UpdateUser", input)
	return &QuickSightUpdateUserFuture{Future: future}
}
