// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cognitosync"
	"go.temporal.io/sdk/workflow"
)

type CognitoSyncClient interface {
	BulkPublish(ctx workflow.Context, input *cognitosync.BulkPublishInput) (*cognitosync.BulkPublishOutput, error)
	BulkPublishAsync(ctx workflow.Context, input *cognitosync.BulkPublishInput) *CognitosyncBulkPublishFuture

	DeleteDataset(ctx workflow.Context, input *cognitosync.DeleteDatasetInput) (*cognitosync.DeleteDatasetOutput, error)
	DeleteDatasetAsync(ctx workflow.Context, input *cognitosync.DeleteDatasetInput) *CognitosyncDeleteDatasetFuture

	DescribeDataset(ctx workflow.Context, input *cognitosync.DescribeDatasetInput) (*cognitosync.DescribeDatasetOutput, error)
	DescribeDatasetAsync(ctx workflow.Context, input *cognitosync.DescribeDatasetInput) *CognitosyncDescribeDatasetFuture

	DescribeIdentityPoolUsage(ctx workflow.Context, input *cognitosync.DescribeIdentityPoolUsageInput) (*cognitosync.DescribeIdentityPoolUsageOutput, error)
	DescribeIdentityPoolUsageAsync(ctx workflow.Context, input *cognitosync.DescribeIdentityPoolUsageInput) *CognitosyncDescribeIdentityPoolUsageFuture

	DescribeIdentityUsage(ctx workflow.Context, input *cognitosync.DescribeIdentityUsageInput) (*cognitosync.DescribeIdentityUsageOutput, error)
	DescribeIdentityUsageAsync(ctx workflow.Context, input *cognitosync.DescribeIdentityUsageInput) *CognitosyncDescribeIdentityUsageFuture

	GetBulkPublishDetails(ctx workflow.Context, input *cognitosync.GetBulkPublishDetailsInput) (*cognitosync.GetBulkPublishDetailsOutput, error)
	GetBulkPublishDetailsAsync(ctx workflow.Context, input *cognitosync.GetBulkPublishDetailsInput) *CognitosyncGetBulkPublishDetailsFuture

	GetCognitoEvents(ctx workflow.Context, input *cognitosync.GetCognitoEventsInput) (*cognitosync.GetCognitoEventsOutput, error)
	GetCognitoEventsAsync(ctx workflow.Context, input *cognitosync.GetCognitoEventsInput) *CognitosyncGetCognitoEventsFuture

	GetIdentityPoolConfiguration(ctx workflow.Context, input *cognitosync.GetIdentityPoolConfigurationInput) (*cognitosync.GetIdentityPoolConfigurationOutput, error)
	GetIdentityPoolConfigurationAsync(ctx workflow.Context, input *cognitosync.GetIdentityPoolConfigurationInput) *CognitosyncGetIdentityPoolConfigurationFuture

	ListDatasets(ctx workflow.Context, input *cognitosync.ListDatasetsInput) (*cognitosync.ListDatasetsOutput, error)
	ListDatasetsAsync(ctx workflow.Context, input *cognitosync.ListDatasetsInput) *CognitosyncListDatasetsFuture

	ListIdentityPoolUsage(ctx workflow.Context, input *cognitosync.ListIdentityPoolUsageInput) (*cognitosync.ListIdentityPoolUsageOutput, error)
	ListIdentityPoolUsageAsync(ctx workflow.Context, input *cognitosync.ListIdentityPoolUsageInput) *CognitosyncListIdentityPoolUsageFuture

	ListRecords(ctx workflow.Context, input *cognitosync.ListRecordsInput) (*cognitosync.ListRecordsOutput, error)
	ListRecordsAsync(ctx workflow.Context, input *cognitosync.ListRecordsInput) *CognitosyncListRecordsFuture

	RegisterDevice(ctx workflow.Context, input *cognitosync.RegisterDeviceInput) (*cognitosync.RegisterDeviceOutput, error)
	RegisterDeviceAsync(ctx workflow.Context, input *cognitosync.RegisterDeviceInput) *CognitosyncRegisterDeviceFuture

	SetCognitoEvents(ctx workflow.Context, input *cognitosync.SetCognitoEventsInput) (*cognitosync.SetCognitoEventsOutput, error)
	SetCognitoEventsAsync(ctx workflow.Context, input *cognitosync.SetCognitoEventsInput) *CognitosyncSetCognitoEventsFuture

	SetIdentityPoolConfiguration(ctx workflow.Context, input *cognitosync.SetIdentityPoolConfigurationInput) (*cognitosync.SetIdentityPoolConfigurationOutput, error)
	SetIdentityPoolConfigurationAsync(ctx workflow.Context, input *cognitosync.SetIdentityPoolConfigurationInput) *CognitosyncSetIdentityPoolConfigurationFuture

	SubscribeToDataset(ctx workflow.Context, input *cognitosync.SubscribeToDatasetInput) (*cognitosync.SubscribeToDatasetOutput, error)
	SubscribeToDatasetAsync(ctx workflow.Context, input *cognitosync.SubscribeToDatasetInput) *CognitosyncSubscribeToDatasetFuture

	UnsubscribeFromDataset(ctx workflow.Context, input *cognitosync.UnsubscribeFromDatasetInput) (*cognitosync.UnsubscribeFromDatasetOutput, error)
	UnsubscribeFromDatasetAsync(ctx workflow.Context, input *cognitosync.UnsubscribeFromDatasetInput) *CognitosyncUnsubscribeFromDatasetFuture

	UpdateRecords(ctx workflow.Context, input *cognitosync.UpdateRecordsInput) (*cognitosync.UpdateRecordsOutput, error)
	UpdateRecordsAsync(ctx workflow.Context, input *cognitosync.UpdateRecordsInput) *CognitosyncUpdateRecordsFuture
}

type CognitoSyncStub struct{}

func NewCognitoSyncStub() CognitoSyncClient {
	return &CognitoSyncStub{}
}

type CognitosyncBulkPublishFuture struct {
	Future workflow.Future
}

func (r *CognitosyncBulkPublishFuture) Get(ctx workflow.Context) (*cognitosync.BulkPublishOutput, error) {
	var output cognitosync.BulkPublishOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncDeleteDatasetFuture struct {
	Future workflow.Future
}

func (r *CognitosyncDeleteDatasetFuture) Get(ctx workflow.Context) (*cognitosync.DeleteDatasetOutput, error) {
	var output cognitosync.DeleteDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncDescribeDatasetFuture struct {
	Future workflow.Future
}

func (r *CognitosyncDescribeDatasetFuture) Get(ctx workflow.Context) (*cognitosync.DescribeDatasetOutput, error) {
	var output cognitosync.DescribeDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncDescribeIdentityPoolUsageFuture struct {
	Future workflow.Future
}

func (r *CognitosyncDescribeIdentityPoolUsageFuture) Get(ctx workflow.Context) (*cognitosync.DescribeIdentityPoolUsageOutput, error) {
	var output cognitosync.DescribeIdentityPoolUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncDescribeIdentityUsageFuture struct {
	Future workflow.Future
}

func (r *CognitosyncDescribeIdentityUsageFuture) Get(ctx workflow.Context) (*cognitosync.DescribeIdentityUsageOutput, error) {
	var output cognitosync.DescribeIdentityUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncGetBulkPublishDetailsFuture struct {
	Future workflow.Future
}

func (r *CognitosyncGetBulkPublishDetailsFuture) Get(ctx workflow.Context) (*cognitosync.GetBulkPublishDetailsOutput, error) {
	var output cognitosync.GetBulkPublishDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncGetCognitoEventsFuture struct {
	Future workflow.Future
}

func (r *CognitosyncGetCognitoEventsFuture) Get(ctx workflow.Context) (*cognitosync.GetCognitoEventsOutput, error) {
	var output cognitosync.GetCognitoEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncGetIdentityPoolConfigurationFuture struct {
	Future workflow.Future
}

func (r *CognitosyncGetIdentityPoolConfigurationFuture) Get(ctx workflow.Context) (*cognitosync.GetIdentityPoolConfigurationOutput, error) {
	var output cognitosync.GetIdentityPoolConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncListDatasetsFuture struct {
	Future workflow.Future
}

func (r *CognitosyncListDatasetsFuture) Get(ctx workflow.Context) (*cognitosync.ListDatasetsOutput, error) {
	var output cognitosync.ListDatasetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncListIdentityPoolUsageFuture struct {
	Future workflow.Future
}

func (r *CognitosyncListIdentityPoolUsageFuture) Get(ctx workflow.Context) (*cognitosync.ListIdentityPoolUsageOutput, error) {
	var output cognitosync.ListIdentityPoolUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncListRecordsFuture struct {
	Future workflow.Future
}

func (r *CognitosyncListRecordsFuture) Get(ctx workflow.Context) (*cognitosync.ListRecordsOutput, error) {
	var output cognitosync.ListRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncRegisterDeviceFuture struct {
	Future workflow.Future
}

func (r *CognitosyncRegisterDeviceFuture) Get(ctx workflow.Context) (*cognitosync.RegisterDeviceOutput, error) {
	var output cognitosync.RegisterDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncSetCognitoEventsFuture struct {
	Future workflow.Future
}

func (r *CognitosyncSetCognitoEventsFuture) Get(ctx workflow.Context) (*cognitosync.SetCognitoEventsOutput, error) {
	var output cognitosync.SetCognitoEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncSetIdentityPoolConfigurationFuture struct {
	Future workflow.Future
}

func (r *CognitosyncSetIdentityPoolConfigurationFuture) Get(ctx workflow.Context) (*cognitosync.SetIdentityPoolConfigurationOutput, error) {
	var output cognitosync.SetIdentityPoolConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncSubscribeToDatasetFuture struct {
	Future workflow.Future
}

func (r *CognitosyncSubscribeToDatasetFuture) Get(ctx workflow.Context) (*cognitosync.SubscribeToDatasetOutput, error) {
	var output cognitosync.SubscribeToDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncUnsubscribeFromDatasetFuture struct {
	Future workflow.Future
}

func (r *CognitosyncUnsubscribeFromDatasetFuture) Get(ctx workflow.Context) (*cognitosync.UnsubscribeFromDatasetOutput, error) {
	var output cognitosync.UnsubscribeFromDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitosyncUpdateRecordsFuture struct {
	Future workflow.Future
}

func (r *CognitosyncUpdateRecordsFuture) Get(ctx workflow.Context) (*cognitosync.UpdateRecordsOutput, error) {
	var output cognitosync.UpdateRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) BulkPublish(ctx workflow.Context, input *cognitosync.BulkPublishInput) (*cognitosync.BulkPublishOutput, error) {
	var output cognitosync.BulkPublishOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.BulkPublish", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) BulkPublishAsync(ctx workflow.Context, input *cognitosync.BulkPublishInput) *CognitosyncBulkPublishFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.BulkPublish", input)
	return &CognitosyncBulkPublishFuture{Future: future}
}

func (a *CognitoSyncStub) DeleteDataset(ctx workflow.Context, input *cognitosync.DeleteDatasetInput) (*cognitosync.DeleteDatasetOutput, error) {
	var output cognitosync.DeleteDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.DeleteDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) DeleteDatasetAsync(ctx workflow.Context, input *cognitosync.DeleteDatasetInput) *CognitosyncDeleteDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.DeleteDataset", input)
	return &CognitosyncDeleteDatasetFuture{Future: future}
}

func (a *CognitoSyncStub) DescribeDataset(ctx workflow.Context, input *cognitosync.DescribeDatasetInput) (*cognitosync.DescribeDatasetOutput, error) {
	var output cognitosync.DescribeDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.DescribeDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) DescribeDatasetAsync(ctx workflow.Context, input *cognitosync.DescribeDatasetInput) *CognitosyncDescribeDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.DescribeDataset", input)
	return &CognitosyncDescribeDatasetFuture{Future: future}
}

func (a *CognitoSyncStub) DescribeIdentityPoolUsage(ctx workflow.Context, input *cognitosync.DescribeIdentityPoolUsageInput) (*cognitosync.DescribeIdentityPoolUsageOutput, error) {
	var output cognitosync.DescribeIdentityPoolUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.DescribeIdentityPoolUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) DescribeIdentityPoolUsageAsync(ctx workflow.Context, input *cognitosync.DescribeIdentityPoolUsageInput) *CognitosyncDescribeIdentityPoolUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.DescribeIdentityPoolUsage", input)
	return &CognitosyncDescribeIdentityPoolUsageFuture{Future: future}
}

func (a *CognitoSyncStub) DescribeIdentityUsage(ctx workflow.Context, input *cognitosync.DescribeIdentityUsageInput) (*cognitosync.DescribeIdentityUsageOutput, error) {
	var output cognitosync.DescribeIdentityUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.DescribeIdentityUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) DescribeIdentityUsageAsync(ctx workflow.Context, input *cognitosync.DescribeIdentityUsageInput) *CognitosyncDescribeIdentityUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.DescribeIdentityUsage", input)
	return &CognitosyncDescribeIdentityUsageFuture{Future: future}
}

func (a *CognitoSyncStub) GetBulkPublishDetails(ctx workflow.Context, input *cognitosync.GetBulkPublishDetailsInput) (*cognitosync.GetBulkPublishDetailsOutput, error) {
	var output cognitosync.GetBulkPublishDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.GetBulkPublishDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) GetBulkPublishDetailsAsync(ctx workflow.Context, input *cognitosync.GetBulkPublishDetailsInput) *CognitosyncGetBulkPublishDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.GetBulkPublishDetails", input)
	return &CognitosyncGetBulkPublishDetailsFuture{Future: future}
}

func (a *CognitoSyncStub) GetCognitoEvents(ctx workflow.Context, input *cognitosync.GetCognitoEventsInput) (*cognitosync.GetCognitoEventsOutput, error) {
	var output cognitosync.GetCognitoEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.GetCognitoEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) GetCognitoEventsAsync(ctx workflow.Context, input *cognitosync.GetCognitoEventsInput) *CognitosyncGetCognitoEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.GetCognitoEvents", input)
	return &CognitosyncGetCognitoEventsFuture{Future: future}
}

func (a *CognitoSyncStub) GetIdentityPoolConfiguration(ctx workflow.Context, input *cognitosync.GetIdentityPoolConfigurationInput) (*cognitosync.GetIdentityPoolConfigurationOutput, error) {
	var output cognitosync.GetIdentityPoolConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.GetIdentityPoolConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) GetIdentityPoolConfigurationAsync(ctx workflow.Context, input *cognitosync.GetIdentityPoolConfigurationInput) *CognitosyncGetIdentityPoolConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.GetIdentityPoolConfiguration", input)
	return &CognitosyncGetIdentityPoolConfigurationFuture{Future: future}
}

func (a *CognitoSyncStub) ListDatasets(ctx workflow.Context, input *cognitosync.ListDatasetsInput) (*cognitosync.ListDatasetsOutput, error) {
	var output cognitosync.ListDatasetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.ListDatasets", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) ListDatasetsAsync(ctx workflow.Context, input *cognitosync.ListDatasetsInput) *CognitosyncListDatasetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.ListDatasets", input)
	return &CognitosyncListDatasetsFuture{Future: future}
}

func (a *CognitoSyncStub) ListIdentityPoolUsage(ctx workflow.Context, input *cognitosync.ListIdentityPoolUsageInput) (*cognitosync.ListIdentityPoolUsageOutput, error) {
	var output cognitosync.ListIdentityPoolUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.ListIdentityPoolUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) ListIdentityPoolUsageAsync(ctx workflow.Context, input *cognitosync.ListIdentityPoolUsageInput) *CognitosyncListIdentityPoolUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.ListIdentityPoolUsage", input)
	return &CognitosyncListIdentityPoolUsageFuture{Future: future}
}

func (a *CognitoSyncStub) ListRecords(ctx workflow.Context, input *cognitosync.ListRecordsInput) (*cognitosync.ListRecordsOutput, error) {
	var output cognitosync.ListRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.ListRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) ListRecordsAsync(ctx workflow.Context, input *cognitosync.ListRecordsInput) *CognitosyncListRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.ListRecords", input)
	return &CognitosyncListRecordsFuture{Future: future}
}

func (a *CognitoSyncStub) RegisterDevice(ctx workflow.Context, input *cognitosync.RegisterDeviceInput) (*cognitosync.RegisterDeviceOutput, error) {
	var output cognitosync.RegisterDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.RegisterDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) RegisterDeviceAsync(ctx workflow.Context, input *cognitosync.RegisterDeviceInput) *CognitosyncRegisterDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.RegisterDevice", input)
	return &CognitosyncRegisterDeviceFuture{Future: future}
}

func (a *CognitoSyncStub) SetCognitoEvents(ctx workflow.Context, input *cognitosync.SetCognitoEventsInput) (*cognitosync.SetCognitoEventsOutput, error) {
	var output cognitosync.SetCognitoEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.SetCognitoEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) SetCognitoEventsAsync(ctx workflow.Context, input *cognitosync.SetCognitoEventsInput) *CognitosyncSetCognitoEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.SetCognitoEvents", input)
	return &CognitosyncSetCognitoEventsFuture{Future: future}
}

func (a *CognitoSyncStub) SetIdentityPoolConfiguration(ctx workflow.Context, input *cognitosync.SetIdentityPoolConfigurationInput) (*cognitosync.SetIdentityPoolConfigurationOutput, error) {
	var output cognitosync.SetIdentityPoolConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.SetIdentityPoolConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) SetIdentityPoolConfigurationAsync(ctx workflow.Context, input *cognitosync.SetIdentityPoolConfigurationInput) *CognitosyncSetIdentityPoolConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.SetIdentityPoolConfiguration", input)
	return &CognitosyncSetIdentityPoolConfigurationFuture{Future: future}
}

func (a *CognitoSyncStub) SubscribeToDataset(ctx workflow.Context, input *cognitosync.SubscribeToDatasetInput) (*cognitosync.SubscribeToDatasetOutput, error) {
	var output cognitosync.SubscribeToDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.SubscribeToDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) SubscribeToDatasetAsync(ctx workflow.Context, input *cognitosync.SubscribeToDatasetInput) *CognitosyncSubscribeToDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.SubscribeToDataset", input)
	return &CognitosyncSubscribeToDatasetFuture{Future: future}
}

func (a *CognitoSyncStub) UnsubscribeFromDataset(ctx workflow.Context, input *cognitosync.UnsubscribeFromDatasetInput) (*cognitosync.UnsubscribeFromDatasetOutput, error) {
	var output cognitosync.UnsubscribeFromDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.UnsubscribeFromDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) UnsubscribeFromDatasetAsync(ctx workflow.Context, input *cognitosync.UnsubscribeFromDatasetInput) *CognitosyncUnsubscribeFromDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.UnsubscribeFromDataset", input)
	return &CognitosyncUnsubscribeFromDatasetFuture{Future: future}
}

func (a *CognitoSyncStub) UpdateRecords(ctx workflow.Context, input *cognitosync.UpdateRecordsInput) (*cognitosync.UpdateRecordsOutput, error) {
	var output cognitosync.UpdateRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitosync.UpdateRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoSyncStub) UpdateRecordsAsync(ctx workflow.Context, input *cognitosync.UpdateRecordsInput) *CognitosyncUpdateRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitosync.UpdateRecords", input)
	return &CognitosyncUpdateRecordsFuture{Future: future}
}
