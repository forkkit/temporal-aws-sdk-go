// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/batch"
	"go.temporal.io/sdk/workflow"
)

type BatchClient interface {
	CancelJob(ctx workflow.Context, input *batch.CancelJobInput) (*batch.CancelJobOutput, error)
	CancelJobAsync(ctx workflow.Context, input *batch.CancelJobInput) *BatchCancelJobFuture

	CreateComputeEnvironment(ctx workflow.Context, input *batch.CreateComputeEnvironmentInput) (*batch.CreateComputeEnvironmentOutput, error)
	CreateComputeEnvironmentAsync(ctx workflow.Context, input *batch.CreateComputeEnvironmentInput) *BatchCreateComputeEnvironmentFuture

	CreateJobQueue(ctx workflow.Context, input *batch.CreateJobQueueInput) (*batch.CreateJobQueueOutput, error)
	CreateJobQueueAsync(ctx workflow.Context, input *batch.CreateJobQueueInput) *BatchCreateJobQueueFuture

	DeleteComputeEnvironment(ctx workflow.Context, input *batch.DeleteComputeEnvironmentInput) (*batch.DeleteComputeEnvironmentOutput, error)
	DeleteComputeEnvironmentAsync(ctx workflow.Context, input *batch.DeleteComputeEnvironmentInput) *BatchDeleteComputeEnvironmentFuture

	DeleteJobQueue(ctx workflow.Context, input *batch.DeleteJobQueueInput) (*batch.DeleteJobQueueOutput, error)
	DeleteJobQueueAsync(ctx workflow.Context, input *batch.DeleteJobQueueInput) *BatchDeleteJobQueueFuture

	DeregisterJobDefinition(ctx workflow.Context, input *batch.DeregisterJobDefinitionInput) (*batch.DeregisterJobDefinitionOutput, error)
	DeregisterJobDefinitionAsync(ctx workflow.Context, input *batch.DeregisterJobDefinitionInput) *BatchDeregisterJobDefinitionFuture

	DescribeComputeEnvironments(ctx workflow.Context, input *batch.DescribeComputeEnvironmentsInput) (*batch.DescribeComputeEnvironmentsOutput, error)
	DescribeComputeEnvironmentsAsync(ctx workflow.Context, input *batch.DescribeComputeEnvironmentsInput) *BatchDescribeComputeEnvironmentsFuture

	DescribeJobDefinitions(ctx workflow.Context, input *batch.DescribeJobDefinitionsInput) (*batch.DescribeJobDefinitionsOutput, error)
	DescribeJobDefinitionsAsync(ctx workflow.Context, input *batch.DescribeJobDefinitionsInput) *BatchDescribeJobDefinitionsFuture

	DescribeJobQueues(ctx workflow.Context, input *batch.DescribeJobQueuesInput) (*batch.DescribeJobQueuesOutput, error)
	DescribeJobQueuesAsync(ctx workflow.Context, input *batch.DescribeJobQueuesInput) *BatchDescribeJobQueuesFuture

	DescribeJobs(ctx workflow.Context, input *batch.DescribeJobsInput) (*batch.DescribeJobsOutput, error)
	DescribeJobsAsync(ctx workflow.Context, input *batch.DescribeJobsInput) *BatchDescribeJobsFuture

	ListJobs(ctx workflow.Context, input *batch.ListJobsInput) (*batch.ListJobsOutput, error)
	ListJobsAsync(ctx workflow.Context, input *batch.ListJobsInput) *BatchListJobsFuture

	ListTagsForResource(ctx workflow.Context, input *batch.ListTagsForResourceInput) (*batch.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *batch.ListTagsForResourceInput) *BatchListTagsForResourceFuture

	RegisterJobDefinition(ctx workflow.Context, input *batch.RegisterJobDefinitionInput) (*batch.RegisterJobDefinitionOutput, error)
	RegisterJobDefinitionAsync(ctx workflow.Context, input *batch.RegisterJobDefinitionInput) *BatchRegisterJobDefinitionFuture

	SubmitJob(ctx workflow.Context, input *batch.SubmitJobInput) (*batch.SubmitJobOutput, error)
	SubmitJobAsync(ctx workflow.Context, input *batch.SubmitJobInput) *BatchSubmitJobFuture

	TagResource(ctx workflow.Context, input *batch.TagResourceInput) (*batch.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *batch.TagResourceInput) *BatchTagResourceFuture

	TerminateJob(ctx workflow.Context, input *batch.TerminateJobInput) (*batch.TerminateJobOutput, error)
	TerminateJobAsync(ctx workflow.Context, input *batch.TerminateJobInput) *BatchTerminateJobFuture

	UntagResource(ctx workflow.Context, input *batch.UntagResourceInput) (*batch.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *batch.UntagResourceInput) *BatchUntagResourceFuture

	UpdateComputeEnvironment(ctx workflow.Context, input *batch.UpdateComputeEnvironmentInput) (*batch.UpdateComputeEnvironmentOutput, error)
	UpdateComputeEnvironmentAsync(ctx workflow.Context, input *batch.UpdateComputeEnvironmentInput) *BatchUpdateComputeEnvironmentFuture

	UpdateJobQueue(ctx workflow.Context, input *batch.UpdateJobQueueInput) (*batch.UpdateJobQueueOutput, error)
	UpdateJobQueueAsync(ctx workflow.Context, input *batch.UpdateJobQueueInput) *BatchUpdateJobQueueFuture
}

type BatchStub struct{}

func NewBatchStub() BatchClient {
	return &BatchStub{}
}

type BatchCancelJobFuture struct {
	Future workflow.Future
}

func (r *BatchCancelJobFuture) Get(ctx workflow.Context) (*batch.CancelJobOutput, error) {
	var output batch.CancelJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchCreateComputeEnvironmentFuture struct {
	Future workflow.Future
}

func (r *BatchCreateComputeEnvironmentFuture) Get(ctx workflow.Context) (*batch.CreateComputeEnvironmentOutput, error) {
	var output batch.CreateComputeEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchCreateJobQueueFuture struct {
	Future workflow.Future
}

func (r *BatchCreateJobQueueFuture) Get(ctx workflow.Context) (*batch.CreateJobQueueOutput, error) {
	var output batch.CreateJobQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeleteComputeEnvironmentFuture struct {
	Future workflow.Future
}

func (r *BatchDeleteComputeEnvironmentFuture) Get(ctx workflow.Context) (*batch.DeleteComputeEnvironmentOutput, error) {
	var output batch.DeleteComputeEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeleteJobQueueFuture struct {
	Future workflow.Future
}

func (r *BatchDeleteJobQueueFuture) Get(ctx workflow.Context) (*batch.DeleteJobQueueOutput, error) {
	var output batch.DeleteJobQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeregisterJobDefinitionFuture struct {
	Future workflow.Future
}

func (r *BatchDeregisterJobDefinitionFuture) Get(ctx workflow.Context) (*batch.DeregisterJobDefinitionOutput, error) {
	var output batch.DeregisterJobDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDescribeComputeEnvironmentsFuture struct {
	Future workflow.Future
}

func (r *BatchDescribeComputeEnvironmentsFuture) Get(ctx workflow.Context) (*batch.DescribeComputeEnvironmentsOutput, error) {
	var output batch.DescribeComputeEnvironmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDescribeJobDefinitionsFuture struct {
	Future workflow.Future
}

func (r *BatchDescribeJobDefinitionsFuture) Get(ctx workflow.Context) (*batch.DescribeJobDefinitionsOutput, error) {
	var output batch.DescribeJobDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDescribeJobQueuesFuture struct {
	Future workflow.Future
}

func (r *BatchDescribeJobQueuesFuture) Get(ctx workflow.Context) (*batch.DescribeJobQueuesOutput, error) {
	var output batch.DescribeJobQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDescribeJobsFuture struct {
	Future workflow.Future
}

func (r *BatchDescribeJobsFuture) Get(ctx workflow.Context) (*batch.DescribeJobsOutput, error) {
	var output batch.DescribeJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchListJobsFuture struct {
	Future workflow.Future
}

func (r *BatchListJobsFuture) Get(ctx workflow.Context) (*batch.ListJobsOutput, error) {
	var output batch.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *BatchListTagsForResourceFuture) Get(ctx workflow.Context) (*batch.ListTagsForResourceOutput, error) {
	var output batch.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchRegisterJobDefinitionFuture struct {
	Future workflow.Future
}

func (r *BatchRegisterJobDefinitionFuture) Get(ctx workflow.Context) (*batch.RegisterJobDefinitionOutput, error) {
	var output batch.RegisterJobDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchSubmitJobFuture struct {
	Future workflow.Future
}

func (r *BatchSubmitJobFuture) Get(ctx workflow.Context) (*batch.SubmitJobOutput, error) {
	var output batch.SubmitJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchTagResourceFuture struct {
	Future workflow.Future
}

func (r *BatchTagResourceFuture) Get(ctx workflow.Context) (*batch.TagResourceOutput, error) {
	var output batch.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchTerminateJobFuture struct {
	Future workflow.Future
}

func (r *BatchTerminateJobFuture) Get(ctx workflow.Context) (*batch.TerminateJobOutput, error) {
	var output batch.TerminateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchUntagResourceFuture struct {
	Future workflow.Future
}

func (r *BatchUntagResourceFuture) Get(ctx workflow.Context) (*batch.UntagResourceOutput, error) {
	var output batch.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchUpdateComputeEnvironmentFuture struct {
	Future workflow.Future
}

func (r *BatchUpdateComputeEnvironmentFuture) Get(ctx workflow.Context) (*batch.UpdateComputeEnvironmentOutput, error) {
	var output batch.UpdateComputeEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchUpdateJobQueueFuture struct {
	Future workflow.Future
}

func (r *BatchUpdateJobQueueFuture) Get(ctx workflow.Context) (*batch.UpdateJobQueueOutput, error) {
	var output batch.UpdateJobQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) CancelJob(ctx workflow.Context, input *batch.CancelJobInput) (*batch.CancelJobOutput, error) {
	var output batch.CancelJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.CancelJob", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) CancelJobAsync(ctx workflow.Context, input *batch.CancelJobInput) *BatchCancelJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.CancelJob", input)
	return &BatchCancelJobFuture{Future: future}
}

func (a *BatchStub) CreateComputeEnvironment(ctx workflow.Context, input *batch.CreateComputeEnvironmentInput) (*batch.CreateComputeEnvironmentOutput, error) {
	var output batch.CreateComputeEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.CreateComputeEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) CreateComputeEnvironmentAsync(ctx workflow.Context, input *batch.CreateComputeEnvironmentInput) *BatchCreateComputeEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.CreateComputeEnvironment", input)
	return &BatchCreateComputeEnvironmentFuture{Future: future}
}

func (a *BatchStub) CreateJobQueue(ctx workflow.Context, input *batch.CreateJobQueueInput) (*batch.CreateJobQueueOutput, error) {
	var output batch.CreateJobQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.CreateJobQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) CreateJobQueueAsync(ctx workflow.Context, input *batch.CreateJobQueueInput) *BatchCreateJobQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.CreateJobQueue", input)
	return &BatchCreateJobQueueFuture{Future: future}
}

func (a *BatchStub) DeleteComputeEnvironment(ctx workflow.Context, input *batch.DeleteComputeEnvironmentInput) (*batch.DeleteComputeEnvironmentOutput, error) {
	var output batch.DeleteComputeEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.DeleteComputeEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) DeleteComputeEnvironmentAsync(ctx workflow.Context, input *batch.DeleteComputeEnvironmentInput) *BatchDeleteComputeEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.DeleteComputeEnvironment", input)
	return &BatchDeleteComputeEnvironmentFuture{Future: future}
}

func (a *BatchStub) DeleteJobQueue(ctx workflow.Context, input *batch.DeleteJobQueueInput) (*batch.DeleteJobQueueOutput, error) {
	var output batch.DeleteJobQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.DeleteJobQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) DeleteJobQueueAsync(ctx workflow.Context, input *batch.DeleteJobQueueInput) *BatchDeleteJobQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.DeleteJobQueue", input)
	return &BatchDeleteJobQueueFuture{Future: future}
}

func (a *BatchStub) DeregisterJobDefinition(ctx workflow.Context, input *batch.DeregisterJobDefinitionInput) (*batch.DeregisterJobDefinitionOutput, error) {
	var output batch.DeregisterJobDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.DeregisterJobDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) DeregisterJobDefinitionAsync(ctx workflow.Context, input *batch.DeregisterJobDefinitionInput) *BatchDeregisterJobDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.DeregisterJobDefinition", input)
	return &BatchDeregisterJobDefinitionFuture{Future: future}
}

func (a *BatchStub) DescribeComputeEnvironments(ctx workflow.Context, input *batch.DescribeComputeEnvironmentsInput) (*batch.DescribeComputeEnvironmentsOutput, error) {
	var output batch.DescribeComputeEnvironmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.DescribeComputeEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) DescribeComputeEnvironmentsAsync(ctx workflow.Context, input *batch.DescribeComputeEnvironmentsInput) *BatchDescribeComputeEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.DescribeComputeEnvironments", input)
	return &BatchDescribeComputeEnvironmentsFuture{Future: future}
}

func (a *BatchStub) DescribeJobDefinitions(ctx workflow.Context, input *batch.DescribeJobDefinitionsInput) (*batch.DescribeJobDefinitionsOutput, error) {
	var output batch.DescribeJobDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.DescribeJobDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) DescribeJobDefinitionsAsync(ctx workflow.Context, input *batch.DescribeJobDefinitionsInput) *BatchDescribeJobDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.DescribeJobDefinitions", input)
	return &BatchDescribeJobDefinitionsFuture{Future: future}
}

func (a *BatchStub) DescribeJobQueues(ctx workflow.Context, input *batch.DescribeJobQueuesInput) (*batch.DescribeJobQueuesOutput, error) {
	var output batch.DescribeJobQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.DescribeJobQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) DescribeJobQueuesAsync(ctx workflow.Context, input *batch.DescribeJobQueuesInput) *BatchDescribeJobQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.DescribeJobQueues", input)
	return &BatchDescribeJobQueuesFuture{Future: future}
}

func (a *BatchStub) DescribeJobs(ctx workflow.Context, input *batch.DescribeJobsInput) (*batch.DescribeJobsOutput, error) {
	var output batch.DescribeJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.DescribeJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) DescribeJobsAsync(ctx workflow.Context, input *batch.DescribeJobsInput) *BatchDescribeJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.DescribeJobs", input)
	return &BatchDescribeJobsFuture{Future: future}
}

func (a *BatchStub) ListJobs(ctx workflow.Context, input *batch.ListJobsInput) (*batch.ListJobsOutput, error) {
	var output batch.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) ListJobsAsync(ctx workflow.Context, input *batch.ListJobsInput) *BatchListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.ListJobs", input)
	return &BatchListJobsFuture{Future: future}
}

func (a *BatchStub) ListTagsForResource(ctx workflow.Context, input *batch.ListTagsForResourceInput) (*batch.ListTagsForResourceOutput, error) {
	var output batch.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) ListTagsForResourceAsync(ctx workflow.Context, input *batch.ListTagsForResourceInput) *BatchListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.ListTagsForResource", input)
	return &BatchListTagsForResourceFuture{Future: future}
}

func (a *BatchStub) RegisterJobDefinition(ctx workflow.Context, input *batch.RegisterJobDefinitionInput) (*batch.RegisterJobDefinitionOutput, error) {
	var output batch.RegisterJobDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.RegisterJobDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) RegisterJobDefinitionAsync(ctx workflow.Context, input *batch.RegisterJobDefinitionInput) *BatchRegisterJobDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.RegisterJobDefinition", input)
	return &BatchRegisterJobDefinitionFuture{Future: future}
}

func (a *BatchStub) SubmitJob(ctx workflow.Context, input *batch.SubmitJobInput) (*batch.SubmitJobOutput, error) {
	var output batch.SubmitJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.SubmitJob", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) SubmitJobAsync(ctx workflow.Context, input *batch.SubmitJobInput) *BatchSubmitJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.SubmitJob", input)
	return &BatchSubmitJobFuture{Future: future}
}

func (a *BatchStub) TagResource(ctx workflow.Context, input *batch.TagResourceInput) (*batch.TagResourceOutput, error) {
	var output batch.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) TagResourceAsync(ctx workflow.Context, input *batch.TagResourceInput) *BatchTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.TagResource", input)
	return &BatchTagResourceFuture{Future: future}
}

func (a *BatchStub) TerminateJob(ctx workflow.Context, input *batch.TerminateJobInput) (*batch.TerminateJobOutput, error) {
	var output batch.TerminateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.TerminateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) TerminateJobAsync(ctx workflow.Context, input *batch.TerminateJobInput) *BatchTerminateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.TerminateJob", input)
	return &BatchTerminateJobFuture{Future: future}
}

func (a *BatchStub) UntagResource(ctx workflow.Context, input *batch.UntagResourceInput) (*batch.UntagResourceOutput, error) {
	var output batch.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) UntagResourceAsync(ctx workflow.Context, input *batch.UntagResourceInput) *BatchUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.UntagResource", input)
	return &BatchUntagResourceFuture{Future: future}
}

func (a *BatchStub) UpdateComputeEnvironment(ctx workflow.Context, input *batch.UpdateComputeEnvironmentInput) (*batch.UpdateComputeEnvironmentOutput, error) {
	var output batch.UpdateComputeEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.UpdateComputeEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) UpdateComputeEnvironmentAsync(ctx workflow.Context, input *batch.UpdateComputeEnvironmentInput) *BatchUpdateComputeEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.UpdateComputeEnvironment", input)
	return &BatchUpdateComputeEnvironmentFuture{Future: future}
}

func (a *BatchStub) UpdateJobQueue(ctx workflow.Context, input *batch.UpdateJobQueueInput) (*batch.UpdateJobQueueOutput, error) {
	var output batch.UpdateJobQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.batch.UpdateJobQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *BatchStub) UpdateJobQueueAsync(ctx workflow.Context, input *batch.UpdateJobQueueInput) *BatchUpdateJobQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.batch.UpdateJobQueue", input)
	return &BatchUpdateJobQueueFuture{Future: future}
}
