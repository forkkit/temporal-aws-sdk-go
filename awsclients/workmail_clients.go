// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/workmail"
	"go.temporal.io/sdk/workflow"
)

type WorkMailClient interface {
	AssociateDelegateToResource(ctx workflow.Context, input *workmail.AssociateDelegateToResourceInput) (*workmail.AssociateDelegateToResourceOutput, error)
	AssociateDelegateToResourceAsync(ctx workflow.Context, input *workmail.AssociateDelegateToResourceInput) *WorkmailAssociateDelegateToResourceFuture

	AssociateMemberToGroup(ctx workflow.Context, input *workmail.AssociateMemberToGroupInput) (*workmail.AssociateMemberToGroupOutput, error)
	AssociateMemberToGroupAsync(ctx workflow.Context, input *workmail.AssociateMemberToGroupInput) *WorkmailAssociateMemberToGroupFuture

	CancelMailboxExportJob(ctx workflow.Context, input *workmail.CancelMailboxExportJobInput) (*workmail.CancelMailboxExportJobOutput, error)
	CancelMailboxExportJobAsync(ctx workflow.Context, input *workmail.CancelMailboxExportJobInput) *WorkmailCancelMailboxExportJobFuture

	CreateAlias(ctx workflow.Context, input *workmail.CreateAliasInput) (*workmail.CreateAliasOutput, error)
	CreateAliasAsync(ctx workflow.Context, input *workmail.CreateAliasInput) *WorkmailCreateAliasFuture

	CreateGroup(ctx workflow.Context, input *workmail.CreateGroupInput) (*workmail.CreateGroupOutput, error)
	CreateGroupAsync(ctx workflow.Context, input *workmail.CreateGroupInput) *WorkmailCreateGroupFuture

	CreateResource(ctx workflow.Context, input *workmail.CreateResourceInput) (*workmail.CreateResourceOutput, error)
	CreateResourceAsync(ctx workflow.Context, input *workmail.CreateResourceInput) *WorkmailCreateResourceFuture

	CreateUser(ctx workflow.Context, input *workmail.CreateUserInput) (*workmail.CreateUserOutput, error)
	CreateUserAsync(ctx workflow.Context, input *workmail.CreateUserInput) *WorkmailCreateUserFuture

	DeleteAccessControlRule(ctx workflow.Context, input *workmail.DeleteAccessControlRuleInput) (*workmail.DeleteAccessControlRuleOutput, error)
	DeleteAccessControlRuleAsync(ctx workflow.Context, input *workmail.DeleteAccessControlRuleInput) *WorkmailDeleteAccessControlRuleFuture

	DeleteAlias(ctx workflow.Context, input *workmail.DeleteAliasInput) (*workmail.DeleteAliasOutput, error)
	DeleteAliasAsync(ctx workflow.Context, input *workmail.DeleteAliasInput) *WorkmailDeleteAliasFuture

	DeleteGroup(ctx workflow.Context, input *workmail.DeleteGroupInput) (*workmail.DeleteGroupOutput, error)
	DeleteGroupAsync(ctx workflow.Context, input *workmail.DeleteGroupInput) *WorkmailDeleteGroupFuture

	DeleteMailboxPermissions(ctx workflow.Context, input *workmail.DeleteMailboxPermissionsInput) (*workmail.DeleteMailboxPermissionsOutput, error)
	DeleteMailboxPermissionsAsync(ctx workflow.Context, input *workmail.DeleteMailboxPermissionsInput) *WorkmailDeleteMailboxPermissionsFuture

	DeleteResource(ctx workflow.Context, input *workmail.DeleteResourceInput) (*workmail.DeleteResourceOutput, error)
	DeleteResourceAsync(ctx workflow.Context, input *workmail.DeleteResourceInput) *WorkmailDeleteResourceFuture

	DeleteRetentionPolicy(ctx workflow.Context, input *workmail.DeleteRetentionPolicyInput) (*workmail.DeleteRetentionPolicyOutput, error)
	DeleteRetentionPolicyAsync(ctx workflow.Context, input *workmail.DeleteRetentionPolicyInput) *WorkmailDeleteRetentionPolicyFuture

	DeleteUser(ctx workflow.Context, input *workmail.DeleteUserInput) (*workmail.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *workmail.DeleteUserInput) *WorkmailDeleteUserFuture

	DeregisterFromWorkMail(ctx workflow.Context, input *workmail.DeregisterFromWorkMailInput) (*workmail.DeregisterFromWorkMailOutput, error)
	DeregisterFromWorkMailAsync(ctx workflow.Context, input *workmail.DeregisterFromWorkMailInput) *WorkmailDeregisterFromWorkMailFuture

	DescribeGroup(ctx workflow.Context, input *workmail.DescribeGroupInput) (*workmail.DescribeGroupOutput, error)
	DescribeGroupAsync(ctx workflow.Context, input *workmail.DescribeGroupInput) *WorkmailDescribeGroupFuture

	DescribeMailboxExportJob(ctx workflow.Context, input *workmail.DescribeMailboxExportJobInput) (*workmail.DescribeMailboxExportJobOutput, error)
	DescribeMailboxExportJobAsync(ctx workflow.Context, input *workmail.DescribeMailboxExportJobInput) *WorkmailDescribeMailboxExportJobFuture

	DescribeOrganization(ctx workflow.Context, input *workmail.DescribeOrganizationInput) (*workmail.DescribeOrganizationOutput, error)
	DescribeOrganizationAsync(ctx workflow.Context, input *workmail.DescribeOrganizationInput) *WorkmailDescribeOrganizationFuture

	DescribeResource(ctx workflow.Context, input *workmail.DescribeResourceInput) (*workmail.DescribeResourceOutput, error)
	DescribeResourceAsync(ctx workflow.Context, input *workmail.DescribeResourceInput) *WorkmailDescribeResourceFuture

	DescribeUser(ctx workflow.Context, input *workmail.DescribeUserInput) (*workmail.DescribeUserOutput, error)
	DescribeUserAsync(ctx workflow.Context, input *workmail.DescribeUserInput) *WorkmailDescribeUserFuture

	DisassociateDelegateFromResource(ctx workflow.Context, input *workmail.DisassociateDelegateFromResourceInput) (*workmail.DisassociateDelegateFromResourceOutput, error)
	DisassociateDelegateFromResourceAsync(ctx workflow.Context, input *workmail.DisassociateDelegateFromResourceInput) *WorkmailDisassociateDelegateFromResourceFuture

	DisassociateMemberFromGroup(ctx workflow.Context, input *workmail.DisassociateMemberFromGroupInput) (*workmail.DisassociateMemberFromGroupOutput, error)
	DisassociateMemberFromGroupAsync(ctx workflow.Context, input *workmail.DisassociateMemberFromGroupInput) *WorkmailDisassociateMemberFromGroupFuture

	GetAccessControlEffect(ctx workflow.Context, input *workmail.GetAccessControlEffectInput) (*workmail.GetAccessControlEffectOutput, error)
	GetAccessControlEffectAsync(ctx workflow.Context, input *workmail.GetAccessControlEffectInput) *WorkmailGetAccessControlEffectFuture

	GetDefaultRetentionPolicy(ctx workflow.Context, input *workmail.GetDefaultRetentionPolicyInput) (*workmail.GetDefaultRetentionPolicyOutput, error)
	GetDefaultRetentionPolicyAsync(ctx workflow.Context, input *workmail.GetDefaultRetentionPolicyInput) *WorkmailGetDefaultRetentionPolicyFuture

	GetMailboxDetails(ctx workflow.Context, input *workmail.GetMailboxDetailsInput) (*workmail.GetMailboxDetailsOutput, error)
	GetMailboxDetailsAsync(ctx workflow.Context, input *workmail.GetMailboxDetailsInput) *WorkmailGetMailboxDetailsFuture

	ListAccessControlRules(ctx workflow.Context, input *workmail.ListAccessControlRulesInput) (*workmail.ListAccessControlRulesOutput, error)
	ListAccessControlRulesAsync(ctx workflow.Context, input *workmail.ListAccessControlRulesInput) *WorkmailListAccessControlRulesFuture

	ListAliases(ctx workflow.Context, input *workmail.ListAliasesInput) (*workmail.ListAliasesOutput, error)
	ListAliasesAsync(ctx workflow.Context, input *workmail.ListAliasesInput) *WorkmailListAliasesFuture

	ListGroupMembers(ctx workflow.Context, input *workmail.ListGroupMembersInput) (*workmail.ListGroupMembersOutput, error)
	ListGroupMembersAsync(ctx workflow.Context, input *workmail.ListGroupMembersInput) *WorkmailListGroupMembersFuture

	ListGroups(ctx workflow.Context, input *workmail.ListGroupsInput) (*workmail.ListGroupsOutput, error)
	ListGroupsAsync(ctx workflow.Context, input *workmail.ListGroupsInput) *WorkmailListGroupsFuture

	ListMailboxExportJobs(ctx workflow.Context, input *workmail.ListMailboxExportJobsInput) (*workmail.ListMailboxExportJobsOutput, error)
	ListMailboxExportJobsAsync(ctx workflow.Context, input *workmail.ListMailboxExportJobsInput) *WorkmailListMailboxExportJobsFuture

	ListMailboxPermissions(ctx workflow.Context, input *workmail.ListMailboxPermissionsInput) (*workmail.ListMailboxPermissionsOutput, error)
	ListMailboxPermissionsAsync(ctx workflow.Context, input *workmail.ListMailboxPermissionsInput) *WorkmailListMailboxPermissionsFuture

	ListOrganizations(ctx workflow.Context, input *workmail.ListOrganizationsInput) (*workmail.ListOrganizationsOutput, error)
	ListOrganizationsAsync(ctx workflow.Context, input *workmail.ListOrganizationsInput) *WorkmailListOrganizationsFuture

	ListResourceDelegates(ctx workflow.Context, input *workmail.ListResourceDelegatesInput) (*workmail.ListResourceDelegatesOutput, error)
	ListResourceDelegatesAsync(ctx workflow.Context, input *workmail.ListResourceDelegatesInput) *WorkmailListResourceDelegatesFuture

	ListResources(ctx workflow.Context, input *workmail.ListResourcesInput) (*workmail.ListResourcesOutput, error)
	ListResourcesAsync(ctx workflow.Context, input *workmail.ListResourcesInput) *WorkmailListResourcesFuture

	ListTagsForResource(ctx workflow.Context, input *workmail.ListTagsForResourceInput) (*workmail.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *workmail.ListTagsForResourceInput) *WorkmailListTagsForResourceFuture

	ListUsers(ctx workflow.Context, input *workmail.ListUsersInput) (*workmail.ListUsersOutput, error)
	ListUsersAsync(ctx workflow.Context, input *workmail.ListUsersInput) *WorkmailListUsersFuture

	PutAccessControlRule(ctx workflow.Context, input *workmail.PutAccessControlRuleInput) (*workmail.PutAccessControlRuleOutput, error)
	PutAccessControlRuleAsync(ctx workflow.Context, input *workmail.PutAccessControlRuleInput) *WorkmailPutAccessControlRuleFuture

	PutMailboxPermissions(ctx workflow.Context, input *workmail.PutMailboxPermissionsInput) (*workmail.PutMailboxPermissionsOutput, error)
	PutMailboxPermissionsAsync(ctx workflow.Context, input *workmail.PutMailboxPermissionsInput) *WorkmailPutMailboxPermissionsFuture

	PutRetentionPolicy(ctx workflow.Context, input *workmail.PutRetentionPolicyInput) (*workmail.PutRetentionPolicyOutput, error)
	PutRetentionPolicyAsync(ctx workflow.Context, input *workmail.PutRetentionPolicyInput) *WorkmailPutRetentionPolicyFuture

	RegisterToWorkMail(ctx workflow.Context, input *workmail.RegisterToWorkMailInput) (*workmail.RegisterToWorkMailOutput, error)
	RegisterToWorkMailAsync(ctx workflow.Context, input *workmail.RegisterToWorkMailInput) *WorkmailRegisterToWorkMailFuture

	ResetPassword(ctx workflow.Context, input *workmail.ResetPasswordInput) (*workmail.ResetPasswordOutput, error)
	ResetPasswordAsync(ctx workflow.Context, input *workmail.ResetPasswordInput) *WorkmailResetPasswordFuture

	StartMailboxExportJob(ctx workflow.Context, input *workmail.StartMailboxExportJobInput) (*workmail.StartMailboxExportJobOutput, error)
	StartMailboxExportJobAsync(ctx workflow.Context, input *workmail.StartMailboxExportJobInput) *WorkmailStartMailboxExportJobFuture

	TagResource(ctx workflow.Context, input *workmail.TagResourceInput) (*workmail.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *workmail.TagResourceInput) *WorkmailTagResourceFuture

	UntagResource(ctx workflow.Context, input *workmail.UntagResourceInput) (*workmail.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *workmail.UntagResourceInput) *WorkmailUntagResourceFuture

	UpdateMailboxQuota(ctx workflow.Context, input *workmail.UpdateMailboxQuotaInput) (*workmail.UpdateMailboxQuotaOutput, error)
	UpdateMailboxQuotaAsync(ctx workflow.Context, input *workmail.UpdateMailboxQuotaInput) *WorkmailUpdateMailboxQuotaFuture

	UpdatePrimaryEmailAddress(ctx workflow.Context, input *workmail.UpdatePrimaryEmailAddressInput) (*workmail.UpdatePrimaryEmailAddressOutput, error)
	UpdatePrimaryEmailAddressAsync(ctx workflow.Context, input *workmail.UpdatePrimaryEmailAddressInput) *WorkmailUpdatePrimaryEmailAddressFuture

	UpdateResource(ctx workflow.Context, input *workmail.UpdateResourceInput) (*workmail.UpdateResourceOutput, error)
	UpdateResourceAsync(ctx workflow.Context, input *workmail.UpdateResourceInput) *WorkmailUpdateResourceFuture
}

type WorkMailStub struct{}

func NewWorkMailStub() WorkMailClient {
	return &WorkMailStub{}
}

type WorkmailAssociateDelegateToResourceFuture struct {
	Future workflow.Future
}

func (r *WorkmailAssociateDelegateToResourceFuture) Get(ctx workflow.Context) (*workmail.AssociateDelegateToResourceOutput, error) {
	var output workmail.AssociateDelegateToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailAssociateMemberToGroupFuture struct {
	Future workflow.Future
}

func (r *WorkmailAssociateMemberToGroupFuture) Get(ctx workflow.Context) (*workmail.AssociateMemberToGroupOutput, error) {
	var output workmail.AssociateMemberToGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailCancelMailboxExportJobFuture struct {
	Future workflow.Future
}

func (r *WorkmailCancelMailboxExportJobFuture) Get(ctx workflow.Context) (*workmail.CancelMailboxExportJobOutput, error) {
	var output workmail.CancelMailboxExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailCreateAliasFuture struct {
	Future workflow.Future
}

func (r *WorkmailCreateAliasFuture) Get(ctx workflow.Context) (*workmail.CreateAliasOutput, error) {
	var output workmail.CreateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailCreateGroupFuture struct {
	Future workflow.Future
}

func (r *WorkmailCreateGroupFuture) Get(ctx workflow.Context) (*workmail.CreateGroupOutput, error) {
	var output workmail.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailCreateResourceFuture struct {
	Future workflow.Future
}

func (r *WorkmailCreateResourceFuture) Get(ctx workflow.Context) (*workmail.CreateResourceOutput, error) {
	var output workmail.CreateResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailCreateUserFuture struct {
	Future workflow.Future
}

func (r *WorkmailCreateUserFuture) Get(ctx workflow.Context) (*workmail.CreateUserOutput, error) {
	var output workmail.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDeleteAccessControlRuleFuture struct {
	Future workflow.Future
}

func (r *WorkmailDeleteAccessControlRuleFuture) Get(ctx workflow.Context) (*workmail.DeleteAccessControlRuleOutput, error) {
	var output workmail.DeleteAccessControlRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDeleteAliasFuture struct {
	Future workflow.Future
}

func (r *WorkmailDeleteAliasFuture) Get(ctx workflow.Context) (*workmail.DeleteAliasOutput, error) {
	var output workmail.DeleteAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDeleteGroupFuture struct {
	Future workflow.Future
}

func (r *WorkmailDeleteGroupFuture) Get(ctx workflow.Context) (*workmail.DeleteGroupOutput, error) {
	var output workmail.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDeleteMailboxPermissionsFuture struct {
	Future workflow.Future
}

func (r *WorkmailDeleteMailboxPermissionsFuture) Get(ctx workflow.Context) (*workmail.DeleteMailboxPermissionsOutput, error) {
	var output workmail.DeleteMailboxPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDeleteResourceFuture struct {
	Future workflow.Future
}

func (r *WorkmailDeleteResourceFuture) Get(ctx workflow.Context) (*workmail.DeleteResourceOutput, error) {
	var output workmail.DeleteResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDeleteRetentionPolicyFuture struct {
	Future workflow.Future
}

func (r *WorkmailDeleteRetentionPolicyFuture) Get(ctx workflow.Context) (*workmail.DeleteRetentionPolicyOutput, error) {
	var output workmail.DeleteRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDeleteUserFuture struct {
	Future workflow.Future
}

func (r *WorkmailDeleteUserFuture) Get(ctx workflow.Context) (*workmail.DeleteUserOutput, error) {
	var output workmail.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDeregisterFromWorkMailFuture struct {
	Future workflow.Future
}

func (r *WorkmailDeregisterFromWorkMailFuture) Get(ctx workflow.Context) (*workmail.DeregisterFromWorkMailOutput, error) {
	var output workmail.DeregisterFromWorkMailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDescribeGroupFuture struct {
	Future workflow.Future
}

func (r *WorkmailDescribeGroupFuture) Get(ctx workflow.Context) (*workmail.DescribeGroupOutput, error) {
	var output workmail.DescribeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDescribeMailboxExportJobFuture struct {
	Future workflow.Future
}

func (r *WorkmailDescribeMailboxExportJobFuture) Get(ctx workflow.Context) (*workmail.DescribeMailboxExportJobOutput, error) {
	var output workmail.DescribeMailboxExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDescribeOrganizationFuture struct {
	Future workflow.Future
}

func (r *WorkmailDescribeOrganizationFuture) Get(ctx workflow.Context) (*workmail.DescribeOrganizationOutput, error) {
	var output workmail.DescribeOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDescribeResourceFuture struct {
	Future workflow.Future
}

func (r *WorkmailDescribeResourceFuture) Get(ctx workflow.Context) (*workmail.DescribeResourceOutput, error) {
	var output workmail.DescribeResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDescribeUserFuture struct {
	Future workflow.Future
}

func (r *WorkmailDescribeUserFuture) Get(ctx workflow.Context) (*workmail.DescribeUserOutput, error) {
	var output workmail.DescribeUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDisassociateDelegateFromResourceFuture struct {
	Future workflow.Future
}

func (r *WorkmailDisassociateDelegateFromResourceFuture) Get(ctx workflow.Context) (*workmail.DisassociateDelegateFromResourceOutput, error) {
	var output workmail.DisassociateDelegateFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailDisassociateMemberFromGroupFuture struct {
	Future workflow.Future
}

func (r *WorkmailDisassociateMemberFromGroupFuture) Get(ctx workflow.Context) (*workmail.DisassociateMemberFromGroupOutput, error) {
	var output workmail.DisassociateMemberFromGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailGetAccessControlEffectFuture struct {
	Future workflow.Future
}

func (r *WorkmailGetAccessControlEffectFuture) Get(ctx workflow.Context) (*workmail.GetAccessControlEffectOutput, error) {
	var output workmail.GetAccessControlEffectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailGetDefaultRetentionPolicyFuture struct {
	Future workflow.Future
}

func (r *WorkmailGetDefaultRetentionPolicyFuture) Get(ctx workflow.Context) (*workmail.GetDefaultRetentionPolicyOutput, error) {
	var output workmail.GetDefaultRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailGetMailboxDetailsFuture struct {
	Future workflow.Future
}

func (r *WorkmailGetMailboxDetailsFuture) Get(ctx workflow.Context) (*workmail.GetMailboxDetailsOutput, error) {
	var output workmail.GetMailboxDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailListAccessControlRulesFuture struct {
	Future workflow.Future
}

func (r *WorkmailListAccessControlRulesFuture) Get(ctx workflow.Context) (*workmail.ListAccessControlRulesOutput, error) {
	var output workmail.ListAccessControlRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailListAliasesFuture struct {
	Future workflow.Future
}

func (r *WorkmailListAliasesFuture) Get(ctx workflow.Context) (*workmail.ListAliasesOutput, error) {
	var output workmail.ListAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailListGroupMembersFuture struct {
	Future workflow.Future
}

func (r *WorkmailListGroupMembersFuture) Get(ctx workflow.Context) (*workmail.ListGroupMembersOutput, error) {
	var output workmail.ListGroupMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailListGroupsFuture struct {
	Future workflow.Future
}

func (r *WorkmailListGroupsFuture) Get(ctx workflow.Context) (*workmail.ListGroupsOutput, error) {
	var output workmail.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailListMailboxExportJobsFuture struct {
	Future workflow.Future
}

func (r *WorkmailListMailboxExportJobsFuture) Get(ctx workflow.Context) (*workmail.ListMailboxExportJobsOutput, error) {
	var output workmail.ListMailboxExportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailListMailboxPermissionsFuture struct {
	Future workflow.Future
}

func (r *WorkmailListMailboxPermissionsFuture) Get(ctx workflow.Context) (*workmail.ListMailboxPermissionsOutput, error) {
	var output workmail.ListMailboxPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailListOrganizationsFuture struct {
	Future workflow.Future
}

func (r *WorkmailListOrganizationsFuture) Get(ctx workflow.Context) (*workmail.ListOrganizationsOutput, error) {
	var output workmail.ListOrganizationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailListResourceDelegatesFuture struct {
	Future workflow.Future
}

func (r *WorkmailListResourceDelegatesFuture) Get(ctx workflow.Context) (*workmail.ListResourceDelegatesOutput, error) {
	var output workmail.ListResourceDelegatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailListResourcesFuture struct {
	Future workflow.Future
}

func (r *WorkmailListResourcesFuture) Get(ctx workflow.Context) (*workmail.ListResourcesOutput, error) {
	var output workmail.ListResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *WorkmailListTagsForResourceFuture) Get(ctx workflow.Context) (*workmail.ListTagsForResourceOutput, error) {
	var output workmail.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailListUsersFuture struct {
	Future workflow.Future
}

func (r *WorkmailListUsersFuture) Get(ctx workflow.Context) (*workmail.ListUsersOutput, error) {
	var output workmail.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailPutAccessControlRuleFuture struct {
	Future workflow.Future
}

func (r *WorkmailPutAccessControlRuleFuture) Get(ctx workflow.Context) (*workmail.PutAccessControlRuleOutput, error) {
	var output workmail.PutAccessControlRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailPutMailboxPermissionsFuture struct {
	Future workflow.Future
}

func (r *WorkmailPutMailboxPermissionsFuture) Get(ctx workflow.Context) (*workmail.PutMailboxPermissionsOutput, error) {
	var output workmail.PutMailboxPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailPutRetentionPolicyFuture struct {
	Future workflow.Future
}

func (r *WorkmailPutRetentionPolicyFuture) Get(ctx workflow.Context) (*workmail.PutRetentionPolicyOutput, error) {
	var output workmail.PutRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailRegisterToWorkMailFuture struct {
	Future workflow.Future
}

func (r *WorkmailRegisterToWorkMailFuture) Get(ctx workflow.Context) (*workmail.RegisterToWorkMailOutput, error) {
	var output workmail.RegisterToWorkMailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailResetPasswordFuture struct {
	Future workflow.Future
}

func (r *WorkmailResetPasswordFuture) Get(ctx workflow.Context) (*workmail.ResetPasswordOutput, error) {
	var output workmail.ResetPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailStartMailboxExportJobFuture struct {
	Future workflow.Future
}

func (r *WorkmailStartMailboxExportJobFuture) Get(ctx workflow.Context) (*workmail.StartMailboxExportJobOutput, error) {
	var output workmail.StartMailboxExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailTagResourceFuture struct {
	Future workflow.Future
}

func (r *WorkmailTagResourceFuture) Get(ctx workflow.Context) (*workmail.TagResourceOutput, error) {
	var output workmail.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailUntagResourceFuture struct {
	Future workflow.Future
}

func (r *WorkmailUntagResourceFuture) Get(ctx workflow.Context) (*workmail.UntagResourceOutput, error) {
	var output workmail.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailUpdateMailboxQuotaFuture struct {
	Future workflow.Future
}

func (r *WorkmailUpdateMailboxQuotaFuture) Get(ctx workflow.Context) (*workmail.UpdateMailboxQuotaOutput, error) {
	var output workmail.UpdateMailboxQuotaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailUpdatePrimaryEmailAddressFuture struct {
	Future workflow.Future
}

func (r *WorkmailUpdatePrimaryEmailAddressFuture) Get(ctx workflow.Context) (*workmail.UpdatePrimaryEmailAddressOutput, error) {
	var output workmail.UpdatePrimaryEmailAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkmailUpdateResourceFuture struct {
	Future workflow.Future
}

func (r *WorkmailUpdateResourceFuture) Get(ctx workflow.Context) (*workmail.UpdateResourceOutput, error) {
	var output workmail.UpdateResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) AssociateDelegateToResource(ctx workflow.Context, input *workmail.AssociateDelegateToResourceInput) (*workmail.AssociateDelegateToResourceOutput, error) {
	var output workmail.AssociateDelegateToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.AssociateDelegateToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) AssociateDelegateToResourceAsync(ctx workflow.Context, input *workmail.AssociateDelegateToResourceInput) *WorkmailAssociateDelegateToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.AssociateDelegateToResource", input)
	return &WorkmailAssociateDelegateToResourceFuture{Future: future}
}

func (a *WorkMailStub) AssociateMemberToGroup(ctx workflow.Context, input *workmail.AssociateMemberToGroupInput) (*workmail.AssociateMemberToGroupOutput, error) {
	var output workmail.AssociateMemberToGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.AssociateMemberToGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) AssociateMemberToGroupAsync(ctx workflow.Context, input *workmail.AssociateMemberToGroupInput) *WorkmailAssociateMemberToGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.AssociateMemberToGroup", input)
	return &WorkmailAssociateMemberToGroupFuture{Future: future}
}

func (a *WorkMailStub) CancelMailboxExportJob(ctx workflow.Context, input *workmail.CancelMailboxExportJobInput) (*workmail.CancelMailboxExportJobOutput, error) {
	var output workmail.CancelMailboxExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.CancelMailboxExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) CancelMailboxExportJobAsync(ctx workflow.Context, input *workmail.CancelMailboxExportJobInput) *WorkmailCancelMailboxExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.CancelMailboxExportJob", input)
	return &WorkmailCancelMailboxExportJobFuture{Future: future}
}

func (a *WorkMailStub) CreateAlias(ctx workflow.Context, input *workmail.CreateAliasInput) (*workmail.CreateAliasOutput, error) {
	var output workmail.CreateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) CreateAliasAsync(ctx workflow.Context, input *workmail.CreateAliasInput) *WorkmailCreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.CreateAlias", input)
	return &WorkmailCreateAliasFuture{Future: future}
}

func (a *WorkMailStub) CreateGroup(ctx workflow.Context, input *workmail.CreateGroupInput) (*workmail.CreateGroupOutput, error) {
	var output workmail.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) CreateGroupAsync(ctx workflow.Context, input *workmail.CreateGroupInput) *WorkmailCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.CreateGroup", input)
	return &WorkmailCreateGroupFuture{Future: future}
}

func (a *WorkMailStub) CreateResource(ctx workflow.Context, input *workmail.CreateResourceInput) (*workmail.CreateResourceOutput, error) {
	var output workmail.CreateResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.CreateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) CreateResourceAsync(ctx workflow.Context, input *workmail.CreateResourceInput) *WorkmailCreateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.CreateResource", input)
	return &WorkmailCreateResourceFuture{Future: future}
}

func (a *WorkMailStub) CreateUser(ctx workflow.Context, input *workmail.CreateUserInput) (*workmail.CreateUserOutput, error) {
	var output workmail.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) CreateUserAsync(ctx workflow.Context, input *workmail.CreateUserInput) *WorkmailCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.CreateUser", input)
	return &WorkmailCreateUserFuture{Future: future}
}

func (a *WorkMailStub) DeleteAccessControlRule(ctx workflow.Context, input *workmail.DeleteAccessControlRuleInput) (*workmail.DeleteAccessControlRuleOutput, error) {
	var output workmail.DeleteAccessControlRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteAccessControlRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DeleteAccessControlRuleAsync(ctx workflow.Context, input *workmail.DeleteAccessControlRuleInput) *WorkmailDeleteAccessControlRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteAccessControlRule", input)
	return &WorkmailDeleteAccessControlRuleFuture{Future: future}
}

func (a *WorkMailStub) DeleteAlias(ctx workflow.Context, input *workmail.DeleteAliasInput) (*workmail.DeleteAliasOutput, error) {
	var output workmail.DeleteAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DeleteAliasAsync(ctx workflow.Context, input *workmail.DeleteAliasInput) *WorkmailDeleteAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteAlias", input)
	return &WorkmailDeleteAliasFuture{Future: future}
}

func (a *WorkMailStub) DeleteGroup(ctx workflow.Context, input *workmail.DeleteGroupInput) (*workmail.DeleteGroupOutput, error) {
	var output workmail.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DeleteGroupAsync(ctx workflow.Context, input *workmail.DeleteGroupInput) *WorkmailDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteGroup", input)
	return &WorkmailDeleteGroupFuture{Future: future}
}

func (a *WorkMailStub) DeleteMailboxPermissions(ctx workflow.Context, input *workmail.DeleteMailboxPermissionsInput) (*workmail.DeleteMailboxPermissionsOutput, error) {
	var output workmail.DeleteMailboxPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteMailboxPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DeleteMailboxPermissionsAsync(ctx workflow.Context, input *workmail.DeleteMailboxPermissionsInput) *WorkmailDeleteMailboxPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteMailboxPermissions", input)
	return &WorkmailDeleteMailboxPermissionsFuture{Future: future}
}

func (a *WorkMailStub) DeleteResource(ctx workflow.Context, input *workmail.DeleteResourceInput) (*workmail.DeleteResourceOutput, error) {
	var output workmail.DeleteResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DeleteResourceAsync(ctx workflow.Context, input *workmail.DeleteResourceInput) *WorkmailDeleteResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteResource", input)
	return &WorkmailDeleteResourceFuture{Future: future}
}

func (a *WorkMailStub) DeleteRetentionPolicy(ctx workflow.Context, input *workmail.DeleteRetentionPolicyInput) (*workmail.DeleteRetentionPolicyOutput, error) {
	var output workmail.DeleteRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DeleteRetentionPolicyAsync(ctx workflow.Context, input *workmail.DeleteRetentionPolicyInput) *WorkmailDeleteRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteRetentionPolicy", input)
	return &WorkmailDeleteRetentionPolicyFuture{Future: future}
}

func (a *WorkMailStub) DeleteUser(ctx workflow.Context, input *workmail.DeleteUserInput) (*workmail.DeleteUserOutput, error) {
	var output workmail.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DeleteUserAsync(ctx workflow.Context, input *workmail.DeleteUserInput) *WorkmailDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DeleteUser", input)
	return &WorkmailDeleteUserFuture{Future: future}
}

func (a *WorkMailStub) DeregisterFromWorkMail(ctx workflow.Context, input *workmail.DeregisterFromWorkMailInput) (*workmail.DeregisterFromWorkMailOutput, error) {
	var output workmail.DeregisterFromWorkMailOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DeregisterFromWorkMail", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DeregisterFromWorkMailAsync(ctx workflow.Context, input *workmail.DeregisterFromWorkMailInput) *WorkmailDeregisterFromWorkMailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DeregisterFromWorkMail", input)
	return &WorkmailDeregisterFromWorkMailFuture{Future: future}
}

func (a *WorkMailStub) DescribeGroup(ctx workflow.Context, input *workmail.DescribeGroupInput) (*workmail.DescribeGroupOutput, error) {
	var output workmail.DescribeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DescribeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DescribeGroupAsync(ctx workflow.Context, input *workmail.DescribeGroupInput) *WorkmailDescribeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DescribeGroup", input)
	return &WorkmailDescribeGroupFuture{Future: future}
}

func (a *WorkMailStub) DescribeMailboxExportJob(ctx workflow.Context, input *workmail.DescribeMailboxExportJobInput) (*workmail.DescribeMailboxExportJobOutput, error) {
	var output workmail.DescribeMailboxExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DescribeMailboxExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DescribeMailboxExportJobAsync(ctx workflow.Context, input *workmail.DescribeMailboxExportJobInput) *WorkmailDescribeMailboxExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DescribeMailboxExportJob", input)
	return &WorkmailDescribeMailboxExportJobFuture{Future: future}
}

func (a *WorkMailStub) DescribeOrganization(ctx workflow.Context, input *workmail.DescribeOrganizationInput) (*workmail.DescribeOrganizationOutput, error) {
	var output workmail.DescribeOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DescribeOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DescribeOrganizationAsync(ctx workflow.Context, input *workmail.DescribeOrganizationInput) *WorkmailDescribeOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DescribeOrganization", input)
	return &WorkmailDescribeOrganizationFuture{Future: future}
}

func (a *WorkMailStub) DescribeResource(ctx workflow.Context, input *workmail.DescribeResourceInput) (*workmail.DescribeResourceOutput, error) {
	var output workmail.DescribeResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DescribeResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DescribeResourceAsync(ctx workflow.Context, input *workmail.DescribeResourceInput) *WorkmailDescribeResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DescribeResource", input)
	return &WorkmailDescribeResourceFuture{Future: future}
}

func (a *WorkMailStub) DescribeUser(ctx workflow.Context, input *workmail.DescribeUserInput) (*workmail.DescribeUserOutput, error) {
	var output workmail.DescribeUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DescribeUser", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DescribeUserAsync(ctx workflow.Context, input *workmail.DescribeUserInput) *WorkmailDescribeUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DescribeUser", input)
	return &WorkmailDescribeUserFuture{Future: future}
}

func (a *WorkMailStub) DisassociateDelegateFromResource(ctx workflow.Context, input *workmail.DisassociateDelegateFromResourceInput) (*workmail.DisassociateDelegateFromResourceOutput, error) {
	var output workmail.DisassociateDelegateFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DisassociateDelegateFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DisassociateDelegateFromResourceAsync(ctx workflow.Context, input *workmail.DisassociateDelegateFromResourceInput) *WorkmailDisassociateDelegateFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DisassociateDelegateFromResource", input)
	return &WorkmailDisassociateDelegateFromResourceFuture{Future: future}
}

func (a *WorkMailStub) DisassociateMemberFromGroup(ctx workflow.Context, input *workmail.DisassociateMemberFromGroupInput) (*workmail.DisassociateMemberFromGroupOutput, error) {
	var output workmail.DisassociateMemberFromGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.DisassociateMemberFromGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) DisassociateMemberFromGroupAsync(ctx workflow.Context, input *workmail.DisassociateMemberFromGroupInput) *WorkmailDisassociateMemberFromGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.DisassociateMemberFromGroup", input)
	return &WorkmailDisassociateMemberFromGroupFuture{Future: future}
}

func (a *WorkMailStub) GetAccessControlEffect(ctx workflow.Context, input *workmail.GetAccessControlEffectInput) (*workmail.GetAccessControlEffectOutput, error) {
	var output workmail.GetAccessControlEffectOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.GetAccessControlEffect", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) GetAccessControlEffectAsync(ctx workflow.Context, input *workmail.GetAccessControlEffectInput) *WorkmailGetAccessControlEffectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.GetAccessControlEffect", input)
	return &WorkmailGetAccessControlEffectFuture{Future: future}
}

func (a *WorkMailStub) GetDefaultRetentionPolicy(ctx workflow.Context, input *workmail.GetDefaultRetentionPolicyInput) (*workmail.GetDefaultRetentionPolicyOutput, error) {
	var output workmail.GetDefaultRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.GetDefaultRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) GetDefaultRetentionPolicyAsync(ctx workflow.Context, input *workmail.GetDefaultRetentionPolicyInput) *WorkmailGetDefaultRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.GetDefaultRetentionPolicy", input)
	return &WorkmailGetDefaultRetentionPolicyFuture{Future: future}
}

func (a *WorkMailStub) GetMailboxDetails(ctx workflow.Context, input *workmail.GetMailboxDetailsInput) (*workmail.GetMailboxDetailsOutput, error) {
	var output workmail.GetMailboxDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.GetMailboxDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) GetMailboxDetailsAsync(ctx workflow.Context, input *workmail.GetMailboxDetailsInput) *WorkmailGetMailboxDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.GetMailboxDetails", input)
	return &WorkmailGetMailboxDetailsFuture{Future: future}
}

func (a *WorkMailStub) ListAccessControlRules(ctx workflow.Context, input *workmail.ListAccessControlRulesInput) (*workmail.ListAccessControlRulesOutput, error) {
	var output workmail.ListAccessControlRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.ListAccessControlRules", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) ListAccessControlRulesAsync(ctx workflow.Context, input *workmail.ListAccessControlRulesInput) *WorkmailListAccessControlRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.ListAccessControlRules", input)
	return &WorkmailListAccessControlRulesFuture{Future: future}
}

func (a *WorkMailStub) ListAliases(ctx workflow.Context, input *workmail.ListAliasesInput) (*workmail.ListAliasesOutput, error) {
	var output workmail.ListAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.ListAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) ListAliasesAsync(ctx workflow.Context, input *workmail.ListAliasesInput) *WorkmailListAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.ListAliases", input)
	return &WorkmailListAliasesFuture{Future: future}
}

func (a *WorkMailStub) ListGroupMembers(ctx workflow.Context, input *workmail.ListGroupMembersInput) (*workmail.ListGroupMembersOutput, error) {
	var output workmail.ListGroupMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.ListGroupMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) ListGroupMembersAsync(ctx workflow.Context, input *workmail.ListGroupMembersInput) *WorkmailListGroupMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.ListGroupMembers", input)
	return &WorkmailListGroupMembersFuture{Future: future}
}

func (a *WorkMailStub) ListGroups(ctx workflow.Context, input *workmail.ListGroupsInput) (*workmail.ListGroupsOutput, error) {
	var output workmail.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) ListGroupsAsync(ctx workflow.Context, input *workmail.ListGroupsInput) *WorkmailListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.ListGroups", input)
	return &WorkmailListGroupsFuture{Future: future}
}

func (a *WorkMailStub) ListMailboxExportJobs(ctx workflow.Context, input *workmail.ListMailboxExportJobsInput) (*workmail.ListMailboxExportJobsOutput, error) {
	var output workmail.ListMailboxExportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.ListMailboxExportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) ListMailboxExportJobsAsync(ctx workflow.Context, input *workmail.ListMailboxExportJobsInput) *WorkmailListMailboxExportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.ListMailboxExportJobs", input)
	return &WorkmailListMailboxExportJobsFuture{Future: future}
}

func (a *WorkMailStub) ListMailboxPermissions(ctx workflow.Context, input *workmail.ListMailboxPermissionsInput) (*workmail.ListMailboxPermissionsOutput, error) {
	var output workmail.ListMailboxPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.ListMailboxPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) ListMailboxPermissionsAsync(ctx workflow.Context, input *workmail.ListMailboxPermissionsInput) *WorkmailListMailboxPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.ListMailboxPermissions", input)
	return &WorkmailListMailboxPermissionsFuture{Future: future}
}

func (a *WorkMailStub) ListOrganizations(ctx workflow.Context, input *workmail.ListOrganizationsInput) (*workmail.ListOrganizationsOutput, error) {
	var output workmail.ListOrganizationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.ListOrganizations", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) ListOrganizationsAsync(ctx workflow.Context, input *workmail.ListOrganizationsInput) *WorkmailListOrganizationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.ListOrganizations", input)
	return &WorkmailListOrganizationsFuture{Future: future}
}

func (a *WorkMailStub) ListResourceDelegates(ctx workflow.Context, input *workmail.ListResourceDelegatesInput) (*workmail.ListResourceDelegatesOutput, error) {
	var output workmail.ListResourceDelegatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.ListResourceDelegates", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) ListResourceDelegatesAsync(ctx workflow.Context, input *workmail.ListResourceDelegatesInput) *WorkmailListResourceDelegatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.ListResourceDelegates", input)
	return &WorkmailListResourceDelegatesFuture{Future: future}
}

func (a *WorkMailStub) ListResources(ctx workflow.Context, input *workmail.ListResourcesInput) (*workmail.ListResourcesOutput, error) {
	var output workmail.ListResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.ListResources", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) ListResourcesAsync(ctx workflow.Context, input *workmail.ListResourcesInput) *WorkmailListResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.ListResources", input)
	return &WorkmailListResourcesFuture{Future: future}
}

func (a *WorkMailStub) ListTagsForResource(ctx workflow.Context, input *workmail.ListTagsForResourceInput) (*workmail.ListTagsForResourceOutput, error) {
	var output workmail.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) ListTagsForResourceAsync(ctx workflow.Context, input *workmail.ListTagsForResourceInput) *WorkmailListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.ListTagsForResource", input)
	return &WorkmailListTagsForResourceFuture{Future: future}
}

func (a *WorkMailStub) ListUsers(ctx workflow.Context, input *workmail.ListUsersInput) (*workmail.ListUsersOutput, error) {
	var output workmail.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) ListUsersAsync(ctx workflow.Context, input *workmail.ListUsersInput) *WorkmailListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.ListUsers", input)
	return &WorkmailListUsersFuture{Future: future}
}

func (a *WorkMailStub) PutAccessControlRule(ctx workflow.Context, input *workmail.PutAccessControlRuleInput) (*workmail.PutAccessControlRuleOutput, error) {
	var output workmail.PutAccessControlRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.PutAccessControlRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) PutAccessControlRuleAsync(ctx workflow.Context, input *workmail.PutAccessControlRuleInput) *WorkmailPutAccessControlRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.PutAccessControlRule", input)
	return &WorkmailPutAccessControlRuleFuture{Future: future}
}

func (a *WorkMailStub) PutMailboxPermissions(ctx workflow.Context, input *workmail.PutMailboxPermissionsInput) (*workmail.PutMailboxPermissionsOutput, error) {
	var output workmail.PutMailboxPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.PutMailboxPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) PutMailboxPermissionsAsync(ctx workflow.Context, input *workmail.PutMailboxPermissionsInput) *WorkmailPutMailboxPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.PutMailboxPermissions", input)
	return &WorkmailPutMailboxPermissionsFuture{Future: future}
}

func (a *WorkMailStub) PutRetentionPolicy(ctx workflow.Context, input *workmail.PutRetentionPolicyInput) (*workmail.PutRetentionPolicyOutput, error) {
	var output workmail.PutRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.PutRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) PutRetentionPolicyAsync(ctx workflow.Context, input *workmail.PutRetentionPolicyInput) *WorkmailPutRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.PutRetentionPolicy", input)
	return &WorkmailPutRetentionPolicyFuture{Future: future}
}

func (a *WorkMailStub) RegisterToWorkMail(ctx workflow.Context, input *workmail.RegisterToWorkMailInput) (*workmail.RegisterToWorkMailOutput, error) {
	var output workmail.RegisterToWorkMailOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.RegisterToWorkMail", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) RegisterToWorkMailAsync(ctx workflow.Context, input *workmail.RegisterToWorkMailInput) *WorkmailRegisterToWorkMailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.RegisterToWorkMail", input)
	return &WorkmailRegisterToWorkMailFuture{Future: future}
}

func (a *WorkMailStub) ResetPassword(ctx workflow.Context, input *workmail.ResetPasswordInput) (*workmail.ResetPasswordOutput, error) {
	var output workmail.ResetPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.ResetPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) ResetPasswordAsync(ctx workflow.Context, input *workmail.ResetPasswordInput) *WorkmailResetPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.ResetPassword", input)
	return &WorkmailResetPasswordFuture{Future: future}
}

func (a *WorkMailStub) StartMailboxExportJob(ctx workflow.Context, input *workmail.StartMailboxExportJobInput) (*workmail.StartMailboxExportJobOutput, error) {
	var output workmail.StartMailboxExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.StartMailboxExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) StartMailboxExportJobAsync(ctx workflow.Context, input *workmail.StartMailboxExportJobInput) *WorkmailStartMailboxExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.StartMailboxExportJob", input)
	return &WorkmailStartMailboxExportJobFuture{Future: future}
}

func (a *WorkMailStub) TagResource(ctx workflow.Context, input *workmail.TagResourceInput) (*workmail.TagResourceOutput, error) {
	var output workmail.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) TagResourceAsync(ctx workflow.Context, input *workmail.TagResourceInput) *WorkmailTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.TagResource", input)
	return &WorkmailTagResourceFuture{Future: future}
}

func (a *WorkMailStub) UntagResource(ctx workflow.Context, input *workmail.UntagResourceInput) (*workmail.UntagResourceOutput, error) {
	var output workmail.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) UntagResourceAsync(ctx workflow.Context, input *workmail.UntagResourceInput) *WorkmailUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.UntagResource", input)
	return &WorkmailUntagResourceFuture{Future: future}
}

func (a *WorkMailStub) UpdateMailboxQuota(ctx workflow.Context, input *workmail.UpdateMailboxQuotaInput) (*workmail.UpdateMailboxQuotaOutput, error) {
	var output workmail.UpdateMailboxQuotaOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.UpdateMailboxQuota", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) UpdateMailboxQuotaAsync(ctx workflow.Context, input *workmail.UpdateMailboxQuotaInput) *WorkmailUpdateMailboxQuotaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.UpdateMailboxQuota", input)
	return &WorkmailUpdateMailboxQuotaFuture{Future: future}
}

func (a *WorkMailStub) UpdatePrimaryEmailAddress(ctx workflow.Context, input *workmail.UpdatePrimaryEmailAddressInput) (*workmail.UpdatePrimaryEmailAddressOutput, error) {
	var output workmail.UpdatePrimaryEmailAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.UpdatePrimaryEmailAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) UpdatePrimaryEmailAddressAsync(ctx workflow.Context, input *workmail.UpdatePrimaryEmailAddressInput) *WorkmailUpdatePrimaryEmailAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.UpdatePrimaryEmailAddress", input)
	return &WorkmailUpdatePrimaryEmailAddressFuture{Future: future}
}

func (a *WorkMailStub) UpdateResource(ctx workflow.Context, input *workmail.UpdateResourceInput) (*workmail.UpdateResourceOutput, error) {
	var output workmail.UpdateResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.workmail.UpdateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkMailStub) UpdateResourceAsync(ctx workflow.Context, input *workmail.UpdateResourceInput) *WorkmailUpdateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workmail.UpdateResource", input)
	return &WorkmailUpdateResourceFuture{Future: future}
}
