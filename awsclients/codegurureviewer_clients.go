// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/codegurureviewer"
	"go.temporal.io/sdk/workflow"
)

type CodeGuruReviewerClient interface {
	AssociateRepository(ctx workflow.Context, input *codegurureviewer.AssociateRepositoryInput) (*codegurureviewer.AssociateRepositoryOutput, error)
	AssociateRepositoryAsync(ctx workflow.Context, input *codegurureviewer.AssociateRepositoryInput) *CodegurureviewerAssociateRepositoryFuture

	CreateCodeReview(ctx workflow.Context, input *codegurureviewer.CreateCodeReviewInput) (*codegurureviewer.CreateCodeReviewOutput, error)
	CreateCodeReviewAsync(ctx workflow.Context, input *codegurureviewer.CreateCodeReviewInput) *CodegurureviewerCreateCodeReviewFuture

	DescribeCodeReview(ctx workflow.Context, input *codegurureviewer.DescribeCodeReviewInput) (*codegurureviewer.DescribeCodeReviewOutput, error)
	DescribeCodeReviewAsync(ctx workflow.Context, input *codegurureviewer.DescribeCodeReviewInput) *CodegurureviewerDescribeCodeReviewFuture

	DescribeRecommendationFeedback(ctx workflow.Context, input *codegurureviewer.DescribeRecommendationFeedbackInput) (*codegurureviewer.DescribeRecommendationFeedbackOutput, error)
	DescribeRecommendationFeedbackAsync(ctx workflow.Context, input *codegurureviewer.DescribeRecommendationFeedbackInput) *CodegurureviewerDescribeRecommendationFeedbackFuture

	DescribeRepositoryAssociation(ctx workflow.Context, input *codegurureviewer.DescribeRepositoryAssociationInput) (*codegurureviewer.DescribeRepositoryAssociationOutput, error)
	DescribeRepositoryAssociationAsync(ctx workflow.Context, input *codegurureviewer.DescribeRepositoryAssociationInput) *CodegurureviewerDescribeRepositoryAssociationFuture

	DisassociateRepository(ctx workflow.Context, input *codegurureviewer.DisassociateRepositoryInput) (*codegurureviewer.DisassociateRepositoryOutput, error)
	DisassociateRepositoryAsync(ctx workflow.Context, input *codegurureviewer.DisassociateRepositoryInput) *CodegurureviewerDisassociateRepositoryFuture

	ListCodeReviews(ctx workflow.Context, input *codegurureviewer.ListCodeReviewsInput) (*codegurureviewer.ListCodeReviewsOutput, error)
	ListCodeReviewsAsync(ctx workflow.Context, input *codegurureviewer.ListCodeReviewsInput) *CodegurureviewerListCodeReviewsFuture

	ListRecommendationFeedback(ctx workflow.Context, input *codegurureviewer.ListRecommendationFeedbackInput) (*codegurureviewer.ListRecommendationFeedbackOutput, error)
	ListRecommendationFeedbackAsync(ctx workflow.Context, input *codegurureviewer.ListRecommendationFeedbackInput) *CodegurureviewerListRecommendationFeedbackFuture

	ListRecommendations(ctx workflow.Context, input *codegurureviewer.ListRecommendationsInput) (*codegurureviewer.ListRecommendationsOutput, error)
	ListRecommendationsAsync(ctx workflow.Context, input *codegurureviewer.ListRecommendationsInput) *CodegurureviewerListRecommendationsFuture

	ListRepositoryAssociations(ctx workflow.Context, input *codegurureviewer.ListRepositoryAssociationsInput) (*codegurureviewer.ListRepositoryAssociationsOutput, error)
	ListRepositoryAssociationsAsync(ctx workflow.Context, input *codegurureviewer.ListRepositoryAssociationsInput) *CodegurureviewerListRepositoryAssociationsFuture

	PutRecommendationFeedback(ctx workflow.Context, input *codegurureviewer.PutRecommendationFeedbackInput) (*codegurureviewer.PutRecommendationFeedbackOutput, error)
	PutRecommendationFeedbackAsync(ctx workflow.Context, input *codegurureviewer.PutRecommendationFeedbackInput) *CodegurureviewerPutRecommendationFeedbackFuture
}

type CodeGuruReviewerStub struct{}

func NewCodeGuruReviewerStub() CodeGuruReviewerClient {
	return &CodeGuruReviewerStub{}
}

type CodegurureviewerAssociateRepositoryFuture struct {
	Future workflow.Future
}

func (r *CodegurureviewerAssociateRepositoryFuture) Get(ctx workflow.Context) (*codegurureviewer.AssociateRepositoryOutput, error) {
	var output codegurureviewer.AssociateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodegurureviewerCreateCodeReviewFuture struct {
	Future workflow.Future
}

func (r *CodegurureviewerCreateCodeReviewFuture) Get(ctx workflow.Context) (*codegurureviewer.CreateCodeReviewOutput, error) {
	var output codegurureviewer.CreateCodeReviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodegurureviewerDescribeCodeReviewFuture struct {
	Future workflow.Future
}

func (r *CodegurureviewerDescribeCodeReviewFuture) Get(ctx workflow.Context) (*codegurureviewer.DescribeCodeReviewOutput, error) {
	var output codegurureviewer.DescribeCodeReviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodegurureviewerDescribeRecommendationFeedbackFuture struct {
	Future workflow.Future
}

func (r *CodegurureviewerDescribeRecommendationFeedbackFuture) Get(ctx workflow.Context) (*codegurureviewer.DescribeRecommendationFeedbackOutput, error) {
	var output codegurureviewer.DescribeRecommendationFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodegurureviewerDescribeRepositoryAssociationFuture struct {
	Future workflow.Future
}

func (r *CodegurureviewerDescribeRepositoryAssociationFuture) Get(ctx workflow.Context) (*codegurureviewer.DescribeRepositoryAssociationOutput, error) {
	var output codegurureviewer.DescribeRepositoryAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodegurureviewerDisassociateRepositoryFuture struct {
	Future workflow.Future
}

func (r *CodegurureviewerDisassociateRepositoryFuture) Get(ctx workflow.Context) (*codegurureviewer.DisassociateRepositoryOutput, error) {
	var output codegurureviewer.DisassociateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodegurureviewerListCodeReviewsFuture struct {
	Future workflow.Future
}

func (r *CodegurureviewerListCodeReviewsFuture) Get(ctx workflow.Context) (*codegurureviewer.ListCodeReviewsOutput, error) {
	var output codegurureviewer.ListCodeReviewsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodegurureviewerListRecommendationFeedbackFuture struct {
	Future workflow.Future
}

func (r *CodegurureviewerListRecommendationFeedbackFuture) Get(ctx workflow.Context) (*codegurureviewer.ListRecommendationFeedbackOutput, error) {
	var output codegurureviewer.ListRecommendationFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodegurureviewerListRecommendationsFuture struct {
	Future workflow.Future
}

func (r *CodegurureviewerListRecommendationsFuture) Get(ctx workflow.Context) (*codegurureviewer.ListRecommendationsOutput, error) {
	var output codegurureviewer.ListRecommendationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodegurureviewerListRepositoryAssociationsFuture struct {
	Future workflow.Future
}

func (r *CodegurureviewerListRepositoryAssociationsFuture) Get(ctx workflow.Context) (*codegurureviewer.ListRepositoryAssociationsOutput, error) {
	var output codegurureviewer.ListRepositoryAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodegurureviewerPutRecommendationFeedbackFuture struct {
	Future workflow.Future
}

func (r *CodegurureviewerPutRecommendationFeedbackFuture) Get(ctx workflow.Context) (*codegurureviewer.PutRecommendationFeedbackOutput, error) {
	var output codegurureviewer.PutRecommendationFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CodeGuruReviewerStub) AssociateRepository(ctx workflow.Context, input *codegurureviewer.AssociateRepositoryInput) (*codegurureviewer.AssociateRepositoryOutput, error) {
	var output codegurureviewer.AssociateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.AssociateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeGuruReviewerStub) AssociateRepositoryAsync(ctx workflow.Context, input *codegurureviewer.AssociateRepositoryInput) *CodegurureviewerAssociateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.AssociateRepository", input)
	return &CodegurureviewerAssociateRepositoryFuture{Future: future}
}

func (a *CodeGuruReviewerStub) CreateCodeReview(ctx workflow.Context, input *codegurureviewer.CreateCodeReviewInput) (*codegurureviewer.CreateCodeReviewOutput, error) {
	var output codegurureviewer.CreateCodeReviewOutput
	err := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.CreateCodeReview", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeGuruReviewerStub) CreateCodeReviewAsync(ctx workflow.Context, input *codegurureviewer.CreateCodeReviewInput) *CodegurureviewerCreateCodeReviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.CreateCodeReview", input)
	return &CodegurureviewerCreateCodeReviewFuture{Future: future}
}

func (a *CodeGuruReviewerStub) DescribeCodeReview(ctx workflow.Context, input *codegurureviewer.DescribeCodeReviewInput) (*codegurureviewer.DescribeCodeReviewOutput, error) {
	var output codegurureviewer.DescribeCodeReviewOutput
	err := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.DescribeCodeReview", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeGuruReviewerStub) DescribeCodeReviewAsync(ctx workflow.Context, input *codegurureviewer.DescribeCodeReviewInput) *CodegurureviewerDescribeCodeReviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.DescribeCodeReview", input)
	return &CodegurureviewerDescribeCodeReviewFuture{Future: future}
}

func (a *CodeGuruReviewerStub) DescribeRecommendationFeedback(ctx workflow.Context, input *codegurureviewer.DescribeRecommendationFeedbackInput) (*codegurureviewer.DescribeRecommendationFeedbackOutput, error) {
	var output codegurureviewer.DescribeRecommendationFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.DescribeRecommendationFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeGuruReviewerStub) DescribeRecommendationFeedbackAsync(ctx workflow.Context, input *codegurureviewer.DescribeRecommendationFeedbackInput) *CodegurureviewerDescribeRecommendationFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.DescribeRecommendationFeedback", input)
	return &CodegurureviewerDescribeRecommendationFeedbackFuture{Future: future}
}

func (a *CodeGuruReviewerStub) DescribeRepositoryAssociation(ctx workflow.Context, input *codegurureviewer.DescribeRepositoryAssociationInput) (*codegurureviewer.DescribeRepositoryAssociationOutput, error) {
	var output codegurureviewer.DescribeRepositoryAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.DescribeRepositoryAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeGuruReviewerStub) DescribeRepositoryAssociationAsync(ctx workflow.Context, input *codegurureviewer.DescribeRepositoryAssociationInput) *CodegurureviewerDescribeRepositoryAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.DescribeRepositoryAssociation", input)
	return &CodegurureviewerDescribeRepositoryAssociationFuture{Future: future}
}

func (a *CodeGuruReviewerStub) DisassociateRepository(ctx workflow.Context, input *codegurureviewer.DisassociateRepositoryInput) (*codegurureviewer.DisassociateRepositoryOutput, error) {
	var output codegurureviewer.DisassociateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.DisassociateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeGuruReviewerStub) DisassociateRepositoryAsync(ctx workflow.Context, input *codegurureviewer.DisassociateRepositoryInput) *CodegurureviewerDisassociateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.DisassociateRepository", input)
	return &CodegurureviewerDisassociateRepositoryFuture{Future: future}
}

func (a *CodeGuruReviewerStub) ListCodeReviews(ctx workflow.Context, input *codegurureviewer.ListCodeReviewsInput) (*codegurureviewer.ListCodeReviewsOutput, error) {
	var output codegurureviewer.ListCodeReviewsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.ListCodeReviews", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeGuruReviewerStub) ListCodeReviewsAsync(ctx workflow.Context, input *codegurureviewer.ListCodeReviewsInput) *CodegurureviewerListCodeReviewsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.ListCodeReviews", input)
	return &CodegurureviewerListCodeReviewsFuture{Future: future}
}

func (a *CodeGuruReviewerStub) ListRecommendationFeedback(ctx workflow.Context, input *codegurureviewer.ListRecommendationFeedbackInput) (*codegurureviewer.ListRecommendationFeedbackOutput, error) {
	var output codegurureviewer.ListRecommendationFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.ListRecommendationFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeGuruReviewerStub) ListRecommendationFeedbackAsync(ctx workflow.Context, input *codegurureviewer.ListRecommendationFeedbackInput) *CodegurureviewerListRecommendationFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.ListRecommendationFeedback", input)
	return &CodegurureviewerListRecommendationFeedbackFuture{Future: future}
}

func (a *CodeGuruReviewerStub) ListRecommendations(ctx workflow.Context, input *codegurureviewer.ListRecommendationsInput) (*codegurureviewer.ListRecommendationsOutput, error) {
	var output codegurureviewer.ListRecommendationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.ListRecommendations", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeGuruReviewerStub) ListRecommendationsAsync(ctx workflow.Context, input *codegurureviewer.ListRecommendationsInput) *CodegurureviewerListRecommendationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.ListRecommendations", input)
	return &CodegurureviewerListRecommendationsFuture{Future: future}
}

func (a *CodeGuruReviewerStub) ListRepositoryAssociations(ctx workflow.Context, input *codegurureviewer.ListRepositoryAssociationsInput) (*codegurureviewer.ListRepositoryAssociationsOutput, error) {
	var output codegurureviewer.ListRepositoryAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.ListRepositoryAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeGuruReviewerStub) ListRepositoryAssociationsAsync(ctx workflow.Context, input *codegurureviewer.ListRepositoryAssociationsInput) *CodegurureviewerListRepositoryAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.ListRepositoryAssociations", input)
	return &CodegurureviewerListRepositoryAssociationsFuture{Future: future}
}

func (a *CodeGuruReviewerStub) PutRecommendationFeedback(ctx workflow.Context, input *codegurureviewer.PutRecommendationFeedbackInput) (*codegurureviewer.PutRecommendationFeedbackOutput, error) {
	var output codegurureviewer.PutRecommendationFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.PutRecommendationFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeGuruReviewerStub) PutRecommendationFeedbackAsync(ctx workflow.Context, input *codegurureviewer.PutRecommendationFeedbackInput) *CodegurureviewerPutRecommendationFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codegurureviewer.PutRecommendationFeedback", input)
	return &CodegurureviewerPutRecommendationFeedbackFuture{Future: future}
}
