// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/budgets"
	"go.temporal.io/sdk/workflow"
)

type BudgetsClient interface {
	CreateBudget(ctx workflow.Context, input *budgets.CreateBudgetInput) (*budgets.CreateBudgetOutput, error)
	CreateBudgetAsync(ctx workflow.Context, input *budgets.CreateBudgetInput) *BudgetsCreateBudgetFuture

	CreateNotification(ctx workflow.Context, input *budgets.CreateNotificationInput) (*budgets.CreateNotificationOutput, error)
	CreateNotificationAsync(ctx workflow.Context, input *budgets.CreateNotificationInput) *BudgetsCreateNotificationFuture

	CreateSubscriber(ctx workflow.Context, input *budgets.CreateSubscriberInput) (*budgets.CreateSubscriberOutput, error)
	CreateSubscriberAsync(ctx workflow.Context, input *budgets.CreateSubscriberInput) *BudgetsCreateSubscriberFuture

	DeleteBudget(ctx workflow.Context, input *budgets.DeleteBudgetInput) (*budgets.DeleteBudgetOutput, error)
	DeleteBudgetAsync(ctx workflow.Context, input *budgets.DeleteBudgetInput) *BudgetsDeleteBudgetFuture

	DeleteNotification(ctx workflow.Context, input *budgets.DeleteNotificationInput) (*budgets.DeleteNotificationOutput, error)
	DeleteNotificationAsync(ctx workflow.Context, input *budgets.DeleteNotificationInput) *BudgetsDeleteNotificationFuture

	DeleteSubscriber(ctx workflow.Context, input *budgets.DeleteSubscriberInput) (*budgets.DeleteSubscriberOutput, error)
	DeleteSubscriberAsync(ctx workflow.Context, input *budgets.DeleteSubscriberInput) *BudgetsDeleteSubscriberFuture

	DescribeBudget(ctx workflow.Context, input *budgets.DescribeBudgetInput) (*budgets.DescribeBudgetOutput, error)
	DescribeBudgetAsync(ctx workflow.Context, input *budgets.DescribeBudgetInput) *BudgetsDescribeBudgetFuture

	DescribeBudgetPerformanceHistory(ctx workflow.Context, input *budgets.DescribeBudgetPerformanceHistoryInput) (*budgets.DescribeBudgetPerformanceHistoryOutput, error)
	DescribeBudgetPerformanceHistoryAsync(ctx workflow.Context, input *budgets.DescribeBudgetPerformanceHistoryInput) *BudgetsDescribeBudgetPerformanceHistoryFuture

	DescribeBudgets(ctx workflow.Context, input *budgets.DescribeBudgetsInput) (*budgets.DescribeBudgetsOutput, error)
	DescribeBudgetsAsync(ctx workflow.Context, input *budgets.DescribeBudgetsInput) *BudgetsDescribeBudgetsFuture

	DescribeNotificationsForBudget(ctx workflow.Context, input *budgets.DescribeNotificationsForBudgetInput) (*budgets.DescribeNotificationsForBudgetOutput, error)
	DescribeNotificationsForBudgetAsync(ctx workflow.Context, input *budgets.DescribeNotificationsForBudgetInput) *BudgetsDescribeNotificationsForBudgetFuture

	DescribeSubscribersForNotification(ctx workflow.Context, input *budgets.DescribeSubscribersForNotificationInput) (*budgets.DescribeSubscribersForNotificationOutput, error)
	DescribeSubscribersForNotificationAsync(ctx workflow.Context, input *budgets.DescribeSubscribersForNotificationInput) *BudgetsDescribeSubscribersForNotificationFuture

	UpdateBudget(ctx workflow.Context, input *budgets.UpdateBudgetInput) (*budgets.UpdateBudgetOutput, error)
	UpdateBudgetAsync(ctx workflow.Context, input *budgets.UpdateBudgetInput) *BudgetsUpdateBudgetFuture

	UpdateNotification(ctx workflow.Context, input *budgets.UpdateNotificationInput) (*budgets.UpdateNotificationOutput, error)
	UpdateNotificationAsync(ctx workflow.Context, input *budgets.UpdateNotificationInput) *BudgetsUpdateNotificationFuture

	UpdateSubscriber(ctx workflow.Context, input *budgets.UpdateSubscriberInput) (*budgets.UpdateSubscriberOutput, error)
	UpdateSubscriberAsync(ctx workflow.Context, input *budgets.UpdateSubscriberInput) *BudgetsUpdateSubscriberFuture
}

type BudgetsStub struct{}

func NewBudgetsStub() BudgetsClient {
	return &BudgetsStub{}
}

type BudgetsCreateBudgetFuture struct {
	Future workflow.Future
}

func (r *BudgetsCreateBudgetFuture) Get(ctx workflow.Context) (*budgets.CreateBudgetOutput, error) {
	var output budgets.CreateBudgetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsCreateNotificationFuture struct {
	Future workflow.Future
}

func (r *BudgetsCreateNotificationFuture) Get(ctx workflow.Context) (*budgets.CreateNotificationOutput, error) {
	var output budgets.CreateNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsCreateSubscriberFuture struct {
	Future workflow.Future
}

func (r *BudgetsCreateSubscriberFuture) Get(ctx workflow.Context) (*budgets.CreateSubscriberOutput, error) {
	var output budgets.CreateSubscriberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsDeleteBudgetFuture struct {
	Future workflow.Future
}

func (r *BudgetsDeleteBudgetFuture) Get(ctx workflow.Context) (*budgets.DeleteBudgetOutput, error) {
	var output budgets.DeleteBudgetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsDeleteNotificationFuture struct {
	Future workflow.Future
}

func (r *BudgetsDeleteNotificationFuture) Get(ctx workflow.Context) (*budgets.DeleteNotificationOutput, error) {
	var output budgets.DeleteNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsDeleteSubscriberFuture struct {
	Future workflow.Future
}

func (r *BudgetsDeleteSubscriberFuture) Get(ctx workflow.Context) (*budgets.DeleteSubscriberOutput, error) {
	var output budgets.DeleteSubscriberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsDescribeBudgetFuture struct {
	Future workflow.Future
}

func (r *BudgetsDescribeBudgetFuture) Get(ctx workflow.Context) (*budgets.DescribeBudgetOutput, error) {
	var output budgets.DescribeBudgetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsDescribeBudgetPerformanceHistoryFuture struct {
	Future workflow.Future
}

func (r *BudgetsDescribeBudgetPerformanceHistoryFuture) Get(ctx workflow.Context) (*budgets.DescribeBudgetPerformanceHistoryOutput, error) {
	var output budgets.DescribeBudgetPerformanceHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsDescribeBudgetsFuture struct {
	Future workflow.Future
}

func (r *BudgetsDescribeBudgetsFuture) Get(ctx workflow.Context) (*budgets.DescribeBudgetsOutput, error) {
	var output budgets.DescribeBudgetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsDescribeNotificationsForBudgetFuture struct {
	Future workflow.Future
}

func (r *BudgetsDescribeNotificationsForBudgetFuture) Get(ctx workflow.Context) (*budgets.DescribeNotificationsForBudgetOutput, error) {
	var output budgets.DescribeNotificationsForBudgetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsDescribeSubscribersForNotificationFuture struct {
	Future workflow.Future
}

func (r *BudgetsDescribeSubscribersForNotificationFuture) Get(ctx workflow.Context) (*budgets.DescribeSubscribersForNotificationOutput, error) {
	var output budgets.DescribeSubscribersForNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsUpdateBudgetFuture struct {
	Future workflow.Future
}

func (r *BudgetsUpdateBudgetFuture) Get(ctx workflow.Context) (*budgets.UpdateBudgetOutput, error) {
	var output budgets.UpdateBudgetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsUpdateNotificationFuture struct {
	Future workflow.Future
}

func (r *BudgetsUpdateNotificationFuture) Get(ctx workflow.Context) (*budgets.UpdateNotificationOutput, error) {
	var output budgets.UpdateNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BudgetsUpdateSubscriberFuture struct {
	Future workflow.Future
}

func (r *BudgetsUpdateSubscriberFuture) Get(ctx workflow.Context) (*budgets.UpdateSubscriberOutput, error) {
	var output budgets.UpdateSubscriberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) CreateBudget(ctx workflow.Context, input *budgets.CreateBudgetInput) (*budgets.CreateBudgetOutput, error) {
	var output budgets.CreateBudgetOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.CreateBudget", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) CreateBudgetAsync(ctx workflow.Context, input *budgets.CreateBudgetInput) *BudgetsCreateBudgetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.CreateBudget", input)
	return &BudgetsCreateBudgetFuture{Future: future}
}

func (a *BudgetsStub) CreateNotification(ctx workflow.Context, input *budgets.CreateNotificationInput) (*budgets.CreateNotificationOutput, error) {
	var output budgets.CreateNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.CreateNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) CreateNotificationAsync(ctx workflow.Context, input *budgets.CreateNotificationInput) *BudgetsCreateNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.CreateNotification", input)
	return &BudgetsCreateNotificationFuture{Future: future}
}

func (a *BudgetsStub) CreateSubscriber(ctx workflow.Context, input *budgets.CreateSubscriberInput) (*budgets.CreateSubscriberOutput, error) {
	var output budgets.CreateSubscriberOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.CreateSubscriber", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) CreateSubscriberAsync(ctx workflow.Context, input *budgets.CreateSubscriberInput) *BudgetsCreateSubscriberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.CreateSubscriber", input)
	return &BudgetsCreateSubscriberFuture{Future: future}
}

func (a *BudgetsStub) DeleteBudget(ctx workflow.Context, input *budgets.DeleteBudgetInput) (*budgets.DeleteBudgetOutput, error) {
	var output budgets.DeleteBudgetOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.DeleteBudget", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) DeleteBudgetAsync(ctx workflow.Context, input *budgets.DeleteBudgetInput) *BudgetsDeleteBudgetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.DeleteBudget", input)
	return &BudgetsDeleteBudgetFuture{Future: future}
}

func (a *BudgetsStub) DeleteNotification(ctx workflow.Context, input *budgets.DeleteNotificationInput) (*budgets.DeleteNotificationOutput, error) {
	var output budgets.DeleteNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.DeleteNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) DeleteNotificationAsync(ctx workflow.Context, input *budgets.DeleteNotificationInput) *BudgetsDeleteNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.DeleteNotification", input)
	return &BudgetsDeleteNotificationFuture{Future: future}
}

func (a *BudgetsStub) DeleteSubscriber(ctx workflow.Context, input *budgets.DeleteSubscriberInput) (*budgets.DeleteSubscriberOutput, error) {
	var output budgets.DeleteSubscriberOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.DeleteSubscriber", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) DeleteSubscriberAsync(ctx workflow.Context, input *budgets.DeleteSubscriberInput) *BudgetsDeleteSubscriberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.DeleteSubscriber", input)
	return &BudgetsDeleteSubscriberFuture{Future: future}
}

func (a *BudgetsStub) DescribeBudget(ctx workflow.Context, input *budgets.DescribeBudgetInput) (*budgets.DescribeBudgetOutput, error) {
	var output budgets.DescribeBudgetOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.DescribeBudget", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) DescribeBudgetAsync(ctx workflow.Context, input *budgets.DescribeBudgetInput) *BudgetsDescribeBudgetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.DescribeBudget", input)
	return &BudgetsDescribeBudgetFuture{Future: future}
}

func (a *BudgetsStub) DescribeBudgetPerformanceHistory(ctx workflow.Context, input *budgets.DescribeBudgetPerformanceHistoryInput) (*budgets.DescribeBudgetPerformanceHistoryOutput, error) {
	var output budgets.DescribeBudgetPerformanceHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.DescribeBudgetPerformanceHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) DescribeBudgetPerformanceHistoryAsync(ctx workflow.Context, input *budgets.DescribeBudgetPerformanceHistoryInput) *BudgetsDescribeBudgetPerformanceHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.DescribeBudgetPerformanceHistory", input)
	return &BudgetsDescribeBudgetPerformanceHistoryFuture{Future: future}
}

func (a *BudgetsStub) DescribeBudgets(ctx workflow.Context, input *budgets.DescribeBudgetsInput) (*budgets.DescribeBudgetsOutput, error) {
	var output budgets.DescribeBudgetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.DescribeBudgets", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) DescribeBudgetsAsync(ctx workflow.Context, input *budgets.DescribeBudgetsInput) *BudgetsDescribeBudgetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.DescribeBudgets", input)
	return &BudgetsDescribeBudgetsFuture{Future: future}
}

func (a *BudgetsStub) DescribeNotificationsForBudget(ctx workflow.Context, input *budgets.DescribeNotificationsForBudgetInput) (*budgets.DescribeNotificationsForBudgetOutput, error) {
	var output budgets.DescribeNotificationsForBudgetOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.DescribeNotificationsForBudget", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) DescribeNotificationsForBudgetAsync(ctx workflow.Context, input *budgets.DescribeNotificationsForBudgetInput) *BudgetsDescribeNotificationsForBudgetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.DescribeNotificationsForBudget", input)
	return &BudgetsDescribeNotificationsForBudgetFuture{Future: future}
}

func (a *BudgetsStub) DescribeSubscribersForNotification(ctx workflow.Context, input *budgets.DescribeSubscribersForNotificationInput) (*budgets.DescribeSubscribersForNotificationOutput, error) {
	var output budgets.DescribeSubscribersForNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.DescribeSubscribersForNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) DescribeSubscribersForNotificationAsync(ctx workflow.Context, input *budgets.DescribeSubscribersForNotificationInput) *BudgetsDescribeSubscribersForNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.DescribeSubscribersForNotification", input)
	return &BudgetsDescribeSubscribersForNotificationFuture{Future: future}
}

func (a *BudgetsStub) UpdateBudget(ctx workflow.Context, input *budgets.UpdateBudgetInput) (*budgets.UpdateBudgetOutput, error) {
	var output budgets.UpdateBudgetOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.UpdateBudget", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) UpdateBudgetAsync(ctx workflow.Context, input *budgets.UpdateBudgetInput) *BudgetsUpdateBudgetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.UpdateBudget", input)
	return &BudgetsUpdateBudgetFuture{Future: future}
}

func (a *BudgetsStub) UpdateNotification(ctx workflow.Context, input *budgets.UpdateNotificationInput) (*budgets.UpdateNotificationOutput, error) {
	var output budgets.UpdateNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.UpdateNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) UpdateNotificationAsync(ctx workflow.Context, input *budgets.UpdateNotificationInput) *BudgetsUpdateNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.UpdateNotification", input)
	return &BudgetsUpdateNotificationFuture{Future: future}
}

func (a *BudgetsStub) UpdateSubscriber(ctx workflow.Context, input *budgets.UpdateSubscriberInput) (*budgets.UpdateSubscriberOutput, error) {
	var output budgets.UpdateSubscriberOutput
	err := workflow.ExecuteActivity(ctx, "aws.budgets.UpdateSubscriber", input).Get(ctx, &output)
	return &output, err
}

func (a *BudgetsStub) UpdateSubscriberAsync(ctx workflow.Context, input *budgets.UpdateSubscriberInput) *BudgetsUpdateSubscriberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.budgets.UpdateSubscriber", input)
	return &BudgetsUpdateSubscriberFuture{Future: future}
}
