// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/emr"
	"go.temporal.io/sdk/workflow"
)

type EMRClient interface {
	AddInstanceFleet(ctx workflow.Context, input *emr.AddInstanceFleetInput) (*emr.AddInstanceFleetOutput, error)
	AddInstanceFleetAsync(ctx workflow.Context, input *emr.AddInstanceFleetInput) *EMRAddInstanceFleetFuture

	AddInstanceGroups(ctx workflow.Context, input *emr.AddInstanceGroupsInput) (*emr.AddInstanceGroupsOutput, error)
	AddInstanceGroupsAsync(ctx workflow.Context, input *emr.AddInstanceGroupsInput) *EMRAddInstanceGroupsFuture

	AddJobFlowSteps(ctx workflow.Context, input *emr.AddJobFlowStepsInput) (*emr.AddJobFlowStepsOutput, error)
	AddJobFlowStepsAsync(ctx workflow.Context, input *emr.AddJobFlowStepsInput) *EMRAddJobFlowStepsFuture

	AddTags(ctx workflow.Context, input *emr.AddTagsInput) (*emr.AddTagsOutput, error)
	AddTagsAsync(ctx workflow.Context, input *emr.AddTagsInput) *EMRAddTagsFuture

	CancelSteps(ctx workflow.Context, input *emr.CancelStepsInput) (*emr.CancelStepsOutput, error)
	CancelStepsAsync(ctx workflow.Context, input *emr.CancelStepsInput) *EMRCancelStepsFuture

	CreateSecurityConfiguration(ctx workflow.Context, input *emr.CreateSecurityConfigurationInput) (*emr.CreateSecurityConfigurationOutput, error)
	CreateSecurityConfigurationAsync(ctx workflow.Context, input *emr.CreateSecurityConfigurationInput) *EMRCreateSecurityConfigurationFuture

	DeleteSecurityConfiguration(ctx workflow.Context, input *emr.DeleteSecurityConfigurationInput) (*emr.DeleteSecurityConfigurationOutput, error)
	DeleteSecurityConfigurationAsync(ctx workflow.Context, input *emr.DeleteSecurityConfigurationInput) *EMRDeleteSecurityConfigurationFuture

	DescribeCluster(ctx workflow.Context, input *emr.DescribeClusterInput) (*emr.DescribeClusterOutput, error)
	DescribeClusterAsync(ctx workflow.Context, input *emr.DescribeClusterInput) *EMRDescribeClusterFuture

	DescribeJobFlows(ctx workflow.Context, input *emr.DescribeJobFlowsInput) (*emr.DescribeJobFlowsOutput, error)
	DescribeJobFlowsAsync(ctx workflow.Context, input *emr.DescribeJobFlowsInput) *EMRDescribeJobFlowsFuture

	DescribeNotebookExecution(ctx workflow.Context, input *emr.DescribeNotebookExecutionInput) (*emr.DescribeNotebookExecutionOutput, error)
	DescribeNotebookExecutionAsync(ctx workflow.Context, input *emr.DescribeNotebookExecutionInput) *EMRDescribeNotebookExecutionFuture

	DescribeSecurityConfiguration(ctx workflow.Context, input *emr.DescribeSecurityConfigurationInput) (*emr.DescribeSecurityConfigurationOutput, error)
	DescribeSecurityConfigurationAsync(ctx workflow.Context, input *emr.DescribeSecurityConfigurationInput) *EMRDescribeSecurityConfigurationFuture

	DescribeStep(ctx workflow.Context, input *emr.DescribeStepInput) (*emr.DescribeStepOutput, error)
	DescribeStepAsync(ctx workflow.Context, input *emr.DescribeStepInput) *EMRDescribeStepFuture

	GetBlockPublicAccessConfiguration(ctx workflow.Context, input *emr.GetBlockPublicAccessConfigurationInput) (*emr.GetBlockPublicAccessConfigurationOutput, error)
	GetBlockPublicAccessConfigurationAsync(ctx workflow.Context, input *emr.GetBlockPublicAccessConfigurationInput) *EMRGetBlockPublicAccessConfigurationFuture

	GetManagedScalingPolicy(ctx workflow.Context, input *emr.GetManagedScalingPolicyInput) (*emr.GetManagedScalingPolicyOutput, error)
	GetManagedScalingPolicyAsync(ctx workflow.Context, input *emr.GetManagedScalingPolicyInput) *EMRGetManagedScalingPolicyFuture

	ListBootstrapActions(ctx workflow.Context, input *emr.ListBootstrapActionsInput) (*emr.ListBootstrapActionsOutput, error)
	ListBootstrapActionsAsync(ctx workflow.Context, input *emr.ListBootstrapActionsInput) *EMRListBootstrapActionsFuture

	ListClusters(ctx workflow.Context, input *emr.ListClustersInput) (*emr.ListClustersOutput, error)
	ListClustersAsync(ctx workflow.Context, input *emr.ListClustersInput) *EMRListClustersFuture

	ListInstanceFleets(ctx workflow.Context, input *emr.ListInstanceFleetsInput) (*emr.ListInstanceFleetsOutput, error)
	ListInstanceFleetsAsync(ctx workflow.Context, input *emr.ListInstanceFleetsInput) *EMRListInstanceFleetsFuture

	ListInstanceGroups(ctx workflow.Context, input *emr.ListInstanceGroupsInput) (*emr.ListInstanceGroupsOutput, error)
	ListInstanceGroupsAsync(ctx workflow.Context, input *emr.ListInstanceGroupsInput) *EMRListInstanceGroupsFuture

	ListInstances(ctx workflow.Context, input *emr.ListInstancesInput) (*emr.ListInstancesOutput, error)
	ListInstancesAsync(ctx workflow.Context, input *emr.ListInstancesInput) *EMRListInstancesFuture

	ListNotebookExecutions(ctx workflow.Context, input *emr.ListNotebookExecutionsInput) (*emr.ListNotebookExecutionsOutput, error)
	ListNotebookExecutionsAsync(ctx workflow.Context, input *emr.ListNotebookExecutionsInput) *EMRListNotebookExecutionsFuture

	ListSecurityConfigurations(ctx workflow.Context, input *emr.ListSecurityConfigurationsInput) (*emr.ListSecurityConfigurationsOutput, error)
	ListSecurityConfigurationsAsync(ctx workflow.Context, input *emr.ListSecurityConfigurationsInput) *EMRListSecurityConfigurationsFuture

	ListSteps(ctx workflow.Context, input *emr.ListStepsInput) (*emr.ListStepsOutput, error)
	ListStepsAsync(ctx workflow.Context, input *emr.ListStepsInput) *EMRListStepsFuture

	ModifyCluster(ctx workflow.Context, input *emr.ModifyClusterInput) (*emr.ModifyClusterOutput, error)
	ModifyClusterAsync(ctx workflow.Context, input *emr.ModifyClusterInput) *EMRModifyClusterFuture

	ModifyInstanceFleet(ctx workflow.Context, input *emr.ModifyInstanceFleetInput) (*emr.ModifyInstanceFleetOutput, error)
	ModifyInstanceFleetAsync(ctx workflow.Context, input *emr.ModifyInstanceFleetInput) *EMRModifyInstanceFleetFuture

	ModifyInstanceGroups(ctx workflow.Context, input *emr.ModifyInstanceGroupsInput) (*emr.ModifyInstanceGroupsOutput, error)
	ModifyInstanceGroupsAsync(ctx workflow.Context, input *emr.ModifyInstanceGroupsInput) *EMRModifyInstanceGroupsFuture

	PutAutoScalingPolicy(ctx workflow.Context, input *emr.PutAutoScalingPolicyInput) (*emr.PutAutoScalingPolicyOutput, error)
	PutAutoScalingPolicyAsync(ctx workflow.Context, input *emr.PutAutoScalingPolicyInput) *EMRPutAutoScalingPolicyFuture

	PutBlockPublicAccessConfiguration(ctx workflow.Context, input *emr.PutBlockPublicAccessConfigurationInput) (*emr.PutBlockPublicAccessConfigurationOutput, error)
	PutBlockPublicAccessConfigurationAsync(ctx workflow.Context, input *emr.PutBlockPublicAccessConfigurationInput) *EMRPutBlockPublicAccessConfigurationFuture

	PutManagedScalingPolicy(ctx workflow.Context, input *emr.PutManagedScalingPolicyInput) (*emr.PutManagedScalingPolicyOutput, error)
	PutManagedScalingPolicyAsync(ctx workflow.Context, input *emr.PutManagedScalingPolicyInput) *EMRPutManagedScalingPolicyFuture

	RemoveAutoScalingPolicy(ctx workflow.Context, input *emr.RemoveAutoScalingPolicyInput) (*emr.RemoveAutoScalingPolicyOutput, error)
	RemoveAutoScalingPolicyAsync(ctx workflow.Context, input *emr.RemoveAutoScalingPolicyInput) *EMRRemoveAutoScalingPolicyFuture

	RemoveManagedScalingPolicy(ctx workflow.Context, input *emr.RemoveManagedScalingPolicyInput) (*emr.RemoveManagedScalingPolicyOutput, error)
	RemoveManagedScalingPolicyAsync(ctx workflow.Context, input *emr.RemoveManagedScalingPolicyInput) *EMRRemoveManagedScalingPolicyFuture

	RemoveTags(ctx workflow.Context, input *emr.RemoveTagsInput) (*emr.RemoveTagsOutput, error)
	RemoveTagsAsync(ctx workflow.Context, input *emr.RemoveTagsInput) *EMRRemoveTagsFuture

	RunJobFlow(ctx workflow.Context, input *emr.RunJobFlowInput) (*emr.RunJobFlowOutput, error)
	RunJobFlowAsync(ctx workflow.Context, input *emr.RunJobFlowInput) *EMRRunJobFlowFuture

	SetTerminationProtection(ctx workflow.Context, input *emr.SetTerminationProtectionInput) (*emr.SetTerminationProtectionOutput, error)
	SetTerminationProtectionAsync(ctx workflow.Context, input *emr.SetTerminationProtectionInput) *EMRSetTerminationProtectionFuture

	SetVisibleToAllUsers(ctx workflow.Context, input *emr.SetVisibleToAllUsersInput) (*emr.SetVisibleToAllUsersOutput, error)
	SetVisibleToAllUsersAsync(ctx workflow.Context, input *emr.SetVisibleToAllUsersInput) *EMRSetVisibleToAllUsersFuture

	StartNotebookExecution(ctx workflow.Context, input *emr.StartNotebookExecutionInput) (*emr.StartNotebookExecutionOutput, error)
	StartNotebookExecutionAsync(ctx workflow.Context, input *emr.StartNotebookExecutionInput) *EMRStartNotebookExecutionFuture

	StopNotebookExecution(ctx workflow.Context, input *emr.StopNotebookExecutionInput) (*emr.StopNotebookExecutionOutput, error)
	StopNotebookExecutionAsync(ctx workflow.Context, input *emr.StopNotebookExecutionInput) *EMRStopNotebookExecutionFuture

	TerminateJobFlows(ctx workflow.Context, input *emr.TerminateJobFlowsInput) (*emr.TerminateJobFlowsOutput, error)
	TerminateJobFlowsAsync(ctx workflow.Context, input *emr.TerminateJobFlowsInput) *EMRTerminateJobFlowsFuture

	WaitUntilClusterRunning(ctx workflow.Context, input *emr.DescribeClusterInput) error
	WaitUntilClusterRunningAsync(ctx workflow.Context, input *emr.DescribeClusterInput) *VoidFuture

	WaitUntilClusterTerminated(ctx workflow.Context, input *emr.DescribeClusterInput) error
	WaitUntilClusterTerminatedAsync(ctx workflow.Context, input *emr.DescribeClusterInput) *VoidFuture

	WaitUntilStepComplete(ctx workflow.Context, input *emr.DescribeStepInput) error
	WaitUntilStepCompleteAsync(ctx workflow.Context, input *emr.DescribeStepInput) *VoidFuture
}

type EMRStub struct{}

func NewEMRStub() EMRClient {
	return &EMRStub{}
}

type EMRAddInstanceFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRAddInstanceFleetFuture) Get(ctx workflow.Context) (*emr.AddInstanceFleetOutput, error) {
	var output emr.AddInstanceFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRAddInstanceGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRAddInstanceGroupsFuture) Get(ctx workflow.Context) (*emr.AddInstanceGroupsOutput, error) {
	var output emr.AddInstanceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRAddJobFlowStepsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRAddJobFlowStepsFuture) Get(ctx workflow.Context) (*emr.AddJobFlowStepsOutput, error) {
	var output emr.AddJobFlowStepsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRAddTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRAddTagsFuture) Get(ctx workflow.Context) (*emr.AddTagsOutput, error) {
	var output emr.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRCancelStepsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRCancelStepsFuture) Get(ctx workflow.Context) (*emr.CancelStepsOutput, error) {
	var output emr.CancelStepsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRCreateSecurityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRCreateSecurityConfigurationFuture) Get(ctx workflow.Context) (*emr.CreateSecurityConfigurationOutput, error) {
	var output emr.CreateSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRDeleteSecurityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRDeleteSecurityConfigurationFuture) Get(ctx workflow.Context) (*emr.DeleteSecurityConfigurationOutput, error) {
	var output emr.DeleteSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRDescribeClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRDescribeClusterFuture) Get(ctx workflow.Context) (*emr.DescribeClusterOutput, error) {
	var output emr.DescribeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRDescribeJobFlowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRDescribeJobFlowsFuture) Get(ctx workflow.Context) (*emr.DescribeJobFlowsOutput, error) {
	var output emr.DescribeJobFlowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRDescribeNotebookExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRDescribeNotebookExecutionFuture) Get(ctx workflow.Context) (*emr.DescribeNotebookExecutionOutput, error) {
	var output emr.DescribeNotebookExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRDescribeSecurityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRDescribeSecurityConfigurationFuture) Get(ctx workflow.Context) (*emr.DescribeSecurityConfigurationOutput, error) {
	var output emr.DescribeSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRDescribeStepFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRDescribeStepFuture) Get(ctx workflow.Context) (*emr.DescribeStepOutput, error) {
	var output emr.DescribeStepOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRGetBlockPublicAccessConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRGetBlockPublicAccessConfigurationFuture) Get(ctx workflow.Context) (*emr.GetBlockPublicAccessConfigurationOutput, error) {
	var output emr.GetBlockPublicAccessConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRGetManagedScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRGetManagedScalingPolicyFuture) Get(ctx workflow.Context) (*emr.GetManagedScalingPolicyOutput, error) {
	var output emr.GetManagedScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListBootstrapActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListBootstrapActionsFuture) Get(ctx workflow.Context) (*emr.ListBootstrapActionsOutput, error) {
	var output emr.ListBootstrapActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListClustersFuture) Get(ctx workflow.Context) (*emr.ListClustersOutput, error) {
	var output emr.ListClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListInstanceFleetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListInstanceFleetsFuture) Get(ctx workflow.Context) (*emr.ListInstanceFleetsOutput, error) {
	var output emr.ListInstanceFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListInstanceGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListInstanceGroupsFuture) Get(ctx workflow.Context) (*emr.ListInstanceGroupsOutput, error) {
	var output emr.ListInstanceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListInstancesFuture) Get(ctx workflow.Context) (*emr.ListInstancesOutput, error) {
	var output emr.ListInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListNotebookExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListNotebookExecutionsFuture) Get(ctx workflow.Context) (*emr.ListNotebookExecutionsOutput, error) {
	var output emr.ListNotebookExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListSecurityConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListSecurityConfigurationsFuture) Get(ctx workflow.Context) (*emr.ListSecurityConfigurationsOutput, error) {
	var output emr.ListSecurityConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListStepsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListStepsFuture) Get(ctx workflow.Context) (*emr.ListStepsOutput, error) {
	var output emr.ListStepsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRModifyClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRModifyClusterFuture) Get(ctx workflow.Context) (*emr.ModifyClusterOutput, error) {
	var output emr.ModifyClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRModifyInstanceFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRModifyInstanceFleetFuture) Get(ctx workflow.Context) (*emr.ModifyInstanceFleetOutput, error) {
	var output emr.ModifyInstanceFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRModifyInstanceGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRModifyInstanceGroupsFuture) Get(ctx workflow.Context) (*emr.ModifyInstanceGroupsOutput, error) {
	var output emr.ModifyInstanceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRPutAutoScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRPutAutoScalingPolicyFuture) Get(ctx workflow.Context) (*emr.PutAutoScalingPolicyOutput, error) {
	var output emr.PutAutoScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRPutBlockPublicAccessConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRPutBlockPublicAccessConfigurationFuture) Get(ctx workflow.Context) (*emr.PutBlockPublicAccessConfigurationOutput, error) {
	var output emr.PutBlockPublicAccessConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRPutManagedScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRPutManagedScalingPolicyFuture) Get(ctx workflow.Context) (*emr.PutManagedScalingPolicyOutput, error) {
	var output emr.PutManagedScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRRemoveAutoScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRRemoveAutoScalingPolicyFuture) Get(ctx workflow.Context) (*emr.RemoveAutoScalingPolicyOutput, error) {
	var output emr.RemoveAutoScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRRemoveManagedScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRRemoveManagedScalingPolicyFuture) Get(ctx workflow.Context) (*emr.RemoveManagedScalingPolicyOutput, error) {
	var output emr.RemoveManagedScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRRemoveTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRRemoveTagsFuture) Get(ctx workflow.Context) (*emr.RemoveTagsOutput, error) {
	var output emr.RemoveTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRRunJobFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRRunJobFlowFuture) Get(ctx workflow.Context) (*emr.RunJobFlowOutput, error) {
	var output emr.RunJobFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRSetTerminationProtectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRSetTerminationProtectionFuture) Get(ctx workflow.Context) (*emr.SetTerminationProtectionOutput, error) {
	var output emr.SetTerminationProtectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRSetVisibleToAllUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRSetVisibleToAllUsersFuture) Get(ctx workflow.Context) (*emr.SetVisibleToAllUsersOutput, error) {
	var output emr.SetVisibleToAllUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRStartNotebookExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRStartNotebookExecutionFuture) Get(ctx workflow.Context) (*emr.StartNotebookExecutionOutput, error) {
	var output emr.StartNotebookExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRStopNotebookExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRStopNotebookExecutionFuture) Get(ctx workflow.Context) (*emr.StopNotebookExecutionOutput, error) {
	var output emr.StopNotebookExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRTerminateJobFlowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRTerminateJobFlowsFuture) Get(ctx workflow.Context) (*emr.TerminateJobFlowsOutput, error) {
	var output emr.TerminateJobFlowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) AddInstanceFleet(ctx workflow.Context, input *emr.AddInstanceFleetInput) (*emr.AddInstanceFleetOutput, error) {
	var output emr.AddInstanceFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.AddInstanceFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) AddInstanceFleetAsync(ctx workflow.Context, input *emr.AddInstanceFleetInput) *EMRAddInstanceFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.AddInstanceFleet", input)
	return &EMRAddInstanceFleetFuture{Future: future}
}

func (a *EMRStub) AddInstanceGroups(ctx workflow.Context, input *emr.AddInstanceGroupsInput) (*emr.AddInstanceGroupsOutput, error) {
	var output emr.AddInstanceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.AddInstanceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) AddInstanceGroupsAsync(ctx workflow.Context, input *emr.AddInstanceGroupsInput) *EMRAddInstanceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.AddInstanceGroups", input)
	return &EMRAddInstanceGroupsFuture{Future: future}
}

func (a *EMRStub) AddJobFlowSteps(ctx workflow.Context, input *emr.AddJobFlowStepsInput) (*emr.AddJobFlowStepsOutput, error) {
	var output emr.AddJobFlowStepsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.AddJobFlowSteps", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) AddJobFlowStepsAsync(ctx workflow.Context, input *emr.AddJobFlowStepsInput) *EMRAddJobFlowStepsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.AddJobFlowSteps", input)
	return &EMRAddJobFlowStepsFuture{Future: future}
}

func (a *EMRStub) AddTags(ctx workflow.Context, input *emr.AddTagsInput) (*emr.AddTagsOutput, error) {
	var output emr.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) AddTagsAsync(ctx workflow.Context, input *emr.AddTagsInput) *EMRAddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.AddTags", input)
	return &EMRAddTagsFuture{Future: future}
}

func (a *EMRStub) CancelSteps(ctx workflow.Context, input *emr.CancelStepsInput) (*emr.CancelStepsOutput, error) {
	var output emr.CancelStepsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.CancelSteps", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) CancelStepsAsync(ctx workflow.Context, input *emr.CancelStepsInput) *EMRCancelStepsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.CancelSteps", input)
	return &EMRCancelStepsFuture{Future: future}
}

func (a *EMRStub) CreateSecurityConfiguration(ctx workflow.Context, input *emr.CreateSecurityConfigurationInput) (*emr.CreateSecurityConfigurationOutput, error) {
	var output emr.CreateSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.CreateSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) CreateSecurityConfigurationAsync(ctx workflow.Context, input *emr.CreateSecurityConfigurationInput) *EMRCreateSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.CreateSecurityConfiguration", input)
	return &EMRCreateSecurityConfigurationFuture{Future: future}
}

func (a *EMRStub) DeleteSecurityConfiguration(ctx workflow.Context, input *emr.DeleteSecurityConfigurationInput) (*emr.DeleteSecurityConfigurationOutput, error) {
	var output emr.DeleteSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.DeleteSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) DeleteSecurityConfigurationAsync(ctx workflow.Context, input *emr.DeleteSecurityConfigurationInput) *EMRDeleteSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.DeleteSecurityConfiguration", input)
	return &EMRDeleteSecurityConfigurationFuture{Future: future}
}

func (a *EMRStub) DescribeCluster(ctx workflow.Context, input *emr.DescribeClusterInput) (*emr.DescribeClusterOutput, error) {
	var output emr.DescribeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.DescribeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) DescribeClusterAsync(ctx workflow.Context, input *emr.DescribeClusterInput) *EMRDescribeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.DescribeCluster", input)
	return &EMRDescribeClusterFuture{Future: future}
}

func (a *EMRStub) DescribeJobFlows(ctx workflow.Context, input *emr.DescribeJobFlowsInput) (*emr.DescribeJobFlowsOutput, error) {
	var output emr.DescribeJobFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.DescribeJobFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) DescribeJobFlowsAsync(ctx workflow.Context, input *emr.DescribeJobFlowsInput) *EMRDescribeJobFlowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.DescribeJobFlows", input)
	return &EMRDescribeJobFlowsFuture{Future: future}
}

func (a *EMRStub) DescribeNotebookExecution(ctx workflow.Context, input *emr.DescribeNotebookExecutionInput) (*emr.DescribeNotebookExecutionOutput, error) {
	var output emr.DescribeNotebookExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.DescribeNotebookExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) DescribeNotebookExecutionAsync(ctx workflow.Context, input *emr.DescribeNotebookExecutionInput) *EMRDescribeNotebookExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.DescribeNotebookExecution", input)
	return &EMRDescribeNotebookExecutionFuture{Future: future}
}

func (a *EMRStub) DescribeSecurityConfiguration(ctx workflow.Context, input *emr.DescribeSecurityConfigurationInput) (*emr.DescribeSecurityConfigurationOutput, error) {
	var output emr.DescribeSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.DescribeSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) DescribeSecurityConfigurationAsync(ctx workflow.Context, input *emr.DescribeSecurityConfigurationInput) *EMRDescribeSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.DescribeSecurityConfiguration", input)
	return &EMRDescribeSecurityConfigurationFuture{Future: future}
}

func (a *EMRStub) DescribeStep(ctx workflow.Context, input *emr.DescribeStepInput) (*emr.DescribeStepOutput, error) {
	var output emr.DescribeStepOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.DescribeStep", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) DescribeStepAsync(ctx workflow.Context, input *emr.DescribeStepInput) *EMRDescribeStepFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.DescribeStep", input)
	return &EMRDescribeStepFuture{Future: future}
}

func (a *EMRStub) GetBlockPublicAccessConfiguration(ctx workflow.Context, input *emr.GetBlockPublicAccessConfigurationInput) (*emr.GetBlockPublicAccessConfigurationOutput, error) {
	var output emr.GetBlockPublicAccessConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.GetBlockPublicAccessConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) GetBlockPublicAccessConfigurationAsync(ctx workflow.Context, input *emr.GetBlockPublicAccessConfigurationInput) *EMRGetBlockPublicAccessConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.GetBlockPublicAccessConfiguration", input)
	return &EMRGetBlockPublicAccessConfigurationFuture{Future: future}
}

func (a *EMRStub) GetManagedScalingPolicy(ctx workflow.Context, input *emr.GetManagedScalingPolicyInput) (*emr.GetManagedScalingPolicyOutput, error) {
	var output emr.GetManagedScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.GetManagedScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) GetManagedScalingPolicyAsync(ctx workflow.Context, input *emr.GetManagedScalingPolicyInput) *EMRGetManagedScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.GetManagedScalingPolicy", input)
	return &EMRGetManagedScalingPolicyFuture{Future: future}
}

func (a *EMRStub) ListBootstrapActions(ctx workflow.Context, input *emr.ListBootstrapActionsInput) (*emr.ListBootstrapActionsOutput, error) {
	var output emr.ListBootstrapActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListBootstrapActions", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListBootstrapActionsAsync(ctx workflow.Context, input *emr.ListBootstrapActionsInput) *EMRListBootstrapActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListBootstrapActions", input)
	return &EMRListBootstrapActionsFuture{Future: future}
}

func (a *EMRStub) ListClusters(ctx workflow.Context, input *emr.ListClustersInput) (*emr.ListClustersOutput, error) {
	var output emr.ListClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListClustersAsync(ctx workflow.Context, input *emr.ListClustersInput) *EMRListClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListClusters", input)
	return &EMRListClustersFuture{Future: future}
}

func (a *EMRStub) ListInstanceFleets(ctx workflow.Context, input *emr.ListInstanceFleetsInput) (*emr.ListInstanceFleetsOutput, error) {
	var output emr.ListInstanceFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListInstanceFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListInstanceFleetsAsync(ctx workflow.Context, input *emr.ListInstanceFleetsInput) *EMRListInstanceFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListInstanceFleets", input)
	return &EMRListInstanceFleetsFuture{Future: future}
}

func (a *EMRStub) ListInstanceGroups(ctx workflow.Context, input *emr.ListInstanceGroupsInput) (*emr.ListInstanceGroupsOutput, error) {
	var output emr.ListInstanceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListInstanceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListInstanceGroupsAsync(ctx workflow.Context, input *emr.ListInstanceGroupsInput) *EMRListInstanceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListInstanceGroups", input)
	return &EMRListInstanceGroupsFuture{Future: future}
}

func (a *EMRStub) ListInstances(ctx workflow.Context, input *emr.ListInstancesInput) (*emr.ListInstancesOutput, error) {
	var output emr.ListInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListInstancesAsync(ctx workflow.Context, input *emr.ListInstancesInput) *EMRListInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListInstances", input)
	return &EMRListInstancesFuture{Future: future}
}

func (a *EMRStub) ListNotebookExecutions(ctx workflow.Context, input *emr.ListNotebookExecutionsInput) (*emr.ListNotebookExecutionsOutput, error) {
	var output emr.ListNotebookExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListNotebookExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListNotebookExecutionsAsync(ctx workflow.Context, input *emr.ListNotebookExecutionsInput) *EMRListNotebookExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListNotebookExecutions", input)
	return &EMRListNotebookExecutionsFuture{Future: future}
}

func (a *EMRStub) ListSecurityConfigurations(ctx workflow.Context, input *emr.ListSecurityConfigurationsInput) (*emr.ListSecurityConfigurationsOutput, error) {
	var output emr.ListSecurityConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListSecurityConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListSecurityConfigurationsAsync(ctx workflow.Context, input *emr.ListSecurityConfigurationsInput) *EMRListSecurityConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListSecurityConfigurations", input)
	return &EMRListSecurityConfigurationsFuture{Future: future}
}

func (a *EMRStub) ListSteps(ctx workflow.Context, input *emr.ListStepsInput) (*emr.ListStepsOutput, error) {
	var output emr.ListStepsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListSteps", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListStepsAsync(ctx workflow.Context, input *emr.ListStepsInput) *EMRListStepsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListSteps", input)
	return &EMRListStepsFuture{Future: future}
}

func (a *EMRStub) ModifyCluster(ctx workflow.Context, input *emr.ModifyClusterInput) (*emr.ModifyClusterOutput, error) {
	var output emr.ModifyClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ModifyCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ModifyClusterAsync(ctx workflow.Context, input *emr.ModifyClusterInput) *EMRModifyClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ModifyCluster", input)
	return &EMRModifyClusterFuture{Future: future}
}

func (a *EMRStub) ModifyInstanceFleet(ctx workflow.Context, input *emr.ModifyInstanceFleetInput) (*emr.ModifyInstanceFleetOutput, error) {
	var output emr.ModifyInstanceFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ModifyInstanceFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ModifyInstanceFleetAsync(ctx workflow.Context, input *emr.ModifyInstanceFleetInput) *EMRModifyInstanceFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ModifyInstanceFleet", input)
	return &EMRModifyInstanceFleetFuture{Future: future}
}

func (a *EMRStub) ModifyInstanceGroups(ctx workflow.Context, input *emr.ModifyInstanceGroupsInput) (*emr.ModifyInstanceGroupsOutput, error) {
	var output emr.ModifyInstanceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ModifyInstanceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ModifyInstanceGroupsAsync(ctx workflow.Context, input *emr.ModifyInstanceGroupsInput) *EMRModifyInstanceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ModifyInstanceGroups", input)
	return &EMRModifyInstanceGroupsFuture{Future: future}
}

func (a *EMRStub) PutAutoScalingPolicy(ctx workflow.Context, input *emr.PutAutoScalingPolicyInput) (*emr.PutAutoScalingPolicyOutput, error) {
	var output emr.PutAutoScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.PutAutoScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) PutAutoScalingPolicyAsync(ctx workflow.Context, input *emr.PutAutoScalingPolicyInput) *EMRPutAutoScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.PutAutoScalingPolicy", input)
	return &EMRPutAutoScalingPolicyFuture{Future: future}
}

func (a *EMRStub) PutBlockPublicAccessConfiguration(ctx workflow.Context, input *emr.PutBlockPublicAccessConfigurationInput) (*emr.PutBlockPublicAccessConfigurationOutput, error) {
	var output emr.PutBlockPublicAccessConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.PutBlockPublicAccessConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) PutBlockPublicAccessConfigurationAsync(ctx workflow.Context, input *emr.PutBlockPublicAccessConfigurationInput) *EMRPutBlockPublicAccessConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.PutBlockPublicAccessConfiguration", input)
	return &EMRPutBlockPublicAccessConfigurationFuture{Future: future}
}

func (a *EMRStub) PutManagedScalingPolicy(ctx workflow.Context, input *emr.PutManagedScalingPolicyInput) (*emr.PutManagedScalingPolicyOutput, error) {
	var output emr.PutManagedScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.PutManagedScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) PutManagedScalingPolicyAsync(ctx workflow.Context, input *emr.PutManagedScalingPolicyInput) *EMRPutManagedScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.PutManagedScalingPolicy", input)
	return &EMRPutManagedScalingPolicyFuture{Future: future}
}

func (a *EMRStub) RemoveAutoScalingPolicy(ctx workflow.Context, input *emr.RemoveAutoScalingPolicyInput) (*emr.RemoveAutoScalingPolicyOutput, error) {
	var output emr.RemoveAutoScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.RemoveAutoScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) RemoveAutoScalingPolicyAsync(ctx workflow.Context, input *emr.RemoveAutoScalingPolicyInput) *EMRRemoveAutoScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.RemoveAutoScalingPolicy", input)
	return &EMRRemoveAutoScalingPolicyFuture{Future: future}
}

func (a *EMRStub) RemoveManagedScalingPolicy(ctx workflow.Context, input *emr.RemoveManagedScalingPolicyInput) (*emr.RemoveManagedScalingPolicyOutput, error) {
	var output emr.RemoveManagedScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.RemoveManagedScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) RemoveManagedScalingPolicyAsync(ctx workflow.Context, input *emr.RemoveManagedScalingPolicyInput) *EMRRemoveManagedScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.RemoveManagedScalingPolicy", input)
	return &EMRRemoveManagedScalingPolicyFuture{Future: future}
}

func (a *EMRStub) RemoveTags(ctx workflow.Context, input *emr.RemoveTagsInput) (*emr.RemoveTagsOutput, error) {
	var output emr.RemoveTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.RemoveTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) RemoveTagsAsync(ctx workflow.Context, input *emr.RemoveTagsInput) *EMRRemoveTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.RemoveTags", input)
	return &EMRRemoveTagsFuture{Future: future}
}

func (a *EMRStub) RunJobFlow(ctx workflow.Context, input *emr.RunJobFlowInput) (*emr.RunJobFlowOutput, error) {
	var output emr.RunJobFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.RunJobFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) RunJobFlowAsync(ctx workflow.Context, input *emr.RunJobFlowInput) *EMRRunJobFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.RunJobFlow", input)
	return &EMRRunJobFlowFuture{Future: future}
}

func (a *EMRStub) SetTerminationProtection(ctx workflow.Context, input *emr.SetTerminationProtectionInput) (*emr.SetTerminationProtectionOutput, error) {
	var output emr.SetTerminationProtectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.SetTerminationProtection", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) SetTerminationProtectionAsync(ctx workflow.Context, input *emr.SetTerminationProtectionInput) *EMRSetTerminationProtectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.SetTerminationProtection", input)
	return &EMRSetTerminationProtectionFuture{Future: future}
}

func (a *EMRStub) SetVisibleToAllUsers(ctx workflow.Context, input *emr.SetVisibleToAllUsersInput) (*emr.SetVisibleToAllUsersOutput, error) {
	var output emr.SetVisibleToAllUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.SetVisibleToAllUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) SetVisibleToAllUsersAsync(ctx workflow.Context, input *emr.SetVisibleToAllUsersInput) *EMRSetVisibleToAllUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.SetVisibleToAllUsers", input)
	return &EMRSetVisibleToAllUsersFuture{Future: future}
}

func (a *EMRStub) StartNotebookExecution(ctx workflow.Context, input *emr.StartNotebookExecutionInput) (*emr.StartNotebookExecutionOutput, error) {
	var output emr.StartNotebookExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.StartNotebookExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) StartNotebookExecutionAsync(ctx workflow.Context, input *emr.StartNotebookExecutionInput) *EMRStartNotebookExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.StartNotebookExecution", input)
	return &EMRStartNotebookExecutionFuture{Future: future}
}

func (a *EMRStub) StopNotebookExecution(ctx workflow.Context, input *emr.StopNotebookExecutionInput) (*emr.StopNotebookExecutionOutput, error) {
	var output emr.StopNotebookExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.StopNotebookExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) StopNotebookExecutionAsync(ctx workflow.Context, input *emr.StopNotebookExecutionInput) *EMRStopNotebookExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.StopNotebookExecution", input)
	return &EMRStopNotebookExecutionFuture{Future: future}
}

func (a *EMRStub) TerminateJobFlows(ctx workflow.Context, input *emr.TerminateJobFlowsInput) (*emr.TerminateJobFlowsOutput, error) {
	var output emr.TerminateJobFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.TerminateJobFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) TerminateJobFlowsAsync(ctx workflow.Context, input *emr.TerminateJobFlowsInput) *EMRTerminateJobFlowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.TerminateJobFlows", input)
	return &EMRTerminateJobFlowsFuture{Future: future}
}

func (a *EMRStub) WaitUntilClusterRunning(ctx workflow.Context, input *emr.DescribeClusterInput) error {
	return workflow.ExecuteActivity(ctx, "aws.emr.WaitUntilClusterRunning", input).Get(ctx, nil)
}

func (a *EMRStub) WaitUntilClusterRunningAsync(ctx workflow.Context, input *emr.DescribeClusterInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.WaitUntilClusterRunning", input)
	return NewVoidFuture(future)
}

func (a *EMRStub) WaitUntilClusterTerminated(ctx workflow.Context, input *emr.DescribeClusterInput) error {
	return workflow.ExecuteActivity(ctx, "aws.emr.WaitUntilClusterTerminated", input).Get(ctx, nil)
}

func (a *EMRStub) WaitUntilClusterTerminatedAsync(ctx workflow.Context, input *emr.DescribeClusterInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.WaitUntilClusterTerminated", input)
	return NewVoidFuture(future)
}

func (a *EMRStub) WaitUntilStepComplete(ctx workflow.Context, input *emr.DescribeStepInput) error {
	return workflow.ExecuteActivity(ctx, "aws.emr.WaitUntilStepComplete", input).Get(ctx, nil)
}

func (a *EMRStub) WaitUntilStepCompleteAsync(ctx workflow.Context, input *emr.DescribeStepInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.WaitUntilStepComplete", input)
	return NewVoidFuture(future)
}
