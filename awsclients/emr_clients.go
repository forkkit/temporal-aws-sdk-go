// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/emr"
	"go.temporal.io/sdk/workflow"
)

type EMRClient interface {
	AddInstanceFleet(ctx workflow.Context, input *emr.AddInstanceFleetInput) (*emr.AddInstanceFleetOutput, error)
	AddInstanceFleetAsync(ctx workflow.Context, input *emr.AddInstanceFleetInput) *EmrAddInstanceFleetFuture

	AddInstanceGroups(ctx workflow.Context, input *emr.AddInstanceGroupsInput) (*emr.AddInstanceGroupsOutput, error)
	AddInstanceGroupsAsync(ctx workflow.Context, input *emr.AddInstanceGroupsInput) *EmrAddInstanceGroupsFuture

	AddJobFlowSteps(ctx workflow.Context, input *emr.AddJobFlowStepsInput) (*emr.AddJobFlowStepsOutput, error)
	AddJobFlowStepsAsync(ctx workflow.Context, input *emr.AddJobFlowStepsInput) *EmrAddJobFlowStepsFuture

	AddTags(ctx workflow.Context, input *emr.AddTagsInput) (*emr.AddTagsOutput, error)
	AddTagsAsync(ctx workflow.Context, input *emr.AddTagsInput) *EmrAddTagsFuture

	CancelSteps(ctx workflow.Context, input *emr.CancelStepsInput) (*emr.CancelStepsOutput, error)
	CancelStepsAsync(ctx workflow.Context, input *emr.CancelStepsInput) *EmrCancelStepsFuture

	CreateSecurityConfiguration(ctx workflow.Context, input *emr.CreateSecurityConfigurationInput) (*emr.CreateSecurityConfigurationOutput, error)
	CreateSecurityConfigurationAsync(ctx workflow.Context, input *emr.CreateSecurityConfigurationInput) *EmrCreateSecurityConfigurationFuture

	DeleteSecurityConfiguration(ctx workflow.Context, input *emr.DeleteSecurityConfigurationInput) (*emr.DeleteSecurityConfigurationOutput, error)
	DeleteSecurityConfigurationAsync(ctx workflow.Context, input *emr.DeleteSecurityConfigurationInput) *EmrDeleteSecurityConfigurationFuture

	DescribeCluster(ctx workflow.Context, input *emr.DescribeClusterInput) (*emr.DescribeClusterOutput, error)
	DescribeClusterAsync(ctx workflow.Context, input *emr.DescribeClusterInput) *EmrDescribeClusterFuture

	DescribeJobFlows(ctx workflow.Context, input *emr.DescribeJobFlowsInput) (*emr.DescribeJobFlowsOutput, error)
	DescribeJobFlowsAsync(ctx workflow.Context, input *emr.DescribeJobFlowsInput) *EmrDescribeJobFlowsFuture

	DescribeNotebookExecution(ctx workflow.Context, input *emr.DescribeNotebookExecutionInput) (*emr.DescribeNotebookExecutionOutput, error)
	DescribeNotebookExecutionAsync(ctx workflow.Context, input *emr.DescribeNotebookExecutionInput) *EmrDescribeNotebookExecutionFuture

	DescribeSecurityConfiguration(ctx workflow.Context, input *emr.DescribeSecurityConfigurationInput) (*emr.DescribeSecurityConfigurationOutput, error)
	DescribeSecurityConfigurationAsync(ctx workflow.Context, input *emr.DescribeSecurityConfigurationInput) *EmrDescribeSecurityConfigurationFuture

	DescribeStep(ctx workflow.Context, input *emr.DescribeStepInput) (*emr.DescribeStepOutput, error)
	DescribeStepAsync(ctx workflow.Context, input *emr.DescribeStepInput) *EmrDescribeStepFuture

	GetBlockPublicAccessConfiguration(ctx workflow.Context, input *emr.GetBlockPublicAccessConfigurationInput) (*emr.GetBlockPublicAccessConfigurationOutput, error)
	GetBlockPublicAccessConfigurationAsync(ctx workflow.Context, input *emr.GetBlockPublicAccessConfigurationInput) *EmrGetBlockPublicAccessConfigurationFuture

	GetManagedScalingPolicy(ctx workflow.Context, input *emr.GetManagedScalingPolicyInput) (*emr.GetManagedScalingPolicyOutput, error)
	GetManagedScalingPolicyAsync(ctx workflow.Context, input *emr.GetManagedScalingPolicyInput) *EmrGetManagedScalingPolicyFuture

	ListBootstrapActions(ctx workflow.Context, input *emr.ListBootstrapActionsInput) (*emr.ListBootstrapActionsOutput, error)
	ListBootstrapActionsAsync(ctx workflow.Context, input *emr.ListBootstrapActionsInput) *EmrListBootstrapActionsFuture

	ListClusters(ctx workflow.Context, input *emr.ListClustersInput) (*emr.ListClustersOutput, error)
	ListClustersAsync(ctx workflow.Context, input *emr.ListClustersInput) *EmrListClustersFuture

	ListInstanceFleets(ctx workflow.Context, input *emr.ListInstanceFleetsInput) (*emr.ListInstanceFleetsOutput, error)
	ListInstanceFleetsAsync(ctx workflow.Context, input *emr.ListInstanceFleetsInput) *EmrListInstanceFleetsFuture

	ListInstanceGroups(ctx workflow.Context, input *emr.ListInstanceGroupsInput) (*emr.ListInstanceGroupsOutput, error)
	ListInstanceGroupsAsync(ctx workflow.Context, input *emr.ListInstanceGroupsInput) *EmrListInstanceGroupsFuture

	ListInstances(ctx workflow.Context, input *emr.ListInstancesInput) (*emr.ListInstancesOutput, error)
	ListInstancesAsync(ctx workflow.Context, input *emr.ListInstancesInput) *EmrListInstancesFuture

	ListNotebookExecutions(ctx workflow.Context, input *emr.ListNotebookExecutionsInput) (*emr.ListNotebookExecutionsOutput, error)
	ListNotebookExecutionsAsync(ctx workflow.Context, input *emr.ListNotebookExecutionsInput) *EmrListNotebookExecutionsFuture

	ListSecurityConfigurations(ctx workflow.Context, input *emr.ListSecurityConfigurationsInput) (*emr.ListSecurityConfigurationsOutput, error)
	ListSecurityConfigurationsAsync(ctx workflow.Context, input *emr.ListSecurityConfigurationsInput) *EmrListSecurityConfigurationsFuture

	ListSteps(ctx workflow.Context, input *emr.ListStepsInput) (*emr.ListStepsOutput, error)
	ListStepsAsync(ctx workflow.Context, input *emr.ListStepsInput) *EmrListStepsFuture

	ModifyCluster(ctx workflow.Context, input *emr.ModifyClusterInput) (*emr.ModifyClusterOutput, error)
	ModifyClusterAsync(ctx workflow.Context, input *emr.ModifyClusterInput) *EmrModifyClusterFuture

	ModifyInstanceFleet(ctx workflow.Context, input *emr.ModifyInstanceFleetInput) (*emr.ModifyInstanceFleetOutput, error)
	ModifyInstanceFleetAsync(ctx workflow.Context, input *emr.ModifyInstanceFleetInput) *EmrModifyInstanceFleetFuture

	ModifyInstanceGroups(ctx workflow.Context, input *emr.ModifyInstanceGroupsInput) (*emr.ModifyInstanceGroupsOutput, error)
	ModifyInstanceGroupsAsync(ctx workflow.Context, input *emr.ModifyInstanceGroupsInput) *EmrModifyInstanceGroupsFuture

	PutAutoScalingPolicy(ctx workflow.Context, input *emr.PutAutoScalingPolicyInput) (*emr.PutAutoScalingPolicyOutput, error)
	PutAutoScalingPolicyAsync(ctx workflow.Context, input *emr.PutAutoScalingPolicyInput) *EmrPutAutoScalingPolicyFuture

	PutBlockPublicAccessConfiguration(ctx workflow.Context, input *emr.PutBlockPublicAccessConfigurationInput) (*emr.PutBlockPublicAccessConfigurationOutput, error)
	PutBlockPublicAccessConfigurationAsync(ctx workflow.Context, input *emr.PutBlockPublicAccessConfigurationInput) *EmrPutBlockPublicAccessConfigurationFuture

	PutManagedScalingPolicy(ctx workflow.Context, input *emr.PutManagedScalingPolicyInput) (*emr.PutManagedScalingPolicyOutput, error)
	PutManagedScalingPolicyAsync(ctx workflow.Context, input *emr.PutManagedScalingPolicyInput) *EmrPutManagedScalingPolicyFuture

	RemoveAutoScalingPolicy(ctx workflow.Context, input *emr.RemoveAutoScalingPolicyInput) (*emr.RemoveAutoScalingPolicyOutput, error)
	RemoveAutoScalingPolicyAsync(ctx workflow.Context, input *emr.RemoveAutoScalingPolicyInput) *EmrRemoveAutoScalingPolicyFuture

	RemoveManagedScalingPolicy(ctx workflow.Context, input *emr.RemoveManagedScalingPolicyInput) (*emr.RemoveManagedScalingPolicyOutput, error)
	RemoveManagedScalingPolicyAsync(ctx workflow.Context, input *emr.RemoveManagedScalingPolicyInput) *EmrRemoveManagedScalingPolicyFuture

	RemoveTags(ctx workflow.Context, input *emr.RemoveTagsInput) (*emr.RemoveTagsOutput, error)
	RemoveTagsAsync(ctx workflow.Context, input *emr.RemoveTagsInput) *EmrRemoveTagsFuture

	RunJobFlow(ctx workflow.Context, input *emr.RunJobFlowInput) (*emr.RunJobFlowOutput, error)
	RunJobFlowAsync(ctx workflow.Context, input *emr.RunJobFlowInput) *EmrRunJobFlowFuture

	SetTerminationProtection(ctx workflow.Context, input *emr.SetTerminationProtectionInput) (*emr.SetTerminationProtectionOutput, error)
	SetTerminationProtectionAsync(ctx workflow.Context, input *emr.SetTerminationProtectionInput) *EmrSetTerminationProtectionFuture

	SetVisibleToAllUsers(ctx workflow.Context, input *emr.SetVisibleToAllUsersInput) (*emr.SetVisibleToAllUsersOutput, error)
	SetVisibleToAllUsersAsync(ctx workflow.Context, input *emr.SetVisibleToAllUsersInput) *EmrSetVisibleToAllUsersFuture

	StartNotebookExecution(ctx workflow.Context, input *emr.StartNotebookExecutionInput) (*emr.StartNotebookExecutionOutput, error)
	StartNotebookExecutionAsync(ctx workflow.Context, input *emr.StartNotebookExecutionInput) *EmrStartNotebookExecutionFuture

	StopNotebookExecution(ctx workflow.Context, input *emr.StopNotebookExecutionInput) (*emr.StopNotebookExecutionOutput, error)
	StopNotebookExecutionAsync(ctx workflow.Context, input *emr.StopNotebookExecutionInput) *EmrStopNotebookExecutionFuture

	TerminateJobFlows(ctx workflow.Context, input *emr.TerminateJobFlowsInput) (*emr.TerminateJobFlowsOutput, error)
	TerminateJobFlowsAsync(ctx workflow.Context, input *emr.TerminateJobFlowsInput) *EmrTerminateJobFlowsFuture

	WaitUntilClusterRunning(ctx workflow.Context, input *emr.DescribeClusterInput) error
	WaitUntilClusterRunningAsync(ctx workflow.Context, input *emr.DescribeClusterInput) workflow.Future

	WaitUntilClusterTerminated(ctx workflow.Context, input *emr.DescribeClusterInput) error
	WaitUntilClusterTerminatedAsync(ctx workflow.Context, input *emr.DescribeClusterInput) workflow.Future

	WaitUntilStepComplete(ctx workflow.Context, input *emr.DescribeStepInput) error
	WaitUntilStepCompleteAsync(ctx workflow.Context, input *emr.DescribeStepInput) workflow.Future
}

type EMRStub struct{}

func NewEMRStub() EMRClient {
	return &EMRStub{}
}

type EmrAddInstanceFleetFuture struct {
	Future workflow.Future
}

func (r *EmrAddInstanceFleetFuture) Get(ctx workflow.Context) (*emr.AddInstanceFleetOutput, error) {
	var output emr.AddInstanceFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrAddInstanceGroupsFuture struct {
	Future workflow.Future
}

func (r *EmrAddInstanceGroupsFuture) Get(ctx workflow.Context) (*emr.AddInstanceGroupsOutput, error) {
	var output emr.AddInstanceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrAddJobFlowStepsFuture struct {
	Future workflow.Future
}

func (r *EmrAddJobFlowStepsFuture) Get(ctx workflow.Context) (*emr.AddJobFlowStepsOutput, error) {
	var output emr.AddJobFlowStepsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrAddTagsFuture struct {
	Future workflow.Future
}

func (r *EmrAddTagsFuture) Get(ctx workflow.Context) (*emr.AddTagsOutput, error) {
	var output emr.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrCancelStepsFuture struct {
	Future workflow.Future
}

func (r *EmrCancelStepsFuture) Get(ctx workflow.Context) (*emr.CancelStepsOutput, error) {
	var output emr.CancelStepsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrCreateSecurityConfigurationFuture struct {
	Future workflow.Future
}

func (r *EmrCreateSecurityConfigurationFuture) Get(ctx workflow.Context) (*emr.CreateSecurityConfigurationOutput, error) {
	var output emr.CreateSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrDeleteSecurityConfigurationFuture struct {
	Future workflow.Future
}

func (r *EmrDeleteSecurityConfigurationFuture) Get(ctx workflow.Context) (*emr.DeleteSecurityConfigurationOutput, error) {
	var output emr.DeleteSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrDescribeClusterFuture struct {
	Future workflow.Future
}

func (r *EmrDescribeClusterFuture) Get(ctx workflow.Context) (*emr.DescribeClusterOutput, error) {
	var output emr.DescribeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrDescribeJobFlowsFuture struct {
	Future workflow.Future
}

func (r *EmrDescribeJobFlowsFuture) Get(ctx workflow.Context) (*emr.DescribeJobFlowsOutput, error) {
	var output emr.DescribeJobFlowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrDescribeNotebookExecutionFuture struct {
	Future workflow.Future
}

func (r *EmrDescribeNotebookExecutionFuture) Get(ctx workflow.Context) (*emr.DescribeNotebookExecutionOutput, error) {
	var output emr.DescribeNotebookExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrDescribeSecurityConfigurationFuture struct {
	Future workflow.Future
}

func (r *EmrDescribeSecurityConfigurationFuture) Get(ctx workflow.Context) (*emr.DescribeSecurityConfigurationOutput, error) {
	var output emr.DescribeSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrDescribeStepFuture struct {
	Future workflow.Future
}

func (r *EmrDescribeStepFuture) Get(ctx workflow.Context) (*emr.DescribeStepOutput, error) {
	var output emr.DescribeStepOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrGetBlockPublicAccessConfigurationFuture struct {
	Future workflow.Future
}

func (r *EmrGetBlockPublicAccessConfigurationFuture) Get(ctx workflow.Context) (*emr.GetBlockPublicAccessConfigurationOutput, error) {
	var output emr.GetBlockPublicAccessConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrGetManagedScalingPolicyFuture struct {
	Future workflow.Future
}

func (r *EmrGetManagedScalingPolicyFuture) Get(ctx workflow.Context) (*emr.GetManagedScalingPolicyOutput, error) {
	var output emr.GetManagedScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrListBootstrapActionsFuture struct {
	Future workflow.Future
}

func (r *EmrListBootstrapActionsFuture) Get(ctx workflow.Context) (*emr.ListBootstrapActionsOutput, error) {
	var output emr.ListBootstrapActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrListClustersFuture struct {
	Future workflow.Future
}

func (r *EmrListClustersFuture) Get(ctx workflow.Context) (*emr.ListClustersOutput, error) {
	var output emr.ListClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrListInstanceFleetsFuture struct {
	Future workflow.Future
}

func (r *EmrListInstanceFleetsFuture) Get(ctx workflow.Context) (*emr.ListInstanceFleetsOutput, error) {
	var output emr.ListInstanceFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrListInstanceGroupsFuture struct {
	Future workflow.Future
}

func (r *EmrListInstanceGroupsFuture) Get(ctx workflow.Context) (*emr.ListInstanceGroupsOutput, error) {
	var output emr.ListInstanceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrListInstancesFuture struct {
	Future workflow.Future
}

func (r *EmrListInstancesFuture) Get(ctx workflow.Context) (*emr.ListInstancesOutput, error) {
	var output emr.ListInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrListNotebookExecutionsFuture struct {
	Future workflow.Future
}

func (r *EmrListNotebookExecutionsFuture) Get(ctx workflow.Context) (*emr.ListNotebookExecutionsOutput, error) {
	var output emr.ListNotebookExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrListSecurityConfigurationsFuture struct {
	Future workflow.Future
}

func (r *EmrListSecurityConfigurationsFuture) Get(ctx workflow.Context) (*emr.ListSecurityConfigurationsOutput, error) {
	var output emr.ListSecurityConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrListStepsFuture struct {
	Future workflow.Future
}

func (r *EmrListStepsFuture) Get(ctx workflow.Context) (*emr.ListStepsOutput, error) {
	var output emr.ListStepsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrModifyClusterFuture struct {
	Future workflow.Future
}

func (r *EmrModifyClusterFuture) Get(ctx workflow.Context) (*emr.ModifyClusterOutput, error) {
	var output emr.ModifyClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrModifyInstanceFleetFuture struct {
	Future workflow.Future
}

func (r *EmrModifyInstanceFleetFuture) Get(ctx workflow.Context) (*emr.ModifyInstanceFleetOutput, error) {
	var output emr.ModifyInstanceFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrModifyInstanceGroupsFuture struct {
	Future workflow.Future
}

func (r *EmrModifyInstanceGroupsFuture) Get(ctx workflow.Context) (*emr.ModifyInstanceGroupsOutput, error) {
	var output emr.ModifyInstanceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrPutAutoScalingPolicyFuture struct {
	Future workflow.Future
}

func (r *EmrPutAutoScalingPolicyFuture) Get(ctx workflow.Context) (*emr.PutAutoScalingPolicyOutput, error) {
	var output emr.PutAutoScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrPutBlockPublicAccessConfigurationFuture struct {
	Future workflow.Future
}

func (r *EmrPutBlockPublicAccessConfigurationFuture) Get(ctx workflow.Context) (*emr.PutBlockPublicAccessConfigurationOutput, error) {
	var output emr.PutBlockPublicAccessConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrPutManagedScalingPolicyFuture struct {
	Future workflow.Future
}

func (r *EmrPutManagedScalingPolicyFuture) Get(ctx workflow.Context) (*emr.PutManagedScalingPolicyOutput, error) {
	var output emr.PutManagedScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrRemoveAutoScalingPolicyFuture struct {
	Future workflow.Future
}

func (r *EmrRemoveAutoScalingPolicyFuture) Get(ctx workflow.Context) (*emr.RemoveAutoScalingPolicyOutput, error) {
	var output emr.RemoveAutoScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrRemoveManagedScalingPolicyFuture struct {
	Future workflow.Future
}

func (r *EmrRemoveManagedScalingPolicyFuture) Get(ctx workflow.Context) (*emr.RemoveManagedScalingPolicyOutput, error) {
	var output emr.RemoveManagedScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrRemoveTagsFuture struct {
	Future workflow.Future
}

func (r *EmrRemoveTagsFuture) Get(ctx workflow.Context) (*emr.RemoveTagsOutput, error) {
	var output emr.RemoveTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrRunJobFlowFuture struct {
	Future workflow.Future
}

func (r *EmrRunJobFlowFuture) Get(ctx workflow.Context) (*emr.RunJobFlowOutput, error) {
	var output emr.RunJobFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrSetTerminationProtectionFuture struct {
	Future workflow.Future
}

func (r *EmrSetTerminationProtectionFuture) Get(ctx workflow.Context) (*emr.SetTerminationProtectionOutput, error) {
	var output emr.SetTerminationProtectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrSetVisibleToAllUsersFuture struct {
	Future workflow.Future
}

func (r *EmrSetVisibleToAllUsersFuture) Get(ctx workflow.Context) (*emr.SetVisibleToAllUsersOutput, error) {
	var output emr.SetVisibleToAllUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrStartNotebookExecutionFuture struct {
	Future workflow.Future
}

func (r *EmrStartNotebookExecutionFuture) Get(ctx workflow.Context) (*emr.StartNotebookExecutionOutput, error) {
	var output emr.StartNotebookExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrStopNotebookExecutionFuture struct {
	Future workflow.Future
}

func (r *EmrStopNotebookExecutionFuture) Get(ctx workflow.Context) (*emr.StopNotebookExecutionOutput, error) {
	var output emr.StopNotebookExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EmrTerminateJobFlowsFuture struct {
	Future workflow.Future
}

func (r *EmrTerminateJobFlowsFuture) Get(ctx workflow.Context) (*emr.TerminateJobFlowsOutput, error) {
	var output emr.TerminateJobFlowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) AddInstanceFleet(ctx workflow.Context, input *emr.AddInstanceFleetInput) (*emr.AddInstanceFleetOutput, error) {
	var output emr.AddInstanceFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.AddInstanceFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) AddInstanceFleetAsync(ctx workflow.Context, input *emr.AddInstanceFleetInput) *EmrAddInstanceFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.AddInstanceFleet", input)
	return &EmrAddInstanceFleetFuture{Future: future}
}

func (a *EMRStub) AddInstanceGroups(ctx workflow.Context, input *emr.AddInstanceGroupsInput) (*emr.AddInstanceGroupsOutput, error) {
	var output emr.AddInstanceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.AddInstanceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) AddInstanceGroupsAsync(ctx workflow.Context, input *emr.AddInstanceGroupsInput) *EmrAddInstanceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.AddInstanceGroups", input)
	return &EmrAddInstanceGroupsFuture{Future: future}
}

func (a *EMRStub) AddJobFlowSteps(ctx workflow.Context, input *emr.AddJobFlowStepsInput) (*emr.AddJobFlowStepsOutput, error) {
	var output emr.AddJobFlowStepsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.AddJobFlowSteps", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) AddJobFlowStepsAsync(ctx workflow.Context, input *emr.AddJobFlowStepsInput) *EmrAddJobFlowStepsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.AddJobFlowSteps", input)
	return &EmrAddJobFlowStepsFuture{Future: future}
}

func (a *EMRStub) AddTags(ctx workflow.Context, input *emr.AddTagsInput) (*emr.AddTagsOutput, error) {
	var output emr.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) AddTagsAsync(ctx workflow.Context, input *emr.AddTagsInput) *EmrAddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.AddTags", input)
	return &EmrAddTagsFuture{Future: future}
}

func (a *EMRStub) CancelSteps(ctx workflow.Context, input *emr.CancelStepsInput) (*emr.CancelStepsOutput, error) {
	var output emr.CancelStepsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.CancelSteps", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) CancelStepsAsync(ctx workflow.Context, input *emr.CancelStepsInput) *EmrCancelStepsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.CancelSteps", input)
	return &EmrCancelStepsFuture{Future: future}
}

func (a *EMRStub) CreateSecurityConfiguration(ctx workflow.Context, input *emr.CreateSecurityConfigurationInput) (*emr.CreateSecurityConfigurationOutput, error) {
	var output emr.CreateSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.CreateSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) CreateSecurityConfigurationAsync(ctx workflow.Context, input *emr.CreateSecurityConfigurationInput) *EmrCreateSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.CreateSecurityConfiguration", input)
	return &EmrCreateSecurityConfigurationFuture{Future: future}
}

func (a *EMRStub) DeleteSecurityConfiguration(ctx workflow.Context, input *emr.DeleteSecurityConfigurationInput) (*emr.DeleteSecurityConfigurationOutput, error) {
	var output emr.DeleteSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.DeleteSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) DeleteSecurityConfigurationAsync(ctx workflow.Context, input *emr.DeleteSecurityConfigurationInput) *EmrDeleteSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.DeleteSecurityConfiguration", input)
	return &EmrDeleteSecurityConfigurationFuture{Future: future}
}

func (a *EMRStub) DescribeCluster(ctx workflow.Context, input *emr.DescribeClusterInput) (*emr.DescribeClusterOutput, error) {
	var output emr.DescribeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.DescribeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) DescribeClusterAsync(ctx workflow.Context, input *emr.DescribeClusterInput) *EmrDescribeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.DescribeCluster", input)
	return &EmrDescribeClusterFuture{Future: future}
}

func (a *EMRStub) DescribeJobFlows(ctx workflow.Context, input *emr.DescribeJobFlowsInput) (*emr.DescribeJobFlowsOutput, error) {
	var output emr.DescribeJobFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.DescribeJobFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) DescribeJobFlowsAsync(ctx workflow.Context, input *emr.DescribeJobFlowsInput) *EmrDescribeJobFlowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.DescribeJobFlows", input)
	return &EmrDescribeJobFlowsFuture{Future: future}
}

func (a *EMRStub) DescribeNotebookExecution(ctx workflow.Context, input *emr.DescribeNotebookExecutionInput) (*emr.DescribeNotebookExecutionOutput, error) {
	var output emr.DescribeNotebookExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.DescribeNotebookExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) DescribeNotebookExecutionAsync(ctx workflow.Context, input *emr.DescribeNotebookExecutionInput) *EmrDescribeNotebookExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.DescribeNotebookExecution", input)
	return &EmrDescribeNotebookExecutionFuture{Future: future}
}

func (a *EMRStub) DescribeSecurityConfiguration(ctx workflow.Context, input *emr.DescribeSecurityConfigurationInput) (*emr.DescribeSecurityConfigurationOutput, error) {
	var output emr.DescribeSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.DescribeSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) DescribeSecurityConfigurationAsync(ctx workflow.Context, input *emr.DescribeSecurityConfigurationInput) *EmrDescribeSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.DescribeSecurityConfiguration", input)
	return &EmrDescribeSecurityConfigurationFuture{Future: future}
}

func (a *EMRStub) DescribeStep(ctx workflow.Context, input *emr.DescribeStepInput) (*emr.DescribeStepOutput, error) {
	var output emr.DescribeStepOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.DescribeStep", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) DescribeStepAsync(ctx workflow.Context, input *emr.DescribeStepInput) *EmrDescribeStepFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.DescribeStep", input)
	return &EmrDescribeStepFuture{Future: future}
}

func (a *EMRStub) GetBlockPublicAccessConfiguration(ctx workflow.Context, input *emr.GetBlockPublicAccessConfigurationInput) (*emr.GetBlockPublicAccessConfigurationOutput, error) {
	var output emr.GetBlockPublicAccessConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.GetBlockPublicAccessConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) GetBlockPublicAccessConfigurationAsync(ctx workflow.Context, input *emr.GetBlockPublicAccessConfigurationInput) *EmrGetBlockPublicAccessConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.GetBlockPublicAccessConfiguration", input)
	return &EmrGetBlockPublicAccessConfigurationFuture{Future: future}
}

func (a *EMRStub) GetManagedScalingPolicy(ctx workflow.Context, input *emr.GetManagedScalingPolicyInput) (*emr.GetManagedScalingPolicyOutput, error) {
	var output emr.GetManagedScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.GetManagedScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) GetManagedScalingPolicyAsync(ctx workflow.Context, input *emr.GetManagedScalingPolicyInput) *EmrGetManagedScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.GetManagedScalingPolicy", input)
	return &EmrGetManagedScalingPolicyFuture{Future: future}
}

func (a *EMRStub) ListBootstrapActions(ctx workflow.Context, input *emr.ListBootstrapActionsInput) (*emr.ListBootstrapActionsOutput, error) {
	var output emr.ListBootstrapActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListBootstrapActions", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListBootstrapActionsAsync(ctx workflow.Context, input *emr.ListBootstrapActionsInput) *EmrListBootstrapActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListBootstrapActions", input)
	return &EmrListBootstrapActionsFuture{Future: future}
}

func (a *EMRStub) ListClusters(ctx workflow.Context, input *emr.ListClustersInput) (*emr.ListClustersOutput, error) {
	var output emr.ListClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListClustersAsync(ctx workflow.Context, input *emr.ListClustersInput) *EmrListClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListClusters", input)
	return &EmrListClustersFuture{Future: future}
}

func (a *EMRStub) ListInstanceFleets(ctx workflow.Context, input *emr.ListInstanceFleetsInput) (*emr.ListInstanceFleetsOutput, error) {
	var output emr.ListInstanceFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListInstanceFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListInstanceFleetsAsync(ctx workflow.Context, input *emr.ListInstanceFleetsInput) *EmrListInstanceFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListInstanceFleets", input)
	return &EmrListInstanceFleetsFuture{Future: future}
}

func (a *EMRStub) ListInstanceGroups(ctx workflow.Context, input *emr.ListInstanceGroupsInput) (*emr.ListInstanceGroupsOutput, error) {
	var output emr.ListInstanceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListInstanceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListInstanceGroupsAsync(ctx workflow.Context, input *emr.ListInstanceGroupsInput) *EmrListInstanceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListInstanceGroups", input)
	return &EmrListInstanceGroupsFuture{Future: future}
}

func (a *EMRStub) ListInstances(ctx workflow.Context, input *emr.ListInstancesInput) (*emr.ListInstancesOutput, error) {
	var output emr.ListInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListInstancesAsync(ctx workflow.Context, input *emr.ListInstancesInput) *EmrListInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListInstances", input)
	return &EmrListInstancesFuture{Future: future}
}

func (a *EMRStub) ListNotebookExecutions(ctx workflow.Context, input *emr.ListNotebookExecutionsInput) (*emr.ListNotebookExecutionsOutput, error) {
	var output emr.ListNotebookExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListNotebookExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListNotebookExecutionsAsync(ctx workflow.Context, input *emr.ListNotebookExecutionsInput) *EmrListNotebookExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListNotebookExecutions", input)
	return &EmrListNotebookExecutionsFuture{Future: future}
}

func (a *EMRStub) ListSecurityConfigurations(ctx workflow.Context, input *emr.ListSecurityConfigurationsInput) (*emr.ListSecurityConfigurationsOutput, error) {
	var output emr.ListSecurityConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListSecurityConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListSecurityConfigurationsAsync(ctx workflow.Context, input *emr.ListSecurityConfigurationsInput) *EmrListSecurityConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListSecurityConfigurations", input)
	return &EmrListSecurityConfigurationsFuture{Future: future}
}

func (a *EMRStub) ListSteps(ctx workflow.Context, input *emr.ListStepsInput) (*emr.ListStepsOutput, error) {
	var output emr.ListStepsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ListSteps", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ListStepsAsync(ctx workflow.Context, input *emr.ListStepsInput) *EmrListStepsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ListSteps", input)
	return &EmrListStepsFuture{Future: future}
}

func (a *EMRStub) ModifyCluster(ctx workflow.Context, input *emr.ModifyClusterInput) (*emr.ModifyClusterOutput, error) {
	var output emr.ModifyClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ModifyCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ModifyClusterAsync(ctx workflow.Context, input *emr.ModifyClusterInput) *EmrModifyClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ModifyCluster", input)
	return &EmrModifyClusterFuture{Future: future}
}

func (a *EMRStub) ModifyInstanceFleet(ctx workflow.Context, input *emr.ModifyInstanceFleetInput) (*emr.ModifyInstanceFleetOutput, error) {
	var output emr.ModifyInstanceFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ModifyInstanceFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ModifyInstanceFleetAsync(ctx workflow.Context, input *emr.ModifyInstanceFleetInput) *EmrModifyInstanceFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ModifyInstanceFleet", input)
	return &EmrModifyInstanceFleetFuture{Future: future}
}

func (a *EMRStub) ModifyInstanceGroups(ctx workflow.Context, input *emr.ModifyInstanceGroupsInput) (*emr.ModifyInstanceGroupsOutput, error) {
	var output emr.ModifyInstanceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.ModifyInstanceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) ModifyInstanceGroupsAsync(ctx workflow.Context, input *emr.ModifyInstanceGroupsInput) *EmrModifyInstanceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.ModifyInstanceGroups", input)
	return &EmrModifyInstanceGroupsFuture{Future: future}
}

func (a *EMRStub) PutAutoScalingPolicy(ctx workflow.Context, input *emr.PutAutoScalingPolicyInput) (*emr.PutAutoScalingPolicyOutput, error) {
	var output emr.PutAutoScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.PutAutoScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) PutAutoScalingPolicyAsync(ctx workflow.Context, input *emr.PutAutoScalingPolicyInput) *EmrPutAutoScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.PutAutoScalingPolicy", input)
	return &EmrPutAutoScalingPolicyFuture{Future: future}
}

func (a *EMRStub) PutBlockPublicAccessConfiguration(ctx workflow.Context, input *emr.PutBlockPublicAccessConfigurationInput) (*emr.PutBlockPublicAccessConfigurationOutput, error) {
	var output emr.PutBlockPublicAccessConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.PutBlockPublicAccessConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) PutBlockPublicAccessConfigurationAsync(ctx workflow.Context, input *emr.PutBlockPublicAccessConfigurationInput) *EmrPutBlockPublicAccessConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.PutBlockPublicAccessConfiguration", input)
	return &EmrPutBlockPublicAccessConfigurationFuture{Future: future}
}

func (a *EMRStub) PutManagedScalingPolicy(ctx workflow.Context, input *emr.PutManagedScalingPolicyInput) (*emr.PutManagedScalingPolicyOutput, error) {
	var output emr.PutManagedScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.PutManagedScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) PutManagedScalingPolicyAsync(ctx workflow.Context, input *emr.PutManagedScalingPolicyInput) *EmrPutManagedScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.PutManagedScalingPolicy", input)
	return &EmrPutManagedScalingPolicyFuture{Future: future}
}

func (a *EMRStub) RemoveAutoScalingPolicy(ctx workflow.Context, input *emr.RemoveAutoScalingPolicyInput) (*emr.RemoveAutoScalingPolicyOutput, error) {
	var output emr.RemoveAutoScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.RemoveAutoScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) RemoveAutoScalingPolicyAsync(ctx workflow.Context, input *emr.RemoveAutoScalingPolicyInput) *EmrRemoveAutoScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.RemoveAutoScalingPolicy", input)
	return &EmrRemoveAutoScalingPolicyFuture{Future: future}
}

func (a *EMRStub) RemoveManagedScalingPolicy(ctx workflow.Context, input *emr.RemoveManagedScalingPolicyInput) (*emr.RemoveManagedScalingPolicyOutput, error) {
	var output emr.RemoveManagedScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.RemoveManagedScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) RemoveManagedScalingPolicyAsync(ctx workflow.Context, input *emr.RemoveManagedScalingPolicyInput) *EmrRemoveManagedScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.RemoveManagedScalingPolicy", input)
	return &EmrRemoveManagedScalingPolicyFuture{Future: future}
}

func (a *EMRStub) RemoveTags(ctx workflow.Context, input *emr.RemoveTagsInput) (*emr.RemoveTagsOutput, error) {
	var output emr.RemoveTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.RemoveTags", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) RemoveTagsAsync(ctx workflow.Context, input *emr.RemoveTagsInput) *EmrRemoveTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.RemoveTags", input)
	return &EmrRemoveTagsFuture{Future: future}
}

func (a *EMRStub) RunJobFlow(ctx workflow.Context, input *emr.RunJobFlowInput) (*emr.RunJobFlowOutput, error) {
	var output emr.RunJobFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.RunJobFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) RunJobFlowAsync(ctx workflow.Context, input *emr.RunJobFlowInput) *EmrRunJobFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.RunJobFlow", input)
	return &EmrRunJobFlowFuture{Future: future}
}

func (a *EMRStub) SetTerminationProtection(ctx workflow.Context, input *emr.SetTerminationProtectionInput) (*emr.SetTerminationProtectionOutput, error) {
	var output emr.SetTerminationProtectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.SetTerminationProtection", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) SetTerminationProtectionAsync(ctx workflow.Context, input *emr.SetTerminationProtectionInput) *EmrSetTerminationProtectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.SetTerminationProtection", input)
	return &EmrSetTerminationProtectionFuture{Future: future}
}

func (a *EMRStub) SetVisibleToAllUsers(ctx workflow.Context, input *emr.SetVisibleToAllUsersInput) (*emr.SetVisibleToAllUsersOutput, error) {
	var output emr.SetVisibleToAllUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.SetVisibleToAllUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) SetVisibleToAllUsersAsync(ctx workflow.Context, input *emr.SetVisibleToAllUsersInput) *EmrSetVisibleToAllUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.SetVisibleToAllUsers", input)
	return &EmrSetVisibleToAllUsersFuture{Future: future}
}

func (a *EMRStub) StartNotebookExecution(ctx workflow.Context, input *emr.StartNotebookExecutionInput) (*emr.StartNotebookExecutionOutput, error) {
	var output emr.StartNotebookExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.StartNotebookExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) StartNotebookExecutionAsync(ctx workflow.Context, input *emr.StartNotebookExecutionInput) *EmrStartNotebookExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.StartNotebookExecution", input)
	return &EmrStartNotebookExecutionFuture{Future: future}
}

func (a *EMRStub) StopNotebookExecution(ctx workflow.Context, input *emr.StopNotebookExecutionInput) (*emr.StopNotebookExecutionOutput, error) {
	var output emr.StopNotebookExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.StopNotebookExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) StopNotebookExecutionAsync(ctx workflow.Context, input *emr.StopNotebookExecutionInput) *EmrStopNotebookExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.StopNotebookExecution", input)
	return &EmrStopNotebookExecutionFuture{Future: future}
}

func (a *EMRStub) TerminateJobFlows(ctx workflow.Context, input *emr.TerminateJobFlowsInput) (*emr.TerminateJobFlowsOutput, error) {
	var output emr.TerminateJobFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws.emr.TerminateJobFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *EMRStub) TerminateJobFlowsAsync(ctx workflow.Context, input *emr.TerminateJobFlowsInput) *EmrTerminateJobFlowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.emr.TerminateJobFlows", input)
	return &EmrTerminateJobFlowsFuture{Future: future}
}

func (a *EMRStub) WaitUntilClusterRunning(ctx workflow.Context, input *emr.DescribeClusterInput) error {
	return workflow.ExecuteActivity(ctx, "aws.emr.WaitUntilClusterRunning", input).Get(ctx, nil)
}

func (a *EMRStub) WaitUntilClusterRunningAsync(ctx workflow.Context, input *emr.DescribeClusterInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.emr.WaitUntilClusterRunning", input)
}

func (a *EMRStub) WaitUntilClusterTerminated(ctx workflow.Context, input *emr.DescribeClusterInput) error {
	return workflow.ExecuteActivity(ctx, "aws.emr.WaitUntilClusterTerminated", input).Get(ctx, nil)
}

func (a *EMRStub) WaitUntilClusterTerminatedAsync(ctx workflow.Context, input *emr.DescribeClusterInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.emr.WaitUntilClusterTerminated", input)
}

func (a *EMRStub) WaitUntilStepComplete(ctx workflow.Context, input *emr.DescribeStepInput) error {
	return workflow.ExecuteActivity(ctx, "aws.emr.WaitUntilStepComplete", input).Get(ctx, nil)
}

func (a *EMRStub) WaitUntilStepCompleteAsync(ctx workflow.Context, input *emr.DescribeStepInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.emr.WaitUntilStepComplete", input)
}
