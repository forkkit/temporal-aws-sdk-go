// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/mediapackage"
	"go.temporal.io/sdk/workflow"
)

type MediaPackageClient interface {
	ConfigureLogs(ctx workflow.Context, input *mediapackage.ConfigureLogsInput) (*mediapackage.ConfigureLogsOutput, error)
	ConfigureLogsAsync(ctx workflow.Context, input *mediapackage.ConfigureLogsInput) *MediapackageConfigureLogsFuture

	CreateChannel(ctx workflow.Context, input *mediapackage.CreateChannelInput) (*mediapackage.CreateChannelOutput, error)
	CreateChannelAsync(ctx workflow.Context, input *mediapackage.CreateChannelInput) *MediapackageCreateChannelFuture

	CreateHarvestJob(ctx workflow.Context, input *mediapackage.CreateHarvestJobInput) (*mediapackage.CreateHarvestJobOutput, error)
	CreateHarvestJobAsync(ctx workflow.Context, input *mediapackage.CreateHarvestJobInput) *MediapackageCreateHarvestJobFuture

	CreateOriginEndpoint(ctx workflow.Context, input *mediapackage.CreateOriginEndpointInput) (*mediapackage.CreateOriginEndpointOutput, error)
	CreateOriginEndpointAsync(ctx workflow.Context, input *mediapackage.CreateOriginEndpointInput) *MediapackageCreateOriginEndpointFuture

	DeleteChannel(ctx workflow.Context, input *mediapackage.DeleteChannelInput) (*mediapackage.DeleteChannelOutput, error)
	DeleteChannelAsync(ctx workflow.Context, input *mediapackage.DeleteChannelInput) *MediapackageDeleteChannelFuture

	DeleteOriginEndpoint(ctx workflow.Context, input *mediapackage.DeleteOriginEndpointInput) (*mediapackage.DeleteOriginEndpointOutput, error)
	DeleteOriginEndpointAsync(ctx workflow.Context, input *mediapackage.DeleteOriginEndpointInput) *MediapackageDeleteOriginEndpointFuture

	DescribeChannel(ctx workflow.Context, input *mediapackage.DescribeChannelInput) (*mediapackage.DescribeChannelOutput, error)
	DescribeChannelAsync(ctx workflow.Context, input *mediapackage.DescribeChannelInput) *MediapackageDescribeChannelFuture

	DescribeHarvestJob(ctx workflow.Context, input *mediapackage.DescribeHarvestJobInput) (*mediapackage.DescribeHarvestJobOutput, error)
	DescribeHarvestJobAsync(ctx workflow.Context, input *mediapackage.DescribeHarvestJobInput) *MediapackageDescribeHarvestJobFuture

	DescribeOriginEndpoint(ctx workflow.Context, input *mediapackage.DescribeOriginEndpointInput) (*mediapackage.DescribeOriginEndpointOutput, error)
	DescribeOriginEndpointAsync(ctx workflow.Context, input *mediapackage.DescribeOriginEndpointInput) *MediapackageDescribeOriginEndpointFuture

	ListChannels(ctx workflow.Context, input *mediapackage.ListChannelsInput) (*mediapackage.ListChannelsOutput, error)
	ListChannelsAsync(ctx workflow.Context, input *mediapackage.ListChannelsInput) *MediapackageListChannelsFuture

	ListHarvestJobs(ctx workflow.Context, input *mediapackage.ListHarvestJobsInput) (*mediapackage.ListHarvestJobsOutput, error)
	ListHarvestJobsAsync(ctx workflow.Context, input *mediapackage.ListHarvestJobsInput) *MediapackageListHarvestJobsFuture

	ListOriginEndpoints(ctx workflow.Context, input *mediapackage.ListOriginEndpointsInput) (*mediapackage.ListOriginEndpointsOutput, error)
	ListOriginEndpointsAsync(ctx workflow.Context, input *mediapackage.ListOriginEndpointsInput) *MediapackageListOriginEndpointsFuture

	ListTagsForResource(ctx workflow.Context, input *mediapackage.ListTagsForResourceInput) (*mediapackage.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *mediapackage.ListTagsForResourceInput) *MediapackageListTagsForResourceFuture

	RotateChannelCredentials(ctx workflow.Context, input *mediapackage.RotateChannelCredentialsInput) (*mediapackage.RotateChannelCredentialsOutput, error)
	RotateChannelCredentialsAsync(ctx workflow.Context, input *mediapackage.RotateChannelCredentialsInput) *MediapackageRotateChannelCredentialsFuture

	RotateIngestEndpointCredentials(ctx workflow.Context, input *mediapackage.RotateIngestEndpointCredentialsInput) (*mediapackage.RotateIngestEndpointCredentialsOutput, error)
	RotateIngestEndpointCredentialsAsync(ctx workflow.Context, input *mediapackage.RotateIngestEndpointCredentialsInput) *MediapackageRotateIngestEndpointCredentialsFuture

	TagResource(ctx workflow.Context, input *mediapackage.TagResourceInput) (*mediapackage.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *mediapackage.TagResourceInput) *MediapackageTagResourceFuture

	UntagResource(ctx workflow.Context, input *mediapackage.UntagResourceInput) (*mediapackage.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *mediapackage.UntagResourceInput) *MediapackageUntagResourceFuture

	UpdateChannel(ctx workflow.Context, input *mediapackage.UpdateChannelInput) (*mediapackage.UpdateChannelOutput, error)
	UpdateChannelAsync(ctx workflow.Context, input *mediapackage.UpdateChannelInput) *MediapackageUpdateChannelFuture

	UpdateOriginEndpoint(ctx workflow.Context, input *mediapackage.UpdateOriginEndpointInput) (*mediapackage.UpdateOriginEndpointOutput, error)
	UpdateOriginEndpointAsync(ctx workflow.Context, input *mediapackage.UpdateOriginEndpointInput) *MediapackageUpdateOriginEndpointFuture
}

type MediaPackageStub struct{}

func NewMediaPackageStub() MediaPackageClient {
	return &MediaPackageStub{}
}

type MediapackageConfigureLogsFuture struct {
	Future workflow.Future
}

func (r *MediapackageConfigureLogsFuture) Get(ctx workflow.Context) (*mediapackage.ConfigureLogsOutput, error) {
	var output mediapackage.ConfigureLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageCreateChannelFuture struct {
	Future workflow.Future
}

func (r *MediapackageCreateChannelFuture) Get(ctx workflow.Context) (*mediapackage.CreateChannelOutput, error) {
	var output mediapackage.CreateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageCreateHarvestJobFuture struct {
	Future workflow.Future
}

func (r *MediapackageCreateHarvestJobFuture) Get(ctx workflow.Context) (*mediapackage.CreateHarvestJobOutput, error) {
	var output mediapackage.CreateHarvestJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageCreateOriginEndpointFuture struct {
	Future workflow.Future
}

func (r *MediapackageCreateOriginEndpointFuture) Get(ctx workflow.Context) (*mediapackage.CreateOriginEndpointOutput, error) {
	var output mediapackage.CreateOriginEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageDeleteChannelFuture struct {
	Future workflow.Future
}

func (r *MediapackageDeleteChannelFuture) Get(ctx workflow.Context) (*mediapackage.DeleteChannelOutput, error) {
	var output mediapackage.DeleteChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageDeleteOriginEndpointFuture struct {
	Future workflow.Future
}

func (r *MediapackageDeleteOriginEndpointFuture) Get(ctx workflow.Context) (*mediapackage.DeleteOriginEndpointOutput, error) {
	var output mediapackage.DeleteOriginEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageDescribeChannelFuture struct {
	Future workflow.Future
}

func (r *MediapackageDescribeChannelFuture) Get(ctx workflow.Context) (*mediapackage.DescribeChannelOutput, error) {
	var output mediapackage.DescribeChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageDescribeHarvestJobFuture struct {
	Future workflow.Future
}

func (r *MediapackageDescribeHarvestJobFuture) Get(ctx workflow.Context) (*mediapackage.DescribeHarvestJobOutput, error) {
	var output mediapackage.DescribeHarvestJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageDescribeOriginEndpointFuture struct {
	Future workflow.Future
}

func (r *MediapackageDescribeOriginEndpointFuture) Get(ctx workflow.Context) (*mediapackage.DescribeOriginEndpointOutput, error) {
	var output mediapackage.DescribeOriginEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageListChannelsFuture struct {
	Future workflow.Future
}

func (r *MediapackageListChannelsFuture) Get(ctx workflow.Context) (*mediapackage.ListChannelsOutput, error) {
	var output mediapackage.ListChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageListHarvestJobsFuture struct {
	Future workflow.Future
}

func (r *MediapackageListHarvestJobsFuture) Get(ctx workflow.Context) (*mediapackage.ListHarvestJobsOutput, error) {
	var output mediapackage.ListHarvestJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageListOriginEndpointsFuture struct {
	Future workflow.Future
}

func (r *MediapackageListOriginEndpointsFuture) Get(ctx workflow.Context) (*mediapackage.ListOriginEndpointsOutput, error) {
	var output mediapackage.ListOriginEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *MediapackageListTagsForResourceFuture) Get(ctx workflow.Context) (*mediapackage.ListTagsForResourceOutput, error) {
	var output mediapackage.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageRotateChannelCredentialsFuture struct {
	Future workflow.Future
}

func (r *MediapackageRotateChannelCredentialsFuture) Get(ctx workflow.Context) (*mediapackage.RotateChannelCredentialsOutput, error) {
	var output mediapackage.RotateChannelCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageRotateIngestEndpointCredentialsFuture struct {
	Future workflow.Future
}

func (r *MediapackageRotateIngestEndpointCredentialsFuture) Get(ctx workflow.Context) (*mediapackage.RotateIngestEndpointCredentialsOutput, error) {
	var output mediapackage.RotateIngestEndpointCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageTagResourceFuture struct {
	Future workflow.Future
}

func (r *MediapackageTagResourceFuture) Get(ctx workflow.Context) (*mediapackage.TagResourceOutput, error) {
	var output mediapackage.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageUntagResourceFuture struct {
	Future workflow.Future
}

func (r *MediapackageUntagResourceFuture) Get(ctx workflow.Context) (*mediapackage.UntagResourceOutput, error) {
	var output mediapackage.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageUpdateChannelFuture struct {
	Future workflow.Future
}

func (r *MediapackageUpdateChannelFuture) Get(ctx workflow.Context) (*mediapackage.UpdateChannelOutput, error) {
	var output mediapackage.UpdateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediapackageUpdateOriginEndpointFuture struct {
	Future workflow.Future
}

func (r *MediapackageUpdateOriginEndpointFuture) Get(ctx workflow.Context) (*mediapackage.UpdateOriginEndpointOutput, error) {
	var output mediapackage.UpdateOriginEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) ConfigureLogs(ctx workflow.Context, input *mediapackage.ConfigureLogsInput) (*mediapackage.ConfigureLogsOutput, error) {
	var output mediapackage.ConfigureLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.ConfigureLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) ConfigureLogsAsync(ctx workflow.Context, input *mediapackage.ConfigureLogsInput) *MediapackageConfigureLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.ConfigureLogs", input)
	return &MediapackageConfigureLogsFuture{Future: future}
}

func (a *MediaPackageStub) CreateChannel(ctx workflow.Context, input *mediapackage.CreateChannelInput) (*mediapackage.CreateChannelOutput, error) {
	var output mediapackage.CreateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.CreateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) CreateChannelAsync(ctx workflow.Context, input *mediapackage.CreateChannelInput) *MediapackageCreateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.CreateChannel", input)
	return &MediapackageCreateChannelFuture{Future: future}
}

func (a *MediaPackageStub) CreateHarvestJob(ctx workflow.Context, input *mediapackage.CreateHarvestJobInput) (*mediapackage.CreateHarvestJobOutput, error) {
	var output mediapackage.CreateHarvestJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.CreateHarvestJob", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) CreateHarvestJobAsync(ctx workflow.Context, input *mediapackage.CreateHarvestJobInput) *MediapackageCreateHarvestJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.CreateHarvestJob", input)
	return &MediapackageCreateHarvestJobFuture{Future: future}
}

func (a *MediaPackageStub) CreateOriginEndpoint(ctx workflow.Context, input *mediapackage.CreateOriginEndpointInput) (*mediapackage.CreateOriginEndpointOutput, error) {
	var output mediapackage.CreateOriginEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.CreateOriginEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) CreateOriginEndpointAsync(ctx workflow.Context, input *mediapackage.CreateOriginEndpointInput) *MediapackageCreateOriginEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.CreateOriginEndpoint", input)
	return &MediapackageCreateOriginEndpointFuture{Future: future}
}

func (a *MediaPackageStub) DeleteChannel(ctx workflow.Context, input *mediapackage.DeleteChannelInput) (*mediapackage.DeleteChannelOutput, error) {
	var output mediapackage.DeleteChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.DeleteChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) DeleteChannelAsync(ctx workflow.Context, input *mediapackage.DeleteChannelInput) *MediapackageDeleteChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.DeleteChannel", input)
	return &MediapackageDeleteChannelFuture{Future: future}
}

func (a *MediaPackageStub) DeleteOriginEndpoint(ctx workflow.Context, input *mediapackage.DeleteOriginEndpointInput) (*mediapackage.DeleteOriginEndpointOutput, error) {
	var output mediapackage.DeleteOriginEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.DeleteOriginEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) DeleteOriginEndpointAsync(ctx workflow.Context, input *mediapackage.DeleteOriginEndpointInput) *MediapackageDeleteOriginEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.DeleteOriginEndpoint", input)
	return &MediapackageDeleteOriginEndpointFuture{Future: future}
}

func (a *MediaPackageStub) DescribeChannel(ctx workflow.Context, input *mediapackage.DescribeChannelInput) (*mediapackage.DescribeChannelOutput, error) {
	var output mediapackage.DescribeChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.DescribeChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) DescribeChannelAsync(ctx workflow.Context, input *mediapackage.DescribeChannelInput) *MediapackageDescribeChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.DescribeChannel", input)
	return &MediapackageDescribeChannelFuture{Future: future}
}

func (a *MediaPackageStub) DescribeHarvestJob(ctx workflow.Context, input *mediapackage.DescribeHarvestJobInput) (*mediapackage.DescribeHarvestJobOutput, error) {
	var output mediapackage.DescribeHarvestJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.DescribeHarvestJob", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) DescribeHarvestJobAsync(ctx workflow.Context, input *mediapackage.DescribeHarvestJobInput) *MediapackageDescribeHarvestJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.DescribeHarvestJob", input)
	return &MediapackageDescribeHarvestJobFuture{Future: future}
}

func (a *MediaPackageStub) DescribeOriginEndpoint(ctx workflow.Context, input *mediapackage.DescribeOriginEndpointInput) (*mediapackage.DescribeOriginEndpointOutput, error) {
	var output mediapackage.DescribeOriginEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.DescribeOriginEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) DescribeOriginEndpointAsync(ctx workflow.Context, input *mediapackage.DescribeOriginEndpointInput) *MediapackageDescribeOriginEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.DescribeOriginEndpoint", input)
	return &MediapackageDescribeOriginEndpointFuture{Future: future}
}

func (a *MediaPackageStub) ListChannels(ctx workflow.Context, input *mediapackage.ListChannelsInput) (*mediapackage.ListChannelsOutput, error) {
	var output mediapackage.ListChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.ListChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) ListChannelsAsync(ctx workflow.Context, input *mediapackage.ListChannelsInput) *MediapackageListChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.ListChannels", input)
	return &MediapackageListChannelsFuture{Future: future}
}

func (a *MediaPackageStub) ListHarvestJobs(ctx workflow.Context, input *mediapackage.ListHarvestJobsInput) (*mediapackage.ListHarvestJobsOutput, error) {
	var output mediapackage.ListHarvestJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.ListHarvestJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) ListHarvestJobsAsync(ctx workflow.Context, input *mediapackage.ListHarvestJobsInput) *MediapackageListHarvestJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.ListHarvestJobs", input)
	return &MediapackageListHarvestJobsFuture{Future: future}
}

func (a *MediaPackageStub) ListOriginEndpoints(ctx workflow.Context, input *mediapackage.ListOriginEndpointsInput) (*mediapackage.ListOriginEndpointsOutput, error) {
	var output mediapackage.ListOriginEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.ListOriginEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) ListOriginEndpointsAsync(ctx workflow.Context, input *mediapackage.ListOriginEndpointsInput) *MediapackageListOriginEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.ListOriginEndpoints", input)
	return &MediapackageListOriginEndpointsFuture{Future: future}
}

func (a *MediaPackageStub) ListTagsForResource(ctx workflow.Context, input *mediapackage.ListTagsForResourceInput) (*mediapackage.ListTagsForResourceOutput, error) {
	var output mediapackage.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) ListTagsForResourceAsync(ctx workflow.Context, input *mediapackage.ListTagsForResourceInput) *MediapackageListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.ListTagsForResource", input)
	return &MediapackageListTagsForResourceFuture{Future: future}
}

func (a *MediaPackageStub) RotateChannelCredentials(ctx workflow.Context, input *mediapackage.RotateChannelCredentialsInput) (*mediapackage.RotateChannelCredentialsOutput, error) {
	var output mediapackage.RotateChannelCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.RotateChannelCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) RotateChannelCredentialsAsync(ctx workflow.Context, input *mediapackage.RotateChannelCredentialsInput) *MediapackageRotateChannelCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.RotateChannelCredentials", input)
	return &MediapackageRotateChannelCredentialsFuture{Future: future}
}

func (a *MediaPackageStub) RotateIngestEndpointCredentials(ctx workflow.Context, input *mediapackage.RotateIngestEndpointCredentialsInput) (*mediapackage.RotateIngestEndpointCredentialsOutput, error) {
	var output mediapackage.RotateIngestEndpointCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.RotateIngestEndpointCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) RotateIngestEndpointCredentialsAsync(ctx workflow.Context, input *mediapackage.RotateIngestEndpointCredentialsInput) *MediapackageRotateIngestEndpointCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.RotateIngestEndpointCredentials", input)
	return &MediapackageRotateIngestEndpointCredentialsFuture{Future: future}
}

func (a *MediaPackageStub) TagResource(ctx workflow.Context, input *mediapackage.TagResourceInput) (*mediapackage.TagResourceOutput, error) {
	var output mediapackage.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) TagResourceAsync(ctx workflow.Context, input *mediapackage.TagResourceInput) *MediapackageTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.TagResource", input)
	return &MediapackageTagResourceFuture{Future: future}
}

func (a *MediaPackageStub) UntagResource(ctx workflow.Context, input *mediapackage.UntagResourceInput) (*mediapackage.UntagResourceOutput, error) {
	var output mediapackage.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) UntagResourceAsync(ctx workflow.Context, input *mediapackage.UntagResourceInput) *MediapackageUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.UntagResource", input)
	return &MediapackageUntagResourceFuture{Future: future}
}

func (a *MediaPackageStub) UpdateChannel(ctx workflow.Context, input *mediapackage.UpdateChannelInput) (*mediapackage.UpdateChannelOutput, error) {
	var output mediapackage.UpdateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.UpdateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) UpdateChannelAsync(ctx workflow.Context, input *mediapackage.UpdateChannelInput) *MediapackageUpdateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.UpdateChannel", input)
	return &MediapackageUpdateChannelFuture{Future: future}
}

func (a *MediaPackageStub) UpdateOriginEndpoint(ctx workflow.Context, input *mediapackage.UpdateOriginEndpointInput) (*mediapackage.UpdateOriginEndpointOutput, error) {
	var output mediapackage.UpdateOriginEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediapackage.UpdateOriginEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaPackageStub) UpdateOriginEndpointAsync(ctx workflow.Context, input *mediapackage.UpdateOriginEndpointInput) *MediapackageUpdateOriginEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediapackage.UpdateOriginEndpoint", input)
	return &MediapackageUpdateOriginEndpointFuture{Future: future}
}
