// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/chime"
	"go.temporal.io/sdk/workflow"
)

type ChimeClient interface {
	AssociatePhoneNumberWithUser(ctx workflow.Context, input *chime.AssociatePhoneNumberWithUserInput) (*chime.AssociatePhoneNumberWithUserOutput, error)
	AssociatePhoneNumberWithUserAsync(ctx workflow.Context, input *chime.AssociatePhoneNumberWithUserInput) *ChimeAssociatePhoneNumberWithUserFuture

	AssociatePhoneNumbersWithVoiceConnector(ctx workflow.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorInput) (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput, error)
	AssociatePhoneNumbersWithVoiceConnectorAsync(ctx workflow.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorInput) *ChimeAssociatePhoneNumbersWithVoiceConnectorFuture

	AssociatePhoneNumbersWithVoiceConnectorGroup(ctx workflow.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput) (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error)
	AssociatePhoneNumbersWithVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput) *ChimeAssociatePhoneNumbersWithVoiceConnectorGroupFuture

	AssociateSigninDelegateGroupsWithAccount(ctx workflow.Context, input *chime.AssociateSigninDelegateGroupsWithAccountInput) (*chime.AssociateSigninDelegateGroupsWithAccountOutput, error)
	AssociateSigninDelegateGroupsWithAccountAsync(ctx workflow.Context, input *chime.AssociateSigninDelegateGroupsWithAccountInput) *ChimeAssociateSigninDelegateGroupsWithAccountFuture

	BatchCreateAttendee(ctx workflow.Context, input *chime.BatchCreateAttendeeInput) (*chime.BatchCreateAttendeeOutput, error)
	BatchCreateAttendeeAsync(ctx workflow.Context, input *chime.BatchCreateAttendeeInput) *ChimeBatchCreateAttendeeFuture

	BatchCreateRoomMembership(ctx workflow.Context, input *chime.BatchCreateRoomMembershipInput) (*chime.BatchCreateRoomMembershipOutput, error)
	BatchCreateRoomMembershipAsync(ctx workflow.Context, input *chime.BatchCreateRoomMembershipInput) *ChimeBatchCreateRoomMembershipFuture

	BatchDeletePhoneNumber(ctx workflow.Context, input *chime.BatchDeletePhoneNumberInput) (*chime.BatchDeletePhoneNumberOutput, error)
	BatchDeletePhoneNumberAsync(ctx workflow.Context, input *chime.BatchDeletePhoneNumberInput) *ChimeBatchDeletePhoneNumberFuture

	BatchSuspendUser(ctx workflow.Context, input *chime.BatchSuspendUserInput) (*chime.BatchSuspendUserOutput, error)
	BatchSuspendUserAsync(ctx workflow.Context, input *chime.BatchSuspendUserInput) *ChimeBatchSuspendUserFuture

	BatchUnsuspendUser(ctx workflow.Context, input *chime.BatchUnsuspendUserInput) (*chime.BatchUnsuspendUserOutput, error)
	BatchUnsuspendUserAsync(ctx workflow.Context, input *chime.BatchUnsuspendUserInput) *ChimeBatchUnsuspendUserFuture

	BatchUpdatePhoneNumber(ctx workflow.Context, input *chime.BatchUpdatePhoneNumberInput) (*chime.BatchUpdatePhoneNumberOutput, error)
	BatchUpdatePhoneNumberAsync(ctx workflow.Context, input *chime.BatchUpdatePhoneNumberInput) *ChimeBatchUpdatePhoneNumberFuture

	BatchUpdateUser(ctx workflow.Context, input *chime.BatchUpdateUserInput) (*chime.BatchUpdateUserOutput, error)
	BatchUpdateUserAsync(ctx workflow.Context, input *chime.BatchUpdateUserInput) *ChimeBatchUpdateUserFuture

	CreateAccount(ctx workflow.Context, input *chime.CreateAccountInput) (*chime.CreateAccountOutput, error)
	CreateAccountAsync(ctx workflow.Context, input *chime.CreateAccountInput) *ChimeCreateAccountFuture

	CreateAttendee(ctx workflow.Context, input *chime.CreateAttendeeInput) (*chime.CreateAttendeeOutput, error)
	CreateAttendeeAsync(ctx workflow.Context, input *chime.CreateAttendeeInput) *ChimeCreateAttendeeFuture

	CreateBot(ctx workflow.Context, input *chime.CreateBotInput) (*chime.CreateBotOutput, error)
	CreateBotAsync(ctx workflow.Context, input *chime.CreateBotInput) *ChimeCreateBotFuture

	CreateMeeting(ctx workflow.Context, input *chime.CreateMeetingInput) (*chime.CreateMeetingOutput, error)
	CreateMeetingAsync(ctx workflow.Context, input *chime.CreateMeetingInput) *ChimeCreateMeetingFuture

	CreateMeetingWithAttendees(ctx workflow.Context, input *chime.CreateMeetingWithAttendeesInput) (*chime.CreateMeetingWithAttendeesOutput, error)
	CreateMeetingWithAttendeesAsync(ctx workflow.Context, input *chime.CreateMeetingWithAttendeesInput) *ChimeCreateMeetingWithAttendeesFuture

	CreatePhoneNumberOrder(ctx workflow.Context, input *chime.CreatePhoneNumberOrderInput) (*chime.CreatePhoneNumberOrderOutput, error)
	CreatePhoneNumberOrderAsync(ctx workflow.Context, input *chime.CreatePhoneNumberOrderInput) *ChimeCreatePhoneNumberOrderFuture

	CreateProxySession(ctx workflow.Context, input *chime.CreateProxySessionInput) (*chime.CreateProxySessionOutput, error)
	CreateProxySessionAsync(ctx workflow.Context, input *chime.CreateProxySessionInput) *ChimeCreateProxySessionFuture

	CreateRoom(ctx workflow.Context, input *chime.CreateRoomInput) (*chime.CreateRoomOutput, error)
	CreateRoomAsync(ctx workflow.Context, input *chime.CreateRoomInput) *ChimeCreateRoomFuture

	CreateRoomMembership(ctx workflow.Context, input *chime.CreateRoomMembershipInput) (*chime.CreateRoomMembershipOutput, error)
	CreateRoomMembershipAsync(ctx workflow.Context, input *chime.CreateRoomMembershipInput) *ChimeCreateRoomMembershipFuture

	CreateUser(ctx workflow.Context, input *chime.CreateUserInput) (*chime.CreateUserOutput, error)
	CreateUserAsync(ctx workflow.Context, input *chime.CreateUserInput) *ChimeCreateUserFuture

	CreateVoiceConnector(ctx workflow.Context, input *chime.CreateVoiceConnectorInput) (*chime.CreateVoiceConnectorOutput, error)
	CreateVoiceConnectorAsync(ctx workflow.Context, input *chime.CreateVoiceConnectorInput) *ChimeCreateVoiceConnectorFuture

	CreateVoiceConnectorGroup(ctx workflow.Context, input *chime.CreateVoiceConnectorGroupInput) (*chime.CreateVoiceConnectorGroupOutput, error)
	CreateVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.CreateVoiceConnectorGroupInput) *ChimeCreateVoiceConnectorGroupFuture

	DeleteAccount(ctx workflow.Context, input *chime.DeleteAccountInput) (*chime.DeleteAccountOutput, error)
	DeleteAccountAsync(ctx workflow.Context, input *chime.DeleteAccountInput) *ChimeDeleteAccountFuture

	DeleteAttendee(ctx workflow.Context, input *chime.DeleteAttendeeInput) (*chime.DeleteAttendeeOutput, error)
	DeleteAttendeeAsync(ctx workflow.Context, input *chime.DeleteAttendeeInput) *ChimeDeleteAttendeeFuture

	DeleteEventsConfiguration(ctx workflow.Context, input *chime.DeleteEventsConfigurationInput) (*chime.DeleteEventsConfigurationOutput, error)
	DeleteEventsConfigurationAsync(ctx workflow.Context, input *chime.DeleteEventsConfigurationInput) *ChimeDeleteEventsConfigurationFuture

	DeleteMeeting(ctx workflow.Context, input *chime.DeleteMeetingInput) (*chime.DeleteMeetingOutput, error)
	DeleteMeetingAsync(ctx workflow.Context, input *chime.DeleteMeetingInput) *ChimeDeleteMeetingFuture

	DeletePhoneNumber(ctx workflow.Context, input *chime.DeletePhoneNumberInput) (*chime.DeletePhoneNumberOutput, error)
	DeletePhoneNumberAsync(ctx workflow.Context, input *chime.DeletePhoneNumberInput) *ChimeDeletePhoneNumberFuture

	DeleteProxySession(ctx workflow.Context, input *chime.DeleteProxySessionInput) (*chime.DeleteProxySessionOutput, error)
	DeleteProxySessionAsync(ctx workflow.Context, input *chime.DeleteProxySessionInput) *ChimeDeleteProxySessionFuture

	DeleteRoom(ctx workflow.Context, input *chime.DeleteRoomInput) (*chime.DeleteRoomOutput, error)
	DeleteRoomAsync(ctx workflow.Context, input *chime.DeleteRoomInput) *ChimeDeleteRoomFuture

	DeleteRoomMembership(ctx workflow.Context, input *chime.DeleteRoomMembershipInput) (*chime.DeleteRoomMembershipOutput, error)
	DeleteRoomMembershipAsync(ctx workflow.Context, input *chime.DeleteRoomMembershipInput) *ChimeDeleteRoomMembershipFuture

	DeleteVoiceConnector(ctx workflow.Context, input *chime.DeleteVoiceConnectorInput) (*chime.DeleteVoiceConnectorOutput, error)
	DeleteVoiceConnectorAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorInput) *ChimeDeleteVoiceConnectorFuture

	DeleteVoiceConnectorEmergencyCallingConfiguration(ctx workflow.Context, input *chime.DeleteVoiceConnectorEmergencyCallingConfigurationInput) (*chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error)
	DeleteVoiceConnectorEmergencyCallingConfigurationAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorEmergencyCallingConfigurationInput) *ChimeDeleteVoiceConnectorEmergencyCallingConfigurationFuture

	DeleteVoiceConnectorGroup(ctx workflow.Context, input *chime.DeleteVoiceConnectorGroupInput) (*chime.DeleteVoiceConnectorGroupOutput, error)
	DeleteVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorGroupInput) *ChimeDeleteVoiceConnectorGroupFuture

	DeleteVoiceConnectorOrigination(ctx workflow.Context, input *chime.DeleteVoiceConnectorOriginationInput) (*chime.DeleteVoiceConnectorOriginationOutput, error)
	DeleteVoiceConnectorOriginationAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorOriginationInput) *ChimeDeleteVoiceConnectorOriginationFuture

	DeleteVoiceConnectorProxy(ctx workflow.Context, input *chime.DeleteVoiceConnectorProxyInput) (*chime.DeleteVoiceConnectorProxyOutput, error)
	DeleteVoiceConnectorProxyAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorProxyInput) *ChimeDeleteVoiceConnectorProxyFuture

	DeleteVoiceConnectorStreamingConfiguration(ctx workflow.Context, input *chime.DeleteVoiceConnectorStreamingConfigurationInput) (*chime.DeleteVoiceConnectorStreamingConfigurationOutput, error)
	DeleteVoiceConnectorStreamingConfigurationAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorStreamingConfigurationInput) *ChimeDeleteVoiceConnectorStreamingConfigurationFuture

	DeleteVoiceConnectorTermination(ctx workflow.Context, input *chime.DeleteVoiceConnectorTerminationInput) (*chime.DeleteVoiceConnectorTerminationOutput, error)
	DeleteVoiceConnectorTerminationAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorTerminationInput) *ChimeDeleteVoiceConnectorTerminationFuture

	DeleteVoiceConnectorTerminationCredentials(ctx workflow.Context, input *chime.DeleteVoiceConnectorTerminationCredentialsInput) (*chime.DeleteVoiceConnectorTerminationCredentialsOutput, error)
	DeleteVoiceConnectorTerminationCredentialsAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorTerminationCredentialsInput) *ChimeDeleteVoiceConnectorTerminationCredentialsFuture

	DisassociatePhoneNumberFromUser(ctx workflow.Context, input *chime.DisassociatePhoneNumberFromUserInput) (*chime.DisassociatePhoneNumberFromUserOutput, error)
	DisassociatePhoneNumberFromUserAsync(ctx workflow.Context, input *chime.DisassociatePhoneNumberFromUserInput) *ChimeDisassociatePhoneNumberFromUserFuture

	DisassociatePhoneNumbersFromVoiceConnector(ctx workflow.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorInput) (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput, error)
	DisassociatePhoneNumbersFromVoiceConnectorAsync(ctx workflow.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorInput) *ChimeDisassociatePhoneNumbersFromVoiceConnectorFuture

	DisassociatePhoneNumbersFromVoiceConnectorGroup(ctx workflow.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput) (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error)
	DisassociatePhoneNumbersFromVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput) *ChimeDisassociatePhoneNumbersFromVoiceConnectorGroupFuture

	DisassociateSigninDelegateGroupsFromAccount(ctx workflow.Context, input *chime.DisassociateSigninDelegateGroupsFromAccountInput) (*chime.DisassociateSigninDelegateGroupsFromAccountOutput, error)
	DisassociateSigninDelegateGroupsFromAccountAsync(ctx workflow.Context, input *chime.DisassociateSigninDelegateGroupsFromAccountInput) *ChimeDisassociateSigninDelegateGroupsFromAccountFuture

	GetAccount(ctx workflow.Context, input *chime.GetAccountInput) (*chime.GetAccountOutput, error)
	GetAccountAsync(ctx workflow.Context, input *chime.GetAccountInput) *ChimeGetAccountFuture

	GetAccountSettings(ctx workflow.Context, input *chime.GetAccountSettingsInput) (*chime.GetAccountSettingsOutput, error)
	GetAccountSettingsAsync(ctx workflow.Context, input *chime.GetAccountSettingsInput) *ChimeGetAccountSettingsFuture

	GetAttendee(ctx workflow.Context, input *chime.GetAttendeeInput) (*chime.GetAttendeeOutput, error)
	GetAttendeeAsync(ctx workflow.Context, input *chime.GetAttendeeInput) *ChimeGetAttendeeFuture

	GetBot(ctx workflow.Context, input *chime.GetBotInput) (*chime.GetBotOutput, error)
	GetBotAsync(ctx workflow.Context, input *chime.GetBotInput) *ChimeGetBotFuture

	GetEventsConfiguration(ctx workflow.Context, input *chime.GetEventsConfigurationInput) (*chime.GetEventsConfigurationOutput, error)
	GetEventsConfigurationAsync(ctx workflow.Context, input *chime.GetEventsConfigurationInput) *ChimeGetEventsConfigurationFuture

	GetGlobalSettings(ctx workflow.Context, input *chime.GetGlobalSettingsInput) (*chime.GetGlobalSettingsOutput, error)
	GetGlobalSettingsAsync(ctx workflow.Context, input *chime.GetGlobalSettingsInput) *ChimeGetGlobalSettingsFuture

	GetMeeting(ctx workflow.Context, input *chime.GetMeetingInput) (*chime.GetMeetingOutput, error)
	GetMeetingAsync(ctx workflow.Context, input *chime.GetMeetingInput) *ChimeGetMeetingFuture

	GetPhoneNumber(ctx workflow.Context, input *chime.GetPhoneNumberInput) (*chime.GetPhoneNumberOutput, error)
	GetPhoneNumberAsync(ctx workflow.Context, input *chime.GetPhoneNumberInput) *ChimeGetPhoneNumberFuture

	GetPhoneNumberOrder(ctx workflow.Context, input *chime.GetPhoneNumberOrderInput) (*chime.GetPhoneNumberOrderOutput, error)
	GetPhoneNumberOrderAsync(ctx workflow.Context, input *chime.GetPhoneNumberOrderInput) *ChimeGetPhoneNumberOrderFuture

	GetPhoneNumberSettings(ctx workflow.Context, input *chime.GetPhoneNumberSettingsInput) (*chime.GetPhoneNumberSettingsOutput, error)
	GetPhoneNumberSettingsAsync(ctx workflow.Context, input *chime.GetPhoneNumberSettingsInput) *ChimeGetPhoneNumberSettingsFuture

	GetProxySession(ctx workflow.Context, input *chime.GetProxySessionInput) (*chime.GetProxySessionOutput, error)
	GetProxySessionAsync(ctx workflow.Context, input *chime.GetProxySessionInput) *ChimeGetProxySessionFuture

	GetRetentionSettings(ctx workflow.Context, input *chime.GetRetentionSettingsInput) (*chime.GetRetentionSettingsOutput, error)
	GetRetentionSettingsAsync(ctx workflow.Context, input *chime.GetRetentionSettingsInput) *ChimeGetRetentionSettingsFuture

	GetRoom(ctx workflow.Context, input *chime.GetRoomInput) (*chime.GetRoomOutput, error)
	GetRoomAsync(ctx workflow.Context, input *chime.GetRoomInput) *ChimeGetRoomFuture

	GetUser(ctx workflow.Context, input *chime.GetUserInput) (*chime.GetUserOutput, error)
	GetUserAsync(ctx workflow.Context, input *chime.GetUserInput) *ChimeGetUserFuture

	GetUserSettings(ctx workflow.Context, input *chime.GetUserSettingsInput) (*chime.GetUserSettingsOutput, error)
	GetUserSettingsAsync(ctx workflow.Context, input *chime.GetUserSettingsInput) *ChimeGetUserSettingsFuture

	GetVoiceConnector(ctx workflow.Context, input *chime.GetVoiceConnectorInput) (*chime.GetVoiceConnectorOutput, error)
	GetVoiceConnectorAsync(ctx workflow.Context, input *chime.GetVoiceConnectorInput) *ChimeGetVoiceConnectorFuture

	GetVoiceConnectorEmergencyCallingConfiguration(ctx workflow.Context, input *chime.GetVoiceConnectorEmergencyCallingConfigurationInput) (*chime.GetVoiceConnectorEmergencyCallingConfigurationOutput, error)
	GetVoiceConnectorEmergencyCallingConfigurationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorEmergencyCallingConfigurationInput) *ChimeGetVoiceConnectorEmergencyCallingConfigurationFuture

	GetVoiceConnectorGroup(ctx workflow.Context, input *chime.GetVoiceConnectorGroupInput) (*chime.GetVoiceConnectorGroupOutput, error)
	GetVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.GetVoiceConnectorGroupInput) *ChimeGetVoiceConnectorGroupFuture

	GetVoiceConnectorLoggingConfiguration(ctx workflow.Context, input *chime.GetVoiceConnectorLoggingConfigurationInput) (*chime.GetVoiceConnectorLoggingConfigurationOutput, error)
	GetVoiceConnectorLoggingConfigurationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorLoggingConfigurationInput) *ChimeGetVoiceConnectorLoggingConfigurationFuture

	GetVoiceConnectorOrigination(ctx workflow.Context, input *chime.GetVoiceConnectorOriginationInput) (*chime.GetVoiceConnectorOriginationOutput, error)
	GetVoiceConnectorOriginationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorOriginationInput) *ChimeGetVoiceConnectorOriginationFuture

	GetVoiceConnectorProxy(ctx workflow.Context, input *chime.GetVoiceConnectorProxyInput) (*chime.GetVoiceConnectorProxyOutput, error)
	GetVoiceConnectorProxyAsync(ctx workflow.Context, input *chime.GetVoiceConnectorProxyInput) *ChimeGetVoiceConnectorProxyFuture

	GetVoiceConnectorStreamingConfiguration(ctx workflow.Context, input *chime.GetVoiceConnectorStreamingConfigurationInput) (*chime.GetVoiceConnectorStreamingConfigurationOutput, error)
	GetVoiceConnectorStreamingConfigurationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorStreamingConfigurationInput) *ChimeGetVoiceConnectorStreamingConfigurationFuture

	GetVoiceConnectorTermination(ctx workflow.Context, input *chime.GetVoiceConnectorTerminationInput) (*chime.GetVoiceConnectorTerminationOutput, error)
	GetVoiceConnectorTerminationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorTerminationInput) *ChimeGetVoiceConnectorTerminationFuture

	GetVoiceConnectorTerminationHealth(ctx workflow.Context, input *chime.GetVoiceConnectorTerminationHealthInput) (*chime.GetVoiceConnectorTerminationHealthOutput, error)
	GetVoiceConnectorTerminationHealthAsync(ctx workflow.Context, input *chime.GetVoiceConnectorTerminationHealthInput) *ChimeGetVoiceConnectorTerminationHealthFuture

	InviteUsers(ctx workflow.Context, input *chime.InviteUsersInput) (*chime.InviteUsersOutput, error)
	InviteUsersAsync(ctx workflow.Context, input *chime.InviteUsersInput) *ChimeInviteUsersFuture

	ListAccounts(ctx workflow.Context, input *chime.ListAccountsInput) (*chime.ListAccountsOutput, error)
	ListAccountsAsync(ctx workflow.Context, input *chime.ListAccountsInput) *ChimeListAccountsFuture

	ListAttendeeTags(ctx workflow.Context, input *chime.ListAttendeeTagsInput) (*chime.ListAttendeeTagsOutput, error)
	ListAttendeeTagsAsync(ctx workflow.Context, input *chime.ListAttendeeTagsInput) *ChimeListAttendeeTagsFuture

	ListAttendees(ctx workflow.Context, input *chime.ListAttendeesInput) (*chime.ListAttendeesOutput, error)
	ListAttendeesAsync(ctx workflow.Context, input *chime.ListAttendeesInput) *ChimeListAttendeesFuture

	ListBots(ctx workflow.Context, input *chime.ListBotsInput) (*chime.ListBotsOutput, error)
	ListBotsAsync(ctx workflow.Context, input *chime.ListBotsInput) *ChimeListBotsFuture

	ListMeetingTags(ctx workflow.Context, input *chime.ListMeetingTagsInput) (*chime.ListMeetingTagsOutput, error)
	ListMeetingTagsAsync(ctx workflow.Context, input *chime.ListMeetingTagsInput) *ChimeListMeetingTagsFuture

	ListMeetings(ctx workflow.Context, input *chime.ListMeetingsInput) (*chime.ListMeetingsOutput, error)
	ListMeetingsAsync(ctx workflow.Context, input *chime.ListMeetingsInput) *ChimeListMeetingsFuture

	ListPhoneNumberOrders(ctx workflow.Context, input *chime.ListPhoneNumberOrdersInput) (*chime.ListPhoneNumberOrdersOutput, error)
	ListPhoneNumberOrdersAsync(ctx workflow.Context, input *chime.ListPhoneNumberOrdersInput) *ChimeListPhoneNumberOrdersFuture

	ListPhoneNumbers(ctx workflow.Context, input *chime.ListPhoneNumbersInput) (*chime.ListPhoneNumbersOutput, error)
	ListPhoneNumbersAsync(ctx workflow.Context, input *chime.ListPhoneNumbersInput) *ChimeListPhoneNumbersFuture

	ListProxySessions(ctx workflow.Context, input *chime.ListProxySessionsInput) (*chime.ListProxySessionsOutput, error)
	ListProxySessionsAsync(ctx workflow.Context, input *chime.ListProxySessionsInput) *ChimeListProxySessionsFuture

	ListRoomMemberships(ctx workflow.Context, input *chime.ListRoomMembershipsInput) (*chime.ListRoomMembershipsOutput, error)
	ListRoomMembershipsAsync(ctx workflow.Context, input *chime.ListRoomMembershipsInput) *ChimeListRoomMembershipsFuture

	ListRooms(ctx workflow.Context, input *chime.ListRoomsInput) (*chime.ListRoomsOutput, error)
	ListRoomsAsync(ctx workflow.Context, input *chime.ListRoomsInput) *ChimeListRoomsFuture

	ListTagsForResource(ctx workflow.Context, input *chime.ListTagsForResourceInput) (*chime.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *chime.ListTagsForResourceInput) *ChimeListTagsForResourceFuture

	ListUsers(ctx workflow.Context, input *chime.ListUsersInput) (*chime.ListUsersOutput, error)
	ListUsersAsync(ctx workflow.Context, input *chime.ListUsersInput) *ChimeListUsersFuture

	ListVoiceConnectorGroups(ctx workflow.Context, input *chime.ListVoiceConnectorGroupsInput) (*chime.ListVoiceConnectorGroupsOutput, error)
	ListVoiceConnectorGroupsAsync(ctx workflow.Context, input *chime.ListVoiceConnectorGroupsInput) *ChimeListVoiceConnectorGroupsFuture

	ListVoiceConnectorTerminationCredentials(ctx workflow.Context, input *chime.ListVoiceConnectorTerminationCredentialsInput) (*chime.ListVoiceConnectorTerminationCredentialsOutput, error)
	ListVoiceConnectorTerminationCredentialsAsync(ctx workflow.Context, input *chime.ListVoiceConnectorTerminationCredentialsInput) *ChimeListVoiceConnectorTerminationCredentialsFuture

	ListVoiceConnectors(ctx workflow.Context, input *chime.ListVoiceConnectorsInput) (*chime.ListVoiceConnectorsOutput, error)
	ListVoiceConnectorsAsync(ctx workflow.Context, input *chime.ListVoiceConnectorsInput) *ChimeListVoiceConnectorsFuture

	LogoutUser(ctx workflow.Context, input *chime.LogoutUserInput) (*chime.LogoutUserOutput, error)
	LogoutUserAsync(ctx workflow.Context, input *chime.LogoutUserInput) *ChimeLogoutUserFuture

	PutEventsConfiguration(ctx workflow.Context, input *chime.PutEventsConfigurationInput) (*chime.PutEventsConfigurationOutput, error)
	PutEventsConfigurationAsync(ctx workflow.Context, input *chime.PutEventsConfigurationInput) *ChimePutEventsConfigurationFuture

	PutRetentionSettings(ctx workflow.Context, input *chime.PutRetentionSettingsInput) (*chime.PutRetentionSettingsOutput, error)
	PutRetentionSettingsAsync(ctx workflow.Context, input *chime.PutRetentionSettingsInput) *ChimePutRetentionSettingsFuture

	PutVoiceConnectorEmergencyCallingConfiguration(ctx workflow.Context, input *chime.PutVoiceConnectorEmergencyCallingConfigurationInput) (*chime.PutVoiceConnectorEmergencyCallingConfigurationOutput, error)
	PutVoiceConnectorEmergencyCallingConfigurationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorEmergencyCallingConfigurationInput) *ChimePutVoiceConnectorEmergencyCallingConfigurationFuture

	PutVoiceConnectorLoggingConfiguration(ctx workflow.Context, input *chime.PutVoiceConnectorLoggingConfigurationInput) (*chime.PutVoiceConnectorLoggingConfigurationOutput, error)
	PutVoiceConnectorLoggingConfigurationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorLoggingConfigurationInput) *ChimePutVoiceConnectorLoggingConfigurationFuture

	PutVoiceConnectorOrigination(ctx workflow.Context, input *chime.PutVoiceConnectorOriginationInput) (*chime.PutVoiceConnectorOriginationOutput, error)
	PutVoiceConnectorOriginationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorOriginationInput) *ChimePutVoiceConnectorOriginationFuture

	PutVoiceConnectorProxy(ctx workflow.Context, input *chime.PutVoiceConnectorProxyInput) (*chime.PutVoiceConnectorProxyOutput, error)
	PutVoiceConnectorProxyAsync(ctx workflow.Context, input *chime.PutVoiceConnectorProxyInput) *ChimePutVoiceConnectorProxyFuture

	PutVoiceConnectorStreamingConfiguration(ctx workflow.Context, input *chime.PutVoiceConnectorStreamingConfigurationInput) (*chime.PutVoiceConnectorStreamingConfigurationOutput, error)
	PutVoiceConnectorStreamingConfigurationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorStreamingConfigurationInput) *ChimePutVoiceConnectorStreamingConfigurationFuture

	PutVoiceConnectorTermination(ctx workflow.Context, input *chime.PutVoiceConnectorTerminationInput) (*chime.PutVoiceConnectorTerminationOutput, error)
	PutVoiceConnectorTerminationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorTerminationInput) *ChimePutVoiceConnectorTerminationFuture

	PutVoiceConnectorTerminationCredentials(ctx workflow.Context, input *chime.PutVoiceConnectorTerminationCredentialsInput) (*chime.PutVoiceConnectorTerminationCredentialsOutput, error)
	PutVoiceConnectorTerminationCredentialsAsync(ctx workflow.Context, input *chime.PutVoiceConnectorTerminationCredentialsInput) *ChimePutVoiceConnectorTerminationCredentialsFuture

	RedactConversationMessage(ctx workflow.Context, input *chime.RedactConversationMessageInput) (*chime.RedactConversationMessageOutput, error)
	RedactConversationMessageAsync(ctx workflow.Context, input *chime.RedactConversationMessageInput) *ChimeRedactConversationMessageFuture

	RedactRoomMessage(ctx workflow.Context, input *chime.RedactRoomMessageInput) (*chime.RedactRoomMessageOutput, error)
	RedactRoomMessageAsync(ctx workflow.Context, input *chime.RedactRoomMessageInput) *ChimeRedactRoomMessageFuture

	RegenerateSecurityToken(ctx workflow.Context, input *chime.RegenerateSecurityTokenInput) (*chime.RegenerateSecurityTokenOutput, error)
	RegenerateSecurityTokenAsync(ctx workflow.Context, input *chime.RegenerateSecurityTokenInput) *ChimeRegenerateSecurityTokenFuture

	ResetPersonalPIN(ctx workflow.Context, input *chime.ResetPersonalPINInput) (*chime.ResetPersonalPINOutput, error)
	ResetPersonalPINAsync(ctx workflow.Context, input *chime.ResetPersonalPINInput) *ChimeResetPersonalPINFuture

	RestorePhoneNumber(ctx workflow.Context, input *chime.RestorePhoneNumberInput) (*chime.RestorePhoneNumberOutput, error)
	RestorePhoneNumberAsync(ctx workflow.Context, input *chime.RestorePhoneNumberInput) *ChimeRestorePhoneNumberFuture

	SearchAvailablePhoneNumbers(ctx workflow.Context, input *chime.SearchAvailablePhoneNumbersInput) (*chime.SearchAvailablePhoneNumbersOutput, error)
	SearchAvailablePhoneNumbersAsync(ctx workflow.Context, input *chime.SearchAvailablePhoneNumbersInput) *ChimeSearchAvailablePhoneNumbersFuture

	TagAttendee(ctx workflow.Context, input *chime.TagAttendeeInput) (*chime.TagAttendeeOutput, error)
	TagAttendeeAsync(ctx workflow.Context, input *chime.TagAttendeeInput) *ChimeTagAttendeeFuture

	TagMeeting(ctx workflow.Context, input *chime.TagMeetingInput) (*chime.TagMeetingOutput, error)
	TagMeetingAsync(ctx workflow.Context, input *chime.TagMeetingInput) *ChimeTagMeetingFuture

	TagResource(ctx workflow.Context, input *chime.TagResourceInput) (*chime.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *chime.TagResourceInput) *ChimeTagResourceFuture

	UntagAttendee(ctx workflow.Context, input *chime.UntagAttendeeInput) (*chime.UntagAttendeeOutput, error)
	UntagAttendeeAsync(ctx workflow.Context, input *chime.UntagAttendeeInput) *ChimeUntagAttendeeFuture

	UntagMeeting(ctx workflow.Context, input *chime.UntagMeetingInput) (*chime.UntagMeetingOutput, error)
	UntagMeetingAsync(ctx workflow.Context, input *chime.UntagMeetingInput) *ChimeUntagMeetingFuture

	UntagResource(ctx workflow.Context, input *chime.UntagResourceInput) (*chime.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *chime.UntagResourceInput) *ChimeUntagResourceFuture

	UpdateAccount(ctx workflow.Context, input *chime.UpdateAccountInput) (*chime.UpdateAccountOutput, error)
	UpdateAccountAsync(ctx workflow.Context, input *chime.UpdateAccountInput) *ChimeUpdateAccountFuture

	UpdateAccountSettings(ctx workflow.Context, input *chime.UpdateAccountSettingsInput) (*chime.UpdateAccountSettingsOutput, error)
	UpdateAccountSettingsAsync(ctx workflow.Context, input *chime.UpdateAccountSettingsInput) *ChimeUpdateAccountSettingsFuture

	UpdateBot(ctx workflow.Context, input *chime.UpdateBotInput) (*chime.UpdateBotOutput, error)
	UpdateBotAsync(ctx workflow.Context, input *chime.UpdateBotInput) *ChimeUpdateBotFuture

	UpdateGlobalSettings(ctx workflow.Context, input *chime.UpdateGlobalSettingsInput) (*chime.UpdateGlobalSettingsOutput, error)
	UpdateGlobalSettingsAsync(ctx workflow.Context, input *chime.UpdateGlobalSettingsInput) *ChimeUpdateGlobalSettingsFuture

	UpdatePhoneNumber(ctx workflow.Context, input *chime.UpdatePhoneNumberInput) (*chime.UpdatePhoneNumberOutput, error)
	UpdatePhoneNumberAsync(ctx workflow.Context, input *chime.UpdatePhoneNumberInput) *ChimeUpdatePhoneNumberFuture

	UpdatePhoneNumberSettings(ctx workflow.Context, input *chime.UpdatePhoneNumberSettingsInput) (*chime.UpdatePhoneNumberSettingsOutput, error)
	UpdatePhoneNumberSettingsAsync(ctx workflow.Context, input *chime.UpdatePhoneNumberSettingsInput) *ChimeUpdatePhoneNumberSettingsFuture

	UpdateProxySession(ctx workflow.Context, input *chime.UpdateProxySessionInput) (*chime.UpdateProxySessionOutput, error)
	UpdateProxySessionAsync(ctx workflow.Context, input *chime.UpdateProxySessionInput) *ChimeUpdateProxySessionFuture

	UpdateRoom(ctx workflow.Context, input *chime.UpdateRoomInput) (*chime.UpdateRoomOutput, error)
	UpdateRoomAsync(ctx workflow.Context, input *chime.UpdateRoomInput) *ChimeUpdateRoomFuture

	UpdateRoomMembership(ctx workflow.Context, input *chime.UpdateRoomMembershipInput) (*chime.UpdateRoomMembershipOutput, error)
	UpdateRoomMembershipAsync(ctx workflow.Context, input *chime.UpdateRoomMembershipInput) *ChimeUpdateRoomMembershipFuture

	UpdateUser(ctx workflow.Context, input *chime.UpdateUserInput) (*chime.UpdateUserOutput, error)
	UpdateUserAsync(ctx workflow.Context, input *chime.UpdateUserInput) *ChimeUpdateUserFuture

	UpdateUserSettings(ctx workflow.Context, input *chime.UpdateUserSettingsInput) (*chime.UpdateUserSettingsOutput, error)
	UpdateUserSettingsAsync(ctx workflow.Context, input *chime.UpdateUserSettingsInput) *ChimeUpdateUserSettingsFuture

	UpdateVoiceConnector(ctx workflow.Context, input *chime.UpdateVoiceConnectorInput) (*chime.UpdateVoiceConnectorOutput, error)
	UpdateVoiceConnectorAsync(ctx workflow.Context, input *chime.UpdateVoiceConnectorInput) *ChimeUpdateVoiceConnectorFuture

	UpdateVoiceConnectorGroup(ctx workflow.Context, input *chime.UpdateVoiceConnectorGroupInput) (*chime.UpdateVoiceConnectorGroupOutput, error)
	UpdateVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.UpdateVoiceConnectorGroupInput) *ChimeUpdateVoiceConnectorGroupFuture
}

type ChimeStub struct{}

func NewChimeStub() ChimeClient {
	return &ChimeStub{}
}

type ChimeAssociatePhoneNumberWithUserFuture struct {
	Future workflow.Future
}

func (r *ChimeAssociatePhoneNumberWithUserFuture) Get(ctx workflow.Context) (*chime.AssociatePhoneNumberWithUserOutput, error) {
	var output chime.AssociatePhoneNumberWithUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeAssociatePhoneNumbersWithVoiceConnectorFuture struct {
	Future workflow.Future
}

func (r *ChimeAssociatePhoneNumbersWithVoiceConnectorFuture) Get(ctx workflow.Context) (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput, error) {
	var output chime.AssociatePhoneNumbersWithVoiceConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeAssociatePhoneNumbersWithVoiceConnectorGroupFuture struct {
	Future workflow.Future
}

func (r *ChimeAssociatePhoneNumbersWithVoiceConnectorGroupFuture) Get(ctx workflow.Context) (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error) {
	var output chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeAssociateSigninDelegateGroupsWithAccountFuture struct {
	Future workflow.Future
}

func (r *ChimeAssociateSigninDelegateGroupsWithAccountFuture) Get(ctx workflow.Context) (*chime.AssociateSigninDelegateGroupsWithAccountOutput, error) {
	var output chime.AssociateSigninDelegateGroupsWithAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeBatchCreateAttendeeFuture struct {
	Future workflow.Future
}

func (r *ChimeBatchCreateAttendeeFuture) Get(ctx workflow.Context) (*chime.BatchCreateAttendeeOutput, error) {
	var output chime.BatchCreateAttendeeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeBatchCreateRoomMembershipFuture struct {
	Future workflow.Future
}

func (r *ChimeBatchCreateRoomMembershipFuture) Get(ctx workflow.Context) (*chime.BatchCreateRoomMembershipOutput, error) {
	var output chime.BatchCreateRoomMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeBatchDeletePhoneNumberFuture struct {
	Future workflow.Future
}

func (r *ChimeBatchDeletePhoneNumberFuture) Get(ctx workflow.Context) (*chime.BatchDeletePhoneNumberOutput, error) {
	var output chime.BatchDeletePhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeBatchSuspendUserFuture struct {
	Future workflow.Future
}

func (r *ChimeBatchSuspendUserFuture) Get(ctx workflow.Context) (*chime.BatchSuspendUserOutput, error) {
	var output chime.BatchSuspendUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeBatchUnsuspendUserFuture struct {
	Future workflow.Future
}

func (r *ChimeBatchUnsuspendUserFuture) Get(ctx workflow.Context) (*chime.BatchUnsuspendUserOutput, error) {
	var output chime.BatchUnsuspendUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeBatchUpdatePhoneNumberFuture struct {
	Future workflow.Future
}

func (r *ChimeBatchUpdatePhoneNumberFuture) Get(ctx workflow.Context) (*chime.BatchUpdatePhoneNumberOutput, error) {
	var output chime.BatchUpdatePhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeBatchUpdateUserFuture struct {
	Future workflow.Future
}

func (r *ChimeBatchUpdateUserFuture) Get(ctx workflow.Context) (*chime.BatchUpdateUserOutput, error) {
	var output chime.BatchUpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeCreateAccountFuture struct {
	Future workflow.Future
}

func (r *ChimeCreateAccountFuture) Get(ctx workflow.Context) (*chime.CreateAccountOutput, error) {
	var output chime.CreateAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeCreateAttendeeFuture struct {
	Future workflow.Future
}

func (r *ChimeCreateAttendeeFuture) Get(ctx workflow.Context) (*chime.CreateAttendeeOutput, error) {
	var output chime.CreateAttendeeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeCreateBotFuture struct {
	Future workflow.Future
}

func (r *ChimeCreateBotFuture) Get(ctx workflow.Context) (*chime.CreateBotOutput, error) {
	var output chime.CreateBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeCreateMeetingFuture struct {
	Future workflow.Future
}

func (r *ChimeCreateMeetingFuture) Get(ctx workflow.Context) (*chime.CreateMeetingOutput, error) {
	var output chime.CreateMeetingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeCreateMeetingWithAttendeesFuture struct {
	Future workflow.Future
}

func (r *ChimeCreateMeetingWithAttendeesFuture) Get(ctx workflow.Context) (*chime.CreateMeetingWithAttendeesOutput, error) {
	var output chime.CreateMeetingWithAttendeesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeCreatePhoneNumberOrderFuture struct {
	Future workflow.Future
}

func (r *ChimeCreatePhoneNumberOrderFuture) Get(ctx workflow.Context) (*chime.CreatePhoneNumberOrderOutput, error) {
	var output chime.CreatePhoneNumberOrderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeCreateProxySessionFuture struct {
	Future workflow.Future
}

func (r *ChimeCreateProxySessionFuture) Get(ctx workflow.Context) (*chime.CreateProxySessionOutput, error) {
	var output chime.CreateProxySessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeCreateRoomFuture struct {
	Future workflow.Future
}

func (r *ChimeCreateRoomFuture) Get(ctx workflow.Context) (*chime.CreateRoomOutput, error) {
	var output chime.CreateRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeCreateRoomMembershipFuture struct {
	Future workflow.Future
}

func (r *ChimeCreateRoomMembershipFuture) Get(ctx workflow.Context) (*chime.CreateRoomMembershipOutput, error) {
	var output chime.CreateRoomMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeCreateUserFuture struct {
	Future workflow.Future
}

func (r *ChimeCreateUserFuture) Get(ctx workflow.Context) (*chime.CreateUserOutput, error) {
	var output chime.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeCreateVoiceConnectorFuture struct {
	Future workflow.Future
}

func (r *ChimeCreateVoiceConnectorFuture) Get(ctx workflow.Context) (*chime.CreateVoiceConnectorOutput, error) {
	var output chime.CreateVoiceConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeCreateVoiceConnectorGroupFuture struct {
	Future workflow.Future
}

func (r *ChimeCreateVoiceConnectorGroupFuture) Get(ctx workflow.Context) (*chime.CreateVoiceConnectorGroupOutput, error) {
	var output chime.CreateVoiceConnectorGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteAccountFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteAccountFuture) Get(ctx workflow.Context) (*chime.DeleteAccountOutput, error) {
	var output chime.DeleteAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteAttendeeFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteAttendeeFuture) Get(ctx workflow.Context) (*chime.DeleteAttendeeOutput, error) {
	var output chime.DeleteAttendeeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteEventsConfigurationFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteEventsConfigurationFuture) Get(ctx workflow.Context) (*chime.DeleteEventsConfigurationOutput, error) {
	var output chime.DeleteEventsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteMeetingFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteMeetingFuture) Get(ctx workflow.Context) (*chime.DeleteMeetingOutput, error) {
	var output chime.DeleteMeetingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeletePhoneNumberFuture struct {
	Future workflow.Future
}

func (r *ChimeDeletePhoneNumberFuture) Get(ctx workflow.Context) (*chime.DeletePhoneNumberOutput, error) {
	var output chime.DeletePhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteProxySessionFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteProxySessionFuture) Get(ctx workflow.Context) (*chime.DeleteProxySessionOutput, error) {
	var output chime.DeleteProxySessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteRoomFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteRoomFuture) Get(ctx workflow.Context) (*chime.DeleteRoomOutput, error) {
	var output chime.DeleteRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteRoomMembershipFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteRoomMembershipFuture) Get(ctx workflow.Context) (*chime.DeleteRoomMembershipOutput, error) {
	var output chime.DeleteRoomMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteVoiceConnectorFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteVoiceConnectorFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorOutput, error) {
	var output chime.DeleteVoiceConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteVoiceConnectorEmergencyCallingConfigurationFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteVoiceConnectorEmergencyCallingConfigurationFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	var output chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteVoiceConnectorGroupFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteVoiceConnectorGroupFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorGroupOutput, error) {
	var output chime.DeleteVoiceConnectorGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteVoiceConnectorOriginationFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteVoiceConnectorOriginationFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorOriginationOutput, error) {
	var output chime.DeleteVoiceConnectorOriginationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteVoiceConnectorProxyFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteVoiceConnectorProxyFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorProxyOutput, error) {
	var output chime.DeleteVoiceConnectorProxyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteVoiceConnectorStreamingConfigurationFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteVoiceConnectorStreamingConfigurationFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorStreamingConfigurationOutput, error) {
	var output chime.DeleteVoiceConnectorStreamingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteVoiceConnectorTerminationFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteVoiceConnectorTerminationFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorTerminationOutput, error) {
	var output chime.DeleteVoiceConnectorTerminationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDeleteVoiceConnectorTerminationCredentialsFuture struct {
	Future workflow.Future
}

func (r *ChimeDeleteVoiceConnectorTerminationCredentialsFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorTerminationCredentialsOutput, error) {
	var output chime.DeleteVoiceConnectorTerminationCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDisassociatePhoneNumberFromUserFuture struct {
	Future workflow.Future
}

func (r *ChimeDisassociatePhoneNumberFromUserFuture) Get(ctx workflow.Context) (*chime.DisassociatePhoneNumberFromUserOutput, error) {
	var output chime.DisassociatePhoneNumberFromUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDisassociatePhoneNumbersFromVoiceConnectorFuture struct {
	Future workflow.Future
}

func (r *ChimeDisassociatePhoneNumbersFromVoiceConnectorFuture) Get(ctx workflow.Context) (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput, error) {
	var output chime.DisassociatePhoneNumbersFromVoiceConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDisassociatePhoneNumbersFromVoiceConnectorGroupFuture struct {
	Future workflow.Future
}

func (r *ChimeDisassociatePhoneNumbersFromVoiceConnectorGroupFuture) Get(ctx workflow.Context) (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error) {
	var output chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeDisassociateSigninDelegateGroupsFromAccountFuture struct {
	Future workflow.Future
}

func (r *ChimeDisassociateSigninDelegateGroupsFromAccountFuture) Get(ctx workflow.Context) (*chime.DisassociateSigninDelegateGroupsFromAccountOutput, error) {
	var output chime.DisassociateSigninDelegateGroupsFromAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetAccountFuture struct {
	Future workflow.Future
}

func (r *ChimeGetAccountFuture) Get(ctx workflow.Context) (*chime.GetAccountOutput, error) {
	var output chime.GetAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetAccountSettingsFuture struct {
	Future workflow.Future
}

func (r *ChimeGetAccountSettingsFuture) Get(ctx workflow.Context) (*chime.GetAccountSettingsOutput, error) {
	var output chime.GetAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetAttendeeFuture struct {
	Future workflow.Future
}

func (r *ChimeGetAttendeeFuture) Get(ctx workflow.Context) (*chime.GetAttendeeOutput, error) {
	var output chime.GetAttendeeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetBotFuture struct {
	Future workflow.Future
}

func (r *ChimeGetBotFuture) Get(ctx workflow.Context) (*chime.GetBotOutput, error) {
	var output chime.GetBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetEventsConfigurationFuture struct {
	Future workflow.Future
}

func (r *ChimeGetEventsConfigurationFuture) Get(ctx workflow.Context) (*chime.GetEventsConfigurationOutput, error) {
	var output chime.GetEventsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetGlobalSettingsFuture struct {
	Future workflow.Future
}

func (r *ChimeGetGlobalSettingsFuture) Get(ctx workflow.Context) (*chime.GetGlobalSettingsOutput, error) {
	var output chime.GetGlobalSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetMeetingFuture struct {
	Future workflow.Future
}

func (r *ChimeGetMeetingFuture) Get(ctx workflow.Context) (*chime.GetMeetingOutput, error) {
	var output chime.GetMeetingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetPhoneNumberFuture struct {
	Future workflow.Future
}

func (r *ChimeGetPhoneNumberFuture) Get(ctx workflow.Context) (*chime.GetPhoneNumberOutput, error) {
	var output chime.GetPhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetPhoneNumberOrderFuture struct {
	Future workflow.Future
}

func (r *ChimeGetPhoneNumberOrderFuture) Get(ctx workflow.Context) (*chime.GetPhoneNumberOrderOutput, error) {
	var output chime.GetPhoneNumberOrderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetPhoneNumberSettingsFuture struct {
	Future workflow.Future
}

func (r *ChimeGetPhoneNumberSettingsFuture) Get(ctx workflow.Context) (*chime.GetPhoneNumberSettingsOutput, error) {
	var output chime.GetPhoneNumberSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetProxySessionFuture struct {
	Future workflow.Future
}

func (r *ChimeGetProxySessionFuture) Get(ctx workflow.Context) (*chime.GetProxySessionOutput, error) {
	var output chime.GetProxySessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetRetentionSettingsFuture struct {
	Future workflow.Future
}

func (r *ChimeGetRetentionSettingsFuture) Get(ctx workflow.Context) (*chime.GetRetentionSettingsOutput, error) {
	var output chime.GetRetentionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetRoomFuture struct {
	Future workflow.Future
}

func (r *ChimeGetRoomFuture) Get(ctx workflow.Context) (*chime.GetRoomOutput, error) {
	var output chime.GetRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetUserFuture struct {
	Future workflow.Future
}

func (r *ChimeGetUserFuture) Get(ctx workflow.Context) (*chime.GetUserOutput, error) {
	var output chime.GetUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetUserSettingsFuture struct {
	Future workflow.Future
}

func (r *ChimeGetUserSettingsFuture) Get(ctx workflow.Context) (*chime.GetUserSettingsOutput, error) {
	var output chime.GetUserSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetVoiceConnectorFuture struct {
	Future workflow.Future
}

func (r *ChimeGetVoiceConnectorFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorOutput, error) {
	var output chime.GetVoiceConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetVoiceConnectorEmergencyCallingConfigurationFuture struct {
	Future workflow.Future
}

func (r *ChimeGetVoiceConnectorEmergencyCallingConfigurationFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	var output chime.GetVoiceConnectorEmergencyCallingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetVoiceConnectorGroupFuture struct {
	Future workflow.Future
}

func (r *ChimeGetVoiceConnectorGroupFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorGroupOutput, error) {
	var output chime.GetVoiceConnectorGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetVoiceConnectorLoggingConfigurationFuture struct {
	Future workflow.Future
}

func (r *ChimeGetVoiceConnectorLoggingConfigurationFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorLoggingConfigurationOutput, error) {
	var output chime.GetVoiceConnectorLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetVoiceConnectorOriginationFuture struct {
	Future workflow.Future
}

func (r *ChimeGetVoiceConnectorOriginationFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorOriginationOutput, error) {
	var output chime.GetVoiceConnectorOriginationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetVoiceConnectorProxyFuture struct {
	Future workflow.Future
}

func (r *ChimeGetVoiceConnectorProxyFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorProxyOutput, error) {
	var output chime.GetVoiceConnectorProxyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetVoiceConnectorStreamingConfigurationFuture struct {
	Future workflow.Future
}

func (r *ChimeGetVoiceConnectorStreamingConfigurationFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorStreamingConfigurationOutput, error) {
	var output chime.GetVoiceConnectorStreamingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetVoiceConnectorTerminationFuture struct {
	Future workflow.Future
}

func (r *ChimeGetVoiceConnectorTerminationFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorTerminationOutput, error) {
	var output chime.GetVoiceConnectorTerminationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeGetVoiceConnectorTerminationHealthFuture struct {
	Future workflow.Future
}

func (r *ChimeGetVoiceConnectorTerminationHealthFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorTerminationHealthOutput, error) {
	var output chime.GetVoiceConnectorTerminationHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeInviteUsersFuture struct {
	Future workflow.Future
}

func (r *ChimeInviteUsersFuture) Get(ctx workflow.Context) (*chime.InviteUsersOutput, error) {
	var output chime.InviteUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListAccountsFuture struct {
	Future workflow.Future
}

func (r *ChimeListAccountsFuture) Get(ctx workflow.Context) (*chime.ListAccountsOutput, error) {
	var output chime.ListAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListAttendeeTagsFuture struct {
	Future workflow.Future
}

func (r *ChimeListAttendeeTagsFuture) Get(ctx workflow.Context) (*chime.ListAttendeeTagsOutput, error) {
	var output chime.ListAttendeeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListAttendeesFuture struct {
	Future workflow.Future
}

func (r *ChimeListAttendeesFuture) Get(ctx workflow.Context) (*chime.ListAttendeesOutput, error) {
	var output chime.ListAttendeesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListBotsFuture struct {
	Future workflow.Future
}

func (r *ChimeListBotsFuture) Get(ctx workflow.Context) (*chime.ListBotsOutput, error) {
	var output chime.ListBotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListMeetingTagsFuture struct {
	Future workflow.Future
}

func (r *ChimeListMeetingTagsFuture) Get(ctx workflow.Context) (*chime.ListMeetingTagsOutput, error) {
	var output chime.ListMeetingTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListMeetingsFuture struct {
	Future workflow.Future
}

func (r *ChimeListMeetingsFuture) Get(ctx workflow.Context) (*chime.ListMeetingsOutput, error) {
	var output chime.ListMeetingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListPhoneNumberOrdersFuture struct {
	Future workflow.Future
}

func (r *ChimeListPhoneNumberOrdersFuture) Get(ctx workflow.Context) (*chime.ListPhoneNumberOrdersOutput, error) {
	var output chime.ListPhoneNumberOrdersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListPhoneNumbersFuture struct {
	Future workflow.Future
}

func (r *ChimeListPhoneNumbersFuture) Get(ctx workflow.Context) (*chime.ListPhoneNumbersOutput, error) {
	var output chime.ListPhoneNumbersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListProxySessionsFuture struct {
	Future workflow.Future
}

func (r *ChimeListProxySessionsFuture) Get(ctx workflow.Context) (*chime.ListProxySessionsOutput, error) {
	var output chime.ListProxySessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListRoomMembershipsFuture struct {
	Future workflow.Future
}

func (r *ChimeListRoomMembershipsFuture) Get(ctx workflow.Context) (*chime.ListRoomMembershipsOutput, error) {
	var output chime.ListRoomMembershipsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListRoomsFuture struct {
	Future workflow.Future
}

func (r *ChimeListRoomsFuture) Get(ctx workflow.Context) (*chime.ListRoomsOutput, error) {
	var output chime.ListRoomsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ChimeListTagsForResourceFuture) Get(ctx workflow.Context) (*chime.ListTagsForResourceOutput, error) {
	var output chime.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListUsersFuture struct {
	Future workflow.Future
}

func (r *ChimeListUsersFuture) Get(ctx workflow.Context) (*chime.ListUsersOutput, error) {
	var output chime.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListVoiceConnectorGroupsFuture struct {
	Future workflow.Future
}

func (r *ChimeListVoiceConnectorGroupsFuture) Get(ctx workflow.Context) (*chime.ListVoiceConnectorGroupsOutput, error) {
	var output chime.ListVoiceConnectorGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListVoiceConnectorTerminationCredentialsFuture struct {
	Future workflow.Future
}

func (r *ChimeListVoiceConnectorTerminationCredentialsFuture) Get(ctx workflow.Context) (*chime.ListVoiceConnectorTerminationCredentialsOutput, error) {
	var output chime.ListVoiceConnectorTerminationCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeListVoiceConnectorsFuture struct {
	Future workflow.Future
}

func (r *ChimeListVoiceConnectorsFuture) Get(ctx workflow.Context) (*chime.ListVoiceConnectorsOutput, error) {
	var output chime.ListVoiceConnectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeLogoutUserFuture struct {
	Future workflow.Future
}

func (r *ChimeLogoutUserFuture) Get(ctx workflow.Context) (*chime.LogoutUserOutput, error) {
	var output chime.LogoutUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimePutEventsConfigurationFuture struct {
	Future workflow.Future
}

func (r *ChimePutEventsConfigurationFuture) Get(ctx workflow.Context) (*chime.PutEventsConfigurationOutput, error) {
	var output chime.PutEventsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimePutRetentionSettingsFuture struct {
	Future workflow.Future
}

func (r *ChimePutRetentionSettingsFuture) Get(ctx workflow.Context) (*chime.PutRetentionSettingsOutput, error) {
	var output chime.PutRetentionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimePutVoiceConnectorEmergencyCallingConfigurationFuture struct {
	Future workflow.Future
}

func (r *ChimePutVoiceConnectorEmergencyCallingConfigurationFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	var output chime.PutVoiceConnectorEmergencyCallingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimePutVoiceConnectorLoggingConfigurationFuture struct {
	Future workflow.Future
}

func (r *ChimePutVoiceConnectorLoggingConfigurationFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorLoggingConfigurationOutput, error) {
	var output chime.PutVoiceConnectorLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimePutVoiceConnectorOriginationFuture struct {
	Future workflow.Future
}

func (r *ChimePutVoiceConnectorOriginationFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorOriginationOutput, error) {
	var output chime.PutVoiceConnectorOriginationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimePutVoiceConnectorProxyFuture struct {
	Future workflow.Future
}

func (r *ChimePutVoiceConnectorProxyFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorProxyOutput, error) {
	var output chime.PutVoiceConnectorProxyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimePutVoiceConnectorStreamingConfigurationFuture struct {
	Future workflow.Future
}

func (r *ChimePutVoiceConnectorStreamingConfigurationFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorStreamingConfigurationOutput, error) {
	var output chime.PutVoiceConnectorStreamingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimePutVoiceConnectorTerminationFuture struct {
	Future workflow.Future
}

func (r *ChimePutVoiceConnectorTerminationFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorTerminationOutput, error) {
	var output chime.PutVoiceConnectorTerminationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimePutVoiceConnectorTerminationCredentialsFuture struct {
	Future workflow.Future
}

func (r *ChimePutVoiceConnectorTerminationCredentialsFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorTerminationCredentialsOutput, error) {
	var output chime.PutVoiceConnectorTerminationCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeRedactConversationMessageFuture struct {
	Future workflow.Future
}

func (r *ChimeRedactConversationMessageFuture) Get(ctx workflow.Context) (*chime.RedactConversationMessageOutput, error) {
	var output chime.RedactConversationMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeRedactRoomMessageFuture struct {
	Future workflow.Future
}

func (r *ChimeRedactRoomMessageFuture) Get(ctx workflow.Context) (*chime.RedactRoomMessageOutput, error) {
	var output chime.RedactRoomMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeRegenerateSecurityTokenFuture struct {
	Future workflow.Future
}

func (r *ChimeRegenerateSecurityTokenFuture) Get(ctx workflow.Context) (*chime.RegenerateSecurityTokenOutput, error) {
	var output chime.RegenerateSecurityTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeResetPersonalPINFuture struct {
	Future workflow.Future
}

func (r *ChimeResetPersonalPINFuture) Get(ctx workflow.Context) (*chime.ResetPersonalPINOutput, error) {
	var output chime.ResetPersonalPINOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeRestorePhoneNumberFuture struct {
	Future workflow.Future
}

func (r *ChimeRestorePhoneNumberFuture) Get(ctx workflow.Context) (*chime.RestorePhoneNumberOutput, error) {
	var output chime.RestorePhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeSearchAvailablePhoneNumbersFuture struct {
	Future workflow.Future
}

func (r *ChimeSearchAvailablePhoneNumbersFuture) Get(ctx workflow.Context) (*chime.SearchAvailablePhoneNumbersOutput, error) {
	var output chime.SearchAvailablePhoneNumbersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeTagAttendeeFuture struct {
	Future workflow.Future
}

func (r *ChimeTagAttendeeFuture) Get(ctx workflow.Context) (*chime.TagAttendeeOutput, error) {
	var output chime.TagAttendeeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeTagMeetingFuture struct {
	Future workflow.Future
}

func (r *ChimeTagMeetingFuture) Get(ctx workflow.Context) (*chime.TagMeetingOutput, error) {
	var output chime.TagMeetingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeTagResourceFuture struct {
	Future workflow.Future
}

func (r *ChimeTagResourceFuture) Get(ctx workflow.Context) (*chime.TagResourceOutput, error) {
	var output chime.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUntagAttendeeFuture struct {
	Future workflow.Future
}

func (r *ChimeUntagAttendeeFuture) Get(ctx workflow.Context) (*chime.UntagAttendeeOutput, error) {
	var output chime.UntagAttendeeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUntagMeetingFuture struct {
	Future workflow.Future
}

func (r *ChimeUntagMeetingFuture) Get(ctx workflow.Context) (*chime.UntagMeetingOutput, error) {
	var output chime.UntagMeetingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUntagResourceFuture struct {
	Future workflow.Future
}

func (r *ChimeUntagResourceFuture) Get(ctx workflow.Context) (*chime.UntagResourceOutput, error) {
	var output chime.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdateAccountFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdateAccountFuture) Get(ctx workflow.Context) (*chime.UpdateAccountOutput, error) {
	var output chime.UpdateAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdateAccountSettingsFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdateAccountSettingsFuture) Get(ctx workflow.Context) (*chime.UpdateAccountSettingsOutput, error) {
	var output chime.UpdateAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdateBotFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdateBotFuture) Get(ctx workflow.Context) (*chime.UpdateBotOutput, error) {
	var output chime.UpdateBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdateGlobalSettingsFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdateGlobalSettingsFuture) Get(ctx workflow.Context) (*chime.UpdateGlobalSettingsOutput, error) {
	var output chime.UpdateGlobalSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdatePhoneNumberFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdatePhoneNumberFuture) Get(ctx workflow.Context) (*chime.UpdatePhoneNumberOutput, error) {
	var output chime.UpdatePhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdatePhoneNumberSettingsFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdatePhoneNumberSettingsFuture) Get(ctx workflow.Context) (*chime.UpdatePhoneNumberSettingsOutput, error) {
	var output chime.UpdatePhoneNumberSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdateProxySessionFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdateProxySessionFuture) Get(ctx workflow.Context) (*chime.UpdateProxySessionOutput, error) {
	var output chime.UpdateProxySessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdateRoomFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdateRoomFuture) Get(ctx workflow.Context) (*chime.UpdateRoomOutput, error) {
	var output chime.UpdateRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdateRoomMembershipFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdateRoomMembershipFuture) Get(ctx workflow.Context) (*chime.UpdateRoomMembershipOutput, error) {
	var output chime.UpdateRoomMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdateUserFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdateUserFuture) Get(ctx workflow.Context) (*chime.UpdateUserOutput, error) {
	var output chime.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdateUserSettingsFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdateUserSettingsFuture) Get(ctx workflow.Context) (*chime.UpdateUserSettingsOutput, error) {
	var output chime.UpdateUserSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdateVoiceConnectorFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdateVoiceConnectorFuture) Get(ctx workflow.Context) (*chime.UpdateVoiceConnectorOutput, error) {
	var output chime.UpdateVoiceConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChimeUpdateVoiceConnectorGroupFuture struct {
	Future workflow.Future
}

func (r *ChimeUpdateVoiceConnectorGroupFuture) Get(ctx workflow.Context) (*chime.UpdateVoiceConnectorGroupOutput, error) {
	var output chime.UpdateVoiceConnectorGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) AssociatePhoneNumberWithUser(ctx workflow.Context, input *chime.AssociatePhoneNumberWithUserInput) (*chime.AssociatePhoneNumberWithUserOutput, error) {
	var output chime.AssociatePhoneNumberWithUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.AssociatePhoneNumberWithUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) AssociatePhoneNumberWithUserAsync(ctx workflow.Context, input *chime.AssociatePhoneNumberWithUserInput) *ChimeAssociatePhoneNumberWithUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.AssociatePhoneNumberWithUser", input)
	return &ChimeAssociatePhoneNumberWithUserFuture{Future: future}
}

func (a *ChimeStub) AssociatePhoneNumbersWithVoiceConnector(ctx workflow.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorInput) (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput, error) {
	var output chime.AssociatePhoneNumbersWithVoiceConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.AssociatePhoneNumbersWithVoiceConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) AssociatePhoneNumbersWithVoiceConnectorAsync(ctx workflow.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorInput) *ChimeAssociatePhoneNumbersWithVoiceConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.AssociatePhoneNumbersWithVoiceConnector", input)
	return &ChimeAssociatePhoneNumbersWithVoiceConnectorFuture{Future: future}
}

func (a *ChimeStub) AssociatePhoneNumbersWithVoiceConnectorGroup(ctx workflow.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput) (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error) {
	var output chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.AssociatePhoneNumbersWithVoiceConnectorGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) AssociatePhoneNumbersWithVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput) *ChimeAssociatePhoneNumbersWithVoiceConnectorGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.AssociatePhoneNumbersWithVoiceConnectorGroup", input)
	return &ChimeAssociatePhoneNumbersWithVoiceConnectorGroupFuture{Future: future}
}

func (a *ChimeStub) AssociateSigninDelegateGroupsWithAccount(ctx workflow.Context, input *chime.AssociateSigninDelegateGroupsWithAccountInput) (*chime.AssociateSigninDelegateGroupsWithAccountOutput, error) {
	var output chime.AssociateSigninDelegateGroupsWithAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.AssociateSigninDelegateGroupsWithAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) AssociateSigninDelegateGroupsWithAccountAsync(ctx workflow.Context, input *chime.AssociateSigninDelegateGroupsWithAccountInput) *ChimeAssociateSigninDelegateGroupsWithAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.AssociateSigninDelegateGroupsWithAccount", input)
	return &ChimeAssociateSigninDelegateGroupsWithAccountFuture{Future: future}
}

func (a *ChimeStub) BatchCreateAttendee(ctx workflow.Context, input *chime.BatchCreateAttendeeInput) (*chime.BatchCreateAttendeeOutput, error) {
	var output chime.BatchCreateAttendeeOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.BatchCreateAttendee", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) BatchCreateAttendeeAsync(ctx workflow.Context, input *chime.BatchCreateAttendeeInput) *ChimeBatchCreateAttendeeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.BatchCreateAttendee", input)
	return &ChimeBatchCreateAttendeeFuture{Future: future}
}

func (a *ChimeStub) BatchCreateRoomMembership(ctx workflow.Context, input *chime.BatchCreateRoomMembershipInput) (*chime.BatchCreateRoomMembershipOutput, error) {
	var output chime.BatchCreateRoomMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.BatchCreateRoomMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) BatchCreateRoomMembershipAsync(ctx workflow.Context, input *chime.BatchCreateRoomMembershipInput) *ChimeBatchCreateRoomMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.BatchCreateRoomMembership", input)
	return &ChimeBatchCreateRoomMembershipFuture{Future: future}
}

func (a *ChimeStub) BatchDeletePhoneNumber(ctx workflow.Context, input *chime.BatchDeletePhoneNumberInput) (*chime.BatchDeletePhoneNumberOutput, error) {
	var output chime.BatchDeletePhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.BatchDeletePhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) BatchDeletePhoneNumberAsync(ctx workflow.Context, input *chime.BatchDeletePhoneNumberInput) *ChimeBatchDeletePhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.BatchDeletePhoneNumber", input)
	return &ChimeBatchDeletePhoneNumberFuture{Future: future}
}

func (a *ChimeStub) BatchSuspendUser(ctx workflow.Context, input *chime.BatchSuspendUserInput) (*chime.BatchSuspendUserOutput, error) {
	var output chime.BatchSuspendUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.BatchSuspendUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) BatchSuspendUserAsync(ctx workflow.Context, input *chime.BatchSuspendUserInput) *ChimeBatchSuspendUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.BatchSuspendUser", input)
	return &ChimeBatchSuspendUserFuture{Future: future}
}

func (a *ChimeStub) BatchUnsuspendUser(ctx workflow.Context, input *chime.BatchUnsuspendUserInput) (*chime.BatchUnsuspendUserOutput, error) {
	var output chime.BatchUnsuspendUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.BatchUnsuspendUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) BatchUnsuspendUserAsync(ctx workflow.Context, input *chime.BatchUnsuspendUserInput) *ChimeBatchUnsuspendUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.BatchUnsuspendUser", input)
	return &ChimeBatchUnsuspendUserFuture{Future: future}
}

func (a *ChimeStub) BatchUpdatePhoneNumber(ctx workflow.Context, input *chime.BatchUpdatePhoneNumberInput) (*chime.BatchUpdatePhoneNumberOutput, error) {
	var output chime.BatchUpdatePhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.BatchUpdatePhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) BatchUpdatePhoneNumberAsync(ctx workflow.Context, input *chime.BatchUpdatePhoneNumberInput) *ChimeBatchUpdatePhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.BatchUpdatePhoneNumber", input)
	return &ChimeBatchUpdatePhoneNumberFuture{Future: future}
}

func (a *ChimeStub) BatchUpdateUser(ctx workflow.Context, input *chime.BatchUpdateUserInput) (*chime.BatchUpdateUserOutput, error) {
	var output chime.BatchUpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.BatchUpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) BatchUpdateUserAsync(ctx workflow.Context, input *chime.BatchUpdateUserInput) *ChimeBatchUpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.BatchUpdateUser", input)
	return &ChimeBatchUpdateUserFuture{Future: future}
}

func (a *ChimeStub) CreateAccount(ctx workflow.Context, input *chime.CreateAccountInput) (*chime.CreateAccountOutput, error) {
	var output chime.CreateAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.CreateAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) CreateAccountAsync(ctx workflow.Context, input *chime.CreateAccountInput) *ChimeCreateAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.CreateAccount", input)
	return &ChimeCreateAccountFuture{Future: future}
}

func (a *ChimeStub) CreateAttendee(ctx workflow.Context, input *chime.CreateAttendeeInput) (*chime.CreateAttendeeOutput, error) {
	var output chime.CreateAttendeeOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.CreateAttendee", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) CreateAttendeeAsync(ctx workflow.Context, input *chime.CreateAttendeeInput) *ChimeCreateAttendeeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.CreateAttendee", input)
	return &ChimeCreateAttendeeFuture{Future: future}
}

func (a *ChimeStub) CreateBot(ctx workflow.Context, input *chime.CreateBotInput) (*chime.CreateBotOutput, error) {
	var output chime.CreateBotOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.CreateBot", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) CreateBotAsync(ctx workflow.Context, input *chime.CreateBotInput) *ChimeCreateBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.CreateBot", input)
	return &ChimeCreateBotFuture{Future: future}
}

func (a *ChimeStub) CreateMeeting(ctx workflow.Context, input *chime.CreateMeetingInput) (*chime.CreateMeetingOutput, error) {
	var output chime.CreateMeetingOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.CreateMeeting", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) CreateMeetingAsync(ctx workflow.Context, input *chime.CreateMeetingInput) *ChimeCreateMeetingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.CreateMeeting", input)
	return &ChimeCreateMeetingFuture{Future: future}
}

func (a *ChimeStub) CreateMeetingWithAttendees(ctx workflow.Context, input *chime.CreateMeetingWithAttendeesInput) (*chime.CreateMeetingWithAttendeesOutput, error) {
	var output chime.CreateMeetingWithAttendeesOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.CreateMeetingWithAttendees", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) CreateMeetingWithAttendeesAsync(ctx workflow.Context, input *chime.CreateMeetingWithAttendeesInput) *ChimeCreateMeetingWithAttendeesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.CreateMeetingWithAttendees", input)
	return &ChimeCreateMeetingWithAttendeesFuture{Future: future}
}

func (a *ChimeStub) CreatePhoneNumberOrder(ctx workflow.Context, input *chime.CreatePhoneNumberOrderInput) (*chime.CreatePhoneNumberOrderOutput, error) {
	var output chime.CreatePhoneNumberOrderOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.CreatePhoneNumberOrder", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) CreatePhoneNumberOrderAsync(ctx workflow.Context, input *chime.CreatePhoneNumberOrderInput) *ChimeCreatePhoneNumberOrderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.CreatePhoneNumberOrder", input)
	return &ChimeCreatePhoneNumberOrderFuture{Future: future}
}

func (a *ChimeStub) CreateProxySession(ctx workflow.Context, input *chime.CreateProxySessionInput) (*chime.CreateProxySessionOutput, error) {
	var output chime.CreateProxySessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.CreateProxySession", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) CreateProxySessionAsync(ctx workflow.Context, input *chime.CreateProxySessionInput) *ChimeCreateProxySessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.CreateProxySession", input)
	return &ChimeCreateProxySessionFuture{Future: future}
}

func (a *ChimeStub) CreateRoom(ctx workflow.Context, input *chime.CreateRoomInput) (*chime.CreateRoomOutput, error) {
	var output chime.CreateRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.CreateRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) CreateRoomAsync(ctx workflow.Context, input *chime.CreateRoomInput) *ChimeCreateRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.CreateRoom", input)
	return &ChimeCreateRoomFuture{Future: future}
}

func (a *ChimeStub) CreateRoomMembership(ctx workflow.Context, input *chime.CreateRoomMembershipInput) (*chime.CreateRoomMembershipOutput, error) {
	var output chime.CreateRoomMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.CreateRoomMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) CreateRoomMembershipAsync(ctx workflow.Context, input *chime.CreateRoomMembershipInput) *ChimeCreateRoomMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.CreateRoomMembership", input)
	return &ChimeCreateRoomMembershipFuture{Future: future}
}

func (a *ChimeStub) CreateUser(ctx workflow.Context, input *chime.CreateUserInput) (*chime.CreateUserOutput, error) {
	var output chime.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) CreateUserAsync(ctx workflow.Context, input *chime.CreateUserInput) *ChimeCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.CreateUser", input)
	return &ChimeCreateUserFuture{Future: future}
}

func (a *ChimeStub) CreateVoiceConnector(ctx workflow.Context, input *chime.CreateVoiceConnectorInput) (*chime.CreateVoiceConnectorOutput, error) {
	var output chime.CreateVoiceConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.CreateVoiceConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) CreateVoiceConnectorAsync(ctx workflow.Context, input *chime.CreateVoiceConnectorInput) *ChimeCreateVoiceConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.CreateVoiceConnector", input)
	return &ChimeCreateVoiceConnectorFuture{Future: future}
}

func (a *ChimeStub) CreateVoiceConnectorGroup(ctx workflow.Context, input *chime.CreateVoiceConnectorGroupInput) (*chime.CreateVoiceConnectorGroupOutput, error) {
	var output chime.CreateVoiceConnectorGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.CreateVoiceConnectorGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) CreateVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.CreateVoiceConnectorGroupInput) *ChimeCreateVoiceConnectorGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.CreateVoiceConnectorGroup", input)
	return &ChimeCreateVoiceConnectorGroupFuture{Future: future}
}

func (a *ChimeStub) DeleteAccount(ctx workflow.Context, input *chime.DeleteAccountInput) (*chime.DeleteAccountOutput, error) {
	var output chime.DeleteAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteAccountAsync(ctx workflow.Context, input *chime.DeleteAccountInput) *ChimeDeleteAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteAccount", input)
	return &ChimeDeleteAccountFuture{Future: future}
}

func (a *ChimeStub) DeleteAttendee(ctx workflow.Context, input *chime.DeleteAttendeeInput) (*chime.DeleteAttendeeOutput, error) {
	var output chime.DeleteAttendeeOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteAttendee", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteAttendeeAsync(ctx workflow.Context, input *chime.DeleteAttendeeInput) *ChimeDeleteAttendeeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteAttendee", input)
	return &ChimeDeleteAttendeeFuture{Future: future}
}

func (a *ChimeStub) DeleteEventsConfiguration(ctx workflow.Context, input *chime.DeleteEventsConfigurationInput) (*chime.DeleteEventsConfigurationOutput, error) {
	var output chime.DeleteEventsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteEventsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteEventsConfigurationAsync(ctx workflow.Context, input *chime.DeleteEventsConfigurationInput) *ChimeDeleteEventsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteEventsConfiguration", input)
	return &ChimeDeleteEventsConfigurationFuture{Future: future}
}

func (a *ChimeStub) DeleteMeeting(ctx workflow.Context, input *chime.DeleteMeetingInput) (*chime.DeleteMeetingOutput, error) {
	var output chime.DeleteMeetingOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteMeeting", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteMeetingAsync(ctx workflow.Context, input *chime.DeleteMeetingInput) *ChimeDeleteMeetingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteMeeting", input)
	return &ChimeDeleteMeetingFuture{Future: future}
}

func (a *ChimeStub) DeletePhoneNumber(ctx workflow.Context, input *chime.DeletePhoneNumberInput) (*chime.DeletePhoneNumberOutput, error) {
	var output chime.DeletePhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeletePhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeletePhoneNumberAsync(ctx workflow.Context, input *chime.DeletePhoneNumberInput) *ChimeDeletePhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeletePhoneNumber", input)
	return &ChimeDeletePhoneNumberFuture{Future: future}
}

func (a *ChimeStub) DeleteProxySession(ctx workflow.Context, input *chime.DeleteProxySessionInput) (*chime.DeleteProxySessionOutput, error) {
	var output chime.DeleteProxySessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteProxySession", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteProxySessionAsync(ctx workflow.Context, input *chime.DeleteProxySessionInput) *ChimeDeleteProxySessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteProxySession", input)
	return &ChimeDeleteProxySessionFuture{Future: future}
}

func (a *ChimeStub) DeleteRoom(ctx workflow.Context, input *chime.DeleteRoomInput) (*chime.DeleteRoomOutput, error) {
	var output chime.DeleteRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteRoomAsync(ctx workflow.Context, input *chime.DeleteRoomInput) *ChimeDeleteRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteRoom", input)
	return &ChimeDeleteRoomFuture{Future: future}
}

func (a *ChimeStub) DeleteRoomMembership(ctx workflow.Context, input *chime.DeleteRoomMembershipInput) (*chime.DeleteRoomMembershipOutput, error) {
	var output chime.DeleteRoomMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteRoomMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteRoomMembershipAsync(ctx workflow.Context, input *chime.DeleteRoomMembershipInput) *ChimeDeleteRoomMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteRoomMembership", input)
	return &ChimeDeleteRoomMembershipFuture{Future: future}
}

func (a *ChimeStub) DeleteVoiceConnector(ctx workflow.Context, input *chime.DeleteVoiceConnectorInput) (*chime.DeleteVoiceConnectorOutput, error) {
	var output chime.DeleteVoiceConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteVoiceConnectorAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorInput) *ChimeDeleteVoiceConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnector", input)
	return &ChimeDeleteVoiceConnectorFuture{Future: future}
}

func (a *ChimeStub) DeleteVoiceConnectorEmergencyCallingConfiguration(ctx workflow.Context, input *chime.DeleteVoiceConnectorEmergencyCallingConfigurationInput) (*chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	var output chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorEmergencyCallingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteVoiceConnectorEmergencyCallingConfigurationAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorEmergencyCallingConfigurationInput) *ChimeDeleteVoiceConnectorEmergencyCallingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorEmergencyCallingConfiguration", input)
	return &ChimeDeleteVoiceConnectorEmergencyCallingConfigurationFuture{Future: future}
}

func (a *ChimeStub) DeleteVoiceConnectorGroup(ctx workflow.Context, input *chime.DeleteVoiceConnectorGroupInput) (*chime.DeleteVoiceConnectorGroupOutput, error) {
	var output chime.DeleteVoiceConnectorGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorGroupInput) *ChimeDeleteVoiceConnectorGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorGroup", input)
	return &ChimeDeleteVoiceConnectorGroupFuture{Future: future}
}

func (a *ChimeStub) DeleteVoiceConnectorOrigination(ctx workflow.Context, input *chime.DeleteVoiceConnectorOriginationInput) (*chime.DeleteVoiceConnectorOriginationOutput, error) {
	var output chime.DeleteVoiceConnectorOriginationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorOrigination", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteVoiceConnectorOriginationAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorOriginationInput) *ChimeDeleteVoiceConnectorOriginationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorOrigination", input)
	return &ChimeDeleteVoiceConnectorOriginationFuture{Future: future}
}

func (a *ChimeStub) DeleteVoiceConnectorProxy(ctx workflow.Context, input *chime.DeleteVoiceConnectorProxyInput) (*chime.DeleteVoiceConnectorProxyOutput, error) {
	var output chime.DeleteVoiceConnectorProxyOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorProxy", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteVoiceConnectorProxyAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorProxyInput) *ChimeDeleteVoiceConnectorProxyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorProxy", input)
	return &ChimeDeleteVoiceConnectorProxyFuture{Future: future}
}

func (a *ChimeStub) DeleteVoiceConnectorStreamingConfiguration(ctx workflow.Context, input *chime.DeleteVoiceConnectorStreamingConfigurationInput) (*chime.DeleteVoiceConnectorStreamingConfigurationOutput, error) {
	var output chime.DeleteVoiceConnectorStreamingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorStreamingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteVoiceConnectorStreamingConfigurationAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorStreamingConfigurationInput) *ChimeDeleteVoiceConnectorStreamingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorStreamingConfiguration", input)
	return &ChimeDeleteVoiceConnectorStreamingConfigurationFuture{Future: future}
}

func (a *ChimeStub) DeleteVoiceConnectorTermination(ctx workflow.Context, input *chime.DeleteVoiceConnectorTerminationInput) (*chime.DeleteVoiceConnectorTerminationOutput, error) {
	var output chime.DeleteVoiceConnectorTerminationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorTermination", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteVoiceConnectorTerminationAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorTerminationInput) *ChimeDeleteVoiceConnectorTerminationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorTermination", input)
	return &ChimeDeleteVoiceConnectorTerminationFuture{Future: future}
}

func (a *ChimeStub) DeleteVoiceConnectorTerminationCredentials(ctx workflow.Context, input *chime.DeleteVoiceConnectorTerminationCredentialsInput) (*chime.DeleteVoiceConnectorTerminationCredentialsOutput, error) {
	var output chime.DeleteVoiceConnectorTerminationCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorTerminationCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DeleteVoiceConnectorTerminationCredentialsAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorTerminationCredentialsInput) *ChimeDeleteVoiceConnectorTerminationCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DeleteVoiceConnectorTerminationCredentials", input)
	return &ChimeDeleteVoiceConnectorTerminationCredentialsFuture{Future: future}
}

func (a *ChimeStub) DisassociatePhoneNumberFromUser(ctx workflow.Context, input *chime.DisassociatePhoneNumberFromUserInput) (*chime.DisassociatePhoneNumberFromUserOutput, error) {
	var output chime.DisassociatePhoneNumberFromUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DisassociatePhoneNumberFromUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DisassociatePhoneNumberFromUserAsync(ctx workflow.Context, input *chime.DisassociatePhoneNumberFromUserInput) *ChimeDisassociatePhoneNumberFromUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DisassociatePhoneNumberFromUser", input)
	return &ChimeDisassociatePhoneNumberFromUserFuture{Future: future}
}

func (a *ChimeStub) DisassociatePhoneNumbersFromVoiceConnector(ctx workflow.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorInput) (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput, error) {
	var output chime.DisassociatePhoneNumbersFromVoiceConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DisassociatePhoneNumbersFromVoiceConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DisassociatePhoneNumbersFromVoiceConnectorAsync(ctx workflow.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorInput) *ChimeDisassociatePhoneNumbersFromVoiceConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DisassociatePhoneNumbersFromVoiceConnector", input)
	return &ChimeDisassociatePhoneNumbersFromVoiceConnectorFuture{Future: future}
}

func (a *ChimeStub) DisassociatePhoneNumbersFromVoiceConnectorGroup(ctx workflow.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput) (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error) {
	var output chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DisassociatePhoneNumbersFromVoiceConnectorGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DisassociatePhoneNumbersFromVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput) *ChimeDisassociatePhoneNumbersFromVoiceConnectorGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DisassociatePhoneNumbersFromVoiceConnectorGroup", input)
	return &ChimeDisassociatePhoneNumbersFromVoiceConnectorGroupFuture{Future: future}
}

func (a *ChimeStub) DisassociateSigninDelegateGroupsFromAccount(ctx workflow.Context, input *chime.DisassociateSigninDelegateGroupsFromAccountInput) (*chime.DisassociateSigninDelegateGroupsFromAccountOutput, error) {
	var output chime.DisassociateSigninDelegateGroupsFromAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.DisassociateSigninDelegateGroupsFromAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) DisassociateSigninDelegateGroupsFromAccountAsync(ctx workflow.Context, input *chime.DisassociateSigninDelegateGroupsFromAccountInput) *ChimeDisassociateSigninDelegateGroupsFromAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.DisassociateSigninDelegateGroupsFromAccount", input)
	return &ChimeDisassociateSigninDelegateGroupsFromAccountFuture{Future: future}
}

func (a *ChimeStub) GetAccount(ctx workflow.Context, input *chime.GetAccountInput) (*chime.GetAccountOutput, error) {
	var output chime.GetAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetAccountAsync(ctx workflow.Context, input *chime.GetAccountInput) *ChimeGetAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetAccount", input)
	return &ChimeGetAccountFuture{Future: future}
}

func (a *ChimeStub) GetAccountSettings(ctx workflow.Context, input *chime.GetAccountSettingsInput) (*chime.GetAccountSettingsOutput, error) {
	var output chime.GetAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetAccountSettingsAsync(ctx workflow.Context, input *chime.GetAccountSettingsInput) *ChimeGetAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetAccountSettings", input)
	return &ChimeGetAccountSettingsFuture{Future: future}
}

func (a *ChimeStub) GetAttendee(ctx workflow.Context, input *chime.GetAttendeeInput) (*chime.GetAttendeeOutput, error) {
	var output chime.GetAttendeeOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetAttendee", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetAttendeeAsync(ctx workflow.Context, input *chime.GetAttendeeInput) *ChimeGetAttendeeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetAttendee", input)
	return &ChimeGetAttendeeFuture{Future: future}
}

func (a *ChimeStub) GetBot(ctx workflow.Context, input *chime.GetBotInput) (*chime.GetBotOutput, error) {
	var output chime.GetBotOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetBot", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetBotAsync(ctx workflow.Context, input *chime.GetBotInput) *ChimeGetBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetBot", input)
	return &ChimeGetBotFuture{Future: future}
}

func (a *ChimeStub) GetEventsConfiguration(ctx workflow.Context, input *chime.GetEventsConfigurationInput) (*chime.GetEventsConfigurationOutput, error) {
	var output chime.GetEventsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetEventsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetEventsConfigurationAsync(ctx workflow.Context, input *chime.GetEventsConfigurationInput) *ChimeGetEventsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetEventsConfiguration", input)
	return &ChimeGetEventsConfigurationFuture{Future: future}
}

func (a *ChimeStub) GetGlobalSettings(ctx workflow.Context, input *chime.GetGlobalSettingsInput) (*chime.GetGlobalSettingsOutput, error) {
	var output chime.GetGlobalSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetGlobalSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetGlobalSettingsAsync(ctx workflow.Context, input *chime.GetGlobalSettingsInput) *ChimeGetGlobalSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetGlobalSettings", input)
	return &ChimeGetGlobalSettingsFuture{Future: future}
}

func (a *ChimeStub) GetMeeting(ctx workflow.Context, input *chime.GetMeetingInput) (*chime.GetMeetingOutput, error) {
	var output chime.GetMeetingOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetMeeting", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetMeetingAsync(ctx workflow.Context, input *chime.GetMeetingInput) *ChimeGetMeetingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetMeeting", input)
	return &ChimeGetMeetingFuture{Future: future}
}

func (a *ChimeStub) GetPhoneNumber(ctx workflow.Context, input *chime.GetPhoneNumberInput) (*chime.GetPhoneNumberOutput, error) {
	var output chime.GetPhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetPhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetPhoneNumberAsync(ctx workflow.Context, input *chime.GetPhoneNumberInput) *ChimeGetPhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetPhoneNumber", input)
	return &ChimeGetPhoneNumberFuture{Future: future}
}

func (a *ChimeStub) GetPhoneNumberOrder(ctx workflow.Context, input *chime.GetPhoneNumberOrderInput) (*chime.GetPhoneNumberOrderOutput, error) {
	var output chime.GetPhoneNumberOrderOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetPhoneNumberOrder", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetPhoneNumberOrderAsync(ctx workflow.Context, input *chime.GetPhoneNumberOrderInput) *ChimeGetPhoneNumberOrderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetPhoneNumberOrder", input)
	return &ChimeGetPhoneNumberOrderFuture{Future: future}
}

func (a *ChimeStub) GetPhoneNumberSettings(ctx workflow.Context, input *chime.GetPhoneNumberSettingsInput) (*chime.GetPhoneNumberSettingsOutput, error) {
	var output chime.GetPhoneNumberSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetPhoneNumberSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetPhoneNumberSettingsAsync(ctx workflow.Context, input *chime.GetPhoneNumberSettingsInput) *ChimeGetPhoneNumberSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetPhoneNumberSettings", input)
	return &ChimeGetPhoneNumberSettingsFuture{Future: future}
}

func (a *ChimeStub) GetProxySession(ctx workflow.Context, input *chime.GetProxySessionInput) (*chime.GetProxySessionOutput, error) {
	var output chime.GetProxySessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetProxySession", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetProxySessionAsync(ctx workflow.Context, input *chime.GetProxySessionInput) *ChimeGetProxySessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetProxySession", input)
	return &ChimeGetProxySessionFuture{Future: future}
}

func (a *ChimeStub) GetRetentionSettings(ctx workflow.Context, input *chime.GetRetentionSettingsInput) (*chime.GetRetentionSettingsOutput, error) {
	var output chime.GetRetentionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetRetentionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetRetentionSettingsAsync(ctx workflow.Context, input *chime.GetRetentionSettingsInput) *ChimeGetRetentionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetRetentionSettings", input)
	return &ChimeGetRetentionSettingsFuture{Future: future}
}

func (a *ChimeStub) GetRoom(ctx workflow.Context, input *chime.GetRoomInput) (*chime.GetRoomOutput, error) {
	var output chime.GetRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetRoomAsync(ctx workflow.Context, input *chime.GetRoomInput) *ChimeGetRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetRoom", input)
	return &ChimeGetRoomFuture{Future: future}
}

func (a *ChimeStub) GetUser(ctx workflow.Context, input *chime.GetUserInput) (*chime.GetUserOutput, error) {
	var output chime.GetUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetUserAsync(ctx workflow.Context, input *chime.GetUserInput) *ChimeGetUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetUser", input)
	return &ChimeGetUserFuture{Future: future}
}

func (a *ChimeStub) GetUserSettings(ctx workflow.Context, input *chime.GetUserSettingsInput) (*chime.GetUserSettingsOutput, error) {
	var output chime.GetUserSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetUserSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetUserSettingsAsync(ctx workflow.Context, input *chime.GetUserSettingsInput) *ChimeGetUserSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetUserSettings", input)
	return &ChimeGetUserSettingsFuture{Future: future}
}

func (a *ChimeStub) GetVoiceConnector(ctx workflow.Context, input *chime.GetVoiceConnectorInput) (*chime.GetVoiceConnectorOutput, error) {
	var output chime.GetVoiceConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetVoiceConnectorAsync(ctx workflow.Context, input *chime.GetVoiceConnectorInput) *ChimeGetVoiceConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnector", input)
	return &ChimeGetVoiceConnectorFuture{Future: future}
}

func (a *ChimeStub) GetVoiceConnectorEmergencyCallingConfiguration(ctx workflow.Context, input *chime.GetVoiceConnectorEmergencyCallingConfigurationInput) (*chime.GetVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	var output chime.GetVoiceConnectorEmergencyCallingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorEmergencyCallingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetVoiceConnectorEmergencyCallingConfigurationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorEmergencyCallingConfigurationInput) *ChimeGetVoiceConnectorEmergencyCallingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorEmergencyCallingConfiguration", input)
	return &ChimeGetVoiceConnectorEmergencyCallingConfigurationFuture{Future: future}
}

func (a *ChimeStub) GetVoiceConnectorGroup(ctx workflow.Context, input *chime.GetVoiceConnectorGroupInput) (*chime.GetVoiceConnectorGroupOutput, error) {
	var output chime.GetVoiceConnectorGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.GetVoiceConnectorGroupInput) *ChimeGetVoiceConnectorGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorGroup", input)
	return &ChimeGetVoiceConnectorGroupFuture{Future: future}
}

func (a *ChimeStub) GetVoiceConnectorLoggingConfiguration(ctx workflow.Context, input *chime.GetVoiceConnectorLoggingConfigurationInput) (*chime.GetVoiceConnectorLoggingConfigurationOutput, error) {
	var output chime.GetVoiceConnectorLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetVoiceConnectorLoggingConfigurationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorLoggingConfigurationInput) *ChimeGetVoiceConnectorLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorLoggingConfiguration", input)
	return &ChimeGetVoiceConnectorLoggingConfigurationFuture{Future: future}
}

func (a *ChimeStub) GetVoiceConnectorOrigination(ctx workflow.Context, input *chime.GetVoiceConnectorOriginationInput) (*chime.GetVoiceConnectorOriginationOutput, error) {
	var output chime.GetVoiceConnectorOriginationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorOrigination", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetVoiceConnectorOriginationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorOriginationInput) *ChimeGetVoiceConnectorOriginationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorOrigination", input)
	return &ChimeGetVoiceConnectorOriginationFuture{Future: future}
}

func (a *ChimeStub) GetVoiceConnectorProxy(ctx workflow.Context, input *chime.GetVoiceConnectorProxyInput) (*chime.GetVoiceConnectorProxyOutput, error) {
	var output chime.GetVoiceConnectorProxyOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorProxy", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetVoiceConnectorProxyAsync(ctx workflow.Context, input *chime.GetVoiceConnectorProxyInput) *ChimeGetVoiceConnectorProxyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorProxy", input)
	return &ChimeGetVoiceConnectorProxyFuture{Future: future}
}

func (a *ChimeStub) GetVoiceConnectorStreamingConfiguration(ctx workflow.Context, input *chime.GetVoiceConnectorStreamingConfigurationInput) (*chime.GetVoiceConnectorStreamingConfigurationOutput, error) {
	var output chime.GetVoiceConnectorStreamingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorStreamingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetVoiceConnectorStreamingConfigurationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorStreamingConfigurationInput) *ChimeGetVoiceConnectorStreamingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorStreamingConfiguration", input)
	return &ChimeGetVoiceConnectorStreamingConfigurationFuture{Future: future}
}

func (a *ChimeStub) GetVoiceConnectorTermination(ctx workflow.Context, input *chime.GetVoiceConnectorTerminationInput) (*chime.GetVoiceConnectorTerminationOutput, error) {
	var output chime.GetVoiceConnectorTerminationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorTermination", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetVoiceConnectorTerminationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorTerminationInput) *ChimeGetVoiceConnectorTerminationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorTermination", input)
	return &ChimeGetVoiceConnectorTerminationFuture{Future: future}
}

func (a *ChimeStub) GetVoiceConnectorTerminationHealth(ctx workflow.Context, input *chime.GetVoiceConnectorTerminationHealthInput) (*chime.GetVoiceConnectorTerminationHealthOutput, error) {
	var output chime.GetVoiceConnectorTerminationHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorTerminationHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) GetVoiceConnectorTerminationHealthAsync(ctx workflow.Context, input *chime.GetVoiceConnectorTerminationHealthInput) *ChimeGetVoiceConnectorTerminationHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.GetVoiceConnectorTerminationHealth", input)
	return &ChimeGetVoiceConnectorTerminationHealthFuture{Future: future}
}

func (a *ChimeStub) InviteUsers(ctx workflow.Context, input *chime.InviteUsersInput) (*chime.InviteUsersOutput, error) {
	var output chime.InviteUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.InviteUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) InviteUsersAsync(ctx workflow.Context, input *chime.InviteUsersInput) *ChimeInviteUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.InviteUsers", input)
	return &ChimeInviteUsersFuture{Future: future}
}

func (a *ChimeStub) ListAccounts(ctx workflow.Context, input *chime.ListAccountsInput) (*chime.ListAccountsOutput, error) {
	var output chime.ListAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListAccountsAsync(ctx workflow.Context, input *chime.ListAccountsInput) *ChimeListAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListAccounts", input)
	return &ChimeListAccountsFuture{Future: future}
}

func (a *ChimeStub) ListAttendeeTags(ctx workflow.Context, input *chime.ListAttendeeTagsInput) (*chime.ListAttendeeTagsOutput, error) {
	var output chime.ListAttendeeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListAttendeeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListAttendeeTagsAsync(ctx workflow.Context, input *chime.ListAttendeeTagsInput) *ChimeListAttendeeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListAttendeeTags", input)
	return &ChimeListAttendeeTagsFuture{Future: future}
}

func (a *ChimeStub) ListAttendees(ctx workflow.Context, input *chime.ListAttendeesInput) (*chime.ListAttendeesOutput, error) {
	var output chime.ListAttendeesOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListAttendees", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListAttendeesAsync(ctx workflow.Context, input *chime.ListAttendeesInput) *ChimeListAttendeesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListAttendees", input)
	return &ChimeListAttendeesFuture{Future: future}
}

func (a *ChimeStub) ListBots(ctx workflow.Context, input *chime.ListBotsInput) (*chime.ListBotsOutput, error) {
	var output chime.ListBotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListBots", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListBotsAsync(ctx workflow.Context, input *chime.ListBotsInput) *ChimeListBotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListBots", input)
	return &ChimeListBotsFuture{Future: future}
}

func (a *ChimeStub) ListMeetingTags(ctx workflow.Context, input *chime.ListMeetingTagsInput) (*chime.ListMeetingTagsOutput, error) {
	var output chime.ListMeetingTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListMeetingTags", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListMeetingTagsAsync(ctx workflow.Context, input *chime.ListMeetingTagsInput) *ChimeListMeetingTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListMeetingTags", input)
	return &ChimeListMeetingTagsFuture{Future: future}
}

func (a *ChimeStub) ListMeetings(ctx workflow.Context, input *chime.ListMeetingsInput) (*chime.ListMeetingsOutput, error) {
	var output chime.ListMeetingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListMeetings", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListMeetingsAsync(ctx workflow.Context, input *chime.ListMeetingsInput) *ChimeListMeetingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListMeetings", input)
	return &ChimeListMeetingsFuture{Future: future}
}

func (a *ChimeStub) ListPhoneNumberOrders(ctx workflow.Context, input *chime.ListPhoneNumberOrdersInput) (*chime.ListPhoneNumberOrdersOutput, error) {
	var output chime.ListPhoneNumberOrdersOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListPhoneNumberOrders", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListPhoneNumberOrdersAsync(ctx workflow.Context, input *chime.ListPhoneNumberOrdersInput) *ChimeListPhoneNumberOrdersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListPhoneNumberOrders", input)
	return &ChimeListPhoneNumberOrdersFuture{Future: future}
}

func (a *ChimeStub) ListPhoneNumbers(ctx workflow.Context, input *chime.ListPhoneNumbersInput) (*chime.ListPhoneNumbersOutput, error) {
	var output chime.ListPhoneNumbersOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListPhoneNumbers", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListPhoneNumbersAsync(ctx workflow.Context, input *chime.ListPhoneNumbersInput) *ChimeListPhoneNumbersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListPhoneNumbers", input)
	return &ChimeListPhoneNumbersFuture{Future: future}
}

func (a *ChimeStub) ListProxySessions(ctx workflow.Context, input *chime.ListProxySessionsInput) (*chime.ListProxySessionsOutput, error) {
	var output chime.ListProxySessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListProxySessions", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListProxySessionsAsync(ctx workflow.Context, input *chime.ListProxySessionsInput) *ChimeListProxySessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListProxySessions", input)
	return &ChimeListProxySessionsFuture{Future: future}
}

func (a *ChimeStub) ListRoomMemberships(ctx workflow.Context, input *chime.ListRoomMembershipsInput) (*chime.ListRoomMembershipsOutput, error) {
	var output chime.ListRoomMembershipsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListRoomMemberships", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListRoomMembershipsAsync(ctx workflow.Context, input *chime.ListRoomMembershipsInput) *ChimeListRoomMembershipsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListRoomMemberships", input)
	return &ChimeListRoomMembershipsFuture{Future: future}
}

func (a *ChimeStub) ListRooms(ctx workflow.Context, input *chime.ListRoomsInput) (*chime.ListRoomsOutput, error) {
	var output chime.ListRoomsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListRooms", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListRoomsAsync(ctx workflow.Context, input *chime.ListRoomsInput) *ChimeListRoomsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListRooms", input)
	return &ChimeListRoomsFuture{Future: future}
}

func (a *ChimeStub) ListTagsForResource(ctx workflow.Context, input *chime.ListTagsForResourceInput) (*chime.ListTagsForResourceOutput, error) {
	var output chime.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListTagsForResourceAsync(ctx workflow.Context, input *chime.ListTagsForResourceInput) *ChimeListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListTagsForResource", input)
	return &ChimeListTagsForResourceFuture{Future: future}
}

func (a *ChimeStub) ListUsers(ctx workflow.Context, input *chime.ListUsersInput) (*chime.ListUsersOutput, error) {
	var output chime.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListUsersAsync(ctx workflow.Context, input *chime.ListUsersInput) *ChimeListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListUsers", input)
	return &ChimeListUsersFuture{Future: future}
}

func (a *ChimeStub) ListVoiceConnectorGroups(ctx workflow.Context, input *chime.ListVoiceConnectorGroupsInput) (*chime.ListVoiceConnectorGroupsOutput, error) {
	var output chime.ListVoiceConnectorGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListVoiceConnectorGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListVoiceConnectorGroupsAsync(ctx workflow.Context, input *chime.ListVoiceConnectorGroupsInput) *ChimeListVoiceConnectorGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListVoiceConnectorGroups", input)
	return &ChimeListVoiceConnectorGroupsFuture{Future: future}
}

func (a *ChimeStub) ListVoiceConnectorTerminationCredentials(ctx workflow.Context, input *chime.ListVoiceConnectorTerminationCredentialsInput) (*chime.ListVoiceConnectorTerminationCredentialsOutput, error) {
	var output chime.ListVoiceConnectorTerminationCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListVoiceConnectorTerminationCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListVoiceConnectorTerminationCredentialsAsync(ctx workflow.Context, input *chime.ListVoiceConnectorTerminationCredentialsInput) *ChimeListVoiceConnectorTerminationCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListVoiceConnectorTerminationCredentials", input)
	return &ChimeListVoiceConnectorTerminationCredentialsFuture{Future: future}
}

func (a *ChimeStub) ListVoiceConnectors(ctx workflow.Context, input *chime.ListVoiceConnectorsInput) (*chime.ListVoiceConnectorsOutput, error) {
	var output chime.ListVoiceConnectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ListVoiceConnectors", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ListVoiceConnectorsAsync(ctx workflow.Context, input *chime.ListVoiceConnectorsInput) *ChimeListVoiceConnectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ListVoiceConnectors", input)
	return &ChimeListVoiceConnectorsFuture{Future: future}
}

func (a *ChimeStub) LogoutUser(ctx workflow.Context, input *chime.LogoutUserInput) (*chime.LogoutUserOutput, error) {
	var output chime.LogoutUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.LogoutUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) LogoutUserAsync(ctx workflow.Context, input *chime.LogoutUserInput) *ChimeLogoutUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.LogoutUser", input)
	return &ChimeLogoutUserFuture{Future: future}
}

func (a *ChimeStub) PutEventsConfiguration(ctx workflow.Context, input *chime.PutEventsConfigurationInput) (*chime.PutEventsConfigurationOutput, error) {
	var output chime.PutEventsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.PutEventsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) PutEventsConfigurationAsync(ctx workflow.Context, input *chime.PutEventsConfigurationInput) *ChimePutEventsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.PutEventsConfiguration", input)
	return &ChimePutEventsConfigurationFuture{Future: future}
}

func (a *ChimeStub) PutRetentionSettings(ctx workflow.Context, input *chime.PutRetentionSettingsInput) (*chime.PutRetentionSettingsOutput, error) {
	var output chime.PutRetentionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.PutRetentionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) PutRetentionSettingsAsync(ctx workflow.Context, input *chime.PutRetentionSettingsInput) *ChimePutRetentionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.PutRetentionSettings", input)
	return &ChimePutRetentionSettingsFuture{Future: future}
}

func (a *ChimeStub) PutVoiceConnectorEmergencyCallingConfiguration(ctx workflow.Context, input *chime.PutVoiceConnectorEmergencyCallingConfigurationInput) (*chime.PutVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	var output chime.PutVoiceConnectorEmergencyCallingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorEmergencyCallingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) PutVoiceConnectorEmergencyCallingConfigurationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorEmergencyCallingConfigurationInput) *ChimePutVoiceConnectorEmergencyCallingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorEmergencyCallingConfiguration", input)
	return &ChimePutVoiceConnectorEmergencyCallingConfigurationFuture{Future: future}
}

func (a *ChimeStub) PutVoiceConnectorLoggingConfiguration(ctx workflow.Context, input *chime.PutVoiceConnectorLoggingConfigurationInput) (*chime.PutVoiceConnectorLoggingConfigurationOutput, error) {
	var output chime.PutVoiceConnectorLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) PutVoiceConnectorLoggingConfigurationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorLoggingConfigurationInput) *ChimePutVoiceConnectorLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorLoggingConfiguration", input)
	return &ChimePutVoiceConnectorLoggingConfigurationFuture{Future: future}
}

func (a *ChimeStub) PutVoiceConnectorOrigination(ctx workflow.Context, input *chime.PutVoiceConnectorOriginationInput) (*chime.PutVoiceConnectorOriginationOutput, error) {
	var output chime.PutVoiceConnectorOriginationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorOrigination", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) PutVoiceConnectorOriginationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorOriginationInput) *ChimePutVoiceConnectorOriginationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorOrigination", input)
	return &ChimePutVoiceConnectorOriginationFuture{Future: future}
}

func (a *ChimeStub) PutVoiceConnectorProxy(ctx workflow.Context, input *chime.PutVoiceConnectorProxyInput) (*chime.PutVoiceConnectorProxyOutput, error) {
	var output chime.PutVoiceConnectorProxyOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorProxy", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) PutVoiceConnectorProxyAsync(ctx workflow.Context, input *chime.PutVoiceConnectorProxyInput) *ChimePutVoiceConnectorProxyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorProxy", input)
	return &ChimePutVoiceConnectorProxyFuture{Future: future}
}

func (a *ChimeStub) PutVoiceConnectorStreamingConfiguration(ctx workflow.Context, input *chime.PutVoiceConnectorStreamingConfigurationInput) (*chime.PutVoiceConnectorStreamingConfigurationOutput, error) {
	var output chime.PutVoiceConnectorStreamingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorStreamingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) PutVoiceConnectorStreamingConfigurationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorStreamingConfigurationInput) *ChimePutVoiceConnectorStreamingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorStreamingConfiguration", input)
	return &ChimePutVoiceConnectorStreamingConfigurationFuture{Future: future}
}

func (a *ChimeStub) PutVoiceConnectorTermination(ctx workflow.Context, input *chime.PutVoiceConnectorTerminationInput) (*chime.PutVoiceConnectorTerminationOutput, error) {
	var output chime.PutVoiceConnectorTerminationOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorTermination", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) PutVoiceConnectorTerminationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorTerminationInput) *ChimePutVoiceConnectorTerminationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorTermination", input)
	return &ChimePutVoiceConnectorTerminationFuture{Future: future}
}

func (a *ChimeStub) PutVoiceConnectorTerminationCredentials(ctx workflow.Context, input *chime.PutVoiceConnectorTerminationCredentialsInput) (*chime.PutVoiceConnectorTerminationCredentialsOutput, error) {
	var output chime.PutVoiceConnectorTerminationCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorTerminationCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) PutVoiceConnectorTerminationCredentialsAsync(ctx workflow.Context, input *chime.PutVoiceConnectorTerminationCredentialsInput) *ChimePutVoiceConnectorTerminationCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.PutVoiceConnectorTerminationCredentials", input)
	return &ChimePutVoiceConnectorTerminationCredentialsFuture{Future: future}
}

func (a *ChimeStub) RedactConversationMessage(ctx workflow.Context, input *chime.RedactConversationMessageInput) (*chime.RedactConversationMessageOutput, error) {
	var output chime.RedactConversationMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.RedactConversationMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) RedactConversationMessageAsync(ctx workflow.Context, input *chime.RedactConversationMessageInput) *ChimeRedactConversationMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.RedactConversationMessage", input)
	return &ChimeRedactConversationMessageFuture{Future: future}
}

func (a *ChimeStub) RedactRoomMessage(ctx workflow.Context, input *chime.RedactRoomMessageInput) (*chime.RedactRoomMessageOutput, error) {
	var output chime.RedactRoomMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.RedactRoomMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) RedactRoomMessageAsync(ctx workflow.Context, input *chime.RedactRoomMessageInput) *ChimeRedactRoomMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.RedactRoomMessage", input)
	return &ChimeRedactRoomMessageFuture{Future: future}
}

func (a *ChimeStub) RegenerateSecurityToken(ctx workflow.Context, input *chime.RegenerateSecurityTokenInput) (*chime.RegenerateSecurityTokenOutput, error) {
	var output chime.RegenerateSecurityTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.RegenerateSecurityToken", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) RegenerateSecurityTokenAsync(ctx workflow.Context, input *chime.RegenerateSecurityTokenInput) *ChimeRegenerateSecurityTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.RegenerateSecurityToken", input)
	return &ChimeRegenerateSecurityTokenFuture{Future: future}
}

func (a *ChimeStub) ResetPersonalPIN(ctx workflow.Context, input *chime.ResetPersonalPINInput) (*chime.ResetPersonalPINOutput, error) {
	var output chime.ResetPersonalPINOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.ResetPersonalPIN", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) ResetPersonalPINAsync(ctx workflow.Context, input *chime.ResetPersonalPINInput) *ChimeResetPersonalPINFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.ResetPersonalPIN", input)
	return &ChimeResetPersonalPINFuture{Future: future}
}

func (a *ChimeStub) RestorePhoneNumber(ctx workflow.Context, input *chime.RestorePhoneNumberInput) (*chime.RestorePhoneNumberOutput, error) {
	var output chime.RestorePhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.RestorePhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) RestorePhoneNumberAsync(ctx workflow.Context, input *chime.RestorePhoneNumberInput) *ChimeRestorePhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.RestorePhoneNumber", input)
	return &ChimeRestorePhoneNumberFuture{Future: future}
}

func (a *ChimeStub) SearchAvailablePhoneNumbers(ctx workflow.Context, input *chime.SearchAvailablePhoneNumbersInput) (*chime.SearchAvailablePhoneNumbersOutput, error) {
	var output chime.SearchAvailablePhoneNumbersOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.SearchAvailablePhoneNumbers", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) SearchAvailablePhoneNumbersAsync(ctx workflow.Context, input *chime.SearchAvailablePhoneNumbersInput) *ChimeSearchAvailablePhoneNumbersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.SearchAvailablePhoneNumbers", input)
	return &ChimeSearchAvailablePhoneNumbersFuture{Future: future}
}

func (a *ChimeStub) TagAttendee(ctx workflow.Context, input *chime.TagAttendeeInput) (*chime.TagAttendeeOutput, error) {
	var output chime.TagAttendeeOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.TagAttendee", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) TagAttendeeAsync(ctx workflow.Context, input *chime.TagAttendeeInput) *ChimeTagAttendeeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.TagAttendee", input)
	return &ChimeTagAttendeeFuture{Future: future}
}

func (a *ChimeStub) TagMeeting(ctx workflow.Context, input *chime.TagMeetingInput) (*chime.TagMeetingOutput, error) {
	var output chime.TagMeetingOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.TagMeeting", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) TagMeetingAsync(ctx workflow.Context, input *chime.TagMeetingInput) *ChimeTagMeetingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.TagMeeting", input)
	return &ChimeTagMeetingFuture{Future: future}
}

func (a *ChimeStub) TagResource(ctx workflow.Context, input *chime.TagResourceInput) (*chime.TagResourceOutput, error) {
	var output chime.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) TagResourceAsync(ctx workflow.Context, input *chime.TagResourceInput) *ChimeTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.TagResource", input)
	return &ChimeTagResourceFuture{Future: future}
}

func (a *ChimeStub) UntagAttendee(ctx workflow.Context, input *chime.UntagAttendeeInput) (*chime.UntagAttendeeOutput, error) {
	var output chime.UntagAttendeeOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UntagAttendee", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UntagAttendeeAsync(ctx workflow.Context, input *chime.UntagAttendeeInput) *ChimeUntagAttendeeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UntagAttendee", input)
	return &ChimeUntagAttendeeFuture{Future: future}
}

func (a *ChimeStub) UntagMeeting(ctx workflow.Context, input *chime.UntagMeetingInput) (*chime.UntagMeetingOutput, error) {
	var output chime.UntagMeetingOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UntagMeeting", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UntagMeetingAsync(ctx workflow.Context, input *chime.UntagMeetingInput) *ChimeUntagMeetingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UntagMeeting", input)
	return &ChimeUntagMeetingFuture{Future: future}
}

func (a *ChimeStub) UntagResource(ctx workflow.Context, input *chime.UntagResourceInput) (*chime.UntagResourceOutput, error) {
	var output chime.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UntagResourceAsync(ctx workflow.Context, input *chime.UntagResourceInput) *ChimeUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UntagResource", input)
	return &ChimeUntagResourceFuture{Future: future}
}

func (a *ChimeStub) UpdateAccount(ctx workflow.Context, input *chime.UpdateAccountInput) (*chime.UpdateAccountOutput, error) {
	var output chime.UpdateAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdateAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdateAccountAsync(ctx workflow.Context, input *chime.UpdateAccountInput) *ChimeUpdateAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdateAccount", input)
	return &ChimeUpdateAccountFuture{Future: future}
}

func (a *ChimeStub) UpdateAccountSettings(ctx workflow.Context, input *chime.UpdateAccountSettingsInput) (*chime.UpdateAccountSettingsOutput, error) {
	var output chime.UpdateAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdateAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdateAccountSettingsAsync(ctx workflow.Context, input *chime.UpdateAccountSettingsInput) *ChimeUpdateAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdateAccountSettings", input)
	return &ChimeUpdateAccountSettingsFuture{Future: future}
}

func (a *ChimeStub) UpdateBot(ctx workflow.Context, input *chime.UpdateBotInput) (*chime.UpdateBotOutput, error) {
	var output chime.UpdateBotOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdateBot", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdateBotAsync(ctx workflow.Context, input *chime.UpdateBotInput) *ChimeUpdateBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdateBot", input)
	return &ChimeUpdateBotFuture{Future: future}
}

func (a *ChimeStub) UpdateGlobalSettings(ctx workflow.Context, input *chime.UpdateGlobalSettingsInput) (*chime.UpdateGlobalSettingsOutput, error) {
	var output chime.UpdateGlobalSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdateGlobalSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdateGlobalSettingsAsync(ctx workflow.Context, input *chime.UpdateGlobalSettingsInput) *ChimeUpdateGlobalSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdateGlobalSettings", input)
	return &ChimeUpdateGlobalSettingsFuture{Future: future}
}

func (a *ChimeStub) UpdatePhoneNumber(ctx workflow.Context, input *chime.UpdatePhoneNumberInput) (*chime.UpdatePhoneNumberOutput, error) {
	var output chime.UpdatePhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdatePhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdatePhoneNumberAsync(ctx workflow.Context, input *chime.UpdatePhoneNumberInput) *ChimeUpdatePhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdatePhoneNumber", input)
	return &ChimeUpdatePhoneNumberFuture{Future: future}
}

func (a *ChimeStub) UpdatePhoneNumberSettings(ctx workflow.Context, input *chime.UpdatePhoneNumberSettingsInput) (*chime.UpdatePhoneNumberSettingsOutput, error) {
	var output chime.UpdatePhoneNumberSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdatePhoneNumberSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdatePhoneNumberSettingsAsync(ctx workflow.Context, input *chime.UpdatePhoneNumberSettingsInput) *ChimeUpdatePhoneNumberSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdatePhoneNumberSettings", input)
	return &ChimeUpdatePhoneNumberSettingsFuture{Future: future}
}

func (a *ChimeStub) UpdateProxySession(ctx workflow.Context, input *chime.UpdateProxySessionInput) (*chime.UpdateProxySessionOutput, error) {
	var output chime.UpdateProxySessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdateProxySession", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdateProxySessionAsync(ctx workflow.Context, input *chime.UpdateProxySessionInput) *ChimeUpdateProxySessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdateProxySession", input)
	return &ChimeUpdateProxySessionFuture{Future: future}
}

func (a *ChimeStub) UpdateRoom(ctx workflow.Context, input *chime.UpdateRoomInput) (*chime.UpdateRoomOutput, error) {
	var output chime.UpdateRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdateRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdateRoomAsync(ctx workflow.Context, input *chime.UpdateRoomInput) *ChimeUpdateRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdateRoom", input)
	return &ChimeUpdateRoomFuture{Future: future}
}

func (a *ChimeStub) UpdateRoomMembership(ctx workflow.Context, input *chime.UpdateRoomMembershipInput) (*chime.UpdateRoomMembershipOutput, error) {
	var output chime.UpdateRoomMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdateRoomMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdateRoomMembershipAsync(ctx workflow.Context, input *chime.UpdateRoomMembershipInput) *ChimeUpdateRoomMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdateRoomMembership", input)
	return &ChimeUpdateRoomMembershipFuture{Future: future}
}

func (a *ChimeStub) UpdateUser(ctx workflow.Context, input *chime.UpdateUserInput) (*chime.UpdateUserOutput, error) {
	var output chime.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdateUserAsync(ctx workflow.Context, input *chime.UpdateUserInput) *ChimeUpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdateUser", input)
	return &ChimeUpdateUserFuture{Future: future}
}

func (a *ChimeStub) UpdateUserSettings(ctx workflow.Context, input *chime.UpdateUserSettingsInput) (*chime.UpdateUserSettingsOutput, error) {
	var output chime.UpdateUserSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdateUserSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdateUserSettingsAsync(ctx workflow.Context, input *chime.UpdateUserSettingsInput) *ChimeUpdateUserSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdateUserSettings", input)
	return &ChimeUpdateUserSettingsFuture{Future: future}
}

func (a *ChimeStub) UpdateVoiceConnector(ctx workflow.Context, input *chime.UpdateVoiceConnectorInput) (*chime.UpdateVoiceConnectorOutput, error) {
	var output chime.UpdateVoiceConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdateVoiceConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdateVoiceConnectorAsync(ctx workflow.Context, input *chime.UpdateVoiceConnectorInput) *ChimeUpdateVoiceConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdateVoiceConnector", input)
	return &ChimeUpdateVoiceConnectorFuture{Future: future}
}

func (a *ChimeStub) UpdateVoiceConnectorGroup(ctx workflow.Context, input *chime.UpdateVoiceConnectorGroupInput) (*chime.UpdateVoiceConnectorGroupOutput, error) {
	var output chime.UpdateVoiceConnectorGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.chime.UpdateVoiceConnectorGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *ChimeStub) UpdateVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.UpdateVoiceConnectorGroupInput) *ChimeUpdateVoiceConnectorGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.chime.UpdateVoiceConnectorGroup", input)
	return &ChimeUpdateVoiceConnectorGroupFuture{Future: future}
}
