// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/kinesisanalyticsv2"
	"go.temporal.io/sdk/workflow"
)

type KinesisAnalyticsV2Client interface {
	AddApplicationCloudWatchLoggingOption(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput) (*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput, error)
	AddApplicationCloudWatchLoggingOptionAsync(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput) *Kinesisanalyticsv2AddApplicationCloudWatchLoggingOptionFuture

	AddApplicationInput(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationInputInput) (*kinesisanalyticsv2.AddApplicationInputOutput, error)
	AddApplicationInputAsync(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationInputInput) *Kinesisanalyticsv2AddApplicationInputFuture

	AddApplicationInputProcessingConfiguration(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput) (*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput, error)
	AddApplicationInputProcessingConfigurationAsync(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput) *Kinesisanalyticsv2AddApplicationInputProcessingConfigurationFuture

	AddApplicationOutput(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationOutputInput) (*kinesisanalyticsv2.AddApplicationOutputOutput, error)
	AddApplicationOutputAsync(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationOutputInput) *Kinesisanalyticsv2AddApplicationOutputFuture

	AddApplicationReferenceDataSource(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput) (*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput, error)
	AddApplicationReferenceDataSourceAsync(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput) *Kinesisanalyticsv2AddApplicationReferenceDataSourceFuture

	AddApplicationVpcConfiguration(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationVpcConfigurationInput) (*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput, error)
	AddApplicationVpcConfigurationAsync(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationVpcConfigurationInput) *Kinesisanalyticsv2AddApplicationVpcConfigurationFuture

	CreateApplication(ctx workflow.Context, input *kinesisanalyticsv2.CreateApplicationInput) (*kinesisanalyticsv2.CreateApplicationOutput, error)
	CreateApplicationAsync(ctx workflow.Context, input *kinesisanalyticsv2.CreateApplicationInput) *Kinesisanalyticsv2CreateApplicationFuture

	CreateApplicationSnapshot(ctx workflow.Context, input *kinesisanalyticsv2.CreateApplicationSnapshotInput) (*kinesisanalyticsv2.CreateApplicationSnapshotOutput, error)
	CreateApplicationSnapshotAsync(ctx workflow.Context, input *kinesisanalyticsv2.CreateApplicationSnapshotInput) *Kinesisanalyticsv2CreateApplicationSnapshotFuture

	DeleteApplication(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationInput) (*kinesisanalyticsv2.DeleteApplicationOutput, error)
	DeleteApplicationAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationInput) *Kinesisanalyticsv2DeleteApplicationFuture

	DeleteApplicationCloudWatchLoggingOption(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput) (*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput, error)
	DeleteApplicationCloudWatchLoggingOptionAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput) *Kinesisanalyticsv2DeleteApplicationCloudWatchLoggingOptionFuture

	DeleteApplicationInputProcessingConfiguration(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput) (*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput, error)
	DeleteApplicationInputProcessingConfigurationAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput) *Kinesisanalyticsv2DeleteApplicationInputProcessingConfigurationFuture

	DeleteApplicationOutput(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationOutputInput) (*kinesisanalyticsv2.DeleteApplicationOutputOutput, error)
	DeleteApplicationOutputAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationOutputInput) *Kinesisanalyticsv2DeleteApplicationOutputFuture

	DeleteApplicationReferenceDataSource(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput) (*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput, error)
	DeleteApplicationReferenceDataSourceAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput) *Kinesisanalyticsv2DeleteApplicationReferenceDataSourceFuture

	DeleteApplicationSnapshot(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationSnapshotInput) (*kinesisanalyticsv2.DeleteApplicationSnapshotOutput, error)
	DeleteApplicationSnapshotAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationSnapshotInput) *Kinesisanalyticsv2DeleteApplicationSnapshotFuture

	DeleteApplicationVpcConfiguration(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput) (*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput, error)
	DeleteApplicationVpcConfigurationAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput) *Kinesisanalyticsv2DeleteApplicationVpcConfigurationFuture

	DescribeApplication(ctx workflow.Context, input *kinesisanalyticsv2.DescribeApplicationInput) (*kinesisanalyticsv2.DescribeApplicationOutput, error)
	DescribeApplicationAsync(ctx workflow.Context, input *kinesisanalyticsv2.DescribeApplicationInput) *Kinesisanalyticsv2DescribeApplicationFuture

	DescribeApplicationSnapshot(ctx workflow.Context, input *kinesisanalyticsv2.DescribeApplicationSnapshotInput) (*kinesisanalyticsv2.DescribeApplicationSnapshotOutput, error)
	DescribeApplicationSnapshotAsync(ctx workflow.Context, input *kinesisanalyticsv2.DescribeApplicationSnapshotInput) *Kinesisanalyticsv2DescribeApplicationSnapshotFuture

	DiscoverInputSchema(ctx workflow.Context, input *kinesisanalyticsv2.DiscoverInputSchemaInput) (*kinesisanalyticsv2.DiscoverInputSchemaOutput, error)
	DiscoverInputSchemaAsync(ctx workflow.Context, input *kinesisanalyticsv2.DiscoverInputSchemaInput) *Kinesisanalyticsv2DiscoverInputSchemaFuture

	ListApplicationSnapshots(ctx workflow.Context, input *kinesisanalyticsv2.ListApplicationSnapshotsInput) (*kinesisanalyticsv2.ListApplicationSnapshotsOutput, error)
	ListApplicationSnapshotsAsync(ctx workflow.Context, input *kinesisanalyticsv2.ListApplicationSnapshotsInput) *Kinesisanalyticsv2ListApplicationSnapshotsFuture

	ListApplications(ctx workflow.Context, input *kinesisanalyticsv2.ListApplicationsInput) (*kinesisanalyticsv2.ListApplicationsOutput, error)
	ListApplicationsAsync(ctx workflow.Context, input *kinesisanalyticsv2.ListApplicationsInput) *Kinesisanalyticsv2ListApplicationsFuture

	ListTagsForResource(ctx workflow.Context, input *kinesisanalyticsv2.ListTagsForResourceInput) (*kinesisanalyticsv2.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *kinesisanalyticsv2.ListTagsForResourceInput) *Kinesisanalyticsv2ListTagsForResourceFuture

	StartApplication(ctx workflow.Context, input *kinesisanalyticsv2.StartApplicationInput) (*kinesisanalyticsv2.StartApplicationOutput, error)
	StartApplicationAsync(ctx workflow.Context, input *kinesisanalyticsv2.StartApplicationInput) *Kinesisanalyticsv2StartApplicationFuture

	StopApplication(ctx workflow.Context, input *kinesisanalyticsv2.StopApplicationInput) (*kinesisanalyticsv2.StopApplicationOutput, error)
	StopApplicationAsync(ctx workflow.Context, input *kinesisanalyticsv2.StopApplicationInput) *Kinesisanalyticsv2StopApplicationFuture

	TagResource(ctx workflow.Context, input *kinesisanalyticsv2.TagResourceInput) (*kinesisanalyticsv2.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *kinesisanalyticsv2.TagResourceInput) *Kinesisanalyticsv2TagResourceFuture

	UntagResource(ctx workflow.Context, input *kinesisanalyticsv2.UntagResourceInput) (*kinesisanalyticsv2.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *kinesisanalyticsv2.UntagResourceInput) *Kinesisanalyticsv2UntagResourceFuture

	UpdateApplication(ctx workflow.Context, input *kinesisanalyticsv2.UpdateApplicationInput) (*kinesisanalyticsv2.UpdateApplicationOutput, error)
	UpdateApplicationAsync(ctx workflow.Context, input *kinesisanalyticsv2.UpdateApplicationInput) *Kinesisanalyticsv2UpdateApplicationFuture
}

type KinesisAnalyticsV2Stub struct{}

func NewKinesisAnalyticsV2Stub() KinesisAnalyticsV2Client {
	return &KinesisAnalyticsV2Stub{}
}

type Kinesisanalyticsv2AddApplicationCloudWatchLoggingOptionFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2AddApplicationCloudWatchLoggingOptionFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput, error) {
	var output kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2AddApplicationInputFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2AddApplicationInputFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.AddApplicationInputOutput, error) {
	var output kinesisanalyticsv2.AddApplicationInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2AddApplicationInputProcessingConfigurationFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2AddApplicationInputProcessingConfigurationFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput, error) {
	var output kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2AddApplicationOutputFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2AddApplicationOutputFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.AddApplicationOutputOutput, error) {
	var output kinesisanalyticsv2.AddApplicationOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2AddApplicationReferenceDataSourceFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2AddApplicationReferenceDataSourceFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput, error) {
	var output kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2AddApplicationVpcConfigurationFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2AddApplicationVpcConfigurationFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput, error) {
	var output kinesisanalyticsv2.AddApplicationVpcConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2CreateApplicationFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2CreateApplicationFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.CreateApplicationOutput, error) {
	var output kinesisanalyticsv2.CreateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2CreateApplicationSnapshotFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2CreateApplicationSnapshotFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.CreateApplicationSnapshotOutput, error) {
	var output kinesisanalyticsv2.CreateApplicationSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2DeleteApplicationFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2DeleteApplicationFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.DeleteApplicationOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2DeleteApplicationCloudWatchLoggingOptionFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2DeleteApplicationCloudWatchLoggingOptionFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2DeleteApplicationInputProcessingConfigurationFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2DeleteApplicationInputProcessingConfigurationFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2DeleteApplicationOutputFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2DeleteApplicationOutputFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.DeleteApplicationOutputOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2DeleteApplicationReferenceDataSourceFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2DeleteApplicationReferenceDataSourceFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2DeleteApplicationSnapshotFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2DeleteApplicationSnapshotFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.DeleteApplicationSnapshotOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2DeleteApplicationVpcConfigurationFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2DeleteApplicationVpcConfigurationFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2DescribeApplicationFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2DescribeApplicationFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.DescribeApplicationOutput, error) {
	var output kinesisanalyticsv2.DescribeApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2DescribeApplicationSnapshotFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2DescribeApplicationSnapshotFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.DescribeApplicationSnapshotOutput, error) {
	var output kinesisanalyticsv2.DescribeApplicationSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2DiscoverInputSchemaFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2DiscoverInputSchemaFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.DiscoverInputSchemaOutput, error) {
	var output kinesisanalyticsv2.DiscoverInputSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2ListApplicationSnapshotsFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2ListApplicationSnapshotsFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.ListApplicationSnapshotsOutput, error) {
	var output kinesisanalyticsv2.ListApplicationSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2ListApplicationsFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2ListApplicationsFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.ListApplicationsOutput, error) {
	var output kinesisanalyticsv2.ListApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2ListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2ListTagsForResourceFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.ListTagsForResourceOutput, error) {
	var output kinesisanalyticsv2.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2StartApplicationFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2StartApplicationFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.StartApplicationOutput, error) {
	var output kinesisanalyticsv2.StartApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2StopApplicationFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2StopApplicationFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.StopApplicationOutput, error) {
	var output kinesisanalyticsv2.StopApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2TagResourceFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2TagResourceFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.TagResourceOutput, error) {
	var output kinesisanalyticsv2.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2UntagResourceFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2UntagResourceFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.UntagResourceOutput, error) {
	var output kinesisanalyticsv2.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Kinesisanalyticsv2UpdateApplicationFuture struct {
	Future workflow.Future
}

func (r *Kinesisanalyticsv2UpdateApplicationFuture) Get(ctx workflow.Context) (*kinesisanalyticsv2.UpdateApplicationOutput, error) {
	var output kinesisanalyticsv2.UpdateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) AddApplicationCloudWatchLoggingOption(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput) (*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput, error) {
	var output kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.AddApplicationCloudWatchLoggingOption", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) AddApplicationCloudWatchLoggingOptionAsync(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput) *Kinesisanalyticsv2AddApplicationCloudWatchLoggingOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.AddApplicationCloudWatchLoggingOption", input)
	return &Kinesisanalyticsv2AddApplicationCloudWatchLoggingOptionFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) AddApplicationInput(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationInputInput) (*kinesisanalyticsv2.AddApplicationInputOutput, error) {
	var output kinesisanalyticsv2.AddApplicationInputOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.AddApplicationInput", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) AddApplicationInputAsync(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationInputInput) *Kinesisanalyticsv2AddApplicationInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.AddApplicationInput", input)
	return &Kinesisanalyticsv2AddApplicationInputFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) AddApplicationInputProcessingConfiguration(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput) (*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput, error) {
	var output kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.AddApplicationInputProcessingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) AddApplicationInputProcessingConfigurationAsync(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput) *Kinesisanalyticsv2AddApplicationInputProcessingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.AddApplicationInputProcessingConfiguration", input)
	return &Kinesisanalyticsv2AddApplicationInputProcessingConfigurationFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) AddApplicationOutput(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationOutputInput) (*kinesisanalyticsv2.AddApplicationOutputOutput, error) {
	var output kinesisanalyticsv2.AddApplicationOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.AddApplicationOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) AddApplicationOutputAsync(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationOutputInput) *Kinesisanalyticsv2AddApplicationOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.AddApplicationOutput", input)
	return &Kinesisanalyticsv2AddApplicationOutputFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) AddApplicationReferenceDataSource(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput) (*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput, error) {
	var output kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.AddApplicationReferenceDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) AddApplicationReferenceDataSourceAsync(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput) *Kinesisanalyticsv2AddApplicationReferenceDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.AddApplicationReferenceDataSource", input)
	return &Kinesisanalyticsv2AddApplicationReferenceDataSourceFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) AddApplicationVpcConfiguration(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationVpcConfigurationInput) (*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput, error) {
	var output kinesisanalyticsv2.AddApplicationVpcConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.AddApplicationVpcConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) AddApplicationVpcConfigurationAsync(ctx workflow.Context, input *kinesisanalyticsv2.AddApplicationVpcConfigurationInput) *Kinesisanalyticsv2AddApplicationVpcConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.AddApplicationVpcConfiguration", input)
	return &Kinesisanalyticsv2AddApplicationVpcConfigurationFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) CreateApplication(ctx workflow.Context, input *kinesisanalyticsv2.CreateApplicationInput) (*kinesisanalyticsv2.CreateApplicationOutput, error) {
	var output kinesisanalyticsv2.CreateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) CreateApplicationAsync(ctx workflow.Context, input *kinesisanalyticsv2.CreateApplicationInput) *Kinesisanalyticsv2CreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.CreateApplication", input)
	return &Kinesisanalyticsv2CreateApplicationFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) CreateApplicationSnapshot(ctx workflow.Context, input *kinesisanalyticsv2.CreateApplicationSnapshotInput) (*kinesisanalyticsv2.CreateApplicationSnapshotOutput, error) {
	var output kinesisanalyticsv2.CreateApplicationSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.CreateApplicationSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) CreateApplicationSnapshotAsync(ctx workflow.Context, input *kinesisanalyticsv2.CreateApplicationSnapshotInput) *Kinesisanalyticsv2CreateApplicationSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.CreateApplicationSnapshot", input)
	return &Kinesisanalyticsv2CreateApplicationSnapshotFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) DeleteApplication(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationInput) (*kinesisanalyticsv2.DeleteApplicationOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationInput) *Kinesisanalyticsv2DeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplication", input)
	return &Kinesisanalyticsv2DeleteApplicationFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationCloudWatchLoggingOption(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput) (*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOption", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationCloudWatchLoggingOptionAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput) *Kinesisanalyticsv2DeleteApplicationCloudWatchLoggingOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOption", input)
	return &Kinesisanalyticsv2DeleteApplicationCloudWatchLoggingOptionFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationInputProcessingConfiguration(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput) (*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplicationInputProcessingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationInputProcessingConfigurationAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput) *Kinesisanalyticsv2DeleteApplicationInputProcessingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplicationInputProcessingConfiguration", input)
	return &Kinesisanalyticsv2DeleteApplicationInputProcessingConfigurationFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationOutput(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationOutputInput) (*kinesisanalyticsv2.DeleteApplicationOutputOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplicationOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationOutputAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationOutputInput) *Kinesisanalyticsv2DeleteApplicationOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplicationOutput", input)
	return &Kinesisanalyticsv2DeleteApplicationOutputFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationReferenceDataSource(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput) (*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplicationReferenceDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationReferenceDataSourceAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput) *Kinesisanalyticsv2DeleteApplicationReferenceDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplicationReferenceDataSource", input)
	return &Kinesisanalyticsv2DeleteApplicationReferenceDataSourceFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationSnapshot(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationSnapshotInput) (*kinesisanalyticsv2.DeleteApplicationSnapshotOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplicationSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationSnapshotAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationSnapshotInput) *Kinesisanalyticsv2DeleteApplicationSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplicationSnapshot", input)
	return &Kinesisanalyticsv2DeleteApplicationSnapshotFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationVpcConfiguration(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput) (*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput, error) {
	var output kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplicationVpcConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) DeleteApplicationVpcConfigurationAsync(ctx workflow.Context, input *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput) *Kinesisanalyticsv2DeleteApplicationVpcConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DeleteApplicationVpcConfiguration", input)
	return &Kinesisanalyticsv2DeleteApplicationVpcConfigurationFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) DescribeApplication(ctx workflow.Context, input *kinesisanalyticsv2.DescribeApplicationInput) (*kinesisanalyticsv2.DescribeApplicationOutput, error) {
	var output kinesisanalyticsv2.DescribeApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DescribeApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) DescribeApplicationAsync(ctx workflow.Context, input *kinesisanalyticsv2.DescribeApplicationInput) *Kinesisanalyticsv2DescribeApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DescribeApplication", input)
	return &Kinesisanalyticsv2DescribeApplicationFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) DescribeApplicationSnapshot(ctx workflow.Context, input *kinesisanalyticsv2.DescribeApplicationSnapshotInput) (*kinesisanalyticsv2.DescribeApplicationSnapshotOutput, error) {
	var output kinesisanalyticsv2.DescribeApplicationSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DescribeApplicationSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) DescribeApplicationSnapshotAsync(ctx workflow.Context, input *kinesisanalyticsv2.DescribeApplicationSnapshotInput) *Kinesisanalyticsv2DescribeApplicationSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DescribeApplicationSnapshot", input)
	return &Kinesisanalyticsv2DescribeApplicationSnapshotFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) DiscoverInputSchema(ctx workflow.Context, input *kinesisanalyticsv2.DiscoverInputSchemaInput) (*kinesisanalyticsv2.DiscoverInputSchemaOutput, error) {
	var output kinesisanalyticsv2.DiscoverInputSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DiscoverInputSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) DiscoverInputSchemaAsync(ctx workflow.Context, input *kinesisanalyticsv2.DiscoverInputSchemaInput) *Kinesisanalyticsv2DiscoverInputSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.DiscoverInputSchema", input)
	return &Kinesisanalyticsv2DiscoverInputSchemaFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) ListApplicationSnapshots(ctx workflow.Context, input *kinesisanalyticsv2.ListApplicationSnapshotsInput) (*kinesisanalyticsv2.ListApplicationSnapshotsOutput, error) {
	var output kinesisanalyticsv2.ListApplicationSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.ListApplicationSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) ListApplicationSnapshotsAsync(ctx workflow.Context, input *kinesisanalyticsv2.ListApplicationSnapshotsInput) *Kinesisanalyticsv2ListApplicationSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.ListApplicationSnapshots", input)
	return &Kinesisanalyticsv2ListApplicationSnapshotsFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) ListApplications(ctx workflow.Context, input *kinesisanalyticsv2.ListApplicationsInput) (*kinesisanalyticsv2.ListApplicationsOutput, error) {
	var output kinesisanalyticsv2.ListApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.ListApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) ListApplicationsAsync(ctx workflow.Context, input *kinesisanalyticsv2.ListApplicationsInput) *Kinesisanalyticsv2ListApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.ListApplications", input)
	return &Kinesisanalyticsv2ListApplicationsFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) ListTagsForResource(ctx workflow.Context, input *kinesisanalyticsv2.ListTagsForResourceInput) (*kinesisanalyticsv2.ListTagsForResourceOutput, error) {
	var output kinesisanalyticsv2.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) ListTagsForResourceAsync(ctx workflow.Context, input *kinesisanalyticsv2.ListTagsForResourceInput) *Kinesisanalyticsv2ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.ListTagsForResource", input)
	return &Kinesisanalyticsv2ListTagsForResourceFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) StartApplication(ctx workflow.Context, input *kinesisanalyticsv2.StartApplicationInput) (*kinesisanalyticsv2.StartApplicationOutput, error) {
	var output kinesisanalyticsv2.StartApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.StartApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) StartApplicationAsync(ctx workflow.Context, input *kinesisanalyticsv2.StartApplicationInput) *Kinesisanalyticsv2StartApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.StartApplication", input)
	return &Kinesisanalyticsv2StartApplicationFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) StopApplication(ctx workflow.Context, input *kinesisanalyticsv2.StopApplicationInput) (*kinesisanalyticsv2.StopApplicationOutput, error) {
	var output kinesisanalyticsv2.StopApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.StopApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) StopApplicationAsync(ctx workflow.Context, input *kinesisanalyticsv2.StopApplicationInput) *Kinesisanalyticsv2StopApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.StopApplication", input)
	return &Kinesisanalyticsv2StopApplicationFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) TagResource(ctx workflow.Context, input *kinesisanalyticsv2.TagResourceInput) (*kinesisanalyticsv2.TagResourceOutput, error) {
	var output kinesisanalyticsv2.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) TagResourceAsync(ctx workflow.Context, input *kinesisanalyticsv2.TagResourceInput) *Kinesisanalyticsv2TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.TagResource", input)
	return &Kinesisanalyticsv2TagResourceFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) UntagResource(ctx workflow.Context, input *kinesisanalyticsv2.UntagResourceInput) (*kinesisanalyticsv2.UntagResourceOutput, error) {
	var output kinesisanalyticsv2.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) UntagResourceAsync(ctx workflow.Context, input *kinesisanalyticsv2.UntagResourceInput) *Kinesisanalyticsv2UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.UntagResource", input)
	return &Kinesisanalyticsv2UntagResourceFuture{Future: future}
}

func (a *KinesisAnalyticsV2Stub) UpdateApplication(ctx workflow.Context, input *kinesisanalyticsv2.UpdateApplicationInput) (*kinesisanalyticsv2.UpdateApplicationOutput, error) {
	var output kinesisanalyticsv2.UpdateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *KinesisAnalyticsV2Stub) UpdateApplicationAsync(ctx workflow.Context, input *kinesisanalyticsv2.UpdateApplicationInput) *Kinesisanalyticsv2UpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.kinesisanalyticsv2.UpdateApplication", input)
	return &Kinesisanalyticsv2UpdateApplicationFuture{Future: future}
}
