// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/databasemigrationservice"
	"go.temporal.io/sdk/workflow"
)

type DatabaseMigrationServiceClient interface {
	AddTagsToResource(ctx workflow.Context, input *databasemigrationservice.AddTagsToResourceInput) (*databasemigrationservice.AddTagsToResourceOutput, error)
	AddTagsToResourceAsync(ctx workflow.Context, input *databasemigrationservice.AddTagsToResourceInput) *DatabasemigrationserviceAddTagsToResourceFuture

	ApplyPendingMaintenanceAction(ctx workflow.Context, input *databasemigrationservice.ApplyPendingMaintenanceActionInput) (*databasemigrationservice.ApplyPendingMaintenanceActionOutput, error)
	ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *databasemigrationservice.ApplyPendingMaintenanceActionInput) *DatabasemigrationserviceApplyPendingMaintenanceActionFuture

	CancelReplicationTaskAssessmentRun(ctx workflow.Context, input *databasemigrationservice.CancelReplicationTaskAssessmentRunInput) (*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput, error)
	CancelReplicationTaskAssessmentRunAsync(ctx workflow.Context, input *databasemigrationservice.CancelReplicationTaskAssessmentRunInput) *DatabasemigrationserviceCancelReplicationTaskAssessmentRunFuture

	CreateEndpoint(ctx workflow.Context, input *databasemigrationservice.CreateEndpointInput) (*databasemigrationservice.CreateEndpointOutput, error)
	CreateEndpointAsync(ctx workflow.Context, input *databasemigrationservice.CreateEndpointInput) *DatabasemigrationserviceCreateEndpointFuture

	CreateEventSubscription(ctx workflow.Context, input *databasemigrationservice.CreateEventSubscriptionInput) (*databasemigrationservice.CreateEventSubscriptionOutput, error)
	CreateEventSubscriptionAsync(ctx workflow.Context, input *databasemigrationservice.CreateEventSubscriptionInput) *DatabasemigrationserviceCreateEventSubscriptionFuture

	CreateReplicationInstance(ctx workflow.Context, input *databasemigrationservice.CreateReplicationInstanceInput) (*databasemigrationservice.CreateReplicationInstanceOutput, error)
	CreateReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.CreateReplicationInstanceInput) *DatabasemigrationserviceCreateReplicationInstanceFuture

	CreateReplicationSubnetGroup(ctx workflow.Context, input *databasemigrationservice.CreateReplicationSubnetGroupInput) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error)
	CreateReplicationSubnetGroupAsync(ctx workflow.Context, input *databasemigrationservice.CreateReplicationSubnetGroupInput) *DatabasemigrationserviceCreateReplicationSubnetGroupFuture

	CreateReplicationTask(ctx workflow.Context, input *databasemigrationservice.CreateReplicationTaskInput) (*databasemigrationservice.CreateReplicationTaskOutput, error)
	CreateReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.CreateReplicationTaskInput) *DatabasemigrationserviceCreateReplicationTaskFuture

	DeleteCertificate(ctx workflow.Context, input *databasemigrationservice.DeleteCertificateInput) (*databasemigrationservice.DeleteCertificateOutput, error)
	DeleteCertificateAsync(ctx workflow.Context, input *databasemigrationservice.DeleteCertificateInput) *DatabasemigrationserviceDeleteCertificateFuture

	DeleteConnection(ctx workflow.Context, input *databasemigrationservice.DeleteConnectionInput) (*databasemigrationservice.DeleteConnectionOutput, error)
	DeleteConnectionAsync(ctx workflow.Context, input *databasemigrationservice.DeleteConnectionInput) *DatabasemigrationserviceDeleteConnectionFuture

	DeleteEndpoint(ctx workflow.Context, input *databasemigrationservice.DeleteEndpointInput) (*databasemigrationservice.DeleteEndpointOutput, error)
	DeleteEndpointAsync(ctx workflow.Context, input *databasemigrationservice.DeleteEndpointInput) *DatabasemigrationserviceDeleteEndpointFuture

	DeleteEventSubscription(ctx workflow.Context, input *databasemigrationservice.DeleteEventSubscriptionInput) (*databasemigrationservice.DeleteEventSubscriptionOutput, error)
	DeleteEventSubscriptionAsync(ctx workflow.Context, input *databasemigrationservice.DeleteEventSubscriptionInput) *DatabasemigrationserviceDeleteEventSubscriptionFuture

	DeleteReplicationInstance(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationInstanceInput) (*databasemigrationservice.DeleteReplicationInstanceOutput, error)
	DeleteReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationInstanceInput) *DatabasemigrationserviceDeleteReplicationInstanceFuture

	DeleteReplicationSubnetGroup(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationSubnetGroupInput) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error)
	DeleteReplicationSubnetGroupAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationSubnetGroupInput) *DatabasemigrationserviceDeleteReplicationSubnetGroupFuture

	DeleteReplicationTask(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskInput) (*databasemigrationservice.DeleteReplicationTaskOutput, error)
	DeleteReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskInput) *DatabasemigrationserviceDeleteReplicationTaskFuture

	DeleteReplicationTaskAssessmentRun(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput) (*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput, error)
	DeleteReplicationTaskAssessmentRunAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput) *DatabasemigrationserviceDeleteReplicationTaskAssessmentRunFuture

	DescribeAccountAttributes(ctx workflow.Context, input *databasemigrationservice.DescribeAccountAttributesInput) (*databasemigrationservice.DescribeAccountAttributesOutput, error)
	DescribeAccountAttributesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeAccountAttributesInput) *DatabasemigrationserviceDescribeAccountAttributesFuture

	DescribeApplicableIndividualAssessments(ctx workflow.Context, input *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput) (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, error)
	DescribeApplicableIndividualAssessmentsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput) *DatabasemigrationserviceDescribeApplicableIndividualAssessmentsFuture

	DescribeCertificates(ctx workflow.Context, input *databasemigrationservice.DescribeCertificatesInput) (*databasemigrationservice.DescribeCertificatesOutput, error)
	DescribeCertificatesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeCertificatesInput) *DatabasemigrationserviceDescribeCertificatesFuture

	DescribeConnections(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) (*databasemigrationservice.DescribeConnectionsOutput, error)
	DescribeConnectionsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) *DatabasemigrationserviceDescribeConnectionsFuture

	DescribeEndpointTypes(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointTypesInput) (*databasemigrationservice.DescribeEndpointTypesOutput, error)
	DescribeEndpointTypesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointTypesInput) *DatabasemigrationserviceDescribeEndpointTypesFuture

	DescribeEndpoints(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) (*databasemigrationservice.DescribeEndpointsOutput, error)
	DescribeEndpointsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) *DatabasemigrationserviceDescribeEndpointsFuture

	DescribeEventCategories(ctx workflow.Context, input *databasemigrationservice.DescribeEventCategoriesInput) (*databasemigrationservice.DescribeEventCategoriesOutput, error)
	DescribeEventCategoriesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEventCategoriesInput) *DatabasemigrationserviceDescribeEventCategoriesFuture

	DescribeEventSubscriptions(ctx workflow.Context, input *databasemigrationservice.DescribeEventSubscriptionsInput) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error)
	DescribeEventSubscriptionsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEventSubscriptionsInput) *DatabasemigrationserviceDescribeEventSubscriptionsFuture

	DescribeEvents(ctx workflow.Context, input *databasemigrationservice.DescribeEventsInput) (*databasemigrationservice.DescribeEventsOutput, error)
	DescribeEventsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEventsInput) *DatabasemigrationserviceDescribeEventsFuture

	DescribeOrderableReplicationInstances(ctx workflow.Context, input *databasemigrationservice.DescribeOrderableReplicationInstancesInput) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error)
	DescribeOrderableReplicationInstancesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeOrderableReplicationInstancesInput) *DatabasemigrationserviceDescribeOrderableReplicationInstancesFuture

	DescribePendingMaintenanceActions(ctx workflow.Context, input *databasemigrationservice.DescribePendingMaintenanceActionsInput) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error)
	DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *databasemigrationservice.DescribePendingMaintenanceActionsInput) *DatabasemigrationserviceDescribePendingMaintenanceActionsFuture

	DescribeRefreshSchemasStatus(ctx workflow.Context, input *databasemigrationservice.DescribeRefreshSchemasStatusInput) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error)
	DescribeRefreshSchemasStatusAsync(ctx workflow.Context, input *databasemigrationservice.DescribeRefreshSchemasStatusInput) *DatabasemigrationserviceDescribeRefreshSchemasStatusFuture

	DescribeReplicationInstanceTaskLogs(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error)
	DescribeReplicationInstanceTaskLogsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput) *DatabasemigrationserviceDescribeReplicationInstanceTaskLogsFuture

	DescribeReplicationInstances(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) (*databasemigrationservice.DescribeReplicationInstancesOutput, error)
	DescribeReplicationInstancesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) *DatabasemigrationserviceDescribeReplicationInstancesFuture

	DescribeReplicationSubnetGroups(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationSubnetGroupsInput) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error)
	DescribeReplicationSubnetGroupsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationSubnetGroupsInput) *DatabasemigrationserviceDescribeReplicationSubnetGroupsFuture

	DescribeReplicationTaskAssessmentResults(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error)
	DescribeReplicationTaskAssessmentResultsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput) *DatabasemigrationserviceDescribeReplicationTaskAssessmentResultsFuture

	DescribeReplicationTaskAssessmentRuns(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput) (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, error)
	DescribeReplicationTaskAssessmentRunsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput) *DatabasemigrationserviceDescribeReplicationTaskAssessmentRunsFuture

	DescribeReplicationTaskIndividualAssessments(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput) (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, error)
	DescribeReplicationTaskIndividualAssessmentsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput) *DatabasemigrationserviceDescribeReplicationTaskIndividualAssessmentsFuture

	DescribeReplicationTasks(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) (*databasemigrationservice.DescribeReplicationTasksOutput, error)
	DescribeReplicationTasksAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *DatabasemigrationserviceDescribeReplicationTasksFuture

	DescribeSchemas(ctx workflow.Context, input *databasemigrationservice.DescribeSchemasInput) (*databasemigrationservice.DescribeSchemasOutput, error)
	DescribeSchemasAsync(ctx workflow.Context, input *databasemigrationservice.DescribeSchemasInput) *DatabasemigrationserviceDescribeSchemasFuture

	DescribeTableStatistics(ctx workflow.Context, input *databasemigrationservice.DescribeTableStatisticsInput) (*databasemigrationservice.DescribeTableStatisticsOutput, error)
	DescribeTableStatisticsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeTableStatisticsInput) *DatabasemigrationserviceDescribeTableStatisticsFuture

	ImportCertificate(ctx workflow.Context, input *databasemigrationservice.ImportCertificateInput) (*databasemigrationservice.ImportCertificateOutput, error)
	ImportCertificateAsync(ctx workflow.Context, input *databasemigrationservice.ImportCertificateInput) *DatabasemigrationserviceImportCertificateFuture

	ListTagsForResource(ctx workflow.Context, input *databasemigrationservice.ListTagsForResourceInput) (*databasemigrationservice.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *databasemigrationservice.ListTagsForResourceInput) *DatabasemigrationserviceListTagsForResourceFuture

	ModifyEndpoint(ctx workflow.Context, input *databasemigrationservice.ModifyEndpointInput) (*databasemigrationservice.ModifyEndpointOutput, error)
	ModifyEndpointAsync(ctx workflow.Context, input *databasemigrationservice.ModifyEndpointInput) *DatabasemigrationserviceModifyEndpointFuture

	ModifyEventSubscription(ctx workflow.Context, input *databasemigrationservice.ModifyEventSubscriptionInput) (*databasemigrationservice.ModifyEventSubscriptionOutput, error)
	ModifyEventSubscriptionAsync(ctx workflow.Context, input *databasemigrationservice.ModifyEventSubscriptionInput) *DatabasemigrationserviceModifyEventSubscriptionFuture

	ModifyReplicationInstance(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationInstanceInput) (*databasemigrationservice.ModifyReplicationInstanceOutput, error)
	ModifyReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationInstanceInput) *DatabasemigrationserviceModifyReplicationInstanceFuture

	ModifyReplicationSubnetGroup(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationSubnetGroupInput) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error)
	ModifyReplicationSubnetGroupAsync(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationSubnetGroupInput) *DatabasemigrationserviceModifyReplicationSubnetGroupFuture

	ModifyReplicationTask(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationTaskInput) (*databasemigrationservice.ModifyReplicationTaskOutput, error)
	ModifyReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationTaskInput) *DatabasemigrationserviceModifyReplicationTaskFuture

	RebootReplicationInstance(ctx workflow.Context, input *databasemigrationservice.RebootReplicationInstanceInput) (*databasemigrationservice.RebootReplicationInstanceOutput, error)
	RebootReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.RebootReplicationInstanceInput) *DatabasemigrationserviceRebootReplicationInstanceFuture

	RefreshSchemas(ctx workflow.Context, input *databasemigrationservice.RefreshSchemasInput) (*databasemigrationservice.RefreshSchemasOutput, error)
	RefreshSchemasAsync(ctx workflow.Context, input *databasemigrationservice.RefreshSchemasInput) *DatabasemigrationserviceRefreshSchemasFuture

	ReloadTables(ctx workflow.Context, input *databasemigrationservice.ReloadTablesInput) (*databasemigrationservice.ReloadTablesOutput, error)
	ReloadTablesAsync(ctx workflow.Context, input *databasemigrationservice.ReloadTablesInput) *DatabasemigrationserviceReloadTablesFuture

	RemoveTagsFromResource(ctx workflow.Context, input *databasemigrationservice.RemoveTagsFromResourceInput) (*databasemigrationservice.RemoveTagsFromResourceOutput, error)
	RemoveTagsFromResourceAsync(ctx workflow.Context, input *databasemigrationservice.RemoveTagsFromResourceInput) *DatabasemigrationserviceRemoveTagsFromResourceFuture

	StartReplicationTask(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskInput) (*databasemigrationservice.StartReplicationTaskOutput, error)
	StartReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskInput) *DatabasemigrationserviceStartReplicationTaskFuture

	StartReplicationTaskAssessment(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentInput) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error)
	StartReplicationTaskAssessmentAsync(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentInput) *DatabasemigrationserviceStartReplicationTaskAssessmentFuture

	StartReplicationTaskAssessmentRun(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentRunInput) (*databasemigrationservice.StartReplicationTaskAssessmentRunOutput, error)
	StartReplicationTaskAssessmentRunAsync(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentRunInput) *DatabasemigrationserviceStartReplicationTaskAssessmentRunFuture

	StopReplicationTask(ctx workflow.Context, input *databasemigrationservice.StopReplicationTaskInput) (*databasemigrationservice.StopReplicationTaskOutput, error)
	StopReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.StopReplicationTaskInput) *DatabasemigrationserviceStopReplicationTaskFuture

	TestConnection(ctx workflow.Context, input *databasemigrationservice.TestConnectionInput) (*databasemigrationservice.TestConnectionOutput, error)
	TestConnectionAsync(ctx workflow.Context, input *databasemigrationservice.TestConnectionInput) *DatabasemigrationserviceTestConnectionFuture

	WaitUntilEndpointDeleted(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) error
	WaitUntilEndpointDeletedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) *VoidFuture

	WaitUntilReplicationInstanceAvailable(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) error
	WaitUntilReplicationInstanceAvailableAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) *VoidFuture

	WaitUntilReplicationInstanceDeleted(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) error
	WaitUntilReplicationInstanceDeletedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) *VoidFuture

	WaitUntilReplicationTaskDeleted(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error
	WaitUntilReplicationTaskDeletedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *VoidFuture

	WaitUntilReplicationTaskReady(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error
	WaitUntilReplicationTaskReadyAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *VoidFuture

	WaitUntilReplicationTaskRunning(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error
	WaitUntilReplicationTaskRunningAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *VoidFuture

	WaitUntilReplicationTaskStopped(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error
	WaitUntilReplicationTaskStoppedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *VoidFuture

	WaitUntilTestConnectionSucceeds(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) error
	WaitUntilTestConnectionSucceedsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) *VoidFuture
}

type DatabaseMigrationServiceStub struct{}

func NewDatabaseMigrationServiceStub() DatabaseMigrationServiceClient {
	return &DatabaseMigrationServiceStub{}
}

type DatabasemigrationserviceAddTagsToResourceFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceAddTagsToResourceFuture) Get(ctx workflow.Context) (*databasemigrationservice.AddTagsToResourceOutput, error) {
	var output databasemigrationservice.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceApplyPendingMaintenanceActionFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceApplyPendingMaintenanceActionFuture) Get(ctx workflow.Context) (*databasemigrationservice.ApplyPendingMaintenanceActionOutput, error) {
	var output databasemigrationservice.ApplyPendingMaintenanceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceCancelReplicationTaskAssessmentRunFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceCancelReplicationTaskAssessmentRunFuture) Get(ctx workflow.Context) (*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.CancelReplicationTaskAssessmentRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceCreateEndpointFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceCreateEndpointFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateEndpointOutput, error) {
	var output databasemigrationservice.CreateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceCreateEventSubscriptionFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceCreateEventSubscriptionFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateEventSubscriptionOutput, error) {
	var output databasemigrationservice.CreateEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceCreateReplicationInstanceFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceCreateReplicationInstanceFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateReplicationInstanceOutput, error) {
	var output databasemigrationservice.CreateReplicationInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceCreateReplicationSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceCreateReplicationSubnetGroupFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.CreateReplicationSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceCreateReplicationTaskFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceCreateReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateReplicationTaskOutput, error) {
	var output databasemigrationservice.CreateReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDeleteCertificateFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDeleteCertificateFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteCertificateOutput, error) {
	var output databasemigrationservice.DeleteCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDeleteConnectionFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDeleteConnectionFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteConnectionOutput, error) {
	var output databasemigrationservice.DeleteConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDeleteEndpointFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDeleteEndpointFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteEndpointOutput, error) {
	var output databasemigrationservice.DeleteEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDeleteEventSubscriptionFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDeleteEventSubscriptionFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteEventSubscriptionOutput, error) {
	var output databasemigrationservice.DeleteEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDeleteReplicationInstanceFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDeleteReplicationInstanceFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteReplicationInstanceOutput, error) {
	var output databasemigrationservice.DeleteReplicationInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDeleteReplicationSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDeleteReplicationSubnetGroupFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.DeleteReplicationSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDeleteReplicationTaskFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDeleteReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteReplicationTaskOutput, error) {
	var output databasemigrationservice.DeleteReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDeleteReplicationTaskAssessmentRunFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDeleteReplicationTaskAssessmentRunFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeAccountAttributesFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeAccountAttributesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeAccountAttributesOutput, error) {
	var output databasemigrationservice.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeApplicableIndividualAssessmentsFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeApplicableIndividualAssessmentsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, error) {
	var output databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeCertificatesFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeCertificatesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeCertificatesOutput, error) {
	var output databasemigrationservice.DescribeCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeConnectionsFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeConnectionsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeConnectionsOutput, error) {
	var output databasemigrationservice.DescribeConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeEndpointTypesFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeEndpointTypesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEndpointTypesOutput, error) {
	var output databasemigrationservice.DescribeEndpointTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeEndpointsFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeEndpointsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEndpointsOutput, error) {
	var output databasemigrationservice.DescribeEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeEventCategoriesFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeEventCategoriesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEventCategoriesOutput, error) {
	var output databasemigrationservice.DescribeEventCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeEventSubscriptionsFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeEventSubscriptionsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error) {
	var output databasemigrationservice.DescribeEventSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeEventsFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeEventsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEventsOutput, error) {
	var output databasemigrationservice.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeOrderableReplicationInstancesFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeOrderableReplicationInstancesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error) {
	var output databasemigrationservice.DescribeOrderableReplicationInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribePendingMaintenanceActionsFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribePendingMaintenanceActionsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error) {
	var output databasemigrationservice.DescribePendingMaintenanceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeRefreshSchemasStatusFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeRefreshSchemasStatusFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error) {
	var output databasemigrationservice.DescribeRefreshSchemasStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeReplicationInstanceTaskLogsFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeReplicationInstanceTaskLogsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error) {
	var output databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeReplicationInstancesFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeReplicationInstancesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationInstancesOutput, error) {
	var output databasemigrationservice.DescribeReplicationInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeReplicationSubnetGroupsFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeReplicationSubnetGroupsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error) {
	var output databasemigrationservice.DescribeReplicationSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeReplicationTaskAssessmentResultsFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeReplicationTaskAssessmentResultsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeReplicationTaskAssessmentRunsFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeReplicationTaskAssessmentRunsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeReplicationTaskIndividualAssessmentsFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeReplicationTaskIndividualAssessmentsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeReplicationTasksFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeReplicationTasksFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationTasksOutput, error) {
	var output databasemigrationservice.DescribeReplicationTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeSchemasFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeSchemasFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeSchemasOutput, error) {
	var output databasemigrationservice.DescribeSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceDescribeTableStatisticsFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceDescribeTableStatisticsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeTableStatisticsOutput, error) {
	var output databasemigrationservice.DescribeTableStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceImportCertificateFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceImportCertificateFuture) Get(ctx workflow.Context) (*databasemigrationservice.ImportCertificateOutput, error) {
	var output databasemigrationservice.ImportCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceListTagsForResourceFuture) Get(ctx workflow.Context) (*databasemigrationservice.ListTagsForResourceOutput, error) {
	var output databasemigrationservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceModifyEndpointFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceModifyEndpointFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyEndpointOutput, error) {
	var output databasemigrationservice.ModifyEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceModifyEventSubscriptionFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceModifyEventSubscriptionFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyEventSubscriptionOutput, error) {
	var output databasemigrationservice.ModifyEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceModifyReplicationInstanceFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceModifyReplicationInstanceFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyReplicationInstanceOutput, error) {
	var output databasemigrationservice.ModifyReplicationInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceModifyReplicationSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceModifyReplicationSubnetGroupFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.ModifyReplicationSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceModifyReplicationTaskFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceModifyReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyReplicationTaskOutput, error) {
	var output databasemigrationservice.ModifyReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceRebootReplicationInstanceFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceRebootReplicationInstanceFuture) Get(ctx workflow.Context) (*databasemigrationservice.RebootReplicationInstanceOutput, error) {
	var output databasemigrationservice.RebootReplicationInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceRefreshSchemasFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceRefreshSchemasFuture) Get(ctx workflow.Context) (*databasemigrationservice.RefreshSchemasOutput, error) {
	var output databasemigrationservice.RefreshSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceReloadTablesFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceReloadTablesFuture) Get(ctx workflow.Context) (*databasemigrationservice.ReloadTablesOutput, error) {
	var output databasemigrationservice.ReloadTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceRemoveTagsFromResourceFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*databasemigrationservice.RemoveTagsFromResourceOutput, error) {
	var output databasemigrationservice.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceStartReplicationTaskFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceStartReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.StartReplicationTaskOutput, error) {
	var output databasemigrationservice.StartReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceStartReplicationTaskAssessmentFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceStartReplicationTaskAssessmentFuture) Get(ctx workflow.Context) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error) {
	var output databasemigrationservice.StartReplicationTaskAssessmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceStartReplicationTaskAssessmentRunFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceStartReplicationTaskAssessmentRunFuture) Get(ctx workflow.Context) (*databasemigrationservice.StartReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.StartReplicationTaskAssessmentRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceStopReplicationTaskFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceStopReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.StopReplicationTaskOutput, error) {
	var output databasemigrationservice.StopReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabasemigrationserviceTestConnectionFuture struct {
	Future workflow.Future
}

func (r *DatabasemigrationserviceTestConnectionFuture) Get(ctx workflow.Context) (*databasemigrationservice.TestConnectionOutput, error) {
	var output databasemigrationservice.TestConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) AddTagsToResource(ctx workflow.Context, input *databasemigrationservice.AddTagsToResourceInput) (*databasemigrationservice.AddTagsToResourceOutput, error) {
	var output databasemigrationservice.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) AddTagsToResourceAsync(ctx workflow.Context, input *databasemigrationservice.AddTagsToResourceInput) *DatabasemigrationserviceAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.AddTagsToResource", input)
	return &DatabasemigrationserviceAddTagsToResourceFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) ApplyPendingMaintenanceAction(ctx workflow.Context, input *databasemigrationservice.ApplyPendingMaintenanceActionInput) (*databasemigrationservice.ApplyPendingMaintenanceActionOutput, error) {
	var output databasemigrationservice.ApplyPendingMaintenanceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ApplyPendingMaintenanceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *databasemigrationservice.ApplyPendingMaintenanceActionInput) *DatabasemigrationserviceApplyPendingMaintenanceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ApplyPendingMaintenanceAction", input)
	return &DatabasemigrationserviceApplyPendingMaintenanceActionFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) CancelReplicationTaskAssessmentRun(ctx workflow.Context, input *databasemigrationservice.CancelReplicationTaskAssessmentRunInput) (*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.CancelReplicationTaskAssessmentRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.CancelReplicationTaskAssessmentRun", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) CancelReplicationTaskAssessmentRunAsync(ctx workflow.Context, input *databasemigrationservice.CancelReplicationTaskAssessmentRunInput) *DatabasemigrationserviceCancelReplicationTaskAssessmentRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.CancelReplicationTaskAssessmentRun", input)
	return &DatabasemigrationserviceCancelReplicationTaskAssessmentRunFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) CreateEndpoint(ctx workflow.Context, input *databasemigrationservice.CreateEndpointInput) (*databasemigrationservice.CreateEndpointOutput, error) {
	var output databasemigrationservice.CreateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.CreateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) CreateEndpointAsync(ctx workflow.Context, input *databasemigrationservice.CreateEndpointInput) *DatabasemigrationserviceCreateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.CreateEndpoint", input)
	return &DatabasemigrationserviceCreateEndpointFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) CreateEventSubscription(ctx workflow.Context, input *databasemigrationservice.CreateEventSubscriptionInput) (*databasemigrationservice.CreateEventSubscriptionOutput, error) {
	var output databasemigrationservice.CreateEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.CreateEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) CreateEventSubscriptionAsync(ctx workflow.Context, input *databasemigrationservice.CreateEventSubscriptionInput) *DatabasemigrationserviceCreateEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.CreateEventSubscription", input)
	return &DatabasemigrationserviceCreateEventSubscriptionFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) CreateReplicationInstance(ctx workflow.Context, input *databasemigrationservice.CreateReplicationInstanceInput) (*databasemigrationservice.CreateReplicationInstanceOutput, error) {
	var output databasemigrationservice.CreateReplicationInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.CreateReplicationInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) CreateReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.CreateReplicationInstanceInput) *DatabasemigrationserviceCreateReplicationInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.CreateReplicationInstance", input)
	return &DatabasemigrationserviceCreateReplicationInstanceFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) CreateReplicationSubnetGroup(ctx workflow.Context, input *databasemigrationservice.CreateReplicationSubnetGroupInput) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.CreateReplicationSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.CreateReplicationSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) CreateReplicationSubnetGroupAsync(ctx workflow.Context, input *databasemigrationservice.CreateReplicationSubnetGroupInput) *DatabasemigrationserviceCreateReplicationSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.CreateReplicationSubnetGroup", input)
	return &DatabasemigrationserviceCreateReplicationSubnetGroupFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) CreateReplicationTask(ctx workflow.Context, input *databasemigrationservice.CreateReplicationTaskInput) (*databasemigrationservice.CreateReplicationTaskOutput, error) {
	var output databasemigrationservice.CreateReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.CreateReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) CreateReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.CreateReplicationTaskInput) *DatabasemigrationserviceCreateReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.CreateReplicationTask", input)
	return &DatabasemigrationserviceCreateReplicationTaskFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DeleteCertificate(ctx workflow.Context, input *databasemigrationservice.DeleteCertificateInput) (*databasemigrationservice.DeleteCertificateOutput, error) {
	var output databasemigrationservice.DeleteCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DeleteCertificateAsync(ctx workflow.Context, input *databasemigrationservice.DeleteCertificateInput) *DatabasemigrationserviceDeleteCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteCertificate", input)
	return &DatabasemigrationserviceDeleteCertificateFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DeleteConnection(ctx workflow.Context, input *databasemigrationservice.DeleteConnectionInput) (*databasemigrationservice.DeleteConnectionOutput, error) {
	var output databasemigrationservice.DeleteConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DeleteConnectionAsync(ctx workflow.Context, input *databasemigrationservice.DeleteConnectionInput) *DatabasemigrationserviceDeleteConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteConnection", input)
	return &DatabasemigrationserviceDeleteConnectionFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DeleteEndpoint(ctx workflow.Context, input *databasemigrationservice.DeleteEndpointInput) (*databasemigrationservice.DeleteEndpointOutput, error) {
	var output databasemigrationservice.DeleteEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DeleteEndpointAsync(ctx workflow.Context, input *databasemigrationservice.DeleteEndpointInput) *DatabasemigrationserviceDeleteEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteEndpoint", input)
	return &DatabasemigrationserviceDeleteEndpointFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DeleteEventSubscription(ctx workflow.Context, input *databasemigrationservice.DeleteEventSubscriptionInput) (*databasemigrationservice.DeleteEventSubscriptionOutput, error) {
	var output databasemigrationservice.DeleteEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DeleteEventSubscriptionAsync(ctx workflow.Context, input *databasemigrationservice.DeleteEventSubscriptionInput) *DatabasemigrationserviceDeleteEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteEventSubscription", input)
	return &DatabasemigrationserviceDeleteEventSubscriptionFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DeleteReplicationInstance(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationInstanceInput) (*databasemigrationservice.DeleteReplicationInstanceOutput, error) {
	var output databasemigrationservice.DeleteReplicationInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteReplicationInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DeleteReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationInstanceInput) *DatabasemigrationserviceDeleteReplicationInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteReplicationInstance", input)
	return &DatabasemigrationserviceDeleteReplicationInstanceFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DeleteReplicationSubnetGroup(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationSubnetGroupInput) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.DeleteReplicationSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteReplicationSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DeleteReplicationSubnetGroupAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationSubnetGroupInput) *DatabasemigrationserviceDeleteReplicationSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteReplicationSubnetGroup", input)
	return &DatabasemigrationserviceDeleteReplicationSubnetGroupFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DeleteReplicationTask(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskInput) (*databasemigrationservice.DeleteReplicationTaskOutput, error) {
	var output databasemigrationservice.DeleteReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DeleteReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskInput) *DatabasemigrationserviceDeleteReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteReplicationTask", input)
	return &DatabasemigrationserviceDeleteReplicationTaskFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DeleteReplicationTaskAssessmentRun(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput) (*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteReplicationTaskAssessmentRun", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DeleteReplicationTaskAssessmentRunAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput) *DatabasemigrationserviceDeleteReplicationTaskAssessmentRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DeleteReplicationTaskAssessmentRun", input)
	return &DatabasemigrationserviceDeleteReplicationTaskAssessmentRunFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeAccountAttributes(ctx workflow.Context, input *databasemigrationservice.DescribeAccountAttributesInput) (*databasemigrationservice.DescribeAccountAttributesOutput, error) {
	var output databasemigrationservice.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeAccountAttributesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeAccountAttributesInput) *DatabasemigrationserviceDescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeAccountAttributes", input)
	return &DatabasemigrationserviceDescribeAccountAttributesFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeApplicableIndividualAssessments(ctx workflow.Context, input *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput) (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, error) {
	var output databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeApplicableIndividualAssessments", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeApplicableIndividualAssessmentsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput) *DatabasemigrationserviceDescribeApplicableIndividualAssessmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeApplicableIndividualAssessments", input)
	return &DatabasemigrationserviceDescribeApplicableIndividualAssessmentsFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeCertificates(ctx workflow.Context, input *databasemigrationservice.DescribeCertificatesInput) (*databasemigrationservice.DescribeCertificatesOutput, error) {
	var output databasemigrationservice.DescribeCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeCertificatesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeCertificatesInput) *DatabasemigrationserviceDescribeCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeCertificates", input)
	return &DatabasemigrationserviceDescribeCertificatesFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeConnections(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) (*databasemigrationservice.DescribeConnectionsOutput, error) {
	var output databasemigrationservice.DescribeConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeConnectionsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) *DatabasemigrationserviceDescribeConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeConnections", input)
	return &DatabasemigrationserviceDescribeConnectionsFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeEndpointTypes(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointTypesInput) (*databasemigrationservice.DescribeEndpointTypesOutput, error) {
	var output databasemigrationservice.DescribeEndpointTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeEndpointTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeEndpointTypesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointTypesInput) *DatabasemigrationserviceDescribeEndpointTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeEndpointTypes", input)
	return &DatabasemigrationserviceDescribeEndpointTypesFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeEndpoints(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) (*databasemigrationservice.DescribeEndpointsOutput, error) {
	var output databasemigrationservice.DescribeEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeEndpointsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) *DatabasemigrationserviceDescribeEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeEndpoints", input)
	return &DatabasemigrationserviceDescribeEndpointsFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeEventCategories(ctx workflow.Context, input *databasemigrationservice.DescribeEventCategoriesInput) (*databasemigrationservice.DescribeEventCategoriesOutput, error) {
	var output databasemigrationservice.DescribeEventCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeEventCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeEventCategoriesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEventCategoriesInput) *DatabasemigrationserviceDescribeEventCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeEventCategories", input)
	return &DatabasemigrationserviceDescribeEventCategoriesFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeEventSubscriptions(ctx workflow.Context, input *databasemigrationservice.DescribeEventSubscriptionsInput) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error) {
	var output databasemigrationservice.DescribeEventSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeEventSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeEventSubscriptionsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEventSubscriptionsInput) *DatabasemigrationserviceDescribeEventSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeEventSubscriptions", input)
	return &DatabasemigrationserviceDescribeEventSubscriptionsFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeEvents(ctx workflow.Context, input *databasemigrationservice.DescribeEventsInput) (*databasemigrationservice.DescribeEventsOutput, error) {
	var output databasemigrationservice.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeEventsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEventsInput) *DatabasemigrationserviceDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeEvents", input)
	return &DatabasemigrationserviceDescribeEventsFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeOrderableReplicationInstances(ctx workflow.Context, input *databasemigrationservice.DescribeOrderableReplicationInstancesInput) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error) {
	var output databasemigrationservice.DescribeOrderableReplicationInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeOrderableReplicationInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeOrderableReplicationInstancesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeOrderableReplicationInstancesInput) *DatabasemigrationserviceDescribeOrderableReplicationInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeOrderableReplicationInstances", input)
	return &DatabasemigrationserviceDescribeOrderableReplicationInstancesFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribePendingMaintenanceActions(ctx workflow.Context, input *databasemigrationservice.DescribePendingMaintenanceActionsInput) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error) {
	var output databasemigrationservice.DescribePendingMaintenanceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribePendingMaintenanceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *databasemigrationservice.DescribePendingMaintenanceActionsInput) *DatabasemigrationserviceDescribePendingMaintenanceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribePendingMaintenanceActions", input)
	return &DatabasemigrationserviceDescribePendingMaintenanceActionsFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeRefreshSchemasStatus(ctx workflow.Context, input *databasemigrationservice.DescribeRefreshSchemasStatusInput) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error) {
	var output databasemigrationservice.DescribeRefreshSchemasStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeRefreshSchemasStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeRefreshSchemasStatusAsync(ctx workflow.Context, input *databasemigrationservice.DescribeRefreshSchemasStatusInput) *DatabasemigrationserviceDescribeRefreshSchemasStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeRefreshSchemasStatus", input)
	return &DatabasemigrationserviceDescribeRefreshSchemasStatusFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationInstanceTaskLogs(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error) {
	var output databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationInstanceTaskLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationInstanceTaskLogsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput) *DatabasemigrationserviceDescribeReplicationInstanceTaskLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationInstanceTaskLogs", input)
	return &DatabasemigrationserviceDescribeReplicationInstanceTaskLogsFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationInstances(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) (*databasemigrationservice.DescribeReplicationInstancesOutput, error) {
	var output databasemigrationservice.DescribeReplicationInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationInstancesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) *DatabasemigrationserviceDescribeReplicationInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationInstances", input)
	return &DatabasemigrationserviceDescribeReplicationInstancesFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationSubnetGroups(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationSubnetGroupsInput) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error) {
	var output databasemigrationservice.DescribeReplicationSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationSubnetGroupsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationSubnetGroupsInput) *DatabasemigrationserviceDescribeReplicationSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationSubnetGroups", input)
	return &DatabasemigrationserviceDescribeReplicationSubnetGroupsFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationTaskAssessmentResults(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationTaskAssessmentResults", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationTaskAssessmentResultsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput) *DatabasemigrationserviceDescribeReplicationTaskAssessmentResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationTaskAssessmentResults", input)
	return &DatabasemigrationserviceDescribeReplicationTaskAssessmentResultsFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationTaskAssessmentRuns(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput) (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationTaskAssessmentRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationTaskAssessmentRunsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput) *DatabasemigrationserviceDescribeReplicationTaskAssessmentRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationTaskAssessmentRuns", input)
	return &DatabasemigrationserviceDescribeReplicationTaskAssessmentRunsFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationTaskIndividualAssessments(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput) (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationTaskIndividualAssessments", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationTaskIndividualAssessmentsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput) *DatabasemigrationserviceDescribeReplicationTaskIndividualAssessmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationTaskIndividualAssessments", input)
	return &DatabasemigrationserviceDescribeReplicationTaskIndividualAssessmentsFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationTasks(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) (*databasemigrationservice.DescribeReplicationTasksOutput, error) {
	var output databasemigrationservice.DescribeReplicationTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeReplicationTasksAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *DatabasemigrationserviceDescribeReplicationTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeReplicationTasks", input)
	return &DatabasemigrationserviceDescribeReplicationTasksFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeSchemas(ctx workflow.Context, input *databasemigrationservice.DescribeSchemasInput) (*databasemigrationservice.DescribeSchemasOutput, error) {
	var output databasemigrationservice.DescribeSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeSchemasAsync(ctx workflow.Context, input *databasemigrationservice.DescribeSchemasInput) *DatabasemigrationserviceDescribeSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeSchemas", input)
	return &DatabasemigrationserviceDescribeSchemasFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) DescribeTableStatistics(ctx workflow.Context, input *databasemigrationservice.DescribeTableStatisticsInput) (*databasemigrationservice.DescribeTableStatisticsOutput, error) {
	var output databasemigrationservice.DescribeTableStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeTableStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) DescribeTableStatisticsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeTableStatisticsInput) *DatabasemigrationserviceDescribeTableStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.DescribeTableStatistics", input)
	return &DatabasemigrationserviceDescribeTableStatisticsFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) ImportCertificate(ctx workflow.Context, input *databasemigrationservice.ImportCertificateInput) (*databasemigrationservice.ImportCertificateOutput, error) {
	var output databasemigrationservice.ImportCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ImportCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) ImportCertificateAsync(ctx workflow.Context, input *databasemigrationservice.ImportCertificateInput) *DatabasemigrationserviceImportCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ImportCertificate", input)
	return &DatabasemigrationserviceImportCertificateFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) ListTagsForResource(ctx workflow.Context, input *databasemigrationservice.ListTagsForResourceInput) (*databasemigrationservice.ListTagsForResourceOutput, error) {
	var output databasemigrationservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) ListTagsForResourceAsync(ctx workflow.Context, input *databasemigrationservice.ListTagsForResourceInput) *DatabasemigrationserviceListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ListTagsForResource", input)
	return &DatabasemigrationserviceListTagsForResourceFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) ModifyEndpoint(ctx workflow.Context, input *databasemigrationservice.ModifyEndpointInput) (*databasemigrationservice.ModifyEndpointOutput, error) {
	var output databasemigrationservice.ModifyEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ModifyEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) ModifyEndpointAsync(ctx workflow.Context, input *databasemigrationservice.ModifyEndpointInput) *DatabasemigrationserviceModifyEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ModifyEndpoint", input)
	return &DatabasemigrationserviceModifyEndpointFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) ModifyEventSubscription(ctx workflow.Context, input *databasemigrationservice.ModifyEventSubscriptionInput) (*databasemigrationservice.ModifyEventSubscriptionOutput, error) {
	var output databasemigrationservice.ModifyEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ModifyEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) ModifyEventSubscriptionAsync(ctx workflow.Context, input *databasemigrationservice.ModifyEventSubscriptionInput) *DatabasemigrationserviceModifyEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ModifyEventSubscription", input)
	return &DatabasemigrationserviceModifyEventSubscriptionFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) ModifyReplicationInstance(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationInstanceInput) (*databasemigrationservice.ModifyReplicationInstanceOutput, error) {
	var output databasemigrationservice.ModifyReplicationInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ModifyReplicationInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) ModifyReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationInstanceInput) *DatabasemigrationserviceModifyReplicationInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ModifyReplicationInstance", input)
	return &DatabasemigrationserviceModifyReplicationInstanceFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) ModifyReplicationSubnetGroup(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationSubnetGroupInput) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.ModifyReplicationSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ModifyReplicationSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) ModifyReplicationSubnetGroupAsync(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationSubnetGroupInput) *DatabasemigrationserviceModifyReplicationSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ModifyReplicationSubnetGroup", input)
	return &DatabasemigrationserviceModifyReplicationSubnetGroupFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) ModifyReplicationTask(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationTaskInput) (*databasemigrationservice.ModifyReplicationTaskOutput, error) {
	var output databasemigrationservice.ModifyReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ModifyReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) ModifyReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationTaskInput) *DatabasemigrationserviceModifyReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ModifyReplicationTask", input)
	return &DatabasemigrationserviceModifyReplicationTaskFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) RebootReplicationInstance(ctx workflow.Context, input *databasemigrationservice.RebootReplicationInstanceInput) (*databasemigrationservice.RebootReplicationInstanceOutput, error) {
	var output databasemigrationservice.RebootReplicationInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.RebootReplicationInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) RebootReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.RebootReplicationInstanceInput) *DatabasemigrationserviceRebootReplicationInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.RebootReplicationInstance", input)
	return &DatabasemigrationserviceRebootReplicationInstanceFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) RefreshSchemas(ctx workflow.Context, input *databasemigrationservice.RefreshSchemasInput) (*databasemigrationservice.RefreshSchemasOutput, error) {
	var output databasemigrationservice.RefreshSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.RefreshSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) RefreshSchemasAsync(ctx workflow.Context, input *databasemigrationservice.RefreshSchemasInput) *DatabasemigrationserviceRefreshSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.RefreshSchemas", input)
	return &DatabasemigrationserviceRefreshSchemasFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) ReloadTables(ctx workflow.Context, input *databasemigrationservice.ReloadTablesInput) (*databasemigrationservice.ReloadTablesOutput, error) {
	var output databasemigrationservice.ReloadTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ReloadTables", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) ReloadTablesAsync(ctx workflow.Context, input *databasemigrationservice.ReloadTablesInput) *DatabasemigrationserviceReloadTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.ReloadTables", input)
	return &DatabasemigrationserviceReloadTablesFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) RemoveTagsFromResource(ctx workflow.Context, input *databasemigrationservice.RemoveTagsFromResourceInput) (*databasemigrationservice.RemoveTagsFromResourceOutput, error) {
	var output databasemigrationservice.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *databasemigrationservice.RemoveTagsFromResourceInput) *DatabasemigrationserviceRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.RemoveTagsFromResource", input)
	return &DatabasemigrationserviceRemoveTagsFromResourceFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) StartReplicationTask(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskInput) (*databasemigrationservice.StartReplicationTaskOutput, error) {
	var output databasemigrationservice.StartReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.StartReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) StartReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskInput) *DatabasemigrationserviceStartReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.StartReplicationTask", input)
	return &DatabasemigrationserviceStartReplicationTaskFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) StartReplicationTaskAssessment(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentInput) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error) {
	var output databasemigrationservice.StartReplicationTaskAssessmentOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.StartReplicationTaskAssessment", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) StartReplicationTaskAssessmentAsync(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentInput) *DatabasemigrationserviceStartReplicationTaskAssessmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.StartReplicationTaskAssessment", input)
	return &DatabasemigrationserviceStartReplicationTaskAssessmentFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) StartReplicationTaskAssessmentRun(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentRunInput) (*databasemigrationservice.StartReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.StartReplicationTaskAssessmentRunOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.StartReplicationTaskAssessmentRun", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) StartReplicationTaskAssessmentRunAsync(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentRunInput) *DatabasemigrationserviceStartReplicationTaskAssessmentRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.StartReplicationTaskAssessmentRun", input)
	return &DatabasemigrationserviceStartReplicationTaskAssessmentRunFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) StopReplicationTask(ctx workflow.Context, input *databasemigrationservice.StopReplicationTaskInput) (*databasemigrationservice.StopReplicationTaskOutput, error) {
	var output databasemigrationservice.StopReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.StopReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) StopReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.StopReplicationTaskInput) *DatabasemigrationserviceStopReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.StopReplicationTask", input)
	return &DatabasemigrationserviceStopReplicationTaskFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) TestConnection(ctx workflow.Context, input *databasemigrationservice.TestConnectionInput) (*databasemigrationservice.TestConnectionOutput, error) {
	var output databasemigrationservice.TestConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.TestConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *DatabaseMigrationServiceStub) TestConnectionAsync(ctx workflow.Context, input *databasemigrationservice.TestConnectionInput) *DatabasemigrationserviceTestConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.TestConnection", input)
	return &DatabasemigrationserviceTestConnectionFuture{Future: future}
}

func (a *DatabaseMigrationServiceStub) WaitUntilEndpointDeleted(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilEndpointDeleted", input).Get(ctx, nil)
}

func (a *DatabaseMigrationServiceStub) WaitUntilEndpointDeletedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilEndpointDeleted", input)
	return NewVoidFuture(future)
}

func (a *DatabaseMigrationServiceStub) WaitUntilReplicationInstanceAvailable(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilReplicationInstanceAvailable", input).Get(ctx, nil)
}

func (a *DatabaseMigrationServiceStub) WaitUntilReplicationInstanceAvailableAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilReplicationInstanceAvailable", input)
	return NewVoidFuture(future)
}

func (a *DatabaseMigrationServiceStub) WaitUntilReplicationInstanceDeleted(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilReplicationInstanceDeleted", input).Get(ctx, nil)
}

func (a *DatabaseMigrationServiceStub) WaitUntilReplicationInstanceDeletedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilReplicationInstanceDeleted", input)
	return NewVoidFuture(future)
}

func (a *DatabaseMigrationServiceStub) WaitUntilReplicationTaskDeleted(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilReplicationTaskDeleted", input).Get(ctx, nil)
}

func (a *DatabaseMigrationServiceStub) WaitUntilReplicationTaskDeletedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilReplicationTaskDeleted", input)
	return NewVoidFuture(future)
}

func (a *DatabaseMigrationServiceStub) WaitUntilReplicationTaskReady(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilReplicationTaskReady", input).Get(ctx, nil)
}

func (a *DatabaseMigrationServiceStub) WaitUntilReplicationTaskReadyAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilReplicationTaskReady", input)
	return NewVoidFuture(future)
}

func (a *DatabaseMigrationServiceStub) WaitUntilReplicationTaskRunning(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilReplicationTaskRunning", input).Get(ctx, nil)
}

func (a *DatabaseMigrationServiceStub) WaitUntilReplicationTaskRunningAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilReplicationTaskRunning", input)
	return NewVoidFuture(future)
}

func (a *DatabaseMigrationServiceStub) WaitUntilReplicationTaskStopped(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilReplicationTaskStopped", input).Get(ctx, nil)
}

func (a *DatabaseMigrationServiceStub) WaitUntilReplicationTaskStoppedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilReplicationTaskStopped", input)
	return NewVoidFuture(future)
}

func (a *DatabaseMigrationServiceStub) WaitUntilTestConnectionSucceeds(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilTestConnectionSucceeds", input).Get(ctx, nil)
}

func (a *DatabaseMigrationServiceStub) WaitUntilTestConnectionSucceedsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.databasemigrationservice.WaitUntilTestConnectionSucceeds", input)
	return NewVoidFuture(future)
}
