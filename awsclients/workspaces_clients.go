// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/workspaces"
	"go.temporal.io/sdk/workflow"
)

type WorkSpacesClient interface {
	AssociateConnectionAlias(ctx workflow.Context, input *workspaces.AssociateConnectionAliasInput) (*workspaces.AssociateConnectionAliasOutput, error)
	AssociateConnectionAliasAsync(ctx workflow.Context, input *workspaces.AssociateConnectionAliasInput) *WorkspacesAssociateConnectionAliasFuture

	AssociateIpGroups(ctx workflow.Context, input *workspaces.AssociateIpGroupsInput) (*workspaces.AssociateIpGroupsOutput, error)
	AssociateIpGroupsAsync(ctx workflow.Context, input *workspaces.AssociateIpGroupsInput) *WorkspacesAssociateIpGroupsFuture

	AuthorizeIpRules(ctx workflow.Context, input *workspaces.AuthorizeIpRulesInput) (*workspaces.AuthorizeIpRulesOutput, error)
	AuthorizeIpRulesAsync(ctx workflow.Context, input *workspaces.AuthorizeIpRulesInput) *WorkspacesAuthorizeIpRulesFuture

	CopyWorkspaceImage(ctx workflow.Context, input *workspaces.CopyWorkspaceImageInput) (*workspaces.CopyWorkspaceImageOutput, error)
	CopyWorkspaceImageAsync(ctx workflow.Context, input *workspaces.CopyWorkspaceImageInput) *WorkspacesCopyWorkspaceImageFuture

	CreateConnectionAlias(ctx workflow.Context, input *workspaces.CreateConnectionAliasInput) (*workspaces.CreateConnectionAliasOutput, error)
	CreateConnectionAliasAsync(ctx workflow.Context, input *workspaces.CreateConnectionAliasInput) *WorkspacesCreateConnectionAliasFuture

	CreateIpGroup(ctx workflow.Context, input *workspaces.CreateIpGroupInput) (*workspaces.CreateIpGroupOutput, error)
	CreateIpGroupAsync(ctx workflow.Context, input *workspaces.CreateIpGroupInput) *WorkspacesCreateIpGroupFuture

	CreateTags(ctx workflow.Context, input *workspaces.CreateTagsInput) (*workspaces.CreateTagsOutput, error)
	CreateTagsAsync(ctx workflow.Context, input *workspaces.CreateTagsInput) *WorkspacesCreateTagsFuture

	CreateWorkspaces(ctx workflow.Context, input *workspaces.CreateWorkspacesInput) (*workspaces.CreateWorkspacesOutput, error)
	CreateWorkspacesAsync(ctx workflow.Context, input *workspaces.CreateWorkspacesInput) *WorkspacesCreateWorkspacesFuture

	DeleteConnectionAlias(ctx workflow.Context, input *workspaces.DeleteConnectionAliasInput) (*workspaces.DeleteConnectionAliasOutput, error)
	DeleteConnectionAliasAsync(ctx workflow.Context, input *workspaces.DeleteConnectionAliasInput) *WorkspacesDeleteConnectionAliasFuture

	DeleteIpGroup(ctx workflow.Context, input *workspaces.DeleteIpGroupInput) (*workspaces.DeleteIpGroupOutput, error)
	DeleteIpGroupAsync(ctx workflow.Context, input *workspaces.DeleteIpGroupInput) *WorkspacesDeleteIpGroupFuture

	DeleteTags(ctx workflow.Context, input *workspaces.DeleteTagsInput) (*workspaces.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *workspaces.DeleteTagsInput) *WorkspacesDeleteTagsFuture

	DeleteWorkspaceImage(ctx workflow.Context, input *workspaces.DeleteWorkspaceImageInput) (*workspaces.DeleteWorkspaceImageOutput, error)
	DeleteWorkspaceImageAsync(ctx workflow.Context, input *workspaces.DeleteWorkspaceImageInput) *WorkspacesDeleteWorkspaceImageFuture

	DeregisterWorkspaceDirectory(ctx workflow.Context, input *workspaces.DeregisterWorkspaceDirectoryInput) (*workspaces.DeregisterWorkspaceDirectoryOutput, error)
	DeregisterWorkspaceDirectoryAsync(ctx workflow.Context, input *workspaces.DeregisterWorkspaceDirectoryInput) *WorkspacesDeregisterWorkspaceDirectoryFuture

	DescribeAccount(ctx workflow.Context, input *workspaces.DescribeAccountInput) (*workspaces.DescribeAccountOutput, error)
	DescribeAccountAsync(ctx workflow.Context, input *workspaces.DescribeAccountInput) *WorkspacesDescribeAccountFuture

	DescribeAccountModifications(ctx workflow.Context, input *workspaces.DescribeAccountModificationsInput) (*workspaces.DescribeAccountModificationsOutput, error)
	DescribeAccountModificationsAsync(ctx workflow.Context, input *workspaces.DescribeAccountModificationsInput) *WorkspacesDescribeAccountModificationsFuture

	DescribeClientProperties(ctx workflow.Context, input *workspaces.DescribeClientPropertiesInput) (*workspaces.DescribeClientPropertiesOutput, error)
	DescribeClientPropertiesAsync(ctx workflow.Context, input *workspaces.DescribeClientPropertiesInput) *WorkspacesDescribeClientPropertiesFuture

	DescribeConnectionAliasPermissions(ctx workflow.Context, input *workspaces.DescribeConnectionAliasPermissionsInput) (*workspaces.DescribeConnectionAliasPermissionsOutput, error)
	DescribeConnectionAliasPermissionsAsync(ctx workflow.Context, input *workspaces.DescribeConnectionAliasPermissionsInput) *WorkspacesDescribeConnectionAliasPermissionsFuture

	DescribeConnectionAliases(ctx workflow.Context, input *workspaces.DescribeConnectionAliasesInput) (*workspaces.DescribeConnectionAliasesOutput, error)
	DescribeConnectionAliasesAsync(ctx workflow.Context, input *workspaces.DescribeConnectionAliasesInput) *WorkspacesDescribeConnectionAliasesFuture

	DescribeIpGroups(ctx workflow.Context, input *workspaces.DescribeIpGroupsInput) (*workspaces.DescribeIpGroupsOutput, error)
	DescribeIpGroupsAsync(ctx workflow.Context, input *workspaces.DescribeIpGroupsInput) *WorkspacesDescribeIpGroupsFuture

	DescribeTags(ctx workflow.Context, input *workspaces.DescribeTagsInput) (*workspaces.DescribeTagsOutput, error)
	DescribeTagsAsync(ctx workflow.Context, input *workspaces.DescribeTagsInput) *WorkspacesDescribeTagsFuture

	DescribeWorkspaceBundles(ctx workflow.Context, input *workspaces.DescribeWorkspaceBundlesInput) (*workspaces.DescribeWorkspaceBundlesOutput, error)
	DescribeWorkspaceBundlesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceBundlesInput) *WorkspacesDescribeWorkspaceBundlesFuture

	DescribeWorkspaceDirectories(ctx workflow.Context, input *workspaces.DescribeWorkspaceDirectoriesInput) (*workspaces.DescribeWorkspaceDirectoriesOutput, error)
	DescribeWorkspaceDirectoriesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceDirectoriesInput) *WorkspacesDescribeWorkspaceDirectoriesFuture

	DescribeWorkspaceImagePermissions(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagePermissionsInput) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error)
	DescribeWorkspaceImagePermissionsAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagePermissionsInput) *WorkspacesDescribeWorkspaceImagePermissionsFuture

	DescribeWorkspaceImages(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagesInput) (*workspaces.DescribeWorkspaceImagesOutput, error)
	DescribeWorkspaceImagesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagesInput) *WorkspacesDescribeWorkspaceImagesFuture

	DescribeWorkspaceSnapshots(ctx workflow.Context, input *workspaces.DescribeWorkspaceSnapshotsInput) (*workspaces.DescribeWorkspaceSnapshotsOutput, error)
	DescribeWorkspaceSnapshotsAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceSnapshotsInput) *WorkspacesDescribeWorkspaceSnapshotsFuture

	DescribeWorkspaces(ctx workflow.Context, input *workspaces.DescribeWorkspacesInput) (*workspaces.DescribeWorkspacesOutput, error)
	DescribeWorkspacesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspacesInput) *WorkspacesDescribeWorkspacesFuture

	DescribeWorkspacesConnectionStatus(ctx workflow.Context, input *workspaces.DescribeWorkspacesConnectionStatusInput) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error)
	DescribeWorkspacesConnectionStatusAsync(ctx workflow.Context, input *workspaces.DescribeWorkspacesConnectionStatusInput) *WorkspacesDescribeWorkspacesConnectionStatusFuture

	DisassociateConnectionAlias(ctx workflow.Context, input *workspaces.DisassociateConnectionAliasInput) (*workspaces.DisassociateConnectionAliasOutput, error)
	DisassociateConnectionAliasAsync(ctx workflow.Context, input *workspaces.DisassociateConnectionAliasInput) *WorkspacesDisassociateConnectionAliasFuture

	DisassociateIpGroups(ctx workflow.Context, input *workspaces.DisassociateIpGroupsInput) (*workspaces.DisassociateIpGroupsOutput, error)
	DisassociateIpGroupsAsync(ctx workflow.Context, input *workspaces.DisassociateIpGroupsInput) *WorkspacesDisassociateIpGroupsFuture

	ImportWorkspaceImage(ctx workflow.Context, input *workspaces.ImportWorkspaceImageInput) (*workspaces.ImportWorkspaceImageOutput, error)
	ImportWorkspaceImageAsync(ctx workflow.Context, input *workspaces.ImportWorkspaceImageInput) *WorkspacesImportWorkspaceImageFuture

	ListAvailableManagementCidrRanges(ctx workflow.Context, input *workspaces.ListAvailableManagementCidrRangesInput) (*workspaces.ListAvailableManagementCidrRangesOutput, error)
	ListAvailableManagementCidrRangesAsync(ctx workflow.Context, input *workspaces.ListAvailableManagementCidrRangesInput) *WorkspacesListAvailableManagementCidrRangesFuture

	MigrateWorkspace(ctx workflow.Context, input *workspaces.MigrateWorkspaceInput) (*workspaces.MigrateWorkspaceOutput, error)
	MigrateWorkspaceAsync(ctx workflow.Context, input *workspaces.MigrateWorkspaceInput) *WorkspacesMigrateWorkspaceFuture

	ModifyAccount(ctx workflow.Context, input *workspaces.ModifyAccountInput) (*workspaces.ModifyAccountOutput, error)
	ModifyAccountAsync(ctx workflow.Context, input *workspaces.ModifyAccountInput) *WorkspacesModifyAccountFuture

	ModifyClientProperties(ctx workflow.Context, input *workspaces.ModifyClientPropertiesInput) (*workspaces.ModifyClientPropertiesOutput, error)
	ModifyClientPropertiesAsync(ctx workflow.Context, input *workspaces.ModifyClientPropertiesInput) *WorkspacesModifyClientPropertiesFuture

	ModifySelfservicePermissions(ctx workflow.Context, input *workspaces.ModifySelfservicePermissionsInput) (*workspaces.ModifySelfservicePermissionsOutput, error)
	ModifySelfservicePermissionsAsync(ctx workflow.Context, input *workspaces.ModifySelfservicePermissionsInput) *WorkspacesModifySelfservicePermissionsFuture

	ModifyWorkspaceAccessProperties(ctx workflow.Context, input *workspaces.ModifyWorkspaceAccessPropertiesInput) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error)
	ModifyWorkspaceAccessPropertiesAsync(ctx workflow.Context, input *workspaces.ModifyWorkspaceAccessPropertiesInput) *WorkspacesModifyWorkspaceAccessPropertiesFuture

	ModifyWorkspaceCreationProperties(ctx workflow.Context, input *workspaces.ModifyWorkspaceCreationPropertiesInput) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error)
	ModifyWorkspaceCreationPropertiesAsync(ctx workflow.Context, input *workspaces.ModifyWorkspaceCreationPropertiesInput) *WorkspacesModifyWorkspaceCreationPropertiesFuture

	ModifyWorkspaceProperties(ctx workflow.Context, input *workspaces.ModifyWorkspacePropertiesInput) (*workspaces.ModifyWorkspacePropertiesOutput, error)
	ModifyWorkspacePropertiesAsync(ctx workflow.Context, input *workspaces.ModifyWorkspacePropertiesInput) *WorkspacesModifyWorkspacePropertiesFuture

	ModifyWorkspaceState(ctx workflow.Context, input *workspaces.ModifyWorkspaceStateInput) (*workspaces.ModifyWorkspaceStateOutput, error)
	ModifyWorkspaceStateAsync(ctx workflow.Context, input *workspaces.ModifyWorkspaceStateInput) *WorkspacesModifyWorkspaceStateFuture

	RebootWorkspaces(ctx workflow.Context, input *workspaces.RebootWorkspacesInput) (*workspaces.RebootWorkspacesOutput, error)
	RebootWorkspacesAsync(ctx workflow.Context, input *workspaces.RebootWorkspacesInput) *WorkspacesRebootWorkspacesFuture

	RebuildWorkspaces(ctx workflow.Context, input *workspaces.RebuildWorkspacesInput) (*workspaces.RebuildWorkspacesOutput, error)
	RebuildWorkspacesAsync(ctx workflow.Context, input *workspaces.RebuildWorkspacesInput) *WorkspacesRebuildWorkspacesFuture

	RegisterWorkspaceDirectory(ctx workflow.Context, input *workspaces.RegisterWorkspaceDirectoryInput) (*workspaces.RegisterWorkspaceDirectoryOutput, error)
	RegisterWorkspaceDirectoryAsync(ctx workflow.Context, input *workspaces.RegisterWorkspaceDirectoryInput) *WorkspacesRegisterWorkspaceDirectoryFuture

	RestoreWorkspace(ctx workflow.Context, input *workspaces.RestoreWorkspaceInput) (*workspaces.RestoreWorkspaceOutput, error)
	RestoreWorkspaceAsync(ctx workflow.Context, input *workspaces.RestoreWorkspaceInput) *WorkspacesRestoreWorkspaceFuture

	RevokeIpRules(ctx workflow.Context, input *workspaces.RevokeIpRulesInput) (*workspaces.RevokeIpRulesOutput, error)
	RevokeIpRulesAsync(ctx workflow.Context, input *workspaces.RevokeIpRulesInput) *WorkspacesRevokeIpRulesFuture

	StartWorkspaces(ctx workflow.Context, input *workspaces.StartWorkspacesInput) (*workspaces.StartWorkspacesOutput, error)
	StartWorkspacesAsync(ctx workflow.Context, input *workspaces.StartWorkspacesInput) *WorkspacesStartWorkspacesFuture

	StopWorkspaces(ctx workflow.Context, input *workspaces.StopWorkspacesInput) (*workspaces.StopWorkspacesOutput, error)
	StopWorkspacesAsync(ctx workflow.Context, input *workspaces.StopWorkspacesInput) *WorkspacesStopWorkspacesFuture

	TerminateWorkspaces(ctx workflow.Context, input *workspaces.TerminateWorkspacesInput) (*workspaces.TerminateWorkspacesOutput, error)
	TerminateWorkspacesAsync(ctx workflow.Context, input *workspaces.TerminateWorkspacesInput) *WorkspacesTerminateWorkspacesFuture

	UpdateConnectionAliasPermission(ctx workflow.Context, input *workspaces.UpdateConnectionAliasPermissionInput) (*workspaces.UpdateConnectionAliasPermissionOutput, error)
	UpdateConnectionAliasPermissionAsync(ctx workflow.Context, input *workspaces.UpdateConnectionAliasPermissionInput) *WorkspacesUpdateConnectionAliasPermissionFuture

	UpdateRulesOfIpGroup(ctx workflow.Context, input *workspaces.UpdateRulesOfIpGroupInput) (*workspaces.UpdateRulesOfIpGroupOutput, error)
	UpdateRulesOfIpGroupAsync(ctx workflow.Context, input *workspaces.UpdateRulesOfIpGroupInput) *WorkspacesUpdateRulesOfIpGroupFuture

	UpdateWorkspaceImagePermission(ctx workflow.Context, input *workspaces.UpdateWorkspaceImagePermissionInput) (*workspaces.UpdateWorkspaceImagePermissionOutput, error)
	UpdateWorkspaceImagePermissionAsync(ctx workflow.Context, input *workspaces.UpdateWorkspaceImagePermissionInput) *WorkspacesUpdateWorkspaceImagePermissionFuture
}

type WorkSpacesStub struct{}

func NewWorkSpacesStub() WorkSpacesClient {
	return &WorkSpacesStub{}
}

type WorkspacesAssociateConnectionAliasFuture struct {
	Future workflow.Future
}

func (r *WorkspacesAssociateConnectionAliasFuture) Get(ctx workflow.Context) (*workspaces.AssociateConnectionAliasOutput, error) {
	var output workspaces.AssociateConnectionAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesAssociateIpGroupsFuture struct {
	Future workflow.Future
}

func (r *WorkspacesAssociateIpGroupsFuture) Get(ctx workflow.Context) (*workspaces.AssociateIpGroupsOutput, error) {
	var output workspaces.AssociateIpGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesAuthorizeIpRulesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesAuthorizeIpRulesFuture) Get(ctx workflow.Context) (*workspaces.AuthorizeIpRulesOutput, error) {
	var output workspaces.AuthorizeIpRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesCopyWorkspaceImageFuture struct {
	Future workflow.Future
}

func (r *WorkspacesCopyWorkspaceImageFuture) Get(ctx workflow.Context) (*workspaces.CopyWorkspaceImageOutput, error) {
	var output workspaces.CopyWorkspaceImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesCreateConnectionAliasFuture struct {
	Future workflow.Future
}

func (r *WorkspacesCreateConnectionAliasFuture) Get(ctx workflow.Context) (*workspaces.CreateConnectionAliasOutput, error) {
	var output workspaces.CreateConnectionAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesCreateIpGroupFuture struct {
	Future workflow.Future
}

func (r *WorkspacesCreateIpGroupFuture) Get(ctx workflow.Context) (*workspaces.CreateIpGroupOutput, error) {
	var output workspaces.CreateIpGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesCreateTagsFuture struct {
	Future workflow.Future
}

func (r *WorkspacesCreateTagsFuture) Get(ctx workflow.Context) (*workspaces.CreateTagsOutput, error) {
	var output workspaces.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesCreateWorkspacesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesCreateWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.CreateWorkspacesOutput, error) {
	var output workspaces.CreateWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDeleteConnectionAliasFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDeleteConnectionAliasFuture) Get(ctx workflow.Context) (*workspaces.DeleteConnectionAliasOutput, error) {
	var output workspaces.DeleteConnectionAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDeleteIpGroupFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDeleteIpGroupFuture) Get(ctx workflow.Context) (*workspaces.DeleteIpGroupOutput, error) {
	var output workspaces.DeleteIpGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDeleteTagsFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDeleteTagsFuture) Get(ctx workflow.Context) (*workspaces.DeleteTagsOutput, error) {
	var output workspaces.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDeleteWorkspaceImageFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDeleteWorkspaceImageFuture) Get(ctx workflow.Context) (*workspaces.DeleteWorkspaceImageOutput, error) {
	var output workspaces.DeleteWorkspaceImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDeregisterWorkspaceDirectoryFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDeregisterWorkspaceDirectoryFuture) Get(ctx workflow.Context) (*workspaces.DeregisterWorkspaceDirectoryOutput, error) {
	var output workspaces.DeregisterWorkspaceDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeAccountFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeAccountFuture) Get(ctx workflow.Context) (*workspaces.DescribeAccountOutput, error) {
	var output workspaces.DescribeAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeAccountModificationsFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeAccountModificationsFuture) Get(ctx workflow.Context) (*workspaces.DescribeAccountModificationsOutput, error) {
	var output workspaces.DescribeAccountModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeClientPropertiesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeClientPropertiesFuture) Get(ctx workflow.Context) (*workspaces.DescribeClientPropertiesOutput, error) {
	var output workspaces.DescribeClientPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeConnectionAliasPermissionsFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeConnectionAliasPermissionsFuture) Get(ctx workflow.Context) (*workspaces.DescribeConnectionAliasPermissionsOutput, error) {
	var output workspaces.DescribeConnectionAliasPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeConnectionAliasesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeConnectionAliasesFuture) Get(ctx workflow.Context) (*workspaces.DescribeConnectionAliasesOutput, error) {
	var output workspaces.DescribeConnectionAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeIpGroupsFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeIpGroupsFuture) Get(ctx workflow.Context) (*workspaces.DescribeIpGroupsOutput, error) {
	var output workspaces.DescribeIpGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeTagsFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeTagsFuture) Get(ctx workflow.Context) (*workspaces.DescribeTagsOutput, error) {
	var output workspaces.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeWorkspaceBundlesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeWorkspaceBundlesFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	var output workspaces.DescribeWorkspaceBundlesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeWorkspaceDirectoriesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeWorkspaceDirectoriesFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	var output workspaces.DescribeWorkspaceDirectoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeWorkspaceImagePermissionsFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeWorkspaceImagePermissionsFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error) {
	var output workspaces.DescribeWorkspaceImagePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeWorkspaceImagesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeWorkspaceImagesFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	var output workspaces.DescribeWorkspaceImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeWorkspaceSnapshotsFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeWorkspaceSnapshotsFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceSnapshotsOutput, error) {
	var output workspaces.DescribeWorkspaceSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeWorkspacesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspacesOutput, error) {
	var output workspaces.DescribeWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDescribeWorkspacesConnectionStatusFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDescribeWorkspacesConnectionStatusFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	var output workspaces.DescribeWorkspacesConnectionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDisassociateConnectionAliasFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDisassociateConnectionAliasFuture) Get(ctx workflow.Context) (*workspaces.DisassociateConnectionAliasOutput, error) {
	var output workspaces.DisassociateConnectionAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesDisassociateIpGroupsFuture struct {
	Future workflow.Future
}

func (r *WorkspacesDisassociateIpGroupsFuture) Get(ctx workflow.Context) (*workspaces.DisassociateIpGroupsOutput, error) {
	var output workspaces.DisassociateIpGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesImportWorkspaceImageFuture struct {
	Future workflow.Future
}

func (r *WorkspacesImportWorkspaceImageFuture) Get(ctx workflow.Context) (*workspaces.ImportWorkspaceImageOutput, error) {
	var output workspaces.ImportWorkspaceImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesListAvailableManagementCidrRangesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesListAvailableManagementCidrRangesFuture) Get(ctx workflow.Context) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	var output workspaces.ListAvailableManagementCidrRangesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesMigrateWorkspaceFuture struct {
	Future workflow.Future
}

func (r *WorkspacesMigrateWorkspaceFuture) Get(ctx workflow.Context) (*workspaces.MigrateWorkspaceOutput, error) {
	var output workspaces.MigrateWorkspaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesModifyAccountFuture struct {
	Future workflow.Future
}

func (r *WorkspacesModifyAccountFuture) Get(ctx workflow.Context) (*workspaces.ModifyAccountOutput, error) {
	var output workspaces.ModifyAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesModifyClientPropertiesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesModifyClientPropertiesFuture) Get(ctx workflow.Context) (*workspaces.ModifyClientPropertiesOutput, error) {
	var output workspaces.ModifyClientPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesModifySelfservicePermissionsFuture struct {
	Future workflow.Future
}

func (r *WorkspacesModifySelfservicePermissionsFuture) Get(ctx workflow.Context) (*workspaces.ModifySelfservicePermissionsOutput, error) {
	var output workspaces.ModifySelfservicePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesModifyWorkspaceAccessPropertiesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesModifyWorkspaceAccessPropertiesFuture) Get(ctx workflow.Context) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error) {
	var output workspaces.ModifyWorkspaceAccessPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesModifyWorkspaceCreationPropertiesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesModifyWorkspaceCreationPropertiesFuture) Get(ctx workflow.Context) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error) {
	var output workspaces.ModifyWorkspaceCreationPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesModifyWorkspacePropertiesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesModifyWorkspacePropertiesFuture) Get(ctx workflow.Context) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	var output workspaces.ModifyWorkspacePropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesModifyWorkspaceStateFuture struct {
	Future workflow.Future
}

func (r *WorkspacesModifyWorkspaceStateFuture) Get(ctx workflow.Context) (*workspaces.ModifyWorkspaceStateOutput, error) {
	var output workspaces.ModifyWorkspaceStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesRebootWorkspacesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesRebootWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.RebootWorkspacesOutput, error) {
	var output workspaces.RebootWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesRebuildWorkspacesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesRebuildWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.RebuildWorkspacesOutput, error) {
	var output workspaces.RebuildWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesRegisterWorkspaceDirectoryFuture struct {
	Future workflow.Future
}

func (r *WorkspacesRegisterWorkspaceDirectoryFuture) Get(ctx workflow.Context) (*workspaces.RegisterWorkspaceDirectoryOutput, error) {
	var output workspaces.RegisterWorkspaceDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesRestoreWorkspaceFuture struct {
	Future workflow.Future
}

func (r *WorkspacesRestoreWorkspaceFuture) Get(ctx workflow.Context) (*workspaces.RestoreWorkspaceOutput, error) {
	var output workspaces.RestoreWorkspaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesRevokeIpRulesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesRevokeIpRulesFuture) Get(ctx workflow.Context) (*workspaces.RevokeIpRulesOutput, error) {
	var output workspaces.RevokeIpRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesStartWorkspacesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesStartWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.StartWorkspacesOutput, error) {
	var output workspaces.StartWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesStopWorkspacesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesStopWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.StopWorkspacesOutput, error) {
	var output workspaces.StopWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesTerminateWorkspacesFuture struct {
	Future workflow.Future
}

func (r *WorkspacesTerminateWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.TerminateWorkspacesOutput, error) {
	var output workspaces.TerminateWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesUpdateConnectionAliasPermissionFuture struct {
	Future workflow.Future
}

func (r *WorkspacesUpdateConnectionAliasPermissionFuture) Get(ctx workflow.Context) (*workspaces.UpdateConnectionAliasPermissionOutput, error) {
	var output workspaces.UpdateConnectionAliasPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesUpdateRulesOfIpGroupFuture struct {
	Future workflow.Future
}

func (r *WorkspacesUpdateRulesOfIpGroupFuture) Get(ctx workflow.Context) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	var output workspaces.UpdateRulesOfIpGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkspacesUpdateWorkspaceImagePermissionFuture struct {
	Future workflow.Future
}

func (r *WorkspacesUpdateWorkspaceImagePermissionFuture) Get(ctx workflow.Context) (*workspaces.UpdateWorkspaceImagePermissionOutput, error) {
	var output workspaces.UpdateWorkspaceImagePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) AssociateConnectionAlias(ctx workflow.Context, input *workspaces.AssociateConnectionAliasInput) (*workspaces.AssociateConnectionAliasOutput, error) {
	var output workspaces.AssociateConnectionAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.AssociateConnectionAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) AssociateConnectionAliasAsync(ctx workflow.Context, input *workspaces.AssociateConnectionAliasInput) *WorkspacesAssociateConnectionAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.AssociateConnectionAlias", input)
	return &WorkspacesAssociateConnectionAliasFuture{Future: future}
}

func (a *WorkSpacesStub) AssociateIpGroups(ctx workflow.Context, input *workspaces.AssociateIpGroupsInput) (*workspaces.AssociateIpGroupsOutput, error) {
	var output workspaces.AssociateIpGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.AssociateIpGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) AssociateIpGroupsAsync(ctx workflow.Context, input *workspaces.AssociateIpGroupsInput) *WorkspacesAssociateIpGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.AssociateIpGroups", input)
	return &WorkspacesAssociateIpGroupsFuture{Future: future}
}

func (a *WorkSpacesStub) AuthorizeIpRules(ctx workflow.Context, input *workspaces.AuthorizeIpRulesInput) (*workspaces.AuthorizeIpRulesOutput, error) {
	var output workspaces.AuthorizeIpRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.AuthorizeIpRules", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) AuthorizeIpRulesAsync(ctx workflow.Context, input *workspaces.AuthorizeIpRulesInput) *WorkspacesAuthorizeIpRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.AuthorizeIpRules", input)
	return &WorkspacesAuthorizeIpRulesFuture{Future: future}
}

func (a *WorkSpacesStub) CopyWorkspaceImage(ctx workflow.Context, input *workspaces.CopyWorkspaceImageInput) (*workspaces.CopyWorkspaceImageOutput, error) {
	var output workspaces.CopyWorkspaceImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.CopyWorkspaceImage", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) CopyWorkspaceImageAsync(ctx workflow.Context, input *workspaces.CopyWorkspaceImageInput) *WorkspacesCopyWorkspaceImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.CopyWorkspaceImage", input)
	return &WorkspacesCopyWorkspaceImageFuture{Future: future}
}

func (a *WorkSpacesStub) CreateConnectionAlias(ctx workflow.Context, input *workspaces.CreateConnectionAliasInput) (*workspaces.CreateConnectionAliasOutput, error) {
	var output workspaces.CreateConnectionAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.CreateConnectionAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) CreateConnectionAliasAsync(ctx workflow.Context, input *workspaces.CreateConnectionAliasInput) *WorkspacesCreateConnectionAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.CreateConnectionAlias", input)
	return &WorkspacesCreateConnectionAliasFuture{Future: future}
}

func (a *WorkSpacesStub) CreateIpGroup(ctx workflow.Context, input *workspaces.CreateIpGroupInput) (*workspaces.CreateIpGroupOutput, error) {
	var output workspaces.CreateIpGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.CreateIpGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) CreateIpGroupAsync(ctx workflow.Context, input *workspaces.CreateIpGroupInput) *WorkspacesCreateIpGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.CreateIpGroup", input)
	return &WorkspacesCreateIpGroupFuture{Future: future}
}

func (a *WorkSpacesStub) CreateTags(ctx workflow.Context, input *workspaces.CreateTagsInput) (*workspaces.CreateTagsOutput, error) {
	var output workspaces.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) CreateTagsAsync(ctx workflow.Context, input *workspaces.CreateTagsInput) *WorkspacesCreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.CreateTags", input)
	return &WorkspacesCreateTagsFuture{Future: future}
}

func (a *WorkSpacesStub) CreateWorkspaces(ctx workflow.Context, input *workspaces.CreateWorkspacesInput) (*workspaces.CreateWorkspacesOutput, error) {
	var output workspaces.CreateWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.CreateWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) CreateWorkspacesAsync(ctx workflow.Context, input *workspaces.CreateWorkspacesInput) *WorkspacesCreateWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.CreateWorkspaces", input)
	return &WorkspacesCreateWorkspacesFuture{Future: future}
}

func (a *WorkSpacesStub) DeleteConnectionAlias(ctx workflow.Context, input *workspaces.DeleteConnectionAliasInput) (*workspaces.DeleteConnectionAliasOutput, error) {
	var output workspaces.DeleteConnectionAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DeleteConnectionAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DeleteConnectionAliasAsync(ctx workflow.Context, input *workspaces.DeleteConnectionAliasInput) *WorkspacesDeleteConnectionAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DeleteConnectionAlias", input)
	return &WorkspacesDeleteConnectionAliasFuture{Future: future}
}

func (a *WorkSpacesStub) DeleteIpGroup(ctx workflow.Context, input *workspaces.DeleteIpGroupInput) (*workspaces.DeleteIpGroupOutput, error) {
	var output workspaces.DeleteIpGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DeleteIpGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DeleteIpGroupAsync(ctx workflow.Context, input *workspaces.DeleteIpGroupInput) *WorkspacesDeleteIpGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DeleteIpGroup", input)
	return &WorkspacesDeleteIpGroupFuture{Future: future}
}

func (a *WorkSpacesStub) DeleteTags(ctx workflow.Context, input *workspaces.DeleteTagsInput) (*workspaces.DeleteTagsOutput, error) {
	var output workspaces.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DeleteTagsAsync(ctx workflow.Context, input *workspaces.DeleteTagsInput) *WorkspacesDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DeleteTags", input)
	return &WorkspacesDeleteTagsFuture{Future: future}
}

func (a *WorkSpacesStub) DeleteWorkspaceImage(ctx workflow.Context, input *workspaces.DeleteWorkspaceImageInput) (*workspaces.DeleteWorkspaceImageOutput, error) {
	var output workspaces.DeleteWorkspaceImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DeleteWorkspaceImage", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DeleteWorkspaceImageAsync(ctx workflow.Context, input *workspaces.DeleteWorkspaceImageInput) *WorkspacesDeleteWorkspaceImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DeleteWorkspaceImage", input)
	return &WorkspacesDeleteWorkspaceImageFuture{Future: future}
}

func (a *WorkSpacesStub) DeregisterWorkspaceDirectory(ctx workflow.Context, input *workspaces.DeregisterWorkspaceDirectoryInput) (*workspaces.DeregisterWorkspaceDirectoryOutput, error) {
	var output workspaces.DeregisterWorkspaceDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DeregisterWorkspaceDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DeregisterWorkspaceDirectoryAsync(ctx workflow.Context, input *workspaces.DeregisterWorkspaceDirectoryInput) *WorkspacesDeregisterWorkspaceDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DeregisterWorkspaceDirectory", input)
	return &WorkspacesDeregisterWorkspaceDirectoryFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeAccount(ctx workflow.Context, input *workspaces.DescribeAccountInput) (*workspaces.DescribeAccountOutput, error) {
	var output workspaces.DescribeAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeAccountAsync(ctx workflow.Context, input *workspaces.DescribeAccountInput) *WorkspacesDescribeAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeAccount", input)
	return &WorkspacesDescribeAccountFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeAccountModifications(ctx workflow.Context, input *workspaces.DescribeAccountModificationsInput) (*workspaces.DescribeAccountModificationsOutput, error) {
	var output workspaces.DescribeAccountModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeAccountModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeAccountModificationsAsync(ctx workflow.Context, input *workspaces.DescribeAccountModificationsInput) *WorkspacesDescribeAccountModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeAccountModifications", input)
	return &WorkspacesDescribeAccountModificationsFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeClientProperties(ctx workflow.Context, input *workspaces.DescribeClientPropertiesInput) (*workspaces.DescribeClientPropertiesOutput, error) {
	var output workspaces.DescribeClientPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeClientProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeClientPropertiesAsync(ctx workflow.Context, input *workspaces.DescribeClientPropertiesInput) *WorkspacesDescribeClientPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeClientProperties", input)
	return &WorkspacesDescribeClientPropertiesFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeConnectionAliasPermissions(ctx workflow.Context, input *workspaces.DescribeConnectionAliasPermissionsInput) (*workspaces.DescribeConnectionAliasPermissionsOutput, error) {
	var output workspaces.DescribeConnectionAliasPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeConnectionAliasPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeConnectionAliasPermissionsAsync(ctx workflow.Context, input *workspaces.DescribeConnectionAliasPermissionsInput) *WorkspacesDescribeConnectionAliasPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeConnectionAliasPermissions", input)
	return &WorkspacesDescribeConnectionAliasPermissionsFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeConnectionAliases(ctx workflow.Context, input *workspaces.DescribeConnectionAliasesInput) (*workspaces.DescribeConnectionAliasesOutput, error) {
	var output workspaces.DescribeConnectionAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeConnectionAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeConnectionAliasesAsync(ctx workflow.Context, input *workspaces.DescribeConnectionAliasesInput) *WorkspacesDescribeConnectionAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeConnectionAliases", input)
	return &WorkspacesDescribeConnectionAliasesFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeIpGroups(ctx workflow.Context, input *workspaces.DescribeIpGroupsInput) (*workspaces.DescribeIpGroupsOutput, error) {
	var output workspaces.DescribeIpGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeIpGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeIpGroupsAsync(ctx workflow.Context, input *workspaces.DescribeIpGroupsInput) *WorkspacesDescribeIpGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeIpGroups", input)
	return &WorkspacesDescribeIpGroupsFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeTags(ctx workflow.Context, input *workspaces.DescribeTagsInput) (*workspaces.DescribeTagsOutput, error) {
	var output workspaces.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeTagsAsync(ctx workflow.Context, input *workspaces.DescribeTagsInput) *WorkspacesDescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeTags", input)
	return &WorkspacesDescribeTagsFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeWorkspaceBundles(ctx workflow.Context, input *workspaces.DescribeWorkspaceBundlesInput) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	var output workspaces.DescribeWorkspaceBundlesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspaceBundles", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeWorkspaceBundlesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceBundlesInput) *WorkspacesDescribeWorkspaceBundlesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspaceBundles", input)
	return &WorkspacesDescribeWorkspaceBundlesFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeWorkspaceDirectories(ctx workflow.Context, input *workspaces.DescribeWorkspaceDirectoriesInput) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	var output workspaces.DescribeWorkspaceDirectoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspaceDirectories", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeWorkspaceDirectoriesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceDirectoriesInput) *WorkspacesDescribeWorkspaceDirectoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspaceDirectories", input)
	return &WorkspacesDescribeWorkspaceDirectoriesFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeWorkspaceImagePermissions(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagePermissionsInput) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error) {
	var output workspaces.DescribeWorkspaceImagePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspaceImagePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeWorkspaceImagePermissionsAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagePermissionsInput) *WorkspacesDescribeWorkspaceImagePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspaceImagePermissions", input)
	return &WorkspacesDescribeWorkspaceImagePermissionsFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeWorkspaceImages(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagesInput) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	var output workspaces.DescribeWorkspaceImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspaceImages", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeWorkspaceImagesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagesInput) *WorkspacesDescribeWorkspaceImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspaceImages", input)
	return &WorkspacesDescribeWorkspaceImagesFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeWorkspaceSnapshots(ctx workflow.Context, input *workspaces.DescribeWorkspaceSnapshotsInput) (*workspaces.DescribeWorkspaceSnapshotsOutput, error) {
	var output workspaces.DescribeWorkspaceSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspaceSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeWorkspaceSnapshotsAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceSnapshotsInput) *WorkspacesDescribeWorkspaceSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspaceSnapshots", input)
	return &WorkspacesDescribeWorkspaceSnapshotsFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeWorkspaces(ctx workflow.Context, input *workspaces.DescribeWorkspacesInput) (*workspaces.DescribeWorkspacesOutput, error) {
	var output workspaces.DescribeWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeWorkspacesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspacesInput) *WorkspacesDescribeWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspaces", input)
	return &WorkspacesDescribeWorkspacesFuture{Future: future}
}

func (a *WorkSpacesStub) DescribeWorkspacesConnectionStatus(ctx workflow.Context, input *workspaces.DescribeWorkspacesConnectionStatusInput) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	var output workspaces.DescribeWorkspacesConnectionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspacesConnectionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DescribeWorkspacesConnectionStatusAsync(ctx workflow.Context, input *workspaces.DescribeWorkspacesConnectionStatusInput) *WorkspacesDescribeWorkspacesConnectionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DescribeWorkspacesConnectionStatus", input)
	return &WorkspacesDescribeWorkspacesConnectionStatusFuture{Future: future}
}

func (a *WorkSpacesStub) DisassociateConnectionAlias(ctx workflow.Context, input *workspaces.DisassociateConnectionAliasInput) (*workspaces.DisassociateConnectionAliasOutput, error) {
	var output workspaces.DisassociateConnectionAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DisassociateConnectionAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DisassociateConnectionAliasAsync(ctx workflow.Context, input *workspaces.DisassociateConnectionAliasInput) *WorkspacesDisassociateConnectionAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DisassociateConnectionAlias", input)
	return &WorkspacesDisassociateConnectionAliasFuture{Future: future}
}

func (a *WorkSpacesStub) DisassociateIpGroups(ctx workflow.Context, input *workspaces.DisassociateIpGroupsInput) (*workspaces.DisassociateIpGroupsOutput, error) {
	var output workspaces.DisassociateIpGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.DisassociateIpGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) DisassociateIpGroupsAsync(ctx workflow.Context, input *workspaces.DisassociateIpGroupsInput) *WorkspacesDisassociateIpGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.DisassociateIpGroups", input)
	return &WorkspacesDisassociateIpGroupsFuture{Future: future}
}

func (a *WorkSpacesStub) ImportWorkspaceImage(ctx workflow.Context, input *workspaces.ImportWorkspaceImageInput) (*workspaces.ImportWorkspaceImageOutput, error) {
	var output workspaces.ImportWorkspaceImageOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.ImportWorkspaceImage", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) ImportWorkspaceImageAsync(ctx workflow.Context, input *workspaces.ImportWorkspaceImageInput) *WorkspacesImportWorkspaceImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.ImportWorkspaceImage", input)
	return &WorkspacesImportWorkspaceImageFuture{Future: future}
}

func (a *WorkSpacesStub) ListAvailableManagementCidrRanges(ctx workflow.Context, input *workspaces.ListAvailableManagementCidrRangesInput) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	var output workspaces.ListAvailableManagementCidrRangesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.ListAvailableManagementCidrRanges", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) ListAvailableManagementCidrRangesAsync(ctx workflow.Context, input *workspaces.ListAvailableManagementCidrRangesInput) *WorkspacesListAvailableManagementCidrRangesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.ListAvailableManagementCidrRanges", input)
	return &WorkspacesListAvailableManagementCidrRangesFuture{Future: future}
}

func (a *WorkSpacesStub) MigrateWorkspace(ctx workflow.Context, input *workspaces.MigrateWorkspaceInput) (*workspaces.MigrateWorkspaceOutput, error) {
	var output workspaces.MigrateWorkspaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.MigrateWorkspace", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) MigrateWorkspaceAsync(ctx workflow.Context, input *workspaces.MigrateWorkspaceInput) *WorkspacesMigrateWorkspaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.MigrateWorkspace", input)
	return &WorkspacesMigrateWorkspaceFuture{Future: future}
}

func (a *WorkSpacesStub) ModifyAccount(ctx workflow.Context, input *workspaces.ModifyAccountInput) (*workspaces.ModifyAccountOutput, error) {
	var output workspaces.ModifyAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifyAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) ModifyAccountAsync(ctx workflow.Context, input *workspaces.ModifyAccountInput) *WorkspacesModifyAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifyAccount", input)
	return &WorkspacesModifyAccountFuture{Future: future}
}

func (a *WorkSpacesStub) ModifyClientProperties(ctx workflow.Context, input *workspaces.ModifyClientPropertiesInput) (*workspaces.ModifyClientPropertiesOutput, error) {
	var output workspaces.ModifyClientPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifyClientProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) ModifyClientPropertiesAsync(ctx workflow.Context, input *workspaces.ModifyClientPropertiesInput) *WorkspacesModifyClientPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifyClientProperties", input)
	return &WorkspacesModifyClientPropertiesFuture{Future: future}
}

func (a *WorkSpacesStub) ModifySelfservicePermissions(ctx workflow.Context, input *workspaces.ModifySelfservicePermissionsInput) (*workspaces.ModifySelfservicePermissionsOutput, error) {
	var output workspaces.ModifySelfservicePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifySelfservicePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) ModifySelfservicePermissionsAsync(ctx workflow.Context, input *workspaces.ModifySelfservicePermissionsInput) *WorkspacesModifySelfservicePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifySelfservicePermissions", input)
	return &WorkspacesModifySelfservicePermissionsFuture{Future: future}
}

func (a *WorkSpacesStub) ModifyWorkspaceAccessProperties(ctx workflow.Context, input *workspaces.ModifyWorkspaceAccessPropertiesInput) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error) {
	var output workspaces.ModifyWorkspaceAccessPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifyWorkspaceAccessProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) ModifyWorkspaceAccessPropertiesAsync(ctx workflow.Context, input *workspaces.ModifyWorkspaceAccessPropertiesInput) *WorkspacesModifyWorkspaceAccessPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifyWorkspaceAccessProperties", input)
	return &WorkspacesModifyWorkspaceAccessPropertiesFuture{Future: future}
}

func (a *WorkSpacesStub) ModifyWorkspaceCreationProperties(ctx workflow.Context, input *workspaces.ModifyWorkspaceCreationPropertiesInput) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error) {
	var output workspaces.ModifyWorkspaceCreationPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifyWorkspaceCreationProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) ModifyWorkspaceCreationPropertiesAsync(ctx workflow.Context, input *workspaces.ModifyWorkspaceCreationPropertiesInput) *WorkspacesModifyWorkspaceCreationPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifyWorkspaceCreationProperties", input)
	return &WorkspacesModifyWorkspaceCreationPropertiesFuture{Future: future}
}

func (a *WorkSpacesStub) ModifyWorkspaceProperties(ctx workflow.Context, input *workspaces.ModifyWorkspacePropertiesInput) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	var output workspaces.ModifyWorkspacePropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifyWorkspaceProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) ModifyWorkspacePropertiesAsync(ctx workflow.Context, input *workspaces.ModifyWorkspacePropertiesInput) *WorkspacesModifyWorkspacePropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifyWorkspaceProperties", input)
	return &WorkspacesModifyWorkspacePropertiesFuture{Future: future}
}

func (a *WorkSpacesStub) ModifyWorkspaceState(ctx workflow.Context, input *workspaces.ModifyWorkspaceStateInput) (*workspaces.ModifyWorkspaceStateOutput, error) {
	var output workspaces.ModifyWorkspaceStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifyWorkspaceState", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) ModifyWorkspaceStateAsync(ctx workflow.Context, input *workspaces.ModifyWorkspaceStateInput) *WorkspacesModifyWorkspaceStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.ModifyWorkspaceState", input)
	return &WorkspacesModifyWorkspaceStateFuture{Future: future}
}

func (a *WorkSpacesStub) RebootWorkspaces(ctx workflow.Context, input *workspaces.RebootWorkspacesInput) (*workspaces.RebootWorkspacesOutput, error) {
	var output workspaces.RebootWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.RebootWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) RebootWorkspacesAsync(ctx workflow.Context, input *workspaces.RebootWorkspacesInput) *WorkspacesRebootWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.RebootWorkspaces", input)
	return &WorkspacesRebootWorkspacesFuture{Future: future}
}

func (a *WorkSpacesStub) RebuildWorkspaces(ctx workflow.Context, input *workspaces.RebuildWorkspacesInput) (*workspaces.RebuildWorkspacesOutput, error) {
	var output workspaces.RebuildWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.RebuildWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) RebuildWorkspacesAsync(ctx workflow.Context, input *workspaces.RebuildWorkspacesInput) *WorkspacesRebuildWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.RebuildWorkspaces", input)
	return &WorkspacesRebuildWorkspacesFuture{Future: future}
}

func (a *WorkSpacesStub) RegisterWorkspaceDirectory(ctx workflow.Context, input *workspaces.RegisterWorkspaceDirectoryInput) (*workspaces.RegisterWorkspaceDirectoryOutput, error) {
	var output workspaces.RegisterWorkspaceDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.RegisterWorkspaceDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) RegisterWorkspaceDirectoryAsync(ctx workflow.Context, input *workspaces.RegisterWorkspaceDirectoryInput) *WorkspacesRegisterWorkspaceDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.RegisterWorkspaceDirectory", input)
	return &WorkspacesRegisterWorkspaceDirectoryFuture{Future: future}
}

func (a *WorkSpacesStub) RestoreWorkspace(ctx workflow.Context, input *workspaces.RestoreWorkspaceInput) (*workspaces.RestoreWorkspaceOutput, error) {
	var output workspaces.RestoreWorkspaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.RestoreWorkspace", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) RestoreWorkspaceAsync(ctx workflow.Context, input *workspaces.RestoreWorkspaceInput) *WorkspacesRestoreWorkspaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.RestoreWorkspace", input)
	return &WorkspacesRestoreWorkspaceFuture{Future: future}
}

func (a *WorkSpacesStub) RevokeIpRules(ctx workflow.Context, input *workspaces.RevokeIpRulesInput) (*workspaces.RevokeIpRulesOutput, error) {
	var output workspaces.RevokeIpRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.RevokeIpRules", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) RevokeIpRulesAsync(ctx workflow.Context, input *workspaces.RevokeIpRulesInput) *WorkspacesRevokeIpRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.RevokeIpRules", input)
	return &WorkspacesRevokeIpRulesFuture{Future: future}
}

func (a *WorkSpacesStub) StartWorkspaces(ctx workflow.Context, input *workspaces.StartWorkspacesInput) (*workspaces.StartWorkspacesOutput, error) {
	var output workspaces.StartWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.StartWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) StartWorkspacesAsync(ctx workflow.Context, input *workspaces.StartWorkspacesInput) *WorkspacesStartWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.StartWorkspaces", input)
	return &WorkspacesStartWorkspacesFuture{Future: future}
}

func (a *WorkSpacesStub) StopWorkspaces(ctx workflow.Context, input *workspaces.StopWorkspacesInput) (*workspaces.StopWorkspacesOutput, error) {
	var output workspaces.StopWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.StopWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) StopWorkspacesAsync(ctx workflow.Context, input *workspaces.StopWorkspacesInput) *WorkspacesStopWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.StopWorkspaces", input)
	return &WorkspacesStopWorkspacesFuture{Future: future}
}

func (a *WorkSpacesStub) TerminateWorkspaces(ctx workflow.Context, input *workspaces.TerminateWorkspacesInput) (*workspaces.TerminateWorkspacesOutput, error) {
	var output workspaces.TerminateWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.TerminateWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) TerminateWorkspacesAsync(ctx workflow.Context, input *workspaces.TerminateWorkspacesInput) *WorkspacesTerminateWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.TerminateWorkspaces", input)
	return &WorkspacesTerminateWorkspacesFuture{Future: future}
}

func (a *WorkSpacesStub) UpdateConnectionAliasPermission(ctx workflow.Context, input *workspaces.UpdateConnectionAliasPermissionInput) (*workspaces.UpdateConnectionAliasPermissionOutput, error) {
	var output workspaces.UpdateConnectionAliasPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.UpdateConnectionAliasPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) UpdateConnectionAliasPermissionAsync(ctx workflow.Context, input *workspaces.UpdateConnectionAliasPermissionInput) *WorkspacesUpdateConnectionAliasPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.UpdateConnectionAliasPermission", input)
	return &WorkspacesUpdateConnectionAliasPermissionFuture{Future: future}
}

func (a *WorkSpacesStub) UpdateRulesOfIpGroup(ctx workflow.Context, input *workspaces.UpdateRulesOfIpGroupInput) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	var output workspaces.UpdateRulesOfIpGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.UpdateRulesOfIpGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) UpdateRulesOfIpGroupAsync(ctx workflow.Context, input *workspaces.UpdateRulesOfIpGroupInput) *WorkspacesUpdateRulesOfIpGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.UpdateRulesOfIpGroup", input)
	return &WorkspacesUpdateRulesOfIpGroupFuture{Future: future}
}

func (a *WorkSpacesStub) UpdateWorkspaceImagePermission(ctx workflow.Context, input *workspaces.UpdateWorkspaceImagePermissionInput) (*workspaces.UpdateWorkspaceImagePermissionOutput, error) {
	var output workspaces.UpdateWorkspaceImagePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.workspaces.UpdateWorkspaceImagePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkSpacesStub) UpdateWorkspaceImagePermissionAsync(ctx workflow.Context, input *workspaces.UpdateWorkspaceImagePermissionInput) *WorkspacesUpdateWorkspaceImagePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.workspaces.UpdateWorkspaceImagePermission", input)
	return &WorkspacesUpdateWorkspaceImagePermissionFuture{Future: future}
}
