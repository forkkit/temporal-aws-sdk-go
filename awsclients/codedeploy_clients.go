// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/codedeploy"
	"go.temporal.io/sdk/workflow"
)

type CodeDeployClient interface {
	AddTagsToOnPremisesInstances(ctx workflow.Context, input *codedeploy.AddTagsToOnPremisesInstancesInput) (*codedeploy.AddTagsToOnPremisesInstancesOutput, error)
	AddTagsToOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.AddTagsToOnPremisesInstancesInput) *CodedeployAddTagsToOnPremisesInstancesFuture

	BatchGetApplicationRevisions(ctx workflow.Context, input *codedeploy.BatchGetApplicationRevisionsInput) (*codedeploy.BatchGetApplicationRevisionsOutput, error)
	BatchGetApplicationRevisionsAsync(ctx workflow.Context, input *codedeploy.BatchGetApplicationRevisionsInput) *CodedeployBatchGetApplicationRevisionsFuture

	BatchGetApplications(ctx workflow.Context, input *codedeploy.BatchGetApplicationsInput) (*codedeploy.BatchGetApplicationsOutput, error)
	BatchGetApplicationsAsync(ctx workflow.Context, input *codedeploy.BatchGetApplicationsInput) *CodedeployBatchGetApplicationsFuture

	BatchGetDeploymentGroups(ctx workflow.Context, input *codedeploy.BatchGetDeploymentGroupsInput) (*codedeploy.BatchGetDeploymentGroupsOutput, error)
	BatchGetDeploymentGroupsAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentGroupsInput) *CodedeployBatchGetDeploymentGroupsFuture

	BatchGetDeploymentInstances(ctx workflow.Context, input *codedeploy.BatchGetDeploymentInstancesInput) (*codedeploy.BatchGetDeploymentInstancesOutput, error)
	BatchGetDeploymentInstancesAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentInstancesInput) *CodedeployBatchGetDeploymentInstancesFuture

	BatchGetDeploymentTargets(ctx workflow.Context, input *codedeploy.BatchGetDeploymentTargetsInput) (*codedeploy.BatchGetDeploymentTargetsOutput, error)
	BatchGetDeploymentTargetsAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentTargetsInput) *CodedeployBatchGetDeploymentTargetsFuture

	BatchGetDeployments(ctx workflow.Context, input *codedeploy.BatchGetDeploymentsInput) (*codedeploy.BatchGetDeploymentsOutput, error)
	BatchGetDeploymentsAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentsInput) *CodedeployBatchGetDeploymentsFuture

	BatchGetOnPremisesInstances(ctx workflow.Context, input *codedeploy.BatchGetOnPremisesInstancesInput) (*codedeploy.BatchGetOnPremisesInstancesOutput, error)
	BatchGetOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.BatchGetOnPremisesInstancesInput) *CodedeployBatchGetOnPremisesInstancesFuture

	ContinueDeployment(ctx workflow.Context, input *codedeploy.ContinueDeploymentInput) (*codedeploy.ContinueDeploymentOutput, error)
	ContinueDeploymentAsync(ctx workflow.Context, input *codedeploy.ContinueDeploymentInput) *CodedeployContinueDeploymentFuture

	CreateApplication(ctx workflow.Context, input *codedeploy.CreateApplicationInput) (*codedeploy.CreateApplicationOutput, error)
	CreateApplicationAsync(ctx workflow.Context, input *codedeploy.CreateApplicationInput) *CodedeployCreateApplicationFuture

	CreateDeployment(ctx workflow.Context, input *codedeploy.CreateDeploymentInput) (*codedeploy.CreateDeploymentOutput, error)
	CreateDeploymentAsync(ctx workflow.Context, input *codedeploy.CreateDeploymentInput) *CodedeployCreateDeploymentFuture

	CreateDeploymentConfig(ctx workflow.Context, input *codedeploy.CreateDeploymentConfigInput) (*codedeploy.CreateDeploymentConfigOutput, error)
	CreateDeploymentConfigAsync(ctx workflow.Context, input *codedeploy.CreateDeploymentConfigInput) *CodedeployCreateDeploymentConfigFuture

	CreateDeploymentGroup(ctx workflow.Context, input *codedeploy.CreateDeploymentGroupInput) (*codedeploy.CreateDeploymentGroupOutput, error)
	CreateDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.CreateDeploymentGroupInput) *CodedeployCreateDeploymentGroupFuture

	DeleteApplication(ctx workflow.Context, input *codedeploy.DeleteApplicationInput) (*codedeploy.DeleteApplicationOutput, error)
	DeleteApplicationAsync(ctx workflow.Context, input *codedeploy.DeleteApplicationInput) *CodedeployDeleteApplicationFuture

	DeleteDeploymentConfig(ctx workflow.Context, input *codedeploy.DeleteDeploymentConfigInput) (*codedeploy.DeleteDeploymentConfigOutput, error)
	DeleteDeploymentConfigAsync(ctx workflow.Context, input *codedeploy.DeleteDeploymentConfigInput) *CodedeployDeleteDeploymentConfigFuture

	DeleteDeploymentGroup(ctx workflow.Context, input *codedeploy.DeleteDeploymentGroupInput) (*codedeploy.DeleteDeploymentGroupOutput, error)
	DeleteDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.DeleteDeploymentGroupInput) *CodedeployDeleteDeploymentGroupFuture

	DeleteGitHubAccountToken(ctx workflow.Context, input *codedeploy.DeleteGitHubAccountTokenInput) (*codedeploy.DeleteGitHubAccountTokenOutput, error)
	DeleteGitHubAccountTokenAsync(ctx workflow.Context, input *codedeploy.DeleteGitHubAccountTokenInput) *CodedeployDeleteGitHubAccountTokenFuture

	DeleteResourcesByExternalId(ctx workflow.Context, input *codedeploy.DeleteResourcesByExternalIdInput) (*codedeploy.DeleteResourcesByExternalIdOutput, error)
	DeleteResourcesByExternalIdAsync(ctx workflow.Context, input *codedeploy.DeleteResourcesByExternalIdInput) *CodedeployDeleteResourcesByExternalIdFuture

	DeregisterOnPremisesInstance(ctx workflow.Context, input *codedeploy.DeregisterOnPremisesInstanceInput) (*codedeploy.DeregisterOnPremisesInstanceOutput, error)
	DeregisterOnPremisesInstanceAsync(ctx workflow.Context, input *codedeploy.DeregisterOnPremisesInstanceInput) *CodedeployDeregisterOnPremisesInstanceFuture

	GetApplication(ctx workflow.Context, input *codedeploy.GetApplicationInput) (*codedeploy.GetApplicationOutput, error)
	GetApplicationAsync(ctx workflow.Context, input *codedeploy.GetApplicationInput) *CodedeployGetApplicationFuture

	GetApplicationRevision(ctx workflow.Context, input *codedeploy.GetApplicationRevisionInput) (*codedeploy.GetApplicationRevisionOutput, error)
	GetApplicationRevisionAsync(ctx workflow.Context, input *codedeploy.GetApplicationRevisionInput) *CodedeployGetApplicationRevisionFuture

	GetDeployment(ctx workflow.Context, input *codedeploy.GetDeploymentInput) (*codedeploy.GetDeploymentOutput, error)
	GetDeploymentAsync(ctx workflow.Context, input *codedeploy.GetDeploymentInput) *CodedeployGetDeploymentFuture

	GetDeploymentConfig(ctx workflow.Context, input *codedeploy.GetDeploymentConfigInput) (*codedeploy.GetDeploymentConfigOutput, error)
	GetDeploymentConfigAsync(ctx workflow.Context, input *codedeploy.GetDeploymentConfigInput) *CodedeployGetDeploymentConfigFuture

	GetDeploymentGroup(ctx workflow.Context, input *codedeploy.GetDeploymentGroupInput) (*codedeploy.GetDeploymentGroupOutput, error)
	GetDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.GetDeploymentGroupInput) *CodedeployGetDeploymentGroupFuture

	GetDeploymentInstance(ctx workflow.Context, input *codedeploy.GetDeploymentInstanceInput) (*codedeploy.GetDeploymentInstanceOutput, error)
	GetDeploymentInstanceAsync(ctx workflow.Context, input *codedeploy.GetDeploymentInstanceInput) *CodedeployGetDeploymentInstanceFuture

	GetDeploymentTarget(ctx workflow.Context, input *codedeploy.GetDeploymentTargetInput) (*codedeploy.GetDeploymentTargetOutput, error)
	GetDeploymentTargetAsync(ctx workflow.Context, input *codedeploy.GetDeploymentTargetInput) *CodedeployGetDeploymentTargetFuture

	GetOnPremisesInstance(ctx workflow.Context, input *codedeploy.GetOnPremisesInstanceInput) (*codedeploy.GetOnPremisesInstanceOutput, error)
	GetOnPremisesInstanceAsync(ctx workflow.Context, input *codedeploy.GetOnPremisesInstanceInput) *CodedeployGetOnPremisesInstanceFuture

	ListApplicationRevisions(ctx workflow.Context, input *codedeploy.ListApplicationRevisionsInput) (*codedeploy.ListApplicationRevisionsOutput, error)
	ListApplicationRevisionsAsync(ctx workflow.Context, input *codedeploy.ListApplicationRevisionsInput) *CodedeployListApplicationRevisionsFuture

	ListApplications(ctx workflow.Context, input *codedeploy.ListApplicationsInput) (*codedeploy.ListApplicationsOutput, error)
	ListApplicationsAsync(ctx workflow.Context, input *codedeploy.ListApplicationsInput) *CodedeployListApplicationsFuture

	ListDeploymentConfigs(ctx workflow.Context, input *codedeploy.ListDeploymentConfigsInput) (*codedeploy.ListDeploymentConfigsOutput, error)
	ListDeploymentConfigsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentConfigsInput) *CodedeployListDeploymentConfigsFuture

	ListDeploymentGroups(ctx workflow.Context, input *codedeploy.ListDeploymentGroupsInput) (*codedeploy.ListDeploymentGroupsOutput, error)
	ListDeploymentGroupsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentGroupsInput) *CodedeployListDeploymentGroupsFuture

	ListDeploymentInstances(ctx workflow.Context, input *codedeploy.ListDeploymentInstancesInput) (*codedeploy.ListDeploymentInstancesOutput, error)
	ListDeploymentInstancesAsync(ctx workflow.Context, input *codedeploy.ListDeploymentInstancesInput) *CodedeployListDeploymentInstancesFuture

	ListDeploymentTargets(ctx workflow.Context, input *codedeploy.ListDeploymentTargetsInput) (*codedeploy.ListDeploymentTargetsOutput, error)
	ListDeploymentTargetsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentTargetsInput) *CodedeployListDeploymentTargetsFuture

	ListDeployments(ctx workflow.Context, input *codedeploy.ListDeploymentsInput) (*codedeploy.ListDeploymentsOutput, error)
	ListDeploymentsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentsInput) *CodedeployListDeploymentsFuture

	ListGitHubAccountTokenNames(ctx workflow.Context, input *codedeploy.ListGitHubAccountTokenNamesInput) (*codedeploy.ListGitHubAccountTokenNamesOutput, error)
	ListGitHubAccountTokenNamesAsync(ctx workflow.Context, input *codedeploy.ListGitHubAccountTokenNamesInput) *CodedeployListGitHubAccountTokenNamesFuture

	ListOnPremisesInstances(ctx workflow.Context, input *codedeploy.ListOnPremisesInstancesInput) (*codedeploy.ListOnPremisesInstancesOutput, error)
	ListOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.ListOnPremisesInstancesInput) *CodedeployListOnPremisesInstancesFuture

	ListTagsForResource(ctx workflow.Context, input *codedeploy.ListTagsForResourceInput) (*codedeploy.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *codedeploy.ListTagsForResourceInput) *CodedeployListTagsForResourceFuture

	PutLifecycleEventHookExecutionStatus(ctx workflow.Context, input *codedeploy.PutLifecycleEventHookExecutionStatusInput) (*codedeploy.PutLifecycleEventHookExecutionStatusOutput, error)
	PutLifecycleEventHookExecutionStatusAsync(ctx workflow.Context, input *codedeploy.PutLifecycleEventHookExecutionStatusInput) *CodedeployPutLifecycleEventHookExecutionStatusFuture

	RegisterApplicationRevision(ctx workflow.Context, input *codedeploy.RegisterApplicationRevisionInput) (*codedeploy.RegisterApplicationRevisionOutput, error)
	RegisterApplicationRevisionAsync(ctx workflow.Context, input *codedeploy.RegisterApplicationRevisionInput) *CodedeployRegisterApplicationRevisionFuture

	RegisterOnPremisesInstance(ctx workflow.Context, input *codedeploy.RegisterOnPremisesInstanceInput) (*codedeploy.RegisterOnPremisesInstanceOutput, error)
	RegisterOnPremisesInstanceAsync(ctx workflow.Context, input *codedeploy.RegisterOnPremisesInstanceInput) *CodedeployRegisterOnPremisesInstanceFuture

	RemoveTagsFromOnPremisesInstances(ctx workflow.Context, input *codedeploy.RemoveTagsFromOnPremisesInstancesInput) (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput, error)
	RemoveTagsFromOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.RemoveTagsFromOnPremisesInstancesInput) *CodedeployRemoveTagsFromOnPremisesInstancesFuture

	SkipWaitTimeForInstanceTermination(ctx workflow.Context, input *codedeploy.SkipWaitTimeForInstanceTerminationInput) (*codedeploy.SkipWaitTimeForInstanceTerminationOutput, error)
	SkipWaitTimeForInstanceTerminationAsync(ctx workflow.Context, input *codedeploy.SkipWaitTimeForInstanceTerminationInput) *CodedeploySkipWaitTimeForInstanceTerminationFuture

	StopDeployment(ctx workflow.Context, input *codedeploy.StopDeploymentInput) (*codedeploy.StopDeploymentOutput, error)
	StopDeploymentAsync(ctx workflow.Context, input *codedeploy.StopDeploymentInput) *CodedeployStopDeploymentFuture

	TagResource(ctx workflow.Context, input *codedeploy.TagResourceInput) (*codedeploy.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *codedeploy.TagResourceInput) *CodedeployTagResourceFuture

	UntagResource(ctx workflow.Context, input *codedeploy.UntagResourceInput) (*codedeploy.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *codedeploy.UntagResourceInput) *CodedeployUntagResourceFuture

	UpdateApplication(ctx workflow.Context, input *codedeploy.UpdateApplicationInput) (*codedeploy.UpdateApplicationOutput, error)
	UpdateApplicationAsync(ctx workflow.Context, input *codedeploy.UpdateApplicationInput) *CodedeployUpdateApplicationFuture

	UpdateDeploymentGroup(ctx workflow.Context, input *codedeploy.UpdateDeploymentGroupInput) (*codedeploy.UpdateDeploymentGroupOutput, error)
	UpdateDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.UpdateDeploymentGroupInput) *CodedeployUpdateDeploymentGroupFuture

	WaitUntilDeploymentSuccessful(ctx workflow.Context, input *codedeploy.GetDeploymentInput) error
	WaitUntilDeploymentSuccessfulAsync(ctx workflow.Context, input *codedeploy.GetDeploymentInput) *VoidFuture
}

type CodeDeployStub struct{}

func NewCodeDeployStub() CodeDeployClient {
	return &CodeDeployStub{}
}

type CodedeployAddTagsToOnPremisesInstancesFuture struct {
	Future workflow.Future
}

func (r *CodedeployAddTagsToOnPremisesInstancesFuture) Get(ctx workflow.Context) (*codedeploy.AddTagsToOnPremisesInstancesOutput, error) {
	var output codedeploy.AddTagsToOnPremisesInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployBatchGetApplicationRevisionsFuture struct {
	Future workflow.Future
}

func (r *CodedeployBatchGetApplicationRevisionsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetApplicationRevisionsOutput, error) {
	var output codedeploy.BatchGetApplicationRevisionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployBatchGetApplicationsFuture struct {
	Future workflow.Future
}

func (r *CodedeployBatchGetApplicationsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetApplicationsOutput, error) {
	var output codedeploy.BatchGetApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployBatchGetDeploymentGroupsFuture struct {
	Future workflow.Future
}

func (r *CodedeployBatchGetDeploymentGroupsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetDeploymentGroupsOutput, error) {
	var output codedeploy.BatchGetDeploymentGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployBatchGetDeploymentInstancesFuture struct {
	Future workflow.Future
}

func (r *CodedeployBatchGetDeploymentInstancesFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetDeploymentInstancesOutput, error) {
	var output codedeploy.BatchGetDeploymentInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployBatchGetDeploymentTargetsFuture struct {
	Future workflow.Future
}

func (r *CodedeployBatchGetDeploymentTargetsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetDeploymentTargetsOutput, error) {
	var output codedeploy.BatchGetDeploymentTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployBatchGetDeploymentsFuture struct {
	Future workflow.Future
}

func (r *CodedeployBatchGetDeploymentsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetDeploymentsOutput, error) {
	var output codedeploy.BatchGetDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployBatchGetOnPremisesInstancesFuture struct {
	Future workflow.Future
}

func (r *CodedeployBatchGetOnPremisesInstancesFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetOnPremisesInstancesOutput, error) {
	var output codedeploy.BatchGetOnPremisesInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployContinueDeploymentFuture struct {
	Future workflow.Future
}

func (r *CodedeployContinueDeploymentFuture) Get(ctx workflow.Context) (*codedeploy.ContinueDeploymentOutput, error) {
	var output codedeploy.ContinueDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployCreateApplicationFuture struct {
	Future workflow.Future
}

func (r *CodedeployCreateApplicationFuture) Get(ctx workflow.Context) (*codedeploy.CreateApplicationOutput, error) {
	var output codedeploy.CreateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployCreateDeploymentFuture struct {
	Future workflow.Future
}

func (r *CodedeployCreateDeploymentFuture) Get(ctx workflow.Context) (*codedeploy.CreateDeploymentOutput, error) {
	var output codedeploy.CreateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployCreateDeploymentConfigFuture struct {
	Future workflow.Future
}

func (r *CodedeployCreateDeploymentConfigFuture) Get(ctx workflow.Context) (*codedeploy.CreateDeploymentConfigOutput, error) {
	var output codedeploy.CreateDeploymentConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployCreateDeploymentGroupFuture struct {
	Future workflow.Future
}

func (r *CodedeployCreateDeploymentGroupFuture) Get(ctx workflow.Context) (*codedeploy.CreateDeploymentGroupOutput, error) {
	var output codedeploy.CreateDeploymentGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployDeleteApplicationFuture struct {
	Future workflow.Future
}

func (r *CodedeployDeleteApplicationFuture) Get(ctx workflow.Context) (*codedeploy.DeleteApplicationOutput, error) {
	var output codedeploy.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployDeleteDeploymentConfigFuture struct {
	Future workflow.Future
}

func (r *CodedeployDeleteDeploymentConfigFuture) Get(ctx workflow.Context) (*codedeploy.DeleteDeploymentConfigOutput, error) {
	var output codedeploy.DeleteDeploymentConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployDeleteDeploymentGroupFuture struct {
	Future workflow.Future
}

func (r *CodedeployDeleteDeploymentGroupFuture) Get(ctx workflow.Context) (*codedeploy.DeleteDeploymentGroupOutput, error) {
	var output codedeploy.DeleteDeploymentGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployDeleteGitHubAccountTokenFuture struct {
	Future workflow.Future
}

func (r *CodedeployDeleteGitHubAccountTokenFuture) Get(ctx workflow.Context) (*codedeploy.DeleteGitHubAccountTokenOutput, error) {
	var output codedeploy.DeleteGitHubAccountTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployDeleteResourcesByExternalIdFuture struct {
	Future workflow.Future
}

func (r *CodedeployDeleteResourcesByExternalIdFuture) Get(ctx workflow.Context) (*codedeploy.DeleteResourcesByExternalIdOutput, error) {
	var output codedeploy.DeleteResourcesByExternalIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployDeregisterOnPremisesInstanceFuture struct {
	Future workflow.Future
}

func (r *CodedeployDeregisterOnPremisesInstanceFuture) Get(ctx workflow.Context) (*codedeploy.DeregisterOnPremisesInstanceOutput, error) {
	var output codedeploy.DeregisterOnPremisesInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployGetApplicationFuture struct {
	Future workflow.Future
}

func (r *CodedeployGetApplicationFuture) Get(ctx workflow.Context) (*codedeploy.GetApplicationOutput, error) {
	var output codedeploy.GetApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployGetApplicationRevisionFuture struct {
	Future workflow.Future
}

func (r *CodedeployGetApplicationRevisionFuture) Get(ctx workflow.Context) (*codedeploy.GetApplicationRevisionOutput, error) {
	var output codedeploy.GetApplicationRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployGetDeploymentFuture struct {
	Future workflow.Future
}

func (r *CodedeployGetDeploymentFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentOutput, error) {
	var output codedeploy.GetDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployGetDeploymentConfigFuture struct {
	Future workflow.Future
}

func (r *CodedeployGetDeploymentConfigFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentConfigOutput, error) {
	var output codedeploy.GetDeploymentConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployGetDeploymentGroupFuture struct {
	Future workflow.Future
}

func (r *CodedeployGetDeploymentGroupFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentGroupOutput, error) {
	var output codedeploy.GetDeploymentGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployGetDeploymentInstanceFuture struct {
	Future workflow.Future
}

func (r *CodedeployGetDeploymentInstanceFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentInstanceOutput, error) {
	var output codedeploy.GetDeploymentInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployGetDeploymentTargetFuture struct {
	Future workflow.Future
}

func (r *CodedeployGetDeploymentTargetFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentTargetOutput, error) {
	var output codedeploy.GetDeploymentTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployGetOnPremisesInstanceFuture struct {
	Future workflow.Future
}

func (r *CodedeployGetOnPremisesInstanceFuture) Get(ctx workflow.Context) (*codedeploy.GetOnPremisesInstanceOutput, error) {
	var output codedeploy.GetOnPremisesInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployListApplicationRevisionsFuture struct {
	Future workflow.Future
}

func (r *CodedeployListApplicationRevisionsFuture) Get(ctx workflow.Context) (*codedeploy.ListApplicationRevisionsOutput, error) {
	var output codedeploy.ListApplicationRevisionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployListApplicationsFuture struct {
	Future workflow.Future
}

func (r *CodedeployListApplicationsFuture) Get(ctx workflow.Context) (*codedeploy.ListApplicationsOutput, error) {
	var output codedeploy.ListApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployListDeploymentConfigsFuture struct {
	Future workflow.Future
}

func (r *CodedeployListDeploymentConfigsFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentConfigsOutput, error) {
	var output codedeploy.ListDeploymentConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployListDeploymentGroupsFuture struct {
	Future workflow.Future
}

func (r *CodedeployListDeploymentGroupsFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentGroupsOutput, error) {
	var output codedeploy.ListDeploymentGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployListDeploymentInstancesFuture struct {
	Future workflow.Future
}

func (r *CodedeployListDeploymentInstancesFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentInstancesOutput, error) {
	var output codedeploy.ListDeploymentInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployListDeploymentTargetsFuture struct {
	Future workflow.Future
}

func (r *CodedeployListDeploymentTargetsFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentTargetsOutput, error) {
	var output codedeploy.ListDeploymentTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployListDeploymentsFuture struct {
	Future workflow.Future
}

func (r *CodedeployListDeploymentsFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentsOutput, error) {
	var output codedeploy.ListDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployListGitHubAccountTokenNamesFuture struct {
	Future workflow.Future
}

func (r *CodedeployListGitHubAccountTokenNamesFuture) Get(ctx workflow.Context) (*codedeploy.ListGitHubAccountTokenNamesOutput, error) {
	var output codedeploy.ListGitHubAccountTokenNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployListOnPremisesInstancesFuture struct {
	Future workflow.Future
}

func (r *CodedeployListOnPremisesInstancesFuture) Get(ctx workflow.Context) (*codedeploy.ListOnPremisesInstancesOutput, error) {
	var output codedeploy.ListOnPremisesInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *CodedeployListTagsForResourceFuture) Get(ctx workflow.Context) (*codedeploy.ListTagsForResourceOutput, error) {
	var output codedeploy.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployPutLifecycleEventHookExecutionStatusFuture struct {
	Future workflow.Future
}

func (r *CodedeployPutLifecycleEventHookExecutionStatusFuture) Get(ctx workflow.Context) (*codedeploy.PutLifecycleEventHookExecutionStatusOutput, error) {
	var output codedeploy.PutLifecycleEventHookExecutionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployRegisterApplicationRevisionFuture struct {
	Future workflow.Future
}

func (r *CodedeployRegisterApplicationRevisionFuture) Get(ctx workflow.Context) (*codedeploy.RegisterApplicationRevisionOutput, error) {
	var output codedeploy.RegisterApplicationRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployRegisterOnPremisesInstanceFuture struct {
	Future workflow.Future
}

func (r *CodedeployRegisterOnPremisesInstanceFuture) Get(ctx workflow.Context) (*codedeploy.RegisterOnPremisesInstanceOutput, error) {
	var output codedeploy.RegisterOnPremisesInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployRemoveTagsFromOnPremisesInstancesFuture struct {
	Future workflow.Future
}

func (r *CodedeployRemoveTagsFromOnPremisesInstancesFuture) Get(ctx workflow.Context) (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput, error) {
	var output codedeploy.RemoveTagsFromOnPremisesInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeploySkipWaitTimeForInstanceTerminationFuture struct {
	Future workflow.Future
}

func (r *CodedeploySkipWaitTimeForInstanceTerminationFuture) Get(ctx workflow.Context) (*codedeploy.SkipWaitTimeForInstanceTerminationOutput, error) {
	var output codedeploy.SkipWaitTimeForInstanceTerminationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployStopDeploymentFuture struct {
	Future workflow.Future
}

func (r *CodedeployStopDeploymentFuture) Get(ctx workflow.Context) (*codedeploy.StopDeploymentOutput, error) {
	var output codedeploy.StopDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployTagResourceFuture struct {
	Future workflow.Future
}

func (r *CodedeployTagResourceFuture) Get(ctx workflow.Context) (*codedeploy.TagResourceOutput, error) {
	var output codedeploy.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployUntagResourceFuture struct {
	Future workflow.Future
}

func (r *CodedeployUntagResourceFuture) Get(ctx workflow.Context) (*codedeploy.UntagResourceOutput, error) {
	var output codedeploy.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployUpdateApplicationFuture struct {
	Future workflow.Future
}

func (r *CodedeployUpdateApplicationFuture) Get(ctx workflow.Context) (*codedeploy.UpdateApplicationOutput, error) {
	var output codedeploy.UpdateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodedeployUpdateDeploymentGroupFuture struct {
	Future workflow.Future
}

func (r *CodedeployUpdateDeploymentGroupFuture) Get(ctx workflow.Context) (*codedeploy.UpdateDeploymentGroupOutput, error) {
	var output codedeploy.UpdateDeploymentGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) AddTagsToOnPremisesInstances(ctx workflow.Context, input *codedeploy.AddTagsToOnPremisesInstancesInput) (*codedeploy.AddTagsToOnPremisesInstancesOutput, error) {
	var output codedeploy.AddTagsToOnPremisesInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.AddTagsToOnPremisesInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) AddTagsToOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.AddTagsToOnPremisesInstancesInput) *CodedeployAddTagsToOnPremisesInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.AddTagsToOnPremisesInstances", input)
	return &CodedeployAddTagsToOnPremisesInstancesFuture{Future: future}
}

func (a *CodeDeployStub) BatchGetApplicationRevisions(ctx workflow.Context, input *codedeploy.BatchGetApplicationRevisionsInput) (*codedeploy.BatchGetApplicationRevisionsOutput, error) {
	var output codedeploy.BatchGetApplicationRevisionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetApplicationRevisions", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) BatchGetApplicationRevisionsAsync(ctx workflow.Context, input *codedeploy.BatchGetApplicationRevisionsInput) *CodedeployBatchGetApplicationRevisionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetApplicationRevisions", input)
	return &CodedeployBatchGetApplicationRevisionsFuture{Future: future}
}

func (a *CodeDeployStub) BatchGetApplications(ctx workflow.Context, input *codedeploy.BatchGetApplicationsInput) (*codedeploy.BatchGetApplicationsOutput, error) {
	var output codedeploy.BatchGetApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) BatchGetApplicationsAsync(ctx workflow.Context, input *codedeploy.BatchGetApplicationsInput) *CodedeployBatchGetApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetApplications", input)
	return &CodedeployBatchGetApplicationsFuture{Future: future}
}

func (a *CodeDeployStub) BatchGetDeploymentGroups(ctx workflow.Context, input *codedeploy.BatchGetDeploymentGroupsInput) (*codedeploy.BatchGetDeploymentGroupsOutput, error) {
	var output codedeploy.BatchGetDeploymentGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetDeploymentGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) BatchGetDeploymentGroupsAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentGroupsInput) *CodedeployBatchGetDeploymentGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetDeploymentGroups", input)
	return &CodedeployBatchGetDeploymentGroupsFuture{Future: future}
}

func (a *CodeDeployStub) BatchGetDeploymentInstances(ctx workflow.Context, input *codedeploy.BatchGetDeploymentInstancesInput) (*codedeploy.BatchGetDeploymentInstancesOutput, error) {
	var output codedeploy.BatchGetDeploymentInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetDeploymentInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) BatchGetDeploymentInstancesAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentInstancesInput) *CodedeployBatchGetDeploymentInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetDeploymentInstances", input)
	return &CodedeployBatchGetDeploymentInstancesFuture{Future: future}
}

func (a *CodeDeployStub) BatchGetDeploymentTargets(ctx workflow.Context, input *codedeploy.BatchGetDeploymentTargetsInput) (*codedeploy.BatchGetDeploymentTargetsOutput, error) {
	var output codedeploy.BatchGetDeploymentTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetDeploymentTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) BatchGetDeploymentTargetsAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentTargetsInput) *CodedeployBatchGetDeploymentTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetDeploymentTargets", input)
	return &CodedeployBatchGetDeploymentTargetsFuture{Future: future}
}

func (a *CodeDeployStub) BatchGetDeployments(ctx workflow.Context, input *codedeploy.BatchGetDeploymentsInput) (*codedeploy.BatchGetDeploymentsOutput, error) {
	var output codedeploy.BatchGetDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) BatchGetDeploymentsAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentsInput) *CodedeployBatchGetDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetDeployments", input)
	return &CodedeployBatchGetDeploymentsFuture{Future: future}
}

func (a *CodeDeployStub) BatchGetOnPremisesInstances(ctx workflow.Context, input *codedeploy.BatchGetOnPremisesInstancesInput) (*codedeploy.BatchGetOnPremisesInstancesOutput, error) {
	var output codedeploy.BatchGetOnPremisesInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetOnPremisesInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) BatchGetOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.BatchGetOnPremisesInstancesInput) *CodedeployBatchGetOnPremisesInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.BatchGetOnPremisesInstances", input)
	return &CodedeployBatchGetOnPremisesInstancesFuture{Future: future}
}

func (a *CodeDeployStub) ContinueDeployment(ctx workflow.Context, input *codedeploy.ContinueDeploymentInput) (*codedeploy.ContinueDeploymentOutput, error) {
	var output codedeploy.ContinueDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.ContinueDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) ContinueDeploymentAsync(ctx workflow.Context, input *codedeploy.ContinueDeploymentInput) *CodedeployContinueDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.ContinueDeployment", input)
	return &CodedeployContinueDeploymentFuture{Future: future}
}

func (a *CodeDeployStub) CreateApplication(ctx workflow.Context, input *codedeploy.CreateApplicationInput) (*codedeploy.CreateApplicationOutput, error) {
	var output codedeploy.CreateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) CreateApplicationAsync(ctx workflow.Context, input *codedeploy.CreateApplicationInput) *CodedeployCreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.CreateApplication", input)
	return &CodedeployCreateApplicationFuture{Future: future}
}

func (a *CodeDeployStub) CreateDeployment(ctx workflow.Context, input *codedeploy.CreateDeploymentInput) (*codedeploy.CreateDeploymentOutput, error) {
	var output codedeploy.CreateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) CreateDeploymentAsync(ctx workflow.Context, input *codedeploy.CreateDeploymentInput) *CodedeployCreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.CreateDeployment", input)
	return &CodedeployCreateDeploymentFuture{Future: future}
}

func (a *CodeDeployStub) CreateDeploymentConfig(ctx workflow.Context, input *codedeploy.CreateDeploymentConfigInput) (*codedeploy.CreateDeploymentConfigOutput, error) {
	var output codedeploy.CreateDeploymentConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.CreateDeploymentConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) CreateDeploymentConfigAsync(ctx workflow.Context, input *codedeploy.CreateDeploymentConfigInput) *CodedeployCreateDeploymentConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.CreateDeploymentConfig", input)
	return &CodedeployCreateDeploymentConfigFuture{Future: future}
}

func (a *CodeDeployStub) CreateDeploymentGroup(ctx workflow.Context, input *codedeploy.CreateDeploymentGroupInput) (*codedeploy.CreateDeploymentGroupOutput, error) {
	var output codedeploy.CreateDeploymentGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.CreateDeploymentGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) CreateDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.CreateDeploymentGroupInput) *CodedeployCreateDeploymentGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.CreateDeploymentGroup", input)
	return &CodedeployCreateDeploymentGroupFuture{Future: future}
}

func (a *CodeDeployStub) DeleteApplication(ctx workflow.Context, input *codedeploy.DeleteApplicationInput) (*codedeploy.DeleteApplicationOutput, error) {
	var output codedeploy.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) DeleteApplicationAsync(ctx workflow.Context, input *codedeploy.DeleteApplicationInput) *CodedeployDeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.DeleteApplication", input)
	return &CodedeployDeleteApplicationFuture{Future: future}
}

func (a *CodeDeployStub) DeleteDeploymentConfig(ctx workflow.Context, input *codedeploy.DeleteDeploymentConfigInput) (*codedeploy.DeleteDeploymentConfigOutput, error) {
	var output codedeploy.DeleteDeploymentConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.DeleteDeploymentConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) DeleteDeploymentConfigAsync(ctx workflow.Context, input *codedeploy.DeleteDeploymentConfigInput) *CodedeployDeleteDeploymentConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.DeleteDeploymentConfig", input)
	return &CodedeployDeleteDeploymentConfigFuture{Future: future}
}

func (a *CodeDeployStub) DeleteDeploymentGroup(ctx workflow.Context, input *codedeploy.DeleteDeploymentGroupInput) (*codedeploy.DeleteDeploymentGroupOutput, error) {
	var output codedeploy.DeleteDeploymentGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.DeleteDeploymentGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) DeleteDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.DeleteDeploymentGroupInput) *CodedeployDeleteDeploymentGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.DeleteDeploymentGroup", input)
	return &CodedeployDeleteDeploymentGroupFuture{Future: future}
}

func (a *CodeDeployStub) DeleteGitHubAccountToken(ctx workflow.Context, input *codedeploy.DeleteGitHubAccountTokenInput) (*codedeploy.DeleteGitHubAccountTokenOutput, error) {
	var output codedeploy.DeleteGitHubAccountTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.DeleteGitHubAccountToken", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) DeleteGitHubAccountTokenAsync(ctx workflow.Context, input *codedeploy.DeleteGitHubAccountTokenInput) *CodedeployDeleteGitHubAccountTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.DeleteGitHubAccountToken", input)
	return &CodedeployDeleteGitHubAccountTokenFuture{Future: future}
}

func (a *CodeDeployStub) DeleteResourcesByExternalId(ctx workflow.Context, input *codedeploy.DeleteResourcesByExternalIdInput) (*codedeploy.DeleteResourcesByExternalIdOutput, error) {
	var output codedeploy.DeleteResourcesByExternalIdOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.DeleteResourcesByExternalId", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) DeleteResourcesByExternalIdAsync(ctx workflow.Context, input *codedeploy.DeleteResourcesByExternalIdInput) *CodedeployDeleteResourcesByExternalIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.DeleteResourcesByExternalId", input)
	return &CodedeployDeleteResourcesByExternalIdFuture{Future: future}
}

func (a *CodeDeployStub) DeregisterOnPremisesInstance(ctx workflow.Context, input *codedeploy.DeregisterOnPremisesInstanceInput) (*codedeploy.DeregisterOnPremisesInstanceOutput, error) {
	var output codedeploy.DeregisterOnPremisesInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.DeregisterOnPremisesInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) DeregisterOnPremisesInstanceAsync(ctx workflow.Context, input *codedeploy.DeregisterOnPremisesInstanceInput) *CodedeployDeregisterOnPremisesInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.DeregisterOnPremisesInstance", input)
	return &CodedeployDeregisterOnPremisesInstanceFuture{Future: future}
}

func (a *CodeDeployStub) GetApplication(ctx workflow.Context, input *codedeploy.GetApplicationInput) (*codedeploy.GetApplicationOutput, error) {
	var output codedeploy.GetApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) GetApplicationAsync(ctx workflow.Context, input *codedeploy.GetApplicationInput) *CodedeployGetApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetApplication", input)
	return &CodedeployGetApplicationFuture{Future: future}
}

func (a *CodeDeployStub) GetApplicationRevision(ctx workflow.Context, input *codedeploy.GetApplicationRevisionInput) (*codedeploy.GetApplicationRevisionOutput, error) {
	var output codedeploy.GetApplicationRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetApplicationRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) GetApplicationRevisionAsync(ctx workflow.Context, input *codedeploy.GetApplicationRevisionInput) *CodedeployGetApplicationRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetApplicationRevision", input)
	return &CodedeployGetApplicationRevisionFuture{Future: future}
}

func (a *CodeDeployStub) GetDeployment(ctx workflow.Context, input *codedeploy.GetDeploymentInput) (*codedeploy.GetDeploymentOutput, error) {
	var output codedeploy.GetDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) GetDeploymentAsync(ctx workflow.Context, input *codedeploy.GetDeploymentInput) *CodedeployGetDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetDeployment", input)
	return &CodedeployGetDeploymentFuture{Future: future}
}

func (a *CodeDeployStub) GetDeploymentConfig(ctx workflow.Context, input *codedeploy.GetDeploymentConfigInput) (*codedeploy.GetDeploymentConfigOutput, error) {
	var output codedeploy.GetDeploymentConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetDeploymentConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) GetDeploymentConfigAsync(ctx workflow.Context, input *codedeploy.GetDeploymentConfigInput) *CodedeployGetDeploymentConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetDeploymentConfig", input)
	return &CodedeployGetDeploymentConfigFuture{Future: future}
}

func (a *CodeDeployStub) GetDeploymentGroup(ctx workflow.Context, input *codedeploy.GetDeploymentGroupInput) (*codedeploy.GetDeploymentGroupOutput, error) {
	var output codedeploy.GetDeploymentGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetDeploymentGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) GetDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.GetDeploymentGroupInput) *CodedeployGetDeploymentGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetDeploymentGroup", input)
	return &CodedeployGetDeploymentGroupFuture{Future: future}
}

func (a *CodeDeployStub) GetDeploymentInstance(ctx workflow.Context, input *codedeploy.GetDeploymentInstanceInput) (*codedeploy.GetDeploymentInstanceOutput, error) {
	var output codedeploy.GetDeploymentInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetDeploymentInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) GetDeploymentInstanceAsync(ctx workflow.Context, input *codedeploy.GetDeploymentInstanceInput) *CodedeployGetDeploymentInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetDeploymentInstance", input)
	return &CodedeployGetDeploymentInstanceFuture{Future: future}
}

func (a *CodeDeployStub) GetDeploymentTarget(ctx workflow.Context, input *codedeploy.GetDeploymentTargetInput) (*codedeploy.GetDeploymentTargetOutput, error) {
	var output codedeploy.GetDeploymentTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetDeploymentTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) GetDeploymentTargetAsync(ctx workflow.Context, input *codedeploy.GetDeploymentTargetInput) *CodedeployGetDeploymentTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetDeploymentTarget", input)
	return &CodedeployGetDeploymentTargetFuture{Future: future}
}

func (a *CodeDeployStub) GetOnPremisesInstance(ctx workflow.Context, input *codedeploy.GetOnPremisesInstanceInput) (*codedeploy.GetOnPremisesInstanceOutput, error) {
	var output codedeploy.GetOnPremisesInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetOnPremisesInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) GetOnPremisesInstanceAsync(ctx workflow.Context, input *codedeploy.GetOnPremisesInstanceInput) *CodedeployGetOnPremisesInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.GetOnPremisesInstance", input)
	return &CodedeployGetOnPremisesInstanceFuture{Future: future}
}

func (a *CodeDeployStub) ListApplicationRevisions(ctx workflow.Context, input *codedeploy.ListApplicationRevisionsInput) (*codedeploy.ListApplicationRevisionsOutput, error) {
	var output codedeploy.ListApplicationRevisionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListApplicationRevisions", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) ListApplicationRevisionsAsync(ctx workflow.Context, input *codedeploy.ListApplicationRevisionsInput) *CodedeployListApplicationRevisionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListApplicationRevisions", input)
	return &CodedeployListApplicationRevisionsFuture{Future: future}
}

func (a *CodeDeployStub) ListApplications(ctx workflow.Context, input *codedeploy.ListApplicationsInput) (*codedeploy.ListApplicationsOutput, error) {
	var output codedeploy.ListApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) ListApplicationsAsync(ctx workflow.Context, input *codedeploy.ListApplicationsInput) *CodedeployListApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListApplications", input)
	return &CodedeployListApplicationsFuture{Future: future}
}

func (a *CodeDeployStub) ListDeploymentConfigs(ctx workflow.Context, input *codedeploy.ListDeploymentConfigsInput) (*codedeploy.ListDeploymentConfigsOutput, error) {
	var output codedeploy.ListDeploymentConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListDeploymentConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) ListDeploymentConfigsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentConfigsInput) *CodedeployListDeploymentConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListDeploymentConfigs", input)
	return &CodedeployListDeploymentConfigsFuture{Future: future}
}

func (a *CodeDeployStub) ListDeploymentGroups(ctx workflow.Context, input *codedeploy.ListDeploymentGroupsInput) (*codedeploy.ListDeploymentGroupsOutput, error) {
	var output codedeploy.ListDeploymentGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListDeploymentGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) ListDeploymentGroupsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentGroupsInput) *CodedeployListDeploymentGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListDeploymentGroups", input)
	return &CodedeployListDeploymentGroupsFuture{Future: future}
}

func (a *CodeDeployStub) ListDeploymentInstances(ctx workflow.Context, input *codedeploy.ListDeploymentInstancesInput) (*codedeploy.ListDeploymentInstancesOutput, error) {
	var output codedeploy.ListDeploymentInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListDeploymentInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) ListDeploymentInstancesAsync(ctx workflow.Context, input *codedeploy.ListDeploymentInstancesInput) *CodedeployListDeploymentInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListDeploymentInstances", input)
	return &CodedeployListDeploymentInstancesFuture{Future: future}
}

func (a *CodeDeployStub) ListDeploymentTargets(ctx workflow.Context, input *codedeploy.ListDeploymentTargetsInput) (*codedeploy.ListDeploymentTargetsOutput, error) {
	var output codedeploy.ListDeploymentTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListDeploymentTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) ListDeploymentTargetsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentTargetsInput) *CodedeployListDeploymentTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListDeploymentTargets", input)
	return &CodedeployListDeploymentTargetsFuture{Future: future}
}

func (a *CodeDeployStub) ListDeployments(ctx workflow.Context, input *codedeploy.ListDeploymentsInput) (*codedeploy.ListDeploymentsOutput, error) {
	var output codedeploy.ListDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) ListDeploymentsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentsInput) *CodedeployListDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListDeployments", input)
	return &CodedeployListDeploymentsFuture{Future: future}
}

func (a *CodeDeployStub) ListGitHubAccountTokenNames(ctx workflow.Context, input *codedeploy.ListGitHubAccountTokenNamesInput) (*codedeploy.ListGitHubAccountTokenNamesOutput, error) {
	var output codedeploy.ListGitHubAccountTokenNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListGitHubAccountTokenNames", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) ListGitHubAccountTokenNamesAsync(ctx workflow.Context, input *codedeploy.ListGitHubAccountTokenNamesInput) *CodedeployListGitHubAccountTokenNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListGitHubAccountTokenNames", input)
	return &CodedeployListGitHubAccountTokenNamesFuture{Future: future}
}

func (a *CodeDeployStub) ListOnPremisesInstances(ctx workflow.Context, input *codedeploy.ListOnPremisesInstancesInput) (*codedeploy.ListOnPremisesInstancesOutput, error) {
	var output codedeploy.ListOnPremisesInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListOnPremisesInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) ListOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.ListOnPremisesInstancesInput) *CodedeployListOnPremisesInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListOnPremisesInstances", input)
	return &CodedeployListOnPremisesInstancesFuture{Future: future}
}

func (a *CodeDeployStub) ListTagsForResource(ctx workflow.Context, input *codedeploy.ListTagsForResourceInput) (*codedeploy.ListTagsForResourceOutput, error) {
	var output codedeploy.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) ListTagsForResourceAsync(ctx workflow.Context, input *codedeploy.ListTagsForResourceInput) *CodedeployListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.ListTagsForResource", input)
	return &CodedeployListTagsForResourceFuture{Future: future}
}

func (a *CodeDeployStub) PutLifecycleEventHookExecutionStatus(ctx workflow.Context, input *codedeploy.PutLifecycleEventHookExecutionStatusInput) (*codedeploy.PutLifecycleEventHookExecutionStatusOutput, error) {
	var output codedeploy.PutLifecycleEventHookExecutionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.PutLifecycleEventHookExecutionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) PutLifecycleEventHookExecutionStatusAsync(ctx workflow.Context, input *codedeploy.PutLifecycleEventHookExecutionStatusInput) *CodedeployPutLifecycleEventHookExecutionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.PutLifecycleEventHookExecutionStatus", input)
	return &CodedeployPutLifecycleEventHookExecutionStatusFuture{Future: future}
}

func (a *CodeDeployStub) RegisterApplicationRevision(ctx workflow.Context, input *codedeploy.RegisterApplicationRevisionInput) (*codedeploy.RegisterApplicationRevisionOutput, error) {
	var output codedeploy.RegisterApplicationRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.RegisterApplicationRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) RegisterApplicationRevisionAsync(ctx workflow.Context, input *codedeploy.RegisterApplicationRevisionInput) *CodedeployRegisterApplicationRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.RegisterApplicationRevision", input)
	return &CodedeployRegisterApplicationRevisionFuture{Future: future}
}

func (a *CodeDeployStub) RegisterOnPremisesInstance(ctx workflow.Context, input *codedeploy.RegisterOnPremisesInstanceInput) (*codedeploy.RegisterOnPremisesInstanceOutput, error) {
	var output codedeploy.RegisterOnPremisesInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.RegisterOnPremisesInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) RegisterOnPremisesInstanceAsync(ctx workflow.Context, input *codedeploy.RegisterOnPremisesInstanceInput) *CodedeployRegisterOnPremisesInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.RegisterOnPremisesInstance", input)
	return &CodedeployRegisterOnPremisesInstanceFuture{Future: future}
}

func (a *CodeDeployStub) RemoveTagsFromOnPremisesInstances(ctx workflow.Context, input *codedeploy.RemoveTagsFromOnPremisesInstancesInput) (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput, error) {
	var output codedeploy.RemoveTagsFromOnPremisesInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.RemoveTagsFromOnPremisesInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) RemoveTagsFromOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.RemoveTagsFromOnPremisesInstancesInput) *CodedeployRemoveTagsFromOnPremisesInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.RemoveTagsFromOnPremisesInstances", input)
	return &CodedeployRemoveTagsFromOnPremisesInstancesFuture{Future: future}
}

func (a *CodeDeployStub) SkipWaitTimeForInstanceTermination(ctx workflow.Context, input *codedeploy.SkipWaitTimeForInstanceTerminationInput) (*codedeploy.SkipWaitTimeForInstanceTerminationOutput, error) {
	var output codedeploy.SkipWaitTimeForInstanceTerminationOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.SkipWaitTimeForInstanceTermination", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) SkipWaitTimeForInstanceTerminationAsync(ctx workflow.Context, input *codedeploy.SkipWaitTimeForInstanceTerminationInput) *CodedeploySkipWaitTimeForInstanceTerminationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.SkipWaitTimeForInstanceTermination", input)
	return &CodedeploySkipWaitTimeForInstanceTerminationFuture{Future: future}
}

func (a *CodeDeployStub) StopDeployment(ctx workflow.Context, input *codedeploy.StopDeploymentInput) (*codedeploy.StopDeploymentOutput, error) {
	var output codedeploy.StopDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.StopDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) StopDeploymentAsync(ctx workflow.Context, input *codedeploy.StopDeploymentInput) *CodedeployStopDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.StopDeployment", input)
	return &CodedeployStopDeploymentFuture{Future: future}
}

func (a *CodeDeployStub) TagResource(ctx workflow.Context, input *codedeploy.TagResourceInput) (*codedeploy.TagResourceOutput, error) {
	var output codedeploy.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) TagResourceAsync(ctx workflow.Context, input *codedeploy.TagResourceInput) *CodedeployTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.TagResource", input)
	return &CodedeployTagResourceFuture{Future: future}
}

func (a *CodeDeployStub) UntagResource(ctx workflow.Context, input *codedeploy.UntagResourceInput) (*codedeploy.UntagResourceOutput, error) {
	var output codedeploy.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) UntagResourceAsync(ctx workflow.Context, input *codedeploy.UntagResourceInput) *CodedeployUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.UntagResource", input)
	return &CodedeployUntagResourceFuture{Future: future}
}

func (a *CodeDeployStub) UpdateApplication(ctx workflow.Context, input *codedeploy.UpdateApplicationInput) (*codedeploy.UpdateApplicationOutput, error) {
	var output codedeploy.UpdateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) UpdateApplicationAsync(ctx workflow.Context, input *codedeploy.UpdateApplicationInput) *CodedeployUpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.UpdateApplication", input)
	return &CodedeployUpdateApplicationFuture{Future: future}
}

func (a *CodeDeployStub) UpdateDeploymentGroup(ctx workflow.Context, input *codedeploy.UpdateDeploymentGroupInput) (*codedeploy.UpdateDeploymentGroupOutput, error) {
	var output codedeploy.UpdateDeploymentGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.codedeploy.UpdateDeploymentGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeDeployStub) UpdateDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.UpdateDeploymentGroupInput) *CodedeployUpdateDeploymentGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.UpdateDeploymentGroup", input)
	return &CodedeployUpdateDeploymentGroupFuture{Future: future}
}

func (a *CodeDeployStub) WaitUntilDeploymentSuccessful(ctx workflow.Context, input *codedeploy.GetDeploymentInput) error {
	return workflow.ExecuteActivity(ctx, "aws.codedeploy.WaitUntilDeploymentSuccessful", input).Get(ctx, nil)
}

func (a *CodeDeployStub) WaitUntilDeploymentSuccessfulAsync(ctx workflow.Context, input *codedeploy.GetDeploymentInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codedeploy.WaitUntilDeploymentSuccessful", input)
	return NewVoidFuture(future)
}
