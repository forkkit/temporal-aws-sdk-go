// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/rds"
	"go.temporal.io/sdk/workflow"
)

type RDSClient interface {
	AddRoleToDBCluster(ctx workflow.Context, input *rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error)
	AddRoleToDBClusterAsync(ctx workflow.Context, input *rds.AddRoleToDBClusterInput) *RdsAddRoleToDBClusterFuture

	AddRoleToDBInstance(ctx workflow.Context, input *rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error)
	AddRoleToDBInstanceAsync(ctx workflow.Context, input *rds.AddRoleToDBInstanceInput) *RdsAddRoleToDBInstanceFuture

	AddSourceIdentifierToSubscription(ctx workflow.Context, input *rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error)
	AddSourceIdentifierToSubscriptionAsync(ctx workflow.Context, input *rds.AddSourceIdentifierToSubscriptionInput) *RdsAddSourceIdentifierToSubscriptionFuture

	AddTagsToResource(ctx workflow.Context, input *rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error)
	AddTagsToResourceAsync(ctx workflow.Context, input *rds.AddTagsToResourceInput) *RdsAddTagsToResourceFuture

	ApplyPendingMaintenanceAction(ctx workflow.Context, input *rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error)
	ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *rds.ApplyPendingMaintenanceActionInput) *RdsApplyPendingMaintenanceActionFuture

	AuthorizeDBSecurityGroupIngress(ctx workflow.Context, input *rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error)
	AuthorizeDBSecurityGroupIngressAsync(ctx workflow.Context, input *rds.AuthorizeDBSecurityGroupIngressInput) *RdsAuthorizeDBSecurityGroupIngressFuture

	BacktrackDBCluster(ctx workflow.Context, input *rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error)
	BacktrackDBClusterAsync(ctx workflow.Context, input *rds.BacktrackDBClusterInput) *RdsBacktrackDBClusterFuture

	CancelExportTask(ctx workflow.Context, input *rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error)
	CancelExportTaskAsync(ctx workflow.Context, input *rds.CancelExportTaskInput) *RdsCancelExportTaskFuture

	CopyDBClusterParameterGroup(ctx workflow.Context, input *rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error)
	CopyDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.CopyDBClusterParameterGroupInput) *RdsCopyDBClusterParameterGroupFuture

	CopyDBClusterSnapshot(ctx workflow.Context, input *rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error)
	CopyDBClusterSnapshotAsync(ctx workflow.Context, input *rds.CopyDBClusterSnapshotInput) *RdsCopyDBClusterSnapshotFuture

	CopyDBParameterGroup(ctx workflow.Context, input *rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error)
	CopyDBParameterGroupAsync(ctx workflow.Context, input *rds.CopyDBParameterGroupInput) *RdsCopyDBParameterGroupFuture

	CopyDBSnapshot(ctx workflow.Context, input *rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error)
	CopyDBSnapshotAsync(ctx workflow.Context, input *rds.CopyDBSnapshotInput) *RdsCopyDBSnapshotFuture

	CopyOptionGroup(ctx workflow.Context, input *rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error)
	CopyOptionGroupAsync(ctx workflow.Context, input *rds.CopyOptionGroupInput) *RdsCopyOptionGroupFuture

	CreateCustomAvailabilityZone(ctx workflow.Context, input *rds.CreateCustomAvailabilityZoneInput) (*rds.CreateCustomAvailabilityZoneOutput, error)
	CreateCustomAvailabilityZoneAsync(ctx workflow.Context, input *rds.CreateCustomAvailabilityZoneInput) *RdsCreateCustomAvailabilityZoneFuture

	CreateDBCluster(ctx workflow.Context, input *rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error)
	CreateDBClusterAsync(ctx workflow.Context, input *rds.CreateDBClusterInput) *RdsCreateDBClusterFuture

	CreateDBClusterEndpoint(ctx workflow.Context, input *rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error)
	CreateDBClusterEndpointAsync(ctx workflow.Context, input *rds.CreateDBClusterEndpointInput) *RdsCreateDBClusterEndpointFuture

	CreateDBClusterParameterGroup(ctx workflow.Context, input *rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error)
	CreateDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.CreateDBClusterParameterGroupInput) *RdsCreateDBClusterParameterGroupFuture

	CreateDBClusterSnapshot(ctx workflow.Context, input *rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error)
	CreateDBClusterSnapshotAsync(ctx workflow.Context, input *rds.CreateDBClusterSnapshotInput) *RdsCreateDBClusterSnapshotFuture

	CreateDBInstance(ctx workflow.Context, input *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error)
	CreateDBInstanceAsync(ctx workflow.Context, input *rds.CreateDBInstanceInput) *RdsCreateDBInstanceFuture

	CreateDBInstanceReadReplica(ctx workflow.Context, input *rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error)
	CreateDBInstanceReadReplicaAsync(ctx workflow.Context, input *rds.CreateDBInstanceReadReplicaInput) *RdsCreateDBInstanceReadReplicaFuture

	CreateDBParameterGroup(ctx workflow.Context, input *rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error)
	CreateDBParameterGroupAsync(ctx workflow.Context, input *rds.CreateDBParameterGroupInput) *RdsCreateDBParameterGroupFuture

	CreateDBProxy(ctx workflow.Context, input *rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error)
	CreateDBProxyAsync(ctx workflow.Context, input *rds.CreateDBProxyInput) *RdsCreateDBProxyFuture

	CreateDBSecurityGroup(ctx workflow.Context, input *rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error)
	CreateDBSecurityGroupAsync(ctx workflow.Context, input *rds.CreateDBSecurityGroupInput) *RdsCreateDBSecurityGroupFuture

	CreateDBSnapshot(ctx workflow.Context, input *rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error)
	CreateDBSnapshotAsync(ctx workflow.Context, input *rds.CreateDBSnapshotInput) *RdsCreateDBSnapshotFuture

	CreateDBSubnetGroup(ctx workflow.Context, input *rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error)
	CreateDBSubnetGroupAsync(ctx workflow.Context, input *rds.CreateDBSubnetGroupInput) *RdsCreateDBSubnetGroupFuture

	CreateEventSubscription(ctx workflow.Context, input *rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error)
	CreateEventSubscriptionAsync(ctx workflow.Context, input *rds.CreateEventSubscriptionInput) *RdsCreateEventSubscriptionFuture

	CreateGlobalCluster(ctx workflow.Context, input *rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error)
	CreateGlobalClusterAsync(ctx workflow.Context, input *rds.CreateGlobalClusterInput) *RdsCreateGlobalClusterFuture

	CreateOptionGroup(ctx workflow.Context, input *rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error)
	CreateOptionGroupAsync(ctx workflow.Context, input *rds.CreateOptionGroupInput) *RdsCreateOptionGroupFuture

	DeleteCustomAvailabilityZone(ctx workflow.Context, input *rds.DeleteCustomAvailabilityZoneInput) (*rds.DeleteCustomAvailabilityZoneOutput, error)
	DeleteCustomAvailabilityZoneAsync(ctx workflow.Context, input *rds.DeleteCustomAvailabilityZoneInput) *RdsDeleteCustomAvailabilityZoneFuture

	DeleteDBCluster(ctx workflow.Context, input *rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error)
	DeleteDBClusterAsync(ctx workflow.Context, input *rds.DeleteDBClusterInput) *RdsDeleteDBClusterFuture

	DeleteDBClusterEndpoint(ctx workflow.Context, input *rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error)
	DeleteDBClusterEndpointAsync(ctx workflow.Context, input *rds.DeleteDBClusterEndpointInput) *RdsDeleteDBClusterEndpointFuture

	DeleteDBClusterParameterGroup(ctx workflow.Context, input *rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error)
	DeleteDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.DeleteDBClusterParameterGroupInput) *RdsDeleteDBClusterParameterGroupFuture

	DeleteDBClusterSnapshot(ctx workflow.Context, input *rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error)
	DeleteDBClusterSnapshotAsync(ctx workflow.Context, input *rds.DeleteDBClusterSnapshotInput) *RdsDeleteDBClusterSnapshotFuture

	DeleteDBInstance(ctx workflow.Context, input *rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error)
	DeleteDBInstanceAsync(ctx workflow.Context, input *rds.DeleteDBInstanceInput) *RdsDeleteDBInstanceFuture

	DeleteDBInstanceAutomatedBackup(ctx workflow.Context, input *rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error)
	DeleteDBInstanceAutomatedBackupAsync(ctx workflow.Context, input *rds.DeleteDBInstanceAutomatedBackupInput) *RdsDeleteDBInstanceAutomatedBackupFuture

	DeleteDBParameterGroup(ctx workflow.Context, input *rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error)
	DeleteDBParameterGroupAsync(ctx workflow.Context, input *rds.DeleteDBParameterGroupInput) *RdsDeleteDBParameterGroupFuture

	DeleteDBProxy(ctx workflow.Context, input *rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error)
	DeleteDBProxyAsync(ctx workflow.Context, input *rds.DeleteDBProxyInput) *RdsDeleteDBProxyFuture

	DeleteDBSecurityGroup(ctx workflow.Context, input *rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error)
	DeleteDBSecurityGroupAsync(ctx workflow.Context, input *rds.DeleteDBSecurityGroupInput) *RdsDeleteDBSecurityGroupFuture

	DeleteDBSnapshot(ctx workflow.Context, input *rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error)
	DeleteDBSnapshotAsync(ctx workflow.Context, input *rds.DeleteDBSnapshotInput) *RdsDeleteDBSnapshotFuture

	DeleteDBSubnetGroup(ctx workflow.Context, input *rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error)
	DeleteDBSubnetGroupAsync(ctx workflow.Context, input *rds.DeleteDBSubnetGroupInput) *RdsDeleteDBSubnetGroupFuture

	DeleteEventSubscription(ctx workflow.Context, input *rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error)
	DeleteEventSubscriptionAsync(ctx workflow.Context, input *rds.DeleteEventSubscriptionInput) *RdsDeleteEventSubscriptionFuture

	DeleteGlobalCluster(ctx workflow.Context, input *rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error)
	DeleteGlobalClusterAsync(ctx workflow.Context, input *rds.DeleteGlobalClusterInput) *RdsDeleteGlobalClusterFuture

	DeleteInstallationMedia(ctx workflow.Context, input *rds.DeleteInstallationMediaInput) (*rds.DeleteInstallationMediaOutput, error)
	DeleteInstallationMediaAsync(ctx workflow.Context, input *rds.DeleteInstallationMediaInput) *RdsDeleteInstallationMediaFuture

	DeleteOptionGroup(ctx workflow.Context, input *rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error)
	DeleteOptionGroupAsync(ctx workflow.Context, input *rds.DeleteOptionGroupInput) *RdsDeleteOptionGroupFuture

	DeregisterDBProxyTargets(ctx workflow.Context, input *rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error)
	DeregisterDBProxyTargetsAsync(ctx workflow.Context, input *rds.DeregisterDBProxyTargetsInput) *RdsDeregisterDBProxyTargetsFuture

	DescribeAccountAttributes(ctx workflow.Context, input *rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error)
	DescribeAccountAttributesAsync(ctx workflow.Context, input *rds.DescribeAccountAttributesInput) *RdsDescribeAccountAttributesFuture

	DescribeCertificates(ctx workflow.Context, input *rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error)
	DescribeCertificatesAsync(ctx workflow.Context, input *rds.DescribeCertificatesInput) *RdsDescribeCertificatesFuture

	DescribeCustomAvailabilityZones(ctx workflow.Context, input *rds.DescribeCustomAvailabilityZonesInput) (*rds.DescribeCustomAvailabilityZonesOutput, error)
	DescribeCustomAvailabilityZonesAsync(ctx workflow.Context, input *rds.DescribeCustomAvailabilityZonesInput) *RdsDescribeCustomAvailabilityZonesFuture

	DescribeDBClusterBacktracks(ctx workflow.Context, input *rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error)
	DescribeDBClusterBacktracksAsync(ctx workflow.Context, input *rds.DescribeDBClusterBacktracksInput) *RdsDescribeDBClusterBacktracksFuture

	DescribeDBClusterEndpoints(ctx workflow.Context, input *rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error)
	DescribeDBClusterEndpointsAsync(ctx workflow.Context, input *rds.DescribeDBClusterEndpointsInput) *RdsDescribeDBClusterEndpointsFuture

	DescribeDBClusterParameterGroups(ctx workflow.Context, input *rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error)
	DescribeDBClusterParameterGroupsAsync(ctx workflow.Context, input *rds.DescribeDBClusterParameterGroupsInput) *RdsDescribeDBClusterParameterGroupsFuture

	DescribeDBClusterParameters(ctx workflow.Context, input *rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error)
	DescribeDBClusterParametersAsync(ctx workflow.Context, input *rds.DescribeDBClusterParametersInput) *RdsDescribeDBClusterParametersFuture

	DescribeDBClusterSnapshotAttributes(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error)
	DescribeDBClusterSnapshotAttributesAsync(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotAttributesInput) *RdsDescribeDBClusterSnapshotAttributesFuture

	DescribeDBClusterSnapshots(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error)
	DescribeDBClusterSnapshotsAsync(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) *RdsDescribeDBClusterSnapshotsFuture

	DescribeDBClusters(ctx workflow.Context, input *rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error)
	DescribeDBClustersAsync(ctx workflow.Context, input *rds.DescribeDBClustersInput) *RdsDescribeDBClustersFuture

	DescribeDBEngineVersions(ctx workflow.Context, input *rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error)
	DescribeDBEngineVersionsAsync(ctx workflow.Context, input *rds.DescribeDBEngineVersionsInput) *RdsDescribeDBEngineVersionsFuture

	DescribeDBInstanceAutomatedBackups(ctx workflow.Context, input *rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error)
	DescribeDBInstanceAutomatedBackupsAsync(ctx workflow.Context, input *rds.DescribeDBInstanceAutomatedBackupsInput) *RdsDescribeDBInstanceAutomatedBackupsFuture

	DescribeDBInstances(ctx workflow.Context, input *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error)
	DescribeDBInstancesAsync(ctx workflow.Context, input *rds.DescribeDBInstancesInput) *RdsDescribeDBInstancesFuture

	DescribeDBLogFiles(ctx workflow.Context, input *rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error)
	DescribeDBLogFilesAsync(ctx workflow.Context, input *rds.DescribeDBLogFilesInput) *RdsDescribeDBLogFilesFuture

	DescribeDBParameterGroups(ctx workflow.Context, input *rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error)
	DescribeDBParameterGroupsAsync(ctx workflow.Context, input *rds.DescribeDBParameterGroupsInput) *RdsDescribeDBParameterGroupsFuture

	DescribeDBParameters(ctx workflow.Context, input *rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error)
	DescribeDBParametersAsync(ctx workflow.Context, input *rds.DescribeDBParametersInput) *RdsDescribeDBParametersFuture

	DescribeDBProxies(ctx workflow.Context, input *rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error)
	DescribeDBProxiesAsync(ctx workflow.Context, input *rds.DescribeDBProxiesInput) *RdsDescribeDBProxiesFuture

	DescribeDBProxyTargetGroups(ctx workflow.Context, input *rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error)
	DescribeDBProxyTargetGroupsAsync(ctx workflow.Context, input *rds.DescribeDBProxyTargetGroupsInput) *RdsDescribeDBProxyTargetGroupsFuture

	DescribeDBProxyTargets(ctx workflow.Context, input *rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error)
	DescribeDBProxyTargetsAsync(ctx workflow.Context, input *rds.DescribeDBProxyTargetsInput) *RdsDescribeDBProxyTargetsFuture

	DescribeDBSecurityGroups(ctx workflow.Context, input *rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error)
	DescribeDBSecurityGroupsAsync(ctx workflow.Context, input *rds.DescribeDBSecurityGroupsInput) *RdsDescribeDBSecurityGroupsFuture

	DescribeDBSnapshotAttributes(ctx workflow.Context, input *rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error)
	DescribeDBSnapshotAttributesAsync(ctx workflow.Context, input *rds.DescribeDBSnapshotAttributesInput) *RdsDescribeDBSnapshotAttributesFuture

	DescribeDBSnapshots(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error)
	DescribeDBSnapshotsAsync(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) *RdsDescribeDBSnapshotsFuture

	DescribeDBSubnetGroups(ctx workflow.Context, input *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error)
	DescribeDBSubnetGroupsAsync(ctx workflow.Context, input *rds.DescribeDBSubnetGroupsInput) *RdsDescribeDBSubnetGroupsFuture

	DescribeEngineDefaultClusterParameters(ctx workflow.Context, input *rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error)
	DescribeEngineDefaultClusterParametersAsync(ctx workflow.Context, input *rds.DescribeEngineDefaultClusterParametersInput) *RdsDescribeEngineDefaultClusterParametersFuture

	DescribeEngineDefaultParameters(ctx workflow.Context, input *rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error)
	DescribeEngineDefaultParametersAsync(ctx workflow.Context, input *rds.DescribeEngineDefaultParametersInput) *RdsDescribeEngineDefaultParametersFuture

	DescribeEventCategories(ctx workflow.Context, input *rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error)
	DescribeEventCategoriesAsync(ctx workflow.Context, input *rds.DescribeEventCategoriesInput) *RdsDescribeEventCategoriesFuture

	DescribeEventSubscriptions(ctx workflow.Context, input *rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error)
	DescribeEventSubscriptionsAsync(ctx workflow.Context, input *rds.DescribeEventSubscriptionsInput) *RdsDescribeEventSubscriptionsFuture

	DescribeEvents(ctx workflow.Context, input *rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error)
	DescribeEventsAsync(ctx workflow.Context, input *rds.DescribeEventsInput) *RdsDescribeEventsFuture

	DescribeExportTasks(ctx workflow.Context, input *rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error)
	DescribeExportTasksAsync(ctx workflow.Context, input *rds.DescribeExportTasksInput) *RdsDescribeExportTasksFuture

	DescribeGlobalClusters(ctx workflow.Context, input *rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error)
	DescribeGlobalClustersAsync(ctx workflow.Context, input *rds.DescribeGlobalClustersInput) *RdsDescribeGlobalClustersFuture

	DescribeInstallationMedia(ctx workflow.Context, input *rds.DescribeInstallationMediaInput) (*rds.DescribeInstallationMediaOutput, error)
	DescribeInstallationMediaAsync(ctx workflow.Context, input *rds.DescribeInstallationMediaInput) *RdsDescribeInstallationMediaFuture

	DescribeOptionGroupOptions(ctx workflow.Context, input *rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error)
	DescribeOptionGroupOptionsAsync(ctx workflow.Context, input *rds.DescribeOptionGroupOptionsInput) *RdsDescribeOptionGroupOptionsFuture

	DescribeOptionGroups(ctx workflow.Context, input *rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error)
	DescribeOptionGroupsAsync(ctx workflow.Context, input *rds.DescribeOptionGroupsInput) *RdsDescribeOptionGroupsFuture

	DescribeOrderableDBInstanceOptions(ctx workflow.Context, input *rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error)
	DescribeOrderableDBInstanceOptionsAsync(ctx workflow.Context, input *rds.DescribeOrderableDBInstanceOptionsInput) *RdsDescribeOrderableDBInstanceOptionsFuture

	DescribePendingMaintenanceActions(ctx workflow.Context, input *rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error)
	DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *rds.DescribePendingMaintenanceActionsInput) *RdsDescribePendingMaintenanceActionsFuture

	DescribeReservedDBInstances(ctx workflow.Context, input *rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error)
	DescribeReservedDBInstancesAsync(ctx workflow.Context, input *rds.DescribeReservedDBInstancesInput) *RdsDescribeReservedDBInstancesFuture

	DescribeReservedDBInstancesOfferings(ctx workflow.Context, input *rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error)
	DescribeReservedDBInstancesOfferingsAsync(ctx workflow.Context, input *rds.DescribeReservedDBInstancesOfferingsInput) *RdsDescribeReservedDBInstancesOfferingsFuture

	DescribeSourceRegions(ctx workflow.Context, input *rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error)
	DescribeSourceRegionsAsync(ctx workflow.Context, input *rds.DescribeSourceRegionsInput) *RdsDescribeSourceRegionsFuture

	DescribeValidDBInstanceModifications(ctx workflow.Context, input *rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error)
	DescribeValidDBInstanceModificationsAsync(ctx workflow.Context, input *rds.DescribeValidDBInstanceModificationsInput) *RdsDescribeValidDBInstanceModificationsFuture

	DownloadDBLogFilePortion(ctx workflow.Context, input *rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error)
	DownloadDBLogFilePortionAsync(ctx workflow.Context, input *rds.DownloadDBLogFilePortionInput) *RdsDownloadDBLogFilePortionFuture

	FailoverDBCluster(ctx workflow.Context, input *rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error)
	FailoverDBClusterAsync(ctx workflow.Context, input *rds.FailoverDBClusterInput) *RdsFailoverDBClusterFuture

	ImportInstallationMedia(ctx workflow.Context, input *rds.ImportInstallationMediaInput) (*rds.ImportInstallationMediaOutput, error)
	ImportInstallationMediaAsync(ctx workflow.Context, input *rds.ImportInstallationMediaInput) *RdsImportInstallationMediaFuture

	ListTagsForResource(ctx workflow.Context, input *rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *rds.ListTagsForResourceInput) *RdsListTagsForResourceFuture

	ModifyCertificates(ctx workflow.Context, input *rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error)
	ModifyCertificatesAsync(ctx workflow.Context, input *rds.ModifyCertificatesInput) *RdsModifyCertificatesFuture

	ModifyCurrentDBClusterCapacity(ctx workflow.Context, input *rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error)
	ModifyCurrentDBClusterCapacityAsync(ctx workflow.Context, input *rds.ModifyCurrentDBClusterCapacityInput) *RdsModifyCurrentDBClusterCapacityFuture

	ModifyDBCluster(ctx workflow.Context, input *rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error)
	ModifyDBClusterAsync(ctx workflow.Context, input *rds.ModifyDBClusterInput) *RdsModifyDBClusterFuture

	ModifyDBClusterEndpoint(ctx workflow.Context, input *rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error)
	ModifyDBClusterEndpointAsync(ctx workflow.Context, input *rds.ModifyDBClusterEndpointInput) *RdsModifyDBClusterEndpointFuture

	ModifyDBClusterParameterGroup(ctx workflow.Context, input *rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error)
	ModifyDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.ModifyDBClusterParameterGroupInput) *RdsModifyDBClusterParameterGroupFuture

	ModifyDBClusterSnapshotAttribute(ctx workflow.Context, input *rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error)
	ModifyDBClusterSnapshotAttributeAsync(ctx workflow.Context, input *rds.ModifyDBClusterSnapshotAttributeInput) *RdsModifyDBClusterSnapshotAttributeFuture

	ModifyDBInstance(ctx workflow.Context, input *rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error)
	ModifyDBInstanceAsync(ctx workflow.Context, input *rds.ModifyDBInstanceInput) *RdsModifyDBInstanceFuture

	ModifyDBParameterGroup(ctx workflow.Context, input *rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error)
	ModifyDBParameterGroupAsync(ctx workflow.Context, input *rds.ModifyDBParameterGroupInput) *RdsModifyDBParameterGroupFuture

	ModifyDBProxy(ctx workflow.Context, input *rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error)
	ModifyDBProxyAsync(ctx workflow.Context, input *rds.ModifyDBProxyInput) *RdsModifyDBProxyFuture

	ModifyDBProxyTargetGroup(ctx workflow.Context, input *rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error)
	ModifyDBProxyTargetGroupAsync(ctx workflow.Context, input *rds.ModifyDBProxyTargetGroupInput) *RdsModifyDBProxyTargetGroupFuture

	ModifyDBSnapshot(ctx workflow.Context, input *rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error)
	ModifyDBSnapshotAsync(ctx workflow.Context, input *rds.ModifyDBSnapshotInput) *RdsModifyDBSnapshotFuture

	ModifyDBSnapshotAttribute(ctx workflow.Context, input *rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error)
	ModifyDBSnapshotAttributeAsync(ctx workflow.Context, input *rds.ModifyDBSnapshotAttributeInput) *RdsModifyDBSnapshotAttributeFuture

	ModifyDBSubnetGroup(ctx workflow.Context, input *rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error)
	ModifyDBSubnetGroupAsync(ctx workflow.Context, input *rds.ModifyDBSubnetGroupInput) *RdsModifyDBSubnetGroupFuture

	ModifyEventSubscription(ctx workflow.Context, input *rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error)
	ModifyEventSubscriptionAsync(ctx workflow.Context, input *rds.ModifyEventSubscriptionInput) *RdsModifyEventSubscriptionFuture

	ModifyGlobalCluster(ctx workflow.Context, input *rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error)
	ModifyGlobalClusterAsync(ctx workflow.Context, input *rds.ModifyGlobalClusterInput) *RdsModifyGlobalClusterFuture

	ModifyOptionGroup(ctx workflow.Context, input *rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error)
	ModifyOptionGroupAsync(ctx workflow.Context, input *rds.ModifyOptionGroupInput) *RdsModifyOptionGroupFuture

	PromoteReadReplica(ctx workflow.Context, input *rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error)
	PromoteReadReplicaAsync(ctx workflow.Context, input *rds.PromoteReadReplicaInput) *RdsPromoteReadReplicaFuture

	PromoteReadReplicaDBCluster(ctx workflow.Context, input *rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error)
	PromoteReadReplicaDBClusterAsync(ctx workflow.Context, input *rds.PromoteReadReplicaDBClusterInput) *RdsPromoteReadReplicaDBClusterFuture

	PurchaseReservedDBInstancesOffering(ctx workflow.Context, input *rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error)
	PurchaseReservedDBInstancesOfferingAsync(ctx workflow.Context, input *rds.PurchaseReservedDBInstancesOfferingInput) *RdsPurchaseReservedDBInstancesOfferingFuture

	RebootDBInstance(ctx workflow.Context, input *rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error)
	RebootDBInstanceAsync(ctx workflow.Context, input *rds.RebootDBInstanceInput) *RdsRebootDBInstanceFuture

	RegisterDBProxyTargets(ctx workflow.Context, input *rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error)
	RegisterDBProxyTargetsAsync(ctx workflow.Context, input *rds.RegisterDBProxyTargetsInput) *RdsRegisterDBProxyTargetsFuture

	RemoveFromGlobalCluster(ctx workflow.Context, input *rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error)
	RemoveFromGlobalClusterAsync(ctx workflow.Context, input *rds.RemoveFromGlobalClusterInput) *RdsRemoveFromGlobalClusterFuture

	RemoveRoleFromDBCluster(ctx workflow.Context, input *rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error)
	RemoveRoleFromDBClusterAsync(ctx workflow.Context, input *rds.RemoveRoleFromDBClusterInput) *RdsRemoveRoleFromDBClusterFuture

	RemoveRoleFromDBInstance(ctx workflow.Context, input *rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error)
	RemoveRoleFromDBInstanceAsync(ctx workflow.Context, input *rds.RemoveRoleFromDBInstanceInput) *RdsRemoveRoleFromDBInstanceFuture

	RemoveSourceIdentifierFromSubscription(ctx workflow.Context, input *rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error)
	RemoveSourceIdentifierFromSubscriptionAsync(ctx workflow.Context, input *rds.RemoveSourceIdentifierFromSubscriptionInput) *RdsRemoveSourceIdentifierFromSubscriptionFuture

	RemoveTagsFromResource(ctx workflow.Context, input *rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error)
	RemoveTagsFromResourceAsync(ctx workflow.Context, input *rds.RemoveTagsFromResourceInput) *RdsRemoveTagsFromResourceFuture

	ResetDBClusterParameterGroup(ctx workflow.Context, input *rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error)
	ResetDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.ResetDBClusterParameterGroupInput) *RdsResetDBClusterParameterGroupFuture

	ResetDBParameterGroup(ctx workflow.Context, input *rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error)
	ResetDBParameterGroupAsync(ctx workflow.Context, input *rds.ResetDBParameterGroupInput) *RdsResetDBParameterGroupFuture

	RestoreDBClusterFromS3(ctx workflow.Context, input *rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error)
	RestoreDBClusterFromS3Async(ctx workflow.Context, input *rds.RestoreDBClusterFromS3Input) *RdsRestoreDBClusterFromS3Future

	RestoreDBClusterFromSnapshot(ctx workflow.Context, input *rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error)
	RestoreDBClusterFromSnapshotAsync(ctx workflow.Context, input *rds.RestoreDBClusterFromSnapshotInput) *RdsRestoreDBClusterFromSnapshotFuture

	RestoreDBClusterToPointInTime(ctx workflow.Context, input *rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error)
	RestoreDBClusterToPointInTimeAsync(ctx workflow.Context, input *rds.RestoreDBClusterToPointInTimeInput) *RdsRestoreDBClusterToPointInTimeFuture

	RestoreDBInstanceFromDBSnapshot(ctx workflow.Context, input *rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error)
	RestoreDBInstanceFromDBSnapshotAsync(ctx workflow.Context, input *rds.RestoreDBInstanceFromDBSnapshotInput) *RdsRestoreDBInstanceFromDBSnapshotFuture

	RestoreDBInstanceFromS3(ctx workflow.Context, input *rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error)
	RestoreDBInstanceFromS3Async(ctx workflow.Context, input *rds.RestoreDBInstanceFromS3Input) *RdsRestoreDBInstanceFromS3Future

	RestoreDBInstanceToPointInTime(ctx workflow.Context, input *rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error)
	RestoreDBInstanceToPointInTimeAsync(ctx workflow.Context, input *rds.RestoreDBInstanceToPointInTimeInput) *RdsRestoreDBInstanceToPointInTimeFuture

	RevokeDBSecurityGroupIngress(ctx workflow.Context, input *rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error)
	RevokeDBSecurityGroupIngressAsync(ctx workflow.Context, input *rds.RevokeDBSecurityGroupIngressInput) *RdsRevokeDBSecurityGroupIngressFuture

	StartActivityStream(ctx workflow.Context, input *rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error)
	StartActivityStreamAsync(ctx workflow.Context, input *rds.StartActivityStreamInput) *RdsStartActivityStreamFuture

	StartDBCluster(ctx workflow.Context, input *rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error)
	StartDBClusterAsync(ctx workflow.Context, input *rds.StartDBClusterInput) *RdsStartDBClusterFuture

	StartDBInstance(ctx workflow.Context, input *rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error)
	StartDBInstanceAsync(ctx workflow.Context, input *rds.StartDBInstanceInput) *RdsStartDBInstanceFuture

	StartExportTask(ctx workflow.Context, input *rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error)
	StartExportTaskAsync(ctx workflow.Context, input *rds.StartExportTaskInput) *RdsStartExportTaskFuture

	StopActivityStream(ctx workflow.Context, input *rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error)
	StopActivityStreamAsync(ctx workflow.Context, input *rds.StopActivityStreamInput) *RdsStopActivityStreamFuture

	StopDBCluster(ctx workflow.Context, input *rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error)
	StopDBClusterAsync(ctx workflow.Context, input *rds.StopDBClusterInput) *RdsStopDBClusterFuture

	StopDBInstance(ctx workflow.Context, input *rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error)
	StopDBInstanceAsync(ctx workflow.Context, input *rds.StopDBInstanceInput) *RdsStopDBInstanceFuture

	WaitUntilDBClusterSnapshotAvailable(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) error
	WaitUntilDBClusterSnapshotAvailableAsync(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) workflow.Future

	WaitUntilDBClusterSnapshotDeleted(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) error
	WaitUntilDBClusterSnapshotDeletedAsync(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) workflow.Future

	WaitUntilDBInstanceAvailable(ctx workflow.Context, input *rds.DescribeDBInstancesInput) error
	WaitUntilDBInstanceAvailableAsync(ctx workflow.Context, input *rds.DescribeDBInstancesInput) workflow.Future

	WaitUntilDBInstanceDeleted(ctx workflow.Context, input *rds.DescribeDBInstancesInput) error
	WaitUntilDBInstanceDeletedAsync(ctx workflow.Context, input *rds.DescribeDBInstancesInput) workflow.Future

	WaitUntilDBSnapshotAvailable(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) error
	WaitUntilDBSnapshotAvailableAsync(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) workflow.Future

	WaitUntilDBSnapshotDeleted(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) error
	WaitUntilDBSnapshotDeletedAsync(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) workflow.Future
}

type RDSStub struct{}

func NewRDSStub() RDSClient {
	return &RDSStub{}
}

type RdsAddRoleToDBClusterFuture struct {
	Future workflow.Future
}

func (r *RdsAddRoleToDBClusterFuture) Get(ctx workflow.Context) (*rds.AddRoleToDBClusterOutput, error) {
	var output rds.AddRoleToDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsAddRoleToDBInstanceFuture struct {
	Future workflow.Future
}

func (r *RdsAddRoleToDBInstanceFuture) Get(ctx workflow.Context) (*rds.AddRoleToDBInstanceOutput, error) {
	var output rds.AddRoleToDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsAddSourceIdentifierToSubscriptionFuture struct {
	Future workflow.Future
}

func (r *RdsAddSourceIdentifierToSubscriptionFuture) Get(ctx workflow.Context) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	var output rds.AddSourceIdentifierToSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsAddTagsToResourceFuture struct {
	Future workflow.Future
}

func (r *RdsAddTagsToResourceFuture) Get(ctx workflow.Context) (*rds.AddTagsToResourceOutput, error) {
	var output rds.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsApplyPendingMaintenanceActionFuture struct {
	Future workflow.Future
}

func (r *RdsApplyPendingMaintenanceActionFuture) Get(ctx workflow.Context) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	var output rds.ApplyPendingMaintenanceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsAuthorizeDBSecurityGroupIngressFuture struct {
	Future workflow.Future
}

func (r *RdsAuthorizeDBSecurityGroupIngressFuture) Get(ctx workflow.Context) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	var output rds.AuthorizeDBSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsBacktrackDBClusterFuture struct {
	Future workflow.Future
}

func (r *RdsBacktrackDBClusterFuture) Get(ctx workflow.Context) (*rds.BacktrackDBClusterOutput, error) {
	var output rds.BacktrackDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCancelExportTaskFuture struct {
	Future workflow.Future
}

func (r *RdsCancelExportTaskFuture) Get(ctx workflow.Context) (*rds.CancelExportTaskOutput, error) {
	var output rds.CancelExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCopyDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *RdsCopyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*rds.CopyDBClusterParameterGroupOutput, error) {
	var output rds.CopyDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCopyDBClusterSnapshotFuture struct {
	Future workflow.Future
}

func (r *RdsCopyDBClusterSnapshotFuture) Get(ctx workflow.Context) (*rds.CopyDBClusterSnapshotOutput, error) {
	var output rds.CopyDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCopyDBParameterGroupFuture struct {
	Future workflow.Future
}

func (r *RdsCopyDBParameterGroupFuture) Get(ctx workflow.Context) (*rds.CopyDBParameterGroupOutput, error) {
	var output rds.CopyDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCopyDBSnapshotFuture struct {
	Future workflow.Future
}

func (r *RdsCopyDBSnapshotFuture) Get(ctx workflow.Context) (*rds.CopyDBSnapshotOutput, error) {
	var output rds.CopyDBSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCopyOptionGroupFuture struct {
	Future workflow.Future
}

func (r *RdsCopyOptionGroupFuture) Get(ctx workflow.Context) (*rds.CopyOptionGroupOutput, error) {
	var output rds.CopyOptionGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateCustomAvailabilityZoneFuture struct {
	Future workflow.Future
}

func (r *RdsCreateCustomAvailabilityZoneFuture) Get(ctx workflow.Context) (*rds.CreateCustomAvailabilityZoneOutput, error) {
	var output rds.CreateCustomAvailabilityZoneOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateDBClusterFuture struct {
	Future workflow.Future
}

func (r *RdsCreateDBClusterFuture) Get(ctx workflow.Context) (*rds.CreateDBClusterOutput, error) {
	var output rds.CreateDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateDBClusterEndpointFuture struct {
	Future workflow.Future
}

func (r *RdsCreateDBClusterEndpointFuture) Get(ctx workflow.Context) (*rds.CreateDBClusterEndpointOutput, error) {
	var output rds.CreateDBClusterEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *RdsCreateDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*rds.CreateDBClusterParameterGroupOutput, error) {
	var output rds.CreateDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateDBClusterSnapshotFuture struct {
	Future workflow.Future
}

func (r *RdsCreateDBClusterSnapshotFuture) Get(ctx workflow.Context) (*rds.CreateDBClusterSnapshotOutput, error) {
	var output rds.CreateDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateDBInstanceFuture struct {
	Future workflow.Future
}

func (r *RdsCreateDBInstanceFuture) Get(ctx workflow.Context) (*rds.CreateDBInstanceOutput, error) {
	var output rds.CreateDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateDBInstanceReadReplicaFuture struct {
	Future workflow.Future
}

func (r *RdsCreateDBInstanceReadReplicaFuture) Get(ctx workflow.Context) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	var output rds.CreateDBInstanceReadReplicaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateDBParameterGroupFuture struct {
	Future workflow.Future
}

func (r *RdsCreateDBParameterGroupFuture) Get(ctx workflow.Context) (*rds.CreateDBParameterGroupOutput, error) {
	var output rds.CreateDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateDBProxyFuture struct {
	Future workflow.Future
}

func (r *RdsCreateDBProxyFuture) Get(ctx workflow.Context) (*rds.CreateDBProxyOutput, error) {
	var output rds.CreateDBProxyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateDBSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *RdsCreateDBSecurityGroupFuture) Get(ctx workflow.Context) (*rds.CreateDBSecurityGroupOutput, error) {
	var output rds.CreateDBSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateDBSnapshotFuture struct {
	Future workflow.Future
}

func (r *RdsCreateDBSnapshotFuture) Get(ctx workflow.Context) (*rds.CreateDBSnapshotOutput, error) {
	var output rds.CreateDBSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateDBSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *RdsCreateDBSubnetGroupFuture) Get(ctx workflow.Context) (*rds.CreateDBSubnetGroupOutput, error) {
	var output rds.CreateDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateEventSubscriptionFuture struct {
	Future workflow.Future
}

func (r *RdsCreateEventSubscriptionFuture) Get(ctx workflow.Context) (*rds.CreateEventSubscriptionOutput, error) {
	var output rds.CreateEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateGlobalClusterFuture struct {
	Future workflow.Future
}

func (r *RdsCreateGlobalClusterFuture) Get(ctx workflow.Context) (*rds.CreateGlobalClusterOutput, error) {
	var output rds.CreateGlobalClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsCreateOptionGroupFuture struct {
	Future workflow.Future
}

func (r *RdsCreateOptionGroupFuture) Get(ctx workflow.Context) (*rds.CreateOptionGroupOutput, error) {
	var output rds.CreateOptionGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteCustomAvailabilityZoneFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteCustomAvailabilityZoneFuture) Get(ctx workflow.Context) (*rds.DeleteCustomAvailabilityZoneOutput, error) {
	var output rds.DeleteCustomAvailabilityZoneOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteDBClusterFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteDBClusterFuture) Get(ctx workflow.Context) (*rds.DeleteDBClusterOutput, error) {
	var output rds.DeleteDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteDBClusterEndpointFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteDBClusterEndpointFuture) Get(ctx workflow.Context) (*rds.DeleteDBClusterEndpointOutput, error) {
	var output rds.DeleteDBClusterEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	var output rds.DeleteDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteDBClusterSnapshotFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteDBClusterSnapshotFuture) Get(ctx workflow.Context) (*rds.DeleteDBClusterSnapshotOutput, error) {
	var output rds.DeleteDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteDBInstanceFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteDBInstanceFuture) Get(ctx workflow.Context) (*rds.DeleteDBInstanceOutput, error) {
	var output rds.DeleteDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteDBInstanceAutomatedBackupFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteDBInstanceAutomatedBackupFuture) Get(ctx workflow.Context) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	var output rds.DeleteDBInstanceAutomatedBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteDBParameterGroupFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteDBParameterGroupFuture) Get(ctx workflow.Context) (*rds.DeleteDBParameterGroupOutput, error) {
	var output rds.DeleteDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteDBProxyFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteDBProxyFuture) Get(ctx workflow.Context) (*rds.DeleteDBProxyOutput, error) {
	var output rds.DeleteDBProxyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteDBSecurityGroupFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteDBSecurityGroupFuture) Get(ctx workflow.Context) (*rds.DeleteDBSecurityGroupOutput, error) {
	var output rds.DeleteDBSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteDBSnapshotFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteDBSnapshotFuture) Get(ctx workflow.Context) (*rds.DeleteDBSnapshotOutput, error) {
	var output rds.DeleteDBSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteDBSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteDBSubnetGroupFuture) Get(ctx workflow.Context) (*rds.DeleteDBSubnetGroupOutput, error) {
	var output rds.DeleteDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteEventSubscriptionFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteEventSubscriptionFuture) Get(ctx workflow.Context) (*rds.DeleteEventSubscriptionOutput, error) {
	var output rds.DeleteEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteGlobalClusterFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteGlobalClusterFuture) Get(ctx workflow.Context) (*rds.DeleteGlobalClusterOutput, error) {
	var output rds.DeleteGlobalClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteInstallationMediaFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteInstallationMediaFuture) Get(ctx workflow.Context) (*rds.DeleteInstallationMediaOutput, error) {
	var output rds.DeleteInstallationMediaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeleteOptionGroupFuture struct {
	Future workflow.Future
}

func (r *RdsDeleteOptionGroupFuture) Get(ctx workflow.Context) (*rds.DeleteOptionGroupOutput, error) {
	var output rds.DeleteOptionGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDeregisterDBProxyTargetsFuture struct {
	Future workflow.Future
}

func (r *RdsDeregisterDBProxyTargetsFuture) Get(ctx workflow.Context) (*rds.DeregisterDBProxyTargetsOutput, error) {
	var output rds.DeregisterDBProxyTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeAccountAttributesFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeAccountAttributesFuture) Get(ctx workflow.Context) (*rds.DescribeAccountAttributesOutput, error) {
	var output rds.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeCertificatesFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeCertificatesFuture) Get(ctx workflow.Context) (*rds.DescribeCertificatesOutput, error) {
	var output rds.DescribeCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeCustomAvailabilityZonesFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeCustomAvailabilityZonesFuture) Get(ctx workflow.Context) (*rds.DescribeCustomAvailabilityZonesOutput, error) {
	var output rds.DescribeCustomAvailabilityZonesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBClusterBacktracksFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBClusterBacktracksFuture) Get(ctx workflow.Context) (*rds.DescribeDBClusterBacktracksOutput, error) {
	var output rds.DescribeDBClusterBacktracksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBClusterEndpointsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBClusterEndpointsFuture) Get(ctx workflow.Context) (*rds.DescribeDBClusterEndpointsOutput, error) {
	var output rds.DescribeDBClusterEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBClusterParameterGroupsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBClusterParameterGroupsFuture) Get(ctx workflow.Context) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	var output rds.DescribeDBClusterParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBClusterParametersFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBClusterParametersFuture) Get(ctx workflow.Context) (*rds.DescribeDBClusterParametersOutput, error) {
	var output rds.DescribeDBClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBClusterSnapshotAttributesFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBClusterSnapshotAttributesFuture) Get(ctx workflow.Context) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output rds.DescribeDBClusterSnapshotAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBClusterSnapshotsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBClusterSnapshotsFuture) Get(ctx workflow.Context) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	var output rds.DescribeDBClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBClustersFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBClustersFuture) Get(ctx workflow.Context) (*rds.DescribeDBClustersOutput, error) {
	var output rds.DescribeDBClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBEngineVersionsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBEngineVersionsFuture) Get(ctx workflow.Context) (*rds.DescribeDBEngineVersionsOutput, error) {
	var output rds.DescribeDBEngineVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBInstanceAutomatedBackupsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBInstanceAutomatedBackupsFuture) Get(ctx workflow.Context) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	var output rds.DescribeDBInstanceAutomatedBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBInstancesFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBInstancesFuture) Get(ctx workflow.Context) (*rds.DescribeDBInstancesOutput, error) {
	var output rds.DescribeDBInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBLogFilesFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBLogFilesFuture) Get(ctx workflow.Context) (*rds.DescribeDBLogFilesOutput, error) {
	var output rds.DescribeDBLogFilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBParameterGroupsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBParameterGroupsFuture) Get(ctx workflow.Context) (*rds.DescribeDBParameterGroupsOutput, error) {
	var output rds.DescribeDBParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBParametersFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBParametersFuture) Get(ctx workflow.Context) (*rds.DescribeDBParametersOutput, error) {
	var output rds.DescribeDBParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBProxiesFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBProxiesFuture) Get(ctx workflow.Context) (*rds.DescribeDBProxiesOutput, error) {
	var output rds.DescribeDBProxiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBProxyTargetGroupsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBProxyTargetGroupsFuture) Get(ctx workflow.Context) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	var output rds.DescribeDBProxyTargetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBProxyTargetsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBProxyTargetsFuture) Get(ctx workflow.Context) (*rds.DescribeDBProxyTargetsOutput, error) {
	var output rds.DescribeDBProxyTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBSecurityGroupsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBSecurityGroupsFuture) Get(ctx workflow.Context) (*rds.DescribeDBSecurityGroupsOutput, error) {
	var output rds.DescribeDBSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBSnapshotAttributesFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBSnapshotAttributesFuture) Get(ctx workflow.Context) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	var output rds.DescribeDBSnapshotAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBSnapshotsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBSnapshotsFuture) Get(ctx workflow.Context) (*rds.DescribeDBSnapshotsOutput, error) {
	var output rds.DescribeDBSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeDBSubnetGroupsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeDBSubnetGroupsFuture) Get(ctx workflow.Context) (*rds.DescribeDBSubnetGroupsOutput, error) {
	var output rds.DescribeDBSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeEngineDefaultClusterParametersFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeEngineDefaultClusterParametersFuture) Get(ctx workflow.Context) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	var output rds.DescribeEngineDefaultClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeEngineDefaultParametersFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeEngineDefaultParametersFuture) Get(ctx workflow.Context) (*rds.DescribeEngineDefaultParametersOutput, error) {
	var output rds.DescribeEngineDefaultParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeEventCategoriesFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeEventCategoriesFuture) Get(ctx workflow.Context) (*rds.DescribeEventCategoriesOutput, error) {
	var output rds.DescribeEventCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeEventSubscriptionsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeEventSubscriptionsFuture) Get(ctx workflow.Context) (*rds.DescribeEventSubscriptionsOutput, error) {
	var output rds.DescribeEventSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeEventsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeEventsFuture) Get(ctx workflow.Context) (*rds.DescribeEventsOutput, error) {
	var output rds.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeExportTasksFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeExportTasksFuture) Get(ctx workflow.Context) (*rds.DescribeExportTasksOutput, error) {
	var output rds.DescribeExportTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeGlobalClustersFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeGlobalClustersFuture) Get(ctx workflow.Context) (*rds.DescribeGlobalClustersOutput, error) {
	var output rds.DescribeGlobalClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeInstallationMediaFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeInstallationMediaFuture) Get(ctx workflow.Context) (*rds.DescribeInstallationMediaOutput, error) {
	var output rds.DescribeInstallationMediaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeOptionGroupOptionsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeOptionGroupOptionsFuture) Get(ctx workflow.Context) (*rds.DescribeOptionGroupOptionsOutput, error) {
	var output rds.DescribeOptionGroupOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeOptionGroupsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeOptionGroupsFuture) Get(ctx workflow.Context) (*rds.DescribeOptionGroupsOutput, error) {
	var output rds.DescribeOptionGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeOrderableDBInstanceOptionsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeOrderableDBInstanceOptionsFuture) Get(ctx workflow.Context) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output rds.DescribeOrderableDBInstanceOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribePendingMaintenanceActionsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribePendingMaintenanceActionsFuture) Get(ctx workflow.Context) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	var output rds.DescribePendingMaintenanceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeReservedDBInstancesFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeReservedDBInstancesFuture) Get(ctx workflow.Context) (*rds.DescribeReservedDBInstancesOutput, error) {
	var output rds.DescribeReservedDBInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeReservedDBInstancesOfferingsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeReservedDBInstancesOfferingsFuture) Get(ctx workflow.Context) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	var output rds.DescribeReservedDBInstancesOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeSourceRegionsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeSourceRegionsFuture) Get(ctx workflow.Context) (*rds.DescribeSourceRegionsOutput, error) {
	var output rds.DescribeSourceRegionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDescribeValidDBInstanceModificationsFuture struct {
	Future workflow.Future
}

func (r *RdsDescribeValidDBInstanceModificationsFuture) Get(ctx workflow.Context) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	var output rds.DescribeValidDBInstanceModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsDownloadDBLogFilePortionFuture struct {
	Future workflow.Future
}

func (r *RdsDownloadDBLogFilePortionFuture) Get(ctx workflow.Context) (*rds.DownloadDBLogFilePortionOutput, error) {
	var output rds.DownloadDBLogFilePortionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsFailoverDBClusterFuture struct {
	Future workflow.Future
}

func (r *RdsFailoverDBClusterFuture) Get(ctx workflow.Context) (*rds.FailoverDBClusterOutput, error) {
	var output rds.FailoverDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsImportInstallationMediaFuture struct {
	Future workflow.Future
}

func (r *RdsImportInstallationMediaFuture) Get(ctx workflow.Context) (*rds.ImportInstallationMediaOutput, error) {
	var output rds.ImportInstallationMediaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *RdsListTagsForResourceFuture) Get(ctx workflow.Context) (*rds.ListTagsForResourceOutput, error) {
	var output rds.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyCertificatesFuture struct {
	Future workflow.Future
}

func (r *RdsModifyCertificatesFuture) Get(ctx workflow.Context) (*rds.ModifyCertificatesOutput, error) {
	var output rds.ModifyCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyCurrentDBClusterCapacityFuture struct {
	Future workflow.Future
}

func (r *RdsModifyCurrentDBClusterCapacityFuture) Get(ctx workflow.Context) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	var output rds.ModifyCurrentDBClusterCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyDBClusterFuture struct {
	Future workflow.Future
}

func (r *RdsModifyDBClusterFuture) Get(ctx workflow.Context) (*rds.ModifyDBClusterOutput, error) {
	var output rds.ModifyDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyDBClusterEndpointFuture struct {
	Future workflow.Future
}

func (r *RdsModifyDBClusterEndpointFuture) Get(ctx workflow.Context) (*rds.ModifyDBClusterEndpointOutput, error) {
	var output rds.ModifyDBClusterEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *RdsModifyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*rds.DBClusterParameterGroupNameMessage, error) {
	var output rds.DBClusterParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyDBClusterSnapshotAttributeFuture struct {
	Future workflow.Future
}

func (r *RdsModifyDBClusterSnapshotAttributeFuture) Get(ctx workflow.Context) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output rds.ModifyDBClusterSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyDBInstanceFuture struct {
	Future workflow.Future
}

func (r *RdsModifyDBInstanceFuture) Get(ctx workflow.Context) (*rds.ModifyDBInstanceOutput, error) {
	var output rds.ModifyDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyDBParameterGroupFuture struct {
	Future workflow.Future
}

func (r *RdsModifyDBParameterGroupFuture) Get(ctx workflow.Context) (*rds.DBParameterGroupNameMessage, error) {
	var output rds.DBParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyDBProxyFuture struct {
	Future workflow.Future
}

func (r *RdsModifyDBProxyFuture) Get(ctx workflow.Context) (*rds.ModifyDBProxyOutput, error) {
	var output rds.ModifyDBProxyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyDBProxyTargetGroupFuture struct {
	Future workflow.Future
}

func (r *RdsModifyDBProxyTargetGroupFuture) Get(ctx workflow.Context) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	var output rds.ModifyDBProxyTargetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyDBSnapshotFuture struct {
	Future workflow.Future
}

func (r *RdsModifyDBSnapshotFuture) Get(ctx workflow.Context) (*rds.ModifyDBSnapshotOutput, error) {
	var output rds.ModifyDBSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyDBSnapshotAttributeFuture struct {
	Future workflow.Future
}

func (r *RdsModifyDBSnapshotAttributeFuture) Get(ctx workflow.Context) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	var output rds.ModifyDBSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyDBSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *RdsModifyDBSubnetGroupFuture) Get(ctx workflow.Context) (*rds.ModifyDBSubnetGroupOutput, error) {
	var output rds.ModifyDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyEventSubscriptionFuture struct {
	Future workflow.Future
}

func (r *RdsModifyEventSubscriptionFuture) Get(ctx workflow.Context) (*rds.ModifyEventSubscriptionOutput, error) {
	var output rds.ModifyEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyGlobalClusterFuture struct {
	Future workflow.Future
}

func (r *RdsModifyGlobalClusterFuture) Get(ctx workflow.Context) (*rds.ModifyGlobalClusterOutput, error) {
	var output rds.ModifyGlobalClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsModifyOptionGroupFuture struct {
	Future workflow.Future
}

func (r *RdsModifyOptionGroupFuture) Get(ctx workflow.Context) (*rds.ModifyOptionGroupOutput, error) {
	var output rds.ModifyOptionGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsPromoteReadReplicaFuture struct {
	Future workflow.Future
}

func (r *RdsPromoteReadReplicaFuture) Get(ctx workflow.Context) (*rds.PromoteReadReplicaOutput, error) {
	var output rds.PromoteReadReplicaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsPromoteReadReplicaDBClusterFuture struct {
	Future workflow.Future
}

func (r *RdsPromoteReadReplicaDBClusterFuture) Get(ctx workflow.Context) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	var output rds.PromoteReadReplicaDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsPurchaseReservedDBInstancesOfferingFuture struct {
	Future workflow.Future
}

func (r *RdsPurchaseReservedDBInstancesOfferingFuture) Get(ctx workflow.Context) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	var output rds.PurchaseReservedDBInstancesOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRebootDBInstanceFuture struct {
	Future workflow.Future
}

func (r *RdsRebootDBInstanceFuture) Get(ctx workflow.Context) (*rds.RebootDBInstanceOutput, error) {
	var output rds.RebootDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRegisterDBProxyTargetsFuture struct {
	Future workflow.Future
}

func (r *RdsRegisterDBProxyTargetsFuture) Get(ctx workflow.Context) (*rds.RegisterDBProxyTargetsOutput, error) {
	var output rds.RegisterDBProxyTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRemoveFromGlobalClusterFuture struct {
	Future workflow.Future
}

func (r *RdsRemoveFromGlobalClusterFuture) Get(ctx workflow.Context) (*rds.RemoveFromGlobalClusterOutput, error) {
	var output rds.RemoveFromGlobalClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRemoveRoleFromDBClusterFuture struct {
	Future workflow.Future
}

func (r *RdsRemoveRoleFromDBClusterFuture) Get(ctx workflow.Context) (*rds.RemoveRoleFromDBClusterOutput, error) {
	var output rds.RemoveRoleFromDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRemoveRoleFromDBInstanceFuture struct {
	Future workflow.Future
}

func (r *RdsRemoveRoleFromDBInstanceFuture) Get(ctx workflow.Context) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	var output rds.RemoveRoleFromDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRemoveSourceIdentifierFromSubscriptionFuture struct {
	Future workflow.Future
}

func (r *RdsRemoveSourceIdentifierFromSubscriptionFuture) Get(ctx workflow.Context) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	var output rds.RemoveSourceIdentifierFromSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRemoveTagsFromResourceFuture struct {
	Future workflow.Future
}

func (r *RdsRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*rds.RemoveTagsFromResourceOutput, error) {
	var output rds.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsResetDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *RdsResetDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*rds.DBClusterParameterGroupNameMessage, error) {
	var output rds.DBClusterParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsResetDBParameterGroupFuture struct {
	Future workflow.Future
}

func (r *RdsResetDBParameterGroupFuture) Get(ctx workflow.Context) (*rds.DBParameterGroupNameMessage, error) {
	var output rds.DBParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRestoreDBClusterFromS3Future struct {
	Future workflow.Future
}

func (r *RdsRestoreDBClusterFromS3Future) Get(ctx workflow.Context) (*rds.RestoreDBClusterFromS3Output, error) {
	var output rds.RestoreDBClusterFromS3Output
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRestoreDBClusterFromSnapshotFuture struct {
	Future workflow.Future
}

func (r *RdsRestoreDBClusterFromSnapshotFuture) Get(ctx workflow.Context) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	var output rds.RestoreDBClusterFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRestoreDBClusterToPointInTimeFuture struct {
	Future workflow.Future
}

func (r *RdsRestoreDBClusterToPointInTimeFuture) Get(ctx workflow.Context) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	var output rds.RestoreDBClusterToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRestoreDBInstanceFromDBSnapshotFuture struct {
	Future workflow.Future
}

func (r *RdsRestoreDBInstanceFromDBSnapshotFuture) Get(ctx workflow.Context) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	var output rds.RestoreDBInstanceFromDBSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRestoreDBInstanceFromS3Future struct {
	Future workflow.Future
}

func (r *RdsRestoreDBInstanceFromS3Future) Get(ctx workflow.Context) (*rds.RestoreDBInstanceFromS3Output, error) {
	var output rds.RestoreDBInstanceFromS3Output
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRestoreDBInstanceToPointInTimeFuture struct {
	Future workflow.Future
}

func (r *RdsRestoreDBInstanceToPointInTimeFuture) Get(ctx workflow.Context) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	var output rds.RestoreDBInstanceToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsRevokeDBSecurityGroupIngressFuture struct {
	Future workflow.Future
}

func (r *RdsRevokeDBSecurityGroupIngressFuture) Get(ctx workflow.Context) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	var output rds.RevokeDBSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsStartActivityStreamFuture struct {
	Future workflow.Future
}

func (r *RdsStartActivityStreamFuture) Get(ctx workflow.Context) (*rds.StartActivityStreamOutput, error) {
	var output rds.StartActivityStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsStartDBClusterFuture struct {
	Future workflow.Future
}

func (r *RdsStartDBClusterFuture) Get(ctx workflow.Context) (*rds.StartDBClusterOutput, error) {
	var output rds.StartDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsStartDBInstanceFuture struct {
	Future workflow.Future
}

func (r *RdsStartDBInstanceFuture) Get(ctx workflow.Context) (*rds.StartDBInstanceOutput, error) {
	var output rds.StartDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsStartExportTaskFuture struct {
	Future workflow.Future
}

func (r *RdsStartExportTaskFuture) Get(ctx workflow.Context) (*rds.StartExportTaskOutput, error) {
	var output rds.StartExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsStopActivityStreamFuture struct {
	Future workflow.Future
}

func (r *RdsStopActivityStreamFuture) Get(ctx workflow.Context) (*rds.StopActivityStreamOutput, error) {
	var output rds.StopActivityStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsStopDBClusterFuture struct {
	Future workflow.Future
}

func (r *RdsStopDBClusterFuture) Get(ctx workflow.Context) (*rds.StopDBClusterOutput, error) {
	var output rds.StopDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RdsStopDBInstanceFuture struct {
	Future workflow.Future
}

func (r *RdsStopDBInstanceFuture) Get(ctx workflow.Context) (*rds.StopDBInstanceOutput, error) {
	var output rds.StopDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) AddRoleToDBCluster(ctx workflow.Context, input *rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error) {
	var output rds.AddRoleToDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.AddRoleToDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) AddRoleToDBClusterAsync(ctx workflow.Context, input *rds.AddRoleToDBClusterInput) *RdsAddRoleToDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.AddRoleToDBCluster", input)
	return &RdsAddRoleToDBClusterFuture{Future: future}
}

func (a *RDSStub) AddRoleToDBInstance(ctx workflow.Context, input *rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error) {
	var output rds.AddRoleToDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.AddRoleToDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) AddRoleToDBInstanceAsync(ctx workflow.Context, input *rds.AddRoleToDBInstanceInput) *RdsAddRoleToDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.AddRoleToDBInstance", input)
	return &RdsAddRoleToDBInstanceFuture{Future: future}
}

func (a *RDSStub) AddSourceIdentifierToSubscription(ctx workflow.Context, input *rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	var output rds.AddSourceIdentifierToSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.AddSourceIdentifierToSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) AddSourceIdentifierToSubscriptionAsync(ctx workflow.Context, input *rds.AddSourceIdentifierToSubscriptionInput) *RdsAddSourceIdentifierToSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.AddSourceIdentifierToSubscription", input)
	return &RdsAddSourceIdentifierToSubscriptionFuture{Future: future}
}

func (a *RDSStub) AddTagsToResource(ctx workflow.Context, input *rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error) {
	var output rds.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) AddTagsToResourceAsync(ctx workflow.Context, input *rds.AddTagsToResourceInput) *RdsAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.AddTagsToResource", input)
	return &RdsAddTagsToResourceFuture{Future: future}
}

func (a *RDSStub) ApplyPendingMaintenanceAction(ctx workflow.Context, input *rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	var output rds.ApplyPendingMaintenanceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ApplyPendingMaintenanceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *rds.ApplyPendingMaintenanceActionInput) *RdsApplyPendingMaintenanceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ApplyPendingMaintenanceAction", input)
	return &RdsApplyPendingMaintenanceActionFuture{Future: future}
}

func (a *RDSStub) AuthorizeDBSecurityGroupIngress(ctx workflow.Context, input *rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	var output rds.AuthorizeDBSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.AuthorizeDBSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) AuthorizeDBSecurityGroupIngressAsync(ctx workflow.Context, input *rds.AuthorizeDBSecurityGroupIngressInput) *RdsAuthorizeDBSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.AuthorizeDBSecurityGroupIngress", input)
	return &RdsAuthorizeDBSecurityGroupIngressFuture{Future: future}
}

func (a *RDSStub) BacktrackDBCluster(ctx workflow.Context, input *rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error) {
	var output rds.BacktrackDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.BacktrackDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) BacktrackDBClusterAsync(ctx workflow.Context, input *rds.BacktrackDBClusterInput) *RdsBacktrackDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.BacktrackDBCluster", input)
	return &RdsBacktrackDBClusterFuture{Future: future}
}

func (a *RDSStub) CancelExportTask(ctx workflow.Context, input *rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error) {
	var output rds.CancelExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CancelExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CancelExportTaskAsync(ctx workflow.Context, input *rds.CancelExportTaskInput) *RdsCancelExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CancelExportTask", input)
	return &RdsCancelExportTaskFuture{Future: future}
}

func (a *RDSStub) CopyDBClusterParameterGroup(ctx workflow.Context, input *rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error) {
	var output rds.CopyDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CopyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CopyDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.CopyDBClusterParameterGroupInput) *RdsCopyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CopyDBClusterParameterGroup", input)
	return &RdsCopyDBClusterParameterGroupFuture{Future: future}
}

func (a *RDSStub) CopyDBClusterSnapshot(ctx workflow.Context, input *rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error) {
	var output rds.CopyDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CopyDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CopyDBClusterSnapshotAsync(ctx workflow.Context, input *rds.CopyDBClusterSnapshotInput) *RdsCopyDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CopyDBClusterSnapshot", input)
	return &RdsCopyDBClusterSnapshotFuture{Future: future}
}

func (a *RDSStub) CopyDBParameterGroup(ctx workflow.Context, input *rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error) {
	var output rds.CopyDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CopyDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CopyDBParameterGroupAsync(ctx workflow.Context, input *rds.CopyDBParameterGroupInput) *RdsCopyDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CopyDBParameterGroup", input)
	return &RdsCopyDBParameterGroupFuture{Future: future}
}

func (a *RDSStub) CopyDBSnapshot(ctx workflow.Context, input *rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error) {
	var output rds.CopyDBSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CopyDBSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CopyDBSnapshotAsync(ctx workflow.Context, input *rds.CopyDBSnapshotInput) *RdsCopyDBSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CopyDBSnapshot", input)
	return &RdsCopyDBSnapshotFuture{Future: future}
}

func (a *RDSStub) CopyOptionGroup(ctx workflow.Context, input *rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error) {
	var output rds.CopyOptionGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CopyOptionGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CopyOptionGroupAsync(ctx workflow.Context, input *rds.CopyOptionGroupInput) *RdsCopyOptionGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CopyOptionGroup", input)
	return &RdsCopyOptionGroupFuture{Future: future}
}

func (a *RDSStub) CreateCustomAvailabilityZone(ctx workflow.Context, input *rds.CreateCustomAvailabilityZoneInput) (*rds.CreateCustomAvailabilityZoneOutput, error) {
	var output rds.CreateCustomAvailabilityZoneOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateCustomAvailabilityZone", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateCustomAvailabilityZoneAsync(ctx workflow.Context, input *rds.CreateCustomAvailabilityZoneInput) *RdsCreateCustomAvailabilityZoneFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateCustomAvailabilityZone", input)
	return &RdsCreateCustomAvailabilityZoneFuture{Future: future}
}

func (a *RDSStub) CreateDBCluster(ctx workflow.Context, input *rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error) {
	var output rds.CreateDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateDBClusterAsync(ctx workflow.Context, input *rds.CreateDBClusterInput) *RdsCreateDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBCluster", input)
	return &RdsCreateDBClusterFuture{Future: future}
}

func (a *RDSStub) CreateDBClusterEndpoint(ctx workflow.Context, input *rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error) {
	var output rds.CreateDBClusterEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBClusterEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateDBClusterEndpointAsync(ctx workflow.Context, input *rds.CreateDBClusterEndpointInput) *RdsCreateDBClusterEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBClusterEndpoint", input)
	return &RdsCreateDBClusterEndpointFuture{Future: future}
}

func (a *RDSStub) CreateDBClusterParameterGroup(ctx workflow.Context, input *rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error) {
	var output rds.CreateDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.CreateDBClusterParameterGroupInput) *RdsCreateDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBClusterParameterGroup", input)
	return &RdsCreateDBClusterParameterGroupFuture{Future: future}
}

func (a *RDSStub) CreateDBClusterSnapshot(ctx workflow.Context, input *rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error) {
	var output rds.CreateDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateDBClusterSnapshotAsync(ctx workflow.Context, input *rds.CreateDBClusterSnapshotInput) *RdsCreateDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBClusterSnapshot", input)
	return &RdsCreateDBClusterSnapshotFuture{Future: future}
}

func (a *RDSStub) CreateDBInstance(ctx workflow.Context, input *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error) {
	var output rds.CreateDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateDBInstanceAsync(ctx workflow.Context, input *rds.CreateDBInstanceInput) *RdsCreateDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBInstance", input)
	return &RdsCreateDBInstanceFuture{Future: future}
}

func (a *RDSStub) CreateDBInstanceReadReplica(ctx workflow.Context, input *rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	var output rds.CreateDBInstanceReadReplicaOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBInstanceReadReplica", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateDBInstanceReadReplicaAsync(ctx workflow.Context, input *rds.CreateDBInstanceReadReplicaInput) *RdsCreateDBInstanceReadReplicaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBInstanceReadReplica", input)
	return &RdsCreateDBInstanceReadReplicaFuture{Future: future}
}

func (a *RDSStub) CreateDBParameterGroup(ctx workflow.Context, input *rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error) {
	var output rds.CreateDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateDBParameterGroupAsync(ctx workflow.Context, input *rds.CreateDBParameterGroupInput) *RdsCreateDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBParameterGroup", input)
	return &RdsCreateDBParameterGroupFuture{Future: future}
}

func (a *RDSStub) CreateDBProxy(ctx workflow.Context, input *rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error) {
	var output rds.CreateDBProxyOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBProxy", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateDBProxyAsync(ctx workflow.Context, input *rds.CreateDBProxyInput) *RdsCreateDBProxyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBProxy", input)
	return &RdsCreateDBProxyFuture{Future: future}
}

func (a *RDSStub) CreateDBSecurityGroup(ctx workflow.Context, input *rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error) {
	var output rds.CreateDBSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateDBSecurityGroupAsync(ctx workflow.Context, input *rds.CreateDBSecurityGroupInput) *RdsCreateDBSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBSecurityGroup", input)
	return &RdsCreateDBSecurityGroupFuture{Future: future}
}

func (a *RDSStub) CreateDBSnapshot(ctx workflow.Context, input *rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error) {
	var output rds.CreateDBSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateDBSnapshotAsync(ctx workflow.Context, input *rds.CreateDBSnapshotInput) *RdsCreateDBSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBSnapshot", input)
	return &RdsCreateDBSnapshotFuture{Future: future}
}

func (a *RDSStub) CreateDBSubnetGroup(ctx workflow.Context, input *rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error) {
	var output rds.CreateDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateDBSubnetGroupAsync(ctx workflow.Context, input *rds.CreateDBSubnetGroupInput) *RdsCreateDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateDBSubnetGroup", input)
	return &RdsCreateDBSubnetGroupFuture{Future: future}
}

func (a *RDSStub) CreateEventSubscription(ctx workflow.Context, input *rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error) {
	var output rds.CreateEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateEventSubscriptionAsync(ctx workflow.Context, input *rds.CreateEventSubscriptionInput) *RdsCreateEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateEventSubscription", input)
	return &RdsCreateEventSubscriptionFuture{Future: future}
}

func (a *RDSStub) CreateGlobalCluster(ctx workflow.Context, input *rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error) {
	var output rds.CreateGlobalClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateGlobalCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateGlobalClusterAsync(ctx workflow.Context, input *rds.CreateGlobalClusterInput) *RdsCreateGlobalClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateGlobalCluster", input)
	return &RdsCreateGlobalClusterFuture{Future: future}
}

func (a *RDSStub) CreateOptionGroup(ctx workflow.Context, input *rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error) {
	var output rds.CreateOptionGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.CreateOptionGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) CreateOptionGroupAsync(ctx workflow.Context, input *rds.CreateOptionGroupInput) *RdsCreateOptionGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.CreateOptionGroup", input)
	return &RdsCreateOptionGroupFuture{Future: future}
}

func (a *RDSStub) DeleteCustomAvailabilityZone(ctx workflow.Context, input *rds.DeleteCustomAvailabilityZoneInput) (*rds.DeleteCustomAvailabilityZoneOutput, error) {
	var output rds.DeleteCustomAvailabilityZoneOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteCustomAvailabilityZone", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteCustomAvailabilityZoneAsync(ctx workflow.Context, input *rds.DeleteCustomAvailabilityZoneInput) *RdsDeleteCustomAvailabilityZoneFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteCustomAvailabilityZone", input)
	return &RdsDeleteCustomAvailabilityZoneFuture{Future: future}
}

func (a *RDSStub) DeleteDBCluster(ctx workflow.Context, input *rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error) {
	var output rds.DeleteDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteDBClusterAsync(ctx workflow.Context, input *rds.DeleteDBClusterInput) *RdsDeleteDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBCluster", input)
	return &RdsDeleteDBClusterFuture{Future: future}
}

func (a *RDSStub) DeleteDBClusterEndpoint(ctx workflow.Context, input *rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error) {
	var output rds.DeleteDBClusterEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBClusterEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteDBClusterEndpointAsync(ctx workflow.Context, input *rds.DeleteDBClusterEndpointInput) *RdsDeleteDBClusterEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBClusterEndpoint", input)
	return &RdsDeleteDBClusterEndpointFuture{Future: future}
}

func (a *RDSStub) DeleteDBClusterParameterGroup(ctx workflow.Context, input *rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	var output rds.DeleteDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.DeleteDBClusterParameterGroupInput) *RdsDeleteDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBClusterParameterGroup", input)
	return &RdsDeleteDBClusterParameterGroupFuture{Future: future}
}

func (a *RDSStub) DeleteDBClusterSnapshot(ctx workflow.Context, input *rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error) {
	var output rds.DeleteDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteDBClusterSnapshotAsync(ctx workflow.Context, input *rds.DeleteDBClusterSnapshotInput) *RdsDeleteDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBClusterSnapshot", input)
	return &RdsDeleteDBClusterSnapshotFuture{Future: future}
}

func (a *RDSStub) DeleteDBInstance(ctx workflow.Context, input *rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error) {
	var output rds.DeleteDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteDBInstanceAsync(ctx workflow.Context, input *rds.DeleteDBInstanceInput) *RdsDeleteDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBInstance", input)
	return &RdsDeleteDBInstanceFuture{Future: future}
}

func (a *RDSStub) DeleteDBInstanceAutomatedBackup(ctx workflow.Context, input *rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	var output rds.DeleteDBInstanceAutomatedBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBInstanceAutomatedBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteDBInstanceAutomatedBackupAsync(ctx workflow.Context, input *rds.DeleteDBInstanceAutomatedBackupInput) *RdsDeleteDBInstanceAutomatedBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBInstanceAutomatedBackup", input)
	return &RdsDeleteDBInstanceAutomatedBackupFuture{Future: future}
}

func (a *RDSStub) DeleteDBParameterGroup(ctx workflow.Context, input *rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error) {
	var output rds.DeleteDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteDBParameterGroupAsync(ctx workflow.Context, input *rds.DeleteDBParameterGroupInput) *RdsDeleteDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBParameterGroup", input)
	return &RdsDeleteDBParameterGroupFuture{Future: future}
}

func (a *RDSStub) DeleteDBProxy(ctx workflow.Context, input *rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error) {
	var output rds.DeleteDBProxyOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBProxy", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteDBProxyAsync(ctx workflow.Context, input *rds.DeleteDBProxyInput) *RdsDeleteDBProxyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBProxy", input)
	return &RdsDeleteDBProxyFuture{Future: future}
}

func (a *RDSStub) DeleteDBSecurityGroup(ctx workflow.Context, input *rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error) {
	var output rds.DeleteDBSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteDBSecurityGroupAsync(ctx workflow.Context, input *rds.DeleteDBSecurityGroupInput) *RdsDeleteDBSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBSecurityGroup", input)
	return &RdsDeleteDBSecurityGroupFuture{Future: future}
}

func (a *RDSStub) DeleteDBSnapshot(ctx workflow.Context, input *rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error) {
	var output rds.DeleteDBSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteDBSnapshotAsync(ctx workflow.Context, input *rds.DeleteDBSnapshotInput) *RdsDeleteDBSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBSnapshot", input)
	return &RdsDeleteDBSnapshotFuture{Future: future}
}

func (a *RDSStub) DeleteDBSubnetGroup(ctx workflow.Context, input *rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error) {
	var output rds.DeleteDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteDBSubnetGroupAsync(ctx workflow.Context, input *rds.DeleteDBSubnetGroupInput) *RdsDeleteDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteDBSubnetGroup", input)
	return &RdsDeleteDBSubnetGroupFuture{Future: future}
}

func (a *RDSStub) DeleteEventSubscription(ctx workflow.Context, input *rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error) {
	var output rds.DeleteEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteEventSubscriptionAsync(ctx workflow.Context, input *rds.DeleteEventSubscriptionInput) *RdsDeleteEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteEventSubscription", input)
	return &RdsDeleteEventSubscriptionFuture{Future: future}
}

func (a *RDSStub) DeleteGlobalCluster(ctx workflow.Context, input *rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error) {
	var output rds.DeleteGlobalClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteGlobalCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteGlobalClusterAsync(ctx workflow.Context, input *rds.DeleteGlobalClusterInput) *RdsDeleteGlobalClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteGlobalCluster", input)
	return &RdsDeleteGlobalClusterFuture{Future: future}
}

func (a *RDSStub) DeleteInstallationMedia(ctx workflow.Context, input *rds.DeleteInstallationMediaInput) (*rds.DeleteInstallationMediaOutput, error) {
	var output rds.DeleteInstallationMediaOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteInstallationMedia", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteInstallationMediaAsync(ctx workflow.Context, input *rds.DeleteInstallationMediaInput) *RdsDeleteInstallationMediaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteInstallationMedia", input)
	return &RdsDeleteInstallationMediaFuture{Future: future}
}

func (a *RDSStub) DeleteOptionGroup(ctx workflow.Context, input *rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error) {
	var output rds.DeleteOptionGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeleteOptionGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeleteOptionGroupAsync(ctx workflow.Context, input *rds.DeleteOptionGroupInput) *RdsDeleteOptionGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeleteOptionGroup", input)
	return &RdsDeleteOptionGroupFuture{Future: future}
}

func (a *RDSStub) DeregisterDBProxyTargets(ctx workflow.Context, input *rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error) {
	var output rds.DeregisterDBProxyTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DeregisterDBProxyTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DeregisterDBProxyTargetsAsync(ctx workflow.Context, input *rds.DeregisterDBProxyTargetsInput) *RdsDeregisterDBProxyTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DeregisterDBProxyTargets", input)
	return &RdsDeregisterDBProxyTargetsFuture{Future: future}
}

func (a *RDSStub) DescribeAccountAttributes(ctx workflow.Context, input *rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error) {
	var output rds.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeAccountAttributesAsync(ctx workflow.Context, input *rds.DescribeAccountAttributesInput) *RdsDescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeAccountAttributes", input)
	return &RdsDescribeAccountAttributesFuture{Future: future}
}

func (a *RDSStub) DescribeCertificates(ctx workflow.Context, input *rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error) {
	var output rds.DescribeCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeCertificatesAsync(ctx workflow.Context, input *rds.DescribeCertificatesInput) *RdsDescribeCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeCertificates", input)
	return &RdsDescribeCertificatesFuture{Future: future}
}

func (a *RDSStub) DescribeCustomAvailabilityZones(ctx workflow.Context, input *rds.DescribeCustomAvailabilityZonesInput) (*rds.DescribeCustomAvailabilityZonesOutput, error) {
	var output rds.DescribeCustomAvailabilityZonesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeCustomAvailabilityZones", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeCustomAvailabilityZonesAsync(ctx workflow.Context, input *rds.DescribeCustomAvailabilityZonesInput) *RdsDescribeCustomAvailabilityZonesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeCustomAvailabilityZones", input)
	return &RdsDescribeCustomAvailabilityZonesFuture{Future: future}
}

func (a *RDSStub) DescribeDBClusterBacktracks(ctx workflow.Context, input *rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error) {
	var output rds.DescribeDBClusterBacktracksOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusterBacktracks", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBClusterBacktracksAsync(ctx workflow.Context, input *rds.DescribeDBClusterBacktracksInput) *RdsDescribeDBClusterBacktracksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusterBacktracks", input)
	return &RdsDescribeDBClusterBacktracksFuture{Future: future}
}

func (a *RDSStub) DescribeDBClusterEndpoints(ctx workflow.Context, input *rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error) {
	var output rds.DescribeDBClusterEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusterEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBClusterEndpointsAsync(ctx workflow.Context, input *rds.DescribeDBClusterEndpointsInput) *RdsDescribeDBClusterEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusterEndpoints", input)
	return &RdsDescribeDBClusterEndpointsFuture{Future: future}
}

func (a *RDSStub) DescribeDBClusterParameterGroups(ctx workflow.Context, input *rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	var output rds.DescribeDBClusterParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusterParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBClusterParameterGroupsAsync(ctx workflow.Context, input *rds.DescribeDBClusterParameterGroupsInput) *RdsDescribeDBClusterParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusterParameterGroups", input)
	return &RdsDescribeDBClusterParameterGroupsFuture{Future: future}
}

func (a *RDSStub) DescribeDBClusterParameters(ctx workflow.Context, input *rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error) {
	var output rds.DescribeDBClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBClusterParametersAsync(ctx workflow.Context, input *rds.DescribeDBClusterParametersInput) *RdsDescribeDBClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusterParameters", input)
	return &RdsDescribeDBClusterParametersFuture{Future: future}
}

func (a *RDSStub) DescribeDBClusterSnapshotAttributes(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output rds.DescribeDBClusterSnapshotAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusterSnapshotAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBClusterSnapshotAttributesAsync(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotAttributesInput) *RdsDescribeDBClusterSnapshotAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusterSnapshotAttributes", input)
	return &RdsDescribeDBClusterSnapshotAttributesFuture{Future: future}
}

func (a *RDSStub) DescribeDBClusterSnapshots(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	var output rds.DescribeDBClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBClusterSnapshotsAsync(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) *RdsDescribeDBClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusterSnapshots", input)
	return &RdsDescribeDBClusterSnapshotsFuture{Future: future}
}

func (a *RDSStub) DescribeDBClusters(ctx workflow.Context, input *rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error) {
	var output rds.DescribeDBClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBClustersAsync(ctx workflow.Context, input *rds.DescribeDBClustersInput) *RdsDescribeDBClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBClusters", input)
	return &RdsDescribeDBClustersFuture{Future: future}
}

func (a *RDSStub) DescribeDBEngineVersions(ctx workflow.Context, input *rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error) {
	var output rds.DescribeDBEngineVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBEngineVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBEngineVersionsAsync(ctx workflow.Context, input *rds.DescribeDBEngineVersionsInput) *RdsDescribeDBEngineVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBEngineVersions", input)
	return &RdsDescribeDBEngineVersionsFuture{Future: future}
}

func (a *RDSStub) DescribeDBInstanceAutomatedBackups(ctx workflow.Context, input *rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	var output rds.DescribeDBInstanceAutomatedBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBInstanceAutomatedBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBInstanceAutomatedBackupsAsync(ctx workflow.Context, input *rds.DescribeDBInstanceAutomatedBackupsInput) *RdsDescribeDBInstanceAutomatedBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBInstanceAutomatedBackups", input)
	return &RdsDescribeDBInstanceAutomatedBackupsFuture{Future: future}
}

func (a *RDSStub) DescribeDBInstances(ctx workflow.Context, input *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error) {
	var output rds.DescribeDBInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBInstancesAsync(ctx workflow.Context, input *rds.DescribeDBInstancesInput) *RdsDescribeDBInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBInstances", input)
	return &RdsDescribeDBInstancesFuture{Future: future}
}

func (a *RDSStub) DescribeDBLogFiles(ctx workflow.Context, input *rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error) {
	var output rds.DescribeDBLogFilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBLogFiles", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBLogFilesAsync(ctx workflow.Context, input *rds.DescribeDBLogFilesInput) *RdsDescribeDBLogFilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBLogFiles", input)
	return &RdsDescribeDBLogFilesFuture{Future: future}
}

func (a *RDSStub) DescribeDBParameterGroups(ctx workflow.Context, input *rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error) {
	var output rds.DescribeDBParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBParameterGroupsAsync(ctx workflow.Context, input *rds.DescribeDBParameterGroupsInput) *RdsDescribeDBParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBParameterGroups", input)
	return &RdsDescribeDBParameterGroupsFuture{Future: future}
}

func (a *RDSStub) DescribeDBParameters(ctx workflow.Context, input *rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error) {
	var output rds.DescribeDBParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBParametersAsync(ctx workflow.Context, input *rds.DescribeDBParametersInput) *RdsDescribeDBParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBParameters", input)
	return &RdsDescribeDBParametersFuture{Future: future}
}

func (a *RDSStub) DescribeDBProxies(ctx workflow.Context, input *rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error) {
	var output rds.DescribeDBProxiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBProxies", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBProxiesAsync(ctx workflow.Context, input *rds.DescribeDBProxiesInput) *RdsDescribeDBProxiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBProxies", input)
	return &RdsDescribeDBProxiesFuture{Future: future}
}

func (a *RDSStub) DescribeDBProxyTargetGroups(ctx workflow.Context, input *rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	var output rds.DescribeDBProxyTargetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBProxyTargetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBProxyTargetGroupsAsync(ctx workflow.Context, input *rds.DescribeDBProxyTargetGroupsInput) *RdsDescribeDBProxyTargetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBProxyTargetGroups", input)
	return &RdsDescribeDBProxyTargetGroupsFuture{Future: future}
}

func (a *RDSStub) DescribeDBProxyTargets(ctx workflow.Context, input *rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error) {
	var output rds.DescribeDBProxyTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBProxyTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBProxyTargetsAsync(ctx workflow.Context, input *rds.DescribeDBProxyTargetsInput) *RdsDescribeDBProxyTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBProxyTargets", input)
	return &RdsDescribeDBProxyTargetsFuture{Future: future}
}

func (a *RDSStub) DescribeDBSecurityGroups(ctx workflow.Context, input *rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error) {
	var output rds.DescribeDBSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBSecurityGroupsAsync(ctx workflow.Context, input *rds.DescribeDBSecurityGroupsInput) *RdsDescribeDBSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBSecurityGroups", input)
	return &RdsDescribeDBSecurityGroupsFuture{Future: future}
}

func (a *RDSStub) DescribeDBSnapshotAttributes(ctx workflow.Context, input *rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	var output rds.DescribeDBSnapshotAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBSnapshotAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBSnapshotAttributesAsync(ctx workflow.Context, input *rds.DescribeDBSnapshotAttributesInput) *RdsDescribeDBSnapshotAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBSnapshotAttributes", input)
	return &RdsDescribeDBSnapshotAttributesFuture{Future: future}
}

func (a *RDSStub) DescribeDBSnapshots(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error) {
	var output rds.DescribeDBSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBSnapshotsAsync(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) *RdsDescribeDBSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBSnapshots", input)
	return &RdsDescribeDBSnapshotsFuture{Future: future}
}

func (a *RDSStub) DescribeDBSubnetGroups(ctx workflow.Context, input *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error) {
	var output rds.DescribeDBSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeDBSubnetGroupsAsync(ctx workflow.Context, input *rds.DescribeDBSubnetGroupsInput) *RdsDescribeDBSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeDBSubnetGroups", input)
	return &RdsDescribeDBSubnetGroupsFuture{Future: future}
}

func (a *RDSStub) DescribeEngineDefaultClusterParameters(ctx workflow.Context, input *rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	var output rds.DescribeEngineDefaultClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeEngineDefaultClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeEngineDefaultClusterParametersAsync(ctx workflow.Context, input *rds.DescribeEngineDefaultClusterParametersInput) *RdsDescribeEngineDefaultClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeEngineDefaultClusterParameters", input)
	return &RdsDescribeEngineDefaultClusterParametersFuture{Future: future}
}

func (a *RDSStub) DescribeEngineDefaultParameters(ctx workflow.Context, input *rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error) {
	var output rds.DescribeEngineDefaultParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeEngineDefaultParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeEngineDefaultParametersAsync(ctx workflow.Context, input *rds.DescribeEngineDefaultParametersInput) *RdsDescribeEngineDefaultParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeEngineDefaultParameters", input)
	return &RdsDescribeEngineDefaultParametersFuture{Future: future}
}

func (a *RDSStub) DescribeEventCategories(ctx workflow.Context, input *rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error) {
	var output rds.DescribeEventCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeEventCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeEventCategoriesAsync(ctx workflow.Context, input *rds.DescribeEventCategoriesInput) *RdsDescribeEventCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeEventCategories", input)
	return &RdsDescribeEventCategoriesFuture{Future: future}
}

func (a *RDSStub) DescribeEventSubscriptions(ctx workflow.Context, input *rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error) {
	var output rds.DescribeEventSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeEventSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeEventSubscriptionsAsync(ctx workflow.Context, input *rds.DescribeEventSubscriptionsInput) *RdsDescribeEventSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeEventSubscriptions", input)
	return &RdsDescribeEventSubscriptionsFuture{Future: future}
}

func (a *RDSStub) DescribeEvents(ctx workflow.Context, input *rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error) {
	var output rds.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeEventsAsync(ctx workflow.Context, input *rds.DescribeEventsInput) *RdsDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeEvents", input)
	return &RdsDescribeEventsFuture{Future: future}
}

func (a *RDSStub) DescribeExportTasks(ctx workflow.Context, input *rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error) {
	var output rds.DescribeExportTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeExportTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeExportTasksAsync(ctx workflow.Context, input *rds.DescribeExportTasksInput) *RdsDescribeExportTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeExportTasks", input)
	return &RdsDescribeExportTasksFuture{Future: future}
}

func (a *RDSStub) DescribeGlobalClusters(ctx workflow.Context, input *rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error) {
	var output rds.DescribeGlobalClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeGlobalClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeGlobalClustersAsync(ctx workflow.Context, input *rds.DescribeGlobalClustersInput) *RdsDescribeGlobalClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeGlobalClusters", input)
	return &RdsDescribeGlobalClustersFuture{Future: future}
}

func (a *RDSStub) DescribeInstallationMedia(ctx workflow.Context, input *rds.DescribeInstallationMediaInput) (*rds.DescribeInstallationMediaOutput, error) {
	var output rds.DescribeInstallationMediaOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeInstallationMedia", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeInstallationMediaAsync(ctx workflow.Context, input *rds.DescribeInstallationMediaInput) *RdsDescribeInstallationMediaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeInstallationMedia", input)
	return &RdsDescribeInstallationMediaFuture{Future: future}
}

func (a *RDSStub) DescribeOptionGroupOptions(ctx workflow.Context, input *rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error) {
	var output rds.DescribeOptionGroupOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeOptionGroupOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeOptionGroupOptionsAsync(ctx workflow.Context, input *rds.DescribeOptionGroupOptionsInput) *RdsDescribeOptionGroupOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeOptionGroupOptions", input)
	return &RdsDescribeOptionGroupOptionsFuture{Future: future}
}

func (a *RDSStub) DescribeOptionGroups(ctx workflow.Context, input *rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error) {
	var output rds.DescribeOptionGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeOptionGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeOptionGroupsAsync(ctx workflow.Context, input *rds.DescribeOptionGroupsInput) *RdsDescribeOptionGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeOptionGroups", input)
	return &RdsDescribeOptionGroupsFuture{Future: future}
}

func (a *RDSStub) DescribeOrderableDBInstanceOptions(ctx workflow.Context, input *rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output rds.DescribeOrderableDBInstanceOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeOrderableDBInstanceOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeOrderableDBInstanceOptionsAsync(ctx workflow.Context, input *rds.DescribeOrderableDBInstanceOptionsInput) *RdsDescribeOrderableDBInstanceOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeOrderableDBInstanceOptions", input)
	return &RdsDescribeOrderableDBInstanceOptionsFuture{Future: future}
}

func (a *RDSStub) DescribePendingMaintenanceActions(ctx workflow.Context, input *rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	var output rds.DescribePendingMaintenanceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribePendingMaintenanceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *rds.DescribePendingMaintenanceActionsInput) *RdsDescribePendingMaintenanceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribePendingMaintenanceActions", input)
	return &RdsDescribePendingMaintenanceActionsFuture{Future: future}
}

func (a *RDSStub) DescribeReservedDBInstances(ctx workflow.Context, input *rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error) {
	var output rds.DescribeReservedDBInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeReservedDBInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeReservedDBInstancesAsync(ctx workflow.Context, input *rds.DescribeReservedDBInstancesInput) *RdsDescribeReservedDBInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeReservedDBInstances", input)
	return &RdsDescribeReservedDBInstancesFuture{Future: future}
}

func (a *RDSStub) DescribeReservedDBInstancesOfferings(ctx workflow.Context, input *rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	var output rds.DescribeReservedDBInstancesOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeReservedDBInstancesOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeReservedDBInstancesOfferingsAsync(ctx workflow.Context, input *rds.DescribeReservedDBInstancesOfferingsInput) *RdsDescribeReservedDBInstancesOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeReservedDBInstancesOfferings", input)
	return &RdsDescribeReservedDBInstancesOfferingsFuture{Future: future}
}

func (a *RDSStub) DescribeSourceRegions(ctx workflow.Context, input *rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error) {
	var output rds.DescribeSourceRegionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeSourceRegions", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeSourceRegionsAsync(ctx workflow.Context, input *rds.DescribeSourceRegionsInput) *RdsDescribeSourceRegionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeSourceRegions", input)
	return &RdsDescribeSourceRegionsFuture{Future: future}
}

func (a *RDSStub) DescribeValidDBInstanceModifications(ctx workflow.Context, input *rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	var output rds.DescribeValidDBInstanceModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DescribeValidDBInstanceModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DescribeValidDBInstanceModificationsAsync(ctx workflow.Context, input *rds.DescribeValidDBInstanceModificationsInput) *RdsDescribeValidDBInstanceModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DescribeValidDBInstanceModifications", input)
	return &RdsDescribeValidDBInstanceModificationsFuture{Future: future}
}

func (a *RDSStub) DownloadDBLogFilePortion(ctx workflow.Context, input *rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error) {
	var output rds.DownloadDBLogFilePortionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.DownloadDBLogFilePortion", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) DownloadDBLogFilePortionAsync(ctx workflow.Context, input *rds.DownloadDBLogFilePortionInput) *RdsDownloadDBLogFilePortionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.DownloadDBLogFilePortion", input)
	return &RdsDownloadDBLogFilePortionFuture{Future: future}
}

func (a *RDSStub) FailoverDBCluster(ctx workflow.Context, input *rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error) {
	var output rds.FailoverDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.FailoverDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) FailoverDBClusterAsync(ctx workflow.Context, input *rds.FailoverDBClusterInput) *RdsFailoverDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.FailoverDBCluster", input)
	return &RdsFailoverDBClusterFuture{Future: future}
}

func (a *RDSStub) ImportInstallationMedia(ctx workflow.Context, input *rds.ImportInstallationMediaInput) (*rds.ImportInstallationMediaOutput, error) {
	var output rds.ImportInstallationMediaOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ImportInstallationMedia", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ImportInstallationMediaAsync(ctx workflow.Context, input *rds.ImportInstallationMediaInput) *RdsImportInstallationMediaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ImportInstallationMedia", input)
	return &RdsImportInstallationMediaFuture{Future: future}
}

func (a *RDSStub) ListTagsForResource(ctx workflow.Context, input *rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error) {
	var output rds.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ListTagsForResourceAsync(ctx workflow.Context, input *rds.ListTagsForResourceInput) *RdsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ListTagsForResource", input)
	return &RdsListTagsForResourceFuture{Future: future}
}

func (a *RDSStub) ModifyCertificates(ctx workflow.Context, input *rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error) {
	var output rds.ModifyCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyCertificatesAsync(ctx workflow.Context, input *rds.ModifyCertificatesInput) *RdsModifyCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyCertificates", input)
	return &RdsModifyCertificatesFuture{Future: future}
}

func (a *RDSStub) ModifyCurrentDBClusterCapacity(ctx workflow.Context, input *rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	var output rds.ModifyCurrentDBClusterCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyCurrentDBClusterCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyCurrentDBClusterCapacityAsync(ctx workflow.Context, input *rds.ModifyCurrentDBClusterCapacityInput) *RdsModifyCurrentDBClusterCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyCurrentDBClusterCapacity", input)
	return &RdsModifyCurrentDBClusterCapacityFuture{Future: future}
}

func (a *RDSStub) ModifyDBCluster(ctx workflow.Context, input *rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error) {
	var output rds.ModifyDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyDBClusterAsync(ctx workflow.Context, input *rds.ModifyDBClusterInput) *RdsModifyDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBCluster", input)
	return &RdsModifyDBClusterFuture{Future: future}
}

func (a *RDSStub) ModifyDBClusterEndpoint(ctx workflow.Context, input *rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error) {
	var output rds.ModifyDBClusterEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBClusterEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyDBClusterEndpointAsync(ctx workflow.Context, input *rds.ModifyDBClusterEndpointInput) *RdsModifyDBClusterEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBClusterEndpoint", input)
	return &RdsModifyDBClusterEndpointFuture{Future: future}
}

func (a *RDSStub) ModifyDBClusterParameterGroup(ctx workflow.Context, input *rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
	var output rds.DBClusterParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.ModifyDBClusterParameterGroupInput) *RdsModifyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBClusterParameterGroup", input)
	return &RdsModifyDBClusterParameterGroupFuture{Future: future}
}

func (a *RDSStub) ModifyDBClusterSnapshotAttribute(ctx workflow.Context, input *rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output rds.ModifyDBClusterSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBClusterSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyDBClusterSnapshotAttributeAsync(ctx workflow.Context, input *rds.ModifyDBClusterSnapshotAttributeInput) *RdsModifyDBClusterSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBClusterSnapshotAttribute", input)
	return &RdsModifyDBClusterSnapshotAttributeFuture{Future: future}
}

func (a *RDSStub) ModifyDBInstance(ctx workflow.Context, input *rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error) {
	var output rds.ModifyDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyDBInstanceAsync(ctx workflow.Context, input *rds.ModifyDBInstanceInput) *RdsModifyDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBInstance", input)
	return &RdsModifyDBInstanceFuture{Future: future}
}

func (a *RDSStub) ModifyDBParameterGroup(ctx workflow.Context, input *rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
	var output rds.DBParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyDBParameterGroupAsync(ctx workflow.Context, input *rds.ModifyDBParameterGroupInput) *RdsModifyDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBParameterGroup", input)
	return &RdsModifyDBParameterGroupFuture{Future: future}
}

func (a *RDSStub) ModifyDBProxy(ctx workflow.Context, input *rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error) {
	var output rds.ModifyDBProxyOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBProxy", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyDBProxyAsync(ctx workflow.Context, input *rds.ModifyDBProxyInput) *RdsModifyDBProxyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBProxy", input)
	return &RdsModifyDBProxyFuture{Future: future}
}

func (a *RDSStub) ModifyDBProxyTargetGroup(ctx workflow.Context, input *rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	var output rds.ModifyDBProxyTargetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBProxyTargetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyDBProxyTargetGroupAsync(ctx workflow.Context, input *rds.ModifyDBProxyTargetGroupInput) *RdsModifyDBProxyTargetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBProxyTargetGroup", input)
	return &RdsModifyDBProxyTargetGroupFuture{Future: future}
}

func (a *RDSStub) ModifyDBSnapshot(ctx workflow.Context, input *rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error) {
	var output rds.ModifyDBSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyDBSnapshotAsync(ctx workflow.Context, input *rds.ModifyDBSnapshotInput) *RdsModifyDBSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBSnapshot", input)
	return &RdsModifyDBSnapshotFuture{Future: future}
}

func (a *RDSStub) ModifyDBSnapshotAttribute(ctx workflow.Context, input *rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	var output rds.ModifyDBSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyDBSnapshotAttributeAsync(ctx workflow.Context, input *rds.ModifyDBSnapshotAttributeInput) *RdsModifyDBSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBSnapshotAttribute", input)
	return &RdsModifyDBSnapshotAttributeFuture{Future: future}
}

func (a *RDSStub) ModifyDBSubnetGroup(ctx workflow.Context, input *rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error) {
	var output rds.ModifyDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyDBSubnetGroupAsync(ctx workflow.Context, input *rds.ModifyDBSubnetGroupInput) *RdsModifyDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyDBSubnetGroup", input)
	return &RdsModifyDBSubnetGroupFuture{Future: future}
}

func (a *RDSStub) ModifyEventSubscription(ctx workflow.Context, input *rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error) {
	var output rds.ModifyEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyEventSubscriptionAsync(ctx workflow.Context, input *rds.ModifyEventSubscriptionInput) *RdsModifyEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyEventSubscription", input)
	return &RdsModifyEventSubscriptionFuture{Future: future}
}

func (a *RDSStub) ModifyGlobalCluster(ctx workflow.Context, input *rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error) {
	var output rds.ModifyGlobalClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyGlobalCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyGlobalClusterAsync(ctx workflow.Context, input *rds.ModifyGlobalClusterInput) *RdsModifyGlobalClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyGlobalCluster", input)
	return &RdsModifyGlobalClusterFuture{Future: future}
}

func (a *RDSStub) ModifyOptionGroup(ctx workflow.Context, input *rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error) {
	var output rds.ModifyOptionGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.ModifyOptionGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ModifyOptionGroupAsync(ctx workflow.Context, input *rds.ModifyOptionGroupInput) *RdsModifyOptionGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ModifyOptionGroup", input)
	return &RdsModifyOptionGroupFuture{Future: future}
}

func (a *RDSStub) PromoteReadReplica(ctx workflow.Context, input *rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error) {
	var output rds.PromoteReadReplicaOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.PromoteReadReplica", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) PromoteReadReplicaAsync(ctx workflow.Context, input *rds.PromoteReadReplicaInput) *RdsPromoteReadReplicaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.PromoteReadReplica", input)
	return &RdsPromoteReadReplicaFuture{Future: future}
}

func (a *RDSStub) PromoteReadReplicaDBCluster(ctx workflow.Context, input *rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	var output rds.PromoteReadReplicaDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.PromoteReadReplicaDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) PromoteReadReplicaDBClusterAsync(ctx workflow.Context, input *rds.PromoteReadReplicaDBClusterInput) *RdsPromoteReadReplicaDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.PromoteReadReplicaDBCluster", input)
	return &RdsPromoteReadReplicaDBClusterFuture{Future: future}
}

func (a *RDSStub) PurchaseReservedDBInstancesOffering(ctx workflow.Context, input *rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	var output rds.PurchaseReservedDBInstancesOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.PurchaseReservedDBInstancesOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) PurchaseReservedDBInstancesOfferingAsync(ctx workflow.Context, input *rds.PurchaseReservedDBInstancesOfferingInput) *RdsPurchaseReservedDBInstancesOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.PurchaseReservedDBInstancesOffering", input)
	return &RdsPurchaseReservedDBInstancesOfferingFuture{Future: future}
}

func (a *RDSStub) RebootDBInstance(ctx workflow.Context, input *rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error) {
	var output rds.RebootDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.RebootDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RebootDBInstanceAsync(ctx workflow.Context, input *rds.RebootDBInstanceInput) *RdsRebootDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RebootDBInstance", input)
	return &RdsRebootDBInstanceFuture{Future: future}
}

func (a *RDSStub) RegisterDBProxyTargets(ctx workflow.Context, input *rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error) {
	var output rds.RegisterDBProxyTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.RegisterDBProxyTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RegisterDBProxyTargetsAsync(ctx workflow.Context, input *rds.RegisterDBProxyTargetsInput) *RdsRegisterDBProxyTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RegisterDBProxyTargets", input)
	return &RdsRegisterDBProxyTargetsFuture{Future: future}
}

func (a *RDSStub) RemoveFromGlobalCluster(ctx workflow.Context, input *rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error) {
	var output rds.RemoveFromGlobalClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.RemoveFromGlobalCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RemoveFromGlobalClusterAsync(ctx workflow.Context, input *rds.RemoveFromGlobalClusterInput) *RdsRemoveFromGlobalClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RemoveFromGlobalCluster", input)
	return &RdsRemoveFromGlobalClusterFuture{Future: future}
}

func (a *RDSStub) RemoveRoleFromDBCluster(ctx workflow.Context, input *rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error) {
	var output rds.RemoveRoleFromDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.RemoveRoleFromDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RemoveRoleFromDBClusterAsync(ctx workflow.Context, input *rds.RemoveRoleFromDBClusterInput) *RdsRemoveRoleFromDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RemoveRoleFromDBCluster", input)
	return &RdsRemoveRoleFromDBClusterFuture{Future: future}
}

func (a *RDSStub) RemoveRoleFromDBInstance(ctx workflow.Context, input *rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	var output rds.RemoveRoleFromDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.RemoveRoleFromDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RemoveRoleFromDBInstanceAsync(ctx workflow.Context, input *rds.RemoveRoleFromDBInstanceInput) *RdsRemoveRoleFromDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RemoveRoleFromDBInstance", input)
	return &RdsRemoveRoleFromDBInstanceFuture{Future: future}
}

func (a *RDSStub) RemoveSourceIdentifierFromSubscription(ctx workflow.Context, input *rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	var output rds.RemoveSourceIdentifierFromSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.RemoveSourceIdentifierFromSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RemoveSourceIdentifierFromSubscriptionAsync(ctx workflow.Context, input *rds.RemoveSourceIdentifierFromSubscriptionInput) *RdsRemoveSourceIdentifierFromSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RemoveSourceIdentifierFromSubscription", input)
	return &RdsRemoveSourceIdentifierFromSubscriptionFuture{Future: future}
}

func (a *RDSStub) RemoveTagsFromResource(ctx workflow.Context, input *rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error) {
	var output rds.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *rds.RemoveTagsFromResourceInput) *RdsRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RemoveTagsFromResource", input)
	return &RdsRemoveTagsFromResourceFuture{Future: future}
}

func (a *RDSStub) ResetDBClusterParameterGroup(ctx workflow.Context, input *rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
	var output rds.DBClusterParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws.rds.ResetDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ResetDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.ResetDBClusterParameterGroupInput) *RdsResetDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ResetDBClusterParameterGroup", input)
	return &RdsResetDBClusterParameterGroupFuture{Future: future}
}

func (a *RDSStub) ResetDBParameterGroup(ctx workflow.Context, input *rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
	var output rds.DBParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws.rds.ResetDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) ResetDBParameterGroupAsync(ctx workflow.Context, input *rds.ResetDBParameterGroupInput) *RdsResetDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.ResetDBParameterGroup", input)
	return &RdsResetDBParameterGroupFuture{Future: future}
}

func (a *RDSStub) RestoreDBClusterFromS3(ctx workflow.Context, input *rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error) {
	var output rds.RestoreDBClusterFromS3Output
	err := workflow.ExecuteActivity(ctx, "aws.rds.RestoreDBClusterFromS3", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RestoreDBClusterFromS3Async(ctx workflow.Context, input *rds.RestoreDBClusterFromS3Input) *RdsRestoreDBClusterFromS3Future {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RestoreDBClusterFromS3", input)
	return &RdsRestoreDBClusterFromS3Future{Future: future}
}

func (a *RDSStub) RestoreDBClusterFromSnapshot(ctx workflow.Context, input *rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	var output rds.RestoreDBClusterFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.RestoreDBClusterFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RestoreDBClusterFromSnapshotAsync(ctx workflow.Context, input *rds.RestoreDBClusterFromSnapshotInput) *RdsRestoreDBClusterFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RestoreDBClusterFromSnapshot", input)
	return &RdsRestoreDBClusterFromSnapshotFuture{Future: future}
}

func (a *RDSStub) RestoreDBClusterToPointInTime(ctx workflow.Context, input *rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	var output rds.RestoreDBClusterToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.RestoreDBClusterToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RestoreDBClusterToPointInTimeAsync(ctx workflow.Context, input *rds.RestoreDBClusterToPointInTimeInput) *RdsRestoreDBClusterToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RestoreDBClusterToPointInTime", input)
	return &RdsRestoreDBClusterToPointInTimeFuture{Future: future}
}

func (a *RDSStub) RestoreDBInstanceFromDBSnapshot(ctx workflow.Context, input *rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	var output rds.RestoreDBInstanceFromDBSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.RestoreDBInstanceFromDBSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RestoreDBInstanceFromDBSnapshotAsync(ctx workflow.Context, input *rds.RestoreDBInstanceFromDBSnapshotInput) *RdsRestoreDBInstanceFromDBSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RestoreDBInstanceFromDBSnapshot", input)
	return &RdsRestoreDBInstanceFromDBSnapshotFuture{Future: future}
}

func (a *RDSStub) RestoreDBInstanceFromS3(ctx workflow.Context, input *rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error) {
	var output rds.RestoreDBInstanceFromS3Output
	err := workflow.ExecuteActivity(ctx, "aws.rds.RestoreDBInstanceFromS3", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RestoreDBInstanceFromS3Async(ctx workflow.Context, input *rds.RestoreDBInstanceFromS3Input) *RdsRestoreDBInstanceFromS3Future {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RestoreDBInstanceFromS3", input)
	return &RdsRestoreDBInstanceFromS3Future{Future: future}
}

func (a *RDSStub) RestoreDBInstanceToPointInTime(ctx workflow.Context, input *rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	var output rds.RestoreDBInstanceToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.RestoreDBInstanceToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RestoreDBInstanceToPointInTimeAsync(ctx workflow.Context, input *rds.RestoreDBInstanceToPointInTimeInput) *RdsRestoreDBInstanceToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RestoreDBInstanceToPointInTime", input)
	return &RdsRestoreDBInstanceToPointInTimeFuture{Future: future}
}

func (a *RDSStub) RevokeDBSecurityGroupIngress(ctx workflow.Context, input *rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	var output rds.RevokeDBSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.RevokeDBSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) RevokeDBSecurityGroupIngressAsync(ctx workflow.Context, input *rds.RevokeDBSecurityGroupIngressInput) *RdsRevokeDBSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.RevokeDBSecurityGroupIngress", input)
	return &RdsRevokeDBSecurityGroupIngressFuture{Future: future}
}

func (a *RDSStub) StartActivityStream(ctx workflow.Context, input *rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error) {
	var output rds.StartActivityStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.StartActivityStream", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) StartActivityStreamAsync(ctx workflow.Context, input *rds.StartActivityStreamInput) *RdsStartActivityStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.StartActivityStream", input)
	return &RdsStartActivityStreamFuture{Future: future}
}

func (a *RDSStub) StartDBCluster(ctx workflow.Context, input *rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error) {
	var output rds.StartDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.StartDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) StartDBClusterAsync(ctx workflow.Context, input *rds.StartDBClusterInput) *RdsStartDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.StartDBCluster", input)
	return &RdsStartDBClusterFuture{Future: future}
}

func (a *RDSStub) StartDBInstance(ctx workflow.Context, input *rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error) {
	var output rds.StartDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.StartDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) StartDBInstanceAsync(ctx workflow.Context, input *rds.StartDBInstanceInput) *RdsStartDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.StartDBInstance", input)
	return &RdsStartDBInstanceFuture{Future: future}
}

func (a *RDSStub) StartExportTask(ctx workflow.Context, input *rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error) {
	var output rds.StartExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.StartExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) StartExportTaskAsync(ctx workflow.Context, input *rds.StartExportTaskInput) *RdsStartExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.StartExportTask", input)
	return &RdsStartExportTaskFuture{Future: future}
}

func (a *RDSStub) StopActivityStream(ctx workflow.Context, input *rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error) {
	var output rds.StopActivityStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.StopActivityStream", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) StopActivityStreamAsync(ctx workflow.Context, input *rds.StopActivityStreamInput) *RdsStopActivityStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.StopActivityStream", input)
	return &RdsStopActivityStreamFuture{Future: future}
}

func (a *RDSStub) StopDBCluster(ctx workflow.Context, input *rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error) {
	var output rds.StopDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.StopDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) StopDBClusterAsync(ctx workflow.Context, input *rds.StopDBClusterInput) *RdsStopDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.StopDBCluster", input)
	return &RdsStopDBClusterFuture{Future: future}
}

func (a *RDSStub) StopDBInstance(ctx workflow.Context, input *rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error) {
	var output rds.StopDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.rds.StopDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *RDSStub) StopDBInstanceAsync(ctx workflow.Context, input *rds.StopDBInstanceInput) *RdsStopDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.rds.StopDBInstance", input)
	return &RdsStopDBInstanceFuture{Future: future}
}

func (a *RDSStub) WaitUntilDBClusterSnapshotAvailable(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.rds.WaitUntilDBClusterSnapshotAvailable", input).Get(ctx, nil)
}

func (a *RDSStub) WaitUntilDBClusterSnapshotAvailableAsync(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.rds.WaitUntilDBClusterSnapshotAvailable", input)
}

func (a *RDSStub) WaitUntilDBClusterSnapshotDeleted(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.rds.WaitUntilDBClusterSnapshotDeleted", input).Get(ctx, nil)
}

func (a *RDSStub) WaitUntilDBClusterSnapshotDeletedAsync(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.rds.WaitUntilDBClusterSnapshotDeleted", input)
}

func (a *RDSStub) WaitUntilDBInstanceAvailable(ctx workflow.Context, input *rds.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.rds.WaitUntilDBInstanceAvailable", input).Get(ctx, nil)
}

func (a *RDSStub) WaitUntilDBInstanceAvailableAsync(ctx workflow.Context, input *rds.DescribeDBInstancesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.rds.WaitUntilDBInstanceAvailable", input)
}

func (a *RDSStub) WaitUntilDBInstanceDeleted(ctx workflow.Context, input *rds.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.rds.WaitUntilDBInstanceDeleted", input).Get(ctx, nil)
}

func (a *RDSStub) WaitUntilDBInstanceDeletedAsync(ctx workflow.Context, input *rds.DescribeDBInstancesInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.rds.WaitUntilDBInstanceDeleted", input)
}

func (a *RDSStub) WaitUntilDBSnapshotAvailable(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.rds.WaitUntilDBSnapshotAvailable", input).Get(ctx, nil)
}

func (a *RDSStub) WaitUntilDBSnapshotAvailableAsync(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.rds.WaitUntilDBSnapshotAvailable", input)
}

func (a *RDSStub) WaitUntilDBSnapshotDeleted(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.rds.WaitUntilDBSnapshotDeleted", input).Get(ctx, nil)
}

func (a *RDSStub) WaitUntilDBSnapshotDeletedAsync(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.rds.WaitUntilDBSnapshotDeleted", input)
}
