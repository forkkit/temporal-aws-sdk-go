// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cloudwatchlogs"
	"go.temporal.io/sdk/workflow"
)

type CloudWatchLogsClient interface {
	AssociateKmsKey(ctx workflow.Context, input *cloudwatchlogs.AssociateKmsKeyInput) (*cloudwatchlogs.AssociateKmsKeyOutput, error)
	AssociateKmsKeyAsync(ctx workflow.Context, input *cloudwatchlogs.AssociateKmsKeyInput) *CloudWatchLogsAssociateKmsKeyFuture

	CancelExportTask(ctx workflow.Context, input *cloudwatchlogs.CancelExportTaskInput) (*cloudwatchlogs.CancelExportTaskOutput, error)
	CancelExportTaskAsync(ctx workflow.Context, input *cloudwatchlogs.CancelExportTaskInput) *CloudWatchLogsCancelExportTaskFuture

	CreateExportTask(ctx workflow.Context, input *cloudwatchlogs.CreateExportTaskInput) (*cloudwatchlogs.CreateExportTaskOutput, error)
	CreateExportTaskAsync(ctx workflow.Context, input *cloudwatchlogs.CreateExportTaskInput) *CloudWatchLogsCreateExportTaskFuture

	CreateLogGroup(ctx workflow.Context, input *cloudwatchlogs.CreateLogGroupInput) (*cloudwatchlogs.CreateLogGroupOutput, error)
	CreateLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.CreateLogGroupInput) *CloudWatchLogsCreateLogGroupFuture

	CreateLogStream(ctx workflow.Context, input *cloudwatchlogs.CreateLogStreamInput) (*cloudwatchlogs.CreateLogStreamOutput, error)
	CreateLogStreamAsync(ctx workflow.Context, input *cloudwatchlogs.CreateLogStreamInput) *CloudWatchLogsCreateLogStreamFuture

	DeleteDestination(ctx workflow.Context, input *cloudwatchlogs.DeleteDestinationInput) (*cloudwatchlogs.DeleteDestinationOutput, error)
	DeleteDestinationAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteDestinationInput) *CloudWatchLogsDeleteDestinationFuture

	DeleteLogGroup(ctx workflow.Context, input *cloudwatchlogs.DeleteLogGroupInput) (*cloudwatchlogs.DeleteLogGroupOutput, error)
	DeleteLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteLogGroupInput) *CloudWatchLogsDeleteLogGroupFuture

	DeleteLogStream(ctx workflow.Context, input *cloudwatchlogs.DeleteLogStreamInput) (*cloudwatchlogs.DeleteLogStreamOutput, error)
	DeleteLogStreamAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteLogStreamInput) *CloudWatchLogsDeleteLogStreamFuture

	DeleteMetricFilter(ctx workflow.Context, input *cloudwatchlogs.DeleteMetricFilterInput) (*cloudwatchlogs.DeleteMetricFilterOutput, error)
	DeleteMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteMetricFilterInput) *CloudWatchLogsDeleteMetricFilterFuture

	DeleteQueryDefinition(ctx workflow.Context, input *cloudwatchlogs.DeleteQueryDefinitionInput) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error)
	DeleteQueryDefinitionAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteQueryDefinitionInput) *CloudWatchLogsDeleteQueryDefinitionFuture

	DeleteResourcePolicy(ctx workflow.Context, input *cloudwatchlogs.DeleteResourcePolicyInput) (*cloudwatchlogs.DeleteResourcePolicyOutput, error)
	DeleteResourcePolicyAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteResourcePolicyInput) *CloudWatchLogsDeleteResourcePolicyFuture

	DeleteRetentionPolicy(ctx workflow.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error)
	DeleteRetentionPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput) *CloudWatchLogsDeleteRetentionPolicyFuture

	DeleteSubscriptionFilter(ctx workflow.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error)
	DeleteSubscriptionFilterAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput) *CloudWatchLogsDeleteSubscriptionFilterFuture

	DescribeDestinations(ctx workflow.Context, input *cloudwatchlogs.DescribeDestinationsInput) (*cloudwatchlogs.DescribeDestinationsOutput, error)
	DescribeDestinationsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeDestinationsInput) *CloudWatchLogsDescribeDestinationsFuture

	DescribeExportTasks(ctx workflow.Context, input *cloudwatchlogs.DescribeExportTasksInput) (*cloudwatchlogs.DescribeExportTasksOutput, error)
	DescribeExportTasksAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeExportTasksInput) *CloudWatchLogsDescribeExportTasksFuture

	DescribeLogGroups(ctx workflow.Context, input *cloudwatchlogs.DescribeLogGroupsInput) (*cloudwatchlogs.DescribeLogGroupsOutput, error)
	DescribeLogGroupsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeLogGroupsInput) *CloudWatchLogsDescribeLogGroupsFuture

	DescribeLogStreams(ctx workflow.Context, input *cloudwatchlogs.DescribeLogStreamsInput) (*cloudwatchlogs.DescribeLogStreamsOutput, error)
	DescribeLogStreamsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeLogStreamsInput) *CloudWatchLogsDescribeLogStreamsFuture

	DescribeMetricFilters(ctx workflow.Context, input *cloudwatchlogs.DescribeMetricFiltersInput) (*cloudwatchlogs.DescribeMetricFiltersOutput, error)
	DescribeMetricFiltersAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeMetricFiltersInput) *CloudWatchLogsDescribeMetricFiltersFuture

	DescribeQueries(ctx workflow.Context, input *cloudwatchlogs.DescribeQueriesInput) (*cloudwatchlogs.DescribeQueriesOutput, error)
	DescribeQueriesAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeQueriesInput) *CloudWatchLogsDescribeQueriesFuture

	DescribeQueryDefinitions(ctx workflow.Context, input *cloudwatchlogs.DescribeQueryDefinitionsInput) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error)
	DescribeQueryDefinitionsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeQueryDefinitionsInput) *CloudWatchLogsDescribeQueryDefinitionsFuture

	DescribeResourcePolicies(ctx workflow.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error)
	DescribeResourcePoliciesAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput) *CloudWatchLogsDescribeResourcePoliciesFuture

	DescribeSubscriptionFilters(ctx workflow.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error)
	DescribeSubscriptionFiltersAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput) *CloudWatchLogsDescribeSubscriptionFiltersFuture

	DisassociateKmsKey(ctx workflow.Context, input *cloudwatchlogs.DisassociateKmsKeyInput) (*cloudwatchlogs.DisassociateKmsKeyOutput, error)
	DisassociateKmsKeyAsync(ctx workflow.Context, input *cloudwatchlogs.DisassociateKmsKeyInput) *CloudWatchLogsDisassociateKmsKeyFuture

	FilterLogEvents(ctx workflow.Context, input *cloudwatchlogs.FilterLogEventsInput) (*cloudwatchlogs.FilterLogEventsOutput, error)
	FilterLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.FilterLogEventsInput) *CloudWatchLogsFilterLogEventsFuture

	GetLogEvents(ctx workflow.Context, input *cloudwatchlogs.GetLogEventsInput) (*cloudwatchlogs.GetLogEventsOutput, error)
	GetLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogEventsInput) *CloudWatchLogsGetLogEventsFuture

	GetLogGroupFields(ctx workflow.Context, input *cloudwatchlogs.GetLogGroupFieldsInput) (*cloudwatchlogs.GetLogGroupFieldsOutput, error)
	GetLogGroupFieldsAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogGroupFieldsInput) *CloudWatchLogsGetLogGroupFieldsFuture

	GetLogRecord(ctx workflow.Context, input *cloudwatchlogs.GetLogRecordInput) (*cloudwatchlogs.GetLogRecordOutput, error)
	GetLogRecordAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogRecordInput) *CloudWatchLogsGetLogRecordFuture

	GetQueryResults(ctx workflow.Context, input *cloudwatchlogs.GetQueryResultsInput) (*cloudwatchlogs.GetQueryResultsOutput, error)
	GetQueryResultsAsync(ctx workflow.Context, input *cloudwatchlogs.GetQueryResultsInput) *CloudWatchLogsGetQueryResultsFuture

	ListTagsLogGroup(ctx workflow.Context, input *cloudwatchlogs.ListTagsLogGroupInput) (*cloudwatchlogs.ListTagsLogGroupOutput, error)
	ListTagsLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.ListTagsLogGroupInput) *CloudWatchLogsListTagsLogGroupFuture

	PutDestination(ctx workflow.Context, input *cloudwatchlogs.PutDestinationInput) (*cloudwatchlogs.PutDestinationOutput, error)
	PutDestinationAsync(ctx workflow.Context, input *cloudwatchlogs.PutDestinationInput) *CloudWatchLogsPutDestinationFuture

	PutDestinationPolicy(ctx workflow.Context, input *cloudwatchlogs.PutDestinationPolicyInput) (*cloudwatchlogs.PutDestinationPolicyOutput, error)
	PutDestinationPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutDestinationPolicyInput) *CloudWatchLogsPutDestinationPolicyFuture

	PutLogEvents(ctx workflow.Context, input *cloudwatchlogs.PutLogEventsInput) (*cloudwatchlogs.PutLogEventsOutput, error)
	PutLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.PutLogEventsInput) *CloudWatchLogsPutLogEventsFuture

	PutMetricFilter(ctx workflow.Context, input *cloudwatchlogs.PutMetricFilterInput) (*cloudwatchlogs.PutMetricFilterOutput, error)
	PutMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.PutMetricFilterInput) *CloudWatchLogsPutMetricFilterFuture

	PutQueryDefinition(ctx workflow.Context, input *cloudwatchlogs.PutQueryDefinitionInput) (*cloudwatchlogs.PutQueryDefinitionOutput, error)
	PutQueryDefinitionAsync(ctx workflow.Context, input *cloudwatchlogs.PutQueryDefinitionInput) *CloudWatchLogsPutQueryDefinitionFuture

	PutResourcePolicy(ctx workflow.Context, input *cloudwatchlogs.PutResourcePolicyInput) (*cloudwatchlogs.PutResourcePolicyOutput, error)
	PutResourcePolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutResourcePolicyInput) *CloudWatchLogsPutResourcePolicyFuture

	PutRetentionPolicy(ctx workflow.Context, input *cloudwatchlogs.PutRetentionPolicyInput) (*cloudwatchlogs.PutRetentionPolicyOutput, error)
	PutRetentionPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutRetentionPolicyInput) *CloudWatchLogsPutRetentionPolicyFuture

	PutSubscriptionFilter(ctx workflow.Context, input *cloudwatchlogs.PutSubscriptionFilterInput) (*cloudwatchlogs.PutSubscriptionFilterOutput, error)
	PutSubscriptionFilterAsync(ctx workflow.Context, input *cloudwatchlogs.PutSubscriptionFilterInput) *CloudWatchLogsPutSubscriptionFilterFuture

	StartQuery(ctx workflow.Context, input *cloudwatchlogs.StartQueryInput) (*cloudwatchlogs.StartQueryOutput, error)
	StartQueryAsync(ctx workflow.Context, input *cloudwatchlogs.StartQueryInput) *CloudWatchLogsStartQueryFuture

	StopQuery(ctx workflow.Context, input *cloudwatchlogs.StopQueryInput) (*cloudwatchlogs.StopQueryOutput, error)
	StopQueryAsync(ctx workflow.Context, input *cloudwatchlogs.StopQueryInput) *CloudWatchLogsStopQueryFuture

	TagLogGroup(ctx workflow.Context, input *cloudwatchlogs.TagLogGroupInput) (*cloudwatchlogs.TagLogGroupOutput, error)
	TagLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.TagLogGroupInput) *CloudWatchLogsTagLogGroupFuture

	TestMetricFilter(ctx workflow.Context, input *cloudwatchlogs.TestMetricFilterInput) (*cloudwatchlogs.TestMetricFilterOutput, error)
	TestMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.TestMetricFilterInput) *CloudWatchLogsTestMetricFilterFuture

	UntagLogGroup(ctx workflow.Context, input *cloudwatchlogs.UntagLogGroupInput) (*cloudwatchlogs.UntagLogGroupOutput, error)
	UntagLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.UntagLogGroupInput) *CloudWatchLogsUntagLogGroupFuture
}

type CloudWatchLogsStub struct{}

func NewCloudWatchLogsStub() CloudWatchLogsClient {
	return &CloudWatchLogsStub{}
}

type CloudWatchLogsAssociateKmsKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsAssociateKmsKeyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	var output cloudwatchlogs.AssociateKmsKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsCancelExportTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsCancelExportTaskFuture) Get(ctx workflow.Context) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	var output cloudwatchlogs.CancelExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsCreateExportTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsCreateExportTaskFuture) Get(ctx workflow.Context) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	var output cloudwatchlogs.CreateExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsCreateLogGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsCreateLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	var output cloudwatchlogs.CreateLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsCreateLogStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsCreateLogStreamFuture) Get(ctx workflow.Context) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	var output cloudwatchlogs.CreateLogStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDeleteDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDeleteDestinationFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	var output cloudwatchlogs.DeleteDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDeleteLogGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDeleteLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	var output cloudwatchlogs.DeleteLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDeleteLogStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDeleteLogStreamFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	var output cloudwatchlogs.DeleteLogStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDeleteMetricFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDeleteMetricFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	var output cloudwatchlogs.DeleteMetricFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDeleteQueryDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDeleteQueryDefinitionFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error) {
	var output cloudwatchlogs.DeleteQueryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDeleteResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDeleteResourcePolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	var output cloudwatchlogs.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDeleteRetentionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDeleteRetentionPolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	var output cloudwatchlogs.DeleteRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDeleteSubscriptionFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDeleteSubscriptionFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	var output cloudwatchlogs.DeleteSubscriptionFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDescribeDestinationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDescribeDestinationsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	var output cloudwatchlogs.DescribeDestinationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDescribeExportTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDescribeExportTasksFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	var output cloudwatchlogs.DescribeExportTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDescribeLogGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDescribeLogGroupsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	var output cloudwatchlogs.DescribeLogGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDescribeLogStreamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDescribeLogStreamsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	var output cloudwatchlogs.DescribeLogStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDescribeMetricFiltersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDescribeMetricFiltersFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	var output cloudwatchlogs.DescribeMetricFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDescribeQueriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDescribeQueriesFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeQueriesOutput, error) {
	var output cloudwatchlogs.DescribeQueriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDescribeQueryDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDescribeQueryDefinitionsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error) {
	var output cloudwatchlogs.DescribeQueryDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDescribeResourcePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDescribeResourcePoliciesFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	var output cloudwatchlogs.DescribeResourcePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDescribeSubscriptionFiltersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDescribeSubscriptionFiltersFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	var output cloudwatchlogs.DescribeSubscriptionFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsDisassociateKmsKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsDisassociateKmsKeyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	var output cloudwatchlogs.DisassociateKmsKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsFilterLogEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsFilterLogEventsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	var output cloudwatchlogs.FilterLogEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsGetLogEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsGetLogEventsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.GetLogEventsOutput, error) {
	var output cloudwatchlogs.GetLogEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsGetLogGroupFieldsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsGetLogGroupFieldsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.GetLogGroupFieldsOutput, error) {
	var output cloudwatchlogs.GetLogGroupFieldsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsGetLogRecordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsGetLogRecordFuture) Get(ctx workflow.Context) (*cloudwatchlogs.GetLogRecordOutput, error) {
	var output cloudwatchlogs.GetLogRecordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsGetQueryResultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsGetQueryResultsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.GetQueryResultsOutput, error) {
	var output cloudwatchlogs.GetQueryResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsListTagsLogGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsListTagsLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	var output cloudwatchlogs.ListTagsLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsPutDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsPutDestinationFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutDestinationOutput, error) {
	var output cloudwatchlogs.PutDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsPutDestinationPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsPutDestinationPolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	var output cloudwatchlogs.PutDestinationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsPutLogEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsPutLogEventsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutLogEventsOutput, error) {
	var output cloudwatchlogs.PutLogEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsPutMetricFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsPutMetricFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	var output cloudwatchlogs.PutMetricFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsPutQueryDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsPutQueryDefinitionFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutQueryDefinitionOutput, error) {
	var output cloudwatchlogs.PutQueryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsPutResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsPutResourcePolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	var output cloudwatchlogs.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsPutRetentionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsPutRetentionPolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	var output cloudwatchlogs.PutRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsPutSubscriptionFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsPutSubscriptionFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	var output cloudwatchlogs.PutSubscriptionFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsStartQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsStartQueryFuture) Get(ctx workflow.Context) (*cloudwatchlogs.StartQueryOutput, error) {
	var output cloudwatchlogs.StartQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsStopQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsStopQueryFuture) Get(ctx workflow.Context) (*cloudwatchlogs.StopQueryOutput, error) {
	var output cloudwatchlogs.StopQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsTagLogGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsTagLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.TagLogGroupOutput, error) {
	var output cloudwatchlogs.TagLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsTestMetricFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsTestMetricFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	var output cloudwatchlogs.TestMetricFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchLogsUntagLogGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchLogsUntagLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	var output cloudwatchlogs.UntagLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) AssociateKmsKey(ctx workflow.Context, input *cloudwatchlogs.AssociateKmsKeyInput) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	var output cloudwatchlogs.AssociateKmsKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.AssociateKmsKey", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) AssociateKmsKeyAsync(ctx workflow.Context, input *cloudwatchlogs.AssociateKmsKeyInput) *CloudWatchLogsAssociateKmsKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.AssociateKmsKey", input)
	return &CloudWatchLogsAssociateKmsKeyFuture{Future: future}
}

func (a *CloudWatchLogsStub) CancelExportTask(ctx workflow.Context, input *cloudwatchlogs.CancelExportTaskInput) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	var output cloudwatchlogs.CancelExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CancelExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) CancelExportTaskAsync(ctx workflow.Context, input *cloudwatchlogs.CancelExportTaskInput) *CloudWatchLogsCancelExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CancelExportTask", input)
	return &CloudWatchLogsCancelExportTaskFuture{Future: future}
}

func (a *CloudWatchLogsStub) CreateExportTask(ctx workflow.Context, input *cloudwatchlogs.CreateExportTaskInput) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	var output cloudwatchlogs.CreateExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CreateExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) CreateExportTaskAsync(ctx workflow.Context, input *cloudwatchlogs.CreateExportTaskInput) *CloudWatchLogsCreateExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CreateExportTask", input)
	return &CloudWatchLogsCreateExportTaskFuture{Future: future}
}

func (a *CloudWatchLogsStub) CreateLogGroup(ctx workflow.Context, input *cloudwatchlogs.CreateLogGroupInput) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	var output cloudwatchlogs.CreateLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CreateLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) CreateLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.CreateLogGroupInput) *CloudWatchLogsCreateLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CreateLogGroup", input)
	return &CloudWatchLogsCreateLogGroupFuture{Future: future}
}

func (a *CloudWatchLogsStub) CreateLogStream(ctx workflow.Context, input *cloudwatchlogs.CreateLogStreamInput) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	var output cloudwatchlogs.CreateLogStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CreateLogStream", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) CreateLogStreamAsync(ctx workflow.Context, input *cloudwatchlogs.CreateLogStreamInput) *CloudWatchLogsCreateLogStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CreateLogStream", input)
	return &CloudWatchLogsCreateLogStreamFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteDestination(ctx workflow.Context, input *cloudwatchlogs.DeleteDestinationInput) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	var output cloudwatchlogs.DeleteDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteDestinationAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteDestinationInput) *CloudWatchLogsDeleteDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteDestination", input)
	return &CloudWatchLogsDeleteDestinationFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteLogGroup(ctx workflow.Context, input *cloudwatchlogs.DeleteLogGroupInput) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	var output cloudwatchlogs.DeleteLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteLogGroupInput) *CloudWatchLogsDeleteLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteLogGroup", input)
	return &CloudWatchLogsDeleteLogGroupFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteLogStream(ctx workflow.Context, input *cloudwatchlogs.DeleteLogStreamInput) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	var output cloudwatchlogs.DeleteLogStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteLogStream", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteLogStreamAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteLogStreamInput) *CloudWatchLogsDeleteLogStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteLogStream", input)
	return &CloudWatchLogsDeleteLogStreamFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteMetricFilter(ctx workflow.Context, input *cloudwatchlogs.DeleteMetricFilterInput) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	var output cloudwatchlogs.DeleteMetricFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteMetricFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteMetricFilterInput) *CloudWatchLogsDeleteMetricFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteMetricFilter", input)
	return &CloudWatchLogsDeleteMetricFilterFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteQueryDefinition(ctx workflow.Context, input *cloudwatchlogs.DeleteQueryDefinitionInput) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error) {
	var output cloudwatchlogs.DeleteQueryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteQueryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteQueryDefinitionAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteQueryDefinitionInput) *CloudWatchLogsDeleteQueryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteQueryDefinition", input)
	return &CloudWatchLogsDeleteQueryDefinitionFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteResourcePolicy(ctx workflow.Context, input *cloudwatchlogs.DeleteResourcePolicyInput) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	var output cloudwatchlogs.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteResourcePolicyAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteResourcePolicyInput) *CloudWatchLogsDeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteResourcePolicy", input)
	return &CloudWatchLogsDeleteResourcePolicyFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteRetentionPolicy(ctx workflow.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	var output cloudwatchlogs.DeleteRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteRetentionPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput) *CloudWatchLogsDeleteRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteRetentionPolicy", input)
	return &CloudWatchLogsDeleteRetentionPolicyFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteSubscriptionFilter(ctx workflow.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	var output cloudwatchlogs.DeleteSubscriptionFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteSubscriptionFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteSubscriptionFilterAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput) *CloudWatchLogsDeleteSubscriptionFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteSubscriptionFilter", input)
	return &CloudWatchLogsDeleteSubscriptionFilterFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeDestinations(ctx workflow.Context, input *cloudwatchlogs.DescribeDestinationsInput) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	var output cloudwatchlogs.DescribeDestinationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeDestinations", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeDestinationsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeDestinationsInput) *CloudWatchLogsDescribeDestinationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeDestinations", input)
	return &CloudWatchLogsDescribeDestinationsFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeExportTasks(ctx workflow.Context, input *cloudwatchlogs.DescribeExportTasksInput) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	var output cloudwatchlogs.DescribeExportTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeExportTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeExportTasksAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeExportTasksInput) *CloudWatchLogsDescribeExportTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeExportTasks", input)
	return &CloudWatchLogsDescribeExportTasksFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeLogGroups(ctx workflow.Context, input *cloudwatchlogs.DescribeLogGroupsInput) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	var output cloudwatchlogs.DescribeLogGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeLogGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeLogGroupsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeLogGroupsInput) *CloudWatchLogsDescribeLogGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeLogGroups", input)
	return &CloudWatchLogsDescribeLogGroupsFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeLogStreams(ctx workflow.Context, input *cloudwatchlogs.DescribeLogStreamsInput) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	var output cloudwatchlogs.DescribeLogStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeLogStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeLogStreamsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeLogStreamsInput) *CloudWatchLogsDescribeLogStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeLogStreams", input)
	return &CloudWatchLogsDescribeLogStreamsFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeMetricFilters(ctx workflow.Context, input *cloudwatchlogs.DescribeMetricFiltersInput) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	var output cloudwatchlogs.DescribeMetricFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeMetricFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeMetricFiltersAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeMetricFiltersInput) *CloudWatchLogsDescribeMetricFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeMetricFilters", input)
	return &CloudWatchLogsDescribeMetricFiltersFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeQueries(ctx workflow.Context, input *cloudwatchlogs.DescribeQueriesInput) (*cloudwatchlogs.DescribeQueriesOutput, error) {
	var output cloudwatchlogs.DescribeQueriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeQueries", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeQueriesAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeQueriesInput) *CloudWatchLogsDescribeQueriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeQueries", input)
	return &CloudWatchLogsDescribeQueriesFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeQueryDefinitions(ctx workflow.Context, input *cloudwatchlogs.DescribeQueryDefinitionsInput) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error) {
	var output cloudwatchlogs.DescribeQueryDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeQueryDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeQueryDefinitionsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeQueryDefinitionsInput) *CloudWatchLogsDescribeQueryDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeQueryDefinitions", input)
	return &CloudWatchLogsDescribeQueryDefinitionsFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeResourcePolicies(ctx workflow.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	var output cloudwatchlogs.DescribeResourcePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeResourcePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeResourcePoliciesAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput) *CloudWatchLogsDescribeResourcePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeResourcePolicies", input)
	return &CloudWatchLogsDescribeResourcePoliciesFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeSubscriptionFilters(ctx workflow.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	var output cloudwatchlogs.DescribeSubscriptionFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeSubscriptionFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeSubscriptionFiltersAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput) *CloudWatchLogsDescribeSubscriptionFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeSubscriptionFilters", input)
	return &CloudWatchLogsDescribeSubscriptionFiltersFuture{Future: future}
}

func (a *CloudWatchLogsStub) DisassociateKmsKey(ctx workflow.Context, input *cloudwatchlogs.DisassociateKmsKeyInput) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	var output cloudwatchlogs.DisassociateKmsKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DisassociateKmsKey", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DisassociateKmsKeyAsync(ctx workflow.Context, input *cloudwatchlogs.DisassociateKmsKeyInput) *CloudWatchLogsDisassociateKmsKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DisassociateKmsKey", input)
	return &CloudWatchLogsDisassociateKmsKeyFuture{Future: future}
}

func (a *CloudWatchLogsStub) FilterLogEvents(ctx workflow.Context, input *cloudwatchlogs.FilterLogEventsInput) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	var output cloudwatchlogs.FilterLogEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.FilterLogEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) FilterLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.FilterLogEventsInput) *CloudWatchLogsFilterLogEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.FilterLogEvents", input)
	return &CloudWatchLogsFilterLogEventsFuture{Future: future}
}

func (a *CloudWatchLogsStub) GetLogEvents(ctx workflow.Context, input *cloudwatchlogs.GetLogEventsInput) (*cloudwatchlogs.GetLogEventsOutput, error) {
	var output cloudwatchlogs.GetLogEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetLogEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) GetLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogEventsInput) *CloudWatchLogsGetLogEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetLogEvents", input)
	return &CloudWatchLogsGetLogEventsFuture{Future: future}
}

func (a *CloudWatchLogsStub) GetLogGroupFields(ctx workflow.Context, input *cloudwatchlogs.GetLogGroupFieldsInput) (*cloudwatchlogs.GetLogGroupFieldsOutput, error) {
	var output cloudwatchlogs.GetLogGroupFieldsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetLogGroupFields", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) GetLogGroupFieldsAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogGroupFieldsInput) *CloudWatchLogsGetLogGroupFieldsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetLogGroupFields", input)
	return &CloudWatchLogsGetLogGroupFieldsFuture{Future: future}
}

func (a *CloudWatchLogsStub) GetLogRecord(ctx workflow.Context, input *cloudwatchlogs.GetLogRecordInput) (*cloudwatchlogs.GetLogRecordOutput, error) {
	var output cloudwatchlogs.GetLogRecordOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetLogRecord", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) GetLogRecordAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogRecordInput) *CloudWatchLogsGetLogRecordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetLogRecord", input)
	return &CloudWatchLogsGetLogRecordFuture{Future: future}
}

func (a *CloudWatchLogsStub) GetQueryResults(ctx workflow.Context, input *cloudwatchlogs.GetQueryResultsInput) (*cloudwatchlogs.GetQueryResultsOutput, error) {
	var output cloudwatchlogs.GetQueryResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetQueryResults", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) GetQueryResultsAsync(ctx workflow.Context, input *cloudwatchlogs.GetQueryResultsInput) *CloudWatchLogsGetQueryResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetQueryResults", input)
	return &CloudWatchLogsGetQueryResultsFuture{Future: future}
}

func (a *CloudWatchLogsStub) ListTagsLogGroup(ctx workflow.Context, input *cloudwatchlogs.ListTagsLogGroupInput) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	var output cloudwatchlogs.ListTagsLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.ListTagsLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) ListTagsLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.ListTagsLogGroupInput) *CloudWatchLogsListTagsLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.ListTagsLogGroup", input)
	return &CloudWatchLogsListTagsLogGroupFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutDestination(ctx workflow.Context, input *cloudwatchlogs.PutDestinationInput) (*cloudwatchlogs.PutDestinationOutput, error) {
	var output cloudwatchlogs.PutDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutDestinationAsync(ctx workflow.Context, input *cloudwatchlogs.PutDestinationInput) *CloudWatchLogsPutDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutDestination", input)
	return &CloudWatchLogsPutDestinationFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutDestinationPolicy(ctx workflow.Context, input *cloudwatchlogs.PutDestinationPolicyInput) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	var output cloudwatchlogs.PutDestinationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutDestinationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutDestinationPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutDestinationPolicyInput) *CloudWatchLogsPutDestinationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutDestinationPolicy", input)
	return &CloudWatchLogsPutDestinationPolicyFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutLogEvents(ctx workflow.Context, input *cloudwatchlogs.PutLogEventsInput) (*cloudwatchlogs.PutLogEventsOutput, error) {
	var output cloudwatchlogs.PutLogEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutLogEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.PutLogEventsInput) *CloudWatchLogsPutLogEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutLogEvents", input)
	return &CloudWatchLogsPutLogEventsFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutMetricFilter(ctx workflow.Context, input *cloudwatchlogs.PutMetricFilterInput) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	var output cloudwatchlogs.PutMetricFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutMetricFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.PutMetricFilterInput) *CloudWatchLogsPutMetricFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutMetricFilter", input)
	return &CloudWatchLogsPutMetricFilterFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutQueryDefinition(ctx workflow.Context, input *cloudwatchlogs.PutQueryDefinitionInput) (*cloudwatchlogs.PutQueryDefinitionOutput, error) {
	var output cloudwatchlogs.PutQueryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutQueryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutQueryDefinitionAsync(ctx workflow.Context, input *cloudwatchlogs.PutQueryDefinitionInput) *CloudWatchLogsPutQueryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutQueryDefinition", input)
	return &CloudWatchLogsPutQueryDefinitionFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutResourcePolicy(ctx workflow.Context, input *cloudwatchlogs.PutResourcePolicyInput) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	var output cloudwatchlogs.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutResourcePolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutResourcePolicyInput) *CloudWatchLogsPutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutResourcePolicy", input)
	return &CloudWatchLogsPutResourcePolicyFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutRetentionPolicy(ctx workflow.Context, input *cloudwatchlogs.PutRetentionPolicyInput) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	var output cloudwatchlogs.PutRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutRetentionPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutRetentionPolicyInput) *CloudWatchLogsPutRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutRetentionPolicy", input)
	return &CloudWatchLogsPutRetentionPolicyFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutSubscriptionFilter(ctx workflow.Context, input *cloudwatchlogs.PutSubscriptionFilterInput) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	var output cloudwatchlogs.PutSubscriptionFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutSubscriptionFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutSubscriptionFilterAsync(ctx workflow.Context, input *cloudwatchlogs.PutSubscriptionFilterInput) *CloudWatchLogsPutSubscriptionFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutSubscriptionFilter", input)
	return &CloudWatchLogsPutSubscriptionFilterFuture{Future: future}
}

func (a *CloudWatchLogsStub) StartQuery(ctx workflow.Context, input *cloudwatchlogs.StartQueryInput) (*cloudwatchlogs.StartQueryOutput, error) {
	var output cloudwatchlogs.StartQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.StartQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) StartQueryAsync(ctx workflow.Context, input *cloudwatchlogs.StartQueryInput) *CloudWatchLogsStartQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.StartQuery", input)
	return &CloudWatchLogsStartQueryFuture{Future: future}
}

func (a *CloudWatchLogsStub) StopQuery(ctx workflow.Context, input *cloudwatchlogs.StopQueryInput) (*cloudwatchlogs.StopQueryOutput, error) {
	var output cloudwatchlogs.StopQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.StopQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) StopQueryAsync(ctx workflow.Context, input *cloudwatchlogs.StopQueryInput) *CloudWatchLogsStopQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.StopQuery", input)
	return &CloudWatchLogsStopQueryFuture{Future: future}
}

func (a *CloudWatchLogsStub) TagLogGroup(ctx workflow.Context, input *cloudwatchlogs.TagLogGroupInput) (*cloudwatchlogs.TagLogGroupOutput, error) {
	var output cloudwatchlogs.TagLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.TagLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) TagLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.TagLogGroupInput) *CloudWatchLogsTagLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.TagLogGroup", input)
	return &CloudWatchLogsTagLogGroupFuture{Future: future}
}

func (a *CloudWatchLogsStub) TestMetricFilter(ctx workflow.Context, input *cloudwatchlogs.TestMetricFilterInput) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	var output cloudwatchlogs.TestMetricFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.TestMetricFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) TestMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.TestMetricFilterInput) *CloudWatchLogsTestMetricFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.TestMetricFilter", input)
	return &CloudWatchLogsTestMetricFilterFuture{Future: future}
}

func (a *CloudWatchLogsStub) UntagLogGroup(ctx workflow.Context, input *cloudwatchlogs.UntagLogGroupInput) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	var output cloudwatchlogs.UntagLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.UntagLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) UntagLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.UntagLogGroupInput) *CloudWatchLogsUntagLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.UntagLogGroup", input)
	return &CloudWatchLogsUntagLogGroupFuture{Future: future}
}
