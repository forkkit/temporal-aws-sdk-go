// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cloudwatchlogs"
	"go.temporal.io/sdk/workflow"
)

type CloudWatchLogsClient interface {
	AssociateKmsKey(ctx workflow.Context, input *cloudwatchlogs.AssociateKmsKeyInput) (*cloudwatchlogs.AssociateKmsKeyOutput, error)
	AssociateKmsKeyAsync(ctx workflow.Context, input *cloudwatchlogs.AssociateKmsKeyInput) *CloudwatchlogsAssociateKmsKeyFuture

	CancelExportTask(ctx workflow.Context, input *cloudwatchlogs.CancelExportTaskInput) (*cloudwatchlogs.CancelExportTaskOutput, error)
	CancelExportTaskAsync(ctx workflow.Context, input *cloudwatchlogs.CancelExportTaskInput) *CloudwatchlogsCancelExportTaskFuture

	CreateExportTask(ctx workflow.Context, input *cloudwatchlogs.CreateExportTaskInput) (*cloudwatchlogs.CreateExportTaskOutput, error)
	CreateExportTaskAsync(ctx workflow.Context, input *cloudwatchlogs.CreateExportTaskInput) *CloudwatchlogsCreateExportTaskFuture

	CreateLogGroup(ctx workflow.Context, input *cloudwatchlogs.CreateLogGroupInput) (*cloudwatchlogs.CreateLogGroupOutput, error)
	CreateLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.CreateLogGroupInput) *CloudwatchlogsCreateLogGroupFuture

	CreateLogStream(ctx workflow.Context, input *cloudwatchlogs.CreateLogStreamInput) (*cloudwatchlogs.CreateLogStreamOutput, error)
	CreateLogStreamAsync(ctx workflow.Context, input *cloudwatchlogs.CreateLogStreamInput) *CloudwatchlogsCreateLogStreamFuture

	DeleteDestination(ctx workflow.Context, input *cloudwatchlogs.DeleteDestinationInput) (*cloudwatchlogs.DeleteDestinationOutput, error)
	DeleteDestinationAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteDestinationInput) *CloudwatchlogsDeleteDestinationFuture

	DeleteLogGroup(ctx workflow.Context, input *cloudwatchlogs.DeleteLogGroupInput) (*cloudwatchlogs.DeleteLogGroupOutput, error)
	DeleteLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteLogGroupInput) *CloudwatchlogsDeleteLogGroupFuture

	DeleteLogStream(ctx workflow.Context, input *cloudwatchlogs.DeleteLogStreamInput) (*cloudwatchlogs.DeleteLogStreamOutput, error)
	DeleteLogStreamAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteLogStreamInput) *CloudwatchlogsDeleteLogStreamFuture

	DeleteMetricFilter(ctx workflow.Context, input *cloudwatchlogs.DeleteMetricFilterInput) (*cloudwatchlogs.DeleteMetricFilterOutput, error)
	DeleteMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteMetricFilterInput) *CloudwatchlogsDeleteMetricFilterFuture

	DeleteQueryDefinition(ctx workflow.Context, input *cloudwatchlogs.DeleteQueryDefinitionInput) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error)
	DeleteQueryDefinitionAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteQueryDefinitionInput) *CloudwatchlogsDeleteQueryDefinitionFuture

	DeleteResourcePolicy(ctx workflow.Context, input *cloudwatchlogs.DeleteResourcePolicyInput) (*cloudwatchlogs.DeleteResourcePolicyOutput, error)
	DeleteResourcePolicyAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteResourcePolicyInput) *CloudwatchlogsDeleteResourcePolicyFuture

	DeleteRetentionPolicy(ctx workflow.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error)
	DeleteRetentionPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput) *CloudwatchlogsDeleteRetentionPolicyFuture

	DeleteSubscriptionFilter(ctx workflow.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error)
	DeleteSubscriptionFilterAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput) *CloudwatchlogsDeleteSubscriptionFilterFuture

	DescribeDestinations(ctx workflow.Context, input *cloudwatchlogs.DescribeDestinationsInput) (*cloudwatchlogs.DescribeDestinationsOutput, error)
	DescribeDestinationsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeDestinationsInput) *CloudwatchlogsDescribeDestinationsFuture

	DescribeExportTasks(ctx workflow.Context, input *cloudwatchlogs.DescribeExportTasksInput) (*cloudwatchlogs.DescribeExportTasksOutput, error)
	DescribeExportTasksAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeExportTasksInput) *CloudwatchlogsDescribeExportTasksFuture

	DescribeLogGroups(ctx workflow.Context, input *cloudwatchlogs.DescribeLogGroupsInput) (*cloudwatchlogs.DescribeLogGroupsOutput, error)
	DescribeLogGroupsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeLogGroupsInput) *CloudwatchlogsDescribeLogGroupsFuture

	DescribeLogStreams(ctx workflow.Context, input *cloudwatchlogs.DescribeLogStreamsInput) (*cloudwatchlogs.DescribeLogStreamsOutput, error)
	DescribeLogStreamsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeLogStreamsInput) *CloudwatchlogsDescribeLogStreamsFuture

	DescribeMetricFilters(ctx workflow.Context, input *cloudwatchlogs.DescribeMetricFiltersInput) (*cloudwatchlogs.DescribeMetricFiltersOutput, error)
	DescribeMetricFiltersAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeMetricFiltersInput) *CloudwatchlogsDescribeMetricFiltersFuture

	DescribeQueries(ctx workflow.Context, input *cloudwatchlogs.DescribeQueriesInput) (*cloudwatchlogs.DescribeQueriesOutput, error)
	DescribeQueriesAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeQueriesInput) *CloudwatchlogsDescribeQueriesFuture

	DescribeQueryDefinitions(ctx workflow.Context, input *cloudwatchlogs.DescribeQueryDefinitionsInput) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error)
	DescribeQueryDefinitionsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeQueryDefinitionsInput) *CloudwatchlogsDescribeQueryDefinitionsFuture

	DescribeResourcePolicies(ctx workflow.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error)
	DescribeResourcePoliciesAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput) *CloudwatchlogsDescribeResourcePoliciesFuture

	DescribeSubscriptionFilters(ctx workflow.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error)
	DescribeSubscriptionFiltersAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput) *CloudwatchlogsDescribeSubscriptionFiltersFuture

	DisassociateKmsKey(ctx workflow.Context, input *cloudwatchlogs.DisassociateKmsKeyInput) (*cloudwatchlogs.DisassociateKmsKeyOutput, error)
	DisassociateKmsKeyAsync(ctx workflow.Context, input *cloudwatchlogs.DisassociateKmsKeyInput) *CloudwatchlogsDisassociateKmsKeyFuture

	FilterLogEvents(ctx workflow.Context, input *cloudwatchlogs.FilterLogEventsInput) (*cloudwatchlogs.FilterLogEventsOutput, error)
	FilterLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.FilterLogEventsInput) *CloudwatchlogsFilterLogEventsFuture

	GetLogEvents(ctx workflow.Context, input *cloudwatchlogs.GetLogEventsInput) (*cloudwatchlogs.GetLogEventsOutput, error)
	GetLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogEventsInput) *CloudwatchlogsGetLogEventsFuture

	GetLogGroupFields(ctx workflow.Context, input *cloudwatchlogs.GetLogGroupFieldsInput) (*cloudwatchlogs.GetLogGroupFieldsOutput, error)
	GetLogGroupFieldsAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogGroupFieldsInput) *CloudwatchlogsGetLogGroupFieldsFuture

	GetLogRecord(ctx workflow.Context, input *cloudwatchlogs.GetLogRecordInput) (*cloudwatchlogs.GetLogRecordOutput, error)
	GetLogRecordAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogRecordInput) *CloudwatchlogsGetLogRecordFuture

	GetQueryResults(ctx workflow.Context, input *cloudwatchlogs.GetQueryResultsInput) (*cloudwatchlogs.GetQueryResultsOutput, error)
	GetQueryResultsAsync(ctx workflow.Context, input *cloudwatchlogs.GetQueryResultsInput) *CloudwatchlogsGetQueryResultsFuture

	ListTagsLogGroup(ctx workflow.Context, input *cloudwatchlogs.ListTagsLogGroupInput) (*cloudwatchlogs.ListTagsLogGroupOutput, error)
	ListTagsLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.ListTagsLogGroupInput) *CloudwatchlogsListTagsLogGroupFuture

	PutDestination(ctx workflow.Context, input *cloudwatchlogs.PutDestinationInput) (*cloudwatchlogs.PutDestinationOutput, error)
	PutDestinationAsync(ctx workflow.Context, input *cloudwatchlogs.PutDestinationInput) *CloudwatchlogsPutDestinationFuture

	PutDestinationPolicy(ctx workflow.Context, input *cloudwatchlogs.PutDestinationPolicyInput) (*cloudwatchlogs.PutDestinationPolicyOutput, error)
	PutDestinationPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutDestinationPolicyInput) *CloudwatchlogsPutDestinationPolicyFuture

	PutLogEvents(ctx workflow.Context, input *cloudwatchlogs.PutLogEventsInput) (*cloudwatchlogs.PutLogEventsOutput, error)
	PutLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.PutLogEventsInput) *CloudwatchlogsPutLogEventsFuture

	PutMetricFilter(ctx workflow.Context, input *cloudwatchlogs.PutMetricFilterInput) (*cloudwatchlogs.PutMetricFilterOutput, error)
	PutMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.PutMetricFilterInput) *CloudwatchlogsPutMetricFilterFuture

	PutQueryDefinition(ctx workflow.Context, input *cloudwatchlogs.PutQueryDefinitionInput) (*cloudwatchlogs.PutQueryDefinitionOutput, error)
	PutQueryDefinitionAsync(ctx workflow.Context, input *cloudwatchlogs.PutQueryDefinitionInput) *CloudwatchlogsPutQueryDefinitionFuture

	PutResourcePolicy(ctx workflow.Context, input *cloudwatchlogs.PutResourcePolicyInput) (*cloudwatchlogs.PutResourcePolicyOutput, error)
	PutResourcePolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutResourcePolicyInput) *CloudwatchlogsPutResourcePolicyFuture

	PutRetentionPolicy(ctx workflow.Context, input *cloudwatchlogs.PutRetentionPolicyInput) (*cloudwatchlogs.PutRetentionPolicyOutput, error)
	PutRetentionPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutRetentionPolicyInput) *CloudwatchlogsPutRetentionPolicyFuture

	PutSubscriptionFilter(ctx workflow.Context, input *cloudwatchlogs.PutSubscriptionFilterInput) (*cloudwatchlogs.PutSubscriptionFilterOutput, error)
	PutSubscriptionFilterAsync(ctx workflow.Context, input *cloudwatchlogs.PutSubscriptionFilterInput) *CloudwatchlogsPutSubscriptionFilterFuture

	StartQuery(ctx workflow.Context, input *cloudwatchlogs.StartQueryInput) (*cloudwatchlogs.StartQueryOutput, error)
	StartQueryAsync(ctx workflow.Context, input *cloudwatchlogs.StartQueryInput) *CloudwatchlogsStartQueryFuture

	StopQuery(ctx workflow.Context, input *cloudwatchlogs.StopQueryInput) (*cloudwatchlogs.StopQueryOutput, error)
	StopQueryAsync(ctx workflow.Context, input *cloudwatchlogs.StopQueryInput) *CloudwatchlogsStopQueryFuture

	TagLogGroup(ctx workflow.Context, input *cloudwatchlogs.TagLogGroupInput) (*cloudwatchlogs.TagLogGroupOutput, error)
	TagLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.TagLogGroupInput) *CloudwatchlogsTagLogGroupFuture

	TestMetricFilter(ctx workflow.Context, input *cloudwatchlogs.TestMetricFilterInput) (*cloudwatchlogs.TestMetricFilterOutput, error)
	TestMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.TestMetricFilterInput) *CloudwatchlogsTestMetricFilterFuture

	UntagLogGroup(ctx workflow.Context, input *cloudwatchlogs.UntagLogGroupInput) (*cloudwatchlogs.UntagLogGroupOutput, error)
	UntagLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.UntagLogGroupInput) *CloudwatchlogsUntagLogGroupFuture
}

type CloudWatchLogsStub struct{}

func NewCloudWatchLogsStub() CloudWatchLogsClient {
	return &CloudWatchLogsStub{}
}

type CloudwatchlogsAssociateKmsKeyFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsAssociateKmsKeyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	var output cloudwatchlogs.AssociateKmsKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsCancelExportTaskFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsCancelExportTaskFuture) Get(ctx workflow.Context) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	var output cloudwatchlogs.CancelExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsCreateExportTaskFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsCreateExportTaskFuture) Get(ctx workflow.Context) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	var output cloudwatchlogs.CreateExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsCreateLogGroupFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsCreateLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	var output cloudwatchlogs.CreateLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsCreateLogStreamFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsCreateLogStreamFuture) Get(ctx workflow.Context) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	var output cloudwatchlogs.CreateLogStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDeleteDestinationFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDeleteDestinationFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	var output cloudwatchlogs.DeleteDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDeleteLogGroupFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDeleteLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	var output cloudwatchlogs.DeleteLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDeleteLogStreamFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDeleteLogStreamFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	var output cloudwatchlogs.DeleteLogStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDeleteMetricFilterFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDeleteMetricFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	var output cloudwatchlogs.DeleteMetricFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDeleteQueryDefinitionFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDeleteQueryDefinitionFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error) {
	var output cloudwatchlogs.DeleteQueryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDeleteResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDeleteResourcePolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	var output cloudwatchlogs.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDeleteRetentionPolicyFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDeleteRetentionPolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	var output cloudwatchlogs.DeleteRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDeleteSubscriptionFilterFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDeleteSubscriptionFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	var output cloudwatchlogs.DeleteSubscriptionFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDescribeDestinationsFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDescribeDestinationsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	var output cloudwatchlogs.DescribeDestinationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDescribeExportTasksFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDescribeExportTasksFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	var output cloudwatchlogs.DescribeExportTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDescribeLogGroupsFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDescribeLogGroupsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	var output cloudwatchlogs.DescribeLogGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDescribeLogStreamsFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDescribeLogStreamsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	var output cloudwatchlogs.DescribeLogStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDescribeMetricFiltersFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDescribeMetricFiltersFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	var output cloudwatchlogs.DescribeMetricFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDescribeQueriesFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDescribeQueriesFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeQueriesOutput, error) {
	var output cloudwatchlogs.DescribeQueriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDescribeQueryDefinitionsFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDescribeQueryDefinitionsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error) {
	var output cloudwatchlogs.DescribeQueryDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDescribeResourcePoliciesFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDescribeResourcePoliciesFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	var output cloudwatchlogs.DescribeResourcePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDescribeSubscriptionFiltersFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDescribeSubscriptionFiltersFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	var output cloudwatchlogs.DescribeSubscriptionFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsDisassociateKmsKeyFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsDisassociateKmsKeyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	var output cloudwatchlogs.DisassociateKmsKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsFilterLogEventsFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsFilterLogEventsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	var output cloudwatchlogs.FilterLogEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsGetLogEventsFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsGetLogEventsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.GetLogEventsOutput, error) {
	var output cloudwatchlogs.GetLogEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsGetLogGroupFieldsFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsGetLogGroupFieldsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.GetLogGroupFieldsOutput, error) {
	var output cloudwatchlogs.GetLogGroupFieldsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsGetLogRecordFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsGetLogRecordFuture) Get(ctx workflow.Context) (*cloudwatchlogs.GetLogRecordOutput, error) {
	var output cloudwatchlogs.GetLogRecordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsGetQueryResultsFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsGetQueryResultsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.GetQueryResultsOutput, error) {
	var output cloudwatchlogs.GetQueryResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsListTagsLogGroupFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsListTagsLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	var output cloudwatchlogs.ListTagsLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsPutDestinationFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsPutDestinationFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutDestinationOutput, error) {
	var output cloudwatchlogs.PutDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsPutDestinationPolicyFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsPutDestinationPolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	var output cloudwatchlogs.PutDestinationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsPutLogEventsFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsPutLogEventsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutLogEventsOutput, error) {
	var output cloudwatchlogs.PutLogEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsPutMetricFilterFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsPutMetricFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	var output cloudwatchlogs.PutMetricFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsPutQueryDefinitionFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsPutQueryDefinitionFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutQueryDefinitionOutput, error) {
	var output cloudwatchlogs.PutQueryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsPutResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsPutResourcePolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	var output cloudwatchlogs.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsPutRetentionPolicyFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsPutRetentionPolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	var output cloudwatchlogs.PutRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsPutSubscriptionFilterFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsPutSubscriptionFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	var output cloudwatchlogs.PutSubscriptionFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsStartQueryFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsStartQueryFuture) Get(ctx workflow.Context) (*cloudwatchlogs.StartQueryOutput, error) {
	var output cloudwatchlogs.StartQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsStopQueryFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsStopQueryFuture) Get(ctx workflow.Context) (*cloudwatchlogs.StopQueryOutput, error) {
	var output cloudwatchlogs.StopQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsTagLogGroupFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsTagLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.TagLogGroupOutput, error) {
	var output cloudwatchlogs.TagLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsTestMetricFilterFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsTestMetricFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	var output cloudwatchlogs.TestMetricFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatchlogsUntagLogGroupFuture struct {
	Future workflow.Future
}

func (r *CloudwatchlogsUntagLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	var output cloudwatchlogs.UntagLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) AssociateKmsKey(ctx workflow.Context, input *cloudwatchlogs.AssociateKmsKeyInput) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	var output cloudwatchlogs.AssociateKmsKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.AssociateKmsKey", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) AssociateKmsKeyAsync(ctx workflow.Context, input *cloudwatchlogs.AssociateKmsKeyInput) *CloudwatchlogsAssociateKmsKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.AssociateKmsKey", input)
	return &CloudwatchlogsAssociateKmsKeyFuture{Future: future}
}

func (a *CloudWatchLogsStub) CancelExportTask(ctx workflow.Context, input *cloudwatchlogs.CancelExportTaskInput) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	var output cloudwatchlogs.CancelExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CancelExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) CancelExportTaskAsync(ctx workflow.Context, input *cloudwatchlogs.CancelExportTaskInput) *CloudwatchlogsCancelExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CancelExportTask", input)
	return &CloudwatchlogsCancelExportTaskFuture{Future: future}
}

func (a *CloudWatchLogsStub) CreateExportTask(ctx workflow.Context, input *cloudwatchlogs.CreateExportTaskInput) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	var output cloudwatchlogs.CreateExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CreateExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) CreateExportTaskAsync(ctx workflow.Context, input *cloudwatchlogs.CreateExportTaskInput) *CloudwatchlogsCreateExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CreateExportTask", input)
	return &CloudwatchlogsCreateExportTaskFuture{Future: future}
}

func (a *CloudWatchLogsStub) CreateLogGroup(ctx workflow.Context, input *cloudwatchlogs.CreateLogGroupInput) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	var output cloudwatchlogs.CreateLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CreateLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) CreateLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.CreateLogGroupInput) *CloudwatchlogsCreateLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CreateLogGroup", input)
	return &CloudwatchlogsCreateLogGroupFuture{Future: future}
}

func (a *CloudWatchLogsStub) CreateLogStream(ctx workflow.Context, input *cloudwatchlogs.CreateLogStreamInput) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	var output cloudwatchlogs.CreateLogStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CreateLogStream", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) CreateLogStreamAsync(ctx workflow.Context, input *cloudwatchlogs.CreateLogStreamInput) *CloudwatchlogsCreateLogStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.CreateLogStream", input)
	return &CloudwatchlogsCreateLogStreamFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteDestination(ctx workflow.Context, input *cloudwatchlogs.DeleteDestinationInput) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	var output cloudwatchlogs.DeleteDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteDestinationAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteDestinationInput) *CloudwatchlogsDeleteDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteDestination", input)
	return &CloudwatchlogsDeleteDestinationFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteLogGroup(ctx workflow.Context, input *cloudwatchlogs.DeleteLogGroupInput) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	var output cloudwatchlogs.DeleteLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteLogGroupInput) *CloudwatchlogsDeleteLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteLogGroup", input)
	return &CloudwatchlogsDeleteLogGroupFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteLogStream(ctx workflow.Context, input *cloudwatchlogs.DeleteLogStreamInput) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	var output cloudwatchlogs.DeleteLogStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteLogStream", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteLogStreamAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteLogStreamInput) *CloudwatchlogsDeleteLogStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteLogStream", input)
	return &CloudwatchlogsDeleteLogStreamFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteMetricFilter(ctx workflow.Context, input *cloudwatchlogs.DeleteMetricFilterInput) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	var output cloudwatchlogs.DeleteMetricFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteMetricFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteMetricFilterInput) *CloudwatchlogsDeleteMetricFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteMetricFilter", input)
	return &CloudwatchlogsDeleteMetricFilterFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteQueryDefinition(ctx workflow.Context, input *cloudwatchlogs.DeleteQueryDefinitionInput) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error) {
	var output cloudwatchlogs.DeleteQueryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteQueryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteQueryDefinitionAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteQueryDefinitionInput) *CloudwatchlogsDeleteQueryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteQueryDefinition", input)
	return &CloudwatchlogsDeleteQueryDefinitionFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteResourcePolicy(ctx workflow.Context, input *cloudwatchlogs.DeleteResourcePolicyInput) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	var output cloudwatchlogs.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteResourcePolicyAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteResourcePolicyInput) *CloudwatchlogsDeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteResourcePolicy", input)
	return &CloudwatchlogsDeleteResourcePolicyFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteRetentionPolicy(ctx workflow.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	var output cloudwatchlogs.DeleteRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteRetentionPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput) *CloudwatchlogsDeleteRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteRetentionPolicy", input)
	return &CloudwatchlogsDeleteRetentionPolicyFuture{Future: future}
}

func (a *CloudWatchLogsStub) DeleteSubscriptionFilter(ctx workflow.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	var output cloudwatchlogs.DeleteSubscriptionFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteSubscriptionFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DeleteSubscriptionFilterAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput) *CloudwatchlogsDeleteSubscriptionFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DeleteSubscriptionFilter", input)
	return &CloudwatchlogsDeleteSubscriptionFilterFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeDestinations(ctx workflow.Context, input *cloudwatchlogs.DescribeDestinationsInput) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	var output cloudwatchlogs.DescribeDestinationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeDestinations", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeDestinationsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeDestinationsInput) *CloudwatchlogsDescribeDestinationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeDestinations", input)
	return &CloudwatchlogsDescribeDestinationsFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeExportTasks(ctx workflow.Context, input *cloudwatchlogs.DescribeExportTasksInput) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	var output cloudwatchlogs.DescribeExportTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeExportTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeExportTasksAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeExportTasksInput) *CloudwatchlogsDescribeExportTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeExportTasks", input)
	return &CloudwatchlogsDescribeExportTasksFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeLogGroups(ctx workflow.Context, input *cloudwatchlogs.DescribeLogGroupsInput) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	var output cloudwatchlogs.DescribeLogGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeLogGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeLogGroupsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeLogGroupsInput) *CloudwatchlogsDescribeLogGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeLogGroups", input)
	return &CloudwatchlogsDescribeLogGroupsFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeLogStreams(ctx workflow.Context, input *cloudwatchlogs.DescribeLogStreamsInput) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	var output cloudwatchlogs.DescribeLogStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeLogStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeLogStreamsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeLogStreamsInput) *CloudwatchlogsDescribeLogStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeLogStreams", input)
	return &CloudwatchlogsDescribeLogStreamsFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeMetricFilters(ctx workflow.Context, input *cloudwatchlogs.DescribeMetricFiltersInput) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	var output cloudwatchlogs.DescribeMetricFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeMetricFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeMetricFiltersAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeMetricFiltersInput) *CloudwatchlogsDescribeMetricFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeMetricFilters", input)
	return &CloudwatchlogsDescribeMetricFiltersFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeQueries(ctx workflow.Context, input *cloudwatchlogs.DescribeQueriesInput) (*cloudwatchlogs.DescribeQueriesOutput, error) {
	var output cloudwatchlogs.DescribeQueriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeQueries", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeQueriesAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeQueriesInput) *CloudwatchlogsDescribeQueriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeQueries", input)
	return &CloudwatchlogsDescribeQueriesFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeQueryDefinitions(ctx workflow.Context, input *cloudwatchlogs.DescribeQueryDefinitionsInput) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error) {
	var output cloudwatchlogs.DescribeQueryDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeQueryDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeQueryDefinitionsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeQueryDefinitionsInput) *CloudwatchlogsDescribeQueryDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeQueryDefinitions", input)
	return &CloudwatchlogsDescribeQueryDefinitionsFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeResourcePolicies(ctx workflow.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	var output cloudwatchlogs.DescribeResourcePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeResourcePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeResourcePoliciesAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput) *CloudwatchlogsDescribeResourcePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeResourcePolicies", input)
	return &CloudwatchlogsDescribeResourcePoliciesFuture{Future: future}
}

func (a *CloudWatchLogsStub) DescribeSubscriptionFilters(ctx workflow.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	var output cloudwatchlogs.DescribeSubscriptionFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeSubscriptionFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DescribeSubscriptionFiltersAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput) *CloudwatchlogsDescribeSubscriptionFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DescribeSubscriptionFilters", input)
	return &CloudwatchlogsDescribeSubscriptionFiltersFuture{Future: future}
}

func (a *CloudWatchLogsStub) DisassociateKmsKey(ctx workflow.Context, input *cloudwatchlogs.DisassociateKmsKeyInput) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	var output cloudwatchlogs.DisassociateKmsKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DisassociateKmsKey", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) DisassociateKmsKeyAsync(ctx workflow.Context, input *cloudwatchlogs.DisassociateKmsKeyInput) *CloudwatchlogsDisassociateKmsKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.DisassociateKmsKey", input)
	return &CloudwatchlogsDisassociateKmsKeyFuture{Future: future}
}

func (a *CloudWatchLogsStub) FilterLogEvents(ctx workflow.Context, input *cloudwatchlogs.FilterLogEventsInput) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	var output cloudwatchlogs.FilterLogEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.FilterLogEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) FilterLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.FilterLogEventsInput) *CloudwatchlogsFilterLogEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.FilterLogEvents", input)
	return &CloudwatchlogsFilterLogEventsFuture{Future: future}
}

func (a *CloudWatchLogsStub) GetLogEvents(ctx workflow.Context, input *cloudwatchlogs.GetLogEventsInput) (*cloudwatchlogs.GetLogEventsOutput, error) {
	var output cloudwatchlogs.GetLogEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetLogEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) GetLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogEventsInput) *CloudwatchlogsGetLogEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetLogEvents", input)
	return &CloudwatchlogsGetLogEventsFuture{Future: future}
}

func (a *CloudWatchLogsStub) GetLogGroupFields(ctx workflow.Context, input *cloudwatchlogs.GetLogGroupFieldsInput) (*cloudwatchlogs.GetLogGroupFieldsOutput, error) {
	var output cloudwatchlogs.GetLogGroupFieldsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetLogGroupFields", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) GetLogGroupFieldsAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogGroupFieldsInput) *CloudwatchlogsGetLogGroupFieldsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetLogGroupFields", input)
	return &CloudwatchlogsGetLogGroupFieldsFuture{Future: future}
}

func (a *CloudWatchLogsStub) GetLogRecord(ctx workflow.Context, input *cloudwatchlogs.GetLogRecordInput) (*cloudwatchlogs.GetLogRecordOutput, error) {
	var output cloudwatchlogs.GetLogRecordOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetLogRecord", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) GetLogRecordAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogRecordInput) *CloudwatchlogsGetLogRecordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetLogRecord", input)
	return &CloudwatchlogsGetLogRecordFuture{Future: future}
}

func (a *CloudWatchLogsStub) GetQueryResults(ctx workflow.Context, input *cloudwatchlogs.GetQueryResultsInput) (*cloudwatchlogs.GetQueryResultsOutput, error) {
	var output cloudwatchlogs.GetQueryResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetQueryResults", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) GetQueryResultsAsync(ctx workflow.Context, input *cloudwatchlogs.GetQueryResultsInput) *CloudwatchlogsGetQueryResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.GetQueryResults", input)
	return &CloudwatchlogsGetQueryResultsFuture{Future: future}
}

func (a *CloudWatchLogsStub) ListTagsLogGroup(ctx workflow.Context, input *cloudwatchlogs.ListTagsLogGroupInput) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	var output cloudwatchlogs.ListTagsLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.ListTagsLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) ListTagsLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.ListTagsLogGroupInput) *CloudwatchlogsListTagsLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.ListTagsLogGroup", input)
	return &CloudwatchlogsListTagsLogGroupFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutDestination(ctx workflow.Context, input *cloudwatchlogs.PutDestinationInput) (*cloudwatchlogs.PutDestinationOutput, error) {
	var output cloudwatchlogs.PutDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutDestinationAsync(ctx workflow.Context, input *cloudwatchlogs.PutDestinationInput) *CloudwatchlogsPutDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutDestination", input)
	return &CloudwatchlogsPutDestinationFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutDestinationPolicy(ctx workflow.Context, input *cloudwatchlogs.PutDestinationPolicyInput) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	var output cloudwatchlogs.PutDestinationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutDestinationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutDestinationPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutDestinationPolicyInput) *CloudwatchlogsPutDestinationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutDestinationPolicy", input)
	return &CloudwatchlogsPutDestinationPolicyFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutLogEvents(ctx workflow.Context, input *cloudwatchlogs.PutLogEventsInput) (*cloudwatchlogs.PutLogEventsOutput, error) {
	var output cloudwatchlogs.PutLogEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutLogEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.PutLogEventsInput) *CloudwatchlogsPutLogEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutLogEvents", input)
	return &CloudwatchlogsPutLogEventsFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutMetricFilter(ctx workflow.Context, input *cloudwatchlogs.PutMetricFilterInput) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	var output cloudwatchlogs.PutMetricFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutMetricFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.PutMetricFilterInput) *CloudwatchlogsPutMetricFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutMetricFilter", input)
	return &CloudwatchlogsPutMetricFilterFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutQueryDefinition(ctx workflow.Context, input *cloudwatchlogs.PutQueryDefinitionInput) (*cloudwatchlogs.PutQueryDefinitionOutput, error) {
	var output cloudwatchlogs.PutQueryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutQueryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutQueryDefinitionAsync(ctx workflow.Context, input *cloudwatchlogs.PutQueryDefinitionInput) *CloudwatchlogsPutQueryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutQueryDefinition", input)
	return &CloudwatchlogsPutQueryDefinitionFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutResourcePolicy(ctx workflow.Context, input *cloudwatchlogs.PutResourcePolicyInput) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	var output cloudwatchlogs.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutResourcePolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutResourcePolicyInput) *CloudwatchlogsPutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutResourcePolicy", input)
	return &CloudwatchlogsPutResourcePolicyFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutRetentionPolicy(ctx workflow.Context, input *cloudwatchlogs.PutRetentionPolicyInput) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	var output cloudwatchlogs.PutRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutRetentionPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutRetentionPolicyInput) *CloudwatchlogsPutRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutRetentionPolicy", input)
	return &CloudwatchlogsPutRetentionPolicyFuture{Future: future}
}

func (a *CloudWatchLogsStub) PutSubscriptionFilter(ctx workflow.Context, input *cloudwatchlogs.PutSubscriptionFilterInput) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	var output cloudwatchlogs.PutSubscriptionFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutSubscriptionFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) PutSubscriptionFilterAsync(ctx workflow.Context, input *cloudwatchlogs.PutSubscriptionFilterInput) *CloudwatchlogsPutSubscriptionFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.PutSubscriptionFilter", input)
	return &CloudwatchlogsPutSubscriptionFilterFuture{Future: future}
}

func (a *CloudWatchLogsStub) StartQuery(ctx workflow.Context, input *cloudwatchlogs.StartQueryInput) (*cloudwatchlogs.StartQueryOutput, error) {
	var output cloudwatchlogs.StartQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.StartQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) StartQueryAsync(ctx workflow.Context, input *cloudwatchlogs.StartQueryInput) *CloudwatchlogsStartQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.StartQuery", input)
	return &CloudwatchlogsStartQueryFuture{Future: future}
}

func (a *CloudWatchLogsStub) StopQuery(ctx workflow.Context, input *cloudwatchlogs.StopQueryInput) (*cloudwatchlogs.StopQueryOutput, error) {
	var output cloudwatchlogs.StopQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.StopQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) StopQueryAsync(ctx workflow.Context, input *cloudwatchlogs.StopQueryInput) *CloudwatchlogsStopQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.StopQuery", input)
	return &CloudwatchlogsStopQueryFuture{Future: future}
}

func (a *CloudWatchLogsStub) TagLogGroup(ctx workflow.Context, input *cloudwatchlogs.TagLogGroupInput) (*cloudwatchlogs.TagLogGroupOutput, error) {
	var output cloudwatchlogs.TagLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.TagLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) TagLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.TagLogGroupInput) *CloudwatchlogsTagLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.TagLogGroup", input)
	return &CloudwatchlogsTagLogGroupFuture{Future: future}
}

func (a *CloudWatchLogsStub) TestMetricFilter(ctx workflow.Context, input *cloudwatchlogs.TestMetricFilterInput) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	var output cloudwatchlogs.TestMetricFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.TestMetricFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) TestMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.TestMetricFilterInput) *CloudwatchlogsTestMetricFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.TestMetricFilter", input)
	return &CloudwatchlogsTestMetricFilterFuture{Future: future}
}

func (a *CloudWatchLogsStub) UntagLogGroup(ctx workflow.Context, input *cloudwatchlogs.UntagLogGroupInput) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	var output cloudwatchlogs.UntagLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.UntagLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchLogsStub) UntagLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.UntagLogGroupInput) *CloudwatchlogsUntagLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchlogs.UntagLogGroup", input)
	return &CloudwatchlogsUntagLogGroupFuture{Future: future}
}
