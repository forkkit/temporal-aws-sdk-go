// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cloudsearch"
	"go.temporal.io/sdk/workflow"
)

type CloudSearchClient interface {
	BuildSuggesters(ctx workflow.Context, input *cloudsearch.BuildSuggestersInput) (*cloudsearch.BuildSuggestersOutput, error)
	BuildSuggestersAsync(ctx workflow.Context, input *cloudsearch.BuildSuggestersInput) *CloudsearchBuildSuggestersFuture

	CreateDomain(ctx workflow.Context, input *cloudsearch.CreateDomainInput) (*cloudsearch.CreateDomainOutput, error)
	CreateDomainAsync(ctx workflow.Context, input *cloudsearch.CreateDomainInput) *CloudsearchCreateDomainFuture

	DefineAnalysisScheme(ctx workflow.Context, input *cloudsearch.DefineAnalysisSchemeInput) (*cloudsearch.DefineAnalysisSchemeOutput, error)
	DefineAnalysisSchemeAsync(ctx workflow.Context, input *cloudsearch.DefineAnalysisSchemeInput) *CloudsearchDefineAnalysisSchemeFuture

	DefineExpression(ctx workflow.Context, input *cloudsearch.DefineExpressionInput) (*cloudsearch.DefineExpressionOutput, error)
	DefineExpressionAsync(ctx workflow.Context, input *cloudsearch.DefineExpressionInput) *CloudsearchDefineExpressionFuture

	DefineIndexField(ctx workflow.Context, input *cloudsearch.DefineIndexFieldInput) (*cloudsearch.DefineIndexFieldOutput, error)
	DefineIndexFieldAsync(ctx workflow.Context, input *cloudsearch.DefineIndexFieldInput) *CloudsearchDefineIndexFieldFuture

	DefineSuggester(ctx workflow.Context, input *cloudsearch.DefineSuggesterInput) (*cloudsearch.DefineSuggesterOutput, error)
	DefineSuggesterAsync(ctx workflow.Context, input *cloudsearch.DefineSuggesterInput) *CloudsearchDefineSuggesterFuture

	DeleteAnalysisScheme(ctx workflow.Context, input *cloudsearch.DeleteAnalysisSchemeInput) (*cloudsearch.DeleteAnalysisSchemeOutput, error)
	DeleteAnalysisSchemeAsync(ctx workflow.Context, input *cloudsearch.DeleteAnalysisSchemeInput) *CloudsearchDeleteAnalysisSchemeFuture

	DeleteDomain(ctx workflow.Context, input *cloudsearch.DeleteDomainInput) (*cloudsearch.DeleteDomainOutput, error)
	DeleteDomainAsync(ctx workflow.Context, input *cloudsearch.DeleteDomainInput) *CloudsearchDeleteDomainFuture

	DeleteExpression(ctx workflow.Context, input *cloudsearch.DeleteExpressionInput) (*cloudsearch.DeleteExpressionOutput, error)
	DeleteExpressionAsync(ctx workflow.Context, input *cloudsearch.DeleteExpressionInput) *CloudsearchDeleteExpressionFuture

	DeleteIndexField(ctx workflow.Context, input *cloudsearch.DeleteIndexFieldInput) (*cloudsearch.DeleteIndexFieldOutput, error)
	DeleteIndexFieldAsync(ctx workflow.Context, input *cloudsearch.DeleteIndexFieldInput) *CloudsearchDeleteIndexFieldFuture

	DeleteSuggester(ctx workflow.Context, input *cloudsearch.DeleteSuggesterInput) (*cloudsearch.DeleteSuggesterOutput, error)
	DeleteSuggesterAsync(ctx workflow.Context, input *cloudsearch.DeleteSuggesterInput) *CloudsearchDeleteSuggesterFuture

	DescribeAnalysisSchemes(ctx workflow.Context, input *cloudsearch.DescribeAnalysisSchemesInput) (*cloudsearch.DescribeAnalysisSchemesOutput, error)
	DescribeAnalysisSchemesAsync(ctx workflow.Context, input *cloudsearch.DescribeAnalysisSchemesInput) *CloudsearchDescribeAnalysisSchemesFuture

	DescribeAvailabilityOptions(ctx workflow.Context, input *cloudsearch.DescribeAvailabilityOptionsInput) (*cloudsearch.DescribeAvailabilityOptionsOutput, error)
	DescribeAvailabilityOptionsAsync(ctx workflow.Context, input *cloudsearch.DescribeAvailabilityOptionsInput) *CloudsearchDescribeAvailabilityOptionsFuture

	DescribeDomainEndpointOptions(ctx workflow.Context, input *cloudsearch.DescribeDomainEndpointOptionsInput) (*cloudsearch.DescribeDomainEndpointOptionsOutput, error)
	DescribeDomainEndpointOptionsAsync(ctx workflow.Context, input *cloudsearch.DescribeDomainEndpointOptionsInput) *CloudsearchDescribeDomainEndpointOptionsFuture

	DescribeDomains(ctx workflow.Context, input *cloudsearch.DescribeDomainsInput) (*cloudsearch.DescribeDomainsOutput, error)
	DescribeDomainsAsync(ctx workflow.Context, input *cloudsearch.DescribeDomainsInput) *CloudsearchDescribeDomainsFuture

	DescribeExpressions(ctx workflow.Context, input *cloudsearch.DescribeExpressionsInput) (*cloudsearch.DescribeExpressionsOutput, error)
	DescribeExpressionsAsync(ctx workflow.Context, input *cloudsearch.DescribeExpressionsInput) *CloudsearchDescribeExpressionsFuture

	DescribeIndexFields(ctx workflow.Context, input *cloudsearch.DescribeIndexFieldsInput) (*cloudsearch.DescribeIndexFieldsOutput, error)
	DescribeIndexFieldsAsync(ctx workflow.Context, input *cloudsearch.DescribeIndexFieldsInput) *CloudsearchDescribeIndexFieldsFuture

	DescribeScalingParameters(ctx workflow.Context, input *cloudsearch.DescribeScalingParametersInput) (*cloudsearch.DescribeScalingParametersOutput, error)
	DescribeScalingParametersAsync(ctx workflow.Context, input *cloudsearch.DescribeScalingParametersInput) *CloudsearchDescribeScalingParametersFuture

	DescribeServiceAccessPolicies(ctx workflow.Context, input *cloudsearch.DescribeServiceAccessPoliciesInput) (*cloudsearch.DescribeServiceAccessPoliciesOutput, error)
	DescribeServiceAccessPoliciesAsync(ctx workflow.Context, input *cloudsearch.DescribeServiceAccessPoliciesInput) *CloudsearchDescribeServiceAccessPoliciesFuture

	DescribeSuggesters(ctx workflow.Context, input *cloudsearch.DescribeSuggestersInput) (*cloudsearch.DescribeSuggestersOutput, error)
	DescribeSuggestersAsync(ctx workflow.Context, input *cloudsearch.DescribeSuggestersInput) *CloudsearchDescribeSuggestersFuture

	IndexDocuments(ctx workflow.Context, input *cloudsearch.IndexDocumentsInput) (*cloudsearch.IndexDocumentsOutput, error)
	IndexDocumentsAsync(ctx workflow.Context, input *cloudsearch.IndexDocumentsInput) *CloudsearchIndexDocumentsFuture

	ListDomainNames(ctx workflow.Context, input *cloudsearch.ListDomainNamesInput) (*cloudsearch.ListDomainNamesOutput, error)
	ListDomainNamesAsync(ctx workflow.Context, input *cloudsearch.ListDomainNamesInput) *CloudsearchListDomainNamesFuture

	UpdateAvailabilityOptions(ctx workflow.Context, input *cloudsearch.UpdateAvailabilityOptionsInput) (*cloudsearch.UpdateAvailabilityOptionsOutput, error)
	UpdateAvailabilityOptionsAsync(ctx workflow.Context, input *cloudsearch.UpdateAvailabilityOptionsInput) *CloudsearchUpdateAvailabilityOptionsFuture

	UpdateDomainEndpointOptions(ctx workflow.Context, input *cloudsearch.UpdateDomainEndpointOptionsInput) (*cloudsearch.UpdateDomainEndpointOptionsOutput, error)
	UpdateDomainEndpointOptionsAsync(ctx workflow.Context, input *cloudsearch.UpdateDomainEndpointOptionsInput) *CloudsearchUpdateDomainEndpointOptionsFuture

	UpdateScalingParameters(ctx workflow.Context, input *cloudsearch.UpdateScalingParametersInput) (*cloudsearch.UpdateScalingParametersOutput, error)
	UpdateScalingParametersAsync(ctx workflow.Context, input *cloudsearch.UpdateScalingParametersInput) *CloudsearchUpdateScalingParametersFuture

	UpdateServiceAccessPolicies(ctx workflow.Context, input *cloudsearch.UpdateServiceAccessPoliciesInput) (*cloudsearch.UpdateServiceAccessPoliciesOutput, error)
	UpdateServiceAccessPoliciesAsync(ctx workflow.Context, input *cloudsearch.UpdateServiceAccessPoliciesInput) *CloudsearchUpdateServiceAccessPoliciesFuture
}

type CloudSearchStub struct{}

func NewCloudSearchStub() CloudSearchClient {
	return &CloudSearchStub{}
}

type CloudsearchBuildSuggestersFuture struct {
	Future workflow.Future
}

func (r *CloudsearchBuildSuggestersFuture) Get(ctx workflow.Context) (*cloudsearch.BuildSuggestersOutput, error) {
	var output cloudsearch.BuildSuggestersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchCreateDomainFuture struct {
	Future workflow.Future
}

func (r *CloudsearchCreateDomainFuture) Get(ctx workflow.Context) (*cloudsearch.CreateDomainOutput, error) {
	var output cloudsearch.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDefineAnalysisSchemeFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDefineAnalysisSchemeFuture) Get(ctx workflow.Context) (*cloudsearch.DefineAnalysisSchemeOutput, error) {
	var output cloudsearch.DefineAnalysisSchemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDefineExpressionFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDefineExpressionFuture) Get(ctx workflow.Context) (*cloudsearch.DefineExpressionOutput, error) {
	var output cloudsearch.DefineExpressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDefineIndexFieldFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDefineIndexFieldFuture) Get(ctx workflow.Context) (*cloudsearch.DefineIndexFieldOutput, error) {
	var output cloudsearch.DefineIndexFieldOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDefineSuggesterFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDefineSuggesterFuture) Get(ctx workflow.Context) (*cloudsearch.DefineSuggesterOutput, error) {
	var output cloudsearch.DefineSuggesterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDeleteAnalysisSchemeFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDeleteAnalysisSchemeFuture) Get(ctx workflow.Context) (*cloudsearch.DeleteAnalysisSchemeOutput, error) {
	var output cloudsearch.DeleteAnalysisSchemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDeleteDomainFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDeleteDomainFuture) Get(ctx workflow.Context) (*cloudsearch.DeleteDomainOutput, error) {
	var output cloudsearch.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDeleteExpressionFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDeleteExpressionFuture) Get(ctx workflow.Context) (*cloudsearch.DeleteExpressionOutput, error) {
	var output cloudsearch.DeleteExpressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDeleteIndexFieldFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDeleteIndexFieldFuture) Get(ctx workflow.Context) (*cloudsearch.DeleteIndexFieldOutput, error) {
	var output cloudsearch.DeleteIndexFieldOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDeleteSuggesterFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDeleteSuggesterFuture) Get(ctx workflow.Context) (*cloudsearch.DeleteSuggesterOutput, error) {
	var output cloudsearch.DeleteSuggesterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDescribeAnalysisSchemesFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDescribeAnalysisSchemesFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeAnalysisSchemesOutput, error) {
	var output cloudsearch.DescribeAnalysisSchemesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDescribeAvailabilityOptionsFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDescribeAvailabilityOptionsFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeAvailabilityOptionsOutput, error) {
	var output cloudsearch.DescribeAvailabilityOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDescribeDomainEndpointOptionsFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDescribeDomainEndpointOptionsFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeDomainEndpointOptionsOutput, error) {
	var output cloudsearch.DescribeDomainEndpointOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDescribeDomainsFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDescribeDomainsFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeDomainsOutput, error) {
	var output cloudsearch.DescribeDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDescribeExpressionsFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDescribeExpressionsFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeExpressionsOutput, error) {
	var output cloudsearch.DescribeExpressionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDescribeIndexFieldsFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDescribeIndexFieldsFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeIndexFieldsOutput, error) {
	var output cloudsearch.DescribeIndexFieldsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDescribeScalingParametersFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDescribeScalingParametersFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeScalingParametersOutput, error) {
	var output cloudsearch.DescribeScalingParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDescribeServiceAccessPoliciesFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDescribeServiceAccessPoliciesFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeServiceAccessPoliciesOutput, error) {
	var output cloudsearch.DescribeServiceAccessPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchDescribeSuggestersFuture struct {
	Future workflow.Future
}

func (r *CloudsearchDescribeSuggestersFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeSuggestersOutput, error) {
	var output cloudsearch.DescribeSuggestersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchIndexDocumentsFuture struct {
	Future workflow.Future
}

func (r *CloudsearchIndexDocumentsFuture) Get(ctx workflow.Context) (*cloudsearch.IndexDocumentsOutput, error) {
	var output cloudsearch.IndexDocumentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchListDomainNamesFuture struct {
	Future workflow.Future
}

func (r *CloudsearchListDomainNamesFuture) Get(ctx workflow.Context) (*cloudsearch.ListDomainNamesOutput, error) {
	var output cloudsearch.ListDomainNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchUpdateAvailabilityOptionsFuture struct {
	Future workflow.Future
}

func (r *CloudsearchUpdateAvailabilityOptionsFuture) Get(ctx workflow.Context) (*cloudsearch.UpdateAvailabilityOptionsOutput, error) {
	var output cloudsearch.UpdateAvailabilityOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchUpdateDomainEndpointOptionsFuture struct {
	Future workflow.Future
}

func (r *CloudsearchUpdateDomainEndpointOptionsFuture) Get(ctx workflow.Context) (*cloudsearch.UpdateDomainEndpointOptionsOutput, error) {
	var output cloudsearch.UpdateDomainEndpointOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchUpdateScalingParametersFuture struct {
	Future workflow.Future
}

func (r *CloudsearchUpdateScalingParametersFuture) Get(ctx workflow.Context) (*cloudsearch.UpdateScalingParametersOutput, error) {
	var output cloudsearch.UpdateScalingParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudsearchUpdateServiceAccessPoliciesFuture struct {
	Future workflow.Future
}

func (r *CloudsearchUpdateServiceAccessPoliciesFuture) Get(ctx workflow.Context) (*cloudsearch.UpdateServiceAccessPoliciesOutput, error) {
	var output cloudsearch.UpdateServiceAccessPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) BuildSuggesters(ctx workflow.Context, input *cloudsearch.BuildSuggestersInput) (*cloudsearch.BuildSuggestersOutput, error) {
	var output cloudsearch.BuildSuggestersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.BuildSuggesters", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) BuildSuggestersAsync(ctx workflow.Context, input *cloudsearch.BuildSuggestersInput) *CloudsearchBuildSuggestersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.BuildSuggesters", input)
	return &CloudsearchBuildSuggestersFuture{Future: future}
}

func (a *CloudSearchStub) CreateDomain(ctx workflow.Context, input *cloudsearch.CreateDomainInput) (*cloudsearch.CreateDomainOutput, error) {
	var output cloudsearch.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) CreateDomainAsync(ctx workflow.Context, input *cloudsearch.CreateDomainInput) *CloudsearchCreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.CreateDomain", input)
	return &CloudsearchCreateDomainFuture{Future: future}
}

func (a *CloudSearchStub) DefineAnalysisScheme(ctx workflow.Context, input *cloudsearch.DefineAnalysisSchemeInput) (*cloudsearch.DefineAnalysisSchemeOutput, error) {
	var output cloudsearch.DefineAnalysisSchemeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DefineAnalysisScheme", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DefineAnalysisSchemeAsync(ctx workflow.Context, input *cloudsearch.DefineAnalysisSchemeInput) *CloudsearchDefineAnalysisSchemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DefineAnalysisScheme", input)
	return &CloudsearchDefineAnalysisSchemeFuture{Future: future}
}

func (a *CloudSearchStub) DefineExpression(ctx workflow.Context, input *cloudsearch.DefineExpressionInput) (*cloudsearch.DefineExpressionOutput, error) {
	var output cloudsearch.DefineExpressionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DefineExpression", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DefineExpressionAsync(ctx workflow.Context, input *cloudsearch.DefineExpressionInput) *CloudsearchDefineExpressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DefineExpression", input)
	return &CloudsearchDefineExpressionFuture{Future: future}
}

func (a *CloudSearchStub) DefineIndexField(ctx workflow.Context, input *cloudsearch.DefineIndexFieldInput) (*cloudsearch.DefineIndexFieldOutput, error) {
	var output cloudsearch.DefineIndexFieldOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DefineIndexField", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DefineIndexFieldAsync(ctx workflow.Context, input *cloudsearch.DefineIndexFieldInput) *CloudsearchDefineIndexFieldFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DefineIndexField", input)
	return &CloudsearchDefineIndexFieldFuture{Future: future}
}

func (a *CloudSearchStub) DefineSuggester(ctx workflow.Context, input *cloudsearch.DefineSuggesterInput) (*cloudsearch.DefineSuggesterOutput, error) {
	var output cloudsearch.DefineSuggesterOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DefineSuggester", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DefineSuggesterAsync(ctx workflow.Context, input *cloudsearch.DefineSuggesterInput) *CloudsearchDefineSuggesterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DefineSuggester", input)
	return &CloudsearchDefineSuggesterFuture{Future: future}
}

func (a *CloudSearchStub) DeleteAnalysisScheme(ctx workflow.Context, input *cloudsearch.DeleteAnalysisSchemeInput) (*cloudsearch.DeleteAnalysisSchemeOutput, error) {
	var output cloudsearch.DeleteAnalysisSchemeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DeleteAnalysisScheme", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DeleteAnalysisSchemeAsync(ctx workflow.Context, input *cloudsearch.DeleteAnalysisSchemeInput) *CloudsearchDeleteAnalysisSchemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DeleteAnalysisScheme", input)
	return &CloudsearchDeleteAnalysisSchemeFuture{Future: future}
}

func (a *CloudSearchStub) DeleteDomain(ctx workflow.Context, input *cloudsearch.DeleteDomainInput) (*cloudsearch.DeleteDomainOutput, error) {
	var output cloudsearch.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DeleteDomainAsync(ctx workflow.Context, input *cloudsearch.DeleteDomainInput) *CloudsearchDeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DeleteDomain", input)
	return &CloudsearchDeleteDomainFuture{Future: future}
}

func (a *CloudSearchStub) DeleteExpression(ctx workflow.Context, input *cloudsearch.DeleteExpressionInput) (*cloudsearch.DeleteExpressionOutput, error) {
	var output cloudsearch.DeleteExpressionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DeleteExpression", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DeleteExpressionAsync(ctx workflow.Context, input *cloudsearch.DeleteExpressionInput) *CloudsearchDeleteExpressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DeleteExpression", input)
	return &CloudsearchDeleteExpressionFuture{Future: future}
}

func (a *CloudSearchStub) DeleteIndexField(ctx workflow.Context, input *cloudsearch.DeleteIndexFieldInput) (*cloudsearch.DeleteIndexFieldOutput, error) {
	var output cloudsearch.DeleteIndexFieldOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DeleteIndexField", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DeleteIndexFieldAsync(ctx workflow.Context, input *cloudsearch.DeleteIndexFieldInput) *CloudsearchDeleteIndexFieldFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DeleteIndexField", input)
	return &CloudsearchDeleteIndexFieldFuture{Future: future}
}

func (a *CloudSearchStub) DeleteSuggester(ctx workflow.Context, input *cloudsearch.DeleteSuggesterInput) (*cloudsearch.DeleteSuggesterOutput, error) {
	var output cloudsearch.DeleteSuggesterOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DeleteSuggester", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DeleteSuggesterAsync(ctx workflow.Context, input *cloudsearch.DeleteSuggesterInput) *CloudsearchDeleteSuggesterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DeleteSuggester", input)
	return &CloudsearchDeleteSuggesterFuture{Future: future}
}

func (a *CloudSearchStub) DescribeAnalysisSchemes(ctx workflow.Context, input *cloudsearch.DescribeAnalysisSchemesInput) (*cloudsearch.DescribeAnalysisSchemesOutput, error) {
	var output cloudsearch.DescribeAnalysisSchemesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeAnalysisSchemes", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DescribeAnalysisSchemesAsync(ctx workflow.Context, input *cloudsearch.DescribeAnalysisSchemesInput) *CloudsearchDescribeAnalysisSchemesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeAnalysisSchemes", input)
	return &CloudsearchDescribeAnalysisSchemesFuture{Future: future}
}

func (a *CloudSearchStub) DescribeAvailabilityOptions(ctx workflow.Context, input *cloudsearch.DescribeAvailabilityOptionsInput) (*cloudsearch.DescribeAvailabilityOptionsOutput, error) {
	var output cloudsearch.DescribeAvailabilityOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeAvailabilityOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DescribeAvailabilityOptionsAsync(ctx workflow.Context, input *cloudsearch.DescribeAvailabilityOptionsInput) *CloudsearchDescribeAvailabilityOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeAvailabilityOptions", input)
	return &CloudsearchDescribeAvailabilityOptionsFuture{Future: future}
}

func (a *CloudSearchStub) DescribeDomainEndpointOptions(ctx workflow.Context, input *cloudsearch.DescribeDomainEndpointOptionsInput) (*cloudsearch.DescribeDomainEndpointOptionsOutput, error) {
	var output cloudsearch.DescribeDomainEndpointOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeDomainEndpointOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DescribeDomainEndpointOptionsAsync(ctx workflow.Context, input *cloudsearch.DescribeDomainEndpointOptionsInput) *CloudsearchDescribeDomainEndpointOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeDomainEndpointOptions", input)
	return &CloudsearchDescribeDomainEndpointOptionsFuture{Future: future}
}

func (a *CloudSearchStub) DescribeDomains(ctx workflow.Context, input *cloudsearch.DescribeDomainsInput) (*cloudsearch.DescribeDomainsOutput, error) {
	var output cloudsearch.DescribeDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DescribeDomainsAsync(ctx workflow.Context, input *cloudsearch.DescribeDomainsInput) *CloudsearchDescribeDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeDomains", input)
	return &CloudsearchDescribeDomainsFuture{Future: future}
}

func (a *CloudSearchStub) DescribeExpressions(ctx workflow.Context, input *cloudsearch.DescribeExpressionsInput) (*cloudsearch.DescribeExpressionsOutput, error) {
	var output cloudsearch.DescribeExpressionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeExpressions", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DescribeExpressionsAsync(ctx workflow.Context, input *cloudsearch.DescribeExpressionsInput) *CloudsearchDescribeExpressionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeExpressions", input)
	return &CloudsearchDescribeExpressionsFuture{Future: future}
}

func (a *CloudSearchStub) DescribeIndexFields(ctx workflow.Context, input *cloudsearch.DescribeIndexFieldsInput) (*cloudsearch.DescribeIndexFieldsOutput, error) {
	var output cloudsearch.DescribeIndexFieldsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeIndexFields", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DescribeIndexFieldsAsync(ctx workflow.Context, input *cloudsearch.DescribeIndexFieldsInput) *CloudsearchDescribeIndexFieldsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeIndexFields", input)
	return &CloudsearchDescribeIndexFieldsFuture{Future: future}
}

func (a *CloudSearchStub) DescribeScalingParameters(ctx workflow.Context, input *cloudsearch.DescribeScalingParametersInput) (*cloudsearch.DescribeScalingParametersOutput, error) {
	var output cloudsearch.DescribeScalingParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeScalingParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DescribeScalingParametersAsync(ctx workflow.Context, input *cloudsearch.DescribeScalingParametersInput) *CloudsearchDescribeScalingParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeScalingParameters", input)
	return &CloudsearchDescribeScalingParametersFuture{Future: future}
}

func (a *CloudSearchStub) DescribeServiceAccessPolicies(ctx workflow.Context, input *cloudsearch.DescribeServiceAccessPoliciesInput) (*cloudsearch.DescribeServiceAccessPoliciesOutput, error) {
	var output cloudsearch.DescribeServiceAccessPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeServiceAccessPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DescribeServiceAccessPoliciesAsync(ctx workflow.Context, input *cloudsearch.DescribeServiceAccessPoliciesInput) *CloudsearchDescribeServiceAccessPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeServiceAccessPolicies", input)
	return &CloudsearchDescribeServiceAccessPoliciesFuture{Future: future}
}

func (a *CloudSearchStub) DescribeSuggesters(ctx workflow.Context, input *cloudsearch.DescribeSuggestersInput) (*cloudsearch.DescribeSuggestersOutput, error) {
	var output cloudsearch.DescribeSuggestersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeSuggesters", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) DescribeSuggestersAsync(ctx workflow.Context, input *cloudsearch.DescribeSuggestersInput) *CloudsearchDescribeSuggestersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.DescribeSuggesters", input)
	return &CloudsearchDescribeSuggestersFuture{Future: future}
}

func (a *CloudSearchStub) IndexDocuments(ctx workflow.Context, input *cloudsearch.IndexDocumentsInput) (*cloudsearch.IndexDocumentsOutput, error) {
	var output cloudsearch.IndexDocumentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.IndexDocuments", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) IndexDocumentsAsync(ctx workflow.Context, input *cloudsearch.IndexDocumentsInput) *CloudsearchIndexDocumentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.IndexDocuments", input)
	return &CloudsearchIndexDocumentsFuture{Future: future}
}

func (a *CloudSearchStub) ListDomainNames(ctx workflow.Context, input *cloudsearch.ListDomainNamesInput) (*cloudsearch.ListDomainNamesOutput, error) {
	var output cloudsearch.ListDomainNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.ListDomainNames", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) ListDomainNamesAsync(ctx workflow.Context, input *cloudsearch.ListDomainNamesInput) *CloudsearchListDomainNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.ListDomainNames", input)
	return &CloudsearchListDomainNamesFuture{Future: future}
}

func (a *CloudSearchStub) UpdateAvailabilityOptions(ctx workflow.Context, input *cloudsearch.UpdateAvailabilityOptionsInput) (*cloudsearch.UpdateAvailabilityOptionsOutput, error) {
	var output cloudsearch.UpdateAvailabilityOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.UpdateAvailabilityOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) UpdateAvailabilityOptionsAsync(ctx workflow.Context, input *cloudsearch.UpdateAvailabilityOptionsInput) *CloudsearchUpdateAvailabilityOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.UpdateAvailabilityOptions", input)
	return &CloudsearchUpdateAvailabilityOptionsFuture{Future: future}
}

func (a *CloudSearchStub) UpdateDomainEndpointOptions(ctx workflow.Context, input *cloudsearch.UpdateDomainEndpointOptionsInput) (*cloudsearch.UpdateDomainEndpointOptionsOutput, error) {
	var output cloudsearch.UpdateDomainEndpointOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.UpdateDomainEndpointOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) UpdateDomainEndpointOptionsAsync(ctx workflow.Context, input *cloudsearch.UpdateDomainEndpointOptionsInput) *CloudsearchUpdateDomainEndpointOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.UpdateDomainEndpointOptions", input)
	return &CloudsearchUpdateDomainEndpointOptionsFuture{Future: future}
}

func (a *CloudSearchStub) UpdateScalingParameters(ctx workflow.Context, input *cloudsearch.UpdateScalingParametersInput) (*cloudsearch.UpdateScalingParametersOutput, error) {
	var output cloudsearch.UpdateScalingParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.UpdateScalingParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) UpdateScalingParametersAsync(ctx workflow.Context, input *cloudsearch.UpdateScalingParametersInput) *CloudsearchUpdateScalingParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.UpdateScalingParameters", input)
	return &CloudsearchUpdateScalingParametersFuture{Future: future}
}

func (a *CloudSearchStub) UpdateServiceAccessPolicies(ctx workflow.Context, input *cloudsearch.UpdateServiceAccessPoliciesInput) (*cloudsearch.UpdateServiceAccessPoliciesOutput, error) {
	var output cloudsearch.UpdateServiceAccessPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudsearch.UpdateServiceAccessPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudSearchStub) UpdateServiceAccessPoliciesAsync(ctx workflow.Context, input *cloudsearch.UpdateServiceAccessPoliciesInput) *CloudsearchUpdateServiceAccessPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudsearch.UpdateServiceAccessPolicies", input)
	return &CloudsearchUpdateServiceAccessPoliciesFuture{Future: future}
}
