// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/sagemaker"
	"go.temporal.io/sdk/workflow"
)

type SageMakerClient interface {
	AddTags(ctx workflow.Context, input *sagemaker.AddTagsInput) (*sagemaker.AddTagsOutput, error)
	AddTagsAsync(ctx workflow.Context, input *sagemaker.AddTagsInput) *SagemakerAddTagsFuture

	AssociateTrialComponent(ctx workflow.Context, input *sagemaker.AssociateTrialComponentInput) (*sagemaker.AssociateTrialComponentOutput, error)
	AssociateTrialComponentAsync(ctx workflow.Context, input *sagemaker.AssociateTrialComponentInput) *SagemakerAssociateTrialComponentFuture

	CreateAlgorithm(ctx workflow.Context, input *sagemaker.CreateAlgorithmInput) (*sagemaker.CreateAlgorithmOutput, error)
	CreateAlgorithmAsync(ctx workflow.Context, input *sagemaker.CreateAlgorithmInput) *SagemakerCreateAlgorithmFuture

	CreateApp(ctx workflow.Context, input *sagemaker.CreateAppInput) (*sagemaker.CreateAppOutput, error)
	CreateAppAsync(ctx workflow.Context, input *sagemaker.CreateAppInput) *SagemakerCreateAppFuture

	CreateAutoMLJob(ctx workflow.Context, input *sagemaker.CreateAutoMLJobInput) (*sagemaker.CreateAutoMLJobOutput, error)
	CreateAutoMLJobAsync(ctx workflow.Context, input *sagemaker.CreateAutoMLJobInput) *SagemakerCreateAutoMLJobFuture

	CreateCodeRepository(ctx workflow.Context, input *sagemaker.CreateCodeRepositoryInput) (*sagemaker.CreateCodeRepositoryOutput, error)
	CreateCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.CreateCodeRepositoryInput) *SagemakerCreateCodeRepositoryFuture

	CreateCompilationJob(ctx workflow.Context, input *sagemaker.CreateCompilationJobInput) (*sagemaker.CreateCompilationJobOutput, error)
	CreateCompilationJobAsync(ctx workflow.Context, input *sagemaker.CreateCompilationJobInput) *SagemakerCreateCompilationJobFuture

	CreateDomain(ctx workflow.Context, input *sagemaker.CreateDomainInput) (*sagemaker.CreateDomainOutput, error)
	CreateDomainAsync(ctx workflow.Context, input *sagemaker.CreateDomainInput) *SagemakerCreateDomainFuture

	CreateEndpoint(ctx workflow.Context, input *sagemaker.CreateEndpointInput) (*sagemaker.CreateEndpointOutput, error)
	CreateEndpointAsync(ctx workflow.Context, input *sagemaker.CreateEndpointInput) *SagemakerCreateEndpointFuture

	CreateEndpointConfig(ctx workflow.Context, input *sagemaker.CreateEndpointConfigInput) (*sagemaker.CreateEndpointConfigOutput, error)
	CreateEndpointConfigAsync(ctx workflow.Context, input *sagemaker.CreateEndpointConfigInput) *SagemakerCreateEndpointConfigFuture

	CreateExperiment(ctx workflow.Context, input *sagemaker.CreateExperimentInput) (*sagemaker.CreateExperimentOutput, error)
	CreateExperimentAsync(ctx workflow.Context, input *sagemaker.CreateExperimentInput) *SagemakerCreateExperimentFuture

	CreateFlowDefinition(ctx workflow.Context, input *sagemaker.CreateFlowDefinitionInput) (*sagemaker.CreateFlowDefinitionOutput, error)
	CreateFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.CreateFlowDefinitionInput) *SagemakerCreateFlowDefinitionFuture

	CreateHumanTaskUi(ctx workflow.Context, input *sagemaker.CreateHumanTaskUiInput) (*sagemaker.CreateHumanTaskUiOutput, error)
	CreateHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.CreateHumanTaskUiInput) *SagemakerCreateHumanTaskUiFuture

	CreateHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.CreateHyperParameterTuningJobInput) (*sagemaker.CreateHyperParameterTuningJobOutput, error)
	CreateHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.CreateHyperParameterTuningJobInput) *SagemakerCreateHyperParameterTuningJobFuture

	CreateLabelingJob(ctx workflow.Context, input *sagemaker.CreateLabelingJobInput) (*sagemaker.CreateLabelingJobOutput, error)
	CreateLabelingJobAsync(ctx workflow.Context, input *sagemaker.CreateLabelingJobInput) *SagemakerCreateLabelingJobFuture

	CreateModel(ctx workflow.Context, input *sagemaker.CreateModelInput) (*sagemaker.CreateModelOutput, error)
	CreateModelAsync(ctx workflow.Context, input *sagemaker.CreateModelInput) *SagemakerCreateModelFuture

	CreateModelPackage(ctx workflow.Context, input *sagemaker.CreateModelPackageInput) (*sagemaker.CreateModelPackageOutput, error)
	CreateModelPackageAsync(ctx workflow.Context, input *sagemaker.CreateModelPackageInput) *SagemakerCreateModelPackageFuture

	CreateMonitoringSchedule(ctx workflow.Context, input *sagemaker.CreateMonitoringScheduleInput) (*sagemaker.CreateMonitoringScheduleOutput, error)
	CreateMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.CreateMonitoringScheduleInput) *SagemakerCreateMonitoringScheduleFuture

	CreateNotebookInstance(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceInput) (*sagemaker.CreateNotebookInstanceOutput, error)
	CreateNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceInput) *SagemakerCreateNotebookInstanceFuture

	CreateNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error)
	CreateNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput) *SagemakerCreateNotebookInstanceLifecycleConfigFuture

	CreatePresignedDomainUrl(ctx workflow.Context, input *sagemaker.CreatePresignedDomainUrlInput) (*sagemaker.CreatePresignedDomainUrlOutput, error)
	CreatePresignedDomainUrlAsync(ctx workflow.Context, input *sagemaker.CreatePresignedDomainUrlInput) *SagemakerCreatePresignedDomainUrlFuture

	CreatePresignedNotebookInstanceUrl(ctx workflow.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error)
	CreatePresignedNotebookInstanceUrlAsync(ctx workflow.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput) *SagemakerCreatePresignedNotebookInstanceUrlFuture

	CreateProcessingJob(ctx workflow.Context, input *sagemaker.CreateProcessingJobInput) (*sagemaker.CreateProcessingJobOutput, error)
	CreateProcessingJobAsync(ctx workflow.Context, input *sagemaker.CreateProcessingJobInput) *SagemakerCreateProcessingJobFuture

	CreateTrainingJob(ctx workflow.Context, input *sagemaker.CreateTrainingJobInput) (*sagemaker.CreateTrainingJobOutput, error)
	CreateTrainingJobAsync(ctx workflow.Context, input *sagemaker.CreateTrainingJobInput) *SagemakerCreateTrainingJobFuture

	CreateTransformJob(ctx workflow.Context, input *sagemaker.CreateTransformJobInput) (*sagemaker.CreateTransformJobOutput, error)
	CreateTransformJobAsync(ctx workflow.Context, input *sagemaker.CreateTransformJobInput) *SagemakerCreateTransformJobFuture

	CreateTrial(ctx workflow.Context, input *sagemaker.CreateTrialInput) (*sagemaker.CreateTrialOutput, error)
	CreateTrialAsync(ctx workflow.Context, input *sagemaker.CreateTrialInput) *SagemakerCreateTrialFuture

	CreateTrialComponent(ctx workflow.Context, input *sagemaker.CreateTrialComponentInput) (*sagemaker.CreateTrialComponentOutput, error)
	CreateTrialComponentAsync(ctx workflow.Context, input *sagemaker.CreateTrialComponentInput) *SagemakerCreateTrialComponentFuture

	CreateUserProfile(ctx workflow.Context, input *sagemaker.CreateUserProfileInput) (*sagemaker.CreateUserProfileOutput, error)
	CreateUserProfileAsync(ctx workflow.Context, input *sagemaker.CreateUserProfileInput) *SagemakerCreateUserProfileFuture

	CreateWorkforce(ctx workflow.Context, input *sagemaker.CreateWorkforceInput) (*sagemaker.CreateWorkforceOutput, error)
	CreateWorkforceAsync(ctx workflow.Context, input *sagemaker.CreateWorkforceInput) *SagemakerCreateWorkforceFuture

	CreateWorkteam(ctx workflow.Context, input *sagemaker.CreateWorkteamInput) (*sagemaker.CreateWorkteamOutput, error)
	CreateWorkteamAsync(ctx workflow.Context, input *sagemaker.CreateWorkteamInput) *SagemakerCreateWorkteamFuture

	DeleteAlgorithm(ctx workflow.Context, input *sagemaker.DeleteAlgorithmInput) (*sagemaker.DeleteAlgorithmOutput, error)
	DeleteAlgorithmAsync(ctx workflow.Context, input *sagemaker.DeleteAlgorithmInput) *SagemakerDeleteAlgorithmFuture

	DeleteApp(ctx workflow.Context, input *sagemaker.DeleteAppInput) (*sagemaker.DeleteAppOutput, error)
	DeleteAppAsync(ctx workflow.Context, input *sagemaker.DeleteAppInput) *SagemakerDeleteAppFuture

	DeleteCodeRepository(ctx workflow.Context, input *sagemaker.DeleteCodeRepositoryInput) (*sagemaker.DeleteCodeRepositoryOutput, error)
	DeleteCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.DeleteCodeRepositoryInput) *SagemakerDeleteCodeRepositoryFuture

	DeleteDomain(ctx workflow.Context, input *sagemaker.DeleteDomainInput) (*sagemaker.DeleteDomainOutput, error)
	DeleteDomainAsync(ctx workflow.Context, input *sagemaker.DeleteDomainInput) *SagemakerDeleteDomainFuture

	DeleteEndpoint(ctx workflow.Context, input *sagemaker.DeleteEndpointInput) (*sagemaker.DeleteEndpointOutput, error)
	DeleteEndpointAsync(ctx workflow.Context, input *sagemaker.DeleteEndpointInput) *SagemakerDeleteEndpointFuture

	DeleteEndpointConfig(ctx workflow.Context, input *sagemaker.DeleteEndpointConfigInput) (*sagemaker.DeleteEndpointConfigOutput, error)
	DeleteEndpointConfigAsync(ctx workflow.Context, input *sagemaker.DeleteEndpointConfigInput) *SagemakerDeleteEndpointConfigFuture

	DeleteExperiment(ctx workflow.Context, input *sagemaker.DeleteExperimentInput) (*sagemaker.DeleteExperimentOutput, error)
	DeleteExperimentAsync(ctx workflow.Context, input *sagemaker.DeleteExperimentInput) *SagemakerDeleteExperimentFuture

	DeleteFlowDefinition(ctx workflow.Context, input *sagemaker.DeleteFlowDefinitionInput) (*sagemaker.DeleteFlowDefinitionOutput, error)
	DeleteFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.DeleteFlowDefinitionInput) *SagemakerDeleteFlowDefinitionFuture

	DeleteHumanTaskUi(ctx workflow.Context, input *sagemaker.DeleteHumanTaskUiInput) (*sagemaker.DeleteHumanTaskUiOutput, error)
	DeleteHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.DeleteHumanTaskUiInput) *SagemakerDeleteHumanTaskUiFuture

	DeleteModel(ctx workflow.Context, input *sagemaker.DeleteModelInput) (*sagemaker.DeleteModelOutput, error)
	DeleteModelAsync(ctx workflow.Context, input *sagemaker.DeleteModelInput) *SagemakerDeleteModelFuture

	DeleteModelPackage(ctx workflow.Context, input *sagemaker.DeleteModelPackageInput) (*sagemaker.DeleteModelPackageOutput, error)
	DeleteModelPackageAsync(ctx workflow.Context, input *sagemaker.DeleteModelPackageInput) *SagemakerDeleteModelPackageFuture

	DeleteMonitoringSchedule(ctx workflow.Context, input *sagemaker.DeleteMonitoringScheduleInput) (*sagemaker.DeleteMonitoringScheduleOutput, error)
	DeleteMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.DeleteMonitoringScheduleInput) *SagemakerDeleteMonitoringScheduleFuture

	DeleteNotebookInstance(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceInput) (*sagemaker.DeleteNotebookInstanceOutput, error)
	DeleteNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceInput) *SagemakerDeleteNotebookInstanceFuture

	DeleteNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error)
	DeleteNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) *SagemakerDeleteNotebookInstanceLifecycleConfigFuture

	DeleteTags(ctx workflow.Context, input *sagemaker.DeleteTagsInput) (*sagemaker.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *sagemaker.DeleteTagsInput) *SagemakerDeleteTagsFuture

	DeleteTrial(ctx workflow.Context, input *sagemaker.DeleteTrialInput) (*sagemaker.DeleteTrialOutput, error)
	DeleteTrialAsync(ctx workflow.Context, input *sagemaker.DeleteTrialInput) *SagemakerDeleteTrialFuture

	DeleteTrialComponent(ctx workflow.Context, input *sagemaker.DeleteTrialComponentInput) (*sagemaker.DeleteTrialComponentOutput, error)
	DeleteTrialComponentAsync(ctx workflow.Context, input *sagemaker.DeleteTrialComponentInput) *SagemakerDeleteTrialComponentFuture

	DeleteUserProfile(ctx workflow.Context, input *sagemaker.DeleteUserProfileInput) (*sagemaker.DeleteUserProfileOutput, error)
	DeleteUserProfileAsync(ctx workflow.Context, input *sagemaker.DeleteUserProfileInput) *SagemakerDeleteUserProfileFuture

	DeleteWorkforce(ctx workflow.Context, input *sagemaker.DeleteWorkforceInput) (*sagemaker.DeleteWorkforceOutput, error)
	DeleteWorkforceAsync(ctx workflow.Context, input *sagemaker.DeleteWorkforceInput) *SagemakerDeleteWorkforceFuture

	DeleteWorkteam(ctx workflow.Context, input *sagemaker.DeleteWorkteamInput) (*sagemaker.DeleteWorkteamOutput, error)
	DeleteWorkteamAsync(ctx workflow.Context, input *sagemaker.DeleteWorkteamInput) *SagemakerDeleteWorkteamFuture

	DescribeAlgorithm(ctx workflow.Context, input *sagemaker.DescribeAlgorithmInput) (*sagemaker.DescribeAlgorithmOutput, error)
	DescribeAlgorithmAsync(ctx workflow.Context, input *sagemaker.DescribeAlgorithmInput) *SagemakerDescribeAlgorithmFuture

	DescribeApp(ctx workflow.Context, input *sagemaker.DescribeAppInput) (*sagemaker.DescribeAppOutput, error)
	DescribeAppAsync(ctx workflow.Context, input *sagemaker.DescribeAppInput) *SagemakerDescribeAppFuture

	DescribeAutoMLJob(ctx workflow.Context, input *sagemaker.DescribeAutoMLJobInput) (*sagemaker.DescribeAutoMLJobOutput, error)
	DescribeAutoMLJobAsync(ctx workflow.Context, input *sagemaker.DescribeAutoMLJobInput) *SagemakerDescribeAutoMLJobFuture

	DescribeCodeRepository(ctx workflow.Context, input *sagemaker.DescribeCodeRepositoryInput) (*sagemaker.DescribeCodeRepositoryOutput, error)
	DescribeCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.DescribeCodeRepositoryInput) *SagemakerDescribeCodeRepositoryFuture

	DescribeCompilationJob(ctx workflow.Context, input *sagemaker.DescribeCompilationJobInput) (*sagemaker.DescribeCompilationJobOutput, error)
	DescribeCompilationJobAsync(ctx workflow.Context, input *sagemaker.DescribeCompilationJobInput) *SagemakerDescribeCompilationJobFuture

	DescribeDomain(ctx workflow.Context, input *sagemaker.DescribeDomainInput) (*sagemaker.DescribeDomainOutput, error)
	DescribeDomainAsync(ctx workflow.Context, input *sagemaker.DescribeDomainInput) *SagemakerDescribeDomainFuture

	DescribeEndpoint(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) (*sagemaker.DescribeEndpointOutput, error)
	DescribeEndpointAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *SagemakerDescribeEndpointFuture

	DescribeEndpointConfig(ctx workflow.Context, input *sagemaker.DescribeEndpointConfigInput) (*sagemaker.DescribeEndpointConfigOutput, error)
	DescribeEndpointConfigAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointConfigInput) *SagemakerDescribeEndpointConfigFuture

	DescribeExperiment(ctx workflow.Context, input *sagemaker.DescribeExperimentInput) (*sagemaker.DescribeExperimentOutput, error)
	DescribeExperimentAsync(ctx workflow.Context, input *sagemaker.DescribeExperimentInput) *SagemakerDescribeExperimentFuture

	DescribeFlowDefinition(ctx workflow.Context, input *sagemaker.DescribeFlowDefinitionInput) (*sagemaker.DescribeFlowDefinitionOutput, error)
	DescribeFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.DescribeFlowDefinitionInput) *SagemakerDescribeFlowDefinitionFuture

	DescribeHumanTaskUi(ctx workflow.Context, input *sagemaker.DescribeHumanTaskUiInput) (*sagemaker.DescribeHumanTaskUiOutput, error)
	DescribeHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.DescribeHumanTaskUiInput) *SagemakerDescribeHumanTaskUiFuture

	DescribeHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.DescribeHyperParameterTuningJobInput) (*sagemaker.DescribeHyperParameterTuningJobOutput, error)
	DescribeHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.DescribeHyperParameterTuningJobInput) *SagemakerDescribeHyperParameterTuningJobFuture

	DescribeLabelingJob(ctx workflow.Context, input *sagemaker.DescribeLabelingJobInput) (*sagemaker.DescribeLabelingJobOutput, error)
	DescribeLabelingJobAsync(ctx workflow.Context, input *sagemaker.DescribeLabelingJobInput) *SagemakerDescribeLabelingJobFuture

	DescribeModel(ctx workflow.Context, input *sagemaker.DescribeModelInput) (*sagemaker.DescribeModelOutput, error)
	DescribeModelAsync(ctx workflow.Context, input *sagemaker.DescribeModelInput) *SagemakerDescribeModelFuture

	DescribeModelPackage(ctx workflow.Context, input *sagemaker.DescribeModelPackageInput) (*sagemaker.DescribeModelPackageOutput, error)
	DescribeModelPackageAsync(ctx workflow.Context, input *sagemaker.DescribeModelPackageInput) *SagemakerDescribeModelPackageFuture

	DescribeMonitoringSchedule(ctx workflow.Context, input *sagemaker.DescribeMonitoringScheduleInput) (*sagemaker.DescribeMonitoringScheduleOutput, error)
	DescribeMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.DescribeMonitoringScheduleInput) *SagemakerDescribeMonitoringScheduleFuture

	DescribeNotebookInstance(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) (*sagemaker.DescribeNotebookInstanceOutput, error)
	DescribeNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *SagemakerDescribeNotebookInstanceFuture

	DescribeNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error)
	DescribeNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) *SagemakerDescribeNotebookInstanceLifecycleConfigFuture

	DescribeProcessingJob(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) (*sagemaker.DescribeProcessingJobOutput, error)
	DescribeProcessingJobAsync(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) *SagemakerDescribeProcessingJobFuture

	DescribeSubscribedWorkteam(ctx workflow.Context, input *sagemaker.DescribeSubscribedWorkteamInput) (*sagemaker.DescribeSubscribedWorkteamOutput, error)
	DescribeSubscribedWorkteamAsync(ctx workflow.Context, input *sagemaker.DescribeSubscribedWorkteamInput) *SagemakerDescribeSubscribedWorkteamFuture

	DescribeTrainingJob(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) (*sagemaker.DescribeTrainingJobOutput, error)
	DescribeTrainingJobAsync(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) *SagemakerDescribeTrainingJobFuture

	DescribeTransformJob(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) (*sagemaker.DescribeTransformJobOutput, error)
	DescribeTransformJobAsync(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) *SagemakerDescribeTransformJobFuture

	DescribeTrial(ctx workflow.Context, input *sagemaker.DescribeTrialInput) (*sagemaker.DescribeTrialOutput, error)
	DescribeTrialAsync(ctx workflow.Context, input *sagemaker.DescribeTrialInput) *SagemakerDescribeTrialFuture

	DescribeTrialComponent(ctx workflow.Context, input *sagemaker.DescribeTrialComponentInput) (*sagemaker.DescribeTrialComponentOutput, error)
	DescribeTrialComponentAsync(ctx workflow.Context, input *sagemaker.DescribeTrialComponentInput) *SagemakerDescribeTrialComponentFuture

	DescribeUserProfile(ctx workflow.Context, input *sagemaker.DescribeUserProfileInput) (*sagemaker.DescribeUserProfileOutput, error)
	DescribeUserProfileAsync(ctx workflow.Context, input *sagemaker.DescribeUserProfileInput) *SagemakerDescribeUserProfileFuture

	DescribeWorkforce(ctx workflow.Context, input *sagemaker.DescribeWorkforceInput) (*sagemaker.DescribeWorkforceOutput, error)
	DescribeWorkforceAsync(ctx workflow.Context, input *sagemaker.DescribeWorkforceInput) *SagemakerDescribeWorkforceFuture

	DescribeWorkteam(ctx workflow.Context, input *sagemaker.DescribeWorkteamInput) (*sagemaker.DescribeWorkteamOutput, error)
	DescribeWorkteamAsync(ctx workflow.Context, input *sagemaker.DescribeWorkteamInput) *SagemakerDescribeWorkteamFuture

	DisassociateTrialComponent(ctx workflow.Context, input *sagemaker.DisassociateTrialComponentInput) (*sagemaker.DisassociateTrialComponentOutput, error)
	DisassociateTrialComponentAsync(ctx workflow.Context, input *sagemaker.DisassociateTrialComponentInput) *SagemakerDisassociateTrialComponentFuture

	GetSearchSuggestions(ctx workflow.Context, input *sagemaker.GetSearchSuggestionsInput) (*sagemaker.GetSearchSuggestionsOutput, error)
	GetSearchSuggestionsAsync(ctx workflow.Context, input *sagemaker.GetSearchSuggestionsInput) *SagemakerGetSearchSuggestionsFuture

	ListAlgorithms(ctx workflow.Context, input *sagemaker.ListAlgorithmsInput) (*sagemaker.ListAlgorithmsOutput, error)
	ListAlgorithmsAsync(ctx workflow.Context, input *sagemaker.ListAlgorithmsInput) *SagemakerListAlgorithmsFuture

	ListApps(ctx workflow.Context, input *sagemaker.ListAppsInput) (*sagemaker.ListAppsOutput, error)
	ListAppsAsync(ctx workflow.Context, input *sagemaker.ListAppsInput) *SagemakerListAppsFuture

	ListAutoMLJobs(ctx workflow.Context, input *sagemaker.ListAutoMLJobsInput) (*sagemaker.ListAutoMLJobsOutput, error)
	ListAutoMLJobsAsync(ctx workflow.Context, input *sagemaker.ListAutoMLJobsInput) *SagemakerListAutoMLJobsFuture

	ListCandidatesForAutoMLJob(ctx workflow.Context, input *sagemaker.ListCandidatesForAutoMLJobInput) (*sagemaker.ListCandidatesForAutoMLJobOutput, error)
	ListCandidatesForAutoMLJobAsync(ctx workflow.Context, input *sagemaker.ListCandidatesForAutoMLJobInput) *SagemakerListCandidatesForAutoMLJobFuture

	ListCodeRepositories(ctx workflow.Context, input *sagemaker.ListCodeRepositoriesInput) (*sagemaker.ListCodeRepositoriesOutput, error)
	ListCodeRepositoriesAsync(ctx workflow.Context, input *sagemaker.ListCodeRepositoriesInput) *SagemakerListCodeRepositoriesFuture

	ListCompilationJobs(ctx workflow.Context, input *sagemaker.ListCompilationJobsInput) (*sagemaker.ListCompilationJobsOutput, error)
	ListCompilationJobsAsync(ctx workflow.Context, input *sagemaker.ListCompilationJobsInput) *SagemakerListCompilationJobsFuture

	ListDomains(ctx workflow.Context, input *sagemaker.ListDomainsInput) (*sagemaker.ListDomainsOutput, error)
	ListDomainsAsync(ctx workflow.Context, input *sagemaker.ListDomainsInput) *SagemakerListDomainsFuture

	ListEndpointConfigs(ctx workflow.Context, input *sagemaker.ListEndpointConfigsInput) (*sagemaker.ListEndpointConfigsOutput, error)
	ListEndpointConfigsAsync(ctx workflow.Context, input *sagemaker.ListEndpointConfigsInput) *SagemakerListEndpointConfigsFuture

	ListEndpoints(ctx workflow.Context, input *sagemaker.ListEndpointsInput) (*sagemaker.ListEndpointsOutput, error)
	ListEndpointsAsync(ctx workflow.Context, input *sagemaker.ListEndpointsInput) *SagemakerListEndpointsFuture

	ListExperiments(ctx workflow.Context, input *sagemaker.ListExperimentsInput) (*sagemaker.ListExperimentsOutput, error)
	ListExperimentsAsync(ctx workflow.Context, input *sagemaker.ListExperimentsInput) *SagemakerListExperimentsFuture

	ListFlowDefinitions(ctx workflow.Context, input *sagemaker.ListFlowDefinitionsInput) (*sagemaker.ListFlowDefinitionsOutput, error)
	ListFlowDefinitionsAsync(ctx workflow.Context, input *sagemaker.ListFlowDefinitionsInput) *SagemakerListFlowDefinitionsFuture

	ListHumanTaskUis(ctx workflow.Context, input *sagemaker.ListHumanTaskUisInput) (*sagemaker.ListHumanTaskUisOutput, error)
	ListHumanTaskUisAsync(ctx workflow.Context, input *sagemaker.ListHumanTaskUisInput) *SagemakerListHumanTaskUisFuture

	ListHyperParameterTuningJobs(ctx workflow.Context, input *sagemaker.ListHyperParameterTuningJobsInput) (*sagemaker.ListHyperParameterTuningJobsOutput, error)
	ListHyperParameterTuningJobsAsync(ctx workflow.Context, input *sagemaker.ListHyperParameterTuningJobsInput) *SagemakerListHyperParameterTuningJobsFuture

	ListLabelingJobs(ctx workflow.Context, input *sagemaker.ListLabelingJobsInput) (*sagemaker.ListLabelingJobsOutput, error)
	ListLabelingJobsAsync(ctx workflow.Context, input *sagemaker.ListLabelingJobsInput) *SagemakerListLabelingJobsFuture

	ListLabelingJobsForWorkteam(ctx workflow.Context, input *sagemaker.ListLabelingJobsForWorkteamInput) (*sagemaker.ListLabelingJobsForWorkteamOutput, error)
	ListLabelingJobsForWorkteamAsync(ctx workflow.Context, input *sagemaker.ListLabelingJobsForWorkteamInput) *SagemakerListLabelingJobsForWorkteamFuture

	ListModelPackages(ctx workflow.Context, input *sagemaker.ListModelPackagesInput) (*sagemaker.ListModelPackagesOutput, error)
	ListModelPackagesAsync(ctx workflow.Context, input *sagemaker.ListModelPackagesInput) *SagemakerListModelPackagesFuture

	ListModels(ctx workflow.Context, input *sagemaker.ListModelsInput) (*sagemaker.ListModelsOutput, error)
	ListModelsAsync(ctx workflow.Context, input *sagemaker.ListModelsInput) *SagemakerListModelsFuture

	ListMonitoringExecutions(ctx workflow.Context, input *sagemaker.ListMonitoringExecutionsInput) (*sagemaker.ListMonitoringExecutionsOutput, error)
	ListMonitoringExecutionsAsync(ctx workflow.Context, input *sagemaker.ListMonitoringExecutionsInput) *SagemakerListMonitoringExecutionsFuture

	ListMonitoringSchedules(ctx workflow.Context, input *sagemaker.ListMonitoringSchedulesInput) (*sagemaker.ListMonitoringSchedulesOutput, error)
	ListMonitoringSchedulesAsync(ctx workflow.Context, input *sagemaker.ListMonitoringSchedulesInput) *SagemakerListMonitoringSchedulesFuture

	ListNotebookInstanceLifecycleConfigs(ctx workflow.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error)
	ListNotebookInstanceLifecycleConfigsAsync(ctx workflow.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput) *SagemakerListNotebookInstanceLifecycleConfigsFuture

	ListNotebookInstances(ctx workflow.Context, input *sagemaker.ListNotebookInstancesInput) (*sagemaker.ListNotebookInstancesOutput, error)
	ListNotebookInstancesAsync(ctx workflow.Context, input *sagemaker.ListNotebookInstancesInput) *SagemakerListNotebookInstancesFuture

	ListProcessingJobs(ctx workflow.Context, input *sagemaker.ListProcessingJobsInput) (*sagemaker.ListProcessingJobsOutput, error)
	ListProcessingJobsAsync(ctx workflow.Context, input *sagemaker.ListProcessingJobsInput) *SagemakerListProcessingJobsFuture

	ListSubscribedWorkteams(ctx workflow.Context, input *sagemaker.ListSubscribedWorkteamsInput) (*sagemaker.ListSubscribedWorkteamsOutput, error)
	ListSubscribedWorkteamsAsync(ctx workflow.Context, input *sagemaker.ListSubscribedWorkteamsInput) *SagemakerListSubscribedWorkteamsFuture

	ListTags(ctx workflow.Context, input *sagemaker.ListTagsInput) (*sagemaker.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *sagemaker.ListTagsInput) *SagemakerListTagsFuture

	ListTrainingJobs(ctx workflow.Context, input *sagemaker.ListTrainingJobsInput) (*sagemaker.ListTrainingJobsOutput, error)
	ListTrainingJobsAsync(ctx workflow.Context, input *sagemaker.ListTrainingJobsInput) *SagemakerListTrainingJobsFuture

	ListTrainingJobsForHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error)
	ListTrainingJobsForHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) *SagemakerListTrainingJobsForHyperParameterTuningJobFuture

	ListTransformJobs(ctx workflow.Context, input *sagemaker.ListTransformJobsInput) (*sagemaker.ListTransformJobsOutput, error)
	ListTransformJobsAsync(ctx workflow.Context, input *sagemaker.ListTransformJobsInput) *SagemakerListTransformJobsFuture

	ListTrialComponents(ctx workflow.Context, input *sagemaker.ListTrialComponentsInput) (*sagemaker.ListTrialComponentsOutput, error)
	ListTrialComponentsAsync(ctx workflow.Context, input *sagemaker.ListTrialComponentsInput) *SagemakerListTrialComponentsFuture

	ListTrials(ctx workflow.Context, input *sagemaker.ListTrialsInput) (*sagemaker.ListTrialsOutput, error)
	ListTrialsAsync(ctx workflow.Context, input *sagemaker.ListTrialsInput) *SagemakerListTrialsFuture

	ListUserProfiles(ctx workflow.Context, input *sagemaker.ListUserProfilesInput) (*sagemaker.ListUserProfilesOutput, error)
	ListUserProfilesAsync(ctx workflow.Context, input *sagemaker.ListUserProfilesInput) *SagemakerListUserProfilesFuture

	ListWorkforces(ctx workflow.Context, input *sagemaker.ListWorkforcesInput) (*sagemaker.ListWorkforcesOutput, error)
	ListWorkforcesAsync(ctx workflow.Context, input *sagemaker.ListWorkforcesInput) *SagemakerListWorkforcesFuture

	ListWorkteams(ctx workflow.Context, input *sagemaker.ListWorkteamsInput) (*sagemaker.ListWorkteamsOutput, error)
	ListWorkteamsAsync(ctx workflow.Context, input *sagemaker.ListWorkteamsInput) *SagemakerListWorkteamsFuture

	RenderUiTemplate(ctx workflow.Context, input *sagemaker.RenderUiTemplateInput) (*sagemaker.RenderUiTemplateOutput, error)
	RenderUiTemplateAsync(ctx workflow.Context, input *sagemaker.RenderUiTemplateInput) *SagemakerRenderUiTemplateFuture

	Search(ctx workflow.Context, input *sagemaker.SearchInput) (*sagemaker.SearchOutput, error)
	SearchAsync(ctx workflow.Context, input *sagemaker.SearchInput) *SagemakerSearchFuture

	StartMonitoringSchedule(ctx workflow.Context, input *sagemaker.StartMonitoringScheduleInput) (*sagemaker.StartMonitoringScheduleOutput, error)
	StartMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.StartMonitoringScheduleInput) *SagemakerStartMonitoringScheduleFuture

	StartNotebookInstance(ctx workflow.Context, input *sagemaker.StartNotebookInstanceInput) (*sagemaker.StartNotebookInstanceOutput, error)
	StartNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.StartNotebookInstanceInput) *SagemakerStartNotebookInstanceFuture

	StopAutoMLJob(ctx workflow.Context, input *sagemaker.StopAutoMLJobInput) (*sagemaker.StopAutoMLJobOutput, error)
	StopAutoMLJobAsync(ctx workflow.Context, input *sagemaker.StopAutoMLJobInput) *SagemakerStopAutoMLJobFuture

	StopCompilationJob(ctx workflow.Context, input *sagemaker.StopCompilationJobInput) (*sagemaker.StopCompilationJobOutput, error)
	StopCompilationJobAsync(ctx workflow.Context, input *sagemaker.StopCompilationJobInput) *SagemakerStopCompilationJobFuture

	StopHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.StopHyperParameterTuningJobInput) (*sagemaker.StopHyperParameterTuningJobOutput, error)
	StopHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.StopHyperParameterTuningJobInput) *SagemakerStopHyperParameterTuningJobFuture

	StopLabelingJob(ctx workflow.Context, input *sagemaker.StopLabelingJobInput) (*sagemaker.StopLabelingJobOutput, error)
	StopLabelingJobAsync(ctx workflow.Context, input *sagemaker.StopLabelingJobInput) *SagemakerStopLabelingJobFuture

	StopMonitoringSchedule(ctx workflow.Context, input *sagemaker.StopMonitoringScheduleInput) (*sagemaker.StopMonitoringScheduleOutput, error)
	StopMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.StopMonitoringScheduleInput) *SagemakerStopMonitoringScheduleFuture

	StopNotebookInstance(ctx workflow.Context, input *sagemaker.StopNotebookInstanceInput) (*sagemaker.StopNotebookInstanceOutput, error)
	StopNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.StopNotebookInstanceInput) *SagemakerStopNotebookInstanceFuture

	StopProcessingJob(ctx workflow.Context, input *sagemaker.StopProcessingJobInput) (*sagemaker.StopProcessingJobOutput, error)
	StopProcessingJobAsync(ctx workflow.Context, input *sagemaker.StopProcessingJobInput) *SagemakerStopProcessingJobFuture

	StopTrainingJob(ctx workflow.Context, input *sagemaker.StopTrainingJobInput) (*sagemaker.StopTrainingJobOutput, error)
	StopTrainingJobAsync(ctx workflow.Context, input *sagemaker.StopTrainingJobInput) *SagemakerStopTrainingJobFuture

	StopTransformJob(ctx workflow.Context, input *sagemaker.StopTransformJobInput) (*sagemaker.StopTransformJobOutput, error)
	StopTransformJobAsync(ctx workflow.Context, input *sagemaker.StopTransformJobInput) *SagemakerStopTransformJobFuture

	UpdateCodeRepository(ctx workflow.Context, input *sagemaker.UpdateCodeRepositoryInput) (*sagemaker.UpdateCodeRepositoryOutput, error)
	UpdateCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.UpdateCodeRepositoryInput) *SagemakerUpdateCodeRepositoryFuture

	UpdateDomain(ctx workflow.Context, input *sagemaker.UpdateDomainInput) (*sagemaker.UpdateDomainOutput, error)
	UpdateDomainAsync(ctx workflow.Context, input *sagemaker.UpdateDomainInput) *SagemakerUpdateDomainFuture

	UpdateEndpoint(ctx workflow.Context, input *sagemaker.UpdateEndpointInput) (*sagemaker.UpdateEndpointOutput, error)
	UpdateEndpointAsync(ctx workflow.Context, input *sagemaker.UpdateEndpointInput) *SagemakerUpdateEndpointFuture

	UpdateEndpointWeightsAndCapacities(ctx workflow.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error)
	UpdateEndpointWeightsAndCapacitiesAsync(ctx workflow.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) *SagemakerUpdateEndpointWeightsAndCapacitiesFuture

	UpdateExperiment(ctx workflow.Context, input *sagemaker.UpdateExperimentInput) (*sagemaker.UpdateExperimentOutput, error)
	UpdateExperimentAsync(ctx workflow.Context, input *sagemaker.UpdateExperimentInput) *SagemakerUpdateExperimentFuture

	UpdateMonitoringSchedule(ctx workflow.Context, input *sagemaker.UpdateMonitoringScheduleInput) (*sagemaker.UpdateMonitoringScheduleOutput, error)
	UpdateMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.UpdateMonitoringScheduleInput) *SagemakerUpdateMonitoringScheduleFuture

	UpdateNotebookInstance(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceInput) (*sagemaker.UpdateNotebookInstanceOutput, error)
	UpdateNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceInput) *SagemakerUpdateNotebookInstanceFuture

	UpdateNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error)
	UpdateNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) *SagemakerUpdateNotebookInstanceLifecycleConfigFuture

	UpdateTrial(ctx workflow.Context, input *sagemaker.UpdateTrialInput) (*sagemaker.UpdateTrialOutput, error)
	UpdateTrialAsync(ctx workflow.Context, input *sagemaker.UpdateTrialInput) *SagemakerUpdateTrialFuture

	UpdateTrialComponent(ctx workflow.Context, input *sagemaker.UpdateTrialComponentInput) (*sagemaker.UpdateTrialComponentOutput, error)
	UpdateTrialComponentAsync(ctx workflow.Context, input *sagemaker.UpdateTrialComponentInput) *SagemakerUpdateTrialComponentFuture

	UpdateUserProfile(ctx workflow.Context, input *sagemaker.UpdateUserProfileInput) (*sagemaker.UpdateUserProfileOutput, error)
	UpdateUserProfileAsync(ctx workflow.Context, input *sagemaker.UpdateUserProfileInput) *SagemakerUpdateUserProfileFuture

	UpdateWorkforce(ctx workflow.Context, input *sagemaker.UpdateWorkforceInput) (*sagemaker.UpdateWorkforceOutput, error)
	UpdateWorkforceAsync(ctx workflow.Context, input *sagemaker.UpdateWorkforceInput) *SagemakerUpdateWorkforceFuture

	UpdateWorkteam(ctx workflow.Context, input *sagemaker.UpdateWorkteamInput) (*sagemaker.UpdateWorkteamOutput, error)
	UpdateWorkteamAsync(ctx workflow.Context, input *sagemaker.UpdateWorkteamInput) *SagemakerUpdateWorkteamFuture

	WaitUntilEndpointDeleted(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) error
	WaitUntilEndpointDeletedAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *VoidFuture

	WaitUntilEndpointInService(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) error
	WaitUntilEndpointInServiceAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *VoidFuture

	WaitUntilNotebookInstanceDeleted(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error
	WaitUntilNotebookInstanceDeletedAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *VoidFuture

	WaitUntilNotebookInstanceInService(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error
	WaitUntilNotebookInstanceInServiceAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *VoidFuture

	WaitUntilNotebookInstanceStopped(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error
	WaitUntilNotebookInstanceStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *VoidFuture

	WaitUntilProcessingJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) error
	WaitUntilProcessingJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) *VoidFuture

	WaitUntilTrainingJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) error
	WaitUntilTrainingJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) *VoidFuture

	WaitUntilTransformJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) error
	WaitUntilTransformJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) *VoidFuture
}

type SageMakerStub struct{}

func NewSageMakerStub() SageMakerClient {
	return &SageMakerStub{}
}

type SagemakerAddTagsFuture struct {
	Future workflow.Future
}

func (r *SagemakerAddTagsFuture) Get(ctx workflow.Context) (*sagemaker.AddTagsOutput, error) {
	var output sagemaker.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerAssociateTrialComponentFuture struct {
	Future workflow.Future
}

func (r *SagemakerAssociateTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.AssociateTrialComponentOutput, error) {
	var output sagemaker.AssociateTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateAlgorithmFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateAlgorithmFuture) Get(ctx workflow.Context) (*sagemaker.CreateAlgorithmOutput, error) {
	var output sagemaker.CreateAlgorithmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateAppFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateAppFuture) Get(ctx workflow.Context) (*sagemaker.CreateAppOutput, error) {
	var output sagemaker.CreateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateAutoMLJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateAutoMLJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateAutoMLJobOutput, error) {
	var output sagemaker.CreateAutoMLJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateCodeRepositoryFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateCodeRepositoryFuture) Get(ctx workflow.Context) (*sagemaker.CreateCodeRepositoryOutput, error) {
	var output sagemaker.CreateCodeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateCompilationJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateCompilationJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateCompilationJobOutput, error) {
	var output sagemaker.CreateCompilationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateDomainFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateDomainFuture) Get(ctx workflow.Context) (*sagemaker.CreateDomainOutput, error) {
	var output sagemaker.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateEndpointFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateEndpointFuture) Get(ctx workflow.Context) (*sagemaker.CreateEndpointOutput, error) {
	var output sagemaker.CreateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateEndpointConfigFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateEndpointConfigFuture) Get(ctx workflow.Context) (*sagemaker.CreateEndpointConfigOutput, error) {
	var output sagemaker.CreateEndpointConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateExperimentFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateExperimentFuture) Get(ctx workflow.Context) (*sagemaker.CreateExperimentOutput, error) {
	var output sagemaker.CreateExperimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateFlowDefinitionFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateFlowDefinitionFuture) Get(ctx workflow.Context) (*sagemaker.CreateFlowDefinitionOutput, error) {
	var output sagemaker.CreateFlowDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateHumanTaskUiFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateHumanTaskUiFuture) Get(ctx workflow.Context) (*sagemaker.CreateHumanTaskUiOutput, error) {
	var output sagemaker.CreateHumanTaskUiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateHyperParameterTuningJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateHyperParameterTuningJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {
	var output sagemaker.CreateHyperParameterTuningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateLabelingJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateLabelingJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateLabelingJobOutput, error) {
	var output sagemaker.CreateLabelingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateModelFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateModelFuture) Get(ctx workflow.Context) (*sagemaker.CreateModelOutput, error) {
	var output sagemaker.CreateModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateModelPackageFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateModelPackageFuture) Get(ctx workflow.Context) (*sagemaker.CreateModelPackageOutput, error) {
	var output sagemaker.CreateModelPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateMonitoringScheduleFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.CreateMonitoringScheduleOutput, error) {
	var output sagemaker.CreateMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateNotebookInstanceFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.CreateNotebookInstanceOutput, error) {
	var output sagemaker.CreateNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateNotebookInstanceLifecycleConfigFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateNotebookInstanceLifecycleConfigFuture) Get(ctx workflow.Context) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.CreateNotebookInstanceLifecycleConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreatePresignedDomainUrlFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreatePresignedDomainUrlFuture) Get(ctx workflow.Context) (*sagemaker.CreatePresignedDomainUrlOutput, error) {
	var output sagemaker.CreatePresignedDomainUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreatePresignedNotebookInstanceUrlFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreatePresignedNotebookInstanceUrlFuture) Get(ctx workflow.Context) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	var output sagemaker.CreatePresignedNotebookInstanceUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateProcessingJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateProcessingJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateProcessingJobOutput, error) {
	var output sagemaker.CreateProcessingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateTrainingJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateTrainingJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateTrainingJobOutput, error) {
	var output sagemaker.CreateTrainingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateTransformJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateTransformJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateTransformJobOutput, error) {
	var output sagemaker.CreateTransformJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateTrialFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateTrialFuture) Get(ctx workflow.Context) (*sagemaker.CreateTrialOutput, error) {
	var output sagemaker.CreateTrialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateTrialComponentFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.CreateTrialComponentOutput, error) {
	var output sagemaker.CreateTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateUserProfileFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateUserProfileFuture) Get(ctx workflow.Context) (*sagemaker.CreateUserProfileOutput, error) {
	var output sagemaker.CreateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateWorkforceFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateWorkforceFuture) Get(ctx workflow.Context) (*sagemaker.CreateWorkforceOutput, error) {
	var output sagemaker.CreateWorkforceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerCreateWorkteamFuture struct {
	Future workflow.Future
}

func (r *SagemakerCreateWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.CreateWorkteamOutput, error) {
	var output sagemaker.CreateWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteAlgorithmFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteAlgorithmFuture) Get(ctx workflow.Context) (*sagemaker.DeleteAlgorithmOutput, error) {
	var output sagemaker.DeleteAlgorithmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteAppFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteAppFuture) Get(ctx workflow.Context) (*sagemaker.DeleteAppOutput, error) {
	var output sagemaker.DeleteAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteCodeRepositoryFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteCodeRepositoryFuture) Get(ctx workflow.Context) (*sagemaker.DeleteCodeRepositoryOutput, error) {
	var output sagemaker.DeleteCodeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteDomainFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteDomainFuture) Get(ctx workflow.Context) (*sagemaker.DeleteDomainOutput, error) {
	var output sagemaker.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteEndpointFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteEndpointFuture) Get(ctx workflow.Context) (*sagemaker.DeleteEndpointOutput, error) {
	var output sagemaker.DeleteEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteEndpointConfigFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteEndpointConfigFuture) Get(ctx workflow.Context) (*sagemaker.DeleteEndpointConfigOutput, error) {
	var output sagemaker.DeleteEndpointConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteExperimentFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteExperimentFuture) Get(ctx workflow.Context) (*sagemaker.DeleteExperimentOutput, error) {
	var output sagemaker.DeleteExperimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteFlowDefinitionFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteFlowDefinitionFuture) Get(ctx workflow.Context) (*sagemaker.DeleteFlowDefinitionOutput, error) {
	var output sagemaker.DeleteFlowDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteHumanTaskUiFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteHumanTaskUiFuture) Get(ctx workflow.Context) (*sagemaker.DeleteHumanTaskUiOutput, error) {
	var output sagemaker.DeleteHumanTaskUiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteModelFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteModelFuture) Get(ctx workflow.Context) (*sagemaker.DeleteModelOutput, error) {
	var output sagemaker.DeleteModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteModelPackageFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteModelPackageFuture) Get(ctx workflow.Context) (*sagemaker.DeleteModelPackageOutput, error) {
	var output sagemaker.DeleteModelPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteMonitoringScheduleFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.DeleteMonitoringScheduleOutput, error) {
	var output sagemaker.DeleteMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteNotebookInstanceFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	var output sagemaker.DeleteNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteNotebookInstanceLifecycleConfigFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteNotebookInstanceLifecycleConfigFuture) Get(ctx workflow.Context) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.DeleteNotebookInstanceLifecycleConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteTagsFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteTagsFuture) Get(ctx workflow.Context) (*sagemaker.DeleteTagsOutput, error) {
	var output sagemaker.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteTrialFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteTrialFuture) Get(ctx workflow.Context) (*sagemaker.DeleteTrialOutput, error) {
	var output sagemaker.DeleteTrialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteTrialComponentFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.DeleteTrialComponentOutput, error) {
	var output sagemaker.DeleteTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteUserProfileFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteUserProfileFuture) Get(ctx workflow.Context) (*sagemaker.DeleteUserProfileOutput, error) {
	var output sagemaker.DeleteUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteWorkforceFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteWorkforceFuture) Get(ctx workflow.Context) (*sagemaker.DeleteWorkforceOutput, error) {
	var output sagemaker.DeleteWorkforceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDeleteWorkteamFuture struct {
	Future workflow.Future
}

func (r *SagemakerDeleteWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.DeleteWorkteamOutput, error) {
	var output sagemaker.DeleteWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeAlgorithmFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeAlgorithmFuture) Get(ctx workflow.Context) (*sagemaker.DescribeAlgorithmOutput, error) {
	var output sagemaker.DescribeAlgorithmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeAppFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeAppFuture) Get(ctx workflow.Context) (*sagemaker.DescribeAppOutput, error) {
	var output sagemaker.DescribeAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeAutoMLJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeAutoMLJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeAutoMLJobOutput, error) {
	var output sagemaker.DescribeAutoMLJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeCodeRepositoryFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeCodeRepositoryFuture) Get(ctx workflow.Context) (*sagemaker.DescribeCodeRepositoryOutput, error) {
	var output sagemaker.DescribeCodeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeCompilationJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeCompilationJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeCompilationJobOutput, error) {
	var output sagemaker.DescribeCompilationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeDomainFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeDomainFuture) Get(ctx workflow.Context) (*sagemaker.DescribeDomainOutput, error) {
	var output sagemaker.DescribeDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeEndpointFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeEndpointFuture) Get(ctx workflow.Context) (*sagemaker.DescribeEndpointOutput, error) {
	var output sagemaker.DescribeEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeEndpointConfigFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeEndpointConfigFuture) Get(ctx workflow.Context) (*sagemaker.DescribeEndpointConfigOutput, error) {
	var output sagemaker.DescribeEndpointConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeExperimentFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeExperimentFuture) Get(ctx workflow.Context) (*sagemaker.DescribeExperimentOutput, error) {
	var output sagemaker.DescribeExperimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeFlowDefinitionFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeFlowDefinitionFuture) Get(ctx workflow.Context) (*sagemaker.DescribeFlowDefinitionOutput, error) {
	var output sagemaker.DescribeFlowDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeHumanTaskUiFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeHumanTaskUiFuture) Get(ctx workflow.Context) (*sagemaker.DescribeHumanTaskUiOutput, error) {
	var output sagemaker.DescribeHumanTaskUiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeHyperParameterTuningJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeHyperParameterTuningJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {
	var output sagemaker.DescribeHyperParameterTuningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeLabelingJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeLabelingJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeLabelingJobOutput, error) {
	var output sagemaker.DescribeLabelingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeModelFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeModelFuture) Get(ctx workflow.Context) (*sagemaker.DescribeModelOutput, error) {
	var output sagemaker.DescribeModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeModelPackageFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeModelPackageFuture) Get(ctx workflow.Context) (*sagemaker.DescribeModelPackageOutput, error) {
	var output sagemaker.DescribeModelPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeMonitoringScheduleFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.DescribeMonitoringScheduleOutput, error) {
	var output sagemaker.DescribeMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeNotebookInstanceFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	var output sagemaker.DescribeNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeNotebookInstanceLifecycleConfigFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeNotebookInstanceLifecycleConfigFuture) Get(ctx workflow.Context) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.DescribeNotebookInstanceLifecycleConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeProcessingJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeProcessingJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeProcessingJobOutput, error) {
	var output sagemaker.DescribeProcessingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeSubscribedWorkteamFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeSubscribedWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.DescribeSubscribedWorkteamOutput, error) {
	var output sagemaker.DescribeSubscribedWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeTrainingJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeTrainingJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeTrainingJobOutput, error) {
	var output sagemaker.DescribeTrainingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeTransformJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeTransformJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeTransformJobOutput, error) {
	var output sagemaker.DescribeTransformJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeTrialFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeTrialFuture) Get(ctx workflow.Context) (*sagemaker.DescribeTrialOutput, error) {
	var output sagemaker.DescribeTrialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeTrialComponentFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.DescribeTrialComponentOutput, error) {
	var output sagemaker.DescribeTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeUserProfileFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeUserProfileFuture) Get(ctx workflow.Context) (*sagemaker.DescribeUserProfileOutput, error) {
	var output sagemaker.DescribeUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeWorkforceFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeWorkforceFuture) Get(ctx workflow.Context) (*sagemaker.DescribeWorkforceOutput, error) {
	var output sagemaker.DescribeWorkforceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDescribeWorkteamFuture struct {
	Future workflow.Future
}

func (r *SagemakerDescribeWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.DescribeWorkteamOutput, error) {
	var output sagemaker.DescribeWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerDisassociateTrialComponentFuture struct {
	Future workflow.Future
}

func (r *SagemakerDisassociateTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.DisassociateTrialComponentOutput, error) {
	var output sagemaker.DisassociateTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerGetSearchSuggestionsFuture struct {
	Future workflow.Future
}

func (r *SagemakerGetSearchSuggestionsFuture) Get(ctx workflow.Context) (*sagemaker.GetSearchSuggestionsOutput, error) {
	var output sagemaker.GetSearchSuggestionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListAlgorithmsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListAlgorithmsFuture) Get(ctx workflow.Context) (*sagemaker.ListAlgorithmsOutput, error) {
	var output sagemaker.ListAlgorithmsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListAppsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListAppsFuture) Get(ctx workflow.Context) (*sagemaker.ListAppsOutput, error) {
	var output sagemaker.ListAppsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListAutoMLJobsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListAutoMLJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListAutoMLJobsOutput, error) {
	var output sagemaker.ListAutoMLJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListCandidatesForAutoMLJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerListCandidatesForAutoMLJobFuture) Get(ctx workflow.Context) (*sagemaker.ListCandidatesForAutoMLJobOutput, error) {
	var output sagemaker.ListCandidatesForAutoMLJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListCodeRepositoriesFuture struct {
	Future workflow.Future
}

func (r *SagemakerListCodeRepositoriesFuture) Get(ctx workflow.Context) (*sagemaker.ListCodeRepositoriesOutput, error) {
	var output sagemaker.ListCodeRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListCompilationJobsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListCompilationJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListCompilationJobsOutput, error) {
	var output sagemaker.ListCompilationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListDomainsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListDomainsFuture) Get(ctx workflow.Context) (*sagemaker.ListDomainsOutput, error) {
	var output sagemaker.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListEndpointConfigsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListEndpointConfigsFuture) Get(ctx workflow.Context) (*sagemaker.ListEndpointConfigsOutput, error) {
	var output sagemaker.ListEndpointConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListEndpointsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListEndpointsFuture) Get(ctx workflow.Context) (*sagemaker.ListEndpointsOutput, error) {
	var output sagemaker.ListEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListExperimentsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListExperimentsFuture) Get(ctx workflow.Context) (*sagemaker.ListExperimentsOutput, error) {
	var output sagemaker.ListExperimentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListFlowDefinitionsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListFlowDefinitionsFuture) Get(ctx workflow.Context) (*sagemaker.ListFlowDefinitionsOutput, error) {
	var output sagemaker.ListFlowDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListHumanTaskUisFuture struct {
	Future workflow.Future
}

func (r *SagemakerListHumanTaskUisFuture) Get(ctx workflow.Context) (*sagemaker.ListHumanTaskUisOutput, error) {
	var output sagemaker.ListHumanTaskUisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListHyperParameterTuningJobsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListHyperParameterTuningJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {
	var output sagemaker.ListHyperParameterTuningJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListLabelingJobsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListLabelingJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListLabelingJobsOutput, error) {
	var output sagemaker.ListLabelingJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListLabelingJobsForWorkteamFuture struct {
	Future workflow.Future
}

func (r *SagemakerListLabelingJobsForWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.ListLabelingJobsForWorkteamOutput, error) {
	var output sagemaker.ListLabelingJobsForWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListModelPackagesFuture struct {
	Future workflow.Future
}

func (r *SagemakerListModelPackagesFuture) Get(ctx workflow.Context) (*sagemaker.ListModelPackagesOutput, error) {
	var output sagemaker.ListModelPackagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListModelsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListModelsFuture) Get(ctx workflow.Context) (*sagemaker.ListModelsOutput, error) {
	var output sagemaker.ListModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListMonitoringExecutionsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListMonitoringExecutionsFuture) Get(ctx workflow.Context) (*sagemaker.ListMonitoringExecutionsOutput, error) {
	var output sagemaker.ListMonitoringExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListMonitoringSchedulesFuture struct {
	Future workflow.Future
}

func (r *SagemakerListMonitoringSchedulesFuture) Get(ctx workflow.Context) (*sagemaker.ListMonitoringSchedulesOutput, error) {
	var output sagemaker.ListMonitoringSchedulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListNotebookInstanceLifecycleConfigsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListNotebookInstanceLifecycleConfigsFuture) Get(ctx workflow.Context) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {
	var output sagemaker.ListNotebookInstanceLifecycleConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListNotebookInstancesFuture struct {
	Future workflow.Future
}

func (r *SagemakerListNotebookInstancesFuture) Get(ctx workflow.Context) (*sagemaker.ListNotebookInstancesOutput, error) {
	var output sagemaker.ListNotebookInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListProcessingJobsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListProcessingJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListProcessingJobsOutput, error) {
	var output sagemaker.ListProcessingJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListSubscribedWorkteamsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListSubscribedWorkteamsFuture) Get(ctx workflow.Context) (*sagemaker.ListSubscribedWorkteamsOutput, error) {
	var output sagemaker.ListSubscribedWorkteamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListTagsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListTagsFuture) Get(ctx workflow.Context) (*sagemaker.ListTagsOutput, error) {
	var output sagemaker.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListTrainingJobsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListTrainingJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListTrainingJobsOutput, error) {
	var output sagemaker.ListTrainingJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListTrainingJobsForHyperParameterTuningJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerListTrainingJobsForHyperParameterTuningJobFuture) Get(ctx workflow.Context) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {
	var output sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListTransformJobsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListTransformJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListTransformJobsOutput, error) {
	var output sagemaker.ListTransformJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListTrialComponentsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListTrialComponentsFuture) Get(ctx workflow.Context) (*sagemaker.ListTrialComponentsOutput, error) {
	var output sagemaker.ListTrialComponentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListTrialsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListTrialsFuture) Get(ctx workflow.Context) (*sagemaker.ListTrialsOutput, error) {
	var output sagemaker.ListTrialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListUserProfilesFuture struct {
	Future workflow.Future
}

func (r *SagemakerListUserProfilesFuture) Get(ctx workflow.Context) (*sagemaker.ListUserProfilesOutput, error) {
	var output sagemaker.ListUserProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListWorkforcesFuture struct {
	Future workflow.Future
}

func (r *SagemakerListWorkforcesFuture) Get(ctx workflow.Context) (*sagemaker.ListWorkforcesOutput, error) {
	var output sagemaker.ListWorkforcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerListWorkteamsFuture struct {
	Future workflow.Future
}

func (r *SagemakerListWorkteamsFuture) Get(ctx workflow.Context) (*sagemaker.ListWorkteamsOutput, error) {
	var output sagemaker.ListWorkteamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerRenderUiTemplateFuture struct {
	Future workflow.Future
}

func (r *SagemakerRenderUiTemplateFuture) Get(ctx workflow.Context) (*sagemaker.RenderUiTemplateOutput, error) {
	var output sagemaker.RenderUiTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerSearchFuture struct {
	Future workflow.Future
}

func (r *SagemakerSearchFuture) Get(ctx workflow.Context) (*sagemaker.SearchOutput, error) {
	var output sagemaker.SearchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerStartMonitoringScheduleFuture struct {
	Future workflow.Future
}

func (r *SagemakerStartMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.StartMonitoringScheduleOutput, error) {
	var output sagemaker.StartMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerStartNotebookInstanceFuture struct {
	Future workflow.Future
}

func (r *SagemakerStartNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.StartNotebookInstanceOutput, error) {
	var output sagemaker.StartNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerStopAutoMLJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerStopAutoMLJobFuture) Get(ctx workflow.Context) (*sagemaker.StopAutoMLJobOutput, error) {
	var output sagemaker.StopAutoMLJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerStopCompilationJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerStopCompilationJobFuture) Get(ctx workflow.Context) (*sagemaker.StopCompilationJobOutput, error) {
	var output sagemaker.StopCompilationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerStopHyperParameterTuningJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerStopHyperParameterTuningJobFuture) Get(ctx workflow.Context) (*sagemaker.StopHyperParameterTuningJobOutput, error) {
	var output sagemaker.StopHyperParameterTuningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerStopLabelingJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerStopLabelingJobFuture) Get(ctx workflow.Context) (*sagemaker.StopLabelingJobOutput, error) {
	var output sagemaker.StopLabelingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerStopMonitoringScheduleFuture struct {
	Future workflow.Future
}

func (r *SagemakerStopMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.StopMonitoringScheduleOutput, error) {
	var output sagemaker.StopMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerStopNotebookInstanceFuture struct {
	Future workflow.Future
}

func (r *SagemakerStopNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.StopNotebookInstanceOutput, error) {
	var output sagemaker.StopNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerStopProcessingJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerStopProcessingJobFuture) Get(ctx workflow.Context) (*sagemaker.StopProcessingJobOutput, error) {
	var output sagemaker.StopProcessingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerStopTrainingJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerStopTrainingJobFuture) Get(ctx workflow.Context) (*sagemaker.StopTrainingJobOutput, error) {
	var output sagemaker.StopTrainingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerStopTransformJobFuture struct {
	Future workflow.Future
}

func (r *SagemakerStopTransformJobFuture) Get(ctx workflow.Context) (*sagemaker.StopTransformJobOutput, error) {
	var output sagemaker.StopTransformJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateCodeRepositoryFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateCodeRepositoryFuture) Get(ctx workflow.Context) (*sagemaker.UpdateCodeRepositoryOutput, error) {
	var output sagemaker.UpdateCodeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateDomainFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateDomainFuture) Get(ctx workflow.Context) (*sagemaker.UpdateDomainOutput, error) {
	var output sagemaker.UpdateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateEndpointFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateEndpointFuture) Get(ctx workflow.Context) (*sagemaker.UpdateEndpointOutput, error) {
	var output sagemaker.UpdateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateEndpointWeightsAndCapacitiesFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateEndpointWeightsAndCapacitiesFuture) Get(ctx workflow.Context) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	var output sagemaker.UpdateEndpointWeightsAndCapacitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateExperimentFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateExperimentFuture) Get(ctx workflow.Context) (*sagemaker.UpdateExperimentOutput, error) {
	var output sagemaker.UpdateExperimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateMonitoringScheduleFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.UpdateMonitoringScheduleOutput, error) {
	var output sagemaker.UpdateMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateNotebookInstanceFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	var output sagemaker.UpdateNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateNotebookInstanceLifecycleConfigFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateNotebookInstanceLifecycleConfigFuture) Get(ctx workflow.Context) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.UpdateNotebookInstanceLifecycleConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateTrialFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateTrialFuture) Get(ctx workflow.Context) (*sagemaker.UpdateTrialOutput, error) {
	var output sagemaker.UpdateTrialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateTrialComponentFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.UpdateTrialComponentOutput, error) {
	var output sagemaker.UpdateTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateUserProfileFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateUserProfileFuture) Get(ctx workflow.Context) (*sagemaker.UpdateUserProfileOutput, error) {
	var output sagemaker.UpdateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateWorkforceFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateWorkforceFuture) Get(ctx workflow.Context) (*sagemaker.UpdateWorkforceOutput, error) {
	var output sagemaker.UpdateWorkforceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SagemakerUpdateWorkteamFuture struct {
	Future workflow.Future
}

func (r *SagemakerUpdateWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.UpdateWorkteamOutput, error) {
	var output sagemaker.UpdateWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) AddTags(ctx workflow.Context, input *sagemaker.AddTagsInput) (*sagemaker.AddTagsOutput, error) {
	var output sagemaker.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) AddTagsAsync(ctx workflow.Context, input *sagemaker.AddTagsInput) *SagemakerAddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.AddTags", input)
	return &SagemakerAddTagsFuture{Future: future}
}

func (a *SageMakerStub) AssociateTrialComponent(ctx workflow.Context, input *sagemaker.AssociateTrialComponentInput) (*sagemaker.AssociateTrialComponentOutput, error) {
	var output sagemaker.AssociateTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.AssociateTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) AssociateTrialComponentAsync(ctx workflow.Context, input *sagemaker.AssociateTrialComponentInput) *SagemakerAssociateTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.AssociateTrialComponent", input)
	return &SagemakerAssociateTrialComponentFuture{Future: future}
}

func (a *SageMakerStub) CreateAlgorithm(ctx workflow.Context, input *sagemaker.CreateAlgorithmInput) (*sagemaker.CreateAlgorithmOutput, error) {
	var output sagemaker.CreateAlgorithmOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateAlgorithm", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateAlgorithmAsync(ctx workflow.Context, input *sagemaker.CreateAlgorithmInput) *SagemakerCreateAlgorithmFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateAlgorithm", input)
	return &SagemakerCreateAlgorithmFuture{Future: future}
}

func (a *SageMakerStub) CreateApp(ctx workflow.Context, input *sagemaker.CreateAppInput) (*sagemaker.CreateAppOutput, error) {
	var output sagemaker.CreateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateAppAsync(ctx workflow.Context, input *sagemaker.CreateAppInput) *SagemakerCreateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateApp", input)
	return &SagemakerCreateAppFuture{Future: future}
}

func (a *SageMakerStub) CreateAutoMLJob(ctx workflow.Context, input *sagemaker.CreateAutoMLJobInput) (*sagemaker.CreateAutoMLJobOutput, error) {
	var output sagemaker.CreateAutoMLJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateAutoMLJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateAutoMLJobAsync(ctx workflow.Context, input *sagemaker.CreateAutoMLJobInput) *SagemakerCreateAutoMLJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateAutoMLJob", input)
	return &SagemakerCreateAutoMLJobFuture{Future: future}
}

func (a *SageMakerStub) CreateCodeRepository(ctx workflow.Context, input *sagemaker.CreateCodeRepositoryInput) (*sagemaker.CreateCodeRepositoryOutput, error) {
	var output sagemaker.CreateCodeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateCodeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.CreateCodeRepositoryInput) *SagemakerCreateCodeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateCodeRepository", input)
	return &SagemakerCreateCodeRepositoryFuture{Future: future}
}

func (a *SageMakerStub) CreateCompilationJob(ctx workflow.Context, input *sagemaker.CreateCompilationJobInput) (*sagemaker.CreateCompilationJobOutput, error) {
	var output sagemaker.CreateCompilationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateCompilationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateCompilationJobAsync(ctx workflow.Context, input *sagemaker.CreateCompilationJobInput) *SagemakerCreateCompilationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateCompilationJob", input)
	return &SagemakerCreateCompilationJobFuture{Future: future}
}

func (a *SageMakerStub) CreateDomain(ctx workflow.Context, input *sagemaker.CreateDomainInput) (*sagemaker.CreateDomainOutput, error) {
	var output sagemaker.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateDomainAsync(ctx workflow.Context, input *sagemaker.CreateDomainInput) *SagemakerCreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateDomain", input)
	return &SagemakerCreateDomainFuture{Future: future}
}

func (a *SageMakerStub) CreateEndpoint(ctx workflow.Context, input *sagemaker.CreateEndpointInput) (*sagemaker.CreateEndpointOutput, error) {
	var output sagemaker.CreateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateEndpointAsync(ctx workflow.Context, input *sagemaker.CreateEndpointInput) *SagemakerCreateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateEndpoint", input)
	return &SagemakerCreateEndpointFuture{Future: future}
}

func (a *SageMakerStub) CreateEndpointConfig(ctx workflow.Context, input *sagemaker.CreateEndpointConfigInput) (*sagemaker.CreateEndpointConfigOutput, error) {
	var output sagemaker.CreateEndpointConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateEndpointConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateEndpointConfigAsync(ctx workflow.Context, input *sagemaker.CreateEndpointConfigInput) *SagemakerCreateEndpointConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateEndpointConfig", input)
	return &SagemakerCreateEndpointConfigFuture{Future: future}
}

func (a *SageMakerStub) CreateExperiment(ctx workflow.Context, input *sagemaker.CreateExperimentInput) (*sagemaker.CreateExperimentOutput, error) {
	var output sagemaker.CreateExperimentOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateExperiment", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateExperimentAsync(ctx workflow.Context, input *sagemaker.CreateExperimentInput) *SagemakerCreateExperimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateExperiment", input)
	return &SagemakerCreateExperimentFuture{Future: future}
}

func (a *SageMakerStub) CreateFlowDefinition(ctx workflow.Context, input *sagemaker.CreateFlowDefinitionInput) (*sagemaker.CreateFlowDefinitionOutput, error) {
	var output sagemaker.CreateFlowDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateFlowDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.CreateFlowDefinitionInput) *SagemakerCreateFlowDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateFlowDefinition", input)
	return &SagemakerCreateFlowDefinitionFuture{Future: future}
}

func (a *SageMakerStub) CreateHumanTaskUi(ctx workflow.Context, input *sagemaker.CreateHumanTaskUiInput) (*sagemaker.CreateHumanTaskUiOutput, error) {
	var output sagemaker.CreateHumanTaskUiOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateHumanTaskUi", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.CreateHumanTaskUiInput) *SagemakerCreateHumanTaskUiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateHumanTaskUi", input)
	return &SagemakerCreateHumanTaskUiFuture{Future: future}
}

func (a *SageMakerStub) CreateHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.CreateHyperParameterTuningJobInput) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {
	var output sagemaker.CreateHyperParameterTuningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateHyperParameterTuningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.CreateHyperParameterTuningJobInput) *SagemakerCreateHyperParameterTuningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateHyperParameterTuningJob", input)
	return &SagemakerCreateHyperParameterTuningJobFuture{Future: future}
}

func (a *SageMakerStub) CreateLabelingJob(ctx workflow.Context, input *sagemaker.CreateLabelingJobInput) (*sagemaker.CreateLabelingJobOutput, error) {
	var output sagemaker.CreateLabelingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateLabelingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateLabelingJobAsync(ctx workflow.Context, input *sagemaker.CreateLabelingJobInput) *SagemakerCreateLabelingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateLabelingJob", input)
	return &SagemakerCreateLabelingJobFuture{Future: future}
}

func (a *SageMakerStub) CreateModel(ctx workflow.Context, input *sagemaker.CreateModelInput) (*sagemaker.CreateModelOutput, error) {
	var output sagemaker.CreateModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateModelAsync(ctx workflow.Context, input *sagemaker.CreateModelInput) *SagemakerCreateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateModel", input)
	return &SagemakerCreateModelFuture{Future: future}
}

func (a *SageMakerStub) CreateModelPackage(ctx workflow.Context, input *sagemaker.CreateModelPackageInput) (*sagemaker.CreateModelPackageOutput, error) {
	var output sagemaker.CreateModelPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateModelPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateModelPackageAsync(ctx workflow.Context, input *sagemaker.CreateModelPackageInput) *SagemakerCreateModelPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateModelPackage", input)
	return &SagemakerCreateModelPackageFuture{Future: future}
}

func (a *SageMakerStub) CreateMonitoringSchedule(ctx workflow.Context, input *sagemaker.CreateMonitoringScheduleInput) (*sagemaker.CreateMonitoringScheduleOutput, error) {
	var output sagemaker.CreateMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.CreateMonitoringScheduleInput) *SagemakerCreateMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateMonitoringSchedule", input)
	return &SagemakerCreateMonitoringScheduleFuture{Future: future}
}

func (a *SageMakerStub) CreateNotebookInstance(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceInput) (*sagemaker.CreateNotebookInstanceOutput, error) {
	var output sagemaker.CreateNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceInput) *SagemakerCreateNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateNotebookInstance", input)
	return &SagemakerCreateNotebookInstanceFuture{Future: future}
}

func (a *SageMakerStub) CreateNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.CreateNotebookInstanceLifecycleConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateNotebookInstanceLifecycleConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput) *SagemakerCreateNotebookInstanceLifecycleConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateNotebookInstanceLifecycleConfig", input)
	return &SagemakerCreateNotebookInstanceLifecycleConfigFuture{Future: future}
}

func (a *SageMakerStub) CreatePresignedDomainUrl(ctx workflow.Context, input *sagemaker.CreatePresignedDomainUrlInput) (*sagemaker.CreatePresignedDomainUrlOutput, error) {
	var output sagemaker.CreatePresignedDomainUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreatePresignedDomainUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreatePresignedDomainUrlAsync(ctx workflow.Context, input *sagemaker.CreatePresignedDomainUrlInput) *SagemakerCreatePresignedDomainUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreatePresignedDomainUrl", input)
	return &SagemakerCreatePresignedDomainUrlFuture{Future: future}
}

func (a *SageMakerStub) CreatePresignedNotebookInstanceUrl(ctx workflow.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	var output sagemaker.CreatePresignedNotebookInstanceUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreatePresignedNotebookInstanceUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreatePresignedNotebookInstanceUrlAsync(ctx workflow.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput) *SagemakerCreatePresignedNotebookInstanceUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreatePresignedNotebookInstanceUrl", input)
	return &SagemakerCreatePresignedNotebookInstanceUrlFuture{Future: future}
}

func (a *SageMakerStub) CreateProcessingJob(ctx workflow.Context, input *sagemaker.CreateProcessingJobInput) (*sagemaker.CreateProcessingJobOutput, error) {
	var output sagemaker.CreateProcessingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateProcessingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateProcessingJobAsync(ctx workflow.Context, input *sagemaker.CreateProcessingJobInput) *SagemakerCreateProcessingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateProcessingJob", input)
	return &SagemakerCreateProcessingJobFuture{Future: future}
}

func (a *SageMakerStub) CreateTrainingJob(ctx workflow.Context, input *sagemaker.CreateTrainingJobInput) (*sagemaker.CreateTrainingJobOutput, error) {
	var output sagemaker.CreateTrainingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateTrainingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateTrainingJobAsync(ctx workflow.Context, input *sagemaker.CreateTrainingJobInput) *SagemakerCreateTrainingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateTrainingJob", input)
	return &SagemakerCreateTrainingJobFuture{Future: future}
}

func (a *SageMakerStub) CreateTransformJob(ctx workflow.Context, input *sagemaker.CreateTransformJobInput) (*sagemaker.CreateTransformJobOutput, error) {
	var output sagemaker.CreateTransformJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateTransformJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateTransformJobAsync(ctx workflow.Context, input *sagemaker.CreateTransformJobInput) *SagemakerCreateTransformJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateTransformJob", input)
	return &SagemakerCreateTransformJobFuture{Future: future}
}

func (a *SageMakerStub) CreateTrial(ctx workflow.Context, input *sagemaker.CreateTrialInput) (*sagemaker.CreateTrialOutput, error) {
	var output sagemaker.CreateTrialOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateTrial", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateTrialAsync(ctx workflow.Context, input *sagemaker.CreateTrialInput) *SagemakerCreateTrialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateTrial", input)
	return &SagemakerCreateTrialFuture{Future: future}
}

func (a *SageMakerStub) CreateTrialComponent(ctx workflow.Context, input *sagemaker.CreateTrialComponentInput) (*sagemaker.CreateTrialComponentOutput, error) {
	var output sagemaker.CreateTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateTrialComponentAsync(ctx workflow.Context, input *sagemaker.CreateTrialComponentInput) *SagemakerCreateTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateTrialComponent", input)
	return &SagemakerCreateTrialComponentFuture{Future: future}
}

func (a *SageMakerStub) CreateUserProfile(ctx workflow.Context, input *sagemaker.CreateUserProfileInput) (*sagemaker.CreateUserProfileOutput, error) {
	var output sagemaker.CreateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateUserProfileAsync(ctx workflow.Context, input *sagemaker.CreateUserProfileInput) *SagemakerCreateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateUserProfile", input)
	return &SagemakerCreateUserProfileFuture{Future: future}
}

func (a *SageMakerStub) CreateWorkforce(ctx workflow.Context, input *sagemaker.CreateWorkforceInput) (*sagemaker.CreateWorkforceOutput, error) {
	var output sagemaker.CreateWorkforceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateWorkforce", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateWorkforceAsync(ctx workflow.Context, input *sagemaker.CreateWorkforceInput) *SagemakerCreateWorkforceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateWorkforce", input)
	return &SagemakerCreateWorkforceFuture{Future: future}
}

func (a *SageMakerStub) CreateWorkteam(ctx workflow.Context, input *sagemaker.CreateWorkteamInput) (*sagemaker.CreateWorkteamOutput, error) {
	var output sagemaker.CreateWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) CreateWorkteamAsync(ctx workflow.Context, input *sagemaker.CreateWorkteamInput) *SagemakerCreateWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.CreateWorkteam", input)
	return &SagemakerCreateWorkteamFuture{Future: future}
}

func (a *SageMakerStub) DeleteAlgorithm(ctx workflow.Context, input *sagemaker.DeleteAlgorithmInput) (*sagemaker.DeleteAlgorithmOutput, error) {
	var output sagemaker.DeleteAlgorithmOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteAlgorithm", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteAlgorithmAsync(ctx workflow.Context, input *sagemaker.DeleteAlgorithmInput) *SagemakerDeleteAlgorithmFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteAlgorithm", input)
	return &SagemakerDeleteAlgorithmFuture{Future: future}
}

func (a *SageMakerStub) DeleteApp(ctx workflow.Context, input *sagemaker.DeleteAppInput) (*sagemaker.DeleteAppOutput, error) {
	var output sagemaker.DeleteAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteAppAsync(ctx workflow.Context, input *sagemaker.DeleteAppInput) *SagemakerDeleteAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteApp", input)
	return &SagemakerDeleteAppFuture{Future: future}
}

func (a *SageMakerStub) DeleteCodeRepository(ctx workflow.Context, input *sagemaker.DeleteCodeRepositoryInput) (*sagemaker.DeleteCodeRepositoryOutput, error) {
	var output sagemaker.DeleteCodeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteCodeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.DeleteCodeRepositoryInput) *SagemakerDeleteCodeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteCodeRepository", input)
	return &SagemakerDeleteCodeRepositoryFuture{Future: future}
}

func (a *SageMakerStub) DeleteDomain(ctx workflow.Context, input *sagemaker.DeleteDomainInput) (*sagemaker.DeleteDomainOutput, error) {
	var output sagemaker.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteDomainAsync(ctx workflow.Context, input *sagemaker.DeleteDomainInput) *SagemakerDeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteDomain", input)
	return &SagemakerDeleteDomainFuture{Future: future}
}

func (a *SageMakerStub) DeleteEndpoint(ctx workflow.Context, input *sagemaker.DeleteEndpointInput) (*sagemaker.DeleteEndpointOutput, error) {
	var output sagemaker.DeleteEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteEndpointAsync(ctx workflow.Context, input *sagemaker.DeleteEndpointInput) *SagemakerDeleteEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteEndpoint", input)
	return &SagemakerDeleteEndpointFuture{Future: future}
}

func (a *SageMakerStub) DeleteEndpointConfig(ctx workflow.Context, input *sagemaker.DeleteEndpointConfigInput) (*sagemaker.DeleteEndpointConfigOutput, error) {
	var output sagemaker.DeleteEndpointConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteEndpointConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteEndpointConfigAsync(ctx workflow.Context, input *sagemaker.DeleteEndpointConfigInput) *SagemakerDeleteEndpointConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteEndpointConfig", input)
	return &SagemakerDeleteEndpointConfigFuture{Future: future}
}

func (a *SageMakerStub) DeleteExperiment(ctx workflow.Context, input *sagemaker.DeleteExperimentInput) (*sagemaker.DeleteExperimentOutput, error) {
	var output sagemaker.DeleteExperimentOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteExperiment", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteExperimentAsync(ctx workflow.Context, input *sagemaker.DeleteExperimentInput) *SagemakerDeleteExperimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteExperiment", input)
	return &SagemakerDeleteExperimentFuture{Future: future}
}

func (a *SageMakerStub) DeleteFlowDefinition(ctx workflow.Context, input *sagemaker.DeleteFlowDefinitionInput) (*sagemaker.DeleteFlowDefinitionOutput, error) {
	var output sagemaker.DeleteFlowDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteFlowDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.DeleteFlowDefinitionInput) *SagemakerDeleteFlowDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteFlowDefinition", input)
	return &SagemakerDeleteFlowDefinitionFuture{Future: future}
}

func (a *SageMakerStub) DeleteHumanTaskUi(ctx workflow.Context, input *sagemaker.DeleteHumanTaskUiInput) (*sagemaker.DeleteHumanTaskUiOutput, error) {
	var output sagemaker.DeleteHumanTaskUiOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteHumanTaskUi", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.DeleteHumanTaskUiInput) *SagemakerDeleteHumanTaskUiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteHumanTaskUi", input)
	return &SagemakerDeleteHumanTaskUiFuture{Future: future}
}

func (a *SageMakerStub) DeleteModel(ctx workflow.Context, input *sagemaker.DeleteModelInput) (*sagemaker.DeleteModelOutput, error) {
	var output sagemaker.DeleteModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteModel", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteModelAsync(ctx workflow.Context, input *sagemaker.DeleteModelInput) *SagemakerDeleteModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteModel", input)
	return &SagemakerDeleteModelFuture{Future: future}
}

func (a *SageMakerStub) DeleteModelPackage(ctx workflow.Context, input *sagemaker.DeleteModelPackageInput) (*sagemaker.DeleteModelPackageOutput, error) {
	var output sagemaker.DeleteModelPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteModelPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteModelPackageAsync(ctx workflow.Context, input *sagemaker.DeleteModelPackageInput) *SagemakerDeleteModelPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteModelPackage", input)
	return &SagemakerDeleteModelPackageFuture{Future: future}
}

func (a *SageMakerStub) DeleteMonitoringSchedule(ctx workflow.Context, input *sagemaker.DeleteMonitoringScheduleInput) (*sagemaker.DeleteMonitoringScheduleOutput, error) {
	var output sagemaker.DeleteMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.DeleteMonitoringScheduleInput) *SagemakerDeleteMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteMonitoringSchedule", input)
	return &SagemakerDeleteMonitoringScheduleFuture{Future: future}
}

func (a *SageMakerStub) DeleteNotebookInstance(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceInput) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	var output sagemaker.DeleteNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceInput) *SagemakerDeleteNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteNotebookInstance", input)
	return &SagemakerDeleteNotebookInstanceFuture{Future: future}
}

func (a *SageMakerStub) DeleteNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.DeleteNotebookInstanceLifecycleConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteNotebookInstanceLifecycleConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) *SagemakerDeleteNotebookInstanceLifecycleConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteNotebookInstanceLifecycleConfig", input)
	return &SagemakerDeleteNotebookInstanceLifecycleConfigFuture{Future: future}
}

func (a *SageMakerStub) DeleteTags(ctx workflow.Context, input *sagemaker.DeleteTagsInput) (*sagemaker.DeleteTagsOutput, error) {
	var output sagemaker.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteTagsAsync(ctx workflow.Context, input *sagemaker.DeleteTagsInput) *SagemakerDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteTags", input)
	return &SagemakerDeleteTagsFuture{Future: future}
}

func (a *SageMakerStub) DeleteTrial(ctx workflow.Context, input *sagemaker.DeleteTrialInput) (*sagemaker.DeleteTrialOutput, error) {
	var output sagemaker.DeleteTrialOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteTrial", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteTrialAsync(ctx workflow.Context, input *sagemaker.DeleteTrialInput) *SagemakerDeleteTrialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteTrial", input)
	return &SagemakerDeleteTrialFuture{Future: future}
}

func (a *SageMakerStub) DeleteTrialComponent(ctx workflow.Context, input *sagemaker.DeleteTrialComponentInput) (*sagemaker.DeleteTrialComponentOutput, error) {
	var output sagemaker.DeleteTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteTrialComponentAsync(ctx workflow.Context, input *sagemaker.DeleteTrialComponentInput) *SagemakerDeleteTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteTrialComponent", input)
	return &SagemakerDeleteTrialComponentFuture{Future: future}
}

func (a *SageMakerStub) DeleteUserProfile(ctx workflow.Context, input *sagemaker.DeleteUserProfileInput) (*sagemaker.DeleteUserProfileOutput, error) {
	var output sagemaker.DeleteUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteUserProfileAsync(ctx workflow.Context, input *sagemaker.DeleteUserProfileInput) *SagemakerDeleteUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteUserProfile", input)
	return &SagemakerDeleteUserProfileFuture{Future: future}
}

func (a *SageMakerStub) DeleteWorkforce(ctx workflow.Context, input *sagemaker.DeleteWorkforceInput) (*sagemaker.DeleteWorkforceOutput, error) {
	var output sagemaker.DeleteWorkforceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteWorkforce", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteWorkforceAsync(ctx workflow.Context, input *sagemaker.DeleteWorkforceInput) *SagemakerDeleteWorkforceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteWorkforce", input)
	return &SagemakerDeleteWorkforceFuture{Future: future}
}

func (a *SageMakerStub) DeleteWorkteam(ctx workflow.Context, input *sagemaker.DeleteWorkteamInput) (*sagemaker.DeleteWorkteamOutput, error) {
	var output sagemaker.DeleteWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DeleteWorkteamAsync(ctx workflow.Context, input *sagemaker.DeleteWorkteamInput) *SagemakerDeleteWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DeleteWorkteam", input)
	return &SagemakerDeleteWorkteamFuture{Future: future}
}

func (a *SageMakerStub) DescribeAlgorithm(ctx workflow.Context, input *sagemaker.DescribeAlgorithmInput) (*sagemaker.DescribeAlgorithmOutput, error) {
	var output sagemaker.DescribeAlgorithmOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeAlgorithm", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeAlgorithmAsync(ctx workflow.Context, input *sagemaker.DescribeAlgorithmInput) *SagemakerDescribeAlgorithmFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeAlgorithm", input)
	return &SagemakerDescribeAlgorithmFuture{Future: future}
}

func (a *SageMakerStub) DescribeApp(ctx workflow.Context, input *sagemaker.DescribeAppInput) (*sagemaker.DescribeAppOutput, error) {
	var output sagemaker.DescribeAppOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeApp", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeAppAsync(ctx workflow.Context, input *sagemaker.DescribeAppInput) *SagemakerDescribeAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeApp", input)
	return &SagemakerDescribeAppFuture{Future: future}
}

func (a *SageMakerStub) DescribeAutoMLJob(ctx workflow.Context, input *sagemaker.DescribeAutoMLJobInput) (*sagemaker.DescribeAutoMLJobOutput, error) {
	var output sagemaker.DescribeAutoMLJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeAutoMLJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeAutoMLJobAsync(ctx workflow.Context, input *sagemaker.DescribeAutoMLJobInput) *SagemakerDescribeAutoMLJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeAutoMLJob", input)
	return &SagemakerDescribeAutoMLJobFuture{Future: future}
}

func (a *SageMakerStub) DescribeCodeRepository(ctx workflow.Context, input *sagemaker.DescribeCodeRepositoryInput) (*sagemaker.DescribeCodeRepositoryOutput, error) {
	var output sagemaker.DescribeCodeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeCodeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.DescribeCodeRepositoryInput) *SagemakerDescribeCodeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeCodeRepository", input)
	return &SagemakerDescribeCodeRepositoryFuture{Future: future}
}

func (a *SageMakerStub) DescribeCompilationJob(ctx workflow.Context, input *sagemaker.DescribeCompilationJobInput) (*sagemaker.DescribeCompilationJobOutput, error) {
	var output sagemaker.DescribeCompilationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeCompilationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeCompilationJobAsync(ctx workflow.Context, input *sagemaker.DescribeCompilationJobInput) *SagemakerDescribeCompilationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeCompilationJob", input)
	return &SagemakerDescribeCompilationJobFuture{Future: future}
}

func (a *SageMakerStub) DescribeDomain(ctx workflow.Context, input *sagemaker.DescribeDomainInput) (*sagemaker.DescribeDomainOutput, error) {
	var output sagemaker.DescribeDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeDomainAsync(ctx workflow.Context, input *sagemaker.DescribeDomainInput) *SagemakerDescribeDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeDomain", input)
	return &SagemakerDescribeDomainFuture{Future: future}
}

func (a *SageMakerStub) DescribeEndpoint(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) (*sagemaker.DescribeEndpointOutput, error) {
	var output sagemaker.DescribeEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeEndpointAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *SagemakerDescribeEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeEndpoint", input)
	return &SagemakerDescribeEndpointFuture{Future: future}
}

func (a *SageMakerStub) DescribeEndpointConfig(ctx workflow.Context, input *sagemaker.DescribeEndpointConfigInput) (*sagemaker.DescribeEndpointConfigOutput, error) {
	var output sagemaker.DescribeEndpointConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeEndpointConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeEndpointConfigAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointConfigInput) *SagemakerDescribeEndpointConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeEndpointConfig", input)
	return &SagemakerDescribeEndpointConfigFuture{Future: future}
}

func (a *SageMakerStub) DescribeExperiment(ctx workflow.Context, input *sagemaker.DescribeExperimentInput) (*sagemaker.DescribeExperimentOutput, error) {
	var output sagemaker.DescribeExperimentOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeExperiment", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeExperimentAsync(ctx workflow.Context, input *sagemaker.DescribeExperimentInput) *SagemakerDescribeExperimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeExperiment", input)
	return &SagemakerDescribeExperimentFuture{Future: future}
}

func (a *SageMakerStub) DescribeFlowDefinition(ctx workflow.Context, input *sagemaker.DescribeFlowDefinitionInput) (*sagemaker.DescribeFlowDefinitionOutput, error) {
	var output sagemaker.DescribeFlowDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeFlowDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.DescribeFlowDefinitionInput) *SagemakerDescribeFlowDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeFlowDefinition", input)
	return &SagemakerDescribeFlowDefinitionFuture{Future: future}
}

func (a *SageMakerStub) DescribeHumanTaskUi(ctx workflow.Context, input *sagemaker.DescribeHumanTaskUiInput) (*sagemaker.DescribeHumanTaskUiOutput, error) {
	var output sagemaker.DescribeHumanTaskUiOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeHumanTaskUi", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.DescribeHumanTaskUiInput) *SagemakerDescribeHumanTaskUiFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeHumanTaskUi", input)
	return &SagemakerDescribeHumanTaskUiFuture{Future: future}
}

func (a *SageMakerStub) DescribeHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.DescribeHyperParameterTuningJobInput) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {
	var output sagemaker.DescribeHyperParameterTuningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeHyperParameterTuningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.DescribeHyperParameterTuningJobInput) *SagemakerDescribeHyperParameterTuningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeHyperParameterTuningJob", input)
	return &SagemakerDescribeHyperParameterTuningJobFuture{Future: future}
}

func (a *SageMakerStub) DescribeLabelingJob(ctx workflow.Context, input *sagemaker.DescribeLabelingJobInput) (*sagemaker.DescribeLabelingJobOutput, error) {
	var output sagemaker.DescribeLabelingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeLabelingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeLabelingJobAsync(ctx workflow.Context, input *sagemaker.DescribeLabelingJobInput) *SagemakerDescribeLabelingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeLabelingJob", input)
	return &SagemakerDescribeLabelingJobFuture{Future: future}
}

func (a *SageMakerStub) DescribeModel(ctx workflow.Context, input *sagemaker.DescribeModelInput) (*sagemaker.DescribeModelOutput, error) {
	var output sagemaker.DescribeModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeModel", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeModelAsync(ctx workflow.Context, input *sagemaker.DescribeModelInput) *SagemakerDescribeModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeModel", input)
	return &SagemakerDescribeModelFuture{Future: future}
}

func (a *SageMakerStub) DescribeModelPackage(ctx workflow.Context, input *sagemaker.DescribeModelPackageInput) (*sagemaker.DescribeModelPackageOutput, error) {
	var output sagemaker.DescribeModelPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeModelPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeModelPackageAsync(ctx workflow.Context, input *sagemaker.DescribeModelPackageInput) *SagemakerDescribeModelPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeModelPackage", input)
	return &SagemakerDescribeModelPackageFuture{Future: future}
}

func (a *SageMakerStub) DescribeMonitoringSchedule(ctx workflow.Context, input *sagemaker.DescribeMonitoringScheduleInput) (*sagemaker.DescribeMonitoringScheduleOutput, error) {
	var output sagemaker.DescribeMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.DescribeMonitoringScheduleInput) *SagemakerDescribeMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeMonitoringSchedule", input)
	return &SagemakerDescribeMonitoringScheduleFuture{Future: future}
}

func (a *SageMakerStub) DescribeNotebookInstance(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	var output sagemaker.DescribeNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *SagemakerDescribeNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeNotebookInstance", input)
	return &SagemakerDescribeNotebookInstanceFuture{Future: future}
}

func (a *SageMakerStub) DescribeNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.DescribeNotebookInstanceLifecycleConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeNotebookInstanceLifecycleConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) *SagemakerDescribeNotebookInstanceLifecycleConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeNotebookInstanceLifecycleConfig", input)
	return &SagemakerDescribeNotebookInstanceLifecycleConfigFuture{Future: future}
}

func (a *SageMakerStub) DescribeProcessingJob(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) (*sagemaker.DescribeProcessingJobOutput, error) {
	var output sagemaker.DescribeProcessingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeProcessingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeProcessingJobAsync(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) *SagemakerDescribeProcessingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeProcessingJob", input)
	return &SagemakerDescribeProcessingJobFuture{Future: future}
}

func (a *SageMakerStub) DescribeSubscribedWorkteam(ctx workflow.Context, input *sagemaker.DescribeSubscribedWorkteamInput) (*sagemaker.DescribeSubscribedWorkteamOutput, error) {
	var output sagemaker.DescribeSubscribedWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeSubscribedWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeSubscribedWorkteamAsync(ctx workflow.Context, input *sagemaker.DescribeSubscribedWorkteamInput) *SagemakerDescribeSubscribedWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeSubscribedWorkteam", input)
	return &SagemakerDescribeSubscribedWorkteamFuture{Future: future}
}

func (a *SageMakerStub) DescribeTrainingJob(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) (*sagemaker.DescribeTrainingJobOutput, error) {
	var output sagemaker.DescribeTrainingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeTrainingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeTrainingJobAsync(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) *SagemakerDescribeTrainingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeTrainingJob", input)
	return &SagemakerDescribeTrainingJobFuture{Future: future}
}

func (a *SageMakerStub) DescribeTransformJob(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) (*sagemaker.DescribeTransformJobOutput, error) {
	var output sagemaker.DescribeTransformJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeTransformJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeTransformJobAsync(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) *SagemakerDescribeTransformJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeTransformJob", input)
	return &SagemakerDescribeTransformJobFuture{Future: future}
}

func (a *SageMakerStub) DescribeTrial(ctx workflow.Context, input *sagemaker.DescribeTrialInput) (*sagemaker.DescribeTrialOutput, error) {
	var output sagemaker.DescribeTrialOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeTrial", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeTrialAsync(ctx workflow.Context, input *sagemaker.DescribeTrialInput) *SagemakerDescribeTrialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeTrial", input)
	return &SagemakerDescribeTrialFuture{Future: future}
}

func (a *SageMakerStub) DescribeTrialComponent(ctx workflow.Context, input *sagemaker.DescribeTrialComponentInput) (*sagemaker.DescribeTrialComponentOutput, error) {
	var output sagemaker.DescribeTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeTrialComponentAsync(ctx workflow.Context, input *sagemaker.DescribeTrialComponentInput) *SagemakerDescribeTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeTrialComponent", input)
	return &SagemakerDescribeTrialComponentFuture{Future: future}
}

func (a *SageMakerStub) DescribeUserProfile(ctx workflow.Context, input *sagemaker.DescribeUserProfileInput) (*sagemaker.DescribeUserProfileOutput, error) {
	var output sagemaker.DescribeUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeUserProfileAsync(ctx workflow.Context, input *sagemaker.DescribeUserProfileInput) *SagemakerDescribeUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeUserProfile", input)
	return &SagemakerDescribeUserProfileFuture{Future: future}
}

func (a *SageMakerStub) DescribeWorkforce(ctx workflow.Context, input *sagemaker.DescribeWorkforceInput) (*sagemaker.DescribeWorkforceOutput, error) {
	var output sagemaker.DescribeWorkforceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeWorkforce", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeWorkforceAsync(ctx workflow.Context, input *sagemaker.DescribeWorkforceInput) *SagemakerDescribeWorkforceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeWorkforce", input)
	return &SagemakerDescribeWorkforceFuture{Future: future}
}

func (a *SageMakerStub) DescribeWorkteam(ctx workflow.Context, input *sagemaker.DescribeWorkteamInput) (*sagemaker.DescribeWorkteamOutput, error) {
	var output sagemaker.DescribeWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DescribeWorkteamAsync(ctx workflow.Context, input *sagemaker.DescribeWorkteamInput) *SagemakerDescribeWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DescribeWorkteam", input)
	return &SagemakerDescribeWorkteamFuture{Future: future}
}

func (a *SageMakerStub) DisassociateTrialComponent(ctx workflow.Context, input *sagemaker.DisassociateTrialComponentInput) (*sagemaker.DisassociateTrialComponentOutput, error) {
	var output sagemaker.DisassociateTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.DisassociateTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) DisassociateTrialComponentAsync(ctx workflow.Context, input *sagemaker.DisassociateTrialComponentInput) *SagemakerDisassociateTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.DisassociateTrialComponent", input)
	return &SagemakerDisassociateTrialComponentFuture{Future: future}
}

func (a *SageMakerStub) GetSearchSuggestions(ctx workflow.Context, input *sagemaker.GetSearchSuggestionsInput) (*sagemaker.GetSearchSuggestionsOutput, error) {
	var output sagemaker.GetSearchSuggestionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.GetSearchSuggestions", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) GetSearchSuggestionsAsync(ctx workflow.Context, input *sagemaker.GetSearchSuggestionsInput) *SagemakerGetSearchSuggestionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.GetSearchSuggestions", input)
	return &SagemakerGetSearchSuggestionsFuture{Future: future}
}

func (a *SageMakerStub) ListAlgorithms(ctx workflow.Context, input *sagemaker.ListAlgorithmsInput) (*sagemaker.ListAlgorithmsOutput, error) {
	var output sagemaker.ListAlgorithmsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListAlgorithms", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListAlgorithmsAsync(ctx workflow.Context, input *sagemaker.ListAlgorithmsInput) *SagemakerListAlgorithmsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListAlgorithms", input)
	return &SagemakerListAlgorithmsFuture{Future: future}
}

func (a *SageMakerStub) ListApps(ctx workflow.Context, input *sagemaker.ListAppsInput) (*sagemaker.ListAppsOutput, error) {
	var output sagemaker.ListAppsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListApps", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListAppsAsync(ctx workflow.Context, input *sagemaker.ListAppsInput) *SagemakerListAppsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListApps", input)
	return &SagemakerListAppsFuture{Future: future}
}

func (a *SageMakerStub) ListAutoMLJobs(ctx workflow.Context, input *sagemaker.ListAutoMLJobsInput) (*sagemaker.ListAutoMLJobsOutput, error) {
	var output sagemaker.ListAutoMLJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListAutoMLJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListAutoMLJobsAsync(ctx workflow.Context, input *sagemaker.ListAutoMLJobsInput) *SagemakerListAutoMLJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListAutoMLJobs", input)
	return &SagemakerListAutoMLJobsFuture{Future: future}
}

func (a *SageMakerStub) ListCandidatesForAutoMLJob(ctx workflow.Context, input *sagemaker.ListCandidatesForAutoMLJobInput) (*sagemaker.ListCandidatesForAutoMLJobOutput, error) {
	var output sagemaker.ListCandidatesForAutoMLJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListCandidatesForAutoMLJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListCandidatesForAutoMLJobAsync(ctx workflow.Context, input *sagemaker.ListCandidatesForAutoMLJobInput) *SagemakerListCandidatesForAutoMLJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListCandidatesForAutoMLJob", input)
	return &SagemakerListCandidatesForAutoMLJobFuture{Future: future}
}

func (a *SageMakerStub) ListCodeRepositories(ctx workflow.Context, input *sagemaker.ListCodeRepositoriesInput) (*sagemaker.ListCodeRepositoriesOutput, error) {
	var output sagemaker.ListCodeRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListCodeRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListCodeRepositoriesAsync(ctx workflow.Context, input *sagemaker.ListCodeRepositoriesInput) *SagemakerListCodeRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListCodeRepositories", input)
	return &SagemakerListCodeRepositoriesFuture{Future: future}
}

func (a *SageMakerStub) ListCompilationJobs(ctx workflow.Context, input *sagemaker.ListCompilationJobsInput) (*sagemaker.ListCompilationJobsOutput, error) {
	var output sagemaker.ListCompilationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListCompilationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListCompilationJobsAsync(ctx workflow.Context, input *sagemaker.ListCompilationJobsInput) *SagemakerListCompilationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListCompilationJobs", input)
	return &SagemakerListCompilationJobsFuture{Future: future}
}

func (a *SageMakerStub) ListDomains(ctx workflow.Context, input *sagemaker.ListDomainsInput) (*sagemaker.ListDomainsOutput, error) {
	var output sagemaker.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListDomainsAsync(ctx workflow.Context, input *sagemaker.ListDomainsInput) *SagemakerListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListDomains", input)
	return &SagemakerListDomainsFuture{Future: future}
}

func (a *SageMakerStub) ListEndpointConfigs(ctx workflow.Context, input *sagemaker.ListEndpointConfigsInput) (*sagemaker.ListEndpointConfigsOutput, error) {
	var output sagemaker.ListEndpointConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListEndpointConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListEndpointConfigsAsync(ctx workflow.Context, input *sagemaker.ListEndpointConfigsInput) *SagemakerListEndpointConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListEndpointConfigs", input)
	return &SagemakerListEndpointConfigsFuture{Future: future}
}

func (a *SageMakerStub) ListEndpoints(ctx workflow.Context, input *sagemaker.ListEndpointsInput) (*sagemaker.ListEndpointsOutput, error) {
	var output sagemaker.ListEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListEndpointsAsync(ctx workflow.Context, input *sagemaker.ListEndpointsInput) *SagemakerListEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListEndpoints", input)
	return &SagemakerListEndpointsFuture{Future: future}
}

func (a *SageMakerStub) ListExperiments(ctx workflow.Context, input *sagemaker.ListExperimentsInput) (*sagemaker.ListExperimentsOutput, error) {
	var output sagemaker.ListExperimentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListExperiments", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListExperimentsAsync(ctx workflow.Context, input *sagemaker.ListExperimentsInput) *SagemakerListExperimentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListExperiments", input)
	return &SagemakerListExperimentsFuture{Future: future}
}

func (a *SageMakerStub) ListFlowDefinitions(ctx workflow.Context, input *sagemaker.ListFlowDefinitionsInput) (*sagemaker.ListFlowDefinitionsOutput, error) {
	var output sagemaker.ListFlowDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListFlowDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListFlowDefinitionsAsync(ctx workflow.Context, input *sagemaker.ListFlowDefinitionsInput) *SagemakerListFlowDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListFlowDefinitions", input)
	return &SagemakerListFlowDefinitionsFuture{Future: future}
}

func (a *SageMakerStub) ListHumanTaskUis(ctx workflow.Context, input *sagemaker.ListHumanTaskUisInput) (*sagemaker.ListHumanTaskUisOutput, error) {
	var output sagemaker.ListHumanTaskUisOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListHumanTaskUis", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListHumanTaskUisAsync(ctx workflow.Context, input *sagemaker.ListHumanTaskUisInput) *SagemakerListHumanTaskUisFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListHumanTaskUis", input)
	return &SagemakerListHumanTaskUisFuture{Future: future}
}

func (a *SageMakerStub) ListHyperParameterTuningJobs(ctx workflow.Context, input *sagemaker.ListHyperParameterTuningJobsInput) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {
	var output sagemaker.ListHyperParameterTuningJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListHyperParameterTuningJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListHyperParameterTuningJobsAsync(ctx workflow.Context, input *sagemaker.ListHyperParameterTuningJobsInput) *SagemakerListHyperParameterTuningJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListHyperParameterTuningJobs", input)
	return &SagemakerListHyperParameterTuningJobsFuture{Future: future}
}

func (a *SageMakerStub) ListLabelingJobs(ctx workflow.Context, input *sagemaker.ListLabelingJobsInput) (*sagemaker.ListLabelingJobsOutput, error) {
	var output sagemaker.ListLabelingJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListLabelingJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListLabelingJobsAsync(ctx workflow.Context, input *sagemaker.ListLabelingJobsInput) *SagemakerListLabelingJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListLabelingJobs", input)
	return &SagemakerListLabelingJobsFuture{Future: future}
}

func (a *SageMakerStub) ListLabelingJobsForWorkteam(ctx workflow.Context, input *sagemaker.ListLabelingJobsForWorkteamInput) (*sagemaker.ListLabelingJobsForWorkteamOutput, error) {
	var output sagemaker.ListLabelingJobsForWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListLabelingJobsForWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListLabelingJobsForWorkteamAsync(ctx workflow.Context, input *sagemaker.ListLabelingJobsForWorkteamInput) *SagemakerListLabelingJobsForWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListLabelingJobsForWorkteam", input)
	return &SagemakerListLabelingJobsForWorkteamFuture{Future: future}
}

func (a *SageMakerStub) ListModelPackages(ctx workflow.Context, input *sagemaker.ListModelPackagesInput) (*sagemaker.ListModelPackagesOutput, error) {
	var output sagemaker.ListModelPackagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListModelPackages", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListModelPackagesAsync(ctx workflow.Context, input *sagemaker.ListModelPackagesInput) *SagemakerListModelPackagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListModelPackages", input)
	return &SagemakerListModelPackagesFuture{Future: future}
}

func (a *SageMakerStub) ListModels(ctx workflow.Context, input *sagemaker.ListModelsInput) (*sagemaker.ListModelsOutput, error) {
	var output sagemaker.ListModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListModels", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListModelsAsync(ctx workflow.Context, input *sagemaker.ListModelsInput) *SagemakerListModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListModels", input)
	return &SagemakerListModelsFuture{Future: future}
}

func (a *SageMakerStub) ListMonitoringExecutions(ctx workflow.Context, input *sagemaker.ListMonitoringExecutionsInput) (*sagemaker.ListMonitoringExecutionsOutput, error) {
	var output sagemaker.ListMonitoringExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListMonitoringExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListMonitoringExecutionsAsync(ctx workflow.Context, input *sagemaker.ListMonitoringExecutionsInput) *SagemakerListMonitoringExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListMonitoringExecutions", input)
	return &SagemakerListMonitoringExecutionsFuture{Future: future}
}

func (a *SageMakerStub) ListMonitoringSchedules(ctx workflow.Context, input *sagemaker.ListMonitoringSchedulesInput) (*sagemaker.ListMonitoringSchedulesOutput, error) {
	var output sagemaker.ListMonitoringSchedulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListMonitoringSchedules", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListMonitoringSchedulesAsync(ctx workflow.Context, input *sagemaker.ListMonitoringSchedulesInput) *SagemakerListMonitoringSchedulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListMonitoringSchedules", input)
	return &SagemakerListMonitoringSchedulesFuture{Future: future}
}

func (a *SageMakerStub) ListNotebookInstanceLifecycleConfigs(ctx workflow.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {
	var output sagemaker.ListNotebookInstanceLifecycleConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListNotebookInstanceLifecycleConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListNotebookInstanceLifecycleConfigsAsync(ctx workflow.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput) *SagemakerListNotebookInstanceLifecycleConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListNotebookInstanceLifecycleConfigs", input)
	return &SagemakerListNotebookInstanceLifecycleConfigsFuture{Future: future}
}

func (a *SageMakerStub) ListNotebookInstances(ctx workflow.Context, input *sagemaker.ListNotebookInstancesInput) (*sagemaker.ListNotebookInstancesOutput, error) {
	var output sagemaker.ListNotebookInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListNotebookInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListNotebookInstancesAsync(ctx workflow.Context, input *sagemaker.ListNotebookInstancesInput) *SagemakerListNotebookInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListNotebookInstances", input)
	return &SagemakerListNotebookInstancesFuture{Future: future}
}

func (a *SageMakerStub) ListProcessingJobs(ctx workflow.Context, input *sagemaker.ListProcessingJobsInput) (*sagemaker.ListProcessingJobsOutput, error) {
	var output sagemaker.ListProcessingJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListProcessingJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListProcessingJobsAsync(ctx workflow.Context, input *sagemaker.ListProcessingJobsInput) *SagemakerListProcessingJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListProcessingJobs", input)
	return &SagemakerListProcessingJobsFuture{Future: future}
}

func (a *SageMakerStub) ListSubscribedWorkteams(ctx workflow.Context, input *sagemaker.ListSubscribedWorkteamsInput) (*sagemaker.ListSubscribedWorkteamsOutput, error) {
	var output sagemaker.ListSubscribedWorkteamsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListSubscribedWorkteams", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListSubscribedWorkteamsAsync(ctx workflow.Context, input *sagemaker.ListSubscribedWorkteamsInput) *SagemakerListSubscribedWorkteamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListSubscribedWorkteams", input)
	return &SagemakerListSubscribedWorkteamsFuture{Future: future}
}

func (a *SageMakerStub) ListTags(ctx workflow.Context, input *sagemaker.ListTagsInput) (*sagemaker.ListTagsOutput, error) {
	var output sagemaker.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListTagsAsync(ctx workflow.Context, input *sagemaker.ListTagsInput) *SagemakerListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListTags", input)
	return &SagemakerListTagsFuture{Future: future}
}

func (a *SageMakerStub) ListTrainingJobs(ctx workflow.Context, input *sagemaker.ListTrainingJobsInput) (*sagemaker.ListTrainingJobsOutput, error) {
	var output sagemaker.ListTrainingJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListTrainingJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListTrainingJobsAsync(ctx workflow.Context, input *sagemaker.ListTrainingJobsInput) *SagemakerListTrainingJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListTrainingJobs", input)
	return &SagemakerListTrainingJobsFuture{Future: future}
}

func (a *SageMakerStub) ListTrainingJobsForHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {
	var output sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListTrainingJobsForHyperParameterTuningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListTrainingJobsForHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) *SagemakerListTrainingJobsForHyperParameterTuningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListTrainingJobsForHyperParameterTuningJob", input)
	return &SagemakerListTrainingJobsForHyperParameterTuningJobFuture{Future: future}
}

func (a *SageMakerStub) ListTransformJobs(ctx workflow.Context, input *sagemaker.ListTransformJobsInput) (*sagemaker.ListTransformJobsOutput, error) {
	var output sagemaker.ListTransformJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListTransformJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListTransformJobsAsync(ctx workflow.Context, input *sagemaker.ListTransformJobsInput) *SagemakerListTransformJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListTransformJobs", input)
	return &SagemakerListTransformJobsFuture{Future: future}
}

func (a *SageMakerStub) ListTrialComponents(ctx workflow.Context, input *sagemaker.ListTrialComponentsInput) (*sagemaker.ListTrialComponentsOutput, error) {
	var output sagemaker.ListTrialComponentsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListTrialComponents", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListTrialComponentsAsync(ctx workflow.Context, input *sagemaker.ListTrialComponentsInput) *SagemakerListTrialComponentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListTrialComponents", input)
	return &SagemakerListTrialComponentsFuture{Future: future}
}

func (a *SageMakerStub) ListTrials(ctx workflow.Context, input *sagemaker.ListTrialsInput) (*sagemaker.ListTrialsOutput, error) {
	var output sagemaker.ListTrialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListTrials", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListTrialsAsync(ctx workflow.Context, input *sagemaker.ListTrialsInput) *SagemakerListTrialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListTrials", input)
	return &SagemakerListTrialsFuture{Future: future}
}

func (a *SageMakerStub) ListUserProfiles(ctx workflow.Context, input *sagemaker.ListUserProfilesInput) (*sagemaker.ListUserProfilesOutput, error) {
	var output sagemaker.ListUserProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListUserProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListUserProfilesAsync(ctx workflow.Context, input *sagemaker.ListUserProfilesInput) *SagemakerListUserProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListUserProfiles", input)
	return &SagemakerListUserProfilesFuture{Future: future}
}

func (a *SageMakerStub) ListWorkforces(ctx workflow.Context, input *sagemaker.ListWorkforcesInput) (*sagemaker.ListWorkforcesOutput, error) {
	var output sagemaker.ListWorkforcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListWorkforces", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListWorkforcesAsync(ctx workflow.Context, input *sagemaker.ListWorkforcesInput) *SagemakerListWorkforcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListWorkforces", input)
	return &SagemakerListWorkforcesFuture{Future: future}
}

func (a *SageMakerStub) ListWorkteams(ctx workflow.Context, input *sagemaker.ListWorkteamsInput) (*sagemaker.ListWorkteamsOutput, error) {
	var output sagemaker.ListWorkteamsOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListWorkteams", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) ListWorkteamsAsync(ctx workflow.Context, input *sagemaker.ListWorkteamsInput) *SagemakerListWorkteamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.ListWorkteams", input)
	return &SagemakerListWorkteamsFuture{Future: future}
}

func (a *SageMakerStub) RenderUiTemplate(ctx workflow.Context, input *sagemaker.RenderUiTemplateInput) (*sagemaker.RenderUiTemplateOutput, error) {
	var output sagemaker.RenderUiTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.RenderUiTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) RenderUiTemplateAsync(ctx workflow.Context, input *sagemaker.RenderUiTemplateInput) *SagemakerRenderUiTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.RenderUiTemplate", input)
	return &SagemakerRenderUiTemplateFuture{Future: future}
}

func (a *SageMakerStub) Search(ctx workflow.Context, input *sagemaker.SearchInput) (*sagemaker.SearchOutput, error) {
	var output sagemaker.SearchOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.Search", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) SearchAsync(ctx workflow.Context, input *sagemaker.SearchInput) *SagemakerSearchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.Search", input)
	return &SagemakerSearchFuture{Future: future}
}

func (a *SageMakerStub) StartMonitoringSchedule(ctx workflow.Context, input *sagemaker.StartMonitoringScheduleInput) (*sagemaker.StartMonitoringScheduleOutput, error) {
	var output sagemaker.StartMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.StartMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) StartMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.StartMonitoringScheduleInput) *SagemakerStartMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.StartMonitoringSchedule", input)
	return &SagemakerStartMonitoringScheduleFuture{Future: future}
}

func (a *SageMakerStub) StartNotebookInstance(ctx workflow.Context, input *sagemaker.StartNotebookInstanceInput) (*sagemaker.StartNotebookInstanceOutput, error) {
	var output sagemaker.StartNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.StartNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) StartNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.StartNotebookInstanceInput) *SagemakerStartNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.StartNotebookInstance", input)
	return &SagemakerStartNotebookInstanceFuture{Future: future}
}

func (a *SageMakerStub) StopAutoMLJob(ctx workflow.Context, input *sagemaker.StopAutoMLJobInput) (*sagemaker.StopAutoMLJobOutput, error) {
	var output sagemaker.StopAutoMLJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopAutoMLJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) StopAutoMLJobAsync(ctx workflow.Context, input *sagemaker.StopAutoMLJobInput) *SagemakerStopAutoMLJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopAutoMLJob", input)
	return &SagemakerStopAutoMLJobFuture{Future: future}
}

func (a *SageMakerStub) StopCompilationJob(ctx workflow.Context, input *sagemaker.StopCompilationJobInput) (*sagemaker.StopCompilationJobOutput, error) {
	var output sagemaker.StopCompilationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopCompilationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) StopCompilationJobAsync(ctx workflow.Context, input *sagemaker.StopCompilationJobInput) *SagemakerStopCompilationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopCompilationJob", input)
	return &SagemakerStopCompilationJobFuture{Future: future}
}

func (a *SageMakerStub) StopHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.StopHyperParameterTuningJobInput) (*sagemaker.StopHyperParameterTuningJobOutput, error) {
	var output sagemaker.StopHyperParameterTuningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopHyperParameterTuningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) StopHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.StopHyperParameterTuningJobInput) *SagemakerStopHyperParameterTuningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopHyperParameterTuningJob", input)
	return &SagemakerStopHyperParameterTuningJobFuture{Future: future}
}

func (a *SageMakerStub) StopLabelingJob(ctx workflow.Context, input *sagemaker.StopLabelingJobInput) (*sagemaker.StopLabelingJobOutput, error) {
	var output sagemaker.StopLabelingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopLabelingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) StopLabelingJobAsync(ctx workflow.Context, input *sagemaker.StopLabelingJobInput) *SagemakerStopLabelingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopLabelingJob", input)
	return &SagemakerStopLabelingJobFuture{Future: future}
}

func (a *SageMakerStub) StopMonitoringSchedule(ctx workflow.Context, input *sagemaker.StopMonitoringScheduleInput) (*sagemaker.StopMonitoringScheduleOutput, error) {
	var output sagemaker.StopMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) StopMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.StopMonitoringScheduleInput) *SagemakerStopMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopMonitoringSchedule", input)
	return &SagemakerStopMonitoringScheduleFuture{Future: future}
}

func (a *SageMakerStub) StopNotebookInstance(ctx workflow.Context, input *sagemaker.StopNotebookInstanceInput) (*sagemaker.StopNotebookInstanceOutput, error) {
	var output sagemaker.StopNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) StopNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.StopNotebookInstanceInput) *SagemakerStopNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopNotebookInstance", input)
	return &SagemakerStopNotebookInstanceFuture{Future: future}
}

func (a *SageMakerStub) StopProcessingJob(ctx workflow.Context, input *sagemaker.StopProcessingJobInput) (*sagemaker.StopProcessingJobOutput, error) {
	var output sagemaker.StopProcessingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopProcessingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) StopProcessingJobAsync(ctx workflow.Context, input *sagemaker.StopProcessingJobInput) *SagemakerStopProcessingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopProcessingJob", input)
	return &SagemakerStopProcessingJobFuture{Future: future}
}

func (a *SageMakerStub) StopTrainingJob(ctx workflow.Context, input *sagemaker.StopTrainingJobInput) (*sagemaker.StopTrainingJobOutput, error) {
	var output sagemaker.StopTrainingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopTrainingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) StopTrainingJobAsync(ctx workflow.Context, input *sagemaker.StopTrainingJobInput) *SagemakerStopTrainingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopTrainingJob", input)
	return &SagemakerStopTrainingJobFuture{Future: future}
}

func (a *SageMakerStub) StopTransformJob(ctx workflow.Context, input *sagemaker.StopTransformJobInput) (*sagemaker.StopTransformJobOutput, error) {
	var output sagemaker.StopTransformJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopTransformJob", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) StopTransformJobAsync(ctx workflow.Context, input *sagemaker.StopTransformJobInput) *SagemakerStopTransformJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.StopTransformJob", input)
	return &SagemakerStopTransformJobFuture{Future: future}
}

func (a *SageMakerStub) UpdateCodeRepository(ctx workflow.Context, input *sagemaker.UpdateCodeRepositoryInput) (*sagemaker.UpdateCodeRepositoryOutput, error) {
	var output sagemaker.UpdateCodeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateCodeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.UpdateCodeRepositoryInput) *SagemakerUpdateCodeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateCodeRepository", input)
	return &SagemakerUpdateCodeRepositoryFuture{Future: future}
}

func (a *SageMakerStub) UpdateDomain(ctx workflow.Context, input *sagemaker.UpdateDomainInput) (*sagemaker.UpdateDomainOutput, error) {
	var output sagemaker.UpdateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateDomainAsync(ctx workflow.Context, input *sagemaker.UpdateDomainInput) *SagemakerUpdateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateDomain", input)
	return &SagemakerUpdateDomainFuture{Future: future}
}

func (a *SageMakerStub) UpdateEndpoint(ctx workflow.Context, input *sagemaker.UpdateEndpointInput) (*sagemaker.UpdateEndpointOutput, error) {
	var output sagemaker.UpdateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateEndpointAsync(ctx workflow.Context, input *sagemaker.UpdateEndpointInput) *SagemakerUpdateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateEndpoint", input)
	return &SagemakerUpdateEndpointFuture{Future: future}
}

func (a *SageMakerStub) UpdateEndpointWeightsAndCapacities(ctx workflow.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	var output sagemaker.UpdateEndpointWeightsAndCapacitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateEndpointWeightsAndCapacities", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateEndpointWeightsAndCapacitiesAsync(ctx workflow.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) *SagemakerUpdateEndpointWeightsAndCapacitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateEndpointWeightsAndCapacities", input)
	return &SagemakerUpdateEndpointWeightsAndCapacitiesFuture{Future: future}
}

func (a *SageMakerStub) UpdateExperiment(ctx workflow.Context, input *sagemaker.UpdateExperimentInput) (*sagemaker.UpdateExperimentOutput, error) {
	var output sagemaker.UpdateExperimentOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateExperiment", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateExperimentAsync(ctx workflow.Context, input *sagemaker.UpdateExperimentInput) *SagemakerUpdateExperimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateExperiment", input)
	return &SagemakerUpdateExperimentFuture{Future: future}
}

func (a *SageMakerStub) UpdateMonitoringSchedule(ctx workflow.Context, input *sagemaker.UpdateMonitoringScheduleInput) (*sagemaker.UpdateMonitoringScheduleOutput, error) {
	var output sagemaker.UpdateMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.UpdateMonitoringScheduleInput) *SagemakerUpdateMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateMonitoringSchedule", input)
	return &SagemakerUpdateMonitoringScheduleFuture{Future: future}
}

func (a *SageMakerStub) UpdateNotebookInstance(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceInput) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	var output sagemaker.UpdateNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceInput) *SagemakerUpdateNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateNotebookInstance", input)
	return &SagemakerUpdateNotebookInstanceFuture{Future: future}
}

func (a *SageMakerStub) UpdateNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.UpdateNotebookInstanceLifecycleConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateNotebookInstanceLifecycleConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) *SagemakerUpdateNotebookInstanceLifecycleConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateNotebookInstanceLifecycleConfig", input)
	return &SagemakerUpdateNotebookInstanceLifecycleConfigFuture{Future: future}
}

func (a *SageMakerStub) UpdateTrial(ctx workflow.Context, input *sagemaker.UpdateTrialInput) (*sagemaker.UpdateTrialOutput, error) {
	var output sagemaker.UpdateTrialOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateTrial", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateTrialAsync(ctx workflow.Context, input *sagemaker.UpdateTrialInput) *SagemakerUpdateTrialFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateTrial", input)
	return &SagemakerUpdateTrialFuture{Future: future}
}

func (a *SageMakerStub) UpdateTrialComponent(ctx workflow.Context, input *sagemaker.UpdateTrialComponentInput) (*sagemaker.UpdateTrialComponentOutput, error) {
	var output sagemaker.UpdateTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateTrialComponentAsync(ctx workflow.Context, input *sagemaker.UpdateTrialComponentInput) *SagemakerUpdateTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateTrialComponent", input)
	return &SagemakerUpdateTrialComponentFuture{Future: future}
}

func (a *SageMakerStub) UpdateUserProfile(ctx workflow.Context, input *sagemaker.UpdateUserProfileInput) (*sagemaker.UpdateUserProfileOutput, error) {
	var output sagemaker.UpdateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateUserProfileAsync(ctx workflow.Context, input *sagemaker.UpdateUserProfileInput) *SagemakerUpdateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateUserProfile", input)
	return &SagemakerUpdateUserProfileFuture{Future: future}
}

func (a *SageMakerStub) UpdateWorkforce(ctx workflow.Context, input *sagemaker.UpdateWorkforceInput) (*sagemaker.UpdateWorkforceOutput, error) {
	var output sagemaker.UpdateWorkforceOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateWorkforce", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateWorkforceAsync(ctx workflow.Context, input *sagemaker.UpdateWorkforceInput) *SagemakerUpdateWorkforceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateWorkforce", input)
	return &SagemakerUpdateWorkforceFuture{Future: future}
}

func (a *SageMakerStub) UpdateWorkteam(ctx workflow.Context, input *sagemaker.UpdateWorkteamInput) (*sagemaker.UpdateWorkteamOutput, error) {
	var output sagemaker.UpdateWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *SageMakerStub) UpdateWorkteamAsync(ctx workflow.Context, input *sagemaker.UpdateWorkteamInput) *SagemakerUpdateWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.UpdateWorkteam", input)
	return &SagemakerUpdateWorkteamFuture{Future: future}
}

func (a *SageMakerStub) WaitUntilEndpointDeleted(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) error {
	return workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilEndpointDeleted", input).Get(ctx, nil)
}

func (a *SageMakerStub) WaitUntilEndpointDeletedAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilEndpointDeleted", input)
	return NewVoidFuture(future)
}

func (a *SageMakerStub) WaitUntilEndpointInService(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) error {
	return workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilEndpointInService", input).Get(ctx, nil)
}

func (a *SageMakerStub) WaitUntilEndpointInServiceAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilEndpointInService", input)
	return NewVoidFuture(future)
}

func (a *SageMakerStub) WaitUntilNotebookInstanceDeleted(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error {
	return workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilNotebookInstanceDeleted", input).Get(ctx, nil)
}

func (a *SageMakerStub) WaitUntilNotebookInstanceDeletedAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilNotebookInstanceDeleted", input)
	return NewVoidFuture(future)
}

func (a *SageMakerStub) WaitUntilNotebookInstanceInService(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error {
	return workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilNotebookInstanceInService", input).Get(ctx, nil)
}

func (a *SageMakerStub) WaitUntilNotebookInstanceInServiceAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilNotebookInstanceInService", input)
	return NewVoidFuture(future)
}

func (a *SageMakerStub) WaitUntilNotebookInstanceStopped(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error {
	return workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilNotebookInstanceStopped", input).Get(ctx, nil)
}

func (a *SageMakerStub) WaitUntilNotebookInstanceStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilNotebookInstanceStopped", input)
	return NewVoidFuture(future)
}

func (a *SageMakerStub) WaitUntilProcessingJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilProcessingJobCompletedOrStopped", input).Get(ctx, nil)
}

func (a *SageMakerStub) WaitUntilProcessingJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilProcessingJobCompletedOrStopped", input)
	return NewVoidFuture(future)
}

func (a *SageMakerStub) WaitUntilTrainingJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilTrainingJobCompletedOrStopped", input).Get(ctx, nil)
}

func (a *SageMakerStub) WaitUntilTrainingJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilTrainingJobCompletedOrStopped", input)
	return NewVoidFuture(future)
}

func (a *SageMakerStub) WaitUntilTransformJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilTransformJobCompletedOrStopped", input).Get(ctx, nil)
}

func (a *SageMakerStub) WaitUntilTransformJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.sagemaker.WaitUntilTransformJobCompletedOrStopped", input)
	return NewVoidFuture(future)
}
