// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/appmesh"
	"go.temporal.io/sdk/workflow"
)

type AppMeshClient interface {
	CreateGatewayRoute(ctx workflow.Context, input *appmesh.CreateGatewayRouteInput) (*appmesh.CreateGatewayRouteOutput, error)
	CreateGatewayRouteAsync(ctx workflow.Context, input *appmesh.CreateGatewayRouteInput) *AppmeshCreateGatewayRouteFuture

	CreateMesh(ctx workflow.Context, input *appmesh.CreateMeshInput) (*appmesh.CreateMeshOutput, error)
	CreateMeshAsync(ctx workflow.Context, input *appmesh.CreateMeshInput) *AppmeshCreateMeshFuture

	CreateRoute(ctx workflow.Context, input *appmesh.CreateRouteInput) (*appmesh.CreateRouteOutput, error)
	CreateRouteAsync(ctx workflow.Context, input *appmesh.CreateRouteInput) *AppmeshCreateRouteFuture

	CreateVirtualGateway(ctx workflow.Context, input *appmesh.CreateVirtualGatewayInput) (*appmesh.CreateVirtualGatewayOutput, error)
	CreateVirtualGatewayAsync(ctx workflow.Context, input *appmesh.CreateVirtualGatewayInput) *AppmeshCreateVirtualGatewayFuture

	CreateVirtualNode(ctx workflow.Context, input *appmesh.CreateVirtualNodeInput) (*appmesh.CreateVirtualNodeOutput, error)
	CreateVirtualNodeAsync(ctx workflow.Context, input *appmesh.CreateVirtualNodeInput) *AppmeshCreateVirtualNodeFuture

	CreateVirtualRouter(ctx workflow.Context, input *appmesh.CreateVirtualRouterInput) (*appmesh.CreateVirtualRouterOutput, error)
	CreateVirtualRouterAsync(ctx workflow.Context, input *appmesh.CreateVirtualRouterInput) *AppmeshCreateVirtualRouterFuture

	CreateVirtualService(ctx workflow.Context, input *appmesh.CreateVirtualServiceInput) (*appmesh.CreateVirtualServiceOutput, error)
	CreateVirtualServiceAsync(ctx workflow.Context, input *appmesh.CreateVirtualServiceInput) *AppmeshCreateVirtualServiceFuture

	DeleteGatewayRoute(ctx workflow.Context, input *appmesh.DeleteGatewayRouteInput) (*appmesh.DeleteGatewayRouteOutput, error)
	DeleteGatewayRouteAsync(ctx workflow.Context, input *appmesh.DeleteGatewayRouteInput) *AppmeshDeleteGatewayRouteFuture

	DeleteMesh(ctx workflow.Context, input *appmesh.DeleteMeshInput) (*appmesh.DeleteMeshOutput, error)
	DeleteMeshAsync(ctx workflow.Context, input *appmesh.DeleteMeshInput) *AppmeshDeleteMeshFuture

	DeleteRoute(ctx workflow.Context, input *appmesh.DeleteRouteInput) (*appmesh.DeleteRouteOutput, error)
	DeleteRouteAsync(ctx workflow.Context, input *appmesh.DeleteRouteInput) *AppmeshDeleteRouteFuture

	DeleteVirtualGateway(ctx workflow.Context, input *appmesh.DeleteVirtualGatewayInput) (*appmesh.DeleteVirtualGatewayOutput, error)
	DeleteVirtualGatewayAsync(ctx workflow.Context, input *appmesh.DeleteVirtualGatewayInput) *AppmeshDeleteVirtualGatewayFuture

	DeleteVirtualNode(ctx workflow.Context, input *appmesh.DeleteVirtualNodeInput) (*appmesh.DeleteVirtualNodeOutput, error)
	DeleteVirtualNodeAsync(ctx workflow.Context, input *appmesh.DeleteVirtualNodeInput) *AppmeshDeleteVirtualNodeFuture

	DeleteVirtualRouter(ctx workflow.Context, input *appmesh.DeleteVirtualRouterInput) (*appmesh.DeleteVirtualRouterOutput, error)
	DeleteVirtualRouterAsync(ctx workflow.Context, input *appmesh.DeleteVirtualRouterInput) *AppmeshDeleteVirtualRouterFuture

	DeleteVirtualService(ctx workflow.Context, input *appmesh.DeleteVirtualServiceInput) (*appmesh.DeleteVirtualServiceOutput, error)
	DeleteVirtualServiceAsync(ctx workflow.Context, input *appmesh.DeleteVirtualServiceInput) *AppmeshDeleteVirtualServiceFuture

	DescribeGatewayRoute(ctx workflow.Context, input *appmesh.DescribeGatewayRouteInput) (*appmesh.DescribeGatewayRouteOutput, error)
	DescribeGatewayRouteAsync(ctx workflow.Context, input *appmesh.DescribeGatewayRouteInput) *AppmeshDescribeGatewayRouteFuture

	DescribeMesh(ctx workflow.Context, input *appmesh.DescribeMeshInput) (*appmesh.DescribeMeshOutput, error)
	DescribeMeshAsync(ctx workflow.Context, input *appmesh.DescribeMeshInput) *AppmeshDescribeMeshFuture

	DescribeRoute(ctx workflow.Context, input *appmesh.DescribeRouteInput) (*appmesh.DescribeRouteOutput, error)
	DescribeRouteAsync(ctx workflow.Context, input *appmesh.DescribeRouteInput) *AppmeshDescribeRouteFuture

	DescribeVirtualGateway(ctx workflow.Context, input *appmesh.DescribeVirtualGatewayInput) (*appmesh.DescribeVirtualGatewayOutput, error)
	DescribeVirtualGatewayAsync(ctx workflow.Context, input *appmesh.DescribeVirtualGatewayInput) *AppmeshDescribeVirtualGatewayFuture

	DescribeVirtualNode(ctx workflow.Context, input *appmesh.DescribeVirtualNodeInput) (*appmesh.DescribeVirtualNodeOutput, error)
	DescribeVirtualNodeAsync(ctx workflow.Context, input *appmesh.DescribeVirtualNodeInput) *AppmeshDescribeVirtualNodeFuture

	DescribeVirtualRouter(ctx workflow.Context, input *appmesh.DescribeVirtualRouterInput) (*appmesh.DescribeVirtualRouterOutput, error)
	DescribeVirtualRouterAsync(ctx workflow.Context, input *appmesh.DescribeVirtualRouterInput) *AppmeshDescribeVirtualRouterFuture

	DescribeVirtualService(ctx workflow.Context, input *appmesh.DescribeVirtualServiceInput) (*appmesh.DescribeVirtualServiceOutput, error)
	DescribeVirtualServiceAsync(ctx workflow.Context, input *appmesh.DescribeVirtualServiceInput) *AppmeshDescribeVirtualServiceFuture

	ListGatewayRoutes(ctx workflow.Context, input *appmesh.ListGatewayRoutesInput) (*appmesh.ListGatewayRoutesOutput, error)
	ListGatewayRoutesAsync(ctx workflow.Context, input *appmesh.ListGatewayRoutesInput) *AppmeshListGatewayRoutesFuture

	ListMeshes(ctx workflow.Context, input *appmesh.ListMeshesInput) (*appmesh.ListMeshesOutput, error)
	ListMeshesAsync(ctx workflow.Context, input *appmesh.ListMeshesInput) *AppmeshListMeshesFuture

	ListRoutes(ctx workflow.Context, input *appmesh.ListRoutesInput) (*appmesh.ListRoutesOutput, error)
	ListRoutesAsync(ctx workflow.Context, input *appmesh.ListRoutesInput) *AppmeshListRoutesFuture

	ListTagsForResource(ctx workflow.Context, input *appmesh.ListTagsForResourceInput) (*appmesh.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *appmesh.ListTagsForResourceInput) *AppmeshListTagsForResourceFuture

	ListVirtualGateways(ctx workflow.Context, input *appmesh.ListVirtualGatewaysInput) (*appmesh.ListVirtualGatewaysOutput, error)
	ListVirtualGatewaysAsync(ctx workflow.Context, input *appmesh.ListVirtualGatewaysInput) *AppmeshListVirtualGatewaysFuture

	ListVirtualNodes(ctx workflow.Context, input *appmesh.ListVirtualNodesInput) (*appmesh.ListVirtualNodesOutput, error)
	ListVirtualNodesAsync(ctx workflow.Context, input *appmesh.ListVirtualNodesInput) *AppmeshListVirtualNodesFuture

	ListVirtualRouters(ctx workflow.Context, input *appmesh.ListVirtualRoutersInput) (*appmesh.ListVirtualRoutersOutput, error)
	ListVirtualRoutersAsync(ctx workflow.Context, input *appmesh.ListVirtualRoutersInput) *AppmeshListVirtualRoutersFuture

	ListVirtualServices(ctx workflow.Context, input *appmesh.ListVirtualServicesInput) (*appmesh.ListVirtualServicesOutput, error)
	ListVirtualServicesAsync(ctx workflow.Context, input *appmesh.ListVirtualServicesInput) *AppmeshListVirtualServicesFuture

	TagResource(ctx workflow.Context, input *appmesh.TagResourceInput) (*appmesh.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *appmesh.TagResourceInput) *AppmeshTagResourceFuture

	UntagResource(ctx workflow.Context, input *appmesh.UntagResourceInput) (*appmesh.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *appmesh.UntagResourceInput) *AppmeshUntagResourceFuture

	UpdateGatewayRoute(ctx workflow.Context, input *appmesh.UpdateGatewayRouteInput) (*appmesh.UpdateGatewayRouteOutput, error)
	UpdateGatewayRouteAsync(ctx workflow.Context, input *appmesh.UpdateGatewayRouteInput) *AppmeshUpdateGatewayRouteFuture

	UpdateMesh(ctx workflow.Context, input *appmesh.UpdateMeshInput) (*appmesh.UpdateMeshOutput, error)
	UpdateMeshAsync(ctx workflow.Context, input *appmesh.UpdateMeshInput) *AppmeshUpdateMeshFuture

	UpdateRoute(ctx workflow.Context, input *appmesh.UpdateRouteInput) (*appmesh.UpdateRouteOutput, error)
	UpdateRouteAsync(ctx workflow.Context, input *appmesh.UpdateRouteInput) *AppmeshUpdateRouteFuture

	UpdateVirtualGateway(ctx workflow.Context, input *appmesh.UpdateVirtualGatewayInput) (*appmesh.UpdateVirtualGatewayOutput, error)
	UpdateVirtualGatewayAsync(ctx workflow.Context, input *appmesh.UpdateVirtualGatewayInput) *AppmeshUpdateVirtualGatewayFuture

	UpdateVirtualNode(ctx workflow.Context, input *appmesh.UpdateVirtualNodeInput) (*appmesh.UpdateVirtualNodeOutput, error)
	UpdateVirtualNodeAsync(ctx workflow.Context, input *appmesh.UpdateVirtualNodeInput) *AppmeshUpdateVirtualNodeFuture

	UpdateVirtualRouter(ctx workflow.Context, input *appmesh.UpdateVirtualRouterInput) (*appmesh.UpdateVirtualRouterOutput, error)
	UpdateVirtualRouterAsync(ctx workflow.Context, input *appmesh.UpdateVirtualRouterInput) *AppmeshUpdateVirtualRouterFuture

	UpdateVirtualService(ctx workflow.Context, input *appmesh.UpdateVirtualServiceInput) (*appmesh.UpdateVirtualServiceOutput, error)
	UpdateVirtualServiceAsync(ctx workflow.Context, input *appmesh.UpdateVirtualServiceInput) *AppmeshUpdateVirtualServiceFuture
}

type AppMeshStub struct{}

func NewAppMeshStub() AppMeshClient {
	return &AppMeshStub{}
}

type AppmeshCreateGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *AppmeshCreateGatewayRouteFuture) Get(ctx workflow.Context) (*appmesh.CreateGatewayRouteOutput, error) {
	var output appmesh.CreateGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshCreateMeshFuture struct {
	Future workflow.Future
}

func (r *AppmeshCreateMeshFuture) Get(ctx workflow.Context) (*appmesh.CreateMeshOutput, error) {
	var output appmesh.CreateMeshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshCreateRouteFuture struct {
	Future workflow.Future
}

func (r *AppmeshCreateRouteFuture) Get(ctx workflow.Context) (*appmesh.CreateRouteOutput, error) {
	var output appmesh.CreateRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshCreateVirtualGatewayFuture struct {
	Future workflow.Future
}

func (r *AppmeshCreateVirtualGatewayFuture) Get(ctx workflow.Context) (*appmesh.CreateVirtualGatewayOutput, error) {
	var output appmesh.CreateVirtualGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshCreateVirtualNodeFuture struct {
	Future workflow.Future
}

func (r *AppmeshCreateVirtualNodeFuture) Get(ctx workflow.Context) (*appmesh.CreateVirtualNodeOutput, error) {
	var output appmesh.CreateVirtualNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshCreateVirtualRouterFuture struct {
	Future workflow.Future
}

func (r *AppmeshCreateVirtualRouterFuture) Get(ctx workflow.Context) (*appmesh.CreateVirtualRouterOutput, error) {
	var output appmesh.CreateVirtualRouterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshCreateVirtualServiceFuture struct {
	Future workflow.Future
}

func (r *AppmeshCreateVirtualServiceFuture) Get(ctx workflow.Context) (*appmesh.CreateVirtualServiceOutput, error) {
	var output appmesh.CreateVirtualServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDeleteGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *AppmeshDeleteGatewayRouteFuture) Get(ctx workflow.Context) (*appmesh.DeleteGatewayRouteOutput, error) {
	var output appmesh.DeleteGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDeleteMeshFuture struct {
	Future workflow.Future
}

func (r *AppmeshDeleteMeshFuture) Get(ctx workflow.Context) (*appmesh.DeleteMeshOutput, error) {
	var output appmesh.DeleteMeshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDeleteRouteFuture struct {
	Future workflow.Future
}

func (r *AppmeshDeleteRouteFuture) Get(ctx workflow.Context) (*appmesh.DeleteRouteOutput, error) {
	var output appmesh.DeleteRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDeleteVirtualGatewayFuture struct {
	Future workflow.Future
}

func (r *AppmeshDeleteVirtualGatewayFuture) Get(ctx workflow.Context) (*appmesh.DeleteVirtualGatewayOutput, error) {
	var output appmesh.DeleteVirtualGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDeleteVirtualNodeFuture struct {
	Future workflow.Future
}

func (r *AppmeshDeleteVirtualNodeFuture) Get(ctx workflow.Context) (*appmesh.DeleteVirtualNodeOutput, error) {
	var output appmesh.DeleteVirtualNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDeleteVirtualRouterFuture struct {
	Future workflow.Future
}

func (r *AppmeshDeleteVirtualRouterFuture) Get(ctx workflow.Context) (*appmesh.DeleteVirtualRouterOutput, error) {
	var output appmesh.DeleteVirtualRouterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDeleteVirtualServiceFuture struct {
	Future workflow.Future
}

func (r *AppmeshDeleteVirtualServiceFuture) Get(ctx workflow.Context) (*appmesh.DeleteVirtualServiceOutput, error) {
	var output appmesh.DeleteVirtualServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDescribeGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *AppmeshDescribeGatewayRouteFuture) Get(ctx workflow.Context) (*appmesh.DescribeGatewayRouteOutput, error) {
	var output appmesh.DescribeGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDescribeMeshFuture struct {
	Future workflow.Future
}

func (r *AppmeshDescribeMeshFuture) Get(ctx workflow.Context) (*appmesh.DescribeMeshOutput, error) {
	var output appmesh.DescribeMeshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDescribeRouteFuture struct {
	Future workflow.Future
}

func (r *AppmeshDescribeRouteFuture) Get(ctx workflow.Context) (*appmesh.DescribeRouteOutput, error) {
	var output appmesh.DescribeRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDescribeVirtualGatewayFuture struct {
	Future workflow.Future
}

func (r *AppmeshDescribeVirtualGatewayFuture) Get(ctx workflow.Context) (*appmesh.DescribeVirtualGatewayOutput, error) {
	var output appmesh.DescribeVirtualGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDescribeVirtualNodeFuture struct {
	Future workflow.Future
}

func (r *AppmeshDescribeVirtualNodeFuture) Get(ctx workflow.Context) (*appmesh.DescribeVirtualNodeOutput, error) {
	var output appmesh.DescribeVirtualNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDescribeVirtualRouterFuture struct {
	Future workflow.Future
}

func (r *AppmeshDescribeVirtualRouterFuture) Get(ctx workflow.Context) (*appmesh.DescribeVirtualRouterOutput, error) {
	var output appmesh.DescribeVirtualRouterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshDescribeVirtualServiceFuture struct {
	Future workflow.Future
}

func (r *AppmeshDescribeVirtualServiceFuture) Get(ctx workflow.Context) (*appmesh.DescribeVirtualServiceOutput, error) {
	var output appmesh.DescribeVirtualServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshListGatewayRoutesFuture struct {
	Future workflow.Future
}

func (r *AppmeshListGatewayRoutesFuture) Get(ctx workflow.Context) (*appmesh.ListGatewayRoutesOutput, error) {
	var output appmesh.ListGatewayRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshListMeshesFuture struct {
	Future workflow.Future
}

func (r *AppmeshListMeshesFuture) Get(ctx workflow.Context) (*appmesh.ListMeshesOutput, error) {
	var output appmesh.ListMeshesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshListRoutesFuture struct {
	Future workflow.Future
}

func (r *AppmeshListRoutesFuture) Get(ctx workflow.Context) (*appmesh.ListRoutesOutput, error) {
	var output appmesh.ListRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *AppmeshListTagsForResourceFuture) Get(ctx workflow.Context) (*appmesh.ListTagsForResourceOutput, error) {
	var output appmesh.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshListVirtualGatewaysFuture struct {
	Future workflow.Future
}

func (r *AppmeshListVirtualGatewaysFuture) Get(ctx workflow.Context) (*appmesh.ListVirtualGatewaysOutput, error) {
	var output appmesh.ListVirtualGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshListVirtualNodesFuture struct {
	Future workflow.Future
}

func (r *AppmeshListVirtualNodesFuture) Get(ctx workflow.Context) (*appmesh.ListVirtualNodesOutput, error) {
	var output appmesh.ListVirtualNodesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshListVirtualRoutersFuture struct {
	Future workflow.Future
}

func (r *AppmeshListVirtualRoutersFuture) Get(ctx workflow.Context) (*appmesh.ListVirtualRoutersOutput, error) {
	var output appmesh.ListVirtualRoutersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshListVirtualServicesFuture struct {
	Future workflow.Future
}

func (r *AppmeshListVirtualServicesFuture) Get(ctx workflow.Context) (*appmesh.ListVirtualServicesOutput, error) {
	var output appmesh.ListVirtualServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshTagResourceFuture struct {
	Future workflow.Future
}

func (r *AppmeshTagResourceFuture) Get(ctx workflow.Context) (*appmesh.TagResourceOutput, error) {
	var output appmesh.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshUntagResourceFuture struct {
	Future workflow.Future
}

func (r *AppmeshUntagResourceFuture) Get(ctx workflow.Context) (*appmesh.UntagResourceOutput, error) {
	var output appmesh.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshUpdateGatewayRouteFuture struct {
	Future workflow.Future
}

func (r *AppmeshUpdateGatewayRouteFuture) Get(ctx workflow.Context) (*appmesh.UpdateGatewayRouteOutput, error) {
	var output appmesh.UpdateGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshUpdateMeshFuture struct {
	Future workflow.Future
}

func (r *AppmeshUpdateMeshFuture) Get(ctx workflow.Context) (*appmesh.UpdateMeshOutput, error) {
	var output appmesh.UpdateMeshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshUpdateRouteFuture struct {
	Future workflow.Future
}

func (r *AppmeshUpdateRouteFuture) Get(ctx workflow.Context) (*appmesh.UpdateRouteOutput, error) {
	var output appmesh.UpdateRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshUpdateVirtualGatewayFuture struct {
	Future workflow.Future
}

func (r *AppmeshUpdateVirtualGatewayFuture) Get(ctx workflow.Context) (*appmesh.UpdateVirtualGatewayOutput, error) {
	var output appmesh.UpdateVirtualGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshUpdateVirtualNodeFuture struct {
	Future workflow.Future
}

func (r *AppmeshUpdateVirtualNodeFuture) Get(ctx workflow.Context) (*appmesh.UpdateVirtualNodeOutput, error) {
	var output appmesh.UpdateVirtualNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshUpdateVirtualRouterFuture struct {
	Future workflow.Future
}

func (r *AppmeshUpdateVirtualRouterFuture) Get(ctx workflow.Context) (*appmesh.UpdateVirtualRouterOutput, error) {
	var output appmesh.UpdateVirtualRouterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppmeshUpdateVirtualServiceFuture struct {
	Future workflow.Future
}

func (r *AppmeshUpdateVirtualServiceFuture) Get(ctx workflow.Context) (*appmesh.UpdateVirtualServiceOutput, error) {
	var output appmesh.UpdateVirtualServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) CreateGatewayRoute(ctx workflow.Context, input *appmesh.CreateGatewayRouteInput) (*appmesh.CreateGatewayRouteOutput, error) {
	var output appmesh.CreateGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) CreateGatewayRouteAsync(ctx workflow.Context, input *appmesh.CreateGatewayRouteInput) *AppmeshCreateGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateGatewayRoute", input)
	return &AppmeshCreateGatewayRouteFuture{Future: future}
}

func (a *AppMeshStub) CreateMesh(ctx workflow.Context, input *appmesh.CreateMeshInput) (*appmesh.CreateMeshOutput, error) {
	var output appmesh.CreateMeshOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateMesh", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) CreateMeshAsync(ctx workflow.Context, input *appmesh.CreateMeshInput) *AppmeshCreateMeshFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateMesh", input)
	return &AppmeshCreateMeshFuture{Future: future}
}

func (a *AppMeshStub) CreateRoute(ctx workflow.Context, input *appmesh.CreateRouteInput) (*appmesh.CreateRouteOutput, error) {
	var output appmesh.CreateRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) CreateRouteAsync(ctx workflow.Context, input *appmesh.CreateRouteInput) *AppmeshCreateRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateRoute", input)
	return &AppmeshCreateRouteFuture{Future: future}
}

func (a *AppMeshStub) CreateVirtualGateway(ctx workflow.Context, input *appmesh.CreateVirtualGatewayInput) (*appmesh.CreateVirtualGatewayOutput, error) {
	var output appmesh.CreateVirtualGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateVirtualGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) CreateVirtualGatewayAsync(ctx workflow.Context, input *appmesh.CreateVirtualGatewayInput) *AppmeshCreateVirtualGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateVirtualGateway", input)
	return &AppmeshCreateVirtualGatewayFuture{Future: future}
}

func (a *AppMeshStub) CreateVirtualNode(ctx workflow.Context, input *appmesh.CreateVirtualNodeInput) (*appmesh.CreateVirtualNodeOutput, error) {
	var output appmesh.CreateVirtualNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateVirtualNode", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) CreateVirtualNodeAsync(ctx workflow.Context, input *appmesh.CreateVirtualNodeInput) *AppmeshCreateVirtualNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateVirtualNode", input)
	return &AppmeshCreateVirtualNodeFuture{Future: future}
}

func (a *AppMeshStub) CreateVirtualRouter(ctx workflow.Context, input *appmesh.CreateVirtualRouterInput) (*appmesh.CreateVirtualRouterOutput, error) {
	var output appmesh.CreateVirtualRouterOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateVirtualRouter", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) CreateVirtualRouterAsync(ctx workflow.Context, input *appmesh.CreateVirtualRouterInput) *AppmeshCreateVirtualRouterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateVirtualRouter", input)
	return &AppmeshCreateVirtualRouterFuture{Future: future}
}

func (a *AppMeshStub) CreateVirtualService(ctx workflow.Context, input *appmesh.CreateVirtualServiceInput) (*appmesh.CreateVirtualServiceOutput, error) {
	var output appmesh.CreateVirtualServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateVirtualService", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) CreateVirtualServiceAsync(ctx workflow.Context, input *appmesh.CreateVirtualServiceInput) *AppmeshCreateVirtualServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.CreateVirtualService", input)
	return &AppmeshCreateVirtualServiceFuture{Future: future}
}

func (a *AppMeshStub) DeleteGatewayRoute(ctx workflow.Context, input *appmesh.DeleteGatewayRouteInput) (*appmesh.DeleteGatewayRouteOutput, error) {
	var output appmesh.DeleteGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DeleteGatewayRouteAsync(ctx workflow.Context, input *appmesh.DeleteGatewayRouteInput) *AppmeshDeleteGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteGatewayRoute", input)
	return &AppmeshDeleteGatewayRouteFuture{Future: future}
}

func (a *AppMeshStub) DeleteMesh(ctx workflow.Context, input *appmesh.DeleteMeshInput) (*appmesh.DeleteMeshOutput, error) {
	var output appmesh.DeleteMeshOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteMesh", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DeleteMeshAsync(ctx workflow.Context, input *appmesh.DeleteMeshInput) *AppmeshDeleteMeshFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteMesh", input)
	return &AppmeshDeleteMeshFuture{Future: future}
}

func (a *AppMeshStub) DeleteRoute(ctx workflow.Context, input *appmesh.DeleteRouteInput) (*appmesh.DeleteRouteOutput, error) {
	var output appmesh.DeleteRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DeleteRouteAsync(ctx workflow.Context, input *appmesh.DeleteRouteInput) *AppmeshDeleteRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteRoute", input)
	return &AppmeshDeleteRouteFuture{Future: future}
}

func (a *AppMeshStub) DeleteVirtualGateway(ctx workflow.Context, input *appmesh.DeleteVirtualGatewayInput) (*appmesh.DeleteVirtualGatewayOutput, error) {
	var output appmesh.DeleteVirtualGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteVirtualGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DeleteVirtualGatewayAsync(ctx workflow.Context, input *appmesh.DeleteVirtualGatewayInput) *AppmeshDeleteVirtualGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteVirtualGateway", input)
	return &AppmeshDeleteVirtualGatewayFuture{Future: future}
}

func (a *AppMeshStub) DeleteVirtualNode(ctx workflow.Context, input *appmesh.DeleteVirtualNodeInput) (*appmesh.DeleteVirtualNodeOutput, error) {
	var output appmesh.DeleteVirtualNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteVirtualNode", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DeleteVirtualNodeAsync(ctx workflow.Context, input *appmesh.DeleteVirtualNodeInput) *AppmeshDeleteVirtualNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteVirtualNode", input)
	return &AppmeshDeleteVirtualNodeFuture{Future: future}
}

func (a *AppMeshStub) DeleteVirtualRouter(ctx workflow.Context, input *appmesh.DeleteVirtualRouterInput) (*appmesh.DeleteVirtualRouterOutput, error) {
	var output appmesh.DeleteVirtualRouterOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteVirtualRouter", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DeleteVirtualRouterAsync(ctx workflow.Context, input *appmesh.DeleteVirtualRouterInput) *AppmeshDeleteVirtualRouterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteVirtualRouter", input)
	return &AppmeshDeleteVirtualRouterFuture{Future: future}
}

func (a *AppMeshStub) DeleteVirtualService(ctx workflow.Context, input *appmesh.DeleteVirtualServiceInput) (*appmesh.DeleteVirtualServiceOutput, error) {
	var output appmesh.DeleteVirtualServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteVirtualService", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DeleteVirtualServiceAsync(ctx workflow.Context, input *appmesh.DeleteVirtualServiceInput) *AppmeshDeleteVirtualServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DeleteVirtualService", input)
	return &AppmeshDeleteVirtualServiceFuture{Future: future}
}

func (a *AppMeshStub) DescribeGatewayRoute(ctx workflow.Context, input *appmesh.DescribeGatewayRouteInput) (*appmesh.DescribeGatewayRouteOutput, error) {
	var output appmesh.DescribeGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DescribeGatewayRouteAsync(ctx workflow.Context, input *appmesh.DescribeGatewayRouteInput) *AppmeshDescribeGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeGatewayRoute", input)
	return &AppmeshDescribeGatewayRouteFuture{Future: future}
}

func (a *AppMeshStub) DescribeMesh(ctx workflow.Context, input *appmesh.DescribeMeshInput) (*appmesh.DescribeMeshOutput, error) {
	var output appmesh.DescribeMeshOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeMesh", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DescribeMeshAsync(ctx workflow.Context, input *appmesh.DescribeMeshInput) *AppmeshDescribeMeshFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeMesh", input)
	return &AppmeshDescribeMeshFuture{Future: future}
}

func (a *AppMeshStub) DescribeRoute(ctx workflow.Context, input *appmesh.DescribeRouteInput) (*appmesh.DescribeRouteOutput, error) {
	var output appmesh.DescribeRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DescribeRouteAsync(ctx workflow.Context, input *appmesh.DescribeRouteInput) *AppmeshDescribeRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeRoute", input)
	return &AppmeshDescribeRouteFuture{Future: future}
}

func (a *AppMeshStub) DescribeVirtualGateway(ctx workflow.Context, input *appmesh.DescribeVirtualGatewayInput) (*appmesh.DescribeVirtualGatewayOutput, error) {
	var output appmesh.DescribeVirtualGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeVirtualGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DescribeVirtualGatewayAsync(ctx workflow.Context, input *appmesh.DescribeVirtualGatewayInput) *AppmeshDescribeVirtualGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeVirtualGateway", input)
	return &AppmeshDescribeVirtualGatewayFuture{Future: future}
}

func (a *AppMeshStub) DescribeVirtualNode(ctx workflow.Context, input *appmesh.DescribeVirtualNodeInput) (*appmesh.DescribeVirtualNodeOutput, error) {
	var output appmesh.DescribeVirtualNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeVirtualNode", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DescribeVirtualNodeAsync(ctx workflow.Context, input *appmesh.DescribeVirtualNodeInput) *AppmeshDescribeVirtualNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeVirtualNode", input)
	return &AppmeshDescribeVirtualNodeFuture{Future: future}
}

func (a *AppMeshStub) DescribeVirtualRouter(ctx workflow.Context, input *appmesh.DescribeVirtualRouterInput) (*appmesh.DescribeVirtualRouterOutput, error) {
	var output appmesh.DescribeVirtualRouterOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeVirtualRouter", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DescribeVirtualRouterAsync(ctx workflow.Context, input *appmesh.DescribeVirtualRouterInput) *AppmeshDescribeVirtualRouterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeVirtualRouter", input)
	return &AppmeshDescribeVirtualRouterFuture{Future: future}
}

func (a *AppMeshStub) DescribeVirtualService(ctx workflow.Context, input *appmesh.DescribeVirtualServiceInput) (*appmesh.DescribeVirtualServiceOutput, error) {
	var output appmesh.DescribeVirtualServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeVirtualService", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) DescribeVirtualServiceAsync(ctx workflow.Context, input *appmesh.DescribeVirtualServiceInput) *AppmeshDescribeVirtualServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.DescribeVirtualService", input)
	return &AppmeshDescribeVirtualServiceFuture{Future: future}
}

func (a *AppMeshStub) ListGatewayRoutes(ctx workflow.Context, input *appmesh.ListGatewayRoutesInput) (*appmesh.ListGatewayRoutesOutput, error) {
	var output appmesh.ListGatewayRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.ListGatewayRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) ListGatewayRoutesAsync(ctx workflow.Context, input *appmesh.ListGatewayRoutesInput) *AppmeshListGatewayRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.ListGatewayRoutes", input)
	return &AppmeshListGatewayRoutesFuture{Future: future}
}

func (a *AppMeshStub) ListMeshes(ctx workflow.Context, input *appmesh.ListMeshesInput) (*appmesh.ListMeshesOutput, error) {
	var output appmesh.ListMeshesOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.ListMeshes", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) ListMeshesAsync(ctx workflow.Context, input *appmesh.ListMeshesInput) *AppmeshListMeshesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.ListMeshes", input)
	return &AppmeshListMeshesFuture{Future: future}
}

func (a *AppMeshStub) ListRoutes(ctx workflow.Context, input *appmesh.ListRoutesInput) (*appmesh.ListRoutesOutput, error) {
	var output appmesh.ListRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.ListRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) ListRoutesAsync(ctx workflow.Context, input *appmesh.ListRoutesInput) *AppmeshListRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.ListRoutes", input)
	return &AppmeshListRoutesFuture{Future: future}
}

func (a *AppMeshStub) ListTagsForResource(ctx workflow.Context, input *appmesh.ListTagsForResourceInput) (*appmesh.ListTagsForResourceOutput, error) {
	var output appmesh.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) ListTagsForResourceAsync(ctx workflow.Context, input *appmesh.ListTagsForResourceInput) *AppmeshListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.ListTagsForResource", input)
	return &AppmeshListTagsForResourceFuture{Future: future}
}

func (a *AppMeshStub) ListVirtualGateways(ctx workflow.Context, input *appmesh.ListVirtualGatewaysInput) (*appmesh.ListVirtualGatewaysOutput, error) {
	var output appmesh.ListVirtualGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.ListVirtualGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) ListVirtualGatewaysAsync(ctx workflow.Context, input *appmesh.ListVirtualGatewaysInput) *AppmeshListVirtualGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.ListVirtualGateways", input)
	return &AppmeshListVirtualGatewaysFuture{Future: future}
}

func (a *AppMeshStub) ListVirtualNodes(ctx workflow.Context, input *appmesh.ListVirtualNodesInput) (*appmesh.ListVirtualNodesOutput, error) {
	var output appmesh.ListVirtualNodesOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.ListVirtualNodes", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) ListVirtualNodesAsync(ctx workflow.Context, input *appmesh.ListVirtualNodesInput) *AppmeshListVirtualNodesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.ListVirtualNodes", input)
	return &AppmeshListVirtualNodesFuture{Future: future}
}

func (a *AppMeshStub) ListVirtualRouters(ctx workflow.Context, input *appmesh.ListVirtualRoutersInput) (*appmesh.ListVirtualRoutersOutput, error) {
	var output appmesh.ListVirtualRoutersOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.ListVirtualRouters", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) ListVirtualRoutersAsync(ctx workflow.Context, input *appmesh.ListVirtualRoutersInput) *AppmeshListVirtualRoutersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.ListVirtualRouters", input)
	return &AppmeshListVirtualRoutersFuture{Future: future}
}

func (a *AppMeshStub) ListVirtualServices(ctx workflow.Context, input *appmesh.ListVirtualServicesInput) (*appmesh.ListVirtualServicesOutput, error) {
	var output appmesh.ListVirtualServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.ListVirtualServices", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) ListVirtualServicesAsync(ctx workflow.Context, input *appmesh.ListVirtualServicesInput) *AppmeshListVirtualServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.ListVirtualServices", input)
	return &AppmeshListVirtualServicesFuture{Future: future}
}

func (a *AppMeshStub) TagResource(ctx workflow.Context, input *appmesh.TagResourceInput) (*appmesh.TagResourceOutput, error) {
	var output appmesh.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) TagResourceAsync(ctx workflow.Context, input *appmesh.TagResourceInput) *AppmeshTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.TagResource", input)
	return &AppmeshTagResourceFuture{Future: future}
}

func (a *AppMeshStub) UntagResource(ctx workflow.Context, input *appmesh.UntagResourceInput) (*appmesh.UntagResourceOutput, error) {
	var output appmesh.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) UntagResourceAsync(ctx workflow.Context, input *appmesh.UntagResourceInput) *AppmeshUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.UntagResource", input)
	return &AppmeshUntagResourceFuture{Future: future}
}

func (a *AppMeshStub) UpdateGatewayRoute(ctx workflow.Context, input *appmesh.UpdateGatewayRouteInput) (*appmesh.UpdateGatewayRouteOutput, error) {
	var output appmesh.UpdateGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) UpdateGatewayRouteAsync(ctx workflow.Context, input *appmesh.UpdateGatewayRouteInput) *AppmeshUpdateGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateGatewayRoute", input)
	return &AppmeshUpdateGatewayRouteFuture{Future: future}
}

func (a *AppMeshStub) UpdateMesh(ctx workflow.Context, input *appmesh.UpdateMeshInput) (*appmesh.UpdateMeshOutput, error) {
	var output appmesh.UpdateMeshOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateMesh", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) UpdateMeshAsync(ctx workflow.Context, input *appmesh.UpdateMeshInput) *AppmeshUpdateMeshFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateMesh", input)
	return &AppmeshUpdateMeshFuture{Future: future}
}

func (a *AppMeshStub) UpdateRoute(ctx workflow.Context, input *appmesh.UpdateRouteInput) (*appmesh.UpdateRouteOutput, error) {
	var output appmesh.UpdateRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) UpdateRouteAsync(ctx workflow.Context, input *appmesh.UpdateRouteInput) *AppmeshUpdateRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateRoute", input)
	return &AppmeshUpdateRouteFuture{Future: future}
}

func (a *AppMeshStub) UpdateVirtualGateway(ctx workflow.Context, input *appmesh.UpdateVirtualGatewayInput) (*appmesh.UpdateVirtualGatewayOutput, error) {
	var output appmesh.UpdateVirtualGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateVirtualGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) UpdateVirtualGatewayAsync(ctx workflow.Context, input *appmesh.UpdateVirtualGatewayInput) *AppmeshUpdateVirtualGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateVirtualGateway", input)
	return &AppmeshUpdateVirtualGatewayFuture{Future: future}
}

func (a *AppMeshStub) UpdateVirtualNode(ctx workflow.Context, input *appmesh.UpdateVirtualNodeInput) (*appmesh.UpdateVirtualNodeOutput, error) {
	var output appmesh.UpdateVirtualNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateVirtualNode", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) UpdateVirtualNodeAsync(ctx workflow.Context, input *appmesh.UpdateVirtualNodeInput) *AppmeshUpdateVirtualNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateVirtualNode", input)
	return &AppmeshUpdateVirtualNodeFuture{Future: future}
}

func (a *AppMeshStub) UpdateVirtualRouter(ctx workflow.Context, input *appmesh.UpdateVirtualRouterInput) (*appmesh.UpdateVirtualRouterOutput, error) {
	var output appmesh.UpdateVirtualRouterOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateVirtualRouter", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) UpdateVirtualRouterAsync(ctx workflow.Context, input *appmesh.UpdateVirtualRouterInput) *AppmeshUpdateVirtualRouterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateVirtualRouter", input)
	return &AppmeshUpdateVirtualRouterFuture{Future: future}
}

func (a *AppMeshStub) UpdateVirtualService(ctx workflow.Context, input *appmesh.UpdateVirtualServiceInput) (*appmesh.UpdateVirtualServiceOutput, error) {
	var output appmesh.UpdateVirtualServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateVirtualService", input).Get(ctx, &output)
	return &output, err
}

func (a *AppMeshStub) UpdateVirtualServiceAsync(ctx workflow.Context, input *appmesh.UpdateVirtualServiceInput) *AppmeshUpdateVirtualServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.appmesh.UpdateVirtualService", input)
	return &AppmeshUpdateVirtualServiceFuture{Future: future}
}
