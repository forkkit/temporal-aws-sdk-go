// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	"go.temporal.io/sdk/workflow"
)

type CognitoIdentityProviderClient interface {
	AddCustomAttributes(ctx workflow.Context, input *cognitoidentityprovider.AddCustomAttributesInput) (*cognitoidentityprovider.AddCustomAttributesOutput, error)
	AddCustomAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AddCustomAttributesInput) *CognitoidentityproviderAddCustomAttributesFuture

	AdminAddUserToGroup(ctx workflow.Context, input *cognitoidentityprovider.AdminAddUserToGroupInput) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error)
	AdminAddUserToGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminAddUserToGroupInput) *CognitoidentityproviderAdminAddUserToGroupFuture

	AdminConfirmSignUp(ctx workflow.Context, input *cognitoidentityprovider.AdminConfirmSignUpInput) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error)
	AdminConfirmSignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminConfirmSignUpInput) *CognitoidentityproviderAdminConfirmSignUpFuture

	AdminCreateUser(ctx workflow.Context, input *cognitoidentityprovider.AdminCreateUserInput) (*cognitoidentityprovider.AdminCreateUserOutput, error)
	AdminCreateUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminCreateUserInput) *CognitoidentityproviderAdminCreateUserFuture

	AdminDeleteUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserInput) (*cognitoidentityprovider.AdminDeleteUserOutput, error)
	AdminDeleteUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserInput) *CognitoidentityproviderAdminDeleteUserFuture

	AdminDeleteUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserAttributesInput) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error)
	AdminDeleteUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserAttributesInput) *CognitoidentityproviderAdminDeleteUserAttributesFuture

	AdminDisableProviderForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableProviderForUserInput) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error)
	AdminDisableProviderForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableProviderForUserInput) *CognitoidentityproviderAdminDisableProviderForUserFuture

	AdminDisableUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableUserInput) (*cognitoidentityprovider.AdminDisableUserOutput, error)
	AdminDisableUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableUserInput) *CognitoidentityproviderAdminDisableUserFuture

	AdminEnableUser(ctx workflow.Context, input *cognitoidentityprovider.AdminEnableUserInput) (*cognitoidentityprovider.AdminEnableUserOutput, error)
	AdminEnableUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminEnableUserInput) *CognitoidentityproviderAdminEnableUserFuture

	AdminForgetDevice(ctx workflow.Context, input *cognitoidentityprovider.AdminForgetDeviceInput) (*cognitoidentityprovider.AdminForgetDeviceOutput, error)
	AdminForgetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminForgetDeviceInput) *CognitoidentityproviderAdminForgetDeviceFuture

	AdminGetDevice(ctx workflow.Context, input *cognitoidentityprovider.AdminGetDeviceInput) (*cognitoidentityprovider.AdminGetDeviceOutput, error)
	AdminGetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminGetDeviceInput) *CognitoidentityproviderAdminGetDeviceFuture

	AdminGetUser(ctx workflow.Context, input *cognitoidentityprovider.AdminGetUserInput) (*cognitoidentityprovider.AdminGetUserOutput, error)
	AdminGetUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminGetUserInput) *CognitoidentityproviderAdminGetUserFuture

	AdminInitiateAuth(ctx workflow.Context, input *cognitoidentityprovider.AdminInitiateAuthInput) (*cognitoidentityprovider.AdminInitiateAuthOutput, error)
	AdminInitiateAuthAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminInitiateAuthInput) *CognitoidentityproviderAdminInitiateAuthFuture

	AdminLinkProviderForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminLinkProviderForUserInput) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error)
	AdminLinkProviderForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminLinkProviderForUserInput) *CognitoidentityproviderAdminLinkProviderForUserFuture

	AdminListDevices(ctx workflow.Context, input *cognitoidentityprovider.AdminListDevicesInput) (*cognitoidentityprovider.AdminListDevicesOutput, error)
	AdminListDevicesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListDevicesInput) *CognitoidentityproviderAdminListDevicesFuture

	AdminListGroupsForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error)
	AdminListGroupsForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput) *CognitoidentityproviderAdminListGroupsForUserFuture

	AdminListUserAuthEvents(ctx workflow.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error)
	AdminListUserAuthEventsAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput) *CognitoidentityproviderAdminListUserAuthEventsFuture

	AdminRemoveUserFromGroup(ctx workflow.Context, input *cognitoidentityprovider.AdminRemoveUserFromGroupInput) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error)
	AdminRemoveUserFromGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminRemoveUserFromGroupInput) *CognitoidentityproviderAdminRemoveUserFromGroupFuture

	AdminResetUserPassword(ctx workflow.Context, input *cognitoidentityprovider.AdminResetUserPasswordInput) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error)
	AdminResetUserPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminResetUserPasswordInput) *CognitoidentityproviderAdminResetUserPasswordFuture

	AdminRespondToAuthChallenge(ctx workflow.Context, input *cognitoidentityprovider.AdminRespondToAuthChallengeInput) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error)
	AdminRespondToAuthChallengeAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminRespondToAuthChallengeInput) *CognitoidentityproviderAdminRespondToAuthChallengeFuture

	AdminSetUserMFAPreference(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error)
	AdminSetUserMFAPreferenceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) *CognitoidentityproviderAdminSetUserMFAPreferenceFuture

	AdminSetUserPassword(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserPasswordInput) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error)
	AdminSetUserPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserPasswordInput) *CognitoidentityproviderAdminSetUserPasswordFuture

	AdminSetUserSettings(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserSettingsInput) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error)
	AdminSetUserSettingsAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserSettingsInput) *CognitoidentityproviderAdminSetUserSettingsFuture

	AdminUpdateAuthEventFeedback(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error)
	AdminUpdateAuthEventFeedbackAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) *CognitoidentityproviderAdminUpdateAuthEventFeedbackFuture

	AdminUpdateDeviceStatus(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateDeviceStatusInput) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error)
	AdminUpdateDeviceStatusAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateDeviceStatusInput) *CognitoidentityproviderAdminUpdateDeviceStatusFuture

	AdminUpdateUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateUserAttributesInput) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error)
	AdminUpdateUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateUserAttributesInput) *CognitoidentityproviderAdminUpdateUserAttributesFuture

	AdminUserGlobalSignOut(ctx workflow.Context, input *cognitoidentityprovider.AdminUserGlobalSignOutInput) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error)
	AdminUserGlobalSignOutAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUserGlobalSignOutInput) *CognitoidentityproviderAdminUserGlobalSignOutFuture

	AssociateSoftwareToken(ctx workflow.Context, input *cognitoidentityprovider.AssociateSoftwareTokenInput) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error)
	AssociateSoftwareTokenAsync(ctx workflow.Context, input *cognitoidentityprovider.AssociateSoftwareTokenInput) *CognitoidentityproviderAssociateSoftwareTokenFuture

	ChangePassword(ctx workflow.Context, input *cognitoidentityprovider.ChangePasswordInput) (*cognitoidentityprovider.ChangePasswordOutput, error)
	ChangePasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ChangePasswordInput) *CognitoidentityproviderChangePasswordFuture

	ConfirmDevice(ctx workflow.Context, input *cognitoidentityprovider.ConfirmDeviceInput) (*cognitoidentityprovider.ConfirmDeviceOutput, error)
	ConfirmDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmDeviceInput) *CognitoidentityproviderConfirmDeviceFuture

	ConfirmForgotPassword(ctx workflow.Context, input *cognitoidentityprovider.ConfirmForgotPasswordInput) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error)
	ConfirmForgotPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmForgotPasswordInput) *CognitoidentityproviderConfirmForgotPasswordFuture

	ConfirmSignUp(ctx workflow.Context, input *cognitoidentityprovider.ConfirmSignUpInput) (*cognitoidentityprovider.ConfirmSignUpOutput, error)
	ConfirmSignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmSignUpInput) *CognitoidentityproviderConfirmSignUpFuture

	CreateGroup(ctx workflow.Context, input *cognitoidentityprovider.CreateGroupInput) (*cognitoidentityprovider.CreateGroupOutput, error)
	CreateGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateGroupInput) *CognitoidentityproviderCreateGroupFuture

	CreateIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.CreateIdentityProviderInput) (*cognitoidentityprovider.CreateIdentityProviderOutput, error)
	CreateIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateIdentityProviderInput) *CognitoidentityproviderCreateIdentityProviderFuture

	CreateResourceServer(ctx workflow.Context, input *cognitoidentityprovider.CreateResourceServerInput) (*cognitoidentityprovider.CreateResourceServerOutput, error)
	CreateResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateResourceServerInput) *CognitoidentityproviderCreateResourceServerFuture

	CreateUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.CreateUserImportJobInput) (*cognitoidentityprovider.CreateUserImportJobOutput, error)
	CreateUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserImportJobInput) *CognitoidentityproviderCreateUserImportJobFuture

	CreateUserPool(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolInput) (*cognitoidentityprovider.CreateUserPoolOutput, error)
	CreateUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolInput) *CognitoidentityproviderCreateUserPoolFuture

	CreateUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolClientInput) (*cognitoidentityprovider.CreateUserPoolClientOutput, error)
	CreateUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolClientInput) *CognitoidentityproviderCreateUserPoolClientFuture

	CreateUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolDomainInput) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error)
	CreateUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolDomainInput) *CognitoidentityproviderCreateUserPoolDomainFuture

	DeleteGroup(ctx workflow.Context, input *cognitoidentityprovider.DeleteGroupInput) (*cognitoidentityprovider.DeleteGroupOutput, error)
	DeleteGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteGroupInput) *CognitoidentityproviderDeleteGroupFuture

	DeleteIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.DeleteIdentityProviderInput) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error)
	DeleteIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteIdentityProviderInput) *CognitoidentityproviderDeleteIdentityProviderFuture

	DeleteResourceServer(ctx workflow.Context, input *cognitoidentityprovider.DeleteResourceServerInput) (*cognitoidentityprovider.DeleteResourceServerOutput, error)
	DeleteResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteResourceServerInput) *CognitoidentityproviderDeleteResourceServerFuture

	DeleteUser(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserInput) (*cognitoidentityprovider.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserInput) *CognitoidentityproviderDeleteUserFuture

	DeleteUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserAttributesInput) (*cognitoidentityprovider.DeleteUserAttributesOutput, error)
	DeleteUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserAttributesInput) *CognitoidentityproviderDeleteUserAttributesFuture

	DeleteUserPool(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolInput) (*cognitoidentityprovider.DeleteUserPoolOutput, error)
	DeleteUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolInput) *CognitoidentityproviderDeleteUserPoolFuture

	DeleteUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolClientInput) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error)
	DeleteUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolClientInput) *CognitoidentityproviderDeleteUserPoolClientFuture

	DeleteUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolDomainInput) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error)
	DeleteUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolDomainInput) *CognitoidentityproviderDeleteUserPoolDomainFuture

	DescribeIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.DescribeIdentityProviderInput) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error)
	DescribeIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeIdentityProviderInput) *CognitoidentityproviderDescribeIdentityProviderFuture

	DescribeResourceServer(ctx workflow.Context, input *cognitoidentityprovider.DescribeResourceServerInput) (*cognitoidentityprovider.DescribeResourceServerOutput, error)
	DescribeResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeResourceServerInput) *CognitoidentityproviderDescribeResourceServerFuture

	DescribeRiskConfiguration(ctx workflow.Context, input *cognitoidentityprovider.DescribeRiskConfigurationInput) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error)
	DescribeRiskConfigurationAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeRiskConfigurationInput) *CognitoidentityproviderDescribeRiskConfigurationFuture

	DescribeUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserImportJobInput) (*cognitoidentityprovider.DescribeUserImportJobOutput, error)
	DescribeUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserImportJobInput) *CognitoidentityproviderDescribeUserImportJobFuture

	DescribeUserPool(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolInput) (*cognitoidentityprovider.DescribeUserPoolOutput, error)
	DescribeUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolInput) *CognitoidentityproviderDescribeUserPoolFuture

	DescribeUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolClientInput) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error)
	DescribeUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolClientInput) *CognitoidentityproviderDescribeUserPoolClientFuture

	DescribeUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolDomainInput) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error)
	DescribeUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolDomainInput) *CognitoidentityproviderDescribeUserPoolDomainFuture

	ForgetDevice(ctx workflow.Context, input *cognitoidentityprovider.ForgetDeviceInput) (*cognitoidentityprovider.ForgetDeviceOutput, error)
	ForgetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.ForgetDeviceInput) *CognitoidentityproviderForgetDeviceFuture

	ForgotPassword(ctx workflow.Context, input *cognitoidentityprovider.ForgotPasswordInput) (*cognitoidentityprovider.ForgotPasswordOutput, error)
	ForgotPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ForgotPasswordInput) *CognitoidentityproviderForgotPasswordFuture

	GetCSVHeader(ctx workflow.Context, input *cognitoidentityprovider.GetCSVHeaderInput) (*cognitoidentityprovider.GetCSVHeaderOutput, error)
	GetCSVHeaderAsync(ctx workflow.Context, input *cognitoidentityprovider.GetCSVHeaderInput) *CognitoidentityproviderGetCSVHeaderFuture

	GetDevice(ctx workflow.Context, input *cognitoidentityprovider.GetDeviceInput) (*cognitoidentityprovider.GetDeviceOutput, error)
	GetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.GetDeviceInput) *CognitoidentityproviderGetDeviceFuture

	GetGroup(ctx workflow.Context, input *cognitoidentityprovider.GetGroupInput) (*cognitoidentityprovider.GetGroupOutput, error)
	GetGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.GetGroupInput) *CognitoidentityproviderGetGroupFuture

	GetIdentityProviderByIdentifier(ctx workflow.Context, input *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error)
	GetIdentityProviderByIdentifierAsync(ctx workflow.Context, input *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) *CognitoidentityproviderGetIdentityProviderByIdentifierFuture

	GetSigningCertificate(ctx workflow.Context, input *cognitoidentityprovider.GetSigningCertificateInput) (*cognitoidentityprovider.GetSigningCertificateOutput, error)
	GetSigningCertificateAsync(ctx workflow.Context, input *cognitoidentityprovider.GetSigningCertificateInput) *CognitoidentityproviderGetSigningCertificateFuture

	GetUICustomization(ctx workflow.Context, input *cognitoidentityprovider.GetUICustomizationInput) (*cognitoidentityprovider.GetUICustomizationOutput, error)
	GetUICustomizationAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUICustomizationInput) *CognitoidentityproviderGetUICustomizationFuture

	GetUser(ctx workflow.Context, input *cognitoidentityprovider.GetUserInput) (*cognitoidentityprovider.GetUserOutput, error)
	GetUserAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserInput) *CognitoidentityproviderGetUserFuture

	GetUserAttributeVerificationCode(ctx workflow.Context, input *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error)
	GetUserAttributeVerificationCodeAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) *CognitoidentityproviderGetUserAttributeVerificationCodeFuture

	GetUserPoolMfaConfig(ctx workflow.Context, input *cognitoidentityprovider.GetUserPoolMfaConfigInput) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error)
	GetUserPoolMfaConfigAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserPoolMfaConfigInput) *CognitoidentityproviderGetUserPoolMfaConfigFuture

	GlobalSignOut(ctx workflow.Context, input *cognitoidentityprovider.GlobalSignOutInput) (*cognitoidentityprovider.GlobalSignOutOutput, error)
	GlobalSignOutAsync(ctx workflow.Context, input *cognitoidentityprovider.GlobalSignOutInput) *CognitoidentityproviderGlobalSignOutFuture

	InitiateAuth(ctx workflow.Context, input *cognitoidentityprovider.InitiateAuthInput) (*cognitoidentityprovider.InitiateAuthOutput, error)
	InitiateAuthAsync(ctx workflow.Context, input *cognitoidentityprovider.InitiateAuthInput) *CognitoidentityproviderInitiateAuthFuture

	ListDevices(ctx workflow.Context, input *cognitoidentityprovider.ListDevicesInput) (*cognitoidentityprovider.ListDevicesOutput, error)
	ListDevicesAsync(ctx workflow.Context, input *cognitoidentityprovider.ListDevicesInput) *CognitoidentityproviderListDevicesFuture

	ListGroups(ctx workflow.Context, input *cognitoidentityprovider.ListGroupsInput) (*cognitoidentityprovider.ListGroupsOutput, error)
	ListGroupsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListGroupsInput) *CognitoidentityproviderListGroupsFuture

	ListIdentityProviders(ctx workflow.Context, input *cognitoidentityprovider.ListIdentityProvidersInput) (*cognitoidentityprovider.ListIdentityProvidersOutput, error)
	ListIdentityProvidersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListIdentityProvidersInput) *CognitoidentityproviderListIdentityProvidersFuture

	ListResourceServers(ctx workflow.Context, input *cognitoidentityprovider.ListResourceServersInput) (*cognitoidentityprovider.ListResourceServersOutput, error)
	ListResourceServersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListResourceServersInput) *CognitoidentityproviderListResourceServersFuture

	ListTagsForResource(ctx workflow.Context, input *cognitoidentityprovider.ListTagsForResourceInput) (*cognitoidentityprovider.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.ListTagsForResourceInput) *CognitoidentityproviderListTagsForResourceFuture

	ListUserImportJobs(ctx workflow.Context, input *cognitoidentityprovider.ListUserImportJobsInput) (*cognitoidentityprovider.ListUserImportJobsOutput, error)
	ListUserImportJobsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserImportJobsInput) *CognitoidentityproviderListUserImportJobsFuture

	ListUserPoolClients(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolClientsInput) (*cognitoidentityprovider.ListUserPoolClientsOutput, error)
	ListUserPoolClientsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolClientsInput) *CognitoidentityproviderListUserPoolClientsFuture

	ListUserPools(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolsInput) (*cognitoidentityprovider.ListUserPoolsOutput, error)
	ListUserPoolsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolsInput) *CognitoidentityproviderListUserPoolsFuture

	ListUsers(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInput) (*cognitoidentityprovider.ListUsersOutput, error)
	ListUsersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInput) *CognitoidentityproviderListUsersFuture

	ListUsersInGroup(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInGroupInput) (*cognitoidentityprovider.ListUsersInGroupOutput, error)
	ListUsersInGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInGroupInput) *CognitoidentityproviderListUsersInGroupFuture

	ResendConfirmationCode(ctx workflow.Context, input *cognitoidentityprovider.ResendConfirmationCodeInput) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error)
	ResendConfirmationCodeAsync(ctx workflow.Context, input *cognitoidentityprovider.ResendConfirmationCodeInput) *CognitoidentityproviderResendConfirmationCodeFuture

	RespondToAuthChallenge(ctx workflow.Context, input *cognitoidentityprovider.RespondToAuthChallengeInput) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error)
	RespondToAuthChallengeAsync(ctx workflow.Context, input *cognitoidentityprovider.RespondToAuthChallengeInput) *CognitoidentityproviderRespondToAuthChallengeFuture

	SetRiskConfiguration(ctx workflow.Context, input *cognitoidentityprovider.SetRiskConfigurationInput) (*cognitoidentityprovider.SetRiskConfigurationOutput, error)
	SetRiskConfigurationAsync(ctx workflow.Context, input *cognitoidentityprovider.SetRiskConfigurationInput) *CognitoidentityproviderSetRiskConfigurationFuture

	SetUICustomization(ctx workflow.Context, input *cognitoidentityprovider.SetUICustomizationInput) (*cognitoidentityprovider.SetUICustomizationOutput, error)
	SetUICustomizationAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUICustomizationInput) *CognitoidentityproviderSetUICustomizationFuture

	SetUserMFAPreference(ctx workflow.Context, input *cognitoidentityprovider.SetUserMFAPreferenceInput) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error)
	SetUserMFAPreferenceAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserMFAPreferenceInput) *CognitoidentityproviderSetUserMFAPreferenceFuture

	SetUserPoolMfaConfig(ctx workflow.Context, input *cognitoidentityprovider.SetUserPoolMfaConfigInput) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error)
	SetUserPoolMfaConfigAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserPoolMfaConfigInput) *CognitoidentityproviderSetUserPoolMfaConfigFuture

	SetUserSettings(ctx workflow.Context, input *cognitoidentityprovider.SetUserSettingsInput) (*cognitoidentityprovider.SetUserSettingsOutput, error)
	SetUserSettingsAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserSettingsInput) *CognitoidentityproviderSetUserSettingsFuture

	SignUp(ctx workflow.Context, input *cognitoidentityprovider.SignUpInput) (*cognitoidentityprovider.SignUpOutput, error)
	SignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.SignUpInput) *CognitoidentityproviderSignUpFuture

	StartUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.StartUserImportJobInput) (*cognitoidentityprovider.StartUserImportJobOutput, error)
	StartUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.StartUserImportJobInput) *CognitoidentityproviderStartUserImportJobFuture

	StopUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.StopUserImportJobInput) (*cognitoidentityprovider.StopUserImportJobOutput, error)
	StopUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.StopUserImportJobInput) *CognitoidentityproviderStopUserImportJobFuture

	TagResource(ctx workflow.Context, input *cognitoidentityprovider.TagResourceInput) (*cognitoidentityprovider.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.TagResourceInput) *CognitoidentityproviderTagResourceFuture

	UntagResource(ctx workflow.Context, input *cognitoidentityprovider.UntagResourceInput) (*cognitoidentityprovider.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.UntagResourceInput) *CognitoidentityproviderUntagResourceFuture

	UpdateAuthEventFeedback(ctx workflow.Context, input *cognitoidentityprovider.UpdateAuthEventFeedbackInput) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error)
	UpdateAuthEventFeedbackAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateAuthEventFeedbackInput) *CognitoidentityproviderUpdateAuthEventFeedbackFuture

	UpdateDeviceStatus(ctx workflow.Context, input *cognitoidentityprovider.UpdateDeviceStatusInput) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error)
	UpdateDeviceStatusAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateDeviceStatusInput) *CognitoidentityproviderUpdateDeviceStatusFuture

	UpdateGroup(ctx workflow.Context, input *cognitoidentityprovider.UpdateGroupInput) (*cognitoidentityprovider.UpdateGroupOutput, error)
	UpdateGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateGroupInput) *CognitoidentityproviderUpdateGroupFuture

	UpdateIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.UpdateIdentityProviderInput) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error)
	UpdateIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateIdentityProviderInput) *CognitoidentityproviderUpdateIdentityProviderFuture

	UpdateResourceServer(ctx workflow.Context, input *cognitoidentityprovider.UpdateResourceServerInput) (*cognitoidentityprovider.UpdateResourceServerOutput, error)
	UpdateResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateResourceServerInput) *CognitoidentityproviderUpdateResourceServerFuture

	UpdateUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserAttributesInput) (*cognitoidentityprovider.UpdateUserAttributesOutput, error)
	UpdateUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserAttributesInput) *CognitoidentityproviderUpdateUserAttributesFuture

	UpdateUserPool(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolInput) (*cognitoidentityprovider.UpdateUserPoolOutput, error)
	UpdateUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolInput) *CognitoidentityproviderUpdateUserPoolFuture

	UpdateUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolClientInput) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error)
	UpdateUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolClientInput) *CognitoidentityproviderUpdateUserPoolClientFuture

	UpdateUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolDomainInput) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error)
	UpdateUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolDomainInput) *CognitoidentityproviderUpdateUserPoolDomainFuture

	VerifySoftwareToken(ctx workflow.Context, input *cognitoidentityprovider.VerifySoftwareTokenInput) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error)
	VerifySoftwareTokenAsync(ctx workflow.Context, input *cognitoidentityprovider.VerifySoftwareTokenInput) *CognitoidentityproviderVerifySoftwareTokenFuture

	VerifyUserAttribute(ctx workflow.Context, input *cognitoidentityprovider.VerifyUserAttributeInput) (*cognitoidentityprovider.VerifyUserAttributeOutput, error)
	VerifyUserAttributeAsync(ctx workflow.Context, input *cognitoidentityprovider.VerifyUserAttributeInput) *CognitoidentityproviderVerifyUserAttributeFuture
}

type CognitoIdentityProviderStub struct{}

func NewCognitoIdentityProviderStub() CognitoIdentityProviderClient {
	return &CognitoIdentityProviderStub{}
}

type CognitoidentityproviderAddCustomAttributesFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAddCustomAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AddCustomAttributesOutput, error) {
	var output cognitoidentityprovider.AddCustomAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminAddUserToGroupFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminAddUserToGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error) {
	var output cognitoidentityprovider.AdminAddUserToGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminConfirmSignUpFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminConfirmSignUpFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error) {
	var output cognitoidentityprovider.AdminConfirmSignUpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminCreateUserFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminCreateUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	var output cognitoidentityprovider.AdminCreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminDeleteUserFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminDeleteUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminDeleteUserOutput, error) {
	var output cognitoidentityprovider.AdminDeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminDeleteUserAttributesFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminDeleteUserAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error) {
	var output cognitoidentityprovider.AdminDeleteUserAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminDisableProviderForUserFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminDisableProviderForUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error) {
	var output cognitoidentityprovider.AdminDisableProviderForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminDisableUserFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminDisableUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminDisableUserOutput, error) {
	var output cognitoidentityprovider.AdminDisableUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminEnableUserFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminEnableUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminEnableUserOutput, error) {
	var output cognitoidentityprovider.AdminEnableUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminForgetDeviceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminForgetDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminForgetDeviceOutput, error) {
	var output cognitoidentityprovider.AdminForgetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminGetDeviceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminGetDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminGetDeviceOutput, error) {
	var output cognitoidentityprovider.AdminGetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminGetUserFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminGetUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	var output cognitoidentityprovider.AdminGetUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminInitiateAuthFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminInitiateAuthFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
	var output cognitoidentityprovider.AdminInitiateAuthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminLinkProviderForUserFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminLinkProviderForUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error) {
	var output cognitoidentityprovider.AdminLinkProviderForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminListDevicesFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminListDevicesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminListDevicesOutput, error) {
	var output cognitoidentityprovider.AdminListDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminListGroupsForUserFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminListGroupsForUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error) {
	var output cognitoidentityprovider.AdminListGroupsForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminListUserAuthEventsFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminListUserAuthEventsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error) {
	var output cognitoidentityprovider.AdminListUserAuthEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminRemoveUserFromGroupFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminRemoveUserFromGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error) {
	var output cognitoidentityprovider.AdminRemoveUserFromGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminResetUserPasswordFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminResetUserPasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error) {
	var output cognitoidentityprovider.AdminResetUserPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminRespondToAuthChallengeFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminRespondToAuthChallengeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error) {
	var output cognitoidentityprovider.AdminRespondToAuthChallengeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminSetUserMFAPreferenceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminSetUserMFAPreferenceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error) {
	var output cognitoidentityprovider.AdminSetUserMFAPreferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminSetUserPasswordFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminSetUserPasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error) {
	var output cognitoidentityprovider.AdminSetUserPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminSetUserSettingsFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminSetUserSettingsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error) {
	var output cognitoidentityprovider.AdminSetUserSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminUpdateAuthEventFeedbackFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminUpdateAuthEventFeedbackFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error) {
	var output cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminUpdateDeviceStatusFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminUpdateDeviceStatusFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error) {
	var output cognitoidentityprovider.AdminUpdateDeviceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminUpdateUserAttributesFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminUpdateUserAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error) {
	var output cognitoidentityprovider.AdminUpdateUserAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAdminUserGlobalSignOutFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAdminUserGlobalSignOutFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error) {
	var output cognitoidentityprovider.AdminUserGlobalSignOutOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderAssociateSoftwareTokenFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderAssociateSoftwareTokenFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error) {
	var output cognitoidentityprovider.AssociateSoftwareTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderChangePasswordFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderChangePasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ChangePasswordOutput, error) {
	var output cognitoidentityprovider.ChangePasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderConfirmDeviceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderConfirmDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ConfirmDeviceOutput, error) {
	var output cognitoidentityprovider.ConfirmDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderConfirmForgotPasswordFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderConfirmForgotPasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error) {
	var output cognitoidentityprovider.ConfirmForgotPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderConfirmSignUpFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderConfirmSignUpFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	var output cognitoidentityprovider.ConfirmSignUpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderCreateGroupFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderCreateGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateGroupOutput, error) {
	var output cognitoidentityprovider.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderCreateIdentityProviderFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderCreateIdentityProviderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateIdentityProviderOutput, error) {
	var output cognitoidentityprovider.CreateIdentityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderCreateResourceServerFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderCreateResourceServerFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateResourceServerOutput, error) {
	var output cognitoidentityprovider.CreateResourceServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderCreateUserImportJobFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderCreateUserImportJobFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateUserImportJobOutput, error) {
	var output cognitoidentityprovider.CreateUserImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderCreateUserPoolFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderCreateUserPoolFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateUserPoolOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderCreateUserPoolClientFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderCreateUserPoolClientFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateUserPoolClientOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolClientOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderCreateUserPoolDomainFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderCreateUserPoolDomainFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDeleteGroupFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDeleteGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteGroupOutput, error) {
	var output cognitoidentityprovider.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDeleteIdentityProviderFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDeleteIdentityProviderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error) {
	var output cognitoidentityprovider.DeleteIdentityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDeleteResourceServerFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDeleteResourceServerFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteResourceServerOutput, error) {
	var output cognitoidentityprovider.DeleteResourceServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDeleteUserFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDeleteUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserOutput, error) {
	var output cognitoidentityprovider.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDeleteUserAttributesFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDeleteUserAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserAttributesOutput, error) {
	var output cognitoidentityprovider.DeleteUserAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDeleteUserPoolFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDeleteUserPoolFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserPoolOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDeleteUserPoolClientFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDeleteUserPoolClientFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolClientOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDeleteUserPoolDomainFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDeleteUserPoolDomainFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDescribeIdentityProviderFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDescribeIdentityProviderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error) {
	var output cognitoidentityprovider.DescribeIdentityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDescribeResourceServerFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDescribeResourceServerFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeResourceServerOutput, error) {
	var output cognitoidentityprovider.DescribeResourceServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDescribeRiskConfigurationFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDescribeRiskConfigurationFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error) {
	var output cognitoidentityprovider.DescribeRiskConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDescribeUserImportJobFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDescribeUserImportJobFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeUserImportJobOutput, error) {
	var output cognitoidentityprovider.DescribeUserImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDescribeUserPoolFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDescribeUserPoolFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeUserPoolOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDescribeUserPoolClientFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDescribeUserPoolClientFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolClientOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderDescribeUserPoolDomainFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderDescribeUserPoolDomainFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderForgetDeviceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderForgetDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ForgetDeviceOutput, error) {
	var output cognitoidentityprovider.ForgetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderForgotPasswordFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderForgotPasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ForgotPasswordOutput, error) {
	var output cognitoidentityprovider.ForgotPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderGetCSVHeaderFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderGetCSVHeaderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetCSVHeaderOutput, error) {
	var output cognitoidentityprovider.GetCSVHeaderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderGetDeviceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderGetDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetDeviceOutput, error) {
	var output cognitoidentityprovider.GetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderGetGroupFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderGetGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetGroupOutput, error) {
	var output cognitoidentityprovider.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderGetIdentityProviderByIdentifierFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderGetIdentityProviderByIdentifierFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error) {
	var output cognitoidentityprovider.GetIdentityProviderByIdentifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderGetSigningCertificateFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderGetSigningCertificateFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetSigningCertificateOutput, error) {
	var output cognitoidentityprovider.GetSigningCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderGetUICustomizationFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderGetUICustomizationFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetUICustomizationOutput, error) {
	var output cognitoidentityprovider.GetUICustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderGetUserFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderGetUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetUserOutput, error) {
	var output cognitoidentityprovider.GetUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderGetUserAttributeVerificationCodeFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderGetUserAttributeVerificationCodeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error) {
	var output cognitoidentityprovider.GetUserAttributeVerificationCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderGetUserPoolMfaConfigFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderGetUserPoolMfaConfigFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error) {
	var output cognitoidentityprovider.GetUserPoolMfaConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderGlobalSignOutFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderGlobalSignOutFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GlobalSignOutOutput, error) {
	var output cognitoidentityprovider.GlobalSignOutOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderInitiateAuthFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderInitiateAuthFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	var output cognitoidentityprovider.InitiateAuthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderListDevicesFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderListDevicesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListDevicesOutput, error) {
	var output cognitoidentityprovider.ListDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderListGroupsFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderListGroupsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListGroupsOutput, error) {
	var output cognitoidentityprovider.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderListIdentityProvidersFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderListIdentityProvidersFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListIdentityProvidersOutput, error) {
	var output cognitoidentityprovider.ListIdentityProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderListResourceServersFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderListResourceServersFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListResourceServersOutput, error) {
	var output cognitoidentityprovider.ListResourceServersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderListTagsForResourceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListTagsForResourceOutput, error) {
	var output cognitoidentityprovider.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderListUserImportJobsFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderListUserImportJobsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUserImportJobsOutput, error) {
	var output cognitoidentityprovider.ListUserImportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderListUserPoolClientsFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderListUserPoolClientsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUserPoolClientsOutput, error) {
	var output cognitoidentityprovider.ListUserPoolClientsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderListUserPoolsFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderListUserPoolsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUserPoolsOutput, error) {
	var output cognitoidentityprovider.ListUserPoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderListUsersFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderListUsersFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUsersOutput, error) {
	var output cognitoidentityprovider.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderListUsersInGroupFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderListUsersInGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUsersInGroupOutput, error) {
	var output cognitoidentityprovider.ListUsersInGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderResendConfirmationCodeFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderResendConfirmationCodeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error) {
	var output cognitoidentityprovider.ResendConfirmationCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderRespondToAuthChallengeFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderRespondToAuthChallengeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error) {
	var output cognitoidentityprovider.RespondToAuthChallengeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderSetRiskConfigurationFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderSetRiskConfigurationFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetRiskConfigurationOutput, error) {
	var output cognitoidentityprovider.SetRiskConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderSetUICustomizationFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderSetUICustomizationFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetUICustomizationOutput, error) {
	var output cognitoidentityprovider.SetUICustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderSetUserMFAPreferenceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderSetUserMFAPreferenceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error) {
	var output cognitoidentityprovider.SetUserMFAPreferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderSetUserPoolMfaConfigFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderSetUserPoolMfaConfigFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error) {
	var output cognitoidentityprovider.SetUserPoolMfaConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderSetUserSettingsFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderSetUserSettingsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetUserSettingsOutput, error) {
	var output cognitoidentityprovider.SetUserSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderSignUpFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderSignUpFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SignUpOutput, error) {
	var output cognitoidentityprovider.SignUpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderStartUserImportJobFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderStartUserImportJobFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.StartUserImportJobOutput, error) {
	var output cognitoidentityprovider.StartUserImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderStopUserImportJobFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderStopUserImportJobFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.StopUserImportJobOutput, error) {
	var output cognitoidentityprovider.StopUserImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderTagResourceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderTagResourceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.TagResourceOutput, error) {
	var output cognitoidentityprovider.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderUntagResourceFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderUntagResourceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UntagResourceOutput, error) {
	var output cognitoidentityprovider.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderUpdateAuthEventFeedbackFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderUpdateAuthEventFeedbackFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error) {
	var output cognitoidentityprovider.UpdateAuthEventFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderUpdateDeviceStatusFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderUpdateDeviceStatusFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error) {
	var output cognitoidentityprovider.UpdateDeviceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderUpdateGroupFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderUpdateGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateGroupOutput, error) {
	var output cognitoidentityprovider.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderUpdateIdentityProviderFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderUpdateIdentityProviderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error) {
	var output cognitoidentityprovider.UpdateIdentityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderUpdateResourceServerFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderUpdateResourceServerFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateResourceServerOutput, error) {
	var output cognitoidentityprovider.UpdateResourceServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderUpdateUserAttributesFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderUpdateUserAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateUserAttributesOutput, error) {
	var output cognitoidentityprovider.UpdateUserAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderUpdateUserPoolFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderUpdateUserPoolFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateUserPoolOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderUpdateUserPoolClientFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderUpdateUserPoolClientFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolClientOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderUpdateUserPoolDomainFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderUpdateUserPoolDomainFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderVerifySoftwareTokenFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderVerifySoftwareTokenFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error) {
	var output cognitoidentityprovider.VerifySoftwareTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoidentityproviderVerifyUserAttributeFuture struct {
	Future workflow.Future
}

func (r *CognitoidentityproviderVerifyUserAttributeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.VerifyUserAttributeOutput, error) {
	var output cognitoidentityprovider.VerifyUserAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AddCustomAttributes(ctx workflow.Context, input *cognitoidentityprovider.AddCustomAttributesInput) (*cognitoidentityprovider.AddCustomAttributesOutput, error) {
	var output cognitoidentityprovider.AddCustomAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AddCustomAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AddCustomAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AddCustomAttributesInput) *CognitoidentityproviderAddCustomAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AddCustomAttributes", input)
	return &CognitoidentityproviderAddCustomAttributesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminAddUserToGroup(ctx workflow.Context, input *cognitoidentityprovider.AdminAddUserToGroupInput) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error) {
	var output cognitoidentityprovider.AdminAddUserToGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminAddUserToGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminAddUserToGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminAddUserToGroupInput) *CognitoidentityproviderAdminAddUserToGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminAddUserToGroup", input)
	return &CognitoidentityproviderAdminAddUserToGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminConfirmSignUp(ctx workflow.Context, input *cognitoidentityprovider.AdminConfirmSignUpInput) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error) {
	var output cognitoidentityprovider.AdminConfirmSignUpOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminConfirmSignUp", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminConfirmSignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminConfirmSignUpInput) *CognitoidentityproviderAdminConfirmSignUpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminConfirmSignUp", input)
	return &CognitoidentityproviderAdminConfirmSignUpFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminCreateUser(ctx workflow.Context, input *cognitoidentityprovider.AdminCreateUserInput) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	var output cognitoidentityprovider.AdminCreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminCreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminCreateUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminCreateUserInput) *CognitoidentityproviderAdminCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminCreateUser", input)
	return &CognitoidentityproviderAdminCreateUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminDeleteUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserInput) (*cognitoidentityprovider.AdminDeleteUserOutput, error) {
	var output cognitoidentityprovider.AdminDeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminDeleteUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserInput) *CognitoidentityproviderAdminDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDeleteUser", input)
	return &CognitoidentityproviderAdminDeleteUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminDeleteUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserAttributesInput) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error) {
	var output cognitoidentityprovider.AdminDeleteUserAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDeleteUserAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminDeleteUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserAttributesInput) *CognitoidentityproviderAdminDeleteUserAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDeleteUserAttributes", input)
	return &CognitoidentityproviderAdminDeleteUserAttributesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminDisableProviderForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableProviderForUserInput) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error) {
	var output cognitoidentityprovider.AdminDisableProviderForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDisableProviderForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminDisableProviderForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableProviderForUserInput) *CognitoidentityproviderAdminDisableProviderForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDisableProviderForUser", input)
	return &CognitoidentityproviderAdminDisableProviderForUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminDisableUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableUserInput) (*cognitoidentityprovider.AdminDisableUserOutput, error) {
	var output cognitoidentityprovider.AdminDisableUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDisableUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminDisableUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableUserInput) *CognitoidentityproviderAdminDisableUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDisableUser", input)
	return &CognitoidentityproviderAdminDisableUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminEnableUser(ctx workflow.Context, input *cognitoidentityprovider.AdminEnableUserInput) (*cognitoidentityprovider.AdminEnableUserOutput, error) {
	var output cognitoidentityprovider.AdminEnableUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminEnableUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminEnableUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminEnableUserInput) *CognitoidentityproviderAdminEnableUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminEnableUser", input)
	return &CognitoidentityproviderAdminEnableUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminForgetDevice(ctx workflow.Context, input *cognitoidentityprovider.AdminForgetDeviceInput) (*cognitoidentityprovider.AdminForgetDeviceOutput, error) {
	var output cognitoidentityprovider.AdminForgetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminForgetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminForgetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminForgetDeviceInput) *CognitoidentityproviderAdminForgetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminForgetDevice", input)
	return &CognitoidentityproviderAdminForgetDeviceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminGetDevice(ctx workflow.Context, input *cognitoidentityprovider.AdminGetDeviceInput) (*cognitoidentityprovider.AdminGetDeviceOutput, error) {
	var output cognitoidentityprovider.AdminGetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminGetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminGetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminGetDeviceInput) *CognitoidentityproviderAdminGetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminGetDevice", input)
	return &CognitoidentityproviderAdminGetDeviceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminGetUser(ctx workflow.Context, input *cognitoidentityprovider.AdminGetUserInput) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	var output cognitoidentityprovider.AdminGetUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminGetUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminGetUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminGetUserInput) *CognitoidentityproviderAdminGetUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminGetUser", input)
	return &CognitoidentityproviderAdminGetUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminInitiateAuth(ctx workflow.Context, input *cognitoidentityprovider.AdminInitiateAuthInput) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
	var output cognitoidentityprovider.AdminInitiateAuthOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminInitiateAuth", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminInitiateAuthAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminInitiateAuthInput) *CognitoidentityproviderAdminInitiateAuthFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminInitiateAuth", input)
	return &CognitoidentityproviderAdminInitiateAuthFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminLinkProviderForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminLinkProviderForUserInput) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error) {
	var output cognitoidentityprovider.AdminLinkProviderForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminLinkProviderForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminLinkProviderForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminLinkProviderForUserInput) *CognitoidentityproviderAdminLinkProviderForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminLinkProviderForUser", input)
	return &CognitoidentityproviderAdminLinkProviderForUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminListDevices(ctx workflow.Context, input *cognitoidentityprovider.AdminListDevicesInput) (*cognitoidentityprovider.AdminListDevicesOutput, error) {
	var output cognitoidentityprovider.AdminListDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminListDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminListDevicesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListDevicesInput) *CognitoidentityproviderAdminListDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminListDevices", input)
	return &CognitoidentityproviderAdminListDevicesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminListGroupsForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error) {
	var output cognitoidentityprovider.AdminListGroupsForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminListGroupsForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminListGroupsForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput) *CognitoidentityproviderAdminListGroupsForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminListGroupsForUser", input)
	return &CognitoidentityproviderAdminListGroupsForUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminListUserAuthEvents(ctx workflow.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error) {
	var output cognitoidentityprovider.AdminListUserAuthEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminListUserAuthEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminListUserAuthEventsAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput) *CognitoidentityproviderAdminListUserAuthEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminListUserAuthEvents", input)
	return &CognitoidentityproviderAdminListUserAuthEventsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminRemoveUserFromGroup(ctx workflow.Context, input *cognitoidentityprovider.AdminRemoveUserFromGroupInput) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error) {
	var output cognitoidentityprovider.AdminRemoveUserFromGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminRemoveUserFromGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminRemoveUserFromGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminRemoveUserFromGroupInput) *CognitoidentityproviderAdminRemoveUserFromGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminRemoveUserFromGroup", input)
	return &CognitoidentityproviderAdminRemoveUserFromGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminResetUserPassword(ctx workflow.Context, input *cognitoidentityprovider.AdminResetUserPasswordInput) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error) {
	var output cognitoidentityprovider.AdminResetUserPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminResetUserPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminResetUserPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminResetUserPasswordInput) *CognitoidentityproviderAdminResetUserPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminResetUserPassword", input)
	return &CognitoidentityproviderAdminResetUserPasswordFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminRespondToAuthChallenge(ctx workflow.Context, input *cognitoidentityprovider.AdminRespondToAuthChallengeInput) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error) {
	var output cognitoidentityprovider.AdminRespondToAuthChallengeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminRespondToAuthChallenge", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminRespondToAuthChallengeAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminRespondToAuthChallengeInput) *CognitoidentityproviderAdminRespondToAuthChallengeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminRespondToAuthChallenge", input)
	return &CognitoidentityproviderAdminRespondToAuthChallengeFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminSetUserMFAPreference(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error) {
	var output cognitoidentityprovider.AdminSetUserMFAPreferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminSetUserMFAPreference", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminSetUserMFAPreferenceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) *CognitoidentityproviderAdminSetUserMFAPreferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminSetUserMFAPreference", input)
	return &CognitoidentityproviderAdminSetUserMFAPreferenceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminSetUserPassword(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserPasswordInput) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error) {
	var output cognitoidentityprovider.AdminSetUserPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminSetUserPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminSetUserPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserPasswordInput) *CognitoidentityproviderAdminSetUserPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminSetUserPassword", input)
	return &CognitoidentityproviderAdminSetUserPasswordFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminSetUserSettings(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserSettingsInput) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error) {
	var output cognitoidentityprovider.AdminSetUserSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminSetUserSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminSetUserSettingsAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserSettingsInput) *CognitoidentityproviderAdminSetUserSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminSetUserSettings", input)
	return &CognitoidentityproviderAdminSetUserSettingsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminUpdateAuthEventFeedback(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error) {
	var output cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUpdateAuthEventFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminUpdateAuthEventFeedbackAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) *CognitoidentityproviderAdminUpdateAuthEventFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUpdateAuthEventFeedback", input)
	return &CognitoidentityproviderAdminUpdateAuthEventFeedbackFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminUpdateDeviceStatus(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateDeviceStatusInput) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error) {
	var output cognitoidentityprovider.AdminUpdateDeviceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUpdateDeviceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminUpdateDeviceStatusAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateDeviceStatusInput) *CognitoidentityproviderAdminUpdateDeviceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUpdateDeviceStatus", input)
	return &CognitoidentityproviderAdminUpdateDeviceStatusFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminUpdateUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateUserAttributesInput) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error) {
	var output cognitoidentityprovider.AdminUpdateUserAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUpdateUserAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminUpdateUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateUserAttributesInput) *CognitoidentityproviderAdminUpdateUserAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUpdateUserAttributes", input)
	return &CognitoidentityproviderAdminUpdateUserAttributesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminUserGlobalSignOut(ctx workflow.Context, input *cognitoidentityprovider.AdminUserGlobalSignOutInput) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error) {
	var output cognitoidentityprovider.AdminUserGlobalSignOutOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUserGlobalSignOut", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminUserGlobalSignOutAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUserGlobalSignOutInput) *CognitoidentityproviderAdminUserGlobalSignOutFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUserGlobalSignOut", input)
	return &CognitoidentityproviderAdminUserGlobalSignOutFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AssociateSoftwareToken(ctx workflow.Context, input *cognitoidentityprovider.AssociateSoftwareTokenInput) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error) {
	var output cognitoidentityprovider.AssociateSoftwareTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AssociateSoftwareToken", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AssociateSoftwareTokenAsync(ctx workflow.Context, input *cognitoidentityprovider.AssociateSoftwareTokenInput) *CognitoidentityproviderAssociateSoftwareTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AssociateSoftwareToken", input)
	return &CognitoidentityproviderAssociateSoftwareTokenFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ChangePassword(ctx workflow.Context, input *cognitoidentityprovider.ChangePasswordInput) (*cognitoidentityprovider.ChangePasswordOutput, error) {
	var output cognitoidentityprovider.ChangePasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ChangePassword", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ChangePasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ChangePasswordInput) *CognitoidentityproviderChangePasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ChangePassword", input)
	return &CognitoidentityproviderChangePasswordFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ConfirmDevice(ctx workflow.Context, input *cognitoidentityprovider.ConfirmDeviceInput) (*cognitoidentityprovider.ConfirmDeviceOutput, error) {
	var output cognitoidentityprovider.ConfirmDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ConfirmDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ConfirmDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmDeviceInput) *CognitoidentityproviderConfirmDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ConfirmDevice", input)
	return &CognitoidentityproviderConfirmDeviceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ConfirmForgotPassword(ctx workflow.Context, input *cognitoidentityprovider.ConfirmForgotPasswordInput) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error) {
	var output cognitoidentityprovider.ConfirmForgotPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ConfirmForgotPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ConfirmForgotPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmForgotPasswordInput) *CognitoidentityproviderConfirmForgotPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ConfirmForgotPassword", input)
	return &CognitoidentityproviderConfirmForgotPasswordFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ConfirmSignUp(ctx workflow.Context, input *cognitoidentityprovider.ConfirmSignUpInput) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	var output cognitoidentityprovider.ConfirmSignUpOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ConfirmSignUp", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ConfirmSignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmSignUpInput) *CognitoidentityproviderConfirmSignUpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ConfirmSignUp", input)
	return &CognitoidentityproviderConfirmSignUpFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateGroup(ctx workflow.Context, input *cognitoidentityprovider.CreateGroupInput) (*cognitoidentityprovider.CreateGroupOutput, error) {
	var output cognitoidentityprovider.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateGroupInput) *CognitoidentityproviderCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateGroup", input)
	return &CognitoidentityproviderCreateGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.CreateIdentityProviderInput) (*cognitoidentityprovider.CreateIdentityProviderOutput, error) {
	var output cognitoidentityprovider.CreateIdentityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateIdentityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateIdentityProviderInput) *CognitoidentityproviderCreateIdentityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateIdentityProvider", input)
	return &CognitoidentityproviderCreateIdentityProviderFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateResourceServer(ctx workflow.Context, input *cognitoidentityprovider.CreateResourceServerInput) (*cognitoidentityprovider.CreateResourceServerOutput, error) {
	var output cognitoidentityprovider.CreateResourceServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateResourceServer", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateResourceServerInput) *CognitoidentityproviderCreateResourceServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateResourceServer", input)
	return &CognitoidentityproviderCreateResourceServerFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.CreateUserImportJobInput) (*cognitoidentityprovider.CreateUserImportJobOutput, error) {
	var output cognitoidentityprovider.CreateUserImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserImportJobInput) *CognitoidentityproviderCreateUserImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserImportJob", input)
	return &CognitoidentityproviderCreateUserImportJobFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateUserPool(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolInput) (*cognitoidentityprovider.CreateUserPoolOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolInput) *CognitoidentityproviderCreateUserPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserPool", input)
	return &CognitoidentityproviderCreateUserPoolFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolClientInput) (*cognitoidentityprovider.CreateUserPoolClientOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolClientOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserPoolClient", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolClientInput) *CognitoidentityproviderCreateUserPoolClientFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserPoolClient", input)
	return &CognitoidentityproviderCreateUserPoolClientFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolDomainInput) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserPoolDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolDomainInput) *CognitoidentityproviderCreateUserPoolDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserPoolDomain", input)
	return &CognitoidentityproviderCreateUserPoolDomainFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteGroup(ctx workflow.Context, input *cognitoidentityprovider.DeleteGroupInput) (*cognitoidentityprovider.DeleteGroupOutput, error) {
	var output cognitoidentityprovider.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteGroupInput) *CognitoidentityproviderDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteGroup", input)
	return &CognitoidentityproviderDeleteGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.DeleteIdentityProviderInput) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error) {
	var output cognitoidentityprovider.DeleteIdentityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteIdentityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteIdentityProviderInput) *CognitoidentityproviderDeleteIdentityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteIdentityProvider", input)
	return &CognitoidentityproviderDeleteIdentityProviderFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteResourceServer(ctx workflow.Context, input *cognitoidentityprovider.DeleteResourceServerInput) (*cognitoidentityprovider.DeleteResourceServerOutput, error) {
	var output cognitoidentityprovider.DeleteResourceServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteResourceServer", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteResourceServerInput) *CognitoidentityproviderDeleteResourceServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteResourceServer", input)
	return &CognitoidentityproviderDeleteResourceServerFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteUser(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserInput) (*cognitoidentityprovider.DeleteUserOutput, error) {
	var output cognitoidentityprovider.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteUserAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserInput) *CognitoidentityproviderDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUser", input)
	return &CognitoidentityproviderDeleteUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserAttributesInput) (*cognitoidentityprovider.DeleteUserAttributesOutput, error) {
	var output cognitoidentityprovider.DeleteUserAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserAttributesInput) *CognitoidentityproviderDeleteUserAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserAttributes", input)
	return &CognitoidentityproviderDeleteUserAttributesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteUserPool(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolInput) (*cognitoidentityprovider.DeleteUserPoolOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolInput) *CognitoidentityproviderDeleteUserPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserPool", input)
	return &CognitoidentityproviderDeleteUserPoolFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolClientInput) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolClientOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserPoolClient", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolClientInput) *CognitoidentityproviderDeleteUserPoolClientFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserPoolClient", input)
	return &CognitoidentityproviderDeleteUserPoolClientFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolDomainInput) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserPoolDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolDomainInput) *CognitoidentityproviderDeleteUserPoolDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserPoolDomain", input)
	return &CognitoidentityproviderDeleteUserPoolDomainFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.DescribeIdentityProviderInput) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error) {
	var output cognitoidentityprovider.DescribeIdentityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeIdentityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeIdentityProviderInput) *CognitoidentityproviderDescribeIdentityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeIdentityProvider", input)
	return &CognitoidentityproviderDescribeIdentityProviderFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeResourceServer(ctx workflow.Context, input *cognitoidentityprovider.DescribeResourceServerInput) (*cognitoidentityprovider.DescribeResourceServerOutput, error) {
	var output cognitoidentityprovider.DescribeResourceServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeResourceServer", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeResourceServerInput) *CognitoidentityproviderDescribeResourceServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeResourceServer", input)
	return &CognitoidentityproviderDescribeResourceServerFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeRiskConfiguration(ctx workflow.Context, input *cognitoidentityprovider.DescribeRiskConfigurationInput) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error) {
	var output cognitoidentityprovider.DescribeRiskConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeRiskConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeRiskConfigurationAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeRiskConfigurationInput) *CognitoidentityproviderDescribeRiskConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeRiskConfiguration", input)
	return &CognitoidentityproviderDescribeRiskConfigurationFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserImportJobInput) (*cognitoidentityprovider.DescribeUserImportJobOutput, error) {
	var output cognitoidentityprovider.DescribeUserImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserImportJobInput) *CognitoidentityproviderDescribeUserImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserImportJob", input)
	return &CognitoidentityproviderDescribeUserImportJobFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeUserPool(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolInput) (*cognitoidentityprovider.DescribeUserPoolOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolInput) *CognitoidentityproviderDescribeUserPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserPool", input)
	return &CognitoidentityproviderDescribeUserPoolFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolClientInput) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolClientOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserPoolClient", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolClientInput) *CognitoidentityproviderDescribeUserPoolClientFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserPoolClient", input)
	return &CognitoidentityproviderDescribeUserPoolClientFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolDomainInput) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserPoolDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolDomainInput) *CognitoidentityproviderDescribeUserPoolDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserPoolDomain", input)
	return &CognitoidentityproviderDescribeUserPoolDomainFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ForgetDevice(ctx workflow.Context, input *cognitoidentityprovider.ForgetDeviceInput) (*cognitoidentityprovider.ForgetDeviceOutput, error) {
	var output cognitoidentityprovider.ForgetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ForgetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ForgetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.ForgetDeviceInput) *CognitoidentityproviderForgetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ForgetDevice", input)
	return &CognitoidentityproviderForgetDeviceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ForgotPassword(ctx workflow.Context, input *cognitoidentityprovider.ForgotPasswordInput) (*cognitoidentityprovider.ForgotPasswordOutput, error) {
	var output cognitoidentityprovider.ForgotPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ForgotPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ForgotPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ForgotPasswordInput) *CognitoidentityproviderForgotPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ForgotPassword", input)
	return &CognitoidentityproviderForgotPasswordFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetCSVHeader(ctx workflow.Context, input *cognitoidentityprovider.GetCSVHeaderInput) (*cognitoidentityprovider.GetCSVHeaderOutput, error) {
	var output cognitoidentityprovider.GetCSVHeaderOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetCSVHeader", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetCSVHeaderAsync(ctx workflow.Context, input *cognitoidentityprovider.GetCSVHeaderInput) *CognitoidentityproviderGetCSVHeaderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetCSVHeader", input)
	return &CognitoidentityproviderGetCSVHeaderFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetDevice(ctx workflow.Context, input *cognitoidentityprovider.GetDeviceInput) (*cognitoidentityprovider.GetDeviceOutput, error) {
	var output cognitoidentityprovider.GetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.GetDeviceInput) *CognitoidentityproviderGetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetDevice", input)
	return &CognitoidentityproviderGetDeviceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetGroup(ctx workflow.Context, input *cognitoidentityprovider.GetGroupInput) (*cognitoidentityprovider.GetGroupOutput, error) {
	var output cognitoidentityprovider.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.GetGroupInput) *CognitoidentityproviderGetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetGroup", input)
	return &CognitoidentityproviderGetGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetIdentityProviderByIdentifier(ctx workflow.Context, input *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error) {
	var output cognitoidentityprovider.GetIdentityProviderByIdentifierOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetIdentityProviderByIdentifier", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetIdentityProviderByIdentifierAsync(ctx workflow.Context, input *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) *CognitoidentityproviderGetIdentityProviderByIdentifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetIdentityProviderByIdentifier", input)
	return &CognitoidentityproviderGetIdentityProviderByIdentifierFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetSigningCertificate(ctx workflow.Context, input *cognitoidentityprovider.GetSigningCertificateInput) (*cognitoidentityprovider.GetSigningCertificateOutput, error) {
	var output cognitoidentityprovider.GetSigningCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetSigningCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetSigningCertificateAsync(ctx workflow.Context, input *cognitoidentityprovider.GetSigningCertificateInput) *CognitoidentityproviderGetSigningCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetSigningCertificate", input)
	return &CognitoidentityproviderGetSigningCertificateFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetUICustomization(ctx workflow.Context, input *cognitoidentityprovider.GetUICustomizationInput) (*cognitoidentityprovider.GetUICustomizationOutput, error) {
	var output cognitoidentityprovider.GetUICustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUICustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetUICustomizationAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUICustomizationInput) *CognitoidentityproviderGetUICustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUICustomization", input)
	return &CognitoidentityproviderGetUICustomizationFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetUser(ctx workflow.Context, input *cognitoidentityprovider.GetUserInput) (*cognitoidentityprovider.GetUserOutput, error) {
	var output cognitoidentityprovider.GetUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetUserAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserInput) *CognitoidentityproviderGetUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUser", input)
	return &CognitoidentityproviderGetUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetUserAttributeVerificationCode(ctx workflow.Context, input *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error) {
	var output cognitoidentityprovider.GetUserAttributeVerificationCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUserAttributeVerificationCode", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetUserAttributeVerificationCodeAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) *CognitoidentityproviderGetUserAttributeVerificationCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUserAttributeVerificationCode", input)
	return &CognitoidentityproviderGetUserAttributeVerificationCodeFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetUserPoolMfaConfig(ctx workflow.Context, input *cognitoidentityprovider.GetUserPoolMfaConfigInput) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error) {
	var output cognitoidentityprovider.GetUserPoolMfaConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUserPoolMfaConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetUserPoolMfaConfigAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserPoolMfaConfigInput) *CognitoidentityproviderGetUserPoolMfaConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUserPoolMfaConfig", input)
	return &CognitoidentityproviderGetUserPoolMfaConfigFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GlobalSignOut(ctx workflow.Context, input *cognitoidentityprovider.GlobalSignOutInput) (*cognitoidentityprovider.GlobalSignOutOutput, error) {
	var output cognitoidentityprovider.GlobalSignOutOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GlobalSignOut", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GlobalSignOutAsync(ctx workflow.Context, input *cognitoidentityprovider.GlobalSignOutInput) *CognitoidentityproviderGlobalSignOutFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GlobalSignOut", input)
	return &CognitoidentityproviderGlobalSignOutFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) InitiateAuth(ctx workflow.Context, input *cognitoidentityprovider.InitiateAuthInput) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	var output cognitoidentityprovider.InitiateAuthOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.InitiateAuth", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) InitiateAuthAsync(ctx workflow.Context, input *cognitoidentityprovider.InitiateAuthInput) *CognitoidentityproviderInitiateAuthFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.InitiateAuth", input)
	return &CognitoidentityproviderInitiateAuthFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListDevices(ctx workflow.Context, input *cognitoidentityprovider.ListDevicesInput) (*cognitoidentityprovider.ListDevicesOutput, error) {
	var output cognitoidentityprovider.ListDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListDevicesAsync(ctx workflow.Context, input *cognitoidentityprovider.ListDevicesInput) *CognitoidentityproviderListDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListDevices", input)
	return &CognitoidentityproviderListDevicesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListGroups(ctx workflow.Context, input *cognitoidentityprovider.ListGroupsInput) (*cognitoidentityprovider.ListGroupsOutput, error) {
	var output cognitoidentityprovider.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListGroupsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListGroupsInput) *CognitoidentityproviderListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListGroups", input)
	return &CognitoidentityproviderListGroupsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListIdentityProviders(ctx workflow.Context, input *cognitoidentityprovider.ListIdentityProvidersInput) (*cognitoidentityprovider.ListIdentityProvidersOutput, error) {
	var output cognitoidentityprovider.ListIdentityProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListIdentityProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListIdentityProvidersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListIdentityProvidersInput) *CognitoidentityproviderListIdentityProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListIdentityProviders", input)
	return &CognitoidentityproviderListIdentityProvidersFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListResourceServers(ctx workflow.Context, input *cognitoidentityprovider.ListResourceServersInput) (*cognitoidentityprovider.ListResourceServersOutput, error) {
	var output cognitoidentityprovider.ListResourceServersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListResourceServers", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListResourceServersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListResourceServersInput) *CognitoidentityproviderListResourceServersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListResourceServers", input)
	return &CognitoidentityproviderListResourceServersFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListTagsForResource(ctx workflow.Context, input *cognitoidentityprovider.ListTagsForResourceInput) (*cognitoidentityprovider.ListTagsForResourceOutput, error) {
	var output cognitoidentityprovider.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListTagsForResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.ListTagsForResourceInput) *CognitoidentityproviderListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListTagsForResource", input)
	return &CognitoidentityproviderListTagsForResourceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListUserImportJobs(ctx workflow.Context, input *cognitoidentityprovider.ListUserImportJobsInput) (*cognitoidentityprovider.ListUserImportJobsOutput, error) {
	var output cognitoidentityprovider.ListUserImportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUserImportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListUserImportJobsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserImportJobsInput) *CognitoidentityproviderListUserImportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUserImportJobs", input)
	return &CognitoidentityproviderListUserImportJobsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListUserPoolClients(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolClientsInput) (*cognitoidentityprovider.ListUserPoolClientsOutput, error) {
	var output cognitoidentityprovider.ListUserPoolClientsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUserPoolClients", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListUserPoolClientsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolClientsInput) *CognitoidentityproviderListUserPoolClientsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUserPoolClients", input)
	return &CognitoidentityproviderListUserPoolClientsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListUserPools(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolsInput) (*cognitoidentityprovider.ListUserPoolsOutput, error) {
	var output cognitoidentityprovider.ListUserPoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUserPools", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListUserPoolsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolsInput) *CognitoidentityproviderListUserPoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUserPools", input)
	return &CognitoidentityproviderListUserPoolsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListUsers(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInput) (*cognitoidentityprovider.ListUsersOutput, error) {
	var output cognitoidentityprovider.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListUsersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInput) *CognitoidentityproviderListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUsers", input)
	return &CognitoidentityproviderListUsersFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListUsersInGroup(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInGroupInput) (*cognitoidentityprovider.ListUsersInGroupOutput, error) {
	var output cognitoidentityprovider.ListUsersInGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUsersInGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListUsersInGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInGroupInput) *CognitoidentityproviderListUsersInGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUsersInGroup", input)
	return &CognitoidentityproviderListUsersInGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ResendConfirmationCode(ctx workflow.Context, input *cognitoidentityprovider.ResendConfirmationCodeInput) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error) {
	var output cognitoidentityprovider.ResendConfirmationCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ResendConfirmationCode", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ResendConfirmationCodeAsync(ctx workflow.Context, input *cognitoidentityprovider.ResendConfirmationCodeInput) *CognitoidentityproviderResendConfirmationCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ResendConfirmationCode", input)
	return &CognitoidentityproviderResendConfirmationCodeFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) RespondToAuthChallenge(ctx workflow.Context, input *cognitoidentityprovider.RespondToAuthChallengeInput) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error) {
	var output cognitoidentityprovider.RespondToAuthChallengeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.RespondToAuthChallenge", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) RespondToAuthChallengeAsync(ctx workflow.Context, input *cognitoidentityprovider.RespondToAuthChallengeInput) *CognitoidentityproviderRespondToAuthChallengeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.RespondToAuthChallenge", input)
	return &CognitoidentityproviderRespondToAuthChallengeFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) SetRiskConfiguration(ctx workflow.Context, input *cognitoidentityprovider.SetRiskConfigurationInput) (*cognitoidentityprovider.SetRiskConfigurationOutput, error) {
	var output cognitoidentityprovider.SetRiskConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetRiskConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) SetRiskConfigurationAsync(ctx workflow.Context, input *cognitoidentityprovider.SetRiskConfigurationInput) *CognitoidentityproviderSetRiskConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetRiskConfiguration", input)
	return &CognitoidentityproviderSetRiskConfigurationFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) SetUICustomization(ctx workflow.Context, input *cognitoidentityprovider.SetUICustomizationInput) (*cognitoidentityprovider.SetUICustomizationOutput, error) {
	var output cognitoidentityprovider.SetUICustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUICustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) SetUICustomizationAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUICustomizationInput) *CognitoidentityproviderSetUICustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUICustomization", input)
	return &CognitoidentityproviderSetUICustomizationFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) SetUserMFAPreference(ctx workflow.Context, input *cognitoidentityprovider.SetUserMFAPreferenceInput) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error) {
	var output cognitoidentityprovider.SetUserMFAPreferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUserMFAPreference", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) SetUserMFAPreferenceAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserMFAPreferenceInput) *CognitoidentityproviderSetUserMFAPreferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUserMFAPreference", input)
	return &CognitoidentityproviderSetUserMFAPreferenceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) SetUserPoolMfaConfig(ctx workflow.Context, input *cognitoidentityprovider.SetUserPoolMfaConfigInput) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error) {
	var output cognitoidentityprovider.SetUserPoolMfaConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUserPoolMfaConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) SetUserPoolMfaConfigAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserPoolMfaConfigInput) *CognitoidentityproviderSetUserPoolMfaConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUserPoolMfaConfig", input)
	return &CognitoidentityproviderSetUserPoolMfaConfigFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) SetUserSettings(ctx workflow.Context, input *cognitoidentityprovider.SetUserSettingsInput) (*cognitoidentityprovider.SetUserSettingsOutput, error) {
	var output cognitoidentityprovider.SetUserSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUserSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) SetUserSettingsAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserSettingsInput) *CognitoidentityproviderSetUserSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUserSettings", input)
	return &CognitoidentityproviderSetUserSettingsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) SignUp(ctx workflow.Context, input *cognitoidentityprovider.SignUpInput) (*cognitoidentityprovider.SignUpOutput, error) {
	var output cognitoidentityprovider.SignUpOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SignUp", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) SignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.SignUpInput) *CognitoidentityproviderSignUpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SignUp", input)
	return &CognitoidentityproviderSignUpFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) StartUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.StartUserImportJobInput) (*cognitoidentityprovider.StartUserImportJobOutput, error) {
	var output cognitoidentityprovider.StartUserImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.StartUserImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) StartUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.StartUserImportJobInput) *CognitoidentityproviderStartUserImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.StartUserImportJob", input)
	return &CognitoidentityproviderStartUserImportJobFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) StopUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.StopUserImportJobInput) (*cognitoidentityprovider.StopUserImportJobOutput, error) {
	var output cognitoidentityprovider.StopUserImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.StopUserImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) StopUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.StopUserImportJobInput) *CognitoidentityproviderStopUserImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.StopUserImportJob", input)
	return &CognitoidentityproviderStopUserImportJobFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) TagResource(ctx workflow.Context, input *cognitoidentityprovider.TagResourceInput) (*cognitoidentityprovider.TagResourceOutput, error) {
	var output cognitoidentityprovider.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) TagResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.TagResourceInput) *CognitoidentityproviderTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.TagResource", input)
	return &CognitoidentityproviderTagResourceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UntagResource(ctx workflow.Context, input *cognitoidentityprovider.UntagResourceInput) (*cognitoidentityprovider.UntagResourceOutput, error) {
	var output cognitoidentityprovider.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UntagResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.UntagResourceInput) *CognitoidentityproviderUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UntagResource", input)
	return &CognitoidentityproviderUntagResourceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateAuthEventFeedback(ctx workflow.Context, input *cognitoidentityprovider.UpdateAuthEventFeedbackInput) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error) {
	var output cognitoidentityprovider.UpdateAuthEventFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateAuthEventFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateAuthEventFeedbackAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateAuthEventFeedbackInput) *CognitoidentityproviderUpdateAuthEventFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateAuthEventFeedback", input)
	return &CognitoidentityproviderUpdateAuthEventFeedbackFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateDeviceStatus(ctx workflow.Context, input *cognitoidentityprovider.UpdateDeviceStatusInput) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error) {
	var output cognitoidentityprovider.UpdateDeviceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateDeviceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateDeviceStatusAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateDeviceStatusInput) *CognitoidentityproviderUpdateDeviceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateDeviceStatus", input)
	return &CognitoidentityproviderUpdateDeviceStatusFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateGroup(ctx workflow.Context, input *cognitoidentityprovider.UpdateGroupInput) (*cognitoidentityprovider.UpdateGroupOutput, error) {
	var output cognitoidentityprovider.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateGroupInput) *CognitoidentityproviderUpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateGroup", input)
	return &CognitoidentityproviderUpdateGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.UpdateIdentityProviderInput) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error) {
	var output cognitoidentityprovider.UpdateIdentityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateIdentityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateIdentityProviderInput) *CognitoidentityproviderUpdateIdentityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateIdentityProvider", input)
	return &CognitoidentityproviderUpdateIdentityProviderFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateResourceServer(ctx workflow.Context, input *cognitoidentityprovider.UpdateResourceServerInput) (*cognitoidentityprovider.UpdateResourceServerOutput, error) {
	var output cognitoidentityprovider.UpdateResourceServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateResourceServer", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateResourceServerInput) *CognitoidentityproviderUpdateResourceServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateResourceServer", input)
	return &CognitoidentityproviderUpdateResourceServerFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserAttributesInput) (*cognitoidentityprovider.UpdateUserAttributesOutput, error) {
	var output cognitoidentityprovider.UpdateUserAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserAttributesInput) *CognitoidentityproviderUpdateUserAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserAttributes", input)
	return &CognitoidentityproviderUpdateUserAttributesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateUserPool(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolInput) (*cognitoidentityprovider.UpdateUserPoolOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolInput) *CognitoidentityproviderUpdateUserPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserPool", input)
	return &CognitoidentityproviderUpdateUserPoolFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolClientInput) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolClientOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserPoolClient", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolClientInput) *CognitoidentityproviderUpdateUserPoolClientFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserPoolClient", input)
	return &CognitoidentityproviderUpdateUserPoolClientFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolDomainInput) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserPoolDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolDomainInput) *CognitoidentityproviderUpdateUserPoolDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserPoolDomain", input)
	return &CognitoidentityproviderUpdateUserPoolDomainFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) VerifySoftwareToken(ctx workflow.Context, input *cognitoidentityprovider.VerifySoftwareTokenInput) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error) {
	var output cognitoidentityprovider.VerifySoftwareTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.VerifySoftwareToken", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) VerifySoftwareTokenAsync(ctx workflow.Context, input *cognitoidentityprovider.VerifySoftwareTokenInput) *CognitoidentityproviderVerifySoftwareTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.VerifySoftwareToken", input)
	return &CognitoidentityproviderVerifySoftwareTokenFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) VerifyUserAttribute(ctx workflow.Context, input *cognitoidentityprovider.VerifyUserAttributeInput) (*cognitoidentityprovider.VerifyUserAttributeOutput, error) {
	var output cognitoidentityprovider.VerifyUserAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.VerifyUserAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) VerifyUserAttributeAsync(ctx workflow.Context, input *cognitoidentityprovider.VerifyUserAttributeInput) *CognitoidentityproviderVerifyUserAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.VerifyUserAttribute", input)
	return &CognitoidentityproviderVerifyUserAttributeFuture{Future: future}
}
