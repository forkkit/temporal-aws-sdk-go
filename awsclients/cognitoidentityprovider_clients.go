// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	"go.temporal.io/sdk/workflow"
)

type CognitoIdentityProviderClient interface {
	AddCustomAttributes(ctx workflow.Context, input *cognitoidentityprovider.AddCustomAttributesInput) (*cognitoidentityprovider.AddCustomAttributesOutput, error)
	AddCustomAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AddCustomAttributesInput) *CognitoIdentityProviderAddCustomAttributesFuture

	AdminAddUserToGroup(ctx workflow.Context, input *cognitoidentityprovider.AdminAddUserToGroupInput) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error)
	AdminAddUserToGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminAddUserToGroupInput) *CognitoIdentityProviderAdminAddUserToGroupFuture

	AdminConfirmSignUp(ctx workflow.Context, input *cognitoidentityprovider.AdminConfirmSignUpInput) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error)
	AdminConfirmSignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminConfirmSignUpInput) *CognitoIdentityProviderAdminConfirmSignUpFuture

	AdminCreateUser(ctx workflow.Context, input *cognitoidentityprovider.AdminCreateUserInput) (*cognitoidentityprovider.AdminCreateUserOutput, error)
	AdminCreateUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminCreateUserInput) *CognitoIdentityProviderAdminCreateUserFuture

	AdminDeleteUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserInput) (*cognitoidentityprovider.AdminDeleteUserOutput, error)
	AdminDeleteUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserInput) *CognitoIdentityProviderAdminDeleteUserFuture

	AdminDeleteUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserAttributesInput) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error)
	AdminDeleteUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserAttributesInput) *CognitoIdentityProviderAdminDeleteUserAttributesFuture

	AdminDisableProviderForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableProviderForUserInput) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error)
	AdminDisableProviderForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableProviderForUserInput) *CognitoIdentityProviderAdminDisableProviderForUserFuture

	AdminDisableUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableUserInput) (*cognitoidentityprovider.AdminDisableUserOutput, error)
	AdminDisableUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableUserInput) *CognitoIdentityProviderAdminDisableUserFuture

	AdminEnableUser(ctx workflow.Context, input *cognitoidentityprovider.AdminEnableUserInput) (*cognitoidentityprovider.AdminEnableUserOutput, error)
	AdminEnableUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminEnableUserInput) *CognitoIdentityProviderAdminEnableUserFuture

	AdminForgetDevice(ctx workflow.Context, input *cognitoidentityprovider.AdminForgetDeviceInput) (*cognitoidentityprovider.AdminForgetDeviceOutput, error)
	AdminForgetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminForgetDeviceInput) *CognitoIdentityProviderAdminForgetDeviceFuture

	AdminGetDevice(ctx workflow.Context, input *cognitoidentityprovider.AdminGetDeviceInput) (*cognitoidentityprovider.AdminGetDeviceOutput, error)
	AdminGetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminGetDeviceInput) *CognitoIdentityProviderAdminGetDeviceFuture

	AdminGetUser(ctx workflow.Context, input *cognitoidentityprovider.AdminGetUserInput) (*cognitoidentityprovider.AdminGetUserOutput, error)
	AdminGetUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminGetUserInput) *CognitoIdentityProviderAdminGetUserFuture

	AdminInitiateAuth(ctx workflow.Context, input *cognitoidentityprovider.AdminInitiateAuthInput) (*cognitoidentityprovider.AdminInitiateAuthOutput, error)
	AdminInitiateAuthAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminInitiateAuthInput) *CognitoIdentityProviderAdminInitiateAuthFuture

	AdminLinkProviderForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminLinkProviderForUserInput) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error)
	AdminLinkProviderForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminLinkProviderForUserInput) *CognitoIdentityProviderAdminLinkProviderForUserFuture

	AdminListDevices(ctx workflow.Context, input *cognitoidentityprovider.AdminListDevicesInput) (*cognitoidentityprovider.AdminListDevicesOutput, error)
	AdminListDevicesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListDevicesInput) *CognitoIdentityProviderAdminListDevicesFuture

	AdminListGroupsForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error)
	AdminListGroupsForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput) *CognitoIdentityProviderAdminListGroupsForUserFuture

	AdminListUserAuthEvents(ctx workflow.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error)
	AdminListUserAuthEventsAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput) *CognitoIdentityProviderAdminListUserAuthEventsFuture

	AdminRemoveUserFromGroup(ctx workflow.Context, input *cognitoidentityprovider.AdminRemoveUserFromGroupInput) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error)
	AdminRemoveUserFromGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminRemoveUserFromGroupInput) *CognitoIdentityProviderAdminRemoveUserFromGroupFuture

	AdminResetUserPassword(ctx workflow.Context, input *cognitoidentityprovider.AdminResetUserPasswordInput) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error)
	AdminResetUserPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminResetUserPasswordInput) *CognitoIdentityProviderAdminResetUserPasswordFuture

	AdminRespondToAuthChallenge(ctx workflow.Context, input *cognitoidentityprovider.AdminRespondToAuthChallengeInput) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error)
	AdminRespondToAuthChallengeAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminRespondToAuthChallengeInput) *CognitoIdentityProviderAdminRespondToAuthChallengeFuture

	AdminSetUserMFAPreference(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error)
	AdminSetUserMFAPreferenceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) *CognitoIdentityProviderAdminSetUserMFAPreferenceFuture

	AdminSetUserPassword(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserPasswordInput) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error)
	AdminSetUserPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserPasswordInput) *CognitoIdentityProviderAdminSetUserPasswordFuture

	AdminSetUserSettings(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserSettingsInput) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error)
	AdminSetUserSettingsAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserSettingsInput) *CognitoIdentityProviderAdminSetUserSettingsFuture

	AdminUpdateAuthEventFeedback(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error)
	AdminUpdateAuthEventFeedbackAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) *CognitoIdentityProviderAdminUpdateAuthEventFeedbackFuture

	AdminUpdateDeviceStatus(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateDeviceStatusInput) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error)
	AdminUpdateDeviceStatusAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateDeviceStatusInput) *CognitoIdentityProviderAdminUpdateDeviceStatusFuture

	AdminUpdateUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateUserAttributesInput) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error)
	AdminUpdateUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateUserAttributesInput) *CognitoIdentityProviderAdminUpdateUserAttributesFuture

	AdminUserGlobalSignOut(ctx workflow.Context, input *cognitoidentityprovider.AdminUserGlobalSignOutInput) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error)
	AdminUserGlobalSignOutAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUserGlobalSignOutInput) *CognitoIdentityProviderAdminUserGlobalSignOutFuture

	AssociateSoftwareToken(ctx workflow.Context, input *cognitoidentityprovider.AssociateSoftwareTokenInput) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error)
	AssociateSoftwareTokenAsync(ctx workflow.Context, input *cognitoidentityprovider.AssociateSoftwareTokenInput) *CognitoIdentityProviderAssociateSoftwareTokenFuture

	ChangePassword(ctx workflow.Context, input *cognitoidentityprovider.ChangePasswordInput) (*cognitoidentityprovider.ChangePasswordOutput, error)
	ChangePasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ChangePasswordInput) *CognitoIdentityProviderChangePasswordFuture

	ConfirmDevice(ctx workflow.Context, input *cognitoidentityprovider.ConfirmDeviceInput) (*cognitoidentityprovider.ConfirmDeviceOutput, error)
	ConfirmDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmDeviceInput) *CognitoIdentityProviderConfirmDeviceFuture

	ConfirmForgotPassword(ctx workflow.Context, input *cognitoidentityprovider.ConfirmForgotPasswordInput) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error)
	ConfirmForgotPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmForgotPasswordInput) *CognitoIdentityProviderConfirmForgotPasswordFuture

	ConfirmSignUp(ctx workflow.Context, input *cognitoidentityprovider.ConfirmSignUpInput) (*cognitoidentityprovider.ConfirmSignUpOutput, error)
	ConfirmSignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmSignUpInput) *CognitoIdentityProviderConfirmSignUpFuture

	CreateGroup(ctx workflow.Context, input *cognitoidentityprovider.CreateGroupInput) (*cognitoidentityprovider.CreateGroupOutput, error)
	CreateGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateGroupInput) *CognitoIdentityProviderCreateGroupFuture

	CreateIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.CreateIdentityProviderInput) (*cognitoidentityprovider.CreateIdentityProviderOutput, error)
	CreateIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateIdentityProviderInput) *CognitoIdentityProviderCreateIdentityProviderFuture

	CreateResourceServer(ctx workflow.Context, input *cognitoidentityprovider.CreateResourceServerInput) (*cognitoidentityprovider.CreateResourceServerOutput, error)
	CreateResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateResourceServerInput) *CognitoIdentityProviderCreateResourceServerFuture

	CreateUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.CreateUserImportJobInput) (*cognitoidentityprovider.CreateUserImportJobOutput, error)
	CreateUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserImportJobInput) *CognitoIdentityProviderCreateUserImportJobFuture

	CreateUserPool(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolInput) (*cognitoidentityprovider.CreateUserPoolOutput, error)
	CreateUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolInput) *CognitoIdentityProviderCreateUserPoolFuture

	CreateUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolClientInput) (*cognitoidentityprovider.CreateUserPoolClientOutput, error)
	CreateUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolClientInput) *CognitoIdentityProviderCreateUserPoolClientFuture

	CreateUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolDomainInput) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error)
	CreateUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolDomainInput) *CognitoIdentityProviderCreateUserPoolDomainFuture

	DeleteGroup(ctx workflow.Context, input *cognitoidentityprovider.DeleteGroupInput) (*cognitoidentityprovider.DeleteGroupOutput, error)
	DeleteGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteGroupInput) *CognitoIdentityProviderDeleteGroupFuture

	DeleteIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.DeleteIdentityProviderInput) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error)
	DeleteIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteIdentityProviderInput) *CognitoIdentityProviderDeleteIdentityProviderFuture

	DeleteResourceServer(ctx workflow.Context, input *cognitoidentityprovider.DeleteResourceServerInput) (*cognitoidentityprovider.DeleteResourceServerOutput, error)
	DeleteResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteResourceServerInput) *CognitoIdentityProviderDeleteResourceServerFuture

	DeleteUser(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserInput) (*cognitoidentityprovider.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserInput) *CognitoIdentityProviderDeleteUserFuture

	DeleteUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserAttributesInput) (*cognitoidentityprovider.DeleteUserAttributesOutput, error)
	DeleteUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserAttributesInput) *CognitoIdentityProviderDeleteUserAttributesFuture

	DeleteUserPool(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolInput) (*cognitoidentityprovider.DeleteUserPoolOutput, error)
	DeleteUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolInput) *CognitoIdentityProviderDeleteUserPoolFuture

	DeleteUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolClientInput) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error)
	DeleteUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolClientInput) *CognitoIdentityProviderDeleteUserPoolClientFuture

	DeleteUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolDomainInput) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error)
	DeleteUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolDomainInput) *CognitoIdentityProviderDeleteUserPoolDomainFuture

	DescribeIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.DescribeIdentityProviderInput) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error)
	DescribeIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeIdentityProviderInput) *CognitoIdentityProviderDescribeIdentityProviderFuture

	DescribeResourceServer(ctx workflow.Context, input *cognitoidentityprovider.DescribeResourceServerInput) (*cognitoidentityprovider.DescribeResourceServerOutput, error)
	DescribeResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeResourceServerInput) *CognitoIdentityProviderDescribeResourceServerFuture

	DescribeRiskConfiguration(ctx workflow.Context, input *cognitoidentityprovider.DescribeRiskConfigurationInput) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error)
	DescribeRiskConfigurationAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeRiskConfigurationInput) *CognitoIdentityProviderDescribeRiskConfigurationFuture

	DescribeUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserImportJobInput) (*cognitoidentityprovider.DescribeUserImportJobOutput, error)
	DescribeUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserImportJobInput) *CognitoIdentityProviderDescribeUserImportJobFuture

	DescribeUserPool(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolInput) (*cognitoidentityprovider.DescribeUserPoolOutput, error)
	DescribeUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolInput) *CognitoIdentityProviderDescribeUserPoolFuture

	DescribeUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolClientInput) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error)
	DescribeUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolClientInput) *CognitoIdentityProviderDescribeUserPoolClientFuture

	DescribeUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolDomainInput) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error)
	DescribeUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolDomainInput) *CognitoIdentityProviderDescribeUserPoolDomainFuture

	ForgetDevice(ctx workflow.Context, input *cognitoidentityprovider.ForgetDeviceInput) (*cognitoidentityprovider.ForgetDeviceOutput, error)
	ForgetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.ForgetDeviceInput) *CognitoIdentityProviderForgetDeviceFuture

	ForgotPassword(ctx workflow.Context, input *cognitoidentityprovider.ForgotPasswordInput) (*cognitoidentityprovider.ForgotPasswordOutput, error)
	ForgotPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ForgotPasswordInput) *CognitoIdentityProviderForgotPasswordFuture

	GetCSVHeader(ctx workflow.Context, input *cognitoidentityprovider.GetCSVHeaderInput) (*cognitoidentityprovider.GetCSVHeaderOutput, error)
	GetCSVHeaderAsync(ctx workflow.Context, input *cognitoidentityprovider.GetCSVHeaderInput) *CognitoIdentityProviderGetCSVHeaderFuture

	GetDevice(ctx workflow.Context, input *cognitoidentityprovider.GetDeviceInput) (*cognitoidentityprovider.GetDeviceOutput, error)
	GetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.GetDeviceInput) *CognitoIdentityProviderGetDeviceFuture

	GetGroup(ctx workflow.Context, input *cognitoidentityprovider.GetGroupInput) (*cognitoidentityprovider.GetGroupOutput, error)
	GetGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.GetGroupInput) *CognitoIdentityProviderGetGroupFuture

	GetIdentityProviderByIdentifier(ctx workflow.Context, input *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error)
	GetIdentityProviderByIdentifierAsync(ctx workflow.Context, input *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) *CognitoIdentityProviderGetIdentityProviderByIdentifierFuture

	GetSigningCertificate(ctx workflow.Context, input *cognitoidentityprovider.GetSigningCertificateInput) (*cognitoidentityprovider.GetSigningCertificateOutput, error)
	GetSigningCertificateAsync(ctx workflow.Context, input *cognitoidentityprovider.GetSigningCertificateInput) *CognitoIdentityProviderGetSigningCertificateFuture

	GetUICustomization(ctx workflow.Context, input *cognitoidentityprovider.GetUICustomizationInput) (*cognitoidentityprovider.GetUICustomizationOutput, error)
	GetUICustomizationAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUICustomizationInput) *CognitoIdentityProviderGetUICustomizationFuture

	GetUser(ctx workflow.Context, input *cognitoidentityprovider.GetUserInput) (*cognitoidentityprovider.GetUserOutput, error)
	GetUserAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserInput) *CognitoIdentityProviderGetUserFuture

	GetUserAttributeVerificationCode(ctx workflow.Context, input *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error)
	GetUserAttributeVerificationCodeAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) *CognitoIdentityProviderGetUserAttributeVerificationCodeFuture

	GetUserPoolMfaConfig(ctx workflow.Context, input *cognitoidentityprovider.GetUserPoolMfaConfigInput) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error)
	GetUserPoolMfaConfigAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserPoolMfaConfigInput) *CognitoIdentityProviderGetUserPoolMfaConfigFuture

	GlobalSignOut(ctx workflow.Context, input *cognitoidentityprovider.GlobalSignOutInput) (*cognitoidentityprovider.GlobalSignOutOutput, error)
	GlobalSignOutAsync(ctx workflow.Context, input *cognitoidentityprovider.GlobalSignOutInput) *CognitoIdentityProviderGlobalSignOutFuture

	InitiateAuth(ctx workflow.Context, input *cognitoidentityprovider.InitiateAuthInput) (*cognitoidentityprovider.InitiateAuthOutput, error)
	InitiateAuthAsync(ctx workflow.Context, input *cognitoidentityprovider.InitiateAuthInput) *CognitoIdentityProviderInitiateAuthFuture

	ListDevices(ctx workflow.Context, input *cognitoidentityprovider.ListDevicesInput) (*cognitoidentityprovider.ListDevicesOutput, error)
	ListDevicesAsync(ctx workflow.Context, input *cognitoidentityprovider.ListDevicesInput) *CognitoIdentityProviderListDevicesFuture

	ListGroups(ctx workflow.Context, input *cognitoidentityprovider.ListGroupsInput) (*cognitoidentityprovider.ListGroupsOutput, error)
	ListGroupsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListGroupsInput) *CognitoIdentityProviderListGroupsFuture

	ListIdentityProviders(ctx workflow.Context, input *cognitoidentityprovider.ListIdentityProvidersInput) (*cognitoidentityprovider.ListIdentityProvidersOutput, error)
	ListIdentityProvidersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListIdentityProvidersInput) *CognitoIdentityProviderListIdentityProvidersFuture

	ListResourceServers(ctx workflow.Context, input *cognitoidentityprovider.ListResourceServersInput) (*cognitoidentityprovider.ListResourceServersOutput, error)
	ListResourceServersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListResourceServersInput) *CognitoIdentityProviderListResourceServersFuture

	ListTagsForResource(ctx workflow.Context, input *cognitoidentityprovider.ListTagsForResourceInput) (*cognitoidentityprovider.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.ListTagsForResourceInput) *CognitoIdentityProviderListTagsForResourceFuture

	ListUserImportJobs(ctx workflow.Context, input *cognitoidentityprovider.ListUserImportJobsInput) (*cognitoidentityprovider.ListUserImportJobsOutput, error)
	ListUserImportJobsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserImportJobsInput) *CognitoIdentityProviderListUserImportJobsFuture

	ListUserPoolClients(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolClientsInput) (*cognitoidentityprovider.ListUserPoolClientsOutput, error)
	ListUserPoolClientsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolClientsInput) *CognitoIdentityProviderListUserPoolClientsFuture

	ListUserPools(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolsInput) (*cognitoidentityprovider.ListUserPoolsOutput, error)
	ListUserPoolsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolsInput) *CognitoIdentityProviderListUserPoolsFuture

	ListUsers(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInput) (*cognitoidentityprovider.ListUsersOutput, error)
	ListUsersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInput) *CognitoIdentityProviderListUsersFuture

	ListUsersInGroup(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInGroupInput) (*cognitoidentityprovider.ListUsersInGroupOutput, error)
	ListUsersInGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInGroupInput) *CognitoIdentityProviderListUsersInGroupFuture

	ResendConfirmationCode(ctx workflow.Context, input *cognitoidentityprovider.ResendConfirmationCodeInput) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error)
	ResendConfirmationCodeAsync(ctx workflow.Context, input *cognitoidentityprovider.ResendConfirmationCodeInput) *CognitoIdentityProviderResendConfirmationCodeFuture

	RespondToAuthChallenge(ctx workflow.Context, input *cognitoidentityprovider.RespondToAuthChallengeInput) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error)
	RespondToAuthChallengeAsync(ctx workflow.Context, input *cognitoidentityprovider.RespondToAuthChallengeInput) *CognitoIdentityProviderRespondToAuthChallengeFuture

	SetRiskConfiguration(ctx workflow.Context, input *cognitoidentityprovider.SetRiskConfigurationInput) (*cognitoidentityprovider.SetRiskConfigurationOutput, error)
	SetRiskConfigurationAsync(ctx workflow.Context, input *cognitoidentityprovider.SetRiskConfigurationInput) *CognitoIdentityProviderSetRiskConfigurationFuture

	SetUICustomization(ctx workflow.Context, input *cognitoidentityprovider.SetUICustomizationInput) (*cognitoidentityprovider.SetUICustomizationOutput, error)
	SetUICustomizationAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUICustomizationInput) *CognitoIdentityProviderSetUICustomizationFuture

	SetUserMFAPreference(ctx workflow.Context, input *cognitoidentityprovider.SetUserMFAPreferenceInput) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error)
	SetUserMFAPreferenceAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserMFAPreferenceInput) *CognitoIdentityProviderSetUserMFAPreferenceFuture

	SetUserPoolMfaConfig(ctx workflow.Context, input *cognitoidentityprovider.SetUserPoolMfaConfigInput) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error)
	SetUserPoolMfaConfigAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserPoolMfaConfigInput) *CognitoIdentityProviderSetUserPoolMfaConfigFuture

	SetUserSettings(ctx workflow.Context, input *cognitoidentityprovider.SetUserSettingsInput) (*cognitoidentityprovider.SetUserSettingsOutput, error)
	SetUserSettingsAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserSettingsInput) *CognitoIdentityProviderSetUserSettingsFuture

	SignUp(ctx workflow.Context, input *cognitoidentityprovider.SignUpInput) (*cognitoidentityprovider.SignUpOutput, error)
	SignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.SignUpInput) *CognitoIdentityProviderSignUpFuture

	StartUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.StartUserImportJobInput) (*cognitoidentityprovider.StartUserImportJobOutput, error)
	StartUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.StartUserImportJobInput) *CognitoIdentityProviderStartUserImportJobFuture

	StopUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.StopUserImportJobInput) (*cognitoidentityprovider.StopUserImportJobOutput, error)
	StopUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.StopUserImportJobInput) *CognitoIdentityProviderStopUserImportJobFuture

	TagResource(ctx workflow.Context, input *cognitoidentityprovider.TagResourceInput) (*cognitoidentityprovider.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.TagResourceInput) *CognitoIdentityProviderTagResourceFuture

	UntagResource(ctx workflow.Context, input *cognitoidentityprovider.UntagResourceInput) (*cognitoidentityprovider.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.UntagResourceInput) *CognitoIdentityProviderUntagResourceFuture

	UpdateAuthEventFeedback(ctx workflow.Context, input *cognitoidentityprovider.UpdateAuthEventFeedbackInput) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error)
	UpdateAuthEventFeedbackAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateAuthEventFeedbackInput) *CognitoIdentityProviderUpdateAuthEventFeedbackFuture

	UpdateDeviceStatus(ctx workflow.Context, input *cognitoidentityprovider.UpdateDeviceStatusInput) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error)
	UpdateDeviceStatusAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateDeviceStatusInput) *CognitoIdentityProviderUpdateDeviceStatusFuture

	UpdateGroup(ctx workflow.Context, input *cognitoidentityprovider.UpdateGroupInput) (*cognitoidentityprovider.UpdateGroupOutput, error)
	UpdateGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateGroupInput) *CognitoIdentityProviderUpdateGroupFuture

	UpdateIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.UpdateIdentityProviderInput) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error)
	UpdateIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateIdentityProviderInput) *CognitoIdentityProviderUpdateIdentityProviderFuture

	UpdateResourceServer(ctx workflow.Context, input *cognitoidentityprovider.UpdateResourceServerInput) (*cognitoidentityprovider.UpdateResourceServerOutput, error)
	UpdateResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateResourceServerInput) *CognitoIdentityProviderUpdateResourceServerFuture

	UpdateUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserAttributesInput) (*cognitoidentityprovider.UpdateUserAttributesOutput, error)
	UpdateUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserAttributesInput) *CognitoIdentityProviderUpdateUserAttributesFuture

	UpdateUserPool(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolInput) (*cognitoidentityprovider.UpdateUserPoolOutput, error)
	UpdateUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolInput) *CognitoIdentityProviderUpdateUserPoolFuture

	UpdateUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolClientInput) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error)
	UpdateUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolClientInput) *CognitoIdentityProviderUpdateUserPoolClientFuture

	UpdateUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolDomainInput) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error)
	UpdateUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolDomainInput) *CognitoIdentityProviderUpdateUserPoolDomainFuture

	VerifySoftwareToken(ctx workflow.Context, input *cognitoidentityprovider.VerifySoftwareTokenInput) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error)
	VerifySoftwareTokenAsync(ctx workflow.Context, input *cognitoidentityprovider.VerifySoftwareTokenInput) *CognitoIdentityProviderVerifySoftwareTokenFuture

	VerifyUserAttribute(ctx workflow.Context, input *cognitoidentityprovider.VerifyUserAttributeInput) (*cognitoidentityprovider.VerifyUserAttributeOutput, error)
	VerifyUserAttributeAsync(ctx workflow.Context, input *cognitoidentityprovider.VerifyUserAttributeInput) *CognitoIdentityProviderVerifyUserAttributeFuture
}

type CognitoIdentityProviderStub struct{}

func NewCognitoIdentityProviderStub() CognitoIdentityProviderClient {
	return &CognitoIdentityProviderStub{}
}

type CognitoIdentityProviderAddCustomAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAddCustomAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AddCustomAttributesOutput, error) {
	var output cognitoidentityprovider.AddCustomAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminAddUserToGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminAddUserToGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error) {
	var output cognitoidentityprovider.AdminAddUserToGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminConfirmSignUpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminConfirmSignUpFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error) {
	var output cognitoidentityprovider.AdminConfirmSignUpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminCreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminCreateUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	var output cognitoidentityprovider.AdminCreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminDeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminDeleteUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminDeleteUserOutput, error) {
	var output cognitoidentityprovider.AdminDeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminDeleteUserAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminDeleteUserAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error) {
	var output cognitoidentityprovider.AdminDeleteUserAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminDisableProviderForUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminDisableProviderForUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error) {
	var output cognitoidentityprovider.AdminDisableProviderForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminDisableUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminDisableUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminDisableUserOutput, error) {
	var output cognitoidentityprovider.AdminDisableUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminEnableUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminEnableUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminEnableUserOutput, error) {
	var output cognitoidentityprovider.AdminEnableUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminForgetDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminForgetDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminForgetDeviceOutput, error) {
	var output cognitoidentityprovider.AdminForgetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminGetDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminGetDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminGetDeviceOutput, error) {
	var output cognitoidentityprovider.AdminGetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminGetUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminGetUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	var output cognitoidentityprovider.AdminGetUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminInitiateAuthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminInitiateAuthFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
	var output cognitoidentityprovider.AdminInitiateAuthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminLinkProviderForUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminLinkProviderForUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error) {
	var output cognitoidentityprovider.AdminLinkProviderForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminListDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminListDevicesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminListDevicesOutput, error) {
	var output cognitoidentityprovider.AdminListDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminListGroupsForUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminListGroupsForUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error) {
	var output cognitoidentityprovider.AdminListGroupsForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminListUserAuthEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminListUserAuthEventsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error) {
	var output cognitoidentityprovider.AdminListUserAuthEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminRemoveUserFromGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminRemoveUserFromGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error) {
	var output cognitoidentityprovider.AdminRemoveUserFromGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminResetUserPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminResetUserPasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error) {
	var output cognitoidentityprovider.AdminResetUserPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminRespondToAuthChallengeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminRespondToAuthChallengeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error) {
	var output cognitoidentityprovider.AdminRespondToAuthChallengeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminSetUserMFAPreferenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminSetUserMFAPreferenceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error) {
	var output cognitoidentityprovider.AdminSetUserMFAPreferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminSetUserPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminSetUserPasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error) {
	var output cognitoidentityprovider.AdminSetUserPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminSetUserSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminSetUserSettingsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error) {
	var output cognitoidentityprovider.AdminSetUserSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminUpdateAuthEventFeedbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminUpdateAuthEventFeedbackFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error) {
	var output cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminUpdateDeviceStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminUpdateDeviceStatusFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error) {
	var output cognitoidentityprovider.AdminUpdateDeviceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminUpdateUserAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminUpdateUserAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error) {
	var output cognitoidentityprovider.AdminUpdateUserAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAdminUserGlobalSignOutFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAdminUserGlobalSignOutFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error) {
	var output cognitoidentityprovider.AdminUserGlobalSignOutOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderAssociateSoftwareTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderAssociateSoftwareTokenFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error) {
	var output cognitoidentityprovider.AssociateSoftwareTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderChangePasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderChangePasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ChangePasswordOutput, error) {
	var output cognitoidentityprovider.ChangePasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderConfirmDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderConfirmDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ConfirmDeviceOutput, error) {
	var output cognitoidentityprovider.ConfirmDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderConfirmForgotPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderConfirmForgotPasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error) {
	var output cognitoidentityprovider.ConfirmForgotPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderConfirmSignUpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderConfirmSignUpFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	var output cognitoidentityprovider.ConfirmSignUpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderCreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderCreateGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateGroupOutput, error) {
	var output cognitoidentityprovider.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderCreateIdentityProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderCreateIdentityProviderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateIdentityProviderOutput, error) {
	var output cognitoidentityprovider.CreateIdentityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderCreateResourceServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderCreateResourceServerFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateResourceServerOutput, error) {
	var output cognitoidentityprovider.CreateResourceServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderCreateUserImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderCreateUserImportJobFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateUserImportJobOutput, error) {
	var output cognitoidentityprovider.CreateUserImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderCreateUserPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderCreateUserPoolFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateUserPoolOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderCreateUserPoolClientFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderCreateUserPoolClientFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateUserPoolClientOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolClientOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderCreateUserPoolDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderCreateUserPoolDomainFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDeleteGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteGroupOutput, error) {
	var output cognitoidentityprovider.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDeleteIdentityProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDeleteIdentityProviderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error) {
	var output cognitoidentityprovider.DeleteIdentityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDeleteResourceServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDeleteResourceServerFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteResourceServerOutput, error) {
	var output cognitoidentityprovider.DeleteResourceServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDeleteUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserOutput, error) {
	var output cognitoidentityprovider.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDeleteUserAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDeleteUserAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserAttributesOutput, error) {
	var output cognitoidentityprovider.DeleteUserAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDeleteUserPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDeleteUserPoolFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserPoolOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDeleteUserPoolClientFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDeleteUserPoolClientFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolClientOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDeleteUserPoolDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDeleteUserPoolDomainFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDescribeIdentityProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDescribeIdentityProviderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error) {
	var output cognitoidentityprovider.DescribeIdentityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDescribeResourceServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDescribeResourceServerFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeResourceServerOutput, error) {
	var output cognitoidentityprovider.DescribeResourceServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDescribeRiskConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDescribeRiskConfigurationFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error) {
	var output cognitoidentityprovider.DescribeRiskConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDescribeUserImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDescribeUserImportJobFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeUserImportJobOutput, error) {
	var output cognitoidentityprovider.DescribeUserImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDescribeUserPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDescribeUserPoolFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeUserPoolOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDescribeUserPoolClientFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDescribeUserPoolClientFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolClientOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderDescribeUserPoolDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderDescribeUserPoolDomainFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderForgetDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderForgetDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ForgetDeviceOutput, error) {
	var output cognitoidentityprovider.ForgetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderForgotPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderForgotPasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ForgotPasswordOutput, error) {
	var output cognitoidentityprovider.ForgotPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderGetCSVHeaderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderGetCSVHeaderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetCSVHeaderOutput, error) {
	var output cognitoidentityprovider.GetCSVHeaderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderGetDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderGetDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetDeviceOutput, error) {
	var output cognitoidentityprovider.GetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderGetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderGetGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetGroupOutput, error) {
	var output cognitoidentityprovider.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderGetIdentityProviderByIdentifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderGetIdentityProviderByIdentifierFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error) {
	var output cognitoidentityprovider.GetIdentityProviderByIdentifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderGetSigningCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderGetSigningCertificateFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetSigningCertificateOutput, error) {
	var output cognitoidentityprovider.GetSigningCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderGetUICustomizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderGetUICustomizationFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetUICustomizationOutput, error) {
	var output cognitoidentityprovider.GetUICustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderGetUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderGetUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetUserOutput, error) {
	var output cognitoidentityprovider.GetUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderGetUserAttributeVerificationCodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderGetUserAttributeVerificationCodeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error) {
	var output cognitoidentityprovider.GetUserAttributeVerificationCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderGetUserPoolMfaConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderGetUserPoolMfaConfigFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error) {
	var output cognitoidentityprovider.GetUserPoolMfaConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderGlobalSignOutFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderGlobalSignOutFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GlobalSignOutOutput, error) {
	var output cognitoidentityprovider.GlobalSignOutOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderInitiateAuthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderInitiateAuthFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	var output cognitoidentityprovider.InitiateAuthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderListDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderListDevicesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListDevicesOutput, error) {
	var output cognitoidentityprovider.ListDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderListGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderListGroupsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListGroupsOutput, error) {
	var output cognitoidentityprovider.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderListIdentityProvidersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderListIdentityProvidersFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListIdentityProvidersOutput, error) {
	var output cognitoidentityprovider.ListIdentityProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderListResourceServersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderListResourceServersFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListResourceServersOutput, error) {
	var output cognitoidentityprovider.ListResourceServersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderListTagsForResourceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListTagsForResourceOutput, error) {
	var output cognitoidentityprovider.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderListUserImportJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderListUserImportJobsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUserImportJobsOutput, error) {
	var output cognitoidentityprovider.ListUserImportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderListUserPoolClientsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderListUserPoolClientsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUserPoolClientsOutput, error) {
	var output cognitoidentityprovider.ListUserPoolClientsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderListUserPoolsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderListUserPoolsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUserPoolsOutput, error) {
	var output cognitoidentityprovider.ListUserPoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderListUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderListUsersFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUsersOutput, error) {
	var output cognitoidentityprovider.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderListUsersInGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderListUsersInGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUsersInGroupOutput, error) {
	var output cognitoidentityprovider.ListUsersInGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderResendConfirmationCodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderResendConfirmationCodeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error) {
	var output cognitoidentityprovider.ResendConfirmationCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderRespondToAuthChallengeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderRespondToAuthChallengeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error) {
	var output cognitoidentityprovider.RespondToAuthChallengeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderSetRiskConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderSetRiskConfigurationFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetRiskConfigurationOutput, error) {
	var output cognitoidentityprovider.SetRiskConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderSetUICustomizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderSetUICustomizationFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetUICustomizationOutput, error) {
	var output cognitoidentityprovider.SetUICustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderSetUserMFAPreferenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderSetUserMFAPreferenceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error) {
	var output cognitoidentityprovider.SetUserMFAPreferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderSetUserPoolMfaConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderSetUserPoolMfaConfigFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error) {
	var output cognitoidentityprovider.SetUserPoolMfaConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderSetUserSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderSetUserSettingsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetUserSettingsOutput, error) {
	var output cognitoidentityprovider.SetUserSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderSignUpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderSignUpFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SignUpOutput, error) {
	var output cognitoidentityprovider.SignUpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderStartUserImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderStartUserImportJobFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.StartUserImportJobOutput, error) {
	var output cognitoidentityprovider.StartUserImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderStopUserImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderStopUserImportJobFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.StopUserImportJobOutput, error) {
	var output cognitoidentityprovider.StopUserImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderTagResourceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.TagResourceOutput, error) {
	var output cognitoidentityprovider.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderUntagResourceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UntagResourceOutput, error) {
	var output cognitoidentityprovider.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderUpdateAuthEventFeedbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderUpdateAuthEventFeedbackFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error) {
	var output cognitoidentityprovider.UpdateAuthEventFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderUpdateDeviceStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderUpdateDeviceStatusFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error) {
	var output cognitoidentityprovider.UpdateDeviceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderUpdateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderUpdateGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateGroupOutput, error) {
	var output cognitoidentityprovider.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderUpdateIdentityProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderUpdateIdentityProviderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error) {
	var output cognitoidentityprovider.UpdateIdentityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderUpdateResourceServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderUpdateResourceServerFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateResourceServerOutput, error) {
	var output cognitoidentityprovider.UpdateResourceServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderUpdateUserAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderUpdateUserAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateUserAttributesOutput, error) {
	var output cognitoidentityprovider.UpdateUserAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderUpdateUserPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderUpdateUserPoolFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateUserPoolOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderUpdateUserPoolClientFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderUpdateUserPoolClientFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolClientOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderUpdateUserPoolDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderUpdateUserPoolDomainFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderVerifySoftwareTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderVerifySoftwareTokenFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error) {
	var output cognitoidentityprovider.VerifySoftwareTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityProviderVerifyUserAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityProviderVerifyUserAttributeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.VerifyUserAttributeOutput, error) {
	var output cognitoidentityprovider.VerifyUserAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AddCustomAttributes(ctx workflow.Context, input *cognitoidentityprovider.AddCustomAttributesInput) (*cognitoidentityprovider.AddCustomAttributesOutput, error) {
	var output cognitoidentityprovider.AddCustomAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AddCustomAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AddCustomAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AddCustomAttributesInput) *CognitoIdentityProviderAddCustomAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AddCustomAttributes", input)
	return &CognitoIdentityProviderAddCustomAttributesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminAddUserToGroup(ctx workflow.Context, input *cognitoidentityprovider.AdminAddUserToGroupInput) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error) {
	var output cognitoidentityprovider.AdminAddUserToGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminAddUserToGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminAddUserToGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminAddUserToGroupInput) *CognitoIdentityProviderAdminAddUserToGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminAddUserToGroup", input)
	return &CognitoIdentityProviderAdminAddUserToGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminConfirmSignUp(ctx workflow.Context, input *cognitoidentityprovider.AdminConfirmSignUpInput) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error) {
	var output cognitoidentityprovider.AdminConfirmSignUpOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminConfirmSignUp", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminConfirmSignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminConfirmSignUpInput) *CognitoIdentityProviderAdminConfirmSignUpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminConfirmSignUp", input)
	return &CognitoIdentityProviderAdminConfirmSignUpFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminCreateUser(ctx workflow.Context, input *cognitoidentityprovider.AdminCreateUserInput) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	var output cognitoidentityprovider.AdminCreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminCreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminCreateUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminCreateUserInput) *CognitoIdentityProviderAdminCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminCreateUser", input)
	return &CognitoIdentityProviderAdminCreateUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminDeleteUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserInput) (*cognitoidentityprovider.AdminDeleteUserOutput, error) {
	var output cognitoidentityprovider.AdminDeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminDeleteUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserInput) *CognitoIdentityProviderAdminDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDeleteUser", input)
	return &CognitoIdentityProviderAdminDeleteUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminDeleteUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserAttributesInput) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error) {
	var output cognitoidentityprovider.AdminDeleteUserAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDeleteUserAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminDeleteUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserAttributesInput) *CognitoIdentityProviderAdminDeleteUserAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDeleteUserAttributes", input)
	return &CognitoIdentityProviderAdminDeleteUserAttributesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminDisableProviderForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableProviderForUserInput) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error) {
	var output cognitoidentityprovider.AdminDisableProviderForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDisableProviderForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminDisableProviderForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableProviderForUserInput) *CognitoIdentityProviderAdminDisableProviderForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDisableProviderForUser", input)
	return &CognitoIdentityProviderAdminDisableProviderForUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminDisableUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableUserInput) (*cognitoidentityprovider.AdminDisableUserOutput, error) {
	var output cognitoidentityprovider.AdminDisableUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDisableUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminDisableUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableUserInput) *CognitoIdentityProviderAdminDisableUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminDisableUser", input)
	return &CognitoIdentityProviderAdminDisableUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminEnableUser(ctx workflow.Context, input *cognitoidentityprovider.AdminEnableUserInput) (*cognitoidentityprovider.AdminEnableUserOutput, error) {
	var output cognitoidentityprovider.AdminEnableUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminEnableUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminEnableUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminEnableUserInput) *CognitoIdentityProviderAdminEnableUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminEnableUser", input)
	return &CognitoIdentityProviderAdminEnableUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminForgetDevice(ctx workflow.Context, input *cognitoidentityprovider.AdminForgetDeviceInput) (*cognitoidentityprovider.AdminForgetDeviceOutput, error) {
	var output cognitoidentityprovider.AdminForgetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminForgetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminForgetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminForgetDeviceInput) *CognitoIdentityProviderAdminForgetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminForgetDevice", input)
	return &CognitoIdentityProviderAdminForgetDeviceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminGetDevice(ctx workflow.Context, input *cognitoidentityprovider.AdminGetDeviceInput) (*cognitoidentityprovider.AdminGetDeviceOutput, error) {
	var output cognitoidentityprovider.AdminGetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminGetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminGetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminGetDeviceInput) *CognitoIdentityProviderAdminGetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminGetDevice", input)
	return &CognitoIdentityProviderAdminGetDeviceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminGetUser(ctx workflow.Context, input *cognitoidentityprovider.AdminGetUserInput) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	var output cognitoidentityprovider.AdminGetUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminGetUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminGetUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminGetUserInput) *CognitoIdentityProviderAdminGetUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminGetUser", input)
	return &CognitoIdentityProviderAdminGetUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminInitiateAuth(ctx workflow.Context, input *cognitoidentityprovider.AdminInitiateAuthInput) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
	var output cognitoidentityprovider.AdminInitiateAuthOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminInitiateAuth", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminInitiateAuthAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminInitiateAuthInput) *CognitoIdentityProviderAdminInitiateAuthFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminInitiateAuth", input)
	return &CognitoIdentityProviderAdminInitiateAuthFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminLinkProviderForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminLinkProviderForUserInput) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error) {
	var output cognitoidentityprovider.AdminLinkProviderForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminLinkProviderForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminLinkProviderForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminLinkProviderForUserInput) *CognitoIdentityProviderAdminLinkProviderForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminLinkProviderForUser", input)
	return &CognitoIdentityProviderAdminLinkProviderForUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminListDevices(ctx workflow.Context, input *cognitoidentityprovider.AdminListDevicesInput) (*cognitoidentityprovider.AdminListDevicesOutput, error) {
	var output cognitoidentityprovider.AdminListDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminListDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminListDevicesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListDevicesInput) *CognitoIdentityProviderAdminListDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminListDevices", input)
	return &CognitoIdentityProviderAdminListDevicesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminListGroupsForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error) {
	var output cognitoidentityprovider.AdminListGroupsForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminListGroupsForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminListGroupsForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput) *CognitoIdentityProviderAdminListGroupsForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminListGroupsForUser", input)
	return &CognitoIdentityProviderAdminListGroupsForUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminListUserAuthEvents(ctx workflow.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error) {
	var output cognitoidentityprovider.AdminListUserAuthEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminListUserAuthEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminListUserAuthEventsAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput) *CognitoIdentityProviderAdminListUserAuthEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminListUserAuthEvents", input)
	return &CognitoIdentityProviderAdminListUserAuthEventsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminRemoveUserFromGroup(ctx workflow.Context, input *cognitoidentityprovider.AdminRemoveUserFromGroupInput) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error) {
	var output cognitoidentityprovider.AdminRemoveUserFromGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminRemoveUserFromGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminRemoveUserFromGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminRemoveUserFromGroupInput) *CognitoIdentityProviderAdminRemoveUserFromGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminRemoveUserFromGroup", input)
	return &CognitoIdentityProviderAdminRemoveUserFromGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminResetUserPassword(ctx workflow.Context, input *cognitoidentityprovider.AdminResetUserPasswordInput) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error) {
	var output cognitoidentityprovider.AdminResetUserPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminResetUserPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminResetUserPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminResetUserPasswordInput) *CognitoIdentityProviderAdminResetUserPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminResetUserPassword", input)
	return &CognitoIdentityProviderAdminResetUserPasswordFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminRespondToAuthChallenge(ctx workflow.Context, input *cognitoidentityprovider.AdminRespondToAuthChallengeInput) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error) {
	var output cognitoidentityprovider.AdminRespondToAuthChallengeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminRespondToAuthChallenge", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminRespondToAuthChallengeAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminRespondToAuthChallengeInput) *CognitoIdentityProviderAdminRespondToAuthChallengeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminRespondToAuthChallenge", input)
	return &CognitoIdentityProviderAdminRespondToAuthChallengeFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminSetUserMFAPreference(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error) {
	var output cognitoidentityprovider.AdminSetUserMFAPreferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminSetUserMFAPreference", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminSetUserMFAPreferenceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) *CognitoIdentityProviderAdminSetUserMFAPreferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminSetUserMFAPreference", input)
	return &CognitoIdentityProviderAdminSetUserMFAPreferenceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminSetUserPassword(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserPasswordInput) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error) {
	var output cognitoidentityprovider.AdminSetUserPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminSetUserPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminSetUserPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserPasswordInput) *CognitoIdentityProviderAdminSetUserPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminSetUserPassword", input)
	return &CognitoIdentityProviderAdminSetUserPasswordFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminSetUserSettings(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserSettingsInput) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error) {
	var output cognitoidentityprovider.AdminSetUserSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminSetUserSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminSetUserSettingsAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserSettingsInput) *CognitoIdentityProviderAdminSetUserSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminSetUserSettings", input)
	return &CognitoIdentityProviderAdminSetUserSettingsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminUpdateAuthEventFeedback(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error) {
	var output cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUpdateAuthEventFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminUpdateAuthEventFeedbackAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) *CognitoIdentityProviderAdminUpdateAuthEventFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUpdateAuthEventFeedback", input)
	return &CognitoIdentityProviderAdminUpdateAuthEventFeedbackFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminUpdateDeviceStatus(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateDeviceStatusInput) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error) {
	var output cognitoidentityprovider.AdminUpdateDeviceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUpdateDeviceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminUpdateDeviceStatusAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateDeviceStatusInput) *CognitoIdentityProviderAdminUpdateDeviceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUpdateDeviceStatus", input)
	return &CognitoIdentityProviderAdminUpdateDeviceStatusFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminUpdateUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateUserAttributesInput) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error) {
	var output cognitoidentityprovider.AdminUpdateUserAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUpdateUserAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminUpdateUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateUserAttributesInput) *CognitoIdentityProviderAdminUpdateUserAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUpdateUserAttributes", input)
	return &CognitoIdentityProviderAdminUpdateUserAttributesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AdminUserGlobalSignOut(ctx workflow.Context, input *cognitoidentityprovider.AdminUserGlobalSignOutInput) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error) {
	var output cognitoidentityprovider.AdminUserGlobalSignOutOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUserGlobalSignOut", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AdminUserGlobalSignOutAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUserGlobalSignOutInput) *CognitoIdentityProviderAdminUserGlobalSignOutFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AdminUserGlobalSignOut", input)
	return &CognitoIdentityProviderAdminUserGlobalSignOutFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) AssociateSoftwareToken(ctx workflow.Context, input *cognitoidentityprovider.AssociateSoftwareTokenInput) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error) {
	var output cognitoidentityprovider.AssociateSoftwareTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AssociateSoftwareToken", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) AssociateSoftwareTokenAsync(ctx workflow.Context, input *cognitoidentityprovider.AssociateSoftwareTokenInput) *CognitoIdentityProviderAssociateSoftwareTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.AssociateSoftwareToken", input)
	return &CognitoIdentityProviderAssociateSoftwareTokenFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ChangePassword(ctx workflow.Context, input *cognitoidentityprovider.ChangePasswordInput) (*cognitoidentityprovider.ChangePasswordOutput, error) {
	var output cognitoidentityprovider.ChangePasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ChangePassword", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ChangePasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ChangePasswordInput) *CognitoIdentityProviderChangePasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ChangePassword", input)
	return &CognitoIdentityProviderChangePasswordFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ConfirmDevice(ctx workflow.Context, input *cognitoidentityprovider.ConfirmDeviceInput) (*cognitoidentityprovider.ConfirmDeviceOutput, error) {
	var output cognitoidentityprovider.ConfirmDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ConfirmDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ConfirmDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmDeviceInput) *CognitoIdentityProviderConfirmDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ConfirmDevice", input)
	return &CognitoIdentityProviderConfirmDeviceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ConfirmForgotPassword(ctx workflow.Context, input *cognitoidentityprovider.ConfirmForgotPasswordInput) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error) {
	var output cognitoidentityprovider.ConfirmForgotPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ConfirmForgotPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ConfirmForgotPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmForgotPasswordInput) *CognitoIdentityProviderConfirmForgotPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ConfirmForgotPassword", input)
	return &CognitoIdentityProviderConfirmForgotPasswordFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ConfirmSignUp(ctx workflow.Context, input *cognitoidentityprovider.ConfirmSignUpInput) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	var output cognitoidentityprovider.ConfirmSignUpOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ConfirmSignUp", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ConfirmSignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmSignUpInput) *CognitoIdentityProviderConfirmSignUpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ConfirmSignUp", input)
	return &CognitoIdentityProviderConfirmSignUpFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateGroup(ctx workflow.Context, input *cognitoidentityprovider.CreateGroupInput) (*cognitoidentityprovider.CreateGroupOutput, error) {
	var output cognitoidentityprovider.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateGroupInput) *CognitoIdentityProviderCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateGroup", input)
	return &CognitoIdentityProviderCreateGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.CreateIdentityProviderInput) (*cognitoidentityprovider.CreateIdentityProviderOutput, error) {
	var output cognitoidentityprovider.CreateIdentityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateIdentityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateIdentityProviderInput) *CognitoIdentityProviderCreateIdentityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateIdentityProvider", input)
	return &CognitoIdentityProviderCreateIdentityProviderFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateResourceServer(ctx workflow.Context, input *cognitoidentityprovider.CreateResourceServerInput) (*cognitoidentityprovider.CreateResourceServerOutput, error) {
	var output cognitoidentityprovider.CreateResourceServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateResourceServer", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateResourceServerInput) *CognitoIdentityProviderCreateResourceServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateResourceServer", input)
	return &CognitoIdentityProviderCreateResourceServerFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.CreateUserImportJobInput) (*cognitoidentityprovider.CreateUserImportJobOutput, error) {
	var output cognitoidentityprovider.CreateUserImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserImportJobInput) *CognitoIdentityProviderCreateUserImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserImportJob", input)
	return &CognitoIdentityProviderCreateUserImportJobFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateUserPool(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolInput) (*cognitoidentityprovider.CreateUserPoolOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolInput) *CognitoIdentityProviderCreateUserPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserPool", input)
	return &CognitoIdentityProviderCreateUserPoolFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolClientInput) (*cognitoidentityprovider.CreateUserPoolClientOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolClientOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserPoolClient", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolClientInput) *CognitoIdentityProviderCreateUserPoolClientFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserPoolClient", input)
	return &CognitoIdentityProviderCreateUserPoolClientFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) CreateUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolDomainInput) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserPoolDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) CreateUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolDomainInput) *CognitoIdentityProviderCreateUserPoolDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.CreateUserPoolDomain", input)
	return &CognitoIdentityProviderCreateUserPoolDomainFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteGroup(ctx workflow.Context, input *cognitoidentityprovider.DeleteGroupInput) (*cognitoidentityprovider.DeleteGroupOutput, error) {
	var output cognitoidentityprovider.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteGroupInput) *CognitoIdentityProviderDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteGroup", input)
	return &CognitoIdentityProviderDeleteGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.DeleteIdentityProviderInput) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error) {
	var output cognitoidentityprovider.DeleteIdentityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteIdentityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteIdentityProviderInput) *CognitoIdentityProviderDeleteIdentityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteIdentityProvider", input)
	return &CognitoIdentityProviderDeleteIdentityProviderFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteResourceServer(ctx workflow.Context, input *cognitoidentityprovider.DeleteResourceServerInput) (*cognitoidentityprovider.DeleteResourceServerOutput, error) {
	var output cognitoidentityprovider.DeleteResourceServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteResourceServer", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteResourceServerInput) *CognitoIdentityProviderDeleteResourceServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteResourceServer", input)
	return &CognitoIdentityProviderDeleteResourceServerFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteUser(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserInput) (*cognitoidentityprovider.DeleteUserOutput, error) {
	var output cognitoidentityprovider.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteUserAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserInput) *CognitoIdentityProviderDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUser", input)
	return &CognitoIdentityProviderDeleteUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserAttributesInput) (*cognitoidentityprovider.DeleteUserAttributesOutput, error) {
	var output cognitoidentityprovider.DeleteUserAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserAttributesInput) *CognitoIdentityProviderDeleteUserAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserAttributes", input)
	return &CognitoIdentityProviderDeleteUserAttributesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteUserPool(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolInput) (*cognitoidentityprovider.DeleteUserPoolOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolInput) *CognitoIdentityProviderDeleteUserPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserPool", input)
	return &CognitoIdentityProviderDeleteUserPoolFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolClientInput) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolClientOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserPoolClient", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolClientInput) *CognitoIdentityProviderDeleteUserPoolClientFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserPoolClient", input)
	return &CognitoIdentityProviderDeleteUserPoolClientFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DeleteUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolDomainInput) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserPoolDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DeleteUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolDomainInput) *CognitoIdentityProviderDeleteUserPoolDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DeleteUserPoolDomain", input)
	return &CognitoIdentityProviderDeleteUserPoolDomainFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.DescribeIdentityProviderInput) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error) {
	var output cognitoidentityprovider.DescribeIdentityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeIdentityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeIdentityProviderInput) *CognitoIdentityProviderDescribeIdentityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeIdentityProvider", input)
	return &CognitoIdentityProviderDescribeIdentityProviderFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeResourceServer(ctx workflow.Context, input *cognitoidentityprovider.DescribeResourceServerInput) (*cognitoidentityprovider.DescribeResourceServerOutput, error) {
	var output cognitoidentityprovider.DescribeResourceServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeResourceServer", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeResourceServerInput) *CognitoIdentityProviderDescribeResourceServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeResourceServer", input)
	return &CognitoIdentityProviderDescribeResourceServerFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeRiskConfiguration(ctx workflow.Context, input *cognitoidentityprovider.DescribeRiskConfigurationInput) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error) {
	var output cognitoidentityprovider.DescribeRiskConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeRiskConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeRiskConfigurationAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeRiskConfigurationInput) *CognitoIdentityProviderDescribeRiskConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeRiskConfiguration", input)
	return &CognitoIdentityProviderDescribeRiskConfigurationFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserImportJobInput) (*cognitoidentityprovider.DescribeUserImportJobOutput, error) {
	var output cognitoidentityprovider.DescribeUserImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserImportJobInput) *CognitoIdentityProviderDescribeUserImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserImportJob", input)
	return &CognitoIdentityProviderDescribeUserImportJobFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeUserPool(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolInput) (*cognitoidentityprovider.DescribeUserPoolOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolInput) *CognitoIdentityProviderDescribeUserPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserPool", input)
	return &CognitoIdentityProviderDescribeUserPoolFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolClientInput) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolClientOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserPoolClient", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolClientInput) *CognitoIdentityProviderDescribeUserPoolClientFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserPoolClient", input)
	return &CognitoIdentityProviderDescribeUserPoolClientFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) DescribeUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolDomainInput) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserPoolDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) DescribeUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolDomainInput) *CognitoIdentityProviderDescribeUserPoolDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.DescribeUserPoolDomain", input)
	return &CognitoIdentityProviderDescribeUserPoolDomainFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ForgetDevice(ctx workflow.Context, input *cognitoidentityprovider.ForgetDeviceInput) (*cognitoidentityprovider.ForgetDeviceOutput, error) {
	var output cognitoidentityprovider.ForgetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ForgetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ForgetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.ForgetDeviceInput) *CognitoIdentityProviderForgetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ForgetDevice", input)
	return &CognitoIdentityProviderForgetDeviceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ForgotPassword(ctx workflow.Context, input *cognitoidentityprovider.ForgotPasswordInput) (*cognitoidentityprovider.ForgotPasswordOutput, error) {
	var output cognitoidentityprovider.ForgotPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ForgotPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ForgotPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ForgotPasswordInput) *CognitoIdentityProviderForgotPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ForgotPassword", input)
	return &CognitoIdentityProviderForgotPasswordFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetCSVHeader(ctx workflow.Context, input *cognitoidentityprovider.GetCSVHeaderInput) (*cognitoidentityprovider.GetCSVHeaderOutput, error) {
	var output cognitoidentityprovider.GetCSVHeaderOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetCSVHeader", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetCSVHeaderAsync(ctx workflow.Context, input *cognitoidentityprovider.GetCSVHeaderInput) *CognitoIdentityProviderGetCSVHeaderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetCSVHeader", input)
	return &CognitoIdentityProviderGetCSVHeaderFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetDevice(ctx workflow.Context, input *cognitoidentityprovider.GetDeviceInput) (*cognitoidentityprovider.GetDeviceOutput, error) {
	var output cognitoidentityprovider.GetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.GetDeviceInput) *CognitoIdentityProviderGetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetDevice", input)
	return &CognitoIdentityProviderGetDeviceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetGroup(ctx workflow.Context, input *cognitoidentityprovider.GetGroupInput) (*cognitoidentityprovider.GetGroupOutput, error) {
	var output cognitoidentityprovider.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.GetGroupInput) *CognitoIdentityProviderGetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetGroup", input)
	return &CognitoIdentityProviderGetGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetIdentityProviderByIdentifier(ctx workflow.Context, input *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error) {
	var output cognitoidentityprovider.GetIdentityProviderByIdentifierOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetIdentityProviderByIdentifier", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetIdentityProviderByIdentifierAsync(ctx workflow.Context, input *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) *CognitoIdentityProviderGetIdentityProviderByIdentifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetIdentityProviderByIdentifier", input)
	return &CognitoIdentityProviderGetIdentityProviderByIdentifierFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetSigningCertificate(ctx workflow.Context, input *cognitoidentityprovider.GetSigningCertificateInput) (*cognitoidentityprovider.GetSigningCertificateOutput, error) {
	var output cognitoidentityprovider.GetSigningCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetSigningCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetSigningCertificateAsync(ctx workflow.Context, input *cognitoidentityprovider.GetSigningCertificateInput) *CognitoIdentityProviderGetSigningCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetSigningCertificate", input)
	return &CognitoIdentityProviderGetSigningCertificateFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetUICustomization(ctx workflow.Context, input *cognitoidentityprovider.GetUICustomizationInput) (*cognitoidentityprovider.GetUICustomizationOutput, error) {
	var output cognitoidentityprovider.GetUICustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUICustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetUICustomizationAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUICustomizationInput) *CognitoIdentityProviderGetUICustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUICustomization", input)
	return &CognitoIdentityProviderGetUICustomizationFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetUser(ctx workflow.Context, input *cognitoidentityprovider.GetUserInput) (*cognitoidentityprovider.GetUserOutput, error) {
	var output cognitoidentityprovider.GetUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUser", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetUserAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserInput) *CognitoIdentityProviderGetUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUser", input)
	return &CognitoIdentityProviderGetUserFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetUserAttributeVerificationCode(ctx workflow.Context, input *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error) {
	var output cognitoidentityprovider.GetUserAttributeVerificationCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUserAttributeVerificationCode", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetUserAttributeVerificationCodeAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) *CognitoIdentityProviderGetUserAttributeVerificationCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUserAttributeVerificationCode", input)
	return &CognitoIdentityProviderGetUserAttributeVerificationCodeFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GetUserPoolMfaConfig(ctx workflow.Context, input *cognitoidentityprovider.GetUserPoolMfaConfigInput) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error) {
	var output cognitoidentityprovider.GetUserPoolMfaConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUserPoolMfaConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GetUserPoolMfaConfigAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserPoolMfaConfigInput) *CognitoIdentityProviderGetUserPoolMfaConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GetUserPoolMfaConfig", input)
	return &CognitoIdentityProviderGetUserPoolMfaConfigFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) GlobalSignOut(ctx workflow.Context, input *cognitoidentityprovider.GlobalSignOutInput) (*cognitoidentityprovider.GlobalSignOutOutput, error) {
	var output cognitoidentityprovider.GlobalSignOutOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GlobalSignOut", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) GlobalSignOutAsync(ctx workflow.Context, input *cognitoidentityprovider.GlobalSignOutInput) *CognitoIdentityProviderGlobalSignOutFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.GlobalSignOut", input)
	return &CognitoIdentityProviderGlobalSignOutFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) InitiateAuth(ctx workflow.Context, input *cognitoidentityprovider.InitiateAuthInput) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	var output cognitoidentityprovider.InitiateAuthOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.InitiateAuth", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) InitiateAuthAsync(ctx workflow.Context, input *cognitoidentityprovider.InitiateAuthInput) *CognitoIdentityProviderInitiateAuthFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.InitiateAuth", input)
	return &CognitoIdentityProviderInitiateAuthFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListDevices(ctx workflow.Context, input *cognitoidentityprovider.ListDevicesInput) (*cognitoidentityprovider.ListDevicesOutput, error) {
	var output cognitoidentityprovider.ListDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListDevicesAsync(ctx workflow.Context, input *cognitoidentityprovider.ListDevicesInput) *CognitoIdentityProviderListDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListDevices", input)
	return &CognitoIdentityProviderListDevicesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListGroups(ctx workflow.Context, input *cognitoidentityprovider.ListGroupsInput) (*cognitoidentityprovider.ListGroupsOutput, error) {
	var output cognitoidentityprovider.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListGroupsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListGroupsInput) *CognitoIdentityProviderListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListGroups", input)
	return &CognitoIdentityProviderListGroupsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListIdentityProviders(ctx workflow.Context, input *cognitoidentityprovider.ListIdentityProvidersInput) (*cognitoidentityprovider.ListIdentityProvidersOutput, error) {
	var output cognitoidentityprovider.ListIdentityProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListIdentityProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListIdentityProvidersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListIdentityProvidersInput) *CognitoIdentityProviderListIdentityProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListIdentityProviders", input)
	return &CognitoIdentityProviderListIdentityProvidersFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListResourceServers(ctx workflow.Context, input *cognitoidentityprovider.ListResourceServersInput) (*cognitoidentityprovider.ListResourceServersOutput, error) {
	var output cognitoidentityprovider.ListResourceServersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListResourceServers", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListResourceServersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListResourceServersInput) *CognitoIdentityProviderListResourceServersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListResourceServers", input)
	return &CognitoIdentityProviderListResourceServersFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListTagsForResource(ctx workflow.Context, input *cognitoidentityprovider.ListTagsForResourceInput) (*cognitoidentityprovider.ListTagsForResourceOutput, error) {
	var output cognitoidentityprovider.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListTagsForResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.ListTagsForResourceInput) *CognitoIdentityProviderListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListTagsForResource", input)
	return &CognitoIdentityProviderListTagsForResourceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListUserImportJobs(ctx workflow.Context, input *cognitoidentityprovider.ListUserImportJobsInput) (*cognitoidentityprovider.ListUserImportJobsOutput, error) {
	var output cognitoidentityprovider.ListUserImportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUserImportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListUserImportJobsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserImportJobsInput) *CognitoIdentityProviderListUserImportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUserImportJobs", input)
	return &CognitoIdentityProviderListUserImportJobsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListUserPoolClients(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolClientsInput) (*cognitoidentityprovider.ListUserPoolClientsOutput, error) {
	var output cognitoidentityprovider.ListUserPoolClientsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUserPoolClients", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListUserPoolClientsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolClientsInput) *CognitoIdentityProviderListUserPoolClientsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUserPoolClients", input)
	return &CognitoIdentityProviderListUserPoolClientsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListUserPools(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolsInput) (*cognitoidentityprovider.ListUserPoolsOutput, error) {
	var output cognitoidentityprovider.ListUserPoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUserPools", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListUserPoolsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolsInput) *CognitoIdentityProviderListUserPoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUserPools", input)
	return &CognitoIdentityProviderListUserPoolsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListUsers(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInput) (*cognitoidentityprovider.ListUsersOutput, error) {
	var output cognitoidentityprovider.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListUsersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInput) *CognitoIdentityProviderListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUsers", input)
	return &CognitoIdentityProviderListUsersFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ListUsersInGroup(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInGroupInput) (*cognitoidentityprovider.ListUsersInGroupOutput, error) {
	var output cognitoidentityprovider.ListUsersInGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUsersInGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ListUsersInGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInGroupInput) *CognitoIdentityProviderListUsersInGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ListUsersInGroup", input)
	return &CognitoIdentityProviderListUsersInGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) ResendConfirmationCode(ctx workflow.Context, input *cognitoidentityprovider.ResendConfirmationCodeInput) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error) {
	var output cognitoidentityprovider.ResendConfirmationCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ResendConfirmationCode", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) ResendConfirmationCodeAsync(ctx workflow.Context, input *cognitoidentityprovider.ResendConfirmationCodeInput) *CognitoIdentityProviderResendConfirmationCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.ResendConfirmationCode", input)
	return &CognitoIdentityProviderResendConfirmationCodeFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) RespondToAuthChallenge(ctx workflow.Context, input *cognitoidentityprovider.RespondToAuthChallengeInput) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error) {
	var output cognitoidentityprovider.RespondToAuthChallengeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.RespondToAuthChallenge", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) RespondToAuthChallengeAsync(ctx workflow.Context, input *cognitoidentityprovider.RespondToAuthChallengeInput) *CognitoIdentityProviderRespondToAuthChallengeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.RespondToAuthChallenge", input)
	return &CognitoIdentityProviderRespondToAuthChallengeFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) SetRiskConfiguration(ctx workflow.Context, input *cognitoidentityprovider.SetRiskConfigurationInput) (*cognitoidentityprovider.SetRiskConfigurationOutput, error) {
	var output cognitoidentityprovider.SetRiskConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetRiskConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) SetRiskConfigurationAsync(ctx workflow.Context, input *cognitoidentityprovider.SetRiskConfigurationInput) *CognitoIdentityProviderSetRiskConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetRiskConfiguration", input)
	return &CognitoIdentityProviderSetRiskConfigurationFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) SetUICustomization(ctx workflow.Context, input *cognitoidentityprovider.SetUICustomizationInput) (*cognitoidentityprovider.SetUICustomizationOutput, error) {
	var output cognitoidentityprovider.SetUICustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUICustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) SetUICustomizationAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUICustomizationInput) *CognitoIdentityProviderSetUICustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUICustomization", input)
	return &CognitoIdentityProviderSetUICustomizationFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) SetUserMFAPreference(ctx workflow.Context, input *cognitoidentityprovider.SetUserMFAPreferenceInput) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error) {
	var output cognitoidentityprovider.SetUserMFAPreferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUserMFAPreference", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) SetUserMFAPreferenceAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserMFAPreferenceInput) *CognitoIdentityProviderSetUserMFAPreferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUserMFAPreference", input)
	return &CognitoIdentityProviderSetUserMFAPreferenceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) SetUserPoolMfaConfig(ctx workflow.Context, input *cognitoidentityprovider.SetUserPoolMfaConfigInput) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error) {
	var output cognitoidentityprovider.SetUserPoolMfaConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUserPoolMfaConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) SetUserPoolMfaConfigAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserPoolMfaConfigInput) *CognitoIdentityProviderSetUserPoolMfaConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUserPoolMfaConfig", input)
	return &CognitoIdentityProviderSetUserPoolMfaConfigFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) SetUserSettings(ctx workflow.Context, input *cognitoidentityprovider.SetUserSettingsInput) (*cognitoidentityprovider.SetUserSettingsOutput, error) {
	var output cognitoidentityprovider.SetUserSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUserSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) SetUserSettingsAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserSettingsInput) *CognitoIdentityProviderSetUserSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SetUserSettings", input)
	return &CognitoIdentityProviderSetUserSettingsFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) SignUp(ctx workflow.Context, input *cognitoidentityprovider.SignUpInput) (*cognitoidentityprovider.SignUpOutput, error) {
	var output cognitoidentityprovider.SignUpOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SignUp", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) SignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.SignUpInput) *CognitoIdentityProviderSignUpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.SignUp", input)
	return &CognitoIdentityProviderSignUpFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) StartUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.StartUserImportJobInput) (*cognitoidentityprovider.StartUserImportJobOutput, error) {
	var output cognitoidentityprovider.StartUserImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.StartUserImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) StartUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.StartUserImportJobInput) *CognitoIdentityProviderStartUserImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.StartUserImportJob", input)
	return &CognitoIdentityProviderStartUserImportJobFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) StopUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.StopUserImportJobInput) (*cognitoidentityprovider.StopUserImportJobOutput, error) {
	var output cognitoidentityprovider.StopUserImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.StopUserImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) StopUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.StopUserImportJobInput) *CognitoIdentityProviderStopUserImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.StopUserImportJob", input)
	return &CognitoIdentityProviderStopUserImportJobFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) TagResource(ctx workflow.Context, input *cognitoidentityprovider.TagResourceInput) (*cognitoidentityprovider.TagResourceOutput, error) {
	var output cognitoidentityprovider.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) TagResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.TagResourceInput) *CognitoIdentityProviderTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.TagResource", input)
	return &CognitoIdentityProviderTagResourceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UntagResource(ctx workflow.Context, input *cognitoidentityprovider.UntagResourceInput) (*cognitoidentityprovider.UntagResourceOutput, error) {
	var output cognitoidentityprovider.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UntagResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.UntagResourceInput) *CognitoIdentityProviderUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UntagResource", input)
	return &CognitoIdentityProviderUntagResourceFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateAuthEventFeedback(ctx workflow.Context, input *cognitoidentityprovider.UpdateAuthEventFeedbackInput) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error) {
	var output cognitoidentityprovider.UpdateAuthEventFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateAuthEventFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateAuthEventFeedbackAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateAuthEventFeedbackInput) *CognitoIdentityProviderUpdateAuthEventFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateAuthEventFeedback", input)
	return &CognitoIdentityProviderUpdateAuthEventFeedbackFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateDeviceStatus(ctx workflow.Context, input *cognitoidentityprovider.UpdateDeviceStatusInput) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error) {
	var output cognitoidentityprovider.UpdateDeviceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateDeviceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateDeviceStatusAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateDeviceStatusInput) *CognitoIdentityProviderUpdateDeviceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateDeviceStatus", input)
	return &CognitoIdentityProviderUpdateDeviceStatusFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateGroup(ctx workflow.Context, input *cognitoidentityprovider.UpdateGroupInput) (*cognitoidentityprovider.UpdateGroupOutput, error) {
	var output cognitoidentityprovider.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateGroupInput) *CognitoIdentityProviderUpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateGroup", input)
	return &CognitoIdentityProviderUpdateGroupFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.UpdateIdentityProviderInput) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error) {
	var output cognitoidentityprovider.UpdateIdentityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateIdentityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateIdentityProviderInput) *CognitoIdentityProviderUpdateIdentityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateIdentityProvider", input)
	return &CognitoIdentityProviderUpdateIdentityProviderFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateResourceServer(ctx workflow.Context, input *cognitoidentityprovider.UpdateResourceServerInput) (*cognitoidentityprovider.UpdateResourceServerOutput, error) {
	var output cognitoidentityprovider.UpdateResourceServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateResourceServer", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateResourceServerInput) *CognitoIdentityProviderUpdateResourceServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateResourceServer", input)
	return &CognitoIdentityProviderUpdateResourceServerFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserAttributesInput) (*cognitoidentityprovider.UpdateUserAttributesOutput, error) {
	var output cognitoidentityprovider.UpdateUserAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserAttributesInput) *CognitoIdentityProviderUpdateUserAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserAttributes", input)
	return &CognitoIdentityProviderUpdateUserAttributesFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateUserPool(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolInput) (*cognitoidentityprovider.UpdateUserPoolOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserPool", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolInput) *CognitoIdentityProviderUpdateUserPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserPool", input)
	return &CognitoIdentityProviderUpdateUserPoolFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolClientInput) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolClientOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserPoolClient", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolClientInput) *CognitoIdentityProviderUpdateUserPoolClientFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserPoolClient", input)
	return &CognitoIdentityProviderUpdateUserPoolClientFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) UpdateUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolDomainInput) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserPoolDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) UpdateUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolDomainInput) *CognitoIdentityProviderUpdateUserPoolDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.UpdateUserPoolDomain", input)
	return &CognitoIdentityProviderUpdateUserPoolDomainFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) VerifySoftwareToken(ctx workflow.Context, input *cognitoidentityprovider.VerifySoftwareTokenInput) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error) {
	var output cognitoidentityprovider.VerifySoftwareTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.VerifySoftwareToken", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) VerifySoftwareTokenAsync(ctx workflow.Context, input *cognitoidentityprovider.VerifySoftwareTokenInput) *CognitoIdentityProviderVerifySoftwareTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.VerifySoftwareToken", input)
	return &CognitoIdentityProviderVerifySoftwareTokenFuture{Future: future}
}

func (a *CognitoIdentityProviderStub) VerifyUserAttribute(ctx workflow.Context, input *cognitoidentityprovider.VerifyUserAttributeInput) (*cognitoidentityprovider.VerifyUserAttributeOutput, error) {
	var output cognitoidentityprovider.VerifyUserAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.VerifyUserAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *CognitoIdentityProviderStub) VerifyUserAttributeAsync(ctx workflow.Context, input *cognitoidentityprovider.VerifyUserAttributeInput) *CognitoIdentityProviderVerifyUserAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cognitoidentityprovider.VerifyUserAttribute", input)
	return &CognitoIdentityProviderVerifyUserAttributeFuture{Future: future}
}
