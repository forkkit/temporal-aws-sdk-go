// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/lightsail"
	"go.temporal.io/sdk/workflow"
)

type LightsailClient interface {
	AllocateStaticIp(ctx workflow.Context, input *lightsail.AllocateStaticIpInput) (*lightsail.AllocateStaticIpOutput, error)
	AllocateStaticIpAsync(ctx workflow.Context, input *lightsail.AllocateStaticIpInput) *LightsailAllocateStaticIpFuture

	AttachCertificateToDistribution(ctx workflow.Context, input *lightsail.AttachCertificateToDistributionInput) (*lightsail.AttachCertificateToDistributionOutput, error)
	AttachCertificateToDistributionAsync(ctx workflow.Context, input *lightsail.AttachCertificateToDistributionInput) *LightsailAttachCertificateToDistributionFuture

	AttachDisk(ctx workflow.Context, input *lightsail.AttachDiskInput) (*lightsail.AttachDiskOutput, error)
	AttachDiskAsync(ctx workflow.Context, input *lightsail.AttachDiskInput) *LightsailAttachDiskFuture

	AttachInstancesToLoadBalancer(ctx workflow.Context, input *lightsail.AttachInstancesToLoadBalancerInput) (*lightsail.AttachInstancesToLoadBalancerOutput, error)
	AttachInstancesToLoadBalancerAsync(ctx workflow.Context, input *lightsail.AttachInstancesToLoadBalancerInput) *LightsailAttachInstancesToLoadBalancerFuture

	AttachLoadBalancerTlsCertificate(ctx workflow.Context, input *lightsail.AttachLoadBalancerTlsCertificateInput) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error)
	AttachLoadBalancerTlsCertificateAsync(ctx workflow.Context, input *lightsail.AttachLoadBalancerTlsCertificateInput) *LightsailAttachLoadBalancerTlsCertificateFuture

	AttachStaticIp(ctx workflow.Context, input *lightsail.AttachStaticIpInput) (*lightsail.AttachStaticIpOutput, error)
	AttachStaticIpAsync(ctx workflow.Context, input *lightsail.AttachStaticIpInput) *LightsailAttachStaticIpFuture

	CloseInstancePublicPorts(ctx workflow.Context, input *lightsail.CloseInstancePublicPortsInput) (*lightsail.CloseInstancePublicPortsOutput, error)
	CloseInstancePublicPortsAsync(ctx workflow.Context, input *lightsail.CloseInstancePublicPortsInput) *LightsailCloseInstancePublicPortsFuture

	CopySnapshot(ctx workflow.Context, input *lightsail.CopySnapshotInput) (*lightsail.CopySnapshotOutput, error)
	CopySnapshotAsync(ctx workflow.Context, input *lightsail.CopySnapshotInput) *LightsailCopySnapshotFuture

	CreateCertificate(ctx workflow.Context, input *lightsail.CreateCertificateInput) (*lightsail.CreateCertificateOutput, error)
	CreateCertificateAsync(ctx workflow.Context, input *lightsail.CreateCertificateInput) *LightsailCreateCertificateFuture

	CreateCloudFormationStack(ctx workflow.Context, input *lightsail.CreateCloudFormationStackInput) (*lightsail.CreateCloudFormationStackOutput, error)
	CreateCloudFormationStackAsync(ctx workflow.Context, input *lightsail.CreateCloudFormationStackInput) *LightsailCreateCloudFormationStackFuture

	CreateContactMethod(ctx workflow.Context, input *lightsail.CreateContactMethodInput) (*lightsail.CreateContactMethodOutput, error)
	CreateContactMethodAsync(ctx workflow.Context, input *lightsail.CreateContactMethodInput) *LightsailCreateContactMethodFuture

	CreateDisk(ctx workflow.Context, input *lightsail.CreateDiskInput) (*lightsail.CreateDiskOutput, error)
	CreateDiskAsync(ctx workflow.Context, input *lightsail.CreateDiskInput) *LightsailCreateDiskFuture

	CreateDiskFromSnapshot(ctx workflow.Context, input *lightsail.CreateDiskFromSnapshotInput) (*lightsail.CreateDiskFromSnapshotOutput, error)
	CreateDiskFromSnapshotAsync(ctx workflow.Context, input *lightsail.CreateDiskFromSnapshotInput) *LightsailCreateDiskFromSnapshotFuture

	CreateDiskSnapshot(ctx workflow.Context, input *lightsail.CreateDiskSnapshotInput) (*lightsail.CreateDiskSnapshotOutput, error)
	CreateDiskSnapshotAsync(ctx workflow.Context, input *lightsail.CreateDiskSnapshotInput) *LightsailCreateDiskSnapshotFuture

	CreateDistribution(ctx workflow.Context, input *lightsail.CreateDistributionInput) (*lightsail.CreateDistributionOutput, error)
	CreateDistributionAsync(ctx workflow.Context, input *lightsail.CreateDistributionInput) *LightsailCreateDistributionFuture

	CreateDomain(ctx workflow.Context, input *lightsail.CreateDomainInput) (*lightsail.CreateDomainOutput, error)
	CreateDomainAsync(ctx workflow.Context, input *lightsail.CreateDomainInput) *LightsailCreateDomainFuture

	CreateDomainEntry(ctx workflow.Context, input *lightsail.CreateDomainEntryInput) (*lightsail.CreateDomainEntryOutput, error)
	CreateDomainEntryAsync(ctx workflow.Context, input *lightsail.CreateDomainEntryInput) *LightsailCreateDomainEntryFuture

	CreateInstanceSnapshot(ctx workflow.Context, input *lightsail.CreateInstanceSnapshotInput) (*lightsail.CreateInstanceSnapshotOutput, error)
	CreateInstanceSnapshotAsync(ctx workflow.Context, input *lightsail.CreateInstanceSnapshotInput) *LightsailCreateInstanceSnapshotFuture

	CreateInstances(ctx workflow.Context, input *lightsail.CreateInstancesInput) (*lightsail.CreateInstancesOutput, error)
	CreateInstancesAsync(ctx workflow.Context, input *lightsail.CreateInstancesInput) *LightsailCreateInstancesFuture

	CreateInstancesFromSnapshot(ctx workflow.Context, input *lightsail.CreateInstancesFromSnapshotInput) (*lightsail.CreateInstancesFromSnapshotOutput, error)
	CreateInstancesFromSnapshotAsync(ctx workflow.Context, input *lightsail.CreateInstancesFromSnapshotInput) *LightsailCreateInstancesFromSnapshotFuture

	CreateKeyPair(ctx workflow.Context, input *lightsail.CreateKeyPairInput) (*lightsail.CreateKeyPairOutput, error)
	CreateKeyPairAsync(ctx workflow.Context, input *lightsail.CreateKeyPairInput) *LightsailCreateKeyPairFuture

	CreateLoadBalancer(ctx workflow.Context, input *lightsail.CreateLoadBalancerInput) (*lightsail.CreateLoadBalancerOutput, error)
	CreateLoadBalancerAsync(ctx workflow.Context, input *lightsail.CreateLoadBalancerInput) *LightsailCreateLoadBalancerFuture

	CreateLoadBalancerTlsCertificate(ctx workflow.Context, input *lightsail.CreateLoadBalancerTlsCertificateInput) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error)
	CreateLoadBalancerTlsCertificateAsync(ctx workflow.Context, input *lightsail.CreateLoadBalancerTlsCertificateInput) *LightsailCreateLoadBalancerTlsCertificateFuture

	CreateRelationalDatabase(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseInput) (*lightsail.CreateRelationalDatabaseOutput, error)
	CreateRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseInput) *LightsailCreateRelationalDatabaseFuture

	CreateRelationalDatabaseFromSnapshot(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseFromSnapshotInput) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error)
	CreateRelationalDatabaseFromSnapshotAsync(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseFromSnapshotInput) *LightsailCreateRelationalDatabaseFromSnapshotFuture

	CreateRelationalDatabaseSnapshot(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseSnapshotInput) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error)
	CreateRelationalDatabaseSnapshotAsync(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseSnapshotInput) *LightsailCreateRelationalDatabaseSnapshotFuture

	DeleteAlarm(ctx workflow.Context, input *lightsail.DeleteAlarmInput) (*lightsail.DeleteAlarmOutput, error)
	DeleteAlarmAsync(ctx workflow.Context, input *lightsail.DeleteAlarmInput) *LightsailDeleteAlarmFuture

	DeleteAutoSnapshot(ctx workflow.Context, input *lightsail.DeleteAutoSnapshotInput) (*lightsail.DeleteAutoSnapshotOutput, error)
	DeleteAutoSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteAutoSnapshotInput) *LightsailDeleteAutoSnapshotFuture

	DeleteCertificate(ctx workflow.Context, input *lightsail.DeleteCertificateInput) (*lightsail.DeleteCertificateOutput, error)
	DeleteCertificateAsync(ctx workflow.Context, input *lightsail.DeleteCertificateInput) *LightsailDeleteCertificateFuture

	DeleteContactMethod(ctx workflow.Context, input *lightsail.DeleteContactMethodInput) (*lightsail.DeleteContactMethodOutput, error)
	DeleteContactMethodAsync(ctx workflow.Context, input *lightsail.DeleteContactMethodInput) *LightsailDeleteContactMethodFuture

	DeleteDisk(ctx workflow.Context, input *lightsail.DeleteDiskInput) (*lightsail.DeleteDiskOutput, error)
	DeleteDiskAsync(ctx workflow.Context, input *lightsail.DeleteDiskInput) *LightsailDeleteDiskFuture

	DeleteDiskSnapshot(ctx workflow.Context, input *lightsail.DeleteDiskSnapshotInput) (*lightsail.DeleteDiskSnapshotOutput, error)
	DeleteDiskSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteDiskSnapshotInput) *LightsailDeleteDiskSnapshotFuture

	DeleteDistribution(ctx workflow.Context, input *lightsail.DeleteDistributionInput) (*lightsail.DeleteDistributionOutput, error)
	DeleteDistributionAsync(ctx workflow.Context, input *lightsail.DeleteDistributionInput) *LightsailDeleteDistributionFuture

	DeleteDomain(ctx workflow.Context, input *lightsail.DeleteDomainInput) (*lightsail.DeleteDomainOutput, error)
	DeleteDomainAsync(ctx workflow.Context, input *lightsail.DeleteDomainInput) *LightsailDeleteDomainFuture

	DeleteDomainEntry(ctx workflow.Context, input *lightsail.DeleteDomainEntryInput) (*lightsail.DeleteDomainEntryOutput, error)
	DeleteDomainEntryAsync(ctx workflow.Context, input *lightsail.DeleteDomainEntryInput) *LightsailDeleteDomainEntryFuture

	DeleteInstance(ctx workflow.Context, input *lightsail.DeleteInstanceInput) (*lightsail.DeleteInstanceOutput, error)
	DeleteInstanceAsync(ctx workflow.Context, input *lightsail.DeleteInstanceInput) *LightsailDeleteInstanceFuture

	DeleteInstanceSnapshot(ctx workflow.Context, input *lightsail.DeleteInstanceSnapshotInput) (*lightsail.DeleteInstanceSnapshotOutput, error)
	DeleteInstanceSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteInstanceSnapshotInput) *LightsailDeleteInstanceSnapshotFuture

	DeleteKeyPair(ctx workflow.Context, input *lightsail.DeleteKeyPairInput) (*lightsail.DeleteKeyPairOutput, error)
	DeleteKeyPairAsync(ctx workflow.Context, input *lightsail.DeleteKeyPairInput) *LightsailDeleteKeyPairFuture

	DeleteKnownHostKeys(ctx workflow.Context, input *lightsail.DeleteKnownHostKeysInput) (*lightsail.DeleteKnownHostKeysOutput, error)
	DeleteKnownHostKeysAsync(ctx workflow.Context, input *lightsail.DeleteKnownHostKeysInput) *LightsailDeleteKnownHostKeysFuture

	DeleteLoadBalancer(ctx workflow.Context, input *lightsail.DeleteLoadBalancerInput) (*lightsail.DeleteLoadBalancerOutput, error)
	DeleteLoadBalancerAsync(ctx workflow.Context, input *lightsail.DeleteLoadBalancerInput) *LightsailDeleteLoadBalancerFuture

	DeleteLoadBalancerTlsCertificate(ctx workflow.Context, input *lightsail.DeleteLoadBalancerTlsCertificateInput) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error)
	DeleteLoadBalancerTlsCertificateAsync(ctx workflow.Context, input *lightsail.DeleteLoadBalancerTlsCertificateInput) *LightsailDeleteLoadBalancerTlsCertificateFuture

	DeleteRelationalDatabase(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseInput) (*lightsail.DeleteRelationalDatabaseOutput, error)
	DeleteRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseInput) *LightsailDeleteRelationalDatabaseFuture

	DeleteRelationalDatabaseSnapshot(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseSnapshotInput) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error)
	DeleteRelationalDatabaseSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseSnapshotInput) *LightsailDeleteRelationalDatabaseSnapshotFuture

	DetachCertificateFromDistribution(ctx workflow.Context, input *lightsail.DetachCertificateFromDistributionInput) (*lightsail.DetachCertificateFromDistributionOutput, error)
	DetachCertificateFromDistributionAsync(ctx workflow.Context, input *lightsail.DetachCertificateFromDistributionInput) *LightsailDetachCertificateFromDistributionFuture

	DetachDisk(ctx workflow.Context, input *lightsail.DetachDiskInput) (*lightsail.DetachDiskOutput, error)
	DetachDiskAsync(ctx workflow.Context, input *lightsail.DetachDiskInput) *LightsailDetachDiskFuture

	DetachInstancesFromLoadBalancer(ctx workflow.Context, input *lightsail.DetachInstancesFromLoadBalancerInput) (*lightsail.DetachInstancesFromLoadBalancerOutput, error)
	DetachInstancesFromLoadBalancerAsync(ctx workflow.Context, input *lightsail.DetachInstancesFromLoadBalancerInput) *LightsailDetachInstancesFromLoadBalancerFuture

	DetachStaticIp(ctx workflow.Context, input *lightsail.DetachStaticIpInput) (*lightsail.DetachStaticIpOutput, error)
	DetachStaticIpAsync(ctx workflow.Context, input *lightsail.DetachStaticIpInput) *LightsailDetachStaticIpFuture

	DisableAddOn(ctx workflow.Context, input *lightsail.DisableAddOnInput) (*lightsail.DisableAddOnOutput, error)
	DisableAddOnAsync(ctx workflow.Context, input *lightsail.DisableAddOnInput) *LightsailDisableAddOnFuture

	DownloadDefaultKeyPair(ctx workflow.Context, input *lightsail.DownloadDefaultKeyPairInput) (*lightsail.DownloadDefaultKeyPairOutput, error)
	DownloadDefaultKeyPairAsync(ctx workflow.Context, input *lightsail.DownloadDefaultKeyPairInput) *LightsailDownloadDefaultKeyPairFuture

	EnableAddOn(ctx workflow.Context, input *lightsail.EnableAddOnInput) (*lightsail.EnableAddOnOutput, error)
	EnableAddOnAsync(ctx workflow.Context, input *lightsail.EnableAddOnInput) *LightsailEnableAddOnFuture

	ExportSnapshot(ctx workflow.Context, input *lightsail.ExportSnapshotInput) (*lightsail.ExportSnapshotOutput, error)
	ExportSnapshotAsync(ctx workflow.Context, input *lightsail.ExportSnapshotInput) *LightsailExportSnapshotFuture

	GetActiveNames(ctx workflow.Context, input *lightsail.GetActiveNamesInput) (*lightsail.GetActiveNamesOutput, error)
	GetActiveNamesAsync(ctx workflow.Context, input *lightsail.GetActiveNamesInput) *LightsailGetActiveNamesFuture

	GetAlarms(ctx workflow.Context, input *lightsail.GetAlarmsInput) (*lightsail.GetAlarmsOutput, error)
	GetAlarmsAsync(ctx workflow.Context, input *lightsail.GetAlarmsInput) *LightsailGetAlarmsFuture

	GetAutoSnapshots(ctx workflow.Context, input *lightsail.GetAutoSnapshotsInput) (*lightsail.GetAutoSnapshotsOutput, error)
	GetAutoSnapshotsAsync(ctx workflow.Context, input *lightsail.GetAutoSnapshotsInput) *LightsailGetAutoSnapshotsFuture

	GetBlueprints(ctx workflow.Context, input *lightsail.GetBlueprintsInput) (*lightsail.GetBlueprintsOutput, error)
	GetBlueprintsAsync(ctx workflow.Context, input *lightsail.GetBlueprintsInput) *LightsailGetBlueprintsFuture

	GetBundles(ctx workflow.Context, input *lightsail.GetBundlesInput) (*lightsail.GetBundlesOutput, error)
	GetBundlesAsync(ctx workflow.Context, input *lightsail.GetBundlesInput) *LightsailGetBundlesFuture

	GetCertificates(ctx workflow.Context, input *lightsail.GetCertificatesInput) (*lightsail.GetCertificatesOutput, error)
	GetCertificatesAsync(ctx workflow.Context, input *lightsail.GetCertificatesInput) *LightsailGetCertificatesFuture

	GetCloudFormationStackRecords(ctx workflow.Context, input *lightsail.GetCloudFormationStackRecordsInput) (*lightsail.GetCloudFormationStackRecordsOutput, error)
	GetCloudFormationStackRecordsAsync(ctx workflow.Context, input *lightsail.GetCloudFormationStackRecordsInput) *LightsailGetCloudFormationStackRecordsFuture

	GetContactMethods(ctx workflow.Context, input *lightsail.GetContactMethodsInput) (*lightsail.GetContactMethodsOutput, error)
	GetContactMethodsAsync(ctx workflow.Context, input *lightsail.GetContactMethodsInput) *LightsailGetContactMethodsFuture

	GetDisk(ctx workflow.Context, input *lightsail.GetDiskInput) (*lightsail.GetDiskOutput, error)
	GetDiskAsync(ctx workflow.Context, input *lightsail.GetDiskInput) *LightsailGetDiskFuture

	GetDiskSnapshot(ctx workflow.Context, input *lightsail.GetDiskSnapshotInput) (*lightsail.GetDiskSnapshotOutput, error)
	GetDiskSnapshotAsync(ctx workflow.Context, input *lightsail.GetDiskSnapshotInput) *LightsailGetDiskSnapshotFuture

	GetDiskSnapshots(ctx workflow.Context, input *lightsail.GetDiskSnapshotsInput) (*lightsail.GetDiskSnapshotsOutput, error)
	GetDiskSnapshotsAsync(ctx workflow.Context, input *lightsail.GetDiskSnapshotsInput) *LightsailGetDiskSnapshotsFuture

	GetDisks(ctx workflow.Context, input *lightsail.GetDisksInput) (*lightsail.GetDisksOutput, error)
	GetDisksAsync(ctx workflow.Context, input *lightsail.GetDisksInput) *LightsailGetDisksFuture

	GetDistributionBundles(ctx workflow.Context, input *lightsail.GetDistributionBundlesInput) (*lightsail.GetDistributionBundlesOutput, error)
	GetDistributionBundlesAsync(ctx workflow.Context, input *lightsail.GetDistributionBundlesInput) *LightsailGetDistributionBundlesFuture

	GetDistributionLatestCacheReset(ctx workflow.Context, input *lightsail.GetDistributionLatestCacheResetInput) (*lightsail.GetDistributionLatestCacheResetOutput, error)
	GetDistributionLatestCacheResetAsync(ctx workflow.Context, input *lightsail.GetDistributionLatestCacheResetInput) *LightsailGetDistributionLatestCacheResetFuture

	GetDistributionMetricData(ctx workflow.Context, input *lightsail.GetDistributionMetricDataInput) (*lightsail.GetDistributionMetricDataOutput, error)
	GetDistributionMetricDataAsync(ctx workflow.Context, input *lightsail.GetDistributionMetricDataInput) *LightsailGetDistributionMetricDataFuture

	GetDistributions(ctx workflow.Context, input *lightsail.GetDistributionsInput) (*lightsail.GetDistributionsOutput, error)
	GetDistributionsAsync(ctx workflow.Context, input *lightsail.GetDistributionsInput) *LightsailGetDistributionsFuture

	GetDomain(ctx workflow.Context, input *lightsail.GetDomainInput) (*lightsail.GetDomainOutput, error)
	GetDomainAsync(ctx workflow.Context, input *lightsail.GetDomainInput) *LightsailGetDomainFuture

	GetDomains(ctx workflow.Context, input *lightsail.GetDomainsInput) (*lightsail.GetDomainsOutput, error)
	GetDomainsAsync(ctx workflow.Context, input *lightsail.GetDomainsInput) *LightsailGetDomainsFuture

	GetExportSnapshotRecords(ctx workflow.Context, input *lightsail.GetExportSnapshotRecordsInput) (*lightsail.GetExportSnapshotRecordsOutput, error)
	GetExportSnapshotRecordsAsync(ctx workflow.Context, input *lightsail.GetExportSnapshotRecordsInput) *LightsailGetExportSnapshotRecordsFuture

	GetInstance(ctx workflow.Context, input *lightsail.GetInstanceInput) (*lightsail.GetInstanceOutput, error)
	GetInstanceAsync(ctx workflow.Context, input *lightsail.GetInstanceInput) *LightsailGetInstanceFuture

	GetInstanceAccessDetails(ctx workflow.Context, input *lightsail.GetInstanceAccessDetailsInput) (*lightsail.GetInstanceAccessDetailsOutput, error)
	GetInstanceAccessDetailsAsync(ctx workflow.Context, input *lightsail.GetInstanceAccessDetailsInput) *LightsailGetInstanceAccessDetailsFuture

	GetInstanceMetricData(ctx workflow.Context, input *lightsail.GetInstanceMetricDataInput) (*lightsail.GetInstanceMetricDataOutput, error)
	GetInstanceMetricDataAsync(ctx workflow.Context, input *lightsail.GetInstanceMetricDataInput) *LightsailGetInstanceMetricDataFuture

	GetInstancePortStates(ctx workflow.Context, input *lightsail.GetInstancePortStatesInput) (*lightsail.GetInstancePortStatesOutput, error)
	GetInstancePortStatesAsync(ctx workflow.Context, input *lightsail.GetInstancePortStatesInput) *LightsailGetInstancePortStatesFuture

	GetInstanceSnapshot(ctx workflow.Context, input *lightsail.GetInstanceSnapshotInput) (*lightsail.GetInstanceSnapshotOutput, error)
	GetInstanceSnapshotAsync(ctx workflow.Context, input *lightsail.GetInstanceSnapshotInput) *LightsailGetInstanceSnapshotFuture

	GetInstanceSnapshots(ctx workflow.Context, input *lightsail.GetInstanceSnapshotsInput) (*lightsail.GetInstanceSnapshotsOutput, error)
	GetInstanceSnapshotsAsync(ctx workflow.Context, input *lightsail.GetInstanceSnapshotsInput) *LightsailGetInstanceSnapshotsFuture

	GetInstanceState(ctx workflow.Context, input *lightsail.GetInstanceStateInput) (*lightsail.GetInstanceStateOutput, error)
	GetInstanceStateAsync(ctx workflow.Context, input *lightsail.GetInstanceStateInput) *LightsailGetInstanceStateFuture

	GetInstances(ctx workflow.Context, input *lightsail.GetInstancesInput) (*lightsail.GetInstancesOutput, error)
	GetInstancesAsync(ctx workflow.Context, input *lightsail.GetInstancesInput) *LightsailGetInstancesFuture

	GetKeyPair(ctx workflow.Context, input *lightsail.GetKeyPairInput) (*lightsail.GetKeyPairOutput, error)
	GetKeyPairAsync(ctx workflow.Context, input *lightsail.GetKeyPairInput) *LightsailGetKeyPairFuture

	GetKeyPairs(ctx workflow.Context, input *lightsail.GetKeyPairsInput) (*lightsail.GetKeyPairsOutput, error)
	GetKeyPairsAsync(ctx workflow.Context, input *lightsail.GetKeyPairsInput) *LightsailGetKeyPairsFuture

	GetLoadBalancer(ctx workflow.Context, input *lightsail.GetLoadBalancerInput) (*lightsail.GetLoadBalancerOutput, error)
	GetLoadBalancerAsync(ctx workflow.Context, input *lightsail.GetLoadBalancerInput) *LightsailGetLoadBalancerFuture

	GetLoadBalancerMetricData(ctx workflow.Context, input *lightsail.GetLoadBalancerMetricDataInput) (*lightsail.GetLoadBalancerMetricDataOutput, error)
	GetLoadBalancerMetricDataAsync(ctx workflow.Context, input *lightsail.GetLoadBalancerMetricDataInput) *LightsailGetLoadBalancerMetricDataFuture

	GetLoadBalancerTlsCertificates(ctx workflow.Context, input *lightsail.GetLoadBalancerTlsCertificatesInput) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error)
	GetLoadBalancerTlsCertificatesAsync(ctx workflow.Context, input *lightsail.GetLoadBalancerTlsCertificatesInput) *LightsailGetLoadBalancerTlsCertificatesFuture

	GetLoadBalancers(ctx workflow.Context, input *lightsail.GetLoadBalancersInput) (*lightsail.GetLoadBalancersOutput, error)
	GetLoadBalancersAsync(ctx workflow.Context, input *lightsail.GetLoadBalancersInput) *LightsailGetLoadBalancersFuture

	GetOperation(ctx workflow.Context, input *lightsail.GetOperationInput) (*lightsail.GetOperationOutput, error)
	GetOperationAsync(ctx workflow.Context, input *lightsail.GetOperationInput) *LightsailGetOperationFuture

	GetOperations(ctx workflow.Context, input *lightsail.GetOperationsInput) (*lightsail.GetOperationsOutput, error)
	GetOperationsAsync(ctx workflow.Context, input *lightsail.GetOperationsInput) *LightsailGetOperationsFuture

	GetOperationsForResource(ctx workflow.Context, input *lightsail.GetOperationsForResourceInput) (*lightsail.GetOperationsForResourceOutput, error)
	GetOperationsForResourceAsync(ctx workflow.Context, input *lightsail.GetOperationsForResourceInput) *LightsailGetOperationsForResourceFuture

	GetRegions(ctx workflow.Context, input *lightsail.GetRegionsInput) (*lightsail.GetRegionsOutput, error)
	GetRegionsAsync(ctx workflow.Context, input *lightsail.GetRegionsInput) *LightsailGetRegionsFuture

	GetRelationalDatabase(ctx workflow.Context, input *lightsail.GetRelationalDatabaseInput) (*lightsail.GetRelationalDatabaseOutput, error)
	GetRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseInput) *LightsailGetRelationalDatabaseFuture

	GetRelationalDatabaseBlueprints(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBlueprintsInput) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error)
	GetRelationalDatabaseBlueprintsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBlueprintsInput) *LightsailGetRelationalDatabaseBlueprintsFuture

	GetRelationalDatabaseBundles(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBundlesInput) (*lightsail.GetRelationalDatabaseBundlesOutput, error)
	GetRelationalDatabaseBundlesAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBundlesInput) *LightsailGetRelationalDatabaseBundlesFuture

	GetRelationalDatabaseEvents(ctx workflow.Context, input *lightsail.GetRelationalDatabaseEventsInput) (*lightsail.GetRelationalDatabaseEventsOutput, error)
	GetRelationalDatabaseEventsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseEventsInput) *LightsailGetRelationalDatabaseEventsFuture

	GetRelationalDatabaseLogEvents(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogEventsInput) (*lightsail.GetRelationalDatabaseLogEventsOutput, error)
	GetRelationalDatabaseLogEventsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogEventsInput) *LightsailGetRelationalDatabaseLogEventsFuture

	GetRelationalDatabaseLogStreams(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogStreamsInput) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error)
	GetRelationalDatabaseLogStreamsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogStreamsInput) *LightsailGetRelationalDatabaseLogStreamsFuture

	GetRelationalDatabaseMasterUserPassword(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMasterUserPasswordInput) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error)
	GetRelationalDatabaseMasterUserPasswordAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMasterUserPasswordInput) *LightsailGetRelationalDatabaseMasterUserPasswordFuture

	GetRelationalDatabaseMetricData(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMetricDataInput) (*lightsail.GetRelationalDatabaseMetricDataOutput, error)
	GetRelationalDatabaseMetricDataAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMetricDataInput) *LightsailGetRelationalDatabaseMetricDataFuture

	GetRelationalDatabaseParameters(ctx workflow.Context, input *lightsail.GetRelationalDatabaseParametersInput) (*lightsail.GetRelationalDatabaseParametersOutput, error)
	GetRelationalDatabaseParametersAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseParametersInput) *LightsailGetRelationalDatabaseParametersFuture

	GetRelationalDatabaseSnapshot(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotInput) (*lightsail.GetRelationalDatabaseSnapshotOutput, error)
	GetRelationalDatabaseSnapshotAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotInput) *LightsailGetRelationalDatabaseSnapshotFuture

	GetRelationalDatabaseSnapshots(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotsInput) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error)
	GetRelationalDatabaseSnapshotsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotsInput) *LightsailGetRelationalDatabaseSnapshotsFuture

	GetRelationalDatabases(ctx workflow.Context, input *lightsail.GetRelationalDatabasesInput) (*lightsail.GetRelationalDatabasesOutput, error)
	GetRelationalDatabasesAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabasesInput) *LightsailGetRelationalDatabasesFuture

	GetStaticIp(ctx workflow.Context, input *lightsail.GetStaticIpInput) (*lightsail.GetStaticIpOutput, error)
	GetStaticIpAsync(ctx workflow.Context, input *lightsail.GetStaticIpInput) *LightsailGetStaticIpFuture

	GetStaticIps(ctx workflow.Context, input *lightsail.GetStaticIpsInput) (*lightsail.GetStaticIpsOutput, error)
	GetStaticIpsAsync(ctx workflow.Context, input *lightsail.GetStaticIpsInput) *LightsailGetStaticIpsFuture

	ImportKeyPair(ctx workflow.Context, input *lightsail.ImportKeyPairInput) (*lightsail.ImportKeyPairOutput, error)
	ImportKeyPairAsync(ctx workflow.Context, input *lightsail.ImportKeyPairInput) *LightsailImportKeyPairFuture

	IsVpcPeered(ctx workflow.Context, input *lightsail.IsVpcPeeredInput) (*lightsail.IsVpcPeeredOutput, error)
	IsVpcPeeredAsync(ctx workflow.Context, input *lightsail.IsVpcPeeredInput) *LightsailIsVpcPeeredFuture

	OpenInstancePublicPorts(ctx workflow.Context, input *lightsail.OpenInstancePublicPortsInput) (*lightsail.OpenInstancePublicPortsOutput, error)
	OpenInstancePublicPortsAsync(ctx workflow.Context, input *lightsail.OpenInstancePublicPortsInput) *LightsailOpenInstancePublicPortsFuture

	PeerVpc(ctx workflow.Context, input *lightsail.PeerVpcInput) (*lightsail.PeerVpcOutput, error)
	PeerVpcAsync(ctx workflow.Context, input *lightsail.PeerVpcInput) *LightsailPeerVpcFuture

	PutAlarm(ctx workflow.Context, input *lightsail.PutAlarmInput) (*lightsail.PutAlarmOutput, error)
	PutAlarmAsync(ctx workflow.Context, input *lightsail.PutAlarmInput) *LightsailPutAlarmFuture

	PutInstancePublicPorts(ctx workflow.Context, input *lightsail.PutInstancePublicPortsInput) (*lightsail.PutInstancePublicPortsOutput, error)
	PutInstancePublicPortsAsync(ctx workflow.Context, input *lightsail.PutInstancePublicPortsInput) *LightsailPutInstancePublicPortsFuture

	RebootInstance(ctx workflow.Context, input *lightsail.RebootInstanceInput) (*lightsail.RebootInstanceOutput, error)
	RebootInstanceAsync(ctx workflow.Context, input *lightsail.RebootInstanceInput) *LightsailRebootInstanceFuture

	RebootRelationalDatabase(ctx workflow.Context, input *lightsail.RebootRelationalDatabaseInput) (*lightsail.RebootRelationalDatabaseOutput, error)
	RebootRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.RebootRelationalDatabaseInput) *LightsailRebootRelationalDatabaseFuture

	ReleaseStaticIp(ctx workflow.Context, input *lightsail.ReleaseStaticIpInput) (*lightsail.ReleaseStaticIpOutput, error)
	ReleaseStaticIpAsync(ctx workflow.Context, input *lightsail.ReleaseStaticIpInput) *LightsailReleaseStaticIpFuture

	ResetDistributionCache(ctx workflow.Context, input *lightsail.ResetDistributionCacheInput) (*lightsail.ResetDistributionCacheOutput, error)
	ResetDistributionCacheAsync(ctx workflow.Context, input *lightsail.ResetDistributionCacheInput) *LightsailResetDistributionCacheFuture

	SendContactMethodVerification(ctx workflow.Context, input *lightsail.SendContactMethodVerificationInput) (*lightsail.SendContactMethodVerificationOutput, error)
	SendContactMethodVerificationAsync(ctx workflow.Context, input *lightsail.SendContactMethodVerificationInput) *LightsailSendContactMethodVerificationFuture

	StartInstance(ctx workflow.Context, input *lightsail.StartInstanceInput) (*lightsail.StartInstanceOutput, error)
	StartInstanceAsync(ctx workflow.Context, input *lightsail.StartInstanceInput) *LightsailStartInstanceFuture

	StartRelationalDatabase(ctx workflow.Context, input *lightsail.StartRelationalDatabaseInput) (*lightsail.StartRelationalDatabaseOutput, error)
	StartRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.StartRelationalDatabaseInput) *LightsailStartRelationalDatabaseFuture

	StopInstance(ctx workflow.Context, input *lightsail.StopInstanceInput) (*lightsail.StopInstanceOutput, error)
	StopInstanceAsync(ctx workflow.Context, input *lightsail.StopInstanceInput) *LightsailStopInstanceFuture

	StopRelationalDatabase(ctx workflow.Context, input *lightsail.StopRelationalDatabaseInput) (*lightsail.StopRelationalDatabaseOutput, error)
	StopRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.StopRelationalDatabaseInput) *LightsailStopRelationalDatabaseFuture

	TagResource(ctx workflow.Context, input *lightsail.TagResourceInput) (*lightsail.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *lightsail.TagResourceInput) *LightsailTagResourceFuture

	TestAlarm(ctx workflow.Context, input *lightsail.TestAlarmInput) (*lightsail.TestAlarmOutput, error)
	TestAlarmAsync(ctx workflow.Context, input *lightsail.TestAlarmInput) *LightsailTestAlarmFuture

	UnpeerVpc(ctx workflow.Context, input *lightsail.UnpeerVpcInput) (*lightsail.UnpeerVpcOutput, error)
	UnpeerVpcAsync(ctx workflow.Context, input *lightsail.UnpeerVpcInput) *LightsailUnpeerVpcFuture

	UntagResource(ctx workflow.Context, input *lightsail.UntagResourceInput) (*lightsail.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *lightsail.UntagResourceInput) *LightsailUntagResourceFuture

	UpdateDistribution(ctx workflow.Context, input *lightsail.UpdateDistributionInput) (*lightsail.UpdateDistributionOutput, error)
	UpdateDistributionAsync(ctx workflow.Context, input *lightsail.UpdateDistributionInput) *LightsailUpdateDistributionFuture

	UpdateDistributionBundle(ctx workflow.Context, input *lightsail.UpdateDistributionBundleInput) (*lightsail.UpdateDistributionBundleOutput, error)
	UpdateDistributionBundleAsync(ctx workflow.Context, input *lightsail.UpdateDistributionBundleInput) *LightsailUpdateDistributionBundleFuture

	UpdateDomainEntry(ctx workflow.Context, input *lightsail.UpdateDomainEntryInput) (*lightsail.UpdateDomainEntryOutput, error)
	UpdateDomainEntryAsync(ctx workflow.Context, input *lightsail.UpdateDomainEntryInput) *LightsailUpdateDomainEntryFuture

	UpdateLoadBalancerAttribute(ctx workflow.Context, input *lightsail.UpdateLoadBalancerAttributeInput) (*lightsail.UpdateLoadBalancerAttributeOutput, error)
	UpdateLoadBalancerAttributeAsync(ctx workflow.Context, input *lightsail.UpdateLoadBalancerAttributeInput) *LightsailUpdateLoadBalancerAttributeFuture

	UpdateRelationalDatabase(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseInput) (*lightsail.UpdateRelationalDatabaseOutput, error)
	UpdateRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseInput) *LightsailUpdateRelationalDatabaseFuture

	UpdateRelationalDatabaseParameters(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseParametersInput) (*lightsail.UpdateRelationalDatabaseParametersOutput, error)
	UpdateRelationalDatabaseParametersAsync(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseParametersInput) *LightsailUpdateRelationalDatabaseParametersFuture
}

type LightsailStub struct{}

func NewLightsailStub() LightsailClient {
	return &LightsailStub{}
}

type LightsailAllocateStaticIpFuture struct {
	Future workflow.Future
}

func (r *LightsailAllocateStaticIpFuture) Get(ctx workflow.Context) (*lightsail.AllocateStaticIpOutput, error) {
	var output lightsail.AllocateStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailAttachCertificateToDistributionFuture struct {
	Future workflow.Future
}

func (r *LightsailAttachCertificateToDistributionFuture) Get(ctx workflow.Context) (*lightsail.AttachCertificateToDistributionOutput, error) {
	var output lightsail.AttachCertificateToDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailAttachDiskFuture struct {
	Future workflow.Future
}

func (r *LightsailAttachDiskFuture) Get(ctx workflow.Context) (*lightsail.AttachDiskOutput, error) {
	var output lightsail.AttachDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailAttachInstancesToLoadBalancerFuture struct {
	Future workflow.Future
}

func (r *LightsailAttachInstancesToLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	var output lightsail.AttachInstancesToLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailAttachLoadBalancerTlsCertificateFuture struct {
	Future workflow.Future
}

func (r *LightsailAttachLoadBalancerTlsCertificateFuture) Get(ctx workflow.Context) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.AttachLoadBalancerTlsCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailAttachStaticIpFuture struct {
	Future workflow.Future
}

func (r *LightsailAttachStaticIpFuture) Get(ctx workflow.Context) (*lightsail.AttachStaticIpOutput, error) {
	var output lightsail.AttachStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCloseInstancePublicPortsFuture struct {
	Future workflow.Future
}

func (r *LightsailCloseInstancePublicPortsFuture) Get(ctx workflow.Context) (*lightsail.CloseInstancePublicPortsOutput, error) {
	var output lightsail.CloseInstancePublicPortsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCopySnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailCopySnapshotFuture) Get(ctx workflow.Context) (*lightsail.CopySnapshotOutput, error) {
	var output lightsail.CopySnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateCertificateFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateCertificateFuture) Get(ctx workflow.Context) (*lightsail.CreateCertificateOutput, error) {
	var output lightsail.CreateCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateCloudFormationStackFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateCloudFormationStackFuture) Get(ctx workflow.Context) (*lightsail.CreateCloudFormationStackOutput, error) {
	var output lightsail.CreateCloudFormationStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateContactMethodFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateContactMethodFuture) Get(ctx workflow.Context) (*lightsail.CreateContactMethodOutput, error) {
	var output lightsail.CreateContactMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateDiskFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateDiskFuture) Get(ctx workflow.Context) (*lightsail.CreateDiskOutput, error) {
	var output lightsail.CreateDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateDiskFromSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateDiskFromSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	var output lightsail.CreateDiskFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateDiskSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateDiskSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateDiskSnapshotOutput, error) {
	var output lightsail.CreateDiskSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateDistributionFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateDistributionFuture) Get(ctx workflow.Context) (*lightsail.CreateDistributionOutput, error) {
	var output lightsail.CreateDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateDomainFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateDomainFuture) Get(ctx workflow.Context) (*lightsail.CreateDomainOutput, error) {
	var output lightsail.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateDomainEntryFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateDomainEntryFuture) Get(ctx workflow.Context) (*lightsail.CreateDomainEntryOutput, error) {
	var output lightsail.CreateDomainEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateInstanceSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateInstanceSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateInstanceSnapshotOutput, error) {
	var output lightsail.CreateInstanceSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateInstancesFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateInstancesFuture) Get(ctx workflow.Context) (*lightsail.CreateInstancesOutput, error) {
	var output lightsail.CreateInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateInstancesFromSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateInstancesFromSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	var output lightsail.CreateInstancesFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateKeyPairFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateKeyPairFuture) Get(ctx workflow.Context) (*lightsail.CreateKeyPairOutput, error) {
	var output lightsail.CreateKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateLoadBalancerFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.CreateLoadBalancerOutput, error) {
	var output lightsail.CreateLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateLoadBalancerTlsCertificateFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateLoadBalancerTlsCertificateFuture) Get(ctx workflow.Context) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.CreateLoadBalancerTlsCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateRelationalDatabaseFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.CreateRelationalDatabaseOutput, error) {
	var output lightsail.CreateRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateRelationalDatabaseFromSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateRelationalDatabaseFromSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error) {
	var output lightsail.CreateRelationalDatabaseFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateRelationalDatabaseSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailCreateRelationalDatabaseSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.CreateRelationalDatabaseSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteAlarmFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteAlarmFuture) Get(ctx workflow.Context) (*lightsail.DeleteAlarmOutput, error) {
	var output lightsail.DeleteAlarmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteAutoSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteAutoSnapshotFuture) Get(ctx workflow.Context) (*lightsail.DeleteAutoSnapshotOutput, error) {
	var output lightsail.DeleteAutoSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteCertificateFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteCertificateFuture) Get(ctx workflow.Context) (*lightsail.DeleteCertificateOutput, error) {
	var output lightsail.DeleteCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteContactMethodFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteContactMethodFuture) Get(ctx workflow.Context) (*lightsail.DeleteContactMethodOutput, error) {
	var output lightsail.DeleteContactMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteDiskFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteDiskFuture) Get(ctx workflow.Context) (*lightsail.DeleteDiskOutput, error) {
	var output lightsail.DeleteDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteDiskSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteDiskSnapshotFuture) Get(ctx workflow.Context) (*lightsail.DeleteDiskSnapshotOutput, error) {
	var output lightsail.DeleteDiskSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteDistributionFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteDistributionFuture) Get(ctx workflow.Context) (*lightsail.DeleteDistributionOutput, error) {
	var output lightsail.DeleteDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteDomainFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteDomainFuture) Get(ctx workflow.Context) (*lightsail.DeleteDomainOutput, error) {
	var output lightsail.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteDomainEntryFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteDomainEntryFuture) Get(ctx workflow.Context) (*lightsail.DeleteDomainEntryOutput, error) {
	var output lightsail.DeleteDomainEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteInstanceFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteInstanceFuture) Get(ctx workflow.Context) (*lightsail.DeleteInstanceOutput, error) {
	var output lightsail.DeleteInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteInstanceSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteInstanceSnapshotFuture) Get(ctx workflow.Context) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	var output lightsail.DeleteInstanceSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteKeyPairFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteKeyPairFuture) Get(ctx workflow.Context) (*lightsail.DeleteKeyPairOutput, error) {
	var output lightsail.DeleteKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteKnownHostKeysFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteKnownHostKeysFuture) Get(ctx workflow.Context) (*lightsail.DeleteKnownHostKeysOutput, error) {
	var output lightsail.DeleteKnownHostKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteLoadBalancerFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.DeleteLoadBalancerOutput, error) {
	var output lightsail.DeleteLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteLoadBalancerTlsCertificateFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteLoadBalancerTlsCertificateFuture) Get(ctx workflow.Context) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.DeleteLoadBalancerTlsCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteRelationalDatabaseFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.DeleteRelationalDatabaseOutput, error) {
	var output lightsail.DeleteRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteRelationalDatabaseSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailDeleteRelationalDatabaseSnapshotFuture) Get(ctx workflow.Context) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.DeleteRelationalDatabaseSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDetachCertificateFromDistributionFuture struct {
	Future workflow.Future
}

func (r *LightsailDetachCertificateFromDistributionFuture) Get(ctx workflow.Context) (*lightsail.DetachCertificateFromDistributionOutput, error) {
	var output lightsail.DetachCertificateFromDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDetachDiskFuture struct {
	Future workflow.Future
}

func (r *LightsailDetachDiskFuture) Get(ctx workflow.Context) (*lightsail.DetachDiskOutput, error) {
	var output lightsail.DetachDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDetachInstancesFromLoadBalancerFuture struct {
	Future workflow.Future
}

func (r *LightsailDetachInstancesFromLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	var output lightsail.DetachInstancesFromLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDetachStaticIpFuture struct {
	Future workflow.Future
}

func (r *LightsailDetachStaticIpFuture) Get(ctx workflow.Context) (*lightsail.DetachStaticIpOutput, error) {
	var output lightsail.DetachStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDisableAddOnFuture struct {
	Future workflow.Future
}

func (r *LightsailDisableAddOnFuture) Get(ctx workflow.Context) (*lightsail.DisableAddOnOutput, error) {
	var output lightsail.DisableAddOnOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDownloadDefaultKeyPairFuture struct {
	Future workflow.Future
}

func (r *LightsailDownloadDefaultKeyPairFuture) Get(ctx workflow.Context) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	var output lightsail.DownloadDefaultKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailEnableAddOnFuture struct {
	Future workflow.Future
}

func (r *LightsailEnableAddOnFuture) Get(ctx workflow.Context) (*lightsail.EnableAddOnOutput, error) {
	var output lightsail.EnableAddOnOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailExportSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailExportSnapshotFuture) Get(ctx workflow.Context) (*lightsail.ExportSnapshotOutput, error) {
	var output lightsail.ExportSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetActiveNamesFuture struct {
	Future workflow.Future
}

func (r *LightsailGetActiveNamesFuture) Get(ctx workflow.Context) (*lightsail.GetActiveNamesOutput, error) {
	var output lightsail.GetActiveNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetAlarmsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetAlarmsFuture) Get(ctx workflow.Context) (*lightsail.GetAlarmsOutput, error) {
	var output lightsail.GetAlarmsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetAutoSnapshotsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetAutoSnapshotsFuture) Get(ctx workflow.Context) (*lightsail.GetAutoSnapshotsOutput, error) {
	var output lightsail.GetAutoSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetBlueprintsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetBlueprintsFuture) Get(ctx workflow.Context) (*lightsail.GetBlueprintsOutput, error) {
	var output lightsail.GetBlueprintsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetBundlesFuture struct {
	Future workflow.Future
}

func (r *LightsailGetBundlesFuture) Get(ctx workflow.Context) (*lightsail.GetBundlesOutput, error) {
	var output lightsail.GetBundlesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetCertificatesFuture struct {
	Future workflow.Future
}

func (r *LightsailGetCertificatesFuture) Get(ctx workflow.Context) (*lightsail.GetCertificatesOutput, error) {
	var output lightsail.GetCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetCloudFormationStackRecordsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetCloudFormationStackRecordsFuture) Get(ctx workflow.Context) (*lightsail.GetCloudFormationStackRecordsOutput, error) {
	var output lightsail.GetCloudFormationStackRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetContactMethodsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetContactMethodsFuture) Get(ctx workflow.Context) (*lightsail.GetContactMethodsOutput, error) {
	var output lightsail.GetContactMethodsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDiskFuture struct {
	Future workflow.Future
}

func (r *LightsailGetDiskFuture) Get(ctx workflow.Context) (*lightsail.GetDiskOutput, error) {
	var output lightsail.GetDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDiskSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailGetDiskSnapshotFuture) Get(ctx workflow.Context) (*lightsail.GetDiskSnapshotOutput, error) {
	var output lightsail.GetDiskSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDiskSnapshotsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetDiskSnapshotsFuture) Get(ctx workflow.Context) (*lightsail.GetDiskSnapshotsOutput, error) {
	var output lightsail.GetDiskSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDisksFuture struct {
	Future workflow.Future
}

func (r *LightsailGetDisksFuture) Get(ctx workflow.Context) (*lightsail.GetDisksOutput, error) {
	var output lightsail.GetDisksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDistributionBundlesFuture struct {
	Future workflow.Future
}

func (r *LightsailGetDistributionBundlesFuture) Get(ctx workflow.Context) (*lightsail.GetDistributionBundlesOutput, error) {
	var output lightsail.GetDistributionBundlesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDistributionLatestCacheResetFuture struct {
	Future workflow.Future
}

func (r *LightsailGetDistributionLatestCacheResetFuture) Get(ctx workflow.Context) (*lightsail.GetDistributionLatestCacheResetOutput, error) {
	var output lightsail.GetDistributionLatestCacheResetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDistributionMetricDataFuture struct {
	Future workflow.Future
}

func (r *LightsailGetDistributionMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetDistributionMetricDataOutput, error) {
	var output lightsail.GetDistributionMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDistributionsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetDistributionsFuture) Get(ctx workflow.Context) (*lightsail.GetDistributionsOutput, error) {
	var output lightsail.GetDistributionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDomainFuture struct {
	Future workflow.Future
}

func (r *LightsailGetDomainFuture) Get(ctx workflow.Context) (*lightsail.GetDomainOutput, error) {
	var output lightsail.GetDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDomainsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetDomainsFuture) Get(ctx workflow.Context) (*lightsail.GetDomainsOutput, error) {
	var output lightsail.GetDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetExportSnapshotRecordsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetExportSnapshotRecordsFuture) Get(ctx workflow.Context) (*lightsail.GetExportSnapshotRecordsOutput, error) {
	var output lightsail.GetExportSnapshotRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstanceFuture struct {
	Future workflow.Future
}

func (r *LightsailGetInstanceFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceOutput, error) {
	var output lightsail.GetInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstanceAccessDetailsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetInstanceAccessDetailsFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	var output lightsail.GetInstanceAccessDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstanceMetricDataFuture struct {
	Future workflow.Future
}

func (r *LightsailGetInstanceMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceMetricDataOutput, error) {
	var output lightsail.GetInstanceMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstancePortStatesFuture struct {
	Future workflow.Future
}

func (r *LightsailGetInstancePortStatesFuture) Get(ctx workflow.Context) (*lightsail.GetInstancePortStatesOutput, error) {
	var output lightsail.GetInstancePortStatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstanceSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailGetInstanceSnapshotFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceSnapshotOutput, error) {
	var output lightsail.GetInstanceSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstanceSnapshotsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetInstanceSnapshotsFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceSnapshotsOutput, error) {
	var output lightsail.GetInstanceSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstanceStateFuture struct {
	Future workflow.Future
}

func (r *LightsailGetInstanceStateFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceStateOutput, error) {
	var output lightsail.GetInstanceStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstancesFuture struct {
	Future workflow.Future
}

func (r *LightsailGetInstancesFuture) Get(ctx workflow.Context) (*lightsail.GetInstancesOutput, error) {
	var output lightsail.GetInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetKeyPairFuture struct {
	Future workflow.Future
}

func (r *LightsailGetKeyPairFuture) Get(ctx workflow.Context) (*lightsail.GetKeyPairOutput, error) {
	var output lightsail.GetKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetKeyPairsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetKeyPairsFuture) Get(ctx workflow.Context) (*lightsail.GetKeyPairsOutput, error) {
	var output lightsail.GetKeyPairsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetLoadBalancerFuture struct {
	Future workflow.Future
}

func (r *LightsailGetLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.GetLoadBalancerOutput, error) {
	var output lightsail.GetLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetLoadBalancerMetricDataFuture struct {
	Future workflow.Future
}

func (r *LightsailGetLoadBalancerMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	var output lightsail.GetLoadBalancerMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetLoadBalancerTlsCertificatesFuture struct {
	Future workflow.Future
}

func (r *LightsailGetLoadBalancerTlsCertificatesFuture) Get(ctx workflow.Context) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	var output lightsail.GetLoadBalancerTlsCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetLoadBalancersFuture struct {
	Future workflow.Future
}

func (r *LightsailGetLoadBalancersFuture) Get(ctx workflow.Context) (*lightsail.GetLoadBalancersOutput, error) {
	var output lightsail.GetLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetOperationFuture struct {
	Future workflow.Future
}

func (r *LightsailGetOperationFuture) Get(ctx workflow.Context) (*lightsail.GetOperationOutput, error) {
	var output lightsail.GetOperationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetOperationsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetOperationsFuture) Get(ctx workflow.Context) (*lightsail.GetOperationsOutput, error) {
	var output lightsail.GetOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetOperationsForResourceFuture struct {
	Future workflow.Future
}

func (r *LightsailGetOperationsForResourceFuture) Get(ctx workflow.Context) (*lightsail.GetOperationsForResourceOutput, error) {
	var output lightsail.GetOperationsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRegionsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRegionsFuture) Get(ctx workflow.Context) (*lightsail.GetRegionsOutput, error) {
	var output lightsail.GetRegionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseOutput, error) {
	var output lightsail.GetRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseBlueprintsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseBlueprintsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error) {
	var output lightsail.GetRelationalDatabaseBlueprintsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseBundlesFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseBundlesFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseBundlesOutput, error) {
	var output lightsail.GetRelationalDatabaseBundlesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseEventsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseEventsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseEventsOutput, error) {
	var output lightsail.GetRelationalDatabaseEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseLogEventsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseLogEventsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseLogEventsOutput, error) {
	var output lightsail.GetRelationalDatabaseLogEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseLogStreamsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseLogStreamsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error) {
	var output lightsail.GetRelationalDatabaseLogStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseMasterUserPasswordFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseMasterUserPasswordFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error) {
	var output lightsail.GetRelationalDatabaseMasterUserPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseMetricDataFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseMetricDataOutput, error) {
	var output lightsail.GetRelationalDatabaseMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseParametersFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseParametersFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseParametersOutput, error) {
	var output lightsail.GetRelationalDatabaseParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseSnapshotFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseSnapshotFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.GetRelationalDatabaseSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseSnapshotsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseSnapshotsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error) {
	var output lightsail.GetRelationalDatabaseSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabasesFuture struct {
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabasesFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabasesOutput, error) {
	var output lightsail.GetRelationalDatabasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetStaticIpFuture struct {
	Future workflow.Future
}

func (r *LightsailGetStaticIpFuture) Get(ctx workflow.Context) (*lightsail.GetStaticIpOutput, error) {
	var output lightsail.GetStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetStaticIpsFuture struct {
	Future workflow.Future
}

func (r *LightsailGetStaticIpsFuture) Get(ctx workflow.Context) (*lightsail.GetStaticIpsOutput, error) {
	var output lightsail.GetStaticIpsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailImportKeyPairFuture struct {
	Future workflow.Future
}

func (r *LightsailImportKeyPairFuture) Get(ctx workflow.Context) (*lightsail.ImportKeyPairOutput, error) {
	var output lightsail.ImportKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailIsVpcPeeredFuture struct {
	Future workflow.Future
}

func (r *LightsailIsVpcPeeredFuture) Get(ctx workflow.Context) (*lightsail.IsVpcPeeredOutput, error) {
	var output lightsail.IsVpcPeeredOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailOpenInstancePublicPortsFuture struct {
	Future workflow.Future
}

func (r *LightsailOpenInstancePublicPortsFuture) Get(ctx workflow.Context) (*lightsail.OpenInstancePublicPortsOutput, error) {
	var output lightsail.OpenInstancePublicPortsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailPeerVpcFuture struct {
	Future workflow.Future
}

func (r *LightsailPeerVpcFuture) Get(ctx workflow.Context) (*lightsail.PeerVpcOutput, error) {
	var output lightsail.PeerVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailPutAlarmFuture struct {
	Future workflow.Future
}

func (r *LightsailPutAlarmFuture) Get(ctx workflow.Context) (*lightsail.PutAlarmOutput, error) {
	var output lightsail.PutAlarmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailPutInstancePublicPortsFuture struct {
	Future workflow.Future
}

func (r *LightsailPutInstancePublicPortsFuture) Get(ctx workflow.Context) (*lightsail.PutInstancePublicPortsOutput, error) {
	var output lightsail.PutInstancePublicPortsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailRebootInstanceFuture struct {
	Future workflow.Future
}

func (r *LightsailRebootInstanceFuture) Get(ctx workflow.Context) (*lightsail.RebootInstanceOutput, error) {
	var output lightsail.RebootInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailRebootRelationalDatabaseFuture struct {
	Future workflow.Future
}

func (r *LightsailRebootRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.RebootRelationalDatabaseOutput, error) {
	var output lightsail.RebootRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailReleaseStaticIpFuture struct {
	Future workflow.Future
}

func (r *LightsailReleaseStaticIpFuture) Get(ctx workflow.Context) (*lightsail.ReleaseStaticIpOutput, error) {
	var output lightsail.ReleaseStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailResetDistributionCacheFuture struct {
	Future workflow.Future
}

func (r *LightsailResetDistributionCacheFuture) Get(ctx workflow.Context) (*lightsail.ResetDistributionCacheOutput, error) {
	var output lightsail.ResetDistributionCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailSendContactMethodVerificationFuture struct {
	Future workflow.Future
}

func (r *LightsailSendContactMethodVerificationFuture) Get(ctx workflow.Context) (*lightsail.SendContactMethodVerificationOutput, error) {
	var output lightsail.SendContactMethodVerificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailStartInstanceFuture struct {
	Future workflow.Future
}

func (r *LightsailStartInstanceFuture) Get(ctx workflow.Context) (*lightsail.StartInstanceOutput, error) {
	var output lightsail.StartInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailStartRelationalDatabaseFuture struct {
	Future workflow.Future
}

func (r *LightsailStartRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.StartRelationalDatabaseOutput, error) {
	var output lightsail.StartRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailStopInstanceFuture struct {
	Future workflow.Future
}

func (r *LightsailStopInstanceFuture) Get(ctx workflow.Context) (*lightsail.StopInstanceOutput, error) {
	var output lightsail.StopInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailStopRelationalDatabaseFuture struct {
	Future workflow.Future
}

func (r *LightsailStopRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.StopRelationalDatabaseOutput, error) {
	var output lightsail.StopRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailTagResourceFuture struct {
	Future workflow.Future
}

func (r *LightsailTagResourceFuture) Get(ctx workflow.Context) (*lightsail.TagResourceOutput, error) {
	var output lightsail.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailTestAlarmFuture struct {
	Future workflow.Future
}

func (r *LightsailTestAlarmFuture) Get(ctx workflow.Context) (*lightsail.TestAlarmOutput, error) {
	var output lightsail.TestAlarmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUnpeerVpcFuture struct {
	Future workflow.Future
}

func (r *LightsailUnpeerVpcFuture) Get(ctx workflow.Context) (*lightsail.UnpeerVpcOutput, error) {
	var output lightsail.UnpeerVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUntagResourceFuture struct {
	Future workflow.Future
}

func (r *LightsailUntagResourceFuture) Get(ctx workflow.Context) (*lightsail.UntagResourceOutput, error) {
	var output lightsail.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUpdateDistributionFuture struct {
	Future workflow.Future
}

func (r *LightsailUpdateDistributionFuture) Get(ctx workflow.Context) (*lightsail.UpdateDistributionOutput, error) {
	var output lightsail.UpdateDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUpdateDistributionBundleFuture struct {
	Future workflow.Future
}

func (r *LightsailUpdateDistributionBundleFuture) Get(ctx workflow.Context) (*lightsail.UpdateDistributionBundleOutput, error) {
	var output lightsail.UpdateDistributionBundleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUpdateDomainEntryFuture struct {
	Future workflow.Future
}

func (r *LightsailUpdateDomainEntryFuture) Get(ctx workflow.Context) (*lightsail.UpdateDomainEntryOutput, error) {
	var output lightsail.UpdateDomainEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUpdateLoadBalancerAttributeFuture struct {
	Future workflow.Future
}

func (r *LightsailUpdateLoadBalancerAttributeFuture) Get(ctx workflow.Context) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	var output lightsail.UpdateLoadBalancerAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUpdateRelationalDatabaseFuture struct {
	Future workflow.Future
}

func (r *LightsailUpdateRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.UpdateRelationalDatabaseOutput, error) {
	var output lightsail.UpdateRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUpdateRelationalDatabaseParametersFuture struct {
	Future workflow.Future
}

func (r *LightsailUpdateRelationalDatabaseParametersFuture) Get(ctx workflow.Context) (*lightsail.UpdateRelationalDatabaseParametersOutput, error) {
	var output lightsail.UpdateRelationalDatabaseParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) AllocateStaticIp(ctx workflow.Context, input *lightsail.AllocateStaticIpInput) (*lightsail.AllocateStaticIpOutput, error) {
	var output lightsail.AllocateStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.AllocateStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) AllocateStaticIpAsync(ctx workflow.Context, input *lightsail.AllocateStaticIpInput) *LightsailAllocateStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.AllocateStaticIp", input)
	return &LightsailAllocateStaticIpFuture{Future: future}
}

func (a *LightsailStub) AttachCertificateToDistribution(ctx workflow.Context, input *lightsail.AttachCertificateToDistributionInput) (*lightsail.AttachCertificateToDistributionOutput, error) {
	var output lightsail.AttachCertificateToDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.AttachCertificateToDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) AttachCertificateToDistributionAsync(ctx workflow.Context, input *lightsail.AttachCertificateToDistributionInput) *LightsailAttachCertificateToDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.AttachCertificateToDistribution", input)
	return &LightsailAttachCertificateToDistributionFuture{Future: future}
}

func (a *LightsailStub) AttachDisk(ctx workflow.Context, input *lightsail.AttachDiskInput) (*lightsail.AttachDiskOutput, error) {
	var output lightsail.AttachDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.AttachDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) AttachDiskAsync(ctx workflow.Context, input *lightsail.AttachDiskInput) *LightsailAttachDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.AttachDisk", input)
	return &LightsailAttachDiskFuture{Future: future}
}

func (a *LightsailStub) AttachInstancesToLoadBalancer(ctx workflow.Context, input *lightsail.AttachInstancesToLoadBalancerInput) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	var output lightsail.AttachInstancesToLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.AttachInstancesToLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) AttachInstancesToLoadBalancerAsync(ctx workflow.Context, input *lightsail.AttachInstancesToLoadBalancerInput) *LightsailAttachInstancesToLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.AttachInstancesToLoadBalancer", input)
	return &LightsailAttachInstancesToLoadBalancerFuture{Future: future}
}

func (a *LightsailStub) AttachLoadBalancerTlsCertificate(ctx workflow.Context, input *lightsail.AttachLoadBalancerTlsCertificateInput) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.AttachLoadBalancerTlsCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.AttachLoadBalancerTlsCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) AttachLoadBalancerTlsCertificateAsync(ctx workflow.Context, input *lightsail.AttachLoadBalancerTlsCertificateInput) *LightsailAttachLoadBalancerTlsCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.AttachLoadBalancerTlsCertificate", input)
	return &LightsailAttachLoadBalancerTlsCertificateFuture{Future: future}
}

func (a *LightsailStub) AttachStaticIp(ctx workflow.Context, input *lightsail.AttachStaticIpInput) (*lightsail.AttachStaticIpOutput, error) {
	var output lightsail.AttachStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.AttachStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) AttachStaticIpAsync(ctx workflow.Context, input *lightsail.AttachStaticIpInput) *LightsailAttachStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.AttachStaticIp", input)
	return &LightsailAttachStaticIpFuture{Future: future}
}

func (a *LightsailStub) CloseInstancePublicPorts(ctx workflow.Context, input *lightsail.CloseInstancePublicPortsInput) (*lightsail.CloseInstancePublicPortsOutput, error) {
	var output lightsail.CloseInstancePublicPortsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CloseInstancePublicPorts", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CloseInstancePublicPortsAsync(ctx workflow.Context, input *lightsail.CloseInstancePublicPortsInput) *LightsailCloseInstancePublicPortsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CloseInstancePublicPorts", input)
	return &LightsailCloseInstancePublicPortsFuture{Future: future}
}

func (a *LightsailStub) CopySnapshot(ctx workflow.Context, input *lightsail.CopySnapshotInput) (*lightsail.CopySnapshotOutput, error) {
	var output lightsail.CopySnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CopySnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CopySnapshotAsync(ctx workflow.Context, input *lightsail.CopySnapshotInput) *LightsailCopySnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CopySnapshot", input)
	return &LightsailCopySnapshotFuture{Future: future}
}

func (a *LightsailStub) CreateCertificate(ctx workflow.Context, input *lightsail.CreateCertificateInput) (*lightsail.CreateCertificateOutput, error) {
	var output lightsail.CreateCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateCertificateAsync(ctx workflow.Context, input *lightsail.CreateCertificateInput) *LightsailCreateCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateCertificate", input)
	return &LightsailCreateCertificateFuture{Future: future}
}

func (a *LightsailStub) CreateCloudFormationStack(ctx workflow.Context, input *lightsail.CreateCloudFormationStackInput) (*lightsail.CreateCloudFormationStackOutput, error) {
	var output lightsail.CreateCloudFormationStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateCloudFormationStack", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateCloudFormationStackAsync(ctx workflow.Context, input *lightsail.CreateCloudFormationStackInput) *LightsailCreateCloudFormationStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateCloudFormationStack", input)
	return &LightsailCreateCloudFormationStackFuture{Future: future}
}

func (a *LightsailStub) CreateContactMethod(ctx workflow.Context, input *lightsail.CreateContactMethodInput) (*lightsail.CreateContactMethodOutput, error) {
	var output lightsail.CreateContactMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateContactMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateContactMethodAsync(ctx workflow.Context, input *lightsail.CreateContactMethodInput) *LightsailCreateContactMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateContactMethod", input)
	return &LightsailCreateContactMethodFuture{Future: future}
}

func (a *LightsailStub) CreateDisk(ctx workflow.Context, input *lightsail.CreateDiskInput) (*lightsail.CreateDiskOutput, error) {
	var output lightsail.CreateDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateDiskAsync(ctx workflow.Context, input *lightsail.CreateDiskInput) *LightsailCreateDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateDisk", input)
	return &LightsailCreateDiskFuture{Future: future}
}

func (a *LightsailStub) CreateDiskFromSnapshot(ctx workflow.Context, input *lightsail.CreateDiskFromSnapshotInput) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	var output lightsail.CreateDiskFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateDiskFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateDiskFromSnapshotAsync(ctx workflow.Context, input *lightsail.CreateDiskFromSnapshotInput) *LightsailCreateDiskFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateDiskFromSnapshot", input)
	return &LightsailCreateDiskFromSnapshotFuture{Future: future}
}

func (a *LightsailStub) CreateDiskSnapshot(ctx workflow.Context, input *lightsail.CreateDiskSnapshotInput) (*lightsail.CreateDiskSnapshotOutput, error) {
	var output lightsail.CreateDiskSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateDiskSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateDiskSnapshotAsync(ctx workflow.Context, input *lightsail.CreateDiskSnapshotInput) *LightsailCreateDiskSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateDiskSnapshot", input)
	return &LightsailCreateDiskSnapshotFuture{Future: future}
}

func (a *LightsailStub) CreateDistribution(ctx workflow.Context, input *lightsail.CreateDistributionInput) (*lightsail.CreateDistributionOutput, error) {
	var output lightsail.CreateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateDistributionAsync(ctx workflow.Context, input *lightsail.CreateDistributionInput) *LightsailCreateDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateDistribution", input)
	return &LightsailCreateDistributionFuture{Future: future}
}

func (a *LightsailStub) CreateDomain(ctx workflow.Context, input *lightsail.CreateDomainInput) (*lightsail.CreateDomainOutput, error) {
	var output lightsail.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateDomainAsync(ctx workflow.Context, input *lightsail.CreateDomainInput) *LightsailCreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateDomain", input)
	return &LightsailCreateDomainFuture{Future: future}
}

func (a *LightsailStub) CreateDomainEntry(ctx workflow.Context, input *lightsail.CreateDomainEntryInput) (*lightsail.CreateDomainEntryOutput, error) {
	var output lightsail.CreateDomainEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateDomainEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateDomainEntryAsync(ctx workflow.Context, input *lightsail.CreateDomainEntryInput) *LightsailCreateDomainEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateDomainEntry", input)
	return &LightsailCreateDomainEntryFuture{Future: future}
}

func (a *LightsailStub) CreateInstanceSnapshot(ctx workflow.Context, input *lightsail.CreateInstanceSnapshotInput) (*lightsail.CreateInstanceSnapshotOutput, error) {
	var output lightsail.CreateInstanceSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateInstanceSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateInstanceSnapshotAsync(ctx workflow.Context, input *lightsail.CreateInstanceSnapshotInput) *LightsailCreateInstanceSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateInstanceSnapshot", input)
	return &LightsailCreateInstanceSnapshotFuture{Future: future}
}

func (a *LightsailStub) CreateInstances(ctx workflow.Context, input *lightsail.CreateInstancesInput) (*lightsail.CreateInstancesOutput, error) {
	var output lightsail.CreateInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateInstancesAsync(ctx workflow.Context, input *lightsail.CreateInstancesInput) *LightsailCreateInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateInstances", input)
	return &LightsailCreateInstancesFuture{Future: future}
}

func (a *LightsailStub) CreateInstancesFromSnapshot(ctx workflow.Context, input *lightsail.CreateInstancesFromSnapshotInput) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	var output lightsail.CreateInstancesFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateInstancesFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateInstancesFromSnapshotAsync(ctx workflow.Context, input *lightsail.CreateInstancesFromSnapshotInput) *LightsailCreateInstancesFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateInstancesFromSnapshot", input)
	return &LightsailCreateInstancesFromSnapshotFuture{Future: future}
}

func (a *LightsailStub) CreateKeyPair(ctx workflow.Context, input *lightsail.CreateKeyPairInput) (*lightsail.CreateKeyPairOutput, error) {
	var output lightsail.CreateKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateKeyPairAsync(ctx workflow.Context, input *lightsail.CreateKeyPairInput) *LightsailCreateKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateKeyPair", input)
	return &LightsailCreateKeyPairFuture{Future: future}
}

func (a *LightsailStub) CreateLoadBalancer(ctx workflow.Context, input *lightsail.CreateLoadBalancerInput) (*lightsail.CreateLoadBalancerOutput, error) {
	var output lightsail.CreateLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateLoadBalancerAsync(ctx workflow.Context, input *lightsail.CreateLoadBalancerInput) *LightsailCreateLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateLoadBalancer", input)
	return &LightsailCreateLoadBalancerFuture{Future: future}
}

func (a *LightsailStub) CreateLoadBalancerTlsCertificate(ctx workflow.Context, input *lightsail.CreateLoadBalancerTlsCertificateInput) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.CreateLoadBalancerTlsCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateLoadBalancerTlsCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateLoadBalancerTlsCertificateAsync(ctx workflow.Context, input *lightsail.CreateLoadBalancerTlsCertificateInput) *LightsailCreateLoadBalancerTlsCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateLoadBalancerTlsCertificate", input)
	return &LightsailCreateLoadBalancerTlsCertificateFuture{Future: future}
}

func (a *LightsailStub) CreateRelationalDatabase(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseInput) (*lightsail.CreateRelationalDatabaseOutput, error) {
	var output lightsail.CreateRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseInput) *LightsailCreateRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateRelationalDatabase", input)
	return &LightsailCreateRelationalDatabaseFuture{Future: future}
}

func (a *LightsailStub) CreateRelationalDatabaseFromSnapshot(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseFromSnapshotInput) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error) {
	var output lightsail.CreateRelationalDatabaseFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateRelationalDatabaseFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateRelationalDatabaseFromSnapshotAsync(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseFromSnapshotInput) *LightsailCreateRelationalDatabaseFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateRelationalDatabaseFromSnapshot", input)
	return &LightsailCreateRelationalDatabaseFromSnapshotFuture{Future: future}
}

func (a *LightsailStub) CreateRelationalDatabaseSnapshot(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseSnapshotInput) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.CreateRelationalDatabaseSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateRelationalDatabaseSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) CreateRelationalDatabaseSnapshotAsync(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseSnapshotInput) *LightsailCreateRelationalDatabaseSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.CreateRelationalDatabaseSnapshot", input)
	return &LightsailCreateRelationalDatabaseSnapshotFuture{Future: future}
}

func (a *LightsailStub) DeleteAlarm(ctx workflow.Context, input *lightsail.DeleteAlarmInput) (*lightsail.DeleteAlarmOutput, error) {
	var output lightsail.DeleteAlarmOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteAlarm", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteAlarmAsync(ctx workflow.Context, input *lightsail.DeleteAlarmInput) *LightsailDeleteAlarmFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteAlarm", input)
	return &LightsailDeleteAlarmFuture{Future: future}
}

func (a *LightsailStub) DeleteAutoSnapshot(ctx workflow.Context, input *lightsail.DeleteAutoSnapshotInput) (*lightsail.DeleteAutoSnapshotOutput, error) {
	var output lightsail.DeleteAutoSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteAutoSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteAutoSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteAutoSnapshotInput) *LightsailDeleteAutoSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteAutoSnapshot", input)
	return &LightsailDeleteAutoSnapshotFuture{Future: future}
}

func (a *LightsailStub) DeleteCertificate(ctx workflow.Context, input *lightsail.DeleteCertificateInput) (*lightsail.DeleteCertificateOutput, error) {
	var output lightsail.DeleteCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteCertificateAsync(ctx workflow.Context, input *lightsail.DeleteCertificateInput) *LightsailDeleteCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteCertificate", input)
	return &LightsailDeleteCertificateFuture{Future: future}
}

func (a *LightsailStub) DeleteContactMethod(ctx workflow.Context, input *lightsail.DeleteContactMethodInput) (*lightsail.DeleteContactMethodOutput, error) {
	var output lightsail.DeleteContactMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteContactMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteContactMethodAsync(ctx workflow.Context, input *lightsail.DeleteContactMethodInput) *LightsailDeleteContactMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteContactMethod", input)
	return &LightsailDeleteContactMethodFuture{Future: future}
}

func (a *LightsailStub) DeleteDisk(ctx workflow.Context, input *lightsail.DeleteDiskInput) (*lightsail.DeleteDiskOutput, error) {
	var output lightsail.DeleteDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteDiskAsync(ctx workflow.Context, input *lightsail.DeleteDiskInput) *LightsailDeleteDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteDisk", input)
	return &LightsailDeleteDiskFuture{Future: future}
}

func (a *LightsailStub) DeleteDiskSnapshot(ctx workflow.Context, input *lightsail.DeleteDiskSnapshotInput) (*lightsail.DeleteDiskSnapshotOutput, error) {
	var output lightsail.DeleteDiskSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteDiskSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteDiskSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteDiskSnapshotInput) *LightsailDeleteDiskSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteDiskSnapshot", input)
	return &LightsailDeleteDiskSnapshotFuture{Future: future}
}

func (a *LightsailStub) DeleteDistribution(ctx workflow.Context, input *lightsail.DeleteDistributionInput) (*lightsail.DeleteDistributionOutput, error) {
	var output lightsail.DeleteDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteDistributionAsync(ctx workflow.Context, input *lightsail.DeleteDistributionInput) *LightsailDeleteDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteDistribution", input)
	return &LightsailDeleteDistributionFuture{Future: future}
}

func (a *LightsailStub) DeleteDomain(ctx workflow.Context, input *lightsail.DeleteDomainInput) (*lightsail.DeleteDomainOutput, error) {
	var output lightsail.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteDomainAsync(ctx workflow.Context, input *lightsail.DeleteDomainInput) *LightsailDeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteDomain", input)
	return &LightsailDeleteDomainFuture{Future: future}
}

func (a *LightsailStub) DeleteDomainEntry(ctx workflow.Context, input *lightsail.DeleteDomainEntryInput) (*lightsail.DeleteDomainEntryOutput, error) {
	var output lightsail.DeleteDomainEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteDomainEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteDomainEntryAsync(ctx workflow.Context, input *lightsail.DeleteDomainEntryInput) *LightsailDeleteDomainEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteDomainEntry", input)
	return &LightsailDeleteDomainEntryFuture{Future: future}
}

func (a *LightsailStub) DeleteInstance(ctx workflow.Context, input *lightsail.DeleteInstanceInput) (*lightsail.DeleteInstanceOutput, error) {
	var output lightsail.DeleteInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteInstanceAsync(ctx workflow.Context, input *lightsail.DeleteInstanceInput) *LightsailDeleteInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteInstance", input)
	return &LightsailDeleteInstanceFuture{Future: future}
}

func (a *LightsailStub) DeleteInstanceSnapshot(ctx workflow.Context, input *lightsail.DeleteInstanceSnapshotInput) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	var output lightsail.DeleteInstanceSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteInstanceSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteInstanceSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteInstanceSnapshotInput) *LightsailDeleteInstanceSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteInstanceSnapshot", input)
	return &LightsailDeleteInstanceSnapshotFuture{Future: future}
}

func (a *LightsailStub) DeleteKeyPair(ctx workflow.Context, input *lightsail.DeleteKeyPairInput) (*lightsail.DeleteKeyPairOutput, error) {
	var output lightsail.DeleteKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteKeyPairAsync(ctx workflow.Context, input *lightsail.DeleteKeyPairInput) *LightsailDeleteKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteKeyPair", input)
	return &LightsailDeleteKeyPairFuture{Future: future}
}

func (a *LightsailStub) DeleteKnownHostKeys(ctx workflow.Context, input *lightsail.DeleteKnownHostKeysInput) (*lightsail.DeleteKnownHostKeysOutput, error) {
	var output lightsail.DeleteKnownHostKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteKnownHostKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteKnownHostKeysAsync(ctx workflow.Context, input *lightsail.DeleteKnownHostKeysInput) *LightsailDeleteKnownHostKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteKnownHostKeys", input)
	return &LightsailDeleteKnownHostKeysFuture{Future: future}
}

func (a *LightsailStub) DeleteLoadBalancer(ctx workflow.Context, input *lightsail.DeleteLoadBalancerInput) (*lightsail.DeleteLoadBalancerOutput, error) {
	var output lightsail.DeleteLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteLoadBalancerAsync(ctx workflow.Context, input *lightsail.DeleteLoadBalancerInput) *LightsailDeleteLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteLoadBalancer", input)
	return &LightsailDeleteLoadBalancerFuture{Future: future}
}

func (a *LightsailStub) DeleteLoadBalancerTlsCertificate(ctx workflow.Context, input *lightsail.DeleteLoadBalancerTlsCertificateInput) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.DeleteLoadBalancerTlsCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteLoadBalancerTlsCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteLoadBalancerTlsCertificateAsync(ctx workflow.Context, input *lightsail.DeleteLoadBalancerTlsCertificateInput) *LightsailDeleteLoadBalancerTlsCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteLoadBalancerTlsCertificate", input)
	return &LightsailDeleteLoadBalancerTlsCertificateFuture{Future: future}
}

func (a *LightsailStub) DeleteRelationalDatabase(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseInput) (*lightsail.DeleteRelationalDatabaseOutput, error) {
	var output lightsail.DeleteRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseInput) *LightsailDeleteRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteRelationalDatabase", input)
	return &LightsailDeleteRelationalDatabaseFuture{Future: future}
}

func (a *LightsailStub) DeleteRelationalDatabaseSnapshot(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseSnapshotInput) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.DeleteRelationalDatabaseSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteRelationalDatabaseSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DeleteRelationalDatabaseSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseSnapshotInput) *LightsailDeleteRelationalDatabaseSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DeleteRelationalDatabaseSnapshot", input)
	return &LightsailDeleteRelationalDatabaseSnapshotFuture{Future: future}
}

func (a *LightsailStub) DetachCertificateFromDistribution(ctx workflow.Context, input *lightsail.DetachCertificateFromDistributionInput) (*lightsail.DetachCertificateFromDistributionOutput, error) {
	var output lightsail.DetachCertificateFromDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DetachCertificateFromDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DetachCertificateFromDistributionAsync(ctx workflow.Context, input *lightsail.DetachCertificateFromDistributionInput) *LightsailDetachCertificateFromDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DetachCertificateFromDistribution", input)
	return &LightsailDetachCertificateFromDistributionFuture{Future: future}
}

func (a *LightsailStub) DetachDisk(ctx workflow.Context, input *lightsail.DetachDiskInput) (*lightsail.DetachDiskOutput, error) {
	var output lightsail.DetachDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DetachDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DetachDiskAsync(ctx workflow.Context, input *lightsail.DetachDiskInput) *LightsailDetachDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DetachDisk", input)
	return &LightsailDetachDiskFuture{Future: future}
}

func (a *LightsailStub) DetachInstancesFromLoadBalancer(ctx workflow.Context, input *lightsail.DetachInstancesFromLoadBalancerInput) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	var output lightsail.DetachInstancesFromLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DetachInstancesFromLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DetachInstancesFromLoadBalancerAsync(ctx workflow.Context, input *lightsail.DetachInstancesFromLoadBalancerInput) *LightsailDetachInstancesFromLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DetachInstancesFromLoadBalancer", input)
	return &LightsailDetachInstancesFromLoadBalancerFuture{Future: future}
}

func (a *LightsailStub) DetachStaticIp(ctx workflow.Context, input *lightsail.DetachStaticIpInput) (*lightsail.DetachStaticIpOutput, error) {
	var output lightsail.DetachStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DetachStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DetachStaticIpAsync(ctx workflow.Context, input *lightsail.DetachStaticIpInput) *LightsailDetachStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DetachStaticIp", input)
	return &LightsailDetachStaticIpFuture{Future: future}
}

func (a *LightsailStub) DisableAddOn(ctx workflow.Context, input *lightsail.DisableAddOnInput) (*lightsail.DisableAddOnOutput, error) {
	var output lightsail.DisableAddOnOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DisableAddOn", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DisableAddOnAsync(ctx workflow.Context, input *lightsail.DisableAddOnInput) *LightsailDisableAddOnFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DisableAddOn", input)
	return &LightsailDisableAddOnFuture{Future: future}
}

func (a *LightsailStub) DownloadDefaultKeyPair(ctx workflow.Context, input *lightsail.DownloadDefaultKeyPairInput) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	var output lightsail.DownloadDefaultKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.DownloadDefaultKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) DownloadDefaultKeyPairAsync(ctx workflow.Context, input *lightsail.DownloadDefaultKeyPairInput) *LightsailDownloadDefaultKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.DownloadDefaultKeyPair", input)
	return &LightsailDownloadDefaultKeyPairFuture{Future: future}
}

func (a *LightsailStub) EnableAddOn(ctx workflow.Context, input *lightsail.EnableAddOnInput) (*lightsail.EnableAddOnOutput, error) {
	var output lightsail.EnableAddOnOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.EnableAddOn", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) EnableAddOnAsync(ctx workflow.Context, input *lightsail.EnableAddOnInput) *LightsailEnableAddOnFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.EnableAddOn", input)
	return &LightsailEnableAddOnFuture{Future: future}
}

func (a *LightsailStub) ExportSnapshot(ctx workflow.Context, input *lightsail.ExportSnapshotInput) (*lightsail.ExportSnapshotOutput, error) {
	var output lightsail.ExportSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.ExportSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) ExportSnapshotAsync(ctx workflow.Context, input *lightsail.ExportSnapshotInput) *LightsailExportSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.ExportSnapshot", input)
	return &LightsailExportSnapshotFuture{Future: future}
}

func (a *LightsailStub) GetActiveNames(ctx workflow.Context, input *lightsail.GetActiveNamesInput) (*lightsail.GetActiveNamesOutput, error) {
	var output lightsail.GetActiveNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetActiveNames", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetActiveNamesAsync(ctx workflow.Context, input *lightsail.GetActiveNamesInput) *LightsailGetActiveNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetActiveNames", input)
	return &LightsailGetActiveNamesFuture{Future: future}
}

func (a *LightsailStub) GetAlarms(ctx workflow.Context, input *lightsail.GetAlarmsInput) (*lightsail.GetAlarmsOutput, error) {
	var output lightsail.GetAlarmsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetAlarms", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetAlarmsAsync(ctx workflow.Context, input *lightsail.GetAlarmsInput) *LightsailGetAlarmsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetAlarms", input)
	return &LightsailGetAlarmsFuture{Future: future}
}

func (a *LightsailStub) GetAutoSnapshots(ctx workflow.Context, input *lightsail.GetAutoSnapshotsInput) (*lightsail.GetAutoSnapshotsOutput, error) {
	var output lightsail.GetAutoSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetAutoSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetAutoSnapshotsAsync(ctx workflow.Context, input *lightsail.GetAutoSnapshotsInput) *LightsailGetAutoSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetAutoSnapshots", input)
	return &LightsailGetAutoSnapshotsFuture{Future: future}
}

func (a *LightsailStub) GetBlueprints(ctx workflow.Context, input *lightsail.GetBlueprintsInput) (*lightsail.GetBlueprintsOutput, error) {
	var output lightsail.GetBlueprintsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetBlueprints", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetBlueprintsAsync(ctx workflow.Context, input *lightsail.GetBlueprintsInput) *LightsailGetBlueprintsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetBlueprints", input)
	return &LightsailGetBlueprintsFuture{Future: future}
}

func (a *LightsailStub) GetBundles(ctx workflow.Context, input *lightsail.GetBundlesInput) (*lightsail.GetBundlesOutput, error) {
	var output lightsail.GetBundlesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetBundles", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetBundlesAsync(ctx workflow.Context, input *lightsail.GetBundlesInput) *LightsailGetBundlesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetBundles", input)
	return &LightsailGetBundlesFuture{Future: future}
}

func (a *LightsailStub) GetCertificates(ctx workflow.Context, input *lightsail.GetCertificatesInput) (*lightsail.GetCertificatesOutput, error) {
	var output lightsail.GetCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetCertificatesAsync(ctx workflow.Context, input *lightsail.GetCertificatesInput) *LightsailGetCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetCertificates", input)
	return &LightsailGetCertificatesFuture{Future: future}
}

func (a *LightsailStub) GetCloudFormationStackRecords(ctx workflow.Context, input *lightsail.GetCloudFormationStackRecordsInput) (*lightsail.GetCloudFormationStackRecordsOutput, error) {
	var output lightsail.GetCloudFormationStackRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetCloudFormationStackRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetCloudFormationStackRecordsAsync(ctx workflow.Context, input *lightsail.GetCloudFormationStackRecordsInput) *LightsailGetCloudFormationStackRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetCloudFormationStackRecords", input)
	return &LightsailGetCloudFormationStackRecordsFuture{Future: future}
}

func (a *LightsailStub) GetContactMethods(ctx workflow.Context, input *lightsail.GetContactMethodsInput) (*lightsail.GetContactMethodsOutput, error) {
	var output lightsail.GetContactMethodsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetContactMethods", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetContactMethodsAsync(ctx workflow.Context, input *lightsail.GetContactMethodsInput) *LightsailGetContactMethodsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetContactMethods", input)
	return &LightsailGetContactMethodsFuture{Future: future}
}

func (a *LightsailStub) GetDisk(ctx workflow.Context, input *lightsail.GetDiskInput) (*lightsail.GetDiskOutput, error) {
	var output lightsail.GetDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetDiskAsync(ctx workflow.Context, input *lightsail.GetDiskInput) *LightsailGetDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDisk", input)
	return &LightsailGetDiskFuture{Future: future}
}

func (a *LightsailStub) GetDiskSnapshot(ctx workflow.Context, input *lightsail.GetDiskSnapshotInput) (*lightsail.GetDiskSnapshotOutput, error) {
	var output lightsail.GetDiskSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDiskSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetDiskSnapshotAsync(ctx workflow.Context, input *lightsail.GetDiskSnapshotInput) *LightsailGetDiskSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDiskSnapshot", input)
	return &LightsailGetDiskSnapshotFuture{Future: future}
}

func (a *LightsailStub) GetDiskSnapshots(ctx workflow.Context, input *lightsail.GetDiskSnapshotsInput) (*lightsail.GetDiskSnapshotsOutput, error) {
	var output lightsail.GetDiskSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDiskSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetDiskSnapshotsAsync(ctx workflow.Context, input *lightsail.GetDiskSnapshotsInput) *LightsailGetDiskSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDiskSnapshots", input)
	return &LightsailGetDiskSnapshotsFuture{Future: future}
}

func (a *LightsailStub) GetDisks(ctx workflow.Context, input *lightsail.GetDisksInput) (*lightsail.GetDisksOutput, error) {
	var output lightsail.GetDisksOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDisks", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetDisksAsync(ctx workflow.Context, input *lightsail.GetDisksInput) *LightsailGetDisksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDisks", input)
	return &LightsailGetDisksFuture{Future: future}
}

func (a *LightsailStub) GetDistributionBundles(ctx workflow.Context, input *lightsail.GetDistributionBundlesInput) (*lightsail.GetDistributionBundlesOutput, error) {
	var output lightsail.GetDistributionBundlesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDistributionBundles", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetDistributionBundlesAsync(ctx workflow.Context, input *lightsail.GetDistributionBundlesInput) *LightsailGetDistributionBundlesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDistributionBundles", input)
	return &LightsailGetDistributionBundlesFuture{Future: future}
}

func (a *LightsailStub) GetDistributionLatestCacheReset(ctx workflow.Context, input *lightsail.GetDistributionLatestCacheResetInput) (*lightsail.GetDistributionLatestCacheResetOutput, error) {
	var output lightsail.GetDistributionLatestCacheResetOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDistributionLatestCacheReset", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetDistributionLatestCacheResetAsync(ctx workflow.Context, input *lightsail.GetDistributionLatestCacheResetInput) *LightsailGetDistributionLatestCacheResetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDistributionLatestCacheReset", input)
	return &LightsailGetDistributionLatestCacheResetFuture{Future: future}
}

func (a *LightsailStub) GetDistributionMetricData(ctx workflow.Context, input *lightsail.GetDistributionMetricDataInput) (*lightsail.GetDistributionMetricDataOutput, error) {
	var output lightsail.GetDistributionMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDistributionMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetDistributionMetricDataAsync(ctx workflow.Context, input *lightsail.GetDistributionMetricDataInput) *LightsailGetDistributionMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDistributionMetricData", input)
	return &LightsailGetDistributionMetricDataFuture{Future: future}
}

func (a *LightsailStub) GetDistributions(ctx workflow.Context, input *lightsail.GetDistributionsInput) (*lightsail.GetDistributionsOutput, error) {
	var output lightsail.GetDistributionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDistributions", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetDistributionsAsync(ctx workflow.Context, input *lightsail.GetDistributionsInput) *LightsailGetDistributionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDistributions", input)
	return &LightsailGetDistributionsFuture{Future: future}
}

func (a *LightsailStub) GetDomain(ctx workflow.Context, input *lightsail.GetDomainInput) (*lightsail.GetDomainOutput, error) {
	var output lightsail.GetDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetDomainAsync(ctx workflow.Context, input *lightsail.GetDomainInput) *LightsailGetDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDomain", input)
	return &LightsailGetDomainFuture{Future: future}
}

func (a *LightsailStub) GetDomains(ctx workflow.Context, input *lightsail.GetDomainsInput) (*lightsail.GetDomainsOutput, error) {
	var output lightsail.GetDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetDomainsAsync(ctx workflow.Context, input *lightsail.GetDomainsInput) *LightsailGetDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetDomains", input)
	return &LightsailGetDomainsFuture{Future: future}
}

func (a *LightsailStub) GetExportSnapshotRecords(ctx workflow.Context, input *lightsail.GetExportSnapshotRecordsInput) (*lightsail.GetExportSnapshotRecordsOutput, error) {
	var output lightsail.GetExportSnapshotRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetExportSnapshotRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetExportSnapshotRecordsAsync(ctx workflow.Context, input *lightsail.GetExportSnapshotRecordsInput) *LightsailGetExportSnapshotRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetExportSnapshotRecords", input)
	return &LightsailGetExportSnapshotRecordsFuture{Future: future}
}

func (a *LightsailStub) GetInstance(ctx workflow.Context, input *lightsail.GetInstanceInput) (*lightsail.GetInstanceOutput, error) {
	var output lightsail.GetInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetInstanceAsync(ctx workflow.Context, input *lightsail.GetInstanceInput) *LightsailGetInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstance", input)
	return &LightsailGetInstanceFuture{Future: future}
}

func (a *LightsailStub) GetInstanceAccessDetails(ctx workflow.Context, input *lightsail.GetInstanceAccessDetailsInput) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	var output lightsail.GetInstanceAccessDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstanceAccessDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetInstanceAccessDetailsAsync(ctx workflow.Context, input *lightsail.GetInstanceAccessDetailsInput) *LightsailGetInstanceAccessDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstanceAccessDetails", input)
	return &LightsailGetInstanceAccessDetailsFuture{Future: future}
}

func (a *LightsailStub) GetInstanceMetricData(ctx workflow.Context, input *lightsail.GetInstanceMetricDataInput) (*lightsail.GetInstanceMetricDataOutput, error) {
	var output lightsail.GetInstanceMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstanceMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetInstanceMetricDataAsync(ctx workflow.Context, input *lightsail.GetInstanceMetricDataInput) *LightsailGetInstanceMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstanceMetricData", input)
	return &LightsailGetInstanceMetricDataFuture{Future: future}
}

func (a *LightsailStub) GetInstancePortStates(ctx workflow.Context, input *lightsail.GetInstancePortStatesInput) (*lightsail.GetInstancePortStatesOutput, error) {
	var output lightsail.GetInstancePortStatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstancePortStates", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetInstancePortStatesAsync(ctx workflow.Context, input *lightsail.GetInstancePortStatesInput) *LightsailGetInstancePortStatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstancePortStates", input)
	return &LightsailGetInstancePortStatesFuture{Future: future}
}

func (a *LightsailStub) GetInstanceSnapshot(ctx workflow.Context, input *lightsail.GetInstanceSnapshotInput) (*lightsail.GetInstanceSnapshotOutput, error) {
	var output lightsail.GetInstanceSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstanceSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetInstanceSnapshotAsync(ctx workflow.Context, input *lightsail.GetInstanceSnapshotInput) *LightsailGetInstanceSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstanceSnapshot", input)
	return &LightsailGetInstanceSnapshotFuture{Future: future}
}

func (a *LightsailStub) GetInstanceSnapshots(ctx workflow.Context, input *lightsail.GetInstanceSnapshotsInput) (*lightsail.GetInstanceSnapshotsOutput, error) {
	var output lightsail.GetInstanceSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstanceSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetInstanceSnapshotsAsync(ctx workflow.Context, input *lightsail.GetInstanceSnapshotsInput) *LightsailGetInstanceSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstanceSnapshots", input)
	return &LightsailGetInstanceSnapshotsFuture{Future: future}
}

func (a *LightsailStub) GetInstanceState(ctx workflow.Context, input *lightsail.GetInstanceStateInput) (*lightsail.GetInstanceStateOutput, error) {
	var output lightsail.GetInstanceStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstanceState", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetInstanceStateAsync(ctx workflow.Context, input *lightsail.GetInstanceStateInput) *LightsailGetInstanceStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstanceState", input)
	return &LightsailGetInstanceStateFuture{Future: future}
}

func (a *LightsailStub) GetInstances(ctx workflow.Context, input *lightsail.GetInstancesInput) (*lightsail.GetInstancesOutput, error) {
	var output lightsail.GetInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetInstancesAsync(ctx workflow.Context, input *lightsail.GetInstancesInput) *LightsailGetInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetInstances", input)
	return &LightsailGetInstancesFuture{Future: future}
}

func (a *LightsailStub) GetKeyPair(ctx workflow.Context, input *lightsail.GetKeyPairInput) (*lightsail.GetKeyPairOutput, error) {
	var output lightsail.GetKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetKeyPairAsync(ctx workflow.Context, input *lightsail.GetKeyPairInput) *LightsailGetKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetKeyPair", input)
	return &LightsailGetKeyPairFuture{Future: future}
}

func (a *LightsailStub) GetKeyPairs(ctx workflow.Context, input *lightsail.GetKeyPairsInput) (*lightsail.GetKeyPairsOutput, error) {
	var output lightsail.GetKeyPairsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetKeyPairs", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetKeyPairsAsync(ctx workflow.Context, input *lightsail.GetKeyPairsInput) *LightsailGetKeyPairsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetKeyPairs", input)
	return &LightsailGetKeyPairsFuture{Future: future}
}

func (a *LightsailStub) GetLoadBalancer(ctx workflow.Context, input *lightsail.GetLoadBalancerInput) (*lightsail.GetLoadBalancerOutput, error) {
	var output lightsail.GetLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetLoadBalancerAsync(ctx workflow.Context, input *lightsail.GetLoadBalancerInput) *LightsailGetLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetLoadBalancer", input)
	return &LightsailGetLoadBalancerFuture{Future: future}
}

func (a *LightsailStub) GetLoadBalancerMetricData(ctx workflow.Context, input *lightsail.GetLoadBalancerMetricDataInput) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	var output lightsail.GetLoadBalancerMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetLoadBalancerMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetLoadBalancerMetricDataAsync(ctx workflow.Context, input *lightsail.GetLoadBalancerMetricDataInput) *LightsailGetLoadBalancerMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetLoadBalancerMetricData", input)
	return &LightsailGetLoadBalancerMetricDataFuture{Future: future}
}

func (a *LightsailStub) GetLoadBalancerTlsCertificates(ctx workflow.Context, input *lightsail.GetLoadBalancerTlsCertificatesInput) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	var output lightsail.GetLoadBalancerTlsCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetLoadBalancerTlsCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetLoadBalancerTlsCertificatesAsync(ctx workflow.Context, input *lightsail.GetLoadBalancerTlsCertificatesInput) *LightsailGetLoadBalancerTlsCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetLoadBalancerTlsCertificates", input)
	return &LightsailGetLoadBalancerTlsCertificatesFuture{Future: future}
}

func (a *LightsailStub) GetLoadBalancers(ctx workflow.Context, input *lightsail.GetLoadBalancersInput) (*lightsail.GetLoadBalancersOutput, error) {
	var output lightsail.GetLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetLoadBalancersAsync(ctx workflow.Context, input *lightsail.GetLoadBalancersInput) *LightsailGetLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetLoadBalancers", input)
	return &LightsailGetLoadBalancersFuture{Future: future}
}

func (a *LightsailStub) GetOperation(ctx workflow.Context, input *lightsail.GetOperationInput) (*lightsail.GetOperationOutput, error) {
	var output lightsail.GetOperationOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetOperation", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetOperationAsync(ctx workflow.Context, input *lightsail.GetOperationInput) *LightsailGetOperationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetOperation", input)
	return &LightsailGetOperationFuture{Future: future}
}

func (a *LightsailStub) GetOperations(ctx workflow.Context, input *lightsail.GetOperationsInput) (*lightsail.GetOperationsOutput, error) {
	var output lightsail.GetOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetOperationsAsync(ctx workflow.Context, input *lightsail.GetOperationsInput) *LightsailGetOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetOperations", input)
	return &LightsailGetOperationsFuture{Future: future}
}

func (a *LightsailStub) GetOperationsForResource(ctx workflow.Context, input *lightsail.GetOperationsForResourceInput) (*lightsail.GetOperationsForResourceOutput, error) {
	var output lightsail.GetOperationsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetOperationsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetOperationsForResourceAsync(ctx workflow.Context, input *lightsail.GetOperationsForResourceInput) *LightsailGetOperationsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetOperationsForResource", input)
	return &LightsailGetOperationsForResourceFuture{Future: future}
}

func (a *LightsailStub) GetRegions(ctx workflow.Context, input *lightsail.GetRegionsInput) (*lightsail.GetRegionsOutput, error) {
	var output lightsail.GetRegionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRegions", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRegionsAsync(ctx workflow.Context, input *lightsail.GetRegionsInput) *LightsailGetRegionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRegions", input)
	return &LightsailGetRegionsFuture{Future: future}
}

func (a *LightsailStub) GetRelationalDatabase(ctx workflow.Context, input *lightsail.GetRelationalDatabaseInput) (*lightsail.GetRelationalDatabaseOutput, error) {
	var output lightsail.GetRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseInput) *LightsailGetRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabase", input)
	return &LightsailGetRelationalDatabaseFuture{Future: future}
}

func (a *LightsailStub) GetRelationalDatabaseBlueprints(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBlueprintsInput) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error) {
	var output lightsail.GetRelationalDatabaseBlueprintsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseBlueprints", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRelationalDatabaseBlueprintsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBlueprintsInput) *LightsailGetRelationalDatabaseBlueprintsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseBlueprints", input)
	return &LightsailGetRelationalDatabaseBlueprintsFuture{Future: future}
}

func (a *LightsailStub) GetRelationalDatabaseBundles(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBundlesInput) (*lightsail.GetRelationalDatabaseBundlesOutput, error) {
	var output lightsail.GetRelationalDatabaseBundlesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseBundles", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRelationalDatabaseBundlesAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBundlesInput) *LightsailGetRelationalDatabaseBundlesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseBundles", input)
	return &LightsailGetRelationalDatabaseBundlesFuture{Future: future}
}

func (a *LightsailStub) GetRelationalDatabaseEvents(ctx workflow.Context, input *lightsail.GetRelationalDatabaseEventsInput) (*lightsail.GetRelationalDatabaseEventsOutput, error) {
	var output lightsail.GetRelationalDatabaseEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRelationalDatabaseEventsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseEventsInput) *LightsailGetRelationalDatabaseEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseEvents", input)
	return &LightsailGetRelationalDatabaseEventsFuture{Future: future}
}

func (a *LightsailStub) GetRelationalDatabaseLogEvents(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogEventsInput) (*lightsail.GetRelationalDatabaseLogEventsOutput, error) {
	var output lightsail.GetRelationalDatabaseLogEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseLogEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRelationalDatabaseLogEventsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogEventsInput) *LightsailGetRelationalDatabaseLogEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseLogEvents", input)
	return &LightsailGetRelationalDatabaseLogEventsFuture{Future: future}
}

func (a *LightsailStub) GetRelationalDatabaseLogStreams(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogStreamsInput) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error) {
	var output lightsail.GetRelationalDatabaseLogStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseLogStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRelationalDatabaseLogStreamsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogStreamsInput) *LightsailGetRelationalDatabaseLogStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseLogStreams", input)
	return &LightsailGetRelationalDatabaseLogStreamsFuture{Future: future}
}

func (a *LightsailStub) GetRelationalDatabaseMasterUserPassword(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMasterUserPasswordInput) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error) {
	var output lightsail.GetRelationalDatabaseMasterUserPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseMasterUserPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRelationalDatabaseMasterUserPasswordAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMasterUserPasswordInput) *LightsailGetRelationalDatabaseMasterUserPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseMasterUserPassword", input)
	return &LightsailGetRelationalDatabaseMasterUserPasswordFuture{Future: future}
}

func (a *LightsailStub) GetRelationalDatabaseMetricData(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMetricDataInput) (*lightsail.GetRelationalDatabaseMetricDataOutput, error) {
	var output lightsail.GetRelationalDatabaseMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRelationalDatabaseMetricDataAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMetricDataInput) *LightsailGetRelationalDatabaseMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseMetricData", input)
	return &LightsailGetRelationalDatabaseMetricDataFuture{Future: future}
}

func (a *LightsailStub) GetRelationalDatabaseParameters(ctx workflow.Context, input *lightsail.GetRelationalDatabaseParametersInput) (*lightsail.GetRelationalDatabaseParametersOutput, error) {
	var output lightsail.GetRelationalDatabaseParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRelationalDatabaseParametersAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseParametersInput) *LightsailGetRelationalDatabaseParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseParameters", input)
	return &LightsailGetRelationalDatabaseParametersFuture{Future: future}
}

func (a *LightsailStub) GetRelationalDatabaseSnapshot(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotInput) (*lightsail.GetRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.GetRelationalDatabaseSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRelationalDatabaseSnapshotAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotInput) *LightsailGetRelationalDatabaseSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseSnapshot", input)
	return &LightsailGetRelationalDatabaseSnapshotFuture{Future: future}
}

func (a *LightsailStub) GetRelationalDatabaseSnapshots(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotsInput) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error) {
	var output lightsail.GetRelationalDatabaseSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRelationalDatabaseSnapshotsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotsInput) *LightsailGetRelationalDatabaseSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabaseSnapshots", input)
	return &LightsailGetRelationalDatabaseSnapshotsFuture{Future: future}
}

func (a *LightsailStub) GetRelationalDatabases(ctx workflow.Context, input *lightsail.GetRelationalDatabasesInput) (*lightsail.GetRelationalDatabasesOutput, error) {
	var output lightsail.GetRelationalDatabasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabases", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetRelationalDatabasesAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabasesInput) *LightsailGetRelationalDatabasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetRelationalDatabases", input)
	return &LightsailGetRelationalDatabasesFuture{Future: future}
}

func (a *LightsailStub) GetStaticIp(ctx workflow.Context, input *lightsail.GetStaticIpInput) (*lightsail.GetStaticIpOutput, error) {
	var output lightsail.GetStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetStaticIpAsync(ctx workflow.Context, input *lightsail.GetStaticIpInput) *LightsailGetStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetStaticIp", input)
	return &LightsailGetStaticIpFuture{Future: future}
}

func (a *LightsailStub) GetStaticIps(ctx workflow.Context, input *lightsail.GetStaticIpsInput) (*lightsail.GetStaticIpsOutput, error) {
	var output lightsail.GetStaticIpsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.GetStaticIps", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) GetStaticIpsAsync(ctx workflow.Context, input *lightsail.GetStaticIpsInput) *LightsailGetStaticIpsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.GetStaticIps", input)
	return &LightsailGetStaticIpsFuture{Future: future}
}

func (a *LightsailStub) ImportKeyPair(ctx workflow.Context, input *lightsail.ImportKeyPairInput) (*lightsail.ImportKeyPairOutput, error) {
	var output lightsail.ImportKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.ImportKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) ImportKeyPairAsync(ctx workflow.Context, input *lightsail.ImportKeyPairInput) *LightsailImportKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.ImportKeyPair", input)
	return &LightsailImportKeyPairFuture{Future: future}
}

func (a *LightsailStub) IsVpcPeered(ctx workflow.Context, input *lightsail.IsVpcPeeredInput) (*lightsail.IsVpcPeeredOutput, error) {
	var output lightsail.IsVpcPeeredOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.IsVpcPeered", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) IsVpcPeeredAsync(ctx workflow.Context, input *lightsail.IsVpcPeeredInput) *LightsailIsVpcPeeredFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.IsVpcPeered", input)
	return &LightsailIsVpcPeeredFuture{Future: future}
}

func (a *LightsailStub) OpenInstancePublicPorts(ctx workflow.Context, input *lightsail.OpenInstancePublicPortsInput) (*lightsail.OpenInstancePublicPortsOutput, error) {
	var output lightsail.OpenInstancePublicPortsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.OpenInstancePublicPorts", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) OpenInstancePublicPortsAsync(ctx workflow.Context, input *lightsail.OpenInstancePublicPortsInput) *LightsailOpenInstancePublicPortsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.OpenInstancePublicPorts", input)
	return &LightsailOpenInstancePublicPortsFuture{Future: future}
}

func (a *LightsailStub) PeerVpc(ctx workflow.Context, input *lightsail.PeerVpcInput) (*lightsail.PeerVpcOutput, error) {
	var output lightsail.PeerVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.PeerVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) PeerVpcAsync(ctx workflow.Context, input *lightsail.PeerVpcInput) *LightsailPeerVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.PeerVpc", input)
	return &LightsailPeerVpcFuture{Future: future}
}

func (a *LightsailStub) PutAlarm(ctx workflow.Context, input *lightsail.PutAlarmInput) (*lightsail.PutAlarmOutput, error) {
	var output lightsail.PutAlarmOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.PutAlarm", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) PutAlarmAsync(ctx workflow.Context, input *lightsail.PutAlarmInput) *LightsailPutAlarmFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.PutAlarm", input)
	return &LightsailPutAlarmFuture{Future: future}
}

func (a *LightsailStub) PutInstancePublicPorts(ctx workflow.Context, input *lightsail.PutInstancePublicPortsInput) (*lightsail.PutInstancePublicPortsOutput, error) {
	var output lightsail.PutInstancePublicPortsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.PutInstancePublicPorts", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) PutInstancePublicPortsAsync(ctx workflow.Context, input *lightsail.PutInstancePublicPortsInput) *LightsailPutInstancePublicPortsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.PutInstancePublicPorts", input)
	return &LightsailPutInstancePublicPortsFuture{Future: future}
}

func (a *LightsailStub) RebootInstance(ctx workflow.Context, input *lightsail.RebootInstanceInput) (*lightsail.RebootInstanceOutput, error) {
	var output lightsail.RebootInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.RebootInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) RebootInstanceAsync(ctx workflow.Context, input *lightsail.RebootInstanceInput) *LightsailRebootInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.RebootInstance", input)
	return &LightsailRebootInstanceFuture{Future: future}
}

func (a *LightsailStub) RebootRelationalDatabase(ctx workflow.Context, input *lightsail.RebootRelationalDatabaseInput) (*lightsail.RebootRelationalDatabaseOutput, error) {
	var output lightsail.RebootRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.RebootRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) RebootRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.RebootRelationalDatabaseInput) *LightsailRebootRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.RebootRelationalDatabase", input)
	return &LightsailRebootRelationalDatabaseFuture{Future: future}
}

func (a *LightsailStub) ReleaseStaticIp(ctx workflow.Context, input *lightsail.ReleaseStaticIpInput) (*lightsail.ReleaseStaticIpOutput, error) {
	var output lightsail.ReleaseStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.ReleaseStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) ReleaseStaticIpAsync(ctx workflow.Context, input *lightsail.ReleaseStaticIpInput) *LightsailReleaseStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.ReleaseStaticIp", input)
	return &LightsailReleaseStaticIpFuture{Future: future}
}

func (a *LightsailStub) ResetDistributionCache(ctx workflow.Context, input *lightsail.ResetDistributionCacheInput) (*lightsail.ResetDistributionCacheOutput, error) {
	var output lightsail.ResetDistributionCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.ResetDistributionCache", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) ResetDistributionCacheAsync(ctx workflow.Context, input *lightsail.ResetDistributionCacheInput) *LightsailResetDistributionCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.ResetDistributionCache", input)
	return &LightsailResetDistributionCacheFuture{Future: future}
}

func (a *LightsailStub) SendContactMethodVerification(ctx workflow.Context, input *lightsail.SendContactMethodVerificationInput) (*lightsail.SendContactMethodVerificationOutput, error) {
	var output lightsail.SendContactMethodVerificationOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.SendContactMethodVerification", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) SendContactMethodVerificationAsync(ctx workflow.Context, input *lightsail.SendContactMethodVerificationInput) *LightsailSendContactMethodVerificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.SendContactMethodVerification", input)
	return &LightsailSendContactMethodVerificationFuture{Future: future}
}

func (a *LightsailStub) StartInstance(ctx workflow.Context, input *lightsail.StartInstanceInput) (*lightsail.StartInstanceOutput, error) {
	var output lightsail.StartInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.StartInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) StartInstanceAsync(ctx workflow.Context, input *lightsail.StartInstanceInput) *LightsailStartInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.StartInstance", input)
	return &LightsailStartInstanceFuture{Future: future}
}

func (a *LightsailStub) StartRelationalDatabase(ctx workflow.Context, input *lightsail.StartRelationalDatabaseInput) (*lightsail.StartRelationalDatabaseOutput, error) {
	var output lightsail.StartRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.StartRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) StartRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.StartRelationalDatabaseInput) *LightsailStartRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.StartRelationalDatabase", input)
	return &LightsailStartRelationalDatabaseFuture{Future: future}
}

func (a *LightsailStub) StopInstance(ctx workflow.Context, input *lightsail.StopInstanceInput) (*lightsail.StopInstanceOutput, error) {
	var output lightsail.StopInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.StopInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) StopInstanceAsync(ctx workflow.Context, input *lightsail.StopInstanceInput) *LightsailStopInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.StopInstance", input)
	return &LightsailStopInstanceFuture{Future: future}
}

func (a *LightsailStub) StopRelationalDatabase(ctx workflow.Context, input *lightsail.StopRelationalDatabaseInput) (*lightsail.StopRelationalDatabaseOutput, error) {
	var output lightsail.StopRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.StopRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) StopRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.StopRelationalDatabaseInput) *LightsailStopRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.StopRelationalDatabase", input)
	return &LightsailStopRelationalDatabaseFuture{Future: future}
}

func (a *LightsailStub) TagResource(ctx workflow.Context, input *lightsail.TagResourceInput) (*lightsail.TagResourceOutput, error) {
	var output lightsail.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) TagResourceAsync(ctx workflow.Context, input *lightsail.TagResourceInput) *LightsailTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.TagResource", input)
	return &LightsailTagResourceFuture{Future: future}
}

func (a *LightsailStub) TestAlarm(ctx workflow.Context, input *lightsail.TestAlarmInput) (*lightsail.TestAlarmOutput, error) {
	var output lightsail.TestAlarmOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.TestAlarm", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) TestAlarmAsync(ctx workflow.Context, input *lightsail.TestAlarmInput) *LightsailTestAlarmFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.TestAlarm", input)
	return &LightsailTestAlarmFuture{Future: future}
}

func (a *LightsailStub) UnpeerVpc(ctx workflow.Context, input *lightsail.UnpeerVpcInput) (*lightsail.UnpeerVpcOutput, error) {
	var output lightsail.UnpeerVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.UnpeerVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) UnpeerVpcAsync(ctx workflow.Context, input *lightsail.UnpeerVpcInput) *LightsailUnpeerVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.UnpeerVpc", input)
	return &LightsailUnpeerVpcFuture{Future: future}
}

func (a *LightsailStub) UntagResource(ctx workflow.Context, input *lightsail.UntagResourceInput) (*lightsail.UntagResourceOutput, error) {
	var output lightsail.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) UntagResourceAsync(ctx workflow.Context, input *lightsail.UntagResourceInput) *LightsailUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.UntagResource", input)
	return &LightsailUntagResourceFuture{Future: future}
}

func (a *LightsailStub) UpdateDistribution(ctx workflow.Context, input *lightsail.UpdateDistributionInput) (*lightsail.UpdateDistributionOutput, error) {
	var output lightsail.UpdateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.UpdateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) UpdateDistributionAsync(ctx workflow.Context, input *lightsail.UpdateDistributionInput) *LightsailUpdateDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.UpdateDistribution", input)
	return &LightsailUpdateDistributionFuture{Future: future}
}

func (a *LightsailStub) UpdateDistributionBundle(ctx workflow.Context, input *lightsail.UpdateDistributionBundleInput) (*lightsail.UpdateDistributionBundleOutput, error) {
	var output lightsail.UpdateDistributionBundleOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.UpdateDistributionBundle", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) UpdateDistributionBundleAsync(ctx workflow.Context, input *lightsail.UpdateDistributionBundleInput) *LightsailUpdateDistributionBundleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.UpdateDistributionBundle", input)
	return &LightsailUpdateDistributionBundleFuture{Future: future}
}

func (a *LightsailStub) UpdateDomainEntry(ctx workflow.Context, input *lightsail.UpdateDomainEntryInput) (*lightsail.UpdateDomainEntryOutput, error) {
	var output lightsail.UpdateDomainEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.UpdateDomainEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) UpdateDomainEntryAsync(ctx workflow.Context, input *lightsail.UpdateDomainEntryInput) *LightsailUpdateDomainEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.UpdateDomainEntry", input)
	return &LightsailUpdateDomainEntryFuture{Future: future}
}

func (a *LightsailStub) UpdateLoadBalancerAttribute(ctx workflow.Context, input *lightsail.UpdateLoadBalancerAttributeInput) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	var output lightsail.UpdateLoadBalancerAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.UpdateLoadBalancerAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) UpdateLoadBalancerAttributeAsync(ctx workflow.Context, input *lightsail.UpdateLoadBalancerAttributeInput) *LightsailUpdateLoadBalancerAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.UpdateLoadBalancerAttribute", input)
	return &LightsailUpdateLoadBalancerAttributeFuture{Future: future}
}

func (a *LightsailStub) UpdateRelationalDatabase(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseInput) (*lightsail.UpdateRelationalDatabaseOutput, error) {
	var output lightsail.UpdateRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.UpdateRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) UpdateRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseInput) *LightsailUpdateRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.UpdateRelationalDatabase", input)
	return &LightsailUpdateRelationalDatabaseFuture{Future: future}
}

func (a *LightsailStub) UpdateRelationalDatabaseParameters(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseParametersInput) (*lightsail.UpdateRelationalDatabaseParametersOutput, error) {
	var output lightsail.UpdateRelationalDatabaseParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.lightsail.UpdateRelationalDatabaseParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *LightsailStub) UpdateRelationalDatabaseParametersAsync(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseParametersInput) *LightsailUpdateRelationalDatabaseParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lightsail.UpdateRelationalDatabaseParameters", input)
	return &LightsailUpdateRelationalDatabaseParametersFuture{Future: future}
}
