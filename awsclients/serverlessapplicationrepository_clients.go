// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/serverlessapplicationrepository"
	"go.temporal.io/sdk/workflow"
)

type ServerlessApplicationRepositoryClient interface {
	CreateApplication(ctx workflow.Context, input *serverlessapplicationrepository.CreateApplicationRequest) (*serverlessapplicationrepository.CreateApplicationOutput, error)
	CreateApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.CreateApplicationRequest) *ServerlessapplicationrepositoryCreateApplicationFuture

	CreateApplicationVersion(ctx workflow.Context, input *serverlessapplicationrepository.CreateApplicationVersionRequest) (*serverlessapplicationrepository.CreateApplicationVersionOutput, error)
	CreateApplicationVersionAsync(ctx workflow.Context, input *serverlessapplicationrepository.CreateApplicationVersionRequest) *ServerlessapplicationrepositoryCreateApplicationVersionFuture

	CreateCloudFormationChangeSet(ctx workflow.Context, input *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest) (*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput, error)
	CreateCloudFormationChangeSetAsync(ctx workflow.Context, input *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest) *ServerlessapplicationrepositoryCreateCloudFormationChangeSetFuture

	CreateCloudFormationTemplate(ctx workflow.Context, input *serverlessapplicationrepository.CreateCloudFormationTemplateInput) (*serverlessapplicationrepository.CreateCloudFormationTemplateOutput, error)
	CreateCloudFormationTemplateAsync(ctx workflow.Context, input *serverlessapplicationrepository.CreateCloudFormationTemplateInput) *ServerlessapplicationrepositoryCreateCloudFormationTemplateFuture

	DeleteApplication(ctx workflow.Context, input *serverlessapplicationrepository.DeleteApplicationInput) (*serverlessapplicationrepository.DeleteApplicationOutput, error)
	DeleteApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.DeleteApplicationInput) *ServerlessapplicationrepositoryDeleteApplicationFuture

	GetApplication(ctx workflow.Context, input *serverlessapplicationrepository.GetApplicationInput) (*serverlessapplicationrepository.GetApplicationOutput, error)
	GetApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.GetApplicationInput) *ServerlessapplicationrepositoryGetApplicationFuture

	GetApplicationPolicy(ctx workflow.Context, input *serverlessapplicationrepository.GetApplicationPolicyInput) (*serverlessapplicationrepository.GetApplicationPolicyOutput, error)
	GetApplicationPolicyAsync(ctx workflow.Context, input *serverlessapplicationrepository.GetApplicationPolicyInput) *ServerlessapplicationrepositoryGetApplicationPolicyFuture

	GetCloudFormationTemplate(ctx workflow.Context, input *serverlessapplicationrepository.GetCloudFormationTemplateInput) (*serverlessapplicationrepository.GetCloudFormationTemplateOutput, error)
	GetCloudFormationTemplateAsync(ctx workflow.Context, input *serverlessapplicationrepository.GetCloudFormationTemplateInput) *ServerlessapplicationrepositoryGetCloudFormationTemplateFuture

	ListApplicationDependencies(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationDependenciesInput) (*serverlessapplicationrepository.ListApplicationDependenciesOutput, error)
	ListApplicationDependenciesAsync(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationDependenciesInput) *ServerlessapplicationrepositoryListApplicationDependenciesFuture

	ListApplicationVersions(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationVersionsInput) (*serverlessapplicationrepository.ListApplicationVersionsOutput, error)
	ListApplicationVersionsAsync(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationVersionsInput) *ServerlessapplicationrepositoryListApplicationVersionsFuture

	ListApplications(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationsInput) (*serverlessapplicationrepository.ListApplicationsOutput, error)
	ListApplicationsAsync(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationsInput) *ServerlessapplicationrepositoryListApplicationsFuture

	PutApplicationPolicy(ctx workflow.Context, input *serverlessapplicationrepository.PutApplicationPolicyInput) (*serverlessapplicationrepository.PutApplicationPolicyOutput, error)
	PutApplicationPolicyAsync(ctx workflow.Context, input *serverlessapplicationrepository.PutApplicationPolicyInput) *ServerlessapplicationrepositoryPutApplicationPolicyFuture

	UnshareApplication(ctx workflow.Context, input *serverlessapplicationrepository.UnshareApplicationInput) (*serverlessapplicationrepository.UnshareApplicationOutput, error)
	UnshareApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.UnshareApplicationInput) *ServerlessapplicationrepositoryUnshareApplicationFuture

	UpdateApplication(ctx workflow.Context, input *serverlessapplicationrepository.UpdateApplicationRequest) (*serverlessapplicationrepository.UpdateApplicationOutput, error)
	UpdateApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.UpdateApplicationRequest) *ServerlessapplicationrepositoryUpdateApplicationFuture
}

type ServerlessApplicationRepositoryStub struct{}

func NewServerlessApplicationRepositoryStub() ServerlessApplicationRepositoryClient {
	return &ServerlessApplicationRepositoryStub{}
}

type ServerlessapplicationrepositoryCreateApplicationFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryCreateApplicationFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.CreateApplicationOutput, error) {
	var output serverlessapplicationrepository.CreateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryCreateApplicationVersionFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryCreateApplicationVersionFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.CreateApplicationVersionOutput, error) {
	var output serverlessapplicationrepository.CreateApplicationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryCreateCloudFormationChangeSetFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryCreateCloudFormationChangeSetFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput, error) {
	var output serverlessapplicationrepository.CreateCloudFormationChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryCreateCloudFormationTemplateFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryCreateCloudFormationTemplateFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.CreateCloudFormationTemplateOutput, error) {
	var output serverlessapplicationrepository.CreateCloudFormationTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryDeleteApplicationFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryDeleteApplicationFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.DeleteApplicationOutput, error) {
	var output serverlessapplicationrepository.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryGetApplicationFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryGetApplicationFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.GetApplicationOutput, error) {
	var output serverlessapplicationrepository.GetApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryGetApplicationPolicyFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryGetApplicationPolicyFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.GetApplicationPolicyOutput, error) {
	var output serverlessapplicationrepository.GetApplicationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryGetCloudFormationTemplateFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryGetCloudFormationTemplateFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.GetCloudFormationTemplateOutput, error) {
	var output serverlessapplicationrepository.GetCloudFormationTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryListApplicationDependenciesFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryListApplicationDependenciesFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.ListApplicationDependenciesOutput, error) {
	var output serverlessapplicationrepository.ListApplicationDependenciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryListApplicationVersionsFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryListApplicationVersionsFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.ListApplicationVersionsOutput, error) {
	var output serverlessapplicationrepository.ListApplicationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryListApplicationsFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryListApplicationsFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.ListApplicationsOutput, error) {
	var output serverlessapplicationrepository.ListApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryPutApplicationPolicyFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryPutApplicationPolicyFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.PutApplicationPolicyOutput, error) {
	var output serverlessapplicationrepository.PutApplicationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryUnshareApplicationFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryUnshareApplicationFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.UnshareApplicationOutput, error) {
	var output serverlessapplicationrepository.UnshareApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServerlessapplicationrepositoryUpdateApplicationFuture struct {
	Future workflow.Future
}

func (r *ServerlessapplicationrepositoryUpdateApplicationFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.UpdateApplicationOutput, error) {
	var output serverlessapplicationrepository.UpdateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) CreateApplication(ctx workflow.Context, input *serverlessapplicationrepository.CreateApplicationRequest) (*serverlessapplicationrepository.CreateApplicationOutput, error) {
	var output serverlessapplicationrepository.CreateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) CreateApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.CreateApplicationRequest) *ServerlessapplicationrepositoryCreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.CreateApplication", input)
	return &ServerlessapplicationrepositoryCreateApplicationFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) CreateApplicationVersion(ctx workflow.Context, input *serverlessapplicationrepository.CreateApplicationVersionRequest) (*serverlessapplicationrepository.CreateApplicationVersionOutput, error) {
	var output serverlessapplicationrepository.CreateApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.CreateApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) CreateApplicationVersionAsync(ctx workflow.Context, input *serverlessapplicationrepository.CreateApplicationVersionRequest) *ServerlessapplicationrepositoryCreateApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.CreateApplicationVersion", input)
	return &ServerlessapplicationrepositoryCreateApplicationVersionFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) CreateCloudFormationChangeSet(ctx workflow.Context, input *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest) (*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput, error) {
	var output serverlessapplicationrepository.CreateCloudFormationChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.CreateCloudFormationChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) CreateCloudFormationChangeSetAsync(ctx workflow.Context, input *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest) *ServerlessapplicationrepositoryCreateCloudFormationChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.CreateCloudFormationChangeSet", input)
	return &ServerlessapplicationrepositoryCreateCloudFormationChangeSetFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) CreateCloudFormationTemplate(ctx workflow.Context, input *serverlessapplicationrepository.CreateCloudFormationTemplateInput) (*serverlessapplicationrepository.CreateCloudFormationTemplateOutput, error) {
	var output serverlessapplicationrepository.CreateCloudFormationTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.CreateCloudFormationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) CreateCloudFormationTemplateAsync(ctx workflow.Context, input *serverlessapplicationrepository.CreateCloudFormationTemplateInput) *ServerlessapplicationrepositoryCreateCloudFormationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.CreateCloudFormationTemplate", input)
	return &ServerlessapplicationrepositoryCreateCloudFormationTemplateFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) DeleteApplication(ctx workflow.Context, input *serverlessapplicationrepository.DeleteApplicationInput) (*serverlessapplicationrepository.DeleteApplicationOutput, error) {
	var output serverlessapplicationrepository.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) DeleteApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.DeleteApplicationInput) *ServerlessapplicationrepositoryDeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.DeleteApplication", input)
	return &ServerlessapplicationrepositoryDeleteApplicationFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) GetApplication(ctx workflow.Context, input *serverlessapplicationrepository.GetApplicationInput) (*serverlessapplicationrepository.GetApplicationOutput, error) {
	var output serverlessapplicationrepository.GetApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.GetApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) GetApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.GetApplicationInput) *ServerlessapplicationrepositoryGetApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.GetApplication", input)
	return &ServerlessapplicationrepositoryGetApplicationFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) GetApplicationPolicy(ctx workflow.Context, input *serverlessapplicationrepository.GetApplicationPolicyInput) (*serverlessapplicationrepository.GetApplicationPolicyOutput, error) {
	var output serverlessapplicationrepository.GetApplicationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.GetApplicationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) GetApplicationPolicyAsync(ctx workflow.Context, input *serverlessapplicationrepository.GetApplicationPolicyInput) *ServerlessapplicationrepositoryGetApplicationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.GetApplicationPolicy", input)
	return &ServerlessapplicationrepositoryGetApplicationPolicyFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) GetCloudFormationTemplate(ctx workflow.Context, input *serverlessapplicationrepository.GetCloudFormationTemplateInput) (*serverlessapplicationrepository.GetCloudFormationTemplateOutput, error) {
	var output serverlessapplicationrepository.GetCloudFormationTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.GetCloudFormationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) GetCloudFormationTemplateAsync(ctx workflow.Context, input *serverlessapplicationrepository.GetCloudFormationTemplateInput) *ServerlessapplicationrepositoryGetCloudFormationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.GetCloudFormationTemplate", input)
	return &ServerlessapplicationrepositoryGetCloudFormationTemplateFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) ListApplicationDependencies(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationDependenciesInput) (*serverlessapplicationrepository.ListApplicationDependenciesOutput, error) {
	var output serverlessapplicationrepository.ListApplicationDependenciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.ListApplicationDependencies", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) ListApplicationDependenciesAsync(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationDependenciesInput) *ServerlessapplicationrepositoryListApplicationDependenciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.ListApplicationDependencies", input)
	return &ServerlessapplicationrepositoryListApplicationDependenciesFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) ListApplicationVersions(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationVersionsInput) (*serverlessapplicationrepository.ListApplicationVersionsOutput, error) {
	var output serverlessapplicationrepository.ListApplicationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.ListApplicationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) ListApplicationVersionsAsync(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationVersionsInput) *ServerlessapplicationrepositoryListApplicationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.ListApplicationVersions", input)
	return &ServerlessapplicationrepositoryListApplicationVersionsFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) ListApplications(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationsInput) (*serverlessapplicationrepository.ListApplicationsOutput, error) {
	var output serverlessapplicationrepository.ListApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.ListApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) ListApplicationsAsync(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationsInput) *ServerlessapplicationrepositoryListApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.ListApplications", input)
	return &ServerlessapplicationrepositoryListApplicationsFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) PutApplicationPolicy(ctx workflow.Context, input *serverlessapplicationrepository.PutApplicationPolicyInput) (*serverlessapplicationrepository.PutApplicationPolicyOutput, error) {
	var output serverlessapplicationrepository.PutApplicationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.PutApplicationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) PutApplicationPolicyAsync(ctx workflow.Context, input *serverlessapplicationrepository.PutApplicationPolicyInput) *ServerlessapplicationrepositoryPutApplicationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.PutApplicationPolicy", input)
	return &ServerlessapplicationrepositoryPutApplicationPolicyFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) UnshareApplication(ctx workflow.Context, input *serverlessapplicationrepository.UnshareApplicationInput) (*serverlessapplicationrepository.UnshareApplicationOutput, error) {
	var output serverlessapplicationrepository.UnshareApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.UnshareApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) UnshareApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.UnshareApplicationInput) *ServerlessapplicationrepositoryUnshareApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.UnshareApplication", input)
	return &ServerlessapplicationrepositoryUnshareApplicationFuture{Future: future}
}

func (a *ServerlessApplicationRepositoryStub) UpdateApplication(ctx workflow.Context, input *serverlessapplicationrepository.UpdateApplicationRequest) (*serverlessapplicationrepository.UpdateApplicationOutput, error) {
	var output serverlessapplicationrepository.UpdateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *ServerlessApplicationRepositoryStub) UpdateApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.UpdateApplicationRequest) *ServerlessapplicationrepositoryUpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.serverlessapplicationrepository.UpdateApplication", input)
	return &ServerlessapplicationrepositoryUpdateApplicationFuture{Future: future}
}
