// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/storagegateway"
	"go.temporal.io/sdk/workflow"
)

type StorageGatewayClient interface {
	ActivateGateway(ctx workflow.Context, input *storagegateway.ActivateGatewayInput) (*storagegateway.ActivateGatewayOutput, error)
	ActivateGatewayAsync(ctx workflow.Context, input *storagegateway.ActivateGatewayInput) *StoragegatewayActivateGatewayFuture

	AddCache(ctx workflow.Context, input *storagegateway.AddCacheInput) (*storagegateway.AddCacheOutput, error)
	AddCacheAsync(ctx workflow.Context, input *storagegateway.AddCacheInput) *StoragegatewayAddCacheFuture

	AddTagsToResource(ctx workflow.Context, input *storagegateway.AddTagsToResourceInput) (*storagegateway.AddTagsToResourceOutput, error)
	AddTagsToResourceAsync(ctx workflow.Context, input *storagegateway.AddTagsToResourceInput) *StoragegatewayAddTagsToResourceFuture

	AddUploadBuffer(ctx workflow.Context, input *storagegateway.AddUploadBufferInput) (*storagegateway.AddUploadBufferOutput, error)
	AddUploadBufferAsync(ctx workflow.Context, input *storagegateway.AddUploadBufferInput) *StoragegatewayAddUploadBufferFuture

	AddWorkingStorage(ctx workflow.Context, input *storagegateway.AddWorkingStorageInput) (*storagegateway.AddWorkingStorageOutput, error)
	AddWorkingStorageAsync(ctx workflow.Context, input *storagegateway.AddWorkingStorageInput) *StoragegatewayAddWorkingStorageFuture

	AssignTapePool(ctx workflow.Context, input *storagegateway.AssignTapePoolInput) (*storagegateway.AssignTapePoolOutput, error)
	AssignTapePoolAsync(ctx workflow.Context, input *storagegateway.AssignTapePoolInput) *StoragegatewayAssignTapePoolFuture

	AttachVolume(ctx workflow.Context, input *storagegateway.AttachVolumeInput) (*storagegateway.AttachVolumeOutput, error)
	AttachVolumeAsync(ctx workflow.Context, input *storagegateway.AttachVolumeInput) *StoragegatewayAttachVolumeFuture

	CancelArchival(ctx workflow.Context, input *storagegateway.CancelArchivalInput) (*storagegateway.CancelArchivalOutput, error)
	CancelArchivalAsync(ctx workflow.Context, input *storagegateway.CancelArchivalInput) *StoragegatewayCancelArchivalFuture

	CancelRetrieval(ctx workflow.Context, input *storagegateway.CancelRetrievalInput) (*storagegateway.CancelRetrievalOutput, error)
	CancelRetrievalAsync(ctx workflow.Context, input *storagegateway.CancelRetrievalInput) *StoragegatewayCancelRetrievalFuture

	CreateCachediSCSIVolume(ctx workflow.Context, input *storagegateway.CreateCachediSCSIVolumeInput) (*storagegateway.CreateCachediSCSIVolumeOutput, error)
	CreateCachediSCSIVolumeAsync(ctx workflow.Context, input *storagegateway.CreateCachediSCSIVolumeInput) *StoragegatewayCreateCachediSCSIVolumeFuture

	CreateNFSFileShare(ctx workflow.Context, input *storagegateway.CreateNFSFileShareInput) (*storagegateway.CreateNFSFileShareOutput, error)
	CreateNFSFileShareAsync(ctx workflow.Context, input *storagegateway.CreateNFSFileShareInput) *StoragegatewayCreateNFSFileShareFuture

	CreateSMBFileShare(ctx workflow.Context, input *storagegateway.CreateSMBFileShareInput) (*storagegateway.CreateSMBFileShareOutput, error)
	CreateSMBFileShareAsync(ctx workflow.Context, input *storagegateway.CreateSMBFileShareInput) *StoragegatewayCreateSMBFileShareFuture

	CreateSnapshot(ctx workflow.Context, input *storagegateway.CreateSnapshotInput) (*storagegateway.CreateSnapshotOutput, error)
	CreateSnapshotAsync(ctx workflow.Context, input *storagegateway.CreateSnapshotInput) *StoragegatewayCreateSnapshotFuture

	CreateSnapshotFromVolumeRecoveryPoint(ctx workflow.Context, input *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput) (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, error)
	CreateSnapshotFromVolumeRecoveryPointAsync(ctx workflow.Context, input *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput) *StoragegatewayCreateSnapshotFromVolumeRecoveryPointFuture

	CreateStorediSCSIVolume(ctx workflow.Context, input *storagegateway.CreateStorediSCSIVolumeInput) (*storagegateway.CreateStorediSCSIVolumeOutput, error)
	CreateStorediSCSIVolumeAsync(ctx workflow.Context, input *storagegateway.CreateStorediSCSIVolumeInput) *StoragegatewayCreateStorediSCSIVolumeFuture

	CreateTapePool(ctx workflow.Context, input *storagegateway.CreateTapePoolInput) (*storagegateway.CreateTapePoolOutput, error)
	CreateTapePoolAsync(ctx workflow.Context, input *storagegateway.CreateTapePoolInput) *StoragegatewayCreateTapePoolFuture

	CreateTapeWithBarcode(ctx workflow.Context, input *storagegateway.CreateTapeWithBarcodeInput) (*storagegateway.CreateTapeWithBarcodeOutput, error)
	CreateTapeWithBarcodeAsync(ctx workflow.Context, input *storagegateway.CreateTapeWithBarcodeInput) *StoragegatewayCreateTapeWithBarcodeFuture

	CreateTapes(ctx workflow.Context, input *storagegateway.CreateTapesInput) (*storagegateway.CreateTapesOutput, error)
	CreateTapesAsync(ctx workflow.Context, input *storagegateway.CreateTapesInput) *StoragegatewayCreateTapesFuture

	DeleteAutomaticTapeCreationPolicy(ctx workflow.Context, input *storagegateway.DeleteAutomaticTapeCreationPolicyInput) (*storagegateway.DeleteAutomaticTapeCreationPolicyOutput, error)
	DeleteAutomaticTapeCreationPolicyAsync(ctx workflow.Context, input *storagegateway.DeleteAutomaticTapeCreationPolicyInput) *StoragegatewayDeleteAutomaticTapeCreationPolicyFuture

	DeleteBandwidthRateLimit(ctx workflow.Context, input *storagegateway.DeleteBandwidthRateLimitInput) (*storagegateway.DeleteBandwidthRateLimitOutput, error)
	DeleteBandwidthRateLimitAsync(ctx workflow.Context, input *storagegateway.DeleteBandwidthRateLimitInput) *StoragegatewayDeleteBandwidthRateLimitFuture

	DeleteChapCredentials(ctx workflow.Context, input *storagegateway.DeleteChapCredentialsInput) (*storagegateway.DeleteChapCredentialsOutput, error)
	DeleteChapCredentialsAsync(ctx workflow.Context, input *storagegateway.DeleteChapCredentialsInput) *StoragegatewayDeleteChapCredentialsFuture

	DeleteFileShare(ctx workflow.Context, input *storagegateway.DeleteFileShareInput) (*storagegateway.DeleteFileShareOutput, error)
	DeleteFileShareAsync(ctx workflow.Context, input *storagegateway.DeleteFileShareInput) *StoragegatewayDeleteFileShareFuture

	DeleteGateway(ctx workflow.Context, input *storagegateway.DeleteGatewayInput) (*storagegateway.DeleteGatewayOutput, error)
	DeleteGatewayAsync(ctx workflow.Context, input *storagegateway.DeleteGatewayInput) *StoragegatewayDeleteGatewayFuture

	DeleteSnapshotSchedule(ctx workflow.Context, input *storagegateway.DeleteSnapshotScheduleInput) (*storagegateway.DeleteSnapshotScheduleOutput, error)
	DeleteSnapshotScheduleAsync(ctx workflow.Context, input *storagegateway.DeleteSnapshotScheduleInput) *StoragegatewayDeleteSnapshotScheduleFuture

	DeleteTape(ctx workflow.Context, input *storagegateway.DeleteTapeInput) (*storagegateway.DeleteTapeOutput, error)
	DeleteTapeAsync(ctx workflow.Context, input *storagegateway.DeleteTapeInput) *StoragegatewayDeleteTapeFuture

	DeleteTapeArchive(ctx workflow.Context, input *storagegateway.DeleteTapeArchiveInput) (*storagegateway.DeleteTapeArchiveOutput, error)
	DeleteTapeArchiveAsync(ctx workflow.Context, input *storagegateway.DeleteTapeArchiveInput) *StoragegatewayDeleteTapeArchiveFuture

	DeleteTapePool(ctx workflow.Context, input *storagegateway.DeleteTapePoolInput) (*storagegateway.DeleteTapePoolOutput, error)
	DeleteTapePoolAsync(ctx workflow.Context, input *storagegateway.DeleteTapePoolInput) *StoragegatewayDeleteTapePoolFuture

	DeleteVolume(ctx workflow.Context, input *storagegateway.DeleteVolumeInput) (*storagegateway.DeleteVolumeOutput, error)
	DeleteVolumeAsync(ctx workflow.Context, input *storagegateway.DeleteVolumeInput) *StoragegatewayDeleteVolumeFuture

	DescribeAvailabilityMonitorTest(ctx workflow.Context, input *storagegateway.DescribeAvailabilityMonitorTestInput) (*storagegateway.DescribeAvailabilityMonitorTestOutput, error)
	DescribeAvailabilityMonitorTestAsync(ctx workflow.Context, input *storagegateway.DescribeAvailabilityMonitorTestInput) *StoragegatewayDescribeAvailabilityMonitorTestFuture

	DescribeBandwidthRateLimit(ctx workflow.Context, input *storagegateway.DescribeBandwidthRateLimitInput) (*storagegateway.DescribeBandwidthRateLimitOutput, error)
	DescribeBandwidthRateLimitAsync(ctx workflow.Context, input *storagegateway.DescribeBandwidthRateLimitInput) *StoragegatewayDescribeBandwidthRateLimitFuture

	DescribeCache(ctx workflow.Context, input *storagegateway.DescribeCacheInput) (*storagegateway.DescribeCacheOutput, error)
	DescribeCacheAsync(ctx workflow.Context, input *storagegateway.DescribeCacheInput) *StoragegatewayDescribeCacheFuture

	DescribeCachediSCSIVolumes(ctx workflow.Context, input *storagegateway.DescribeCachediSCSIVolumesInput) (*storagegateway.DescribeCachediSCSIVolumesOutput, error)
	DescribeCachediSCSIVolumesAsync(ctx workflow.Context, input *storagegateway.DescribeCachediSCSIVolumesInput) *StoragegatewayDescribeCachediSCSIVolumesFuture

	DescribeChapCredentials(ctx workflow.Context, input *storagegateway.DescribeChapCredentialsInput) (*storagegateway.DescribeChapCredentialsOutput, error)
	DescribeChapCredentialsAsync(ctx workflow.Context, input *storagegateway.DescribeChapCredentialsInput) *StoragegatewayDescribeChapCredentialsFuture

	DescribeGatewayInformation(ctx workflow.Context, input *storagegateway.DescribeGatewayInformationInput) (*storagegateway.DescribeGatewayInformationOutput, error)
	DescribeGatewayInformationAsync(ctx workflow.Context, input *storagegateway.DescribeGatewayInformationInput) *StoragegatewayDescribeGatewayInformationFuture

	DescribeMaintenanceStartTime(ctx workflow.Context, input *storagegateway.DescribeMaintenanceStartTimeInput) (*storagegateway.DescribeMaintenanceStartTimeOutput, error)
	DescribeMaintenanceStartTimeAsync(ctx workflow.Context, input *storagegateway.DescribeMaintenanceStartTimeInput) *StoragegatewayDescribeMaintenanceStartTimeFuture

	DescribeNFSFileShares(ctx workflow.Context, input *storagegateway.DescribeNFSFileSharesInput) (*storagegateway.DescribeNFSFileSharesOutput, error)
	DescribeNFSFileSharesAsync(ctx workflow.Context, input *storagegateway.DescribeNFSFileSharesInput) *StoragegatewayDescribeNFSFileSharesFuture

	DescribeSMBFileShares(ctx workflow.Context, input *storagegateway.DescribeSMBFileSharesInput) (*storagegateway.DescribeSMBFileSharesOutput, error)
	DescribeSMBFileSharesAsync(ctx workflow.Context, input *storagegateway.DescribeSMBFileSharesInput) *StoragegatewayDescribeSMBFileSharesFuture

	DescribeSMBSettings(ctx workflow.Context, input *storagegateway.DescribeSMBSettingsInput) (*storagegateway.DescribeSMBSettingsOutput, error)
	DescribeSMBSettingsAsync(ctx workflow.Context, input *storagegateway.DescribeSMBSettingsInput) *StoragegatewayDescribeSMBSettingsFuture

	DescribeSnapshotSchedule(ctx workflow.Context, input *storagegateway.DescribeSnapshotScheduleInput) (*storagegateway.DescribeSnapshotScheduleOutput, error)
	DescribeSnapshotScheduleAsync(ctx workflow.Context, input *storagegateway.DescribeSnapshotScheduleInput) *StoragegatewayDescribeSnapshotScheduleFuture

	DescribeStorediSCSIVolumes(ctx workflow.Context, input *storagegateway.DescribeStorediSCSIVolumesInput) (*storagegateway.DescribeStorediSCSIVolumesOutput, error)
	DescribeStorediSCSIVolumesAsync(ctx workflow.Context, input *storagegateway.DescribeStorediSCSIVolumesInput) *StoragegatewayDescribeStorediSCSIVolumesFuture

	DescribeTapeArchives(ctx workflow.Context, input *storagegateway.DescribeTapeArchivesInput) (*storagegateway.DescribeTapeArchivesOutput, error)
	DescribeTapeArchivesAsync(ctx workflow.Context, input *storagegateway.DescribeTapeArchivesInput) *StoragegatewayDescribeTapeArchivesFuture

	DescribeTapeRecoveryPoints(ctx workflow.Context, input *storagegateway.DescribeTapeRecoveryPointsInput) (*storagegateway.DescribeTapeRecoveryPointsOutput, error)
	DescribeTapeRecoveryPointsAsync(ctx workflow.Context, input *storagegateway.DescribeTapeRecoveryPointsInput) *StoragegatewayDescribeTapeRecoveryPointsFuture

	DescribeTapes(ctx workflow.Context, input *storagegateway.DescribeTapesInput) (*storagegateway.DescribeTapesOutput, error)
	DescribeTapesAsync(ctx workflow.Context, input *storagegateway.DescribeTapesInput) *StoragegatewayDescribeTapesFuture

	DescribeUploadBuffer(ctx workflow.Context, input *storagegateway.DescribeUploadBufferInput) (*storagegateway.DescribeUploadBufferOutput, error)
	DescribeUploadBufferAsync(ctx workflow.Context, input *storagegateway.DescribeUploadBufferInput) *StoragegatewayDescribeUploadBufferFuture

	DescribeVTLDevices(ctx workflow.Context, input *storagegateway.DescribeVTLDevicesInput) (*storagegateway.DescribeVTLDevicesOutput, error)
	DescribeVTLDevicesAsync(ctx workflow.Context, input *storagegateway.DescribeVTLDevicesInput) *StoragegatewayDescribeVTLDevicesFuture

	DescribeWorkingStorage(ctx workflow.Context, input *storagegateway.DescribeWorkingStorageInput) (*storagegateway.DescribeWorkingStorageOutput, error)
	DescribeWorkingStorageAsync(ctx workflow.Context, input *storagegateway.DescribeWorkingStorageInput) *StoragegatewayDescribeWorkingStorageFuture

	DetachVolume(ctx workflow.Context, input *storagegateway.DetachVolumeInput) (*storagegateway.DetachVolumeOutput, error)
	DetachVolumeAsync(ctx workflow.Context, input *storagegateway.DetachVolumeInput) *StoragegatewayDetachVolumeFuture

	DisableGateway(ctx workflow.Context, input *storagegateway.DisableGatewayInput) (*storagegateway.DisableGatewayOutput, error)
	DisableGatewayAsync(ctx workflow.Context, input *storagegateway.DisableGatewayInput) *StoragegatewayDisableGatewayFuture

	JoinDomain(ctx workflow.Context, input *storagegateway.JoinDomainInput) (*storagegateway.JoinDomainOutput, error)
	JoinDomainAsync(ctx workflow.Context, input *storagegateway.JoinDomainInput) *StoragegatewayJoinDomainFuture

	ListAutomaticTapeCreationPolicies(ctx workflow.Context, input *storagegateway.ListAutomaticTapeCreationPoliciesInput) (*storagegateway.ListAutomaticTapeCreationPoliciesOutput, error)
	ListAutomaticTapeCreationPoliciesAsync(ctx workflow.Context, input *storagegateway.ListAutomaticTapeCreationPoliciesInput) *StoragegatewayListAutomaticTapeCreationPoliciesFuture

	ListFileShares(ctx workflow.Context, input *storagegateway.ListFileSharesInput) (*storagegateway.ListFileSharesOutput, error)
	ListFileSharesAsync(ctx workflow.Context, input *storagegateway.ListFileSharesInput) *StoragegatewayListFileSharesFuture

	ListGateways(ctx workflow.Context, input *storagegateway.ListGatewaysInput) (*storagegateway.ListGatewaysOutput, error)
	ListGatewaysAsync(ctx workflow.Context, input *storagegateway.ListGatewaysInput) *StoragegatewayListGatewaysFuture

	ListLocalDisks(ctx workflow.Context, input *storagegateway.ListLocalDisksInput) (*storagegateway.ListLocalDisksOutput, error)
	ListLocalDisksAsync(ctx workflow.Context, input *storagegateway.ListLocalDisksInput) *StoragegatewayListLocalDisksFuture

	ListTagsForResource(ctx workflow.Context, input *storagegateway.ListTagsForResourceInput) (*storagegateway.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *storagegateway.ListTagsForResourceInput) *StoragegatewayListTagsForResourceFuture

	ListTapePools(ctx workflow.Context, input *storagegateway.ListTapePoolsInput) (*storagegateway.ListTapePoolsOutput, error)
	ListTapePoolsAsync(ctx workflow.Context, input *storagegateway.ListTapePoolsInput) *StoragegatewayListTapePoolsFuture

	ListTapes(ctx workflow.Context, input *storagegateway.ListTapesInput) (*storagegateway.ListTapesOutput, error)
	ListTapesAsync(ctx workflow.Context, input *storagegateway.ListTapesInput) *StoragegatewayListTapesFuture

	ListVolumeInitiators(ctx workflow.Context, input *storagegateway.ListVolumeInitiatorsInput) (*storagegateway.ListVolumeInitiatorsOutput, error)
	ListVolumeInitiatorsAsync(ctx workflow.Context, input *storagegateway.ListVolumeInitiatorsInput) *StoragegatewayListVolumeInitiatorsFuture

	ListVolumeRecoveryPoints(ctx workflow.Context, input *storagegateway.ListVolumeRecoveryPointsInput) (*storagegateway.ListVolumeRecoveryPointsOutput, error)
	ListVolumeRecoveryPointsAsync(ctx workflow.Context, input *storagegateway.ListVolumeRecoveryPointsInput) *StoragegatewayListVolumeRecoveryPointsFuture

	ListVolumes(ctx workflow.Context, input *storagegateway.ListVolumesInput) (*storagegateway.ListVolumesOutput, error)
	ListVolumesAsync(ctx workflow.Context, input *storagegateway.ListVolumesInput) *StoragegatewayListVolumesFuture

	NotifyWhenUploaded(ctx workflow.Context, input *storagegateway.NotifyWhenUploadedInput) (*storagegateway.NotifyWhenUploadedOutput, error)
	NotifyWhenUploadedAsync(ctx workflow.Context, input *storagegateway.NotifyWhenUploadedInput) *StoragegatewayNotifyWhenUploadedFuture

	RefreshCache(ctx workflow.Context, input *storagegateway.RefreshCacheInput) (*storagegateway.RefreshCacheOutput, error)
	RefreshCacheAsync(ctx workflow.Context, input *storagegateway.RefreshCacheInput) *StoragegatewayRefreshCacheFuture

	RemoveTagsFromResource(ctx workflow.Context, input *storagegateway.RemoveTagsFromResourceInput) (*storagegateway.RemoveTagsFromResourceOutput, error)
	RemoveTagsFromResourceAsync(ctx workflow.Context, input *storagegateway.RemoveTagsFromResourceInput) *StoragegatewayRemoveTagsFromResourceFuture

	ResetCache(ctx workflow.Context, input *storagegateway.ResetCacheInput) (*storagegateway.ResetCacheOutput, error)
	ResetCacheAsync(ctx workflow.Context, input *storagegateway.ResetCacheInput) *StoragegatewayResetCacheFuture

	RetrieveTapeArchive(ctx workflow.Context, input *storagegateway.RetrieveTapeArchiveInput) (*storagegateway.RetrieveTapeArchiveOutput, error)
	RetrieveTapeArchiveAsync(ctx workflow.Context, input *storagegateway.RetrieveTapeArchiveInput) *StoragegatewayRetrieveTapeArchiveFuture

	RetrieveTapeRecoveryPoint(ctx workflow.Context, input *storagegateway.RetrieveTapeRecoveryPointInput) (*storagegateway.RetrieveTapeRecoveryPointOutput, error)
	RetrieveTapeRecoveryPointAsync(ctx workflow.Context, input *storagegateway.RetrieveTapeRecoveryPointInput) *StoragegatewayRetrieveTapeRecoveryPointFuture

	SetLocalConsolePassword(ctx workflow.Context, input *storagegateway.SetLocalConsolePasswordInput) (*storagegateway.SetLocalConsolePasswordOutput, error)
	SetLocalConsolePasswordAsync(ctx workflow.Context, input *storagegateway.SetLocalConsolePasswordInput) *StoragegatewaySetLocalConsolePasswordFuture

	SetSMBGuestPassword(ctx workflow.Context, input *storagegateway.SetSMBGuestPasswordInput) (*storagegateway.SetSMBGuestPasswordOutput, error)
	SetSMBGuestPasswordAsync(ctx workflow.Context, input *storagegateway.SetSMBGuestPasswordInput) *StoragegatewaySetSMBGuestPasswordFuture

	ShutdownGateway(ctx workflow.Context, input *storagegateway.ShutdownGatewayInput) (*storagegateway.ShutdownGatewayOutput, error)
	ShutdownGatewayAsync(ctx workflow.Context, input *storagegateway.ShutdownGatewayInput) *StoragegatewayShutdownGatewayFuture

	StartAvailabilityMonitorTest(ctx workflow.Context, input *storagegateway.StartAvailabilityMonitorTestInput) (*storagegateway.StartAvailabilityMonitorTestOutput, error)
	StartAvailabilityMonitorTestAsync(ctx workflow.Context, input *storagegateway.StartAvailabilityMonitorTestInput) *StoragegatewayStartAvailabilityMonitorTestFuture

	StartGateway(ctx workflow.Context, input *storagegateway.StartGatewayInput) (*storagegateway.StartGatewayOutput, error)
	StartGatewayAsync(ctx workflow.Context, input *storagegateway.StartGatewayInput) *StoragegatewayStartGatewayFuture

	UpdateAutomaticTapeCreationPolicy(ctx workflow.Context, input *storagegateway.UpdateAutomaticTapeCreationPolicyInput) (*storagegateway.UpdateAutomaticTapeCreationPolicyOutput, error)
	UpdateAutomaticTapeCreationPolicyAsync(ctx workflow.Context, input *storagegateway.UpdateAutomaticTapeCreationPolicyInput) *StoragegatewayUpdateAutomaticTapeCreationPolicyFuture

	UpdateBandwidthRateLimit(ctx workflow.Context, input *storagegateway.UpdateBandwidthRateLimitInput) (*storagegateway.UpdateBandwidthRateLimitOutput, error)
	UpdateBandwidthRateLimitAsync(ctx workflow.Context, input *storagegateway.UpdateBandwidthRateLimitInput) *StoragegatewayUpdateBandwidthRateLimitFuture

	UpdateChapCredentials(ctx workflow.Context, input *storagegateway.UpdateChapCredentialsInput) (*storagegateway.UpdateChapCredentialsOutput, error)
	UpdateChapCredentialsAsync(ctx workflow.Context, input *storagegateway.UpdateChapCredentialsInput) *StoragegatewayUpdateChapCredentialsFuture

	UpdateGatewayInformation(ctx workflow.Context, input *storagegateway.UpdateGatewayInformationInput) (*storagegateway.UpdateGatewayInformationOutput, error)
	UpdateGatewayInformationAsync(ctx workflow.Context, input *storagegateway.UpdateGatewayInformationInput) *StoragegatewayUpdateGatewayInformationFuture

	UpdateGatewaySoftwareNow(ctx workflow.Context, input *storagegateway.UpdateGatewaySoftwareNowInput) (*storagegateway.UpdateGatewaySoftwareNowOutput, error)
	UpdateGatewaySoftwareNowAsync(ctx workflow.Context, input *storagegateway.UpdateGatewaySoftwareNowInput) *StoragegatewayUpdateGatewaySoftwareNowFuture

	UpdateMaintenanceStartTime(ctx workflow.Context, input *storagegateway.UpdateMaintenanceStartTimeInput) (*storagegateway.UpdateMaintenanceStartTimeOutput, error)
	UpdateMaintenanceStartTimeAsync(ctx workflow.Context, input *storagegateway.UpdateMaintenanceStartTimeInput) *StoragegatewayUpdateMaintenanceStartTimeFuture

	UpdateNFSFileShare(ctx workflow.Context, input *storagegateway.UpdateNFSFileShareInput) (*storagegateway.UpdateNFSFileShareOutput, error)
	UpdateNFSFileShareAsync(ctx workflow.Context, input *storagegateway.UpdateNFSFileShareInput) *StoragegatewayUpdateNFSFileShareFuture

	UpdateSMBFileShare(ctx workflow.Context, input *storagegateway.UpdateSMBFileShareInput) (*storagegateway.UpdateSMBFileShareOutput, error)
	UpdateSMBFileShareAsync(ctx workflow.Context, input *storagegateway.UpdateSMBFileShareInput) *StoragegatewayUpdateSMBFileShareFuture

	UpdateSMBSecurityStrategy(ctx workflow.Context, input *storagegateway.UpdateSMBSecurityStrategyInput) (*storagegateway.UpdateSMBSecurityStrategyOutput, error)
	UpdateSMBSecurityStrategyAsync(ctx workflow.Context, input *storagegateway.UpdateSMBSecurityStrategyInput) *StoragegatewayUpdateSMBSecurityStrategyFuture

	UpdateSnapshotSchedule(ctx workflow.Context, input *storagegateway.UpdateSnapshotScheduleInput) (*storagegateway.UpdateSnapshotScheduleOutput, error)
	UpdateSnapshotScheduleAsync(ctx workflow.Context, input *storagegateway.UpdateSnapshotScheduleInput) *StoragegatewayUpdateSnapshotScheduleFuture

	UpdateVTLDeviceType(ctx workflow.Context, input *storagegateway.UpdateVTLDeviceTypeInput) (*storagegateway.UpdateVTLDeviceTypeOutput, error)
	UpdateVTLDeviceTypeAsync(ctx workflow.Context, input *storagegateway.UpdateVTLDeviceTypeInput) *StoragegatewayUpdateVTLDeviceTypeFuture
}

type StorageGatewayStub struct{}

func NewStorageGatewayStub() StorageGatewayClient {
	return &StorageGatewayStub{}
}

type StoragegatewayActivateGatewayFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayActivateGatewayFuture) Get(ctx workflow.Context) (*storagegateway.ActivateGatewayOutput, error) {
	var output storagegateway.ActivateGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayAddCacheFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayAddCacheFuture) Get(ctx workflow.Context) (*storagegateway.AddCacheOutput, error) {
	var output storagegateway.AddCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayAddTagsToResourceFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayAddTagsToResourceFuture) Get(ctx workflow.Context) (*storagegateway.AddTagsToResourceOutput, error) {
	var output storagegateway.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayAddUploadBufferFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayAddUploadBufferFuture) Get(ctx workflow.Context) (*storagegateway.AddUploadBufferOutput, error) {
	var output storagegateway.AddUploadBufferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayAddWorkingStorageFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayAddWorkingStorageFuture) Get(ctx workflow.Context) (*storagegateway.AddWorkingStorageOutput, error) {
	var output storagegateway.AddWorkingStorageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayAssignTapePoolFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayAssignTapePoolFuture) Get(ctx workflow.Context) (*storagegateway.AssignTapePoolOutput, error) {
	var output storagegateway.AssignTapePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayAttachVolumeFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayAttachVolumeFuture) Get(ctx workflow.Context) (*storagegateway.AttachVolumeOutput, error) {
	var output storagegateway.AttachVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayCancelArchivalFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayCancelArchivalFuture) Get(ctx workflow.Context) (*storagegateway.CancelArchivalOutput, error) {
	var output storagegateway.CancelArchivalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayCancelRetrievalFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayCancelRetrievalFuture) Get(ctx workflow.Context) (*storagegateway.CancelRetrievalOutput, error) {
	var output storagegateway.CancelRetrievalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayCreateCachediSCSIVolumeFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayCreateCachediSCSIVolumeFuture) Get(ctx workflow.Context) (*storagegateway.CreateCachediSCSIVolumeOutput, error) {
	var output storagegateway.CreateCachediSCSIVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayCreateNFSFileShareFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayCreateNFSFileShareFuture) Get(ctx workflow.Context) (*storagegateway.CreateNFSFileShareOutput, error) {
	var output storagegateway.CreateNFSFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayCreateSMBFileShareFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayCreateSMBFileShareFuture) Get(ctx workflow.Context) (*storagegateway.CreateSMBFileShareOutput, error) {
	var output storagegateway.CreateSMBFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayCreateSnapshotFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayCreateSnapshotFuture) Get(ctx workflow.Context) (*storagegateway.CreateSnapshotOutput, error) {
	var output storagegateway.CreateSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayCreateSnapshotFromVolumeRecoveryPointFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayCreateSnapshotFromVolumeRecoveryPointFuture) Get(ctx workflow.Context) (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, error) {
	var output storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayCreateStorediSCSIVolumeFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayCreateStorediSCSIVolumeFuture) Get(ctx workflow.Context) (*storagegateway.CreateStorediSCSIVolumeOutput, error) {
	var output storagegateway.CreateStorediSCSIVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayCreateTapePoolFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayCreateTapePoolFuture) Get(ctx workflow.Context) (*storagegateway.CreateTapePoolOutput, error) {
	var output storagegateway.CreateTapePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayCreateTapeWithBarcodeFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayCreateTapeWithBarcodeFuture) Get(ctx workflow.Context) (*storagegateway.CreateTapeWithBarcodeOutput, error) {
	var output storagegateway.CreateTapeWithBarcodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayCreateTapesFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayCreateTapesFuture) Get(ctx workflow.Context) (*storagegateway.CreateTapesOutput, error) {
	var output storagegateway.CreateTapesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDeleteAutomaticTapeCreationPolicyFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDeleteAutomaticTapeCreationPolicyFuture) Get(ctx workflow.Context) (*storagegateway.DeleteAutomaticTapeCreationPolicyOutput, error) {
	var output storagegateway.DeleteAutomaticTapeCreationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDeleteBandwidthRateLimitFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDeleteBandwidthRateLimitFuture) Get(ctx workflow.Context) (*storagegateway.DeleteBandwidthRateLimitOutput, error) {
	var output storagegateway.DeleteBandwidthRateLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDeleteChapCredentialsFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDeleteChapCredentialsFuture) Get(ctx workflow.Context) (*storagegateway.DeleteChapCredentialsOutput, error) {
	var output storagegateway.DeleteChapCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDeleteFileShareFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDeleteFileShareFuture) Get(ctx workflow.Context) (*storagegateway.DeleteFileShareOutput, error) {
	var output storagegateway.DeleteFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDeleteGatewayFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDeleteGatewayFuture) Get(ctx workflow.Context) (*storagegateway.DeleteGatewayOutput, error) {
	var output storagegateway.DeleteGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDeleteSnapshotScheduleFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDeleteSnapshotScheduleFuture) Get(ctx workflow.Context) (*storagegateway.DeleteSnapshotScheduleOutput, error) {
	var output storagegateway.DeleteSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDeleteTapeFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDeleteTapeFuture) Get(ctx workflow.Context) (*storagegateway.DeleteTapeOutput, error) {
	var output storagegateway.DeleteTapeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDeleteTapeArchiveFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDeleteTapeArchiveFuture) Get(ctx workflow.Context) (*storagegateway.DeleteTapeArchiveOutput, error) {
	var output storagegateway.DeleteTapeArchiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDeleteTapePoolFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDeleteTapePoolFuture) Get(ctx workflow.Context) (*storagegateway.DeleteTapePoolOutput, error) {
	var output storagegateway.DeleteTapePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDeleteVolumeFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDeleteVolumeFuture) Get(ctx workflow.Context) (*storagegateway.DeleteVolumeOutput, error) {
	var output storagegateway.DeleteVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeAvailabilityMonitorTestFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeAvailabilityMonitorTestFuture) Get(ctx workflow.Context) (*storagegateway.DescribeAvailabilityMonitorTestOutput, error) {
	var output storagegateway.DescribeAvailabilityMonitorTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeBandwidthRateLimitFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeBandwidthRateLimitFuture) Get(ctx workflow.Context) (*storagegateway.DescribeBandwidthRateLimitOutput, error) {
	var output storagegateway.DescribeBandwidthRateLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeCacheFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeCacheFuture) Get(ctx workflow.Context) (*storagegateway.DescribeCacheOutput, error) {
	var output storagegateway.DescribeCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeCachediSCSIVolumesFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeCachediSCSIVolumesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeCachediSCSIVolumesOutput, error) {
	var output storagegateway.DescribeCachediSCSIVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeChapCredentialsFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeChapCredentialsFuture) Get(ctx workflow.Context) (*storagegateway.DescribeChapCredentialsOutput, error) {
	var output storagegateway.DescribeChapCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeGatewayInformationFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeGatewayInformationFuture) Get(ctx workflow.Context) (*storagegateway.DescribeGatewayInformationOutput, error) {
	var output storagegateway.DescribeGatewayInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeMaintenanceStartTimeFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeMaintenanceStartTimeFuture) Get(ctx workflow.Context) (*storagegateway.DescribeMaintenanceStartTimeOutput, error) {
	var output storagegateway.DescribeMaintenanceStartTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeNFSFileSharesFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeNFSFileSharesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeNFSFileSharesOutput, error) {
	var output storagegateway.DescribeNFSFileSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeSMBFileSharesFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeSMBFileSharesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeSMBFileSharesOutput, error) {
	var output storagegateway.DescribeSMBFileSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeSMBSettingsFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeSMBSettingsFuture) Get(ctx workflow.Context) (*storagegateway.DescribeSMBSettingsOutput, error) {
	var output storagegateway.DescribeSMBSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeSnapshotScheduleFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeSnapshotScheduleFuture) Get(ctx workflow.Context) (*storagegateway.DescribeSnapshotScheduleOutput, error) {
	var output storagegateway.DescribeSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeStorediSCSIVolumesFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeStorediSCSIVolumesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeStorediSCSIVolumesOutput, error) {
	var output storagegateway.DescribeStorediSCSIVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeTapeArchivesFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeTapeArchivesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeTapeArchivesOutput, error) {
	var output storagegateway.DescribeTapeArchivesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeTapeRecoveryPointsFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeTapeRecoveryPointsFuture) Get(ctx workflow.Context) (*storagegateway.DescribeTapeRecoveryPointsOutput, error) {
	var output storagegateway.DescribeTapeRecoveryPointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeTapesFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeTapesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeTapesOutput, error) {
	var output storagegateway.DescribeTapesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeUploadBufferFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeUploadBufferFuture) Get(ctx workflow.Context) (*storagegateway.DescribeUploadBufferOutput, error) {
	var output storagegateway.DescribeUploadBufferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeVTLDevicesFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeVTLDevicesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeVTLDevicesOutput, error) {
	var output storagegateway.DescribeVTLDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDescribeWorkingStorageFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDescribeWorkingStorageFuture) Get(ctx workflow.Context) (*storagegateway.DescribeWorkingStorageOutput, error) {
	var output storagegateway.DescribeWorkingStorageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDetachVolumeFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDetachVolumeFuture) Get(ctx workflow.Context) (*storagegateway.DetachVolumeOutput, error) {
	var output storagegateway.DetachVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayDisableGatewayFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayDisableGatewayFuture) Get(ctx workflow.Context) (*storagegateway.DisableGatewayOutput, error) {
	var output storagegateway.DisableGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayJoinDomainFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayJoinDomainFuture) Get(ctx workflow.Context) (*storagegateway.JoinDomainOutput, error) {
	var output storagegateway.JoinDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayListAutomaticTapeCreationPoliciesFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayListAutomaticTapeCreationPoliciesFuture) Get(ctx workflow.Context) (*storagegateway.ListAutomaticTapeCreationPoliciesOutput, error) {
	var output storagegateway.ListAutomaticTapeCreationPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayListFileSharesFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayListFileSharesFuture) Get(ctx workflow.Context) (*storagegateway.ListFileSharesOutput, error) {
	var output storagegateway.ListFileSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayListGatewaysFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayListGatewaysFuture) Get(ctx workflow.Context) (*storagegateway.ListGatewaysOutput, error) {
	var output storagegateway.ListGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayListLocalDisksFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayListLocalDisksFuture) Get(ctx workflow.Context) (*storagegateway.ListLocalDisksOutput, error) {
	var output storagegateway.ListLocalDisksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayListTagsForResourceFuture) Get(ctx workflow.Context) (*storagegateway.ListTagsForResourceOutput, error) {
	var output storagegateway.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayListTapePoolsFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayListTapePoolsFuture) Get(ctx workflow.Context) (*storagegateway.ListTapePoolsOutput, error) {
	var output storagegateway.ListTapePoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayListTapesFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayListTapesFuture) Get(ctx workflow.Context) (*storagegateway.ListTapesOutput, error) {
	var output storagegateway.ListTapesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayListVolumeInitiatorsFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayListVolumeInitiatorsFuture) Get(ctx workflow.Context) (*storagegateway.ListVolumeInitiatorsOutput, error) {
	var output storagegateway.ListVolumeInitiatorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayListVolumeRecoveryPointsFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayListVolumeRecoveryPointsFuture) Get(ctx workflow.Context) (*storagegateway.ListVolumeRecoveryPointsOutput, error) {
	var output storagegateway.ListVolumeRecoveryPointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayListVolumesFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayListVolumesFuture) Get(ctx workflow.Context) (*storagegateway.ListVolumesOutput, error) {
	var output storagegateway.ListVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayNotifyWhenUploadedFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayNotifyWhenUploadedFuture) Get(ctx workflow.Context) (*storagegateway.NotifyWhenUploadedOutput, error) {
	var output storagegateway.NotifyWhenUploadedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayRefreshCacheFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayRefreshCacheFuture) Get(ctx workflow.Context) (*storagegateway.RefreshCacheOutput, error) {
	var output storagegateway.RefreshCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayRemoveTagsFromResourceFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*storagegateway.RemoveTagsFromResourceOutput, error) {
	var output storagegateway.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayResetCacheFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayResetCacheFuture) Get(ctx workflow.Context) (*storagegateway.ResetCacheOutput, error) {
	var output storagegateway.ResetCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayRetrieveTapeArchiveFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayRetrieveTapeArchiveFuture) Get(ctx workflow.Context) (*storagegateway.RetrieveTapeArchiveOutput, error) {
	var output storagegateway.RetrieveTapeArchiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayRetrieveTapeRecoveryPointFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayRetrieveTapeRecoveryPointFuture) Get(ctx workflow.Context) (*storagegateway.RetrieveTapeRecoveryPointOutput, error) {
	var output storagegateway.RetrieveTapeRecoveryPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewaySetLocalConsolePasswordFuture struct {
	Future workflow.Future
}

func (r *StoragegatewaySetLocalConsolePasswordFuture) Get(ctx workflow.Context) (*storagegateway.SetLocalConsolePasswordOutput, error) {
	var output storagegateway.SetLocalConsolePasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewaySetSMBGuestPasswordFuture struct {
	Future workflow.Future
}

func (r *StoragegatewaySetSMBGuestPasswordFuture) Get(ctx workflow.Context) (*storagegateway.SetSMBGuestPasswordOutput, error) {
	var output storagegateway.SetSMBGuestPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayShutdownGatewayFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayShutdownGatewayFuture) Get(ctx workflow.Context) (*storagegateway.ShutdownGatewayOutput, error) {
	var output storagegateway.ShutdownGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayStartAvailabilityMonitorTestFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayStartAvailabilityMonitorTestFuture) Get(ctx workflow.Context) (*storagegateway.StartAvailabilityMonitorTestOutput, error) {
	var output storagegateway.StartAvailabilityMonitorTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayStartGatewayFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayStartGatewayFuture) Get(ctx workflow.Context) (*storagegateway.StartGatewayOutput, error) {
	var output storagegateway.StartGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayUpdateAutomaticTapeCreationPolicyFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayUpdateAutomaticTapeCreationPolicyFuture) Get(ctx workflow.Context) (*storagegateway.UpdateAutomaticTapeCreationPolicyOutput, error) {
	var output storagegateway.UpdateAutomaticTapeCreationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayUpdateBandwidthRateLimitFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayUpdateBandwidthRateLimitFuture) Get(ctx workflow.Context) (*storagegateway.UpdateBandwidthRateLimitOutput, error) {
	var output storagegateway.UpdateBandwidthRateLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayUpdateChapCredentialsFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayUpdateChapCredentialsFuture) Get(ctx workflow.Context) (*storagegateway.UpdateChapCredentialsOutput, error) {
	var output storagegateway.UpdateChapCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayUpdateGatewayInformationFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayUpdateGatewayInformationFuture) Get(ctx workflow.Context) (*storagegateway.UpdateGatewayInformationOutput, error) {
	var output storagegateway.UpdateGatewayInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayUpdateGatewaySoftwareNowFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayUpdateGatewaySoftwareNowFuture) Get(ctx workflow.Context) (*storagegateway.UpdateGatewaySoftwareNowOutput, error) {
	var output storagegateway.UpdateGatewaySoftwareNowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayUpdateMaintenanceStartTimeFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayUpdateMaintenanceStartTimeFuture) Get(ctx workflow.Context) (*storagegateway.UpdateMaintenanceStartTimeOutput, error) {
	var output storagegateway.UpdateMaintenanceStartTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayUpdateNFSFileShareFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayUpdateNFSFileShareFuture) Get(ctx workflow.Context) (*storagegateway.UpdateNFSFileShareOutput, error) {
	var output storagegateway.UpdateNFSFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayUpdateSMBFileShareFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayUpdateSMBFileShareFuture) Get(ctx workflow.Context) (*storagegateway.UpdateSMBFileShareOutput, error) {
	var output storagegateway.UpdateSMBFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayUpdateSMBSecurityStrategyFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayUpdateSMBSecurityStrategyFuture) Get(ctx workflow.Context) (*storagegateway.UpdateSMBSecurityStrategyOutput, error) {
	var output storagegateway.UpdateSMBSecurityStrategyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayUpdateSnapshotScheduleFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayUpdateSnapshotScheduleFuture) Get(ctx workflow.Context) (*storagegateway.UpdateSnapshotScheduleOutput, error) {
	var output storagegateway.UpdateSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StoragegatewayUpdateVTLDeviceTypeFuture struct {
	Future workflow.Future
}

func (r *StoragegatewayUpdateVTLDeviceTypeFuture) Get(ctx workflow.Context) (*storagegateway.UpdateVTLDeviceTypeOutput, error) {
	var output storagegateway.UpdateVTLDeviceTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ActivateGateway(ctx workflow.Context, input *storagegateway.ActivateGatewayInput) (*storagegateway.ActivateGatewayOutput, error) {
	var output storagegateway.ActivateGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ActivateGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ActivateGatewayAsync(ctx workflow.Context, input *storagegateway.ActivateGatewayInput) *StoragegatewayActivateGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ActivateGateway", input)
	return &StoragegatewayActivateGatewayFuture{Future: future}
}

func (a *StorageGatewayStub) AddCache(ctx workflow.Context, input *storagegateway.AddCacheInput) (*storagegateway.AddCacheOutput, error) {
	var output storagegateway.AddCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.AddCache", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) AddCacheAsync(ctx workflow.Context, input *storagegateway.AddCacheInput) *StoragegatewayAddCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.AddCache", input)
	return &StoragegatewayAddCacheFuture{Future: future}
}

func (a *StorageGatewayStub) AddTagsToResource(ctx workflow.Context, input *storagegateway.AddTagsToResourceInput) (*storagegateway.AddTagsToResourceOutput, error) {
	var output storagegateway.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) AddTagsToResourceAsync(ctx workflow.Context, input *storagegateway.AddTagsToResourceInput) *StoragegatewayAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.AddTagsToResource", input)
	return &StoragegatewayAddTagsToResourceFuture{Future: future}
}

func (a *StorageGatewayStub) AddUploadBuffer(ctx workflow.Context, input *storagegateway.AddUploadBufferInput) (*storagegateway.AddUploadBufferOutput, error) {
	var output storagegateway.AddUploadBufferOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.AddUploadBuffer", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) AddUploadBufferAsync(ctx workflow.Context, input *storagegateway.AddUploadBufferInput) *StoragegatewayAddUploadBufferFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.AddUploadBuffer", input)
	return &StoragegatewayAddUploadBufferFuture{Future: future}
}

func (a *StorageGatewayStub) AddWorkingStorage(ctx workflow.Context, input *storagegateway.AddWorkingStorageInput) (*storagegateway.AddWorkingStorageOutput, error) {
	var output storagegateway.AddWorkingStorageOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.AddWorkingStorage", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) AddWorkingStorageAsync(ctx workflow.Context, input *storagegateway.AddWorkingStorageInput) *StoragegatewayAddWorkingStorageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.AddWorkingStorage", input)
	return &StoragegatewayAddWorkingStorageFuture{Future: future}
}

func (a *StorageGatewayStub) AssignTapePool(ctx workflow.Context, input *storagegateway.AssignTapePoolInput) (*storagegateway.AssignTapePoolOutput, error) {
	var output storagegateway.AssignTapePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.AssignTapePool", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) AssignTapePoolAsync(ctx workflow.Context, input *storagegateway.AssignTapePoolInput) *StoragegatewayAssignTapePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.AssignTapePool", input)
	return &StoragegatewayAssignTapePoolFuture{Future: future}
}

func (a *StorageGatewayStub) AttachVolume(ctx workflow.Context, input *storagegateway.AttachVolumeInput) (*storagegateway.AttachVolumeOutput, error) {
	var output storagegateway.AttachVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.AttachVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) AttachVolumeAsync(ctx workflow.Context, input *storagegateway.AttachVolumeInput) *StoragegatewayAttachVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.AttachVolume", input)
	return &StoragegatewayAttachVolumeFuture{Future: future}
}

func (a *StorageGatewayStub) CancelArchival(ctx workflow.Context, input *storagegateway.CancelArchivalInput) (*storagegateway.CancelArchivalOutput, error) {
	var output storagegateway.CancelArchivalOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.CancelArchival", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) CancelArchivalAsync(ctx workflow.Context, input *storagegateway.CancelArchivalInput) *StoragegatewayCancelArchivalFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.CancelArchival", input)
	return &StoragegatewayCancelArchivalFuture{Future: future}
}

func (a *StorageGatewayStub) CancelRetrieval(ctx workflow.Context, input *storagegateway.CancelRetrievalInput) (*storagegateway.CancelRetrievalOutput, error) {
	var output storagegateway.CancelRetrievalOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.CancelRetrieval", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) CancelRetrievalAsync(ctx workflow.Context, input *storagegateway.CancelRetrievalInput) *StoragegatewayCancelRetrievalFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.CancelRetrieval", input)
	return &StoragegatewayCancelRetrievalFuture{Future: future}
}

func (a *StorageGatewayStub) CreateCachediSCSIVolume(ctx workflow.Context, input *storagegateway.CreateCachediSCSIVolumeInput) (*storagegateway.CreateCachediSCSIVolumeOutput, error) {
	var output storagegateway.CreateCachediSCSIVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateCachediSCSIVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) CreateCachediSCSIVolumeAsync(ctx workflow.Context, input *storagegateway.CreateCachediSCSIVolumeInput) *StoragegatewayCreateCachediSCSIVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateCachediSCSIVolume", input)
	return &StoragegatewayCreateCachediSCSIVolumeFuture{Future: future}
}

func (a *StorageGatewayStub) CreateNFSFileShare(ctx workflow.Context, input *storagegateway.CreateNFSFileShareInput) (*storagegateway.CreateNFSFileShareOutput, error) {
	var output storagegateway.CreateNFSFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateNFSFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) CreateNFSFileShareAsync(ctx workflow.Context, input *storagegateway.CreateNFSFileShareInput) *StoragegatewayCreateNFSFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateNFSFileShare", input)
	return &StoragegatewayCreateNFSFileShareFuture{Future: future}
}

func (a *StorageGatewayStub) CreateSMBFileShare(ctx workflow.Context, input *storagegateway.CreateSMBFileShareInput) (*storagegateway.CreateSMBFileShareOutput, error) {
	var output storagegateway.CreateSMBFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateSMBFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) CreateSMBFileShareAsync(ctx workflow.Context, input *storagegateway.CreateSMBFileShareInput) *StoragegatewayCreateSMBFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateSMBFileShare", input)
	return &StoragegatewayCreateSMBFileShareFuture{Future: future}
}

func (a *StorageGatewayStub) CreateSnapshot(ctx workflow.Context, input *storagegateway.CreateSnapshotInput) (*storagegateway.CreateSnapshotOutput, error) {
	var output storagegateway.CreateSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) CreateSnapshotAsync(ctx workflow.Context, input *storagegateway.CreateSnapshotInput) *StoragegatewayCreateSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateSnapshot", input)
	return &StoragegatewayCreateSnapshotFuture{Future: future}
}

func (a *StorageGatewayStub) CreateSnapshotFromVolumeRecoveryPoint(ctx workflow.Context, input *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput) (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, error) {
	var output storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateSnapshotFromVolumeRecoveryPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) CreateSnapshotFromVolumeRecoveryPointAsync(ctx workflow.Context, input *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput) *StoragegatewayCreateSnapshotFromVolumeRecoveryPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateSnapshotFromVolumeRecoveryPoint", input)
	return &StoragegatewayCreateSnapshotFromVolumeRecoveryPointFuture{Future: future}
}

func (a *StorageGatewayStub) CreateStorediSCSIVolume(ctx workflow.Context, input *storagegateway.CreateStorediSCSIVolumeInput) (*storagegateway.CreateStorediSCSIVolumeOutput, error) {
	var output storagegateway.CreateStorediSCSIVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateStorediSCSIVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) CreateStorediSCSIVolumeAsync(ctx workflow.Context, input *storagegateway.CreateStorediSCSIVolumeInput) *StoragegatewayCreateStorediSCSIVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateStorediSCSIVolume", input)
	return &StoragegatewayCreateStorediSCSIVolumeFuture{Future: future}
}

func (a *StorageGatewayStub) CreateTapePool(ctx workflow.Context, input *storagegateway.CreateTapePoolInput) (*storagegateway.CreateTapePoolOutput, error) {
	var output storagegateway.CreateTapePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateTapePool", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) CreateTapePoolAsync(ctx workflow.Context, input *storagegateway.CreateTapePoolInput) *StoragegatewayCreateTapePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateTapePool", input)
	return &StoragegatewayCreateTapePoolFuture{Future: future}
}

func (a *StorageGatewayStub) CreateTapeWithBarcode(ctx workflow.Context, input *storagegateway.CreateTapeWithBarcodeInput) (*storagegateway.CreateTapeWithBarcodeOutput, error) {
	var output storagegateway.CreateTapeWithBarcodeOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateTapeWithBarcode", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) CreateTapeWithBarcodeAsync(ctx workflow.Context, input *storagegateway.CreateTapeWithBarcodeInput) *StoragegatewayCreateTapeWithBarcodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateTapeWithBarcode", input)
	return &StoragegatewayCreateTapeWithBarcodeFuture{Future: future}
}

func (a *StorageGatewayStub) CreateTapes(ctx workflow.Context, input *storagegateway.CreateTapesInput) (*storagegateway.CreateTapesOutput, error) {
	var output storagegateway.CreateTapesOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateTapes", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) CreateTapesAsync(ctx workflow.Context, input *storagegateway.CreateTapesInput) *StoragegatewayCreateTapesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.CreateTapes", input)
	return &StoragegatewayCreateTapesFuture{Future: future}
}

func (a *StorageGatewayStub) DeleteAutomaticTapeCreationPolicy(ctx workflow.Context, input *storagegateway.DeleteAutomaticTapeCreationPolicyInput) (*storagegateway.DeleteAutomaticTapeCreationPolicyOutput, error) {
	var output storagegateway.DeleteAutomaticTapeCreationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteAutomaticTapeCreationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DeleteAutomaticTapeCreationPolicyAsync(ctx workflow.Context, input *storagegateway.DeleteAutomaticTapeCreationPolicyInput) *StoragegatewayDeleteAutomaticTapeCreationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteAutomaticTapeCreationPolicy", input)
	return &StoragegatewayDeleteAutomaticTapeCreationPolicyFuture{Future: future}
}

func (a *StorageGatewayStub) DeleteBandwidthRateLimit(ctx workflow.Context, input *storagegateway.DeleteBandwidthRateLimitInput) (*storagegateway.DeleteBandwidthRateLimitOutput, error) {
	var output storagegateway.DeleteBandwidthRateLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteBandwidthRateLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DeleteBandwidthRateLimitAsync(ctx workflow.Context, input *storagegateway.DeleteBandwidthRateLimitInput) *StoragegatewayDeleteBandwidthRateLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteBandwidthRateLimit", input)
	return &StoragegatewayDeleteBandwidthRateLimitFuture{Future: future}
}

func (a *StorageGatewayStub) DeleteChapCredentials(ctx workflow.Context, input *storagegateway.DeleteChapCredentialsInput) (*storagegateway.DeleteChapCredentialsOutput, error) {
	var output storagegateway.DeleteChapCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteChapCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DeleteChapCredentialsAsync(ctx workflow.Context, input *storagegateway.DeleteChapCredentialsInput) *StoragegatewayDeleteChapCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteChapCredentials", input)
	return &StoragegatewayDeleteChapCredentialsFuture{Future: future}
}

func (a *StorageGatewayStub) DeleteFileShare(ctx workflow.Context, input *storagegateway.DeleteFileShareInput) (*storagegateway.DeleteFileShareOutput, error) {
	var output storagegateway.DeleteFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DeleteFileShareAsync(ctx workflow.Context, input *storagegateway.DeleteFileShareInput) *StoragegatewayDeleteFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteFileShare", input)
	return &StoragegatewayDeleteFileShareFuture{Future: future}
}

func (a *StorageGatewayStub) DeleteGateway(ctx workflow.Context, input *storagegateway.DeleteGatewayInput) (*storagegateway.DeleteGatewayOutput, error) {
	var output storagegateway.DeleteGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DeleteGatewayAsync(ctx workflow.Context, input *storagegateway.DeleteGatewayInput) *StoragegatewayDeleteGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteGateway", input)
	return &StoragegatewayDeleteGatewayFuture{Future: future}
}

func (a *StorageGatewayStub) DeleteSnapshotSchedule(ctx workflow.Context, input *storagegateway.DeleteSnapshotScheduleInput) (*storagegateway.DeleteSnapshotScheduleOutput, error) {
	var output storagegateway.DeleteSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DeleteSnapshotScheduleAsync(ctx workflow.Context, input *storagegateway.DeleteSnapshotScheduleInput) *StoragegatewayDeleteSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteSnapshotSchedule", input)
	return &StoragegatewayDeleteSnapshotScheduleFuture{Future: future}
}

func (a *StorageGatewayStub) DeleteTape(ctx workflow.Context, input *storagegateway.DeleteTapeInput) (*storagegateway.DeleteTapeOutput, error) {
	var output storagegateway.DeleteTapeOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteTape", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DeleteTapeAsync(ctx workflow.Context, input *storagegateway.DeleteTapeInput) *StoragegatewayDeleteTapeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteTape", input)
	return &StoragegatewayDeleteTapeFuture{Future: future}
}

func (a *StorageGatewayStub) DeleteTapeArchive(ctx workflow.Context, input *storagegateway.DeleteTapeArchiveInput) (*storagegateway.DeleteTapeArchiveOutput, error) {
	var output storagegateway.DeleteTapeArchiveOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteTapeArchive", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DeleteTapeArchiveAsync(ctx workflow.Context, input *storagegateway.DeleteTapeArchiveInput) *StoragegatewayDeleteTapeArchiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteTapeArchive", input)
	return &StoragegatewayDeleteTapeArchiveFuture{Future: future}
}

func (a *StorageGatewayStub) DeleteTapePool(ctx workflow.Context, input *storagegateway.DeleteTapePoolInput) (*storagegateway.DeleteTapePoolOutput, error) {
	var output storagegateway.DeleteTapePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteTapePool", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DeleteTapePoolAsync(ctx workflow.Context, input *storagegateway.DeleteTapePoolInput) *StoragegatewayDeleteTapePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteTapePool", input)
	return &StoragegatewayDeleteTapePoolFuture{Future: future}
}

func (a *StorageGatewayStub) DeleteVolume(ctx workflow.Context, input *storagegateway.DeleteVolumeInput) (*storagegateway.DeleteVolumeOutput, error) {
	var output storagegateway.DeleteVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DeleteVolumeAsync(ctx workflow.Context, input *storagegateway.DeleteVolumeInput) *StoragegatewayDeleteVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DeleteVolume", input)
	return &StoragegatewayDeleteVolumeFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeAvailabilityMonitorTest(ctx workflow.Context, input *storagegateway.DescribeAvailabilityMonitorTestInput) (*storagegateway.DescribeAvailabilityMonitorTestOutput, error) {
	var output storagegateway.DescribeAvailabilityMonitorTestOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeAvailabilityMonitorTest", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeAvailabilityMonitorTestAsync(ctx workflow.Context, input *storagegateway.DescribeAvailabilityMonitorTestInput) *StoragegatewayDescribeAvailabilityMonitorTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeAvailabilityMonitorTest", input)
	return &StoragegatewayDescribeAvailabilityMonitorTestFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeBandwidthRateLimit(ctx workflow.Context, input *storagegateway.DescribeBandwidthRateLimitInput) (*storagegateway.DescribeBandwidthRateLimitOutput, error) {
	var output storagegateway.DescribeBandwidthRateLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeBandwidthRateLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeBandwidthRateLimitAsync(ctx workflow.Context, input *storagegateway.DescribeBandwidthRateLimitInput) *StoragegatewayDescribeBandwidthRateLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeBandwidthRateLimit", input)
	return &StoragegatewayDescribeBandwidthRateLimitFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeCache(ctx workflow.Context, input *storagegateway.DescribeCacheInput) (*storagegateway.DescribeCacheOutput, error) {
	var output storagegateway.DescribeCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeCache", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeCacheAsync(ctx workflow.Context, input *storagegateway.DescribeCacheInput) *StoragegatewayDescribeCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeCache", input)
	return &StoragegatewayDescribeCacheFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeCachediSCSIVolumes(ctx workflow.Context, input *storagegateway.DescribeCachediSCSIVolumesInput) (*storagegateway.DescribeCachediSCSIVolumesOutput, error) {
	var output storagegateway.DescribeCachediSCSIVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeCachediSCSIVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeCachediSCSIVolumesAsync(ctx workflow.Context, input *storagegateway.DescribeCachediSCSIVolumesInput) *StoragegatewayDescribeCachediSCSIVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeCachediSCSIVolumes", input)
	return &StoragegatewayDescribeCachediSCSIVolumesFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeChapCredentials(ctx workflow.Context, input *storagegateway.DescribeChapCredentialsInput) (*storagegateway.DescribeChapCredentialsOutput, error) {
	var output storagegateway.DescribeChapCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeChapCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeChapCredentialsAsync(ctx workflow.Context, input *storagegateway.DescribeChapCredentialsInput) *StoragegatewayDescribeChapCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeChapCredentials", input)
	return &StoragegatewayDescribeChapCredentialsFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeGatewayInformation(ctx workflow.Context, input *storagegateway.DescribeGatewayInformationInput) (*storagegateway.DescribeGatewayInformationOutput, error) {
	var output storagegateway.DescribeGatewayInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeGatewayInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeGatewayInformationAsync(ctx workflow.Context, input *storagegateway.DescribeGatewayInformationInput) *StoragegatewayDescribeGatewayInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeGatewayInformation", input)
	return &StoragegatewayDescribeGatewayInformationFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeMaintenanceStartTime(ctx workflow.Context, input *storagegateway.DescribeMaintenanceStartTimeInput) (*storagegateway.DescribeMaintenanceStartTimeOutput, error) {
	var output storagegateway.DescribeMaintenanceStartTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeMaintenanceStartTime", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeMaintenanceStartTimeAsync(ctx workflow.Context, input *storagegateway.DescribeMaintenanceStartTimeInput) *StoragegatewayDescribeMaintenanceStartTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeMaintenanceStartTime", input)
	return &StoragegatewayDescribeMaintenanceStartTimeFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeNFSFileShares(ctx workflow.Context, input *storagegateway.DescribeNFSFileSharesInput) (*storagegateway.DescribeNFSFileSharesOutput, error) {
	var output storagegateway.DescribeNFSFileSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeNFSFileShares", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeNFSFileSharesAsync(ctx workflow.Context, input *storagegateway.DescribeNFSFileSharesInput) *StoragegatewayDescribeNFSFileSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeNFSFileShares", input)
	return &StoragegatewayDescribeNFSFileSharesFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeSMBFileShares(ctx workflow.Context, input *storagegateway.DescribeSMBFileSharesInput) (*storagegateway.DescribeSMBFileSharesOutput, error) {
	var output storagegateway.DescribeSMBFileSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeSMBFileShares", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeSMBFileSharesAsync(ctx workflow.Context, input *storagegateway.DescribeSMBFileSharesInput) *StoragegatewayDescribeSMBFileSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeSMBFileShares", input)
	return &StoragegatewayDescribeSMBFileSharesFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeSMBSettings(ctx workflow.Context, input *storagegateway.DescribeSMBSettingsInput) (*storagegateway.DescribeSMBSettingsOutput, error) {
	var output storagegateway.DescribeSMBSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeSMBSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeSMBSettingsAsync(ctx workflow.Context, input *storagegateway.DescribeSMBSettingsInput) *StoragegatewayDescribeSMBSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeSMBSettings", input)
	return &StoragegatewayDescribeSMBSettingsFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeSnapshotSchedule(ctx workflow.Context, input *storagegateway.DescribeSnapshotScheduleInput) (*storagegateway.DescribeSnapshotScheduleOutput, error) {
	var output storagegateway.DescribeSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeSnapshotScheduleAsync(ctx workflow.Context, input *storagegateway.DescribeSnapshotScheduleInput) *StoragegatewayDescribeSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeSnapshotSchedule", input)
	return &StoragegatewayDescribeSnapshotScheduleFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeStorediSCSIVolumes(ctx workflow.Context, input *storagegateway.DescribeStorediSCSIVolumesInput) (*storagegateway.DescribeStorediSCSIVolumesOutput, error) {
	var output storagegateway.DescribeStorediSCSIVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeStorediSCSIVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeStorediSCSIVolumesAsync(ctx workflow.Context, input *storagegateway.DescribeStorediSCSIVolumesInput) *StoragegatewayDescribeStorediSCSIVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeStorediSCSIVolumes", input)
	return &StoragegatewayDescribeStorediSCSIVolumesFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeTapeArchives(ctx workflow.Context, input *storagegateway.DescribeTapeArchivesInput) (*storagegateway.DescribeTapeArchivesOutput, error) {
	var output storagegateway.DescribeTapeArchivesOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeTapeArchives", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeTapeArchivesAsync(ctx workflow.Context, input *storagegateway.DescribeTapeArchivesInput) *StoragegatewayDescribeTapeArchivesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeTapeArchives", input)
	return &StoragegatewayDescribeTapeArchivesFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeTapeRecoveryPoints(ctx workflow.Context, input *storagegateway.DescribeTapeRecoveryPointsInput) (*storagegateway.DescribeTapeRecoveryPointsOutput, error) {
	var output storagegateway.DescribeTapeRecoveryPointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeTapeRecoveryPoints", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeTapeRecoveryPointsAsync(ctx workflow.Context, input *storagegateway.DescribeTapeRecoveryPointsInput) *StoragegatewayDescribeTapeRecoveryPointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeTapeRecoveryPoints", input)
	return &StoragegatewayDescribeTapeRecoveryPointsFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeTapes(ctx workflow.Context, input *storagegateway.DescribeTapesInput) (*storagegateway.DescribeTapesOutput, error) {
	var output storagegateway.DescribeTapesOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeTapes", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeTapesAsync(ctx workflow.Context, input *storagegateway.DescribeTapesInput) *StoragegatewayDescribeTapesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeTapes", input)
	return &StoragegatewayDescribeTapesFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeUploadBuffer(ctx workflow.Context, input *storagegateway.DescribeUploadBufferInput) (*storagegateway.DescribeUploadBufferOutput, error) {
	var output storagegateway.DescribeUploadBufferOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeUploadBuffer", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeUploadBufferAsync(ctx workflow.Context, input *storagegateway.DescribeUploadBufferInput) *StoragegatewayDescribeUploadBufferFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeUploadBuffer", input)
	return &StoragegatewayDescribeUploadBufferFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeVTLDevices(ctx workflow.Context, input *storagegateway.DescribeVTLDevicesInput) (*storagegateway.DescribeVTLDevicesOutput, error) {
	var output storagegateway.DescribeVTLDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeVTLDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeVTLDevicesAsync(ctx workflow.Context, input *storagegateway.DescribeVTLDevicesInput) *StoragegatewayDescribeVTLDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeVTLDevices", input)
	return &StoragegatewayDescribeVTLDevicesFuture{Future: future}
}

func (a *StorageGatewayStub) DescribeWorkingStorage(ctx workflow.Context, input *storagegateway.DescribeWorkingStorageInput) (*storagegateway.DescribeWorkingStorageOutput, error) {
	var output storagegateway.DescribeWorkingStorageOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeWorkingStorage", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DescribeWorkingStorageAsync(ctx workflow.Context, input *storagegateway.DescribeWorkingStorageInput) *StoragegatewayDescribeWorkingStorageFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DescribeWorkingStorage", input)
	return &StoragegatewayDescribeWorkingStorageFuture{Future: future}
}

func (a *StorageGatewayStub) DetachVolume(ctx workflow.Context, input *storagegateway.DetachVolumeInput) (*storagegateway.DetachVolumeOutput, error) {
	var output storagegateway.DetachVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DetachVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DetachVolumeAsync(ctx workflow.Context, input *storagegateway.DetachVolumeInput) *StoragegatewayDetachVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DetachVolume", input)
	return &StoragegatewayDetachVolumeFuture{Future: future}
}

func (a *StorageGatewayStub) DisableGateway(ctx workflow.Context, input *storagegateway.DisableGatewayInput) (*storagegateway.DisableGatewayOutput, error) {
	var output storagegateway.DisableGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.DisableGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) DisableGatewayAsync(ctx workflow.Context, input *storagegateway.DisableGatewayInput) *StoragegatewayDisableGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.DisableGateway", input)
	return &StoragegatewayDisableGatewayFuture{Future: future}
}

func (a *StorageGatewayStub) JoinDomain(ctx workflow.Context, input *storagegateway.JoinDomainInput) (*storagegateway.JoinDomainOutput, error) {
	var output storagegateway.JoinDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.JoinDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) JoinDomainAsync(ctx workflow.Context, input *storagegateway.JoinDomainInput) *StoragegatewayJoinDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.JoinDomain", input)
	return &StoragegatewayJoinDomainFuture{Future: future}
}

func (a *StorageGatewayStub) ListAutomaticTapeCreationPolicies(ctx workflow.Context, input *storagegateway.ListAutomaticTapeCreationPoliciesInput) (*storagegateway.ListAutomaticTapeCreationPoliciesOutput, error) {
	var output storagegateway.ListAutomaticTapeCreationPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListAutomaticTapeCreationPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ListAutomaticTapeCreationPoliciesAsync(ctx workflow.Context, input *storagegateway.ListAutomaticTapeCreationPoliciesInput) *StoragegatewayListAutomaticTapeCreationPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListAutomaticTapeCreationPolicies", input)
	return &StoragegatewayListAutomaticTapeCreationPoliciesFuture{Future: future}
}

func (a *StorageGatewayStub) ListFileShares(ctx workflow.Context, input *storagegateway.ListFileSharesInput) (*storagegateway.ListFileSharesOutput, error) {
	var output storagegateway.ListFileSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListFileShares", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ListFileSharesAsync(ctx workflow.Context, input *storagegateway.ListFileSharesInput) *StoragegatewayListFileSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListFileShares", input)
	return &StoragegatewayListFileSharesFuture{Future: future}
}

func (a *StorageGatewayStub) ListGateways(ctx workflow.Context, input *storagegateway.ListGatewaysInput) (*storagegateway.ListGatewaysOutput, error) {
	var output storagegateway.ListGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ListGatewaysAsync(ctx workflow.Context, input *storagegateway.ListGatewaysInput) *StoragegatewayListGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListGateways", input)
	return &StoragegatewayListGatewaysFuture{Future: future}
}

func (a *StorageGatewayStub) ListLocalDisks(ctx workflow.Context, input *storagegateway.ListLocalDisksInput) (*storagegateway.ListLocalDisksOutput, error) {
	var output storagegateway.ListLocalDisksOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListLocalDisks", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ListLocalDisksAsync(ctx workflow.Context, input *storagegateway.ListLocalDisksInput) *StoragegatewayListLocalDisksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListLocalDisks", input)
	return &StoragegatewayListLocalDisksFuture{Future: future}
}

func (a *StorageGatewayStub) ListTagsForResource(ctx workflow.Context, input *storagegateway.ListTagsForResourceInput) (*storagegateway.ListTagsForResourceOutput, error) {
	var output storagegateway.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ListTagsForResourceAsync(ctx workflow.Context, input *storagegateway.ListTagsForResourceInput) *StoragegatewayListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListTagsForResource", input)
	return &StoragegatewayListTagsForResourceFuture{Future: future}
}

func (a *StorageGatewayStub) ListTapePools(ctx workflow.Context, input *storagegateway.ListTapePoolsInput) (*storagegateway.ListTapePoolsOutput, error) {
	var output storagegateway.ListTapePoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListTapePools", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ListTapePoolsAsync(ctx workflow.Context, input *storagegateway.ListTapePoolsInput) *StoragegatewayListTapePoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListTapePools", input)
	return &StoragegatewayListTapePoolsFuture{Future: future}
}

func (a *StorageGatewayStub) ListTapes(ctx workflow.Context, input *storagegateway.ListTapesInput) (*storagegateway.ListTapesOutput, error) {
	var output storagegateway.ListTapesOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListTapes", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ListTapesAsync(ctx workflow.Context, input *storagegateway.ListTapesInput) *StoragegatewayListTapesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListTapes", input)
	return &StoragegatewayListTapesFuture{Future: future}
}

func (a *StorageGatewayStub) ListVolumeInitiators(ctx workflow.Context, input *storagegateway.ListVolumeInitiatorsInput) (*storagegateway.ListVolumeInitiatorsOutput, error) {
	var output storagegateway.ListVolumeInitiatorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListVolumeInitiators", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ListVolumeInitiatorsAsync(ctx workflow.Context, input *storagegateway.ListVolumeInitiatorsInput) *StoragegatewayListVolumeInitiatorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListVolumeInitiators", input)
	return &StoragegatewayListVolumeInitiatorsFuture{Future: future}
}

func (a *StorageGatewayStub) ListVolumeRecoveryPoints(ctx workflow.Context, input *storagegateway.ListVolumeRecoveryPointsInput) (*storagegateway.ListVolumeRecoveryPointsOutput, error) {
	var output storagegateway.ListVolumeRecoveryPointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListVolumeRecoveryPoints", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ListVolumeRecoveryPointsAsync(ctx workflow.Context, input *storagegateway.ListVolumeRecoveryPointsInput) *StoragegatewayListVolumeRecoveryPointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListVolumeRecoveryPoints", input)
	return &StoragegatewayListVolumeRecoveryPointsFuture{Future: future}
}

func (a *StorageGatewayStub) ListVolumes(ctx workflow.Context, input *storagegateway.ListVolumesInput) (*storagegateway.ListVolumesOutput, error) {
	var output storagegateway.ListVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ListVolumesAsync(ctx workflow.Context, input *storagegateway.ListVolumesInput) *StoragegatewayListVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ListVolumes", input)
	return &StoragegatewayListVolumesFuture{Future: future}
}

func (a *StorageGatewayStub) NotifyWhenUploaded(ctx workflow.Context, input *storagegateway.NotifyWhenUploadedInput) (*storagegateway.NotifyWhenUploadedOutput, error) {
	var output storagegateway.NotifyWhenUploadedOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.NotifyWhenUploaded", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) NotifyWhenUploadedAsync(ctx workflow.Context, input *storagegateway.NotifyWhenUploadedInput) *StoragegatewayNotifyWhenUploadedFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.NotifyWhenUploaded", input)
	return &StoragegatewayNotifyWhenUploadedFuture{Future: future}
}

func (a *StorageGatewayStub) RefreshCache(ctx workflow.Context, input *storagegateway.RefreshCacheInput) (*storagegateway.RefreshCacheOutput, error) {
	var output storagegateway.RefreshCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.RefreshCache", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) RefreshCacheAsync(ctx workflow.Context, input *storagegateway.RefreshCacheInput) *StoragegatewayRefreshCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.RefreshCache", input)
	return &StoragegatewayRefreshCacheFuture{Future: future}
}

func (a *StorageGatewayStub) RemoveTagsFromResource(ctx workflow.Context, input *storagegateway.RemoveTagsFromResourceInput) (*storagegateway.RemoveTagsFromResourceOutput, error) {
	var output storagegateway.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *storagegateway.RemoveTagsFromResourceInput) *StoragegatewayRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.RemoveTagsFromResource", input)
	return &StoragegatewayRemoveTagsFromResourceFuture{Future: future}
}

func (a *StorageGatewayStub) ResetCache(ctx workflow.Context, input *storagegateway.ResetCacheInput) (*storagegateway.ResetCacheOutput, error) {
	var output storagegateway.ResetCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ResetCache", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ResetCacheAsync(ctx workflow.Context, input *storagegateway.ResetCacheInput) *StoragegatewayResetCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ResetCache", input)
	return &StoragegatewayResetCacheFuture{Future: future}
}

func (a *StorageGatewayStub) RetrieveTapeArchive(ctx workflow.Context, input *storagegateway.RetrieveTapeArchiveInput) (*storagegateway.RetrieveTapeArchiveOutput, error) {
	var output storagegateway.RetrieveTapeArchiveOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.RetrieveTapeArchive", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) RetrieveTapeArchiveAsync(ctx workflow.Context, input *storagegateway.RetrieveTapeArchiveInput) *StoragegatewayRetrieveTapeArchiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.RetrieveTapeArchive", input)
	return &StoragegatewayRetrieveTapeArchiveFuture{Future: future}
}

func (a *StorageGatewayStub) RetrieveTapeRecoveryPoint(ctx workflow.Context, input *storagegateway.RetrieveTapeRecoveryPointInput) (*storagegateway.RetrieveTapeRecoveryPointOutput, error) {
	var output storagegateway.RetrieveTapeRecoveryPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.RetrieveTapeRecoveryPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) RetrieveTapeRecoveryPointAsync(ctx workflow.Context, input *storagegateway.RetrieveTapeRecoveryPointInput) *StoragegatewayRetrieveTapeRecoveryPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.RetrieveTapeRecoveryPoint", input)
	return &StoragegatewayRetrieveTapeRecoveryPointFuture{Future: future}
}

func (a *StorageGatewayStub) SetLocalConsolePassword(ctx workflow.Context, input *storagegateway.SetLocalConsolePasswordInput) (*storagegateway.SetLocalConsolePasswordOutput, error) {
	var output storagegateway.SetLocalConsolePasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.SetLocalConsolePassword", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) SetLocalConsolePasswordAsync(ctx workflow.Context, input *storagegateway.SetLocalConsolePasswordInput) *StoragegatewaySetLocalConsolePasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.SetLocalConsolePassword", input)
	return &StoragegatewaySetLocalConsolePasswordFuture{Future: future}
}

func (a *StorageGatewayStub) SetSMBGuestPassword(ctx workflow.Context, input *storagegateway.SetSMBGuestPasswordInput) (*storagegateway.SetSMBGuestPasswordOutput, error) {
	var output storagegateway.SetSMBGuestPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.SetSMBGuestPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) SetSMBGuestPasswordAsync(ctx workflow.Context, input *storagegateway.SetSMBGuestPasswordInput) *StoragegatewaySetSMBGuestPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.SetSMBGuestPassword", input)
	return &StoragegatewaySetSMBGuestPasswordFuture{Future: future}
}

func (a *StorageGatewayStub) ShutdownGateway(ctx workflow.Context, input *storagegateway.ShutdownGatewayInput) (*storagegateway.ShutdownGatewayOutput, error) {
	var output storagegateway.ShutdownGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.ShutdownGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) ShutdownGatewayAsync(ctx workflow.Context, input *storagegateway.ShutdownGatewayInput) *StoragegatewayShutdownGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.ShutdownGateway", input)
	return &StoragegatewayShutdownGatewayFuture{Future: future}
}

func (a *StorageGatewayStub) StartAvailabilityMonitorTest(ctx workflow.Context, input *storagegateway.StartAvailabilityMonitorTestInput) (*storagegateway.StartAvailabilityMonitorTestOutput, error) {
	var output storagegateway.StartAvailabilityMonitorTestOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.StartAvailabilityMonitorTest", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) StartAvailabilityMonitorTestAsync(ctx workflow.Context, input *storagegateway.StartAvailabilityMonitorTestInput) *StoragegatewayStartAvailabilityMonitorTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.StartAvailabilityMonitorTest", input)
	return &StoragegatewayStartAvailabilityMonitorTestFuture{Future: future}
}

func (a *StorageGatewayStub) StartGateway(ctx workflow.Context, input *storagegateway.StartGatewayInput) (*storagegateway.StartGatewayOutput, error) {
	var output storagegateway.StartGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.StartGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) StartGatewayAsync(ctx workflow.Context, input *storagegateway.StartGatewayInput) *StoragegatewayStartGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.StartGateway", input)
	return &StoragegatewayStartGatewayFuture{Future: future}
}

func (a *StorageGatewayStub) UpdateAutomaticTapeCreationPolicy(ctx workflow.Context, input *storagegateway.UpdateAutomaticTapeCreationPolicyInput) (*storagegateway.UpdateAutomaticTapeCreationPolicyOutput, error) {
	var output storagegateway.UpdateAutomaticTapeCreationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateAutomaticTapeCreationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) UpdateAutomaticTapeCreationPolicyAsync(ctx workflow.Context, input *storagegateway.UpdateAutomaticTapeCreationPolicyInput) *StoragegatewayUpdateAutomaticTapeCreationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateAutomaticTapeCreationPolicy", input)
	return &StoragegatewayUpdateAutomaticTapeCreationPolicyFuture{Future: future}
}

func (a *StorageGatewayStub) UpdateBandwidthRateLimit(ctx workflow.Context, input *storagegateway.UpdateBandwidthRateLimitInput) (*storagegateway.UpdateBandwidthRateLimitOutput, error) {
	var output storagegateway.UpdateBandwidthRateLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateBandwidthRateLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) UpdateBandwidthRateLimitAsync(ctx workflow.Context, input *storagegateway.UpdateBandwidthRateLimitInput) *StoragegatewayUpdateBandwidthRateLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateBandwidthRateLimit", input)
	return &StoragegatewayUpdateBandwidthRateLimitFuture{Future: future}
}

func (a *StorageGatewayStub) UpdateChapCredentials(ctx workflow.Context, input *storagegateway.UpdateChapCredentialsInput) (*storagegateway.UpdateChapCredentialsOutput, error) {
	var output storagegateway.UpdateChapCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateChapCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) UpdateChapCredentialsAsync(ctx workflow.Context, input *storagegateway.UpdateChapCredentialsInput) *StoragegatewayUpdateChapCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateChapCredentials", input)
	return &StoragegatewayUpdateChapCredentialsFuture{Future: future}
}

func (a *StorageGatewayStub) UpdateGatewayInformation(ctx workflow.Context, input *storagegateway.UpdateGatewayInformationInput) (*storagegateway.UpdateGatewayInformationOutput, error) {
	var output storagegateway.UpdateGatewayInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateGatewayInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) UpdateGatewayInformationAsync(ctx workflow.Context, input *storagegateway.UpdateGatewayInformationInput) *StoragegatewayUpdateGatewayInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateGatewayInformation", input)
	return &StoragegatewayUpdateGatewayInformationFuture{Future: future}
}

func (a *StorageGatewayStub) UpdateGatewaySoftwareNow(ctx workflow.Context, input *storagegateway.UpdateGatewaySoftwareNowInput) (*storagegateway.UpdateGatewaySoftwareNowOutput, error) {
	var output storagegateway.UpdateGatewaySoftwareNowOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateGatewaySoftwareNow", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) UpdateGatewaySoftwareNowAsync(ctx workflow.Context, input *storagegateway.UpdateGatewaySoftwareNowInput) *StoragegatewayUpdateGatewaySoftwareNowFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateGatewaySoftwareNow", input)
	return &StoragegatewayUpdateGatewaySoftwareNowFuture{Future: future}
}

func (a *StorageGatewayStub) UpdateMaintenanceStartTime(ctx workflow.Context, input *storagegateway.UpdateMaintenanceStartTimeInput) (*storagegateway.UpdateMaintenanceStartTimeOutput, error) {
	var output storagegateway.UpdateMaintenanceStartTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateMaintenanceStartTime", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) UpdateMaintenanceStartTimeAsync(ctx workflow.Context, input *storagegateway.UpdateMaintenanceStartTimeInput) *StoragegatewayUpdateMaintenanceStartTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateMaintenanceStartTime", input)
	return &StoragegatewayUpdateMaintenanceStartTimeFuture{Future: future}
}

func (a *StorageGatewayStub) UpdateNFSFileShare(ctx workflow.Context, input *storagegateway.UpdateNFSFileShareInput) (*storagegateway.UpdateNFSFileShareOutput, error) {
	var output storagegateway.UpdateNFSFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateNFSFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) UpdateNFSFileShareAsync(ctx workflow.Context, input *storagegateway.UpdateNFSFileShareInput) *StoragegatewayUpdateNFSFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateNFSFileShare", input)
	return &StoragegatewayUpdateNFSFileShareFuture{Future: future}
}

func (a *StorageGatewayStub) UpdateSMBFileShare(ctx workflow.Context, input *storagegateway.UpdateSMBFileShareInput) (*storagegateway.UpdateSMBFileShareOutput, error) {
	var output storagegateway.UpdateSMBFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateSMBFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) UpdateSMBFileShareAsync(ctx workflow.Context, input *storagegateway.UpdateSMBFileShareInput) *StoragegatewayUpdateSMBFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateSMBFileShare", input)
	return &StoragegatewayUpdateSMBFileShareFuture{Future: future}
}

func (a *StorageGatewayStub) UpdateSMBSecurityStrategy(ctx workflow.Context, input *storagegateway.UpdateSMBSecurityStrategyInput) (*storagegateway.UpdateSMBSecurityStrategyOutput, error) {
	var output storagegateway.UpdateSMBSecurityStrategyOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateSMBSecurityStrategy", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) UpdateSMBSecurityStrategyAsync(ctx workflow.Context, input *storagegateway.UpdateSMBSecurityStrategyInput) *StoragegatewayUpdateSMBSecurityStrategyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateSMBSecurityStrategy", input)
	return &StoragegatewayUpdateSMBSecurityStrategyFuture{Future: future}
}

func (a *StorageGatewayStub) UpdateSnapshotSchedule(ctx workflow.Context, input *storagegateway.UpdateSnapshotScheduleInput) (*storagegateway.UpdateSnapshotScheduleOutput, error) {
	var output storagegateway.UpdateSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) UpdateSnapshotScheduleAsync(ctx workflow.Context, input *storagegateway.UpdateSnapshotScheduleInput) *StoragegatewayUpdateSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateSnapshotSchedule", input)
	return &StoragegatewayUpdateSnapshotScheduleFuture{Future: future}
}

func (a *StorageGatewayStub) UpdateVTLDeviceType(ctx workflow.Context, input *storagegateway.UpdateVTLDeviceTypeInput) (*storagegateway.UpdateVTLDeviceTypeOutput, error) {
	var output storagegateway.UpdateVTLDeviceTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateVTLDeviceType", input).Get(ctx, &output)
	return &output, err
}

func (a *StorageGatewayStub) UpdateVTLDeviceTypeAsync(ctx workflow.Context, input *storagegateway.UpdateVTLDeviceTypeInput) *StoragegatewayUpdateVTLDeviceTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.storagegateway.UpdateVTLDeviceType", input)
	return &StoragegatewayUpdateVTLDeviceTypeFuture{Future: future}
}
