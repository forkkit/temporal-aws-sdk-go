// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cloudtrail"
	"go.temporal.io/sdk/workflow"
)

type CloudTrailClient interface {
	AddTags(ctx workflow.Context, input *cloudtrail.AddTagsInput) (*cloudtrail.AddTagsOutput, error)
	AddTagsAsync(ctx workflow.Context, input *cloudtrail.AddTagsInput) *CloudtrailAddTagsFuture

	CreateTrail(ctx workflow.Context, input *cloudtrail.CreateTrailInput) (*cloudtrail.CreateTrailOutput, error)
	CreateTrailAsync(ctx workflow.Context, input *cloudtrail.CreateTrailInput) *CloudtrailCreateTrailFuture

	DeleteTrail(ctx workflow.Context, input *cloudtrail.DeleteTrailInput) (*cloudtrail.DeleteTrailOutput, error)
	DeleteTrailAsync(ctx workflow.Context, input *cloudtrail.DeleteTrailInput) *CloudtrailDeleteTrailFuture

	DescribeTrails(ctx workflow.Context, input *cloudtrail.DescribeTrailsInput) (*cloudtrail.DescribeTrailsOutput, error)
	DescribeTrailsAsync(ctx workflow.Context, input *cloudtrail.DescribeTrailsInput) *CloudtrailDescribeTrailsFuture

	GetEventSelectors(ctx workflow.Context, input *cloudtrail.GetEventSelectorsInput) (*cloudtrail.GetEventSelectorsOutput, error)
	GetEventSelectorsAsync(ctx workflow.Context, input *cloudtrail.GetEventSelectorsInput) *CloudtrailGetEventSelectorsFuture

	GetInsightSelectors(ctx workflow.Context, input *cloudtrail.GetInsightSelectorsInput) (*cloudtrail.GetInsightSelectorsOutput, error)
	GetInsightSelectorsAsync(ctx workflow.Context, input *cloudtrail.GetInsightSelectorsInput) *CloudtrailGetInsightSelectorsFuture

	GetTrail(ctx workflow.Context, input *cloudtrail.GetTrailInput) (*cloudtrail.GetTrailOutput, error)
	GetTrailAsync(ctx workflow.Context, input *cloudtrail.GetTrailInput) *CloudtrailGetTrailFuture

	GetTrailStatus(ctx workflow.Context, input *cloudtrail.GetTrailStatusInput) (*cloudtrail.GetTrailStatusOutput, error)
	GetTrailStatusAsync(ctx workflow.Context, input *cloudtrail.GetTrailStatusInput) *CloudtrailGetTrailStatusFuture

	ListPublicKeys(ctx workflow.Context, input *cloudtrail.ListPublicKeysInput) (*cloudtrail.ListPublicKeysOutput, error)
	ListPublicKeysAsync(ctx workflow.Context, input *cloudtrail.ListPublicKeysInput) *CloudtrailListPublicKeysFuture

	ListTags(ctx workflow.Context, input *cloudtrail.ListTagsInput) (*cloudtrail.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *cloudtrail.ListTagsInput) *CloudtrailListTagsFuture

	ListTrails(ctx workflow.Context, input *cloudtrail.ListTrailsInput) (*cloudtrail.ListTrailsOutput, error)
	ListTrailsAsync(ctx workflow.Context, input *cloudtrail.ListTrailsInput) *CloudtrailListTrailsFuture

	LookupEvents(ctx workflow.Context, input *cloudtrail.LookupEventsInput) (*cloudtrail.LookupEventsOutput, error)
	LookupEventsAsync(ctx workflow.Context, input *cloudtrail.LookupEventsInput) *CloudtrailLookupEventsFuture

	PutEventSelectors(ctx workflow.Context, input *cloudtrail.PutEventSelectorsInput) (*cloudtrail.PutEventSelectorsOutput, error)
	PutEventSelectorsAsync(ctx workflow.Context, input *cloudtrail.PutEventSelectorsInput) *CloudtrailPutEventSelectorsFuture

	PutInsightSelectors(ctx workflow.Context, input *cloudtrail.PutInsightSelectorsInput) (*cloudtrail.PutInsightSelectorsOutput, error)
	PutInsightSelectorsAsync(ctx workflow.Context, input *cloudtrail.PutInsightSelectorsInput) *CloudtrailPutInsightSelectorsFuture

	RemoveTags(ctx workflow.Context, input *cloudtrail.RemoveTagsInput) (*cloudtrail.RemoveTagsOutput, error)
	RemoveTagsAsync(ctx workflow.Context, input *cloudtrail.RemoveTagsInput) *CloudtrailRemoveTagsFuture

	StartLogging(ctx workflow.Context, input *cloudtrail.StartLoggingInput) (*cloudtrail.StartLoggingOutput, error)
	StartLoggingAsync(ctx workflow.Context, input *cloudtrail.StartLoggingInput) *CloudtrailStartLoggingFuture

	StopLogging(ctx workflow.Context, input *cloudtrail.StopLoggingInput) (*cloudtrail.StopLoggingOutput, error)
	StopLoggingAsync(ctx workflow.Context, input *cloudtrail.StopLoggingInput) *CloudtrailStopLoggingFuture

	UpdateTrail(ctx workflow.Context, input *cloudtrail.UpdateTrailInput) (*cloudtrail.UpdateTrailOutput, error)
	UpdateTrailAsync(ctx workflow.Context, input *cloudtrail.UpdateTrailInput) *CloudtrailUpdateTrailFuture
}

type CloudTrailStub struct{}

func NewCloudTrailStub() CloudTrailClient {
	return &CloudTrailStub{}
}

type CloudtrailAddTagsFuture struct {
	Future workflow.Future
}

func (r *CloudtrailAddTagsFuture) Get(ctx workflow.Context) (*cloudtrail.AddTagsOutput, error) {
	var output cloudtrail.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailCreateTrailFuture struct {
	Future workflow.Future
}

func (r *CloudtrailCreateTrailFuture) Get(ctx workflow.Context) (*cloudtrail.CreateTrailOutput, error) {
	var output cloudtrail.CreateTrailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailDeleteTrailFuture struct {
	Future workflow.Future
}

func (r *CloudtrailDeleteTrailFuture) Get(ctx workflow.Context) (*cloudtrail.DeleteTrailOutput, error) {
	var output cloudtrail.DeleteTrailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailDescribeTrailsFuture struct {
	Future workflow.Future
}

func (r *CloudtrailDescribeTrailsFuture) Get(ctx workflow.Context) (*cloudtrail.DescribeTrailsOutput, error) {
	var output cloudtrail.DescribeTrailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailGetEventSelectorsFuture struct {
	Future workflow.Future
}

func (r *CloudtrailGetEventSelectorsFuture) Get(ctx workflow.Context) (*cloudtrail.GetEventSelectorsOutput, error) {
	var output cloudtrail.GetEventSelectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailGetInsightSelectorsFuture struct {
	Future workflow.Future
}

func (r *CloudtrailGetInsightSelectorsFuture) Get(ctx workflow.Context) (*cloudtrail.GetInsightSelectorsOutput, error) {
	var output cloudtrail.GetInsightSelectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailGetTrailFuture struct {
	Future workflow.Future
}

func (r *CloudtrailGetTrailFuture) Get(ctx workflow.Context) (*cloudtrail.GetTrailOutput, error) {
	var output cloudtrail.GetTrailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailGetTrailStatusFuture struct {
	Future workflow.Future
}

func (r *CloudtrailGetTrailStatusFuture) Get(ctx workflow.Context) (*cloudtrail.GetTrailStatusOutput, error) {
	var output cloudtrail.GetTrailStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailListPublicKeysFuture struct {
	Future workflow.Future
}

func (r *CloudtrailListPublicKeysFuture) Get(ctx workflow.Context) (*cloudtrail.ListPublicKeysOutput, error) {
	var output cloudtrail.ListPublicKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailListTagsFuture struct {
	Future workflow.Future
}

func (r *CloudtrailListTagsFuture) Get(ctx workflow.Context) (*cloudtrail.ListTagsOutput, error) {
	var output cloudtrail.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailListTrailsFuture struct {
	Future workflow.Future
}

func (r *CloudtrailListTrailsFuture) Get(ctx workflow.Context) (*cloudtrail.ListTrailsOutput, error) {
	var output cloudtrail.ListTrailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailLookupEventsFuture struct {
	Future workflow.Future
}

func (r *CloudtrailLookupEventsFuture) Get(ctx workflow.Context) (*cloudtrail.LookupEventsOutput, error) {
	var output cloudtrail.LookupEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailPutEventSelectorsFuture struct {
	Future workflow.Future
}

func (r *CloudtrailPutEventSelectorsFuture) Get(ctx workflow.Context) (*cloudtrail.PutEventSelectorsOutput, error) {
	var output cloudtrail.PutEventSelectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailPutInsightSelectorsFuture struct {
	Future workflow.Future
}

func (r *CloudtrailPutInsightSelectorsFuture) Get(ctx workflow.Context) (*cloudtrail.PutInsightSelectorsOutput, error) {
	var output cloudtrail.PutInsightSelectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailRemoveTagsFuture struct {
	Future workflow.Future
}

func (r *CloudtrailRemoveTagsFuture) Get(ctx workflow.Context) (*cloudtrail.RemoveTagsOutput, error) {
	var output cloudtrail.RemoveTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailStartLoggingFuture struct {
	Future workflow.Future
}

func (r *CloudtrailStartLoggingFuture) Get(ctx workflow.Context) (*cloudtrail.StartLoggingOutput, error) {
	var output cloudtrail.StartLoggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailStopLoggingFuture struct {
	Future workflow.Future
}

func (r *CloudtrailStopLoggingFuture) Get(ctx workflow.Context) (*cloudtrail.StopLoggingOutput, error) {
	var output cloudtrail.StopLoggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudtrailUpdateTrailFuture struct {
	Future workflow.Future
}

func (r *CloudtrailUpdateTrailFuture) Get(ctx workflow.Context) (*cloudtrail.UpdateTrailOutput, error) {
	var output cloudtrail.UpdateTrailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) AddTags(ctx workflow.Context, input *cloudtrail.AddTagsInput) (*cloudtrail.AddTagsOutput, error) {
	var output cloudtrail.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) AddTagsAsync(ctx workflow.Context, input *cloudtrail.AddTagsInput) *CloudtrailAddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.AddTags", input)
	return &CloudtrailAddTagsFuture{Future: future}
}

func (a *CloudTrailStub) CreateTrail(ctx workflow.Context, input *cloudtrail.CreateTrailInput) (*cloudtrail.CreateTrailOutput, error) {
	var output cloudtrail.CreateTrailOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.CreateTrail", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) CreateTrailAsync(ctx workflow.Context, input *cloudtrail.CreateTrailInput) *CloudtrailCreateTrailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.CreateTrail", input)
	return &CloudtrailCreateTrailFuture{Future: future}
}

func (a *CloudTrailStub) DeleteTrail(ctx workflow.Context, input *cloudtrail.DeleteTrailInput) (*cloudtrail.DeleteTrailOutput, error) {
	var output cloudtrail.DeleteTrailOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.DeleteTrail", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) DeleteTrailAsync(ctx workflow.Context, input *cloudtrail.DeleteTrailInput) *CloudtrailDeleteTrailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.DeleteTrail", input)
	return &CloudtrailDeleteTrailFuture{Future: future}
}

func (a *CloudTrailStub) DescribeTrails(ctx workflow.Context, input *cloudtrail.DescribeTrailsInput) (*cloudtrail.DescribeTrailsOutput, error) {
	var output cloudtrail.DescribeTrailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.DescribeTrails", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) DescribeTrailsAsync(ctx workflow.Context, input *cloudtrail.DescribeTrailsInput) *CloudtrailDescribeTrailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.DescribeTrails", input)
	return &CloudtrailDescribeTrailsFuture{Future: future}
}

func (a *CloudTrailStub) GetEventSelectors(ctx workflow.Context, input *cloudtrail.GetEventSelectorsInput) (*cloudtrail.GetEventSelectorsOutput, error) {
	var output cloudtrail.GetEventSelectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.GetEventSelectors", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) GetEventSelectorsAsync(ctx workflow.Context, input *cloudtrail.GetEventSelectorsInput) *CloudtrailGetEventSelectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.GetEventSelectors", input)
	return &CloudtrailGetEventSelectorsFuture{Future: future}
}

func (a *CloudTrailStub) GetInsightSelectors(ctx workflow.Context, input *cloudtrail.GetInsightSelectorsInput) (*cloudtrail.GetInsightSelectorsOutput, error) {
	var output cloudtrail.GetInsightSelectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.GetInsightSelectors", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) GetInsightSelectorsAsync(ctx workflow.Context, input *cloudtrail.GetInsightSelectorsInput) *CloudtrailGetInsightSelectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.GetInsightSelectors", input)
	return &CloudtrailGetInsightSelectorsFuture{Future: future}
}

func (a *CloudTrailStub) GetTrail(ctx workflow.Context, input *cloudtrail.GetTrailInput) (*cloudtrail.GetTrailOutput, error) {
	var output cloudtrail.GetTrailOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.GetTrail", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) GetTrailAsync(ctx workflow.Context, input *cloudtrail.GetTrailInput) *CloudtrailGetTrailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.GetTrail", input)
	return &CloudtrailGetTrailFuture{Future: future}
}

func (a *CloudTrailStub) GetTrailStatus(ctx workflow.Context, input *cloudtrail.GetTrailStatusInput) (*cloudtrail.GetTrailStatusOutput, error) {
	var output cloudtrail.GetTrailStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.GetTrailStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) GetTrailStatusAsync(ctx workflow.Context, input *cloudtrail.GetTrailStatusInput) *CloudtrailGetTrailStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.GetTrailStatus", input)
	return &CloudtrailGetTrailStatusFuture{Future: future}
}

func (a *CloudTrailStub) ListPublicKeys(ctx workflow.Context, input *cloudtrail.ListPublicKeysInput) (*cloudtrail.ListPublicKeysOutput, error) {
	var output cloudtrail.ListPublicKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.ListPublicKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) ListPublicKeysAsync(ctx workflow.Context, input *cloudtrail.ListPublicKeysInput) *CloudtrailListPublicKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.ListPublicKeys", input)
	return &CloudtrailListPublicKeysFuture{Future: future}
}

func (a *CloudTrailStub) ListTags(ctx workflow.Context, input *cloudtrail.ListTagsInput) (*cloudtrail.ListTagsOutput, error) {
	var output cloudtrail.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) ListTagsAsync(ctx workflow.Context, input *cloudtrail.ListTagsInput) *CloudtrailListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.ListTags", input)
	return &CloudtrailListTagsFuture{Future: future}
}

func (a *CloudTrailStub) ListTrails(ctx workflow.Context, input *cloudtrail.ListTrailsInput) (*cloudtrail.ListTrailsOutput, error) {
	var output cloudtrail.ListTrailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.ListTrails", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) ListTrailsAsync(ctx workflow.Context, input *cloudtrail.ListTrailsInput) *CloudtrailListTrailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.ListTrails", input)
	return &CloudtrailListTrailsFuture{Future: future}
}

func (a *CloudTrailStub) LookupEvents(ctx workflow.Context, input *cloudtrail.LookupEventsInput) (*cloudtrail.LookupEventsOutput, error) {
	var output cloudtrail.LookupEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.LookupEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) LookupEventsAsync(ctx workflow.Context, input *cloudtrail.LookupEventsInput) *CloudtrailLookupEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.LookupEvents", input)
	return &CloudtrailLookupEventsFuture{Future: future}
}

func (a *CloudTrailStub) PutEventSelectors(ctx workflow.Context, input *cloudtrail.PutEventSelectorsInput) (*cloudtrail.PutEventSelectorsOutput, error) {
	var output cloudtrail.PutEventSelectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.PutEventSelectors", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) PutEventSelectorsAsync(ctx workflow.Context, input *cloudtrail.PutEventSelectorsInput) *CloudtrailPutEventSelectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.PutEventSelectors", input)
	return &CloudtrailPutEventSelectorsFuture{Future: future}
}

func (a *CloudTrailStub) PutInsightSelectors(ctx workflow.Context, input *cloudtrail.PutInsightSelectorsInput) (*cloudtrail.PutInsightSelectorsOutput, error) {
	var output cloudtrail.PutInsightSelectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.PutInsightSelectors", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) PutInsightSelectorsAsync(ctx workflow.Context, input *cloudtrail.PutInsightSelectorsInput) *CloudtrailPutInsightSelectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.PutInsightSelectors", input)
	return &CloudtrailPutInsightSelectorsFuture{Future: future}
}

func (a *CloudTrailStub) RemoveTags(ctx workflow.Context, input *cloudtrail.RemoveTagsInput) (*cloudtrail.RemoveTagsOutput, error) {
	var output cloudtrail.RemoveTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.RemoveTags", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) RemoveTagsAsync(ctx workflow.Context, input *cloudtrail.RemoveTagsInput) *CloudtrailRemoveTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.RemoveTags", input)
	return &CloudtrailRemoveTagsFuture{Future: future}
}

func (a *CloudTrailStub) StartLogging(ctx workflow.Context, input *cloudtrail.StartLoggingInput) (*cloudtrail.StartLoggingOutput, error) {
	var output cloudtrail.StartLoggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.StartLogging", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) StartLoggingAsync(ctx workflow.Context, input *cloudtrail.StartLoggingInput) *CloudtrailStartLoggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.StartLogging", input)
	return &CloudtrailStartLoggingFuture{Future: future}
}

func (a *CloudTrailStub) StopLogging(ctx workflow.Context, input *cloudtrail.StopLoggingInput) (*cloudtrail.StopLoggingOutput, error) {
	var output cloudtrail.StopLoggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.StopLogging", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) StopLoggingAsync(ctx workflow.Context, input *cloudtrail.StopLoggingInput) *CloudtrailStopLoggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.StopLogging", input)
	return &CloudtrailStopLoggingFuture{Future: future}
}

func (a *CloudTrailStub) UpdateTrail(ctx workflow.Context, input *cloudtrail.UpdateTrailInput) (*cloudtrail.UpdateTrailOutput, error) {
	var output cloudtrail.UpdateTrailOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudtrail.UpdateTrail", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudTrailStub) UpdateTrailAsync(ctx workflow.Context, input *cloudtrail.UpdateTrailInput) *CloudtrailUpdateTrailFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudtrail.UpdateTrail", input)
	return &CloudtrailUpdateTrailFuture{Future: future}
}
