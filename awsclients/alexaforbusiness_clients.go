// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/alexaforbusiness"
	"go.temporal.io/sdk/workflow"
)

type AlexaForBusinessClient interface {
	ApproveSkill(ctx workflow.Context, input *alexaforbusiness.ApproveSkillInput) (*alexaforbusiness.ApproveSkillOutput, error)
	ApproveSkillAsync(ctx workflow.Context, input *alexaforbusiness.ApproveSkillInput) *AlexaforbusinessApproveSkillFuture

	AssociateContactWithAddressBook(ctx workflow.Context, input *alexaforbusiness.AssociateContactWithAddressBookInput) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error)
	AssociateContactWithAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.AssociateContactWithAddressBookInput) *AlexaforbusinessAssociateContactWithAddressBookFuture

	AssociateDeviceWithNetworkProfile(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithNetworkProfileInput) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error)
	AssociateDeviceWithNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithNetworkProfileInput) *AlexaforbusinessAssociateDeviceWithNetworkProfileFuture

	AssociateDeviceWithRoom(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithRoomInput) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error)
	AssociateDeviceWithRoomAsync(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithRoomInput) *AlexaforbusinessAssociateDeviceWithRoomFuture

	AssociateSkillGroupWithRoom(ctx workflow.Context, input *alexaforbusiness.AssociateSkillGroupWithRoomInput) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error)
	AssociateSkillGroupWithRoomAsync(ctx workflow.Context, input *alexaforbusiness.AssociateSkillGroupWithRoomInput) *AlexaforbusinessAssociateSkillGroupWithRoomFuture

	AssociateSkillWithSkillGroup(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithSkillGroupInput) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error)
	AssociateSkillWithSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithSkillGroupInput) *AlexaforbusinessAssociateSkillWithSkillGroupFuture

	AssociateSkillWithUsers(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithUsersInput) (*alexaforbusiness.AssociateSkillWithUsersOutput, error)
	AssociateSkillWithUsersAsync(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithUsersInput) *AlexaforbusinessAssociateSkillWithUsersFuture

	CreateAddressBook(ctx workflow.Context, input *alexaforbusiness.CreateAddressBookInput) (*alexaforbusiness.CreateAddressBookOutput, error)
	CreateAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.CreateAddressBookInput) *AlexaforbusinessCreateAddressBookFuture

	CreateBusinessReportSchedule(ctx workflow.Context, input *alexaforbusiness.CreateBusinessReportScheduleInput) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error)
	CreateBusinessReportScheduleAsync(ctx workflow.Context, input *alexaforbusiness.CreateBusinessReportScheduleInput) *AlexaforbusinessCreateBusinessReportScheduleFuture

	CreateConferenceProvider(ctx workflow.Context, input *alexaforbusiness.CreateConferenceProviderInput) (*alexaforbusiness.CreateConferenceProviderOutput, error)
	CreateConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.CreateConferenceProviderInput) *AlexaforbusinessCreateConferenceProviderFuture

	CreateContact(ctx workflow.Context, input *alexaforbusiness.CreateContactInput) (*alexaforbusiness.CreateContactOutput, error)
	CreateContactAsync(ctx workflow.Context, input *alexaforbusiness.CreateContactInput) *AlexaforbusinessCreateContactFuture

	CreateGatewayGroup(ctx workflow.Context, input *alexaforbusiness.CreateGatewayGroupInput) (*alexaforbusiness.CreateGatewayGroupOutput, error)
	CreateGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.CreateGatewayGroupInput) *AlexaforbusinessCreateGatewayGroupFuture

	CreateNetworkProfile(ctx workflow.Context, input *alexaforbusiness.CreateNetworkProfileInput) (*alexaforbusiness.CreateNetworkProfileOutput, error)
	CreateNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.CreateNetworkProfileInput) *AlexaforbusinessCreateNetworkProfileFuture

	CreateProfile(ctx workflow.Context, input *alexaforbusiness.CreateProfileInput) (*alexaforbusiness.CreateProfileOutput, error)
	CreateProfileAsync(ctx workflow.Context, input *alexaforbusiness.CreateProfileInput) *AlexaforbusinessCreateProfileFuture

	CreateRoom(ctx workflow.Context, input *alexaforbusiness.CreateRoomInput) (*alexaforbusiness.CreateRoomOutput, error)
	CreateRoomAsync(ctx workflow.Context, input *alexaforbusiness.CreateRoomInput) *AlexaforbusinessCreateRoomFuture

	CreateSkillGroup(ctx workflow.Context, input *alexaforbusiness.CreateSkillGroupInput) (*alexaforbusiness.CreateSkillGroupOutput, error)
	CreateSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.CreateSkillGroupInput) *AlexaforbusinessCreateSkillGroupFuture

	CreateUser(ctx workflow.Context, input *alexaforbusiness.CreateUserInput) (*alexaforbusiness.CreateUserOutput, error)
	CreateUserAsync(ctx workflow.Context, input *alexaforbusiness.CreateUserInput) *AlexaforbusinessCreateUserFuture

	DeleteAddressBook(ctx workflow.Context, input *alexaforbusiness.DeleteAddressBookInput) (*alexaforbusiness.DeleteAddressBookOutput, error)
	DeleteAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.DeleteAddressBookInput) *AlexaforbusinessDeleteAddressBookFuture

	DeleteBusinessReportSchedule(ctx workflow.Context, input *alexaforbusiness.DeleteBusinessReportScheduleInput) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error)
	DeleteBusinessReportScheduleAsync(ctx workflow.Context, input *alexaforbusiness.DeleteBusinessReportScheduleInput) *AlexaforbusinessDeleteBusinessReportScheduleFuture

	DeleteConferenceProvider(ctx workflow.Context, input *alexaforbusiness.DeleteConferenceProviderInput) (*alexaforbusiness.DeleteConferenceProviderOutput, error)
	DeleteConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.DeleteConferenceProviderInput) *AlexaforbusinessDeleteConferenceProviderFuture

	DeleteContact(ctx workflow.Context, input *alexaforbusiness.DeleteContactInput) (*alexaforbusiness.DeleteContactOutput, error)
	DeleteContactAsync(ctx workflow.Context, input *alexaforbusiness.DeleteContactInput) *AlexaforbusinessDeleteContactFuture

	DeleteDevice(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceInput) (*alexaforbusiness.DeleteDeviceOutput, error)
	DeleteDeviceAsync(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceInput) *AlexaforbusinessDeleteDeviceFuture

	DeleteDeviceUsageData(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceUsageDataInput) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error)
	DeleteDeviceUsageDataAsync(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceUsageDataInput) *AlexaforbusinessDeleteDeviceUsageDataFuture

	DeleteGatewayGroup(ctx workflow.Context, input *alexaforbusiness.DeleteGatewayGroupInput) (*alexaforbusiness.DeleteGatewayGroupOutput, error)
	DeleteGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.DeleteGatewayGroupInput) *AlexaforbusinessDeleteGatewayGroupFuture

	DeleteNetworkProfile(ctx workflow.Context, input *alexaforbusiness.DeleteNetworkProfileInput) (*alexaforbusiness.DeleteNetworkProfileOutput, error)
	DeleteNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.DeleteNetworkProfileInput) *AlexaforbusinessDeleteNetworkProfileFuture

	DeleteProfile(ctx workflow.Context, input *alexaforbusiness.DeleteProfileInput) (*alexaforbusiness.DeleteProfileOutput, error)
	DeleteProfileAsync(ctx workflow.Context, input *alexaforbusiness.DeleteProfileInput) *AlexaforbusinessDeleteProfileFuture

	DeleteRoom(ctx workflow.Context, input *alexaforbusiness.DeleteRoomInput) (*alexaforbusiness.DeleteRoomOutput, error)
	DeleteRoomAsync(ctx workflow.Context, input *alexaforbusiness.DeleteRoomInput) *AlexaforbusinessDeleteRoomFuture

	DeleteRoomSkillParameter(ctx workflow.Context, input *alexaforbusiness.DeleteRoomSkillParameterInput) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error)
	DeleteRoomSkillParameterAsync(ctx workflow.Context, input *alexaforbusiness.DeleteRoomSkillParameterInput) *AlexaforbusinessDeleteRoomSkillParameterFuture

	DeleteSkillAuthorization(ctx workflow.Context, input *alexaforbusiness.DeleteSkillAuthorizationInput) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error)
	DeleteSkillAuthorizationAsync(ctx workflow.Context, input *alexaforbusiness.DeleteSkillAuthorizationInput) *AlexaforbusinessDeleteSkillAuthorizationFuture

	DeleteSkillGroup(ctx workflow.Context, input *alexaforbusiness.DeleteSkillGroupInput) (*alexaforbusiness.DeleteSkillGroupOutput, error)
	DeleteSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.DeleteSkillGroupInput) *AlexaforbusinessDeleteSkillGroupFuture

	DeleteUser(ctx workflow.Context, input *alexaforbusiness.DeleteUserInput) (*alexaforbusiness.DeleteUserOutput, error)
	DeleteUserAsync(ctx workflow.Context, input *alexaforbusiness.DeleteUserInput) *AlexaforbusinessDeleteUserFuture

	DisassociateContactFromAddressBook(ctx workflow.Context, input *alexaforbusiness.DisassociateContactFromAddressBookInput) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error)
	DisassociateContactFromAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateContactFromAddressBookInput) *AlexaforbusinessDisassociateContactFromAddressBookFuture

	DisassociateDeviceFromRoom(ctx workflow.Context, input *alexaforbusiness.DisassociateDeviceFromRoomInput) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error)
	DisassociateDeviceFromRoomAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateDeviceFromRoomInput) *AlexaforbusinessDisassociateDeviceFromRoomFuture

	DisassociateSkillFromSkillGroup(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromSkillGroupInput) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error)
	DisassociateSkillFromSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromSkillGroupInput) *AlexaforbusinessDisassociateSkillFromSkillGroupFuture

	DisassociateSkillFromUsers(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromUsersInput) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error)
	DisassociateSkillFromUsersAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromUsersInput) *AlexaforbusinessDisassociateSkillFromUsersFuture

	DisassociateSkillGroupFromRoom(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillGroupFromRoomInput) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error)
	DisassociateSkillGroupFromRoomAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillGroupFromRoomInput) *AlexaforbusinessDisassociateSkillGroupFromRoomFuture

	ForgetSmartHomeAppliances(ctx workflow.Context, input *alexaforbusiness.ForgetSmartHomeAppliancesInput) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error)
	ForgetSmartHomeAppliancesAsync(ctx workflow.Context, input *alexaforbusiness.ForgetSmartHomeAppliancesInput) *AlexaforbusinessForgetSmartHomeAppliancesFuture

	GetAddressBook(ctx workflow.Context, input *alexaforbusiness.GetAddressBookInput) (*alexaforbusiness.GetAddressBookOutput, error)
	GetAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.GetAddressBookInput) *AlexaforbusinessGetAddressBookFuture

	GetConferencePreference(ctx workflow.Context, input *alexaforbusiness.GetConferencePreferenceInput) (*alexaforbusiness.GetConferencePreferenceOutput, error)
	GetConferencePreferenceAsync(ctx workflow.Context, input *alexaforbusiness.GetConferencePreferenceInput) *AlexaforbusinessGetConferencePreferenceFuture

	GetConferenceProvider(ctx workflow.Context, input *alexaforbusiness.GetConferenceProviderInput) (*alexaforbusiness.GetConferenceProviderOutput, error)
	GetConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.GetConferenceProviderInput) *AlexaforbusinessGetConferenceProviderFuture

	GetContact(ctx workflow.Context, input *alexaforbusiness.GetContactInput) (*alexaforbusiness.GetContactOutput, error)
	GetContactAsync(ctx workflow.Context, input *alexaforbusiness.GetContactInput) *AlexaforbusinessGetContactFuture

	GetDevice(ctx workflow.Context, input *alexaforbusiness.GetDeviceInput) (*alexaforbusiness.GetDeviceOutput, error)
	GetDeviceAsync(ctx workflow.Context, input *alexaforbusiness.GetDeviceInput) *AlexaforbusinessGetDeviceFuture

	GetGateway(ctx workflow.Context, input *alexaforbusiness.GetGatewayInput) (*alexaforbusiness.GetGatewayOutput, error)
	GetGatewayAsync(ctx workflow.Context, input *alexaforbusiness.GetGatewayInput) *AlexaforbusinessGetGatewayFuture

	GetGatewayGroup(ctx workflow.Context, input *alexaforbusiness.GetGatewayGroupInput) (*alexaforbusiness.GetGatewayGroupOutput, error)
	GetGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.GetGatewayGroupInput) *AlexaforbusinessGetGatewayGroupFuture

	GetInvitationConfiguration(ctx workflow.Context, input *alexaforbusiness.GetInvitationConfigurationInput) (*alexaforbusiness.GetInvitationConfigurationOutput, error)
	GetInvitationConfigurationAsync(ctx workflow.Context, input *alexaforbusiness.GetInvitationConfigurationInput) *AlexaforbusinessGetInvitationConfigurationFuture

	GetNetworkProfile(ctx workflow.Context, input *alexaforbusiness.GetNetworkProfileInput) (*alexaforbusiness.GetNetworkProfileOutput, error)
	GetNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.GetNetworkProfileInput) *AlexaforbusinessGetNetworkProfileFuture

	GetProfile(ctx workflow.Context, input *alexaforbusiness.GetProfileInput) (*alexaforbusiness.GetProfileOutput, error)
	GetProfileAsync(ctx workflow.Context, input *alexaforbusiness.GetProfileInput) *AlexaforbusinessGetProfileFuture

	GetRoom(ctx workflow.Context, input *alexaforbusiness.GetRoomInput) (*alexaforbusiness.GetRoomOutput, error)
	GetRoomAsync(ctx workflow.Context, input *alexaforbusiness.GetRoomInput) *AlexaforbusinessGetRoomFuture

	GetRoomSkillParameter(ctx workflow.Context, input *alexaforbusiness.GetRoomSkillParameterInput) (*alexaforbusiness.GetRoomSkillParameterOutput, error)
	GetRoomSkillParameterAsync(ctx workflow.Context, input *alexaforbusiness.GetRoomSkillParameterInput) *AlexaforbusinessGetRoomSkillParameterFuture

	GetSkillGroup(ctx workflow.Context, input *alexaforbusiness.GetSkillGroupInput) (*alexaforbusiness.GetSkillGroupOutput, error)
	GetSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.GetSkillGroupInput) *AlexaforbusinessGetSkillGroupFuture

	ListBusinessReportSchedules(ctx workflow.Context, input *alexaforbusiness.ListBusinessReportSchedulesInput) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error)
	ListBusinessReportSchedulesAsync(ctx workflow.Context, input *alexaforbusiness.ListBusinessReportSchedulesInput) *AlexaforbusinessListBusinessReportSchedulesFuture

	ListConferenceProviders(ctx workflow.Context, input *alexaforbusiness.ListConferenceProvidersInput) (*alexaforbusiness.ListConferenceProvidersOutput, error)
	ListConferenceProvidersAsync(ctx workflow.Context, input *alexaforbusiness.ListConferenceProvidersInput) *AlexaforbusinessListConferenceProvidersFuture

	ListDeviceEvents(ctx workflow.Context, input *alexaforbusiness.ListDeviceEventsInput) (*alexaforbusiness.ListDeviceEventsOutput, error)
	ListDeviceEventsAsync(ctx workflow.Context, input *alexaforbusiness.ListDeviceEventsInput) *AlexaforbusinessListDeviceEventsFuture

	ListGatewayGroups(ctx workflow.Context, input *alexaforbusiness.ListGatewayGroupsInput) (*alexaforbusiness.ListGatewayGroupsOutput, error)
	ListGatewayGroupsAsync(ctx workflow.Context, input *alexaforbusiness.ListGatewayGroupsInput) *AlexaforbusinessListGatewayGroupsFuture

	ListGateways(ctx workflow.Context, input *alexaforbusiness.ListGatewaysInput) (*alexaforbusiness.ListGatewaysOutput, error)
	ListGatewaysAsync(ctx workflow.Context, input *alexaforbusiness.ListGatewaysInput) *AlexaforbusinessListGatewaysFuture

	ListSkills(ctx workflow.Context, input *alexaforbusiness.ListSkillsInput) (*alexaforbusiness.ListSkillsOutput, error)
	ListSkillsAsync(ctx workflow.Context, input *alexaforbusiness.ListSkillsInput) *AlexaforbusinessListSkillsFuture

	ListSkillsStoreCategories(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreCategoriesInput) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error)
	ListSkillsStoreCategoriesAsync(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreCategoriesInput) *AlexaforbusinessListSkillsStoreCategoriesFuture

	ListSkillsStoreSkillsByCategory(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error)
	ListSkillsStoreSkillsByCategoryAsync(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput) *AlexaforbusinessListSkillsStoreSkillsByCategoryFuture

	ListSmartHomeAppliances(ctx workflow.Context, input *alexaforbusiness.ListSmartHomeAppliancesInput) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error)
	ListSmartHomeAppliancesAsync(ctx workflow.Context, input *alexaforbusiness.ListSmartHomeAppliancesInput) *AlexaforbusinessListSmartHomeAppliancesFuture

	ListTags(ctx workflow.Context, input *alexaforbusiness.ListTagsInput) (*alexaforbusiness.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *alexaforbusiness.ListTagsInput) *AlexaforbusinessListTagsFuture

	PutConferencePreference(ctx workflow.Context, input *alexaforbusiness.PutConferencePreferenceInput) (*alexaforbusiness.PutConferencePreferenceOutput, error)
	PutConferencePreferenceAsync(ctx workflow.Context, input *alexaforbusiness.PutConferencePreferenceInput) *AlexaforbusinessPutConferencePreferenceFuture

	PutInvitationConfiguration(ctx workflow.Context, input *alexaforbusiness.PutInvitationConfigurationInput) (*alexaforbusiness.PutInvitationConfigurationOutput, error)
	PutInvitationConfigurationAsync(ctx workflow.Context, input *alexaforbusiness.PutInvitationConfigurationInput) *AlexaforbusinessPutInvitationConfigurationFuture

	PutRoomSkillParameter(ctx workflow.Context, input *alexaforbusiness.PutRoomSkillParameterInput) (*alexaforbusiness.PutRoomSkillParameterOutput, error)
	PutRoomSkillParameterAsync(ctx workflow.Context, input *alexaforbusiness.PutRoomSkillParameterInput) *AlexaforbusinessPutRoomSkillParameterFuture

	PutSkillAuthorization(ctx workflow.Context, input *alexaforbusiness.PutSkillAuthorizationInput) (*alexaforbusiness.PutSkillAuthorizationOutput, error)
	PutSkillAuthorizationAsync(ctx workflow.Context, input *alexaforbusiness.PutSkillAuthorizationInput) *AlexaforbusinessPutSkillAuthorizationFuture

	RegisterAVSDevice(ctx workflow.Context, input *alexaforbusiness.RegisterAVSDeviceInput) (*alexaforbusiness.RegisterAVSDeviceOutput, error)
	RegisterAVSDeviceAsync(ctx workflow.Context, input *alexaforbusiness.RegisterAVSDeviceInput) *AlexaforbusinessRegisterAVSDeviceFuture

	RejectSkill(ctx workflow.Context, input *alexaforbusiness.RejectSkillInput) (*alexaforbusiness.RejectSkillOutput, error)
	RejectSkillAsync(ctx workflow.Context, input *alexaforbusiness.RejectSkillInput) *AlexaforbusinessRejectSkillFuture

	ResolveRoom(ctx workflow.Context, input *alexaforbusiness.ResolveRoomInput) (*alexaforbusiness.ResolveRoomOutput, error)
	ResolveRoomAsync(ctx workflow.Context, input *alexaforbusiness.ResolveRoomInput) *AlexaforbusinessResolveRoomFuture

	RevokeInvitation(ctx workflow.Context, input *alexaforbusiness.RevokeInvitationInput) (*alexaforbusiness.RevokeInvitationOutput, error)
	RevokeInvitationAsync(ctx workflow.Context, input *alexaforbusiness.RevokeInvitationInput) *AlexaforbusinessRevokeInvitationFuture

	SearchAddressBooks(ctx workflow.Context, input *alexaforbusiness.SearchAddressBooksInput) (*alexaforbusiness.SearchAddressBooksOutput, error)
	SearchAddressBooksAsync(ctx workflow.Context, input *alexaforbusiness.SearchAddressBooksInput) *AlexaforbusinessSearchAddressBooksFuture

	SearchContacts(ctx workflow.Context, input *alexaforbusiness.SearchContactsInput) (*alexaforbusiness.SearchContactsOutput, error)
	SearchContactsAsync(ctx workflow.Context, input *alexaforbusiness.SearchContactsInput) *AlexaforbusinessSearchContactsFuture

	SearchDevices(ctx workflow.Context, input *alexaforbusiness.SearchDevicesInput) (*alexaforbusiness.SearchDevicesOutput, error)
	SearchDevicesAsync(ctx workflow.Context, input *alexaforbusiness.SearchDevicesInput) *AlexaforbusinessSearchDevicesFuture

	SearchNetworkProfiles(ctx workflow.Context, input *alexaforbusiness.SearchNetworkProfilesInput) (*alexaforbusiness.SearchNetworkProfilesOutput, error)
	SearchNetworkProfilesAsync(ctx workflow.Context, input *alexaforbusiness.SearchNetworkProfilesInput) *AlexaforbusinessSearchNetworkProfilesFuture

	SearchProfiles(ctx workflow.Context, input *alexaforbusiness.SearchProfilesInput) (*alexaforbusiness.SearchProfilesOutput, error)
	SearchProfilesAsync(ctx workflow.Context, input *alexaforbusiness.SearchProfilesInput) *AlexaforbusinessSearchProfilesFuture

	SearchRooms(ctx workflow.Context, input *alexaforbusiness.SearchRoomsInput) (*alexaforbusiness.SearchRoomsOutput, error)
	SearchRoomsAsync(ctx workflow.Context, input *alexaforbusiness.SearchRoomsInput) *AlexaforbusinessSearchRoomsFuture

	SearchSkillGroups(ctx workflow.Context, input *alexaforbusiness.SearchSkillGroupsInput) (*alexaforbusiness.SearchSkillGroupsOutput, error)
	SearchSkillGroupsAsync(ctx workflow.Context, input *alexaforbusiness.SearchSkillGroupsInput) *AlexaforbusinessSearchSkillGroupsFuture

	SearchUsers(ctx workflow.Context, input *alexaforbusiness.SearchUsersInput) (*alexaforbusiness.SearchUsersOutput, error)
	SearchUsersAsync(ctx workflow.Context, input *alexaforbusiness.SearchUsersInput) *AlexaforbusinessSearchUsersFuture

	SendAnnouncement(ctx workflow.Context, input *alexaforbusiness.SendAnnouncementInput) (*alexaforbusiness.SendAnnouncementOutput, error)
	SendAnnouncementAsync(ctx workflow.Context, input *alexaforbusiness.SendAnnouncementInput) *AlexaforbusinessSendAnnouncementFuture

	SendInvitation(ctx workflow.Context, input *alexaforbusiness.SendInvitationInput) (*alexaforbusiness.SendInvitationOutput, error)
	SendInvitationAsync(ctx workflow.Context, input *alexaforbusiness.SendInvitationInput) *AlexaforbusinessSendInvitationFuture

	StartDeviceSync(ctx workflow.Context, input *alexaforbusiness.StartDeviceSyncInput) (*alexaforbusiness.StartDeviceSyncOutput, error)
	StartDeviceSyncAsync(ctx workflow.Context, input *alexaforbusiness.StartDeviceSyncInput) *AlexaforbusinessStartDeviceSyncFuture

	StartSmartHomeApplianceDiscovery(ctx workflow.Context, input *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error)
	StartSmartHomeApplianceDiscoveryAsync(ctx workflow.Context, input *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput) *AlexaforbusinessStartSmartHomeApplianceDiscoveryFuture

	TagResource(ctx workflow.Context, input *alexaforbusiness.TagResourceInput) (*alexaforbusiness.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *alexaforbusiness.TagResourceInput) *AlexaforbusinessTagResourceFuture

	UntagResource(ctx workflow.Context, input *alexaforbusiness.UntagResourceInput) (*alexaforbusiness.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *alexaforbusiness.UntagResourceInput) *AlexaforbusinessUntagResourceFuture

	UpdateAddressBook(ctx workflow.Context, input *alexaforbusiness.UpdateAddressBookInput) (*alexaforbusiness.UpdateAddressBookOutput, error)
	UpdateAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.UpdateAddressBookInput) *AlexaforbusinessUpdateAddressBookFuture

	UpdateBusinessReportSchedule(ctx workflow.Context, input *alexaforbusiness.UpdateBusinessReportScheduleInput) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error)
	UpdateBusinessReportScheduleAsync(ctx workflow.Context, input *alexaforbusiness.UpdateBusinessReportScheduleInput) *AlexaforbusinessUpdateBusinessReportScheduleFuture

	UpdateConferenceProvider(ctx workflow.Context, input *alexaforbusiness.UpdateConferenceProviderInput) (*alexaforbusiness.UpdateConferenceProviderOutput, error)
	UpdateConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.UpdateConferenceProviderInput) *AlexaforbusinessUpdateConferenceProviderFuture

	UpdateContact(ctx workflow.Context, input *alexaforbusiness.UpdateContactInput) (*alexaforbusiness.UpdateContactOutput, error)
	UpdateContactAsync(ctx workflow.Context, input *alexaforbusiness.UpdateContactInput) *AlexaforbusinessUpdateContactFuture

	UpdateDevice(ctx workflow.Context, input *alexaforbusiness.UpdateDeviceInput) (*alexaforbusiness.UpdateDeviceOutput, error)
	UpdateDeviceAsync(ctx workflow.Context, input *alexaforbusiness.UpdateDeviceInput) *AlexaforbusinessUpdateDeviceFuture

	UpdateGateway(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayInput) (*alexaforbusiness.UpdateGatewayOutput, error)
	UpdateGatewayAsync(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayInput) *AlexaforbusinessUpdateGatewayFuture

	UpdateGatewayGroup(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayGroupInput) (*alexaforbusiness.UpdateGatewayGroupOutput, error)
	UpdateGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayGroupInput) *AlexaforbusinessUpdateGatewayGroupFuture

	UpdateNetworkProfile(ctx workflow.Context, input *alexaforbusiness.UpdateNetworkProfileInput) (*alexaforbusiness.UpdateNetworkProfileOutput, error)
	UpdateNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.UpdateNetworkProfileInput) *AlexaforbusinessUpdateNetworkProfileFuture

	UpdateProfile(ctx workflow.Context, input *alexaforbusiness.UpdateProfileInput) (*alexaforbusiness.UpdateProfileOutput, error)
	UpdateProfileAsync(ctx workflow.Context, input *alexaforbusiness.UpdateProfileInput) *AlexaforbusinessUpdateProfileFuture

	UpdateRoom(ctx workflow.Context, input *alexaforbusiness.UpdateRoomInput) (*alexaforbusiness.UpdateRoomOutput, error)
	UpdateRoomAsync(ctx workflow.Context, input *alexaforbusiness.UpdateRoomInput) *AlexaforbusinessUpdateRoomFuture

	UpdateSkillGroup(ctx workflow.Context, input *alexaforbusiness.UpdateSkillGroupInput) (*alexaforbusiness.UpdateSkillGroupOutput, error)
	UpdateSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.UpdateSkillGroupInput) *AlexaforbusinessUpdateSkillGroupFuture
}

type AlexaForBusinessStub struct{}

func NewAlexaForBusinessStub() AlexaForBusinessClient {
	return &AlexaForBusinessStub{}
}

type AlexaforbusinessApproveSkillFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessApproveSkillFuture) Get(ctx workflow.Context) (*alexaforbusiness.ApproveSkillOutput, error) {
	var output alexaforbusiness.ApproveSkillOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessAssociateContactWithAddressBookFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessAssociateContactWithAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error) {
	var output alexaforbusiness.AssociateContactWithAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessAssociateDeviceWithNetworkProfileFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessAssociateDeviceWithNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error) {
	var output alexaforbusiness.AssociateDeviceWithNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessAssociateDeviceWithRoomFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessAssociateDeviceWithRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error) {
	var output alexaforbusiness.AssociateDeviceWithRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessAssociateSkillGroupWithRoomFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessAssociateSkillGroupWithRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error) {
	var output alexaforbusiness.AssociateSkillGroupWithRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessAssociateSkillWithSkillGroupFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessAssociateSkillWithSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error) {
	var output alexaforbusiness.AssociateSkillWithSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessAssociateSkillWithUsersFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessAssociateSkillWithUsersFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateSkillWithUsersOutput, error) {
	var output alexaforbusiness.AssociateSkillWithUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessCreateAddressBookFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessCreateAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateAddressBookOutput, error) {
	var output alexaforbusiness.CreateAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessCreateBusinessReportScheduleFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessCreateBusinessReportScheduleFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.CreateBusinessReportScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessCreateConferenceProviderFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessCreateConferenceProviderFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateConferenceProviderOutput, error) {
	var output alexaforbusiness.CreateConferenceProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessCreateContactFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessCreateContactFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateContactOutput, error) {
	var output alexaforbusiness.CreateContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessCreateGatewayGroupFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessCreateGatewayGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateGatewayGroupOutput, error) {
	var output alexaforbusiness.CreateGatewayGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessCreateNetworkProfileFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessCreateNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateNetworkProfileOutput, error) {
	var output alexaforbusiness.CreateNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessCreateProfileFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessCreateProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateProfileOutput, error) {
	var output alexaforbusiness.CreateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessCreateRoomFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessCreateRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateRoomOutput, error) {
	var output alexaforbusiness.CreateRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessCreateSkillGroupFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessCreateSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateSkillGroupOutput, error) {
	var output alexaforbusiness.CreateSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessCreateUserFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessCreateUserFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateUserOutput, error) {
	var output alexaforbusiness.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteAddressBookFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteAddressBookOutput, error) {
	var output alexaforbusiness.DeleteAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteBusinessReportScheduleFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteBusinessReportScheduleFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.DeleteBusinessReportScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteConferenceProviderFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteConferenceProviderFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteConferenceProviderOutput, error) {
	var output alexaforbusiness.DeleteConferenceProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteContactFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteContactFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteContactOutput, error) {
	var output alexaforbusiness.DeleteContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteDeviceFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteDeviceFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteDeviceOutput, error) {
	var output alexaforbusiness.DeleteDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteDeviceUsageDataFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteDeviceUsageDataFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error) {
	var output alexaforbusiness.DeleteDeviceUsageDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteGatewayGroupFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteGatewayGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteGatewayGroupOutput, error) {
	var output alexaforbusiness.DeleteGatewayGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteNetworkProfileFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteNetworkProfileOutput, error) {
	var output alexaforbusiness.DeleteNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteProfileFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteProfileOutput, error) {
	var output alexaforbusiness.DeleteProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteRoomFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteRoomOutput, error) {
	var output alexaforbusiness.DeleteRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteRoomSkillParameterFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteRoomSkillParameterFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error) {
	var output alexaforbusiness.DeleteRoomSkillParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteSkillAuthorizationFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteSkillAuthorizationFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error) {
	var output alexaforbusiness.DeleteSkillAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteSkillGroupFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteSkillGroupOutput, error) {
	var output alexaforbusiness.DeleteSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDeleteUserFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDeleteUserFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteUserOutput, error) {
	var output alexaforbusiness.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDisassociateContactFromAddressBookFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDisassociateContactFromAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error) {
	var output alexaforbusiness.DisassociateContactFromAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDisassociateDeviceFromRoomFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDisassociateDeviceFromRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error) {
	var output alexaforbusiness.DisassociateDeviceFromRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDisassociateSkillFromSkillGroupFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDisassociateSkillFromSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error) {
	var output alexaforbusiness.DisassociateSkillFromSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDisassociateSkillFromUsersFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDisassociateSkillFromUsersFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error) {
	var output alexaforbusiness.DisassociateSkillFromUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessDisassociateSkillGroupFromRoomFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessDisassociateSkillGroupFromRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error) {
	var output alexaforbusiness.DisassociateSkillGroupFromRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessForgetSmartHomeAppliancesFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessForgetSmartHomeAppliancesFuture) Get(ctx workflow.Context) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error) {
	var output alexaforbusiness.ForgetSmartHomeAppliancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetAddressBookFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetAddressBookOutput, error) {
	var output alexaforbusiness.GetAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetConferencePreferenceFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetConferencePreferenceFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetConferencePreferenceOutput, error) {
	var output alexaforbusiness.GetConferencePreferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetConferenceProviderFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetConferenceProviderFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetConferenceProviderOutput, error) {
	var output alexaforbusiness.GetConferenceProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetContactFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetContactFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetContactOutput, error) {
	var output alexaforbusiness.GetContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetDeviceFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetDeviceFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetDeviceOutput, error) {
	var output alexaforbusiness.GetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetGatewayFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetGatewayFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetGatewayOutput, error) {
	var output alexaforbusiness.GetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetGatewayGroupFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetGatewayGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetGatewayGroupOutput, error) {
	var output alexaforbusiness.GetGatewayGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetInvitationConfigurationFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetInvitationConfigurationFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetInvitationConfigurationOutput, error) {
	var output alexaforbusiness.GetInvitationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetNetworkProfileFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetNetworkProfileOutput, error) {
	var output alexaforbusiness.GetNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetProfileFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetProfileOutput, error) {
	var output alexaforbusiness.GetProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetRoomFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetRoomOutput, error) {
	var output alexaforbusiness.GetRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetRoomSkillParameterFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetRoomSkillParameterFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetRoomSkillParameterOutput, error) {
	var output alexaforbusiness.GetRoomSkillParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessGetSkillGroupFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessGetSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetSkillGroupOutput, error) {
	var output alexaforbusiness.GetSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessListBusinessReportSchedulesFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessListBusinessReportSchedulesFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error) {
	var output alexaforbusiness.ListBusinessReportSchedulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessListConferenceProvidersFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessListConferenceProvidersFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListConferenceProvidersOutput, error) {
	var output alexaforbusiness.ListConferenceProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessListDeviceEventsFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessListDeviceEventsFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListDeviceEventsOutput, error) {
	var output alexaforbusiness.ListDeviceEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessListGatewayGroupsFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessListGatewayGroupsFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListGatewayGroupsOutput, error) {
	var output alexaforbusiness.ListGatewayGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessListGatewaysFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessListGatewaysFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListGatewaysOutput, error) {
	var output alexaforbusiness.ListGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessListSkillsFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessListSkillsFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListSkillsOutput, error) {
	var output alexaforbusiness.ListSkillsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessListSkillsStoreCategoriesFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessListSkillsStoreCategoriesFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error) {
	var output alexaforbusiness.ListSkillsStoreCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessListSkillsStoreSkillsByCategoryFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessListSkillsStoreSkillsByCategoryFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error) {
	var output alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessListSmartHomeAppliancesFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessListSmartHomeAppliancesFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error) {
	var output alexaforbusiness.ListSmartHomeAppliancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessListTagsFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessListTagsFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListTagsOutput, error) {
	var output alexaforbusiness.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessPutConferencePreferenceFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessPutConferencePreferenceFuture) Get(ctx workflow.Context) (*alexaforbusiness.PutConferencePreferenceOutput, error) {
	var output alexaforbusiness.PutConferencePreferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessPutInvitationConfigurationFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessPutInvitationConfigurationFuture) Get(ctx workflow.Context) (*alexaforbusiness.PutInvitationConfigurationOutput, error) {
	var output alexaforbusiness.PutInvitationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessPutRoomSkillParameterFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessPutRoomSkillParameterFuture) Get(ctx workflow.Context) (*alexaforbusiness.PutRoomSkillParameterOutput, error) {
	var output alexaforbusiness.PutRoomSkillParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessPutSkillAuthorizationFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessPutSkillAuthorizationFuture) Get(ctx workflow.Context) (*alexaforbusiness.PutSkillAuthorizationOutput, error) {
	var output alexaforbusiness.PutSkillAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessRegisterAVSDeviceFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessRegisterAVSDeviceFuture) Get(ctx workflow.Context) (*alexaforbusiness.RegisterAVSDeviceOutput, error) {
	var output alexaforbusiness.RegisterAVSDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessRejectSkillFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessRejectSkillFuture) Get(ctx workflow.Context) (*alexaforbusiness.RejectSkillOutput, error) {
	var output alexaforbusiness.RejectSkillOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessResolveRoomFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessResolveRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.ResolveRoomOutput, error) {
	var output alexaforbusiness.ResolveRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessRevokeInvitationFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessRevokeInvitationFuture) Get(ctx workflow.Context) (*alexaforbusiness.RevokeInvitationOutput, error) {
	var output alexaforbusiness.RevokeInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessSearchAddressBooksFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessSearchAddressBooksFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchAddressBooksOutput, error) {
	var output alexaforbusiness.SearchAddressBooksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessSearchContactsFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessSearchContactsFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchContactsOutput, error) {
	var output alexaforbusiness.SearchContactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessSearchDevicesFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessSearchDevicesFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchDevicesOutput, error) {
	var output alexaforbusiness.SearchDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessSearchNetworkProfilesFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessSearchNetworkProfilesFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchNetworkProfilesOutput, error) {
	var output alexaforbusiness.SearchNetworkProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessSearchProfilesFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessSearchProfilesFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchProfilesOutput, error) {
	var output alexaforbusiness.SearchProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessSearchRoomsFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessSearchRoomsFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchRoomsOutput, error) {
	var output alexaforbusiness.SearchRoomsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessSearchSkillGroupsFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessSearchSkillGroupsFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchSkillGroupsOutput, error) {
	var output alexaforbusiness.SearchSkillGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessSearchUsersFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessSearchUsersFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchUsersOutput, error) {
	var output alexaforbusiness.SearchUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessSendAnnouncementFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessSendAnnouncementFuture) Get(ctx workflow.Context) (*alexaforbusiness.SendAnnouncementOutput, error) {
	var output alexaforbusiness.SendAnnouncementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessSendInvitationFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessSendInvitationFuture) Get(ctx workflow.Context) (*alexaforbusiness.SendInvitationOutput, error) {
	var output alexaforbusiness.SendInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessStartDeviceSyncFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessStartDeviceSyncFuture) Get(ctx workflow.Context) (*alexaforbusiness.StartDeviceSyncOutput, error) {
	var output alexaforbusiness.StartDeviceSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessStartSmartHomeApplianceDiscoveryFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessStartSmartHomeApplianceDiscoveryFuture) Get(ctx workflow.Context) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error) {
	var output alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessTagResourceFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessTagResourceFuture) Get(ctx workflow.Context) (*alexaforbusiness.TagResourceOutput, error) {
	var output alexaforbusiness.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessUntagResourceFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessUntagResourceFuture) Get(ctx workflow.Context) (*alexaforbusiness.UntagResourceOutput, error) {
	var output alexaforbusiness.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessUpdateAddressBookFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessUpdateAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateAddressBookOutput, error) {
	var output alexaforbusiness.UpdateAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessUpdateBusinessReportScheduleFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessUpdateBusinessReportScheduleFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.UpdateBusinessReportScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessUpdateConferenceProviderFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessUpdateConferenceProviderFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateConferenceProviderOutput, error) {
	var output alexaforbusiness.UpdateConferenceProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessUpdateContactFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessUpdateContactFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateContactOutput, error) {
	var output alexaforbusiness.UpdateContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessUpdateDeviceFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessUpdateDeviceFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateDeviceOutput, error) {
	var output alexaforbusiness.UpdateDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessUpdateGatewayFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessUpdateGatewayFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateGatewayOutput, error) {
	var output alexaforbusiness.UpdateGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessUpdateGatewayGroupFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessUpdateGatewayGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateGatewayGroupOutput, error) {
	var output alexaforbusiness.UpdateGatewayGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessUpdateNetworkProfileFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessUpdateNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateNetworkProfileOutput, error) {
	var output alexaforbusiness.UpdateNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessUpdateProfileFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessUpdateProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateProfileOutput, error) {
	var output alexaforbusiness.UpdateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessUpdateRoomFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessUpdateRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateRoomOutput, error) {
	var output alexaforbusiness.UpdateRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaforbusinessUpdateSkillGroupFuture struct {
	Future workflow.Future
}

func (r *AlexaforbusinessUpdateSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateSkillGroupOutput, error) {
	var output alexaforbusiness.UpdateSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ApproveSkill(ctx workflow.Context, input *alexaforbusiness.ApproveSkillInput) (*alexaforbusiness.ApproveSkillOutput, error) {
	var output alexaforbusiness.ApproveSkillOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ApproveSkill", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ApproveSkillAsync(ctx workflow.Context, input *alexaforbusiness.ApproveSkillInput) *AlexaforbusinessApproveSkillFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ApproveSkill", input)
	return &AlexaforbusinessApproveSkillFuture{Future: future}
}

func (a *AlexaForBusinessStub) AssociateContactWithAddressBook(ctx workflow.Context, input *alexaforbusiness.AssociateContactWithAddressBookInput) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error) {
	var output alexaforbusiness.AssociateContactWithAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.AssociateContactWithAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) AssociateContactWithAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.AssociateContactWithAddressBookInput) *AlexaforbusinessAssociateContactWithAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.AssociateContactWithAddressBook", input)
	return &AlexaforbusinessAssociateContactWithAddressBookFuture{Future: future}
}

func (a *AlexaForBusinessStub) AssociateDeviceWithNetworkProfile(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithNetworkProfileInput) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error) {
	var output alexaforbusiness.AssociateDeviceWithNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.AssociateDeviceWithNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) AssociateDeviceWithNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithNetworkProfileInput) *AlexaforbusinessAssociateDeviceWithNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.AssociateDeviceWithNetworkProfile", input)
	return &AlexaforbusinessAssociateDeviceWithNetworkProfileFuture{Future: future}
}

func (a *AlexaForBusinessStub) AssociateDeviceWithRoom(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithRoomInput) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error) {
	var output alexaforbusiness.AssociateDeviceWithRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.AssociateDeviceWithRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) AssociateDeviceWithRoomAsync(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithRoomInput) *AlexaforbusinessAssociateDeviceWithRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.AssociateDeviceWithRoom", input)
	return &AlexaforbusinessAssociateDeviceWithRoomFuture{Future: future}
}

func (a *AlexaForBusinessStub) AssociateSkillGroupWithRoom(ctx workflow.Context, input *alexaforbusiness.AssociateSkillGroupWithRoomInput) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error) {
	var output alexaforbusiness.AssociateSkillGroupWithRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.AssociateSkillGroupWithRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) AssociateSkillGroupWithRoomAsync(ctx workflow.Context, input *alexaforbusiness.AssociateSkillGroupWithRoomInput) *AlexaforbusinessAssociateSkillGroupWithRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.AssociateSkillGroupWithRoom", input)
	return &AlexaforbusinessAssociateSkillGroupWithRoomFuture{Future: future}
}

func (a *AlexaForBusinessStub) AssociateSkillWithSkillGroup(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithSkillGroupInput) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error) {
	var output alexaforbusiness.AssociateSkillWithSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.AssociateSkillWithSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) AssociateSkillWithSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithSkillGroupInput) *AlexaforbusinessAssociateSkillWithSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.AssociateSkillWithSkillGroup", input)
	return &AlexaforbusinessAssociateSkillWithSkillGroupFuture{Future: future}
}

func (a *AlexaForBusinessStub) AssociateSkillWithUsers(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithUsersInput) (*alexaforbusiness.AssociateSkillWithUsersOutput, error) {
	var output alexaforbusiness.AssociateSkillWithUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.AssociateSkillWithUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) AssociateSkillWithUsersAsync(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithUsersInput) *AlexaforbusinessAssociateSkillWithUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.AssociateSkillWithUsers", input)
	return &AlexaforbusinessAssociateSkillWithUsersFuture{Future: future}
}

func (a *AlexaForBusinessStub) CreateAddressBook(ctx workflow.Context, input *alexaforbusiness.CreateAddressBookInput) (*alexaforbusiness.CreateAddressBookOutput, error) {
	var output alexaforbusiness.CreateAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) CreateAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.CreateAddressBookInput) *AlexaforbusinessCreateAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateAddressBook", input)
	return &AlexaforbusinessCreateAddressBookFuture{Future: future}
}

func (a *AlexaForBusinessStub) CreateBusinessReportSchedule(ctx workflow.Context, input *alexaforbusiness.CreateBusinessReportScheduleInput) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.CreateBusinessReportScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateBusinessReportSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) CreateBusinessReportScheduleAsync(ctx workflow.Context, input *alexaforbusiness.CreateBusinessReportScheduleInput) *AlexaforbusinessCreateBusinessReportScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateBusinessReportSchedule", input)
	return &AlexaforbusinessCreateBusinessReportScheduleFuture{Future: future}
}

func (a *AlexaForBusinessStub) CreateConferenceProvider(ctx workflow.Context, input *alexaforbusiness.CreateConferenceProviderInput) (*alexaforbusiness.CreateConferenceProviderOutput, error) {
	var output alexaforbusiness.CreateConferenceProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateConferenceProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) CreateConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.CreateConferenceProviderInput) *AlexaforbusinessCreateConferenceProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateConferenceProvider", input)
	return &AlexaforbusinessCreateConferenceProviderFuture{Future: future}
}

func (a *AlexaForBusinessStub) CreateContact(ctx workflow.Context, input *alexaforbusiness.CreateContactInput) (*alexaforbusiness.CreateContactOutput, error) {
	var output alexaforbusiness.CreateContactOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateContact", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) CreateContactAsync(ctx workflow.Context, input *alexaforbusiness.CreateContactInput) *AlexaforbusinessCreateContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateContact", input)
	return &AlexaforbusinessCreateContactFuture{Future: future}
}

func (a *AlexaForBusinessStub) CreateGatewayGroup(ctx workflow.Context, input *alexaforbusiness.CreateGatewayGroupInput) (*alexaforbusiness.CreateGatewayGroupOutput, error) {
	var output alexaforbusiness.CreateGatewayGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateGatewayGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) CreateGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.CreateGatewayGroupInput) *AlexaforbusinessCreateGatewayGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateGatewayGroup", input)
	return &AlexaforbusinessCreateGatewayGroupFuture{Future: future}
}

func (a *AlexaForBusinessStub) CreateNetworkProfile(ctx workflow.Context, input *alexaforbusiness.CreateNetworkProfileInput) (*alexaforbusiness.CreateNetworkProfileOutput, error) {
	var output alexaforbusiness.CreateNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) CreateNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.CreateNetworkProfileInput) *AlexaforbusinessCreateNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateNetworkProfile", input)
	return &AlexaforbusinessCreateNetworkProfileFuture{Future: future}
}

func (a *AlexaForBusinessStub) CreateProfile(ctx workflow.Context, input *alexaforbusiness.CreateProfileInput) (*alexaforbusiness.CreateProfileOutput, error) {
	var output alexaforbusiness.CreateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) CreateProfileAsync(ctx workflow.Context, input *alexaforbusiness.CreateProfileInput) *AlexaforbusinessCreateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateProfile", input)
	return &AlexaforbusinessCreateProfileFuture{Future: future}
}

func (a *AlexaForBusinessStub) CreateRoom(ctx workflow.Context, input *alexaforbusiness.CreateRoomInput) (*alexaforbusiness.CreateRoomOutput, error) {
	var output alexaforbusiness.CreateRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) CreateRoomAsync(ctx workflow.Context, input *alexaforbusiness.CreateRoomInput) *AlexaforbusinessCreateRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateRoom", input)
	return &AlexaforbusinessCreateRoomFuture{Future: future}
}

func (a *AlexaForBusinessStub) CreateSkillGroup(ctx workflow.Context, input *alexaforbusiness.CreateSkillGroupInput) (*alexaforbusiness.CreateSkillGroupOutput, error) {
	var output alexaforbusiness.CreateSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) CreateSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.CreateSkillGroupInput) *AlexaforbusinessCreateSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateSkillGroup", input)
	return &AlexaforbusinessCreateSkillGroupFuture{Future: future}
}

func (a *AlexaForBusinessStub) CreateUser(ctx workflow.Context, input *alexaforbusiness.CreateUserInput) (*alexaforbusiness.CreateUserOutput, error) {
	var output alexaforbusiness.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) CreateUserAsync(ctx workflow.Context, input *alexaforbusiness.CreateUserInput) *AlexaforbusinessCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.CreateUser", input)
	return &AlexaforbusinessCreateUserFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteAddressBook(ctx workflow.Context, input *alexaforbusiness.DeleteAddressBookInput) (*alexaforbusiness.DeleteAddressBookOutput, error) {
	var output alexaforbusiness.DeleteAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.DeleteAddressBookInput) *AlexaforbusinessDeleteAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteAddressBook", input)
	return &AlexaforbusinessDeleteAddressBookFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteBusinessReportSchedule(ctx workflow.Context, input *alexaforbusiness.DeleteBusinessReportScheduleInput) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.DeleteBusinessReportScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteBusinessReportSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteBusinessReportScheduleAsync(ctx workflow.Context, input *alexaforbusiness.DeleteBusinessReportScheduleInput) *AlexaforbusinessDeleteBusinessReportScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteBusinessReportSchedule", input)
	return &AlexaforbusinessDeleteBusinessReportScheduleFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteConferenceProvider(ctx workflow.Context, input *alexaforbusiness.DeleteConferenceProviderInput) (*alexaforbusiness.DeleteConferenceProviderOutput, error) {
	var output alexaforbusiness.DeleteConferenceProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteConferenceProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.DeleteConferenceProviderInput) *AlexaforbusinessDeleteConferenceProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteConferenceProvider", input)
	return &AlexaforbusinessDeleteConferenceProviderFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteContact(ctx workflow.Context, input *alexaforbusiness.DeleteContactInput) (*alexaforbusiness.DeleteContactOutput, error) {
	var output alexaforbusiness.DeleteContactOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteContact", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteContactAsync(ctx workflow.Context, input *alexaforbusiness.DeleteContactInput) *AlexaforbusinessDeleteContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteContact", input)
	return &AlexaforbusinessDeleteContactFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteDevice(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceInput) (*alexaforbusiness.DeleteDeviceOutput, error) {
	var output alexaforbusiness.DeleteDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteDeviceAsync(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceInput) *AlexaforbusinessDeleteDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteDevice", input)
	return &AlexaforbusinessDeleteDeviceFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteDeviceUsageData(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceUsageDataInput) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error) {
	var output alexaforbusiness.DeleteDeviceUsageDataOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteDeviceUsageData", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteDeviceUsageDataAsync(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceUsageDataInput) *AlexaforbusinessDeleteDeviceUsageDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteDeviceUsageData", input)
	return &AlexaforbusinessDeleteDeviceUsageDataFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteGatewayGroup(ctx workflow.Context, input *alexaforbusiness.DeleteGatewayGroupInput) (*alexaforbusiness.DeleteGatewayGroupOutput, error) {
	var output alexaforbusiness.DeleteGatewayGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteGatewayGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.DeleteGatewayGroupInput) *AlexaforbusinessDeleteGatewayGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteGatewayGroup", input)
	return &AlexaforbusinessDeleteGatewayGroupFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteNetworkProfile(ctx workflow.Context, input *alexaforbusiness.DeleteNetworkProfileInput) (*alexaforbusiness.DeleteNetworkProfileOutput, error) {
	var output alexaforbusiness.DeleteNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.DeleteNetworkProfileInput) *AlexaforbusinessDeleteNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteNetworkProfile", input)
	return &AlexaforbusinessDeleteNetworkProfileFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteProfile(ctx workflow.Context, input *alexaforbusiness.DeleteProfileInput) (*alexaforbusiness.DeleteProfileOutput, error) {
	var output alexaforbusiness.DeleteProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteProfileAsync(ctx workflow.Context, input *alexaforbusiness.DeleteProfileInput) *AlexaforbusinessDeleteProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteProfile", input)
	return &AlexaforbusinessDeleteProfileFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteRoom(ctx workflow.Context, input *alexaforbusiness.DeleteRoomInput) (*alexaforbusiness.DeleteRoomOutput, error) {
	var output alexaforbusiness.DeleteRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteRoomAsync(ctx workflow.Context, input *alexaforbusiness.DeleteRoomInput) *AlexaforbusinessDeleteRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteRoom", input)
	return &AlexaforbusinessDeleteRoomFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteRoomSkillParameter(ctx workflow.Context, input *alexaforbusiness.DeleteRoomSkillParameterInput) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error) {
	var output alexaforbusiness.DeleteRoomSkillParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteRoomSkillParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteRoomSkillParameterAsync(ctx workflow.Context, input *alexaforbusiness.DeleteRoomSkillParameterInput) *AlexaforbusinessDeleteRoomSkillParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteRoomSkillParameter", input)
	return &AlexaforbusinessDeleteRoomSkillParameterFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteSkillAuthorization(ctx workflow.Context, input *alexaforbusiness.DeleteSkillAuthorizationInput) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error) {
	var output alexaforbusiness.DeleteSkillAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteSkillAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteSkillAuthorizationAsync(ctx workflow.Context, input *alexaforbusiness.DeleteSkillAuthorizationInput) *AlexaforbusinessDeleteSkillAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteSkillAuthorization", input)
	return &AlexaforbusinessDeleteSkillAuthorizationFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteSkillGroup(ctx workflow.Context, input *alexaforbusiness.DeleteSkillGroupInput) (*alexaforbusiness.DeleteSkillGroupOutput, error) {
	var output alexaforbusiness.DeleteSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.DeleteSkillGroupInput) *AlexaforbusinessDeleteSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteSkillGroup", input)
	return &AlexaforbusinessDeleteSkillGroupFuture{Future: future}
}

func (a *AlexaForBusinessStub) DeleteUser(ctx workflow.Context, input *alexaforbusiness.DeleteUserInput) (*alexaforbusiness.DeleteUserOutput, error) {
	var output alexaforbusiness.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DeleteUserAsync(ctx workflow.Context, input *alexaforbusiness.DeleteUserInput) *AlexaforbusinessDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DeleteUser", input)
	return &AlexaforbusinessDeleteUserFuture{Future: future}
}

func (a *AlexaForBusinessStub) DisassociateContactFromAddressBook(ctx workflow.Context, input *alexaforbusiness.DisassociateContactFromAddressBookInput) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error) {
	var output alexaforbusiness.DisassociateContactFromAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DisassociateContactFromAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DisassociateContactFromAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateContactFromAddressBookInput) *AlexaforbusinessDisassociateContactFromAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DisassociateContactFromAddressBook", input)
	return &AlexaforbusinessDisassociateContactFromAddressBookFuture{Future: future}
}

func (a *AlexaForBusinessStub) DisassociateDeviceFromRoom(ctx workflow.Context, input *alexaforbusiness.DisassociateDeviceFromRoomInput) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error) {
	var output alexaforbusiness.DisassociateDeviceFromRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DisassociateDeviceFromRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DisassociateDeviceFromRoomAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateDeviceFromRoomInput) *AlexaforbusinessDisassociateDeviceFromRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DisassociateDeviceFromRoom", input)
	return &AlexaforbusinessDisassociateDeviceFromRoomFuture{Future: future}
}

func (a *AlexaForBusinessStub) DisassociateSkillFromSkillGroup(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromSkillGroupInput) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error) {
	var output alexaforbusiness.DisassociateSkillFromSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DisassociateSkillFromSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DisassociateSkillFromSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromSkillGroupInput) *AlexaforbusinessDisassociateSkillFromSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DisassociateSkillFromSkillGroup", input)
	return &AlexaforbusinessDisassociateSkillFromSkillGroupFuture{Future: future}
}

func (a *AlexaForBusinessStub) DisassociateSkillFromUsers(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromUsersInput) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error) {
	var output alexaforbusiness.DisassociateSkillFromUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DisassociateSkillFromUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DisassociateSkillFromUsersAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromUsersInput) *AlexaforbusinessDisassociateSkillFromUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DisassociateSkillFromUsers", input)
	return &AlexaforbusinessDisassociateSkillFromUsersFuture{Future: future}
}

func (a *AlexaForBusinessStub) DisassociateSkillGroupFromRoom(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillGroupFromRoomInput) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error) {
	var output alexaforbusiness.DisassociateSkillGroupFromRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DisassociateSkillGroupFromRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) DisassociateSkillGroupFromRoomAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillGroupFromRoomInput) *AlexaforbusinessDisassociateSkillGroupFromRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.DisassociateSkillGroupFromRoom", input)
	return &AlexaforbusinessDisassociateSkillGroupFromRoomFuture{Future: future}
}

func (a *AlexaForBusinessStub) ForgetSmartHomeAppliances(ctx workflow.Context, input *alexaforbusiness.ForgetSmartHomeAppliancesInput) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error) {
	var output alexaforbusiness.ForgetSmartHomeAppliancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ForgetSmartHomeAppliances", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ForgetSmartHomeAppliancesAsync(ctx workflow.Context, input *alexaforbusiness.ForgetSmartHomeAppliancesInput) *AlexaforbusinessForgetSmartHomeAppliancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ForgetSmartHomeAppliances", input)
	return &AlexaforbusinessForgetSmartHomeAppliancesFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetAddressBook(ctx workflow.Context, input *alexaforbusiness.GetAddressBookInput) (*alexaforbusiness.GetAddressBookOutput, error) {
	var output alexaforbusiness.GetAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.GetAddressBookInput) *AlexaforbusinessGetAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetAddressBook", input)
	return &AlexaforbusinessGetAddressBookFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetConferencePreference(ctx workflow.Context, input *alexaforbusiness.GetConferencePreferenceInput) (*alexaforbusiness.GetConferencePreferenceOutput, error) {
	var output alexaforbusiness.GetConferencePreferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetConferencePreference", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetConferencePreferenceAsync(ctx workflow.Context, input *alexaforbusiness.GetConferencePreferenceInput) *AlexaforbusinessGetConferencePreferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetConferencePreference", input)
	return &AlexaforbusinessGetConferencePreferenceFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetConferenceProvider(ctx workflow.Context, input *alexaforbusiness.GetConferenceProviderInput) (*alexaforbusiness.GetConferenceProviderOutput, error) {
	var output alexaforbusiness.GetConferenceProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetConferenceProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.GetConferenceProviderInput) *AlexaforbusinessGetConferenceProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetConferenceProvider", input)
	return &AlexaforbusinessGetConferenceProviderFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetContact(ctx workflow.Context, input *alexaforbusiness.GetContactInput) (*alexaforbusiness.GetContactOutput, error) {
	var output alexaforbusiness.GetContactOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetContact", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetContactAsync(ctx workflow.Context, input *alexaforbusiness.GetContactInput) *AlexaforbusinessGetContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetContact", input)
	return &AlexaforbusinessGetContactFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetDevice(ctx workflow.Context, input *alexaforbusiness.GetDeviceInput) (*alexaforbusiness.GetDeviceOutput, error) {
	var output alexaforbusiness.GetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetDeviceAsync(ctx workflow.Context, input *alexaforbusiness.GetDeviceInput) *AlexaforbusinessGetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetDevice", input)
	return &AlexaforbusinessGetDeviceFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetGateway(ctx workflow.Context, input *alexaforbusiness.GetGatewayInput) (*alexaforbusiness.GetGatewayOutput, error) {
	var output alexaforbusiness.GetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetGatewayAsync(ctx workflow.Context, input *alexaforbusiness.GetGatewayInput) *AlexaforbusinessGetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetGateway", input)
	return &AlexaforbusinessGetGatewayFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetGatewayGroup(ctx workflow.Context, input *alexaforbusiness.GetGatewayGroupInput) (*alexaforbusiness.GetGatewayGroupOutput, error) {
	var output alexaforbusiness.GetGatewayGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetGatewayGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.GetGatewayGroupInput) *AlexaforbusinessGetGatewayGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetGatewayGroup", input)
	return &AlexaforbusinessGetGatewayGroupFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetInvitationConfiguration(ctx workflow.Context, input *alexaforbusiness.GetInvitationConfigurationInput) (*alexaforbusiness.GetInvitationConfigurationOutput, error) {
	var output alexaforbusiness.GetInvitationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetInvitationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetInvitationConfigurationAsync(ctx workflow.Context, input *alexaforbusiness.GetInvitationConfigurationInput) *AlexaforbusinessGetInvitationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetInvitationConfiguration", input)
	return &AlexaforbusinessGetInvitationConfigurationFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetNetworkProfile(ctx workflow.Context, input *alexaforbusiness.GetNetworkProfileInput) (*alexaforbusiness.GetNetworkProfileOutput, error) {
	var output alexaforbusiness.GetNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.GetNetworkProfileInput) *AlexaforbusinessGetNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetNetworkProfile", input)
	return &AlexaforbusinessGetNetworkProfileFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetProfile(ctx workflow.Context, input *alexaforbusiness.GetProfileInput) (*alexaforbusiness.GetProfileOutput, error) {
	var output alexaforbusiness.GetProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetProfileAsync(ctx workflow.Context, input *alexaforbusiness.GetProfileInput) *AlexaforbusinessGetProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetProfile", input)
	return &AlexaforbusinessGetProfileFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetRoom(ctx workflow.Context, input *alexaforbusiness.GetRoomInput) (*alexaforbusiness.GetRoomOutput, error) {
	var output alexaforbusiness.GetRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetRoomAsync(ctx workflow.Context, input *alexaforbusiness.GetRoomInput) *AlexaforbusinessGetRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetRoom", input)
	return &AlexaforbusinessGetRoomFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetRoomSkillParameter(ctx workflow.Context, input *alexaforbusiness.GetRoomSkillParameterInput) (*alexaforbusiness.GetRoomSkillParameterOutput, error) {
	var output alexaforbusiness.GetRoomSkillParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetRoomSkillParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetRoomSkillParameterAsync(ctx workflow.Context, input *alexaforbusiness.GetRoomSkillParameterInput) *AlexaforbusinessGetRoomSkillParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetRoomSkillParameter", input)
	return &AlexaforbusinessGetRoomSkillParameterFuture{Future: future}
}

func (a *AlexaForBusinessStub) GetSkillGroup(ctx workflow.Context, input *alexaforbusiness.GetSkillGroupInput) (*alexaforbusiness.GetSkillGroupOutput, error) {
	var output alexaforbusiness.GetSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) GetSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.GetSkillGroupInput) *AlexaforbusinessGetSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.GetSkillGroup", input)
	return &AlexaforbusinessGetSkillGroupFuture{Future: future}
}

func (a *AlexaForBusinessStub) ListBusinessReportSchedules(ctx workflow.Context, input *alexaforbusiness.ListBusinessReportSchedulesInput) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error) {
	var output alexaforbusiness.ListBusinessReportSchedulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListBusinessReportSchedules", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ListBusinessReportSchedulesAsync(ctx workflow.Context, input *alexaforbusiness.ListBusinessReportSchedulesInput) *AlexaforbusinessListBusinessReportSchedulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListBusinessReportSchedules", input)
	return &AlexaforbusinessListBusinessReportSchedulesFuture{Future: future}
}

func (a *AlexaForBusinessStub) ListConferenceProviders(ctx workflow.Context, input *alexaforbusiness.ListConferenceProvidersInput) (*alexaforbusiness.ListConferenceProvidersOutput, error) {
	var output alexaforbusiness.ListConferenceProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListConferenceProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ListConferenceProvidersAsync(ctx workflow.Context, input *alexaforbusiness.ListConferenceProvidersInput) *AlexaforbusinessListConferenceProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListConferenceProviders", input)
	return &AlexaforbusinessListConferenceProvidersFuture{Future: future}
}

func (a *AlexaForBusinessStub) ListDeviceEvents(ctx workflow.Context, input *alexaforbusiness.ListDeviceEventsInput) (*alexaforbusiness.ListDeviceEventsOutput, error) {
	var output alexaforbusiness.ListDeviceEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListDeviceEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ListDeviceEventsAsync(ctx workflow.Context, input *alexaforbusiness.ListDeviceEventsInput) *AlexaforbusinessListDeviceEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListDeviceEvents", input)
	return &AlexaforbusinessListDeviceEventsFuture{Future: future}
}

func (a *AlexaForBusinessStub) ListGatewayGroups(ctx workflow.Context, input *alexaforbusiness.ListGatewayGroupsInput) (*alexaforbusiness.ListGatewayGroupsOutput, error) {
	var output alexaforbusiness.ListGatewayGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListGatewayGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ListGatewayGroupsAsync(ctx workflow.Context, input *alexaforbusiness.ListGatewayGroupsInput) *AlexaforbusinessListGatewayGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListGatewayGroups", input)
	return &AlexaforbusinessListGatewayGroupsFuture{Future: future}
}

func (a *AlexaForBusinessStub) ListGateways(ctx workflow.Context, input *alexaforbusiness.ListGatewaysInput) (*alexaforbusiness.ListGatewaysOutput, error) {
	var output alexaforbusiness.ListGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ListGatewaysAsync(ctx workflow.Context, input *alexaforbusiness.ListGatewaysInput) *AlexaforbusinessListGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListGateways", input)
	return &AlexaforbusinessListGatewaysFuture{Future: future}
}

func (a *AlexaForBusinessStub) ListSkills(ctx workflow.Context, input *alexaforbusiness.ListSkillsInput) (*alexaforbusiness.ListSkillsOutput, error) {
	var output alexaforbusiness.ListSkillsOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListSkills", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ListSkillsAsync(ctx workflow.Context, input *alexaforbusiness.ListSkillsInput) *AlexaforbusinessListSkillsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListSkills", input)
	return &AlexaforbusinessListSkillsFuture{Future: future}
}

func (a *AlexaForBusinessStub) ListSkillsStoreCategories(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreCategoriesInput) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error) {
	var output alexaforbusiness.ListSkillsStoreCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListSkillsStoreCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ListSkillsStoreCategoriesAsync(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreCategoriesInput) *AlexaforbusinessListSkillsStoreCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListSkillsStoreCategories", input)
	return &AlexaforbusinessListSkillsStoreCategoriesFuture{Future: future}
}

func (a *AlexaForBusinessStub) ListSkillsStoreSkillsByCategory(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error) {
	var output alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListSkillsStoreSkillsByCategory", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ListSkillsStoreSkillsByCategoryAsync(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput) *AlexaforbusinessListSkillsStoreSkillsByCategoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListSkillsStoreSkillsByCategory", input)
	return &AlexaforbusinessListSkillsStoreSkillsByCategoryFuture{Future: future}
}

func (a *AlexaForBusinessStub) ListSmartHomeAppliances(ctx workflow.Context, input *alexaforbusiness.ListSmartHomeAppliancesInput) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error) {
	var output alexaforbusiness.ListSmartHomeAppliancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListSmartHomeAppliances", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ListSmartHomeAppliancesAsync(ctx workflow.Context, input *alexaforbusiness.ListSmartHomeAppliancesInput) *AlexaforbusinessListSmartHomeAppliancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListSmartHomeAppliances", input)
	return &AlexaforbusinessListSmartHomeAppliancesFuture{Future: future}
}

func (a *AlexaForBusinessStub) ListTags(ctx workflow.Context, input *alexaforbusiness.ListTagsInput) (*alexaforbusiness.ListTagsOutput, error) {
	var output alexaforbusiness.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ListTagsAsync(ctx workflow.Context, input *alexaforbusiness.ListTagsInput) *AlexaforbusinessListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ListTags", input)
	return &AlexaforbusinessListTagsFuture{Future: future}
}

func (a *AlexaForBusinessStub) PutConferencePreference(ctx workflow.Context, input *alexaforbusiness.PutConferencePreferenceInput) (*alexaforbusiness.PutConferencePreferenceOutput, error) {
	var output alexaforbusiness.PutConferencePreferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.PutConferencePreference", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) PutConferencePreferenceAsync(ctx workflow.Context, input *alexaforbusiness.PutConferencePreferenceInput) *AlexaforbusinessPutConferencePreferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.PutConferencePreference", input)
	return &AlexaforbusinessPutConferencePreferenceFuture{Future: future}
}

func (a *AlexaForBusinessStub) PutInvitationConfiguration(ctx workflow.Context, input *alexaforbusiness.PutInvitationConfigurationInput) (*alexaforbusiness.PutInvitationConfigurationOutput, error) {
	var output alexaforbusiness.PutInvitationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.PutInvitationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) PutInvitationConfigurationAsync(ctx workflow.Context, input *alexaforbusiness.PutInvitationConfigurationInput) *AlexaforbusinessPutInvitationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.PutInvitationConfiguration", input)
	return &AlexaforbusinessPutInvitationConfigurationFuture{Future: future}
}

func (a *AlexaForBusinessStub) PutRoomSkillParameter(ctx workflow.Context, input *alexaforbusiness.PutRoomSkillParameterInput) (*alexaforbusiness.PutRoomSkillParameterOutput, error) {
	var output alexaforbusiness.PutRoomSkillParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.PutRoomSkillParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) PutRoomSkillParameterAsync(ctx workflow.Context, input *alexaforbusiness.PutRoomSkillParameterInput) *AlexaforbusinessPutRoomSkillParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.PutRoomSkillParameter", input)
	return &AlexaforbusinessPutRoomSkillParameterFuture{Future: future}
}

func (a *AlexaForBusinessStub) PutSkillAuthorization(ctx workflow.Context, input *alexaforbusiness.PutSkillAuthorizationInput) (*alexaforbusiness.PutSkillAuthorizationOutput, error) {
	var output alexaforbusiness.PutSkillAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.PutSkillAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) PutSkillAuthorizationAsync(ctx workflow.Context, input *alexaforbusiness.PutSkillAuthorizationInput) *AlexaforbusinessPutSkillAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.PutSkillAuthorization", input)
	return &AlexaforbusinessPutSkillAuthorizationFuture{Future: future}
}

func (a *AlexaForBusinessStub) RegisterAVSDevice(ctx workflow.Context, input *alexaforbusiness.RegisterAVSDeviceInput) (*alexaforbusiness.RegisterAVSDeviceOutput, error) {
	var output alexaforbusiness.RegisterAVSDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.RegisterAVSDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) RegisterAVSDeviceAsync(ctx workflow.Context, input *alexaforbusiness.RegisterAVSDeviceInput) *AlexaforbusinessRegisterAVSDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.RegisterAVSDevice", input)
	return &AlexaforbusinessRegisterAVSDeviceFuture{Future: future}
}

func (a *AlexaForBusinessStub) RejectSkill(ctx workflow.Context, input *alexaforbusiness.RejectSkillInput) (*alexaforbusiness.RejectSkillOutput, error) {
	var output alexaforbusiness.RejectSkillOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.RejectSkill", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) RejectSkillAsync(ctx workflow.Context, input *alexaforbusiness.RejectSkillInput) *AlexaforbusinessRejectSkillFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.RejectSkill", input)
	return &AlexaforbusinessRejectSkillFuture{Future: future}
}

func (a *AlexaForBusinessStub) ResolveRoom(ctx workflow.Context, input *alexaforbusiness.ResolveRoomInput) (*alexaforbusiness.ResolveRoomOutput, error) {
	var output alexaforbusiness.ResolveRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ResolveRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) ResolveRoomAsync(ctx workflow.Context, input *alexaforbusiness.ResolveRoomInput) *AlexaforbusinessResolveRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.ResolveRoom", input)
	return &AlexaforbusinessResolveRoomFuture{Future: future}
}

func (a *AlexaForBusinessStub) RevokeInvitation(ctx workflow.Context, input *alexaforbusiness.RevokeInvitationInput) (*alexaforbusiness.RevokeInvitationOutput, error) {
	var output alexaforbusiness.RevokeInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.RevokeInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) RevokeInvitationAsync(ctx workflow.Context, input *alexaforbusiness.RevokeInvitationInput) *AlexaforbusinessRevokeInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.RevokeInvitation", input)
	return &AlexaforbusinessRevokeInvitationFuture{Future: future}
}

func (a *AlexaForBusinessStub) SearchAddressBooks(ctx workflow.Context, input *alexaforbusiness.SearchAddressBooksInput) (*alexaforbusiness.SearchAddressBooksOutput, error) {
	var output alexaforbusiness.SearchAddressBooksOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchAddressBooks", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) SearchAddressBooksAsync(ctx workflow.Context, input *alexaforbusiness.SearchAddressBooksInput) *AlexaforbusinessSearchAddressBooksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchAddressBooks", input)
	return &AlexaforbusinessSearchAddressBooksFuture{Future: future}
}

func (a *AlexaForBusinessStub) SearchContacts(ctx workflow.Context, input *alexaforbusiness.SearchContactsInput) (*alexaforbusiness.SearchContactsOutput, error) {
	var output alexaforbusiness.SearchContactsOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchContacts", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) SearchContactsAsync(ctx workflow.Context, input *alexaforbusiness.SearchContactsInput) *AlexaforbusinessSearchContactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchContacts", input)
	return &AlexaforbusinessSearchContactsFuture{Future: future}
}

func (a *AlexaForBusinessStub) SearchDevices(ctx workflow.Context, input *alexaforbusiness.SearchDevicesInput) (*alexaforbusiness.SearchDevicesOutput, error) {
	var output alexaforbusiness.SearchDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) SearchDevicesAsync(ctx workflow.Context, input *alexaforbusiness.SearchDevicesInput) *AlexaforbusinessSearchDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchDevices", input)
	return &AlexaforbusinessSearchDevicesFuture{Future: future}
}

func (a *AlexaForBusinessStub) SearchNetworkProfiles(ctx workflow.Context, input *alexaforbusiness.SearchNetworkProfilesInput) (*alexaforbusiness.SearchNetworkProfilesOutput, error) {
	var output alexaforbusiness.SearchNetworkProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchNetworkProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) SearchNetworkProfilesAsync(ctx workflow.Context, input *alexaforbusiness.SearchNetworkProfilesInput) *AlexaforbusinessSearchNetworkProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchNetworkProfiles", input)
	return &AlexaforbusinessSearchNetworkProfilesFuture{Future: future}
}

func (a *AlexaForBusinessStub) SearchProfiles(ctx workflow.Context, input *alexaforbusiness.SearchProfilesInput) (*alexaforbusiness.SearchProfilesOutput, error) {
	var output alexaforbusiness.SearchProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) SearchProfilesAsync(ctx workflow.Context, input *alexaforbusiness.SearchProfilesInput) *AlexaforbusinessSearchProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchProfiles", input)
	return &AlexaforbusinessSearchProfilesFuture{Future: future}
}

func (a *AlexaForBusinessStub) SearchRooms(ctx workflow.Context, input *alexaforbusiness.SearchRoomsInput) (*alexaforbusiness.SearchRoomsOutput, error) {
	var output alexaforbusiness.SearchRoomsOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchRooms", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) SearchRoomsAsync(ctx workflow.Context, input *alexaforbusiness.SearchRoomsInput) *AlexaforbusinessSearchRoomsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchRooms", input)
	return &AlexaforbusinessSearchRoomsFuture{Future: future}
}

func (a *AlexaForBusinessStub) SearchSkillGroups(ctx workflow.Context, input *alexaforbusiness.SearchSkillGroupsInput) (*alexaforbusiness.SearchSkillGroupsOutput, error) {
	var output alexaforbusiness.SearchSkillGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchSkillGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) SearchSkillGroupsAsync(ctx workflow.Context, input *alexaforbusiness.SearchSkillGroupsInput) *AlexaforbusinessSearchSkillGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchSkillGroups", input)
	return &AlexaforbusinessSearchSkillGroupsFuture{Future: future}
}

func (a *AlexaForBusinessStub) SearchUsers(ctx workflow.Context, input *alexaforbusiness.SearchUsersInput) (*alexaforbusiness.SearchUsersOutput, error) {
	var output alexaforbusiness.SearchUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) SearchUsersAsync(ctx workflow.Context, input *alexaforbusiness.SearchUsersInput) *AlexaforbusinessSearchUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SearchUsers", input)
	return &AlexaforbusinessSearchUsersFuture{Future: future}
}

func (a *AlexaForBusinessStub) SendAnnouncement(ctx workflow.Context, input *alexaforbusiness.SendAnnouncementInput) (*alexaforbusiness.SendAnnouncementOutput, error) {
	var output alexaforbusiness.SendAnnouncementOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SendAnnouncement", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) SendAnnouncementAsync(ctx workflow.Context, input *alexaforbusiness.SendAnnouncementInput) *AlexaforbusinessSendAnnouncementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SendAnnouncement", input)
	return &AlexaforbusinessSendAnnouncementFuture{Future: future}
}

func (a *AlexaForBusinessStub) SendInvitation(ctx workflow.Context, input *alexaforbusiness.SendInvitationInput) (*alexaforbusiness.SendInvitationOutput, error) {
	var output alexaforbusiness.SendInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SendInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) SendInvitationAsync(ctx workflow.Context, input *alexaforbusiness.SendInvitationInput) *AlexaforbusinessSendInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.SendInvitation", input)
	return &AlexaforbusinessSendInvitationFuture{Future: future}
}

func (a *AlexaForBusinessStub) StartDeviceSync(ctx workflow.Context, input *alexaforbusiness.StartDeviceSyncInput) (*alexaforbusiness.StartDeviceSyncOutput, error) {
	var output alexaforbusiness.StartDeviceSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.StartDeviceSync", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) StartDeviceSyncAsync(ctx workflow.Context, input *alexaforbusiness.StartDeviceSyncInput) *AlexaforbusinessStartDeviceSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.StartDeviceSync", input)
	return &AlexaforbusinessStartDeviceSyncFuture{Future: future}
}

func (a *AlexaForBusinessStub) StartSmartHomeApplianceDiscovery(ctx workflow.Context, input *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error) {
	var output alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.StartSmartHomeApplianceDiscovery", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) StartSmartHomeApplianceDiscoveryAsync(ctx workflow.Context, input *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput) *AlexaforbusinessStartSmartHomeApplianceDiscoveryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.StartSmartHomeApplianceDiscovery", input)
	return &AlexaforbusinessStartSmartHomeApplianceDiscoveryFuture{Future: future}
}

func (a *AlexaForBusinessStub) TagResource(ctx workflow.Context, input *alexaforbusiness.TagResourceInput) (*alexaforbusiness.TagResourceOutput, error) {
	var output alexaforbusiness.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) TagResourceAsync(ctx workflow.Context, input *alexaforbusiness.TagResourceInput) *AlexaforbusinessTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.TagResource", input)
	return &AlexaforbusinessTagResourceFuture{Future: future}
}

func (a *AlexaForBusinessStub) UntagResource(ctx workflow.Context, input *alexaforbusiness.UntagResourceInput) (*alexaforbusiness.UntagResourceOutput, error) {
	var output alexaforbusiness.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) UntagResourceAsync(ctx workflow.Context, input *alexaforbusiness.UntagResourceInput) *AlexaforbusinessUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UntagResource", input)
	return &AlexaforbusinessUntagResourceFuture{Future: future}
}

func (a *AlexaForBusinessStub) UpdateAddressBook(ctx workflow.Context, input *alexaforbusiness.UpdateAddressBookInput) (*alexaforbusiness.UpdateAddressBookOutput, error) {
	var output alexaforbusiness.UpdateAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) UpdateAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.UpdateAddressBookInput) *AlexaforbusinessUpdateAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateAddressBook", input)
	return &AlexaforbusinessUpdateAddressBookFuture{Future: future}
}

func (a *AlexaForBusinessStub) UpdateBusinessReportSchedule(ctx workflow.Context, input *alexaforbusiness.UpdateBusinessReportScheduleInput) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.UpdateBusinessReportScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateBusinessReportSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) UpdateBusinessReportScheduleAsync(ctx workflow.Context, input *alexaforbusiness.UpdateBusinessReportScheduleInput) *AlexaforbusinessUpdateBusinessReportScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateBusinessReportSchedule", input)
	return &AlexaforbusinessUpdateBusinessReportScheduleFuture{Future: future}
}

func (a *AlexaForBusinessStub) UpdateConferenceProvider(ctx workflow.Context, input *alexaforbusiness.UpdateConferenceProviderInput) (*alexaforbusiness.UpdateConferenceProviderOutput, error) {
	var output alexaforbusiness.UpdateConferenceProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateConferenceProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) UpdateConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.UpdateConferenceProviderInput) *AlexaforbusinessUpdateConferenceProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateConferenceProvider", input)
	return &AlexaforbusinessUpdateConferenceProviderFuture{Future: future}
}

func (a *AlexaForBusinessStub) UpdateContact(ctx workflow.Context, input *alexaforbusiness.UpdateContactInput) (*alexaforbusiness.UpdateContactOutput, error) {
	var output alexaforbusiness.UpdateContactOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateContact", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) UpdateContactAsync(ctx workflow.Context, input *alexaforbusiness.UpdateContactInput) *AlexaforbusinessUpdateContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateContact", input)
	return &AlexaforbusinessUpdateContactFuture{Future: future}
}

func (a *AlexaForBusinessStub) UpdateDevice(ctx workflow.Context, input *alexaforbusiness.UpdateDeviceInput) (*alexaforbusiness.UpdateDeviceOutput, error) {
	var output alexaforbusiness.UpdateDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) UpdateDeviceAsync(ctx workflow.Context, input *alexaforbusiness.UpdateDeviceInput) *AlexaforbusinessUpdateDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateDevice", input)
	return &AlexaforbusinessUpdateDeviceFuture{Future: future}
}

func (a *AlexaForBusinessStub) UpdateGateway(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayInput) (*alexaforbusiness.UpdateGatewayOutput, error) {
	var output alexaforbusiness.UpdateGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) UpdateGatewayAsync(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayInput) *AlexaforbusinessUpdateGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateGateway", input)
	return &AlexaforbusinessUpdateGatewayFuture{Future: future}
}

func (a *AlexaForBusinessStub) UpdateGatewayGroup(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayGroupInput) (*alexaforbusiness.UpdateGatewayGroupOutput, error) {
	var output alexaforbusiness.UpdateGatewayGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateGatewayGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) UpdateGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayGroupInput) *AlexaforbusinessUpdateGatewayGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateGatewayGroup", input)
	return &AlexaforbusinessUpdateGatewayGroupFuture{Future: future}
}

func (a *AlexaForBusinessStub) UpdateNetworkProfile(ctx workflow.Context, input *alexaforbusiness.UpdateNetworkProfileInput) (*alexaforbusiness.UpdateNetworkProfileOutput, error) {
	var output alexaforbusiness.UpdateNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) UpdateNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.UpdateNetworkProfileInput) *AlexaforbusinessUpdateNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateNetworkProfile", input)
	return &AlexaforbusinessUpdateNetworkProfileFuture{Future: future}
}

func (a *AlexaForBusinessStub) UpdateProfile(ctx workflow.Context, input *alexaforbusiness.UpdateProfileInput) (*alexaforbusiness.UpdateProfileOutput, error) {
	var output alexaforbusiness.UpdateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) UpdateProfileAsync(ctx workflow.Context, input *alexaforbusiness.UpdateProfileInput) *AlexaforbusinessUpdateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateProfile", input)
	return &AlexaforbusinessUpdateProfileFuture{Future: future}
}

func (a *AlexaForBusinessStub) UpdateRoom(ctx workflow.Context, input *alexaforbusiness.UpdateRoomInput) (*alexaforbusiness.UpdateRoomOutput, error) {
	var output alexaforbusiness.UpdateRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) UpdateRoomAsync(ctx workflow.Context, input *alexaforbusiness.UpdateRoomInput) *AlexaforbusinessUpdateRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateRoom", input)
	return &AlexaforbusinessUpdateRoomFuture{Future: future}
}

func (a *AlexaForBusinessStub) UpdateSkillGroup(ctx workflow.Context, input *alexaforbusiness.UpdateSkillGroupInput) (*alexaforbusiness.UpdateSkillGroupOutput, error) {
	var output alexaforbusiness.UpdateSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AlexaForBusinessStub) UpdateSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.UpdateSkillGroupInput) *AlexaforbusinessUpdateSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.alexaforbusiness.UpdateSkillGroup", input)
	return &AlexaforbusinessUpdateSkillGroupFuture{Future: future}
}
