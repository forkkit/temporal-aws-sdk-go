// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/gamelift"
	"go.temporal.io/sdk/workflow"
)

type GameLiftClient interface {
	AcceptMatch(ctx workflow.Context, input *gamelift.AcceptMatchInput) (*gamelift.AcceptMatchOutput, error)
	AcceptMatchAsync(ctx workflow.Context, input *gamelift.AcceptMatchInput) *GameliftAcceptMatchFuture

	ClaimGameServer(ctx workflow.Context, input *gamelift.ClaimGameServerInput) (*gamelift.ClaimGameServerOutput, error)
	ClaimGameServerAsync(ctx workflow.Context, input *gamelift.ClaimGameServerInput) *GameliftClaimGameServerFuture

	CreateAlias(ctx workflow.Context, input *gamelift.CreateAliasInput) (*gamelift.CreateAliasOutput, error)
	CreateAliasAsync(ctx workflow.Context, input *gamelift.CreateAliasInput) *GameliftCreateAliasFuture

	CreateBuild(ctx workflow.Context, input *gamelift.CreateBuildInput) (*gamelift.CreateBuildOutput, error)
	CreateBuildAsync(ctx workflow.Context, input *gamelift.CreateBuildInput) *GameliftCreateBuildFuture

	CreateFleet(ctx workflow.Context, input *gamelift.CreateFleetInput) (*gamelift.CreateFleetOutput, error)
	CreateFleetAsync(ctx workflow.Context, input *gamelift.CreateFleetInput) *GameliftCreateFleetFuture

	CreateGameServerGroup(ctx workflow.Context, input *gamelift.CreateGameServerGroupInput) (*gamelift.CreateGameServerGroupOutput, error)
	CreateGameServerGroupAsync(ctx workflow.Context, input *gamelift.CreateGameServerGroupInput) *GameliftCreateGameServerGroupFuture

	CreateGameSession(ctx workflow.Context, input *gamelift.CreateGameSessionInput) (*gamelift.CreateGameSessionOutput, error)
	CreateGameSessionAsync(ctx workflow.Context, input *gamelift.CreateGameSessionInput) *GameliftCreateGameSessionFuture

	CreateGameSessionQueue(ctx workflow.Context, input *gamelift.CreateGameSessionQueueInput) (*gamelift.CreateGameSessionQueueOutput, error)
	CreateGameSessionQueueAsync(ctx workflow.Context, input *gamelift.CreateGameSessionQueueInput) *GameliftCreateGameSessionQueueFuture

	CreateMatchmakingConfiguration(ctx workflow.Context, input *gamelift.CreateMatchmakingConfigurationInput) (*gamelift.CreateMatchmakingConfigurationOutput, error)
	CreateMatchmakingConfigurationAsync(ctx workflow.Context, input *gamelift.CreateMatchmakingConfigurationInput) *GameliftCreateMatchmakingConfigurationFuture

	CreateMatchmakingRuleSet(ctx workflow.Context, input *gamelift.CreateMatchmakingRuleSetInput) (*gamelift.CreateMatchmakingRuleSetOutput, error)
	CreateMatchmakingRuleSetAsync(ctx workflow.Context, input *gamelift.CreateMatchmakingRuleSetInput) *GameliftCreateMatchmakingRuleSetFuture

	CreatePlayerSession(ctx workflow.Context, input *gamelift.CreatePlayerSessionInput) (*gamelift.CreatePlayerSessionOutput, error)
	CreatePlayerSessionAsync(ctx workflow.Context, input *gamelift.CreatePlayerSessionInput) *GameliftCreatePlayerSessionFuture

	CreatePlayerSessions(ctx workflow.Context, input *gamelift.CreatePlayerSessionsInput) (*gamelift.CreatePlayerSessionsOutput, error)
	CreatePlayerSessionsAsync(ctx workflow.Context, input *gamelift.CreatePlayerSessionsInput) *GameliftCreatePlayerSessionsFuture

	CreateScript(ctx workflow.Context, input *gamelift.CreateScriptInput) (*gamelift.CreateScriptOutput, error)
	CreateScriptAsync(ctx workflow.Context, input *gamelift.CreateScriptInput) *GameliftCreateScriptFuture

	CreateVpcPeeringAuthorization(ctx workflow.Context, input *gamelift.CreateVpcPeeringAuthorizationInput) (*gamelift.CreateVpcPeeringAuthorizationOutput, error)
	CreateVpcPeeringAuthorizationAsync(ctx workflow.Context, input *gamelift.CreateVpcPeeringAuthorizationInput) *GameliftCreateVpcPeeringAuthorizationFuture

	CreateVpcPeeringConnection(ctx workflow.Context, input *gamelift.CreateVpcPeeringConnectionInput) (*gamelift.CreateVpcPeeringConnectionOutput, error)
	CreateVpcPeeringConnectionAsync(ctx workflow.Context, input *gamelift.CreateVpcPeeringConnectionInput) *GameliftCreateVpcPeeringConnectionFuture

	DeleteAlias(ctx workflow.Context, input *gamelift.DeleteAliasInput) (*gamelift.DeleteAliasOutput, error)
	DeleteAliasAsync(ctx workflow.Context, input *gamelift.DeleteAliasInput) *GameliftDeleteAliasFuture

	DeleteBuild(ctx workflow.Context, input *gamelift.DeleteBuildInput) (*gamelift.DeleteBuildOutput, error)
	DeleteBuildAsync(ctx workflow.Context, input *gamelift.DeleteBuildInput) *GameliftDeleteBuildFuture

	DeleteFleet(ctx workflow.Context, input *gamelift.DeleteFleetInput) (*gamelift.DeleteFleetOutput, error)
	DeleteFleetAsync(ctx workflow.Context, input *gamelift.DeleteFleetInput) *GameliftDeleteFleetFuture

	DeleteGameServerGroup(ctx workflow.Context, input *gamelift.DeleteGameServerGroupInput) (*gamelift.DeleteGameServerGroupOutput, error)
	DeleteGameServerGroupAsync(ctx workflow.Context, input *gamelift.DeleteGameServerGroupInput) *GameliftDeleteGameServerGroupFuture

	DeleteGameSessionQueue(ctx workflow.Context, input *gamelift.DeleteGameSessionQueueInput) (*gamelift.DeleteGameSessionQueueOutput, error)
	DeleteGameSessionQueueAsync(ctx workflow.Context, input *gamelift.DeleteGameSessionQueueInput) *GameliftDeleteGameSessionQueueFuture

	DeleteMatchmakingConfiguration(ctx workflow.Context, input *gamelift.DeleteMatchmakingConfigurationInput) (*gamelift.DeleteMatchmakingConfigurationOutput, error)
	DeleteMatchmakingConfigurationAsync(ctx workflow.Context, input *gamelift.DeleteMatchmakingConfigurationInput) *GameliftDeleteMatchmakingConfigurationFuture

	DeleteMatchmakingRuleSet(ctx workflow.Context, input *gamelift.DeleteMatchmakingRuleSetInput) (*gamelift.DeleteMatchmakingRuleSetOutput, error)
	DeleteMatchmakingRuleSetAsync(ctx workflow.Context, input *gamelift.DeleteMatchmakingRuleSetInput) *GameliftDeleteMatchmakingRuleSetFuture

	DeleteScalingPolicy(ctx workflow.Context, input *gamelift.DeleteScalingPolicyInput) (*gamelift.DeleteScalingPolicyOutput, error)
	DeleteScalingPolicyAsync(ctx workflow.Context, input *gamelift.DeleteScalingPolicyInput) *GameliftDeleteScalingPolicyFuture

	DeleteScript(ctx workflow.Context, input *gamelift.DeleteScriptInput) (*gamelift.DeleteScriptOutput, error)
	DeleteScriptAsync(ctx workflow.Context, input *gamelift.DeleteScriptInput) *GameliftDeleteScriptFuture

	DeleteVpcPeeringAuthorization(ctx workflow.Context, input *gamelift.DeleteVpcPeeringAuthorizationInput) (*gamelift.DeleteVpcPeeringAuthorizationOutput, error)
	DeleteVpcPeeringAuthorizationAsync(ctx workflow.Context, input *gamelift.DeleteVpcPeeringAuthorizationInput) *GameliftDeleteVpcPeeringAuthorizationFuture

	DeleteVpcPeeringConnection(ctx workflow.Context, input *gamelift.DeleteVpcPeeringConnectionInput) (*gamelift.DeleteVpcPeeringConnectionOutput, error)
	DeleteVpcPeeringConnectionAsync(ctx workflow.Context, input *gamelift.DeleteVpcPeeringConnectionInput) *GameliftDeleteVpcPeeringConnectionFuture

	DeregisterGameServer(ctx workflow.Context, input *gamelift.DeregisterGameServerInput) (*gamelift.DeregisterGameServerOutput, error)
	DeregisterGameServerAsync(ctx workflow.Context, input *gamelift.DeregisterGameServerInput) *GameliftDeregisterGameServerFuture

	DescribeAlias(ctx workflow.Context, input *gamelift.DescribeAliasInput) (*gamelift.DescribeAliasOutput, error)
	DescribeAliasAsync(ctx workflow.Context, input *gamelift.DescribeAliasInput) *GameliftDescribeAliasFuture

	DescribeBuild(ctx workflow.Context, input *gamelift.DescribeBuildInput) (*gamelift.DescribeBuildOutput, error)
	DescribeBuildAsync(ctx workflow.Context, input *gamelift.DescribeBuildInput) *GameliftDescribeBuildFuture

	DescribeEC2InstanceLimits(ctx workflow.Context, input *gamelift.DescribeEC2InstanceLimitsInput) (*gamelift.DescribeEC2InstanceLimitsOutput, error)
	DescribeEC2InstanceLimitsAsync(ctx workflow.Context, input *gamelift.DescribeEC2InstanceLimitsInput) *GameliftDescribeEC2InstanceLimitsFuture

	DescribeFleetAttributes(ctx workflow.Context, input *gamelift.DescribeFleetAttributesInput) (*gamelift.DescribeFleetAttributesOutput, error)
	DescribeFleetAttributesAsync(ctx workflow.Context, input *gamelift.DescribeFleetAttributesInput) *GameliftDescribeFleetAttributesFuture

	DescribeFleetCapacity(ctx workflow.Context, input *gamelift.DescribeFleetCapacityInput) (*gamelift.DescribeFleetCapacityOutput, error)
	DescribeFleetCapacityAsync(ctx workflow.Context, input *gamelift.DescribeFleetCapacityInput) *GameliftDescribeFleetCapacityFuture

	DescribeFleetEvents(ctx workflow.Context, input *gamelift.DescribeFleetEventsInput) (*gamelift.DescribeFleetEventsOutput, error)
	DescribeFleetEventsAsync(ctx workflow.Context, input *gamelift.DescribeFleetEventsInput) *GameliftDescribeFleetEventsFuture

	DescribeFleetPortSettings(ctx workflow.Context, input *gamelift.DescribeFleetPortSettingsInput) (*gamelift.DescribeFleetPortSettingsOutput, error)
	DescribeFleetPortSettingsAsync(ctx workflow.Context, input *gamelift.DescribeFleetPortSettingsInput) *GameliftDescribeFleetPortSettingsFuture

	DescribeFleetUtilization(ctx workflow.Context, input *gamelift.DescribeFleetUtilizationInput) (*gamelift.DescribeFleetUtilizationOutput, error)
	DescribeFleetUtilizationAsync(ctx workflow.Context, input *gamelift.DescribeFleetUtilizationInput) *GameliftDescribeFleetUtilizationFuture

	DescribeGameServer(ctx workflow.Context, input *gamelift.DescribeGameServerInput) (*gamelift.DescribeGameServerOutput, error)
	DescribeGameServerAsync(ctx workflow.Context, input *gamelift.DescribeGameServerInput) *GameliftDescribeGameServerFuture

	DescribeGameServerGroup(ctx workflow.Context, input *gamelift.DescribeGameServerGroupInput) (*gamelift.DescribeGameServerGroupOutput, error)
	DescribeGameServerGroupAsync(ctx workflow.Context, input *gamelift.DescribeGameServerGroupInput) *GameliftDescribeGameServerGroupFuture

	DescribeGameServerInstances(ctx workflow.Context, input *gamelift.DescribeGameServerInstancesInput) (*gamelift.DescribeGameServerInstancesOutput, error)
	DescribeGameServerInstancesAsync(ctx workflow.Context, input *gamelift.DescribeGameServerInstancesInput) *GameliftDescribeGameServerInstancesFuture

	DescribeGameSessionDetails(ctx workflow.Context, input *gamelift.DescribeGameSessionDetailsInput) (*gamelift.DescribeGameSessionDetailsOutput, error)
	DescribeGameSessionDetailsAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionDetailsInput) *GameliftDescribeGameSessionDetailsFuture

	DescribeGameSessionPlacement(ctx workflow.Context, input *gamelift.DescribeGameSessionPlacementInput) (*gamelift.DescribeGameSessionPlacementOutput, error)
	DescribeGameSessionPlacementAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionPlacementInput) *GameliftDescribeGameSessionPlacementFuture

	DescribeGameSessionQueues(ctx workflow.Context, input *gamelift.DescribeGameSessionQueuesInput) (*gamelift.DescribeGameSessionQueuesOutput, error)
	DescribeGameSessionQueuesAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionQueuesInput) *GameliftDescribeGameSessionQueuesFuture

	DescribeGameSessions(ctx workflow.Context, input *gamelift.DescribeGameSessionsInput) (*gamelift.DescribeGameSessionsOutput, error)
	DescribeGameSessionsAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionsInput) *GameliftDescribeGameSessionsFuture

	DescribeInstances(ctx workflow.Context, input *gamelift.DescribeInstancesInput) (*gamelift.DescribeInstancesOutput, error)
	DescribeInstancesAsync(ctx workflow.Context, input *gamelift.DescribeInstancesInput) *GameliftDescribeInstancesFuture

	DescribeMatchmaking(ctx workflow.Context, input *gamelift.DescribeMatchmakingInput) (*gamelift.DescribeMatchmakingOutput, error)
	DescribeMatchmakingAsync(ctx workflow.Context, input *gamelift.DescribeMatchmakingInput) *GameliftDescribeMatchmakingFuture

	DescribeMatchmakingConfigurations(ctx workflow.Context, input *gamelift.DescribeMatchmakingConfigurationsInput) (*gamelift.DescribeMatchmakingConfigurationsOutput, error)
	DescribeMatchmakingConfigurationsAsync(ctx workflow.Context, input *gamelift.DescribeMatchmakingConfigurationsInput) *GameliftDescribeMatchmakingConfigurationsFuture

	DescribeMatchmakingRuleSets(ctx workflow.Context, input *gamelift.DescribeMatchmakingRuleSetsInput) (*gamelift.DescribeMatchmakingRuleSetsOutput, error)
	DescribeMatchmakingRuleSetsAsync(ctx workflow.Context, input *gamelift.DescribeMatchmakingRuleSetsInput) *GameliftDescribeMatchmakingRuleSetsFuture

	DescribePlayerSessions(ctx workflow.Context, input *gamelift.DescribePlayerSessionsInput) (*gamelift.DescribePlayerSessionsOutput, error)
	DescribePlayerSessionsAsync(ctx workflow.Context, input *gamelift.DescribePlayerSessionsInput) *GameliftDescribePlayerSessionsFuture

	DescribeRuntimeConfiguration(ctx workflow.Context, input *gamelift.DescribeRuntimeConfigurationInput) (*gamelift.DescribeRuntimeConfigurationOutput, error)
	DescribeRuntimeConfigurationAsync(ctx workflow.Context, input *gamelift.DescribeRuntimeConfigurationInput) *GameliftDescribeRuntimeConfigurationFuture

	DescribeScalingPolicies(ctx workflow.Context, input *gamelift.DescribeScalingPoliciesInput) (*gamelift.DescribeScalingPoliciesOutput, error)
	DescribeScalingPoliciesAsync(ctx workflow.Context, input *gamelift.DescribeScalingPoliciesInput) *GameliftDescribeScalingPoliciesFuture

	DescribeScript(ctx workflow.Context, input *gamelift.DescribeScriptInput) (*gamelift.DescribeScriptOutput, error)
	DescribeScriptAsync(ctx workflow.Context, input *gamelift.DescribeScriptInput) *GameliftDescribeScriptFuture

	DescribeVpcPeeringAuthorizations(ctx workflow.Context, input *gamelift.DescribeVpcPeeringAuthorizationsInput) (*gamelift.DescribeVpcPeeringAuthorizationsOutput, error)
	DescribeVpcPeeringAuthorizationsAsync(ctx workflow.Context, input *gamelift.DescribeVpcPeeringAuthorizationsInput) *GameliftDescribeVpcPeeringAuthorizationsFuture

	DescribeVpcPeeringConnections(ctx workflow.Context, input *gamelift.DescribeVpcPeeringConnectionsInput) (*gamelift.DescribeVpcPeeringConnectionsOutput, error)
	DescribeVpcPeeringConnectionsAsync(ctx workflow.Context, input *gamelift.DescribeVpcPeeringConnectionsInput) *GameliftDescribeVpcPeeringConnectionsFuture

	GetGameSessionLogUrl(ctx workflow.Context, input *gamelift.GetGameSessionLogUrlInput) (*gamelift.GetGameSessionLogUrlOutput, error)
	GetGameSessionLogUrlAsync(ctx workflow.Context, input *gamelift.GetGameSessionLogUrlInput) *GameliftGetGameSessionLogUrlFuture

	GetInstanceAccess(ctx workflow.Context, input *gamelift.GetInstanceAccessInput) (*gamelift.GetInstanceAccessOutput, error)
	GetInstanceAccessAsync(ctx workflow.Context, input *gamelift.GetInstanceAccessInput) *GameliftGetInstanceAccessFuture

	ListAliases(ctx workflow.Context, input *gamelift.ListAliasesInput) (*gamelift.ListAliasesOutput, error)
	ListAliasesAsync(ctx workflow.Context, input *gamelift.ListAliasesInput) *GameliftListAliasesFuture

	ListBuilds(ctx workflow.Context, input *gamelift.ListBuildsInput) (*gamelift.ListBuildsOutput, error)
	ListBuildsAsync(ctx workflow.Context, input *gamelift.ListBuildsInput) *GameliftListBuildsFuture

	ListFleets(ctx workflow.Context, input *gamelift.ListFleetsInput) (*gamelift.ListFleetsOutput, error)
	ListFleetsAsync(ctx workflow.Context, input *gamelift.ListFleetsInput) *GameliftListFleetsFuture

	ListGameServerGroups(ctx workflow.Context, input *gamelift.ListGameServerGroupsInput) (*gamelift.ListGameServerGroupsOutput, error)
	ListGameServerGroupsAsync(ctx workflow.Context, input *gamelift.ListGameServerGroupsInput) *GameliftListGameServerGroupsFuture

	ListGameServers(ctx workflow.Context, input *gamelift.ListGameServersInput) (*gamelift.ListGameServersOutput, error)
	ListGameServersAsync(ctx workflow.Context, input *gamelift.ListGameServersInput) *GameliftListGameServersFuture

	ListScripts(ctx workflow.Context, input *gamelift.ListScriptsInput) (*gamelift.ListScriptsOutput, error)
	ListScriptsAsync(ctx workflow.Context, input *gamelift.ListScriptsInput) *GameliftListScriptsFuture

	ListTagsForResource(ctx workflow.Context, input *gamelift.ListTagsForResourceInput) (*gamelift.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *gamelift.ListTagsForResourceInput) *GameliftListTagsForResourceFuture

	PutScalingPolicy(ctx workflow.Context, input *gamelift.PutScalingPolicyInput) (*gamelift.PutScalingPolicyOutput, error)
	PutScalingPolicyAsync(ctx workflow.Context, input *gamelift.PutScalingPolicyInput) *GameliftPutScalingPolicyFuture

	RegisterGameServer(ctx workflow.Context, input *gamelift.RegisterGameServerInput) (*gamelift.RegisterGameServerOutput, error)
	RegisterGameServerAsync(ctx workflow.Context, input *gamelift.RegisterGameServerInput) *GameliftRegisterGameServerFuture

	RequestUploadCredentials(ctx workflow.Context, input *gamelift.RequestUploadCredentialsInput) (*gamelift.RequestUploadCredentialsOutput, error)
	RequestUploadCredentialsAsync(ctx workflow.Context, input *gamelift.RequestUploadCredentialsInput) *GameliftRequestUploadCredentialsFuture

	ResolveAlias(ctx workflow.Context, input *gamelift.ResolveAliasInput) (*gamelift.ResolveAliasOutput, error)
	ResolveAliasAsync(ctx workflow.Context, input *gamelift.ResolveAliasInput) *GameliftResolveAliasFuture

	ResumeGameServerGroup(ctx workflow.Context, input *gamelift.ResumeGameServerGroupInput) (*gamelift.ResumeGameServerGroupOutput, error)
	ResumeGameServerGroupAsync(ctx workflow.Context, input *gamelift.ResumeGameServerGroupInput) *GameliftResumeGameServerGroupFuture

	SearchGameSessions(ctx workflow.Context, input *gamelift.SearchGameSessionsInput) (*gamelift.SearchGameSessionsOutput, error)
	SearchGameSessionsAsync(ctx workflow.Context, input *gamelift.SearchGameSessionsInput) *GameliftSearchGameSessionsFuture

	StartFleetActions(ctx workflow.Context, input *gamelift.StartFleetActionsInput) (*gamelift.StartFleetActionsOutput, error)
	StartFleetActionsAsync(ctx workflow.Context, input *gamelift.StartFleetActionsInput) *GameliftStartFleetActionsFuture

	StartGameSessionPlacement(ctx workflow.Context, input *gamelift.StartGameSessionPlacementInput) (*gamelift.StartGameSessionPlacementOutput, error)
	StartGameSessionPlacementAsync(ctx workflow.Context, input *gamelift.StartGameSessionPlacementInput) *GameliftStartGameSessionPlacementFuture

	StartMatchBackfill(ctx workflow.Context, input *gamelift.StartMatchBackfillInput) (*gamelift.StartMatchBackfillOutput, error)
	StartMatchBackfillAsync(ctx workflow.Context, input *gamelift.StartMatchBackfillInput) *GameliftStartMatchBackfillFuture

	StartMatchmaking(ctx workflow.Context, input *gamelift.StartMatchmakingInput) (*gamelift.StartMatchmakingOutput, error)
	StartMatchmakingAsync(ctx workflow.Context, input *gamelift.StartMatchmakingInput) *GameliftStartMatchmakingFuture

	StopFleetActions(ctx workflow.Context, input *gamelift.StopFleetActionsInput) (*gamelift.StopFleetActionsOutput, error)
	StopFleetActionsAsync(ctx workflow.Context, input *gamelift.StopFleetActionsInput) *GameliftStopFleetActionsFuture

	StopGameSessionPlacement(ctx workflow.Context, input *gamelift.StopGameSessionPlacementInput) (*gamelift.StopGameSessionPlacementOutput, error)
	StopGameSessionPlacementAsync(ctx workflow.Context, input *gamelift.StopGameSessionPlacementInput) *GameliftStopGameSessionPlacementFuture

	StopMatchmaking(ctx workflow.Context, input *gamelift.StopMatchmakingInput) (*gamelift.StopMatchmakingOutput, error)
	StopMatchmakingAsync(ctx workflow.Context, input *gamelift.StopMatchmakingInput) *GameliftStopMatchmakingFuture

	SuspendGameServerGroup(ctx workflow.Context, input *gamelift.SuspendGameServerGroupInput) (*gamelift.SuspendGameServerGroupOutput, error)
	SuspendGameServerGroupAsync(ctx workflow.Context, input *gamelift.SuspendGameServerGroupInput) *GameliftSuspendGameServerGroupFuture

	TagResource(ctx workflow.Context, input *gamelift.TagResourceInput) (*gamelift.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *gamelift.TagResourceInput) *GameliftTagResourceFuture

	UntagResource(ctx workflow.Context, input *gamelift.UntagResourceInput) (*gamelift.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *gamelift.UntagResourceInput) *GameliftUntagResourceFuture

	UpdateAlias(ctx workflow.Context, input *gamelift.UpdateAliasInput) (*gamelift.UpdateAliasOutput, error)
	UpdateAliasAsync(ctx workflow.Context, input *gamelift.UpdateAliasInput) *GameliftUpdateAliasFuture

	UpdateBuild(ctx workflow.Context, input *gamelift.UpdateBuildInput) (*gamelift.UpdateBuildOutput, error)
	UpdateBuildAsync(ctx workflow.Context, input *gamelift.UpdateBuildInput) *GameliftUpdateBuildFuture

	UpdateFleetAttributes(ctx workflow.Context, input *gamelift.UpdateFleetAttributesInput) (*gamelift.UpdateFleetAttributesOutput, error)
	UpdateFleetAttributesAsync(ctx workflow.Context, input *gamelift.UpdateFleetAttributesInput) *GameliftUpdateFleetAttributesFuture

	UpdateFleetCapacity(ctx workflow.Context, input *gamelift.UpdateFleetCapacityInput) (*gamelift.UpdateFleetCapacityOutput, error)
	UpdateFleetCapacityAsync(ctx workflow.Context, input *gamelift.UpdateFleetCapacityInput) *GameliftUpdateFleetCapacityFuture

	UpdateFleetPortSettings(ctx workflow.Context, input *gamelift.UpdateFleetPortSettingsInput) (*gamelift.UpdateFleetPortSettingsOutput, error)
	UpdateFleetPortSettingsAsync(ctx workflow.Context, input *gamelift.UpdateFleetPortSettingsInput) *GameliftUpdateFleetPortSettingsFuture

	UpdateGameServer(ctx workflow.Context, input *gamelift.UpdateGameServerInput) (*gamelift.UpdateGameServerOutput, error)
	UpdateGameServerAsync(ctx workflow.Context, input *gamelift.UpdateGameServerInput) *GameliftUpdateGameServerFuture

	UpdateGameServerGroup(ctx workflow.Context, input *gamelift.UpdateGameServerGroupInput) (*gamelift.UpdateGameServerGroupOutput, error)
	UpdateGameServerGroupAsync(ctx workflow.Context, input *gamelift.UpdateGameServerGroupInput) *GameliftUpdateGameServerGroupFuture

	UpdateGameSession(ctx workflow.Context, input *gamelift.UpdateGameSessionInput) (*gamelift.UpdateGameSessionOutput, error)
	UpdateGameSessionAsync(ctx workflow.Context, input *gamelift.UpdateGameSessionInput) *GameliftUpdateGameSessionFuture

	UpdateGameSessionQueue(ctx workflow.Context, input *gamelift.UpdateGameSessionQueueInput) (*gamelift.UpdateGameSessionQueueOutput, error)
	UpdateGameSessionQueueAsync(ctx workflow.Context, input *gamelift.UpdateGameSessionQueueInput) *GameliftUpdateGameSessionQueueFuture

	UpdateMatchmakingConfiguration(ctx workflow.Context, input *gamelift.UpdateMatchmakingConfigurationInput) (*gamelift.UpdateMatchmakingConfigurationOutput, error)
	UpdateMatchmakingConfigurationAsync(ctx workflow.Context, input *gamelift.UpdateMatchmakingConfigurationInput) *GameliftUpdateMatchmakingConfigurationFuture

	UpdateRuntimeConfiguration(ctx workflow.Context, input *gamelift.UpdateRuntimeConfigurationInput) (*gamelift.UpdateRuntimeConfigurationOutput, error)
	UpdateRuntimeConfigurationAsync(ctx workflow.Context, input *gamelift.UpdateRuntimeConfigurationInput) *GameliftUpdateRuntimeConfigurationFuture

	UpdateScript(ctx workflow.Context, input *gamelift.UpdateScriptInput) (*gamelift.UpdateScriptOutput, error)
	UpdateScriptAsync(ctx workflow.Context, input *gamelift.UpdateScriptInput) *GameliftUpdateScriptFuture

	ValidateMatchmakingRuleSet(ctx workflow.Context, input *gamelift.ValidateMatchmakingRuleSetInput) (*gamelift.ValidateMatchmakingRuleSetOutput, error)
	ValidateMatchmakingRuleSetAsync(ctx workflow.Context, input *gamelift.ValidateMatchmakingRuleSetInput) *GameliftValidateMatchmakingRuleSetFuture
}

type GameLiftStub struct{}

func NewGameLiftStub() GameLiftClient {
	return &GameLiftStub{}
}

type GameliftAcceptMatchFuture struct {
	Future workflow.Future
}

func (r *GameliftAcceptMatchFuture) Get(ctx workflow.Context) (*gamelift.AcceptMatchOutput, error) {
	var output gamelift.AcceptMatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftClaimGameServerFuture struct {
	Future workflow.Future
}

func (r *GameliftClaimGameServerFuture) Get(ctx workflow.Context) (*gamelift.ClaimGameServerOutput, error) {
	var output gamelift.ClaimGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreateAliasFuture struct {
	Future workflow.Future
}

func (r *GameliftCreateAliasFuture) Get(ctx workflow.Context) (*gamelift.CreateAliasOutput, error) {
	var output gamelift.CreateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreateBuildFuture struct {
	Future workflow.Future
}

func (r *GameliftCreateBuildFuture) Get(ctx workflow.Context) (*gamelift.CreateBuildOutput, error) {
	var output gamelift.CreateBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreateFleetFuture struct {
	Future workflow.Future
}

func (r *GameliftCreateFleetFuture) Get(ctx workflow.Context) (*gamelift.CreateFleetOutput, error) {
	var output gamelift.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreateGameServerGroupFuture struct {
	Future workflow.Future
}

func (r *GameliftCreateGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.CreateGameServerGroupOutput, error) {
	var output gamelift.CreateGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreateGameSessionFuture struct {
	Future workflow.Future
}

func (r *GameliftCreateGameSessionFuture) Get(ctx workflow.Context) (*gamelift.CreateGameSessionOutput, error) {
	var output gamelift.CreateGameSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreateGameSessionQueueFuture struct {
	Future workflow.Future
}

func (r *GameliftCreateGameSessionQueueFuture) Get(ctx workflow.Context) (*gamelift.CreateGameSessionQueueOutput, error) {
	var output gamelift.CreateGameSessionQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreateMatchmakingConfigurationFuture struct {
	Future workflow.Future
}

func (r *GameliftCreateMatchmakingConfigurationFuture) Get(ctx workflow.Context) (*gamelift.CreateMatchmakingConfigurationOutput, error) {
	var output gamelift.CreateMatchmakingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreateMatchmakingRuleSetFuture struct {
	Future workflow.Future
}

func (r *GameliftCreateMatchmakingRuleSetFuture) Get(ctx workflow.Context) (*gamelift.CreateMatchmakingRuleSetOutput, error) {
	var output gamelift.CreateMatchmakingRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreatePlayerSessionFuture struct {
	Future workflow.Future
}

func (r *GameliftCreatePlayerSessionFuture) Get(ctx workflow.Context) (*gamelift.CreatePlayerSessionOutput, error) {
	var output gamelift.CreatePlayerSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreatePlayerSessionsFuture struct {
	Future workflow.Future
}

func (r *GameliftCreatePlayerSessionsFuture) Get(ctx workflow.Context) (*gamelift.CreatePlayerSessionsOutput, error) {
	var output gamelift.CreatePlayerSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreateScriptFuture struct {
	Future workflow.Future
}

func (r *GameliftCreateScriptFuture) Get(ctx workflow.Context) (*gamelift.CreateScriptOutput, error) {
	var output gamelift.CreateScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreateVpcPeeringAuthorizationFuture struct {
	Future workflow.Future
}

func (r *GameliftCreateVpcPeeringAuthorizationFuture) Get(ctx workflow.Context) (*gamelift.CreateVpcPeeringAuthorizationOutput, error) {
	var output gamelift.CreateVpcPeeringAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftCreateVpcPeeringConnectionFuture struct {
	Future workflow.Future
}

func (r *GameliftCreateVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*gamelift.CreateVpcPeeringConnectionOutput, error) {
	var output gamelift.CreateVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDeleteAliasFuture struct {
	Future workflow.Future
}

func (r *GameliftDeleteAliasFuture) Get(ctx workflow.Context) (*gamelift.DeleteAliasOutput, error) {
	var output gamelift.DeleteAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDeleteBuildFuture struct {
	Future workflow.Future
}

func (r *GameliftDeleteBuildFuture) Get(ctx workflow.Context) (*gamelift.DeleteBuildOutput, error) {
	var output gamelift.DeleteBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDeleteFleetFuture struct {
	Future workflow.Future
}

func (r *GameliftDeleteFleetFuture) Get(ctx workflow.Context) (*gamelift.DeleteFleetOutput, error) {
	var output gamelift.DeleteFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDeleteGameServerGroupFuture struct {
	Future workflow.Future
}

func (r *GameliftDeleteGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.DeleteGameServerGroupOutput, error) {
	var output gamelift.DeleteGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDeleteGameSessionQueueFuture struct {
	Future workflow.Future
}

func (r *GameliftDeleteGameSessionQueueFuture) Get(ctx workflow.Context) (*gamelift.DeleteGameSessionQueueOutput, error) {
	var output gamelift.DeleteGameSessionQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDeleteMatchmakingConfigurationFuture struct {
	Future workflow.Future
}

func (r *GameliftDeleteMatchmakingConfigurationFuture) Get(ctx workflow.Context) (*gamelift.DeleteMatchmakingConfigurationOutput, error) {
	var output gamelift.DeleteMatchmakingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDeleteMatchmakingRuleSetFuture struct {
	Future workflow.Future
}

func (r *GameliftDeleteMatchmakingRuleSetFuture) Get(ctx workflow.Context) (*gamelift.DeleteMatchmakingRuleSetOutput, error) {
	var output gamelift.DeleteMatchmakingRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDeleteScalingPolicyFuture struct {
	Future workflow.Future
}

func (r *GameliftDeleteScalingPolicyFuture) Get(ctx workflow.Context) (*gamelift.DeleteScalingPolicyOutput, error) {
	var output gamelift.DeleteScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDeleteScriptFuture struct {
	Future workflow.Future
}

func (r *GameliftDeleteScriptFuture) Get(ctx workflow.Context) (*gamelift.DeleteScriptOutput, error) {
	var output gamelift.DeleteScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDeleteVpcPeeringAuthorizationFuture struct {
	Future workflow.Future
}

func (r *GameliftDeleteVpcPeeringAuthorizationFuture) Get(ctx workflow.Context) (*gamelift.DeleteVpcPeeringAuthorizationOutput, error) {
	var output gamelift.DeleteVpcPeeringAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDeleteVpcPeeringConnectionFuture struct {
	Future workflow.Future
}

func (r *GameliftDeleteVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*gamelift.DeleteVpcPeeringConnectionOutput, error) {
	var output gamelift.DeleteVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDeregisterGameServerFuture struct {
	Future workflow.Future
}

func (r *GameliftDeregisterGameServerFuture) Get(ctx workflow.Context) (*gamelift.DeregisterGameServerOutput, error) {
	var output gamelift.DeregisterGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeAliasFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeAliasFuture) Get(ctx workflow.Context) (*gamelift.DescribeAliasOutput, error) {
	var output gamelift.DescribeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeBuildFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeBuildFuture) Get(ctx workflow.Context) (*gamelift.DescribeBuildOutput, error) {
	var output gamelift.DescribeBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeEC2InstanceLimitsFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeEC2InstanceLimitsFuture) Get(ctx workflow.Context) (*gamelift.DescribeEC2InstanceLimitsOutput, error) {
	var output gamelift.DescribeEC2InstanceLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeFleetAttributesFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeFleetAttributesFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetAttributesOutput, error) {
	var output gamelift.DescribeFleetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeFleetCapacityFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeFleetCapacityFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetCapacityOutput, error) {
	var output gamelift.DescribeFleetCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeFleetEventsFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeFleetEventsFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetEventsOutput, error) {
	var output gamelift.DescribeFleetEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeFleetPortSettingsFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeFleetPortSettingsFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetPortSettingsOutput, error) {
	var output gamelift.DescribeFleetPortSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeFleetUtilizationFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeFleetUtilizationFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetUtilizationOutput, error) {
	var output gamelift.DescribeFleetUtilizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeGameServerFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeGameServerFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameServerOutput, error) {
	var output gamelift.DescribeGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeGameServerGroupFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameServerGroupOutput, error) {
	var output gamelift.DescribeGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeGameServerInstancesFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeGameServerInstancesFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameServerInstancesOutput, error) {
	var output gamelift.DescribeGameServerInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeGameSessionDetailsFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeGameSessionDetailsFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameSessionDetailsOutput, error) {
	var output gamelift.DescribeGameSessionDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeGameSessionPlacementFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeGameSessionPlacementFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameSessionPlacementOutput, error) {
	var output gamelift.DescribeGameSessionPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeGameSessionQueuesFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeGameSessionQueuesFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameSessionQueuesOutput, error) {
	var output gamelift.DescribeGameSessionQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeGameSessionsFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeGameSessionsFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameSessionsOutput, error) {
	var output gamelift.DescribeGameSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeInstancesFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeInstancesFuture) Get(ctx workflow.Context) (*gamelift.DescribeInstancesOutput, error) {
	var output gamelift.DescribeInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeMatchmakingFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeMatchmakingFuture) Get(ctx workflow.Context) (*gamelift.DescribeMatchmakingOutput, error) {
	var output gamelift.DescribeMatchmakingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeMatchmakingConfigurationsFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeMatchmakingConfigurationsFuture) Get(ctx workflow.Context) (*gamelift.DescribeMatchmakingConfigurationsOutput, error) {
	var output gamelift.DescribeMatchmakingConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeMatchmakingRuleSetsFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeMatchmakingRuleSetsFuture) Get(ctx workflow.Context) (*gamelift.DescribeMatchmakingRuleSetsOutput, error) {
	var output gamelift.DescribeMatchmakingRuleSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribePlayerSessionsFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribePlayerSessionsFuture) Get(ctx workflow.Context) (*gamelift.DescribePlayerSessionsOutput, error) {
	var output gamelift.DescribePlayerSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeRuntimeConfigurationFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeRuntimeConfigurationFuture) Get(ctx workflow.Context) (*gamelift.DescribeRuntimeConfigurationOutput, error) {
	var output gamelift.DescribeRuntimeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeScalingPoliciesFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeScalingPoliciesFuture) Get(ctx workflow.Context) (*gamelift.DescribeScalingPoliciesOutput, error) {
	var output gamelift.DescribeScalingPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeScriptFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeScriptFuture) Get(ctx workflow.Context) (*gamelift.DescribeScriptOutput, error) {
	var output gamelift.DescribeScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeVpcPeeringAuthorizationsFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeVpcPeeringAuthorizationsFuture) Get(ctx workflow.Context) (*gamelift.DescribeVpcPeeringAuthorizationsOutput, error) {
	var output gamelift.DescribeVpcPeeringAuthorizationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftDescribeVpcPeeringConnectionsFuture struct {
	Future workflow.Future
}

func (r *GameliftDescribeVpcPeeringConnectionsFuture) Get(ctx workflow.Context) (*gamelift.DescribeVpcPeeringConnectionsOutput, error) {
	var output gamelift.DescribeVpcPeeringConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftGetGameSessionLogUrlFuture struct {
	Future workflow.Future
}

func (r *GameliftGetGameSessionLogUrlFuture) Get(ctx workflow.Context) (*gamelift.GetGameSessionLogUrlOutput, error) {
	var output gamelift.GetGameSessionLogUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftGetInstanceAccessFuture struct {
	Future workflow.Future
}

func (r *GameliftGetInstanceAccessFuture) Get(ctx workflow.Context) (*gamelift.GetInstanceAccessOutput, error) {
	var output gamelift.GetInstanceAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftListAliasesFuture struct {
	Future workflow.Future
}

func (r *GameliftListAliasesFuture) Get(ctx workflow.Context) (*gamelift.ListAliasesOutput, error) {
	var output gamelift.ListAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftListBuildsFuture struct {
	Future workflow.Future
}

func (r *GameliftListBuildsFuture) Get(ctx workflow.Context) (*gamelift.ListBuildsOutput, error) {
	var output gamelift.ListBuildsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftListFleetsFuture struct {
	Future workflow.Future
}

func (r *GameliftListFleetsFuture) Get(ctx workflow.Context) (*gamelift.ListFleetsOutput, error) {
	var output gamelift.ListFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftListGameServerGroupsFuture struct {
	Future workflow.Future
}

func (r *GameliftListGameServerGroupsFuture) Get(ctx workflow.Context) (*gamelift.ListGameServerGroupsOutput, error) {
	var output gamelift.ListGameServerGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftListGameServersFuture struct {
	Future workflow.Future
}

func (r *GameliftListGameServersFuture) Get(ctx workflow.Context) (*gamelift.ListGameServersOutput, error) {
	var output gamelift.ListGameServersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftListScriptsFuture struct {
	Future workflow.Future
}

func (r *GameliftListScriptsFuture) Get(ctx workflow.Context) (*gamelift.ListScriptsOutput, error) {
	var output gamelift.ListScriptsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *GameliftListTagsForResourceFuture) Get(ctx workflow.Context) (*gamelift.ListTagsForResourceOutput, error) {
	var output gamelift.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftPutScalingPolicyFuture struct {
	Future workflow.Future
}

func (r *GameliftPutScalingPolicyFuture) Get(ctx workflow.Context) (*gamelift.PutScalingPolicyOutput, error) {
	var output gamelift.PutScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftRegisterGameServerFuture struct {
	Future workflow.Future
}

func (r *GameliftRegisterGameServerFuture) Get(ctx workflow.Context) (*gamelift.RegisterGameServerOutput, error) {
	var output gamelift.RegisterGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftRequestUploadCredentialsFuture struct {
	Future workflow.Future
}

func (r *GameliftRequestUploadCredentialsFuture) Get(ctx workflow.Context) (*gamelift.RequestUploadCredentialsOutput, error) {
	var output gamelift.RequestUploadCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftResolveAliasFuture struct {
	Future workflow.Future
}

func (r *GameliftResolveAliasFuture) Get(ctx workflow.Context) (*gamelift.ResolveAliasOutput, error) {
	var output gamelift.ResolveAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftResumeGameServerGroupFuture struct {
	Future workflow.Future
}

func (r *GameliftResumeGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.ResumeGameServerGroupOutput, error) {
	var output gamelift.ResumeGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftSearchGameSessionsFuture struct {
	Future workflow.Future
}

func (r *GameliftSearchGameSessionsFuture) Get(ctx workflow.Context) (*gamelift.SearchGameSessionsOutput, error) {
	var output gamelift.SearchGameSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftStartFleetActionsFuture struct {
	Future workflow.Future
}

func (r *GameliftStartFleetActionsFuture) Get(ctx workflow.Context) (*gamelift.StartFleetActionsOutput, error) {
	var output gamelift.StartFleetActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftStartGameSessionPlacementFuture struct {
	Future workflow.Future
}

func (r *GameliftStartGameSessionPlacementFuture) Get(ctx workflow.Context) (*gamelift.StartGameSessionPlacementOutput, error) {
	var output gamelift.StartGameSessionPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftStartMatchBackfillFuture struct {
	Future workflow.Future
}

func (r *GameliftStartMatchBackfillFuture) Get(ctx workflow.Context) (*gamelift.StartMatchBackfillOutput, error) {
	var output gamelift.StartMatchBackfillOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftStartMatchmakingFuture struct {
	Future workflow.Future
}

func (r *GameliftStartMatchmakingFuture) Get(ctx workflow.Context) (*gamelift.StartMatchmakingOutput, error) {
	var output gamelift.StartMatchmakingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftStopFleetActionsFuture struct {
	Future workflow.Future
}

func (r *GameliftStopFleetActionsFuture) Get(ctx workflow.Context) (*gamelift.StopFleetActionsOutput, error) {
	var output gamelift.StopFleetActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftStopGameSessionPlacementFuture struct {
	Future workflow.Future
}

func (r *GameliftStopGameSessionPlacementFuture) Get(ctx workflow.Context) (*gamelift.StopGameSessionPlacementOutput, error) {
	var output gamelift.StopGameSessionPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftStopMatchmakingFuture struct {
	Future workflow.Future
}

func (r *GameliftStopMatchmakingFuture) Get(ctx workflow.Context) (*gamelift.StopMatchmakingOutput, error) {
	var output gamelift.StopMatchmakingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftSuspendGameServerGroupFuture struct {
	Future workflow.Future
}

func (r *GameliftSuspendGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.SuspendGameServerGroupOutput, error) {
	var output gamelift.SuspendGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftTagResourceFuture struct {
	Future workflow.Future
}

func (r *GameliftTagResourceFuture) Get(ctx workflow.Context) (*gamelift.TagResourceOutput, error) {
	var output gamelift.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUntagResourceFuture struct {
	Future workflow.Future
}

func (r *GameliftUntagResourceFuture) Get(ctx workflow.Context) (*gamelift.UntagResourceOutput, error) {
	var output gamelift.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUpdateAliasFuture struct {
	Future workflow.Future
}

func (r *GameliftUpdateAliasFuture) Get(ctx workflow.Context) (*gamelift.UpdateAliasOutput, error) {
	var output gamelift.UpdateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUpdateBuildFuture struct {
	Future workflow.Future
}

func (r *GameliftUpdateBuildFuture) Get(ctx workflow.Context) (*gamelift.UpdateBuildOutput, error) {
	var output gamelift.UpdateBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUpdateFleetAttributesFuture struct {
	Future workflow.Future
}

func (r *GameliftUpdateFleetAttributesFuture) Get(ctx workflow.Context) (*gamelift.UpdateFleetAttributesOutput, error) {
	var output gamelift.UpdateFleetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUpdateFleetCapacityFuture struct {
	Future workflow.Future
}

func (r *GameliftUpdateFleetCapacityFuture) Get(ctx workflow.Context) (*gamelift.UpdateFleetCapacityOutput, error) {
	var output gamelift.UpdateFleetCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUpdateFleetPortSettingsFuture struct {
	Future workflow.Future
}

func (r *GameliftUpdateFleetPortSettingsFuture) Get(ctx workflow.Context) (*gamelift.UpdateFleetPortSettingsOutput, error) {
	var output gamelift.UpdateFleetPortSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUpdateGameServerFuture struct {
	Future workflow.Future
}

func (r *GameliftUpdateGameServerFuture) Get(ctx workflow.Context) (*gamelift.UpdateGameServerOutput, error) {
	var output gamelift.UpdateGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUpdateGameServerGroupFuture struct {
	Future workflow.Future
}

func (r *GameliftUpdateGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.UpdateGameServerGroupOutput, error) {
	var output gamelift.UpdateGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUpdateGameSessionFuture struct {
	Future workflow.Future
}

func (r *GameliftUpdateGameSessionFuture) Get(ctx workflow.Context) (*gamelift.UpdateGameSessionOutput, error) {
	var output gamelift.UpdateGameSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUpdateGameSessionQueueFuture struct {
	Future workflow.Future
}

func (r *GameliftUpdateGameSessionQueueFuture) Get(ctx workflow.Context) (*gamelift.UpdateGameSessionQueueOutput, error) {
	var output gamelift.UpdateGameSessionQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUpdateMatchmakingConfigurationFuture struct {
	Future workflow.Future
}

func (r *GameliftUpdateMatchmakingConfigurationFuture) Get(ctx workflow.Context) (*gamelift.UpdateMatchmakingConfigurationOutput, error) {
	var output gamelift.UpdateMatchmakingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUpdateRuntimeConfigurationFuture struct {
	Future workflow.Future
}

func (r *GameliftUpdateRuntimeConfigurationFuture) Get(ctx workflow.Context) (*gamelift.UpdateRuntimeConfigurationOutput, error) {
	var output gamelift.UpdateRuntimeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftUpdateScriptFuture struct {
	Future workflow.Future
}

func (r *GameliftUpdateScriptFuture) Get(ctx workflow.Context) (*gamelift.UpdateScriptOutput, error) {
	var output gamelift.UpdateScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameliftValidateMatchmakingRuleSetFuture struct {
	Future workflow.Future
}

func (r *GameliftValidateMatchmakingRuleSetFuture) Get(ctx workflow.Context) (*gamelift.ValidateMatchmakingRuleSetOutput, error) {
	var output gamelift.ValidateMatchmakingRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) AcceptMatch(ctx workflow.Context, input *gamelift.AcceptMatchInput) (*gamelift.AcceptMatchOutput, error) {
	var output gamelift.AcceptMatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.AcceptMatch", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) AcceptMatchAsync(ctx workflow.Context, input *gamelift.AcceptMatchInput) *GameliftAcceptMatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.AcceptMatch", input)
	return &GameliftAcceptMatchFuture{Future: future}
}

func (a *GameLiftStub) ClaimGameServer(ctx workflow.Context, input *gamelift.ClaimGameServerInput) (*gamelift.ClaimGameServerOutput, error) {
	var output gamelift.ClaimGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.ClaimGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) ClaimGameServerAsync(ctx workflow.Context, input *gamelift.ClaimGameServerInput) *GameliftClaimGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.ClaimGameServer", input)
	return &GameliftClaimGameServerFuture{Future: future}
}

func (a *GameLiftStub) CreateAlias(ctx workflow.Context, input *gamelift.CreateAliasInput) (*gamelift.CreateAliasOutput, error) {
	var output gamelift.CreateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreateAliasAsync(ctx workflow.Context, input *gamelift.CreateAliasInput) *GameliftCreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateAlias", input)
	return &GameliftCreateAliasFuture{Future: future}
}

func (a *GameLiftStub) CreateBuild(ctx workflow.Context, input *gamelift.CreateBuildInput) (*gamelift.CreateBuildOutput, error) {
	var output gamelift.CreateBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreateBuildAsync(ctx workflow.Context, input *gamelift.CreateBuildInput) *GameliftCreateBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateBuild", input)
	return &GameliftCreateBuildFuture{Future: future}
}

func (a *GameLiftStub) CreateFleet(ctx workflow.Context, input *gamelift.CreateFleetInput) (*gamelift.CreateFleetOutput, error) {
	var output gamelift.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreateFleetAsync(ctx workflow.Context, input *gamelift.CreateFleetInput) *GameliftCreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateFleet", input)
	return &GameliftCreateFleetFuture{Future: future}
}

func (a *GameLiftStub) CreateGameServerGroup(ctx workflow.Context, input *gamelift.CreateGameServerGroupInput) (*gamelift.CreateGameServerGroupOutput, error) {
	var output gamelift.CreateGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreateGameServerGroupAsync(ctx workflow.Context, input *gamelift.CreateGameServerGroupInput) *GameliftCreateGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateGameServerGroup", input)
	return &GameliftCreateGameServerGroupFuture{Future: future}
}

func (a *GameLiftStub) CreateGameSession(ctx workflow.Context, input *gamelift.CreateGameSessionInput) (*gamelift.CreateGameSessionOutput, error) {
	var output gamelift.CreateGameSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateGameSession", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreateGameSessionAsync(ctx workflow.Context, input *gamelift.CreateGameSessionInput) *GameliftCreateGameSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateGameSession", input)
	return &GameliftCreateGameSessionFuture{Future: future}
}

func (a *GameLiftStub) CreateGameSessionQueue(ctx workflow.Context, input *gamelift.CreateGameSessionQueueInput) (*gamelift.CreateGameSessionQueueOutput, error) {
	var output gamelift.CreateGameSessionQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateGameSessionQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreateGameSessionQueueAsync(ctx workflow.Context, input *gamelift.CreateGameSessionQueueInput) *GameliftCreateGameSessionQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateGameSessionQueue", input)
	return &GameliftCreateGameSessionQueueFuture{Future: future}
}

func (a *GameLiftStub) CreateMatchmakingConfiguration(ctx workflow.Context, input *gamelift.CreateMatchmakingConfigurationInput) (*gamelift.CreateMatchmakingConfigurationOutput, error) {
	var output gamelift.CreateMatchmakingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateMatchmakingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreateMatchmakingConfigurationAsync(ctx workflow.Context, input *gamelift.CreateMatchmakingConfigurationInput) *GameliftCreateMatchmakingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateMatchmakingConfiguration", input)
	return &GameliftCreateMatchmakingConfigurationFuture{Future: future}
}

func (a *GameLiftStub) CreateMatchmakingRuleSet(ctx workflow.Context, input *gamelift.CreateMatchmakingRuleSetInput) (*gamelift.CreateMatchmakingRuleSetOutput, error) {
	var output gamelift.CreateMatchmakingRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateMatchmakingRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreateMatchmakingRuleSetAsync(ctx workflow.Context, input *gamelift.CreateMatchmakingRuleSetInput) *GameliftCreateMatchmakingRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateMatchmakingRuleSet", input)
	return &GameliftCreateMatchmakingRuleSetFuture{Future: future}
}

func (a *GameLiftStub) CreatePlayerSession(ctx workflow.Context, input *gamelift.CreatePlayerSessionInput) (*gamelift.CreatePlayerSessionOutput, error) {
	var output gamelift.CreatePlayerSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreatePlayerSession", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreatePlayerSessionAsync(ctx workflow.Context, input *gamelift.CreatePlayerSessionInput) *GameliftCreatePlayerSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreatePlayerSession", input)
	return &GameliftCreatePlayerSessionFuture{Future: future}
}

func (a *GameLiftStub) CreatePlayerSessions(ctx workflow.Context, input *gamelift.CreatePlayerSessionsInput) (*gamelift.CreatePlayerSessionsOutput, error) {
	var output gamelift.CreatePlayerSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreatePlayerSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreatePlayerSessionsAsync(ctx workflow.Context, input *gamelift.CreatePlayerSessionsInput) *GameliftCreatePlayerSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreatePlayerSessions", input)
	return &GameliftCreatePlayerSessionsFuture{Future: future}
}

func (a *GameLiftStub) CreateScript(ctx workflow.Context, input *gamelift.CreateScriptInput) (*gamelift.CreateScriptOutput, error) {
	var output gamelift.CreateScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateScript", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreateScriptAsync(ctx workflow.Context, input *gamelift.CreateScriptInput) *GameliftCreateScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateScript", input)
	return &GameliftCreateScriptFuture{Future: future}
}

func (a *GameLiftStub) CreateVpcPeeringAuthorization(ctx workflow.Context, input *gamelift.CreateVpcPeeringAuthorizationInput) (*gamelift.CreateVpcPeeringAuthorizationOutput, error) {
	var output gamelift.CreateVpcPeeringAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateVpcPeeringAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreateVpcPeeringAuthorizationAsync(ctx workflow.Context, input *gamelift.CreateVpcPeeringAuthorizationInput) *GameliftCreateVpcPeeringAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateVpcPeeringAuthorization", input)
	return &GameliftCreateVpcPeeringAuthorizationFuture{Future: future}
}

func (a *GameLiftStub) CreateVpcPeeringConnection(ctx workflow.Context, input *gamelift.CreateVpcPeeringConnectionInput) (*gamelift.CreateVpcPeeringConnectionOutput, error) {
	var output gamelift.CreateVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) CreateVpcPeeringConnectionAsync(ctx workflow.Context, input *gamelift.CreateVpcPeeringConnectionInput) *GameliftCreateVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.CreateVpcPeeringConnection", input)
	return &GameliftCreateVpcPeeringConnectionFuture{Future: future}
}

func (a *GameLiftStub) DeleteAlias(ctx workflow.Context, input *gamelift.DeleteAliasInput) (*gamelift.DeleteAliasOutput, error) {
	var output gamelift.DeleteAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DeleteAliasAsync(ctx workflow.Context, input *gamelift.DeleteAliasInput) *GameliftDeleteAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteAlias", input)
	return &GameliftDeleteAliasFuture{Future: future}
}

func (a *GameLiftStub) DeleteBuild(ctx workflow.Context, input *gamelift.DeleteBuildInput) (*gamelift.DeleteBuildOutput, error) {
	var output gamelift.DeleteBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DeleteBuildAsync(ctx workflow.Context, input *gamelift.DeleteBuildInput) *GameliftDeleteBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteBuild", input)
	return &GameliftDeleteBuildFuture{Future: future}
}

func (a *GameLiftStub) DeleteFleet(ctx workflow.Context, input *gamelift.DeleteFleetInput) (*gamelift.DeleteFleetOutput, error) {
	var output gamelift.DeleteFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DeleteFleetAsync(ctx workflow.Context, input *gamelift.DeleteFleetInput) *GameliftDeleteFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteFleet", input)
	return &GameliftDeleteFleetFuture{Future: future}
}

func (a *GameLiftStub) DeleteGameServerGroup(ctx workflow.Context, input *gamelift.DeleteGameServerGroupInput) (*gamelift.DeleteGameServerGroupOutput, error) {
	var output gamelift.DeleteGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DeleteGameServerGroupAsync(ctx workflow.Context, input *gamelift.DeleteGameServerGroupInput) *GameliftDeleteGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteGameServerGroup", input)
	return &GameliftDeleteGameServerGroupFuture{Future: future}
}

func (a *GameLiftStub) DeleteGameSessionQueue(ctx workflow.Context, input *gamelift.DeleteGameSessionQueueInput) (*gamelift.DeleteGameSessionQueueOutput, error) {
	var output gamelift.DeleteGameSessionQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteGameSessionQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DeleteGameSessionQueueAsync(ctx workflow.Context, input *gamelift.DeleteGameSessionQueueInput) *GameliftDeleteGameSessionQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteGameSessionQueue", input)
	return &GameliftDeleteGameSessionQueueFuture{Future: future}
}

func (a *GameLiftStub) DeleteMatchmakingConfiguration(ctx workflow.Context, input *gamelift.DeleteMatchmakingConfigurationInput) (*gamelift.DeleteMatchmakingConfigurationOutput, error) {
	var output gamelift.DeleteMatchmakingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteMatchmakingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DeleteMatchmakingConfigurationAsync(ctx workflow.Context, input *gamelift.DeleteMatchmakingConfigurationInput) *GameliftDeleteMatchmakingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteMatchmakingConfiguration", input)
	return &GameliftDeleteMatchmakingConfigurationFuture{Future: future}
}

func (a *GameLiftStub) DeleteMatchmakingRuleSet(ctx workflow.Context, input *gamelift.DeleteMatchmakingRuleSetInput) (*gamelift.DeleteMatchmakingRuleSetOutput, error) {
	var output gamelift.DeleteMatchmakingRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteMatchmakingRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DeleteMatchmakingRuleSetAsync(ctx workflow.Context, input *gamelift.DeleteMatchmakingRuleSetInput) *GameliftDeleteMatchmakingRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteMatchmakingRuleSet", input)
	return &GameliftDeleteMatchmakingRuleSetFuture{Future: future}
}

func (a *GameLiftStub) DeleteScalingPolicy(ctx workflow.Context, input *gamelift.DeleteScalingPolicyInput) (*gamelift.DeleteScalingPolicyOutput, error) {
	var output gamelift.DeleteScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DeleteScalingPolicyAsync(ctx workflow.Context, input *gamelift.DeleteScalingPolicyInput) *GameliftDeleteScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteScalingPolicy", input)
	return &GameliftDeleteScalingPolicyFuture{Future: future}
}

func (a *GameLiftStub) DeleteScript(ctx workflow.Context, input *gamelift.DeleteScriptInput) (*gamelift.DeleteScriptOutput, error) {
	var output gamelift.DeleteScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteScript", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DeleteScriptAsync(ctx workflow.Context, input *gamelift.DeleteScriptInput) *GameliftDeleteScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteScript", input)
	return &GameliftDeleteScriptFuture{Future: future}
}

func (a *GameLiftStub) DeleteVpcPeeringAuthorization(ctx workflow.Context, input *gamelift.DeleteVpcPeeringAuthorizationInput) (*gamelift.DeleteVpcPeeringAuthorizationOutput, error) {
	var output gamelift.DeleteVpcPeeringAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteVpcPeeringAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DeleteVpcPeeringAuthorizationAsync(ctx workflow.Context, input *gamelift.DeleteVpcPeeringAuthorizationInput) *GameliftDeleteVpcPeeringAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteVpcPeeringAuthorization", input)
	return &GameliftDeleteVpcPeeringAuthorizationFuture{Future: future}
}

func (a *GameLiftStub) DeleteVpcPeeringConnection(ctx workflow.Context, input *gamelift.DeleteVpcPeeringConnectionInput) (*gamelift.DeleteVpcPeeringConnectionOutput, error) {
	var output gamelift.DeleteVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DeleteVpcPeeringConnectionAsync(ctx workflow.Context, input *gamelift.DeleteVpcPeeringConnectionInput) *GameliftDeleteVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DeleteVpcPeeringConnection", input)
	return &GameliftDeleteVpcPeeringConnectionFuture{Future: future}
}

func (a *GameLiftStub) DeregisterGameServer(ctx workflow.Context, input *gamelift.DeregisterGameServerInput) (*gamelift.DeregisterGameServerOutput, error) {
	var output gamelift.DeregisterGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DeregisterGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DeregisterGameServerAsync(ctx workflow.Context, input *gamelift.DeregisterGameServerInput) *GameliftDeregisterGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DeregisterGameServer", input)
	return &GameliftDeregisterGameServerFuture{Future: future}
}

func (a *GameLiftStub) DescribeAlias(ctx workflow.Context, input *gamelift.DescribeAliasInput) (*gamelift.DescribeAliasOutput, error) {
	var output gamelift.DescribeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeAliasAsync(ctx workflow.Context, input *gamelift.DescribeAliasInput) *GameliftDescribeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeAlias", input)
	return &GameliftDescribeAliasFuture{Future: future}
}

func (a *GameLiftStub) DescribeBuild(ctx workflow.Context, input *gamelift.DescribeBuildInput) (*gamelift.DescribeBuildOutput, error) {
	var output gamelift.DescribeBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeBuildAsync(ctx workflow.Context, input *gamelift.DescribeBuildInput) *GameliftDescribeBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeBuild", input)
	return &GameliftDescribeBuildFuture{Future: future}
}

func (a *GameLiftStub) DescribeEC2InstanceLimits(ctx workflow.Context, input *gamelift.DescribeEC2InstanceLimitsInput) (*gamelift.DescribeEC2InstanceLimitsOutput, error) {
	var output gamelift.DescribeEC2InstanceLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeEC2InstanceLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeEC2InstanceLimitsAsync(ctx workflow.Context, input *gamelift.DescribeEC2InstanceLimitsInput) *GameliftDescribeEC2InstanceLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeEC2InstanceLimits", input)
	return &GameliftDescribeEC2InstanceLimitsFuture{Future: future}
}

func (a *GameLiftStub) DescribeFleetAttributes(ctx workflow.Context, input *gamelift.DescribeFleetAttributesInput) (*gamelift.DescribeFleetAttributesOutput, error) {
	var output gamelift.DescribeFleetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeFleetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeFleetAttributesAsync(ctx workflow.Context, input *gamelift.DescribeFleetAttributesInput) *GameliftDescribeFleetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeFleetAttributes", input)
	return &GameliftDescribeFleetAttributesFuture{Future: future}
}

func (a *GameLiftStub) DescribeFleetCapacity(ctx workflow.Context, input *gamelift.DescribeFleetCapacityInput) (*gamelift.DescribeFleetCapacityOutput, error) {
	var output gamelift.DescribeFleetCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeFleetCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeFleetCapacityAsync(ctx workflow.Context, input *gamelift.DescribeFleetCapacityInput) *GameliftDescribeFleetCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeFleetCapacity", input)
	return &GameliftDescribeFleetCapacityFuture{Future: future}
}

func (a *GameLiftStub) DescribeFleetEvents(ctx workflow.Context, input *gamelift.DescribeFleetEventsInput) (*gamelift.DescribeFleetEventsOutput, error) {
	var output gamelift.DescribeFleetEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeFleetEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeFleetEventsAsync(ctx workflow.Context, input *gamelift.DescribeFleetEventsInput) *GameliftDescribeFleetEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeFleetEvents", input)
	return &GameliftDescribeFleetEventsFuture{Future: future}
}

func (a *GameLiftStub) DescribeFleetPortSettings(ctx workflow.Context, input *gamelift.DescribeFleetPortSettingsInput) (*gamelift.DescribeFleetPortSettingsOutput, error) {
	var output gamelift.DescribeFleetPortSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeFleetPortSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeFleetPortSettingsAsync(ctx workflow.Context, input *gamelift.DescribeFleetPortSettingsInput) *GameliftDescribeFleetPortSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeFleetPortSettings", input)
	return &GameliftDescribeFleetPortSettingsFuture{Future: future}
}

func (a *GameLiftStub) DescribeFleetUtilization(ctx workflow.Context, input *gamelift.DescribeFleetUtilizationInput) (*gamelift.DescribeFleetUtilizationOutput, error) {
	var output gamelift.DescribeFleetUtilizationOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeFleetUtilization", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeFleetUtilizationAsync(ctx workflow.Context, input *gamelift.DescribeFleetUtilizationInput) *GameliftDescribeFleetUtilizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeFleetUtilization", input)
	return &GameliftDescribeFleetUtilizationFuture{Future: future}
}

func (a *GameLiftStub) DescribeGameServer(ctx workflow.Context, input *gamelift.DescribeGameServerInput) (*gamelift.DescribeGameServerOutput, error) {
	var output gamelift.DescribeGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeGameServerAsync(ctx workflow.Context, input *gamelift.DescribeGameServerInput) *GameliftDescribeGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameServer", input)
	return &GameliftDescribeGameServerFuture{Future: future}
}

func (a *GameLiftStub) DescribeGameServerGroup(ctx workflow.Context, input *gamelift.DescribeGameServerGroupInput) (*gamelift.DescribeGameServerGroupOutput, error) {
	var output gamelift.DescribeGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeGameServerGroupAsync(ctx workflow.Context, input *gamelift.DescribeGameServerGroupInput) *GameliftDescribeGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameServerGroup", input)
	return &GameliftDescribeGameServerGroupFuture{Future: future}
}

func (a *GameLiftStub) DescribeGameServerInstances(ctx workflow.Context, input *gamelift.DescribeGameServerInstancesInput) (*gamelift.DescribeGameServerInstancesOutput, error) {
	var output gamelift.DescribeGameServerInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameServerInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeGameServerInstancesAsync(ctx workflow.Context, input *gamelift.DescribeGameServerInstancesInput) *GameliftDescribeGameServerInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameServerInstances", input)
	return &GameliftDescribeGameServerInstancesFuture{Future: future}
}

func (a *GameLiftStub) DescribeGameSessionDetails(ctx workflow.Context, input *gamelift.DescribeGameSessionDetailsInput) (*gamelift.DescribeGameSessionDetailsOutput, error) {
	var output gamelift.DescribeGameSessionDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameSessionDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeGameSessionDetailsAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionDetailsInput) *GameliftDescribeGameSessionDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameSessionDetails", input)
	return &GameliftDescribeGameSessionDetailsFuture{Future: future}
}

func (a *GameLiftStub) DescribeGameSessionPlacement(ctx workflow.Context, input *gamelift.DescribeGameSessionPlacementInput) (*gamelift.DescribeGameSessionPlacementOutput, error) {
	var output gamelift.DescribeGameSessionPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameSessionPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeGameSessionPlacementAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionPlacementInput) *GameliftDescribeGameSessionPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameSessionPlacement", input)
	return &GameliftDescribeGameSessionPlacementFuture{Future: future}
}

func (a *GameLiftStub) DescribeGameSessionQueues(ctx workflow.Context, input *gamelift.DescribeGameSessionQueuesInput) (*gamelift.DescribeGameSessionQueuesOutput, error) {
	var output gamelift.DescribeGameSessionQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameSessionQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeGameSessionQueuesAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionQueuesInput) *GameliftDescribeGameSessionQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameSessionQueues", input)
	return &GameliftDescribeGameSessionQueuesFuture{Future: future}
}

func (a *GameLiftStub) DescribeGameSessions(ctx workflow.Context, input *gamelift.DescribeGameSessionsInput) (*gamelift.DescribeGameSessionsOutput, error) {
	var output gamelift.DescribeGameSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeGameSessionsAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionsInput) *GameliftDescribeGameSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeGameSessions", input)
	return &GameliftDescribeGameSessionsFuture{Future: future}
}

func (a *GameLiftStub) DescribeInstances(ctx workflow.Context, input *gamelift.DescribeInstancesInput) (*gamelift.DescribeInstancesOutput, error) {
	var output gamelift.DescribeInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeInstancesAsync(ctx workflow.Context, input *gamelift.DescribeInstancesInput) *GameliftDescribeInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeInstances", input)
	return &GameliftDescribeInstancesFuture{Future: future}
}

func (a *GameLiftStub) DescribeMatchmaking(ctx workflow.Context, input *gamelift.DescribeMatchmakingInput) (*gamelift.DescribeMatchmakingOutput, error) {
	var output gamelift.DescribeMatchmakingOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeMatchmaking", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeMatchmakingAsync(ctx workflow.Context, input *gamelift.DescribeMatchmakingInput) *GameliftDescribeMatchmakingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeMatchmaking", input)
	return &GameliftDescribeMatchmakingFuture{Future: future}
}

func (a *GameLiftStub) DescribeMatchmakingConfigurations(ctx workflow.Context, input *gamelift.DescribeMatchmakingConfigurationsInput) (*gamelift.DescribeMatchmakingConfigurationsOutput, error) {
	var output gamelift.DescribeMatchmakingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeMatchmakingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeMatchmakingConfigurationsAsync(ctx workflow.Context, input *gamelift.DescribeMatchmakingConfigurationsInput) *GameliftDescribeMatchmakingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeMatchmakingConfigurations", input)
	return &GameliftDescribeMatchmakingConfigurationsFuture{Future: future}
}

func (a *GameLiftStub) DescribeMatchmakingRuleSets(ctx workflow.Context, input *gamelift.DescribeMatchmakingRuleSetsInput) (*gamelift.DescribeMatchmakingRuleSetsOutput, error) {
	var output gamelift.DescribeMatchmakingRuleSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeMatchmakingRuleSets", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeMatchmakingRuleSetsAsync(ctx workflow.Context, input *gamelift.DescribeMatchmakingRuleSetsInput) *GameliftDescribeMatchmakingRuleSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeMatchmakingRuleSets", input)
	return &GameliftDescribeMatchmakingRuleSetsFuture{Future: future}
}

func (a *GameLiftStub) DescribePlayerSessions(ctx workflow.Context, input *gamelift.DescribePlayerSessionsInput) (*gamelift.DescribePlayerSessionsOutput, error) {
	var output gamelift.DescribePlayerSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribePlayerSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribePlayerSessionsAsync(ctx workflow.Context, input *gamelift.DescribePlayerSessionsInput) *GameliftDescribePlayerSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribePlayerSessions", input)
	return &GameliftDescribePlayerSessionsFuture{Future: future}
}

func (a *GameLiftStub) DescribeRuntimeConfiguration(ctx workflow.Context, input *gamelift.DescribeRuntimeConfigurationInput) (*gamelift.DescribeRuntimeConfigurationOutput, error) {
	var output gamelift.DescribeRuntimeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeRuntimeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeRuntimeConfigurationAsync(ctx workflow.Context, input *gamelift.DescribeRuntimeConfigurationInput) *GameliftDescribeRuntimeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeRuntimeConfiguration", input)
	return &GameliftDescribeRuntimeConfigurationFuture{Future: future}
}

func (a *GameLiftStub) DescribeScalingPolicies(ctx workflow.Context, input *gamelift.DescribeScalingPoliciesInput) (*gamelift.DescribeScalingPoliciesOutput, error) {
	var output gamelift.DescribeScalingPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeScalingPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeScalingPoliciesAsync(ctx workflow.Context, input *gamelift.DescribeScalingPoliciesInput) *GameliftDescribeScalingPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeScalingPolicies", input)
	return &GameliftDescribeScalingPoliciesFuture{Future: future}
}

func (a *GameLiftStub) DescribeScript(ctx workflow.Context, input *gamelift.DescribeScriptInput) (*gamelift.DescribeScriptOutput, error) {
	var output gamelift.DescribeScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeScript", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeScriptAsync(ctx workflow.Context, input *gamelift.DescribeScriptInput) *GameliftDescribeScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeScript", input)
	return &GameliftDescribeScriptFuture{Future: future}
}

func (a *GameLiftStub) DescribeVpcPeeringAuthorizations(ctx workflow.Context, input *gamelift.DescribeVpcPeeringAuthorizationsInput) (*gamelift.DescribeVpcPeeringAuthorizationsOutput, error) {
	var output gamelift.DescribeVpcPeeringAuthorizationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeVpcPeeringAuthorizations", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeVpcPeeringAuthorizationsAsync(ctx workflow.Context, input *gamelift.DescribeVpcPeeringAuthorizationsInput) *GameliftDescribeVpcPeeringAuthorizationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeVpcPeeringAuthorizations", input)
	return &GameliftDescribeVpcPeeringAuthorizationsFuture{Future: future}
}

func (a *GameLiftStub) DescribeVpcPeeringConnections(ctx workflow.Context, input *gamelift.DescribeVpcPeeringConnectionsInput) (*gamelift.DescribeVpcPeeringConnectionsOutput, error) {
	var output gamelift.DescribeVpcPeeringConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeVpcPeeringConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) DescribeVpcPeeringConnectionsAsync(ctx workflow.Context, input *gamelift.DescribeVpcPeeringConnectionsInput) *GameliftDescribeVpcPeeringConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.DescribeVpcPeeringConnections", input)
	return &GameliftDescribeVpcPeeringConnectionsFuture{Future: future}
}

func (a *GameLiftStub) GetGameSessionLogUrl(ctx workflow.Context, input *gamelift.GetGameSessionLogUrlInput) (*gamelift.GetGameSessionLogUrlOutput, error) {
	var output gamelift.GetGameSessionLogUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.GetGameSessionLogUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) GetGameSessionLogUrlAsync(ctx workflow.Context, input *gamelift.GetGameSessionLogUrlInput) *GameliftGetGameSessionLogUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.GetGameSessionLogUrl", input)
	return &GameliftGetGameSessionLogUrlFuture{Future: future}
}

func (a *GameLiftStub) GetInstanceAccess(ctx workflow.Context, input *gamelift.GetInstanceAccessInput) (*gamelift.GetInstanceAccessOutput, error) {
	var output gamelift.GetInstanceAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.GetInstanceAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) GetInstanceAccessAsync(ctx workflow.Context, input *gamelift.GetInstanceAccessInput) *GameliftGetInstanceAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.GetInstanceAccess", input)
	return &GameliftGetInstanceAccessFuture{Future: future}
}

func (a *GameLiftStub) ListAliases(ctx workflow.Context, input *gamelift.ListAliasesInput) (*gamelift.ListAliasesOutput, error) {
	var output gamelift.ListAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.ListAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) ListAliasesAsync(ctx workflow.Context, input *gamelift.ListAliasesInput) *GameliftListAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.ListAliases", input)
	return &GameliftListAliasesFuture{Future: future}
}

func (a *GameLiftStub) ListBuilds(ctx workflow.Context, input *gamelift.ListBuildsInput) (*gamelift.ListBuildsOutput, error) {
	var output gamelift.ListBuildsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.ListBuilds", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) ListBuildsAsync(ctx workflow.Context, input *gamelift.ListBuildsInput) *GameliftListBuildsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.ListBuilds", input)
	return &GameliftListBuildsFuture{Future: future}
}

func (a *GameLiftStub) ListFleets(ctx workflow.Context, input *gamelift.ListFleetsInput) (*gamelift.ListFleetsOutput, error) {
	var output gamelift.ListFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.ListFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) ListFleetsAsync(ctx workflow.Context, input *gamelift.ListFleetsInput) *GameliftListFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.ListFleets", input)
	return &GameliftListFleetsFuture{Future: future}
}

func (a *GameLiftStub) ListGameServerGroups(ctx workflow.Context, input *gamelift.ListGameServerGroupsInput) (*gamelift.ListGameServerGroupsOutput, error) {
	var output gamelift.ListGameServerGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.ListGameServerGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) ListGameServerGroupsAsync(ctx workflow.Context, input *gamelift.ListGameServerGroupsInput) *GameliftListGameServerGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.ListGameServerGroups", input)
	return &GameliftListGameServerGroupsFuture{Future: future}
}

func (a *GameLiftStub) ListGameServers(ctx workflow.Context, input *gamelift.ListGameServersInput) (*gamelift.ListGameServersOutput, error) {
	var output gamelift.ListGameServersOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.ListGameServers", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) ListGameServersAsync(ctx workflow.Context, input *gamelift.ListGameServersInput) *GameliftListGameServersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.ListGameServers", input)
	return &GameliftListGameServersFuture{Future: future}
}

func (a *GameLiftStub) ListScripts(ctx workflow.Context, input *gamelift.ListScriptsInput) (*gamelift.ListScriptsOutput, error) {
	var output gamelift.ListScriptsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.ListScripts", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) ListScriptsAsync(ctx workflow.Context, input *gamelift.ListScriptsInput) *GameliftListScriptsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.ListScripts", input)
	return &GameliftListScriptsFuture{Future: future}
}

func (a *GameLiftStub) ListTagsForResource(ctx workflow.Context, input *gamelift.ListTagsForResourceInput) (*gamelift.ListTagsForResourceOutput, error) {
	var output gamelift.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) ListTagsForResourceAsync(ctx workflow.Context, input *gamelift.ListTagsForResourceInput) *GameliftListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.ListTagsForResource", input)
	return &GameliftListTagsForResourceFuture{Future: future}
}

func (a *GameLiftStub) PutScalingPolicy(ctx workflow.Context, input *gamelift.PutScalingPolicyInput) (*gamelift.PutScalingPolicyOutput, error) {
	var output gamelift.PutScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.PutScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) PutScalingPolicyAsync(ctx workflow.Context, input *gamelift.PutScalingPolicyInput) *GameliftPutScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.PutScalingPolicy", input)
	return &GameliftPutScalingPolicyFuture{Future: future}
}

func (a *GameLiftStub) RegisterGameServer(ctx workflow.Context, input *gamelift.RegisterGameServerInput) (*gamelift.RegisterGameServerOutput, error) {
	var output gamelift.RegisterGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.RegisterGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) RegisterGameServerAsync(ctx workflow.Context, input *gamelift.RegisterGameServerInput) *GameliftRegisterGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.RegisterGameServer", input)
	return &GameliftRegisterGameServerFuture{Future: future}
}

func (a *GameLiftStub) RequestUploadCredentials(ctx workflow.Context, input *gamelift.RequestUploadCredentialsInput) (*gamelift.RequestUploadCredentialsOutput, error) {
	var output gamelift.RequestUploadCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.RequestUploadCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) RequestUploadCredentialsAsync(ctx workflow.Context, input *gamelift.RequestUploadCredentialsInput) *GameliftRequestUploadCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.RequestUploadCredentials", input)
	return &GameliftRequestUploadCredentialsFuture{Future: future}
}

func (a *GameLiftStub) ResolveAlias(ctx workflow.Context, input *gamelift.ResolveAliasInput) (*gamelift.ResolveAliasOutput, error) {
	var output gamelift.ResolveAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.ResolveAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) ResolveAliasAsync(ctx workflow.Context, input *gamelift.ResolveAliasInput) *GameliftResolveAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.ResolveAlias", input)
	return &GameliftResolveAliasFuture{Future: future}
}

func (a *GameLiftStub) ResumeGameServerGroup(ctx workflow.Context, input *gamelift.ResumeGameServerGroupInput) (*gamelift.ResumeGameServerGroupOutput, error) {
	var output gamelift.ResumeGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.ResumeGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) ResumeGameServerGroupAsync(ctx workflow.Context, input *gamelift.ResumeGameServerGroupInput) *GameliftResumeGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.ResumeGameServerGroup", input)
	return &GameliftResumeGameServerGroupFuture{Future: future}
}

func (a *GameLiftStub) SearchGameSessions(ctx workflow.Context, input *gamelift.SearchGameSessionsInput) (*gamelift.SearchGameSessionsOutput, error) {
	var output gamelift.SearchGameSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.SearchGameSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) SearchGameSessionsAsync(ctx workflow.Context, input *gamelift.SearchGameSessionsInput) *GameliftSearchGameSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.SearchGameSessions", input)
	return &GameliftSearchGameSessionsFuture{Future: future}
}

func (a *GameLiftStub) StartFleetActions(ctx workflow.Context, input *gamelift.StartFleetActionsInput) (*gamelift.StartFleetActionsOutput, error) {
	var output gamelift.StartFleetActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.StartFleetActions", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) StartFleetActionsAsync(ctx workflow.Context, input *gamelift.StartFleetActionsInput) *GameliftStartFleetActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.StartFleetActions", input)
	return &GameliftStartFleetActionsFuture{Future: future}
}

func (a *GameLiftStub) StartGameSessionPlacement(ctx workflow.Context, input *gamelift.StartGameSessionPlacementInput) (*gamelift.StartGameSessionPlacementOutput, error) {
	var output gamelift.StartGameSessionPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.StartGameSessionPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) StartGameSessionPlacementAsync(ctx workflow.Context, input *gamelift.StartGameSessionPlacementInput) *GameliftStartGameSessionPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.StartGameSessionPlacement", input)
	return &GameliftStartGameSessionPlacementFuture{Future: future}
}

func (a *GameLiftStub) StartMatchBackfill(ctx workflow.Context, input *gamelift.StartMatchBackfillInput) (*gamelift.StartMatchBackfillOutput, error) {
	var output gamelift.StartMatchBackfillOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.StartMatchBackfill", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) StartMatchBackfillAsync(ctx workflow.Context, input *gamelift.StartMatchBackfillInput) *GameliftStartMatchBackfillFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.StartMatchBackfill", input)
	return &GameliftStartMatchBackfillFuture{Future: future}
}

func (a *GameLiftStub) StartMatchmaking(ctx workflow.Context, input *gamelift.StartMatchmakingInput) (*gamelift.StartMatchmakingOutput, error) {
	var output gamelift.StartMatchmakingOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.StartMatchmaking", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) StartMatchmakingAsync(ctx workflow.Context, input *gamelift.StartMatchmakingInput) *GameliftStartMatchmakingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.StartMatchmaking", input)
	return &GameliftStartMatchmakingFuture{Future: future}
}

func (a *GameLiftStub) StopFleetActions(ctx workflow.Context, input *gamelift.StopFleetActionsInput) (*gamelift.StopFleetActionsOutput, error) {
	var output gamelift.StopFleetActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.StopFleetActions", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) StopFleetActionsAsync(ctx workflow.Context, input *gamelift.StopFleetActionsInput) *GameliftStopFleetActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.StopFleetActions", input)
	return &GameliftStopFleetActionsFuture{Future: future}
}

func (a *GameLiftStub) StopGameSessionPlacement(ctx workflow.Context, input *gamelift.StopGameSessionPlacementInput) (*gamelift.StopGameSessionPlacementOutput, error) {
	var output gamelift.StopGameSessionPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.StopGameSessionPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) StopGameSessionPlacementAsync(ctx workflow.Context, input *gamelift.StopGameSessionPlacementInput) *GameliftStopGameSessionPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.StopGameSessionPlacement", input)
	return &GameliftStopGameSessionPlacementFuture{Future: future}
}

func (a *GameLiftStub) StopMatchmaking(ctx workflow.Context, input *gamelift.StopMatchmakingInput) (*gamelift.StopMatchmakingOutput, error) {
	var output gamelift.StopMatchmakingOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.StopMatchmaking", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) StopMatchmakingAsync(ctx workflow.Context, input *gamelift.StopMatchmakingInput) *GameliftStopMatchmakingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.StopMatchmaking", input)
	return &GameliftStopMatchmakingFuture{Future: future}
}

func (a *GameLiftStub) SuspendGameServerGroup(ctx workflow.Context, input *gamelift.SuspendGameServerGroupInput) (*gamelift.SuspendGameServerGroupOutput, error) {
	var output gamelift.SuspendGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.SuspendGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) SuspendGameServerGroupAsync(ctx workflow.Context, input *gamelift.SuspendGameServerGroupInput) *GameliftSuspendGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.SuspendGameServerGroup", input)
	return &GameliftSuspendGameServerGroupFuture{Future: future}
}

func (a *GameLiftStub) TagResource(ctx workflow.Context, input *gamelift.TagResourceInput) (*gamelift.TagResourceOutput, error) {
	var output gamelift.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) TagResourceAsync(ctx workflow.Context, input *gamelift.TagResourceInput) *GameliftTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.TagResource", input)
	return &GameliftTagResourceFuture{Future: future}
}

func (a *GameLiftStub) UntagResource(ctx workflow.Context, input *gamelift.UntagResourceInput) (*gamelift.UntagResourceOutput, error) {
	var output gamelift.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UntagResourceAsync(ctx workflow.Context, input *gamelift.UntagResourceInput) *GameliftUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UntagResource", input)
	return &GameliftUntagResourceFuture{Future: future}
}

func (a *GameLiftStub) UpdateAlias(ctx workflow.Context, input *gamelift.UpdateAliasInput) (*gamelift.UpdateAliasOutput, error) {
	var output gamelift.UpdateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UpdateAliasAsync(ctx workflow.Context, input *gamelift.UpdateAliasInput) *GameliftUpdateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateAlias", input)
	return &GameliftUpdateAliasFuture{Future: future}
}

func (a *GameLiftStub) UpdateBuild(ctx workflow.Context, input *gamelift.UpdateBuildInput) (*gamelift.UpdateBuildOutput, error) {
	var output gamelift.UpdateBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UpdateBuildAsync(ctx workflow.Context, input *gamelift.UpdateBuildInput) *GameliftUpdateBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateBuild", input)
	return &GameliftUpdateBuildFuture{Future: future}
}

func (a *GameLiftStub) UpdateFleetAttributes(ctx workflow.Context, input *gamelift.UpdateFleetAttributesInput) (*gamelift.UpdateFleetAttributesOutput, error) {
	var output gamelift.UpdateFleetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateFleetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UpdateFleetAttributesAsync(ctx workflow.Context, input *gamelift.UpdateFleetAttributesInput) *GameliftUpdateFleetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateFleetAttributes", input)
	return &GameliftUpdateFleetAttributesFuture{Future: future}
}

func (a *GameLiftStub) UpdateFleetCapacity(ctx workflow.Context, input *gamelift.UpdateFleetCapacityInput) (*gamelift.UpdateFleetCapacityOutput, error) {
	var output gamelift.UpdateFleetCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateFleetCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UpdateFleetCapacityAsync(ctx workflow.Context, input *gamelift.UpdateFleetCapacityInput) *GameliftUpdateFleetCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateFleetCapacity", input)
	return &GameliftUpdateFleetCapacityFuture{Future: future}
}

func (a *GameLiftStub) UpdateFleetPortSettings(ctx workflow.Context, input *gamelift.UpdateFleetPortSettingsInput) (*gamelift.UpdateFleetPortSettingsOutput, error) {
	var output gamelift.UpdateFleetPortSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateFleetPortSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UpdateFleetPortSettingsAsync(ctx workflow.Context, input *gamelift.UpdateFleetPortSettingsInput) *GameliftUpdateFleetPortSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateFleetPortSettings", input)
	return &GameliftUpdateFleetPortSettingsFuture{Future: future}
}

func (a *GameLiftStub) UpdateGameServer(ctx workflow.Context, input *gamelift.UpdateGameServerInput) (*gamelift.UpdateGameServerOutput, error) {
	var output gamelift.UpdateGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UpdateGameServerAsync(ctx workflow.Context, input *gamelift.UpdateGameServerInput) *GameliftUpdateGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateGameServer", input)
	return &GameliftUpdateGameServerFuture{Future: future}
}

func (a *GameLiftStub) UpdateGameServerGroup(ctx workflow.Context, input *gamelift.UpdateGameServerGroupInput) (*gamelift.UpdateGameServerGroupOutput, error) {
	var output gamelift.UpdateGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UpdateGameServerGroupAsync(ctx workflow.Context, input *gamelift.UpdateGameServerGroupInput) *GameliftUpdateGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateGameServerGroup", input)
	return &GameliftUpdateGameServerGroupFuture{Future: future}
}

func (a *GameLiftStub) UpdateGameSession(ctx workflow.Context, input *gamelift.UpdateGameSessionInput) (*gamelift.UpdateGameSessionOutput, error) {
	var output gamelift.UpdateGameSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateGameSession", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UpdateGameSessionAsync(ctx workflow.Context, input *gamelift.UpdateGameSessionInput) *GameliftUpdateGameSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateGameSession", input)
	return &GameliftUpdateGameSessionFuture{Future: future}
}

func (a *GameLiftStub) UpdateGameSessionQueue(ctx workflow.Context, input *gamelift.UpdateGameSessionQueueInput) (*gamelift.UpdateGameSessionQueueOutput, error) {
	var output gamelift.UpdateGameSessionQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateGameSessionQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UpdateGameSessionQueueAsync(ctx workflow.Context, input *gamelift.UpdateGameSessionQueueInput) *GameliftUpdateGameSessionQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateGameSessionQueue", input)
	return &GameliftUpdateGameSessionQueueFuture{Future: future}
}

func (a *GameLiftStub) UpdateMatchmakingConfiguration(ctx workflow.Context, input *gamelift.UpdateMatchmakingConfigurationInput) (*gamelift.UpdateMatchmakingConfigurationOutput, error) {
	var output gamelift.UpdateMatchmakingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateMatchmakingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UpdateMatchmakingConfigurationAsync(ctx workflow.Context, input *gamelift.UpdateMatchmakingConfigurationInput) *GameliftUpdateMatchmakingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateMatchmakingConfiguration", input)
	return &GameliftUpdateMatchmakingConfigurationFuture{Future: future}
}

func (a *GameLiftStub) UpdateRuntimeConfiguration(ctx workflow.Context, input *gamelift.UpdateRuntimeConfigurationInput) (*gamelift.UpdateRuntimeConfigurationOutput, error) {
	var output gamelift.UpdateRuntimeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateRuntimeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UpdateRuntimeConfigurationAsync(ctx workflow.Context, input *gamelift.UpdateRuntimeConfigurationInput) *GameliftUpdateRuntimeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateRuntimeConfiguration", input)
	return &GameliftUpdateRuntimeConfigurationFuture{Future: future}
}

func (a *GameLiftStub) UpdateScript(ctx workflow.Context, input *gamelift.UpdateScriptInput) (*gamelift.UpdateScriptOutput, error) {
	var output gamelift.UpdateScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateScript", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) UpdateScriptAsync(ctx workflow.Context, input *gamelift.UpdateScriptInput) *GameliftUpdateScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.UpdateScript", input)
	return &GameliftUpdateScriptFuture{Future: future}
}

func (a *GameLiftStub) ValidateMatchmakingRuleSet(ctx workflow.Context, input *gamelift.ValidateMatchmakingRuleSetInput) (*gamelift.ValidateMatchmakingRuleSetOutput, error) {
	var output gamelift.ValidateMatchmakingRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.gamelift.ValidateMatchmakingRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *GameLiftStub) ValidateMatchmakingRuleSetAsync(ctx workflow.Context, input *gamelift.ValidateMatchmakingRuleSetInput) *GameliftValidateMatchmakingRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.gamelift.ValidateMatchmakingRuleSet", input)
	return &GameliftValidateMatchmakingRuleSetFuture{Future: future}
}
