// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/codecommit"
	"go.temporal.io/sdk/workflow"
)

type CodeCommitClient interface {
	AssociateApprovalRuleTemplateWithRepository(ctx workflow.Context, input *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput) (*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, error)
	AssociateApprovalRuleTemplateWithRepositoryAsync(ctx workflow.Context, input *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput) *CodeCommitAssociateApprovalRuleTemplateWithRepositoryFuture

	BatchAssociateApprovalRuleTemplateWithRepositories(ctx workflow.Context, input *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput) (*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, error)
	BatchAssociateApprovalRuleTemplateWithRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput) *CodeCommitBatchAssociateApprovalRuleTemplateWithRepositoriesFuture

	BatchDescribeMergeConflicts(ctx workflow.Context, input *codecommit.BatchDescribeMergeConflictsInput) (*codecommit.BatchDescribeMergeConflictsOutput, error)
	BatchDescribeMergeConflictsAsync(ctx workflow.Context, input *codecommit.BatchDescribeMergeConflictsInput) *CodeCommitBatchDescribeMergeConflictsFuture

	BatchDisassociateApprovalRuleTemplateFromRepositories(ctx workflow.Context, input *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) (*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, error)
	BatchDisassociateApprovalRuleTemplateFromRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) *CodeCommitBatchDisassociateApprovalRuleTemplateFromRepositoriesFuture

	BatchGetCommits(ctx workflow.Context, input *codecommit.BatchGetCommitsInput) (*codecommit.BatchGetCommitsOutput, error)
	BatchGetCommitsAsync(ctx workflow.Context, input *codecommit.BatchGetCommitsInput) *CodeCommitBatchGetCommitsFuture

	BatchGetRepositories(ctx workflow.Context, input *codecommit.BatchGetRepositoriesInput) (*codecommit.BatchGetRepositoriesOutput, error)
	BatchGetRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchGetRepositoriesInput) *CodeCommitBatchGetRepositoriesFuture

	CreateApprovalRuleTemplate(ctx workflow.Context, input *codecommit.CreateApprovalRuleTemplateInput) (*codecommit.CreateApprovalRuleTemplateOutput, error)
	CreateApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.CreateApprovalRuleTemplateInput) *CodeCommitCreateApprovalRuleTemplateFuture

	CreateBranch(ctx workflow.Context, input *codecommit.CreateBranchInput) (*codecommit.CreateBranchOutput, error)
	CreateBranchAsync(ctx workflow.Context, input *codecommit.CreateBranchInput) *CodeCommitCreateBranchFuture

	CreateCommit(ctx workflow.Context, input *codecommit.CreateCommitInput) (*codecommit.CreateCommitOutput, error)
	CreateCommitAsync(ctx workflow.Context, input *codecommit.CreateCommitInput) *CodeCommitCreateCommitFuture

	CreatePullRequestApprovalRule(ctx workflow.Context, input *codecommit.CreatePullRequestApprovalRuleInput) (*codecommit.CreatePullRequestApprovalRuleOutput, error)
	CreatePullRequestApprovalRuleAsync(ctx workflow.Context, input *codecommit.CreatePullRequestApprovalRuleInput) *CodeCommitCreatePullRequestApprovalRuleFuture

	CreateRepository(ctx workflow.Context, input *codecommit.CreateRepositoryInput) (*codecommit.CreateRepositoryOutput, error)
	CreateRepositoryAsync(ctx workflow.Context, input *codecommit.CreateRepositoryInput) *CodeCommitCreateRepositoryFuture

	CreateUnreferencedMergeCommit(ctx workflow.Context, input *codecommit.CreateUnreferencedMergeCommitInput) (*codecommit.CreateUnreferencedMergeCommitOutput, error)
	CreateUnreferencedMergeCommitAsync(ctx workflow.Context, input *codecommit.CreateUnreferencedMergeCommitInput) *CodeCommitCreateUnreferencedMergeCommitFuture

	DeleteApprovalRuleTemplate(ctx workflow.Context, input *codecommit.DeleteApprovalRuleTemplateInput) (*codecommit.DeleteApprovalRuleTemplateOutput, error)
	DeleteApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.DeleteApprovalRuleTemplateInput) *CodeCommitDeleteApprovalRuleTemplateFuture

	DeleteBranch(ctx workflow.Context, input *codecommit.DeleteBranchInput) (*codecommit.DeleteBranchOutput, error)
	DeleteBranchAsync(ctx workflow.Context, input *codecommit.DeleteBranchInput) *CodeCommitDeleteBranchFuture

	DeleteCommentContent(ctx workflow.Context, input *codecommit.DeleteCommentContentInput) (*codecommit.DeleteCommentContentOutput, error)
	DeleteCommentContentAsync(ctx workflow.Context, input *codecommit.DeleteCommentContentInput) *CodeCommitDeleteCommentContentFuture

	DeleteFile(ctx workflow.Context, input *codecommit.DeleteFileInput) (*codecommit.DeleteFileOutput, error)
	DeleteFileAsync(ctx workflow.Context, input *codecommit.DeleteFileInput) *CodeCommitDeleteFileFuture

	DeletePullRequestApprovalRule(ctx workflow.Context, input *codecommit.DeletePullRequestApprovalRuleInput) (*codecommit.DeletePullRequestApprovalRuleOutput, error)
	DeletePullRequestApprovalRuleAsync(ctx workflow.Context, input *codecommit.DeletePullRequestApprovalRuleInput) *CodeCommitDeletePullRequestApprovalRuleFuture

	DeleteRepository(ctx workflow.Context, input *codecommit.DeleteRepositoryInput) (*codecommit.DeleteRepositoryOutput, error)
	DeleteRepositoryAsync(ctx workflow.Context, input *codecommit.DeleteRepositoryInput) *CodeCommitDeleteRepositoryFuture

	DescribeMergeConflicts(ctx workflow.Context, input *codecommit.DescribeMergeConflictsInput) (*codecommit.DescribeMergeConflictsOutput, error)
	DescribeMergeConflictsAsync(ctx workflow.Context, input *codecommit.DescribeMergeConflictsInput) *CodeCommitDescribeMergeConflictsFuture

	DescribePullRequestEvents(ctx workflow.Context, input *codecommit.DescribePullRequestEventsInput) (*codecommit.DescribePullRequestEventsOutput, error)
	DescribePullRequestEventsAsync(ctx workflow.Context, input *codecommit.DescribePullRequestEventsInput) *CodeCommitDescribePullRequestEventsFuture

	DisassociateApprovalRuleTemplateFromRepository(ctx workflow.Context, input *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput) (*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, error)
	DisassociateApprovalRuleTemplateFromRepositoryAsync(ctx workflow.Context, input *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput) *CodeCommitDisassociateApprovalRuleTemplateFromRepositoryFuture

	EvaluatePullRequestApprovalRules(ctx workflow.Context, input *codecommit.EvaluatePullRequestApprovalRulesInput) (*codecommit.EvaluatePullRequestApprovalRulesOutput, error)
	EvaluatePullRequestApprovalRulesAsync(ctx workflow.Context, input *codecommit.EvaluatePullRequestApprovalRulesInput) *CodeCommitEvaluatePullRequestApprovalRulesFuture

	GetApprovalRuleTemplate(ctx workflow.Context, input *codecommit.GetApprovalRuleTemplateInput) (*codecommit.GetApprovalRuleTemplateOutput, error)
	GetApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.GetApprovalRuleTemplateInput) *CodeCommitGetApprovalRuleTemplateFuture

	GetBlob(ctx workflow.Context, input *codecommit.GetBlobInput) (*codecommit.GetBlobOutput, error)
	GetBlobAsync(ctx workflow.Context, input *codecommit.GetBlobInput) *CodeCommitGetBlobFuture

	GetBranch(ctx workflow.Context, input *codecommit.GetBranchInput) (*codecommit.GetBranchOutput, error)
	GetBranchAsync(ctx workflow.Context, input *codecommit.GetBranchInput) *CodeCommitGetBranchFuture

	GetComment(ctx workflow.Context, input *codecommit.GetCommentInput) (*codecommit.GetCommentOutput, error)
	GetCommentAsync(ctx workflow.Context, input *codecommit.GetCommentInput) *CodeCommitGetCommentFuture

	GetCommentReactions(ctx workflow.Context, input *codecommit.GetCommentReactionsInput) (*codecommit.GetCommentReactionsOutput, error)
	GetCommentReactionsAsync(ctx workflow.Context, input *codecommit.GetCommentReactionsInput) *CodeCommitGetCommentReactionsFuture

	GetCommentsForComparedCommit(ctx workflow.Context, input *codecommit.GetCommentsForComparedCommitInput) (*codecommit.GetCommentsForComparedCommitOutput, error)
	GetCommentsForComparedCommitAsync(ctx workflow.Context, input *codecommit.GetCommentsForComparedCommitInput) *CodeCommitGetCommentsForComparedCommitFuture

	GetCommit(ctx workflow.Context, input *codecommit.GetCommitInput) (*codecommit.GetCommitOutput, error)
	GetCommitAsync(ctx workflow.Context, input *codecommit.GetCommitInput) *CodeCommitGetCommitFuture

	GetDifferences(ctx workflow.Context, input *codecommit.GetDifferencesInput) (*codecommit.GetDifferencesOutput, error)
	GetDifferencesAsync(ctx workflow.Context, input *codecommit.GetDifferencesInput) *CodeCommitGetDifferencesFuture

	GetFile(ctx workflow.Context, input *codecommit.GetFileInput) (*codecommit.GetFileOutput, error)
	GetFileAsync(ctx workflow.Context, input *codecommit.GetFileInput) *CodeCommitGetFileFuture

	GetFolder(ctx workflow.Context, input *codecommit.GetFolderInput) (*codecommit.GetFolderOutput, error)
	GetFolderAsync(ctx workflow.Context, input *codecommit.GetFolderInput) *CodeCommitGetFolderFuture

	GetMergeCommit(ctx workflow.Context, input *codecommit.GetMergeCommitInput) (*codecommit.GetMergeCommitOutput, error)
	GetMergeCommitAsync(ctx workflow.Context, input *codecommit.GetMergeCommitInput) *CodeCommitGetMergeCommitFuture

	GetMergeConflicts(ctx workflow.Context, input *codecommit.GetMergeConflictsInput) (*codecommit.GetMergeConflictsOutput, error)
	GetMergeConflictsAsync(ctx workflow.Context, input *codecommit.GetMergeConflictsInput) *CodeCommitGetMergeConflictsFuture

	GetMergeOptions(ctx workflow.Context, input *codecommit.GetMergeOptionsInput) (*codecommit.GetMergeOptionsOutput, error)
	GetMergeOptionsAsync(ctx workflow.Context, input *codecommit.GetMergeOptionsInput) *CodeCommitGetMergeOptionsFuture

	GetPullRequestApprovalStates(ctx workflow.Context, input *codecommit.GetPullRequestApprovalStatesInput) (*codecommit.GetPullRequestApprovalStatesOutput, error)
	GetPullRequestApprovalStatesAsync(ctx workflow.Context, input *codecommit.GetPullRequestApprovalStatesInput) *CodeCommitGetPullRequestApprovalStatesFuture

	GetPullRequestOverrideState(ctx workflow.Context, input *codecommit.GetPullRequestOverrideStateInput) (*codecommit.GetPullRequestOverrideStateOutput, error)
	GetPullRequestOverrideStateAsync(ctx workflow.Context, input *codecommit.GetPullRequestOverrideStateInput) *CodeCommitGetPullRequestOverrideStateFuture

	GetRepository(ctx workflow.Context, input *codecommit.GetRepositoryInput) (*codecommit.GetRepositoryOutput, error)
	GetRepositoryAsync(ctx workflow.Context, input *codecommit.GetRepositoryInput) *CodeCommitGetRepositoryFuture

	GetRepositoryTriggers(ctx workflow.Context, input *codecommit.GetRepositoryTriggersInput) (*codecommit.GetRepositoryTriggersOutput, error)
	GetRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.GetRepositoryTriggersInput) *CodeCommitGetRepositoryTriggersFuture

	ListApprovalRuleTemplates(ctx workflow.Context, input *codecommit.ListApprovalRuleTemplatesInput) (*codecommit.ListApprovalRuleTemplatesOutput, error)
	ListApprovalRuleTemplatesAsync(ctx workflow.Context, input *codecommit.ListApprovalRuleTemplatesInput) *CodeCommitListApprovalRuleTemplatesFuture

	ListAssociatedApprovalRuleTemplatesForRepository(ctx workflow.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput) (*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, error)
	ListAssociatedApprovalRuleTemplatesForRepositoryAsync(ctx workflow.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput) *CodeCommitListAssociatedApprovalRuleTemplatesForRepositoryFuture

	ListBranches(ctx workflow.Context, input *codecommit.ListBranchesInput) (*codecommit.ListBranchesOutput, error)
	ListBranchesAsync(ctx workflow.Context, input *codecommit.ListBranchesInput) *CodeCommitListBranchesFuture

	ListPullRequests(ctx workflow.Context, input *codecommit.ListPullRequestsInput) (*codecommit.ListPullRequestsOutput, error)
	ListPullRequestsAsync(ctx workflow.Context, input *codecommit.ListPullRequestsInput) *CodeCommitListPullRequestsFuture

	ListRepositories(ctx workflow.Context, input *codecommit.ListRepositoriesInput) (*codecommit.ListRepositoriesOutput, error)
	ListRepositoriesAsync(ctx workflow.Context, input *codecommit.ListRepositoriesInput) *CodeCommitListRepositoriesFuture

	ListRepositoriesForApprovalRuleTemplate(ctx workflow.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput) (*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, error)
	ListRepositoriesForApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput) *CodeCommitListRepositoriesForApprovalRuleTemplateFuture

	ListTagsForResource(ctx workflow.Context, input *codecommit.ListTagsForResourceInput) (*codecommit.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *codecommit.ListTagsForResourceInput) *CodeCommitListTagsForResourceFuture

	MergeBranchesByFastForward(ctx workflow.Context, input *codecommit.MergeBranchesByFastForwardInput) (*codecommit.MergeBranchesByFastForwardOutput, error)
	MergeBranchesByFastForwardAsync(ctx workflow.Context, input *codecommit.MergeBranchesByFastForwardInput) *CodeCommitMergeBranchesByFastForwardFuture

	MergeBranchesBySquash(ctx workflow.Context, input *codecommit.MergeBranchesBySquashInput) (*codecommit.MergeBranchesBySquashOutput, error)
	MergeBranchesBySquashAsync(ctx workflow.Context, input *codecommit.MergeBranchesBySquashInput) *CodeCommitMergeBranchesBySquashFuture

	MergeBranchesByThreeWay(ctx workflow.Context, input *codecommit.MergeBranchesByThreeWayInput) (*codecommit.MergeBranchesByThreeWayOutput, error)
	MergeBranchesByThreeWayAsync(ctx workflow.Context, input *codecommit.MergeBranchesByThreeWayInput) *CodeCommitMergeBranchesByThreeWayFuture

	MergePullRequestByFastForward(ctx workflow.Context, input *codecommit.MergePullRequestByFastForwardInput) (*codecommit.MergePullRequestByFastForwardOutput, error)
	MergePullRequestByFastForwardAsync(ctx workflow.Context, input *codecommit.MergePullRequestByFastForwardInput) *CodeCommitMergePullRequestByFastForwardFuture

	MergePullRequestBySquash(ctx workflow.Context, input *codecommit.MergePullRequestBySquashInput) (*codecommit.MergePullRequestBySquashOutput, error)
	MergePullRequestBySquashAsync(ctx workflow.Context, input *codecommit.MergePullRequestBySquashInput) *CodeCommitMergePullRequestBySquashFuture

	MergePullRequestByThreeWay(ctx workflow.Context, input *codecommit.MergePullRequestByThreeWayInput) (*codecommit.MergePullRequestByThreeWayOutput, error)
	MergePullRequestByThreeWayAsync(ctx workflow.Context, input *codecommit.MergePullRequestByThreeWayInput) *CodeCommitMergePullRequestByThreeWayFuture

	OverridePullRequestApprovalRules(ctx workflow.Context, input *codecommit.OverridePullRequestApprovalRulesInput) (*codecommit.OverridePullRequestApprovalRulesOutput, error)
	OverridePullRequestApprovalRulesAsync(ctx workflow.Context, input *codecommit.OverridePullRequestApprovalRulesInput) *CodeCommitOverridePullRequestApprovalRulesFuture

	PostCommentForComparedCommit(ctx workflow.Context, input *codecommit.PostCommentForComparedCommitInput) (*codecommit.PostCommentForComparedCommitOutput, error)
	PostCommentForComparedCommitAsync(ctx workflow.Context, input *codecommit.PostCommentForComparedCommitInput) *CodeCommitPostCommentForComparedCommitFuture

	PostCommentReply(ctx workflow.Context, input *codecommit.PostCommentReplyInput) (*codecommit.PostCommentReplyOutput, error)
	PostCommentReplyAsync(ctx workflow.Context, input *codecommit.PostCommentReplyInput) *CodeCommitPostCommentReplyFuture

	PutCommentReaction(ctx workflow.Context, input *codecommit.PutCommentReactionInput) (*codecommit.PutCommentReactionOutput, error)
	PutCommentReactionAsync(ctx workflow.Context, input *codecommit.PutCommentReactionInput) *CodeCommitPutCommentReactionFuture

	PutFile(ctx workflow.Context, input *codecommit.PutFileInput) (*codecommit.PutFileOutput, error)
	PutFileAsync(ctx workflow.Context, input *codecommit.PutFileInput) *CodeCommitPutFileFuture

	PutRepositoryTriggers(ctx workflow.Context, input *codecommit.PutRepositoryTriggersInput) (*codecommit.PutRepositoryTriggersOutput, error)
	PutRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.PutRepositoryTriggersInput) *CodeCommitPutRepositoryTriggersFuture

	TagResource(ctx workflow.Context, input *codecommit.TagResourceInput) (*codecommit.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *codecommit.TagResourceInput) *CodeCommitTagResourceFuture

	TestRepositoryTriggers(ctx workflow.Context, input *codecommit.TestRepositoryTriggersInput) (*codecommit.TestRepositoryTriggersOutput, error)
	TestRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.TestRepositoryTriggersInput) *CodeCommitTestRepositoryTriggersFuture

	UntagResource(ctx workflow.Context, input *codecommit.UntagResourceInput) (*codecommit.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *codecommit.UntagResourceInput) *CodeCommitUntagResourceFuture

	UpdateApprovalRuleTemplateContent(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateContentInput) (*codecommit.UpdateApprovalRuleTemplateContentOutput, error)
	UpdateApprovalRuleTemplateContentAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateContentInput) *CodeCommitUpdateApprovalRuleTemplateContentFuture

	UpdateApprovalRuleTemplateDescription(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateDescriptionInput) (*codecommit.UpdateApprovalRuleTemplateDescriptionOutput, error)
	UpdateApprovalRuleTemplateDescriptionAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateDescriptionInput) *CodeCommitUpdateApprovalRuleTemplateDescriptionFuture

	UpdateApprovalRuleTemplateName(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateNameInput) (*codecommit.UpdateApprovalRuleTemplateNameOutput, error)
	UpdateApprovalRuleTemplateNameAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateNameInput) *CodeCommitUpdateApprovalRuleTemplateNameFuture

	UpdateComment(ctx workflow.Context, input *codecommit.UpdateCommentInput) (*codecommit.UpdateCommentOutput, error)
	UpdateCommentAsync(ctx workflow.Context, input *codecommit.UpdateCommentInput) *CodeCommitUpdateCommentFuture

	UpdateDefaultBranch(ctx workflow.Context, input *codecommit.UpdateDefaultBranchInput) (*codecommit.UpdateDefaultBranchOutput, error)
	UpdateDefaultBranchAsync(ctx workflow.Context, input *codecommit.UpdateDefaultBranchInput) *CodeCommitUpdateDefaultBranchFuture

	UpdatePullRequestApprovalRuleContent(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalRuleContentInput) (*codecommit.UpdatePullRequestApprovalRuleContentOutput, error)
	UpdatePullRequestApprovalRuleContentAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalRuleContentInput) *CodeCommitUpdatePullRequestApprovalRuleContentFuture

	UpdatePullRequestApprovalState(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalStateInput) (*codecommit.UpdatePullRequestApprovalStateOutput, error)
	UpdatePullRequestApprovalStateAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalStateInput) *CodeCommitUpdatePullRequestApprovalStateFuture

	UpdatePullRequestDescription(ctx workflow.Context, input *codecommit.UpdatePullRequestDescriptionInput) (*codecommit.UpdatePullRequestDescriptionOutput, error)
	UpdatePullRequestDescriptionAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestDescriptionInput) *CodeCommitUpdatePullRequestDescriptionFuture

	UpdatePullRequestStatus(ctx workflow.Context, input *codecommit.UpdatePullRequestStatusInput) (*codecommit.UpdatePullRequestStatusOutput, error)
	UpdatePullRequestStatusAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestStatusInput) *CodeCommitUpdatePullRequestStatusFuture

	UpdatePullRequestTitle(ctx workflow.Context, input *codecommit.UpdatePullRequestTitleInput) (*codecommit.UpdatePullRequestTitleOutput, error)
	UpdatePullRequestTitleAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestTitleInput) *CodeCommitUpdatePullRequestTitleFuture

	UpdateRepositoryDescription(ctx workflow.Context, input *codecommit.UpdateRepositoryDescriptionInput) (*codecommit.UpdateRepositoryDescriptionOutput, error)
	UpdateRepositoryDescriptionAsync(ctx workflow.Context, input *codecommit.UpdateRepositoryDescriptionInput) *CodeCommitUpdateRepositoryDescriptionFuture

	UpdateRepositoryName(ctx workflow.Context, input *codecommit.UpdateRepositoryNameInput) (*codecommit.UpdateRepositoryNameOutput, error)
	UpdateRepositoryNameAsync(ctx workflow.Context, input *codecommit.UpdateRepositoryNameInput) *CodeCommitUpdateRepositoryNameFuture
}

type CodeCommitStub struct{}

func NewCodeCommitStub() CodeCommitClient {
	return &CodeCommitStub{}
}

type CodeCommitAssociateApprovalRuleTemplateWithRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitAssociateApprovalRuleTemplateWithRepositoryFuture) Get(ctx workflow.Context) (*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, error) {
	var output codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitBatchAssociateApprovalRuleTemplateWithRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitBatchAssociateApprovalRuleTemplateWithRepositoriesFuture) Get(ctx workflow.Context) (*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, error) {
	var output codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitBatchDescribeMergeConflictsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitBatchDescribeMergeConflictsFuture) Get(ctx workflow.Context) (*codecommit.BatchDescribeMergeConflictsOutput, error) {
	var output codecommit.BatchDescribeMergeConflictsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitBatchDisassociateApprovalRuleTemplateFromRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitBatchDisassociateApprovalRuleTemplateFromRepositoriesFuture) Get(ctx workflow.Context) (*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, error) {
	var output codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitBatchGetCommitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitBatchGetCommitsFuture) Get(ctx workflow.Context) (*codecommit.BatchGetCommitsOutput, error) {
	var output codecommit.BatchGetCommitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitBatchGetRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitBatchGetRepositoriesFuture) Get(ctx workflow.Context) (*codecommit.BatchGetRepositoriesOutput, error) {
	var output codecommit.BatchGetRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitCreateApprovalRuleTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitCreateApprovalRuleTemplateFuture) Get(ctx workflow.Context) (*codecommit.CreateApprovalRuleTemplateOutput, error) {
	var output codecommit.CreateApprovalRuleTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitCreateBranchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitCreateBranchFuture) Get(ctx workflow.Context) (*codecommit.CreateBranchOutput, error) {
	var output codecommit.CreateBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitCreateCommitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitCreateCommitFuture) Get(ctx workflow.Context) (*codecommit.CreateCommitOutput, error) {
	var output codecommit.CreateCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitCreatePullRequestApprovalRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitCreatePullRequestApprovalRuleFuture) Get(ctx workflow.Context) (*codecommit.CreatePullRequestApprovalRuleOutput, error) {
	var output codecommit.CreatePullRequestApprovalRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitCreateRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitCreateRepositoryFuture) Get(ctx workflow.Context) (*codecommit.CreateRepositoryOutput, error) {
	var output codecommit.CreateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitCreateUnreferencedMergeCommitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitCreateUnreferencedMergeCommitFuture) Get(ctx workflow.Context) (*codecommit.CreateUnreferencedMergeCommitOutput, error) {
	var output codecommit.CreateUnreferencedMergeCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitDeleteApprovalRuleTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitDeleteApprovalRuleTemplateFuture) Get(ctx workflow.Context) (*codecommit.DeleteApprovalRuleTemplateOutput, error) {
	var output codecommit.DeleteApprovalRuleTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitDeleteBranchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitDeleteBranchFuture) Get(ctx workflow.Context) (*codecommit.DeleteBranchOutput, error) {
	var output codecommit.DeleteBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitDeleteCommentContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitDeleteCommentContentFuture) Get(ctx workflow.Context) (*codecommit.DeleteCommentContentOutput, error) {
	var output codecommit.DeleteCommentContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitDeleteFileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitDeleteFileFuture) Get(ctx workflow.Context) (*codecommit.DeleteFileOutput, error) {
	var output codecommit.DeleteFileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitDeletePullRequestApprovalRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitDeletePullRequestApprovalRuleFuture) Get(ctx workflow.Context) (*codecommit.DeletePullRequestApprovalRuleOutput, error) {
	var output codecommit.DeletePullRequestApprovalRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitDeleteRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitDeleteRepositoryFuture) Get(ctx workflow.Context) (*codecommit.DeleteRepositoryOutput, error) {
	var output codecommit.DeleteRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitDescribeMergeConflictsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitDescribeMergeConflictsFuture) Get(ctx workflow.Context) (*codecommit.DescribeMergeConflictsOutput, error) {
	var output codecommit.DescribeMergeConflictsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitDescribePullRequestEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitDescribePullRequestEventsFuture) Get(ctx workflow.Context) (*codecommit.DescribePullRequestEventsOutput, error) {
	var output codecommit.DescribePullRequestEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitDisassociateApprovalRuleTemplateFromRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitDisassociateApprovalRuleTemplateFromRepositoryFuture) Get(ctx workflow.Context) (*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, error) {
	var output codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitEvaluatePullRequestApprovalRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitEvaluatePullRequestApprovalRulesFuture) Get(ctx workflow.Context) (*codecommit.EvaluatePullRequestApprovalRulesOutput, error) {
	var output codecommit.EvaluatePullRequestApprovalRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetApprovalRuleTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetApprovalRuleTemplateFuture) Get(ctx workflow.Context) (*codecommit.GetApprovalRuleTemplateOutput, error) {
	var output codecommit.GetApprovalRuleTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetBlobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetBlobFuture) Get(ctx workflow.Context) (*codecommit.GetBlobOutput, error) {
	var output codecommit.GetBlobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetBranchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetBranchFuture) Get(ctx workflow.Context) (*codecommit.GetBranchOutput, error) {
	var output codecommit.GetBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetCommentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetCommentFuture) Get(ctx workflow.Context) (*codecommit.GetCommentOutput, error) {
	var output codecommit.GetCommentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetCommentReactionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetCommentReactionsFuture) Get(ctx workflow.Context) (*codecommit.GetCommentReactionsOutput, error) {
	var output codecommit.GetCommentReactionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetCommentsForComparedCommitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetCommentsForComparedCommitFuture) Get(ctx workflow.Context) (*codecommit.GetCommentsForComparedCommitOutput, error) {
	var output codecommit.GetCommentsForComparedCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetCommitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetCommitFuture) Get(ctx workflow.Context) (*codecommit.GetCommitOutput, error) {
	var output codecommit.GetCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetDifferencesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetDifferencesFuture) Get(ctx workflow.Context) (*codecommit.GetDifferencesOutput, error) {
	var output codecommit.GetDifferencesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetFileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetFileFuture) Get(ctx workflow.Context) (*codecommit.GetFileOutput, error) {
	var output codecommit.GetFileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetFolderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetFolderFuture) Get(ctx workflow.Context) (*codecommit.GetFolderOutput, error) {
	var output codecommit.GetFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetMergeCommitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetMergeCommitFuture) Get(ctx workflow.Context) (*codecommit.GetMergeCommitOutput, error) {
	var output codecommit.GetMergeCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetMergeConflictsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetMergeConflictsFuture) Get(ctx workflow.Context) (*codecommit.GetMergeConflictsOutput, error) {
	var output codecommit.GetMergeConflictsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetMergeOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetMergeOptionsFuture) Get(ctx workflow.Context) (*codecommit.GetMergeOptionsOutput, error) {
	var output codecommit.GetMergeOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetPullRequestApprovalStatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetPullRequestApprovalStatesFuture) Get(ctx workflow.Context) (*codecommit.GetPullRequestApprovalStatesOutput, error) {
	var output codecommit.GetPullRequestApprovalStatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetPullRequestOverrideStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetPullRequestOverrideStateFuture) Get(ctx workflow.Context) (*codecommit.GetPullRequestOverrideStateOutput, error) {
	var output codecommit.GetPullRequestOverrideStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetRepositoryFuture) Get(ctx workflow.Context) (*codecommit.GetRepositoryOutput, error) {
	var output codecommit.GetRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitGetRepositoryTriggersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitGetRepositoryTriggersFuture) Get(ctx workflow.Context) (*codecommit.GetRepositoryTriggersOutput, error) {
	var output codecommit.GetRepositoryTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitListApprovalRuleTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitListApprovalRuleTemplatesFuture) Get(ctx workflow.Context) (*codecommit.ListApprovalRuleTemplatesOutput, error) {
	var output codecommit.ListApprovalRuleTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitListAssociatedApprovalRuleTemplatesForRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitListAssociatedApprovalRuleTemplatesForRepositoryFuture) Get(ctx workflow.Context) (*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, error) {
	var output codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitListBranchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitListBranchesFuture) Get(ctx workflow.Context) (*codecommit.ListBranchesOutput, error) {
	var output codecommit.ListBranchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitListPullRequestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitListPullRequestsFuture) Get(ctx workflow.Context) (*codecommit.ListPullRequestsOutput, error) {
	var output codecommit.ListPullRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitListRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitListRepositoriesFuture) Get(ctx workflow.Context) (*codecommit.ListRepositoriesOutput, error) {
	var output codecommit.ListRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitListRepositoriesForApprovalRuleTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitListRepositoriesForApprovalRuleTemplateFuture) Get(ctx workflow.Context) (*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, error) {
	var output codecommit.ListRepositoriesForApprovalRuleTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitListTagsForResourceFuture) Get(ctx workflow.Context) (*codecommit.ListTagsForResourceOutput, error) {
	var output codecommit.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitMergeBranchesByFastForwardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitMergeBranchesByFastForwardFuture) Get(ctx workflow.Context) (*codecommit.MergeBranchesByFastForwardOutput, error) {
	var output codecommit.MergeBranchesByFastForwardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitMergeBranchesBySquashFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitMergeBranchesBySquashFuture) Get(ctx workflow.Context) (*codecommit.MergeBranchesBySquashOutput, error) {
	var output codecommit.MergeBranchesBySquashOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitMergeBranchesByThreeWayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitMergeBranchesByThreeWayFuture) Get(ctx workflow.Context) (*codecommit.MergeBranchesByThreeWayOutput, error) {
	var output codecommit.MergeBranchesByThreeWayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitMergePullRequestByFastForwardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitMergePullRequestByFastForwardFuture) Get(ctx workflow.Context) (*codecommit.MergePullRequestByFastForwardOutput, error) {
	var output codecommit.MergePullRequestByFastForwardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitMergePullRequestBySquashFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitMergePullRequestBySquashFuture) Get(ctx workflow.Context) (*codecommit.MergePullRequestBySquashOutput, error) {
	var output codecommit.MergePullRequestBySquashOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitMergePullRequestByThreeWayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitMergePullRequestByThreeWayFuture) Get(ctx workflow.Context) (*codecommit.MergePullRequestByThreeWayOutput, error) {
	var output codecommit.MergePullRequestByThreeWayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitOverridePullRequestApprovalRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitOverridePullRequestApprovalRulesFuture) Get(ctx workflow.Context) (*codecommit.OverridePullRequestApprovalRulesOutput, error) {
	var output codecommit.OverridePullRequestApprovalRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitPostCommentForComparedCommitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitPostCommentForComparedCommitFuture) Get(ctx workflow.Context) (*codecommit.PostCommentForComparedCommitOutput, error) {
	var output codecommit.PostCommentForComparedCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitPostCommentReplyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitPostCommentReplyFuture) Get(ctx workflow.Context) (*codecommit.PostCommentReplyOutput, error) {
	var output codecommit.PostCommentReplyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitPutCommentReactionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitPutCommentReactionFuture) Get(ctx workflow.Context) (*codecommit.PutCommentReactionOutput, error) {
	var output codecommit.PutCommentReactionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitPutFileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitPutFileFuture) Get(ctx workflow.Context) (*codecommit.PutFileOutput, error) {
	var output codecommit.PutFileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitPutRepositoryTriggersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitPutRepositoryTriggersFuture) Get(ctx workflow.Context) (*codecommit.PutRepositoryTriggersOutput, error) {
	var output codecommit.PutRepositoryTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitTagResourceFuture) Get(ctx workflow.Context) (*codecommit.TagResourceOutput, error) {
	var output codecommit.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitTestRepositoryTriggersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitTestRepositoryTriggersFuture) Get(ctx workflow.Context) (*codecommit.TestRepositoryTriggersOutput, error) {
	var output codecommit.TestRepositoryTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUntagResourceFuture) Get(ctx workflow.Context) (*codecommit.UntagResourceOutput, error) {
	var output codecommit.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUpdateApprovalRuleTemplateContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUpdateApprovalRuleTemplateContentFuture) Get(ctx workflow.Context) (*codecommit.UpdateApprovalRuleTemplateContentOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUpdateApprovalRuleTemplateDescriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUpdateApprovalRuleTemplateDescriptionFuture) Get(ctx workflow.Context) (*codecommit.UpdateApprovalRuleTemplateDescriptionOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUpdateApprovalRuleTemplateNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUpdateApprovalRuleTemplateNameFuture) Get(ctx workflow.Context) (*codecommit.UpdateApprovalRuleTemplateNameOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUpdateCommentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUpdateCommentFuture) Get(ctx workflow.Context) (*codecommit.UpdateCommentOutput, error) {
	var output codecommit.UpdateCommentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUpdateDefaultBranchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUpdateDefaultBranchFuture) Get(ctx workflow.Context) (*codecommit.UpdateDefaultBranchOutput, error) {
	var output codecommit.UpdateDefaultBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUpdatePullRequestApprovalRuleContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUpdatePullRequestApprovalRuleContentFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestApprovalRuleContentOutput, error) {
	var output codecommit.UpdatePullRequestApprovalRuleContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUpdatePullRequestApprovalStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUpdatePullRequestApprovalStateFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestApprovalStateOutput, error) {
	var output codecommit.UpdatePullRequestApprovalStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUpdatePullRequestDescriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUpdatePullRequestDescriptionFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestDescriptionOutput, error) {
	var output codecommit.UpdatePullRequestDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUpdatePullRequestStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUpdatePullRequestStatusFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestStatusOutput, error) {
	var output codecommit.UpdatePullRequestStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUpdatePullRequestTitleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUpdatePullRequestTitleFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestTitleOutput, error) {
	var output codecommit.UpdatePullRequestTitleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUpdateRepositoryDescriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUpdateRepositoryDescriptionFuture) Get(ctx workflow.Context) (*codecommit.UpdateRepositoryDescriptionOutput, error) {
	var output codecommit.UpdateRepositoryDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeCommitUpdateRepositoryNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeCommitUpdateRepositoryNameFuture) Get(ctx workflow.Context) (*codecommit.UpdateRepositoryNameOutput, error) {
	var output codecommit.UpdateRepositoryNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) AssociateApprovalRuleTemplateWithRepository(ctx workflow.Context, input *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput) (*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, error) {
	var output codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.AssociateApprovalRuleTemplateWithRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) AssociateApprovalRuleTemplateWithRepositoryAsync(ctx workflow.Context, input *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput) *CodeCommitAssociateApprovalRuleTemplateWithRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.AssociateApprovalRuleTemplateWithRepository", input)
	return &CodeCommitAssociateApprovalRuleTemplateWithRepositoryFuture{Future: future}
}

func (a *CodeCommitStub) BatchAssociateApprovalRuleTemplateWithRepositories(ctx workflow.Context, input *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput) (*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, error) {
	var output codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchAssociateApprovalRuleTemplateWithRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) BatchAssociateApprovalRuleTemplateWithRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput) *CodeCommitBatchAssociateApprovalRuleTemplateWithRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchAssociateApprovalRuleTemplateWithRepositories", input)
	return &CodeCommitBatchAssociateApprovalRuleTemplateWithRepositoriesFuture{Future: future}
}

func (a *CodeCommitStub) BatchDescribeMergeConflicts(ctx workflow.Context, input *codecommit.BatchDescribeMergeConflictsInput) (*codecommit.BatchDescribeMergeConflictsOutput, error) {
	var output codecommit.BatchDescribeMergeConflictsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchDescribeMergeConflicts", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) BatchDescribeMergeConflictsAsync(ctx workflow.Context, input *codecommit.BatchDescribeMergeConflictsInput) *CodeCommitBatchDescribeMergeConflictsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchDescribeMergeConflicts", input)
	return &CodeCommitBatchDescribeMergeConflictsFuture{Future: future}
}

func (a *CodeCommitStub) BatchDisassociateApprovalRuleTemplateFromRepositories(ctx workflow.Context, input *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) (*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, error) {
	var output codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchDisassociateApprovalRuleTemplateFromRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) BatchDisassociateApprovalRuleTemplateFromRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) *CodeCommitBatchDisassociateApprovalRuleTemplateFromRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchDisassociateApprovalRuleTemplateFromRepositories", input)
	return &CodeCommitBatchDisassociateApprovalRuleTemplateFromRepositoriesFuture{Future: future}
}

func (a *CodeCommitStub) BatchGetCommits(ctx workflow.Context, input *codecommit.BatchGetCommitsInput) (*codecommit.BatchGetCommitsOutput, error) {
	var output codecommit.BatchGetCommitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchGetCommits", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) BatchGetCommitsAsync(ctx workflow.Context, input *codecommit.BatchGetCommitsInput) *CodeCommitBatchGetCommitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchGetCommits", input)
	return &CodeCommitBatchGetCommitsFuture{Future: future}
}

func (a *CodeCommitStub) BatchGetRepositories(ctx workflow.Context, input *codecommit.BatchGetRepositoriesInput) (*codecommit.BatchGetRepositoriesOutput, error) {
	var output codecommit.BatchGetRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchGetRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) BatchGetRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchGetRepositoriesInput) *CodeCommitBatchGetRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchGetRepositories", input)
	return &CodeCommitBatchGetRepositoriesFuture{Future: future}
}

func (a *CodeCommitStub) CreateApprovalRuleTemplate(ctx workflow.Context, input *codecommit.CreateApprovalRuleTemplateInput) (*codecommit.CreateApprovalRuleTemplateOutput, error) {
	var output codecommit.CreateApprovalRuleTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateApprovalRuleTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) CreateApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.CreateApprovalRuleTemplateInput) *CodeCommitCreateApprovalRuleTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateApprovalRuleTemplate", input)
	return &CodeCommitCreateApprovalRuleTemplateFuture{Future: future}
}

func (a *CodeCommitStub) CreateBranch(ctx workflow.Context, input *codecommit.CreateBranchInput) (*codecommit.CreateBranchOutput, error) {
	var output codecommit.CreateBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) CreateBranchAsync(ctx workflow.Context, input *codecommit.CreateBranchInput) *CodeCommitCreateBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateBranch", input)
	return &CodeCommitCreateBranchFuture{Future: future}
}

func (a *CodeCommitStub) CreateCommit(ctx workflow.Context, input *codecommit.CreateCommitInput) (*codecommit.CreateCommitOutput, error) {
	var output codecommit.CreateCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) CreateCommitAsync(ctx workflow.Context, input *codecommit.CreateCommitInput) *CodeCommitCreateCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateCommit", input)
	return &CodeCommitCreateCommitFuture{Future: future}
}

func (a *CodeCommitStub) CreatePullRequestApprovalRule(ctx workflow.Context, input *codecommit.CreatePullRequestApprovalRuleInput) (*codecommit.CreatePullRequestApprovalRuleOutput, error) {
	var output codecommit.CreatePullRequestApprovalRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.CreatePullRequestApprovalRule", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) CreatePullRequestApprovalRuleAsync(ctx workflow.Context, input *codecommit.CreatePullRequestApprovalRuleInput) *CodeCommitCreatePullRequestApprovalRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.CreatePullRequestApprovalRule", input)
	return &CodeCommitCreatePullRequestApprovalRuleFuture{Future: future}
}

func (a *CodeCommitStub) CreateRepository(ctx workflow.Context, input *codecommit.CreateRepositoryInput) (*codecommit.CreateRepositoryOutput, error) {
	var output codecommit.CreateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) CreateRepositoryAsync(ctx workflow.Context, input *codecommit.CreateRepositoryInput) *CodeCommitCreateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateRepository", input)
	return &CodeCommitCreateRepositoryFuture{Future: future}
}

func (a *CodeCommitStub) CreateUnreferencedMergeCommit(ctx workflow.Context, input *codecommit.CreateUnreferencedMergeCommitInput) (*codecommit.CreateUnreferencedMergeCommitOutput, error) {
	var output codecommit.CreateUnreferencedMergeCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateUnreferencedMergeCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) CreateUnreferencedMergeCommitAsync(ctx workflow.Context, input *codecommit.CreateUnreferencedMergeCommitInput) *CodeCommitCreateUnreferencedMergeCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateUnreferencedMergeCommit", input)
	return &CodeCommitCreateUnreferencedMergeCommitFuture{Future: future}
}

func (a *CodeCommitStub) DeleteApprovalRuleTemplate(ctx workflow.Context, input *codecommit.DeleteApprovalRuleTemplateInput) (*codecommit.DeleteApprovalRuleTemplateOutput, error) {
	var output codecommit.DeleteApprovalRuleTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteApprovalRuleTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DeleteApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.DeleteApprovalRuleTemplateInput) *CodeCommitDeleteApprovalRuleTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteApprovalRuleTemplate", input)
	return &CodeCommitDeleteApprovalRuleTemplateFuture{Future: future}
}

func (a *CodeCommitStub) DeleteBranch(ctx workflow.Context, input *codecommit.DeleteBranchInput) (*codecommit.DeleteBranchOutput, error) {
	var output codecommit.DeleteBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DeleteBranchAsync(ctx workflow.Context, input *codecommit.DeleteBranchInput) *CodeCommitDeleteBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteBranch", input)
	return &CodeCommitDeleteBranchFuture{Future: future}
}

func (a *CodeCommitStub) DeleteCommentContent(ctx workflow.Context, input *codecommit.DeleteCommentContentInput) (*codecommit.DeleteCommentContentOutput, error) {
	var output codecommit.DeleteCommentContentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteCommentContent", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DeleteCommentContentAsync(ctx workflow.Context, input *codecommit.DeleteCommentContentInput) *CodeCommitDeleteCommentContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteCommentContent", input)
	return &CodeCommitDeleteCommentContentFuture{Future: future}
}

func (a *CodeCommitStub) DeleteFile(ctx workflow.Context, input *codecommit.DeleteFileInput) (*codecommit.DeleteFileOutput, error) {
	var output codecommit.DeleteFileOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteFile", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DeleteFileAsync(ctx workflow.Context, input *codecommit.DeleteFileInput) *CodeCommitDeleteFileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteFile", input)
	return &CodeCommitDeleteFileFuture{Future: future}
}

func (a *CodeCommitStub) DeletePullRequestApprovalRule(ctx workflow.Context, input *codecommit.DeletePullRequestApprovalRuleInput) (*codecommit.DeletePullRequestApprovalRuleOutput, error) {
	var output codecommit.DeletePullRequestApprovalRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DeletePullRequestApprovalRule", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DeletePullRequestApprovalRuleAsync(ctx workflow.Context, input *codecommit.DeletePullRequestApprovalRuleInput) *CodeCommitDeletePullRequestApprovalRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DeletePullRequestApprovalRule", input)
	return &CodeCommitDeletePullRequestApprovalRuleFuture{Future: future}
}

func (a *CodeCommitStub) DeleteRepository(ctx workflow.Context, input *codecommit.DeleteRepositoryInput) (*codecommit.DeleteRepositoryOutput, error) {
	var output codecommit.DeleteRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DeleteRepositoryAsync(ctx workflow.Context, input *codecommit.DeleteRepositoryInput) *CodeCommitDeleteRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteRepository", input)
	return &CodeCommitDeleteRepositoryFuture{Future: future}
}

func (a *CodeCommitStub) DescribeMergeConflicts(ctx workflow.Context, input *codecommit.DescribeMergeConflictsInput) (*codecommit.DescribeMergeConflictsOutput, error) {
	var output codecommit.DescribeMergeConflictsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DescribeMergeConflicts", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DescribeMergeConflictsAsync(ctx workflow.Context, input *codecommit.DescribeMergeConflictsInput) *CodeCommitDescribeMergeConflictsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DescribeMergeConflicts", input)
	return &CodeCommitDescribeMergeConflictsFuture{Future: future}
}

func (a *CodeCommitStub) DescribePullRequestEvents(ctx workflow.Context, input *codecommit.DescribePullRequestEventsInput) (*codecommit.DescribePullRequestEventsOutput, error) {
	var output codecommit.DescribePullRequestEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DescribePullRequestEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DescribePullRequestEventsAsync(ctx workflow.Context, input *codecommit.DescribePullRequestEventsInput) *CodeCommitDescribePullRequestEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DescribePullRequestEvents", input)
	return &CodeCommitDescribePullRequestEventsFuture{Future: future}
}

func (a *CodeCommitStub) DisassociateApprovalRuleTemplateFromRepository(ctx workflow.Context, input *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput) (*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, error) {
	var output codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DisassociateApprovalRuleTemplateFromRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DisassociateApprovalRuleTemplateFromRepositoryAsync(ctx workflow.Context, input *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput) *CodeCommitDisassociateApprovalRuleTemplateFromRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DisassociateApprovalRuleTemplateFromRepository", input)
	return &CodeCommitDisassociateApprovalRuleTemplateFromRepositoryFuture{Future: future}
}

func (a *CodeCommitStub) EvaluatePullRequestApprovalRules(ctx workflow.Context, input *codecommit.EvaluatePullRequestApprovalRulesInput) (*codecommit.EvaluatePullRequestApprovalRulesOutput, error) {
	var output codecommit.EvaluatePullRequestApprovalRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.EvaluatePullRequestApprovalRules", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) EvaluatePullRequestApprovalRulesAsync(ctx workflow.Context, input *codecommit.EvaluatePullRequestApprovalRulesInput) *CodeCommitEvaluatePullRequestApprovalRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.EvaluatePullRequestApprovalRules", input)
	return &CodeCommitEvaluatePullRequestApprovalRulesFuture{Future: future}
}

func (a *CodeCommitStub) GetApprovalRuleTemplate(ctx workflow.Context, input *codecommit.GetApprovalRuleTemplateInput) (*codecommit.GetApprovalRuleTemplateOutput, error) {
	var output codecommit.GetApprovalRuleTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetApprovalRuleTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.GetApprovalRuleTemplateInput) *CodeCommitGetApprovalRuleTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetApprovalRuleTemplate", input)
	return &CodeCommitGetApprovalRuleTemplateFuture{Future: future}
}

func (a *CodeCommitStub) GetBlob(ctx workflow.Context, input *codecommit.GetBlobInput) (*codecommit.GetBlobOutput, error) {
	var output codecommit.GetBlobOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetBlob", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetBlobAsync(ctx workflow.Context, input *codecommit.GetBlobInput) *CodeCommitGetBlobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetBlob", input)
	return &CodeCommitGetBlobFuture{Future: future}
}

func (a *CodeCommitStub) GetBranch(ctx workflow.Context, input *codecommit.GetBranchInput) (*codecommit.GetBranchOutput, error) {
	var output codecommit.GetBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetBranchAsync(ctx workflow.Context, input *codecommit.GetBranchInput) *CodeCommitGetBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetBranch", input)
	return &CodeCommitGetBranchFuture{Future: future}
}

func (a *CodeCommitStub) GetComment(ctx workflow.Context, input *codecommit.GetCommentInput) (*codecommit.GetCommentOutput, error) {
	var output codecommit.GetCommentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetComment", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetCommentAsync(ctx workflow.Context, input *codecommit.GetCommentInput) *CodeCommitGetCommentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetComment", input)
	return &CodeCommitGetCommentFuture{Future: future}
}

func (a *CodeCommitStub) GetCommentReactions(ctx workflow.Context, input *codecommit.GetCommentReactionsInput) (*codecommit.GetCommentReactionsOutput, error) {
	var output codecommit.GetCommentReactionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetCommentReactions", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetCommentReactionsAsync(ctx workflow.Context, input *codecommit.GetCommentReactionsInput) *CodeCommitGetCommentReactionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetCommentReactions", input)
	return &CodeCommitGetCommentReactionsFuture{Future: future}
}

func (a *CodeCommitStub) GetCommentsForComparedCommit(ctx workflow.Context, input *codecommit.GetCommentsForComparedCommitInput) (*codecommit.GetCommentsForComparedCommitOutput, error) {
	var output codecommit.GetCommentsForComparedCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetCommentsForComparedCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetCommentsForComparedCommitAsync(ctx workflow.Context, input *codecommit.GetCommentsForComparedCommitInput) *CodeCommitGetCommentsForComparedCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetCommentsForComparedCommit", input)
	return &CodeCommitGetCommentsForComparedCommitFuture{Future: future}
}

func (a *CodeCommitStub) GetCommit(ctx workflow.Context, input *codecommit.GetCommitInput) (*codecommit.GetCommitOutput, error) {
	var output codecommit.GetCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetCommitAsync(ctx workflow.Context, input *codecommit.GetCommitInput) *CodeCommitGetCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetCommit", input)
	return &CodeCommitGetCommitFuture{Future: future}
}

func (a *CodeCommitStub) GetDifferences(ctx workflow.Context, input *codecommit.GetDifferencesInput) (*codecommit.GetDifferencesOutput, error) {
	var output codecommit.GetDifferencesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetDifferences", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetDifferencesAsync(ctx workflow.Context, input *codecommit.GetDifferencesInput) *CodeCommitGetDifferencesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetDifferences", input)
	return &CodeCommitGetDifferencesFuture{Future: future}
}

func (a *CodeCommitStub) GetFile(ctx workflow.Context, input *codecommit.GetFileInput) (*codecommit.GetFileOutput, error) {
	var output codecommit.GetFileOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetFile", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetFileAsync(ctx workflow.Context, input *codecommit.GetFileInput) *CodeCommitGetFileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetFile", input)
	return &CodeCommitGetFileFuture{Future: future}
}

func (a *CodeCommitStub) GetFolder(ctx workflow.Context, input *codecommit.GetFolderInput) (*codecommit.GetFolderOutput, error) {
	var output codecommit.GetFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetFolderAsync(ctx workflow.Context, input *codecommit.GetFolderInput) *CodeCommitGetFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetFolder", input)
	return &CodeCommitGetFolderFuture{Future: future}
}

func (a *CodeCommitStub) GetMergeCommit(ctx workflow.Context, input *codecommit.GetMergeCommitInput) (*codecommit.GetMergeCommitOutput, error) {
	var output codecommit.GetMergeCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetMergeCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetMergeCommitAsync(ctx workflow.Context, input *codecommit.GetMergeCommitInput) *CodeCommitGetMergeCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetMergeCommit", input)
	return &CodeCommitGetMergeCommitFuture{Future: future}
}

func (a *CodeCommitStub) GetMergeConflicts(ctx workflow.Context, input *codecommit.GetMergeConflictsInput) (*codecommit.GetMergeConflictsOutput, error) {
	var output codecommit.GetMergeConflictsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetMergeConflicts", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetMergeConflictsAsync(ctx workflow.Context, input *codecommit.GetMergeConflictsInput) *CodeCommitGetMergeConflictsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetMergeConflicts", input)
	return &CodeCommitGetMergeConflictsFuture{Future: future}
}

func (a *CodeCommitStub) GetMergeOptions(ctx workflow.Context, input *codecommit.GetMergeOptionsInput) (*codecommit.GetMergeOptionsOutput, error) {
	var output codecommit.GetMergeOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetMergeOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetMergeOptionsAsync(ctx workflow.Context, input *codecommit.GetMergeOptionsInput) *CodeCommitGetMergeOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetMergeOptions", input)
	return &CodeCommitGetMergeOptionsFuture{Future: future}
}

func (a *CodeCommitStub) GetPullRequestApprovalStates(ctx workflow.Context, input *codecommit.GetPullRequestApprovalStatesInput) (*codecommit.GetPullRequestApprovalStatesOutput, error) {
	var output codecommit.GetPullRequestApprovalStatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetPullRequestApprovalStates", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetPullRequestApprovalStatesAsync(ctx workflow.Context, input *codecommit.GetPullRequestApprovalStatesInput) *CodeCommitGetPullRequestApprovalStatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetPullRequestApprovalStates", input)
	return &CodeCommitGetPullRequestApprovalStatesFuture{Future: future}
}

func (a *CodeCommitStub) GetPullRequestOverrideState(ctx workflow.Context, input *codecommit.GetPullRequestOverrideStateInput) (*codecommit.GetPullRequestOverrideStateOutput, error) {
	var output codecommit.GetPullRequestOverrideStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetPullRequestOverrideState", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetPullRequestOverrideStateAsync(ctx workflow.Context, input *codecommit.GetPullRequestOverrideStateInput) *CodeCommitGetPullRequestOverrideStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetPullRequestOverrideState", input)
	return &CodeCommitGetPullRequestOverrideStateFuture{Future: future}
}

func (a *CodeCommitStub) GetRepository(ctx workflow.Context, input *codecommit.GetRepositoryInput) (*codecommit.GetRepositoryOutput, error) {
	var output codecommit.GetRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetRepositoryAsync(ctx workflow.Context, input *codecommit.GetRepositoryInput) *CodeCommitGetRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetRepository", input)
	return &CodeCommitGetRepositoryFuture{Future: future}
}

func (a *CodeCommitStub) GetRepositoryTriggers(ctx workflow.Context, input *codecommit.GetRepositoryTriggersInput) (*codecommit.GetRepositoryTriggersOutput, error) {
	var output codecommit.GetRepositoryTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetRepositoryTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.GetRepositoryTriggersInput) *CodeCommitGetRepositoryTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetRepositoryTriggers", input)
	return &CodeCommitGetRepositoryTriggersFuture{Future: future}
}

func (a *CodeCommitStub) ListApprovalRuleTemplates(ctx workflow.Context, input *codecommit.ListApprovalRuleTemplatesInput) (*codecommit.ListApprovalRuleTemplatesOutput, error) {
	var output codecommit.ListApprovalRuleTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListApprovalRuleTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListApprovalRuleTemplatesAsync(ctx workflow.Context, input *codecommit.ListApprovalRuleTemplatesInput) *CodeCommitListApprovalRuleTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListApprovalRuleTemplates", input)
	return &CodeCommitListApprovalRuleTemplatesFuture{Future: future}
}

func (a *CodeCommitStub) ListAssociatedApprovalRuleTemplatesForRepository(ctx workflow.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput) (*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, error) {
	var output codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListAssociatedApprovalRuleTemplatesForRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListAssociatedApprovalRuleTemplatesForRepositoryAsync(ctx workflow.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput) *CodeCommitListAssociatedApprovalRuleTemplatesForRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListAssociatedApprovalRuleTemplatesForRepository", input)
	return &CodeCommitListAssociatedApprovalRuleTemplatesForRepositoryFuture{Future: future}
}

func (a *CodeCommitStub) ListBranches(ctx workflow.Context, input *codecommit.ListBranchesInput) (*codecommit.ListBranchesOutput, error) {
	var output codecommit.ListBranchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListBranches", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListBranchesAsync(ctx workflow.Context, input *codecommit.ListBranchesInput) *CodeCommitListBranchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListBranches", input)
	return &CodeCommitListBranchesFuture{Future: future}
}

func (a *CodeCommitStub) ListPullRequests(ctx workflow.Context, input *codecommit.ListPullRequestsInput) (*codecommit.ListPullRequestsOutput, error) {
	var output codecommit.ListPullRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListPullRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListPullRequestsAsync(ctx workflow.Context, input *codecommit.ListPullRequestsInput) *CodeCommitListPullRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListPullRequests", input)
	return &CodeCommitListPullRequestsFuture{Future: future}
}

func (a *CodeCommitStub) ListRepositories(ctx workflow.Context, input *codecommit.ListRepositoriesInput) (*codecommit.ListRepositoriesOutput, error) {
	var output codecommit.ListRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListRepositoriesAsync(ctx workflow.Context, input *codecommit.ListRepositoriesInput) *CodeCommitListRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListRepositories", input)
	return &CodeCommitListRepositoriesFuture{Future: future}
}

func (a *CodeCommitStub) ListRepositoriesForApprovalRuleTemplate(ctx workflow.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput) (*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, error) {
	var output codecommit.ListRepositoriesForApprovalRuleTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListRepositoriesForApprovalRuleTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListRepositoriesForApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput) *CodeCommitListRepositoriesForApprovalRuleTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListRepositoriesForApprovalRuleTemplate", input)
	return &CodeCommitListRepositoriesForApprovalRuleTemplateFuture{Future: future}
}

func (a *CodeCommitStub) ListTagsForResource(ctx workflow.Context, input *codecommit.ListTagsForResourceInput) (*codecommit.ListTagsForResourceOutput, error) {
	var output codecommit.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListTagsForResourceAsync(ctx workflow.Context, input *codecommit.ListTagsForResourceInput) *CodeCommitListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListTagsForResource", input)
	return &CodeCommitListTagsForResourceFuture{Future: future}
}

func (a *CodeCommitStub) MergeBranchesByFastForward(ctx workflow.Context, input *codecommit.MergeBranchesByFastForwardInput) (*codecommit.MergeBranchesByFastForwardOutput, error) {
	var output codecommit.MergeBranchesByFastForwardOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.MergeBranchesByFastForward", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) MergeBranchesByFastForwardAsync(ctx workflow.Context, input *codecommit.MergeBranchesByFastForwardInput) *CodeCommitMergeBranchesByFastForwardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.MergeBranchesByFastForward", input)
	return &CodeCommitMergeBranchesByFastForwardFuture{Future: future}
}

func (a *CodeCommitStub) MergeBranchesBySquash(ctx workflow.Context, input *codecommit.MergeBranchesBySquashInput) (*codecommit.MergeBranchesBySquashOutput, error) {
	var output codecommit.MergeBranchesBySquashOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.MergeBranchesBySquash", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) MergeBranchesBySquashAsync(ctx workflow.Context, input *codecommit.MergeBranchesBySquashInput) *CodeCommitMergeBranchesBySquashFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.MergeBranchesBySquash", input)
	return &CodeCommitMergeBranchesBySquashFuture{Future: future}
}

func (a *CodeCommitStub) MergeBranchesByThreeWay(ctx workflow.Context, input *codecommit.MergeBranchesByThreeWayInput) (*codecommit.MergeBranchesByThreeWayOutput, error) {
	var output codecommit.MergeBranchesByThreeWayOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.MergeBranchesByThreeWay", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) MergeBranchesByThreeWayAsync(ctx workflow.Context, input *codecommit.MergeBranchesByThreeWayInput) *CodeCommitMergeBranchesByThreeWayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.MergeBranchesByThreeWay", input)
	return &CodeCommitMergeBranchesByThreeWayFuture{Future: future}
}

func (a *CodeCommitStub) MergePullRequestByFastForward(ctx workflow.Context, input *codecommit.MergePullRequestByFastForwardInput) (*codecommit.MergePullRequestByFastForwardOutput, error) {
	var output codecommit.MergePullRequestByFastForwardOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.MergePullRequestByFastForward", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) MergePullRequestByFastForwardAsync(ctx workflow.Context, input *codecommit.MergePullRequestByFastForwardInput) *CodeCommitMergePullRequestByFastForwardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.MergePullRequestByFastForward", input)
	return &CodeCommitMergePullRequestByFastForwardFuture{Future: future}
}

func (a *CodeCommitStub) MergePullRequestBySquash(ctx workflow.Context, input *codecommit.MergePullRequestBySquashInput) (*codecommit.MergePullRequestBySquashOutput, error) {
	var output codecommit.MergePullRequestBySquashOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.MergePullRequestBySquash", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) MergePullRequestBySquashAsync(ctx workflow.Context, input *codecommit.MergePullRequestBySquashInput) *CodeCommitMergePullRequestBySquashFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.MergePullRequestBySquash", input)
	return &CodeCommitMergePullRequestBySquashFuture{Future: future}
}

func (a *CodeCommitStub) MergePullRequestByThreeWay(ctx workflow.Context, input *codecommit.MergePullRequestByThreeWayInput) (*codecommit.MergePullRequestByThreeWayOutput, error) {
	var output codecommit.MergePullRequestByThreeWayOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.MergePullRequestByThreeWay", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) MergePullRequestByThreeWayAsync(ctx workflow.Context, input *codecommit.MergePullRequestByThreeWayInput) *CodeCommitMergePullRequestByThreeWayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.MergePullRequestByThreeWay", input)
	return &CodeCommitMergePullRequestByThreeWayFuture{Future: future}
}

func (a *CodeCommitStub) OverridePullRequestApprovalRules(ctx workflow.Context, input *codecommit.OverridePullRequestApprovalRulesInput) (*codecommit.OverridePullRequestApprovalRulesOutput, error) {
	var output codecommit.OverridePullRequestApprovalRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.OverridePullRequestApprovalRules", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) OverridePullRequestApprovalRulesAsync(ctx workflow.Context, input *codecommit.OverridePullRequestApprovalRulesInput) *CodeCommitOverridePullRequestApprovalRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.OverridePullRequestApprovalRules", input)
	return &CodeCommitOverridePullRequestApprovalRulesFuture{Future: future}
}

func (a *CodeCommitStub) PostCommentForComparedCommit(ctx workflow.Context, input *codecommit.PostCommentForComparedCommitInput) (*codecommit.PostCommentForComparedCommitOutput, error) {
	var output codecommit.PostCommentForComparedCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.PostCommentForComparedCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) PostCommentForComparedCommitAsync(ctx workflow.Context, input *codecommit.PostCommentForComparedCommitInput) *CodeCommitPostCommentForComparedCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.PostCommentForComparedCommit", input)
	return &CodeCommitPostCommentForComparedCommitFuture{Future: future}
}

func (a *CodeCommitStub) PostCommentReply(ctx workflow.Context, input *codecommit.PostCommentReplyInput) (*codecommit.PostCommentReplyOutput, error) {
	var output codecommit.PostCommentReplyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.PostCommentReply", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) PostCommentReplyAsync(ctx workflow.Context, input *codecommit.PostCommentReplyInput) *CodeCommitPostCommentReplyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.PostCommentReply", input)
	return &CodeCommitPostCommentReplyFuture{Future: future}
}

func (a *CodeCommitStub) PutCommentReaction(ctx workflow.Context, input *codecommit.PutCommentReactionInput) (*codecommit.PutCommentReactionOutput, error) {
	var output codecommit.PutCommentReactionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.PutCommentReaction", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) PutCommentReactionAsync(ctx workflow.Context, input *codecommit.PutCommentReactionInput) *CodeCommitPutCommentReactionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.PutCommentReaction", input)
	return &CodeCommitPutCommentReactionFuture{Future: future}
}

func (a *CodeCommitStub) PutFile(ctx workflow.Context, input *codecommit.PutFileInput) (*codecommit.PutFileOutput, error) {
	var output codecommit.PutFileOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.PutFile", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) PutFileAsync(ctx workflow.Context, input *codecommit.PutFileInput) *CodeCommitPutFileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.PutFile", input)
	return &CodeCommitPutFileFuture{Future: future}
}

func (a *CodeCommitStub) PutRepositoryTriggers(ctx workflow.Context, input *codecommit.PutRepositoryTriggersInput) (*codecommit.PutRepositoryTriggersOutput, error) {
	var output codecommit.PutRepositoryTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.PutRepositoryTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) PutRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.PutRepositoryTriggersInput) *CodeCommitPutRepositoryTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.PutRepositoryTriggers", input)
	return &CodeCommitPutRepositoryTriggersFuture{Future: future}
}

func (a *CodeCommitStub) TagResource(ctx workflow.Context, input *codecommit.TagResourceInput) (*codecommit.TagResourceOutput, error) {
	var output codecommit.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) TagResourceAsync(ctx workflow.Context, input *codecommit.TagResourceInput) *CodeCommitTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.TagResource", input)
	return &CodeCommitTagResourceFuture{Future: future}
}

func (a *CodeCommitStub) TestRepositoryTriggers(ctx workflow.Context, input *codecommit.TestRepositoryTriggersInput) (*codecommit.TestRepositoryTriggersOutput, error) {
	var output codecommit.TestRepositoryTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.TestRepositoryTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) TestRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.TestRepositoryTriggersInput) *CodeCommitTestRepositoryTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.TestRepositoryTriggers", input)
	return &CodeCommitTestRepositoryTriggersFuture{Future: future}
}

func (a *CodeCommitStub) UntagResource(ctx workflow.Context, input *codecommit.UntagResourceInput) (*codecommit.UntagResourceOutput, error) {
	var output codecommit.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UntagResourceAsync(ctx workflow.Context, input *codecommit.UntagResourceInput) *CodeCommitUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UntagResource", input)
	return &CodeCommitUntagResourceFuture{Future: future}
}

func (a *CodeCommitStub) UpdateApprovalRuleTemplateContent(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateContentInput) (*codecommit.UpdateApprovalRuleTemplateContentOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateContentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateApprovalRuleTemplateContent", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateApprovalRuleTemplateContentAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateContentInput) *CodeCommitUpdateApprovalRuleTemplateContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateApprovalRuleTemplateContent", input)
	return &CodeCommitUpdateApprovalRuleTemplateContentFuture{Future: future}
}

func (a *CodeCommitStub) UpdateApprovalRuleTemplateDescription(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateDescriptionInput) (*codecommit.UpdateApprovalRuleTemplateDescriptionOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateApprovalRuleTemplateDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateApprovalRuleTemplateDescriptionAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateDescriptionInput) *CodeCommitUpdateApprovalRuleTemplateDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateApprovalRuleTemplateDescription", input)
	return &CodeCommitUpdateApprovalRuleTemplateDescriptionFuture{Future: future}
}

func (a *CodeCommitStub) UpdateApprovalRuleTemplateName(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateNameInput) (*codecommit.UpdateApprovalRuleTemplateNameOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateNameOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateApprovalRuleTemplateName", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateApprovalRuleTemplateNameAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateNameInput) *CodeCommitUpdateApprovalRuleTemplateNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateApprovalRuleTemplateName", input)
	return &CodeCommitUpdateApprovalRuleTemplateNameFuture{Future: future}
}

func (a *CodeCommitStub) UpdateComment(ctx workflow.Context, input *codecommit.UpdateCommentInput) (*codecommit.UpdateCommentOutput, error) {
	var output codecommit.UpdateCommentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateComment", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateCommentAsync(ctx workflow.Context, input *codecommit.UpdateCommentInput) *CodeCommitUpdateCommentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateComment", input)
	return &CodeCommitUpdateCommentFuture{Future: future}
}

func (a *CodeCommitStub) UpdateDefaultBranch(ctx workflow.Context, input *codecommit.UpdateDefaultBranchInput) (*codecommit.UpdateDefaultBranchOutput, error) {
	var output codecommit.UpdateDefaultBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateDefaultBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateDefaultBranchAsync(ctx workflow.Context, input *codecommit.UpdateDefaultBranchInput) *CodeCommitUpdateDefaultBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateDefaultBranch", input)
	return &CodeCommitUpdateDefaultBranchFuture{Future: future}
}

func (a *CodeCommitStub) UpdatePullRequestApprovalRuleContent(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalRuleContentInput) (*codecommit.UpdatePullRequestApprovalRuleContentOutput, error) {
	var output codecommit.UpdatePullRequestApprovalRuleContentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestApprovalRuleContent", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdatePullRequestApprovalRuleContentAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalRuleContentInput) *CodeCommitUpdatePullRequestApprovalRuleContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestApprovalRuleContent", input)
	return &CodeCommitUpdatePullRequestApprovalRuleContentFuture{Future: future}
}

func (a *CodeCommitStub) UpdatePullRequestApprovalState(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalStateInput) (*codecommit.UpdatePullRequestApprovalStateOutput, error) {
	var output codecommit.UpdatePullRequestApprovalStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestApprovalState", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdatePullRequestApprovalStateAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalStateInput) *CodeCommitUpdatePullRequestApprovalStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestApprovalState", input)
	return &CodeCommitUpdatePullRequestApprovalStateFuture{Future: future}
}

func (a *CodeCommitStub) UpdatePullRequestDescription(ctx workflow.Context, input *codecommit.UpdatePullRequestDescriptionInput) (*codecommit.UpdatePullRequestDescriptionOutput, error) {
	var output codecommit.UpdatePullRequestDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdatePullRequestDescriptionAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestDescriptionInput) *CodeCommitUpdatePullRequestDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestDescription", input)
	return &CodeCommitUpdatePullRequestDescriptionFuture{Future: future}
}

func (a *CodeCommitStub) UpdatePullRequestStatus(ctx workflow.Context, input *codecommit.UpdatePullRequestStatusInput) (*codecommit.UpdatePullRequestStatusOutput, error) {
	var output codecommit.UpdatePullRequestStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdatePullRequestStatusAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestStatusInput) *CodeCommitUpdatePullRequestStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestStatus", input)
	return &CodeCommitUpdatePullRequestStatusFuture{Future: future}
}

func (a *CodeCommitStub) UpdatePullRequestTitle(ctx workflow.Context, input *codecommit.UpdatePullRequestTitleInput) (*codecommit.UpdatePullRequestTitleOutput, error) {
	var output codecommit.UpdatePullRequestTitleOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestTitle", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdatePullRequestTitleAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestTitleInput) *CodeCommitUpdatePullRequestTitleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestTitle", input)
	return &CodeCommitUpdatePullRequestTitleFuture{Future: future}
}

func (a *CodeCommitStub) UpdateRepositoryDescription(ctx workflow.Context, input *codecommit.UpdateRepositoryDescriptionInput) (*codecommit.UpdateRepositoryDescriptionOutput, error) {
	var output codecommit.UpdateRepositoryDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateRepositoryDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateRepositoryDescriptionAsync(ctx workflow.Context, input *codecommit.UpdateRepositoryDescriptionInput) *CodeCommitUpdateRepositoryDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateRepositoryDescription", input)
	return &CodeCommitUpdateRepositoryDescriptionFuture{Future: future}
}

func (a *CodeCommitStub) UpdateRepositoryName(ctx workflow.Context, input *codecommit.UpdateRepositoryNameInput) (*codecommit.UpdateRepositoryNameOutput, error) {
	var output codecommit.UpdateRepositoryNameOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateRepositoryName", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateRepositoryNameAsync(ctx workflow.Context, input *codecommit.UpdateRepositoryNameInput) *CodeCommitUpdateRepositoryNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateRepositoryName", input)
	return &CodeCommitUpdateRepositoryNameFuture{Future: future}
}
