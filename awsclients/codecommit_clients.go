// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/codecommit"
	"go.temporal.io/sdk/workflow"
)

type CodeCommitClient interface {
	AssociateApprovalRuleTemplateWithRepository(ctx workflow.Context, input *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput) (*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, error)
	AssociateApprovalRuleTemplateWithRepositoryAsync(ctx workflow.Context, input *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput) *CodecommitAssociateApprovalRuleTemplateWithRepositoryFuture

	BatchAssociateApprovalRuleTemplateWithRepositories(ctx workflow.Context, input *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput) (*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, error)
	BatchAssociateApprovalRuleTemplateWithRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput) *CodecommitBatchAssociateApprovalRuleTemplateWithRepositoriesFuture

	BatchDescribeMergeConflicts(ctx workflow.Context, input *codecommit.BatchDescribeMergeConflictsInput) (*codecommit.BatchDescribeMergeConflictsOutput, error)
	BatchDescribeMergeConflictsAsync(ctx workflow.Context, input *codecommit.BatchDescribeMergeConflictsInput) *CodecommitBatchDescribeMergeConflictsFuture

	BatchDisassociateApprovalRuleTemplateFromRepositories(ctx workflow.Context, input *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) (*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, error)
	BatchDisassociateApprovalRuleTemplateFromRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) *CodecommitBatchDisassociateApprovalRuleTemplateFromRepositoriesFuture

	BatchGetCommits(ctx workflow.Context, input *codecommit.BatchGetCommitsInput) (*codecommit.BatchGetCommitsOutput, error)
	BatchGetCommitsAsync(ctx workflow.Context, input *codecommit.BatchGetCommitsInput) *CodecommitBatchGetCommitsFuture

	BatchGetRepositories(ctx workflow.Context, input *codecommit.BatchGetRepositoriesInput) (*codecommit.BatchGetRepositoriesOutput, error)
	BatchGetRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchGetRepositoriesInput) *CodecommitBatchGetRepositoriesFuture

	CreateApprovalRuleTemplate(ctx workflow.Context, input *codecommit.CreateApprovalRuleTemplateInput) (*codecommit.CreateApprovalRuleTemplateOutput, error)
	CreateApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.CreateApprovalRuleTemplateInput) *CodecommitCreateApprovalRuleTemplateFuture

	CreateBranch(ctx workflow.Context, input *codecommit.CreateBranchInput) (*codecommit.CreateBranchOutput, error)
	CreateBranchAsync(ctx workflow.Context, input *codecommit.CreateBranchInput) *CodecommitCreateBranchFuture

	CreateCommit(ctx workflow.Context, input *codecommit.CreateCommitInput) (*codecommit.CreateCommitOutput, error)
	CreateCommitAsync(ctx workflow.Context, input *codecommit.CreateCommitInput) *CodecommitCreateCommitFuture

	CreatePullRequestApprovalRule(ctx workflow.Context, input *codecommit.CreatePullRequestApprovalRuleInput) (*codecommit.CreatePullRequestApprovalRuleOutput, error)
	CreatePullRequestApprovalRuleAsync(ctx workflow.Context, input *codecommit.CreatePullRequestApprovalRuleInput) *CodecommitCreatePullRequestApprovalRuleFuture

	CreateRepository(ctx workflow.Context, input *codecommit.CreateRepositoryInput) (*codecommit.CreateRepositoryOutput, error)
	CreateRepositoryAsync(ctx workflow.Context, input *codecommit.CreateRepositoryInput) *CodecommitCreateRepositoryFuture

	CreateUnreferencedMergeCommit(ctx workflow.Context, input *codecommit.CreateUnreferencedMergeCommitInput) (*codecommit.CreateUnreferencedMergeCommitOutput, error)
	CreateUnreferencedMergeCommitAsync(ctx workflow.Context, input *codecommit.CreateUnreferencedMergeCommitInput) *CodecommitCreateUnreferencedMergeCommitFuture

	DeleteApprovalRuleTemplate(ctx workflow.Context, input *codecommit.DeleteApprovalRuleTemplateInput) (*codecommit.DeleteApprovalRuleTemplateOutput, error)
	DeleteApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.DeleteApprovalRuleTemplateInput) *CodecommitDeleteApprovalRuleTemplateFuture

	DeleteBranch(ctx workflow.Context, input *codecommit.DeleteBranchInput) (*codecommit.DeleteBranchOutput, error)
	DeleteBranchAsync(ctx workflow.Context, input *codecommit.DeleteBranchInput) *CodecommitDeleteBranchFuture

	DeleteCommentContent(ctx workflow.Context, input *codecommit.DeleteCommentContentInput) (*codecommit.DeleteCommentContentOutput, error)
	DeleteCommentContentAsync(ctx workflow.Context, input *codecommit.DeleteCommentContentInput) *CodecommitDeleteCommentContentFuture

	DeleteFile(ctx workflow.Context, input *codecommit.DeleteFileInput) (*codecommit.DeleteFileOutput, error)
	DeleteFileAsync(ctx workflow.Context, input *codecommit.DeleteFileInput) *CodecommitDeleteFileFuture

	DeletePullRequestApprovalRule(ctx workflow.Context, input *codecommit.DeletePullRequestApprovalRuleInput) (*codecommit.DeletePullRequestApprovalRuleOutput, error)
	DeletePullRequestApprovalRuleAsync(ctx workflow.Context, input *codecommit.DeletePullRequestApprovalRuleInput) *CodecommitDeletePullRequestApprovalRuleFuture

	DeleteRepository(ctx workflow.Context, input *codecommit.DeleteRepositoryInput) (*codecommit.DeleteRepositoryOutput, error)
	DeleteRepositoryAsync(ctx workflow.Context, input *codecommit.DeleteRepositoryInput) *CodecommitDeleteRepositoryFuture

	DescribeMergeConflicts(ctx workflow.Context, input *codecommit.DescribeMergeConflictsInput) (*codecommit.DescribeMergeConflictsOutput, error)
	DescribeMergeConflictsAsync(ctx workflow.Context, input *codecommit.DescribeMergeConflictsInput) *CodecommitDescribeMergeConflictsFuture

	DescribePullRequestEvents(ctx workflow.Context, input *codecommit.DescribePullRequestEventsInput) (*codecommit.DescribePullRequestEventsOutput, error)
	DescribePullRequestEventsAsync(ctx workflow.Context, input *codecommit.DescribePullRequestEventsInput) *CodecommitDescribePullRequestEventsFuture

	DisassociateApprovalRuleTemplateFromRepository(ctx workflow.Context, input *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput) (*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, error)
	DisassociateApprovalRuleTemplateFromRepositoryAsync(ctx workflow.Context, input *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput) *CodecommitDisassociateApprovalRuleTemplateFromRepositoryFuture

	EvaluatePullRequestApprovalRules(ctx workflow.Context, input *codecommit.EvaluatePullRequestApprovalRulesInput) (*codecommit.EvaluatePullRequestApprovalRulesOutput, error)
	EvaluatePullRequestApprovalRulesAsync(ctx workflow.Context, input *codecommit.EvaluatePullRequestApprovalRulesInput) *CodecommitEvaluatePullRequestApprovalRulesFuture

	GetApprovalRuleTemplate(ctx workflow.Context, input *codecommit.GetApprovalRuleTemplateInput) (*codecommit.GetApprovalRuleTemplateOutput, error)
	GetApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.GetApprovalRuleTemplateInput) *CodecommitGetApprovalRuleTemplateFuture

	GetBlob(ctx workflow.Context, input *codecommit.GetBlobInput) (*codecommit.GetBlobOutput, error)
	GetBlobAsync(ctx workflow.Context, input *codecommit.GetBlobInput) *CodecommitGetBlobFuture

	GetBranch(ctx workflow.Context, input *codecommit.GetBranchInput) (*codecommit.GetBranchOutput, error)
	GetBranchAsync(ctx workflow.Context, input *codecommit.GetBranchInput) *CodecommitGetBranchFuture

	GetComment(ctx workflow.Context, input *codecommit.GetCommentInput) (*codecommit.GetCommentOutput, error)
	GetCommentAsync(ctx workflow.Context, input *codecommit.GetCommentInput) *CodecommitGetCommentFuture

	GetCommentReactions(ctx workflow.Context, input *codecommit.GetCommentReactionsInput) (*codecommit.GetCommentReactionsOutput, error)
	GetCommentReactionsAsync(ctx workflow.Context, input *codecommit.GetCommentReactionsInput) *CodecommitGetCommentReactionsFuture

	GetCommentsForComparedCommit(ctx workflow.Context, input *codecommit.GetCommentsForComparedCommitInput) (*codecommit.GetCommentsForComparedCommitOutput, error)
	GetCommentsForComparedCommitAsync(ctx workflow.Context, input *codecommit.GetCommentsForComparedCommitInput) *CodecommitGetCommentsForComparedCommitFuture

	GetCommit(ctx workflow.Context, input *codecommit.GetCommitInput) (*codecommit.GetCommitOutput, error)
	GetCommitAsync(ctx workflow.Context, input *codecommit.GetCommitInput) *CodecommitGetCommitFuture

	GetDifferences(ctx workflow.Context, input *codecommit.GetDifferencesInput) (*codecommit.GetDifferencesOutput, error)
	GetDifferencesAsync(ctx workflow.Context, input *codecommit.GetDifferencesInput) *CodecommitGetDifferencesFuture

	GetFile(ctx workflow.Context, input *codecommit.GetFileInput) (*codecommit.GetFileOutput, error)
	GetFileAsync(ctx workflow.Context, input *codecommit.GetFileInput) *CodecommitGetFileFuture

	GetFolder(ctx workflow.Context, input *codecommit.GetFolderInput) (*codecommit.GetFolderOutput, error)
	GetFolderAsync(ctx workflow.Context, input *codecommit.GetFolderInput) *CodecommitGetFolderFuture

	GetMergeCommit(ctx workflow.Context, input *codecommit.GetMergeCommitInput) (*codecommit.GetMergeCommitOutput, error)
	GetMergeCommitAsync(ctx workflow.Context, input *codecommit.GetMergeCommitInput) *CodecommitGetMergeCommitFuture

	GetMergeConflicts(ctx workflow.Context, input *codecommit.GetMergeConflictsInput) (*codecommit.GetMergeConflictsOutput, error)
	GetMergeConflictsAsync(ctx workflow.Context, input *codecommit.GetMergeConflictsInput) *CodecommitGetMergeConflictsFuture

	GetMergeOptions(ctx workflow.Context, input *codecommit.GetMergeOptionsInput) (*codecommit.GetMergeOptionsOutput, error)
	GetMergeOptionsAsync(ctx workflow.Context, input *codecommit.GetMergeOptionsInput) *CodecommitGetMergeOptionsFuture

	GetPullRequestApprovalStates(ctx workflow.Context, input *codecommit.GetPullRequestApprovalStatesInput) (*codecommit.GetPullRequestApprovalStatesOutput, error)
	GetPullRequestApprovalStatesAsync(ctx workflow.Context, input *codecommit.GetPullRequestApprovalStatesInput) *CodecommitGetPullRequestApprovalStatesFuture

	GetPullRequestOverrideState(ctx workflow.Context, input *codecommit.GetPullRequestOverrideStateInput) (*codecommit.GetPullRequestOverrideStateOutput, error)
	GetPullRequestOverrideStateAsync(ctx workflow.Context, input *codecommit.GetPullRequestOverrideStateInput) *CodecommitGetPullRequestOverrideStateFuture

	GetRepository(ctx workflow.Context, input *codecommit.GetRepositoryInput) (*codecommit.GetRepositoryOutput, error)
	GetRepositoryAsync(ctx workflow.Context, input *codecommit.GetRepositoryInput) *CodecommitGetRepositoryFuture

	GetRepositoryTriggers(ctx workflow.Context, input *codecommit.GetRepositoryTriggersInput) (*codecommit.GetRepositoryTriggersOutput, error)
	GetRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.GetRepositoryTriggersInput) *CodecommitGetRepositoryTriggersFuture

	ListApprovalRuleTemplates(ctx workflow.Context, input *codecommit.ListApprovalRuleTemplatesInput) (*codecommit.ListApprovalRuleTemplatesOutput, error)
	ListApprovalRuleTemplatesAsync(ctx workflow.Context, input *codecommit.ListApprovalRuleTemplatesInput) *CodecommitListApprovalRuleTemplatesFuture

	ListAssociatedApprovalRuleTemplatesForRepository(ctx workflow.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput) (*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, error)
	ListAssociatedApprovalRuleTemplatesForRepositoryAsync(ctx workflow.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput) *CodecommitListAssociatedApprovalRuleTemplatesForRepositoryFuture

	ListBranches(ctx workflow.Context, input *codecommit.ListBranchesInput) (*codecommit.ListBranchesOutput, error)
	ListBranchesAsync(ctx workflow.Context, input *codecommit.ListBranchesInput) *CodecommitListBranchesFuture

	ListPullRequests(ctx workflow.Context, input *codecommit.ListPullRequestsInput) (*codecommit.ListPullRequestsOutput, error)
	ListPullRequestsAsync(ctx workflow.Context, input *codecommit.ListPullRequestsInput) *CodecommitListPullRequestsFuture

	ListRepositories(ctx workflow.Context, input *codecommit.ListRepositoriesInput) (*codecommit.ListRepositoriesOutput, error)
	ListRepositoriesAsync(ctx workflow.Context, input *codecommit.ListRepositoriesInput) *CodecommitListRepositoriesFuture

	ListRepositoriesForApprovalRuleTemplate(ctx workflow.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput) (*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, error)
	ListRepositoriesForApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput) *CodecommitListRepositoriesForApprovalRuleTemplateFuture

	ListTagsForResource(ctx workflow.Context, input *codecommit.ListTagsForResourceInput) (*codecommit.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *codecommit.ListTagsForResourceInput) *CodecommitListTagsForResourceFuture

	MergeBranchesByFastForward(ctx workflow.Context, input *codecommit.MergeBranchesByFastForwardInput) (*codecommit.MergeBranchesByFastForwardOutput, error)
	MergeBranchesByFastForwardAsync(ctx workflow.Context, input *codecommit.MergeBranchesByFastForwardInput) *CodecommitMergeBranchesByFastForwardFuture

	MergeBranchesBySquash(ctx workflow.Context, input *codecommit.MergeBranchesBySquashInput) (*codecommit.MergeBranchesBySquashOutput, error)
	MergeBranchesBySquashAsync(ctx workflow.Context, input *codecommit.MergeBranchesBySquashInput) *CodecommitMergeBranchesBySquashFuture

	MergeBranchesByThreeWay(ctx workflow.Context, input *codecommit.MergeBranchesByThreeWayInput) (*codecommit.MergeBranchesByThreeWayOutput, error)
	MergeBranchesByThreeWayAsync(ctx workflow.Context, input *codecommit.MergeBranchesByThreeWayInput) *CodecommitMergeBranchesByThreeWayFuture

	MergePullRequestByFastForward(ctx workflow.Context, input *codecommit.MergePullRequestByFastForwardInput) (*codecommit.MergePullRequestByFastForwardOutput, error)
	MergePullRequestByFastForwardAsync(ctx workflow.Context, input *codecommit.MergePullRequestByFastForwardInput) *CodecommitMergePullRequestByFastForwardFuture

	MergePullRequestBySquash(ctx workflow.Context, input *codecommit.MergePullRequestBySquashInput) (*codecommit.MergePullRequestBySquashOutput, error)
	MergePullRequestBySquashAsync(ctx workflow.Context, input *codecommit.MergePullRequestBySquashInput) *CodecommitMergePullRequestBySquashFuture

	MergePullRequestByThreeWay(ctx workflow.Context, input *codecommit.MergePullRequestByThreeWayInput) (*codecommit.MergePullRequestByThreeWayOutput, error)
	MergePullRequestByThreeWayAsync(ctx workflow.Context, input *codecommit.MergePullRequestByThreeWayInput) *CodecommitMergePullRequestByThreeWayFuture

	OverridePullRequestApprovalRules(ctx workflow.Context, input *codecommit.OverridePullRequestApprovalRulesInput) (*codecommit.OverridePullRequestApprovalRulesOutput, error)
	OverridePullRequestApprovalRulesAsync(ctx workflow.Context, input *codecommit.OverridePullRequestApprovalRulesInput) *CodecommitOverridePullRequestApprovalRulesFuture

	PostCommentForComparedCommit(ctx workflow.Context, input *codecommit.PostCommentForComparedCommitInput) (*codecommit.PostCommentForComparedCommitOutput, error)
	PostCommentForComparedCommitAsync(ctx workflow.Context, input *codecommit.PostCommentForComparedCommitInput) *CodecommitPostCommentForComparedCommitFuture

	PostCommentReply(ctx workflow.Context, input *codecommit.PostCommentReplyInput) (*codecommit.PostCommentReplyOutput, error)
	PostCommentReplyAsync(ctx workflow.Context, input *codecommit.PostCommentReplyInput) *CodecommitPostCommentReplyFuture

	PutCommentReaction(ctx workflow.Context, input *codecommit.PutCommentReactionInput) (*codecommit.PutCommentReactionOutput, error)
	PutCommentReactionAsync(ctx workflow.Context, input *codecommit.PutCommentReactionInput) *CodecommitPutCommentReactionFuture

	PutFile(ctx workflow.Context, input *codecommit.PutFileInput) (*codecommit.PutFileOutput, error)
	PutFileAsync(ctx workflow.Context, input *codecommit.PutFileInput) *CodecommitPutFileFuture

	PutRepositoryTriggers(ctx workflow.Context, input *codecommit.PutRepositoryTriggersInput) (*codecommit.PutRepositoryTriggersOutput, error)
	PutRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.PutRepositoryTriggersInput) *CodecommitPutRepositoryTriggersFuture

	TagResource(ctx workflow.Context, input *codecommit.TagResourceInput) (*codecommit.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *codecommit.TagResourceInput) *CodecommitTagResourceFuture

	TestRepositoryTriggers(ctx workflow.Context, input *codecommit.TestRepositoryTriggersInput) (*codecommit.TestRepositoryTriggersOutput, error)
	TestRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.TestRepositoryTriggersInput) *CodecommitTestRepositoryTriggersFuture

	UntagResource(ctx workflow.Context, input *codecommit.UntagResourceInput) (*codecommit.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *codecommit.UntagResourceInput) *CodecommitUntagResourceFuture

	UpdateApprovalRuleTemplateContent(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateContentInput) (*codecommit.UpdateApprovalRuleTemplateContentOutput, error)
	UpdateApprovalRuleTemplateContentAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateContentInput) *CodecommitUpdateApprovalRuleTemplateContentFuture

	UpdateApprovalRuleTemplateDescription(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateDescriptionInput) (*codecommit.UpdateApprovalRuleTemplateDescriptionOutput, error)
	UpdateApprovalRuleTemplateDescriptionAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateDescriptionInput) *CodecommitUpdateApprovalRuleTemplateDescriptionFuture

	UpdateApprovalRuleTemplateName(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateNameInput) (*codecommit.UpdateApprovalRuleTemplateNameOutput, error)
	UpdateApprovalRuleTemplateNameAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateNameInput) *CodecommitUpdateApprovalRuleTemplateNameFuture

	UpdateComment(ctx workflow.Context, input *codecommit.UpdateCommentInput) (*codecommit.UpdateCommentOutput, error)
	UpdateCommentAsync(ctx workflow.Context, input *codecommit.UpdateCommentInput) *CodecommitUpdateCommentFuture

	UpdateDefaultBranch(ctx workflow.Context, input *codecommit.UpdateDefaultBranchInput) (*codecommit.UpdateDefaultBranchOutput, error)
	UpdateDefaultBranchAsync(ctx workflow.Context, input *codecommit.UpdateDefaultBranchInput) *CodecommitUpdateDefaultBranchFuture

	UpdatePullRequestApprovalRuleContent(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalRuleContentInput) (*codecommit.UpdatePullRequestApprovalRuleContentOutput, error)
	UpdatePullRequestApprovalRuleContentAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalRuleContentInput) *CodecommitUpdatePullRequestApprovalRuleContentFuture

	UpdatePullRequestApprovalState(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalStateInput) (*codecommit.UpdatePullRequestApprovalStateOutput, error)
	UpdatePullRequestApprovalStateAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalStateInput) *CodecommitUpdatePullRequestApprovalStateFuture

	UpdatePullRequestDescription(ctx workflow.Context, input *codecommit.UpdatePullRequestDescriptionInput) (*codecommit.UpdatePullRequestDescriptionOutput, error)
	UpdatePullRequestDescriptionAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestDescriptionInput) *CodecommitUpdatePullRequestDescriptionFuture

	UpdatePullRequestStatus(ctx workflow.Context, input *codecommit.UpdatePullRequestStatusInput) (*codecommit.UpdatePullRequestStatusOutput, error)
	UpdatePullRequestStatusAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestStatusInput) *CodecommitUpdatePullRequestStatusFuture

	UpdatePullRequestTitle(ctx workflow.Context, input *codecommit.UpdatePullRequestTitleInput) (*codecommit.UpdatePullRequestTitleOutput, error)
	UpdatePullRequestTitleAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestTitleInput) *CodecommitUpdatePullRequestTitleFuture

	UpdateRepositoryDescription(ctx workflow.Context, input *codecommit.UpdateRepositoryDescriptionInput) (*codecommit.UpdateRepositoryDescriptionOutput, error)
	UpdateRepositoryDescriptionAsync(ctx workflow.Context, input *codecommit.UpdateRepositoryDescriptionInput) *CodecommitUpdateRepositoryDescriptionFuture

	UpdateRepositoryName(ctx workflow.Context, input *codecommit.UpdateRepositoryNameInput) (*codecommit.UpdateRepositoryNameOutput, error)
	UpdateRepositoryNameAsync(ctx workflow.Context, input *codecommit.UpdateRepositoryNameInput) *CodecommitUpdateRepositoryNameFuture
}

type CodeCommitStub struct{}

func NewCodeCommitStub() CodeCommitClient {
	return &CodeCommitStub{}
}

type CodecommitAssociateApprovalRuleTemplateWithRepositoryFuture struct {
	Future workflow.Future
}

func (r *CodecommitAssociateApprovalRuleTemplateWithRepositoryFuture) Get(ctx workflow.Context) (*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, error) {
	var output codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitBatchAssociateApprovalRuleTemplateWithRepositoriesFuture struct {
	Future workflow.Future
}

func (r *CodecommitBatchAssociateApprovalRuleTemplateWithRepositoriesFuture) Get(ctx workflow.Context) (*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, error) {
	var output codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitBatchDescribeMergeConflictsFuture struct {
	Future workflow.Future
}

func (r *CodecommitBatchDescribeMergeConflictsFuture) Get(ctx workflow.Context) (*codecommit.BatchDescribeMergeConflictsOutput, error) {
	var output codecommit.BatchDescribeMergeConflictsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitBatchDisassociateApprovalRuleTemplateFromRepositoriesFuture struct {
	Future workflow.Future
}

func (r *CodecommitBatchDisassociateApprovalRuleTemplateFromRepositoriesFuture) Get(ctx workflow.Context) (*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, error) {
	var output codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitBatchGetCommitsFuture struct {
	Future workflow.Future
}

func (r *CodecommitBatchGetCommitsFuture) Get(ctx workflow.Context) (*codecommit.BatchGetCommitsOutput, error) {
	var output codecommit.BatchGetCommitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitBatchGetRepositoriesFuture struct {
	Future workflow.Future
}

func (r *CodecommitBatchGetRepositoriesFuture) Get(ctx workflow.Context) (*codecommit.BatchGetRepositoriesOutput, error) {
	var output codecommit.BatchGetRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitCreateApprovalRuleTemplateFuture struct {
	Future workflow.Future
}

func (r *CodecommitCreateApprovalRuleTemplateFuture) Get(ctx workflow.Context) (*codecommit.CreateApprovalRuleTemplateOutput, error) {
	var output codecommit.CreateApprovalRuleTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitCreateBranchFuture struct {
	Future workflow.Future
}

func (r *CodecommitCreateBranchFuture) Get(ctx workflow.Context) (*codecommit.CreateBranchOutput, error) {
	var output codecommit.CreateBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitCreateCommitFuture struct {
	Future workflow.Future
}

func (r *CodecommitCreateCommitFuture) Get(ctx workflow.Context) (*codecommit.CreateCommitOutput, error) {
	var output codecommit.CreateCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitCreatePullRequestApprovalRuleFuture struct {
	Future workflow.Future
}

func (r *CodecommitCreatePullRequestApprovalRuleFuture) Get(ctx workflow.Context) (*codecommit.CreatePullRequestApprovalRuleOutput, error) {
	var output codecommit.CreatePullRequestApprovalRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitCreateRepositoryFuture struct {
	Future workflow.Future
}

func (r *CodecommitCreateRepositoryFuture) Get(ctx workflow.Context) (*codecommit.CreateRepositoryOutput, error) {
	var output codecommit.CreateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitCreateUnreferencedMergeCommitFuture struct {
	Future workflow.Future
}

func (r *CodecommitCreateUnreferencedMergeCommitFuture) Get(ctx workflow.Context) (*codecommit.CreateUnreferencedMergeCommitOutput, error) {
	var output codecommit.CreateUnreferencedMergeCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitDeleteApprovalRuleTemplateFuture struct {
	Future workflow.Future
}

func (r *CodecommitDeleteApprovalRuleTemplateFuture) Get(ctx workflow.Context) (*codecommit.DeleteApprovalRuleTemplateOutput, error) {
	var output codecommit.DeleteApprovalRuleTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitDeleteBranchFuture struct {
	Future workflow.Future
}

func (r *CodecommitDeleteBranchFuture) Get(ctx workflow.Context) (*codecommit.DeleteBranchOutput, error) {
	var output codecommit.DeleteBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitDeleteCommentContentFuture struct {
	Future workflow.Future
}

func (r *CodecommitDeleteCommentContentFuture) Get(ctx workflow.Context) (*codecommit.DeleteCommentContentOutput, error) {
	var output codecommit.DeleteCommentContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitDeleteFileFuture struct {
	Future workflow.Future
}

func (r *CodecommitDeleteFileFuture) Get(ctx workflow.Context) (*codecommit.DeleteFileOutput, error) {
	var output codecommit.DeleteFileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitDeletePullRequestApprovalRuleFuture struct {
	Future workflow.Future
}

func (r *CodecommitDeletePullRequestApprovalRuleFuture) Get(ctx workflow.Context) (*codecommit.DeletePullRequestApprovalRuleOutput, error) {
	var output codecommit.DeletePullRequestApprovalRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitDeleteRepositoryFuture struct {
	Future workflow.Future
}

func (r *CodecommitDeleteRepositoryFuture) Get(ctx workflow.Context) (*codecommit.DeleteRepositoryOutput, error) {
	var output codecommit.DeleteRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitDescribeMergeConflictsFuture struct {
	Future workflow.Future
}

func (r *CodecommitDescribeMergeConflictsFuture) Get(ctx workflow.Context) (*codecommit.DescribeMergeConflictsOutput, error) {
	var output codecommit.DescribeMergeConflictsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitDescribePullRequestEventsFuture struct {
	Future workflow.Future
}

func (r *CodecommitDescribePullRequestEventsFuture) Get(ctx workflow.Context) (*codecommit.DescribePullRequestEventsOutput, error) {
	var output codecommit.DescribePullRequestEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitDisassociateApprovalRuleTemplateFromRepositoryFuture struct {
	Future workflow.Future
}

func (r *CodecommitDisassociateApprovalRuleTemplateFromRepositoryFuture) Get(ctx workflow.Context) (*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, error) {
	var output codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitEvaluatePullRequestApprovalRulesFuture struct {
	Future workflow.Future
}

func (r *CodecommitEvaluatePullRequestApprovalRulesFuture) Get(ctx workflow.Context) (*codecommit.EvaluatePullRequestApprovalRulesOutput, error) {
	var output codecommit.EvaluatePullRequestApprovalRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetApprovalRuleTemplateFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetApprovalRuleTemplateFuture) Get(ctx workflow.Context) (*codecommit.GetApprovalRuleTemplateOutput, error) {
	var output codecommit.GetApprovalRuleTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetBlobFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetBlobFuture) Get(ctx workflow.Context) (*codecommit.GetBlobOutput, error) {
	var output codecommit.GetBlobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetBranchFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetBranchFuture) Get(ctx workflow.Context) (*codecommit.GetBranchOutput, error) {
	var output codecommit.GetBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetCommentFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetCommentFuture) Get(ctx workflow.Context) (*codecommit.GetCommentOutput, error) {
	var output codecommit.GetCommentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetCommentReactionsFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetCommentReactionsFuture) Get(ctx workflow.Context) (*codecommit.GetCommentReactionsOutput, error) {
	var output codecommit.GetCommentReactionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetCommentsForComparedCommitFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetCommentsForComparedCommitFuture) Get(ctx workflow.Context) (*codecommit.GetCommentsForComparedCommitOutput, error) {
	var output codecommit.GetCommentsForComparedCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetCommitFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetCommitFuture) Get(ctx workflow.Context) (*codecommit.GetCommitOutput, error) {
	var output codecommit.GetCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetDifferencesFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetDifferencesFuture) Get(ctx workflow.Context) (*codecommit.GetDifferencesOutput, error) {
	var output codecommit.GetDifferencesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetFileFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetFileFuture) Get(ctx workflow.Context) (*codecommit.GetFileOutput, error) {
	var output codecommit.GetFileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetFolderFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetFolderFuture) Get(ctx workflow.Context) (*codecommit.GetFolderOutput, error) {
	var output codecommit.GetFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetMergeCommitFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetMergeCommitFuture) Get(ctx workflow.Context) (*codecommit.GetMergeCommitOutput, error) {
	var output codecommit.GetMergeCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetMergeConflictsFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetMergeConflictsFuture) Get(ctx workflow.Context) (*codecommit.GetMergeConflictsOutput, error) {
	var output codecommit.GetMergeConflictsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetMergeOptionsFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetMergeOptionsFuture) Get(ctx workflow.Context) (*codecommit.GetMergeOptionsOutput, error) {
	var output codecommit.GetMergeOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetPullRequestApprovalStatesFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetPullRequestApprovalStatesFuture) Get(ctx workflow.Context) (*codecommit.GetPullRequestApprovalStatesOutput, error) {
	var output codecommit.GetPullRequestApprovalStatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetPullRequestOverrideStateFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetPullRequestOverrideStateFuture) Get(ctx workflow.Context) (*codecommit.GetPullRequestOverrideStateOutput, error) {
	var output codecommit.GetPullRequestOverrideStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetRepositoryFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetRepositoryFuture) Get(ctx workflow.Context) (*codecommit.GetRepositoryOutput, error) {
	var output codecommit.GetRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitGetRepositoryTriggersFuture struct {
	Future workflow.Future
}

func (r *CodecommitGetRepositoryTriggersFuture) Get(ctx workflow.Context) (*codecommit.GetRepositoryTriggersOutput, error) {
	var output codecommit.GetRepositoryTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitListApprovalRuleTemplatesFuture struct {
	Future workflow.Future
}

func (r *CodecommitListApprovalRuleTemplatesFuture) Get(ctx workflow.Context) (*codecommit.ListApprovalRuleTemplatesOutput, error) {
	var output codecommit.ListApprovalRuleTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitListAssociatedApprovalRuleTemplatesForRepositoryFuture struct {
	Future workflow.Future
}

func (r *CodecommitListAssociatedApprovalRuleTemplatesForRepositoryFuture) Get(ctx workflow.Context) (*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, error) {
	var output codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitListBranchesFuture struct {
	Future workflow.Future
}

func (r *CodecommitListBranchesFuture) Get(ctx workflow.Context) (*codecommit.ListBranchesOutput, error) {
	var output codecommit.ListBranchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitListPullRequestsFuture struct {
	Future workflow.Future
}

func (r *CodecommitListPullRequestsFuture) Get(ctx workflow.Context) (*codecommit.ListPullRequestsOutput, error) {
	var output codecommit.ListPullRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitListRepositoriesFuture struct {
	Future workflow.Future
}

func (r *CodecommitListRepositoriesFuture) Get(ctx workflow.Context) (*codecommit.ListRepositoriesOutput, error) {
	var output codecommit.ListRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitListRepositoriesForApprovalRuleTemplateFuture struct {
	Future workflow.Future
}

func (r *CodecommitListRepositoriesForApprovalRuleTemplateFuture) Get(ctx workflow.Context) (*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, error) {
	var output codecommit.ListRepositoriesForApprovalRuleTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *CodecommitListTagsForResourceFuture) Get(ctx workflow.Context) (*codecommit.ListTagsForResourceOutput, error) {
	var output codecommit.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitMergeBranchesByFastForwardFuture struct {
	Future workflow.Future
}

func (r *CodecommitMergeBranchesByFastForwardFuture) Get(ctx workflow.Context) (*codecommit.MergeBranchesByFastForwardOutput, error) {
	var output codecommit.MergeBranchesByFastForwardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitMergeBranchesBySquashFuture struct {
	Future workflow.Future
}

func (r *CodecommitMergeBranchesBySquashFuture) Get(ctx workflow.Context) (*codecommit.MergeBranchesBySquashOutput, error) {
	var output codecommit.MergeBranchesBySquashOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitMergeBranchesByThreeWayFuture struct {
	Future workflow.Future
}

func (r *CodecommitMergeBranchesByThreeWayFuture) Get(ctx workflow.Context) (*codecommit.MergeBranchesByThreeWayOutput, error) {
	var output codecommit.MergeBranchesByThreeWayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitMergePullRequestByFastForwardFuture struct {
	Future workflow.Future
}

func (r *CodecommitMergePullRequestByFastForwardFuture) Get(ctx workflow.Context) (*codecommit.MergePullRequestByFastForwardOutput, error) {
	var output codecommit.MergePullRequestByFastForwardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitMergePullRequestBySquashFuture struct {
	Future workflow.Future
}

func (r *CodecommitMergePullRequestBySquashFuture) Get(ctx workflow.Context) (*codecommit.MergePullRequestBySquashOutput, error) {
	var output codecommit.MergePullRequestBySquashOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitMergePullRequestByThreeWayFuture struct {
	Future workflow.Future
}

func (r *CodecommitMergePullRequestByThreeWayFuture) Get(ctx workflow.Context) (*codecommit.MergePullRequestByThreeWayOutput, error) {
	var output codecommit.MergePullRequestByThreeWayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitOverridePullRequestApprovalRulesFuture struct {
	Future workflow.Future
}

func (r *CodecommitOverridePullRequestApprovalRulesFuture) Get(ctx workflow.Context) (*codecommit.OverridePullRequestApprovalRulesOutput, error) {
	var output codecommit.OverridePullRequestApprovalRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitPostCommentForComparedCommitFuture struct {
	Future workflow.Future
}

func (r *CodecommitPostCommentForComparedCommitFuture) Get(ctx workflow.Context) (*codecommit.PostCommentForComparedCommitOutput, error) {
	var output codecommit.PostCommentForComparedCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitPostCommentReplyFuture struct {
	Future workflow.Future
}

func (r *CodecommitPostCommentReplyFuture) Get(ctx workflow.Context) (*codecommit.PostCommentReplyOutput, error) {
	var output codecommit.PostCommentReplyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitPutCommentReactionFuture struct {
	Future workflow.Future
}

func (r *CodecommitPutCommentReactionFuture) Get(ctx workflow.Context) (*codecommit.PutCommentReactionOutput, error) {
	var output codecommit.PutCommentReactionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitPutFileFuture struct {
	Future workflow.Future
}

func (r *CodecommitPutFileFuture) Get(ctx workflow.Context) (*codecommit.PutFileOutput, error) {
	var output codecommit.PutFileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitPutRepositoryTriggersFuture struct {
	Future workflow.Future
}

func (r *CodecommitPutRepositoryTriggersFuture) Get(ctx workflow.Context) (*codecommit.PutRepositoryTriggersOutput, error) {
	var output codecommit.PutRepositoryTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitTagResourceFuture struct {
	Future workflow.Future
}

func (r *CodecommitTagResourceFuture) Get(ctx workflow.Context) (*codecommit.TagResourceOutput, error) {
	var output codecommit.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitTestRepositoryTriggersFuture struct {
	Future workflow.Future
}

func (r *CodecommitTestRepositoryTriggersFuture) Get(ctx workflow.Context) (*codecommit.TestRepositoryTriggersOutput, error) {
	var output codecommit.TestRepositoryTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUntagResourceFuture struct {
	Future workflow.Future
}

func (r *CodecommitUntagResourceFuture) Get(ctx workflow.Context) (*codecommit.UntagResourceOutput, error) {
	var output codecommit.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUpdateApprovalRuleTemplateContentFuture struct {
	Future workflow.Future
}

func (r *CodecommitUpdateApprovalRuleTemplateContentFuture) Get(ctx workflow.Context) (*codecommit.UpdateApprovalRuleTemplateContentOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUpdateApprovalRuleTemplateDescriptionFuture struct {
	Future workflow.Future
}

func (r *CodecommitUpdateApprovalRuleTemplateDescriptionFuture) Get(ctx workflow.Context) (*codecommit.UpdateApprovalRuleTemplateDescriptionOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUpdateApprovalRuleTemplateNameFuture struct {
	Future workflow.Future
}

func (r *CodecommitUpdateApprovalRuleTemplateNameFuture) Get(ctx workflow.Context) (*codecommit.UpdateApprovalRuleTemplateNameOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUpdateCommentFuture struct {
	Future workflow.Future
}

func (r *CodecommitUpdateCommentFuture) Get(ctx workflow.Context) (*codecommit.UpdateCommentOutput, error) {
	var output codecommit.UpdateCommentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUpdateDefaultBranchFuture struct {
	Future workflow.Future
}

func (r *CodecommitUpdateDefaultBranchFuture) Get(ctx workflow.Context) (*codecommit.UpdateDefaultBranchOutput, error) {
	var output codecommit.UpdateDefaultBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUpdatePullRequestApprovalRuleContentFuture struct {
	Future workflow.Future
}

func (r *CodecommitUpdatePullRequestApprovalRuleContentFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestApprovalRuleContentOutput, error) {
	var output codecommit.UpdatePullRequestApprovalRuleContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUpdatePullRequestApprovalStateFuture struct {
	Future workflow.Future
}

func (r *CodecommitUpdatePullRequestApprovalStateFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestApprovalStateOutput, error) {
	var output codecommit.UpdatePullRequestApprovalStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUpdatePullRequestDescriptionFuture struct {
	Future workflow.Future
}

func (r *CodecommitUpdatePullRequestDescriptionFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestDescriptionOutput, error) {
	var output codecommit.UpdatePullRequestDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUpdatePullRequestStatusFuture struct {
	Future workflow.Future
}

func (r *CodecommitUpdatePullRequestStatusFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestStatusOutput, error) {
	var output codecommit.UpdatePullRequestStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUpdatePullRequestTitleFuture struct {
	Future workflow.Future
}

func (r *CodecommitUpdatePullRequestTitleFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestTitleOutput, error) {
	var output codecommit.UpdatePullRequestTitleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUpdateRepositoryDescriptionFuture struct {
	Future workflow.Future
}

func (r *CodecommitUpdateRepositoryDescriptionFuture) Get(ctx workflow.Context) (*codecommit.UpdateRepositoryDescriptionOutput, error) {
	var output codecommit.UpdateRepositoryDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodecommitUpdateRepositoryNameFuture struct {
	Future workflow.Future
}

func (r *CodecommitUpdateRepositoryNameFuture) Get(ctx workflow.Context) (*codecommit.UpdateRepositoryNameOutput, error) {
	var output codecommit.UpdateRepositoryNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) AssociateApprovalRuleTemplateWithRepository(ctx workflow.Context, input *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput) (*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, error) {
	var output codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.AssociateApprovalRuleTemplateWithRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) AssociateApprovalRuleTemplateWithRepositoryAsync(ctx workflow.Context, input *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput) *CodecommitAssociateApprovalRuleTemplateWithRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.AssociateApprovalRuleTemplateWithRepository", input)
	return &CodecommitAssociateApprovalRuleTemplateWithRepositoryFuture{Future: future}
}

func (a *CodeCommitStub) BatchAssociateApprovalRuleTemplateWithRepositories(ctx workflow.Context, input *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput) (*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, error) {
	var output codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchAssociateApprovalRuleTemplateWithRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) BatchAssociateApprovalRuleTemplateWithRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput) *CodecommitBatchAssociateApprovalRuleTemplateWithRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchAssociateApprovalRuleTemplateWithRepositories", input)
	return &CodecommitBatchAssociateApprovalRuleTemplateWithRepositoriesFuture{Future: future}
}

func (a *CodeCommitStub) BatchDescribeMergeConflicts(ctx workflow.Context, input *codecommit.BatchDescribeMergeConflictsInput) (*codecommit.BatchDescribeMergeConflictsOutput, error) {
	var output codecommit.BatchDescribeMergeConflictsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchDescribeMergeConflicts", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) BatchDescribeMergeConflictsAsync(ctx workflow.Context, input *codecommit.BatchDescribeMergeConflictsInput) *CodecommitBatchDescribeMergeConflictsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchDescribeMergeConflicts", input)
	return &CodecommitBatchDescribeMergeConflictsFuture{Future: future}
}

func (a *CodeCommitStub) BatchDisassociateApprovalRuleTemplateFromRepositories(ctx workflow.Context, input *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) (*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, error) {
	var output codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchDisassociateApprovalRuleTemplateFromRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) BatchDisassociateApprovalRuleTemplateFromRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) *CodecommitBatchDisassociateApprovalRuleTemplateFromRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchDisassociateApprovalRuleTemplateFromRepositories", input)
	return &CodecommitBatchDisassociateApprovalRuleTemplateFromRepositoriesFuture{Future: future}
}

func (a *CodeCommitStub) BatchGetCommits(ctx workflow.Context, input *codecommit.BatchGetCommitsInput) (*codecommit.BatchGetCommitsOutput, error) {
	var output codecommit.BatchGetCommitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchGetCommits", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) BatchGetCommitsAsync(ctx workflow.Context, input *codecommit.BatchGetCommitsInput) *CodecommitBatchGetCommitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchGetCommits", input)
	return &CodecommitBatchGetCommitsFuture{Future: future}
}

func (a *CodeCommitStub) BatchGetRepositories(ctx workflow.Context, input *codecommit.BatchGetRepositoriesInput) (*codecommit.BatchGetRepositoriesOutput, error) {
	var output codecommit.BatchGetRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchGetRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) BatchGetRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchGetRepositoriesInput) *CodecommitBatchGetRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.BatchGetRepositories", input)
	return &CodecommitBatchGetRepositoriesFuture{Future: future}
}

func (a *CodeCommitStub) CreateApprovalRuleTemplate(ctx workflow.Context, input *codecommit.CreateApprovalRuleTemplateInput) (*codecommit.CreateApprovalRuleTemplateOutput, error) {
	var output codecommit.CreateApprovalRuleTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateApprovalRuleTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) CreateApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.CreateApprovalRuleTemplateInput) *CodecommitCreateApprovalRuleTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateApprovalRuleTemplate", input)
	return &CodecommitCreateApprovalRuleTemplateFuture{Future: future}
}

func (a *CodeCommitStub) CreateBranch(ctx workflow.Context, input *codecommit.CreateBranchInput) (*codecommit.CreateBranchOutput, error) {
	var output codecommit.CreateBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) CreateBranchAsync(ctx workflow.Context, input *codecommit.CreateBranchInput) *CodecommitCreateBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateBranch", input)
	return &CodecommitCreateBranchFuture{Future: future}
}

func (a *CodeCommitStub) CreateCommit(ctx workflow.Context, input *codecommit.CreateCommitInput) (*codecommit.CreateCommitOutput, error) {
	var output codecommit.CreateCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) CreateCommitAsync(ctx workflow.Context, input *codecommit.CreateCommitInput) *CodecommitCreateCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateCommit", input)
	return &CodecommitCreateCommitFuture{Future: future}
}

func (a *CodeCommitStub) CreatePullRequestApprovalRule(ctx workflow.Context, input *codecommit.CreatePullRequestApprovalRuleInput) (*codecommit.CreatePullRequestApprovalRuleOutput, error) {
	var output codecommit.CreatePullRequestApprovalRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.CreatePullRequestApprovalRule", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) CreatePullRequestApprovalRuleAsync(ctx workflow.Context, input *codecommit.CreatePullRequestApprovalRuleInput) *CodecommitCreatePullRequestApprovalRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.CreatePullRequestApprovalRule", input)
	return &CodecommitCreatePullRequestApprovalRuleFuture{Future: future}
}

func (a *CodeCommitStub) CreateRepository(ctx workflow.Context, input *codecommit.CreateRepositoryInput) (*codecommit.CreateRepositoryOutput, error) {
	var output codecommit.CreateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) CreateRepositoryAsync(ctx workflow.Context, input *codecommit.CreateRepositoryInput) *CodecommitCreateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateRepository", input)
	return &CodecommitCreateRepositoryFuture{Future: future}
}

func (a *CodeCommitStub) CreateUnreferencedMergeCommit(ctx workflow.Context, input *codecommit.CreateUnreferencedMergeCommitInput) (*codecommit.CreateUnreferencedMergeCommitOutput, error) {
	var output codecommit.CreateUnreferencedMergeCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateUnreferencedMergeCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) CreateUnreferencedMergeCommitAsync(ctx workflow.Context, input *codecommit.CreateUnreferencedMergeCommitInput) *CodecommitCreateUnreferencedMergeCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.CreateUnreferencedMergeCommit", input)
	return &CodecommitCreateUnreferencedMergeCommitFuture{Future: future}
}

func (a *CodeCommitStub) DeleteApprovalRuleTemplate(ctx workflow.Context, input *codecommit.DeleteApprovalRuleTemplateInput) (*codecommit.DeleteApprovalRuleTemplateOutput, error) {
	var output codecommit.DeleteApprovalRuleTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteApprovalRuleTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DeleteApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.DeleteApprovalRuleTemplateInput) *CodecommitDeleteApprovalRuleTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteApprovalRuleTemplate", input)
	return &CodecommitDeleteApprovalRuleTemplateFuture{Future: future}
}

func (a *CodeCommitStub) DeleteBranch(ctx workflow.Context, input *codecommit.DeleteBranchInput) (*codecommit.DeleteBranchOutput, error) {
	var output codecommit.DeleteBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DeleteBranchAsync(ctx workflow.Context, input *codecommit.DeleteBranchInput) *CodecommitDeleteBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteBranch", input)
	return &CodecommitDeleteBranchFuture{Future: future}
}

func (a *CodeCommitStub) DeleteCommentContent(ctx workflow.Context, input *codecommit.DeleteCommentContentInput) (*codecommit.DeleteCommentContentOutput, error) {
	var output codecommit.DeleteCommentContentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteCommentContent", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DeleteCommentContentAsync(ctx workflow.Context, input *codecommit.DeleteCommentContentInput) *CodecommitDeleteCommentContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteCommentContent", input)
	return &CodecommitDeleteCommentContentFuture{Future: future}
}

func (a *CodeCommitStub) DeleteFile(ctx workflow.Context, input *codecommit.DeleteFileInput) (*codecommit.DeleteFileOutput, error) {
	var output codecommit.DeleteFileOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteFile", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DeleteFileAsync(ctx workflow.Context, input *codecommit.DeleteFileInput) *CodecommitDeleteFileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteFile", input)
	return &CodecommitDeleteFileFuture{Future: future}
}

func (a *CodeCommitStub) DeletePullRequestApprovalRule(ctx workflow.Context, input *codecommit.DeletePullRequestApprovalRuleInput) (*codecommit.DeletePullRequestApprovalRuleOutput, error) {
	var output codecommit.DeletePullRequestApprovalRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DeletePullRequestApprovalRule", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DeletePullRequestApprovalRuleAsync(ctx workflow.Context, input *codecommit.DeletePullRequestApprovalRuleInput) *CodecommitDeletePullRequestApprovalRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DeletePullRequestApprovalRule", input)
	return &CodecommitDeletePullRequestApprovalRuleFuture{Future: future}
}

func (a *CodeCommitStub) DeleteRepository(ctx workflow.Context, input *codecommit.DeleteRepositoryInput) (*codecommit.DeleteRepositoryOutput, error) {
	var output codecommit.DeleteRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DeleteRepositoryAsync(ctx workflow.Context, input *codecommit.DeleteRepositoryInput) *CodecommitDeleteRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DeleteRepository", input)
	return &CodecommitDeleteRepositoryFuture{Future: future}
}

func (a *CodeCommitStub) DescribeMergeConflicts(ctx workflow.Context, input *codecommit.DescribeMergeConflictsInput) (*codecommit.DescribeMergeConflictsOutput, error) {
	var output codecommit.DescribeMergeConflictsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DescribeMergeConflicts", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DescribeMergeConflictsAsync(ctx workflow.Context, input *codecommit.DescribeMergeConflictsInput) *CodecommitDescribeMergeConflictsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DescribeMergeConflicts", input)
	return &CodecommitDescribeMergeConflictsFuture{Future: future}
}

func (a *CodeCommitStub) DescribePullRequestEvents(ctx workflow.Context, input *codecommit.DescribePullRequestEventsInput) (*codecommit.DescribePullRequestEventsOutput, error) {
	var output codecommit.DescribePullRequestEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DescribePullRequestEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DescribePullRequestEventsAsync(ctx workflow.Context, input *codecommit.DescribePullRequestEventsInput) *CodecommitDescribePullRequestEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DescribePullRequestEvents", input)
	return &CodecommitDescribePullRequestEventsFuture{Future: future}
}

func (a *CodeCommitStub) DisassociateApprovalRuleTemplateFromRepository(ctx workflow.Context, input *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput) (*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, error) {
	var output codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.DisassociateApprovalRuleTemplateFromRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) DisassociateApprovalRuleTemplateFromRepositoryAsync(ctx workflow.Context, input *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput) *CodecommitDisassociateApprovalRuleTemplateFromRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.DisassociateApprovalRuleTemplateFromRepository", input)
	return &CodecommitDisassociateApprovalRuleTemplateFromRepositoryFuture{Future: future}
}

func (a *CodeCommitStub) EvaluatePullRequestApprovalRules(ctx workflow.Context, input *codecommit.EvaluatePullRequestApprovalRulesInput) (*codecommit.EvaluatePullRequestApprovalRulesOutput, error) {
	var output codecommit.EvaluatePullRequestApprovalRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.EvaluatePullRequestApprovalRules", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) EvaluatePullRequestApprovalRulesAsync(ctx workflow.Context, input *codecommit.EvaluatePullRequestApprovalRulesInput) *CodecommitEvaluatePullRequestApprovalRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.EvaluatePullRequestApprovalRules", input)
	return &CodecommitEvaluatePullRequestApprovalRulesFuture{Future: future}
}

func (a *CodeCommitStub) GetApprovalRuleTemplate(ctx workflow.Context, input *codecommit.GetApprovalRuleTemplateInput) (*codecommit.GetApprovalRuleTemplateOutput, error) {
	var output codecommit.GetApprovalRuleTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetApprovalRuleTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.GetApprovalRuleTemplateInput) *CodecommitGetApprovalRuleTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetApprovalRuleTemplate", input)
	return &CodecommitGetApprovalRuleTemplateFuture{Future: future}
}

func (a *CodeCommitStub) GetBlob(ctx workflow.Context, input *codecommit.GetBlobInput) (*codecommit.GetBlobOutput, error) {
	var output codecommit.GetBlobOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetBlob", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetBlobAsync(ctx workflow.Context, input *codecommit.GetBlobInput) *CodecommitGetBlobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetBlob", input)
	return &CodecommitGetBlobFuture{Future: future}
}

func (a *CodeCommitStub) GetBranch(ctx workflow.Context, input *codecommit.GetBranchInput) (*codecommit.GetBranchOutput, error) {
	var output codecommit.GetBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetBranchAsync(ctx workflow.Context, input *codecommit.GetBranchInput) *CodecommitGetBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetBranch", input)
	return &CodecommitGetBranchFuture{Future: future}
}

func (a *CodeCommitStub) GetComment(ctx workflow.Context, input *codecommit.GetCommentInput) (*codecommit.GetCommentOutput, error) {
	var output codecommit.GetCommentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetComment", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetCommentAsync(ctx workflow.Context, input *codecommit.GetCommentInput) *CodecommitGetCommentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetComment", input)
	return &CodecommitGetCommentFuture{Future: future}
}

func (a *CodeCommitStub) GetCommentReactions(ctx workflow.Context, input *codecommit.GetCommentReactionsInput) (*codecommit.GetCommentReactionsOutput, error) {
	var output codecommit.GetCommentReactionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetCommentReactions", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetCommentReactionsAsync(ctx workflow.Context, input *codecommit.GetCommentReactionsInput) *CodecommitGetCommentReactionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetCommentReactions", input)
	return &CodecommitGetCommentReactionsFuture{Future: future}
}

func (a *CodeCommitStub) GetCommentsForComparedCommit(ctx workflow.Context, input *codecommit.GetCommentsForComparedCommitInput) (*codecommit.GetCommentsForComparedCommitOutput, error) {
	var output codecommit.GetCommentsForComparedCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetCommentsForComparedCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetCommentsForComparedCommitAsync(ctx workflow.Context, input *codecommit.GetCommentsForComparedCommitInput) *CodecommitGetCommentsForComparedCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetCommentsForComparedCommit", input)
	return &CodecommitGetCommentsForComparedCommitFuture{Future: future}
}

func (a *CodeCommitStub) GetCommit(ctx workflow.Context, input *codecommit.GetCommitInput) (*codecommit.GetCommitOutput, error) {
	var output codecommit.GetCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetCommitAsync(ctx workflow.Context, input *codecommit.GetCommitInput) *CodecommitGetCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetCommit", input)
	return &CodecommitGetCommitFuture{Future: future}
}

func (a *CodeCommitStub) GetDifferences(ctx workflow.Context, input *codecommit.GetDifferencesInput) (*codecommit.GetDifferencesOutput, error) {
	var output codecommit.GetDifferencesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetDifferences", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetDifferencesAsync(ctx workflow.Context, input *codecommit.GetDifferencesInput) *CodecommitGetDifferencesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetDifferences", input)
	return &CodecommitGetDifferencesFuture{Future: future}
}

func (a *CodeCommitStub) GetFile(ctx workflow.Context, input *codecommit.GetFileInput) (*codecommit.GetFileOutput, error) {
	var output codecommit.GetFileOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetFile", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetFileAsync(ctx workflow.Context, input *codecommit.GetFileInput) *CodecommitGetFileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetFile", input)
	return &CodecommitGetFileFuture{Future: future}
}

func (a *CodeCommitStub) GetFolder(ctx workflow.Context, input *codecommit.GetFolderInput) (*codecommit.GetFolderOutput, error) {
	var output codecommit.GetFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetFolderAsync(ctx workflow.Context, input *codecommit.GetFolderInput) *CodecommitGetFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetFolder", input)
	return &CodecommitGetFolderFuture{Future: future}
}

func (a *CodeCommitStub) GetMergeCommit(ctx workflow.Context, input *codecommit.GetMergeCommitInput) (*codecommit.GetMergeCommitOutput, error) {
	var output codecommit.GetMergeCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetMergeCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetMergeCommitAsync(ctx workflow.Context, input *codecommit.GetMergeCommitInput) *CodecommitGetMergeCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetMergeCommit", input)
	return &CodecommitGetMergeCommitFuture{Future: future}
}

func (a *CodeCommitStub) GetMergeConflicts(ctx workflow.Context, input *codecommit.GetMergeConflictsInput) (*codecommit.GetMergeConflictsOutput, error) {
	var output codecommit.GetMergeConflictsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetMergeConflicts", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetMergeConflictsAsync(ctx workflow.Context, input *codecommit.GetMergeConflictsInput) *CodecommitGetMergeConflictsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetMergeConflicts", input)
	return &CodecommitGetMergeConflictsFuture{Future: future}
}

func (a *CodeCommitStub) GetMergeOptions(ctx workflow.Context, input *codecommit.GetMergeOptionsInput) (*codecommit.GetMergeOptionsOutput, error) {
	var output codecommit.GetMergeOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetMergeOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetMergeOptionsAsync(ctx workflow.Context, input *codecommit.GetMergeOptionsInput) *CodecommitGetMergeOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetMergeOptions", input)
	return &CodecommitGetMergeOptionsFuture{Future: future}
}

func (a *CodeCommitStub) GetPullRequestApprovalStates(ctx workflow.Context, input *codecommit.GetPullRequestApprovalStatesInput) (*codecommit.GetPullRequestApprovalStatesOutput, error) {
	var output codecommit.GetPullRequestApprovalStatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetPullRequestApprovalStates", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetPullRequestApprovalStatesAsync(ctx workflow.Context, input *codecommit.GetPullRequestApprovalStatesInput) *CodecommitGetPullRequestApprovalStatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetPullRequestApprovalStates", input)
	return &CodecommitGetPullRequestApprovalStatesFuture{Future: future}
}

func (a *CodeCommitStub) GetPullRequestOverrideState(ctx workflow.Context, input *codecommit.GetPullRequestOverrideStateInput) (*codecommit.GetPullRequestOverrideStateOutput, error) {
	var output codecommit.GetPullRequestOverrideStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetPullRequestOverrideState", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetPullRequestOverrideStateAsync(ctx workflow.Context, input *codecommit.GetPullRequestOverrideStateInput) *CodecommitGetPullRequestOverrideStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetPullRequestOverrideState", input)
	return &CodecommitGetPullRequestOverrideStateFuture{Future: future}
}

func (a *CodeCommitStub) GetRepository(ctx workflow.Context, input *codecommit.GetRepositoryInput) (*codecommit.GetRepositoryOutput, error) {
	var output codecommit.GetRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetRepositoryAsync(ctx workflow.Context, input *codecommit.GetRepositoryInput) *CodecommitGetRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetRepository", input)
	return &CodecommitGetRepositoryFuture{Future: future}
}

func (a *CodeCommitStub) GetRepositoryTriggers(ctx workflow.Context, input *codecommit.GetRepositoryTriggersInput) (*codecommit.GetRepositoryTriggersOutput, error) {
	var output codecommit.GetRepositoryTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.GetRepositoryTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) GetRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.GetRepositoryTriggersInput) *CodecommitGetRepositoryTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.GetRepositoryTriggers", input)
	return &CodecommitGetRepositoryTriggersFuture{Future: future}
}

func (a *CodeCommitStub) ListApprovalRuleTemplates(ctx workflow.Context, input *codecommit.ListApprovalRuleTemplatesInput) (*codecommit.ListApprovalRuleTemplatesOutput, error) {
	var output codecommit.ListApprovalRuleTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListApprovalRuleTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListApprovalRuleTemplatesAsync(ctx workflow.Context, input *codecommit.ListApprovalRuleTemplatesInput) *CodecommitListApprovalRuleTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListApprovalRuleTemplates", input)
	return &CodecommitListApprovalRuleTemplatesFuture{Future: future}
}

func (a *CodeCommitStub) ListAssociatedApprovalRuleTemplatesForRepository(ctx workflow.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput) (*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, error) {
	var output codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListAssociatedApprovalRuleTemplatesForRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListAssociatedApprovalRuleTemplatesForRepositoryAsync(ctx workflow.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput) *CodecommitListAssociatedApprovalRuleTemplatesForRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListAssociatedApprovalRuleTemplatesForRepository", input)
	return &CodecommitListAssociatedApprovalRuleTemplatesForRepositoryFuture{Future: future}
}

func (a *CodeCommitStub) ListBranches(ctx workflow.Context, input *codecommit.ListBranchesInput) (*codecommit.ListBranchesOutput, error) {
	var output codecommit.ListBranchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListBranches", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListBranchesAsync(ctx workflow.Context, input *codecommit.ListBranchesInput) *CodecommitListBranchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListBranches", input)
	return &CodecommitListBranchesFuture{Future: future}
}

func (a *CodeCommitStub) ListPullRequests(ctx workflow.Context, input *codecommit.ListPullRequestsInput) (*codecommit.ListPullRequestsOutput, error) {
	var output codecommit.ListPullRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListPullRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListPullRequestsAsync(ctx workflow.Context, input *codecommit.ListPullRequestsInput) *CodecommitListPullRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListPullRequests", input)
	return &CodecommitListPullRequestsFuture{Future: future}
}

func (a *CodeCommitStub) ListRepositories(ctx workflow.Context, input *codecommit.ListRepositoriesInput) (*codecommit.ListRepositoriesOutput, error) {
	var output codecommit.ListRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListRepositoriesAsync(ctx workflow.Context, input *codecommit.ListRepositoriesInput) *CodecommitListRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListRepositories", input)
	return &CodecommitListRepositoriesFuture{Future: future}
}

func (a *CodeCommitStub) ListRepositoriesForApprovalRuleTemplate(ctx workflow.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput) (*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, error) {
	var output codecommit.ListRepositoriesForApprovalRuleTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListRepositoriesForApprovalRuleTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListRepositoriesForApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput) *CodecommitListRepositoriesForApprovalRuleTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListRepositoriesForApprovalRuleTemplate", input)
	return &CodecommitListRepositoriesForApprovalRuleTemplateFuture{Future: future}
}

func (a *CodeCommitStub) ListTagsForResource(ctx workflow.Context, input *codecommit.ListTagsForResourceInput) (*codecommit.ListTagsForResourceOutput, error) {
	var output codecommit.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) ListTagsForResourceAsync(ctx workflow.Context, input *codecommit.ListTagsForResourceInput) *CodecommitListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.ListTagsForResource", input)
	return &CodecommitListTagsForResourceFuture{Future: future}
}

func (a *CodeCommitStub) MergeBranchesByFastForward(ctx workflow.Context, input *codecommit.MergeBranchesByFastForwardInput) (*codecommit.MergeBranchesByFastForwardOutput, error) {
	var output codecommit.MergeBranchesByFastForwardOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.MergeBranchesByFastForward", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) MergeBranchesByFastForwardAsync(ctx workflow.Context, input *codecommit.MergeBranchesByFastForwardInput) *CodecommitMergeBranchesByFastForwardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.MergeBranchesByFastForward", input)
	return &CodecommitMergeBranchesByFastForwardFuture{Future: future}
}

func (a *CodeCommitStub) MergeBranchesBySquash(ctx workflow.Context, input *codecommit.MergeBranchesBySquashInput) (*codecommit.MergeBranchesBySquashOutput, error) {
	var output codecommit.MergeBranchesBySquashOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.MergeBranchesBySquash", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) MergeBranchesBySquashAsync(ctx workflow.Context, input *codecommit.MergeBranchesBySquashInput) *CodecommitMergeBranchesBySquashFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.MergeBranchesBySquash", input)
	return &CodecommitMergeBranchesBySquashFuture{Future: future}
}

func (a *CodeCommitStub) MergeBranchesByThreeWay(ctx workflow.Context, input *codecommit.MergeBranchesByThreeWayInput) (*codecommit.MergeBranchesByThreeWayOutput, error) {
	var output codecommit.MergeBranchesByThreeWayOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.MergeBranchesByThreeWay", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) MergeBranchesByThreeWayAsync(ctx workflow.Context, input *codecommit.MergeBranchesByThreeWayInput) *CodecommitMergeBranchesByThreeWayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.MergeBranchesByThreeWay", input)
	return &CodecommitMergeBranchesByThreeWayFuture{Future: future}
}

func (a *CodeCommitStub) MergePullRequestByFastForward(ctx workflow.Context, input *codecommit.MergePullRequestByFastForwardInput) (*codecommit.MergePullRequestByFastForwardOutput, error) {
	var output codecommit.MergePullRequestByFastForwardOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.MergePullRequestByFastForward", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) MergePullRequestByFastForwardAsync(ctx workflow.Context, input *codecommit.MergePullRequestByFastForwardInput) *CodecommitMergePullRequestByFastForwardFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.MergePullRequestByFastForward", input)
	return &CodecommitMergePullRequestByFastForwardFuture{Future: future}
}

func (a *CodeCommitStub) MergePullRequestBySquash(ctx workflow.Context, input *codecommit.MergePullRequestBySquashInput) (*codecommit.MergePullRequestBySquashOutput, error) {
	var output codecommit.MergePullRequestBySquashOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.MergePullRequestBySquash", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) MergePullRequestBySquashAsync(ctx workflow.Context, input *codecommit.MergePullRequestBySquashInput) *CodecommitMergePullRequestBySquashFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.MergePullRequestBySquash", input)
	return &CodecommitMergePullRequestBySquashFuture{Future: future}
}

func (a *CodeCommitStub) MergePullRequestByThreeWay(ctx workflow.Context, input *codecommit.MergePullRequestByThreeWayInput) (*codecommit.MergePullRequestByThreeWayOutput, error) {
	var output codecommit.MergePullRequestByThreeWayOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.MergePullRequestByThreeWay", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) MergePullRequestByThreeWayAsync(ctx workflow.Context, input *codecommit.MergePullRequestByThreeWayInput) *CodecommitMergePullRequestByThreeWayFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.MergePullRequestByThreeWay", input)
	return &CodecommitMergePullRequestByThreeWayFuture{Future: future}
}

func (a *CodeCommitStub) OverridePullRequestApprovalRules(ctx workflow.Context, input *codecommit.OverridePullRequestApprovalRulesInput) (*codecommit.OverridePullRequestApprovalRulesOutput, error) {
	var output codecommit.OverridePullRequestApprovalRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.OverridePullRequestApprovalRules", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) OverridePullRequestApprovalRulesAsync(ctx workflow.Context, input *codecommit.OverridePullRequestApprovalRulesInput) *CodecommitOverridePullRequestApprovalRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.OverridePullRequestApprovalRules", input)
	return &CodecommitOverridePullRequestApprovalRulesFuture{Future: future}
}

func (a *CodeCommitStub) PostCommentForComparedCommit(ctx workflow.Context, input *codecommit.PostCommentForComparedCommitInput) (*codecommit.PostCommentForComparedCommitOutput, error) {
	var output codecommit.PostCommentForComparedCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.PostCommentForComparedCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) PostCommentForComparedCommitAsync(ctx workflow.Context, input *codecommit.PostCommentForComparedCommitInput) *CodecommitPostCommentForComparedCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.PostCommentForComparedCommit", input)
	return &CodecommitPostCommentForComparedCommitFuture{Future: future}
}

func (a *CodeCommitStub) PostCommentReply(ctx workflow.Context, input *codecommit.PostCommentReplyInput) (*codecommit.PostCommentReplyOutput, error) {
	var output codecommit.PostCommentReplyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.PostCommentReply", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) PostCommentReplyAsync(ctx workflow.Context, input *codecommit.PostCommentReplyInput) *CodecommitPostCommentReplyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.PostCommentReply", input)
	return &CodecommitPostCommentReplyFuture{Future: future}
}

func (a *CodeCommitStub) PutCommentReaction(ctx workflow.Context, input *codecommit.PutCommentReactionInput) (*codecommit.PutCommentReactionOutput, error) {
	var output codecommit.PutCommentReactionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.PutCommentReaction", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) PutCommentReactionAsync(ctx workflow.Context, input *codecommit.PutCommentReactionInput) *CodecommitPutCommentReactionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.PutCommentReaction", input)
	return &CodecommitPutCommentReactionFuture{Future: future}
}

func (a *CodeCommitStub) PutFile(ctx workflow.Context, input *codecommit.PutFileInput) (*codecommit.PutFileOutput, error) {
	var output codecommit.PutFileOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.PutFile", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) PutFileAsync(ctx workflow.Context, input *codecommit.PutFileInput) *CodecommitPutFileFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.PutFile", input)
	return &CodecommitPutFileFuture{Future: future}
}

func (a *CodeCommitStub) PutRepositoryTriggers(ctx workflow.Context, input *codecommit.PutRepositoryTriggersInput) (*codecommit.PutRepositoryTriggersOutput, error) {
	var output codecommit.PutRepositoryTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.PutRepositoryTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) PutRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.PutRepositoryTriggersInput) *CodecommitPutRepositoryTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.PutRepositoryTriggers", input)
	return &CodecommitPutRepositoryTriggersFuture{Future: future}
}

func (a *CodeCommitStub) TagResource(ctx workflow.Context, input *codecommit.TagResourceInput) (*codecommit.TagResourceOutput, error) {
	var output codecommit.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) TagResourceAsync(ctx workflow.Context, input *codecommit.TagResourceInput) *CodecommitTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.TagResource", input)
	return &CodecommitTagResourceFuture{Future: future}
}

func (a *CodeCommitStub) TestRepositoryTriggers(ctx workflow.Context, input *codecommit.TestRepositoryTriggersInput) (*codecommit.TestRepositoryTriggersOutput, error) {
	var output codecommit.TestRepositoryTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.TestRepositoryTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) TestRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.TestRepositoryTriggersInput) *CodecommitTestRepositoryTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.TestRepositoryTriggers", input)
	return &CodecommitTestRepositoryTriggersFuture{Future: future}
}

func (a *CodeCommitStub) UntagResource(ctx workflow.Context, input *codecommit.UntagResourceInput) (*codecommit.UntagResourceOutput, error) {
	var output codecommit.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UntagResourceAsync(ctx workflow.Context, input *codecommit.UntagResourceInput) *CodecommitUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UntagResource", input)
	return &CodecommitUntagResourceFuture{Future: future}
}

func (a *CodeCommitStub) UpdateApprovalRuleTemplateContent(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateContentInput) (*codecommit.UpdateApprovalRuleTemplateContentOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateContentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateApprovalRuleTemplateContent", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateApprovalRuleTemplateContentAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateContentInput) *CodecommitUpdateApprovalRuleTemplateContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateApprovalRuleTemplateContent", input)
	return &CodecommitUpdateApprovalRuleTemplateContentFuture{Future: future}
}

func (a *CodeCommitStub) UpdateApprovalRuleTemplateDescription(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateDescriptionInput) (*codecommit.UpdateApprovalRuleTemplateDescriptionOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateApprovalRuleTemplateDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateApprovalRuleTemplateDescriptionAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateDescriptionInput) *CodecommitUpdateApprovalRuleTemplateDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateApprovalRuleTemplateDescription", input)
	return &CodecommitUpdateApprovalRuleTemplateDescriptionFuture{Future: future}
}

func (a *CodeCommitStub) UpdateApprovalRuleTemplateName(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateNameInput) (*codecommit.UpdateApprovalRuleTemplateNameOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateNameOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateApprovalRuleTemplateName", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateApprovalRuleTemplateNameAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateNameInput) *CodecommitUpdateApprovalRuleTemplateNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateApprovalRuleTemplateName", input)
	return &CodecommitUpdateApprovalRuleTemplateNameFuture{Future: future}
}

func (a *CodeCommitStub) UpdateComment(ctx workflow.Context, input *codecommit.UpdateCommentInput) (*codecommit.UpdateCommentOutput, error) {
	var output codecommit.UpdateCommentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateComment", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateCommentAsync(ctx workflow.Context, input *codecommit.UpdateCommentInput) *CodecommitUpdateCommentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateComment", input)
	return &CodecommitUpdateCommentFuture{Future: future}
}

func (a *CodeCommitStub) UpdateDefaultBranch(ctx workflow.Context, input *codecommit.UpdateDefaultBranchInput) (*codecommit.UpdateDefaultBranchOutput, error) {
	var output codecommit.UpdateDefaultBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateDefaultBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateDefaultBranchAsync(ctx workflow.Context, input *codecommit.UpdateDefaultBranchInput) *CodecommitUpdateDefaultBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateDefaultBranch", input)
	return &CodecommitUpdateDefaultBranchFuture{Future: future}
}

func (a *CodeCommitStub) UpdatePullRequestApprovalRuleContent(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalRuleContentInput) (*codecommit.UpdatePullRequestApprovalRuleContentOutput, error) {
	var output codecommit.UpdatePullRequestApprovalRuleContentOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestApprovalRuleContent", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdatePullRequestApprovalRuleContentAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalRuleContentInput) *CodecommitUpdatePullRequestApprovalRuleContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestApprovalRuleContent", input)
	return &CodecommitUpdatePullRequestApprovalRuleContentFuture{Future: future}
}

func (a *CodeCommitStub) UpdatePullRequestApprovalState(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalStateInput) (*codecommit.UpdatePullRequestApprovalStateOutput, error) {
	var output codecommit.UpdatePullRequestApprovalStateOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestApprovalState", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdatePullRequestApprovalStateAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalStateInput) *CodecommitUpdatePullRequestApprovalStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestApprovalState", input)
	return &CodecommitUpdatePullRequestApprovalStateFuture{Future: future}
}

func (a *CodeCommitStub) UpdatePullRequestDescription(ctx workflow.Context, input *codecommit.UpdatePullRequestDescriptionInput) (*codecommit.UpdatePullRequestDescriptionOutput, error) {
	var output codecommit.UpdatePullRequestDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdatePullRequestDescriptionAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestDescriptionInput) *CodecommitUpdatePullRequestDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestDescription", input)
	return &CodecommitUpdatePullRequestDescriptionFuture{Future: future}
}

func (a *CodeCommitStub) UpdatePullRequestStatus(ctx workflow.Context, input *codecommit.UpdatePullRequestStatusInput) (*codecommit.UpdatePullRequestStatusOutput, error) {
	var output codecommit.UpdatePullRequestStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdatePullRequestStatusAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestStatusInput) *CodecommitUpdatePullRequestStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestStatus", input)
	return &CodecommitUpdatePullRequestStatusFuture{Future: future}
}

func (a *CodeCommitStub) UpdatePullRequestTitle(ctx workflow.Context, input *codecommit.UpdatePullRequestTitleInput) (*codecommit.UpdatePullRequestTitleOutput, error) {
	var output codecommit.UpdatePullRequestTitleOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestTitle", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdatePullRequestTitleAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestTitleInput) *CodecommitUpdatePullRequestTitleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdatePullRequestTitle", input)
	return &CodecommitUpdatePullRequestTitleFuture{Future: future}
}

func (a *CodeCommitStub) UpdateRepositoryDescription(ctx workflow.Context, input *codecommit.UpdateRepositoryDescriptionInput) (*codecommit.UpdateRepositoryDescriptionOutput, error) {
	var output codecommit.UpdateRepositoryDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateRepositoryDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateRepositoryDescriptionAsync(ctx workflow.Context, input *codecommit.UpdateRepositoryDescriptionInput) *CodecommitUpdateRepositoryDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateRepositoryDescription", input)
	return &CodecommitUpdateRepositoryDescriptionFuture{Future: future}
}

func (a *CodeCommitStub) UpdateRepositoryName(ctx workflow.Context, input *codecommit.UpdateRepositoryNameInput) (*codecommit.UpdateRepositoryNameOutput, error) {
	var output codecommit.UpdateRepositoryNameOutput
	err := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateRepositoryName", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeCommitStub) UpdateRepositoryNameAsync(ctx workflow.Context, input *codecommit.UpdateRepositoryNameInput) *CodecommitUpdateRepositoryNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codecommit.UpdateRepositoryName", input)
	return &CodecommitUpdateRepositoryNameFuture{Future: future}
}
