// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/worklink"
	"go.temporal.io/sdk/workflow"
)

type WorkLinkClient interface {
	AssociateDomain(ctx workflow.Context, input *worklink.AssociateDomainInput) (*worklink.AssociateDomainOutput, error)
	AssociateDomainAsync(ctx workflow.Context, input *worklink.AssociateDomainInput) *WorklinkAssociateDomainFuture

	AssociateWebsiteAuthorizationProvider(ctx workflow.Context, input *worklink.AssociateWebsiteAuthorizationProviderInput) (*worklink.AssociateWebsiteAuthorizationProviderOutput, error)
	AssociateWebsiteAuthorizationProviderAsync(ctx workflow.Context, input *worklink.AssociateWebsiteAuthorizationProviderInput) *WorklinkAssociateWebsiteAuthorizationProviderFuture

	AssociateWebsiteCertificateAuthority(ctx workflow.Context, input *worklink.AssociateWebsiteCertificateAuthorityInput) (*worklink.AssociateWebsiteCertificateAuthorityOutput, error)
	AssociateWebsiteCertificateAuthorityAsync(ctx workflow.Context, input *worklink.AssociateWebsiteCertificateAuthorityInput) *WorklinkAssociateWebsiteCertificateAuthorityFuture

	CreateFleet(ctx workflow.Context, input *worklink.CreateFleetInput) (*worklink.CreateFleetOutput, error)
	CreateFleetAsync(ctx workflow.Context, input *worklink.CreateFleetInput) *WorklinkCreateFleetFuture

	DeleteFleet(ctx workflow.Context, input *worklink.DeleteFleetInput) (*worklink.DeleteFleetOutput, error)
	DeleteFleetAsync(ctx workflow.Context, input *worklink.DeleteFleetInput) *WorklinkDeleteFleetFuture

	DescribeAuditStreamConfiguration(ctx workflow.Context, input *worklink.DescribeAuditStreamConfigurationInput) (*worklink.DescribeAuditStreamConfigurationOutput, error)
	DescribeAuditStreamConfigurationAsync(ctx workflow.Context, input *worklink.DescribeAuditStreamConfigurationInput) *WorklinkDescribeAuditStreamConfigurationFuture

	DescribeCompanyNetworkConfiguration(ctx workflow.Context, input *worklink.DescribeCompanyNetworkConfigurationInput) (*worklink.DescribeCompanyNetworkConfigurationOutput, error)
	DescribeCompanyNetworkConfigurationAsync(ctx workflow.Context, input *worklink.DescribeCompanyNetworkConfigurationInput) *WorklinkDescribeCompanyNetworkConfigurationFuture

	DescribeDevice(ctx workflow.Context, input *worklink.DescribeDeviceInput) (*worklink.DescribeDeviceOutput, error)
	DescribeDeviceAsync(ctx workflow.Context, input *worklink.DescribeDeviceInput) *WorklinkDescribeDeviceFuture

	DescribeDevicePolicyConfiguration(ctx workflow.Context, input *worklink.DescribeDevicePolicyConfigurationInput) (*worklink.DescribeDevicePolicyConfigurationOutput, error)
	DescribeDevicePolicyConfigurationAsync(ctx workflow.Context, input *worklink.DescribeDevicePolicyConfigurationInput) *WorklinkDescribeDevicePolicyConfigurationFuture

	DescribeDomain(ctx workflow.Context, input *worklink.DescribeDomainInput) (*worklink.DescribeDomainOutput, error)
	DescribeDomainAsync(ctx workflow.Context, input *worklink.DescribeDomainInput) *WorklinkDescribeDomainFuture

	DescribeFleetMetadata(ctx workflow.Context, input *worklink.DescribeFleetMetadataInput) (*worklink.DescribeFleetMetadataOutput, error)
	DescribeFleetMetadataAsync(ctx workflow.Context, input *worklink.DescribeFleetMetadataInput) *WorklinkDescribeFleetMetadataFuture

	DescribeIdentityProviderConfiguration(ctx workflow.Context, input *worklink.DescribeIdentityProviderConfigurationInput) (*worklink.DescribeIdentityProviderConfigurationOutput, error)
	DescribeIdentityProviderConfigurationAsync(ctx workflow.Context, input *worklink.DescribeIdentityProviderConfigurationInput) *WorklinkDescribeIdentityProviderConfigurationFuture

	DescribeWebsiteCertificateAuthority(ctx workflow.Context, input *worklink.DescribeWebsiteCertificateAuthorityInput) (*worklink.DescribeWebsiteCertificateAuthorityOutput, error)
	DescribeWebsiteCertificateAuthorityAsync(ctx workflow.Context, input *worklink.DescribeWebsiteCertificateAuthorityInput) *WorklinkDescribeWebsiteCertificateAuthorityFuture

	DisassociateDomain(ctx workflow.Context, input *worklink.DisassociateDomainInput) (*worklink.DisassociateDomainOutput, error)
	DisassociateDomainAsync(ctx workflow.Context, input *worklink.DisassociateDomainInput) *WorklinkDisassociateDomainFuture

	DisassociateWebsiteAuthorizationProvider(ctx workflow.Context, input *worklink.DisassociateWebsiteAuthorizationProviderInput) (*worklink.DisassociateWebsiteAuthorizationProviderOutput, error)
	DisassociateWebsiteAuthorizationProviderAsync(ctx workflow.Context, input *worklink.DisassociateWebsiteAuthorizationProviderInput) *WorklinkDisassociateWebsiteAuthorizationProviderFuture

	DisassociateWebsiteCertificateAuthority(ctx workflow.Context, input *worklink.DisassociateWebsiteCertificateAuthorityInput) (*worklink.DisassociateWebsiteCertificateAuthorityOutput, error)
	DisassociateWebsiteCertificateAuthorityAsync(ctx workflow.Context, input *worklink.DisassociateWebsiteCertificateAuthorityInput) *WorklinkDisassociateWebsiteCertificateAuthorityFuture

	ListDevices(ctx workflow.Context, input *worklink.ListDevicesInput) (*worklink.ListDevicesOutput, error)
	ListDevicesAsync(ctx workflow.Context, input *worklink.ListDevicesInput) *WorklinkListDevicesFuture

	ListDomains(ctx workflow.Context, input *worklink.ListDomainsInput) (*worklink.ListDomainsOutput, error)
	ListDomainsAsync(ctx workflow.Context, input *worklink.ListDomainsInput) *WorklinkListDomainsFuture

	ListFleets(ctx workflow.Context, input *worklink.ListFleetsInput) (*worklink.ListFleetsOutput, error)
	ListFleetsAsync(ctx workflow.Context, input *worklink.ListFleetsInput) *WorklinkListFleetsFuture

	ListTagsForResource(ctx workflow.Context, input *worklink.ListTagsForResourceInput) (*worklink.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *worklink.ListTagsForResourceInput) *WorklinkListTagsForResourceFuture

	ListWebsiteAuthorizationProviders(ctx workflow.Context, input *worklink.ListWebsiteAuthorizationProvidersInput) (*worklink.ListWebsiteAuthorizationProvidersOutput, error)
	ListWebsiteAuthorizationProvidersAsync(ctx workflow.Context, input *worklink.ListWebsiteAuthorizationProvidersInput) *WorklinkListWebsiteAuthorizationProvidersFuture

	ListWebsiteCertificateAuthorities(ctx workflow.Context, input *worklink.ListWebsiteCertificateAuthoritiesInput) (*worklink.ListWebsiteCertificateAuthoritiesOutput, error)
	ListWebsiteCertificateAuthoritiesAsync(ctx workflow.Context, input *worklink.ListWebsiteCertificateAuthoritiesInput) *WorklinkListWebsiteCertificateAuthoritiesFuture

	RestoreDomainAccess(ctx workflow.Context, input *worklink.RestoreDomainAccessInput) (*worklink.RestoreDomainAccessOutput, error)
	RestoreDomainAccessAsync(ctx workflow.Context, input *worklink.RestoreDomainAccessInput) *WorklinkRestoreDomainAccessFuture

	RevokeDomainAccess(ctx workflow.Context, input *worklink.RevokeDomainAccessInput) (*worklink.RevokeDomainAccessOutput, error)
	RevokeDomainAccessAsync(ctx workflow.Context, input *worklink.RevokeDomainAccessInput) *WorklinkRevokeDomainAccessFuture

	SignOutUser(ctx workflow.Context, input *worklink.SignOutUserInput) (*worklink.SignOutUserOutput, error)
	SignOutUserAsync(ctx workflow.Context, input *worklink.SignOutUserInput) *WorklinkSignOutUserFuture

	TagResource(ctx workflow.Context, input *worklink.TagResourceInput) (*worklink.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *worklink.TagResourceInput) *WorklinkTagResourceFuture

	UntagResource(ctx workflow.Context, input *worklink.UntagResourceInput) (*worklink.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *worklink.UntagResourceInput) *WorklinkUntagResourceFuture

	UpdateAuditStreamConfiguration(ctx workflow.Context, input *worklink.UpdateAuditStreamConfigurationInput) (*worklink.UpdateAuditStreamConfigurationOutput, error)
	UpdateAuditStreamConfigurationAsync(ctx workflow.Context, input *worklink.UpdateAuditStreamConfigurationInput) *WorklinkUpdateAuditStreamConfigurationFuture

	UpdateCompanyNetworkConfiguration(ctx workflow.Context, input *worklink.UpdateCompanyNetworkConfigurationInput) (*worklink.UpdateCompanyNetworkConfigurationOutput, error)
	UpdateCompanyNetworkConfigurationAsync(ctx workflow.Context, input *worklink.UpdateCompanyNetworkConfigurationInput) *WorklinkUpdateCompanyNetworkConfigurationFuture

	UpdateDevicePolicyConfiguration(ctx workflow.Context, input *worklink.UpdateDevicePolicyConfigurationInput) (*worklink.UpdateDevicePolicyConfigurationOutput, error)
	UpdateDevicePolicyConfigurationAsync(ctx workflow.Context, input *worklink.UpdateDevicePolicyConfigurationInput) *WorklinkUpdateDevicePolicyConfigurationFuture

	UpdateDomainMetadata(ctx workflow.Context, input *worklink.UpdateDomainMetadataInput) (*worklink.UpdateDomainMetadataOutput, error)
	UpdateDomainMetadataAsync(ctx workflow.Context, input *worklink.UpdateDomainMetadataInput) *WorklinkUpdateDomainMetadataFuture

	UpdateFleetMetadata(ctx workflow.Context, input *worklink.UpdateFleetMetadataInput) (*worklink.UpdateFleetMetadataOutput, error)
	UpdateFleetMetadataAsync(ctx workflow.Context, input *worklink.UpdateFleetMetadataInput) *WorklinkUpdateFleetMetadataFuture

	UpdateIdentityProviderConfiguration(ctx workflow.Context, input *worklink.UpdateIdentityProviderConfigurationInput) (*worklink.UpdateIdentityProviderConfigurationOutput, error)
	UpdateIdentityProviderConfigurationAsync(ctx workflow.Context, input *worklink.UpdateIdentityProviderConfigurationInput) *WorklinkUpdateIdentityProviderConfigurationFuture
}

type WorkLinkStub struct{}

func NewWorkLinkStub() WorkLinkClient {
	return &WorkLinkStub{}
}

type WorklinkAssociateDomainFuture struct {
	Future workflow.Future
}

func (r *WorklinkAssociateDomainFuture) Get(ctx workflow.Context) (*worklink.AssociateDomainOutput, error) {
	var output worklink.AssociateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkAssociateWebsiteAuthorizationProviderFuture struct {
	Future workflow.Future
}

func (r *WorklinkAssociateWebsiteAuthorizationProviderFuture) Get(ctx workflow.Context) (*worklink.AssociateWebsiteAuthorizationProviderOutput, error) {
	var output worklink.AssociateWebsiteAuthorizationProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkAssociateWebsiteCertificateAuthorityFuture struct {
	Future workflow.Future
}

func (r *WorklinkAssociateWebsiteCertificateAuthorityFuture) Get(ctx workflow.Context) (*worklink.AssociateWebsiteCertificateAuthorityOutput, error) {
	var output worklink.AssociateWebsiteCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkCreateFleetFuture struct {
	Future workflow.Future
}

func (r *WorklinkCreateFleetFuture) Get(ctx workflow.Context) (*worklink.CreateFleetOutput, error) {
	var output worklink.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkDeleteFleetFuture struct {
	Future workflow.Future
}

func (r *WorklinkDeleteFleetFuture) Get(ctx workflow.Context) (*worklink.DeleteFleetOutput, error) {
	var output worklink.DeleteFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkDescribeAuditStreamConfigurationFuture struct {
	Future workflow.Future
}

func (r *WorklinkDescribeAuditStreamConfigurationFuture) Get(ctx workflow.Context) (*worklink.DescribeAuditStreamConfigurationOutput, error) {
	var output worklink.DescribeAuditStreamConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkDescribeCompanyNetworkConfigurationFuture struct {
	Future workflow.Future
}

func (r *WorklinkDescribeCompanyNetworkConfigurationFuture) Get(ctx workflow.Context) (*worklink.DescribeCompanyNetworkConfigurationOutput, error) {
	var output worklink.DescribeCompanyNetworkConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkDescribeDeviceFuture struct {
	Future workflow.Future
}

func (r *WorklinkDescribeDeviceFuture) Get(ctx workflow.Context) (*worklink.DescribeDeviceOutput, error) {
	var output worklink.DescribeDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkDescribeDevicePolicyConfigurationFuture struct {
	Future workflow.Future
}

func (r *WorklinkDescribeDevicePolicyConfigurationFuture) Get(ctx workflow.Context) (*worklink.DescribeDevicePolicyConfigurationOutput, error) {
	var output worklink.DescribeDevicePolicyConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkDescribeDomainFuture struct {
	Future workflow.Future
}

func (r *WorklinkDescribeDomainFuture) Get(ctx workflow.Context) (*worklink.DescribeDomainOutput, error) {
	var output worklink.DescribeDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkDescribeFleetMetadataFuture struct {
	Future workflow.Future
}

func (r *WorklinkDescribeFleetMetadataFuture) Get(ctx workflow.Context) (*worklink.DescribeFleetMetadataOutput, error) {
	var output worklink.DescribeFleetMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkDescribeIdentityProviderConfigurationFuture struct {
	Future workflow.Future
}

func (r *WorklinkDescribeIdentityProviderConfigurationFuture) Get(ctx workflow.Context) (*worklink.DescribeIdentityProviderConfigurationOutput, error) {
	var output worklink.DescribeIdentityProviderConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkDescribeWebsiteCertificateAuthorityFuture struct {
	Future workflow.Future
}

func (r *WorklinkDescribeWebsiteCertificateAuthorityFuture) Get(ctx workflow.Context) (*worklink.DescribeWebsiteCertificateAuthorityOutput, error) {
	var output worklink.DescribeWebsiteCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkDisassociateDomainFuture struct {
	Future workflow.Future
}

func (r *WorklinkDisassociateDomainFuture) Get(ctx workflow.Context) (*worklink.DisassociateDomainOutput, error) {
	var output worklink.DisassociateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkDisassociateWebsiteAuthorizationProviderFuture struct {
	Future workflow.Future
}

func (r *WorklinkDisassociateWebsiteAuthorizationProviderFuture) Get(ctx workflow.Context) (*worklink.DisassociateWebsiteAuthorizationProviderOutput, error) {
	var output worklink.DisassociateWebsiteAuthorizationProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkDisassociateWebsiteCertificateAuthorityFuture struct {
	Future workflow.Future
}

func (r *WorklinkDisassociateWebsiteCertificateAuthorityFuture) Get(ctx workflow.Context) (*worklink.DisassociateWebsiteCertificateAuthorityOutput, error) {
	var output worklink.DisassociateWebsiteCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkListDevicesFuture struct {
	Future workflow.Future
}

func (r *WorklinkListDevicesFuture) Get(ctx workflow.Context) (*worklink.ListDevicesOutput, error) {
	var output worklink.ListDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkListDomainsFuture struct {
	Future workflow.Future
}

func (r *WorklinkListDomainsFuture) Get(ctx workflow.Context) (*worklink.ListDomainsOutput, error) {
	var output worklink.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkListFleetsFuture struct {
	Future workflow.Future
}

func (r *WorklinkListFleetsFuture) Get(ctx workflow.Context) (*worklink.ListFleetsOutput, error) {
	var output worklink.ListFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *WorklinkListTagsForResourceFuture) Get(ctx workflow.Context) (*worklink.ListTagsForResourceOutput, error) {
	var output worklink.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkListWebsiteAuthorizationProvidersFuture struct {
	Future workflow.Future
}

func (r *WorklinkListWebsiteAuthorizationProvidersFuture) Get(ctx workflow.Context) (*worklink.ListWebsiteAuthorizationProvidersOutput, error) {
	var output worklink.ListWebsiteAuthorizationProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkListWebsiteCertificateAuthoritiesFuture struct {
	Future workflow.Future
}

func (r *WorklinkListWebsiteCertificateAuthoritiesFuture) Get(ctx workflow.Context) (*worklink.ListWebsiteCertificateAuthoritiesOutput, error) {
	var output worklink.ListWebsiteCertificateAuthoritiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkRestoreDomainAccessFuture struct {
	Future workflow.Future
}

func (r *WorklinkRestoreDomainAccessFuture) Get(ctx workflow.Context) (*worklink.RestoreDomainAccessOutput, error) {
	var output worklink.RestoreDomainAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkRevokeDomainAccessFuture struct {
	Future workflow.Future
}

func (r *WorklinkRevokeDomainAccessFuture) Get(ctx workflow.Context) (*worklink.RevokeDomainAccessOutput, error) {
	var output worklink.RevokeDomainAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkSignOutUserFuture struct {
	Future workflow.Future
}

func (r *WorklinkSignOutUserFuture) Get(ctx workflow.Context) (*worklink.SignOutUserOutput, error) {
	var output worklink.SignOutUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkTagResourceFuture struct {
	Future workflow.Future
}

func (r *WorklinkTagResourceFuture) Get(ctx workflow.Context) (*worklink.TagResourceOutput, error) {
	var output worklink.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkUntagResourceFuture struct {
	Future workflow.Future
}

func (r *WorklinkUntagResourceFuture) Get(ctx workflow.Context) (*worklink.UntagResourceOutput, error) {
	var output worklink.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkUpdateAuditStreamConfigurationFuture struct {
	Future workflow.Future
}

func (r *WorklinkUpdateAuditStreamConfigurationFuture) Get(ctx workflow.Context) (*worklink.UpdateAuditStreamConfigurationOutput, error) {
	var output worklink.UpdateAuditStreamConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkUpdateCompanyNetworkConfigurationFuture struct {
	Future workflow.Future
}

func (r *WorklinkUpdateCompanyNetworkConfigurationFuture) Get(ctx workflow.Context) (*worklink.UpdateCompanyNetworkConfigurationOutput, error) {
	var output worklink.UpdateCompanyNetworkConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkUpdateDevicePolicyConfigurationFuture struct {
	Future workflow.Future
}

func (r *WorklinkUpdateDevicePolicyConfigurationFuture) Get(ctx workflow.Context) (*worklink.UpdateDevicePolicyConfigurationOutput, error) {
	var output worklink.UpdateDevicePolicyConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkUpdateDomainMetadataFuture struct {
	Future workflow.Future
}

func (r *WorklinkUpdateDomainMetadataFuture) Get(ctx workflow.Context) (*worklink.UpdateDomainMetadataOutput, error) {
	var output worklink.UpdateDomainMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkUpdateFleetMetadataFuture struct {
	Future workflow.Future
}

func (r *WorklinkUpdateFleetMetadataFuture) Get(ctx workflow.Context) (*worklink.UpdateFleetMetadataOutput, error) {
	var output worklink.UpdateFleetMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorklinkUpdateIdentityProviderConfigurationFuture struct {
	Future workflow.Future
}

func (r *WorklinkUpdateIdentityProviderConfigurationFuture) Get(ctx workflow.Context) (*worklink.UpdateIdentityProviderConfigurationOutput, error) {
	var output worklink.UpdateIdentityProviderConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) AssociateDomain(ctx workflow.Context, input *worklink.AssociateDomainInput) (*worklink.AssociateDomainOutput, error) {
	var output worklink.AssociateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.AssociateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) AssociateDomainAsync(ctx workflow.Context, input *worklink.AssociateDomainInput) *WorklinkAssociateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.AssociateDomain", input)
	return &WorklinkAssociateDomainFuture{Future: future}
}

func (a *WorkLinkStub) AssociateWebsiteAuthorizationProvider(ctx workflow.Context, input *worklink.AssociateWebsiteAuthorizationProviderInput) (*worklink.AssociateWebsiteAuthorizationProviderOutput, error) {
	var output worklink.AssociateWebsiteAuthorizationProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.AssociateWebsiteAuthorizationProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) AssociateWebsiteAuthorizationProviderAsync(ctx workflow.Context, input *worklink.AssociateWebsiteAuthorizationProviderInput) *WorklinkAssociateWebsiteAuthorizationProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.AssociateWebsiteAuthorizationProvider", input)
	return &WorklinkAssociateWebsiteAuthorizationProviderFuture{Future: future}
}

func (a *WorkLinkStub) AssociateWebsiteCertificateAuthority(ctx workflow.Context, input *worklink.AssociateWebsiteCertificateAuthorityInput) (*worklink.AssociateWebsiteCertificateAuthorityOutput, error) {
	var output worklink.AssociateWebsiteCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.AssociateWebsiteCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) AssociateWebsiteCertificateAuthorityAsync(ctx workflow.Context, input *worklink.AssociateWebsiteCertificateAuthorityInput) *WorklinkAssociateWebsiteCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.AssociateWebsiteCertificateAuthority", input)
	return &WorklinkAssociateWebsiteCertificateAuthorityFuture{Future: future}
}

func (a *WorkLinkStub) CreateFleet(ctx workflow.Context, input *worklink.CreateFleetInput) (*worklink.CreateFleetOutput, error) {
	var output worklink.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) CreateFleetAsync(ctx workflow.Context, input *worklink.CreateFleetInput) *WorklinkCreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.CreateFleet", input)
	return &WorklinkCreateFleetFuture{Future: future}
}

func (a *WorkLinkStub) DeleteFleet(ctx workflow.Context, input *worklink.DeleteFleetInput) (*worklink.DeleteFleetOutput, error) {
	var output worklink.DeleteFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.DeleteFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) DeleteFleetAsync(ctx workflow.Context, input *worklink.DeleteFleetInput) *WorklinkDeleteFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.DeleteFleet", input)
	return &WorklinkDeleteFleetFuture{Future: future}
}

func (a *WorkLinkStub) DescribeAuditStreamConfiguration(ctx workflow.Context, input *worklink.DescribeAuditStreamConfigurationInput) (*worklink.DescribeAuditStreamConfigurationOutput, error) {
	var output worklink.DescribeAuditStreamConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeAuditStreamConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) DescribeAuditStreamConfigurationAsync(ctx workflow.Context, input *worklink.DescribeAuditStreamConfigurationInput) *WorklinkDescribeAuditStreamConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeAuditStreamConfiguration", input)
	return &WorklinkDescribeAuditStreamConfigurationFuture{Future: future}
}

func (a *WorkLinkStub) DescribeCompanyNetworkConfiguration(ctx workflow.Context, input *worklink.DescribeCompanyNetworkConfigurationInput) (*worklink.DescribeCompanyNetworkConfigurationOutput, error) {
	var output worklink.DescribeCompanyNetworkConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeCompanyNetworkConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) DescribeCompanyNetworkConfigurationAsync(ctx workflow.Context, input *worklink.DescribeCompanyNetworkConfigurationInput) *WorklinkDescribeCompanyNetworkConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeCompanyNetworkConfiguration", input)
	return &WorklinkDescribeCompanyNetworkConfigurationFuture{Future: future}
}

func (a *WorkLinkStub) DescribeDevice(ctx workflow.Context, input *worklink.DescribeDeviceInput) (*worklink.DescribeDeviceOutput, error) {
	var output worklink.DescribeDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) DescribeDeviceAsync(ctx workflow.Context, input *worklink.DescribeDeviceInput) *WorklinkDescribeDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeDevice", input)
	return &WorklinkDescribeDeviceFuture{Future: future}
}

func (a *WorkLinkStub) DescribeDevicePolicyConfiguration(ctx workflow.Context, input *worklink.DescribeDevicePolicyConfigurationInput) (*worklink.DescribeDevicePolicyConfigurationOutput, error) {
	var output worklink.DescribeDevicePolicyConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeDevicePolicyConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) DescribeDevicePolicyConfigurationAsync(ctx workflow.Context, input *worklink.DescribeDevicePolicyConfigurationInput) *WorklinkDescribeDevicePolicyConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeDevicePolicyConfiguration", input)
	return &WorklinkDescribeDevicePolicyConfigurationFuture{Future: future}
}

func (a *WorkLinkStub) DescribeDomain(ctx workflow.Context, input *worklink.DescribeDomainInput) (*worklink.DescribeDomainOutput, error) {
	var output worklink.DescribeDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) DescribeDomainAsync(ctx workflow.Context, input *worklink.DescribeDomainInput) *WorklinkDescribeDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeDomain", input)
	return &WorklinkDescribeDomainFuture{Future: future}
}

func (a *WorkLinkStub) DescribeFleetMetadata(ctx workflow.Context, input *worklink.DescribeFleetMetadataInput) (*worklink.DescribeFleetMetadataOutput, error) {
	var output worklink.DescribeFleetMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeFleetMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) DescribeFleetMetadataAsync(ctx workflow.Context, input *worklink.DescribeFleetMetadataInput) *WorklinkDescribeFleetMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeFleetMetadata", input)
	return &WorklinkDescribeFleetMetadataFuture{Future: future}
}

func (a *WorkLinkStub) DescribeIdentityProviderConfiguration(ctx workflow.Context, input *worklink.DescribeIdentityProviderConfigurationInput) (*worklink.DescribeIdentityProviderConfigurationOutput, error) {
	var output worklink.DescribeIdentityProviderConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeIdentityProviderConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) DescribeIdentityProviderConfigurationAsync(ctx workflow.Context, input *worklink.DescribeIdentityProviderConfigurationInput) *WorklinkDescribeIdentityProviderConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeIdentityProviderConfiguration", input)
	return &WorklinkDescribeIdentityProviderConfigurationFuture{Future: future}
}

func (a *WorkLinkStub) DescribeWebsiteCertificateAuthority(ctx workflow.Context, input *worklink.DescribeWebsiteCertificateAuthorityInput) (*worklink.DescribeWebsiteCertificateAuthorityOutput, error) {
	var output worklink.DescribeWebsiteCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeWebsiteCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) DescribeWebsiteCertificateAuthorityAsync(ctx workflow.Context, input *worklink.DescribeWebsiteCertificateAuthorityInput) *WorklinkDescribeWebsiteCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.DescribeWebsiteCertificateAuthority", input)
	return &WorklinkDescribeWebsiteCertificateAuthorityFuture{Future: future}
}

func (a *WorkLinkStub) DisassociateDomain(ctx workflow.Context, input *worklink.DisassociateDomainInput) (*worklink.DisassociateDomainOutput, error) {
	var output worklink.DisassociateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.DisassociateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) DisassociateDomainAsync(ctx workflow.Context, input *worklink.DisassociateDomainInput) *WorklinkDisassociateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.DisassociateDomain", input)
	return &WorklinkDisassociateDomainFuture{Future: future}
}

func (a *WorkLinkStub) DisassociateWebsiteAuthorizationProvider(ctx workflow.Context, input *worklink.DisassociateWebsiteAuthorizationProviderInput) (*worklink.DisassociateWebsiteAuthorizationProviderOutput, error) {
	var output worklink.DisassociateWebsiteAuthorizationProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.DisassociateWebsiteAuthorizationProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) DisassociateWebsiteAuthorizationProviderAsync(ctx workflow.Context, input *worklink.DisassociateWebsiteAuthorizationProviderInput) *WorklinkDisassociateWebsiteAuthorizationProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.DisassociateWebsiteAuthorizationProvider", input)
	return &WorklinkDisassociateWebsiteAuthorizationProviderFuture{Future: future}
}

func (a *WorkLinkStub) DisassociateWebsiteCertificateAuthority(ctx workflow.Context, input *worklink.DisassociateWebsiteCertificateAuthorityInput) (*worklink.DisassociateWebsiteCertificateAuthorityOutput, error) {
	var output worklink.DisassociateWebsiteCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.DisassociateWebsiteCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) DisassociateWebsiteCertificateAuthorityAsync(ctx workflow.Context, input *worklink.DisassociateWebsiteCertificateAuthorityInput) *WorklinkDisassociateWebsiteCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.DisassociateWebsiteCertificateAuthority", input)
	return &WorklinkDisassociateWebsiteCertificateAuthorityFuture{Future: future}
}

func (a *WorkLinkStub) ListDevices(ctx workflow.Context, input *worklink.ListDevicesInput) (*worklink.ListDevicesOutput, error) {
	var output worklink.ListDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.ListDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) ListDevicesAsync(ctx workflow.Context, input *worklink.ListDevicesInput) *WorklinkListDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.ListDevices", input)
	return &WorklinkListDevicesFuture{Future: future}
}

func (a *WorkLinkStub) ListDomains(ctx workflow.Context, input *worklink.ListDomainsInput) (*worklink.ListDomainsOutput, error) {
	var output worklink.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) ListDomainsAsync(ctx workflow.Context, input *worklink.ListDomainsInput) *WorklinkListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.ListDomains", input)
	return &WorklinkListDomainsFuture{Future: future}
}

func (a *WorkLinkStub) ListFleets(ctx workflow.Context, input *worklink.ListFleetsInput) (*worklink.ListFleetsOutput, error) {
	var output worklink.ListFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.ListFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) ListFleetsAsync(ctx workflow.Context, input *worklink.ListFleetsInput) *WorklinkListFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.ListFleets", input)
	return &WorklinkListFleetsFuture{Future: future}
}

func (a *WorkLinkStub) ListTagsForResource(ctx workflow.Context, input *worklink.ListTagsForResourceInput) (*worklink.ListTagsForResourceOutput, error) {
	var output worklink.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) ListTagsForResourceAsync(ctx workflow.Context, input *worklink.ListTagsForResourceInput) *WorklinkListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.ListTagsForResource", input)
	return &WorklinkListTagsForResourceFuture{Future: future}
}

func (a *WorkLinkStub) ListWebsiteAuthorizationProviders(ctx workflow.Context, input *worklink.ListWebsiteAuthorizationProvidersInput) (*worklink.ListWebsiteAuthorizationProvidersOutput, error) {
	var output worklink.ListWebsiteAuthorizationProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.ListWebsiteAuthorizationProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) ListWebsiteAuthorizationProvidersAsync(ctx workflow.Context, input *worklink.ListWebsiteAuthorizationProvidersInput) *WorklinkListWebsiteAuthorizationProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.ListWebsiteAuthorizationProviders", input)
	return &WorklinkListWebsiteAuthorizationProvidersFuture{Future: future}
}

func (a *WorkLinkStub) ListWebsiteCertificateAuthorities(ctx workflow.Context, input *worklink.ListWebsiteCertificateAuthoritiesInput) (*worklink.ListWebsiteCertificateAuthoritiesOutput, error) {
	var output worklink.ListWebsiteCertificateAuthoritiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.ListWebsiteCertificateAuthorities", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) ListWebsiteCertificateAuthoritiesAsync(ctx workflow.Context, input *worklink.ListWebsiteCertificateAuthoritiesInput) *WorklinkListWebsiteCertificateAuthoritiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.ListWebsiteCertificateAuthorities", input)
	return &WorklinkListWebsiteCertificateAuthoritiesFuture{Future: future}
}

func (a *WorkLinkStub) RestoreDomainAccess(ctx workflow.Context, input *worklink.RestoreDomainAccessInput) (*worklink.RestoreDomainAccessOutput, error) {
	var output worklink.RestoreDomainAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.RestoreDomainAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) RestoreDomainAccessAsync(ctx workflow.Context, input *worklink.RestoreDomainAccessInput) *WorklinkRestoreDomainAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.RestoreDomainAccess", input)
	return &WorklinkRestoreDomainAccessFuture{Future: future}
}

func (a *WorkLinkStub) RevokeDomainAccess(ctx workflow.Context, input *worklink.RevokeDomainAccessInput) (*worklink.RevokeDomainAccessOutput, error) {
	var output worklink.RevokeDomainAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.RevokeDomainAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) RevokeDomainAccessAsync(ctx workflow.Context, input *worklink.RevokeDomainAccessInput) *WorklinkRevokeDomainAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.RevokeDomainAccess", input)
	return &WorklinkRevokeDomainAccessFuture{Future: future}
}

func (a *WorkLinkStub) SignOutUser(ctx workflow.Context, input *worklink.SignOutUserInput) (*worklink.SignOutUserOutput, error) {
	var output worklink.SignOutUserOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.SignOutUser", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) SignOutUserAsync(ctx workflow.Context, input *worklink.SignOutUserInput) *WorklinkSignOutUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.SignOutUser", input)
	return &WorklinkSignOutUserFuture{Future: future}
}

func (a *WorkLinkStub) TagResource(ctx workflow.Context, input *worklink.TagResourceInput) (*worklink.TagResourceOutput, error) {
	var output worklink.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) TagResourceAsync(ctx workflow.Context, input *worklink.TagResourceInput) *WorklinkTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.TagResource", input)
	return &WorklinkTagResourceFuture{Future: future}
}

func (a *WorkLinkStub) UntagResource(ctx workflow.Context, input *worklink.UntagResourceInput) (*worklink.UntagResourceOutput, error) {
	var output worklink.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) UntagResourceAsync(ctx workflow.Context, input *worklink.UntagResourceInput) *WorklinkUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.UntagResource", input)
	return &WorklinkUntagResourceFuture{Future: future}
}

func (a *WorkLinkStub) UpdateAuditStreamConfiguration(ctx workflow.Context, input *worklink.UpdateAuditStreamConfigurationInput) (*worklink.UpdateAuditStreamConfigurationOutput, error) {
	var output worklink.UpdateAuditStreamConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.UpdateAuditStreamConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) UpdateAuditStreamConfigurationAsync(ctx workflow.Context, input *worklink.UpdateAuditStreamConfigurationInput) *WorklinkUpdateAuditStreamConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.UpdateAuditStreamConfiguration", input)
	return &WorklinkUpdateAuditStreamConfigurationFuture{Future: future}
}

func (a *WorkLinkStub) UpdateCompanyNetworkConfiguration(ctx workflow.Context, input *worklink.UpdateCompanyNetworkConfigurationInput) (*worklink.UpdateCompanyNetworkConfigurationOutput, error) {
	var output worklink.UpdateCompanyNetworkConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.UpdateCompanyNetworkConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) UpdateCompanyNetworkConfigurationAsync(ctx workflow.Context, input *worklink.UpdateCompanyNetworkConfigurationInput) *WorklinkUpdateCompanyNetworkConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.UpdateCompanyNetworkConfiguration", input)
	return &WorklinkUpdateCompanyNetworkConfigurationFuture{Future: future}
}

func (a *WorkLinkStub) UpdateDevicePolicyConfiguration(ctx workflow.Context, input *worklink.UpdateDevicePolicyConfigurationInput) (*worklink.UpdateDevicePolicyConfigurationOutput, error) {
	var output worklink.UpdateDevicePolicyConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.UpdateDevicePolicyConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) UpdateDevicePolicyConfigurationAsync(ctx workflow.Context, input *worklink.UpdateDevicePolicyConfigurationInput) *WorklinkUpdateDevicePolicyConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.UpdateDevicePolicyConfiguration", input)
	return &WorklinkUpdateDevicePolicyConfigurationFuture{Future: future}
}

func (a *WorkLinkStub) UpdateDomainMetadata(ctx workflow.Context, input *worklink.UpdateDomainMetadataInput) (*worklink.UpdateDomainMetadataOutput, error) {
	var output worklink.UpdateDomainMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.UpdateDomainMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) UpdateDomainMetadataAsync(ctx workflow.Context, input *worklink.UpdateDomainMetadataInput) *WorklinkUpdateDomainMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.UpdateDomainMetadata", input)
	return &WorklinkUpdateDomainMetadataFuture{Future: future}
}

func (a *WorkLinkStub) UpdateFleetMetadata(ctx workflow.Context, input *worklink.UpdateFleetMetadataInput) (*worklink.UpdateFleetMetadataOutput, error) {
	var output worklink.UpdateFleetMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.UpdateFleetMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) UpdateFleetMetadataAsync(ctx workflow.Context, input *worklink.UpdateFleetMetadataInput) *WorklinkUpdateFleetMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.UpdateFleetMetadata", input)
	return &WorklinkUpdateFleetMetadataFuture{Future: future}
}

func (a *WorkLinkStub) UpdateIdentityProviderConfiguration(ctx workflow.Context, input *worklink.UpdateIdentityProviderConfigurationInput) (*worklink.UpdateIdentityProviderConfigurationOutput, error) {
	var output worklink.UpdateIdentityProviderConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.worklink.UpdateIdentityProviderConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WorkLinkStub) UpdateIdentityProviderConfigurationAsync(ctx workflow.Context, input *worklink.UpdateIdentityProviderConfigurationInput) *WorklinkUpdateIdentityProviderConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.worklink.UpdateIdentityProviderConfiguration", input)
	return &WorklinkUpdateIdentityProviderConfigurationFuture{Future: future}
}
