// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/autoscaling"
	"go.temporal.io/sdk/workflow"
)

type AutoScalingClient interface {
	AttachInstances(ctx workflow.Context, input *autoscaling.AttachInstancesInput) (*autoscaling.AttachInstancesOutput, error)
	AttachInstancesAsync(ctx workflow.Context, input *autoscaling.AttachInstancesInput) *AutoScalingAttachInstancesFuture

	AttachLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput) (*autoscaling.AttachLoadBalancerTargetGroupsOutput, error)
	AttachLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput) *AutoScalingAttachLoadBalancerTargetGroupsFuture

	AttachLoadBalancers(ctx workflow.Context, input *autoscaling.AttachLoadBalancersInput) (*autoscaling.AttachLoadBalancersOutput, error)
	AttachLoadBalancersAsync(ctx workflow.Context, input *autoscaling.AttachLoadBalancersInput) *AutoScalingAttachLoadBalancersFuture

	BatchDeleteScheduledAction(ctx workflow.Context, input *autoscaling.BatchDeleteScheduledActionInput) (*autoscaling.BatchDeleteScheduledActionOutput, error)
	BatchDeleteScheduledActionAsync(ctx workflow.Context, input *autoscaling.BatchDeleteScheduledActionInput) *AutoScalingBatchDeleteScheduledActionFuture

	BatchPutScheduledUpdateGroupAction(ctx workflow.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput) (*autoscaling.BatchPutScheduledUpdateGroupActionOutput, error)
	BatchPutScheduledUpdateGroupActionAsync(ctx workflow.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput) *AutoScalingBatchPutScheduledUpdateGroupActionFuture

	CancelInstanceRefresh(ctx workflow.Context, input *autoscaling.CancelInstanceRefreshInput) (*autoscaling.CancelInstanceRefreshOutput, error)
	CancelInstanceRefreshAsync(ctx workflow.Context, input *autoscaling.CancelInstanceRefreshInput) *AutoScalingCancelInstanceRefreshFuture

	CompleteLifecycleAction(ctx workflow.Context, input *autoscaling.CompleteLifecycleActionInput) (*autoscaling.CompleteLifecycleActionOutput, error)
	CompleteLifecycleActionAsync(ctx workflow.Context, input *autoscaling.CompleteLifecycleActionInput) *AutoScalingCompleteLifecycleActionFuture

	CreateAutoScalingGroup(ctx workflow.Context, input *autoscaling.CreateAutoScalingGroupInput) (*autoscaling.CreateAutoScalingGroupOutput, error)
	CreateAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.CreateAutoScalingGroupInput) *AutoScalingCreateAutoScalingGroupFuture

	CreateLaunchConfiguration(ctx workflow.Context, input *autoscaling.CreateLaunchConfigurationInput) (*autoscaling.CreateLaunchConfigurationOutput, error)
	CreateLaunchConfigurationAsync(ctx workflow.Context, input *autoscaling.CreateLaunchConfigurationInput) *AutoScalingCreateLaunchConfigurationFuture

	CreateOrUpdateTags(ctx workflow.Context, input *autoscaling.CreateOrUpdateTagsInput) (*autoscaling.CreateOrUpdateTagsOutput, error)
	CreateOrUpdateTagsAsync(ctx workflow.Context, input *autoscaling.CreateOrUpdateTagsInput) *AutoScalingCreateOrUpdateTagsFuture

	DeleteAutoScalingGroup(ctx workflow.Context, input *autoscaling.DeleteAutoScalingGroupInput) (*autoscaling.DeleteAutoScalingGroupOutput, error)
	DeleteAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.DeleteAutoScalingGroupInput) *AutoScalingDeleteAutoScalingGroupFuture

	DeleteLaunchConfiguration(ctx workflow.Context, input *autoscaling.DeleteLaunchConfigurationInput) (*autoscaling.DeleteLaunchConfigurationOutput, error)
	DeleteLaunchConfigurationAsync(ctx workflow.Context, input *autoscaling.DeleteLaunchConfigurationInput) *AutoScalingDeleteLaunchConfigurationFuture

	DeleteLifecycleHook(ctx workflow.Context, input *autoscaling.DeleteLifecycleHookInput) (*autoscaling.DeleteLifecycleHookOutput, error)
	DeleteLifecycleHookAsync(ctx workflow.Context, input *autoscaling.DeleteLifecycleHookInput) *AutoScalingDeleteLifecycleHookFuture

	DeleteNotificationConfiguration(ctx workflow.Context, input *autoscaling.DeleteNotificationConfigurationInput) (*autoscaling.DeleteNotificationConfigurationOutput, error)
	DeleteNotificationConfigurationAsync(ctx workflow.Context, input *autoscaling.DeleteNotificationConfigurationInput) *AutoScalingDeleteNotificationConfigurationFuture

	DeletePolicy(ctx workflow.Context, input *autoscaling.DeletePolicyInput) (*autoscaling.DeletePolicyOutput, error)
	DeletePolicyAsync(ctx workflow.Context, input *autoscaling.DeletePolicyInput) *AutoScalingDeletePolicyFuture

	DeleteScheduledAction(ctx workflow.Context, input *autoscaling.DeleteScheduledActionInput) (*autoscaling.DeleteScheduledActionOutput, error)
	DeleteScheduledActionAsync(ctx workflow.Context, input *autoscaling.DeleteScheduledActionInput) *AutoScalingDeleteScheduledActionFuture

	DeleteTags(ctx workflow.Context, input *autoscaling.DeleteTagsInput) (*autoscaling.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *autoscaling.DeleteTagsInput) *AutoScalingDeleteTagsFuture

	DescribeAccountLimits(ctx workflow.Context, input *autoscaling.DescribeAccountLimitsInput) (*autoscaling.DescribeAccountLimitsOutput, error)
	DescribeAccountLimitsAsync(ctx workflow.Context, input *autoscaling.DescribeAccountLimitsInput) *AutoScalingDescribeAccountLimitsFuture

	DescribeAdjustmentTypes(ctx workflow.Context, input *autoscaling.DescribeAdjustmentTypesInput) (*autoscaling.DescribeAdjustmentTypesOutput, error)
	DescribeAdjustmentTypesAsync(ctx workflow.Context, input *autoscaling.DescribeAdjustmentTypesInput) *AutoScalingDescribeAdjustmentTypesFuture

	DescribeAutoScalingGroups(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) (*autoscaling.DescribeAutoScalingGroupsOutput, error)
	DescribeAutoScalingGroupsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *AutoScalingDescribeAutoScalingGroupsFuture

	DescribeAutoScalingInstances(ctx workflow.Context, input *autoscaling.DescribeAutoScalingInstancesInput) (*autoscaling.DescribeAutoScalingInstancesOutput, error)
	DescribeAutoScalingInstancesAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingInstancesInput) *AutoScalingDescribeAutoScalingInstancesFuture

	DescribeAutoScalingNotificationTypes(ctx workflow.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput) (*autoscaling.DescribeAutoScalingNotificationTypesOutput, error)
	DescribeAutoScalingNotificationTypesAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput) *AutoScalingDescribeAutoScalingNotificationTypesFuture

	DescribeInstanceRefreshes(ctx workflow.Context, input *autoscaling.DescribeInstanceRefreshesInput) (*autoscaling.DescribeInstanceRefreshesOutput, error)
	DescribeInstanceRefreshesAsync(ctx workflow.Context, input *autoscaling.DescribeInstanceRefreshesInput) *AutoScalingDescribeInstanceRefreshesFuture

	DescribeLaunchConfigurations(ctx workflow.Context, input *autoscaling.DescribeLaunchConfigurationsInput) (*autoscaling.DescribeLaunchConfigurationsOutput, error)
	DescribeLaunchConfigurationsAsync(ctx workflow.Context, input *autoscaling.DescribeLaunchConfigurationsInput) *AutoScalingDescribeLaunchConfigurationsFuture

	DescribeLifecycleHookTypes(ctx workflow.Context, input *autoscaling.DescribeLifecycleHookTypesInput) (*autoscaling.DescribeLifecycleHookTypesOutput, error)
	DescribeLifecycleHookTypesAsync(ctx workflow.Context, input *autoscaling.DescribeLifecycleHookTypesInput) *AutoScalingDescribeLifecycleHookTypesFuture

	DescribeLifecycleHooks(ctx workflow.Context, input *autoscaling.DescribeLifecycleHooksInput) (*autoscaling.DescribeLifecycleHooksOutput, error)
	DescribeLifecycleHooksAsync(ctx workflow.Context, input *autoscaling.DescribeLifecycleHooksInput) *AutoScalingDescribeLifecycleHooksFuture

	DescribeLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput) (*autoscaling.DescribeLoadBalancerTargetGroupsOutput, error)
	DescribeLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput) *AutoScalingDescribeLoadBalancerTargetGroupsFuture

	DescribeLoadBalancers(ctx workflow.Context, input *autoscaling.DescribeLoadBalancersInput) (*autoscaling.DescribeLoadBalancersOutput, error)
	DescribeLoadBalancersAsync(ctx workflow.Context, input *autoscaling.DescribeLoadBalancersInput) *AutoScalingDescribeLoadBalancersFuture

	DescribeMetricCollectionTypes(ctx workflow.Context, input *autoscaling.DescribeMetricCollectionTypesInput) (*autoscaling.DescribeMetricCollectionTypesOutput, error)
	DescribeMetricCollectionTypesAsync(ctx workflow.Context, input *autoscaling.DescribeMetricCollectionTypesInput) *AutoScalingDescribeMetricCollectionTypesFuture

	DescribeNotificationConfigurations(ctx workflow.Context, input *autoscaling.DescribeNotificationConfigurationsInput) (*autoscaling.DescribeNotificationConfigurationsOutput, error)
	DescribeNotificationConfigurationsAsync(ctx workflow.Context, input *autoscaling.DescribeNotificationConfigurationsInput) *AutoScalingDescribeNotificationConfigurationsFuture

	DescribePolicies(ctx workflow.Context, input *autoscaling.DescribePoliciesInput) (*autoscaling.DescribePoliciesOutput, error)
	DescribePoliciesAsync(ctx workflow.Context, input *autoscaling.DescribePoliciesInput) *AutoScalingDescribePoliciesFuture

	DescribeScalingActivities(ctx workflow.Context, input *autoscaling.DescribeScalingActivitiesInput) (*autoscaling.DescribeScalingActivitiesOutput, error)
	DescribeScalingActivitiesAsync(ctx workflow.Context, input *autoscaling.DescribeScalingActivitiesInput) *AutoScalingDescribeScalingActivitiesFuture

	DescribeScalingProcessTypes(ctx workflow.Context, input *autoscaling.DescribeScalingProcessTypesInput) (*autoscaling.DescribeScalingProcessTypesOutput, error)
	DescribeScalingProcessTypesAsync(ctx workflow.Context, input *autoscaling.DescribeScalingProcessTypesInput) *AutoScalingDescribeScalingProcessTypesFuture

	DescribeScheduledActions(ctx workflow.Context, input *autoscaling.DescribeScheduledActionsInput) (*autoscaling.DescribeScheduledActionsOutput, error)
	DescribeScheduledActionsAsync(ctx workflow.Context, input *autoscaling.DescribeScheduledActionsInput) *AutoScalingDescribeScheduledActionsFuture

	DescribeTags(ctx workflow.Context, input *autoscaling.DescribeTagsInput) (*autoscaling.DescribeTagsOutput, error)
	DescribeTagsAsync(ctx workflow.Context, input *autoscaling.DescribeTagsInput) *AutoScalingDescribeTagsFuture

	DescribeTerminationPolicyTypes(ctx workflow.Context, input *autoscaling.DescribeTerminationPolicyTypesInput) (*autoscaling.DescribeTerminationPolicyTypesOutput, error)
	DescribeTerminationPolicyTypesAsync(ctx workflow.Context, input *autoscaling.DescribeTerminationPolicyTypesInput) *AutoScalingDescribeTerminationPolicyTypesFuture

	DetachInstances(ctx workflow.Context, input *autoscaling.DetachInstancesInput) (*autoscaling.DetachInstancesOutput, error)
	DetachInstancesAsync(ctx workflow.Context, input *autoscaling.DetachInstancesInput) *AutoScalingDetachInstancesFuture

	DetachLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput) (*autoscaling.DetachLoadBalancerTargetGroupsOutput, error)
	DetachLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput) *AutoScalingDetachLoadBalancerTargetGroupsFuture

	DetachLoadBalancers(ctx workflow.Context, input *autoscaling.DetachLoadBalancersInput) (*autoscaling.DetachLoadBalancersOutput, error)
	DetachLoadBalancersAsync(ctx workflow.Context, input *autoscaling.DetachLoadBalancersInput) *AutoScalingDetachLoadBalancersFuture

	DisableMetricsCollection(ctx workflow.Context, input *autoscaling.DisableMetricsCollectionInput) (*autoscaling.DisableMetricsCollectionOutput, error)
	DisableMetricsCollectionAsync(ctx workflow.Context, input *autoscaling.DisableMetricsCollectionInput) *AutoScalingDisableMetricsCollectionFuture

	EnableMetricsCollection(ctx workflow.Context, input *autoscaling.EnableMetricsCollectionInput) (*autoscaling.EnableMetricsCollectionOutput, error)
	EnableMetricsCollectionAsync(ctx workflow.Context, input *autoscaling.EnableMetricsCollectionInput) *AutoScalingEnableMetricsCollectionFuture

	EnterStandby(ctx workflow.Context, input *autoscaling.EnterStandbyInput) (*autoscaling.EnterStandbyOutput, error)
	EnterStandbyAsync(ctx workflow.Context, input *autoscaling.EnterStandbyInput) *AutoScalingEnterStandbyFuture

	ExecutePolicy(ctx workflow.Context, input *autoscaling.ExecutePolicyInput) (*autoscaling.ExecutePolicyOutput, error)
	ExecutePolicyAsync(ctx workflow.Context, input *autoscaling.ExecutePolicyInput) *AutoScalingExecutePolicyFuture

	ExitStandby(ctx workflow.Context, input *autoscaling.ExitStandbyInput) (*autoscaling.ExitStandbyOutput, error)
	ExitStandbyAsync(ctx workflow.Context, input *autoscaling.ExitStandbyInput) *AutoScalingExitStandbyFuture

	PutLifecycleHook(ctx workflow.Context, input *autoscaling.PutLifecycleHookInput) (*autoscaling.PutLifecycleHookOutput, error)
	PutLifecycleHookAsync(ctx workflow.Context, input *autoscaling.PutLifecycleHookInput) *AutoScalingPutLifecycleHookFuture

	PutNotificationConfiguration(ctx workflow.Context, input *autoscaling.PutNotificationConfigurationInput) (*autoscaling.PutNotificationConfigurationOutput, error)
	PutNotificationConfigurationAsync(ctx workflow.Context, input *autoscaling.PutNotificationConfigurationInput) *AutoScalingPutNotificationConfigurationFuture

	PutScalingPolicy(ctx workflow.Context, input *autoscaling.PutScalingPolicyInput) (*autoscaling.PutScalingPolicyOutput, error)
	PutScalingPolicyAsync(ctx workflow.Context, input *autoscaling.PutScalingPolicyInput) *AutoScalingPutScalingPolicyFuture

	PutScheduledUpdateGroupAction(ctx workflow.Context, input *autoscaling.PutScheduledUpdateGroupActionInput) (*autoscaling.PutScheduledUpdateGroupActionOutput, error)
	PutScheduledUpdateGroupActionAsync(ctx workflow.Context, input *autoscaling.PutScheduledUpdateGroupActionInput) *AutoScalingPutScheduledUpdateGroupActionFuture

	RecordLifecycleActionHeartbeat(ctx workflow.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error)
	RecordLifecycleActionHeartbeatAsync(ctx workflow.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput) *AutoScalingRecordLifecycleActionHeartbeatFuture

	ResumeProcesses(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) (*autoscaling.ResumeProcessesOutput, error)
	ResumeProcessesAsync(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) *AutoScalingResumeProcessesFuture

	SetDesiredCapacity(ctx workflow.Context, input *autoscaling.SetDesiredCapacityInput) (*autoscaling.SetDesiredCapacityOutput, error)
	SetDesiredCapacityAsync(ctx workflow.Context, input *autoscaling.SetDesiredCapacityInput) *AutoScalingSetDesiredCapacityFuture

	SetInstanceHealth(ctx workflow.Context, input *autoscaling.SetInstanceHealthInput) (*autoscaling.SetInstanceHealthOutput, error)
	SetInstanceHealthAsync(ctx workflow.Context, input *autoscaling.SetInstanceHealthInput) *AutoScalingSetInstanceHealthFuture

	SetInstanceProtection(ctx workflow.Context, input *autoscaling.SetInstanceProtectionInput) (*autoscaling.SetInstanceProtectionOutput, error)
	SetInstanceProtectionAsync(ctx workflow.Context, input *autoscaling.SetInstanceProtectionInput) *AutoScalingSetInstanceProtectionFuture

	StartInstanceRefresh(ctx workflow.Context, input *autoscaling.StartInstanceRefreshInput) (*autoscaling.StartInstanceRefreshOutput, error)
	StartInstanceRefreshAsync(ctx workflow.Context, input *autoscaling.StartInstanceRefreshInput) *AutoScalingStartInstanceRefreshFuture

	SuspendProcesses(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) (*autoscaling.SuspendProcessesOutput, error)
	SuspendProcessesAsync(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) *AutoScalingSuspendProcessesFuture

	TerminateInstanceInAutoScalingGroup(ctx workflow.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput) (*autoscaling.TerminateInstanceInAutoScalingGroupOutput, error)
	TerminateInstanceInAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput) *AutoScalingTerminateInstanceInAutoScalingGroupFuture

	UpdateAutoScalingGroup(ctx workflow.Context, input *autoscaling.UpdateAutoScalingGroupInput) (*autoscaling.UpdateAutoScalingGroupOutput, error)
	UpdateAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.UpdateAutoScalingGroupInput) *AutoScalingUpdateAutoScalingGroupFuture

	WaitUntilGroupExists(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error
	WaitUntilGroupExistsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *VoidFuture

	WaitUntilGroupInService(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error
	WaitUntilGroupInServiceAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *VoidFuture

	WaitUntilGroupNotExists(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error
	WaitUntilGroupNotExistsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *VoidFuture
}

type AutoScalingStub struct{}

func NewAutoScalingStub() AutoScalingClient {
	return &AutoScalingStub{}
}

type AutoScalingAttachInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingAttachInstancesFuture) Get(ctx workflow.Context) (*autoscaling.AttachInstancesOutput, error) {
	var output autoscaling.AttachInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingAttachLoadBalancerTargetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingAttachLoadBalancerTargetGroupsFuture) Get(ctx workflow.Context) (*autoscaling.AttachLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.AttachLoadBalancerTargetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingAttachLoadBalancersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingAttachLoadBalancersFuture) Get(ctx workflow.Context) (*autoscaling.AttachLoadBalancersOutput, error) {
	var output autoscaling.AttachLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingBatchDeleteScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingBatchDeleteScheduledActionFuture) Get(ctx workflow.Context) (*autoscaling.BatchDeleteScheduledActionOutput, error) {
	var output autoscaling.BatchDeleteScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingBatchPutScheduledUpdateGroupActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingBatchPutScheduledUpdateGroupActionFuture) Get(ctx workflow.Context) (*autoscaling.BatchPutScheduledUpdateGroupActionOutput, error) {
	var output autoscaling.BatchPutScheduledUpdateGroupActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingCancelInstanceRefreshFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingCancelInstanceRefreshFuture) Get(ctx workflow.Context) (*autoscaling.CancelInstanceRefreshOutput, error) {
	var output autoscaling.CancelInstanceRefreshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingCompleteLifecycleActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingCompleteLifecycleActionFuture) Get(ctx workflow.Context) (*autoscaling.CompleteLifecycleActionOutput, error) {
	var output autoscaling.CompleteLifecycleActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingCreateAutoScalingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingCreateAutoScalingGroupFuture) Get(ctx workflow.Context) (*autoscaling.CreateAutoScalingGroupOutput, error) {
	var output autoscaling.CreateAutoScalingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingCreateLaunchConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingCreateLaunchConfigurationFuture) Get(ctx workflow.Context) (*autoscaling.CreateLaunchConfigurationOutput, error) {
	var output autoscaling.CreateLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingCreateOrUpdateTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingCreateOrUpdateTagsFuture) Get(ctx workflow.Context) (*autoscaling.CreateOrUpdateTagsOutput, error) {
	var output autoscaling.CreateOrUpdateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDeleteAutoScalingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDeleteAutoScalingGroupFuture) Get(ctx workflow.Context) (*autoscaling.DeleteAutoScalingGroupOutput, error) {
	var output autoscaling.DeleteAutoScalingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDeleteLaunchConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDeleteLaunchConfigurationFuture) Get(ctx workflow.Context) (*autoscaling.DeleteLaunchConfigurationOutput, error) {
	var output autoscaling.DeleteLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDeleteLifecycleHookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDeleteLifecycleHookFuture) Get(ctx workflow.Context) (*autoscaling.DeleteLifecycleHookOutput, error) {
	var output autoscaling.DeleteLifecycleHookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDeleteNotificationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDeleteNotificationConfigurationFuture) Get(ctx workflow.Context) (*autoscaling.DeleteNotificationConfigurationOutput, error) {
	var output autoscaling.DeleteNotificationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDeletePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDeletePolicyFuture) Get(ctx workflow.Context) (*autoscaling.DeletePolicyOutput, error) {
	var output autoscaling.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDeleteScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDeleteScheduledActionFuture) Get(ctx workflow.Context) (*autoscaling.DeleteScheduledActionOutput, error) {
	var output autoscaling.DeleteScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDeleteTagsFuture) Get(ctx workflow.Context) (*autoscaling.DeleteTagsOutput, error) {
	var output autoscaling.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeAccountLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeAccountLimitsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAccountLimitsOutput, error) {
	var output autoscaling.DescribeAccountLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeAdjustmentTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeAdjustmentTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAdjustmentTypesOutput, error) {
	var output autoscaling.DescribeAdjustmentTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeAutoScalingGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeAutoScalingGroupsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAutoScalingGroupsOutput, error) {
	var output autoscaling.DescribeAutoScalingGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeAutoScalingInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeAutoScalingInstancesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAutoScalingInstancesOutput, error) {
	var output autoscaling.DescribeAutoScalingInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeAutoScalingNotificationTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeAutoScalingNotificationTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAutoScalingNotificationTypesOutput, error) {
	var output autoscaling.DescribeAutoScalingNotificationTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeInstanceRefreshesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeInstanceRefreshesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeInstanceRefreshesOutput, error) {
	var output autoscaling.DescribeInstanceRefreshesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeLaunchConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeLaunchConfigurationsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLaunchConfigurationsOutput, error) {
	var output autoscaling.DescribeLaunchConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeLifecycleHookTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeLifecycleHookTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLifecycleHookTypesOutput, error) {
	var output autoscaling.DescribeLifecycleHookTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeLifecycleHooksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeLifecycleHooksFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLifecycleHooksOutput, error) {
	var output autoscaling.DescribeLifecycleHooksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeLoadBalancerTargetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeLoadBalancerTargetGroupsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.DescribeLoadBalancerTargetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeLoadBalancersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeLoadBalancersFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLoadBalancersOutput, error) {
	var output autoscaling.DescribeLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeMetricCollectionTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeMetricCollectionTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeMetricCollectionTypesOutput, error) {
	var output autoscaling.DescribeMetricCollectionTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeNotificationConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeNotificationConfigurationsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeNotificationConfigurationsOutput, error) {
	var output autoscaling.DescribeNotificationConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribePoliciesFuture) Get(ctx workflow.Context) (*autoscaling.DescribePoliciesOutput, error) {
	var output autoscaling.DescribePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeScalingActivitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeScalingActivitiesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeScalingActivitiesOutput, error) {
	var output autoscaling.DescribeScalingActivitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeScalingProcessTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeScalingProcessTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeScalingProcessTypesOutput, error) {
	var output autoscaling.DescribeScalingProcessTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeScheduledActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeScheduledActionsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeScheduledActionsOutput, error) {
	var output autoscaling.DescribeScheduledActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeTagsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeTagsOutput, error) {
	var output autoscaling.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDescribeTerminationPolicyTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDescribeTerminationPolicyTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeTerminationPolicyTypesOutput, error) {
	var output autoscaling.DescribeTerminationPolicyTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDetachInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDetachInstancesFuture) Get(ctx workflow.Context) (*autoscaling.DetachInstancesOutput, error) {
	var output autoscaling.DetachInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDetachLoadBalancerTargetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDetachLoadBalancerTargetGroupsFuture) Get(ctx workflow.Context) (*autoscaling.DetachLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.DetachLoadBalancerTargetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDetachLoadBalancersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDetachLoadBalancersFuture) Get(ctx workflow.Context) (*autoscaling.DetachLoadBalancersOutput, error) {
	var output autoscaling.DetachLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingDisableMetricsCollectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingDisableMetricsCollectionFuture) Get(ctx workflow.Context) (*autoscaling.DisableMetricsCollectionOutput, error) {
	var output autoscaling.DisableMetricsCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingEnableMetricsCollectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingEnableMetricsCollectionFuture) Get(ctx workflow.Context) (*autoscaling.EnableMetricsCollectionOutput, error) {
	var output autoscaling.EnableMetricsCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingEnterStandbyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingEnterStandbyFuture) Get(ctx workflow.Context) (*autoscaling.EnterStandbyOutput, error) {
	var output autoscaling.EnterStandbyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingExecutePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingExecutePolicyFuture) Get(ctx workflow.Context) (*autoscaling.ExecutePolicyOutput, error) {
	var output autoscaling.ExecutePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingExitStandbyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingExitStandbyFuture) Get(ctx workflow.Context) (*autoscaling.ExitStandbyOutput, error) {
	var output autoscaling.ExitStandbyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingPutLifecycleHookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingPutLifecycleHookFuture) Get(ctx workflow.Context) (*autoscaling.PutLifecycleHookOutput, error) {
	var output autoscaling.PutLifecycleHookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingPutNotificationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingPutNotificationConfigurationFuture) Get(ctx workflow.Context) (*autoscaling.PutNotificationConfigurationOutput, error) {
	var output autoscaling.PutNotificationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingPutScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingPutScalingPolicyFuture) Get(ctx workflow.Context) (*autoscaling.PutScalingPolicyOutput, error) {
	var output autoscaling.PutScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingPutScheduledUpdateGroupActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingPutScheduledUpdateGroupActionFuture) Get(ctx workflow.Context) (*autoscaling.PutScheduledUpdateGroupActionOutput, error) {
	var output autoscaling.PutScheduledUpdateGroupActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingRecordLifecycleActionHeartbeatFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingRecordLifecycleActionHeartbeatFuture) Get(ctx workflow.Context) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error) {
	var output autoscaling.RecordLifecycleActionHeartbeatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingResumeProcessesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingResumeProcessesFuture) Get(ctx workflow.Context) (*autoscaling.ResumeProcessesOutput, error) {
	var output autoscaling.ResumeProcessesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingSetDesiredCapacityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingSetDesiredCapacityFuture) Get(ctx workflow.Context) (*autoscaling.SetDesiredCapacityOutput, error) {
	var output autoscaling.SetDesiredCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingSetInstanceHealthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingSetInstanceHealthFuture) Get(ctx workflow.Context) (*autoscaling.SetInstanceHealthOutput, error) {
	var output autoscaling.SetInstanceHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingSetInstanceProtectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingSetInstanceProtectionFuture) Get(ctx workflow.Context) (*autoscaling.SetInstanceProtectionOutput, error) {
	var output autoscaling.SetInstanceProtectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingStartInstanceRefreshFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingStartInstanceRefreshFuture) Get(ctx workflow.Context) (*autoscaling.StartInstanceRefreshOutput, error) {
	var output autoscaling.StartInstanceRefreshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingSuspendProcessesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingSuspendProcessesFuture) Get(ctx workflow.Context) (*autoscaling.SuspendProcessesOutput, error) {
	var output autoscaling.SuspendProcessesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingTerminateInstanceInAutoScalingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingTerminateInstanceInAutoScalingGroupFuture) Get(ctx workflow.Context) (*autoscaling.TerminateInstanceInAutoScalingGroupOutput, error) {
	var output autoscaling.TerminateInstanceInAutoScalingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoScalingUpdateAutoScalingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AutoScalingUpdateAutoScalingGroupFuture) Get(ctx workflow.Context) (*autoscaling.UpdateAutoScalingGroupOutput, error) {
	var output autoscaling.UpdateAutoScalingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) AttachInstances(ctx workflow.Context, input *autoscaling.AttachInstancesInput) (*autoscaling.AttachInstancesOutput, error) {
	var output autoscaling.AttachInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.AttachInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) AttachInstancesAsync(ctx workflow.Context, input *autoscaling.AttachInstancesInput) *AutoScalingAttachInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.AttachInstances", input)
	return &AutoScalingAttachInstancesFuture{Future: future}
}

func (a *AutoScalingStub) AttachLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput) (*autoscaling.AttachLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.AttachLoadBalancerTargetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.AttachLoadBalancerTargetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) AttachLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput) *AutoScalingAttachLoadBalancerTargetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.AttachLoadBalancerTargetGroups", input)
	return &AutoScalingAttachLoadBalancerTargetGroupsFuture{Future: future}
}

func (a *AutoScalingStub) AttachLoadBalancers(ctx workflow.Context, input *autoscaling.AttachLoadBalancersInput) (*autoscaling.AttachLoadBalancersOutput, error) {
	var output autoscaling.AttachLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.AttachLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) AttachLoadBalancersAsync(ctx workflow.Context, input *autoscaling.AttachLoadBalancersInput) *AutoScalingAttachLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.AttachLoadBalancers", input)
	return &AutoScalingAttachLoadBalancersFuture{Future: future}
}

func (a *AutoScalingStub) BatchDeleteScheduledAction(ctx workflow.Context, input *autoscaling.BatchDeleteScheduledActionInput) (*autoscaling.BatchDeleteScheduledActionOutput, error) {
	var output autoscaling.BatchDeleteScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.BatchDeleteScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) BatchDeleteScheduledActionAsync(ctx workflow.Context, input *autoscaling.BatchDeleteScheduledActionInput) *AutoScalingBatchDeleteScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.BatchDeleteScheduledAction", input)
	return &AutoScalingBatchDeleteScheduledActionFuture{Future: future}
}

func (a *AutoScalingStub) BatchPutScheduledUpdateGroupAction(ctx workflow.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput) (*autoscaling.BatchPutScheduledUpdateGroupActionOutput, error) {
	var output autoscaling.BatchPutScheduledUpdateGroupActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.BatchPutScheduledUpdateGroupAction", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) BatchPutScheduledUpdateGroupActionAsync(ctx workflow.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput) *AutoScalingBatchPutScheduledUpdateGroupActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.BatchPutScheduledUpdateGroupAction", input)
	return &AutoScalingBatchPutScheduledUpdateGroupActionFuture{Future: future}
}

func (a *AutoScalingStub) CancelInstanceRefresh(ctx workflow.Context, input *autoscaling.CancelInstanceRefreshInput) (*autoscaling.CancelInstanceRefreshOutput, error) {
	var output autoscaling.CancelInstanceRefreshOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.CancelInstanceRefresh", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) CancelInstanceRefreshAsync(ctx workflow.Context, input *autoscaling.CancelInstanceRefreshInput) *AutoScalingCancelInstanceRefreshFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.CancelInstanceRefresh", input)
	return &AutoScalingCancelInstanceRefreshFuture{Future: future}
}

func (a *AutoScalingStub) CompleteLifecycleAction(ctx workflow.Context, input *autoscaling.CompleteLifecycleActionInput) (*autoscaling.CompleteLifecycleActionOutput, error) {
	var output autoscaling.CompleteLifecycleActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.CompleteLifecycleAction", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) CompleteLifecycleActionAsync(ctx workflow.Context, input *autoscaling.CompleteLifecycleActionInput) *AutoScalingCompleteLifecycleActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.CompleteLifecycleAction", input)
	return &AutoScalingCompleteLifecycleActionFuture{Future: future}
}

func (a *AutoScalingStub) CreateAutoScalingGroup(ctx workflow.Context, input *autoscaling.CreateAutoScalingGroupInput) (*autoscaling.CreateAutoScalingGroupOutput, error) {
	var output autoscaling.CreateAutoScalingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.CreateAutoScalingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) CreateAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.CreateAutoScalingGroupInput) *AutoScalingCreateAutoScalingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.CreateAutoScalingGroup", input)
	return &AutoScalingCreateAutoScalingGroupFuture{Future: future}
}

func (a *AutoScalingStub) CreateLaunchConfiguration(ctx workflow.Context, input *autoscaling.CreateLaunchConfigurationInput) (*autoscaling.CreateLaunchConfigurationOutput, error) {
	var output autoscaling.CreateLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.CreateLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) CreateLaunchConfigurationAsync(ctx workflow.Context, input *autoscaling.CreateLaunchConfigurationInput) *AutoScalingCreateLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.CreateLaunchConfiguration", input)
	return &AutoScalingCreateLaunchConfigurationFuture{Future: future}
}

func (a *AutoScalingStub) CreateOrUpdateTags(ctx workflow.Context, input *autoscaling.CreateOrUpdateTagsInput) (*autoscaling.CreateOrUpdateTagsOutput, error) {
	var output autoscaling.CreateOrUpdateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.CreateOrUpdateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) CreateOrUpdateTagsAsync(ctx workflow.Context, input *autoscaling.CreateOrUpdateTagsInput) *AutoScalingCreateOrUpdateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.CreateOrUpdateTags", input)
	return &AutoScalingCreateOrUpdateTagsFuture{Future: future}
}

func (a *AutoScalingStub) DeleteAutoScalingGroup(ctx workflow.Context, input *autoscaling.DeleteAutoScalingGroupInput) (*autoscaling.DeleteAutoScalingGroupOutput, error) {
	var output autoscaling.DeleteAutoScalingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteAutoScalingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeleteAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.DeleteAutoScalingGroupInput) *AutoScalingDeleteAutoScalingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteAutoScalingGroup", input)
	return &AutoScalingDeleteAutoScalingGroupFuture{Future: future}
}

func (a *AutoScalingStub) DeleteLaunchConfiguration(ctx workflow.Context, input *autoscaling.DeleteLaunchConfigurationInput) (*autoscaling.DeleteLaunchConfigurationOutput, error) {
	var output autoscaling.DeleteLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeleteLaunchConfigurationAsync(ctx workflow.Context, input *autoscaling.DeleteLaunchConfigurationInput) *AutoScalingDeleteLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteLaunchConfiguration", input)
	return &AutoScalingDeleteLaunchConfigurationFuture{Future: future}
}

func (a *AutoScalingStub) DeleteLifecycleHook(ctx workflow.Context, input *autoscaling.DeleteLifecycleHookInput) (*autoscaling.DeleteLifecycleHookOutput, error) {
	var output autoscaling.DeleteLifecycleHookOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteLifecycleHook", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeleteLifecycleHookAsync(ctx workflow.Context, input *autoscaling.DeleteLifecycleHookInput) *AutoScalingDeleteLifecycleHookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteLifecycleHook", input)
	return &AutoScalingDeleteLifecycleHookFuture{Future: future}
}

func (a *AutoScalingStub) DeleteNotificationConfiguration(ctx workflow.Context, input *autoscaling.DeleteNotificationConfigurationInput) (*autoscaling.DeleteNotificationConfigurationOutput, error) {
	var output autoscaling.DeleteNotificationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteNotificationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeleteNotificationConfigurationAsync(ctx workflow.Context, input *autoscaling.DeleteNotificationConfigurationInput) *AutoScalingDeleteNotificationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteNotificationConfiguration", input)
	return &AutoScalingDeleteNotificationConfigurationFuture{Future: future}
}

func (a *AutoScalingStub) DeletePolicy(ctx workflow.Context, input *autoscaling.DeletePolicyInput) (*autoscaling.DeletePolicyOutput, error) {
	var output autoscaling.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeletePolicyAsync(ctx workflow.Context, input *autoscaling.DeletePolicyInput) *AutoScalingDeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeletePolicy", input)
	return &AutoScalingDeletePolicyFuture{Future: future}
}

func (a *AutoScalingStub) DeleteScheduledAction(ctx workflow.Context, input *autoscaling.DeleteScheduledActionInput) (*autoscaling.DeleteScheduledActionOutput, error) {
	var output autoscaling.DeleteScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeleteScheduledActionAsync(ctx workflow.Context, input *autoscaling.DeleteScheduledActionInput) *AutoScalingDeleteScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteScheduledAction", input)
	return &AutoScalingDeleteScheduledActionFuture{Future: future}
}

func (a *AutoScalingStub) DeleteTags(ctx workflow.Context, input *autoscaling.DeleteTagsInput) (*autoscaling.DeleteTagsOutput, error) {
	var output autoscaling.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeleteTagsAsync(ctx workflow.Context, input *autoscaling.DeleteTagsInput) *AutoScalingDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteTags", input)
	return &AutoScalingDeleteTagsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeAccountLimits(ctx workflow.Context, input *autoscaling.DescribeAccountLimitsInput) (*autoscaling.DescribeAccountLimitsOutput, error) {
	var output autoscaling.DescribeAccountLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAccountLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeAccountLimitsAsync(ctx workflow.Context, input *autoscaling.DescribeAccountLimitsInput) *AutoScalingDescribeAccountLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAccountLimits", input)
	return &AutoScalingDescribeAccountLimitsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeAdjustmentTypes(ctx workflow.Context, input *autoscaling.DescribeAdjustmentTypesInput) (*autoscaling.DescribeAdjustmentTypesOutput, error) {
	var output autoscaling.DescribeAdjustmentTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAdjustmentTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeAdjustmentTypesAsync(ctx workflow.Context, input *autoscaling.DescribeAdjustmentTypesInput) *AutoScalingDescribeAdjustmentTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAdjustmentTypes", input)
	return &AutoScalingDescribeAdjustmentTypesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeAutoScalingGroups(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) (*autoscaling.DescribeAutoScalingGroupsOutput, error) {
	var output autoscaling.DescribeAutoScalingGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAutoScalingGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeAutoScalingGroupsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *AutoScalingDescribeAutoScalingGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAutoScalingGroups", input)
	return &AutoScalingDescribeAutoScalingGroupsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeAutoScalingInstances(ctx workflow.Context, input *autoscaling.DescribeAutoScalingInstancesInput) (*autoscaling.DescribeAutoScalingInstancesOutput, error) {
	var output autoscaling.DescribeAutoScalingInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAutoScalingInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeAutoScalingInstancesAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingInstancesInput) *AutoScalingDescribeAutoScalingInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAutoScalingInstances", input)
	return &AutoScalingDescribeAutoScalingInstancesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeAutoScalingNotificationTypes(ctx workflow.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput) (*autoscaling.DescribeAutoScalingNotificationTypesOutput, error) {
	var output autoscaling.DescribeAutoScalingNotificationTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAutoScalingNotificationTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeAutoScalingNotificationTypesAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput) *AutoScalingDescribeAutoScalingNotificationTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAutoScalingNotificationTypes", input)
	return &AutoScalingDescribeAutoScalingNotificationTypesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeInstanceRefreshes(ctx workflow.Context, input *autoscaling.DescribeInstanceRefreshesInput) (*autoscaling.DescribeInstanceRefreshesOutput, error) {
	var output autoscaling.DescribeInstanceRefreshesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeInstanceRefreshes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeInstanceRefreshesAsync(ctx workflow.Context, input *autoscaling.DescribeInstanceRefreshesInput) *AutoScalingDescribeInstanceRefreshesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeInstanceRefreshes", input)
	return &AutoScalingDescribeInstanceRefreshesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeLaunchConfigurations(ctx workflow.Context, input *autoscaling.DescribeLaunchConfigurationsInput) (*autoscaling.DescribeLaunchConfigurationsOutput, error) {
	var output autoscaling.DescribeLaunchConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLaunchConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeLaunchConfigurationsAsync(ctx workflow.Context, input *autoscaling.DescribeLaunchConfigurationsInput) *AutoScalingDescribeLaunchConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLaunchConfigurations", input)
	return &AutoScalingDescribeLaunchConfigurationsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeLifecycleHookTypes(ctx workflow.Context, input *autoscaling.DescribeLifecycleHookTypesInput) (*autoscaling.DescribeLifecycleHookTypesOutput, error) {
	var output autoscaling.DescribeLifecycleHookTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLifecycleHookTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeLifecycleHookTypesAsync(ctx workflow.Context, input *autoscaling.DescribeLifecycleHookTypesInput) *AutoScalingDescribeLifecycleHookTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLifecycleHookTypes", input)
	return &AutoScalingDescribeLifecycleHookTypesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeLifecycleHooks(ctx workflow.Context, input *autoscaling.DescribeLifecycleHooksInput) (*autoscaling.DescribeLifecycleHooksOutput, error) {
	var output autoscaling.DescribeLifecycleHooksOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLifecycleHooks", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeLifecycleHooksAsync(ctx workflow.Context, input *autoscaling.DescribeLifecycleHooksInput) *AutoScalingDescribeLifecycleHooksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLifecycleHooks", input)
	return &AutoScalingDescribeLifecycleHooksFuture{Future: future}
}

func (a *AutoScalingStub) DescribeLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput) (*autoscaling.DescribeLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.DescribeLoadBalancerTargetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLoadBalancerTargetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput) *AutoScalingDescribeLoadBalancerTargetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLoadBalancerTargetGroups", input)
	return &AutoScalingDescribeLoadBalancerTargetGroupsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeLoadBalancers(ctx workflow.Context, input *autoscaling.DescribeLoadBalancersInput) (*autoscaling.DescribeLoadBalancersOutput, error) {
	var output autoscaling.DescribeLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeLoadBalancersAsync(ctx workflow.Context, input *autoscaling.DescribeLoadBalancersInput) *AutoScalingDescribeLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLoadBalancers", input)
	return &AutoScalingDescribeLoadBalancersFuture{Future: future}
}

func (a *AutoScalingStub) DescribeMetricCollectionTypes(ctx workflow.Context, input *autoscaling.DescribeMetricCollectionTypesInput) (*autoscaling.DescribeMetricCollectionTypesOutput, error) {
	var output autoscaling.DescribeMetricCollectionTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeMetricCollectionTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeMetricCollectionTypesAsync(ctx workflow.Context, input *autoscaling.DescribeMetricCollectionTypesInput) *AutoScalingDescribeMetricCollectionTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeMetricCollectionTypes", input)
	return &AutoScalingDescribeMetricCollectionTypesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeNotificationConfigurations(ctx workflow.Context, input *autoscaling.DescribeNotificationConfigurationsInput) (*autoscaling.DescribeNotificationConfigurationsOutput, error) {
	var output autoscaling.DescribeNotificationConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeNotificationConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeNotificationConfigurationsAsync(ctx workflow.Context, input *autoscaling.DescribeNotificationConfigurationsInput) *AutoScalingDescribeNotificationConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeNotificationConfigurations", input)
	return &AutoScalingDescribeNotificationConfigurationsFuture{Future: future}
}

func (a *AutoScalingStub) DescribePolicies(ctx workflow.Context, input *autoscaling.DescribePoliciesInput) (*autoscaling.DescribePoliciesOutput, error) {
	var output autoscaling.DescribePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribePoliciesAsync(ctx workflow.Context, input *autoscaling.DescribePoliciesInput) *AutoScalingDescribePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribePolicies", input)
	return &AutoScalingDescribePoliciesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeScalingActivities(ctx workflow.Context, input *autoscaling.DescribeScalingActivitiesInput) (*autoscaling.DescribeScalingActivitiesOutput, error) {
	var output autoscaling.DescribeScalingActivitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeScalingActivities", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeScalingActivitiesAsync(ctx workflow.Context, input *autoscaling.DescribeScalingActivitiesInput) *AutoScalingDescribeScalingActivitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeScalingActivities", input)
	return &AutoScalingDescribeScalingActivitiesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeScalingProcessTypes(ctx workflow.Context, input *autoscaling.DescribeScalingProcessTypesInput) (*autoscaling.DescribeScalingProcessTypesOutput, error) {
	var output autoscaling.DescribeScalingProcessTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeScalingProcessTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeScalingProcessTypesAsync(ctx workflow.Context, input *autoscaling.DescribeScalingProcessTypesInput) *AutoScalingDescribeScalingProcessTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeScalingProcessTypes", input)
	return &AutoScalingDescribeScalingProcessTypesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeScheduledActions(ctx workflow.Context, input *autoscaling.DescribeScheduledActionsInput) (*autoscaling.DescribeScheduledActionsOutput, error) {
	var output autoscaling.DescribeScheduledActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeScheduledActions", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeScheduledActionsAsync(ctx workflow.Context, input *autoscaling.DescribeScheduledActionsInput) *AutoScalingDescribeScheduledActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeScheduledActions", input)
	return &AutoScalingDescribeScheduledActionsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeTags(ctx workflow.Context, input *autoscaling.DescribeTagsInput) (*autoscaling.DescribeTagsOutput, error) {
	var output autoscaling.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeTagsAsync(ctx workflow.Context, input *autoscaling.DescribeTagsInput) *AutoScalingDescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeTags", input)
	return &AutoScalingDescribeTagsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeTerminationPolicyTypes(ctx workflow.Context, input *autoscaling.DescribeTerminationPolicyTypesInput) (*autoscaling.DescribeTerminationPolicyTypesOutput, error) {
	var output autoscaling.DescribeTerminationPolicyTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeTerminationPolicyTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeTerminationPolicyTypesAsync(ctx workflow.Context, input *autoscaling.DescribeTerminationPolicyTypesInput) *AutoScalingDescribeTerminationPolicyTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeTerminationPolicyTypes", input)
	return &AutoScalingDescribeTerminationPolicyTypesFuture{Future: future}
}

func (a *AutoScalingStub) DetachInstances(ctx workflow.Context, input *autoscaling.DetachInstancesInput) (*autoscaling.DetachInstancesOutput, error) {
	var output autoscaling.DetachInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DetachInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DetachInstancesAsync(ctx workflow.Context, input *autoscaling.DetachInstancesInput) *AutoScalingDetachInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DetachInstances", input)
	return &AutoScalingDetachInstancesFuture{Future: future}
}

func (a *AutoScalingStub) DetachLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput) (*autoscaling.DetachLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.DetachLoadBalancerTargetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DetachLoadBalancerTargetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DetachLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput) *AutoScalingDetachLoadBalancerTargetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DetachLoadBalancerTargetGroups", input)
	return &AutoScalingDetachLoadBalancerTargetGroupsFuture{Future: future}
}

func (a *AutoScalingStub) DetachLoadBalancers(ctx workflow.Context, input *autoscaling.DetachLoadBalancersInput) (*autoscaling.DetachLoadBalancersOutput, error) {
	var output autoscaling.DetachLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DetachLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DetachLoadBalancersAsync(ctx workflow.Context, input *autoscaling.DetachLoadBalancersInput) *AutoScalingDetachLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DetachLoadBalancers", input)
	return &AutoScalingDetachLoadBalancersFuture{Future: future}
}

func (a *AutoScalingStub) DisableMetricsCollection(ctx workflow.Context, input *autoscaling.DisableMetricsCollectionInput) (*autoscaling.DisableMetricsCollectionOutput, error) {
	var output autoscaling.DisableMetricsCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DisableMetricsCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DisableMetricsCollectionAsync(ctx workflow.Context, input *autoscaling.DisableMetricsCollectionInput) *AutoScalingDisableMetricsCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DisableMetricsCollection", input)
	return &AutoScalingDisableMetricsCollectionFuture{Future: future}
}

func (a *AutoScalingStub) EnableMetricsCollection(ctx workflow.Context, input *autoscaling.EnableMetricsCollectionInput) (*autoscaling.EnableMetricsCollectionOutput, error) {
	var output autoscaling.EnableMetricsCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.EnableMetricsCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) EnableMetricsCollectionAsync(ctx workflow.Context, input *autoscaling.EnableMetricsCollectionInput) *AutoScalingEnableMetricsCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.EnableMetricsCollection", input)
	return &AutoScalingEnableMetricsCollectionFuture{Future: future}
}

func (a *AutoScalingStub) EnterStandby(ctx workflow.Context, input *autoscaling.EnterStandbyInput) (*autoscaling.EnterStandbyOutput, error) {
	var output autoscaling.EnterStandbyOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.EnterStandby", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) EnterStandbyAsync(ctx workflow.Context, input *autoscaling.EnterStandbyInput) *AutoScalingEnterStandbyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.EnterStandby", input)
	return &AutoScalingEnterStandbyFuture{Future: future}
}

func (a *AutoScalingStub) ExecutePolicy(ctx workflow.Context, input *autoscaling.ExecutePolicyInput) (*autoscaling.ExecutePolicyOutput, error) {
	var output autoscaling.ExecutePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.ExecutePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) ExecutePolicyAsync(ctx workflow.Context, input *autoscaling.ExecutePolicyInput) *AutoScalingExecutePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.ExecutePolicy", input)
	return &AutoScalingExecutePolicyFuture{Future: future}
}

func (a *AutoScalingStub) ExitStandby(ctx workflow.Context, input *autoscaling.ExitStandbyInput) (*autoscaling.ExitStandbyOutput, error) {
	var output autoscaling.ExitStandbyOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.ExitStandby", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) ExitStandbyAsync(ctx workflow.Context, input *autoscaling.ExitStandbyInput) *AutoScalingExitStandbyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.ExitStandby", input)
	return &AutoScalingExitStandbyFuture{Future: future}
}

func (a *AutoScalingStub) PutLifecycleHook(ctx workflow.Context, input *autoscaling.PutLifecycleHookInput) (*autoscaling.PutLifecycleHookOutput, error) {
	var output autoscaling.PutLifecycleHookOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutLifecycleHook", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) PutLifecycleHookAsync(ctx workflow.Context, input *autoscaling.PutLifecycleHookInput) *AutoScalingPutLifecycleHookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutLifecycleHook", input)
	return &AutoScalingPutLifecycleHookFuture{Future: future}
}

func (a *AutoScalingStub) PutNotificationConfiguration(ctx workflow.Context, input *autoscaling.PutNotificationConfigurationInput) (*autoscaling.PutNotificationConfigurationOutput, error) {
	var output autoscaling.PutNotificationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutNotificationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) PutNotificationConfigurationAsync(ctx workflow.Context, input *autoscaling.PutNotificationConfigurationInput) *AutoScalingPutNotificationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutNotificationConfiguration", input)
	return &AutoScalingPutNotificationConfigurationFuture{Future: future}
}

func (a *AutoScalingStub) PutScalingPolicy(ctx workflow.Context, input *autoscaling.PutScalingPolicyInput) (*autoscaling.PutScalingPolicyOutput, error) {
	var output autoscaling.PutScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) PutScalingPolicyAsync(ctx workflow.Context, input *autoscaling.PutScalingPolicyInput) *AutoScalingPutScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutScalingPolicy", input)
	return &AutoScalingPutScalingPolicyFuture{Future: future}
}

func (a *AutoScalingStub) PutScheduledUpdateGroupAction(ctx workflow.Context, input *autoscaling.PutScheduledUpdateGroupActionInput) (*autoscaling.PutScheduledUpdateGroupActionOutput, error) {
	var output autoscaling.PutScheduledUpdateGroupActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutScheduledUpdateGroupAction", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) PutScheduledUpdateGroupActionAsync(ctx workflow.Context, input *autoscaling.PutScheduledUpdateGroupActionInput) *AutoScalingPutScheduledUpdateGroupActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutScheduledUpdateGroupAction", input)
	return &AutoScalingPutScheduledUpdateGroupActionFuture{Future: future}
}

func (a *AutoScalingStub) RecordLifecycleActionHeartbeat(ctx workflow.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error) {
	var output autoscaling.RecordLifecycleActionHeartbeatOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.RecordLifecycleActionHeartbeat", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) RecordLifecycleActionHeartbeatAsync(ctx workflow.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput) *AutoScalingRecordLifecycleActionHeartbeatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.RecordLifecycleActionHeartbeat", input)
	return &AutoScalingRecordLifecycleActionHeartbeatFuture{Future: future}
}

func (a *AutoScalingStub) ResumeProcesses(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) (*autoscaling.ResumeProcessesOutput, error) {
	var output autoscaling.ResumeProcessesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.ResumeProcesses", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) ResumeProcessesAsync(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) *AutoScalingResumeProcessesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.ResumeProcesses", input)
	return &AutoScalingResumeProcessesFuture{Future: future}
}

func (a *AutoScalingStub) SetDesiredCapacity(ctx workflow.Context, input *autoscaling.SetDesiredCapacityInput) (*autoscaling.SetDesiredCapacityOutput, error) {
	var output autoscaling.SetDesiredCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.SetDesiredCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) SetDesiredCapacityAsync(ctx workflow.Context, input *autoscaling.SetDesiredCapacityInput) *AutoScalingSetDesiredCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.SetDesiredCapacity", input)
	return &AutoScalingSetDesiredCapacityFuture{Future: future}
}

func (a *AutoScalingStub) SetInstanceHealth(ctx workflow.Context, input *autoscaling.SetInstanceHealthInput) (*autoscaling.SetInstanceHealthOutput, error) {
	var output autoscaling.SetInstanceHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.SetInstanceHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) SetInstanceHealthAsync(ctx workflow.Context, input *autoscaling.SetInstanceHealthInput) *AutoScalingSetInstanceHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.SetInstanceHealth", input)
	return &AutoScalingSetInstanceHealthFuture{Future: future}
}

func (a *AutoScalingStub) SetInstanceProtection(ctx workflow.Context, input *autoscaling.SetInstanceProtectionInput) (*autoscaling.SetInstanceProtectionOutput, error) {
	var output autoscaling.SetInstanceProtectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.SetInstanceProtection", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) SetInstanceProtectionAsync(ctx workflow.Context, input *autoscaling.SetInstanceProtectionInput) *AutoScalingSetInstanceProtectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.SetInstanceProtection", input)
	return &AutoScalingSetInstanceProtectionFuture{Future: future}
}

func (a *AutoScalingStub) StartInstanceRefresh(ctx workflow.Context, input *autoscaling.StartInstanceRefreshInput) (*autoscaling.StartInstanceRefreshOutput, error) {
	var output autoscaling.StartInstanceRefreshOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.StartInstanceRefresh", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) StartInstanceRefreshAsync(ctx workflow.Context, input *autoscaling.StartInstanceRefreshInput) *AutoScalingStartInstanceRefreshFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.StartInstanceRefresh", input)
	return &AutoScalingStartInstanceRefreshFuture{Future: future}
}

func (a *AutoScalingStub) SuspendProcesses(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) (*autoscaling.SuspendProcessesOutput, error) {
	var output autoscaling.SuspendProcessesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.SuspendProcesses", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) SuspendProcessesAsync(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) *AutoScalingSuspendProcessesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.SuspendProcesses", input)
	return &AutoScalingSuspendProcessesFuture{Future: future}
}

func (a *AutoScalingStub) TerminateInstanceInAutoScalingGroup(ctx workflow.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput) (*autoscaling.TerminateInstanceInAutoScalingGroupOutput, error) {
	var output autoscaling.TerminateInstanceInAutoScalingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.TerminateInstanceInAutoScalingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) TerminateInstanceInAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput) *AutoScalingTerminateInstanceInAutoScalingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.TerminateInstanceInAutoScalingGroup", input)
	return &AutoScalingTerminateInstanceInAutoScalingGroupFuture{Future: future}
}

func (a *AutoScalingStub) UpdateAutoScalingGroup(ctx workflow.Context, input *autoscaling.UpdateAutoScalingGroupInput) (*autoscaling.UpdateAutoScalingGroupOutput, error) {
	var output autoscaling.UpdateAutoScalingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.UpdateAutoScalingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) UpdateAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.UpdateAutoScalingGroupInput) *AutoScalingUpdateAutoScalingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.UpdateAutoScalingGroup", input)
	return &AutoScalingUpdateAutoScalingGroupFuture{Future: future}
}

func (a *AutoScalingStub) WaitUntilGroupExists(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.autoscaling.WaitUntilGroupExists", input).Get(ctx, nil)
}

func (a *AutoScalingStub) WaitUntilGroupExistsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.WaitUntilGroupExists", input)
	return NewVoidFuture(future)
}

func (a *AutoScalingStub) WaitUntilGroupInService(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.autoscaling.WaitUntilGroupInService", input).Get(ctx, nil)
}

func (a *AutoScalingStub) WaitUntilGroupInServiceAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.WaitUntilGroupInService", input)
	return NewVoidFuture(future)
}

func (a *AutoScalingStub) WaitUntilGroupNotExists(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.autoscaling.WaitUntilGroupNotExists", input).Get(ctx, nil)
}

func (a *AutoScalingStub) WaitUntilGroupNotExistsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.WaitUntilGroupNotExists", input)
	return NewVoidFuture(future)
}
