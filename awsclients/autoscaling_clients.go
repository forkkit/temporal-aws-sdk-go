// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/autoscaling"
	"go.temporal.io/sdk/workflow"
)

type AutoScalingClient interface {
	AttachInstances(ctx workflow.Context, input *autoscaling.AttachInstancesInput) (*autoscaling.AttachInstancesOutput, error)
	AttachInstancesAsync(ctx workflow.Context, input *autoscaling.AttachInstancesInput) *AutoscalingAttachInstancesFuture

	AttachLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput) (*autoscaling.AttachLoadBalancerTargetGroupsOutput, error)
	AttachLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput) *AutoscalingAttachLoadBalancerTargetGroupsFuture

	AttachLoadBalancers(ctx workflow.Context, input *autoscaling.AttachLoadBalancersInput) (*autoscaling.AttachLoadBalancersOutput, error)
	AttachLoadBalancersAsync(ctx workflow.Context, input *autoscaling.AttachLoadBalancersInput) *AutoscalingAttachLoadBalancersFuture

	BatchDeleteScheduledAction(ctx workflow.Context, input *autoscaling.BatchDeleteScheduledActionInput) (*autoscaling.BatchDeleteScheduledActionOutput, error)
	BatchDeleteScheduledActionAsync(ctx workflow.Context, input *autoscaling.BatchDeleteScheduledActionInput) *AutoscalingBatchDeleteScheduledActionFuture

	BatchPutScheduledUpdateGroupAction(ctx workflow.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput) (*autoscaling.BatchPutScheduledUpdateGroupActionOutput, error)
	BatchPutScheduledUpdateGroupActionAsync(ctx workflow.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput) *AutoscalingBatchPutScheduledUpdateGroupActionFuture

	CancelInstanceRefresh(ctx workflow.Context, input *autoscaling.CancelInstanceRefreshInput) (*autoscaling.CancelInstanceRefreshOutput, error)
	CancelInstanceRefreshAsync(ctx workflow.Context, input *autoscaling.CancelInstanceRefreshInput) *AutoscalingCancelInstanceRefreshFuture

	CompleteLifecycleAction(ctx workflow.Context, input *autoscaling.CompleteLifecycleActionInput) (*autoscaling.CompleteLifecycleActionOutput, error)
	CompleteLifecycleActionAsync(ctx workflow.Context, input *autoscaling.CompleteLifecycleActionInput) *AutoscalingCompleteLifecycleActionFuture

	CreateAutoScalingGroup(ctx workflow.Context, input *autoscaling.CreateAutoScalingGroupInput) (*autoscaling.CreateAutoScalingGroupOutput, error)
	CreateAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.CreateAutoScalingGroupInput) *AutoscalingCreateAutoScalingGroupFuture

	CreateLaunchConfiguration(ctx workflow.Context, input *autoscaling.CreateLaunchConfigurationInput) (*autoscaling.CreateLaunchConfigurationOutput, error)
	CreateLaunchConfigurationAsync(ctx workflow.Context, input *autoscaling.CreateLaunchConfigurationInput) *AutoscalingCreateLaunchConfigurationFuture

	CreateOrUpdateTags(ctx workflow.Context, input *autoscaling.CreateOrUpdateTagsInput) (*autoscaling.CreateOrUpdateTagsOutput, error)
	CreateOrUpdateTagsAsync(ctx workflow.Context, input *autoscaling.CreateOrUpdateTagsInput) *AutoscalingCreateOrUpdateTagsFuture

	DeleteAutoScalingGroup(ctx workflow.Context, input *autoscaling.DeleteAutoScalingGroupInput) (*autoscaling.DeleteAutoScalingGroupOutput, error)
	DeleteAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.DeleteAutoScalingGroupInput) *AutoscalingDeleteAutoScalingGroupFuture

	DeleteLaunchConfiguration(ctx workflow.Context, input *autoscaling.DeleteLaunchConfigurationInput) (*autoscaling.DeleteLaunchConfigurationOutput, error)
	DeleteLaunchConfigurationAsync(ctx workflow.Context, input *autoscaling.DeleteLaunchConfigurationInput) *AutoscalingDeleteLaunchConfigurationFuture

	DeleteLifecycleHook(ctx workflow.Context, input *autoscaling.DeleteLifecycleHookInput) (*autoscaling.DeleteLifecycleHookOutput, error)
	DeleteLifecycleHookAsync(ctx workflow.Context, input *autoscaling.DeleteLifecycleHookInput) *AutoscalingDeleteLifecycleHookFuture

	DeleteNotificationConfiguration(ctx workflow.Context, input *autoscaling.DeleteNotificationConfigurationInput) (*autoscaling.DeleteNotificationConfigurationOutput, error)
	DeleteNotificationConfigurationAsync(ctx workflow.Context, input *autoscaling.DeleteNotificationConfigurationInput) *AutoscalingDeleteNotificationConfigurationFuture

	DeletePolicy(ctx workflow.Context, input *autoscaling.DeletePolicyInput) (*autoscaling.DeletePolicyOutput, error)
	DeletePolicyAsync(ctx workflow.Context, input *autoscaling.DeletePolicyInput) *AutoscalingDeletePolicyFuture

	DeleteScheduledAction(ctx workflow.Context, input *autoscaling.DeleteScheduledActionInput) (*autoscaling.DeleteScheduledActionOutput, error)
	DeleteScheduledActionAsync(ctx workflow.Context, input *autoscaling.DeleteScheduledActionInput) *AutoscalingDeleteScheduledActionFuture

	DeleteTags(ctx workflow.Context, input *autoscaling.DeleteTagsInput) (*autoscaling.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *autoscaling.DeleteTagsInput) *AutoscalingDeleteTagsFuture

	DescribeAccountLimits(ctx workflow.Context, input *autoscaling.DescribeAccountLimitsInput) (*autoscaling.DescribeAccountLimitsOutput, error)
	DescribeAccountLimitsAsync(ctx workflow.Context, input *autoscaling.DescribeAccountLimitsInput) *AutoscalingDescribeAccountLimitsFuture

	DescribeAdjustmentTypes(ctx workflow.Context, input *autoscaling.DescribeAdjustmentTypesInput) (*autoscaling.DescribeAdjustmentTypesOutput, error)
	DescribeAdjustmentTypesAsync(ctx workflow.Context, input *autoscaling.DescribeAdjustmentTypesInput) *AutoscalingDescribeAdjustmentTypesFuture

	DescribeAutoScalingGroups(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) (*autoscaling.DescribeAutoScalingGroupsOutput, error)
	DescribeAutoScalingGroupsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *AutoscalingDescribeAutoScalingGroupsFuture

	DescribeAutoScalingInstances(ctx workflow.Context, input *autoscaling.DescribeAutoScalingInstancesInput) (*autoscaling.DescribeAutoScalingInstancesOutput, error)
	DescribeAutoScalingInstancesAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingInstancesInput) *AutoscalingDescribeAutoScalingInstancesFuture

	DescribeAutoScalingNotificationTypes(ctx workflow.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput) (*autoscaling.DescribeAutoScalingNotificationTypesOutput, error)
	DescribeAutoScalingNotificationTypesAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput) *AutoscalingDescribeAutoScalingNotificationTypesFuture

	DescribeInstanceRefreshes(ctx workflow.Context, input *autoscaling.DescribeInstanceRefreshesInput) (*autoscaling.DescribeInstanceRefreshesOutput, error)
	DescribeInstanceRefreshesAsync(ctx workflow.Context, input *autoscaling.DescribeInstanceRefreshesInput) *AutoscalingDescribeInstanceRefreshesFuture

	DescribeLaunchConfigurations(ctx workflow.Context, input *autoscaling.DescribeLaunchConfigurationsInput) (*autoscaling.DescribeLaunchConfigurationsOutput, error)
	DescribeLaunchConfigurationsAsync(ctx workflow.Context, input *autoscaling.DescribeLaunchConfigurationsInput) *AutoscalingDescribeLaunchConfigurationsFuture

	DescribeLifecycleHookTypes(ctx workflow.Context, input *autoscaling.DescribeLifecycleHookTypesInput) (*autoscaling.DescribeLifecycleHookTypesOutput, error)
	DescribeLifecycleHookTypesAsync(ctx workflow.Context, input *autoscaling.DescribeLifecycleHookTypesInput) *AutoscalingDescribeLifecycleHookTypesFuture

	DescribeLifecycleHooks(ctx workflow.Context, input *autoscaling.DescribeLifecycleHooksInput) (*autoscaling.DescribeLifecycleHooksOutput, error)
	DescribeLifecycleHooksAsync(ctx workflow.Context, input *autoscaling.DescribeLifecycleHooksInput) *AutoscalingDescribeLifecycleHooksFuture

	DescribeLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput) (*autoscaling.DescribeLoadBalancerTargetGroupsOutput, error)
	DescribeLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput) *AutoscalingDescribeLoadBalancerTargetGroupsFuture

	DescribeLoadBalancers(ctx workflow.Context, input *autoscaling.DescribeLoadBalancersInput) (*autoscaling.DescribeLoadBalancersOutput, error)
	DescribeLoadBalancersAsync(ctx workflow.Context, input *autoscaling.DescribeLoadBalancersInput) *AutoscalingDescribeLoadBalancersFuture

	DescribeMetricCollectionTypes(ctx workflow.Context, input *autoscaling.DescribeMetricCollectionTypesInput) (*autoscaling.DescribeMetricCollectionTypesOutput, error)
	DescribeMetricCollectionTypesAsync(ctx workflow.Context, input *autoscaling.DescribeMetricCollectionTypesInput) *AutoscalingDescribeMetricCollectionTypesFuture

	DescribeNotificationConfigurations(ctx workflow.Context, input *autoscaling.DescribeNotificationConfigurationsInput) (*autoscaling.DescribeNotificationConfigurationsOutput, error)
	DescribeNotificationConfigurationsAsync(ctx workflow.Context, input *autoscaling.DescribeNotificationConfigurationsInput) *AutoscalingDescribeNotificationConfigurationsFuture

	DescribePolicies(ctx workflow.Context, input *autoscaling.DescribePoliciesInput) (*autoscaling.DescribePoliciesOutput, error)
	DescribePoliciesAsync(ctx workflow.Context, input *autoscaling.DescribePoliciesInput) *AutoscalingDescribePoliciesFuture

	DescribeScalingActivities(ctx workflow.Context, input *autoscaling.DescribeScalingActivitiesInput) (*autoscaling.DescribeScalingActivitiesOutput, error)
	DescribeScalingActivitiesAsync(ctx workflow.Context, input *autoscaling.DescribeScalingActivitiesInput) *AutoscalingDescribeScalingActivitiesFuture

	DescribeScalingProcessTypes(ctx workflow.Context, input *autoscaling.DescribeScalingProcessTypesInput) (*autoscaling.DescribeScalingProcessTypesOutput, error)
	DescribeScalingProcessTypesAsync(ctx workflow.Context, input *autoscaling.DescribeScalingProcessTypesInput) *AutoscalingDescribeScalingProcessTypesFuture

	DescribeScheduledActions(ctx workflow.Context, input *autoscaling.DescribeScheduledActionsInput) (*autoscaling.DescribeScheduledActionsOutput, error)
	DescribeScheduledActionsAsync(ctx workflow.Context, input *autoscaling.DescribeScheduledActionsInput) *AutoscalingDescribeScheduledActionsFuture

	DescribeTags(ctx workflow.Context, input *autoscaling.DescribeTagsInput) (*autoscaling.DescribeTagsOutput, error)
	DescribeTagsAsync(ctx workflow.Context, input *autoscaling.DescribeTagsInput) *AutoscalingDescribeTagsFuture

	DescribeTerminationPolicyTypes(ctx workflow.Context, input *autoscaling.DescribeTerminationPolicyTypesInput) (*autoscaling.DescribeTerminationPolicyTypesOutput, error)
	DescribeTerminationPolicyTypesAsync(ctx workflow.Context, input *autoscaling.DescribeTerminationPolicyTypesInput) *AutoscalingDescribeTerminationPolicyTypesFuture

	DetachInstances(ctx workflow.Context, input *autoscaling.DetachInstancesInput) (*autoscaling.DetachInstancesOutput, error)
	DetachInstancesAsync(ctx workflow.Context, input *autoscaling.DetachInstancesInput) *AutoscalingDetachInstancesFuture

	DetachLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput) (*autoscaling.DetachLoadBalancerTargetGroupsOutput, error)
	DetachLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput) *AutoscalingDetachLoadBalancerTargetGroupsFuture

	DetachLoadBalancers(ctx workflow.Context, input *autoscaling.DetachLoadBalancersInput) (*autoscaling.DetachLoadBalancersOutput, error)
	DetachLoadBalancersAsync(ctx workflow.Context, input *autoscaling.DetachLoadBalancersInput) *AutoscalingDetachLoadBalancersFuture

	DisableMetricsCollection(ctx workflow.Context, input *autoscaling.DisableMetricsCollectionInput) (*autoscaling.DisableMetricsCollectionOutput, error)
	DisableMetricsCollectionAsync(ctx workflow.Context, input *autoscaling.DisableMetricsCollectionInput) *AutoscalingDisableMetricsCollectionFuture

	EnableMetricsCollection(ctx workflow.Context, input *autoscaling.EnableMetricsCollectionInput) (*autoscaling.EnableMetricsCollectionOutput, error)
	EnableMetricsCollectionAsync(ctx workflow.Context, input *autoscaling.EnableMetricsCollectionInput) *AutoscalingEnableMetricsCollectionFuture

	EnterStandby(ctx workflow.Context, input *autoscaling.EnterStandbyInput) (*autoscaling.EnterStandbyOutput, error)
	EnterStandbyAsync(ctx workflow.Context, input *autoscaling.EnterStandbyInput) *AutoscalingEnterStandbyFuture

	ExecutePolicy(ctx workflow.Context, input *autoscaling.ExecutePolicyInput) (*autoscaling.ExecutePolicyOutput, error)
	ExecutePolicyAsync(ctx workflow.Context, input *autoscaling.ExecutePolicyInput) *AutoscalingExecutePolicyFuture

	ExitStandby(ctx workflow.Context, input *autoscaling.ExitStandbyInput) (*autoscaling.ExitStandbyOutput, error)
	ExitStandbyAsync(ctx workflow.Context, input *autoscaling.ExitStandbyInput) *AutoscalingExitStandbyFuture

	PutLifecycleHook(ctx workflow.Context, input *autoscaling.PutLifecycleHookInput) (*autoscaling.PutLifecycleHookOutput, error)
	PutLifecycleHookAsync(ctx workflow.Context, input *autoscaling.PutLifecycleHookInput) *AutoscalingPutLifecycleHookFuture

	PutNotificationConfiguration(ctx workflow.Context, input *autoscaling.PutNotificationConfigurationInput) (*autoscaling.PutNotificationConfigurationOutput, error)
	PutNotificationConfigurationAsync(ctx workflow.Context, input *autoscaling.PutNotificationConfigurationInput) *AutoscalingPutNotificationConfigurationFuture

	PutScalingPolicy(ctx workflow.Context, input *autoscaling.PutScalingPolicyInput) (*autoscaling.PutScalingPolicyOutput, error)
	PutScalingPolicyAsync(ctx workflow.Context, input *autoscaling.PutScalingPolicyInput) *AutoscalingPutScalingPolicyFuture

	PutScheduledUpdateGroupAction(ctx workflow.Context, input *autoscaling.PutScheduledUpdateGroupActionInput) (*autoscaling.PutScheduledUpdateGroupActionOutput, error)
	PutScheduledUpdateGroupActionAsync(ctx workflow.Context, input *autoscaling.PutScheduledUpdateGroupActionInput) *AutoscalingPutScheduledUpdateGroupActionFuture

	RecordLifecycleActionHeartbeat(ctx workflow.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error)
	RecordLifecycleActionHeartbeatAsync(ctx workflow.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput) *AutoscalingRecordLifecycleActionHeartbeatFuture

	ResumeProcesses(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) (*autoscaling.ResumeProcessesOutput, error)
	ResumeProcessesAsync(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) *AutoscalingResumeProcessesFuture

	SetDesiredCapacity(ctx workflow.Context, input *autoscaling.SetDesiredCapacityInput) (*autoscaling.SetDesiredCapacityOutput, error)
	SetDesiredCapacityAsync(ctx workflow.Context, input *autoscaling.SetDesiredCapacityInput) *AutoscalingSetDesiredCapacityFuture

	SetInstanceHealth(ctx workflow.Context, input *autoscaling.SetInstanceHealthInput) (*autoscaling.SetInstanceHealthOutput, error)
	SetInstanceHealthAsync(ctx workflow.Context, input *autoscaling.SetInstanceHealthInput) *AutoscalingSetInstanceHealthFuture

	SetInstanceProtection(ctx workflow.Context, input *autoscaling.SetInstanceProtectionInput) (*autoscaling.SetInstanceProtectionOutput, error)
	SetInstanceProtectionAsync(ctx workflow.Context, input *autoscaling.SetInstanceProtectionInput) *AutoscalingSetInstanceProtectionFuture

	StartInstanceRefresh(ctx workflow.Context, input *autoscaling.StartInstanceRefreshInput) (*autoscaling.StartInstanceRefreshOutput, error)
	StartInstanceRefreshAsync(ctx workflow.Context, input *autoscaling.StartInstanceRefreshInput) *AutoscalingStartInstanceRefreshFuture

	SuspendProcesses(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) (*autoscaling.SuspendProcessesOutput, error)
	SuspendProcessesAsync(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) *AutoscalingSuspendProcessesFuture

	TerminateInstanceInAutoScalingGroup(ctx workflow.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput) (*autoscaling.TerminateInstanceInAutoScalingGroupOutput, error)
	TerminateInstanceInAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput) *AutoscalingTerminateInstanceInAutoScalingGroupFuture

	UpdateAutoScalingGroup(ctx workflow.Context, input *autoscaling.UpdateAutoScalingGroupInput) (*autoscaling.UpdateAutoScalingGroupOutput, error)
	UpdateAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.UpdateAutoScalingGroupInput) *AutoscalingUpdateAutoScalingGroupFuture

	WaitUntilGroupExists(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error
	WaitUntilGroupExistsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *VoidFuture

	WaitUntilGroupInService(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error
	WaitUntilGroupInServiceAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *VoidFuture

	WaitUntilGroupNotExists(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error
	WaitUntilGroupNotExistsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *VoidFuture
}

type AutoScalingStub struct{}

func NewAutoScalingStub() AutoScalingClient {
	return &AutoScalingStub{}
}

type AutoscalingAttachInstancesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingAttachInstancesFuture) Get(ctx workflow.Context) (*autoscaling.AttachInstancesOutput, error) {
	var output autoscaling.AttachInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingAttachLoadBalancerTargetGroupsFuture struct {
	Future workflow.Future
}

func (r *AutoscalingAttachLoadBalancerTargetGroupsFuture) Get(ctx workflow.Context) (*autoscaling.AttachLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.AttachLoadBalancerTargetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingAttachLoadBalancersFuture struct {
	Future workflow.Future
}

func (r *AutoscalingAttachLoadBalancersFuture) Get(ctx workflow.Context) (*autoscaling.AttachLoadBalancersOutput, error) {
	var output autoscaling.AttachLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingBatchDeleteScheduledActionFuture struct {
	Future workflow.Future
}

func (r *AutoscalingBatchDeleteScheduledActionFuture) Get(ctx workflow.Context) (*autoscaling.BatchDeleteScheduledActionOutput, error) {
	var output autoscaling.BatchDeleteScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingBatchPutScheduledUpdateGroupActionFuture struct {
	Future workflow.Future
}

func (r *AutoscalingBatchPutScheduledUpdateGroupActionFuture) Get(ctx workflow.Context) (*autoscaling.BatchPutScheduledUpdateGroupActionOutput, error) {
	var output autoscaling.BatchPutScheduledUpdateGroupActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingCancelInstanceRefreshFuture struct {
	Future workflow.Future
}

func (r *AutoscalingCancelInstanceRefreshFuture) Get(ctx workflow.Context) (*autoscaling.CancelInstanceRefreshOutput, error) {
	var output autoscaling.CancelInstanceRefreshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingCompleteLifecycleActionFuture struct {
	Future workflow.Future
}

func (r *AutoscalingCompleteLifecycleActionFuture) Get(ctx workflow.Context) (*autoscaling.CompleteLifecycleActionOutput, error) {
	var output autoscaling.CompleteLifecycleActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingCreateAutoScalingGroupFuture struct {
	Future workflow.Future
}

func (r *AutoscalingCreateAutoScalingGroupFuture) Get(ctx workflow.Context) (*autoscaling.CreateAutoScalingGroupOutput, error) {
	var output autoscaling.CreateAutoScalingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingCreateLaunchConfigurationFuture struct {
	Future workflow.Future
}

func (r *AutoscalingCreateLaunchConfigurationFuture) Get(ctx workflow.Context) (*autoscaling.CreateLaunchConfigurationOutput, error) {
	var output autoscaling.CreateLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingCreateOrUpdateTagsFuture struct {
	Future workflow.Future
}

func (r *AutoscalingCreateOrUpdateTagsFuture) Get(ctx workflow.Context) (*autoscaling.CreateOrUpdateTagsOutput, error) {
	var output autoscaling.CreateOrUpdateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDeleteAutoScalingGroupFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDeleteAutoScalingGroupFuture) Get(ctx workflow.Context) (*autoscaling.DeleteAutoScalingGroupOutput, error) {
	var output autoscaling.DeleteAutoScalingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDeleteLaunchConfigurationFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDeleteLaunchConfigurationFuture) Get(ctx workflow.Context) (*autoscaling.DeleteLaunchConfigurationOutput, error) {
	var output autoscaling.DeleteLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDeleteLifecycleHookFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDeleteLifecycleHookFuture) Get(ctx workflow.Context) (*autoscaling.DeleteLifecycleHookOutput, error) {
	var output autoscaling.DeleteLifecycleHookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDeleteNotificationConfigurationFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDeleteNotificationConfigurationFuture) Get(ctx workflow.Context) (*autoscaling.DeleteNotificationConfigurationOutput, error) {
	var output autoscaling.DeleteNotificationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDeletePolicyFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDeletePolicyFuture) Get(ctx workflow.Context) (*autoscaling.DeletePolicyOutput, error) {
	var output autoscaling.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDeleteScheduledActionFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDeleteScheduledActionFuture) Get(ctx workflow.Context) (*autoscaling.DeleteScheduledActionOutput, error) {
	var output autoscaling.DeleteScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDeleteTagsFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDeleteTagsFuture) Get(ctx workflow.Context) (*autoscaling.DeleteTagsOutput, error) {
	var output autoscaling.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeAccountLimitsFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeAccountLimitsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAccountLimitsOutput, error) {
	var output autoscaling.DescribeAccountLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeAdjustmentTypesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeAdjustmentTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAdjustmentTypesOutput, error) {
	var output autoscaling.DescribeAdjustmentTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeAutoScalingGroupsFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeAutoScalingGroupsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAutoScalingGroupsOutput, error) {
	var output autoscaling.DescribeAutoScalingGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeAutoScalingInstancesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeAutoScalingInstancesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAutoScalingInstancesOutput, error) {
	var output autoscaling.DescribeAutoScalingInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeAutoScalingNotificationTypesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeAutoScalingNotificationTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAutoScalingNotificationTypesOutput, error) {
	var output autoscaling.DescribeAutoScalingNotificationTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeInstanceRefreshesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeInstanceRefreshesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeInstanceRefreshesOutput, error) {
	var output autoscaling.DescribeInstanceRefreshesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeLaunchConfigurationsFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeLaunchConfigurationsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLaunchConfigurationsOutput, error) {
	var output autoscaling.DescribeLaunchConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeLifecycleHookTypesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeLifecycleHookTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLifecycleHookTypesOutput, error) {
	var output autoscaling.DescribeLifecycleHookTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeLifecycleHooksFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeLifecycleHooksFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLifecycleHooksOutput, error) {
	var output autoscaling.DescribeLifecycleHooksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeLoadBalancerTargetGroupsFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeLoadBalancerTargetGroupsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.DescribeLoadBalancerTargetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeLoadBalancersFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeLoadBalancersFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLoadBalancersOutput, error) {
	var output autoscaling.DescribeLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeMetricCollectionTypesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeMetricCollectionTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeMetricCollectionTypesOutput, error) {
	var output autoscaling.DescribeMetricCollectionTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeNotificationConfigurationsFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeNotificationConfigurationsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeNotificationConfigurationsOutput, error) {
	var output autoscaling.DescribeNotificationConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribePoliciesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribePoliciesFuture) Get(ctx workflow.Context) (*autoscaling.DescribePoliciesOutput, error) {
	var output autoscaling.DescribePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeScalingActivitiesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeScalingActivitiesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeScalingActivitiesOutput, error) {
	var output autoscaling.DescribeScalingActivitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeScalingProcessTypesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeScalingProcessTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeScalingProcessTypesOutput, error) {
	var output autoscaling.DescribeScalingProcessTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeScheduledActionsFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeScheduledActionsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeScheduledActionsOutput, error) {
	var output autoscaling.DescribeScheduledActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeTagsFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeTagsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeTagsOutput, error) {
	var output autoscaling.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDescribeTerminationPolicyTypesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDescribeTerminationPolicyTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeTerminationPolicyTypesOutput, error) {
	var output autoscaling.DescribeTerminationPolicyTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDetachInstancesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDetachInstancesFuture) Get(ctx workflow.Context) (*autoscaling.DetachInstancesOutput, error) {
	var output autoscaling.DetachInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDetachLoadBalancerTargetGroupsFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDetachLoadBalancerTargetGroupsFuture) Get(ctx workflow.Context) (*autoscaling.DetachLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.DetachLoadBalancerTargetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDetachLoadBalancersFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDetachLoadBalancersFuture) Get(ctx workflow.Context) (*autoscaling.DetachLoadBalancersOutput, error) {
	var output autoscaling.DetachLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingDisableMetricsCollectionFuture struct {
	Future workflow.Future
}

func (r *AutoscalingDisableMetricsCollectionFuture) Get(ctx workflow.Context) (*autoscaling.DisableMetricsCollectionOutput, error) {
	var output autoscaling.DisableMetricsCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingEnableMetricsCollectionFuture struct {
	Future workflow.Future
}

func (r *AutoscalingEnableMetricsCollectionFuture) Get(ctx workflow.Context) (*autoscaling.EnableMetricsCollectionOutput, error) {
	var output autoscaling.EnableMetricsCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingEnterStandbyFuture struct {
	Future workflow.Future
}

func (r *AutoscalingEnterStandbyFuture) Get(ctx workflow.Context) (*autoscaling.EnterStandbyOutput, error) {
	var output autoscaling.EnterStandbyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingExecutePolicyFuture struct {
	Future workflow.Future
}

func (r *AutoscalingExecutePolicyFuture) Get(ctx workflow.Context) (*autoscaling.ExecutePolicyOutput, error) {
	var output autoscaling.ExecutePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingExitStandbyFuture struct {
	Future workflow.Future
}

func (r *AutoscalingExitStandbyFuture) Get(ctx workflow.Context) (*autoscaling.ExitStandbyOutput, error) {
	var output autoscaling.ExitStandbyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingPutLifecycleHookFuture struct {
	Future workflow.Future
}

func (r *AutoscalingPutLifecycleHookFuture) Get(ctx workflow.Context) (*autoscaling.PutLifecycleHookOutput, error) {
	var output autoscaling.PutLifecycleHookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingPutNotificationConfigurationFuture struct {
	Future workflow.Future
}

func (r *AutoscalingPutNotificationConfigurationFuture) Get(ctx workflow.Context) (*autoscaling.PutNotificationConfigurationOutput, error) {
	var output autoscaling.PutNotificationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingPutScalingPolicyFuture struct {
	Future workflow.Future
}

func (r *AutoscalingPutScalingPolicyFuture) Get(ctx workflow.Context) (*autoscaling.PutScalingPolicyOutput, error) {
	var output autoscaling.PutScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingPutScheduledUpdateGroupActionFuture struct {
	Future workflow.Future
}

func (r *AutoscalingPutScheduledUpdateGroupActionFuture) Get(ctx workflow.Context) (*autoscaling.PutScheduledUpdateGroupActionOutput, error) {
	var output autoscaling.PutScheduledUpdateGroupActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingRecordLifecycleActionHeartbeatFuture struct {
	Future workflow.Future
}

func (r *AutoscalingRecordLifecycleActionHeartbeatFuture) Get(ctx workflow.Context) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error) {
	var output autoscaling.RecordLifecycleActionHeartbeatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingResumeProcessesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingResumeProcessesFuture) Get(ctx workflow.Context) (*autoscaling.ResumeProcessesOutput, error) {
	var output autoscaling.ResumeProcessesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingSetDesiredCapacityFuture struct {
	Future workflow.Future
}

func (r *AutoscalingSetDesiredCapacityFuture) Get(ctx workflow.Context) (*autoscaling.SetDesiredCapacityOutput, error) {
	var output autoscaling.SetDesiredCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingSetInstanceHealthFuture struct {
	Future workflow.Future
}

func (r *AutoscalingSetInstanceHealthFuture) Get(ctx workflow.Context) (*autoscaling.SetInstanceHealthOutput, error) {
	var output autoscaling.SetInstanceHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingSetInstanceProtectionFuture struct {
	Future workflow.Future
}

func (r *AutoscalingSetInstanceProtectionFuture) Get(ctx workflow.Context) (*autoscaling.SetInstanceProtectionOutput, error) {
	var output autoscaling.SetInstanceProtectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingStartInstanceRefreshFuture struct {
	Future workflow.Future
}

func (r *AutoscalingStartInstanceRefreshFuture) Get(ctx workflow.Context) (*autoscaling.StartInstanceRefreshOutput, error) {
	var output autoscaling.StartInstanceRefreshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingSuspendProcessesFuture struct {
	Future workflow.Future
}

func (r *AutoscalingSuspendProcessesFuture) Get(ctx workflow.Context) (*autoscaling.SuspendProcessesOutput, error) {
	var output autoscaling.SuspendProcessesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingTerminateInstanceInAutoScalingGroupFuture struct {
	Future workflow.Future
}

func (r *AutoscalingTerminateInstanceInAutoScalingGroupFuture) Get(ctx workflow.Context) (*autoscaling.TerminateInstanceInAutoScalingGroupOutput, error) {
	var output autoscaling.TerminateInstanceInAutoScalingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AutoscalingUpdateAutoScalingGroupFuture struct {
	Future workflow.Future
}

func (r *AutoscalingUpdateAutoScalingGroupFuture) Get(ctx workflow.Context) (*autoscaling.UpdateAutoScalingGroupOutput, error) {
	var output autoscaling.UpdateAutoScalingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) AttachInstances(ctx workflow.Context, input *autoscaling.AttachInstancesInput) (*autoscaling.AttachInstancesOutput, error) {
	var output autoscaling.AttachInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.AttachInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) AttachInstancesAsync(ctx workflow.Context, input *autoscaling.AttachInstancesInput) *AutoscalingAttachInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.AttachInstances", input)
	return &AutoscalingAttachInstancesFuture{Future: future}
}

func (a *AutoScalingStub) AttachLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput) (*autoscaling.AttachLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.AttachLoadBalancerTargetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.AttachLoadBalancerTargetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) AttachLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput) *AutoscalingAttachLoadBalancerTargetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.AttachLoadBalancerTargetGroups", input)
	return &AutoscalingAttachLoadBalancerTargetGroupsFuture{Future: future}
}

func (a *AutoScalingStub) AttachLoadBalancers(ctx workflow.Context, input *autoscaling.AttachLoadBalancersInput) (*autoscaling.AttachLoadBalancersOutput, error) {
	var output autoscaling.AttachLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.AttachLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) AttachLoadBalancersAsync(ctx workflow.Context, input *autoscaling.AttachLoadBalancersInput) *AutoscalingAttachLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.AttachLoadBalancers", input)
	return &AutoscalingAttachLoadBalancersFuture{Future: future}
}

func (a *AutoScalingStub) BatchDeleteScheduledAction(ctx workflow.Context, input *autoscaling.BatchDeleteScheduledActionInput) (*autoscaling.BatchDeleteScheduledActionOutput, error) {
	var output autoscaling.BatchDeleteScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.BatchDeleteScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) BatchDeleteScheduledActionAsync(ctx workflow.Context, input *autoscaling.BatchDeleteScheduledActionInput) *AutoscalingBatchDeleteScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.BatchDeleteScheduledAction", input)
	return &AutoscalingBatchDeleteScheduledActionFuture{Future: future}
}

func (a *AutoScalingStub) BatchPutScheduledUpdateGroupAction(ctx workflow.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput) (*autoscaling.BatchPutScheduledUpdateGroupActionOutput, error) {
	var output autoscaling.BatchPutScheduledUpdateGroupActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.BatchPutScheduledUpdateGroupAction", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) BatchPutScheduledUpdateGroupActionAsync(ctx workflow.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput) *AutoscalingBatchPutScheduledUpdateGroupActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.BatchPutScheduledUpdateGroupAction", input)
	return &AutoscalingBatchPutScheduledUpdateGroupActionFuture{Future: future}
}

func (a *AutoScalingStub) CancelInstanceRefresh(ctx workflow.Context, input *autoscaling.CancelInstanceRefreshInput) (*autoscaling.CancelInstanceRefreshOutput, error) {
	var output autoscaling.CancelInstanceRefreshOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.CancelInstanceRefresh", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) CancelInstanceRefreshAsync(ctx workflow.Context, input *autoscaling.CancelInstanceRefreshInput) *AutoscalingCancelInstanceRefreshFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.CancelInstanceRefresh", input)
	return &AutoscalingCancelInstanceRefreshFuture{Future: future}
}

func (a *AutoScalingStub) CompleteLifecycleAction(ctx workflow.Context, input *autoscaling.CompleteLifecycleActionInput) (*autoscaling.CompleteLifecycleActionOutput, error) {
	var output autoscaling.CompleteLifecycleActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.CompleteLifecycleAction", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) CompleteLifecycleActionAsync(ctx workflow.Context, input *autoscaling.CompleteLifecycleActionInput) *AutoscalingCompleteLifecycleActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.CompleteLifecycleAction", input)
	return &AutoscalingCompleteLifecycleActionFuture{Future: future}
}

func (a *AutoScalingStub) CreateAutoScalingGroup(ctx workflow.Context, input *autoscaling.CreateAutoScalingGroupInput) (*autoscaling.CreateAutoScalingGroupOutput, error) {
	var output autoscaling.CreateAutoScalingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.CreateAutoScalingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) CreateAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.CreateAutoScalingGroupInput) *AutoscalingCreateAutoScalingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.CreateAutoScalingGroup", input)
	return &AutoscalingCreateAutoScalingGroupFuture{Future: future}
}

func (a *AutoScalingStub) CreateLaunchConfiguration(ctx workflow.Context, input *autoscaling.CreateLaunchConfigurationInput) (*autoscaling.CreateLaunchConfigurationOutput, error) {
	var output autoscaling.CreateLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.CreateLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) CreateLaunchConfigurationAsync(ctx workflow.Context, input *autoscaling.CreateLaunchConfigurationInput) *AutoscalingCreateLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.CreateLaunchConfiguration", input)
	return &AutoscalingCreateLaunchConfigurationFuture{Future: future}
}

func (a *AutoScalingStub) CreateOrUpdateTags(ctx workflow.Context, input *autoscaling.CreateOrUpdateTagsInput) (*autoscaling.CreateOrUpdateTagsOutput, error) {
	var output autoscaling.CreateOrUpdateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.CreateOrUpdateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) CreateOrUpdateTagsAsync(ctx workflow.Context, input *autoscaling.CreateOrUpdateTagsInput) *AutoscalingCreateOrUpdateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.CreateOrUpdateTags", input)
	return &AutoscalingCreateOrUpdateTagsFuture{Future: future}
}

func (a *AutoScalingStub) DeleteAutoScalingGroup(ctx workflow.Context, input *autoscaling.DeleteAutoScalingGroupInput) (*autoscaling.DeleteAutoScalingGroupOutput, error) {
	var output autoscaling.DeleteAutoScalingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteAutoScalingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeleteAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.DeleteAutoScalingGroupInput) *AutoscalingDeleteAutoScalingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteAutoScalingGroup", input)
	return &AutoscalingDeleteAutoScalingGroupFuture{Future: future}
}

func (a *AutoScalingStub) DeleteLaunchConfiguration(ctx workflow.Context, input *autoscaling.DeleteLaunchConfigurationInput) (*autoscaling.DeleteLaunchConfigurationOutput, error) {
	var output autoscaling.DeleteLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeleteLaunchConfigurationAsync(ctx workflow.Context, input *autoscaling.DeleteLaunchConfigurationInput) *AutoscalingDeleteLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteLaunchConfiguration", input)
	return &AutoscalingDeleteLaunchConfigurationFuture{Future: future}
}

func (a *AutoScalingStub) DeleteLifecycleHook(ctx workflow.Context, input *autoscaling.DeleteLifecycleHookInput) (*autoscaling.DeleteLifecycleHookOutput, error) {
	var output autoscaling.DeleteLifecycleHookOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteLifecycleHook", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeleteLifecycleHookAsync(ctx workflow.Context, input *autoscaling.DeleteLifecycleHookInput) *AutoscalingDeleteLifecycleHookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteLifecycleHook", input)
	return &AutoscalingDeleteLifecycleHookFuture{Future: future}
}

func (a *AutoScalingStub) DeleteNotificationConfiguration(ctx workflow.Context, input *autoscaling.DeleteNotificationConfigurationInput) (*autoscaling.DeleteNotificationConfigurationOutput, error) {
	var output autoscaling.DeleteNotificationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteNotificationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeleteNotificationConfigurationAsync(ctx workflow.Context, input *autoscaling.DeleteNotificationConfigurationInput) *AutoscalingDeleteNotificationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteNotificationConfiguration", input)
	return &AutoscalingDeleteNotificationConfigurationFuture{Future: future}
}

func (a *AutoScalingStub) DeletePolicy(ctx workflow.Context, input *autoscaling.DeletePolicyInput) (*autoscaling.DeletePolicyOutput, error) {
	var output autoscaling.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeletePolicyAsync(ctx workflow.Context, input *autoscaling.DeletePolicyInput) *AutoscalingDeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeletePolicy", input)
	return &AutoscalingDeletePolicyFuture{Future: future}
}

func (a *AutoScalingStub) DeleteScheduledAction(ctx workflow.Context, input *autoscaling.DeleteScheduledActionInput) (*autoscaling.DeleteScheduledActionOutput, error) {
	var output autoscaling.DeleteScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeleteScheduledActionAsync(ctx workflow.Context, input *autoscaling.DeleteScheduledActionInput) *AutoscalingDeleteScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteScheduledAction", input)
	return &AutoscalingDeleteScheduledActionFuture{Future: future}
}

func (a *AutoScalingStub) DeleteTags(ctx workflow.Context, input *autoscaling.DeleteTagsInput) (*autoscaling.DeleteTagsOutput, error) {
	var output autoscaling.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DeleteTagsAsync(ctx workflow.Context, input *autoscaling.DeleteTagsInput) *AutoscalingDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DeleteTags", input)
	return &AutoscalingDeleteTagsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeAccountLimits(ctx workflow.Context, input *autoscaling.DescribeAccountLimitsInput) (*autoscaling.DescribeAccountLimitsOutput, error) {
	var output autoscaling.DescribeAccountLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAccountLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeAccountLimitsAsync(ctx workflow.Context, input *autoscaling.DescribeAccountLimitsInput) *AutoscalingDescribeAccountLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAccountLimits", input)
	return &AutoscalingDescribeAccountLimitsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeAdjustmentTypes(ctx workflow.Context, input *autoscaling.DescribeAdjustmentTypesInput) (*autoscaling.DescribeAdjustmentTypesOutput, error) {
	var output autoscaling.DescribeAdjustmentTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAdjustmentTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeAdjustmentTypesAsync(ctx workflow.Context, input *autoscaling.DescribeAdjustmentTypesInput) *AutoscalingDescribeAdjustmentTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAdjustmentTypes", input)
	return &AutoscalingDescribeAdjustmentTypesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeAutoScalingGroups(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) (*autoscaling.DescribeAutoScalingGroupsOutput, error) {
	var output autoscaling.DescribeAutoScalingGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAutoScalingGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeAutoScalingGroupsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *AutoscalingDescribeAutoScalingGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAutoScalingGroups", input)
	return &AutoscalingDescribeAutoScalingGroupsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeAutoScalingInstances(ctx workflow.Context, input *autoscaling.DescribeAutoScalingInstancesInput) (*autoscaling.DescribeAutoScalingInstancesOutput, error) {
	var output autoscaling.DescribeAutoScalingInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAutoScalingInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeAutoScalingInstancesAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingInstancesInput) *AutoscalingDescribeAutoScalingInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAutoScalingInstances", input)
	return &AutoscalingDescribeAutoScalingInstancesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeAutoScalingNotificationTypes(ctx workflow.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput) (*autoscaling.DescribeAutoScalingNotificationTypesOutput, error) {
	var output autoscaling.DescribeAutoScalingNotificationTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAutoScalingNotificationTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeAutoScalingNotificationTypesAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput) *AutoscalingDescribeAutoScalingNotificationTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeAutoScalingNotificationTypes", input)
	return &AutoscalingDescribeAutoScalingNotificationTypesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeInstanceRefreshes(ctx workflow.Context, input *autoscaling.DescribeInstanceRefreshesInput) (*autoscaling.DescribeInstanceRefreshesOutput, error) {
	var output autoscaling.DescribeInstanceRefreshesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeInstanceRefreshes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeInstanceRefreshesAsync(ctx workflow.Context, input *autoscaling.DescribeInstanceRefreshesInput) *AutoscalingDescribeInstanceRefreshesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeInstanceRefreshes", input)
	return &AutoscalingDescribeInstanceRefreshesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeLaunchConfigurations(ctx workflow.Context, input *autoscaling.DescribeLaunchConfigurationsInput) (*autoscaling.DescribeLaunchConfigurationsOutput, error) {
	var output autoscaling.DescribeLaunchConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLaunchConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeLaunchConfigurationsAsync(ctx workflow.Context, input *autoscaling.DescribeLaunchConfigurationsInput) *AutoscalingDescribeLaunchConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLaunchConfigurations", input)
	return &AutoscalingDescribeLaunchConfigurationsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeLifecycleHookTypes(ctx workflow.Context, input *autoscaling.DescribeLifecycleHookTypesInput) (*autoscaling.DescribeLifecycleHookTypesOutput, error) {
	var output autoscaling.DescribeLifecycleHookTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLifecycleHookTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeLifecycleHookTypesAsync(ctx workflow.Context, input *autoscaling.DescribeLifecycleHookTypesInput) *AutoscalingDescribeLifecycleHookTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLifecycleHookTypes", input)
	return &AutoscalingDescribeLifecycleHookTypesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeLifecycleHooks(ctx workflow.Context, input *autoscaling.DescribeLifecycleHooksInput) (*autoscaling.DescribeLifecycleHooksOutput, error) {
	var output autoscaling.DescribeLifecycleHooksOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLifecycleHooks", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeLifecycleHooksAsync(ctx workflow.Context, input *autoscaling.DescribeLifecycleHooksInput) *AutoscalingDescribeLifecycleHooksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLifecycleHooks", input)
	return &AutoscalingDescribeLifecycleHooksFuture{Future: future}
}

func (a *AutoScalingStub) DescribeLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput) (*autoscaling.DescribeLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.DescribeLoadBalancerTargetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLoadBalancerTargetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput) *AutoscalingDescribeLoadBalancerTargetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLoadBalancerTargetGroups", input)
	return &AutoscalingDescribeLoadBalancerTargetGroupsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeLoadBalancers(ctx workflow.Context, input *autoscaling.DescribeLoadBalancersInput) (*autoscaling.DescribeLoadBalancersOutput, error) {
	var output autoscaling.DescribeLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeLoadBalancersAsync(ctx workflow.Context, input *autoscaling.DescribeLoadBalancersInput) *AutoscalingDescribeLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeLoadBalancers", input)
	return &AutoscalingDescribeLoadBalancersFuture{Future: future}
}

func (a *AutoScalingStub) DescribeMetricCollectionTypes(ctx workflow.Context, input *autoscaling.DescribeMetricCollectionTypesInput) (*autoscaling.DescribeMetricCollectionTypesOutput, error) {
	var output autoscaling.DescribeMetricCollectionTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeMetricCollectionTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeMetricCollectionTypesAsync(ctx workflow.Context, input *autoscaling.DescribeMetricCollectionTypesInput) *AutoscalingDescribeMetricCollectionTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeMetricCollectionTypes", input)
	return &AutoscalingDescribeMetricCollectionTypesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeNotificationConfigurations(ctx workflow.Context, input *autoscaling.DescribeNotificationConfigurationsInput) (*autoscaling.DescribeNotificationConfigurationsOutput, error) {
	var output autoscaling.DescribeNotificationConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeNotificationConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeNotificationConfigurationsAsync(ctx workflow.Context, input *autoscaling.DescribeNotificationConfigurationsInput) *AutoscalingDescribeNotificationConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeNotificationConfigurations", input)
	return &AutoscalingDescribeNotificationConfigurationsFuture{Future: future}
}

func (a *AutoScalingStub) DescribePolicies(ctx workflow.Context, input *autoscaling.DescribePoliciesInput) (*autoscaling.DescribePoliciesOutput, error) {
	var output autoscaling.DescribePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribePoliciesAsync(ctx workflow.Context, input *autoscaling.DescribePoliciesInput) *AutoscalingDescribePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribePolicies", input)
	return &AutoscalingDescribePoliciesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeScalingActivities(ctx workflow.Context, input *autoscaling.DescribeScalingActivitiesInput) (*autoscaling.DescribeScalingActivitiesOutput, error) {
	var output autoscaling.DescribeScalingActivitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeScalingActivities", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeScalingActivitiesAsync(ctx workflow.Context, input *autoscaling.DescribeScalingActivitiesInput) *AutoscalingDescribeScalingActivitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeScalingActivities", input)
	return &AutoscalingDescribeScalingActivitiesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeScalingProcessTypes(ctx workflow.Context, input *autoscaling.DescribeScalingProcessTypesInput) (*autoscaling.DescribeScalingProcessTypesOutput, error) {
	var output autoscaling.DescribeScalingProcessTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeScalingProcessTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeScalingProcessTypesAsync(ctx workflow.Context, input *autoscaling.DescribeScalingProcessTypesInput) *AutoscalingDescribeScalingProcessTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeScalingProcessTypes", input)
	return &AutoscalingDescribeScalingProcessTypesFuture{Future: future}
}

func (a *AutoScalingStub) DescribeScheduledActions(ctx workflow.Context, input *autoscaling.DescribeScheduledActionsInput) (*autoscaling.DescribeScheduledActionsOutput, error) {
	var output autoscaling.DescribeScheduledActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeScheduledActions", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeScheduledActionsAsync(ctx workflow.Context, input *autoscaling.DescribeScheduledActionsInput) *AutoscalingDescribeScheduledActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeScheduledActions", input)
	return &AutoscalingDescribeScheduledActionsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeTags(ctx workflow.Context, input *autoscaling.DescribeTagsInput) (*autoscaling.DescribeTagsOutput, error) {
	var output autoscaling.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeTagsAsync(ctx workflow.Context, input *autoscaling.DescribeTagsInput) *AutoscalingDescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeTags", input)
	return &AutoscalingDescribeTagsFuture{Future: future}
}

func (a *AutoScalingStub) DescribeTerminationPolicyTypes(ctx workflow.Context, input *autoscaling.DescribeTerminationPolicyTypesInput) (*autoscaling.DescribeTerminationPolicyTypesOutput, error) {
	var output autoscaling.DescribeTerminationPolicyTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeTerminationPolicyTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DescribeTerminationPolicyTypesAsync(ctx workflow.Context, input *autoscaling.DescribeTerminationPolicyTypesInput) *AutoscalingDescribeTerminationPolicyTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DescribeTerminationPolicyTypes", input)
	return &AutoscalingDescribeTerminationPolicyTypesFuture{Future: future}
}

func (a *AutoScalingStub) DetachInstances(ctx workflow.Context, input *autoscaling.DetachInstancesInput) (*autoscaling.DetachInstancesOutput, error) {
	var output autoscaling.DetachInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DetachInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DetachInstancesAsync(ctx workflow.Context, input *autoscaling.DetachInstancesInput) *AutoscalingDetachInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DetachInstances", input)
	return &AutoscalingDetachInstancesFuture{Future: future}
}

func (a *AutoScalingStub) DetachLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput) (*autoscaling.DetachLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.DetachLoadBalancerTargetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DetachLoadBalancerTargetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DetachLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput) *AutoscalingDetachLoadBalancerTargetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DetachLoadBalancerTargetGroups", input)
	return &AutoscalingDetachLoadBalancerTargetGroupsFuture{Future: future}
}

func (a *AutoScalingStub) DetachLoadBalancers(ctx workflow.Context, input *autoscaling.DetachLoadBalancersInput) (*autoscaling.DetachLoadBalancersOutput, error) {
	var output autoscaling.DetachLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DetachLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DetachLoadBalancersAsync(ctx workflow.Context, input *autoscaling.DetachLoadBalancersInput) *AutoscalingDetachLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DetachLoadBalancers", input)
	return &AutoscalingDetachLoadBalancersFuture{Future: future}
}

func (a *AutoScalingStub) DisableMetricsCollection(ctx workflow.Context, input *autoscaling.DisableMetricsCollectionInput) (*autoscaling.DisableMetricsCollectionOutput, error) {
	var output autoscaling.DisableMetricsCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.DisableMetricsCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) DisableMetricsCollectionAsync(ctx workflow.Context, input *autoscaling.DisableMetricsCollectionInput) *AutoscalingDisableMetricsCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.DisableMetricsCollection", input)
	return &AutoscalingDisableMetricsCollectionFuture{Future: future}
}

func (a *AutoScalingStub) EnableMetricsCollection(ctx workflow.Context, input *autoscaling.EnableMetricsCollectionInput) (*autoscaling.EnableMetricsCollectionOutput, error) {
	var output autoscaling.EnableMetricsCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.EnableMetricsCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) EnableMetricsCollectionAsync(ctx workflow.Context, input *autoscaling.EnableMetricsCollectionInput) *AutoscalingEnableMetricsCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.EnableMetricsCollection", input)
	return &AutoscalingEnableMetricsCollectionFuture{Future: future}
}

func (a *AutoScalingStub) EnterStandby(ctx workflow.Context, input *autoscaling.EnterStandbyInput) (*autoscaling.EnterStandbyOutput, error) {
	var output autoscaling.EnterStandbyOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.EnterStandby", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) EnterStandbyAsync(ctx workflow.Context, input *autoscaling.EnterStandbyInput) *AutoscalingEnterStandbyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.EnterStandby", input)
	return &AutoscalingEnterStandbyFuture{Future: future}
}

func (a *AutoScalingStub) ExecutePolicy(ctx workflow.Context, input *autoscaling.ExecutePolicyInput) (*autoscaling.ExecutePolicyOutput, error) {
	var output autoscaling.ExecutePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.ExecutePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) ExecutePolicyAsync(ctx workflow.Context, input *autoscaling.ExecutePolicyInput) *AutoscalingExecutePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.ExecutePolicy", input)
	return &AutoscalingExecutePolicyFuture{Future: future}
}

func (a *AutoScalingStub) ExitStandby(ctx workflow.Context, input *autoscaling.ExitStandbyInput) (*autoscaling.ExitStandbyOutput, error) {
	var output autoscaling.ExitStandbyOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.ExitStandby", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) ExitStandbyAsync(ctx workflow.Context, input *autoscaling.ExitStandbyInput) *AutoscalingExitStandbyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.ExitStandby", input)
	return &AutoscalingExitStandbyFuture{Future: future}
}

func (a *AutoScalingStub) PutLifecycleHook(ctx workflow.Context, input *autoscaling.PutLifecycleHookInput) (*autoscaling.PutLifecycleHookOutput, error) {
	var output autoscaling.PutLifecycleHookOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutLifecycleHook", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) PutLifecycleHookAsync(ctx workflow.Context, input *autoscaling.PutLifecycleHookInput) *AutoscalingPutLifecycleHookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutLifecycleHook", input)
	return &AutoscalingPutLifecycleHookFuture{Future: future}
}

func (a *AutoScalingStub) PutNotificationConfiguration(ctx workflow.Context, input *autoscaling.PutNotificationConfigurationInput) (*autoscaling.PutNotificationConfigurationOutput, error) {
	var output autoscaling.PutNotificationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutNotificationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) PutNotificationConfigurationAsync(ctx workflow.Context, input *autoscaling.PutNotificationConfigurationInput) *AutoscalingPutNotificationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutNotificationConfiguration", input)
	return &AutoscalingPutNotificationConfigurationFuture{Future: future}
}

func (a *AutoScalingStub) PutScalingPolicy(ctx workflow.Context, input *autoscaling.PutScalingPolicyInput) (*autoscaling.PutScalingPolicyOutput, error) {
	var output autoscaling.PutScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) PutScalingPolicyAsync(ctx workflow.Context, input *autoscaling.PutScalingPolicyInput) *AutoscalingPutScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutScalingPolicy", input)
	return &AutoscalingPutScalingPolicyFuture{Future: future}
}

func (a *AutoScalingStub) PutScheduledUpdateGroupAction(ctx workflow.Context, input *autoscaling.PutScheduledUpdateGroupActionInput) (*autoscaling.PutScheduledUpdateGroupActionOutput, error) {
	var output autoscaling.PutScheduledUpdateGroupActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutScheduledUpdateGroupAction", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) PutScheduledUpdateGroupActionAsync(ctx workflow.Context, input *autoscaling.PutScheduledUpdateGroupActionInput) *AutoscalingPutScheduledUpdateGroupActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.PutScheduledUpdateGroupAction", input)
	return &AutoscalingPutScheduledUpdateGroupActionFuture{Future: future}
}

func (a *AutoScalingStub) RecordLifecycleActionHeartbeat(ctx workflow.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error) {
	var output autoscaling.RecordLifecycleActionHeartbeatOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.RecordLifecycleActionHeartbeat", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) RecordLifecycleActionHeartbeatAsync(ctx workflow.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput) *AutoscalingRecordLifecycleActionHeartbeatFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.RecordLifecycleActionHeartbeat", input)
	return &AutoscalingRecordLifecycleActionHeartbeatFuture{Future: future}
}

func (a *AutoScalingStub) ResumeProcesses(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) (*autoscaling.ResumeProcessesOutput, error) {
	var output autoscaling.ResumeProcessesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.ResumeProcesses", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) ResumeProcessesAsync(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) *AutoscalingResumeProcessesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.ResumeProcesses", input)
	return &AutoscalingResumeProcessesFuture{Future: future}
}

func (a *AutoScalingStub) SetDesiredCapacity(ctx workflow.Context, input *autoscaling.SetDesiredCapacityInput) (*autoscaling.SetDesiredCapacityOutput, error) {
	var output autoscaling.SetDesiredCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.SetDesiredCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) SetDesiredCapacityAsync(ctx workflow.Context, input *autoscaling.SetDesiredCapacityInput) *AutoscalingSetDesiredCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.SetDesiredCapacity", input)
	return &AutoscalingSetDesiredCapacityFuture{Future: future}
}

func (a *AutoScalingStub) SetInstanceHealth(ctx workflow.Context, input *autoscaling.SetInstanceHealthInput) (*autoscaling.SetInstanceHealthOutput, error) {
	var output autoscaling.SetInstanceHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.SetInstanceHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) SetInstanceHealthAsync(ctx workflow.Context, input *autoscaling.SetInstanceHealthInput) *AutoscalingSetInstanceHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.SetInstanceHealth", input)
	return &AutoscalingSetInstanceHealthFuture{Future: future}
}

func (a *AutoScalingStub) SetInstanceProtection(ctx workflow.Context, input *autoscaling.SetInstanceProtectionInput) (*autoscaling.SetInstanceProtectionOutput, error) {
	var output autoscaling.SetInstanceProtectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.SetInstanceProtection", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) SetInstanceProtectionAsync(ctx workflow.Context, input *autoscaling.SetInstanceProtectionInput) *AutoscalingSetInstanceProtectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.SetInstanceProtection", input)
	return &AutoscalingSetInstanceProtectionFuture{Future: future}
}

func (a *AutoScalingStub) StartInstanceRefresh(ctx workflow.Context, input *autoscaling.StartInstanceRefreshInput) (*autoscaling.StartInstanceRefreshOutput, error) {
	var output autoscaling.StartInstanceRefreshOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.StartInstanceRefresh", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) StartInstanceRefreshAsync(ctx workflow.Context, input *autoscaling.StartInstanceRefreshInput) *AutoscalingStartInstanceRefreshFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.StartInstanceRefresh", input)
	return &AutoscalingStartInstanceRefreshFuture{Future: future}
}

func (a *AutoScalingStub) SuspendProcesses(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) (*autoscaling.SuspendProcessesOutput, error) {
	var output autoscaling.SuspendProcessesOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.SuspendProcesses", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) SuspendProcessesAsync(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) *AutoscalingSuspendProcessesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.SuspendProcesses", input)
	return &AutoscalingSuspendProcessesFuture{Future: future}
}

func (a *AutoScalingStub) TerminateInstanceInAutoScalingGroup(ctx workflow.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput) (*autoscaling.TerminateInstanceInAutoScalingGroupOutput, error) {
	var output autoscaling.TerminateInstanceInAutoScalingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.TerminateInstanceInAutoScalingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) TerminateInstanceInAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput) *AutoscalingTerminateInstanceInAutoScalingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.TerminateInstanceInAutoScalingGroup", input)
	return &AutoscalingTerminateInstanceInAutoScalingGroupFuture{Future: future}
}

func (a *AutoScalingStub) UpdateAutoScalingGroup(ctx workflow.Context, input *autoscaling.UpdateAutoScalingGroupInput) (*autoscaling.UpdateAutoScalingGroupOutput, error) {
	var output autoscaling.UpdateAutoScalingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.autoscaling.UpdateAutoScalingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *AutoScalingStub) UpdateAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.UpdateAutoScalingGroupInput) *AutoscalingUpdateAutoScalingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.UpdateAutoScalingGroup", input)
	return &AutoscalingUpdateAutoScalingGroupFuture{Future: future}
}

func (a *AutoScalingStub) WaitUntilGroupExists(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.autoscaling.WaitUntilGroupExists", input).Get(ctx, nil)
}

func (a *AutoScalingStub) WaitUntilGroupExistsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.WaitUntilGroupExists", input)
	return NewVoidFuture(future)
}

func (a *AutoScalingStub) WaitUntilGroupInService(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.autoscaling.WaitUntilGroupInService", input).Get(ctx, nil)
}

func (a *AutoScalingStub) WaitUntilGroupInServiceAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.WaitUntilGroupInService", input)
	return NewVoidFuture(future)
}

func (a *AutoScalingStub) WaitUntilGroupNotExists(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws.autoscaling.WaitUntilGroupNotExists", input).Get(ctx, nil)
}

func (a *AutoScalingStub) WaitUntilGroupNotExistsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.autoscaling.WaitUntilGroupNotExists", input)
	return NewVoidFuture(future)
}
