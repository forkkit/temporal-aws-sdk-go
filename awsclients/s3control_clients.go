// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/s3control"
	"go.temporal.io/sdk/workflow"
)

type S3ControlClient interface {
	CreateAccessPoint(ctx workflow.Context, input *s3control.CreateAccessPointInput) (*s3control.CreateAccessPointOutput, error)
	CreateAccessPointAsync(ctx workflow.Context, input *s3control.CreateAccessPointInput) *S3ControlCreateAccessPointFuture

	CreateBucket(ctx workflow.Context, input *s3control.CreateBucketInput) (*s3control.CreateBucketOutput, error)
	CreateBucketAsync(ctx workflow.Context, input *s3control.CreateBucketInput) *S3ControlCreateBucketFuture

	CreateJob(ctx workflow.Context, input *s3control.CreateJobInput) (*s3control.CreateJobOutput, error)
	CreateJobAsync(ctx workflow.Context, input *s3control.CreateJobInput) *S3ControlCreateJobFuture

	DeleteAccessPoint(ctx workflow.Context, input *s3control.DeleteAccessPointInput) (*s3control.DeleteAccessPointOutput, error)
	DeleteAccessPointAsync(ctx workflow.Context, input *s3control.DeleteAccessPointInput) *S3ControlDeleteAccessPointFuture

	DeleteAccessPointPolicy(ctx workflow.Context, input *s3control.DeleteAccessPointPolicyInput) (*s3control.DeleteAccessPointPolicyOutput, error)
	DeleteAccessPointPolicyAsync(ctx workflow.Context, input *s3control.DeleteAccessPointPolicyInput) *S3ControlDeleteAccessPointPolicyFuture

	DeleteBucket(ctx workflow.Context, input *s3control.DeleteBucketInput) (*s3control.DeleteBucketOutput, error)
	DeleteBucketAsync(ctx workflow.Context, input *s3control.DeleteBucketInput) *S3ControlDeleteBucketFuture

	DeleteBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.DeleteBucketLifecycleConfigurationInput) (*s3control.DeleteBucketLifecycleConfigurationOutput, error)
	DeleteBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.DeleteBucketLifecycleConfigurationInput) *S3ControlDeleteBucketLifecycleConfigurationFuture

	DeleteBucketPolicy(ctx workflow.Context, input *s3control.DeleteBucketPolicyInput) (*s3control.DeleteBucketPolicyOutput, error)
	DeleteBucketPolicyAsync(ctx workflow.Context, input *s3control.DeleteBucketPolicyInput) *S3ControlDeleteBucketPolicyFuture

	DeleteBucketTagging(ctx workflow.Context, input *s3control.DeleteBucketTaggingInput) (*s3control.DeleteBucketTaggingOutput, error)
	DeleteBucketTaggingAsync(ctx workflow.Context, input *s3control.DeleteBucketTaggingInput) *S3ControlDeleteBucketTaggingFuture

	DeleteJobTagging(ctx workflow.Context, input *s3control.DeleteJobTaggingInput) (*s3control.DeleteJobTaggingOutput, error)
	DeleteJobTaggingAsync(ctx workflow.Context, input *s3control.DeleteJobTaggingInput) *S3ControlDeleteJobTaggingFuture

	DeletePublicAccessBlock(ctx workflow.Context, input *s3control.DeletePublicAccessBlockInput) (*s3control.DeletePublicAccessBlockOutput, error)
	DeletePublicAccessBlockAsync(ctx workflow.Context, input *s3control.DeletePublicAccessBlockInput) *S3ControlDeletePublicAccessBlockFuture

	DescribeJob(ctx workflow.Context, input *s3control.DescribeJobInput) (*s3control.DescribeJobOutput, error)
	DescribeJobAsync(ctx workflow.Context, input *s3control.DescribeJobInput) *S3ControlDescribeJobFuture

	GetAccessPoint(ctx workflow.Context, input *s3control.GetAccessPointInput) (*s3control.GetAccessPointOutput, error)
	GetAccessPointAsync(ctx workflow.Context, input *s3control.GetAccessPointInput) *S3ControlGetAccessPointFuture

	GetAccessPointPolicy(ctx workflow.Context, input *s3control.GetAccessPointPolicyInput) (*s3control.GetAccessPointPolicyOutput, error)
	GetAccessPointPolicyAsync(ctx workflow.Context, input *s3control.GetAccessPointPolicyInput) *S3ControlGetAccessPointPolicyFuture

	GetAccessPointPolicyStatus(ctx workflow.Context, input *s3control.GetAccessPointPolicyStatusInput) (*s3control.GetAccessPointPolicyStatusOutput, error)
	GetAccessPointPolicyStatusAsync(ctx workflow.Context, input *s3control.GetAccessPointPolicyStatusInput) *S3ControlGetAccessPointPolicyStatusFuture

	GetBucket(ctx workflow.Context, input *s3control.GetBucketInput) (*s3control.GetBucketOutput, error)
	GetBucketAsync(ctx workflow.Context, input *s3control.GetBucketInput) *S3ControlGetBucketFuture

	GetBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.GetBucketLifecycleConfigurationInput) (*s3control.GetBucketLifecycleConfigurationOutput, error)
	GetBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.GetBucketLifecycleConfigurationInput) *S3ControlGetBucketLifecycleConfigurationFuture

	GetBucketPolicy(ctx workflow.Context, input *s3control.GetBucketPolicyInput) (*s3control.GetBucketPolicyOutput, error)
	GetBucketPolicyAsync(ctx workflow.Context, input *s3control.GetBucketPolicyInput) *S3ControlGetBucketPolicyFuture

	GetBucketTagging(ctx workflow.Context, input *s3control.GetBucketTaggingInput) (*s3control.GetBucketTaggingOutput, error)
	GetBucketTaggingAsync(ctx workflow.Context, input *s3control.GetBucketTaggingInput) *S3ControlGetBucketTaggingFuture

	GetJobTagging(ctx workflow.Context, input *s3control.GetJobTaggingInput) (*s3control.GetJobTaggingOutput, error)
	GetJobTaggingAsync(ctx workflow.Context, input *s3control.GetJobTaggingInput) *S3ControlGetJobTaggingFuture

	GetPublicAccessBlock(ctx workflow.Context, input *s3control.GetPublicAccessBlockInput) (*s3control.GetPublicAccessBlockOutput, error)
	GetPublicAccessBlockAsync(ctx workflow.Context, input *s3control.GetPublicAccessBlockInput) *S3ControlGetPublicAccessBlockFuture

	ListAccessPoints(ctx workflow.Context, input *s3control.ListAccessPointsInput) (*s3control.ListAccessPointsOutput, error)
	ListAccessPointsAsync(ctx workflow.Context, input *s3control.ListAccessPointsInput) *S3ControlListAccessPointsFuture

	ListJobs(ctx workflow.Context, input *s3control.ListJobsInput) (*s3control.ListJobsOutput, error)
	ListJobsAsync(ctx workflow.Context, input *s3control.ListJobsInput) *S3ControlListJobsFuture

	ListRegionalBuckets(ctx workflow.Context, input *s3control.ListRegionalBucketsInput) (*s3control.ListRegionalBucketsOutput, error)
	ListRegionalBucketsAsync(ctx workflow.Context, input *s3control.ListRegionalBucketsInput) *S3ControlListRegionalBucketsFuture

	PutAccessPointPolicy(ctx workflow.Context, input *s3control.PutAccessPointPolicyInput) (*s3control.PutAccessPointPolicyOutput, error)
	PutAccessPointPolicyAsync(ctx workflow.Context, input *s3control.PutAccessPointPolicyInput) *S3ControlPutAccessPointPolicyFuture

	PutBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.PutBucketLifecycleConfigurationInput) (*s3control.PutBucketLifecycleConfigurationOutput, error)
	PutBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.PutBucketLifecycleConfigurationInput) *S3ControlPutBucketLifecycleConfigurationFuture

	PutBucketPolicy(ctx workflow.Context, input *s3control.PutBucketPolicyInput) (*s3control.PutBucketPolicyOutput, error)
	PutBucketPolicyAsync(ctx workflow.Context, input *s3control.PutBucketPolicyInput) *S3ControlPutBucketPolicyFuture

	PutBucketTagging(ctx workflow.Context, input *s3control.PutBucketTaggingInput) (*s3control.PutBucketTaggingOutput, error)
	PutBucketTaggingAsync(ctx workflow.Context, input *s3control.PutBucketTaggingInput) *S3ControlPutBucketTaggingFuture

	PutJobTagging(ctx workflow.Context, input *s3control.PutJobTaggingInput) (*s3control.PutJobTaggingOutput, error)
	PutJobTaggingAsync(ctx workflow.Context, input *s3control.PutJobTaggingInput) *S3ControlPutJobTaggingFuture

	PutPublicAccessBlock(ctx workflow.Context, input *s3control.PutPublicAccessBlockInput) (*s3control.PutPublicAccessBlockOutput, error)
	PutPublicAccessBlockAsync(ctx workflow.Context, input *s3control.PutPublicAccessBlockInput) *S3ControlPutPublicAccessBlockFuture

	UpdateJobPriority(ctx workflow.Context, input *s3control.UpdateJobPriorityInput) (*s3control.UpdateJobPriorityOutput, error)
	UpdateJobPriorityAsync(ctx workflow.Context, input *s3control.UpdateJobPriorityInput) *S3ControlUpdateJobPriorityFuture

	UpdateJobStatus(ctx workflow.Context, input *s3control.UpdateJobStatusInput) (*s3control.UpdateJobStatusOutput, error)
	UpdateJobStatusAsync(ctx workflow.Context, input *s3control.UpdateJobStatusInput) *S3ControlUpdateJobStatusFuture
}

type S3ControlStub struct{}

func NewS3ControlStub() S3ControlClient {
	return &S3ControlStub{}
}

type S3ControlCreateAccessPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlCreateAccessPointFuture) Get(ctx workflow.Context) (*s3control.CreateAccessPointOutput, error) {
	var output s3control.CreateAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlCreateBucketFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlCreateBucketFuture) Get(ctx workflow.Context) (*s3control.CreateBucketOutput, error) {
	var output s3control.CreateBucketOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlCreateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlCreateJobFuture) Get(ctx workflow.Context) (*s3control.CreateJobOutput, error) {
	var output s3control.CreateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlDeleteAccessPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlDeleteAccessPointFuture) Get(ctx workflow.Context) (*s3control.DeleteAccessPointOutput, error) {
	var output s3control.DeleteAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlDeleteAccessPointPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlDeleteAccessPointPolicyFuture) Get(ctx workflow.Context) (*s3control.DeleteAccessPointPolicyOutput, error) {
	var output s3control.DeleteAccessPointPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlDeleteBucketFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlDeleteBucketFuture) Get(ctx workflow.Context) (*s3control.DeleteBucketOutput, error) {
	var output s3control.DeleteBucketOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlDeleteBucketLifecycleConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlDeleteBucketLifecycleConfigurationFuture) Get(ctx workflow.Context) (*s3control.DeleteBucketLifecycleConfigurationOutput, error) {
	var output s3control.DeleteBucketLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlDeleteBucketPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlDeleteBucketPolicyFuture) Get(ctx workflow.Context) (*s3control.DeleteBucketPolicyOutput, error) {
	var output s3control.DeleteBucketPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlDeleteBucketTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlDeleteBucketTaggingFuture) Get(ctx workflow.Context) (*s3control.DeleteBucketTaggingOutput, error) {
	var output s3control.DeleteBucketTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlDeleteJobTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlDeleteJobTaggingFuture) Get(ctx workflow.Context) (*s3control.DeleteJobTaggingOutput, error) {
	var output s3control.DeleteJobTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlDeletePublicAccessBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlDeletePublicAccessBlockFuture) Get(ctx workflow.Context) (*s3control.DeletePublicAccessBlockOutput, error) {
	var output s3control.DeletePublicAccessBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlDescribeJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlDescribeJobFuture) Get(ctx workflow.Context) (*s3control.DescribeJobOutput, error) {
	var output s3control.DescribeJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlGetAccessPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlGetAccessPointFuture) Get(ctx workflow.Context) (*s3control.GetAccessPointOutput, error) {
	var output s3control.GetAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlGetAccessPointPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlGetAccessPointPolicyFuture) Get(ctx workflow.Context) (*s3control.GetAccessPointPolicyOutput, error) {
	var output s3control.GetAccessPointPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlGetAccessPointPolicyStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlGetAccessPointPolicyStatusFuture) Get(ctx workflow.Context) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	var output s3control.GetAccessPointPolicyStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlGetBucketFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlGetBucketFuture) Get(ctx workflow.Context) (*s3control.GetBucketOutput, error) {
	var output s3control.GetBucketOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlGetBucketLifecycleConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlGetBucketLifecycleConfigurationFuture) Get(ctx workflow.Context) (*s3control.GetBucketLifecycleConfigurationOutput, error) {
	var output s3control.GetBucketLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlGetBucketPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlGetBucketPolicyFuture) Get(ctx workflow.Context) (*s3control.GetBucketPolicyOutput, error) {
	var output s3control.GetBucketPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlGetBucketTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlGetBucketTaggingFuture) Get(ctx workflow.Context) (*s3control.GetBucketTaggingOutput, error) {
	var output s3control.GetBucketTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlGetJobTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlGetJobTaggingFuture) Get(ctx workflow.Context) (*s3control.GetJobTaggingOutput, error) {
	var output s3control.GetJobTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlGetPublicAccessBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlGetPublicAccessBlockFuture) Get(ctx workflow.Context) (*s3control.GetPublicAccessBlockOutput, error) {
	var output s3control.GetPublicAccessBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlListAccessPointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlListAccessPointsFuture) Get(ctx workflow.Context) (*s3control.ListAccessPointsOutput, error) {
	var output s3control.ListAccessPointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlListJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlListJobsFuture) Get(ctx workflow.Context) (*s3control.ListJobsOutput, error) {
	var output s3control.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlListRegionalBucketsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlListRegionalBucketsFuture) Get(ctx workflow.Context) (*s3control.ListRegionalBucketsOutput, error) {
	var output s3control.ListRegionalBucketsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlPutAccessPointPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlPutAccessPointPolicyFuture) Get(ctx workflow.Context) (*s3control.PutAccessPointPolicyOutput, error) {
	var output s3control.PutAccessPointPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlPutBucketLifecycleConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlPutBucketLifecycleConfigurationFuture) Get(ctx workflow.Context) (*s3control.PutBucketLifecycleConfigurationOutput, error) {
	var output s3control.PutBucketLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlPutBucketPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlPutBucketPolicyFuture) Get(ctx workflow.Context) (*s3control.PutBucketPolicyOutput, error) {
	var output s3control.PutBucketPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlPutBucketTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlPutBucketTaggingFuture) Get(ctx workflow.Context) (*s3control.PutBucketTaggingOutput, error) {
	var output s3control.PutBucketTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlPutJobTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlPutJobTaggingFuture) Get(ctx workflow.Context) (*s3control.PutJobTaggingOutput, error) {
	var output s3control.PutJobTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlPutPublicAccessBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlPutPublicAccessBlockFuture) Get(ctx workflow.Context) (*s3control.PutPublicAccessBlockOutput, error) {
	var output s3control.PutPublicAccessBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlUpdateJobPriorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlUpdateJobPriorityFuture) Get(ctx workflow.Context) (*s3control.UpdateJobPriorityOutput, error) {
	var output s3control.UpdateJobPriorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3ControlUpdateJobStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *S3ControlUpdateJobStatusFuture) Get(ctx workflow.Context) (*s3control.UpdateJobStatusOutput, error) {
	var output s3control.UpdateJobStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) CreateAccessPoint(ctx workflow.Context, input *s3control.CreateAccessPointInput) (*s3control.CreateAccessPointOutput, error) {
	var output s3control.CreateAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.CreateAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) CreateAccessPointAsync(ctx workflow.Context, input *s3control.CreateAccessPointInput) *S3ControlCreateAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.CreateAccessPoint", input)
	return &S3ControlCreateAccessPointFuture{Future: future}
}

func (a *S3ControlStub) CreateBucket(ctx workflow.Context, input *s3control.CreateBucketInput) (*s3control.CreateBucketOutput, error) {
	var output s3control.CreateBucketOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.CreateBucket", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) CreateBucketAsync(ctx workflow.Context, input *s3control.CreateBucketInput) *S3ControlCreateBucketFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.CreateBucket", input)
	return &S3ControlCreateBucketFuture{Future: future}
}

func (a *S3ControlStub) CreateJob(ctx workflow.Context, input *s3control.CreateJobInput) (*s3control.CreateJobOutput, error) {
	var output s3control.CreateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) CreateJobAsync(ctx workflow.Context, input *s3control.CreateJobInput) *S3ControlCreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.CreateJob", input)
	return &S3ControlCreateJobFuture{Future: future}
}

func (a *S3ControlStub) DeleteAccessPoint(ctx workflow.Context, input *s3control.DeleteAccessPointInput) (*s3control.DeleteAccessPointOutput, error) {
	var output s3control.DeleteAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteAccessPointAsync(ctx workflow.Context, input *s3control.DeleteAccessPointInput) *S3ControlDeleteAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteAccessPoint", input)
	return &S3ControlDeleteAccessPointFuture{Future: future}
}

func (a *S3ControlStub) DeleteAccessPointPolicy(ctx workflow.Context, input *s3control.DeleteAccessPointPolicyInput) (*s3control.DeleteAccessPointPolicyOutput, error) {
	var output s3control.DeleteAccessPointPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteAccessPointPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteAccessPointPolicyAsync(ctx workflow.Context, input *s3control.DeleteAccessPointPolicyInput) *S3ControlDeleteAccessPointPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteAccessPointPolicy", input)
	return &S3ControlDeleteAccessPointPolicyFuture{Future: future}
}

func (a *S3ControlStub) DeleteBucket(ctx workflow.Context, input *s3control.DeleteBucketInput) (*s3control.DeleteBucketOutput, error) {
	var output s3control.DeleteBucketOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucket", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteBucketAsync(ctx workflow.Context, input *s3control.DeleteBucketInput) *S3ControlDeleteBucketFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucket", input)
	return &S3ControlDeleteBucketFuture{Future: future}
}

func (a *S3ControlStub) DeleteBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.DeleteBucketLifecycleConfigurationInput) (*s3control.DeleteBucketLifecycleConfigurationOutput, error) {
	var output s3control.DeleteBucketLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucketLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.DeleteBucketLifecycleConfigurationInput) *S3ControlDeleteBucketLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucketLifecycleConfiguration", input)
	return &S3ControlDeleteBucketLifecycleConfigurationFuture{Future: future}
}

func (a *S3ControlStub) DeleteBucketPolicy(ctx workflow.Context, input *s3control.DeleteBucketPolicyInput) (*s3control.DeleteBucketPolicyOutput, error) {
	var output s3control.DeleteBucketPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucketPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteBucketPolicyAsync(ctx workflow.Context, input *s3control.DeleteBucketPolicyInput) *S3ControlDeleteBucketPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucketPolicy", input)
	return &S3ControlDeleteBucketPolicyFuture{Future: future}
}

func (a *S3ControlStub) DeleteBucketTagging(ctx workflow.Context, input *s3control.DeleteBucketTaggingInput) (*s3control.DeleteBucketTaggingOutput, error) {
	var output s3control.DeleteBucketTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucketTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteBucketTaggingAsync(ctx workflow.Context, input *s3control.DeleteBucketTaggingInput) *S3ControlDeleteBucketTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucketTagging", input)
	return &S3ControlDeleteBucketTaggingFuture{Future: future}
}

func (a *S3ControlStub) DeleteJobTagging(ctx workflow.Context, input *s3control.DeleteJobTaggingInput) (*s3control.DeleteJobTaggingOutput, error) {
	var output s3control.DeleteJobTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteJobTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteJobTaggingAsync(ctx workflow.Context, input *s3control.DeleteJobTaggingInput) *S3ControlDeleteJobTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteJobTagging", input)
	return &S3ControlDeleteJobTaggingFuture{Future: future}
}

func (a *S3ControlStub) DeletePublicAccessBlock(ctx workflow.Context, input *s3control.DeletePublicAccessBlockInput) (*s3control.DeletePublicAccessBlockOutput, error) {
	var output s3control.DeletePublicAccessBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeletePublicAccessBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeletePublicAccessBlockAsync(ctx workflow.Context, input *s3control.DeletePublicAccessBlockInput) *S3ControlDeletePublicAccessBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeletePublicAccessBlock", input)
	return &S3ControlDeletePublicAccessBlockFuture{Future: future}
}

func (a *S3ControlStub) DescribeJob(ctx workflow.Context, input *s3control.DescribeJobInput) (*s3control.DescribeJobOutput, error) {
	var output s3control.DescribeJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DescribeJob", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DescribeJobAsync(ctx workflow.Context, input *s3control.DescribeJobInput) *S3ControlDescribeJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DescribeJob", input)
	return &S3ControlDescribeJobFuture{Future: future}
}

func (a *S3ControlStub) GetAccessPoint(ctx workflow.Context, input *s3control.GetAccessPointInput) (*s3control.GetAccessPointOutput, error) {
	var output s3control.GetAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetAccessPointAsync(ctx workflow.Context, input *s3control.GetAccessPointInput) *S3ControlGetAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetAccessPoint", input)
	return &S3ControlGetAccessPointFuture{Future: future}
}

func (a *S3ControlStub) GetAccessPointPolicy(ctx workflow.Context, input *s3control.GetAccessPointPolicyInput) (*s3control.GetAccessPointPolicyOutput, error) {
	var output s3control.GetAccessPointPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetAccessPointPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetAccessPointPolicyAsync(ctx workflow.Context, input *s3control.GetAccessPointPolicyInput) *S3ControlGetAccessPointPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetAccessPointPolicy", input)
	return &S3ControlGetAccessPointPolicyFuture{Future: future}
}

func (a *S3ControlStub) GetAccessPointPolicyStatus(ctx workflow.Context, input *s3control.GetAccessPointPolicyStatusInput) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	var output s3control.GetAccessPointPolicyStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetAccessPointPolicyStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetAccessPointPolicyStatusAsync(ctx workflow.Context, input *s3control.GetAccessPointPolicyStatusInput) *S3ControlGetAccessPointPolicyStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetAccessPointPolicyStatus", input)
	return &S3ControlGetAccessPointPolicyStatusFuture{Future: future}
}

func (a *S3ControlStub) GetBucket(ctx workflow.Context, input *s3control.GetBucketInput) (*s3control.GetBucketOutput, error) {
	var output s3control.GetBucketOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucket", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetBucketAsync(ctx workflow.Context, input *s3control.GetBucketInput) *S3ControlGetBucketFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucket", input)
	return &S3ControlGetBucketFuture{Future: future}
}

func (a *S3ControlStub) GetBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.GetBucketLifecycleConfigurationInput) (*s3control.GetBucketLifecycleConfigurationOutput, error) {
	var output s3control.GetBucketLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucketLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.GetBucketLifecycleConfigurationInput) *S3ControlGetBucketLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucketLifecycleConfiguration", input)
	return &S3ControlGetBucketLifecycleConfigurationFuture{Future: future}
}

func (a *S3ControlStub) GetBucketPolicy(ctx workflow.Context, input *s3control.GetBucketPolicyInput) (*s3control.GetBucketPolicyOutput, error) {
	var output s3control.GetBucketPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucketPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetBucketPolicyAsync(ctx workflow.Context, input *s3control.GetBucketPolicyInput) *S3ControlGetBucketPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucketPolicy", input)
	return &S3ControlGetBucketPolicyFuture{Future: future}
}

func (a *S3ControlStub) GetBucketTagging(ctx workflow.Context, input *s3control.GetBucketTaggingInput) (*s3control.GetBucketTaggingOutput, error) {
	var output s3control.GetBucketTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucketTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetBucketTaggingAsync(ctx workflow.Context, input *s3control.GetBucketTaggingInput) *S3ControlGetBucketTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucketTagging", input)
	return &S3ControlGetBucketTaggingFuture{Future: future}
}

func (a *S3ControlStub) GetJobTagging(ctx workflow.Context, input *s3control.GetJobTaggingInput) (*s3control.GetJobTaggingOutput, error) {
	var output s3control.GetJobTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetJobTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetJobTaggingAsync(ctx workflow.Context, input *s3control.GetJobTaggingInput) *S3ControlGetJobTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetJobTagging", input)
	return &S3ControlGetJobTaggingFuture{Future: future}
}

func (a *S3ControlStub) GetPublicAccessBlock(ctx workflow.Context, input *s3control.GetPublicAccessBlockInput) (*s3control.GetPublicAccessBlockOutput, error) {
	var output s3control.GetPublicAccessBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetPublicAccessBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetPublicAccessBlockAsync(ctx workflow.Context, input *s3control.GetPublicAccessBlockInput) *S3ControlGetPublicAccessBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetPublicAccessBlock", input)
	return &S3ControlGetPublicAccessBlockFuture{Future: future}
}

func (a *S3ControlStub) ListAccessPoints(ctx workflow.Context, input *s3control.ListAccessPointsInput) (*s3control.ListAccessPointsOutput, error) {
	var output s3control.ListAccessPointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.ListAccessPoints", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) ListAccessPointsAsync(ctx workflow.Context, input *s3control.ListAccessPointsInput) *S3ControlListAccessPointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.ListAccessPoints", input)
	return &S3ControlListAccessPointsFuture{Future: future}
}

func (a *S3ControlStub) ListJobs(ctx workflow.Context, input *s3control.ListJobsInput) (*s3control.ListJobsOutput, error) {
	var output s3control.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) ListJobsAsync(ctx workflow.Context, input *s3control.ListJobsInput) *S3ControlListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.ListJobs", input)
	return &S3ControlListJobsFuture{Future: future}
}

func (a *S3ControlStub) ListRegionalBuckets(ctx workflow.Context, input *s3control.ListRegionalBucketsInput) (*s3control.ListRegionalBucketsOutput, error) {
	var output s3control.ListRegionalBucketsOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.ListRegionalBuckets", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) ListRegionalBucketsAsync(ctx workflow.Context, input *s3control.ListRegionalBucketsInput) *S3ControlListRegionalBucketsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.ListRegionalBuckets", input)
	return &S3ControlListRegionalBucketsFuture{Future: future}
}

func (a *S3ControlStub) PutAccessPointPolicy(ctx workflow.Context, input *s3control.PutAccessPointPolicyInput) (*s3control.PutAccessPointPolicyOutput, error) {
	var output s3control.PutAccessPointPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.PutAccessPointPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) PutAccessPointPolicyAsync(ctx workflow.Context, input *s3control.PutAccessPointPolicyInput) *S3ControlPutAccessPointPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.PutAccessPointPolicy", input)
	return &S3ControlPutAccessPointPolicyFuture{Future: future}
}

func (a *S3ControlStub) PutBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.PutBucketLifecycleConfigurationInput) (*s3control.PutBucketLifecycleConfigurationOutput, error) {
	var output s3control.PutBucketLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.PutBucketLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) PutBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.PutBucketLifecycleConfigurationInput) *S3ControlPutBucketLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.PutBucketLifecycleConfiguration", input)
	return &S3ControlPutBucketLifecycleConfigurationFuture{Future: future}
}

func (a *S3ControlStub) PutBucketPolicy(ctx workflow.Context, input *s3control.PutBucketPolicyInput) (*s3control.PutBucketPolicyOutput, error) {
	var output s3control.PutBucketPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.PutBucketPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) PutBucketPolicyAsync(ctx workflow.Context, input *s3control.PutBucketPolicyInput) *S3ControlPutBucketPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.PutBucketPolicy", input)
	return &S3ControlPutBucketPolicyFuture{Future: future}
}

func (a *S3ControlStub) PutBucketTagging(ctx workflow.Context, input *s3control.PutBucketTaggingInput) (*s3control.PutBucketTaggingOutput, error) {
	var output s3control.PutBucketTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.PutBucketTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) PutBucketTaggingAsync(ctx workflow.Context, input *s3control.PutBucketTaggingInput) *S3ControlPutBucketTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.PutBucketTagging", input)
	return &S3ControlPutBucketTaggingFuture{Future: future}
}

func (a *S3ControlStub) PutJobTagging(ctx workflow.Context, input *s3control.PutJobTaggingInput) (*s3control.PutJobTaggingOutput, error) {
	var output s3control.PutJobTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.PutJobTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) PutJobTaggingAsync(ctx workflow.Context, input *s3control.PutJobTaggingInput) *S3ControlPutJobTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.PutJobTagging", input)
	return &S3ControlPutJobTaggingFuture{Future: future}
}

func (a *S3ControlStub) PutPublicAccessBlock(ctx workflow.Context, input *s3control.PutPublicAccessBlockInput) (*s3control.PutPublicAccessBlockOutput, error) {
	var output s3control.PutPublicAccessBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.PutPublicAccessBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) PutPublicAccessBlockAsync(ctx workflow.Context, input *s3control.PutPublicAccessBlockInput) *S3ControlPutPublicAccessBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.PutPublicAccessBlock", input)
	return &S3ControlPutPublicAccessBlockFuture{Future: future}
}

func (a *S3ControlStub) UpdateJobPriority(ctx workflow.Context, input *s3control.UpdateJobPriorityInput) (*s3control.UpdateJobPriorityOutput, error) {
	var output s3control.UpdateJobPriorityOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.UpdateJobPriority", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) UpdateJobPriorityAsync(ctx workflow.Context, input *s3control.UpdateJobPriorityInput) *S3ControlUpdateJobPriorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.UpdateJobPriority", input)
	return &S3ControlUpdateJobPriorityFuture{Future: future}
}

func (a *S3ControlStub) UpdateJobStatus(ctx workflow.Context, input *s3control.UpdateJobStatusInput) (*s3control.UpdateJobStatusOutput, error) {
	var output s3control.UpdateJobStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.UpdateJobStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) UpdateJobStatusAsync(ctx workflow.Context, input *s3control.UpdateJobStatusInput) *S3ControlUpdateJobStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.UpdateJobStatus", input)
	return &S3ControlUpdateJobStatusFuture{Future: future}
}
