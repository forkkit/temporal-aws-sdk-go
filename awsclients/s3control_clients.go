// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/s3control"
	"go.temporal.io/sdk/workflow"
)

type S3ControlClient interface {
	CreateAccessPoint(ctx workflow.Context, input *s3control.CreateAccessPointInput) (*s3control.CreateAccessPointOutput, error)
	CreateAccessPointAsync(ctx workflow.Context, input *s3control.CreateAccessPointInput) *S3controlCreateAccessPointFuture

	CreateBucket(ctx workflow.Context, input *s3control.CreateBucketInput) (*s3control.CreateBucketOutput, error)
	CreateBucketAsync(ctx workflow.Context, input *s3control.CreateBucketInput) *S3controlCreateBucketFuture

	CreateJob(ctx workflow.Context, input *s3control.CreateJobInput) (*s3control.CreateJobOutput, error)
	CreateJobAsync(ctx workflow.Context, input *s3control.CreateJobInput) *S3controlCreateJobFuture

	DeleteAccessPoint(ctx workflow.Context, input *s3control.DeleteAccessPointInput) (*s3control.DeleteAccessPointOutput, error)
	DeleteAccessPointAsync(ctx workflow.Context, input *s3control.DeleteAccessPointInput) *S3controlDeleteAccessPointFuture

	DeleteAccessPointPolicy(ctx workflow.Context, input *s3control.DeleteAccessPointPolicyInput) (*s3control.DeleteAccessPointPolicyOutput, error)
	DeleteAccessPointPolicyAsync(ctx workflow.Context, input *s3control.DeleteAccessPointPolicyInput) *S3controlDeleteAccessPointPolicyFuture

	DeleteBucket(ctx workflow.Context, input *s3control.DeleteBucketInput) (*s3control.DeleteBucketOutput, error)
	DeleteBucketAsync(ctx workflow.Context, input *s3control.DeleteBucketInput) *S3controlDeleteBucketFuture

	DeleteBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.DeleteBucketLifecycleConfigurationInput) (*s3control.DeleteBucketLifecycleConfigurationOutput, error)
	DeleteBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.DeleteBucketLifecycleConfigurationInput) *S3controlDeleteBucketLifecycleConfigurationFuture

	DeleteBucketPolicy(ctx workflow.Context, input *s3control.DeleteBucketPolicyInput) (*s3control.DeleteBucketPolicyOutput, error)
	DeleteBucketPolicyAsync(ctx workflow.Context, input *s3control.DeleteBucketPolicyInput) *S3controlDeleteBucketPolicyFuture

	DeleteBucketTagging(ctx workflow.Context, input *s3control.DeleteBucketTaggingInput) (*s3control.DeleteBucketTaggingOutput, error)
	DeleteBucketTaggingAsync(ctx workflow.Context, input *s3control.DeleteBucketTaggingInput) *S3controlDeleteBucketTaggingFuture

	DeleteJobTagging(ctx workflow.Context, input *s3control.DeleteJobTaggingInput) (*s3control.DeleteJobTaggingOutput, error)
	DeleteJobTaggingAsync(ctx workflow.Context, input *s3control.DeleteJobTaggingInput) *S3controlDeleteJobTaggingFuture

	DeletePublicAccessBlock(ctx workflow.Context, input *s3control.DeletePublicAccessBlockInput) (*s3control.DeletePublicAccessBlockOutput, error)
	DeletePublicAccessBlockAsync(ctx workflow.Context, input *s3control.DeletePublicAccessBlockInput) *S3controlDeletePublicAccessBlockFuture

	DescribeJob(ctx workflow.Context, input *s3control.DescribeJobInput) (*s3control.DescribeJobOutput, error)
	DescribeJobAsync(ctx workflow.Context, input *s3control.DescribeJobInput) *S3controlDescribeJobFuture

	GetAccessPoint(ctx workflow.Context, input *s3control.GetAccessPointInput) (*s3control.GetAccessPointOutput, error)
	GetAccessPointAsync(ctx workflow.Context, input *s3control.GetAccessPointInput) *S3controlGetAccessPointFuture

	GetAccessPointPolicy(ctx workflow.Context, input *s3control.GetAccessPointPolicyInput) (*s3control.GetAccessPointPolicyOutput, error)
	GetAccessPointPolicyAsync(ctx workflow.Context, input *s3control.GetAccessPointPolicyInput) *S3controlGetAccessPointPolicyFuture

	GetAccessPointPolicyStatus(ctx workflow.Context, input *s3control.GetAccessPointPolicyStatusInput) (*s3control.GetAccessPointPolicyStatusOutput, error)
	GetAccessPointPolicyStatusAsync(ctx workflow.Context, input *s3control.GetAccessPointPolicyStatusInput) *S3controlGetAccessPointPolicyStatusFuture

	GetBucket(ctx workflow.Context, input *s3control.GetBucketInput) (*s3control.GetBucketOutput, error)
	GetBucketAsync(ctx workflow.Context, input *s3control.GetBucketInput) *S3controlGetBucketFuture

	GetBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.GetBucketLifecycleConfigurationInput) (*s3control.GetBucketLifecycleConfigurationOutput, error)
	GetBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.GetBucketLifecycleConfigurationInput) *S3controlGetBucketLifecycleConfigurationFuture

	GetBucketPolicy(ctx workflow.Context, input *s3control.GetBucketPolicyInput) (*s3control.GetBucketPolicyOutput, error)
	GetBucketPolicyAsync(ctx workflow.Context, input *s3control.GetBucketPolicyInput) *S3controlGetBucketPolicyFuture

	GetBucketTagging(ctx workflow.Context, input *s3control.GetBucketTaggingInput) (*s3control.GetBucketTaggingOutput, error)
	GetBucketTaggingAsync(ctx workflow.Context, input *s3control.GetBucketTaggingInput) *S3controlGetBucketTaggingFuture

	GetJobTagging(ctx workflow.Context, input *s3control.GetJobTaggingInput) (*s3control.GetJobTaggingOutput, error)
	GetJobTaggingAsync(ctx workflow.Context, input *s3control.GetJobTaggingInput) *S3controlGetJobTaggingFuture

	GetPublicAccessBlock(ctx workflow.Context, input *s3control.GetPublicAccessBlockInput) (*s3control.GetPublicAccessBlockOutput, error)
	GetPublicAccessBlockAsync(ctx workflow.Context, input *s3control.GetPublicAccessBlockInput) *S3controlGetPublicAccessBlockFuture

	ListAccessPoints(ctx workflow.Context, input *s3control.ListAccessPointsInput) (*s3control.ListAccessPointsOutput, error)
	ListAccessPointsAsync(ctx workflow.Context, input *s3control.ListAccessPointsInput) *S3controlListAccessPointsFuture

	ListJobs(ctx workflow.Context, input *s3control.ListJobsInput) (*s3control.ListJobsOutput, error)
	ListJobsAsync(ctx workflow.Context, input *s3control.ListJobsInput) *S3controlListJobsFuture

	ListRegionalBuckets(ctx workflow.Context, input *s3control.ListRegionalBucketsInput) (*s3control.ListRegionalBucketsOutput, error)
	ListRegionalBucketsAsync(ctx workflow.Context, input *s3control.ListRegionalBucketsInput) *S3controlListRegionalBucketsFuture

	PutAccessPointPolicy(ctx workflow.Context, input *s3control.PutAccessPointPolicyInput) (*s3control.PutAccessPointPolicyOutput, error)
	PutAccessPointPolicyAsync(ctx workflow.Context, input *s3control.PutAccessPointPolicyInput) *S3controlPutAccessPointPolicyFuture

	PutBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.PutBucketLifecycleConfigurationInput) (*s3control.PutBucketLifecycleConfigurationOutput, error)
	PutBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.PutBucketLifecycleConfigurationInput) *S3controlPutBucketLifecycleConfigurationFuture

	PutBucketPolicy(ctx workflow.Context, input *s3control.PutBucketPolicyInput) (*s3control.PutBucketPolicyOutput, error)
	PutBucketPolicyAsync(ctx workflow.Context, input *s3control.PutBucketPolicyInput) *S3controlPutBucketPolicyFuture

	PutBucketTagging(ctx workflow.Context, input *s3control.PutBucketTaggingInput) (*s3control.PutBucketTaggingOutput, error)
	PutBucketTaggingAsync(ctx workflow.Context, input *s3control.PutBucketTaggingInput) *S3controlPutBucketTaggingFuture

	PutJobTagging(ctx workflow.Context, input *s3control.PutJobTaggingInput) (*s3control.PutJobTaggingOutput, error)
	PutJobTaggingAsync(ctx workflow.Context, input *s3control.PutJobTaggingInput) *S3controlPutJobTaggingFuture

	PutPublicAccessBlock(ctx workflow.Context, input *s3control.PutPublicAccessBlockInput) (*s3control.PutPublicAccessBlockOutput, error)
	PutPublicAccessBlockAsync(ctx workflow.Context, input *s3control.PutPublicAccessBlockInput) *S3controlPutPublicAccessBlockFuture

	UpdateJobPriority(ctx workflow.Context, input *s3control.UpdateJobPriorityInput) (*s3control.UpdateJobPriorityOutput, error)
	UpdateJobPriorityAsync(ctx workflow.Context, input *s3control.UpdateJobPriorityInput) *S3controlUpdateJobPriorityFuture

	UpdateJobStatus(ctx workflow.Context, input *s3control.UpdateJobStatusInput) (*s3control.UpdateJobStatusOutput, error)
	UpdateJobStatusAsync(ctx workflow.Context, input *s3control.UpdateJobStatusInput) *S3controlUpdateJobStatusFuture
}

type S3ControlStub struct{}

func NewS3ControlStub() S3ControlClient {
	return &S3ControlStub{}
}

type S3controlCreateAccessPointFuture struct {
	Future workflow.Future
}

func (r *S3controlCreateAccessPointFuture) Get(ctx workflow.Context) (*s3control.CreateAccessPointOutput, error) {
	var output s3control.CreateAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlCreateBucketFuture struct {
	Future workflow.Future
}

func (r *S3controlCreateBucketFuture) Get(ctx workflow.Context) (*s3control.CreateBucketOutput, error) {
	var output s3control.CreateBucketOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlCreateJobFuture struct {
	Future workflow.Future
}

func (r *S3controlCreateJobFuture) Get(ctx workflow.Context) (*s3control.CreateJobOutput, error) {
	var output s3control.CreateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlDeleteAccessPointFuture struct {
	Future workflow.Future
}

func (r *S3controlDeleteAccessPointFuture) Get(ctx workflow.Context) (*s3control.DeleteAccessPointOutput, error) {
	var output s3control.DeleteAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlDeleteAccessPointPolicyFuture struct {
	Future workflow.Future
}

func (r *S3controlDeleteAccessPointPolicyFuture) Get(ctx workflow.Context) (*s3control.DeleteAccessPointPolicyOutput, error) {
	var output s3control.DeleteAccessPointPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlDeleteBucketFuture struct {
	Future workflow.Future
}

func (r *S3controlDeleteBucketFuture) Get(ctx workflow.Context) (*s3control.DeleteBucketOutput, error) {
	var output s3control.DeleteBucketOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlDeleteBucketLifecycleConfigurationFuture struct {
	Future workflow.Future
}

func (r *S3controlDeleteBucketLifecycleConfigurationFuture) Get(ctx workflow.Context) (*s3control.DeleteBucketLifecycleConfigurationOutput, error) {
	var output s3control.DeleteBucketLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlDeleteBucketPolicyFuture struct {
	Future workflow.Future
}

func (r *S3controlDeleteBucketPolicyFuture) Get(ctx workflow.Context) (*s3control.DeleteBucketPolicyOutput, error) {
	var output s3control.DeleteBucketPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlDeleteBucketTaggingFuture struct {
	Future workflow.Future
}

func (r *S3controlDeleteBucketTaggingFuture) Get(ctx workflow.Context) (*s3control.DeleteBucketTaggingOutput, error) {
	var output s3control.DeleteBucketTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlDeleteJobTaggingFuture struct {
	Future workflow.Future
}

func (r *S3controlDeleteJobTaggingFuture) Get(ctx workflow.Context) (*s3control.DeleteJobTaggingOutput, error) {
	var output s3control.DeleteJobTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlDeletePublicAccessBlockFuture struct {
	Future workflow.Future
}

func (r *S3controlDeletePublicAccessBlockFuture) Get(ctx workflow.Context) (*s3control.DeletePublicAccessBlockOutput, error) {
	var output s3control.DeletePublicAccessBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlDescribeJobFuture struct {
	Future workflow.Future
}

func (r *S3controlDescribeJobFuture) Get(ctx workflow.Context) (*s3control.DescribeJobOutput, error) {
	var output s3control.DescribeJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlGetAccessPointFuture struct {
	Future workflow.Future
}

func (r *S3controlGetAccessPointFuture) Get(ctx workflow.Context) (*s3control.GetAccessPointOutput, error) {
	var output s3control.GetAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlGetAccessPointPolicyFuture struct {
	Future workflow.Future
}

func (r *S3controlGetAccessPointPolicyFuture) Get(ctx workflow.Context) (*s3control.GetAccessPointPolicyOutput, error) {
	var output s3control.GetAccessPointPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlGetAccessPointPolicyStatusFuture struct {
	Future workflow.Future
}

func (r *S3controlGetAccessPointPolicyStatusFuture) Get(ctx workflow.Context) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	var output s3control.GetAccessPointPolicyStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlGetBucketFuture struct {
	Future workflow.Future
}

func (r *S3controlGetBucketFuture) Get(ctx workflow.Context) (*s3control.GetBucketOutput, error) {
	var output s3control.GetBucketOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlGetBucketLifecycleConfigurationFuture struct {
	Future workflow.Future
}

func (r *S3controlGetBucketLifecycleConfigurationFuture) Get(ctx workflow.Context) (*s3control.GetBucketLifecycleConfigurationOutput, error) {
	var output s3control.GetBucketLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlGetBucketPolicyFuture struct {
	Future workflow.Future
}

func (r *S3controlGetBucketPolicyFuture) Get(ctx workflow.Context) (*s3control.GetBucketPolicyOutput, error) {
	var output s3control.GetBucketPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlGetBucketTaggingFuture struct {
	Future workflow.Future
}

func (r *S3controlGetBucketTaggingFuture) Get(ctx workflow.Context) (*s3control.GetBucketTaggingOutput, error) {
	var output s3control.GetBucketTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlGetJobTaggingFuture struct {
	Future workflow.Future
}

func (r *S3controlGetJobTaggingFuture) Get(ctx workflow.Context) (*s3control.GetJobTaggingOutput, error) {
	var output s3control.GetJobTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlGetPublicAccessBlockFuture struct {
	Future workflow.Future
}

func (r *S3controlGetPublicAccessBlockFuture) Get(ctx workflow.Context) (*s3control.GetPublicAccessBlockOutput, error) {
	var output s3control.GetPublicAccessBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlListAccessPointsFuture struct {
	Future workflow.Future
}

func (r *S3controlListAccessPointsFuture) Get(ctx workflow.Context) (*s3control.ListAccessPointsOutput, error) {
	var output s3control.ListAccessPointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlListJobsFuture struct {
	Future workflow.Future
}

func (r *S3controlListJobsFuture) Get(ctx workflow.Context) (*s3control.ListJobsOutput, error) {
	var output s3control.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlListRegionalBucketsFuture struct {
	Future workflow.Future
}

func (r *S3controlListRegionalBucketsFuture) Get(ctx workflow.Context) (*s3control.ListRegionalBucketsOutput, error) {
	var output s3control.ListRegionalBucketsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlPutAccessPointPolicyFuture struct {
	Future workflow.Future
}

func (r *S3controlPutAccessPointPolicyFuture) Get(ctx workflow.Context) (*s3control.PutAccessPointPolicyOutput, error) {
	var output s3control.PutAccessPointPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlPutBucketLifecycleConfigurationFuture struct {
	Future workflow.Future
}

func (r *S3controlPutBucketLifecycleConfigurationFuture) Get(ctx workflow.Context) (*s3control.PutBucketLifecycleConfigurationOutput, error) {
	var output s3control.PutBucketLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlPutBucketPolicyFuture struct {
	Future workflow.Future
}

func (r *S3controlPutBucketPolicyFuture) Get(ctx workflow.Context) (*s3control.PutBucketPolicyOutput, error) {
	var output s3control.PutBucketPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlPutBucketTaggingFuture struct {
	Future workflow.Future
}

func (r *S3controlPutBucketTaggingFuture) Get(ctx workflow.Context) (*s3control.PutBucketTaggingOutput, error) {
	var output s3control.PutBucketTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlPutJobTaggingFuture struct {
	Future workflow.Future
}

func (r *S3controlPutJobTaggingFuture) Get(ctx workflow.Context) (*s3control.PutJobTaggingOutput, error) {
	var output s3control.PutJobTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlPutPublicAccessBlockFuture struct {
	Future workflow.Future
}

func (r *S3controlPutPublicAccessBlockFuture) Get(ctx workflow.Context) (*s3control.PutPublicAccessBlockOutput, error) {
	var output s3control.PutPublicAccessBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlUpdateJobPriorityFuture struct {
	Future workflow.Future
}

func (r *S3controlUpdateJobPriorityFuture) Get(ctx workflow.Context) (*s3control.UpdateJobPriorityOutput, error) {
	var output s3control.UpdateJobPriorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type S3controlUpdateJobStatusFuture struct {
	Future workflow.Future
}

func (r *S3controlUpdateJobStatusFuture) Get(ctx workflow.Context) (*s3control.UpdateJobStatusOutput, error) {
	var output s3control.UpdateJobStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) CreateAccessPoint(ctx workflow.Context, input *s3control.CreateAccessPointInput) (*s3control.CreateAccessPointOutput, error) {
	var output s3control.CreateAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.CreateAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) CreateAccessPointAsync(ctx workflow.Context, input *s3control.CreateAccessPointInput) *S3controlCreateAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.CreateAccessPoint", input)
	return &S3controlCreateAccessPointFuture{Future: future}
}

func (a *S3ControlStub) CreateBucket(ctx workflow.Context, input *s3control.CreateBucketInput) (*s3control.CreateBucketOutput, error) {
	var output s3control.CreateBucketOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.CreateBucket", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) CreateBucketAsync(ctx workflow.Context, input *s3control.CreateBucketInput) *S3controlCreateBucketFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.CreateBucket", input)
	return &S3controlCreateBucketFuture{Future: future}
}

func (a *S3ControlStub) CreateJob(ctx workflow.Context, input *s3control.CreateJobInput) (*s3control.CreateJobOutput, error) {
	var output s3control.CreateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) CreateJobAsync(ctx workflow.Context, input *s3control.CreateJobInput) *S3controlCreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.CreateJob", input)
	return &S3controlCreateJobFuture{Future: future}
}

func (a *S3ControlStub) DeleteAccessPoint(ctx workflow.Context, input *s3control.DeleteAccessPointInput) (*s3control.DeleteAccessPointOutput, error) {
	var output s3control.DeleteAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteAccessPointAsync(ctx workflow.Context, input *s3control.DeleteAccessPointInput) *S3controlDeleteAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteAccessPoint", input)
	return &S3controlDeleteAccessPointFuture{Future: future}
}

func (a *S3ControlStub) DeleteAccessPointPolicy(ctx workflow.Context, input *s3control.DeleteAccessPointPolicyInput) (*s3control.DeleteAccessPointPolicyOutput, error) {
	var output s3control.DeleteAccessPointPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteAccessPointPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteAccessPointPolicyAsync(ctx workflow.Context, input *s3control.DeleteAccessPointPolicyInput) *S3controlDeleteAccessPointPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteAccessPointPolicy", input)
	return &S3controlDeleteAccessPointPolicyFuture{Future: future}
}

func (a *S3ControlStub) DeleteBucket(ctx workflow.Context, input *s3control.DeleteBucketInput) (*s3control.DeleteBucketOutput, error) {
	var output s3control.DeleteBucketOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucket", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteBucketAsync(ctx workflow.Context, input *s3control.DeleteBucketInput) *S3controlDeleteBucketFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucket", input)
	return &S3controlDeleteBucketFuture{Future: future}
}

func (a *S3ControlStub) DeleteBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.DeleteBucketLifecycleConfigurationInput) (*s3control.DeleteBucketLifecycleConfigurationOutput, error) {
	var output s3control.DeleteBucketLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucketLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.DeleteBucketLifecycleConfigurationInput) *S3controlDeleteBucketLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucketLifecycleConfiguration", input)
	return &S3controlDeleteBucketLifecycleConfigurationFuture{Future: future}
}

func (a *S3ControlStub) DeleteBucketPolicy(ctx workflow.Context, input *s3control.DeleteBucketPolicyInput) (*s3control.DeleteBucketPolicyOutput, error) {
	var output s3control.DeleteBucketPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucketPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteBucketPolicyAsync(ctx workflow.Context, input *s3control.DeleteBucketPolicyInput) *S3controlDeleteBucketPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucketPolicy", input)
	return &S3controlDeleteBucketPolicyFuture{Future: future}
}

func (a *S3ControlStub) DeleteBucketTagging(ctx workflow.Context, input *s3control.DeleteBucketTaggingInput) (*s3control.DeleteBucketTaggingOutput, error) {
	var output s3control.DeleteBucketTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucketTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteBucketTaggingAsync(ctx workflow.Context, input *s3control.DeleteBucketTaggingInput) *S3controlDeleteBucketTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteBucketTagging", input)
	return &S3controlDeleteBucketTaggingFuture{Future: future}
}

func (a *S3ControlStub) DeleteJobTagging(ctx workflow.Context, input *s3control.DeleteJobTaggingInput) (*s3control.DeleteJobTaggingOutput, error) {
	var output s3control.DeleteJobTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteJobTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeleteJobTaggingAsync(ctx workflow.Context, input *s3control.DeleteJobTaggingInput) *S3controlDeleteJobTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeleteJobTagging", input)
	return &S3controlDeleteJobTaggingFuture{Future: future}
}

func (a *S3ControlStub) DeletePublicAccessBlock(ctx workflow.Context, input *s3control.DeletePublicAccessBlockInput) (*s3control.DeletePublicAccessBlockOutput, error) {
	var output s3control.DeletePublicAccessBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DeletePublicAccessBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DeletePublicAccessBlockAsync(ctx workflow.Context, input *s3control.DeletePublicAccessBlockInput) *S3controlDeletePublicAccessBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DeletePublicAccessBlock", input)
	return &S3controlDeletePublicAccessBlockFuture{Future: future}
}

func (a *S3ControlStub) DescribeJob(ctx workflow.Context, input *s3control.DescribeJobInput) (*s3control.DescribeJobOutput, error) {
	var output s3control.DescribeJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.DescribeJob", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) DescribeJobAsync(ctx workflow.Context, input *s3control.DescribeJobInput) *S3controlDescribeJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.DescribeJob", input)
	return &S3controlDescribeJobFuture{Future: future}
}

func (a *S3ControlStub) GetAccessPoint(ctx workflow.Context, input *s3control.GetAccessPointInput) (*s3control.GetAccessPointOutput, error) {
	var output s3control.GetAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetAccessPointAsync(ctx workflow.Context, input *s3control.GetAccessPointInput) *S3controlGetAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetAccessPoint", input)
	return &S3controlGetAccessPointFuture{Future: future}
}

func (a *S3ControlStub) GetAccessPointPolicy(ctx workflow.Context, input *s3control.GetAccessPointPolicyInput) (*s3control.GetAccessPointPolicyOutput, error) {
	var output s3control.GetAccessPointPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetAccessPointPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetAccessPointPolicyAsync(ctx workflow.Context, input *s3control.GetAccessPointPolicyInput) *S3controlGetAccessPointPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetAccessPointPolicy", input)
	return &S3controlGetAccessPointPolicyFuture{Future: future}
}

func (a *S3ControlStub) GetAccessPointPolicyStatus(ctx workflow.Context, input *s3control.GetAccessPointPolicyStatusInput) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	var output s3control.GetAccessPointPolicyStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetAccessPointPolicyStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetAccessPointPolicyStatusAsync(ctx workflow.Context, input *s3control.GetAccessPointPolicyStatusInput) *S3controlGetAccessPointPolicyStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetAccessPointPolicyStatus", input)
	return &S3controlGetAccessPointPolicyStatusFuture{Future: future}
}

func (a *S3ControlStub) GetBucket(ctx workflow.Context, input *s3control.GetBucketInput) (*s3control.GetBucketOutput, error) {
	var output s3control.GetBucketOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucket", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetBucketAsync(ctx workflow.Context, input *s3control.GetBucketInput) *S3controlGetBucketFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucket", input)
	return &S3controlGetBucketFuture{Future: future}
}

func (a *S3ControlStub) GetBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.GetBucketLifecycleConfigurationInput) (*s3control.GetBucketLifecycleConfigurationOutput, error) {
	var output s3control.GetBucketLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucketLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.GetBucketLifecycleConfigurationInput) *S3controlGetBucketLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucketLifecycleConfiguration", input)
	return &S3controlGetBucketLifecycleConfigurationFuture{Future: future}
}

func (a *S3ControlStub) GetBucketPolicy(ctx workflow.Context, input *s3control.GetBucketPolicyInput) (*s3control.GetBucketPolicyOutput, error) {
	var output s3control.GetBucketPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucketPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetBucketPolicyAsync(ctx workflow.Context, input *s3control.GetBucketPolicyInput) *S3controlGetBucketPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucketPolicy", input)
	return &S3controlGetBucketPolicyFuture{Future: future}
}

func (a *S3ControlStub) GetBucketTagging(ctx workflow.Context, input *s3control.GetBucketTaggingInput) (*s3control.GetBucketTaggingOutput, error) {
	var output s3control.GetBucketTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucketTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetBucketTaggingAsync(ctx workflow.Context, input *s3control.GetBucketTaggingInput) *S3controlGetBucketTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetBucketTagging", input)
	return &S3controlGetBucketTaggingFuture{Future: future}
}

func (a *S3ControlStub) GetJobTagging(ctx workflow.Context, input *s3control.GetJobTaggingInput) (*s3control.GetJobTaggingOutput, error) {
	var output s3control.GetJobTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetJobTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetJobTaggingAsync(ctx workflow.Context, input *s3control.GetJobTaggingInput) *S3controlGetJobTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetJobTagging", input)
	return &S3controlGetJobTaggingFuture{Future: future}
}

func (a *S3ControlStub) GetPublicAccessBlock(ctx workflow.Context, input *s3control.GetPublicAccessBlockInput) (*s3control.GetPublicAccessBlockOutput, error) {
	var output s3control.GetPublicAccessBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.GetPublicAccessBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) GetPublicAccessBlockAsync(ctx workflow.Context, input *s3control.GetPublicAccessBlockInput) *S3controlGetPublicAccessBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.GetPublicAccessBlock", input)
	return &S3controlGetPublicAccessBlockFuture{Future: future}
}

func (a *S3ControlStub) ListAccessPoints(ctx workflow.Context, input *s3control.ListAccessPointsInput) (*s3control.ListAccessPointsOutput, error) {
	var output s3control.ListAccessPointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.ListAccessPoints", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) ListAccessPointsAsync(ctx workflow.Context, input *s3control.ListAccessPointsInput) *S3controlListAccessPointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.ListAccessPoints", input)
	return &S3controlListAccessPointsFuture{Future: future}
}

func (a *S3ControlStub) ListJobs(ctx workflow.Context, input *s3control.ListJobsInput) (*s3control.ListJobsOutput, error) {
	var output s3control.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) ListJobsAsync(ctx workflow.Context, input *s3control.ListJobsInput) *S3controlListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.ListJobs", input)
	return &S3controlListJobsFuture{Future: future}
}

func (a *S3ControlStub) ListRegionalBuckets(ctx workflow.Context, input *s3control.ListRegionalBucketsInput) (*s3control.ListRegionalBucketsOutput, error) {
	var output s3control.ListRegionalBucketsOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.ListRegionalBuckets", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) ListRegionalBucketsAsync(ctx workflow.Context, input *s3control.ListRegionalBucketsInput) *S3controlListRegionalBucketsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.ListRegionalBuckets", input)
	return &S3controlListRegionalBucketsFuture{Future: future}
}

func (a *S3ControlStub) PutAccessPointPolicy(ctx workflow.Context, input *s3control.PutAccessPointPolicyInput) (*s3control.PutAccessPointPolicyOutput, error) {
	var output s3control.PutAccessPointPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.PutAccessPointPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) PutAccessPointPolicyAsync(ctx workflow.Context, input *s3control.PutAccessPointPolicyInput) *S3controlPutAccessPointPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.PutAccessPointPolicy", input)
	return &S3controlPutAccessPointPolicyFuture{Future: future}
}

func (a *S3ControlStub) PutBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.PutBucketLifecycleConfigurationInput) (*s3control.PutBucketLifecycleConfigurationOutput, error) {
	var output s3control.PutBucketLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.PutBucketLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) PutBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.PutBucketLifecycleConfigurationInput) *S3controlPutBucketLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.PutBucketLifecycleConfiguration", input)
	return &S3controlPutBucketLifecycleConfigurationFuture{Future: future}
}

func (a *S3ControlStub) PutBucketPolicy(ctx workflow.Context, input *s3control.PutBucketPolicyInput) (*s3control.PutBucketPolicyOutput, error) {
	var output s3control.PutBucketPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.PutBucketPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) PutBucketPolicyAsync(ctx workflow.Context, input *s3control.PutBucketPolicyInput) *S3controlPutBucketPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.PutBucketPolicy", input)
	return &S3controlPutBucketPolicyFuture{Future: future}
}

func (a *S3ControlStub) PutBucketTagging(ctx workflow.Context, input *s3control.PutBucketTaggingInput) (*s3control.PutBucketTaggingOutput, error) {
	var output s3control.PutBucketTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.PutBucketTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) PutBucketTaggingAsync(ctx workflow.Context, input *s3control.PutBucketTaggingInput) *S3controlPutBucketTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.PutBucketTagging", input)
	return &S3controlPutBucketTaggingFuture{Future: future}
}

func (a *S3ControlStub) PutJobTagging(ctx workflow.Context, input *s3control.PutJobTaggingInput) (*s3control.PutJobTaggingOutput, error) {
	var output s3control.PutJobTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.PutJobTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) PutJobTaggingAsync(ctx workflow.Context, input *s3control.PutJobTaggingInput) *S3controlPutJobTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.PutJobTagging", input)
	return &S3controlPutJobTaggingFuture{Future: future}
}

func (a *S3ControlStub) PutPublicAccessBlock(ctx workflow.Context, input *s3control.PutPublicAccessBlockInput) (*s3control.PutPublicAccessBlockOutput, error) {
	var output s3control.PutPublicAccessBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.PutPublicAccessBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) PutPublicAccessBlockAsync(ctx workflow.Context, input *s3control.PutPublicAccessBlockInput) *S3controlPutPublicAccessBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.PutPublicAccessBlock", input)
	return &S3controlPutPublicAccessBlockFuture{Future: future}
}

func (a *S3ControlStub) UpdateJobPriority(ctx workflow.Context, input *s3control.UpdateJobPriorityInput) (*s3control.UpdateJobPriorityOutput, error) {
	var output s3control.UpdateJobPriorityOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.UpdateJobPriority", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) UpdateJobPriorityAsync(ctx workflow.Context, input *s3control.UpdateJobPriorityInput) *S3controlUpdateJobPriorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.UpdateJobPriority", input)
	return &S3controlUpdateJobPriorityFuture{Future: future}
}

func (a *S3ControlStub) UpdateJobStatus(ctx workflow.Context, input *s3control.UpdateJobStatusInput) (*s3control.UpdateJobStatusOutput, error) {
	var output s3control.UpdateJobStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.s3control.UpdateJobStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *S3ControlStub) UpdateJobStatusAsync(ctx workflow.Context, input *s3control.UpdateJobStatusInput) *S3controlUpdateJobStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.s3control.UpdateJobStatus", input)
	return &S3controlUpdateJobStatusFuture{Future: future}
}
