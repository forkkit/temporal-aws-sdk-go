// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/glacier"
	"go.temporal.io/sdk/workflow"
)

type GlacierClient interface {
	AbortMultipartUpload(ctx workflow.Context, input *glacier.AbortMultipartUploadInput) (*glacier.AbortMultipartUploadOutput, error)
	AbortMultipartUploadAsync(ctx workflow.Context, input *glacier.AbortMultipartUploadInput) *GlacierAbortMultipartUploadFuture

	AbortVaultLock(ctx workflow.Context, input *glacier.AbortVaultLockInput) (*glacier.AbortVaultLockOutput, error)
	AbortVaultLockAsync(ctx workflow.Context, input *glacier.AbortVaultLockInput) *GlacierAbortVaultLockFuture

	AddTagsToVault(ctx workflow.Context, input *glacier.AddTagsToVaultInput) (*glacier.AddTagsToVaultOutput, error)
	AddTagsToVaultAsync(ctx workflow.Context, input *glacier.AddTagsToVaultInput) *GlacierAddTagsToVaultFuture

	CompleteMultipartUpload(ctx workflow.Context, input *glacier.CompleteMultipartUploadInput) (*glacier.ArchiveCreationOutput, error)
	CompleteMultipartUploadAsync(ctx workflow.Context, input *glacier.CompleteMultipartUploadInput) *GlacierCompleteMultipartUploadFuture

	CompleteVaultLock(ctx workflow.Context, input *glacier.CompleteVaultLockInput) (*glacier.CompleteVaultLockOutput, error)
	CompleteVaultLockAsync(ctx workflow.Context, input *glacier.CompleteVaultLockInput) *GlacierCompleteVaultLockFuture

	CreateVault(ctx workflow.Context, input *glacier.CreateVaultInput) (*glacier.CreateVaultOutput, error)
	CreateVaultAsync(ctx workflow.Context, input *glacier.CreateVaultInput) *GlacierCreateVaultFuture

	DeleteArchive(ctx workflow.Context, input *glacier.DeleteArchiveInput) (*glacier.DeleteArchiveOutput, error)
	DeleteArchiveAsync(ctx workflow.Context, input *glacier.DeleteArchiveInput) *GlacierDeleteArchiveFuture

	DeleteVault(ctx workflow.Context, input *glacier.DeleteVaultInput) (*glacier.DeleteVaultOutput, error)
	DeleteVaultAsync(ctx workflow.Context, input *glacier.DeleteVaultInput) *GlacierDeleteVaultFuture

	DeleteVaultAccessPolicy(ctx workflow.Context, input *glacier.DeleteVaultAccessPolicyInput) (*glacier.DeleteVaultAccessPolicyOutput, error)
	DeleteVaultAccessPolicyAsync(ctx workflow.Context, input *glacier.DeleteVaultAccessPolicyInput) *GlacierDeleteVaultAccessPolicyFuture

	DeleteVaultNotifications(ctx workflow.Context, input *glacier.DeleteVaultNotificationsInput) (*glacier.DeleteVaultNotificationsOutput, error)
	DeleteVaultNotificationsAsync(ctx workflow.Context, input *glacier.DeleteVaultNotificationsInput) *GlacierDeleteVaultNotificationsFuture

	DescribeJob(ctx workflow.Context, input *glacier.DescribeJobInput) (*glacier.JobDescription, error)
	DescribeJobAsync(ctx workflow.Context, input *glacier.DescribeJobInput) *GlacierDescribeJobFuture

	DescribeVault(ctx workflow.Context, input *glacier.DescribeVaultInput) (*glacier.DescribeVaultOutput, error)
	DescribeVaultAsync(ctx workflow.Context, input *glacier.DescribeVaultInput) *GlacierDescribeVaultFuture

	GetDataRetrievalPolicy(ctx workflow.Context, input *glacier.GetDataRetrievalPolicyInput) (*glacier.GetDataRetrievalPolicyOutput, error)
	GetDataRetrievalPolicyAsync(ctx workflow.Context, input *glacier.GetDataRetrievalPolicyInput) *GlacierGetDataRetrievalPolicyFuture

	GetJobOutput(ctx workflow.Context, input *glacier.GetJobOutputInput) (*glacier.GetJobOutputOutput, error)
	GetJobOutputAsync(ctx workflow.Context, input *glacier.GetJobOutputInput) *GlacierGetJobOutputFuture

	GetVaultAccessPolicy(ctx workflow.Context, input *glacier.GetVaultAccessPolicyInput) (*glacier.GetVaultAccessPolicyOutput, error)
	GetVaultAccessPolicyAsync(ctx workflow.Context, input *glacier.GetVaultAccessPolicyInput) *GlacierGetVaultAccessPolicyFuture

	GetVaultLock(ctx workflow.Context, input *glacier.GetVaultLockInput) (*glacier.GetVaultLockOutput, error)
	GetVaultLockAsync(ctx workflow.Context, input *glacier.GetVaultLockInput) *GlacierGetVaultLockFuture

	GetVaultNotifications(ctx workflow.Context, input *glacier.GetVaultNotificationsInput) (*glacier.GetVaultNotificationsOutput, error)
	GetVaultNotificationsAsync(ctx workflow.Context, input *glacier.GetVaultNotificationsInput) *GlacierGetVaultNotificationsFuture

	InitiateJob(ctx workflow.Context, input *glacier.InitiateJobInput) (*glacier.InitiateJobOutput, error)
	InitiateJobAsync(ctx workflow.Context, input *glacier.InitiateJobInput) *GlacierInitiateJobFuture

	InitiateMultipartUpload(ctx workflow.Context, input *glacier.InitiateMultipartUploadInput) (*glacier.InitiateMultipartUploadOutput, error)
	InitiateMultipartUploadAsync(ctx workflow.Context, input *glacier.InitiateMultipartUploadInput) *GlacierInitiateMultipartUploadFuture

	InitiateVaultLock(ctx workflow.Context, input *glacier.InitiateVaultLockInput) (*glacier.InitiateVaultLockOutput, error)
	InitiateVaultLockAsync(ctx workflow.Context, input *glacier.InitiateVaultLockInput) *GlacierInitiateVaultLockFuture

	ListJobs(ctx workflow.Context, input *glacier.ListJobsInput) (*glacier.ListJobsOutput, error)
	ListJobsAsync(ctx workflow.Context, input *glacier.ListJobsInput) *GlacierListJobsFuture

	ListMultipartUploads(ctx workflow.Context, input *glacier.ListMultipartUploadsInput) (*glacier.ListMultipartUploadsOutput, error)
	ListMultipartUploadsAsync(ctx workflow.Context, input *glacier.ListMultipartUploadsInput) *GlacierListMultipartUploadsFuture

	ListParts(ctx workflow.Context, input *glacier.ListPartsInput) (*glacier.ListPartsOutput, error)
	ListPartsAsync(ctx workflow.Context, input *glacier.ListPartsInput) *GlacierListPartsFuture

	ListProvisionedCapacity(ctx workflow.Context, input *glacier.ListProvisionedCapacityInput) (*glacier.ListProvisionedCapacityOutput, error)
	ListProvisionedCapacityAsync(ctx workflow.Context, input *glacier.ListProvisionedCapacityInput) *GlacierListProvisionedCapacityFuture

	ListTagsForVault(ctx workflow.Context, input *glacier.ListTagsForVaultInput) (*glacier.ListTagsForVaultOutput, error)
	ListTagsForVaultAsync(ctx workflow.Context, input *glacier.ListTagsForVaultInput) *GlacierListTagsForVaultFuture

	ListVaults(ctx workflow.Context, input *glacier.ListVaultsInput) (*glacier.ListVaultsOutput, error)
	ListVaultsAsync(ctx workflow.Context, input *glacier.ListVaultsInput) *GlacierListVaultsFuture

	PurchaseProvisionedCapacity(ctx workflow.Context, input *glacier.PurchaseProvisionedCapacityInput) (*glacier.PurchaseProvisionedCapacityOutput, error)
	PurchaseProvisionedCapacityAsync(ctx workflow.Context, input *glacier.PurchaseProvisionedCapacityInput) *GlacierPurchaseProvisionedCapacityFuture

	RemoveTagsFromVault(ctx workflow.Context, input *glacier.RemoveTagsFromVaultInput) (*glacier.RemoveTagsFromVaultOutput, error)
	RemoveTagsFromVaultAsync(ctx workflow.Context, input *glacier.RemoveTagsFromVaultInput) *GlacierRemoveTagsFromVaultFuture

	SetDataRetrievalPolicy(ctx workflow.Context, input *glacier.SetDataRetrievalPolicyInput) (*glacier.SetDataRetrievalPolicyOutput, error)
	SetDataRetrievalPolicyAsync(ctx workflow.Context, input *glacier.SetDataRetrievalPolicyInput) *GlacierSetDataRetrievalPolicyFuture

	SetVaultAccessPolicy(ctx workflow.Context, input *glacier.SetVaultAccessPolicyInput) (*glacier.SetVaultAccessPolicyOutput, error)
	SetVaultAccessPolicyAsync(ctx workflow.Context, input *glacier.SetVaultAccessPolicyInput) *GlacierSetVaultAccessPolicyFuture

	SetVaultNotifications(ctx workflow.Context, input *glacier.SetVaultNotificationsInput) (*glacier.SetVaultNotificationsOutput, error)
	SetVaultNotificationsAsync(ctx workflow.Context, input *glacier.SetVaultNotificationsInput) *GlacierSetVaultNotificationsFuture

	UploadArchive(ctx workflow.Context, input *glacier.UploadArchiveInput) (*glacier.ArchiveCreationOutput, error)
	UploadArchiveAsync(ctx workflow.Context, input *glacier.UploadArchiveInput) *GlacierUploadArchiveFuture

	UploadMultipartPart(ctx workflow.Context, input *glacier.UploadMultipartPartInput) (*glacier.UploadMultipartPartOutput, error)
	UploadMultipartPartAsync(ctx workflow.Context, input *glacier.UploadMultipartPartInput) *GlacierUploadMultipartPartFuture

	WaitUntilVaultExists(ctx workflow.Context, input *glacier.DescribeVaultInput) error
	WaitUntilVaultExistsAsync(ctx workflow.Context, input *glacier.DescribeVaultInput) *VoidFuture

	WaitUntilVaultNotExists(ctx workflow.Context, input *glacier.DescribeVaultInput) error
	WaitUntilVaultNotExistsAsync(ctx workflow.Context, input *glacier.DescribeVaultInput) *VoidFuture
}

type GlacierStub struct{}

func NewGlacierStub() GlacierClient {
	return &GlacierStub{}
}

type GlacierAbortMultipartUploadFuture struct {
	Future workflow.Future
}

func (r *GlacierAbortMultipartUploadFuture) Get(ctx workflow.Context) (*glacier.AbortMultipartUploadOutput, error) {
	var output glacier.AbortMultipartUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierAbortVaultLockFuture struct {
	Future workflow.Future
}

func (r *GlacierAbortVaultLockFuture) Get(ctx workflow.Context) (*glacier.AbortVaultLockOutput, error) {
	var output glacier.AbortVaultLockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierAddTagsToVaultFuture struct {
	Future workflow.Future
}

func (r *GlacierAddTagsToVaultFuture) Get(ctx workflow.Context) (*glacier.AddTagsToVaultOutput, error) {
	var output glacier.AddTagsToVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierCompleteMultipartUploadFuture struct {
	Future workflow.Future
}

func (r *GlacierCompleteMultipartUploadFuture) Get(ctx workflow.Context) (*glacier.ArchiveCreationOutput, error) {
	var output glacier.ArchiveCreationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierCompleteVaultLockFuture struct {
	Future workflow.Future
}

func (r *GlacierCompleteVaultLockFuture) Get(ctx workflow.Context) (*glacier.CompleteVaultLockOutput, error) {
	var output glacier.CompleteVaultLockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierCreateVaultFuture struct {
	Future workflow.Future
}

func (r *GlacierCreateVaultFuture) Get(ctx workflow.Context) (*glacier.CreateVaultOutput, error) {
	var output glacier.CreateVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierDeleteArchiveFuture struct {
	Future workflow.Future
}

func (r *GlacierDeleteArchiveFuture) Get(ctx workflow.Context) (*glacier.DeleteArchiveOutput, error) {
	var output glacier.DeleteArchiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierDeleteVaultFuture struct {
	Future workflow.Future
}

func (r *GlacierDeleteVaultFuture) Get(ctx workflow.Context) (*glacier.DeleteVaultOutput, error) {
	var output glacier.DeleteVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierDeleteVaultAccessPolicyFuture struct {
	Future workflow.Future
}

func (r *GlacierDeleteVaultAccessPolicyFuture) Get(ctx workflow.Context) (*glacier.DeleteVaultAccessPolicyOutput, error) {
	var output glacier.DeleteVaultAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierDeleteVaultNotificationsFuture struct {
	Future workflow.Future
}

func (r *GlacierDeleteVaultNotificationsFuture) Get(ctx workflow.Context) (*glacier.DeleteVaultNotificationsOutput, error) {
	var output glacier.DeleteVaultNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierDescribeJobFuture struct {
	Future workflow.Future
}

func (r *GlacierDescribeJobFuture) Get(ctx workflow.Context) (*glacier.JobDescription, error) {
	var output glacier.JobDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierDescribeVaultFuture struct {
	Future workflow.Future
}

func (r *GlacierDescribeVaultFuture) Get(ctx workflow.Context) (*glacier.DescribeVaultOutput, error) {
	var output glacier.DescribeVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierGetDataRetrievalPolicyFuture struct {
	Future workflow.Future
}

func (r *GlacierGetDataRetrievalPolicyFuture) Get(ctx workflow.Context) (*glacier.GetDataRetrievalPolicyOutput, error) {
	var output glacier.GetDataRetrievalPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierGetJobOutputFuture struct {
	Future workflow.Future
}

func (r *GlacierGetJobOutputFuture) Get(ctx workflow.Context) (*glacier.GetJobOutputOutput, error) {
	var output glacier.GetJobOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierGetVaultAccessPolicyFuture struct {
	Future workflow.Future
}

func (r *GlacierGetVaultAccessPolicyFuture) Get(ctx workflow.Context) (*glacier.GetVaultAccessPolicyOutput, error) {
	var output glacier.GetVaultAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierGetVaultLockFuture struct {
	Future workflow.Future
}

func (r *GlacierGetVaultLockFuture) Get(ctx workflow.Context) (*glacier.GetVaultLockOutput, error) {
	var output glacier.GetVaultLockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierGetVaultNotificationsFuture struct {
	Future workflow.Future
}

func (r *GlacierGetVaultNotificationsFuture) Get(ctx workflow.Context) (*glacier.GetVaultNotificationsOutput, error) {
	var output glacier.GetVaultNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierInitiateJobFuture struct {
	Future workflow.Future
}

func (r *GlacierInitiateJobFuture) Get(ctx workflow.Context) (*glacier.InitiateJobOutput, error) {
	var output glacier.InitiateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierInitiateMultipartUploadFuture struct {
	Future workflow.Future
}

func (r *GlacierInitiateMultipartUploadFuture) Get(ctx workflow.Context) (*glacier.InitiateMultipartUploadOutput, error) {
	var output glacier.InitiateMultipartUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierInitiateVaultLockFuture struct {
	Future workflow.Future
}

func (r *GlacierInitiateVaultLockFuture) Get(ctx workflow.Context) (*glacier.InitiateVaultLockOutput, error) {
	var output glacier.InitiateVaultLockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierListJobsFuture struct {
	Future workflow.Future
}

func (r *GlacierListJobsFuture) Get(ctx workflow.Context) (*glacier.ListJobsOutput, error) {
	var output glacier.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierListMultipartUploadsFuture struct {
	Future workflow.Future
}

func (r *GlacierListMultipartUploadsFuture) Get(ctx workflow.Context) (*glacier.ListMultipartUploadsOutput, error) {
	var output glacier.ListMultipartUploadsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierListPartsFuture struct {
	Future workflow.Future
}

func (r *GlacierListPartsFuture) Get(ctx workflow.Context) (*glacier.ListPartsOutput, error) {
	var output glacier.ListPartsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierListProvisionedCapacityFuture struct {
	Future workflow.Future
}

func (r *GlacierListProvisionedCapacityFuture) Get(ctx workflow.Context) (*glacier.ListProvisionedCapacityOutput, error) {
	var output glacier.ListProvisionedCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierListTagsForVaultFuture struct {
	Future workflow.Future
}

func (r *GlacierListTagsForVaultFuture) Get(ctx workflow.Context) (*glacier.ListTagsForVaultOutput, error) {
	var output glacier.ListTagsForVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierListVaultsFuture struct {
	Future workflow.Future
}

func (r *GlacierListVaultsFuture) Get(ctx workflow.Context) (*glacier.ListVaultsOutput, error) {
	var output glacier.ListVaultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierPurchaseProvisionedCapacityFuture struct {
	Future workflow.Future
}

func (r *GlacierPurchaseProvisionedCapacityFuture) Get(ctx workflow.Context) (*glacier.PurchaseProvisionedCapacityOutput, error) {
	var output glacier.PurchaseProvisionedCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierRemoveTagsFromVaultFuture struct {
	Future workflow.Future
}

func (r *GlacierRemoveTagsFromVaultFuture) Get(ctx workflow.Context) (*glacier.RemoveTagsFromVaultOutput, error) {
	var output glacier.RemoveTagsFromVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierSetDataRetrievalPolicyFuture struct {
	Future workflow.Future
}

func (r *GlacierSetDataRetrievalPolicyFuture) Get(ctx workflow.Context) (*glacier.SetDataRetrievalPolicyOutput, error) {
	var output glacier.SetDataRetrievalPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierSetVaultAccessPolicyFuture struct {
	Future workflow.Future
}

func (r *GlacierSetVaultAccessPolicyFuture) Get(ctx workflow.Context) (*glacier.SetVaultAccessPolicyOutput, error) {
	var output glacier.SetVaultAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierSetVaultNotificationsFuture struct {
	Future workflow.Future
}

func (r *GlacierSetVaultNotificationsFuture) Get(ctx workflow.Context) (*glacier.SetVaultNotificationsOutput, error) {
	var output glacier.SetVaultNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierUploadArchiveFuture struct {
	Future workflow.Future
}

func (r *GlacierUploadArchiveFuture) Get(ctx workflow.Context) (*glacier.ArchiveCreationOutput, error) {
	var output glacier.ArchiveCreationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlacierUploadMultipartPartFuture struct {
	Future workflow.Future
}

func (r *GlacierUploadMultipartPartFuture) Get(ctx workflow.Context) (*glacier.UploadMultipartPartOutput, error) {
	var output glacier.UploadMultipartPartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) AbortMultipartUpload(ctx workflow.Context, input *glacier.AbortMultipartUploadInput) (*glacier.AbortMultipartUploadOutput, error) {
	var output glacier.AbortMultipartUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.AbortMultipartUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) AbortMultipartUploadAsync(ctx workflow.Context, input *glacier.AbortMultipartUploadInput) *GlacierAbortMultipartUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.AbortMultipartUpload", input)
	return &GlacierAbortMultipartUploadFuture{Future: future}
}

func (a *GlacierStub) AbortVaultLock(ctx workflow.Context, input *glacier.AbortVaultLockInput) (*glacier.AbortVaultLockOutput, error) {
	var output glacier.AbortVaultLockOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.AbortVaultLock", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) AbortVaultLockAsync(ctx workflow.Context, input *glacier.AbortVaultLockInput) *GlacierAbortVaultLockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.AbortVaultLock", input)
	return &GlacierAbortVaultLockFuture{Future: future}
}

func (a *GlacierStub) AddTagsToVault(ctx workflow.Context, input *glacier.AddTagsToVaultInput) (*glacier.AddTagsToVaultOutput, error) {
	var output glacier.AddTagsToVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.AddTagsToVault", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) AddTagsToVaultAsync(ctx workflow.Context, input *glacier.AddTagsToVaultInput) *GlacierAddTagsToVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.AddTagsToVault", input)
	return &GlacierAddTagsToVaultFuture{Future: future}
}

func (a *GlacierStub) CompleteMultipartUpload(ctx workflow.Context, input *glacier.CompleteMultipartUploadInput) (*glacier.ArchiveCreationOutput, error) {
	var output glacier.ArchiveCreationOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.CompleteMultipartUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) CompleteMultipartUploadAsync(ctx workflow.Context, input *glacier.CompleteMultipartUploadInput) *GlacierCompleteMultipartUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.CompleteMultipartUpload", input)
	return &GlacierCompleteMultipartUploadFuture{Future: future}
}

func (a *GlacierStub) CompleteVaultLock(ctx workflow.Context, input *glacier.CompleteVaultLockInput) (*glacier.CompleteVaultLockOutput, error) {
	var output glacier.CompleteVaultLockOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.CompleteVaultLock", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) CompleteVaultLockAsync(ctx workflow.Context, input *glacier.CompleteVaultLockInput) *GlacierCompleteVaultLockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.CompleteVaultLock", input)
	return &GlacierCompleteVaultLockFuture{Future: future}
}

func (a *GlacierStub) CreateVault(ctx workflow.Context, input *glacier.CreateVaultInput) (*glacier.CreateVaultOutput, error) {
	var output glacier.CreateVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.CreateVault", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) CreateVaultAsync(ctx workflow.Context, input *glacier.CreateVaultInput) *GlacierCreateVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.CreateVault", input)
	return &GlacierCreateVaultFuture{Future: future}
}

func (a *GlacierStub) DeleteArchive(ctx workflow.Context, input *glacier.DeleteArchiveInput) (*glacier.DeleteArchiveOutput, error) {
	var output glacier.DeleteArchiveOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.DeleteArchive", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) DeleteArchiveAsync(ctx workflow.Context, input *glacier.DeleteArchiveInput) *GlacierDeleteArchiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.DeleteArchive", input)
	return &GlacierDeleteArchiveFuture{Future: future}
}

func (a *GlacierStub) DeleteVault(ctx workflow.Context, input *glacier.DeleteVaultInput) (*glacier.DeleteVaultOutput, error) {
	var output glacier.DeleteVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.DeleteVault", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) DeleteVaultAsync(ctx workflow.Context, input *glacier.DeleteVaultInput) *GlacierDeleteVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.DeleteVault", input)
	return &GlacierDeleteVaultFuture{Future: future}
}

func (a *GlacierStub) DeleteVaultAccessPolicy(ctx workflow.Context, input *glacier.DeleteVaultAccessPolicyInput) (*glacier.DeleteVaultAccessPolicyOutput, error) {
	var output glacier.DeleteVaultAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.DeleteVaultAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) DeleteVaultAccessPolicyAsync(ctx workflow.Context, input *glacier.DeleteVaultAccessPolicyInput) *GlacierDeleteVaultAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.DeleteVaultAccessPolicy", input)
	return &GlacierDeleteVaultAccessPolicyFuture{Future: future}
}

func (a *GlacierStub) DeleteVaultNotifications(ctx workflow.Context, input *glacier.DeleteVaultNotificationsInput) (*glacier.DeleteVaultNotificationsOutput, error) {
	var output glacier.DeleteVaultNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.DeleteVaultNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) DeleteVaultNotificationsAsync(ctx workflow.Context, input *glacier.DeleteVaultNotificationsInput) *GlacierDeleteVaultNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.DeleteVaultNotifications", input)
	return &GlacierDeleteVaultNotificationsFuture{Future: future}
}

func (a *GlacierStub) DescribeJob(ctx workflow.Context, input *glacier.DescribeJobInput) (*glacier.JobDescription, error) {
	var output glacier.JobDescription
	err := workflow.ExecuteActivity(ctx, "aws.glacier.DescribeJob", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) DescribeJobAsync(ctx workflow.Context, input *glacier.DescribeJobInput) *GlacierDescribeJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.DescribeJob", input)
	return &GlacierDescribeJobFuture{Future: future}
}

func (a *GlacierStub) DescribeVault(ctx workflow.Context, input *glacier.DescribeVaultInput) (*glacier.DescribeVaultOutput, error) {
	var output glacier.DescribeVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.DescribeVault", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) DescribeVaultAsync(ctx workflow.Context, input *glacier.DescribeVaultInput) *GlacierDescribeVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.DescribeVault", input)
	return &GlacierDescribeVaultFuture{Future: future}
}

func (a *GlacierStub) GetDataRetrievalPolicy(ctx workflow.Context, input *glacier.GetDataRetrievalPolicyInput) (*glacier.GetDataRetrievalPolicyOutput, error) {
	var output glacier.GetDataRetrievalPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.GetDataRetrievalPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) GetDataRetrievalPolicyAsync(ctx workflow.Context, input *glacier.GetDataRetrievalPolicyInput) *GlacierGetDataRetrievalPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.GetDataRetrievalPolicy", input)
	return &GlacierGetDataRetrievalPolicyFuture{Future: future}
}

func (a *GlacierStub) GetJobOutput(ctx workflow.Context, input *glacier.GetJobOutputInput) (*glacier.GetJobOutputOutput, error) {
	var output glacier.GetJobOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.GetJobOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) GetJobOutputAsync(ctx workflow.Context, input *glacier.GetJobOutputInput) *GlacierGetJobOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.GetJobOutput", input)
	return &GlacierGetJobOutputFuture{Future: future}
}

func (a *GlacierStub) GetVaultAccessPolicy(ctx workflow.Context, input *glacier.GetVaultAccessPolicyInput) (*glacier.GetVaultAccessPolicyOutput, error) {
	var output glacier.GetVaultAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.GetVaultAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) GetVaultAccessPolicyAsync(ctx workflow.Context, input *glacier.GetVaultAccessPolicyInput) *GlacierGetVaultAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.GetVaultAccessPolicy", input)
	return &GlacierGetVaultAccessPolicyFuture{Future: future}
}

func (a *GlacierStub) GetVaultLock(ctx workflow.Context, input *glacier.GetVaultLockInput) (*glacier.GetVaultLockOutput, error) {
	var output glacier.GetVaultLockOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.GetVaultLock", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) GetVaultLockAsync(ctx workflow.Context, input *glacier.GetVaultLockInput) *GlacierGetVaultLockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.GetVaultLock", input)
	return &GlacierGetVaultLockFuture{Future: future}
}

func (a *GlacierStub) GetVaultNotifications(ctx workflow.Context, input *glacier.GetVaultNotificationsInput) (*glacier.GetVaultNotificationsOutput, error) {
	var output glacier.GetVaultNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.GetVaultNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) GetVaultNotificationsAsync(ctx workflow.Context, input *glacier.GetVaultNotificationsInput) *GlacierGetVaultNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.GetVaultNotifications", input)
	return &GlacierGetVaultNotificationsFuture{Future: future}
}

func (a *GlacierStub) InitiateJob(ctx workflow.Context, input *glacier.InitiateJobInput) (*glacier.InitiateJobOutput, error) {
	var output glacier.InitiateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.InitiateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) InitiateJobAsync(ctx workflow.Context, input *glacier.InitiateJobInput) *GlacierInitiateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.InitiateJob", input)
	return &GlacierInitiateJobFuture{Future: future}
}

func (a *GlacierStub) InitiateMultipartUpload(ctx workflow.Context, input *glacier.InitiateMultipartUploadInput) (*glacier.InitiateMultipartUploadOutput, error) {
	var output glacier.InitiateMultipartUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.InitiateMultipartUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) InitiateMultipartUploadAsync(ctx workflow.Context, input *glacier.InitiateMultipartUploadInput) *GlacierInitiateMultipartUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.InitiateMultipartUpload", input)
	return &GlacierInitiateMultipartUploadFuture{Future: future}
}

func (a *GlacierStub) InitiateVaultLock(ctx workflow.Context, input *glacier.InitiateVaultLockInput) (*glacier.InitiateVaultLockOutput, error) {
	var output glacier.InitiateVaultLockOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.InitiateVaultLock", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) InitiateVaultLockAsync(ctx workflow.Context, input *glacier.InitiateVaultLockInput) *GlacierInitiateVaultLockFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.InitiateVaultLock", input)
	return &GlacierInitiateVaultLockFuture{Future: future}
}

func (a *GlacierStub) ListJobs(ctx workflow.Context, input *glacier.ListJobsInput) (*glacier.ListJobsOutput, error) {
	var output glacier.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) ListJobsAsync(ctx workflow.Context, input *glacier.ListJobsInput) *GlacierListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.ListJobs", input)
	return &GlacierListJobsFuture{Future: future}
}

func (a *GlacierStub) ListMultipartUploads(ctx workflow.Context, input *glacier.ListMultipartUploadsInput) (*glacier.ListMultipartUploadsOutput, error) {
	var output glacier.ListMultipartUploadsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.ListMultipartUploads", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) ListMultipartUploadsAsync(ctx workflow.Context, input *glacier.ListMultipartUploadsInput) *GlacierListMultipartUploadsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.ListMultipartUploads", input)
	return &GlacierListMultipartUploadsFuture{Future: future}
}

func (a *GlacierStub) ListParts(ctx workflow.Context, input *glacier.ListPartsInput) (*glacier.ListPartsOutput, error) {
	var output glacier.ListPartsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.ListParts", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) ListPartsAsync(ctx workflow.Context, input *glacier.ListPartsInput) *GlacierListPartsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.ListParts", input)
	return &GlacierListPartsFuture{Future: future}
}

func (a *GlacierStub) ListProvisionedCapacity(ctx workflow.Context, input *glacier.ListProvisionedCapacityInput) (*glacier.ListProvisionedCapacityOutput, error) {
	var output glacier.ListProvisionedCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.ListProvisionedCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) ListProvisionedCapacityAsync(ctx workflow.Context, input *glacier.ListProvisionedCapacityInput) *GlacierListProvisionedCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.ListProvisionedCapacity", input)
	return &GlacierListProvisionedCapacityFuture{Future: future}
}

func (a *GlacierStub) ListTagsForVault(ctx workflow.Context, input *glacier.ListTagsForVaultInput) (*glacier.ListTagsForVaultOutput, error) {
	var output glacier.ListTagsForVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.ListTagsForVault", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) ListTagsForVaultAsync(ctx workflow.Context, input *glacier.ListTagsForVaultInput) *GlacierListTagsForVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.ListTagsForVault", input)
	return &GlacierListTagsForVaultFuture{Future: future}
}

func (a *GlacierStub) ListVaults(ctx workflow.Context, input *glacier.ListVaultsInput) (*glacier.ListVaultsOutput, error) {
	var output glacier.ListVaultsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.ListVaults", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) ListVaultsAsync(ctx workflow.Context, input *glacier.ListVaultsInput) *GlacierListVaultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.ListVaults", input)
	return &GlacierListVaultsFuture{Future: future}
}

func (a *GlacierStub) PurchaseProvisionedCapacity(ctx workflow.Context, input *glacier.PurchaseProvisionedCapacityInput) (*glacier.PurchaseProvisionedCapacityOutput, error) {
	var output glacier.PurchaseProvisionedCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.PurchaseProvisionedCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) PurchaseProvisionedCapacityAsync(ctx workflow.Context, input *glacier.PurchaseProvisionedCapacityInput) *GlacierPurchaseProvisionedCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.PurchaseProvisionedCapacity", input)
	return &GlacierPurchaseProvisionedCapacityFuture{Future: future}
}

func (a *GlacierStub) RemoveTagsFromVault(ctx workflow.Context, input *glacier.RemoveTagsFromVaultInput) (*glacier.RemoveTagsFromVaultOutput, error) {
	var output glacier.RemoveTagsFromVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.RemoveTagsFromVault", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) RemoveTagsFromVaultAsync(ctx workflow.Context, input *glacier.RemoveTagsFromVaultInput) *GlacierRemoveTagsFromVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.RemoveTagsFromVault", input)
	return &GlacierRemoveTagsFromVaultFuture{Future: future}
}

func (a *GlacierStub) SetDataRetrievalPolicy(ctx workflow.Context, input *glacier.SetDataRetrievalPolicyInput) (*glacier.SetDataRetrievalPolicyOutput, error) {
	var output glacier.SetDataRetrievalPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.SetDataRetrievalPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) SetDataRetrievalPolicyAsync(ctx workflow.Context, input *glacier.SetDataRetrievalPolicyInput) *GlacierSetDataRetrievalPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.SetDataRetrievalPolicy", input)
	return &GlacierSetDataRetrievalPolicyFuture{Future: future}
}

func (a *GlacierStub) SetVaultAccessPolicy(ctx workflow.Context, input *glacier.SetVaultAccessPolicyInput) (*glacier.SetVaultAccessPolicyOutput, error) {
	var output glacier.SetVaultAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.SetVaultAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) SetVaultAccessPolicyAsync(ctx workflow.Context, input *glacier.SetVaultAccessPolicyInput) *GlacierSetVaultAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.SetVaultAccessPolicy", input)
	return &GlacierSetVaultAccessPolicyFuture{Future: future}
}

func (a *GlacierStub) SetVaultNotifications(ctx workflow.Context, input *glacier.SetVaultNotificationsInput) (*glacier.SetVaultNotificationsOutput, error) {
	var output glacier.SetVaultNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.SetVaultNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) SetVaultNotificationsAsync(ctx workflow.Context, input *glacier.SetVaultNotificationsInput) *GlacierSetVaultNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.SetVaultNotifications", input)
	return &GlacierSetVaultNotificationsFuture{Future: future}
}

func (a *GlacierStub) UploadArchive(ctx workflow.Context, input *glacier.UploadArchiveInput) (*glacier.ArchiveCreationOutput, error) {
	var output glacier.ArchiveCreationOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.UploadArchive", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) UploadArchiveAsync(ctx workflow.Context, input *glacier.UploadArchiveInput) *GlacierUploadArchiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.UploadArchive", input)
	return &GlacierUploadArchiveFuture{Future: future}
}

func (a *GlacierStub) UploadMultipartPart(ctx workflow.Context, input *glacier.UploadMultipartPartInput) (*glacier.UploadMultipartPartOutput, error) {
	var output glacier.UploadMultipartPartOutput
	err := workflow.ExecuteActivity(ctx, "aws.glacier.UploadMultipartPart", input).Get(ctx, &output)
	return &output, err
}

func (a *GlacierStub) UploadMultipartPartAsync(ctx workflow.Context, input *glacier.UploadMultipartPartInput) *GlacierUploadMultipartPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.UploadMultipartPart", input)
	return &GlacierUploadMultipartPartFuture{Future: future}
}

func (a *GlacierStub) WaitUntilVaultExists(ctx workflow.Context, input *glacier.DescribeVaultInput) error {
	return workflow.ExecuteActivity(ctx, "aws.glacier.WaitUntilVaultExists", input).Get(ctx, nil)
}

func (a *GlacierStub) WaitUntilVaultExistsAsync(ctx workflow.Context, input *glacier.DescribeVaultInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.WaitUntilVaultExists", input)
	return NewVoidFuture(future)
}

func (a *GlacierStub) WaitUntilVaultNotExists(ctx workflow.Context, input *glacier.DescribeVaultInput) error {
	return workflow.ExecuteActivity(ctx, "aws.glacier.WaitUntilVaultNotExists", input).Get(ctx, nil)
}

func (a *GlacierStub) WaitUntilVaultNotExistsAsync(ctx workflow.Context, input *glacier.DescribeVaultInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.glacier.WaitUntilVaultNotExists", input)
	return NewVoidFuture(future)
}
