// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/personalize"
	"go.temporal.io/sdk/workflow"
)

type PersonalizeClient interface {
	CreateBatchInferenceJob(ctx workflow.Context, input *personalize.CreateBatchInferenceJobInput) (*personalize.CreateBatchInferenceJobOutput, error)
	CreateBatchInferenceJobAsync(ctx workflow.Context, input *personalize.CreateBatchInferenceJobInput) *PersonalizeCreateBatchInferenceJobFuture

	CreateCampaign(ctx workflow.Context, input *personalize.CreateCampaignInput) (*personalize.CreateCampaignOutput, error)
	CreateCampaignAsync(ctx workflow.Context, input *personalize.CreateCampaignInput) *PersonalizeCreateCampaignFuture

	CreateDataset(ctx workflow.Context, input *personalize.CreateDatasetInput) (*personalize.CreateDatasetOutput, error)
	CreateDatasetAsync(ctx workflow.Context, input *personalize.CreateDatasetInput) *PersonalizeCreateDatasetFuture

	CreateDatasetGroup(ctx workflow.Context, input *personalize.CreateDatasetGroupInput) (*personalize.CreateDatasetGroupOutput, error)
	CreateDatasetGroupAsync(ctx workflow.Context, input *personalize.CreateDatasetGroupInput) *PersonalizeCreateDatasetGroupFuture

	CreateDatasetImportJob(ctx workflow.Context, input *personalize.CreateDatasetImportJobInput) (*personalize.CreateDatasetImportJobOutput, error)
	CreateDatasetImportJobAsync(ctx workflow.Context, input *personalize.CreateDatasetImportJobInput) *PersonalizeCreateDatasetImportJobFuture

	CreateEventTracker(ctx workflow.Context, input *personalize.CreateEventTrackerInput) (*personalize.CreateEventTrackerOutput, error)
	CreateEventTrackerAsync(ctx workflow.Context, input *personalize.CreateEventTrackerInput) *PersonalizeCreateEventTrackerFuture

	CreateFilter(ctx workflow.Context, input *personalize.CreateFilterInput) (*personalize.CreateFilterOutput, error)
	CreateFilterAsync(ctx workflow.Context, input *personalize.CreateFilterInput) *PersonalizeCreateFilterFuture

	CreateSchema(ctx workflow.Context, input *personalize.CreateSchemaInput) (*personalize.CreateSchemaOutput, error)
	CreateSchemaAsync(ctx workflow.Context, input *personalize.CreateSchemaInput) *PersonalizeCreateSchemaFuture

	CreateSolution(ctx workflow.Context, input *personalize.CreateSolutionInput) (*personalize.CreateSolutionOutput, error)
	CreateSolutionAsync(ctx workflow.Context, input *personalize.CreateSolutionInput) *PersonalizeCreateSolutionFuture

	CreateSolutionVersion(ctx workflow.Context, input *personalize.CreateSolutionVersionInput) (*personalize.CreateSolutionVersionOutput, error)
	CreateSolutionVersionAsync(ctx workflow.Context, input *personalize.CreateSolutionVersionInput) *PersonalizeCreateSolutionVersionFuture

	DeleteCampaign(ctx workflow.Context, input *personalize.DeleteCampaignInput) (*personalize.DeleteCampaignOutput, error)
	DeleteCampaignAsync(ctx workflow.Context, input *personalize.DeleteCampaignInput) *PersonalizeDeleteCampaignFuture

	DeleteDataset(ctx workflow.Context, input *personalize.DeleteDatasetInput) (*personalize.DeleteDatasetOutput, error)
	DeleteDatasetAsync(ctx workflow.Context, input *personalize.DeleteDatasetInput) *PersonalizeDeleteDatasetFuture

	DeleteDatasetGroup(ctx workflow.Context, input *personalize.DeleteDatasetGroupInput) (*personalize.DeleteDatasetGroupOutput, error)
	DeleteDatasetGroupAsync(ctx workflow.Context, input *personalize.DeleteDatasetGroupInput) *PersonalizeDeleteDatasetGroupFuture

	DeleteEventTracker(ctx workflow.Context, input *personalize.DeleteEventTrackerInput) (*personalize.DeleteEventTrackerOutput, error)
	DeleteEventTrackerAsync(ctx workflow.Context, input *personalize.DeleteEventTrackerInput) *PersonalizeDeleteEventTrackerFuture

	DeleteFilter(ctx workflow.Context, input *personalize.DeleteFilterInput) (*personalize.DeleteFilterOutput, error)
	DeleteFilterAsync(ctx workflow.Context, input *personalize.DeleteFilterInput) *PersonalizeDeleteFilterFuture

	DeleteSchema(ctx workflow.Context, input *personalize.DeleteSchemaInput) (*personalize.DeleteSchemaOutput, error)
	DeleteSchemaAsync(ctx workflow.Context, input *personalize.DeleteSchemaInput) *PersonalizeDeleteSchemaFuture

	DeleteSolution(ctx workflow.Context, input *personalize.DeleteSolutionInput) (*personalize.DeleteSolutionOutput, error)
	DeleteSolutionAsync(ctx workflow.Context, input *personalize.DeleteSolutionInput) *PersonalizeDeleteSolutionFuture

	DescribeAlgorithm(ctx workflow.Context, input *personalize.DescribeAlgorithmInput) (*personalize.DescribeAlgorithmOutput, error)
	DescribeAlgorithmAsync(ctx workflow.Context, input *personalize.DescribeAlgorithmInput) *PersonalizeDescribeAlgorithmFuture

	DescribeBatchInferenceJob(ctx workflow.Context, input *personalize.DescribeBatchInferenceJobInput) (*personalize.DescribeBatchInferenceJobOutput, error)
	DescribeBatchInferenceJobAsync(ctx workflow.Context, input *personalize.DescribeBatchInferenceJobInput) *PersonalizeDescribeBatchInferenceJobFuture

	DescribeCampaign(ctx workflow.Context, input *personalize.DescribeCampaignInput) (*personalize.DescribeCampaignOutput, error)
	DescribeCampaignAsync(ctx workflow.Context, input *personalize.DescribeCampaignInput) *PersonalizeDescribeCampaignFuture

	DescribeDataset(ctx workflow.Context, input *personalize.DescribeDatasetInput) (*personalize.DescribeDatasetOutput, error)
	DescribeDatasetAsync(ctx workflow.Context, input *personalize.DescribeDatasetInput) *PersonalizeDescribeDatasetFuture

	DescribeDatasetGroup(ctx workflow.Context, input *personalize.DescribeDatasetGroupInput) (*personalize.DescribeDatasetGroupOutput, error)
	DescribeDatasetGroupAsync(ctx workflow.Context, input *personalize.DescribeDatasetGroupInput) *PersonalizeDescribeDatasetGroupFuture

	DescribeDatasetImportJob(ctx workflow.Context, input *personalize.DescribeDatasetImportJobInput) (*personalize.DescribeDatasetImportJobOutput, error)
	DescribeDatasetImportJobAsync(ctx workflow.Context, input *personalize.DescribeDatasetImportJobInput) *PersonalizeDescribeDatasetImportJobFuture

	DescribeEventTracker(ctx workflow.Context, input *personalize.DescribeEventTrackerInput) (*personalize.DescribeEventTrackerOutput, error)
	DescribeEventTrackerAsync(ctx workflow.Context, input *personalize.DescribeEventTrackerInput) *PersonalizeDescribeEventTrackerFuture

	DescribeFeatureTransformation(ctx workflow.Context, input *personalize.DescribeFeatureTransformationInput) (*personalize.DescribeFeatureTransformationOutput, error)
	DescribeFeatureTransformationAsync(ctx workflow.Context, input *personalize.DescribeFeatureTransformationInput) *PersonalizeDescribeFeatureTransformationFuture

	DescribeFilter(ctx workflow.Context, input *personalize.DescribeFilterInput) (*personalize.DescribeFilterOutput, error)
	DescribeFilterAsync(ctx workflow.Context, input *personalize.DescribeFilterInput) *PersonalizeDescribeFilterFuture

	DescribeRecipe(ctx workflow.Context, input *personalize.DescribeRecipeInput) (*personalize.DescribeRecipeOutput, error)
	DescribeRecipeAsync(ctx workflow.Context, input *personalize.DescribeRecipeInput) *PersonalizeDescribeRecipeFuture

	DescribeSchema(ctx workflow.Context, input *personalize.DescribeSchemaInput) (*personalize.DescribeSchemaOutput, error)
	DescribeSchemaAsync(ctx workflow.Context, input *personalize.DescribeSchemaInput) *PersonalizeDescribeSchemaFuture

	DescribeSolution(ctx workflow.Context, input *personalize.DescribeSolutionInput) (*personalize.DescribeSolutionOutput, error)
	DescribeSolutionAsync(ctx workflow.Context, input *personalize.DescribeSolutionInput) *PersonalizeDescribeSolutionFuture

	DescribeSolutionVersion(ctx workflow.Context, input *personalize.DescribeSolutionVersionInput) (*personalize.DescribeSolutionVersionOutput, error)
	DescribeSolutionVersionAsync(ctx workflow.Context, input *personalize.DescribeSolutionVersionInput) *PersonalizeDescribeSolutionVersionFuture

	GetSolutionMetrics(ctx workflow.Context, input *personalize.GetSolutionMetricsInput) (*personalize.GetSolutionMetricsOutput, error)
	GetSolutionMetricsAsync(ctx workflow.Context, input *personalize.GetSolutionMetricsInput) *PersonalizeGetSolutionMetricsFuture

	ListBatchInferenceJobs(ctx workflow.Context, input *personalize.ListBatchInferenceJobsInput) (*personalize.ListBatchInferenceJobsOutput, error)
	ListBatchInferenceJobsAsync(ctx workflow.Context, input *personalize.ListBatchInferenceJobsInput) *PersonalizeListBatchInferenceJobsFuture

	ListCampaigns(ctx workflow.Context, input *personalize.ListCampaignsInput) (*personalize.ListCampaignsOutput, error)
	ListCampaignsAsync(ctx workflow.Context, input *personalize.ListCampaignsInput) *PersonalizeListCampaignsFuture

	ListDatasetGroups(ctx workflow.Context, input *personalize.ListDatasetGroupsInput) (*personalize.ListDatasetGroupsOutput, error)
	ListDatasetGroupsAsync(ctx workflow.Context, input *personalize.ListDatasetGroupsInput) *PersonalizeListDatasetGroupsFuture

	ListDatasetImportJobs(ctx workflow.Context, input *personalize.ListDatasetImportJobsInput) (*personalize.ListDatasetImportJobsOutput, error)
	ListDatasetImportJobsAsync(ctx workflow.Context, input *personalize.ListDatasetImportJobsInput) *PersonalizeListDatasetImportJobsFuture

	ListDatasets(ctx workflow.Context, input *personalize.ListDatasetsInput) (*personalize.ListDatasetsOutput, error)
	ListDatasetsAsync(ctx workflow.Context, input *personalize.ListDatasetsInput) *PersonalizeListDatasetsFuture

	ListEventTrackers(ctx workflow.Context, input *personalize.ListEventTrackersInput) (*personalize.ListEventTrackersOutput, error)
	ListEventTrackersAsync(ctx workflow.Context, input *personalize.ListEventTrackersInput) *PersonalizeListEventTrackersFuture

	ListFilters(ctx workflow.Context, input *personalize.ListFiltersInput) (*personalize.ListFiltersOutput, error)
	ListFiltersAsync(ctx workflow.Context, input *personalize.ListFiltersInput) *PersonalizeListFiltersFuture

	ListRecipes(ctx workflow.Context, input *personalize.ListRecipesInput) (*personalize.ListRecipesOutput, error)
	ListRecipesAsync(ctx workflow.Context, input *personalize.ListRecipesInput) *PersonalizeListRecipesFuture

	ListSchemas(ctx workflow.Context, input *personalize.ListSchemasInput) (*personalize.ListSchemasOutput, error)
	ListSchemasAsync(ctx workflow.Context, input *personalize.ListSchemasInput) *PersonalizeListSchemasFuture

	ListSolutionVersions(ctx workflow.Context, input *personalize.ListSolutionVersionsInput) (*personalize.ListSolutionVersionsOutput, error)
	ListSolutionVersionsAsync(ctx workflow.Context, input *personalize.ListSolutionVersionsInput) *PersonalizeListSolutionVersionsFuture

	ListSolutions(ctx workflow.Context, input *personalize.ListSolutionsInput) (*personalize.ListSolutionsOutput, error)
	ListSolutionsAsync(ctx workflow.Context, input *personalize.ListSolutionsInput) *PersonalizeListSolutionsFuture

	UpdateCampaign(ctx workflow.Context, input *personalize.UpdateCampaignInput) (*personalize.UpdateCampaignOutput, error)
	UpdateCampaignAsync(ctx workflow.Context, input *personalize.UpdateCampaignInput) *PersonalizeUpdateCampaignFuture
}

type PersonalizeStub struct{}

func NewPersonalizeStub() PersonalizeClient {
	return &PersonalizeStub{}
}

type PersonalizeCreateBatchInferenceJobFuture struct {
	Future workflow.Future
}

func (r *PersonalizeCreateBatchInferenceJobFuture) Get(ctx workflow.Context) (*personalize.CreateBatchInferenceJobOutput, error) {
	var output personalize.CreateBatchInferenceJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeCreateCampaignFuture struct {
	Future workflow.Future
}

func (r *PersonalizeCreateCampaignFuture) Get(ctx workflow.Context) (*personalize.CreateCampaignOutput, error) {
	var output personalize.CreateCampaignOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeCreateDatasetFuture struct {
	Future workflow.Future
}

func (r *PersonalizeCreateDatasetFuture) Get(ctx workflow.Context) (*personalize.CreateDatasetOutput, error) {
	var output personalize.CreateDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeCreateDatasetGroupFuture struct {
	Future workflow.Future
}

func (r *PersonalizeCreateDatasetGroupFuture) Get(ctx workflow.Context) (*personalize.CreateDatasetGroupOutput, error) {
	var output personalize.CreateDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeCreateDatasetImportJobFuture struct {
	Future workflow.Future
}

func (r *PersonalizeCreateDatasetImportJobFuture) Get(ctx workflow.Context) (*personalize.CreateDatasetImportJobOutput, error) {
	var output personalize.CreateDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeCreateEventTrackerFuture struct {
	Future workflow.Future
}

func (r *PersonalizeCreateEventTrackerFuture) Get(ctx workflow.Context) (*personalize.CreateEventTrackerOutput, error) {
	var output personalize.CreateEventTrackerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeCreateFilterFuture struct {
	Future workflow.Future
}

func (r *PersonalizeCreateFilterFuture) Get(ctx workflow.Context) (*personalize.CreateFilterOutput, error) {
	var output personalize.CreateFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeCreateSchemaFuture struct {
	Future workflow.Future
}

func (r *PersonalizeCreateSchemaFuture) Get(ctx workflow.Context) (*personalize.CreateSchemaOutput, error) {
	var output personalize.CreateSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeCreateSolutionFuture struct {
	Future workflow.Future
}

func (r *PersonalizeCreateSolutionFuture) Get(ctx workflow.Context) (*personalize.CreateSolutionOutput, error) {
	var output personalize.CreateSolutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeCreateSolutionVersionFuture struct {
	Future workflow.Future
}

func (r *PersonalizeCreateSolutionVersionFuture) Get(ctx workflow.Context) (*personalize.CreateSolutionVersionOutput, error) {
	var output personalize.CreateSolutionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDeleteCampaignFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDeleteCampaignFuture) Get(ctx workflow.Context) (*personalize.DeleteCampaignOutput, error) {
	var output personalize.DeleteCampaignOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDeleteDatasetFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDeleteDatasetFuture) Get(ctx workflow.Context) (*personalize.DeleteDatasetOutput, error) {
	var output personalize.DeleteDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDeleteDatasetGroupFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDeleteDatasetGroupFuture) Get(ctx workflow.Context) (*personalize.DeleteDatasetGroupOutput, error) {
	var output personalize.DeleteDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDeleteEventTrackerFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDeleteEventTrackerFuture) Get(ctx workflow.Context) (*personalize.DeleteEventTrackerOutput, error) {
	var output personalize.DeleteEventTrackerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDeleteFilterFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDeleteFilterFuture) Get(ctx workflow.Context) (*personalize.DeleteFilterOutput, error) {
	var output personalize.DeleteFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDeleteSchemaFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDeleteSchemaFuture) Get(ctx workflow.Context) (*personalize.DeleteSchemaOutput, error) {
	var output personalize.DeleteSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDeleteSolutionFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDeleteSolutionFuture) Get(ctx workflow.Context) (*personalize.DeleteSolutionOutput, error) {
	var output personalize.DeleteSolutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeAlgorithmFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeAlgorithmFuture) Get(ctx workflow.Context) (*personalize.DescribeAlgorithmOutput, error) {
	var output personalize.DescribeAlgorithmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeBatchInferenceJobFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeBatchInferenceJobFuture) Get(ctx workflow.Context) (*personalize.DescribeBatchInferenceJobOutput, error) {
	var output personalize.DescribeBatchInferenceJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeCampaignFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeCampaignFuture) Get(ctx workflow.Context) (*personalize.DescribeCampaignOutput, error) {
	var output personalize.DescribeCampaignOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeDatasetFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeDatasetFuture) Get(ctx workflow.Context) (*personalize.DescribeDatasetOutput, error) {
	var output personalize.DescribeDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeDatasetGroupFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeDatasetGroupFuture) Get(ctx workflow.Context) (*personalize.DescribeDatasetGroupOutput, error) {
	var output personalize.DescribeDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeDatasetImportJobFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeDatasetImportJobFuture) Get(ctx workflow.Context) (*personalize.DescribeDatasetImportJobOutput, error) {
	var output personalize.DescribeDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeEventTrackerFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeEventTrackerFuture) Get(ctx workflow.Context) (*personalize.DescribeEventTrackerOutput, error) {
	var output personalize.DescribeEventTrackerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeFeatureTransformationFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeFeatureTransformationFuture) Get(ctx workflow.Context) (*personalize.DescribeFeatureTransformationOutput, error) {
	var output personalize.DescribeFeatureTransformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeFilterFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeFilterFuture) Get(ctx workflow.Context) (*personalize.DescribeFilterOutput, error) {
	var output personalize.DescribeFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeRecipeFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeRecipeFuture) Get(ctx workflow.Context) (*personalize.DescribeRecipeOutput, error) {
	var output personalize.DescribeRecipeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeSchemaFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeSchemaFuture) Get(ctx workflow.Context) (*personalize.DescribeSchemaOutput, error) {
	var output personalize.DescribeSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeSolutionFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeSolutionFuture) Get(ctx workflow.Context) (*personalize.DescribeSolutionOutput, error) {
	var output personalize.DescribeSolutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeDescribeSolutionVersionFuture struct {
	Future workflow.Future
}

func (r *PersonalizeDescribeSolutionVersionFuture) Get(ctx workflow.Context) (*personalize.DescribeSolutionVersionOutput, error) {
	var output personalize.DescribeSolutionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeGetSolutionMetricsFuture struct {
	Future workflow.Future
}

func (r *PersonalizeGetSolutionMetricsFuture) Get(ctx workflow.Context) (*personalize.GetSolutionMetricsOutput, error) {
	var output personalize.GetSolutionMetricsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeListBatchInferenceJobsFuture struct {
	Future workflow.Future
}

func (r *PersonalizeListBatchInferenceJobsFuture) Get(ctx workflow.Context) (*personalize.ListBatchInferenceJobsOutput, error) {
	var output personalize.ListBatchInferenceJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeListCampaignsFuture struct {
	Future workflow.Future
}

func (r *PersonalizeListCampaignsFuture) Get(ctx workflow.Context) (*personalize.ListCampaignsOutput, error) {
	var output personalize.ListCampaignsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeListDatasetGroupsFuture struct {
	Future workflow.Future
}

func (r *PersonalizeListDatasetGroupsFuture) Get(ctx workflow.Context) (*personalize.ListDatasetGroupsOutput, error) {
	var output personalize.ListDatasetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeListDatasetImportJobsFuture struct {
	Future workflow.Future
}

func (r *PersonalizeListDatasetImportJobsFuture) Get(ctx workflow.Context) (*personalize.ListDatasetImportJobsOutput, error) {
	var output personalize.ListDatasetImportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeListDatasetsFuture struct {
	Future workflow.Future
}

func (r *PersonalizeListDatasetsFuture) Get(ctx workflow.Context) (*personalize.ListDatasetsOutput, error) {
	var output personalize.ListDatasetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeListEventTrackersFuture struct {
	Future workflow.Future
}

func (r *PersonalizeListEventTrackersFuture) Get(ctx workflow.Context) (*personalize.ListEventTrackersOutput, error) {
	var output personalize.ListEventTrackersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeListFiltersFuture struct {
	Future workflow.Future
}

func (r *PersonalizeListFiltersFuture) Get(ctx workflow.Context) (*personalize.ListFiltersOutput, error) {
	var output personalize.ListFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeListRecipesFuture struct {
	Future workflow.Future
}

func (r *PersonalizeListRecipesFuture) Get(ctx workflow.Context) (*personalize.ListRecipesOutput, error) {
	var output personalize.ListRecipesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeListSchemasFuture struct {
	Future workflow.Future
}

func (r *PersonalizeListSchemasFuture) Get(ctx workflow.Context) (*personalize.ListSchemasOutput, error) {
	var output personalize.ListSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeListSolutionVersionsFuture struct {
	Future workflow.Future
}

func (r *PersonalizeListSolutionVersionsFuture) Get(ctx workflow.Context) (*personalize.ListSolutionVersionsOutput, error) {
	var output personalize.ListSolutionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeListSolutionsFuture struct {
	Future workflow.Future
}

func (r *PersonalizeListSolutionsFuture) Get(ctx workflow.Context) (*personalize.ListSolutionsOutput, error) {
	var output personalize.ListSolutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PersonalizeUpdateCampaignFuture struct {
	Future workflow.Future
}

func (r *PersonalizeUpdateCampaignFuture) Get(ctx workflow.Context) (*personalize.UpdateCampaignOutput, error) {
	var output personalize.UpdateCampaignOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) CreateBatchInferenceJob(ctx workflow.Context, input *personalize.CreateBatchInferenceJobInput) (*personalize.CreateBatchInferenceJobOutput, error) {
	var output personalize.CreateBatchInferenceJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.CreateBatchInferenceJob", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) CreateBatchInferenceJobAsync(ctx workflow.Context, input *personalize.CreateBatchInferenceJobInput) *PersonalizeCreateBatchInferenceJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.CreateBatchInferenceJob", input)
	return &PersonalizeCreateBatchInferenceJobFuture{Future: future}
}

func (a *PersonalizeStub) CreateCampaign(ctx workflow.Context, input *personalize.CreateCampaignInput) (*personalize.CreateCampaignOutput, error) {
	var output personalize.CreateCampaignOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.CreateCampaign", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) CreateCampaignAsync(ctx workflow.Context, input *personalize.CreateCampaignInput) *PersonalizeCreateCampaignFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.CreateCampaign", input)
	return &PersonalizeCreateCampaignFuture{Future: future}
}

func (a *PersonalizeStub) CreateDataset(ctx workflow.Context, input *personalize.CreateDatasetInput) (*personalize.CreateDatasetOutput, error) {
	var output personalize.CreateDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.CreateDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) CreateDatasetAsync(ctx workflow.Context, input *personalize.CreateDatasetInput) *PersonalizeCreateDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.CreateDataset", input)
	return &PersonalizeCreateDatasetFuture{Future: future}
}

func (a *PersonalizeStub) CreateDatasetGroup(ctx workflow.Context, input *personalize.CreateDatasetGroupInput) (*personalize.CreateDatasetGroupOutput, error) {
	var output personalize.CreateDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.CreateDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) CreateDatasetGroupAsync(ctx workflow.Context, input *personalize.CreateDatasetGroupInput) *PersonalizeCreateDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.CreateDatasetGroup", input)
	return &PersonalizeCreateDatasetGroupFuture{Future: future}
}

func (a *PersonalizeStub) CreateDatasetImportJob(ctx workflow.Context, input *personalize.CreateDatasetImportJobInput) (*personalize.CreateDatasetImportJobOutput, error) {
	var output personalize.CreateDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.CreateDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) CreateDatasetImportJobAsync(ctx workflow.Context, input *personalize.CreateDatasetImportJobInput) *PersonalizeCreateDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.CreateDatasetImportJob", input)
	return &PersonalizeCreateDatasetImportJobFuture{Future: future}
}

func (a *PersonalizeStub) CreateEventTracker(ctx workflow.Context, input *personalize.CreateEventTrackerInput) (*personalize.CreateEventTrackerOutput, error) {
	var output personalize.CreateEventTrackerOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.CreateEventTracker", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) CreateEventTrackerAsync(ctx workflow.Context, input *personalize.CreateEventTrackerInput) *PersonalizeCreateEventTrackerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.CreateEventTracker", input)
	return &PersonalizeCreateEventTrackerFuture{Future: future}
}

func (a *PersonalizeStub) CreateFilter(ctx workflow.Context, input *personalize.CreateFilterInput) (*personalize.CreateFilterOutput, error) {
	var output personalize.CreateFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.CreateFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) CreateFilterAsync(ctx workflow.Context, input *personalize.CreateFilterInput) *PersonalizeCreateFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.CreateFilter", input)
	return &PersonalizeCreateFilterFuture{Future: future}
}

func (a *PersonalizeStub) CreateSchema(ctx workflow.Context, input *personalize.CreateSchemaInput) (*personalize.CreateSchemaOutput, error) {
	var output personalize.CreateSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.CreateSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) CreateSchemaAsync(ctx workflow.Context, input *personalize.CreateSchemaInput) *PersonalizeCreateSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.CreateSchema", input)
	return &PersonalizeCreateSchemaFuture{Future: future}
}

func (a *PersonalizeStub) CreateSolution(ctx workflow.Context, input *personalize.CreateSolutionInput) (*personalize.CreateSolutionOutput, error) {
	var output personalize.CreateSolutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.CreateSolution", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) CreateSolutionAsync(ctx workflow.Context, input *personalize.CreateSolutionInput) *PersonalizeCreateSolutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.CreateSolution", input)
	return &PersonalizeCreateSolutionFuture{Future: future}
}

func (a *PersonalizeStub) CreateSolutionVersion(ctx workflow.Context, input *personalize.CreateSolutionVersionInput) (*personalize.CreateSolutionVersionOutput, error) {
	var output personalize.CreateSolutionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.CreateSolutionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) CreateSolutionVersionAsync(ctx workflow.Context, input *personalize.CreateSolutionVersionInput) *PersonalizeCreateSolutionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.CreateSolutionVersion", input)
	return &PersonalizeCreateSolutionVersionFuture{Future: future}
}

func (a *PersonalizeStub) DeleteCampaign(ctx workflow.Context, input *personalize.DeleteCampaignInput) (*personalize.DeleteCampaignOutput, error) {
	var output personalize.DeleteCampaignOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteCampaign", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DeleteCampaignAsync(ctx workflow.Context, input *personalize.DeleteCampaignInput) *PersonalizeDeleteCampaignFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteCampaign", input)
	return &PersonalizeDeleteCampaignFuture{Future: future}
}

func (a *PersonalizeStub) DeleteDataset(ctx workflow.Context, input *personalize.DeleteDatasetInput) (*personalize.DeleteDatasetOutput, error) {
	var output personalize.DeleteDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DeleteDatasetAsync(ctx workflow.Context, input *personalize.DeleteDatasetInput) *PersonalizeDeleteDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteDataset", input)
	return &PersonalizeDeleteDatasetFuture{Future: future}
}

func (a *PersonalizeStub) DeleteDatasetGroup(ctx workflow.Context, input *personalize.DeleteDatasetGroupInput) (*personalize.DeleteDatasetGroupOutput, error) {
	var output personalize.DeleteDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DeleteDatasetGroupAsync(ctx workflow.Context, input *personalize.DeleteDatasetGroupInput) *PersonalizeDeleteDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteDatasetGroup", input)
	return &PersonalizeDeleteDatasetGroupFuture{Future: future}
}

func (a *PersonalizeStub) DeleteEventTracker(ctx workflow.Context, input *personalize.DeleteEventTrackerInput) (*personalize.DeleteEventTrackerOutput, error) {
	var output personalize.DeleteEventTrackerOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteEventTracker", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DeleteEventTrackerAsync(ctx workflow.Context, input *personalize.DeleteEventTrackerInput) *PersonalizeDeleteEventTrackerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteEventTracker", input)
	return &PersonalizeDeleteEventTrackerFuture{Future: future}
}

func (a *PersonalizeStub) DeleteFilter(ctx workflow.Context, input *personalize.DeleteFilterInput) (*personalize.DeleteFilterOutput, error) {
	var output personalize.DeleteFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DeleteFilterAsync(ctx workflow.Context, input *personalize.DeleteFilterInput) *PersonalizeDeleteFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteFilter", input)
	return &PersonalizeDeleteFilterFuture{Future: future}
}

func (a *PersonalizeStub) DeleteSchema(ctx workflow.Context, input *personalize.DeleteSchemaInput) (*personalize.DeleteSchemaOutput, error) {
	var output personalize.DeleteSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DeleteSchemaAsync(ctx workflow.Context, input *personalize.DeleteSchemaInput) *PersonalizeDeleteSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteSchema", input)
	return &PersonalizeDeleteSchemaFuture{Future: future}
}

func (a *PersonalizeStub) DeleteSolution(ctx workflow.Context, input *personalize.DeleteSolutionInput) (*personalize.DeleteSolutionOutput, error) {
	var output personalize.DeleteSolutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteSolution", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DeleteSolutionAsync(ctx workflow.Context, input *personalize.DeleteSolutionInput) *PersonalizeDeleteSolutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DeleteSolution", input)
	return &PersonalizeDeleteSolutionFuture{Future: future}
}

func (a *PersonalizeStub) DescribeAlgorithm(ctx workflow.Context, input *personalize.DescribeAlgorithmInput) (*personalize.DescribeAlgorithmOutput, error) {
	var output personalize.DescribeAlgorithmOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeAlgorithm", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeAlgorithmAsync(ctx workflow.Context, input *personalize.DescribeAlgorithmInput) *PersonalizeDescribeAlgorithmFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeAlgorithm", input)
	return &PersonalizeDescribeAlgorithmFuture{Future: future}
}

func (a *PersonalizeStub) DescribeBatchInferenceJob(ctx workflow.Context, input *personalize.DescribeBatchInferenceJobInput) (*personalize.DescribeBatchInferenceJobOutput, error) {
	var output personalize.DescribeBatchInferenceJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeBatchInferenceJob", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeBatchInferenceJobAsync(ctx workflow.Context, input *personalize.DescribeBatchInferenceJobInput) *PersonalizeDescribeBatchInferenceJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeBatchInferenceJob", input)
	return &PersonalizeDescribeBatchInferenceJobFuture{Future: future}
}

func (a *PersonalizeStub) DescribeCampaign(ctx workflow.Context, input *personalize.DescribeCampaignInput) (*personalize.DescribeCampaignOutput, error) {
	var output personalize.DescribeCampaignOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeCampaign", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeCampaignAsync(ctx workflow.Context, input *personalize.DescribeCampaignInput) *PersonalizeDescribeCampaignFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeCampaign", input)
	return &PersonalizeDescribeCampaignFuture{Future: future}
}

func (a *PersonalizeStub) DescribeDataset(ctx workflow.Context, input *personalize.DescribeDatasetInput) (*personalize.DescribeDatasetOutput, error) {
	var output personalize.DescribeDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeDatasetAsync(ctx workflow.Context, input *personalize.DescribeDatasetInput) *PersonalizeDescribeDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeDataset", input)
	return &PersonalizeDescribeDatasetFuture{Future: future}
}

func (a *PersonalizeStub) DescribeDatasetGroup(ctx workflow.Context, input *personalize.DescribeDatasetGroupInput) (*personalize.DescribeDatasetGroupOutput, error) {
	var output personalize.DescribeDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeDatasetGroupAsync(ctx workflow.Context, input *personalize.DescribeDatasetGroupInput) *PersonalizeDescribeDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeDatasetGroup", input)
	return &PersonalizeDescribeDatasetGroupFuture{Future: future}
}

func (a *PersonalizeStub) DescribeDatasetImportJob(ctx workflow.Context, input *personalize.DescribeDatasetImportJobInput) (*personalize.DescribeDatasetImportJobOutput, error) {
	var output personalize.DescribeDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeDatasetImportJobAsync(ctx workflow.Context, input *personalize.DescribeDatasetImportJobInput) *PersonalizeDescribeDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeDatasetImportJob", input)
	return &PersonalizeDescribeDatasetImportJobFuture{Future: future}
}

func (a *PersonalizeStub) DescribeEventTracker(ctx workflow.Context, input *personalize.DescribeEventTrackerInput) (*personalize.DescribeEventTrackerOutput, error) {
	var output personalize.DescribeEventTrackerOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeEventTracker", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeEventTrackerAsync(ctx workflow.Context, input *personalize.DescribeEventTrackerInput) *PersonalizeDescribeEventTrackerFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeEventTracker", input)
	return &PersonalizeDescribeEventTrackerFuture{Future: future}
}

func (a *PersonalizeStub) DescribeFeatureTransformation(ctx workflow.Context, input *personalize.DescribeFeatureTransformationInput) (*personalize.DescribeFeatureTransformationOutput, error) {
	var output personalize.DescribeFeatureTransformationOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeFeatureTransformation", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeFeatureTransformationAsync(ctx workflow.Context, input *personalize.DescribeFeatureTransformationInput) *PersonalizeDescribeFeatureTransformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeFeatureTransformation", input)
	return &PersonalizeDescribeFeatureTransformationFuture{Future: future}
}

func (a *PersonalizeStub) DescribeFilter(ctx workflow.Context, input *personalize.DescribeFilterInput) (*personalize.DescribeFilterOutput, error) {
	var output personalize.DescribeFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeFilterAsync(ctx workflow.Context, input *personalize.DescribeFilterInput) *PersonalizeDescribeFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeFilter", input)
	return &PersonalizeDescribeFilterFuture{Future: future}
}

func (a *PersonalizeStub) DescribeRecipe(ctx workflow.Context, input *personalize.DescribeRecipeInput) (*personalize.DescribeRecipeOutput, error) {
	var output personalize.DescribeRecipeOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeRecipe", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeRecipeAsync(ctx workflow.Context, input *personalize.DescribeRecipeInput) *PersonalizeDescribeRecipeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeRecipe", input)
	return &PersonalizeDescribeRecipeFuture{Future: future}
}

func (a *PersonalizeStub) DescribeSchema(ctx workflow.Context, input *personalize.DescribeSchemaInput) (*personalize.DescribeSchemaOutput, error) {
	var output personalize.DescribeSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeSchemaAsync(ctx workflow.Context, input *personalize.DescribeSchemaInput) *PersonalizeDescribeSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeSchema", input)
	return &PersonalizeDescribeSchemaFuture{Future: future}
}

func (a *PersonalizeStub) DescribeSolution(ctx workflow.Context, input *personalize.DescribeSolutionInput) (*personalize.DescribeSolutionOutput, error) {
	var output personalize.DescribeSolutionOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeSolution", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeSolutionAsync(ctx workflow.Context, input *personalize.DescribeSolutionInput) *PersonalizeDescribeSolutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeSolution", input)
	return &PersonalizeDescribeSolutionFuture{Future: future}
}

func (a *PersonalizeStub) DescribeSolutionVersion(ctx workflow.Context, input *personalize.DescribeSolutionVersionInput) (*personalize.DescribeSolutionVersionOutput, error) {
	var output personalize.DescribeSolutionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeSolutionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) DescribeSolutionVersionAsync(ctx workflow.Context, input *personalize.DescribeSolutionVersionInput) *PersonalizeDescribeSolutionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.DescribeSolutionVersion", input)
	return &PersonalizeDescribeSolutionVersionFuture{Future: future}
}

func (a *PersonalizeStub) GetSolutionMetrics(ctx workflow.Context, input *personalize.GetSolutionMetricsInput) (*personalize.GetSolutionMetricsOutput, error) {
	var output personalize.GetSolutionMetricsOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.GetSolutionMetrics", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) GetSolutionMetricsAsync(ctx workflow.Context, input *personalize.GetSolutionMetricsInput) *PersonalizeGetSolutionMetricsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.GetSolutionMetrics", input)
	return &PersonalizeGetSolutionMetricsFuture{Future: future}
}

func (a *PersonalizeStub) ListBatchInferenceJobs(ctx workflow.Context, input *personalize.ListBatchInferenceJobsInput) (*personalize.ListBatchInferenceJobsOutput, error) {
	var output personalize.ListBatchInferenceJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.ListBatchInferenceJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) ListBatchInferenceJobsAsync(ctx workflow.Context, input *personalize.ListBatchInferenceJobsInput) *PersonalizeListBatchInferenceJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.ListBatchInferenceJobs", input)
	return &PersonalizeListBatchInferenceJobsFuture{Future: future}
}

func (a *PersonalizeStub) ListCampaigns(ctx workflow.Context, input *personalize.ListCampaignsInput) (*personalize.ListCampaignsOutput, error) {
	var output personalize.ListCampaignsOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.ListCampaigns", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) ListCampaignsAsync(ctx workflow.Context, input *personalize.ListCampaignsInput) *PersonalizeListCampaignsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.ListCampaigns", input)
	return &PersonalizeListCampaignsFuture{Future: future}
}

func (a *PersonalizeStub) ListDatasetGroups(ctx workflow.Context, input *personalize.ListDatasetGroupsInput) (*personalize.ListDatasetGroupsOutput, error) {
	var output personalize.ListDatasetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.ListDatasetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) ListDatasetGroupsAsync(ctx workflow.Context, input *personalize.ListDatasetGroupsInput) *PersonalizeListDatasetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.ListDatasetGroups", input)
	return &PersonalizeListDatasetGroupsFuture{Future: future}
}

func (a *PersonalizeStub) ListDatasetImportJobs(ctx workflow.Context, input *personalize.ListDatasetImportJobsInput) (*personalize.ListDatasetImportJobsOutput, error) {
	var output personalize.ListDatasetImportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.ListDatasetImportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) ListDatasetImportJobsAsync(ctx workflow.Context, input *personalize.ListDatasetImportJobsInput) *PersonalizeListDatasetImportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.ListDatasetImportJobs", input)
	return &PersonalizeListDatasetImportJobsFuture{Future: future}
}

func (a *PersonalizeStub) ListDatasets(ctx workflow.Context, input *personalize.ListDatasetsInput) (*personalize.ListDatasetsOutput, error) {
	var output personalize.ListDatasetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.ListDatasets", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) ListDatasetsAsync(ctx workflow.Context, input *personalize.ListDatasetsInput) *PersonalizeListDatasetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.ListDatasets", input)
	return &PersonalizeListDatasetsFuture{Future: future}
}

func (a *PersonalizeStub) ListEventTrackers(ctx workflow.Context, input *personalize.ListEventTrackersInput) (*personalize.ListEventTrackersOutput, error) {
	var output personalize.ListEventTrackersOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.ListEventTrackers", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) ListEventTrackersAsync(ctx workflow.Context, input *personalize.ListEventTrackersInput) *PersonalizeListEventTrackersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.ListEventTrackers", input)
	return &PersonalizeListEventTrackersFuture{Future: future}
}

func (a *PersonalizeStub) ListFilters(ctx workflow.Context, input *personalize.ListFiltersInput) (*personalize.ListFiltersOutput, error) {
	var output personalize.ListFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.ListFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) ListFiltersAsync(ctx workflow.Context, input *personalize.ListFiltersInput) *PersonalizeListFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.ListFilters", input)
	return &PersonalizeListFiltersFuture{Future: future}
}

func (a *PersonalizeStub) ListRecipes(ctx workflow.Context, input *personalize.ListRecipesInput) (*personalize.ListRecipesOutput, error) {
	var output personalize.ListRecipesOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.ListRecipes", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) ListRecipesAsync(ctx workflow.Context, input *personalize.ListRecipesInput) *PersonalizeListRecipesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.ListRecipes", input)
	return &PersonalizeListRecipesFuture{Future: future}
}

func (a *PersonalizeStub) ListSchemas(ctx workflow.Context, input *personalize.ListSchemasInput) (*personalize.ListSchemasOutput, error) {
	var output personalize.ListSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.ListSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) ListSchemasAsync(ctx workflow.Context, input *personalize.ListSchemasInput) *PersonalizeListSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.ListSchemas", input)
	return &PersonalizeListSchemasFuture{Future: future}
}

func (a *PersonalizeStub) ListSolutionVersions(ctx workflow.Context, input *personalize.ListSolutionVersionsInput) (*personalize.ListSolutionVersionsOutput, error) {
	var output personalize.ListSolutionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.ListSolutionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) ListSolutionVersionsAsync(ctx workflow.Context, input *personalize.ListSolutionVersionsInput) *PersonalizeListSolutionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.ListSolutionVersions", input)
	return &PersonalizeListSolutionVersionsFuture{Future: future}
}

func (a *PersonalizeStub) ListSolutions(ctx workflow.Context, input *personalize.ListSolutionsInput) (*personalize.ListSolutionsOutput, error) {
	var output personalize.ListSolutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.ListSolutions", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) ListSolutionsAsync(ctx workflow.Context, input *personalize.ListSolutionsInput) *PersonalizeListSolutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.ListSolutions", input)
	return &PersonalizeListSolutionsFuture{Future: future}
}

func (a *PersonalizeStub) UpdateCampaign(ctx workflow.Context, input *personalize.UpdateCampaignInput) (*personalize.UpdateCampaignOutput, error) {
	var output personalize.UpdateCampaignOutput
	err := workflow.ExecuteActivity(ctx, "aws.personalize.UpdateCampaign", input).Get(ctx, &output)
	return &output, err
}

func (a *PersonalizeStub) UpdateCampaignAsync(ctx workflow.Context, input *personalize.UpdateCampaignInput) *PersonalizeUpdateCampaignFuture {
	future := workflow.ExecuteActivity(ctx, "aws.personalize.UpdateCampaign", input)
	return &PersonalizeUpdateCampaignFuture{Future: future}
}
