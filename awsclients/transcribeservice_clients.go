// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/transcribeservice"
	"go.temporal.io/sdk/workflow"
)

type TranscribeServiceClient interface {
	CreateLanguageModel(ctx workflow.Context, input *transcribeservice.CreateLanguageModelInput) (*transcribeservice.CreateLanguageModelOutput, error)
	CreateLanguageModelAsync(ctx workflow.Context, input *transcribeservice.CreateLanguageModelInput) *TranscribeserviceCreateLanguageModelFuture

	CreateMedicalVocabulary(ctx workflow.Context, input *transcribeservice.CreateMedicalVocabularyInput) (*transcribeservice.CreateMedicalVocabularyOutput, error)
	CreateMedicalVocabularyAsync(ctx workflow.Context, input *transcribeservice.CreateMedicalVocabularyInput) *TranscribeserviceCreateMedicalVocabularyFuture

	CreateVocabulary(ctx workflow.Context, input *transcribeservice.CreateVocabularyInput) (*transcribeservice.CreateVocabularyOutput, error)
	CreateVocabularyAsync(ctx workflow.Context, input *transcribeservice.CreateVocabularyInput) *TranscribeserviceCreateVocabularyFuture

	CreateVocabularyFilter(ctx workflow.Context, input *transcribeservice.CreateVocabularyFilterInput) (*transcribeservice.CreateVocabularyFilterOutput, error)
	CreateVocabularyFilterAsync(ctx workflow.Context, input *transcribeservice.CreateVocabularyFilterInput) *TranscribeserviceCreateVocabularyFilterFuture

	DeleteLanguageModel(ctx workflow.Context, input *transcribeservice.DeleteLanguageModelInput) (*transcribeservice.DeleteLanguageModelOutput, error)
	DeleteLanguageModelAsync(ctx workflow.Context, input *transcribeservice.DeleteLanguageModelInput) *TranscribeserviceDeleteLanguageModelFuture

	DeleteMedicalTranscriptionJob(ctx workflow.Context, input *transcribeservice.DeleteMedicalTranscriptionJobInput) (*transcribeservice.DeleteMedicalTranscriptionJobOutput, error)
	DeleteMedicalTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.DeleteMedicalTranscriptionJobInput) *TranscribeserviceDeleteMedicalTranscriptionJobFuture

	DeleteMedicalVocabulary(ctx workflow.Context, input *transcribeservice.DeleteMedicalVocabularyInput) (*transcribeservice.DeleteMedicalVocabularyOutput, error)
	DeleteMedicalVocabularyAsync(ctx workflow.Context, input *transcribeservice.DeleteMedicalVocabularyInput) *TranscribeserviceDeleteMedicalVocabularyFuture

	DeleteTranscriptionJob(ctx workflow.Context, input *transcribeservice.DeleteTranscriptionJobInput) (*transcribeservice.DeleteTranscriptionJobOutput, error)
	DeleteTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.DeleteTranscriptionJobInput) *TranscribeserviceDeleteTranscriptionJobFuture

	DeleteVocabulary(ctx workflow.Context, input *transcribeservice.DeleteVocabularyInput) (*transcribeservice.DeleteVocabularyOutput, error)
	DeleteVocabularyAsync(ctx workflow.Context, input *transcribeservice.DeleteVocabularyInput) *TranscribeserviceDeleteVocabularyFuture

	DeleteVocabularyFilter(ctx workflow.Context, input *transcribeservice.DeleteVocabularyFilterInput) (*transcribeservice.DeleteVocabularyFilterOutput, error)
	DeleteVocabularyFilterAsync(ctx workflow.Context, input *transcribeservice.DeleteVocabularyFilterInput) *TranscribeserviceDeleteVocabularyFilterFuture

	DescribeLanguageModel(ctx workflow.Context, input *transcribeservice.DescribeLanguageModelInput) (*transcribeservice.DescribeLanguageModelOutput, error)
	DescribeLanguageModelAsync(ctx workflow.Context, input *transcribeservice.DescribeLanguageModelInput) *TranscribeserviceDescribeLanguageModelFuture

	GetMedicalTranscriptionJob(ctx workflow.Context, input *transcribeservice.GetMedicalTranscriptionJobInput) (*transcribeservice.GetMedicalTranscriptionJobOutput, error)
	GetMedicalTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.GetMedicalTranscriptionJobInput) *TranscribeserviceGetMedicalTranscriptionJobFuture

	GetMedicalVocabulary(ctx workflow.Context, input *transcribeservice.GetMedicalVocabularyInput) (*transcribeservice.GetMedicalVocabularyOutput, error)
	GetMedicalVocabularyAsync(ctx workflow.Context, input *transcribeservice.GetMedicalVocabularyInput) *TranscribeserviceGetMedicalVocabularyFuture

	GetTranscriptionJob(ctx workflow.Context, input *transcribeservice.GetTranscriptionJobInput) (*transcribeservice.GetTranscriptionJobOutput, error)
	GetTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.GetTranscriptionJobInput) *TranscribeserviceGetTranscriptionJobFuture

	GetVocabulary(ctx workflow.Context, input *transcribeservice.GetVocabularyInput) (*transcribeservice.GetVocabularyOutput, error)
	GetVocabularyAsync(ctx workflow.Context, input *transcribeservice.GetVocabularyInput) *TranscribeserviceGetVocabularyFuture

	GetVocabularyFilter(ctx workflow.Context, input *transcribeservice.GetVocabularyFilterInput) (*transcribeservice.GetVocabularyFilterOutput, error)
	GetVocabularyFilterAsync(ctx workflow.Context, input *transcribeservice.GetVocabularyFilterInput) *TranscribeserviceGetVocabularyFilterFuture

	ListLanguageModels(ctx workflow.Context, input *transcribeservice.ListLanguageModelsInput) (*transcribeservice.ListLanguageModelsOutput, error)
	ListLanguageModelsAsync(ctx workflow.Context, input *transcribeservice.ListLanguageModelsInput) *TranscribeserviceListLanguageModelsFuture

	ListMedicalTranscriptionJobs(ctx workflow.Context, input *transcribeservice.ListMedicalTranscriptionJobsInput) (*transcribeservice.ListMedicalTranscriptionJobsOutput, error)
	ListMedicalTranscriptionJobsAsync(ctx workflow.Context, input *transcribeservice.ListMedicalTranscriptionJobsInput) *TranscribeserviceListMedicalTranscriptionJobsFuture

	ListMedicalVocabularies(ctx workflow.Context, input *transcribeservice.ListMedicalVocabulariesInput) (*transcribeservice.ListMedicalVocabulariesOutput, error)
	ListMedicalVocabulariesAsync(ctx workflow.Context, input *transcribeservice.ListMedicalVocabulariesInput) *TranscribeserviceListMedicalVocabulariesFuture

	ListTranscriptionJobs(ctx workflow.Context, input *transcribeservice.ListTranscriptionJobsInput) (*transcribeservice.ListTranscriptionJobsOutput, error)
	ListTranscriptionJobsAsync(ctx workflow.Context, input *transcribeservice.ListTranscriptionJobsInput) *TranscribeserviceListTranscriptionJobsFuture

	ListVocabularies(ctx workflow.Context, input *transcribeservice.ListVocabulariesInput) (*transcribeservice.ListVocabulariesOutput, error)
	ListVocabulariesAsync(ctx workflow.Context, input *transcribeservice.ListVocabulariesInput) *TranscribeserviceListVocabulariesFuture

	ListVocabularyFilters(ctx workflow.Context, input *transcribeservice.ListVocabularyFiltersInput) (*transcribeservice.ListVocabularyFiltersOutput, error)
	ListVocabularyFiltersAsync(ctx workflow.Context, input *transcribeservice.ListVocabularyFiltersInput) *TranscribeserviceListVocabularyFiltersFuture

	StartMedicalTranscriptionJob(ctx workflow.Context, input *transcribeservice.StartMedicalTranscriptionJobInput) (*transcribeservice.StartMedicalTranscriptionJobOutput, error)
	StartMedicalTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.StartMedicalTranscriptionJobInput) *TranscribeserviceStartMedicalTranscriptionJobFuture

	StartTranscriptionJob(ctx workflow.Context, input *transcribeservice.StartTranscriptionJobInput) (*transcribeservice.StartTranscriptionJobOutput, error)
	StartTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.StartTranscriptionJobInput) *TranscribeserviceStartTranscriptionJobFuture

	UpdateMedicalVocabulary(ctx workflow.Context, input *transcribeservice.UpdateMedicalVocabularyInput) (*transcribeservice.UpdateMedicalVocabularyOutput, error)
	UpdateMedicalVocabularyAsync(ctx workflow.Context, input *transcribeservice.UpdateMedicalVocabularyInput) *TranscribeserviceUpdateMedicalVocabularyFuture

	UpdateVocabulary(ctx workflow.Context, input *transcribeservice.UpdateVocabularyInput) (*transcribeservice.UpdateVocabularyOutput, error)
	UpdateVocabularyAsync(ctx workflow.Context, input *transcribeservice.UpdateVocabularyInput) *TranscribeserviceUpdateVocabularyFuture

	UpdateVocabularyFilter(ctx workflow.Context, input *transcribeservice.UpdateVocabularyFilterInput) (*transcribeservice.UpdateVocabularyFilterOutput, error)
	UpdateVocabularyFilterAsync(ctx workflow.Context, input *transcribeservice.UpdateVocabularyFilterInput) *TranscribeserviceUpdateVocabularyFilterFuture
}

type TranscribeServiceStub struct{}

func NewTranscribeServiceStub() TranscribeServiceClient {
	return &TranscribeServiceStub{}
}

type TranscribeserviceCreateLanguageModelFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceCreateLanguageModelFuture) Get(ctx workflow.Context) (*transcribeservice.CreateLanguageModelOutput, error) {
	var output transcribeservice.CreateLanguageModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceCreateMedicalVocabularyFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceCreateMedicalVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.CreateMedicalVocabularyOutput, error) {
	var output transcribeservice.CreateMedicalVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceCreateVocabularyFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceCreateVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.CreateVocabularyOutput, error) {
	var output transcribeservice.CreateVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceCreateVocabularyFilterFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceCreateVocabularyFilterFuture) Get(ctx workflow.Context) (*transcribeservice.CreateVocabularyFilterOutput, error) {
	var output transcribeservice.CreateVocabularyFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceDeleteLanguageModelFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceDeleteLanguageModelFuture) Get(ctx workflow.Context) (*transcribeservice.DeleteLanguageModelOutput, error) {
	var output transcribeservice.DeleteLanguageModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceDeleteMedicalTranscriptionJobFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceDeleteMedicalTranscriptionJobFuture) Get(ctx workflow.Context) (*transcribeservice.DeleteMedicalTranscriptionJobOutput, error) {
	var output transcribeservice.DeleteMedicalTranscriptionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceDeleteMedicalVocabularyFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceDeleteMedicalVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.DeleteMedicalVocabularyOutput, error) {
	var output transcribeservice.DeleteMedicalVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceDeleteTranscriptionJobFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceDeleteTranscriptionJobFuture) Get(ctx workflow.Context) (*transcribeservice.DeleteTranscriptionJobOutput, error) {
	var output transcribeservice.DeleteTranscriptionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceDeleteVocabularyFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceDeleteVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.DeleteVocabularyOutput, error) {
	var output transcribeservice.DeleteVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceDeleteVocabularyFilterFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceDeleteVocabularyFilterFuture) Get(ctx workflow.Context) (*transcribeservice.DeleteVocabularyFilterOutput, error) {
	var output transcribeservice.DeleteVocabularyFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceDescribeLanguageModelFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceDescribeLanguageModelFuture) Get(ctx workflow.Context) (*transcribeservice.DescribeLanguageModelOutput, error) {
	var output transcribeservice.DescribeLanguageModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceGetMedicalTranscriptionJobFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceGetMedicalTranscriptionJobFuture) Get(ctx workflow.Context) (*transcribeservice.GetMedicalTranscriptionJobOutput, error) {
	var output transcribeservice.GetMedicalTranscriptionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceGetMedicalVocabularyFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceGetMedicalVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.GetMedicalVocabularyOutput, error) {
	var output transcribeservice.GetMedicalVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceGetTranscriptionJobFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceGetTranscriptionJobFuture) Get(ctx workflow.Context) (*transcribeservice.GetTranscriptionJobOutput, error) {
	var output transcribeservice.GetTranscriptionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceGetVocabularyFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceGetVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.GetVocabularyOutput, error) {
	var output transcribeservice.GetVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceGetVocabularyFilterFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceGetVocabularyFilterFuture) Get(ctx workflow.Context) (*transcribeservice.GetVocabularyFilterOutput, error) {
	var output transcribeservice.GetVocabularyFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceListLanguageModelsFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceListLanguageModelsFuture) Get(ctx workflow.Context) (*transcribeservice.ListLanguageModelsOutput, error) {
	var output transcribeservice.ListLanguageModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceListMedicalTranscriptionJobsFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceListMedicalTranscriptionJobsFuture) Get(ctx workflow.Context) (*transcribeservice.ListMedicalTranscriptionJobsOutput, error) {
	var output transcribeservice.ListMedicalTranscriptionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceListMedicalVocabulariesFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceListMedicalVocabulariesFuture) Get(ctx workflow.Context) (*transcribeservice.ListMedicalVocabulariesOutput, error) {
	var output transcribeservice.ListMedicalVocabulariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceListTranscriptionJobsFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceListTranscriptionJobsFuture) Get(ctx workflow.Context) (*transcribeservice.ListTranscriptionJobsOutput, error) {
	var output transcribeservice.ListTranscriptionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceListVocabulariesFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceListVocabulariesFuture) Get(ctx workflow.Context) (*transcribeservice.ListVocabulariesOutput, error) {
	var output transcribeservice.ListVocabulariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceListVocabularyFiltersFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceListVocabularyFiltersFuture) Get(ctx workflow.Context) (*transcribeservice.ListVocabularyFiltersOutput, error) {
	var output transcribeservice.ListVocabularyFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceStartMedicalTranscriptionJobFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceStartMedicalTranscriptionJobFuture) Get(ctx workflow.Context) (*transcribeservice.StartMedicalTranscriptionJobOutput, error) {
	var output transcribeservice.StartMedicalTranscriptionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceStartTranscriptionJobFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceStartTranscriptionJobFuture) Get(ctx workflow.Context) (*transcribeservice.StartTranscriptionJobOutput, error) {
	var output transcribeservice.StartTranscriptionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceUpdateMedicalVocabularyFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceUpdateMedicalVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.UpdateMedicalVocabularyOutput, error) {
	var output transcribeservice.UpdateMedicalVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceUpdateVocabularyFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceUpdateVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.UpdateVocabularyOutput, error) {
	var output transcribeservice.UpdateVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TranscribeserviceUpdateVocabularyFilterFuture struct {
	Future workflow.Future
}

func (r *TranscribeserviceUpdateVocabularyFilterFuture) Get(ctx workflow.Context) (*transcribeservice.UpdateVocabularyFilterOutput, error) {
	var output transcribeservice.UpdateVocabularyFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) CreateLanguageModel(ctx workflow.Context, input *transcribeservice.CreateLanguageModelInput) (*transcribeservice.CreateLanguageModelOutput, error) {
	var output transcribeservice.CreateLanguageModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.CreateLanguageModel", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) CreateLanguageModelAsync(ctx workflow.Context, input *transcribeservice.CreateLanguageModelInput) *TranscribeserviceCreateLanguageModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.CreateLanguageModel", input)
	return &TranscribeserviceCreateLanguageModelFuture{Future: future}
}

func (a *TranscribeServiceStub) CreateMedicalVocabulary(ctx workflow.Context, input *transcribeservice.CreateMedicalVocabularyInput) (*transcribeservice.CreateMedicalVocabularyOutput, error) {
	var output transcribeservice.CreateMedicalVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.CreateMedicalVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) CreateMedicalVocabularyAsync(ctx workflow.Context, input *transcribeservice.CreateMedicalVocabularyInput) *TranscribeserviceCreateMedicalVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.CreateMedicalVocabulary", input)
	return &TranscribeserviceCreateMedicalVocabularyFuture{Future: future}
}

func (a *TranscribeServiceStub) CreateVocabulary(ctx workflow.Context, input *transcribeservice.CreateVocabularyInput) (*transcribeservice.CreateVocabularyOutput, error) {
	var output transcribeservice.CreateVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.CreateVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) CreateVocabularyAsync(ctx workflow.Context, input *transcribeservice.CreateVocabularyInput) *TranscribeserviceCreateVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.CreateVocabulary", input)
	return &TranscribeserviceCreateVocabularyFuture{Future: future}
}

func (a *TranscribeServiceStub) CreateVocabularyFilter(ctx workflow.Context, input *transcribeservice.CreateVocabularyFilterInput) (*transcribeservice.CreateVocabularyFilterOutput, error) {
	var output transcribeservice.CreateVocabularyFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.CreateVocabularyFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) CreateVocabularyFilterAsync(ctx workflow.Context, input *transcribeservice.CreateVocabularyFilterInput) *TranscribeserviceCreateVocabularyFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.CreateVocabularyFilter", input)
	return &TranscribeserviceCreateVocabularyFilterFuture{Future: future}
}

func (a *TranscribeServiceStub) DeleteLanguageModel(ctx workflow.Context, input *transcribeservice.DeleteLanguageModelInput) (*transcribeservice.DeleteLanguageModelOutput, error) {
	var output transcribeservice.DeleteLanguageModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DeleteLanguageModel", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) DeleteLanguageModelAsync(ctx workflow.Context, input *transcribeservice.DeleteLanguageModelInput) *TranscribeserviceDeleteLanguageModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DeleteLanguageModel", input)
	return &TranscribeserviceDeleteLanguageModelFuture{Future: future}
}

func (a *TranscribeServiceStub) DeleteMedicalTranscriptionJob(ctx workflow.Context, input *transcribeservice.DeleteMedicalTranscriptionJobInput) (*transcribeservice.DeleteMedicalTranscriptionJobOutput, error) {
	var output transcribeservice.DeleteMedicalTranscriptionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DeleteMedicalTranscriptionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) DeleteMedicalTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.DeleteMedicalTranscriptionJobInput) *TranscribeserviceDeleteMedicalTranscriptionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DeleteMedicalTranscriptionJob", input)
	return &TranscribeserviceDeleteMedicalTranscriptionJobFuture{Future: future}
}

func (a *TranscribeServiceStub) DeleteMedicalVocabulary(ctx workflow.Context, input *transcribeservice.DeleteMedicalVocabularyInput) (*transcribeservice.DeleteMedicalVocabularyOutput, error) {
	var output transcribeservice.DeleteMedicalVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DeleteMedicalVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) DeleteMedicalVocabularyAsync(ctx workflow.Context, input *transcribeservice.DeleteMedicalVocabularyInput) *TranscribeserviceDeleteMedicalVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DeleteMedicalVocabulary", input)
	return &TranscribeserviceDeleteMedicalVocabularyFuture{Future: future}
}

func (a *TranscribeServiceStub) DeleteTranscriptionJob(ctx workflow.Context, input *transcribeservice.DeleteTranscriptionJobInput) (*transcribeservice.DeleteTranscriptionJobOutput, error) {
	var output transcribeservice.DeleteTranscriptionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DeleteTranscriptionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) DeleteTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.DeleteTranscriptionJobInput) *TranscribeserviceDeleteTranscriptionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DeleteTranscriptionJob", input)
	return &TranscribeserviceDeleteTranscriptionJobFuture{Future: future}
}

func (a *TranscribeServiceStub) DeleteVocabulary(ctx workflow.Context, input *transcribeservice.DeleteVocabularyInput) (*transcribeservice.DeleteVocabularyOutput, error) {
	var output transcribeservice.DeleteVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DeleteVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) DeleteVocabularyAsync(ctx workflow.Context, input *transcribeservice.DeleteVocabularyInput) *TranscribeserviceDeleteVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DeleteVocabulary", input)
	return &TranscribeserviceDeleteVocabularyFuture{Future: future}
}

func (a *TranscribeServiceStub) DeleteVocabularyFilter(ctx workflow.Context, input *transcribeservice.DeleteVocabularyFilterInput) (*transcribeservice.DeleteVocabularyFilterOutput, error) {
	var output transcribeservice.DeleteVocabularyFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DeleteVocabularyFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) DeleteVocabularyFilterAsync(ctx workflow.Context, input *transcribeservice.DeleteVocabularyFilterInput) *TranscribeserviceDeleteVocabularyFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DeleteVocabularyFilter", input)
	return &TranscribeserviceDeleteVocabularyFilterFuture{Future: future}
}

func (a *TranscribeServiceStub) DescribeLanguageModel(ctx workflow.Context, input *transcribeservice.DescribeLanguageModelInput) (*transcribeservice.DescribeLanguageModelOutput, error) {
	var output transcribeservice.DescribeLanguageModelOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DescribeLanguageModel", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) DescribeLanguageModelAsync(ctx workflow.Context, input *transcribeservice.DescribeLanguageModelInput) *TranscribeserviceDescribeLanguageModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.DescribeLanguageModel", input)
	return &TranscribeserviceDescribeLanguageModelFuture{Future: future}
}

func (a *TranscribeServiceStub) GetMedicalTranscriptionJob(ctx workflow.Context, input *transcribeservice.GetMedicalTranscriptionJobInput) (*transcribeservice.GetMedicalTranscriptionJobOutput, error) {
	var output transcribeservice.GetMedicalTranscriptionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.GetMedicalTranscriptionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) GetMedicalTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.GetMedicalTranscriptionJobInput) *TranscribeserviceGetMedicalTranscriptionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.GetMedicalTranscriptionJob", input)
	return &TranscribeserviceGetMedicalTranscriptionJobFuture{Future: future}
}

func (a *TranscribeServiceStub) GetMedicalVocabulary(ctx workflow.Context, input *transcribeservice.GetMedicalVocabularyInput) (*transcribeservice.GetMedicalVocabularyOutput, error) {
	var output transcribeservice.GetMedicalVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.GetMedicalVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) GetMedicalVocabularyAsync(ctx workflow.Context, input *transcribeservice.GetMedicalVocabularyInput) *TranscribeserviceGetMedicalVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.GetMedicalVocabulary", input)
	return &TranscribeserviceGetMedicalVocabularyFuture{Future: future}
}

func (a *TranscribeServiceStub) GetTranscriptionJob(ctx workflow.Context, input *transcribeservice.GetTranscriptionJobInput) (*transcribeservice.GetTranscriptionJobOutput, error) {
	var output transcribeservice.GetTranscriptionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.GetTranscriptionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) GetTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.GetTranscriptionJobInput) *TranscribeserviceGetTranscriptionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.GetTranscriptionJob", input)
	return &TranscribeserviceGetTranscriptionJobFuture{Future: future}
}

func (a *TranscribeServiceStub) GetVocabulary(ctx workflow.Context, input *transcribeservice.GetVocabularyInput) (*transcribeservice.GetVocabularyOutput, error) {
	var output transcribeservice.GetVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.GetVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) GetVocabularyAsync(ctx workflow.Context, input *transcribeservice.GetVocabularyInput) *TranscribeserviceGetVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.GetVocabulary", input)
	return &TranscribeserviceGetVocabularyFuture{Future: future}
}

func (a *TranscribeServiceStub) GetVocabularyFilter(ctx workflow.Context, input *transcribeservice.GetVocabularyFilterInput) (*transcribeservice.GetVocabularyFilterOutput, error) {
	var output transcribeservice.GetVocabularyFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.GetVocabularyFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) GetVocabularyFilterAsync(ctx workflow.Context, input *transcribeservice.GetVocabularyFilterInput) *TranscribeserviceGetVocabularyFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.GetVocabularyFilter", input)
	return &TranscribeserviceGetVocabularyFilterFuture{Future: future}
}

func (a *TranscribeServiceStub) ListLanguageModels(ctx workflow.Context, input *transcribeservice.ListLanguageModelsInput) (*transcribeservice.ListLanguageModelsOutput, error) {
	var output transcribeservice.ListLanguageModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.ListLanguageModels", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) ListLanguageModelsAsync(ctx workflow.Context, input *transcribeservice.ListLanguageModelsInput) *TranscribeserviceListLanguageModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.ListLanguageModels", input)
	return &TranscribeserviceListLanguageModelsFuture{Future: future}
}

func (a *TranscribeServiceStub) ListMedicalTranscriptionJobs(ctx workflow.Context, input *transcribeservice.ListMedicalTranscriptionJobsInput) (*transcribeservice.ListMedicalTranscriptionJobsOutput, error) {
	var output transcribeservice.ListMedicalTranscriptionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.ListMedicalTranscriptionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) ListMedicalTranscriptionJobsAsync(ctx workflow.Context, input *transcribeservice.ListMedicalTranscriptionJobsInput) *TranscribeserviceListMedicalTranscriptionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.ListMedicalTranscriptionJobs", input)
	return &TranscribeserviceListMedicalTranscriptionJobsFuture{Future: future}
}

func (a *TranscribeServiceStub) ListMedicalVocabularies(ctx workflow.Context, input *transcribeservice.ListMedicalVocabulariesInput) (*transcribeservice.ListMedicalVocabulariesOutput, error) {
	var output transcribeservice.ListMedicalVocabulariesOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.ListMedicalVocabularies", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) ListMedicalVocabulariesAsync(ctx workflow.Context, input *transcribeservice.ListMedicalVocabulariesInput) *TranscribeserviceListMedicalVocabulariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.ListMedicalVocabularies", input)
	return &TranscribeserviceListMedicalVocabulariesFuture{Future: future}
}

func (a *TranscribeServiceStub) ListTranscriptionJobs(ctx workflow.Context, input *transcribeservice.ListTranscriptionJobsInput) (*transcribeservice.ListTranscriptionJobsOutput, error) {
	var output transcribeservice.ListTranscriptionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.ListTranscriptionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) ListTranscriptionJobsAsync(ctx workflow.Context, input *transcribeservice.ListTranscriptionJobsInput) *TranscribeserviceListTranscriptionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.ListTranscriptionJobs", input)
	return &TranscribeserviceListTranscriptionJobsFuture{Future: future}
}

func (a *TranscribeServiceStub) ListVocabularies(ctx workflow.Context, input *transcribeservice.ListVocabulariesInput) (*transcribeservice.ListVocabulariesOutput, error) {
	var output transcribeservice.ListVocabulariesOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.ListVocabularies", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) ListVocabulariesAsync(ctx workflow.Context, input *transcribeservice.ListVocabulariesInput) *TranscribeserviceListVocabulariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.ListVocabularies", input)
	return &TranscribeserviceListVocabulariesFuture{Future: future}
}

func (a *TranscribeServiceStub) ListVocabularyFilters(ctx workflow.Context, input *transcribeservice.ListVocabularyFiltersInput) (*transcribeservice.ListVocabularyFiltersOutput, error) {
	var output transcribeservice.ListVocabularyFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.ListVocabularyFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) ListVocabularyFiltersAsync(ctx workflow.Context, input *transcribeservice.ListVocabularyFiltersInput) *TranscribeserviceListVocabularyFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.ListVocabularyFilters", input)
	return &TranscribeserviceListVocabularyFiltersFuture{Future: future}
}

func (a *TranscribeServiceStub) StartMedicalTranscriptionJob(ctx workflow.Context, input *transcribeservice.StartMedicalTranscriptionJobInput) (*transcribeservice.StartMedicalTranscriptionJobOutput, error) {
	var output transcribeservice.StartMedicalTranscriptionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.StartMedicalTranscriptionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) StartMedicalTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.StartMedicalTranscriptionJobInput) *TranscribeserviceStartMedicalTranscriptionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.StartMedicalTranscriptionJob", input)
	return &TranscribeserviceStartMedicalTranscriptionJobFuture{Future: future}
}

func (a *TranscribeServiceStub) StartTranscriptionJob(ctx workflow.Context, input *transcribeservice.StartTranscriptionJobInput) (*transcribeservice.StartTranscriptionJobOutput, error) {
	var output transcribeservice.StartTranscriptionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.StartTranscriptionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) StartTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.StartTranscriptionJobInput) *TranscribeserviceStartTranscriptionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.StartTranscriptionJob", input)
	return &TranscribeserviceStartTranscriptionJobFuture{Future: future}
}

func (a *TranscribeServiceStub) UpdateMedicalVocabulary(ctx workflow.Context, input *transcribeservice.UpdateMedicalVocabularyInput) (*transcribeservice.UpdateMedicalVocabularyOutput, error) {
	var output transcribeservice.UpdateMedicalVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.UpdateMedicalVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) UpdateMedicalVocabularyAsync(ctx workflow.Context, input *transcribeservice.UpdateMedicalVocabularyInput) *TranscribeserviceUpdateMedicalVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.UpdateMedicalVocabulary", input)
	return &TranscribeserviceUpdateMedicalVocabularyFuture{Future: future}
}

func (a *TranscribeServiceStub) UpdateVocabulary(ctx workflow.Context, input *transcribeservice.UpdateVocabularyInput) (*transcribeservice.UpdateVocabularyOutput, error) {
	var output transcribeservice.UpdateVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.UpdateVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) UpdateVocabularyAsync(ctx workflow.Context, input *transcribeservice.UpdateVocabularyInput) *TranscribeserviceUpdateVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.UpdateVocabulary", input)
	return &TranscribeserviceUpdateVocabularyFuture{Future: future}
}

func (a *TranscribeServiceStub) UpdateVocabularyFilter(ctx workflow.Context, input *transcribeservice.UpdateVocabularyFilterInput) (*transcribeservice.UpdateVocabularyFilterOutput, error) {
	var output transcribeservice.UpdateVocabularyFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws.transcribeservice.UpdateVocabularyFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *TranscribeServiceStub) UpdateVocabularyFilterAsync(ctx workflow.Context, input *transcribeservice.UpdateVocabularyFilterInput) *TranscribeserviceUpdateVocabularyFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.transcribeservice.UpdateVocabularyFilter", input)
	return &TranscribeserviceUpdateVocabularyFilterFuture{Future: future}
}
