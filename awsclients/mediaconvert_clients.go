// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/mediaconvert"
	"go.temporal.io/sdk/workflow"
)

type MediaConvertClient interface {
	AssociateCertificate(ctx workflow.Context, input *mediaconvert.AssociateCertificateInput) (*mediaconvert.AssociateCertificateOutput, error)
	AssociateCertificateAsync(ctx workflow.Context, input *mediaconvert.AssociateCertificateInput) *MediaconvertAssociateCertificateFuture

	CancelJob(ctx workflow.Context, input *mediaconvert.CancelJobInput) (*mediaconvert.CancelJobOutput, error)
	CancelJobAsync(ctx workflow.Context, input *mediaconvert.CancelJobInput) *MediaconvertCancelJobFuture

	CreateJob(ctx workflow.Context, input *mediaconvert.CreateJobInput) (*mediaconvert.CreateJobOutput, error)
	CreateJobAsync(ctx workflow.Context, input *mediaconvert.CreateJobInput) *MediaconvertCreateJobFuture

	CreateJobTemplate(ctx workflow.Context, input *mediaconvert.CreateJobTemplateInput) (*mediaconvert.CreateJobTemplateOutput, error)
	CreateJobTemplateAsync(ctx workflow.Context, input *mediaconvert.CreateJobTemplateInput) *MediaconvertCreateJobTemplateFuture

	CreatePreset(ctx workflow.Context, input *mediaconvert.CreatePresetInput) (*mediaconvert.CreatePresetOutput, error)
	CreatePresetAsync(ctx workflow.Context, input *mediaconvert.CreatePresetInput) *MediaconvertCreatePresetFuture

	CreateQueue(ctx workflow.Context, input *mediaconvert.CreateQueueInput) (*mediaconvert.CreateQueueOutput, error)
	CreateQueueAsync(ctx workflow.Context, input *mediaconvert.CreateQueueInput) *MediaconvertCreateQueueFuture

	DeleteJobTemplate(ctx workflow.Context, input *mediaconvert.DeleteJobTemplateInput) (*mediaconvert.DeleteJobTemplateOutput, error)
	DeleteJobTemplateAsync(ctx workflow.Context, input *mediaconvert.DeleteJobTemplateInput) *MediaconvertDeleteJobTemplateFuture

	DeletePreset(ctx workflow.Context, input *mediaconvert.DeletePresetInput) (*mediaconvert.DeletePresetOutput, error)
	DeletePresetAsync(ctx workflow.Context, input *mediaconvert.DeletePresetInput) *MediaconvertDeletePresetFuture

	DeleteQueue(ctx workflow.Context, input *mediaconvert.DeleteQueueInput) (*mediaconvert.DeleteQueueOutput, error)
	DeleteQueueAsync(ctx workflow.Context, input *mediaconvert.DeleteQueueInput) *MediaconvertDeleteQueueFuture

	DescribeEndpoints(ctx workflow.Context, input *mediaconvert.DescribeEndpointsInput) (*mediaconvert.DescribeEndpointsOutput, error)
	DescribeEndpointsAsync(ctx workflow.Context, input *mediaconvert.DescribeEndpointsInput) *MediaconvertDescribeEndpointsFuture

	DisassociateCertificate(ctx workflow.Context, input *mediaconvert.DisassociateCertificateInput) (*mediaconvert.DisassociateCertificateOutput, error)
	DisassociateCertificateAsync(ctx workflow.Context, input *mediaconvert.DisassociateCertificateInput) *MediaconvertDisassociateCertificateFuture

	GetJob(ctx workflow.Context, input *mediaconvert.GetJobInput) (*mediaconvert.GetJobOutput, error)
	GetJobAsync(ctx workflow.Context, input *mediaconvert.GetJobInput) *MediaconvertGetJobFuture

	GetJobTemplate(ctx workflow.Context, input *mediaconvert.GetJobTemplateInput) (*mediaconvert.GetJobTemplateOutput, error)
	GetJobTemplateAsync(ctx workflow.Context, input *mediaconvert.GetJobTemplateInput) *MediaconvertGetJobTemplateFuture

	GetPreset(ctx workflow.Context, input *mediaconvert.GetPresetInput) (*mediaconvert.GetPresetOutput, error)
	GetPresetAsync(ctx workflow.Context, input *mediaconvert.GetPresetInput) *MediaconvertGetPresetFuture

	GetQueue(ctx workflow.Context, input *mediaconvert.GetQueueInput) (*mediaconvert.GetQueueOutput, error)
	GetQueueAsync(ctx workflow.Context, input *mediaconvert.GetQueueInput) *MediaconvertGetQueueFuture

	ListJobTemplates(ctx workflow.Context, input *mediaconvert.ListJobTemplatesInput) (*mediaconvert.ListJobTemplatesOutput, error)
	ListJobTemplatesAsync(ctx workflow.Context, input *mediaconvert.ListJobTemplatesInput) *MediaconvertListJobTemplatesFuture

	ListJobs(ctx workflow.Context, input *mediaconvert.ListJobsInput) (*mediaconvert.ListJobsOutput, error)
	ListJobsAsync(ctx workflow.Context, input *mediaconvert.ListJobsInput) *MediaconvertListJobsFuture

	ListPresets(ctx workflow.Context, input *mediaconvert.ListPresetsInput) (*mediaconvert.ListPresetsOutput, error)
	ListPresetsAsync(ctx workflow.Context, input *mediaconvert.ListPresetsInput) *MediaconvertListPresetsFuture

	ListQueues(ctx workflow.Context, input *mediaconvert.ListQueuesInput) (*mediaconvert.ListQueuesOutput, error)
	ListQueuesAsync(ctx workflow.Context, input *mediaconvert.ListQueuesInput) *MediaconvertListQueuesFuture

	ListTagsForResource(ctx workflow.Context, input *mediaconvert.ListTagsForResourceInput) (*mediaconvert.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *mediaconvert.ListTagsForResourceInput) *MediaconvertListTagsForResourceFuture

	TagResource(ctx workflow.Context, input *mediaconvert.TagResourceInput) (*mediaconvert.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *mediaconvert.TagResourceInput) *MediaconvertTagResourceFuture

	UntagResource(ctx workflow.Context, input *mediaconvert.UntagResourceInput) (*mediaconvert.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *mediaconvert.UntagResourceInput) *MediaconvertUntagResourceFuture

	UpdateJobTemplate(ctx workflow.Context, input *mediaconvert.UpdateJobTemplateInput) (*mediaconvert.UpdateJobTemplateOutput, error)
	UpdateJobTemplateAsync(ctx workflow.Context, input *mediaconvert.UpdateJobTemplateInput) *MediaconvertUpdateJobTemplateFuture

	UpdatePreset(ctx workflow.Context, input *mediaconvert.UpdatePresetInput) (*mediaconvert.UpdatePresetOutput, error)
	UpdatePresetAsync(ctx workflow.Context, input *mediaconvert.UpdatePresetInput) *MediaconvertUpdatePresetFuture

	UpdateQueue(ctx workflow.Context, input *mediaconvert.UpdateQueueInput) (*mediaconvert.UpdateQueueOutput, error)
	UpdateQueueAsync(ctx workflow.Context, input *mediaconvert.UpdateQueueInput) *MediaconvertUpdateQueueFuture
}

type MediaConvertStub struct{}

func NewMediaConvertStub() MediaConvertClient {
	return &MediaConvertStub{}
}

type MediaconvertAssociateCertificateFuture struct {
	Future workflow.Future
}

func (r *MediaconvertAssociateCertificateFuture) Get(ctx workflow.Context) (*mediaconvert.AssociateCertificateOutput, error) {
	var output mediaconvert.AssociateCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertCancelJobFuture struct {
	Future workflow.Future
}

func (r *MediaconvertCancelJobFuture) Get(ctx workflow.Context) (*mediaconvert.CancelJobOutput, error) {
	var output mediaconvert.CancelJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertCreateJobFuture struct {
	Future workflow.Future
}

func (r *MediaconvertCreateJobFuture) Get(ctx workflow.Context) (*mediaconvert.CreateJobOutput, error) {
	var output mediaconvert.CreateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertCreateJobTemplateFuture struct {
	Future workflow.Future
}

func (r *MediaconvertCreateJobTemplateFuture) Get(ctx workflow.Context) (*mediaconvert.CreateJobTemplateOutput, error) {
	var output mediaconvert.CreateJobTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertCreatePresetFuture struct {
	Future workflow.Future
}

func (r *MediaconvertCreatePresetFuture) Get(ctx workflow.Context) (*mediaconvert.CreatePresetOutput, error) {
	var output mediaconvert.CreatePresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertCreateQueueFuture struct {
	Future workflow.Future
}

func (r *MediaconvertCreateQueueFuture) Get(ctx workflow.Context) (*mediaconvert.CreateQueueOutput, error) {
	var output mediaconvert.CreateQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertDeleteJobTemplateFuture struct {
	Future workflow.Future
}

func (r *MediaconvertDeleteJobTemplateFuture) Get(ctx workflow.Context) (*mediaconvert.DeleteJobTemplateOutput, error) {
	var output mediaconvert.DeleteJobTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertDeletePresetFuture struct {
	Future workflow.Future
}

func (r *MediaconvertDeletePresetFuture) Get(ctx workflow.Context) (*mediaconvert.DeletePresetOutput, error) {
	var output mediaconvert.DeletePresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertDeleteQueueFuture struct {
	Future workflow.Future
}

func (r *MediaconvertDeleteQueueFuture) Get(ctx workflow.Context) (*mediaconvert.DeleteQueueOutput, error) {
	var output mediaconvert.DeleteQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertDescribeEndpointsFuture struct {
	Future workflow.Future
}

func (r *MediaconvertDescribeEndpointsFuture) Get(ctx workflow.Context) (*mediaconvert.DescribeEndpointsOutput, error) {
	var output mediaconvert.DescribeEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertDisassociateCertificateFuture struct {
	Future workflow.Future
}

func (r *MediaconvertDisassociateCertificateFuture) Get(ctx workflow.Context) (*mediaconvert.DisassociateCertificateOutput, error) {
	var output mediaconvert.DisassociateCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertGetJobFuture struct {
	Future workflow.Future
}

func (r *MediaconvertGetJobFuture) Get(ctx workflow.Context) (*mediaconvert.GetJobOutput, error) {
	var output mediaconvert.GetJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertGetJobTemplateFuture struct {
	Future workflow.Future
}

func (r *MediaconvertGetJobTemplateFuture) Get(ctx workflow.Context) (*mediaconvert.GetJobTemplateOutput, error) {
	var output mediaconvert.GetJobTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertGetPresetFuture struct {
	Future workflow.Future
}

func (r *MediaconvertGetPresetFuture) Get(ctx workflow.Context) (*mediaconvert.GetPresetOutput, error) {
	var output mediaconvert.GetPresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertGetQueueFuture struct {
	Future workflow.Future
}

func (r *MediaconvertGetQueueFuture) Get(ctx workflow.Context) (*mediaconvert.GetQueueOutput, error) {
	var output mediaconvert.GetQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertListJobTemplatesFuture struct {
	Future workflow.Future
}

func (r *MediaconvertListJobTemplatesFuture) Get(ctx workflow.Context) (*mediaconvert.ListJobTemplatesOutput, error) {
	var output mediaconvert.ListJobTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertListJobsFuture struct {
	Future workflow.Future
}

func (r *MediaconvertListJobsFuture) Get(ctx workflow.Context) (*mediaconvert.ListJobsOutput, error) {
	var output mediaconvert.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertListPresetsFuture struct {
	Future workflow.Future
}

func (r *MediaconvertListPresetsFuture) Get(ctx workflow.Context) (*mediaconvert.ListPresetsOutput, error) {
	var output mediaconvert.ListPresetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertListQueuesFuture struct {
	Future workflow.Future
}

func (r *MediaconvertListQueuesFuture) Get(ctx workflow.Context) (*mediaconvert.ListQueuesOutput, error) {
	var output mediaconvert.ListQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *MediaconvertListTagsForResourceFuture) Get(ctx workflow.Context) (*mediaconvert.ListTagsForResourceOutput, error) {
	var output mediaconvert.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertTagResourceFuture struct {
	Future workflow.Future
}

func (r *MediaconvertTagResourceFuture) Get(ctx workflow.Context) (*mediaconvert.TagResourceOutput, error) {
	var output mediaconvert.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertUntagResourceFuture struct {
	Future workflow.Future
}

func (r *MediaconvertUntagResourceFuture) Get(ctx workflow.Context) (*mediaconvert.UntagResourceOutput, error) {
	var output mediaconvert.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertUpdateJobTemplateFuture struct {
	Future workflow.Future
}

func (r *MediaconvertUpdateJobTemplateFuture) Get(ctx workflow.Context) (*mediaconvert.UpdateJobTemplateOutput, error) {
	var output mediaconvert.UpdateJobTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertUpdatePresetFuture struct {
	Future workflow.Future
}

func (r *MediaconvertUpdatePresetFuture) Get(ctx workflow.Context) (*mediaconvert.UpdatePresetOutput, error) {
	var output mediaconvert.UpdatePresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaconvertUpdateQueueFuture struct {
	Future workflow.Future
}

func (r *MediaconvertUpdateQueueFuture) Get(ctx workflow.Context) (*mediaconvert.UpdateQueueOutput, error) {
	var output mediaconvert.UpdateQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) AssociateCertificate(ctx workflow.Context, input *mediaconvert.AssociateCertificateInput) (*mediaconvert.AssociateCertificateOutput, error) {
	var output mediaconvert.AssociateCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.AssociateCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) AssociateCertificateAsync(ctx workflow.Context, input *mediaconvert.AssociateCertificateInput) *MediaconvertAssociateCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.AssociateCertificate", input)
	return &MediaconvertAssociateCertificateFuture{Future: future}
}

func (a *MediaConvertStub) CancelJob(ctx workflow.Context, input *mediaconvert.CancelJobInput) (*mediaconvert.CancelJobOutput, error) {
	var output mediaconvert.CancelJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.CancelJob", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) CancelJobAsync(ctx workflow.Context, input *mediaconvert.CancelJobInput) *MediaconvertCancelJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.CancelJob", input)
	return &MediaconvertCancelJobFuture{Future: future}
}

func (a *MediaConvertStub) CreateJob(ctx workflow.Context, input *mediaconvert.CreateJobInput) (*mediaconvert.CreateJobOutput, error) {
	var output mediaconvert.CreateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) CreateJobAsync(ctx workflow.Context, input *mediaconvert.CreateJobInput) *MediaconvertCreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.CreateJob", input)
	return &MediaconvertCreateJobFuture{Future: future}
}

func (a *MediaConvertStub) CreateJobTemplate(ctx workflow.Context, input *mediaconvert.CreateJobTemplateInput) (*mediaconvert.CreateJobTemplateOutput, error) {
	var output mediaconvert.CreateJobTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.CreateJobTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) CreateJobTemplateAsync(ctx workflow.Context, input *mediaconvert.CreateJobTemplateInput) *MediaconvertCreateJobTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.CreateJobTemplate", input)
	return &MediaconvertCreateJobTemplateFuture{Future: future}
}

func (a *MediaConvertStub) CreatePreset(ctx workflow.Context, input *mediaconvert.CreatePresetInput) (*mediaconvert.CreatePresetOutput, error) {
	var output mediaconvert.CreatePresetOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.CreatePreset", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) CreatePresetAsync(ctx workflow.Context, input *mediaconvert.CreatePresetInput) *MediaconvertCreatePresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.CreatePreset", input)
	return &MediaconvertCreatePresetFuture{Future: future}
}

func (a *MediaConvertStub) CreateQueue(ctx workflow.Context, input *mediaconvert.CreateQueueInput) (*mediaconvert.CreateQueueOutput, error) {
	var output mediaconvert.CreateQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.CreateQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) CreateQueueAsync(ctx workflow.Context, input *mediaconvert.CreateQueueInput) *MediaconvertCreateQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.CreateQueue", input)
	return &MediaconvertCreateQueueFuture{Future: future}
}

func (a *MediaConvertStub) DeleteJobTemplate(ctx workflow.Context, input *mediaconvert.DeleteJobTemplateInput) (*mediaconvert.DeleteJobTemplateOutput, error) {
	var output mediaconvert.DeleteJobTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.DeleteJobTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) DeleteJobTemplateAsync(ctx workflow.Context, input *mediaconvert.DeleteJobTemplateInput) *MediaconvertDeleteJobTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.DeleteJobTemplate", input)
	return &MediaconvertDeleteJobTemplateFuture{Future: future}
}

func (a *MediaConvertStub) DeletePreset(ctx workflow.Context, input *mediaconvert.DeletePresetInput) (*mediaconvert.DeletePresetOutput, error) {
	var output mediaconvert.DeletePresetOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.DeletePreset", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) DeletePresetAsync(ctx workflow.Context, input *mediaconvert.DeletePresetInput) *MediaconvertDeletePresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.DeletePreset", input)
	return &MediaconvertDeletePresetFuture{Future: future}
}

func (a *MediaConvertStub) DeleteQueue(ctx workflow.Context, input *mediaconvert.DeleteQueueInput) (*mediaconvert.DeleteQueueOutput, error) {
	var output mediaconvert.DeleteQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.DeleteQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) DeleteQueueAsync(ctx workflow.Context, input *mediaconvert.DeleteQueueInput) *MediaconvertDeleteQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.DeleteQueue", input)
	return &MediaconvertDeleteQueueFuture{Future: future}
}

func (a *MediaConvertStub) DescribeEndpoints(ctx workflow.Context, input *mediaconvert.DescribeEndpointsInput) (*mediaconvert.DescribeEndpointsOutput, error) {
	var output mediaconvert.DescribeEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.DescribeEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) DescribeEndpointsAsync(ctx workflow.Context, input *mediaconvert.DescribeEndpointsInput) *MediaconvertDescribeEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.DescribeEndpoints", input)
	return &MediaconvertDescribeEndpointsFuture{Future: future}
}

func (a *MediaConvertStub) DisassociateCertificate(ctx workflow.Context, input *mediaconvert.DisassociateCertificateInput) (*mediaconvert.DisassociateCertificateOutput, error) {
	var output mediaconvert.DisassociateCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.DisassociateCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) DisassociateCertificateAsync(ctx workflow.Context, input *mediaconvert.DisassociateCertificateInput) *MediaconvertDisassociateCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.DisassociateCertificate", input)
	return &MediaconvertDisassociateCertificateFuture{Future: future}
}

func (a *MediaConvertStub) GetJob(ctx workflow.Context, input *mediaconvert.GetJobInput) (*mediaconvert.GetJobOutput, error) {
	var output mediaconvert.GetJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.GetJob", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) GetJobAsync(ctx workflow.Context, input *mediaconvert.GetJobInput) *MediaconvertGetJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.GetJob", input)
	return &MediaconvertGetJobFuture{Future: future}
}

func (a *MediaConvertStub) GetJobTemplate(ctx workflow.Context, input *mediaconvert.GetJobTemplateInput) (*mediaconvert.GetJobTemplateOutput, error) {
	var output mediaconvert.GetJobTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.GetJobTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) GetJobTemplateAsync(ctx workflow.Context, input *mediaconvert.GetJobTemplateInput) *MediaconvertGetJobTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.GetJobTemplate", input)
	return &MediaconvertGetJobTemplateFuture{Future: future}
}

func (a *MediaConvertStub) GetPreset(ctx workflow.Context, input *mediaconvert.GetPresetInput) (*mediaconvert.GetPresetOutput, error) {
	var output mediaconvert.GetPresetOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.GetPreset", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) GetPresetAsync(ctx workflow.Context, input *mediaconvert.GetPresetInput) *MediaconvertGetPresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.GetPreset", input)
	return &MediaconvertGetPresetFuture{Future: future}
}

func (a *MediaConvertStub) GetQueue(ctx workflow.Context, input *mediaconvert.GetQueueInput) (*mediaconvert.GetQueueOutput, error) {
	var output mediaconvert.GetQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.GetQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) GetQueueAsync(ctx workflow.Context, input *mediaconvert.GetQueueInput) *MediaconvertGetQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.GetQueue", input)
	return &MediaconvertGetQueueFuture{Future: future}
}

func (a *MediaConvertStub) ListJobTemplates(ctx workflow.Context, input *mediaconvert.ListJobTemplatesInput) (*mediaconvert.ListJobTemplatesOutput, error) {
	var output mediaconvert.ListJobTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.ListJobTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) ListJobTemplatesAsync(ctx workflow.Context, input *mediaconvert.ListJobTemplatesInput) *MediaconvertListJobTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.ListJobTemplates", input)
	return &MediaconvertListJobTemplatesFuture{Future: future}
}

func (a *MediaConvertStub) ListJobs(ctx workflow.Context, input *mediaconvert.ListJobsInput) (*mediaconvert.ListJobsOutput, error) {
	var output mediaconvert.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) ListJobsAsync(ctx workflow.Context, input *mediaconvert.ListJobsInput) *MediaconvertListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.ListJobs", input)
	return &MediaconvertListJobsFuture{Future: future}
}

func (a *MediaConvertStub) ListPresets(ctx workflow.Context, input *mediaconvert.ListPresetsInput) (*mediaconvert.ListPresetsOutput, error) {
	var output mediaconvert.ListPresetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.ListPresets", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) ListPresetsAsync(ctx workflow.Context, input *mediaconvert.ListPresetsInput) *MediaconvertListPresetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.ListPresets", input)
	return &MediaconvertListPresetsFuture{Future: future}
}

func (a *MediaConvertStub) ListQueues(ctx workflow.Context, input *mediaconvert.ListQueuesInput) (*mediaconvert.ListQueuesOutput, error) {
	var output mediaconvert.ListQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.ListQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) ListQueuesAsync(ctx workflow.Context, input *mediaconvert.ListQueuesInput) *MediaconvertListQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.ListQueues", input)
	return &MediaconvertListQueuesFuture{Future: future}
}

func (a *MediaConvertStub) ListTagsForResource(ctx workflow.Context, input *mediaconvert.ListTagsForResourceInput) (*mediaconvert.ListTagsForResourceOutput, error) {
	var output mediaconvert.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) ListTagsForResourceAsync(ctx workflow.Context, input *mediaconvert.ListTagsForResourceInput) *MediaconvertListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.ListTagsForResource", input)
	return &MediaconvertListTagsForResourceFuture{Future: future}
}

func (a *MediaConvertStub) TagResource(ctx workflow.Context, input *mediaconvert.TagResourceInput) (*mediaconvert.TagResourceOutput, error) {
	var output mediaconvert.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) TagResourceAsync(ctx workflow.Context, input *mediaconvert.TagResourceInput) *MediaconvertTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.TagResource", input)
	return &MediaconvertTagResourceFuture{Future: future}
}

func (a *MediaConvertStub) UntagResource(ctx workflow.Context, input *mediaconvert.UntagResourceInput) (*mediaconvert.UntagResourceOutput, error) {
	var output mediaconvert.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) UntagResourceAsync(ctx workflow.Context, input *mediaconvert.UntagResourceInput) *MediaconvertUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.UntagResource", input)
	return &MediaconvertUntagResourceFuture{Future: future}
}

func (a *MediaConvertStub) UpdateJobTemplate(ctx workflow.Context, input *mediaconvert.UpdateJobTemplateInput) (*mediaconvert.UpdateJobTemplateOutput, error) {
	var output mediaconvert.UpdateJobTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.UpdateJobTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) UpdateJobTemplateAsync(ctx workflow.Context, input *mediaconvert.UpdateJobTemplateInput) *MediaconvertUpdateJobTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.UpdateJobTemplate", input)
	return &MediaconvertUpdateJobTemplateFuture{Future: future}
}

func (a *MediaConvertStub) UpdatePreset(ctx workflow.Context, input *mediaconvert.UpdatePresetInput) (*mediaconvert.UpdatePresetOutput, error) {
	var output mediaconvert.UpdatePresetOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.UpdatePreset", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) UpdatePresetAsync(ctx workflow.Context, input *mediaconvert.UpdatePresetInput) *MediaconvertUpdatePresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.UpdatePreset", input)
	return &MediaconvertUpdatePresetFuture{Future: future}
}

func (a *MediaConvertStub) UpdateQueue(ctx workflow.Context, input *mediaconvert.UpdateQueueInput) (*mediaconvert.UpdateQueueOutput, error) {
	var output mediaconvert.UpdateQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws.mediaconvert.UpdateQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *MediaConvertStub) UpdateQueueAsync(ctx workflow.Context, input *mediaconvert.UpdateQueueInput) *MediaconvertUpdateQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws.mediaconvert.UpdateQueue", input)
	return &MediaconvertUpdateQueueFuture{Future: future}
}
